---
name: D3.js
slug: d3~7
text_format: markdown
generator: src:devdocs
version: '7'
copyright: |-
  © 2010–2023 Michael Bostock
  Licensed under the BSD License.
  https://github.com/d3/d3/blob/master/API.md
homepage: https://d3js.org/
generator_command: doc src:devdocs use d3~7

---
- name: adder.add()
  id: d3-array#adder_add
  summary: Adds the specified number to the adder’s current value and returns the adder
  belongs_to: array
  description: |-
    ###### *adder*.**add**(*number*)

    Adds the specified *number* to the adder’s current value and returns the adder.
- name: adder.valueOf()
  id: d3-array#adder_valueof
  summary: Returns the IEEE 754 double precision representation of the adder’s current value
  belongs_to: array
  description: |-
    ###### *adder*.**valueOf**()

    Returns the IEEE 754 double precision representation of the adder’s current value. Most useful as the short-hand notation `+adder`.

    ### Search

    Methods for searching arrays for a specific element.
- name: airy.radius()
  id: d3-geo-projection#airy_raidus
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *airy*.**radius**(\[*radius*\])

    Defaults to 90°.
- name: arc()
  id: d3-shape#_arc
  summary: Generates an arc for the given arguments
  belongs_to: shape
  description: |-
    ###### *arc*(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    Generates an arc for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. For example, with the default settings, an object with radii and angles is expected:

    ``` javascript
    const arc = d3.arc();

    arc({
      innerRadius: 0,
      outerRadius: 100,
      startAngle: 0,
      endAngle: Math.PI / 2
    }); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
    ```

    If the radii and angles are instead defined as constants, you can generate an arc without any arguments:

    ``` javascript
    const arc = d3.arc()
        .innerRadius(0)
        .outerRadius(100)
        .startAngle(0)
        .endAngle(Math.PI / 2);

    arc(); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
    ```

    If the arc generator has a [context](#arc_context), then the arc is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.
- name: arc.centroid()
  id: d3-shape#arc_centroid
  summary: Computes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments
  belongs_to: shape
  description: |-
    ###### *arc*.**centroid**(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    Computes the midpoint \[*x*, *y*\] of the center line of the arc that would be [generated](#_arc) by the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. To be consistent with the generated arc, the accessors must be deterministic, *i.e.*, return the same value given the same arguments. The midpoint is defined as ([startAngle](#arc_startAngle) + [endAngle](#arc_endAngle)) / 2 and ([innerRadius](#arc_innerRadius) + [outerRadius](#arc_outerRadius)) / 2. For example:

    Note that this is **not the geometric center** of the arc, which may be outside the arc; this method is merely a convenience for positioning labels.
- name: arc.context()
  id: d3-shape#arc_context
  summary: If context is specified, sets the context and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *context* is specified, sets the context and returns this arc generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated arc](#_arc) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated arc is returned.
- name: arc.cornerRadius()
  id: d3-shape#arc_cornerradius
  summary: If radius is specified, sets the corner radius to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**cornerRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *radius* is specified, sets the corner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current corner radius accessor, which defaults to:

    ``` javascript
    function cornerRadius() {
      return 0;
    }
    ```

    If the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius. For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded. The corner circles are shown in this diagram:

    The corner radius may not be larger than ([outerRadius](#arc_outerRadius) - [innerRadius](#arc_innerRadius)) / 2. In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect. This is occurs more often with the inner corners. See the [arc corners animation](https://observablehq.com/@d3/arc-corners) for illustration.
- name: arc.digits()
  id: d3-shape#arc_digits
  summary: If digits is specified, sets the maximum number of digits after the decimal separator and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**digits**(\[*digits*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this arc generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#arc_context) is null, as when this arc generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

    ### Pies

    The pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart; these angles can then be passed to an [arc generator](#arcs).
- name: arc.endAngle()
  id: d3-shape#arc_endangle
  summary: If angle is specified, sets the end angle to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**endAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *angle* is specified, sets the end angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:

    ``` javascript
    function endAngle(d) {
      return d.endAngle;
    }
    ```

    The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If \|endAngle - startAngle\| ≥ τ, a complete circle or annulus is generated rather than a sector.
- name: arc.innerRadius()
  id: d3-shape#arc_innerradius
  summary: If radius is specified, sets the inner radius to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**innerRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *radius* is specified, sets the inner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current inner radius accessor, which defaults to:

    ``` javascript
    function innerRadius(d) {
      return d.innerRadius;
    }
    ```

    Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a [sqrt scale](d3-scale#sqrt). More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.
- name: arc.outerRadius()
  id: d3-shape#arc_outerradius
  summary: If radius is specified, sets the outer radius to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**outerRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *radius* is specified, sets the outer radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current outer radius accessor, which defaults to:

    ``` javascript
    function outerRadius(d) {
      return d.outerRadius;
    }
    ```

    Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart, often in conjunction with a [sqrt scale](d3-scale#sqrt). More commonly, a constant outer radius is used for a pie or donut chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.
- name: arc.padAngle()
  id: d3-shape#arc_padangle
  summary: If angle is specified, sets the pad angle to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**padAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *angle* is specified, sets the pad angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:

    ``` javascript
    function padAngle() {
      return d && d.padAngle;
    }
    ```

    The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as [padRadius](#arc_padRadius) \* padAngle. This distance is subtracted equally from the [start](#arc_startAngle) and [end](#arc_endAngle) of the arc. If the arc forms a complete circle or annulus, as when \|endAngle - startAngle\| ≥ τ, the pad angle is ignored.

    If the [inner radius](#arc_innerRadius) or angular span is small relative to the pad angle, it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector. For this reason, padding is typically only applied to annular sectors (*i.e.*, when innerRadius is positive), as shown in this diagram:

    The recommended minimum inner radius when using padding is outerRadius \* padAngle / sin(θ), where θ is the angular span of the smallest arc before padding. For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels. See the [arc padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration.

    Often, the pad angle is not set directly on the arc generator, but is instead computed by the [pie generator](#pies) so as to ensure that the area of padded arcs is proportional to their value; see [*pie*.padAngle](#pie_padAngle). See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.
- name: arc.padRadius()
  id: d3-shape#arc_padradius
  summary: If radius is specified, sets the pad radius to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**padRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *radius* is specified, sets the pad radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt([innerRadius](#arc_innerRadius) \* innerRadius + [outerRadius](#arc_outerRadius) \* outerRadius). The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius \* [padAngle](#arc_padAngle).
- name: arc.startAngle()
  id: d3-shape#arc_startangle
  summary: If angle is specified, sets the start angle to the specified function or number and returns this arc generator
  belongs_to: shape
  description: |-
    ###### *arc*.**startAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    If *angle* is specified, sets the start angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:

    ``` javascript
    function startAngle(d) {
      return d.startAngle;
    }
    ```

    The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If \|endAngle - startAngle\| ≥ τ, a complete circle or annulus is generated rather than a sector.
- name: area()
  id: d3-shape#_area
  summary: Generates an area for the given array of data
  belongs_to: shape
  description: |-
    ###### *area*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    Generates an area for the given array of *data*. Depending on this area generator’s associated [curve](#area_curve), the given input *data* may need to be sorted by *x*-value before being passed to the area generator. If the area generator has a [context](#line_context), then the area is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.
- name: area.context()
  id: d3-shape#area_context
  summary: If context is specified, sets the context and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *context* is specified, sets the context and returns this area generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated area](#_area) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated area is returned.
- name: area.curve()
  id: d3-shape#area_curve
  summary: If curve is specified, sets the curve factory and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**curve**(\[*curve*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *curve* is specified, sets the [curve factory](#curves) and returns this area generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).
- name: area.defined()
  id: d3-shape#area_defined
  summary: If defined is specified, sets the defined accessor to the specified function or boolean and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**defined**(\[*defined*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *defined* is specified, sets the defined accessor to the specified function or boolean and returns this area generator. If *defined* is not specified, returns the current defined accessor, which defaults to:

    ``` javascript
    function defined() {
      return true;
    }
    ```

    The default accessor thus assumes that the input data is always defined. When an area is [generated](#_area), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x0](#area_x0), [x1](#area_x1), [y0](#area_y0) and [y1](#area_y1) accessors will subsequently be evaluated and the point will be added to the current area segment. Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point. As a result, the generated area may have several discrete segments. For example:

    Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.
- name: area.digits()
  id: d3-shape#area_digits
  summary: If digits is specified, sets the maximum number of digits after the decimal separator and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**digits**(\[*digits*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this area generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#area_context) is null, as when this area generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).
- name: area.lineX0()
  id: d3-shape#area_linex0
  summary: Returns a new line generator that has this area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *area*.**lineX0**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js) *area*.**lineY0**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).
- name: area.lineX1()
  id: d3-shape#area_linex1
  summary: Returns a new line generator that has this area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *area*.**lineX1**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x1*-accessor](#area_x1), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).
- name: area.lineY1()
  id: d3-shape#area_liney1
  summary: Returns a new line generator that has this area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *area*.**lineY1**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y1*-accessor](#area_y1).
- name: area.x()
  id: d3-shape#area_x
  summary: If x is specified, sets x0 to x and x1 to null and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *x* is specified, sets [x0](#area_x0) to *x* and [x1](#area_x1) to null and returns this area generator. If *x* is not specified, returns the current x0 accessor.
- name: area.x0()
  id: d3-shape#area_x0
  summary: If x is specified, sets the x0 accessor to the specified function or number and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**x0**(\[*x*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *x* is specified, sets the x0 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x0 accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```

    When an area is [generated](#_area), the x0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x0 accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](d3-scale#time-scales) and `y` is a [linear scale](d3-scale#linear-scales):

    ``` javascript
    const data = [
      {date: new Date(2007, 3, 24), value: 93.24},
      {date: new Date(2007, 3, 25), value: 95.35},
      {date: new Date(2007, 3, 26), value: 98.84},
      {date: new Date(2007, 3, 27), value: 99.92},
      {date: new Date(2007, 3, 30), value: 99.80},
      {date: new Date(2007, 4,  1), value: 99.47},
      …
    ];

    const area = d3.area()
        .x(d => x(d.date))
        .y1(d => y(d.value))
        .y0(y(0));
    ```
- name: area.x1()
  id: d3-shape#area_x1
  summary: If x is specified, sets the x1 accessor to the specified function or number and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**x1**(\[*x*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *x* is specified, sets the x1 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x1 accessor, which defaults to null, indicating that the previously-computed [x0](#area_x0) value should be reused for the x1 value.

    When an area is [generated](#_area), the x1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.
- name: area.y()
  id: d3-shape#area_y
  summary: If y is specified, sets y0 to y and y1 to null and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *y* is specified, sets [y0](#area_y0) to *y* and [y1](#area_y1) to null and returns this area generator. If *y* is not specified, returns the current y0 accessor.
- name: area.y0()
  id: d3-shape#area_y0
  summary: If y is specified, sets the y0 accessor to the specified function or number and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**y0**(\[*y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *y* is specified, sets the y0 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y0 accessor, which defaults to:

    ``` javascript
    function y() {
      return 0;
    }
    ```

    When an area is [generated](#_area), the y0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.
- name: area.y1()
  id: d3-shape#area_y1
  summary: If y is specified, sets the y1 accessor to the specified function or number and returns this area generator
  belongs_to: shape
  description: |-
    ###### *area*.**y1**(\[*y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    If *y* is specified, sets the y1 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y1 accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```

    A null accessor is also allowed, indicating that the previously-computed [y0](#area_y0) value should be reused for the y1 value. When an area is [generated](#_area), the y1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.
- name: areaRadial()
  id: d3-shape#_arearadial
  summary: Equivalent to area
  belongs_to: shape
  description: |-
    ###### *areaRadial*(*data*)

    Equivalent to [*area*](#_area).
- name: areaRadial.angle()
  id: d3-shape#arearadial_angle
  summary: Equivalent to area.x, except the accessor returns the angle in radians, with 0 at -y (12 o’clock)
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**angle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.x](#area_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).
- name: areaRadial.context()
  id: d3-shape#arearadial_context
  summary: Equivalent to line.context
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**context**(\[*context*\])

    Equivalent to [*line*.context](#line_context).
- name: areaRadial.curve()
  id: d3-shape#arearadial_curve
  summary: Equivalent to area.curve
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**curve**(\[*curve*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.curve](#area_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial areas because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial areas.
- name: areaRadial.defined()
  id: d3-shape#arearadial_defined
  summary: Equivalent to area.defined
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**defined**(\[*defined*\])

    Equivalent to [*area*.defined](#area_defined).
- name: areaRadial.endAngle()
  id: d3-shape#arearadial_endangle
  summary: Equivalent to area.x1, except the accessor returns the angle in radians, with 0 at -y (12 o’clock)
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**endAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.x1](#area_x1), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.
- name: areaRadial.innerRadius()
  id: d3-shape#arearadial_innerradius
  summary: null
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**innerRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.y0](#area_y0), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.
- name: areaRadial.lineEndAngle()
  id: d3-shape#arearadial_lineendangle
  summary: Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**lineEndAngle**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [end angle accessor](#areaRadial_endAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).
- name: areaRadial.lineOuterRadius()
  id: d3-shape#arearadial_lineouterradius
  summary: Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**lineOuterRadius**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [outer radius accessor](#areaRadial_outerRadius).

    ### Curves

    While [lines](#lines) are defined as a sequence of two-dimensional \[*x*, *y*\] points, and [areas](#areas) are similarly defined by a topline and a baseline, there remains the task of transforming this discrete representation into a continuous shape: *i.e.*, how to interpolate between the points. A variety of curves are provided for this purpose.

    Curves are typically not constructed or used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). For example:

    ``` javascript
    const line = d3.line(d => d.date, d => d.value)
        .curve(d3.curveCatmullRom.alpha(0.5));
    ```
- name: areaRadial.lineStartAngle()
  id: d3-shape#arearadial_linestartangle
  summary: Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**lineStartAngle**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js) *areaRadial*.**lineInnerRadius**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).
- name: areaRadial.outerRadius()
  id: d3-shape#arearadial_outerradius
  summary: null
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**outerRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.y1](#area_y1), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.
- name: areaRadial.radius()
  id: d3-shape#arearadial_radius
  summary: null
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.y](#area_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.
- name: areaRadial.startAngle()
  id: d3-shape#arearadial_startangle
  summary: Equivalent to area.x0, except the accessor returns the angle in radians, with 0 at -y (12 o’clock)
  belongs_to: shape
  description: |-
    ###### *areaRadial*.**startAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Equivalent to [*area*.x0](#area_x0), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.
- name: armadillo.parallel()
  id: d3-geo-projection#armadillo_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *armadillo*.**parallel**(\[*parallel*\])

    Defaults to 20°.
- name: array
  id: d3-array
  summary: Data in JavaScript is often represented by an iterable (such as an array, set or generator), and so iterable manipulation is a common task when analyzing or visualizing data
  description: "# d3-array\n\nData in JavaScript is often represented by an iterable (such as an [array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array), [set](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set) or [generator](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator)), and so iterable manipulation is a common task when analyzing or visualizing data. For example, you might take a contiguous slice (subset) of an array, filter an array using a predicate function, or map an array to a parallel set of values using a transform function. Before looking at the methods that d3-array provides, familiarize yourself with the powerful [array methods built-in to JavaScript](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\nJavaScript includes **mutation methods** that modify the array:\n\n- [*array*.pop](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) - Remove the last element from the array.\n- [*array*.push](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/push) - Add one or more elements to the end of the array.\n- [*array*.reverse](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) - Reverse the order of the elements of the array.\n- [*array*.shift](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) - Remove the first element from the array.\n- [*array*.sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) - Sort the elements of the array.\n- [*array*.splice](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) - Add or remove elements from the array.\n- [*array*.unshift](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) - Add one or more elements to the front of the array.\n\nThere are also **access methods** that return some representation of the array:\n\n- [*array*.concat](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) - Join the array with other array(s) or value(s).\n- [*array*.join](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/join) - Join all elements of the array into a string.\n- [*array*.slice](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) - Extract a section of the array.\n- [*array*.indexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) - Find the first occurrence of a value within the array.\n- [*array*.lastIndexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) - Find the last occurrence of a value within the array.\n\nAnd finally **iteration methods** that apply functions to elements in the array:\n\n- [*array*.filter](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) - Create a new array with only the elements for which a predicate is true.\n- [*array*.forEach](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) - Call a function for each element in the array.\n- [*array*.every](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/every) - See if every element in the array satisfies a predicate.\n- [*array*.map](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map) - Create a new array with the result of calling a function on every element in the array.\n- [*array*.some](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/some) - See if at least one element in the array satisfies a predicate.\n- [*array*.reduce](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) - Apply a function to reduce the array to a single value (from left-to-right).\n- [*array*.reduceRight](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) - Apply a function to reduce the array to a single value (from right-to-left).\n\n## Installing\n\nIf you use npm, `npm install d3-array`. You can also download the [latest release on GitHub](https://github.com/d3/d3-array/releases/latest). For vanilla HTML in modern browsers, import d3-array from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {min} from \"https://cdn.skypack.dev/d3-array@3\";\n\nconst m = min(array);\n\n</script>\n```\n\nFor legacy environments, you can load d3-array’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script>\n\nconst m = d3.min(array);\n\n</script>\n```\n\n## API Reference\n\n- [Statistics](#statistics)\n- [Search](#search)\n- [Transformations](#transformations)\n- [Iterables](#iterables)\n- [Sets](#sets)\n- [Bins](#bins)\n- [Interning](#interning)\n\n### Statistics\n\nMethods for computing basic summary statistics.\n\n###### d3.**min**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/min.js), [Examples](https://observablehq.com/@d3/d3-extent)\n\nReturns the minimum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the minimum value.\n\nUnlike the built-in [Math.min](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/min), this method ignores undefined, null and NaN values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the minimum of the strings \\[“20”, “3”\\] is “20”, while the minimum of the numbers \\[20, 3\\] is 3.\n\nSee also [extent](#extent).\n\n###### d3.**minIndex**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/minIndex.js), [Examples](https://observablehq.com/@d3/d3-extent)\n\nReturns the index of the minimum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns -1. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the minimum value.\n\nUnlike the built-in [Math.min](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/min), this method ignores undefined, null and NaN values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the minimum of the strings \\[“20”, “3”\\] is “20”, while the minimum of the numbers \\[20, 3\\] is 3.\n\n###### d3.**max**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/max.js), [Examples](https://observablehq.com/@d3/d3-extent)\n\nReturns the maximum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the maximum value.\n\nUnlike the built-in [Math.max](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/max), this method ignores undefined values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the maximum of the strings \\[“20”, “3”\\] is “3”, while the maximum of the numbers \\[20, 3\\] is 20.\n\nSee also [extent](#extent).\n\n###### d3.**maxIndex**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/maxIndex.js), [Examples](https://observablehq.com/@d3/d3-extent)\n\nReturns the index of the maximum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns -1. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the maximum value.\n\nUnlike the built-in [Math.max](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/max), this method ignores undefined values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the maximum of the strings \\[“20”, “3”\\] is “3”, while the maximum of the numbers \\[20, 3\\] is 20.\n\n###### d3.**extent**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/extent.js), [Examples](https://observablehq.com/@d3/d3-extent)\n\nReturns the [minimum](#min) and [maximum](#max) value in the given *iterable* using natural order. If the iterable contains no comparable values, returns \\[undefined, undefined\\]. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the extent.\n\n###### d3.**mode**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/mode.js), [Examples](https://observablehq.com/@d3/d3-mode)\n\nReturns the mode of the given *iterable*, *i.e.* the value which appears the most often. In case of equality, returns the first of the relevant values. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the mode. This method ignores undefined, null and NaN values; this is useful for ignoring missing data.\n\n###### d3.**sum**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/sum.js), [Examples](https://observablehq.com/@d3/d3-sum)\n\nReturns the sum of the given *iterable* of numbers. If the iterable contains no numbers, returns 0. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the sum. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**mean**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/mean.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nReturns the mean of the given *iterable* of numbers. If the iterable contains no numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the mean. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**median**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/median.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nReturns the median of the given *iterable* of numbers using the [R-7 method](https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample). If the iterable contains no numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the median. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**medianIndex**(*array*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/median.js)\n\nSimilar to *median*, but returns the index of the element to the left of the median.\n\n###### d3.**cumsum**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/cumsum.js), [Examples](https://observablehq.com/@d3/d3-cumsum)\n\nReturns the cumulative sum of the given *iterable* of numbers, as a Float64Array of the same length. If the iterable contains no numbers, returns zeros. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the cumulative sum. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**quantile**(*iterable*, *p*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nReturns the *p*-quantile of the given *iterable* of numbers, where *p* is a number in the range \\[0, 1\\]. For example, the median can be computed using *p* = 0.5, the first quartile at *p* = 0.25, and the third quartile at *p* = 0.75. This particular implementation uses the [R-7 method](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population), which is the default for the R programming language and Excel. For example:\n\n``` javascript\nvar a = [0, 10, 30];\nd3.quantile(a, 0); // 0\nd3.quantile(a, 0.5); // 10\nd3.quantile(a, 1); // 30\nd3.quantile(a, 0.25); // 5\nd3.quantile(a, 0.75); // 20\nd3.quantile(a, 0.1); // 2\n```\n\nAn optional *accessor* function may be specified, which is equivalent to calling *array*.map(*accessor*) before computing the quantile.\n\n###### d3.**quantileIndex**(*array*, *p*\\[, *accessor*\\]) [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js \"Source\")\n\nSimilar to *quantile*, but returns the index to the left of *p*.\n\n###### d3.**quantileSorted**(*array*, *p*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nSimilar to *quantile*, but expects the input to be a **sorted** *array* of values. In contrast with *quantile*, the accessor is only called on the elements needed to compute the quantile.\n\n###### d3.**rank**(*iterable*\\[, *comparator*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/rank.js), [Examples](https://observablehq.com/@d3/rank) d3.**rank**(*iterable*\\[, *accessor*\\])\n\nReturns an array with the rank of each value in the *iterable*, *i.e.* the zero-based index of the value when the iterable is sorted. Nullish values are sorted to the end and ranked NaN. An optional *comparator* or *accessor* function may be specified; the latter is equivalent to calling *array*.map(*accessor*) before computing the ranks. If *comparator* is not specified, it defaults to [ascending](#ascending). Ties (equivalent values) all get the same rank, defined as the first time the value is found.\n\n``` javascript\nd3.rank([{x: 1}, {}, {x: 2}, {x: 0}], d => d.x); // [1, NaN, 2, 0]\nd3.rank([\"b\", \"c\", \"b\", \"a\"]); // [1, 3, 1, 0]\nd3.rank([1, 2, 3], d3.descending); // [2, 1, 0]\n```\n\n###### d3.**variance**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/variance.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nReturns an [unbiased estimator of the population variance](http://mathworld.wolfram.com/SampleVariance.html) of the given *iterable* of numbers using [Welford’s algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm). If the iterable has fewer than two numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the variance. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**deviation**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/deviation.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)\n\nReturns the standard deviation, defined as the square root of the [bias-corrected variance](#variance), of the given *iterable* of numbers. If the iterable has fewer than two numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the standard deviation. This method ignores undefined and NaN values; this is useful for ignoring missing data.\n\n###### d3.**fsum**(\\[*values*\\]\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/fsum.js), [Examples](https://observablehq.com/@d3/d3-fsum)\n\nReturns a full precision summation of the given *values*.\n\n``` javascript\nd3.fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]); // 1\nd3.sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]); // 0.9999999999999999\n```\n\nAlthough slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses [d3.Adder](#adder).\n\n###### d3.**fcumsum**(\\[*values*\\]\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/fsum.js), [Examples](https://observablehq.com/@d3/d3-fcumsum)\n\nReturns a full precision cumulative sum of the given *values*.\n\n``` javascript\nd3.fcumsum([1, 1e-14, -1]); // [1, 1.00000000000001, 1e-14]\nd3.cumsum([1, 1e-14, -1]); // [1, 1.00000000000001, 9.992e-15]\n```\n\nAlthough slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses [d3.Adder](#adder).\n\n###### new d3.**Adder**()\n\nCreates a full precision adder for [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) floating point numbers, setting its initial value to 0.\n\n###### *adder*.**add**(*number*)\n\nAdds the specified *number* to the adder’s current value and returns the adder.\n\n###### *adder*.**valueOf**()\n\nReturns the IEEE 754 double precision representation of the adder’s current value. Most useful as the short-hand notation `+adder`.\n\n### Search\n\nMethods for searching arrays for a specific element.\n\n###### d3.**least**(*iterable*\\[, *comparator*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/least.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**least**(*iterable*\\[, *accessor*\\])\n\nReturns the least element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns undefined. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:\n\n``` javascript\nconst array = [{foo: 42}, {foo: 91}];\nd3.least(array, (a, b) => a.foo - b.foo); // {foo: 42}\nd3.least(array, (a, b) => b.foo - a.foo); // {foo: 91}\nd3.least(array, a => a.foo); // {foo: 42}\n```\n\nThis function is similar to [min](#min), except it allows the use of a comparator rather than an accessor.\n\n###### d3.**leastIndex**(*iterable*\\[, *comparator*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/leastIndex.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**leastIndex**(*iterable*\\[, *accessor*\\])\n\nReturns the index of the least element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns -1. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:\n\n``` javascript\nconst array = [{foo: 42}, {foo: 91}];\nd3.leastIndex(array, (a, b) => a.foo - b.foo); // 0\nd3.leastIndex(array, (a, b) => b.foo - a.foo); // 1\nd3.leastIndex(array, a => a.foo); // 0\n```\n\nThis function is similar to [minIndex](#minIndex), except it allows the use of a comparator rather than an accessor.\n\n###### d3.**greatest**(*iterable*\\[, *comparator*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/greatest.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**greatest**(*iterable*\\[, *accessor*\\])\n\nReturns the greatest element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns undefined. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:\n\n``` javascript\nconst array = [{foo: 42}, {foo: 91}];\nd3.greatest(array, (a, b) => a.foo - b.foo); // {foo: 91}\nd3.greatest(array, (a, b) => b.foo - a.foo); // {foo: 42}\nd3.greatest(array, a => a.foo); // {foo: 91}\n```\n\nThis function is similar to [max](#max), except it allows the use of a comparator rather than an accessor.\n\n###### d3.**greatestIndex**(*iterable*\\[, *comparator*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/greatestIndex.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**greatestIndex**(*iterable*\\[, *accessor*\\])\n\nReturns the index of the greatest element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns -1. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:\n\n``` javascript\nconst array = [{foo: 42}, {foo: 91}];\nd3.greatestIndex(array, (a, b) => a.foo - b.foo); // 1\nd3.greatestIndex(array, (a, b) => b.foo - a.foo); // 0\nd3.greatestIndex(array, a => a.foo); // 1\n```\n\nThis function is similar to [maxIndex](#maxIndex), except it allows the use of a comparator rather than an accessor.\n\n###### d3.**bisectLeft**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js)\n\nReturns the insertion point for *x* in *array* to maintain sorted order. The arguments *lo* and *hi* may be used to specify a subset of the array which should be considered; by default the entire array is used. If *x* is already present in *array*, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first argument to [splice](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) assuming that *array* is already sorted. The returned insertion point *i* partitions the *array* into two halves so that all *v* \\< *x* for *v* in *array*.slice(*lo*, *i*) for the left side and all *v* \\>= *x* for *v* in *array*.slice(*i*, *hi*) for the right side.\n\n###### d3.**bisect**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js), [Examples](https://observablehq.com/@d3/d3-bisect) d3.**bisectRight**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\])\n\nSimilar to [bisectLeft](#bisectLeft), but returns an insertion point which comes after (to the right of) any existing entries of *x* in *array*. The returned insertion point *i* partitions the *array* into two halves so that all *v* \\<= *x* for *v* in *array*.slice(*lo*, *i*) for the left side and all *v* \\> *x* for *v* in *array*.slice(*i*, *hi*) for the right side.\n\n###### d3.**bisectCenter**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js), [Examples](https://observablehq.com/@d3/multi-line-chart)\n\nReturns the index of the value closest to *x* in the given *array* of numbers. The arguments *lo* (inclusive) and *hi* (exclusive) may be used to specify a subset of the array which should be considered; by default the entire array is used.\n\nSee [*bisector*.center](#bisector_center).\n\n###### d3.**bisector**(*accessor*) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js) d3.**bisector**(*comparator*)\n\nReturns a new bisector using the specified *accessor* or *comparator* function. This method can be used to bisect arrays of objects instead of being limited to simple arrays of primitives. For example, given the following array of objects:\n\n``` javascript\nvar data = [\n  {date: new Date(2011, 1, 1), value: 0.5},\n  {date: new Date(2011, 2, 1), value: 0.6},\n  {date: new Date(2011, 3, 1), value: 0.7},\n  {date: new Date(2011, 4, 1), value: 0.8}\n];\n```\n\nA suitable bisect function could be constructed as:\n\n``` javascript\nvar bisectDate = d3.bisector(function(d) { return d.date; }).right;\n```\n\nThis is equivalent to specifying a comparator:\n\n``` javascript\nvar bisectDate = d3.bisector(function(d, x) { return d.date - x; }).right;\n```\n\nAnd then applied as *bisectDate*(*array*, *date*), returning an index. Note that the comparator is always passed the search value *x* as the second argument. Use a comparator rather than an accessor if you want values to be sorted in an order different than natural order, such as in descending rather than ascending order.\n\n###### *bisector*.**left**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)\n\nEquivalent to [bisectLeft](#bisectLeft), but uses this bisector’s associated comparator.\n\n###### *bisector*.**right**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)\n\nEquivalent to [bisectRight](#bisectRight), but uses this bisector’s associated comparator.\n\n###### *bisector*.**center**(*array*, *x*\\[, *lo*\\[, *hi*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)\n\nReturns the index of the closest value to *x* in the given sorted *array*. This expects that the bisector’s associated accessor returns a quantitative value, or that the bisector’s associated comparator returns a signed distance; otherwise, this method is equivalent to *bisector*.left.\n\n###### d3.**quickselect**(*array*, *k*, *left* = 0, *right* = *array*.length - 1, *compare* = ascending) · [Source](https://github.com/d3/d3-array/blob/main/src/quickselect.js), [Examples](https://observablehq.com/@d3/d3-quickselect)\n\nSee [mourner/quickselect](https://github.com/mourner/quickselect).\n\n###### d3.**ascending**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/ascending.js), [Examples](https://observablehq.com/@d3/d3-ascending)\n\nReturns -1 if *a* is less than *b*, or 1 if *a* is greater than *b*, or 0. This is the comparator function for natural order, and can be used in conjunction with the built-in [*array*.sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method to arrange elements in ascending order. It is implemented as:\n\n``` javascript\nfunction ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n```\n\nNote that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.\n\n###### d3.**descending**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/descending.js), [Examples](https://observablehq.com/@d3/d3-ascending)\n\nReturns -1 if *a* is greater than *b*, or 1 if *a* is less than *b*, or 0. This is the comparator function for reverse natural order, and can be used in conjunction with the built-in array sort method to arrange elements in descending order. It is implemented as:\n\n``` javascript\nfunction descending(a, b) {\n  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n```\n\nNote that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.\n\n### Transformations\n\nMethods for transforming arrays and for generating new arrays.\n\n###### d3.**group**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)\n\nGroups the specified *iterable* of values into an [InternMap](#InternMap) from *key* to array of value. For example, given some data:\n\n``` javascript\ndata = [\n  {name: \"jim\",   amount: \"34.0\",   date: \"11/12/2015\"},\n  {name: \"carl\",  amount: \"120.11\", date: \"11/12/2015\"},\n  {name: \"stacy\", amount: \"12.01\",  date: \"01/04/2016\"},\n  {name: \"stacy\", amount: \"34.05\",  date: \"01/04/2016\"}\n]\n```\n\nTo group the data by name:\n\n``` javascript\nd3.group(data, d => d.name)\n```\n\nThis produces:\n\n``` javascript\nMap(3) {\n  \"jim\" => Array(1)\n  \"carl\" => Array(1)\n  \"stacy\" => Array(2)\n}\n```\n\nIf more than one *key* is specified, a nested InternMap is returned. For example:\n\n``` javascript\nd3.group(data, d => d.name, d => d.date)\n```\n\nThis produces:\n\n``` javascript\nMap(3) {\n  \"jim\" => Map(1) {\n    \"11/12/2015\" => Array(1)\n  }\n  \"carl\" => Map(1) {\n    \"11/12/2015\" => Array(1)\n  }\n  \"stacy\" => Map(1) {\n    \"01/04/2016\" => Array(2)\n  }\n}\n```\n\nTo convert a Map to an Array, use [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from). For example:\n\n``` javascript\nArray.from(d3.group(data, d => d.name))\n```\n\nThis produces:\n\n``` javascript\n[\n  [\"jim\", Array(1)],\n  [\"carl\", Array(1)],\n  [\"stacy\", Array(2)]\n]\n```\n\nYou can also simultaneously convert the \\[*key*, *value*\\] to some other representation by passing a map function to Array.from:\n\n``` javascript\nArray.from(d3.group(data, d => d.name), ([key, value]) => ({key, value}))\n```\n\nThis produces:\n\n``` javascript\n[\n  {key: \"jim\", value: Array(1)},\n  {key: \"carl\", value: Array(1)},\n  {key: \"stacy\", value: Array(2)}\n]\n```\n\n[*selection*.data](https://github.com/d3/d3-selection/blob/main/README.md#selection_data) accepts iterables directly, meaning that you can use a Map (or Set or other iterable) to perform a data join without first needing to convert to an array.\n\n###### d3.**groups**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)\n\nEquivalent to [group](#group), but returns nested arrays instead of nested maps.\n\n###### d3.**flatGroup**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-flatgroup)\n\nEquivalent to [group](#group), but returns a flat array of \\[*key0*, *key1*, …, *values*\\] instead of nested maps.\n\n###### d3.**index**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group)\n\nEquivalent to [group](#group) but returns a unique value per compound key instead of an array, throwing if the key is not unique.\n\nFor example, given the data defined above,\n\n``` javascript\nd3.index(data, d => d.amount)\n```\n\nreturns\n\n``` javascript\nMap(4) {\n  \"34.0\" => Object {name: \"jim\", amount: \"34.0\", date: \"11/12/2015\"}\n  \"120.11\" => Object {name: \"carl\", amount: \"120.11\", date: \"11/12/2015\"}\n  \"12.01\" => Object {name: \"stacy\", amount: \"12.01\", date: \"01/04/2016\"}\n  \"34.05\" => Object {name: \"stacy\", amount: \"34.05\", date: \"01/04/2016\"}\n}\n```\n\nOn the other hand,\n\n``` javascript\nd3.index(data, d => d.name)\n```\n\nthrows an error because two objects share the same name.\n\n###### d3.**indexes**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group)\n\nEquivalent to [index](#index), but returns nested arrays instead of nested maps.\n\n###### d3.**rollup**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)\n\n[Groups](#group) and reduces the specified *iterable* of values into an InternMap from *key* to value. For example, given some data:\n\n``` javascript\ndata = [\n  {name: \"jim\",   amount: \"34.0\",   date: \"11/12/2015\"},\n  {name: \"carl\",  amount: \"120.11\", date: \"11/12/2015\"},\n  {name: \"stacy\", amount: \"12.01\",  date: \"01/04/2016\"},\n  {name: \"stacy\", amount: \"34.05\",  date: \"01/04/2016\"}\n]\n```\n\nTo count the number of elements by name:\n\n``` javascript\nd3.rollup(data, v => v.length, d => d.name)\n```\n\nThis produces:\n\n``` javascript\nMap(3) {\n  \"jim\" => 1\n  \"carl\" => 1\n  \"stacy\" => 2\n}\n```\n\nIf more than one *key* is specified, a nested Map is returned. For example:\n\n``` javascript\nd3.rollup(data, v => v.length, d => d.name, d => d.date)\n```\n\nThis produces:\n\n``` javascript\nMap(3) {\n  \"jim\" => Map(1) {\n    \"11/12/2015\" => 1\n  }\n  \"carl\" => Map(1) {\n    \"11/12/2015\" => 1\n  }\n  \"stacy\" => Map(1) {\n    \"01/04/2016\" => 2\n  }\n}\n```\n\nTo convert a Map to an Array, use [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from). See [d3.group](#group) for examples.\n\n###### d3.**rollups**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)\n\nEquivalent to [rollup](#rollup), but returns nested arrays instead of nested maps.\n\n###### d3.**flatRollup**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-flatgroup)\n\nEquivalent to [rollup](#rollup), but returns a flat array of \\[*key0*, *key1*, …, *value*\\] instead of nested maps.\n\n###### d3.**groupSort**(*iterable*, *comparator*, *key*) · [Source](https://github.com/d3/d3-array/blob/main/src/groupSort.js), [Examples](https://observablehq.com/@d3/d3-groupsort) d3.**groupSort**(*iterable*, *accessor*, *key*)\n\nGroups the specified *iterable* of elements according to the specified *key* function, sorts the groups according to the specified *comparator*, and then returns an array of keys in sorted order. For example, if you had a table of barley yields for different varieties, sites, and years, to sort the barley varieties by ascending median yield:\n\n``` javascript\nd3.groupSort(barley, g => d3.median(g, d => d.yield), d => d.variety)\n```\n\nFor descending order, negate the group value:\n\n``` javascript\nd3.groupSort(barley, g => -d3.median(g, d => d.yield), d => d.variety)\n```\n\nIf a *comparator* is passed instead of an *accessor* (i.e., if the second argument is a function that takes exactly two arguments), it will be asked to compare two groups *a* and *b* and should return a negative value if *a* should be before *b*, a positive value if *a* should be after *b*, or zero for a partial ordering.\n\n###### d3.**count**(*iterable*\\[, *accessor*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/count.js), [Examples](https://observablehq.com/@d3/d3-count)\n\nReturns the number of valid number values (*i.e.*, not null, NaN, or undefined) in the specified *iterable*; accepts an accessor.\n\nFor example:\n\n``` javascript\nd3.count([{n: \"Alice\", age: NaN}, {n: \"Bob\", age: 18}, {n: \"Other\"}], d => d.age) // 1\n```\n\n###### d3.**cross**(*...iterables*\\[, *reducer*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/cross.js), [Examples](https://observablehq.com/@d3/d3-cross)\n\nReturns the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product) of the specified *iterables*. For example, if two iterables *a* and *b* are specified, for each element *i* in the iterable *a* and each element *j* in the iterable *b*, in order, invokes the specified *reducer* function passing the element *i* and element *j*. If a *reducer* is not specified, it defaults to a function which creates a two-element array for each pair:\n\n``` javascript\nfunction pair(a, b) {\n  return [a, b];\n}\n```\n\nFor example:\n\n``` javascript\nd3.cross([1, 2], [\"x\", \"y\"]); // returns [[1, \"x\"], [1, \"y\"], [2, \"x\"], [2, \"y\"]]\nd3.cross([1, 2], [\"x\", \"y\"], (a, b) => a + b); // returns [\"1x\", \"1y\", \"2x\", \"2y\"]\n```\n\n###### d3.**merge**(*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/merge.js), [Examples](https://observablehq.com/@d3/d3-merge)\n\nMerges the specified iterable of *iterables* into a single array. This method is similar to the built-in array concat method; the only difference is that it is more convenient when you have an array of arrays.\n\n``` javascript\nd3.merge([[1], [2, 3]]); // returns [1, 2, 3]\n```\n\n###### d3.**pairs**(*iterable*\\[, *reducer*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/pairs.js), [Examples](https://observablehq.com/@d3/d3-pairs)\n\nFor each adjacent pair of elements in the specified *iterable*, in order, invokes the specified *reducer* function passing the element *i* and element *i* - 1. If a *reducer* is not specified, it defaults to a function which creates a two-element array for each pair:\n\n``` javascript\nfunction pair(a, b) {\n  return [a, b];\n}\n```\n\nFor example:\n\n``` javascript\nd3.pairs([1, 2, 3, 4]); // returns [[1, 2], [2, 3], [3, 4]]\nd3.pairs([1, 2, 3, 4], (a, b) => b - a); // returns [1, 1, 1];\n```\n\nIf the specified iterable has fewer than two elements, returns the empty array.\n\n###### d3.**permute**(*source*, *keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/permute.js), [Examples](https://observablehq.com/@d3/d3-permute)\n\nReturns a permutation of the specified *source* object (or array) using the specified iterable of *keys*. The returned array contains the corresponding property of the source object for each key in *keys*, in order. For example:\n\n``` javascript\npermute([\"a\", \"b\", \"c\"], [1, 2, 0]); // returns [\"b\", \"c\", \"a\"]\n```\n\nIt is acceptable to have more keys than source elements, and for keys to be duplicated or omitted.\n\nThis method can also be used to extract the values from an object into an array with a stable order. Extracting keyed values in order can be useful for generating data arrays in nested selections. For example:\n\n``` javascript\nlet object = {yield: 27, variety: \"Manchuria\", year: 1931, site: \"University Farm\"};\nlet fields = [\"site\", \"variety\", \"yield\"];\n\nd3.permute(object, fields); // returns [\"University Farm\", \"Manchuria\", 27]\n```\n\n###### d3.**shuffle**(*array*\\[, *start*\\[, *stop*\\]\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/shuffle.js), [Examples](https://observablehq.com/@d3/d3-shuffle)\n\nRandomizes the order of the specified *array* in-place using the [Fisher–Yates shuffle](https://bost.ocks.org/mike/shuffle/) and returns the *array*. If *start* is specified, it is the starting index (inclusive) of the *array* to shuffle; if *start* is not specified, it defaults to zero. If *stop* is specified, it is the ending index (exclusive) of the *array* to shuffle; if *stop* is not specified, it defaults to *array*.length. For example, to shuffle the first ten elements of the *array*: shuffle(*array*, 0, 10).\n\n###### d3.**shuffler**(*random*) · [Source](https://github.com/d3/d3-array/blob/main/src/shuffle.js)\n\nReturns a [shuffle function](#shuffle) given the specified random source. For example, using [d3.randomLcg](https://github.com/d3/d3-random/blob/main/README.md#randomLcg):\n\n``` javascript\nconst random = d3.randomLcg(0.9051667019185816);\nconst shuffle = d3.shuffler(random);\n\nshuffle([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]); // returns [7, 4, 5, 3, 9, 0, 6, 1, 2, 8]\n```\n\n###### d3.**ticks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)\n\nReturns an array of approximately *count* + 1 uniformly-spaced, nicely-rounded values between *start* and *stop* (inclusive). Each value is a power of ten multiplied by 1, 2 or 5. See also [d3.tickIncrement](#tickIncrement), [d3.tickStep](#tickStep) and [*linear*.ticks](https://github.com/d3/d3-scale/blob/main/README.md#linear_ticks).\n\nTicks are inclusive in the sense that they may include the specified *start* and *stop* values if (and only if) they are exact, nicely-rounded values consistent with the inferred [step](#tickStep). More formally, each returned tick *t* satisfies *start* ≤ *t* and *t* ≤ *stop*.\n\n###### d3.**tickIncrement**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)\n\nLike [d3.tickStep](#tickStep), except requires that *start* is always less than or equal to *stop*, and if the tick step for the given *start*, *stop* and *count* would be less than one, returns the negative inverse tick step instead. This method is always guaranteed to return an integer, and is used by [d3.ticks](#ticks) to guarantee that the returned tick values are represented as precisely as possible in IEEE 754 floating point.\n\n###### d3.**tickStep**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)\n\nReturns the difference between adjacent tick values if the same arguments were passed to [d3.ticks](#ticks): a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5. Note that due to the limited precision of IEEE 754 floating point, the returned value may not be exact decimals; use [d3-format](d3-format) to format numbers for human consumption.\n\n###### d3.**nice**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/nice.js)\n\nReturns a new interval \\[*niceStart*, *niceStop*\\] covering the given interval \\[*start*, *stop*\\] and where *niceStart* and *niceStop* are guaranteed to align with the corresponding [tick step](#tickStep). Like [d3.tickIncrement](#tickIncrement), this requires that *start* is less than or equal to *stop*.\n\n###### d3.**range**(\\[*start*, \\]*stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/range.js), [Examples](https://observablehq.com/@d3/d3-range)\n\nReturns an array containing an arithmetic progression, similar to the Python built-in [range](http://docs.python.org/library/functions.html#range). This method is often used to iterate over a sequence of uniformly-spaced numeric values, such as the indexes of an array or the ticks of a linear scale. (See also [d3.ticks](#ticks) for nicely-rounded values.)\n\nIf *step* is omitted, it defaults to 1. If *start* is omitted, it defaults to 0. The *stop* value is exclusive; it is not included in the result. If *step* is positive, the last element is the largest *start* + *i* \\* *step* less than *stop*; if *step* is negative, the last element is the smallest *start* + *i* \\* *step* greater than *stop*. If the returned array would contain an infinite number of values, an empty range is returned.\n\nThe arguments are not required to be integers; however, the results are more predictable if they are. The values in the returned array are defined as *start* + *i* \\* *step*, where *i* is an integer from zero to one minus the total number of elements in the returned array. For example:\n\n``` javascript\nd3.range(0, 1, 0.2) // [0, 0.2, 0.4, 0.6000000000000001, 0.8]\n```\n\nThis unexpected behavior is due to IEEE 754 double-precision floating point, which defines 0.2 \\* 3 = 0.6000000000000001. Use [d3-format](d3-format) to format numbers for human consumption with appropriate rounding; see also [linear.tickFormat](https://github.com/d3/d3-scale/blob/main/README.md#linear_tickFormat) in [d3-scale](d3-scale).\n\nLikewise, if the returned array should have a specific length, consider using [array.map](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on an integer range. For example:\n\n``` javascript\nd3.range(0, 1, 1 / 49); // BAD: returns 50 elements!\nd3.range(49).map(function(d) { return d / 49; }); // GOOD: returns 49 elements.\n```\n\n###### d3.**transpose**(*matrix*) · [Source](https://github.com/d3/d3-array/blob/main/src/transpose.js), [Examples](https://observablehq.com/@d3/d3-transpose)\n\nUses the [zip](#zip) operator as a two-dimensional [matrix transpose](http://en.wikipedia.org/wiki/Transpose).\n\n###### d3.**zip**(*arrays…*) · [Source](https://github.com/d3/d3-array/blob/main/src/zip.js), [Examples](https://observablehq.com/@d3/d3-transpose)\n\nReturns an array of arrays, where the *i*th array contains the *i*th element from each of the argument *arrays*. The returned array is truncated in length to the shortest array in *arrays*. If *arrays* contains only a single array, the returned array contains one-element arrays. With no arguments, the returned array is empty.\n\n``` javascript\nd3.zip([1, 2], [3, 4]); // returns [[1, 3], [2, 4]]\n```\n\n#### Blur\n\n###### d3.**blur**(*data*, *radius*) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blur)\n\nBlurs an array of *data* in-place by applying three iterations of a moving average transform, for a fast approximation of a gaussian kernel of the given *radius*, a non-negative number, and returns the array.\n\n``` javascript\nconst randomWalk = d3.cumsum({length: 1000}, () => Math.random() - 0.5);\nblur(randomWalk, 5);\n```\n\nCopy the data if you don’t want to smooth it in-place:\n\n``` javascript\nconst smoothed = blur(randomWalk.slice(), 5);\n```\n\n###### d3.**blur2**({*data*, *width*\\[, *height*\\]}, *rx*\\[, *ry*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blur)\n\nBlurs a matrix of the given *width* and *height* in-place, by applying an horizontal blur of radius *rx* and a vertical blur or radius *ry* (which defaults to *rx*). The matrix *data* is stored in a flat array, used to determine the *height* if it is not specified. Returns the blurred {data, width, height}.\n\n``` javascript\ndata = [\n  1, 0, 0,\n  0, 0, 0,\n  0, 0, 1\n];\nblur2({data, width: 3}, 1);\n```\n\n###### d3.**blurImage**(*imageData*, *rx*\\[, *ry*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blurimage)\n\nBlurs an [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) structure in-place, blurring each of the RGBA layers independently by applying an horizontal blur of radius *rx* and a vertical blur or radius *ry* (which defaults to *rx*). Returns the blurred ImageData.\n\n``` javascript\nconst imData = context.getImageData(0, 0, width, height);\nblurImage(imData, 5);\n```\n\n### Iterables\n\nThese are equivalent to built-in array methods, but work with any iterable including Map, Set, and Generator.\n\n###### d3.**every**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/every.js)\n\nReturns true if the given *test* function returns true for every value in the given *iterable*. This method returns as soon as *test* returns a non-truthy value or all values are iterated over. Equivalent to [*array*.every](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every):\n\n``` javascript\nd3.every(new Set([1, 3, 5, 7]), x => x & 1) // true\n```\n\n###### d3.**some**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/some.js)\n\nReturns true if the given *test* function returns true for any value in the given *iterable*. This method returns as soon as *test* returns a truthy value or all values are iterated over. Equivalent to [*array*.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some):\n\n``` javascript\nd3.some(new Set([0, 2, 3, 4]), x => x & 1) // true\n```\n\n###### d3.**filter**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/filter.js)\n\nReturns a new array containing the values from *iterable*, in order, for which the given *test* function returns true. Equivalent to [*array*.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter):\n\n``` javascript\nd3.filter(new Set([0, 2, 3, 4]), x => x & 1) // [3]\n```\n\n###### d3.**map**(*iterable*, *mapper*) · [Source](https://github.com/d3/d3-array/blob/main/src/map.js)\n\nReturns a new array containing the mapped values from *iterable*, in order, as defined by given *mapper* function. Equivalent to [*array*.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from):\n\n``` javascript\nd3.map(new Set([0, 2, 3, 4]), x => x & 1) // [0, 0, 1, 0]\n```\n\n###### d3.**reduce**(*iterable*, *reducer*\\[, *initialValue*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/reduce.js)\n\nReturns the reduced value defined by given *reducer* function, which is repeatedly invoked for each value in *iterable*, being passed the current reduced value and the next value. Equivalent to [*array*.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce):\n\n``` javascript\nd3.reduce(new Set([0, 2, 3, 4]), (p, v) => p + v, 0) // 9\n```\n\n###### d3.**reverse**(*iterable*) · [Source](https://github.com/d3/d3-array/blob/main/src/reverse.js)\n\nReturns an array containing the values in the given *iterable* in reverse order. Equivalent to [*array*.reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse), except that it does not mutate the given *iterable*:\n\n``` javascript\nd3.reverse(new Set([0, 2, 3, 1])) // [1, 3, 2, 0]\n```\n\n###### d3.**sort**(*iterable*, *comparator* = d3.ascending) · [Source](https://github.com/d3/d3-array/blob/main/src/sort.js) d3.**sort**(*iterable*, ...*accessors*)\n\nReturns an array containing the values in the given *iterable* in the sorted order defined by the given *comparator* or *accessor* function. If *comparator* is not specified, it defaults to [d3.ascending](#ascending). Equivalent to [*array*.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), except that it does not mutate the given *iterable*, and the comparator defaults to natural order instead of lexicographic order:\n\n``` javascript\nd3.sort(new Set([0, 2, 3, 1])) // [0, 1, 2, 3]\n```\n\nIf an *accessor* (a function that does not take exactly two arguments) is specified,\n\n``` javascript\nd3.sort(data, d => d.value)\n```\n\nit is equivalent to a *comparator* using [natural order](#ascending):\n\n``` javascript\nd3.sort(data, (a, b) => d3.ascending(a.value, b.value))\n```\n\nThe *accessor* is only invoked once per element, and thus the returned sorted order is consistent even if the accessor is nondeterministic.\n\nMultiple accessors may be specified to break ties:\n\n``` javascript\nd3.sort(points, ({x}) => x, ({y}) => y)\n```\n\nThis is equivalent to:\n\n``` javascript\nd3.sort(data, (a, b) => d3.ascending(a.x, b.x) || d3.ascending(a.y, b.y))\n```\n\n### Sets\n\nThis methods implement basic set operations for any iterable.\n\n###### d3.**difference**(*iterable*, ...*others*) · [Source](https://github.com/d3/d3-array/blob/main/src/difference.js)\n\nReturns a new InternSet containing every value in *iterable* that is not in any of the *others* iterables.\n\n``` javascript\nd3.difference([0, 1, 2, 0], [1]) // Set {0, 2}\n```\n\n###### d3.**union**(...*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/union.js)\n\nReturns a new InternSet containing every (distinct) value that appears in any of the given *iterables*. The order of values in the returned set is based on their first occurrence in the given *iterables*.\n\n``` javascript\nd3.union([0, 2, 1, 0], [1, 3]) // Set {0, 2, 1, 3}\n```\n\n###### d3.**intersection**(...*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/intersection.js)\n\nReturns a new InternSet containing every (distinct) value that appears in all of the given *iterables*. The order of values in the returned set is based on their first occurrence in the given *iterables*.\n\n``` javascript\nd3.intersection([0, 2, 1, 0], [1, 3]) // Set {1}\n```\n\n###### d3.**superset**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/superset.js)\n\nReturns true if *a* is a superset of *b*: if every value in the given iterable *b* is also in the given iterable *a*.\n\n``` javascript\nd3.superset([0, 2, 1, 3, 0], [1, 3]) // true\n```\n\n###### d3.**subset**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/subset.js)\n\nReturns true if *a* is a subset of *b*: if every value in the given iterable *a* is also in the given iterable *b*.\n\n``` javascript\nd3.subset([1, 3], [0, 2, 1, 3, 0]) // true\n```\n\n###### d3.**disjoint**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/disjoint.js)\n\nReturns true if *a* and *b* are disjoint: if *a* and *b* contain no shared value.\n\n``` javascript\nd3.disjoint([1, 3], [2, 4]) // true\n```\n\n### Bins\n\nBinning groups discrete samples into a smaller number of consecutive, non-overlapping intervals. They are often used to visualize the distribution of numerical data as histograms.\n\n###### d3.**bin**() · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nConstructs a new bin generator with the default settings.\n\n###### *bin*(*data*) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nBins the given iterable of *data* samples. Returns an array of bins, where each bin is an array containing the associated elements from the input *data*. Thus, the `length` of the bin is the number of elements in that bin. Each bin has two additional attributes:\n\n- `x0` - the lower bound of the bin (inclusive).\n- `x1` - the upper bound of the bin (exclusive, except for the last bin).\n\nAny null or non-comparable values in the given *data*, or those outside the [domain](#bin_domain), are ignored.\n\n###### *bin*.**value**(\\[*value*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nIf *value* is specified, sets the value accessor to the specified function or constant and returns this bin generator. If *value* is not specified, returns the current value accessor, which defaults to the identity function.\n\nWhen bins are [generated](#_bin), the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are orderable (comparable), such as numbers or dates. If your data are not, then you should specify an accessor that returns the corresponding orderable value for a given datum.\n\nThis is similar to mapping your data to values before invoking the bin generator, but has the benefit that the input data remains associated with the returned bins, thereby making it easier to access other fields of the data.\n\n###### *bin*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nIf *domain* is specified, sets the domain accessor to the specified function or array and returns this bin generator. If *domain* is not specified, returns the current domain accessor, which defaults to [extent](#extent). The bin domain is defined as an array \\[*min*, *max*\\], where *min* is the minimum observable value and *max* is the maximum observable value; both values are inclusive. Any value outside of this domain will be ignored when the bins are [generated](#_bin).\n\nFor example, if you are using the bin generator in conjunction with a [linear scale](https://github.com/d3/d3-scale/blob/main/README.md#linear-scales) `x`, you might say:\n\n``` javascript\nvar bin = d3.bin()\n    .domain(x.domain())\n    .thresholds(x.ticks(20));\n```\n\nYou can then compute the bins from an array of numbers like so:\n\n``` javascript\nvar bins = bin(numbers);\n```\n\nIf the default [extent](#extent) domain is used and the [thresholds](#bin_thresholds) are specified as a count (rather than explicit values), then the computed domain will be [niced](#nice) such that all bins are uniform width.\n\nNote that the domain accessor is invoked on the materialized array of [values](#bin_value), not on the input data array.\n\n###### *bin*.**thresholds**(\\[*count*\\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin) *bin*.**thresholds**(\\[*thresholds*\\])\n\nIf *thresholds* is specified, sets the [threshold generator](#bin-thresholds) to the specified function or array and returns this bin generator. If *thresholds* is not specified, returns the current threshold generator, which by default implements [Sturges’ formula](#thresholdSturges). (Thus by default, the values to be binned must be numbers!) Thresholds are defined as an array of values \\[*x0*, *x1*, …\\]. Any value less than *x0* will be placed in the first bin; any value greater than or equal to *x0* but less than *x1* will be placed in the second bin; and so on. Thus, the [generated bins](#_bin) will have *thresholds*.length + 1 bins. See [bin thresholds](#bin-thresholds) for more information.\n\nAny threshold values outside the [domain](#bin_domain) are ignored. The first *bin*.x0 is always equal to the minimum domain value, and the last *bin*.x1 is always equal to the maximum domain value.\n\nIf a *count* is specified instead of an array of *thresholds*, then the [domain](#bin_domain) will be uniformly divided into approximately *count* bins; see [ticks](#ticks).\n\n#### Bin Thresholds\n\nThese functions are typically not used directly; instead, pass them to [*bin*.thresholds](#bin_thresholds).\n\n###### d3.**thresholdFreedmanDiaconis**(*values*, *min*, *max*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/freedmanDiaconis.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nReturns the number of bins according to the [Freedman–Diaconis rule](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.\n\n###### d3.**thresholdScott**(*values*, *min*, *max*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/scott.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nReturns the number of bins according to [Scott’s normal reference rule](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.\n\n###### d3.**thresholdSturges**(*values*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/sturges.js), [Examples](https://observablehq.com/@d3/d3-bin)\n\nReturns the number of bins according to [Sturges’ formula](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.\n\nYou may also implement your own threshold generator taking three arguments: the array of input [*values*](#bin_value) derived from the data, and the [observable domain](#bin_domain) represented as *min* and *max*. The generator may then return either the array of numeric thresholds or the *count* of bins; in the latter case the domain is divided uniformly into approximately *count* bins; see [ticks](#ticks).\n\nFor instance, when binning date values, you might want to use the ticks from a time scale ([Example](https://observablehq.com/@d3/d3-bin-time-thresholds)).\n\n### Interning\n\n###### new d3.**InternMap**(\\[*iterable*\\]\\[, *key*\\]) · [Source](https://github.com/mbostock/internmap/blob/main/src/index.js), [Examples](https://observablehq.com/d/d4c5f6ad343866b9) new d3.**InternSet**(\\[*iterable*\\]\\[, *key*\\]) · [Source](https://github.com/mbostock/internmap/blob/main/src/index.js), [Examples](https://observablehq.com/d/d4c5f6ad343866b9)\n\nThe [InternMap and InternSet](https://github.com/mbostock/internmap) classes extend the native JavaScript Map and Set classes, respectively, allowing Dates and other non-primitive keys by bypassing the [SameValueZero algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) when determining key equality. d3.group, d3.rollup and d3.index use an InternMap rather than a native Map. These two classes are exported for convenience.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-array](https://github.com/d3/d3-array)"
- name: axis
  id: d3-axis
  summary: The axis component renders human-readable reference marks for scales
  description: "# d3-axis\n\nThe axis component renders human-readable reference marks for [scales](d3-scale). This alleviates one of the more tedious tasks in visualizing data.\n\n## Installing\n\nIf you use npm, `npm install d3-axis`. You can also download the [latest release on GitHub](https://github.com/d3/d3-axis/releases/latest). For vanilla HTML in modern browsers, import d3-axis from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {axisLeft} from \"https://cdn.skypack.dev/d3-axis@3\";\n\nconst axis = axisLeft(scale);\n\n</script>\n```\n\nFor legacy environments, you can load d3-axis’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-axis@3\"></script>\n<script>\n\nconst axis = d3.axisLeft(scale);\n\n</script>\n```\n\n[Try d3-axis in your browser.](https://observablehq.com/collection/@d3/d3-axis)\n\n## API Reference\n\nRegardless of orientation, axes are always rendered at the origin. To change the position of the axis with respect to the chart, specify a [transform attribute](http://www.w3.org/TR/SVG/coords.html#TransformAttribute) on the containing element. For example:\n\n``` javascript\nd3.select(\"body\").append(\"svg\")\n    .attr(\"width\", 1440)\n    .attr(\"height\", 30)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(0,30)\")\n    .call(axis);\n```\n\nThe elements created by the axis are considered part of its public API. You can apply external stylesheets or modify the generated axis elements to [customize the axis appearance](https://observablehq.com/@d3/styled-axes).\n\nAn axis consists of a [path element](https://www.w3.org/TR/SVG/paths.html#PathElement) of class “domain” representing the extent of the scale’s domain, followed by transformed [g elements](https://www.w3.org/TR/SVG/struct.html#Groups) of class “tick” representing each of the scale’s ticks. Each tick has a [line element](https://www.w3.org/TR/SVG/shapes.html#LineElement) to draw the tick line, and a [text element](https://www.w3.org/TR/SVG/text.html#TextElement) for the tick label. For example, here is a typical bottom-oriented axis:\n\n``` markup\n<g fill=\"none\" font-size=\"10\" font-family=\"sans-serif\" text-anchor=\"middle\">\n  <path class=\"domain\" stroke=\"currentColor\" d=\"M0.5,6V0.5H880.5V6\"></path>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(0.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.0</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(176.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.2</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(352.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.4</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(528.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.6</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(704.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.8</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(880.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">1.0</text>\n  </g>\n</g>\n```\n\nThe orientation of an axis is fixed; to change the orientation, remove the old axis and create a new axis.\n\n###### d3.**axisTop**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nConstructs a new top-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn above the horizontal domain path.\n\n###### d3.**axisRight**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nConstructs a new right-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn to the right of the vertical domain path.\n\n###### d3.**axisBottom**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nConstructs a new bottom-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn below the horizontal domain path.\n\n###### d3.**axisLeft**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nConstructs a new left-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn to the left of the vertical domain path.\n\n###### *axis*(*context*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nRender the axis to the given *context*, which may be either a [selection](d3-selection) of SVG containers (either SVG or G elements) or a corresponding [transition](d3-transition).\n\n###### *axis*.**scale**(\\[*scale*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *scale* is specified, sets the [scale](d3-scale) and returns the axis. If *scale* is not specified, returns the current scale.\n\n###### *axis*.**ticks**(*arguments…*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js) *axis*.**ticks**(\\[*count*\\[, *specifier*\\]\\]) *axis*.**ticks**(\\[*interval*\\[, *specifier*\\]\\])\n\nSets the *arguments* that will be passed to [*scale*.ticks](d3-scale#continuous_ticks) and [*scale*.tickFormat](d3-scale#continuous_tickFormat) when the axis is [rendered](#_axis), and returns the axis generator. The meaning of the *arguments* depends on the [axis’ scale](#axis_scale) type: most commonly, the arguments are a suggested *count* for the number of ticks (or a [time *interval*](d3-time) for time scales), and an optional [format *specifier*](d3-format) to customize how the tick values are formatted.\n\nThis method has no effect if the scale does not implement *scale*.ticks, as with [band](d3-scale#band-scales) and [point](d3-scale#point-scales) scales. To set the tick values explicitly, use [*axis*.tickValues](#axis_tickValues). To set the tick format explicitly, use [*axis*.tickFormat](#axis_tickFormat).\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say:\n\n``` javascript\naxis.ticks(20, \"s\");\n```\n\nTo generate ticks every fifteen minutes with a time scale, say:\n\n``` javascript\naxis.ticks(d3.timeMinute.every(15));\n```\n\nThis method is also a convenience function for [*axis*.tickArguments](#axis_tickArguments). For example, this:\n\n``` javascript\naxis.ticks(10);\n```\n\nIs equivalent to:\n\n``` javascript\naxis.tickArguments([10]);\n```\n\nTo generate tick values directly, use [*scale*.ticks](d3-scale#continuous_ticks).\n\n###### *axis*.**tickArguments**(\\[*arguments*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *arguments* is specified, sets the *arguments* that will be passed to [*scale*.ticks](d3-scale#continuous_ticks) and [*scale*.tickFormat](d3-scale#continuous_tickFormat) when the axis is [rendered](#_axis), and returns the axis generator. The meaning of the *arguments* depends on the [axis’ scale](#axis_scale) type: most commonly, the arguments are a suggested *count* for the number of ticks (or a [time *interval*](d3-time) for time scales), and an optional [format *specifier*](d3-format) to customize how the tick values are formatted.\n\nIf *arguments* is specified, this method has no effect if the scale does not implement *scale*.ticks, as with [band](d3-scale#band-scales) and [point](d3-scale#point-scales) scales. To set the tick values explicitly, use [*axis*.tickValues](#axis_tickValues). To set the tick format explicitly, use [*axis*.tickFormat](#axis_tickFormat).\n\nIf *arguments* is not specified, returns the current tick arguments, which defaults to the empty array.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say:\n\n``` javascript\naxis.tickArguments([20, \"s\"]);\n```\n\nTo generate ticks every fifteen minutes with a time scale, say:\n\n``` javascript\naxis.tickArguments([d3.timeMinute.every(15)]);\n```\n\nSee also [*axis*.ticks](#axis_ticks).\n\n###### *axis*.**tickValues**(\\[*values*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf a *values* iterable is specified, the specified values are used for ticks rather than using the scale’s automatic tick generator. If *values* is null, clears any previously-set explicit tick values and reverts back to the scale’s tick generator. If *values* is not specified, returns the current tick values, which defaults to null. For example, to generate ticks at specific values:\n\n``` javascript\nvar xAxis = d3.axisBottom(x)\n    .tickValues([1, 2, 3, 5, 8, 13, 21]);\n```\n\nThe explicit tick values take precedent over the tick arguments set by [*axis*.tickArguments](#axis_tickArguments). However, any tick arguments will still be passed to the scale’s [tickFormat](#axis_tickFormat) function if a tick format is not also set.\n\n###### *axis*.**tickFormat**(\\[*format*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *format* is specified, sets the tick format function and returns the axis. If *format* is not specified, returns the current format function, which defaults to null. A null format indicates that the scale’s default formatter should be used, which is generated by calling [*scale*.tickFormat](d3-scale#continuous_tickFormat). In this case, the arguments specified by [*axis*.tickArguments](#axis_tickArguments) are likewise passed to *scale*.tickFormat.\n\nSee [d3-format](d3-format) and [d3-time-format](d3-time-format) for help creating formatters. For example, to display integers with comma-grouping for thousands:\n\n``` javascript\naxis.tickFormat(d3.format(\",.0f\"));\n```\n\nMore commonly, a format specifier is passed to [*axis*.ticks](#axis_ticks):\n\n``` javascript\naxis.ticks(10, \",f\");\n```\n\nThis has the advantage of setting the format precision automatically based on the tick interval.\n\n###### *axis*.**tickSize**(\\[*size*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *size* is specified, sets the [inner](#axis_tickSizeInner) and [outer](#axis_tickSizeOuter) tick size to the specified value and returns the axis. If *size* is not specified, returns the current inner tick size, which defaults to 6.\n\n###### *axis*.**tickSizeInner**(\\[*size*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *size* is specified, sets the inner tick size to the specified value and returns the axis. If *size* is not specified, returns the current inner tick size, which defaults to 6. The inner tick size controls the length of the tick lines, offset from the native position of the axis.\n\n###### *axis*.**tickSizeOuter**(\\[*size*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *size* is specified, sets the outer tick size to the specified value and returns the axis. If *size* is not specified, returns the current outer tick size, which defaults to 6. The outer tick size controls the length of the square ends of the domain path, offset from the native position of the axis. Thus, the “outer ticks” are not actually ticks but part of the domain path, and their position is determined by the associated scale’s domain extent. Thus, outer ticks may overlap with the first or last inner tick. An outer tick size of 0 suppresses the square ends of the domain path, instead producing a straight line.\n\n###### *axis*.**tickPadding**(\\[*padding*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *padding* is specified, sets the padding to the specified value in pixels and returns the axis. If *padding* is not specified, returns the current padding which defaults to 3 pixels.\n\n###### *axis*.**offset**(\\[*offset*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *offset* is specified, sets the offset to the specified value in pixels and returns the axis. If *offset* is not specified, returns the current offset which defaults to 0 on devices with a [devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) greater than 1, and 0.5px otherwise. This default offset ensures crisp edges on low-resolution devices.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-axis](https://github.com/d3/d3-axis)"
- name: axis()
  id: d3-axis#_axis
  summary: Render the axis to the given context, which may be either a selection of SVG containers (either SVG or G elements) or a corresponding transition
  belongs_to: axis
  description: |-
    ###### *axis*(*context*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    Render the axis to the given *context*, which may be either a [selection](d3-selection) of SVG containers (either SVG or G elements) or a corresponding [transition](d3-transition).
- name: axis.offset()
  id: d3-axis#axis_offset
  summary: If offset is specified, sets the offset to the specified value in pixels and returns the axis
  belongs_to: axis
  description: "###### *axis*.**offset**(\\[*offset*\\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)\n\nIf *offset* is specified, sets the offset to the specified value in pixels and returns the axis. If *offset* is not specified, returns the current offset which defaults to 0 on devices with a [devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) greater than 1, and 0.5px otherwise. This default offset ensures crisp edges on low-resolution devices.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-axis](https://github.com/d3/d3-axis)"
- name: axis.scale()
  id: d3-axis#axis_scale
  summary: If scale is specified, sets the scale and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**scale**(\[*scale*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *scale* is specified, sets the [scale](d3-scale) and returns the axis. If *scale* is not specified, returns the current scale.
- name: axis.tickArguments()
  id: d3-axis#axis_tickarguments
  summary: If arguments is specified, sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator
  belongs_to: axis
  description: |-
    ###### *axis*.**tickArguments**(\[*arguments*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *arguments* is specified, sets the *arguments* that will be passed to [*scale*.ticks](d3-scale#continuous_ticks) and [*scale*.tickFormat](d3-scale#continuous_tickFormat) when the axis is [rendered](#_axis), and returns the axis generator. The meaning of the *arguments* depends on the [axis’ scale](#axis_scale) type: most commonly, the arguments are a suggested *count* for the number of ticks (or a [time *interval*](d3-time) for time scales), and an optional [format *specifier*](d3-format) to customize how the tick values are formatted.

    If *arguments* is specified, this method has no effect if the scale does not implement *scale*.ticks, as with [band](d3-scale#band-scales) and [point](d3-scale#point-scales) scales. To set the tick values explicitly, use [*axis*.tickValues](#axis_tickValues). To set the tick format explicitly, use [*axis*.tickFormat](#axis_tickFormat).

    If *arguments* is not specified, returns the current tick arguments, which defaults to the empty array.

    For example, to generate twenty ticks with SI-prefix formatting on a linear scale, say:

    ``` javascript
    axis.tickArguments([20, "s"]);
    ```

    To generate ticks every fifteen minutes with a time scale, say:

    ``` javascript
    axis.tickArguments([d3.timeMinute.every(15)]);
    ```

    See also [*axis*.ticks](#axis_ticks).
- name: axis.tickFormat()
  id: d3-axis#axis_tickformat
  summary: If format is specified, sets the tick format function and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**tickFormat**(\[*format*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *format* is specified, sets the tick format function and returns the axis. If *format* is not specified, returns the current format function, which defaults to null. A null format indicates that the scale’s default formatter should be used, which is generated by calling [*scale*.tickFormat](d3-scale#continuous_tickFormat). In this case, the arguments specified by [*axis*.tickArguments](#axis_tickArguments) are likewise passed to *scale*.tickFormat.

    See [d3-format](d3-format) and [d3-time-format](d3-time-format) for help creating formatters. For example, to display integers with comma-grouping for thousands:

    ``` javascript
    axis.tickFormat(d3.format(",.0f"));
    ```

    More commonly, a format specifier is passed to [*axis*.ticks](#axis_ticks):

    ``` javascript
    axis.ticks(10, ",f");
    ```

    This has the advantage of setting the format precision automatically based on the tick interval.
- name: axis.tickPadding()
  id: d3-axis#axis_tickpadding
  summary: If padding is specified, sets the padding to the specified value in pixels and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**tickPadding**(\[*padding*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *padding* is specified, sets the padding to the specified value in pixels and returns the axis. If *padding* is not specified, returns the current padding which defaults to 3 pixels.
- name: axis.ticks()
  id: d3-axis#axis_ticks
  summary: Sets the arguments that will be passed to scale.ticks and scale.tickFormat when the axis is rendered, and returns the axis generator
  belongs_to: axis
  description: |-
    ###### *axis*.**ticks**(*arguments…*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js) *axis*.**ticks**(\[*count*\[, *specifier*\]\]) *axis*.**ticks**(\[*interval*\[, *specifier*\]\])

    Sets the *arguments* that will be passed to [*scale*.ticks](d3-scale#continuous_ticks) and [*scale*.tickFormat](d3-scale#continuous_tickFormat) when the axis is [rendered](#_axis), and returns the axis generator. The meaning of the *arguments* depends on the [axis’ scale](#axis_scale) type: most commonly, the arguments are a suggested *count* for the number of ticks (or a [time *interval*](d3-time) for time scales), and an optional [format *specifier*](d3-format) to customize how the tick values are formatted.

    This method has no effect if the scale does not implement *scale*.ticks, as with [band](d3-scale#band-scales) and [point](d3-scale#point-scales) scales. To set the tick values explicitly, use [*axis*.tickValues](#axis_tickValues). To set the tick format explicitly, use [*axis*.tickFormat](#axis_tickFormat).

    For example, to generate twenty ticks with SI-prefix formatting on a linear scale, say:

    ``` javascript
    axis.ticks(20, "s");
    ```

    To generate ticks every fifteen minutes with a time scale, say:

    ``` javascript
    axis.ticks(d3.timeMinute.every(15));
    ```

    This method is also a convenience function for [*axis*.tickArguments](#axis_tickArguments). For example, this:

    ``` javascript
    axis.ticks(10);
    ```

    Is equivalent to:

    ``` javascript
    axis.tickArguments([10]);
    ```

    To generate tick values directly, use [*scale*.ticks](d3-scale#continuous_ticks).
- name: axis.tickSize()
  id: d3-axis#axis_ticksize
  summary: If size is specified, sets the inner and outer tick size to the specified value and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**tickSize**(\[*size*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *size* is specified, sets the [inner](#axis_tickSizeInner) and [outer](#axis_tickSizeOuter) tick size to the specified value and returns the axis. If *size* is not specified, returns the current inner tick size, which defaults to 6.
- name: axis.tickSizeInner()
  id: d3-axis#axis_ticksizeinner
  summary: If size is specified, sets the inner tick size to the specified value and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**tickSizeInner**(\[*size*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *size* is specified, sets the inner tick size to the specified value and returns the axis. If *size* is not specified, returns the current inner tick size, which defaults to 6. The inner tick size controls the length of the tick lines, offset from the native position of the axis.
- name: axis.tickSizeOuter()
  id: d3-axis#axis_ticksizeouter
  summary: If size is specified, sets the outer tick size to the specified value and returns the axis
  belongs_to: axis
  description: |-
    ###### *axis*.**tickSizeOuter**(\[*size*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If *size* is specified, sets the outer tick size to the specified value and returns the axis. If *size* is not specified, returns the current outer tick size, which defaults to 6. The outer tick size controls the length of the square ends of the domain path, offset from the native position of the axis. Thus, the “outer ticks” are not actually ticks but part of the domain path, and their position is determined by the associated scale’s domain extent. Thus, outer ticks may overlap with the first or last inner tick. An outer tick size of 0 suppresses the square ends of the domain path, instead producing a straight line.
- name: axis.tickValues()
  id: d3-axis#axis_tickvalues
  summary: If a values iterable is specified, the specified values are used for ticks rather than using the scale’s automatic tick generator
  belongs_to: axis
  description: |-
    ###### *axis*.**tickValues**(\[*values*\]) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    If a *values* iterable is specified, the specified values are used for ticks rather than using the scale’s automatic tick generator. If *values* is null, clears any previously-set explicit tick values and reverts back to the scale’s tick generator. If *values* is not specified, returns the current tick values, which defaults to null. For example, to generate ticks at specific values:

    ``` javascript
    var xAxis = d3.axisBottom(x)
        .tickValues([1, 2, 3, 5, 8, 13, 21]);
    ```

    The explicit tick values take precedent over the tick arguments set by [*axis*.tickArguments](#axis_tickArguments). However, any tick arguments will still be passed to the scale’s [tickFormat](#axis_tickFormat) function if a tick format is not also set.
- name: back.overshoot()
  id: d3-ease#back_overshoot
  summary: Returns a new back easing with the specified overshoot s
  belongs_to: ease
  description: |-
    ###### *back*.**overshoot**(*s*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L1 "Source")

    Returns a new back easing with the specified overshoot *s*.
- name: band()
  id: d3-scale#_band
  summary: Given a value in the input domain, returns the start of the corresponding band derived from the output range
  belongs_to: scale
  description: |-
    ###### *band*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Given a *value* in the input [domain](#band_domain), returns the start of the corresponding band derived from the output [range](#band_range). If the given *value* is not in the scale’s domain, returns undefined.
- name: band.align()
  id: d3-scale#band_align
  summary: If align is specified, sets the alignment to the specified value which must be in the range [0, 1]
  belongs_to: scale
  description: |-
    ###### *band*.**align**(\[*align*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *align* is specified, sets the alignment to the specified value which must be in the range \[0, 1\]. If *align* is not specified, returns the current alignment which defaults to 0.5. The alignment specifies how outer padding is distributed in the range. A value of 0.5 indicates that the outer padding should be equally distributed before the first band and after the last band; *i.e.*, the bands should be centered within the range. A value of 0 or 1 may be used to shift the bands to one side, say to position them adjacent to an axis. For more, [see this explainer](https://observablehq.com/@d3/band-align).
- name: band.bandwidth()
  id: d3-scale#band_bandwidth
  summary: Returns the width of each band
  belongs_to: scale
  description: |-
    ###### *band*.**bandwidth**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Returns the width of each band.
- name: band.copy()
  id: d3-scale#band_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: |-
    ###### *band*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.

    #### Point Scales

    Point scales are a variant of [band scales](#band-scales) with the bandwidth fixed to zero. Point scales are typically used for scatterplots with an ordinal or categorical dimension. The [unknown value](#ordinal_unknown) of a point scale is always undefined: they do not allow implicit domain construction.
- name: band.domain()
  id: d3-scale#band_domain
  summary: If domain is specified, sets the domain to the specified array of values
  belongs_to: scale
  description: |-
    ###### *band*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first band, the second domain value to the second band, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to determine the band. Thus, a band scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding band. If *domain* is not specified, this method returns the current domain.
- name: band.padding()
  id: d3-scale#band_padding
  summary: A convenience method for setting the inner and outer padding to the same padding value
  belongs_to: scale
  description: |-
    ###### *band*.**padding**(\[*padding*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    A convenience method for setting the [inner](#band_paddingInner) and [outer](#band_paddingOuter) padding to the same *padding* value. If *padding* is not specified, returns the inner padding.
- name: band.paddingInner()
  id: d3-scale#band_paddinginner
  summary: If padding is specified, sets the inner padding to the specified number which must be less than or equal to 1
  belongs_to: scale
  description: |-
    ###### *band*.**paddingInner**(\[*padding*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *padding* is specified, sets the inner padding to the specified number which must be less than or equal to 1. If *padding* is not specified, returns the current inner padding which defaults to 0. The inner padding specifies the proportion of the range that is reserved for blank space between bands; a value of 0 means no blank space between bands, and a value of 1 means a [bandwidth](#band_bandwidth) of zero.
- name: band.paddingOuter()
  id: d3-scale#band_paddingouter
  summary: If padding is specified, sets the outer padding to the specified number which is typically in the range [0, 1]
  belongs_to: scale
  description: |-
    ###### *band*.**paddingOuter**(\[*padding*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *padding* is specified, sets the outer padding to the specified number which is typically in the range \[0, 1\]. If *padding* is not specified, returns the current outer padding which defaults to 0. The outer padding specifies the amount of blank space, in terms of multiples of the [step](#band_step), to reserve before the first band and after the last band.
- name: band.range()
  id: d3-scale#band_range
  summary: If range is specified, sets the scale’s range to the specified two-element array of numbers
  belongs_to: scale
  description: |-
    ###### *band*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *range* is specified, sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. If *range* is not specified, returns the scale’s current range, which defaults to \[0, 1\].
- name: band.rangeRound()
  id: d3-scale#band_rangeround
  summary: Sets the scale’s range to the specified two-element array of numbers while also enabling rounding
  belongs_to: scale
  description: |-
    ###### *band*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Sets the scale’s [*range*](#band_range) to the specified two-element array of numbers while also enabling [rounding](#band_round). This is a convenience method equivalent to:

    ``` javascript
    band
        .range(range)
        .round(true);
    ```

    Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles.
- name: band.round()
  id: d3-scale#band_round
  summary: If round is specified, enables or disables rounding accordingly
  belongs_to: scale
  description: |-
    ###### *band*.**round**(\[*round*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    If *round* is specified, enables or disables rounding accordingly. If rounding is enabled, the start and stop of each band will be integers. Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding! Use [*band*.align](#band_align) to specify how the leftover space is distributed.
- name: band.step()
  id: d3-scale#band_step
  summary: Returns the distance between the starts of adjacent bands
  belongs_to: scale
  description: |-
    ###### *band*.**step**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Returns the distance between the starts of adjacent bands.
- name: berghaus.lobes()
  id: d3-geo-projection#berghaus_lobes
  summary: If lobes is specified, sets the number of lobes in the resulting star, and returns this projection
  belongs_to: geo-projection
  description: |-
    ###### *berghaus*.**lobes**(\[*lobes*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/berghaus.js)

    If *lobes* is specified, sets the number of lobes in the resulting star, and returns this projection. If *lobes* is not specified, returns the current lobe number, which defaults to 5.
- name: bin()
  id: d3-array#_bin
  summary: Bins the given iterable of data samples
  belongs_to: array
  description: |-
    ###### *bin*(*data*) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)

    Bins the given iterable of *data* samples. Returns an array of bins, where each bin is an array containing the associated elements from the input *data*. Thus, the `length` of the bin is the number of elements in that bin. Each bin has two additional attributes:

    - `x0` - the lower bound of the bin (inclusive).
    - `x1` - the upper bound of the bin (exclusive, except for the last bin).

    Any null or non-comparable values in the given *data*, or those outside the [domain](#bin_domain), are ignored.
- name: bin.domain()
  id: d3-array#bin_domain
  summary: If domain is specified, sets the domain accessor to the specified function or array and returns this bin generator
  belongs_to: array
  description: |-
    ###### *bin*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)

    If *domain* is specified, sets the domain accessor to the specified function or array and returns this bin generator. If *domain* is not specified, returns the current domain accessor, which defaults to [extent](#extent). The bin domain is defined as an array \[*min*, *max*\], where *min* is the minimum observable value and *max* is the maximum observable value; both values are inclusive. Any value outside of this domain will be ignored when the bins are [generated](#_bin).

    For example, if you are using the bin generator in conjunction with a [linear scale](https://github.com/d3/d3-scale/blob/main/README.md#linear-scales) `x`, you might say:

    ``` javascript
    var bin = d3.bin()
        .domain(x.domain())
        .thresholds(x.ticks(20));
    ```

    You can then compute the bins from an array of numbers like so:

    ``` javascript
    var bins = bin(numbers);
    ```

    If the default [extent](#extent) domain is used and the [thresholds](#bin_thresholds) are specified as a count (rather than explicit values), then the computed domain will be [niced](#nice) such that all bins are uniform width.

    Note that the domain accessor is invoked on the materialized array of [values](#bin_value), not on the input data array.
- name: bin.thresholds()
  id: d3-array#bin_thresholds
  summary: If thresholds is specified, sets the threshold generator to the specified function or array and returns this bin generator
  belongs_to: array
  description: |-
    ###### *bin*.**thresholds**(\[*count*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin) *bin*.**thresholds**(\[*thresholds*\])

    If *thresholds* is specified, sets the [threshold generator](#bin-thresholds) to the specified function or array and returns this bin generator. If *thresholds* is not specified, returns the current threshold generator, which by default implements [Sturges’ formula](#thresholdSturges). (Thus by default, the values to be binned must be numbers!) Thresholds are defined as an array of values \[*x0*, *x1*, …\]. Any value less than *x0* will be placed in the first bin; any value greater than or equal to *x0* but less than *x1* will be placed in the second bin; and so on. Thus, the [generated bins](#_bin) will have *thresholds*.length + 1 bins. See [bin thresholds](#bin-thresholds) for more information.

    Any threshold values outside the [domain](#bin_domain) are ignored. The first *bin*.x0 is always equal to the minimum domain value, and the last *bin*.x1 is always equal to the maximum domain value.

    If a *count* is specified instead of an array of *thresholds*, then the [domain](#bin_domain) will be uniformly divided into approximately *count* bins; see [ticks](#ticks).

    #### Bin Thresholds

    These functions are typically not used directly; instead, pass them to [*bin*.thresholds](#bin_thresholds).
- name: bin.value()
  id: d3-array#bin_value
  summary: If value is specified, sets the value accessor to the specified function or constant and returns this bin generator
  belongs_to: array
  description: |-
    ###### *bin*.**value**(\[*value*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)

    If *value* is specified, sets the value accessor to the specified function or constant and returns this bin generator. If *value* is not specified, returns the current value accessor, which defaults to the identity function.

    When bins are [generated](#_bin), the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are orderable (comparable), such as numbers or dates. If your data are not, then you should specify an accessor that returns the corresponding orderable value for a given datum.

    This is similar to mapping your data to values before invoking the bin generator, but has the benefit that the input data remains associated with the returned bins, thereby making it easier to access other fields of the data.
- name: bisector.center()
  id: d3-array#bisector_center
  summary: Returns the index of the closest value to x in the given sorted array
  belongs_to: array
  description: |-
    ###### *bisector*.**center**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)

    Returns the index of the closest value to *x* in the given sorted *array*. This expects that the bisector’s associated accessor returns a quantitative value, or that the bisector’s associated comparator returns a signed distance; otherwise, this method is equivalent to *bisector*.left.
- name: bisector.left()
  id: d3-array#bisector_left
  summary: Equivalent to bisectLeft, but uses this bisector’s associated comparator
  belongs_to: array
  description: |-
    ###### *bisector*.**left**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)

    Equivalent to [bisectLeft](#bisectLeft), but uses this bisector’s associated comparator.
- name: bisector.right()
  id: d3-array#bisector_right
  summary: Equivalent to bisectRight, but uses this bisector’s associated comparator
  belongs_to: array
  description: |-
    ###### *bisector*.**right**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js)

    Equivalent to [bisectRight](#bisectRight), but uses this bisector’s associated comparator.
- name: bonne.parallel()
  id: d3-geo-projection#bonne_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *bonne*.**parallel**(\[*parallel*\])

    Defaults to 45°.
- name: bottomley.fraction()
  id: d3-geo-projection#bottomley_fraction
  summary: Defaults to 0.5, corresponding to a sin(ψ) where ψ = π/6
  belongs_to: geo-projection
  description: |-
    ###### *bottomley*.**fraction**(\[*fraction*\])

    Defaults to 0.5, corresponding to a sin(ψ) where ψ = π/6.
- name: brush
  id: d3-brush
  summary: Brushing is the interactive specification a one- or two-dimensional selected region using a pointing gesture, such as by clicking and dragging the mouse
  description: "# d3-brush\n\nBrushing is the interactive specification a one- or two-dimensional selected region using a pointing gesture, such as by clicking and dragging the mouse. Brushing is often used to select discrete elements, such as dots in a scatterplot or files on a desktop. It can also be used to zoom-in to a region of interest, or to select continuous regions for [cross-filtering data](http://square.github.io/crossfilter/) or live histograms:\n\nThe d3-brush module implements brushing for mouse and touch events using [SVG](https://www.w3.org/TR/SVG/). Click and drag on the brush selection to translate the selection. Click and drag on one of the selection handles to move the corresponding edge (or edges) of the selection. Click and drag on the invisible overlay to define a new brush selection, or click anywhere within the brushable region while holding down the META (⌘) key. Holding down the ALT (⌥) key while moving the brush causes it to reposition around its center, while holding down SPACE locks the current brush size, allowing only translation.\n\nBrushes also support programmatic control. For example, you can listen to [*end* events](#brush-events), and then initiate a transition with [*brush*.move](#brush_move) to snap the brush selection to semantic boundaries:\n\nOr you can have the brush recenter when you click outside the current selection:\n\n## Installing\n\nIf you use npm, `npm install d3-brush`. You can also download the [latest release on GitHub](https://github.com/d3/d3-brush/releases/latest). For vanilla HTML in modern browsers, import d3-brush from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {brushX} from \"https://cdn.skypack.dev/d3-brush@3\";\n\nconst brush = brushX();\n\n</script>\n```\n\nFor legacy environments, you can load d3-brush’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-ease@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-selection@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-drag@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-transition@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-brush@3\"></script>\n<script>\n\nconst brush = d3.brushX();\n\n</script>\n```\n\n[Try d3-brush in your browser.](https://observablehq.com/collection/@d3/d3-brush)\n\n## API Reference\n\n###### d3.**brush**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot)\n\nCreates a new two-dimensional brush.\n\n###### d3.**brushX**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/focus-context)\n\nCreates a new one-dimensional brush along the *x*-dimension.\n\n###### d3.**brushY**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)\n\nCreates a new one-dimensional brush along the *y*-dimension.\n\n###### *brush*(*group*) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot-matrix)\n\nApplies the brush to the specified *group*, which must be a [selection](d3-selection) of SVG [G elements](https://www.w3.org/TR/SVG/struct.html#Groups). This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to render a brush:\n\n``` javascript\nsvg.append(\"g\")\n    .attr(\"class\", \"brush\")\n    .call(d3.brush().on(\"brush\", brushed));\n```\n\nInternally, the brush uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for dragging. The listeners use the name `.brush`, so you can subsequently unbind the brush event listeners as follows:\n\n``` javascript\ngroup.on(\".brush\", null);\n```\n\nThe brush also creates the SVG elements necessary to display the brush selection and to receive input events for interaction. You can add, remove or modify these elements as desired to change the brush appearance; you can also apply stylesheets to modify the brush appearance. The structure of a two-dimensional brush is as follows:\n\n``` markup\n<g class=\"brush\" fill=\"none\" pointer-events=\"all\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n  <rect class=\"overlay\" pointer-events=\"all\" cursor=\"crosshair\" x=\"0\" y=\"0\" width=\"960\" height=\"500\"></rect>\n  <rect class=\"selection\" cursor=\"move\" fill=\"#777\" fill-opacity=\"0.3\" stroke=\"#fff\" shape-rendering=\"crispEdges\" x=\"112\" y=\"194\" width=\"182\" height=\"83\"></rect>\n  <rect class=\"handle handle--n\" cursor=\"ns-resize\" x=\"107\" y=\"189\" width=\"192\" height=\"10\"></rect>\n  <rect class=\"handle handle--e\" cursor=\"ew-resize\" x=\"289\" y=\"189\" width=\"10\" height=\"93\"></rect>\n  <rect class=\"handle handle--s\" cursor=\"ns-resize\" x=\"107\" y=\"272\" width=\"192\" height=\"10\"></rect>\n  <rect class=\"handle handle--w\" cursor=\"ew-resize\" x=\"107\" y=\"189\" width=\"10\" height=\"93\"></rect>\n  <rect class=\"handle handle--nw\" cursor=\"nwse-resize\" x=\"107\" y=\"189\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--ne\" cursor=\"nesw-resize\" x=\"289\" y=\"189\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--se\" cursor=\"nwse-resize\" x=\"289\" y=\"272\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--sw\" cursor=\"nesw-resize\" x=\"107\" y=\"272\" width=\"10\" height=\"10\"></rect>\n</g>\n```\n\nThe overlay rect covers the brushable area defined by [*brush*.extent](#brush_extent). The selection rect covers the area defined by the current [brush selection](#brushSelection). The handle rects cover the edges and corners of the brush selection, allowing the corresponding value in the brush selection to be modified interactively. To modify the brush selection programmatically, use [*brush*.move](#brush_move).\n\n###### *brush*.**move**(*group*, *selection*\\[, *event*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/d/93b91f86f9ebc9b9)\n\nSets the active *selection* of the brush on the specified *group*, which must be a [selection](d3-selection) or a [transition](d3-transition) of SVG [G elements](https://www.w3.org/TR/SVG/struct.html#Groups). The *selection* must be defined as an array of numbers, or null to clear the brush selection. For a [two-dimensional brush](#brush), it must be defined as \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where *x0* is the minimum *x*-value, *y0* is the minimum *y*-value, *x1* is the maximum *x*-value, and *y1* is the maximum *y*-value. For an [*x*-brush](#brushX), it must be defined as \\[*x0*, *x1*\\]; for a [*y*-brush](#brushY), it must be defined as \\[*y0*, *y1*\\]. The selection may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. The returned array defines the brush selection for that element.\n\n###### *brush*.**clear**(*group*\\[, *event*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/double-click-brush-clear)\n\nAn alias for [*brush*.move](#brush_move) with the null selection.\n\n###### *brush*.**extent**(\\[*extent*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brush-snapping)\n\nIf *extent* is specified, sets the brushable extent to the specified array of points \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where \\[*x0*, *y0*\\] is the top-left corner and \\[*x1*, *y1*\\] is the bottom-right corner, and returns this brush. The *extent* may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. If *extent* is not specified, returns the current extent accessor, which defaults to:\n\n``` javascript\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n```\n\nThis default implementation requires that the owner SVG element have a defined [viewBox](https://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute), or [width](https://www.w3.org/TR/SVG/struct.html#SVGElementWidthAttribute) and [height](https://www.w3.org/TR/SVG/struct.html#SVGElementHeightAttribute) attributes. Alternatively, consider using [*element*.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). (In Firefox, [*element*.clientWidth](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth) and [*element*.clientHeight](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight) is zero for SVG elements!)\n\nThe brush extent determines the size of the invisible overlay and also constrains the brush selection; the brush selection cannot go outside the brush extent.\n\n###### *brush*.**filter**(\\[*filter*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brush-filter)\n\nIf *filter* is specified, sets the filter to the specified function and returns the brush. If *filter* is not specified, returns the current filter, which defaults to:\n\n``` javascript\nfunction filter(event) {\n  return !event.ctrlKey && !event.button;\n}\n```\n\nIf the filter returns falsey, the initiating event is ignored and no brush gesture is started. Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.\n\n###### *brush*.**touchable**(\\[*touchable*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)\n\nIf *touchable* is specified, sets the touch support detector to the specified function and returns the brush. If *touchable* is not specified, returns the current touch support detector, which defaults to:\n\n``` javascript\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\nTouch event listeners are only registered if the detector returns truthy for the corresponding element when the brush is [applied](#_brush). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.\n\n###### *brush*.**keyModifiers**(\\[*modifiers*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)\n\nIf *modifiers* is specified, sets whether the brush listens to key events during brushing and returns the brush. If *modifiers* is not specified, returns the current behavior, which defaults to true.\n\n###### *brush*.**handleSize**(\\[*size*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)\n\nIf *size* is specified, sets the size of the brush handles to the specified number and returns the brush. If *size* is not specified, returns the current handle size, which defaults to six. This method must be called before [applying the brush](#_brush) to a selection; changing the handle size does not affect brushes that were previously rendered.\n\n###### *brush*.**on**(*typenames*\\[, *listener*\\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)\n\nIf *listener* is specified, sets the event *listener* for the specified *typenames* and returns the brush. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event `event` and datum `d`, with the `this` context as the current DOM element.\n\nThe *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `brush.foo` and `brush.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:\n\n- `start` - at the start of a brush gesture, such as on mousedown.\n- `brush` - when the brush moves, such as on mousemove.\n- `end` - at the end of a brush gesture, such as on mouseup.\n\nSee [*dispatch*.on](d3-dispatch#dispatch_on) and [Brush Events](#brush-events) for more.\n\n###### d3.**brushSelection**(*node*) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/double-click-brush-clear)\n\nReturns the current brush selection for the specified *node*. Internally, an element’s brush state is stored as *element*.\\_\\_brush; however, you should use this method rather than accessing it directly. If the given *node* has no selection, returns null. Otherwise, the *selection* is defined as an array of numbers. For a [two-dimensional brush](#brush), it is \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where *x0* is the minimum *x*-value, *y0* is the minimum *y*-value, *x1* is the maximum *x*-value, and *y1* is the maximum *y*-value. For an [*x*-brush](#brushX), it is \\[*x0*, *x1*\\]; for a [*y*-brush](#brushY), it is \\[*y0*, *y1*\\].\n\n### Brush Events\n\nWhen a [brush event listener](#brush_on) is invoked, it receives the current brush event. The *event* object exposes several fields:\n\n- `target` - the associated [brush behavior](#brush).\n- `type` - the string “start”, “brush” or “end”; see [*brush*.on](#brush_on).\n- `selection` - the current [brush selection](#brushSelection).\n- `sourceEvent` - the underlying input event, such as mousemove or touchmove.\n- `mode` - the string “drag”, “space”, “handle” or “center”; the mode of the brush.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-brush](https://github.com/d3/d3-brush)"
- name: brush()
  id: d3-brush#_brush
  summary: Applies the brush to the specified group, which must be a selection of SVG G elements
  belongs_to: brush
  description: |-
    ###### *brush*(*group*) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot-matrix)

    Applies the brush to the specified *group*, which must be a [selection](d3-selection) of SVG [G elements](https://www.w3.org/TR/SVG/struct.html#Groups). This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to render a brush:

    ``` javascript
    svg.append("g")
        .attr("class", "brush")
        .call(d3.brush().on("brush", brushed));
    ```

    Internally, the brush uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for dragging. The listeners use the name `.brush`, so you can subsequently unbind the brush event listeners as follows:

    ``` javascript
    group.on(".brush", null);
    ```

    The brush also creates the SVG elements necessary to display the brush selection and to receive input events for interaction. You can add, remove or modify these elements as desired to change the brush appearance; you can also apply stylesheets to modify the brush appearance. The structure of a two-dimensional brush is as follows:

    ``` markup
    <g class="brush" fill="none" pointer-events="all" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
      <rect class="overlay" pointer-events="all" cursor="crosshair" x="0" y="0" width="960" height="500"></rect>
      <rect class="selection" cursor="move" fill="#777" fill-opacity="0.3" stroke="#fff" shape-rendering="crispEdges" x="112" y="194" width="182" height="83"></rect>
      <rect class="handle handle--n" cursor="ns-resize" x="107" y="189" width="192" height="10"></rect>
      <rect class="handle handle--e" cursor="ew-resize" x="289" y="189" width="10" height="93"></rect>
      <rect class="handle handle--s" cursor="ns-resize" x="107" y="272" width="192" height="10"></rect>
      <rect class="handle handle--w" cursor="ew-resize" x="107" y="189" width="10" height="93"></rect>
      <rect class="handle handle--nw" cursor="nwse-resize" x="107" y="189" width="10" height="10"></rect>
      <rect class="handle handle--ne" cursor="nesw-resize" x="289" y="189" width="10" height="10"></rect>
      <rect class="handle handle--se" cursor="nwse-resize" x="289" y="272" width="10" height="10"></rect>
      <rect class="handle handle--sw" cursor="nesw-resize" x="107" y="272" width="10" height="10"></rect>
    </g>
    ```

    The overlay rect covers the brushable area defined by [*brush*.extent](#brush_extent). The selection rect covers the area defined by the current [brush selection](#brushSelection). The handle rects cover the edges and corners of the brush selection, allowing the corresponding value in the brush selection to be modified interactively. To modify the brush selection programmatically, use [*brush*.move](#brush_move).
- name: brush.clear()
  id: d3-brush#brush_clear
  summary: An alias for brush.move with the null selection
  belongs_to: brush
  description: |-
    ###### *brush*.**clear**(*group*\[, *event*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/double-click-brush-clear)

    An alias for [*brush*.move](#brush_move) with the null selection.
- name: brush.extent()
  id: d3-brush#brush_extent
  summary: If extent is specified, sets the brushable extent to the specified array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner and [x1, y1] is the bottom-right corner, and returns this brush
  belongs_to: brush
  description: |-
    ###### *brush*.**extent**(\[*extent*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brush-snapping)

    If *extent* is specified, sets the brushable extent to the specified array of points \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where \[*x0*, *y0*\] is the top-left corner and \[*x1*, *y1*\] is the bottom-right corner, and returns this brush. The *extent* may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. If *extent* is not specified, returns the current extent accessor, which defaults to:

    ``` javascript
    function defaultExtent() {
      var svg = this.ownerSVGElement || this;
      if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
      }
      return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
    }
    ```

    This default implementation requires that the owner SVG element have a defined [viewBox](https://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute), or [width](https://www.w3.org/TR/SVG/struct.html#SVGElementWidthAttribute) and [height](https://www.w3.org/TR/SVG/struct.html#SVGElementHeightAttribute) attributes. Alternatively, consider using [*element*.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). (In Firefox, [*element*.clientWidth](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth) and [*element*.clientHeight](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight) is zero for SVG elements!)

    The brush extent determines the size of the invisible overlay and also constrains the brush selection; the brush selection cannot go outside the brush extent.
- name: brush.filter()
  id: d3-brush#brush_filter
  summary: If filter is specified, sets the filter to the specified function and returns the brush
  belongs_to: brush
  description: |-
    ###### *brush*.**filter**(\[*filter*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brush-filter)

    If *filter* is specified, sets the filter to the specified function and returns the brush. If *filter* is not specified, returns the current filter, which defaults to:

    ``` javascript
    function filter(event) {
      return !event.ctrlKey && !event.button;
    }
    ```

    If the filter returns falsey, the initiating event is ignored and no brush gesture is started. Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.
- name: brush.handleSize()
  id: d3-brush#brush_handlesize
  summary: If size is specified, sets the size of the brush handles to the specified number and returns the brush
  belongs_to: brush
  description: |-
    ###### *brush*.**handleSize**(\[*size*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)

    If *size* is specified, sets the size of the brush handles to the specified number and returns the brush. If *size* is not specified, returns the current handle size, which defaults to six. This method must be called before [applying the brush](#_brush) to a selection; changing the handle size does not affect brushes that were previously rendered.
- name: brush.keyModifiers()
  id: d3-brush#brush_keymodifiers
  summary: If modifiers is specified, sets whether the brush listens to key events during brushing and returns the brush
  belongs_to: brush
  description: |-
    ###### *brush*.**keyModifiers**(\[*modifiers*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)

    If *modifiers* is specified, sets whether the brush listens to key events during brushing and returns the brush. If *modifiers* is not specified, returns the current behavior, which defaults to true.
- name: brush.move()
  id: d3-brush#brush_move
  summary: Sets the active selection of the brush on the specified group, which must be a selection or a transition of SVG G elements
  belongs_to: brush
  description: |-
    ###### *brush*.**move**(*group*, *selection*\[, *event*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/d/93b91f86f9ebc9b9)

    Sets the active *selection* of the brush on the specified *group*, which must be a [selection](d3-selection) or a [transition](d3-transition) of SVG [G elements](https://www.w3.org/TR/SVG/struct.html#Groups). The *selection* must be defined as an array of numbers, or null to clear the brush selection. For a [two-dimensional brush](#brush), it must be defined as \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where *x0* is the minimum *x*-value, *y0* is the minimum *y*-value, *x1* is the maximum *x*-value, and *y1* is the maximum *y*-value. For an [*x*-brush](#brushX), it must be defined as \[*x0*, *x1*\]; for a [*y*-brush](#brushY), it must be defined as \[*y0*, *y1*\]. The selection may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. The returned array defines the brush selection for that element.
- name: brush.on()
  id: d3-brush#brush_on
  summary: If listener is specified, sets the event listener for the specified typenames and returns the brush
  belongs_to: brush
  description: |-
    ###### *brush*.**on**(*typenames*\[, *listener*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)

    If *listener* is specified, sets the event *listener* for the specified *typenames* and returns the brush. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event `event` and datum `d`, with the `this` context as the current DOM element.

    The *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `brush.foo` and `brush.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:

    - `start` - at the start of a brush gesture, such as on mousedown.
    - `brush` - when the brush moves, such as on mousemove.
    - `end` - at the end of a brush gesture, such as on mouseup.

    See [*dispatch*.on](d3-dispatch#dispatch_on) and [Brush Events](#brush-events) for more.
- name: brush.touchable()
  id: d3-brush#brush_touchable
  summary: If touchable is specified, sets the touch support detector to the specified function and returns the brush
  belongs_to: brush
  description: |-
    ###### *brush*.**touchable**(\[*touchable*\]) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)

    If *touchable* is specified, sets the touch support detector to the specified function and returns the brush. If *touchable* is not specified, returns the current touch support detector, which defaults to:

    ``` javascript
    function touchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }
    ```

    Touch event listeners are only registered if the detector returns truthy for the corresponding element when the brush is [applied](#_brush). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.
- name: bundle.beta()
  id: d3-shape#curvebundle_beta
  summary: Returns a bundle curve with the specified beta in the range [0, 1], representing the bundle strength
  belongs_to: shape
  description: |-
    ###### *bundle*.**beta**(*beta*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)

    Returns a bundle curve with the specified *beta* in the range \[0, 1\], representing the bundle strength. If *beta* equals zero, a straight line between the first and last point is produced; if *beta* equals one, a standard [basis](#basis) spline is produced. For example:

    ``` javascript
    const line = d3.line().curve(d3.curveBundle.beta(0.5));
    ```
- name: cam16
  id: d3-cam16
  summary: d3-cam16 is an under-development update to d3-cam02
  description: "# d3-cam16\n\n**d3-cam16** is an under-development update to [d3-cam02](https://github.com/connorgr/d3-cam02). It fixes many underlying computational bugs and performance concerns while still preserving perceptual accuracy.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-cam16](https://github.com/d3/d3-cam16)"
- name: cardinal.tension()
  id: d3-shape#curvecardinal_tension
  summary: Returns a cardinal curve with the specified tension in the range [0, 1]
  belongs_to: shape
  description: |-
    ###### *cardinal*.**tension**(*tension*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)

    Returns a cardinal curve with the specified *tension* in the range \[0, 1\]. The *tension* determines the length of the tangents: a *tension* of one yields all zero tangents, equivalent to [curveLinear](#curveLinear); a *tension* of zero produces a uniform [Catmull–Rom](#curveCatmullRom) spline. For example:

    ``` javascript
    const line = d3.line().curve(d3.curveCardinal.tension(0.5));
    ```
- name: catmullRom.alpha()
  id: d3-shape#curvecatmullrom_alpha
  summary: Returns a cubic Catmull–Rom curve with the specified alpha in the range [0, 1]
  belongs_to: shape
  description: |-
    ###### *catmullRom*.**alpha**(*alpha*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)

    Returns a cubic Catmull–Rom curve with the specified *alpha* in the range \[0, 1\]. If *alpha* is zero, produces a uniform spline, equivalent to [curveCardinal](#curveCardinal) with a tension of zero; if *alpha* is one, produces a chordal spline; if *alpha* is 0.5, produces a [centripetal spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline). Centripetal splines are recommended to avoid self-intersections and overshoot. For example:

    ``` javascript
    const line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));
    ```
- name: cell
  id: d3-voronoi#cell
  summary: null
  belongs_to: voronoi
  description: |-
    ###### *cell*

    Each cell in the diagram is an object with the following properties:

    - `site` - the [site](#site) of the cell’s associated input point.
    - `halfedges` - an array of indexes into [*diagram*.edges](#diagram) representing the cell’s polygon.
- name: center.strength()
  id: d3-force#center_strength
  summary: If strength is specified, sets the centering force’s strength
  belongs_to: force
  description: |-
    ###### *center*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js), [Examples](https://observablehq.com/@d3/forcecenter-strength)

    If *strength* is specified, sets the centering force’s strength. A reduced strength of e.g. 0.05 softens the movements on interactive graphs in which new nodes enter or exit the graph. If *strength* is not specified, returns the force’s current strength, which defaults to 1.

    #### Collision

    The collision force treats nodes as circles with a given [radius](#collide_radius), rather than points, and prevents nodes from overlapping. More formally, two nodes *a* and *b* are separated so that the distance between *a* and *b* is at least *radius*(*a*) + *radius*(*b*). To reduce jitter, this is by default a “soft” constraint with a configurable [strength](#collide_strength) and [iteration count](#collide_iterations).
- name: center.x()
  id: d3-force#center_x
  summary: If x is specified, sets the x-coordinate of the centering position to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *center*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)

    If *x* is specified, sets the *x*-coordinate of the centering position to the specified number and returns this force. If *x* is not specified, returns the current *x*-coordinate, which defaults to zero.
- name: center.y()
  id: d3-force#center_y
  summary: If y is specified, sets the y-coordinate of the centering position to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *center*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)

    If *y* is specified, sets the *y*-coordinate of the centering position to the specified number and returns this force. If *y* is not specified, returns the current *y*-coordinate, which defaults to zero.
- name: Changes in D3 7.0
  id: d3/blob/master/changes.md
  summary: Released June 11, 2021
  description: "# Changes in D3 7.0\n\n[Released June 11, 2021.](https://github.com/d3/d3/releases/tag/v7.0.0)\n\n*This document covers only major changes. For minor and patch changes, please see the [release notes](https://github.com/d3/d3/releases).*\n\nD3 now ships as pure ES modules and requires Node.js 12 or higher. For more, please read [Sindre Sorhus’s FAQ](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\n\n[d3.bin](https://github.com/d3/d3-array/blob/main/README.md#bin) now ignores nulls. [d3.ascending](https://github.com/d3/d3-array/blob/main/README.md#ascending) and [d3.descending](https://github.com/d3/d3-array/blob/main/README.md#descending) no longer consider null comparable.\n\n[Ordinal scales](https://github.com/d3/d3-scale/blob/main/README.md#ordinal-scales) now use [InternMap](https://github.com/mbostock/internmap) for domains; domain values are now uniqued by coercing to a primitive value via *object*.valueOf instead of coercing to a string via *object*.toString.\n\nArray-likes (*e.g.*, a live NodeList such as *element*.childNodes) are converted to arrays in [d3.selectAll](https://github.com/d3/d3-selection/blob/main/README.md#selectAll) and [*selection*.selectAll](https://github.com/d3/d3-selection/blob/main/README.md#selection_selectAll).\n\n# Changes in D3 6.0\n\n[Released August 26, 2020.](https://github.com/d3/d3/releases/tag/v6.0.0)\n\nD3 now **uses native collections** (Map and Set) and **accepts iterables**. [d3.group and d3.rollup](https://observablehq.com/@d3/d3-group) are powerful new aggregation functions that replace d3.nest and work great [with d3-hierarchy](https://observablehq.com/d/9a453665f405eebf) and d3-selection. There are lots of new helpers in d3-array, too, such as [d3.greatest](https://observablehq.com/@d3/d3-least), [d3.quickselect](https://observablehq.com/@d3/d3-quickselect), and [d3.fsum](https://observablehq.com/@d3/d3-fsum).\n\nD3 now **passes events directly to listeners**, replacing the d3.event global and bringing D3 inline with vanilla JavaScript and most other frameworks.\n\n**d3-delaunay** (based on Vladimir Agafonkin’s excellent [Delaunator](https://github.com/mapbox/delaunator)) replaces d3-voronoi, offering dramatic improvements to performance, robustness, and [search](https://observablehq.com/@d3/delaunay-find). And there’s a new [d3-geo-voronoi](https://github.com/Fil/d3-geo-voronoi) for spherical (geographical) data! **d3-random** is [greatly expanded](../../../d3-random) and includes a fast [linear congruential generator](https://observablehq.com/@d3/d3-randomlcg) for seeded randomness. **d3-chord** has new layouts for [directed](https://observablehq.com/@d3/directed-chord-diagram) and transposed chord diagrams. **d3-scale** adds a new [radial scale](https://observablehq.com/@d3/radial-stacked-bar-chart-ii) type.\n\n… and a variety of other small enhancements. [More than 450 examples](https://observablehq.com/@d3/gallery) have been updated to D3 6.0!\n\n### d3-array\n\n- Accept iterables.\n- Add [d3.group](../../../d3-array#group).\n- Add [d3.groups](../../../d3-array#groups).\n- Add [d3.index](../../../d3-array#index).\n- Add [d3.indexes](../../../d3-array#indexes).\n- Add [d3.rollup](../../../d3-array#rollup).\n- Add [d3.rollups](../../../d3-array#rollups).\n- Add [d3.maxIndex](../../../d3-array#maxIndex).\n- Add [d3.minIndex](../../../d3-array#minIndex).\n- Add [d3.greatest](../../../d3-array#greatest).\n- Add [d3.greatestIndex](../../../d3-array#greatestIndex).\n- Add [d3.least](../../../d3-array#least).\n- Add [d3.leastIndex](../../../d3-array#leastIndex).\n- Add [d3.bin](../../../d3-array#bin).\n- Add [d3.count](../../../d3-array#count).\n- Add [d3.cumsum](../../../d3-array#cumsum).\n- Add [d3.fsum](../../../d3-array#fsum).\n- Add [d3.Adder](../../../d3-array#Adder).\n- Add [d3.quantileSorted](../../../d3-array#quantileSorted).\n- Add [d3.quickselect](../../../d3-array#quickselect).\n- Add [*bisector*.center](../../../d3-array#bisector_center).\n- Allow more than two iterables for [d3.cross](../../../d3-array#cross).\n- Accept non-sorted input with [d3.quantile](../../../d3-array#quantile).\n- Fix a *array*.sort bug in Safari.\n- Fix bin thresholds to ignore NaN input.\n- Fix [d3.ticks](../../../d3-array#ticks) to not return ticks outside the domain.\n- Improve the performance of [d3.median](../../../d3-array#median).\n\nSee [https://observablehq.com/@d3/d3-array-2-0](https://observablehq.com/@d3/d3-array-2-0) for details.\n\n### d3-brush\n\n- Add [*event*.mode](../../../d3-brush#brush-events).\n- Change [*brush*.on](../../../d3-brush#brush_on) to pass the *event* directly to listeners.\n- Improve multitouch (two-touch) interaction.\n\n### d3-chord\n\n- Add [d3.chordDirected](../../../d3-chord#chordDirected).\n- Add [d3.chordTranspose](../../../d3-chord#chordTranspose).\n- Add [d3.ribbonArrow](../../../d3-chord#ribbonArrow).\n- Add [*ribbon*.padAngle](../../../d3-chord#ribbon_padAngle).\n- Add [*ribbon*.sourceRadius](../../../d3-chord#ribbon_sourceRadius).\n- Add [*ribbon*.targetRadius](../../../d3-chord#ribbon_targetRadius).\n\n### d3-delaunay\n\n- Add [d3.Delaunay](../../../d3-delaunay).\n\n### d3-drag\n\n- Change [*drag*.on](../../../d3-drag#drag_on) to pass the *event* directly to listeners.\n\n### d3-force\n\n- Add *iterations* argument to [*simulation*.tick](../../../d3-force#simulation_tick).\n- Add [*forceCenter*.strength](../../../d3-force#center_strength).\n- Add [*forceSimulation*.randomSource](../../../d3-force#simulation_randomSource).\n- All built-in forces are now fully deterministic (including “jiggling” coincident nodes).\n- Improve the default phyllotaxis layout slightly by offsetting by one half-radius.\n- Improve the error message when a link references an unknown node.\n- [*force*.initialize](../../../d3-force#force_initialize) is now passed a random source.\n- Fix bug when initializing nodes with fixed positions.\n\n### d3-format\n\n- Change the default minus sign to the minus sign (−) instead of hyphen-minus (-).\n- Fix decimal `d` formatting of numbers greater than or equal to 1e21.\n\n### d3-geo\n\n- Fix clipping of some degenerate polygons.\n\n### d3-hierarchy\n\n- Accept iterables.\n- Add [*node*\\[Symbol.iterator\\]](../../../d3-hierarchy#node_iterator); hierarchies are now iterable.\n- Add [*node*.find](../../../d3-hierarchy#node_find).\n- Change [*node*.each](../../../d3-hierarchy#node_each) to pass the traversal index.\n- Change [*node*.eachAfter](../../../d3-hierarchy#node_eachAfter) to pass the traversal index.\n- Change [*node*.eachBefore](../../../d3-hierarchy#node_eachBefore) to pass the traversal index.\n- Fix [d3.packSiblings](../../../d3-hierarchy#packSiblings) for huge circles.\n- Fix divide-by-zero bug in [d3.treemapBinary](../../../d3-hierarchy#treemapBinary).\n- Fix divide-by-zero bug in [d3.treemapResquarify](../../../d3-hierarchy#treemapResquarify).\n\n### d3-interpolate\n\n- Add [*interpolateZoom*.rho](../../../d3-interpolate#interpolateZoom_rho). (#25)\n- Allow [d3.piecewise](../../../d3-interpolate#piecewise) to default to using d3.interpolate. \\#90\n- Change [d3.interpolateTransformCss](../../../d3-interpolate#interpolateTransformCss) to use DOMMatrix and require absolute units. \\#83\n\n### d3-quadtree\n\n- Fix an infinite loop when coordinates diverge to huge values.\n\n### d3-random\n\n- Add [d3.randomLcg](../../../d3-random#randomLcg).\n- Add [d3.randomGamma](../../../d3-random#randomGamma).\n- Add [d3.randomBeta](../../../d3-random#randomBeta).\n- Add [d3.randomWeibull](../../../d3-random#randomWeibull).\n- Add [d3.randomCauchy](../../../d3-random#randomCauchy).\n- Add [d3.randomLogistic](../../../d3-random#randomLogistic).\n- Add [d3.randomPoisson](../../../d3-random#randomPoisson).\n- Add [d3.randomInt](../../../d3-random#randomInt).\n- Add [d3.randomBinomial](../../../d3-random#randomBinomial).\n- Add [d3.randomGeometric](../../../d3-random#randomGeometric).\n- Add [d3.randomPareto](../../../d3-random#randomPareto).\n- Add [d3.randomBernoulli](../../../d3-random#randomBernoulli).\n- Allow [d3.randomBates](../../../d3-random#randomBates) to take fractional *n*.\n- Allow [d3.randomIrwinHall](../../../d3-random#randomIrwinHall) to take fractional *n*.\n- Don’t wrap Math.random in the default source.\n\nThanks to @Lange, @p-v-d-Veeken, @svanschooten, @Parcly-Taxel and @jrus for your contributions!\n\n### d3-scale\n\n- Accept iterables.\n- Add [*diverging*.rangeRound](../../../d3-scale#diverging_rangeRound).\n- Add [*sequential*.range](../../../d3-scale#sequential_range) (for compatibility with d3-axis).\n- Add [*sequential*.rangeRound](../../../d3-scale#sequential_rangeRound).\n- Add [*sequentialQuantile*.quantiles](../../../d3-scale#sequentialQuantile_quantiles).\n- Add [d3.scaleRadial](../../../d3-scale#radial-scales).\n- [*diverging*.range](../../../d3-scale#diverging_range) can now be used to set the interpolator.\n- [*sequential*.range](../../../d3-scale#sequential_range) can now be used to set the interpolator.\n- [d3.scaleDiverging](../../../d3-scale#diverging-scales) can now accept a range array in place of an interpolator.\n- [d3.scaleSequential](../../../d3-scale#sequential-scales) can now accept a range array in place of an interpolator.\n- Fix [*continuous*.nice](../../../d3-scale#continuous_nice) to ensure that niced domains always span ticks.\n- Fix [*log*.ticks](../../../d3-scale#log_ticks) for small domains.\n- Fix [*log*.ticks](../../../d3-scale#log_ticks) for small domains. \\#44\n- Fix [*scale*.clamp](../../../d3-scale#continuous_clamp) for [sequential quantile scales](../../../d3-scale#scaleSequentialQuantile). Thanks, @Fil!\n- Fix [*scale*.clamp](../../../d3-scale#continuous_clamp) for continuous scales with more domain values than range values.\n- Fix [diverging scales](../../../d3-scale#diverging-scales) with descending domains.\n- Remove deprecated *step* argument from [*time*.ticks](../../../d3-scale#time_ticks) and [*time*.nice](../../../d3-scale#time_nice).\n\n### d3-selection\n\n- Add [*selection*.selectChild](../../../d3-selection#selection_selectChild).\n- Add [*selection*.selectChildren](../../../d3-selection#selection_selectChildren).\n- Add [d3.pointer](../../../d3-selection#pointer).\n- Add [d3.pointers](../../../d3-selection#pointers).\n- Add *selection*\\[Symbol.iterator\\]; selections are now iterable!\n- Accept iterables with [*selection*.data](../../../d3-selection#selection_data).\n- Accept iterables with [d3.selectAll](../../../d3-selection#selectAll).\n- Change [*selection*.on](../../../d3-selection#selection_on) to pass the *event* directly to listeners.\n- Remove index and group from *selection*.on listeners!\n- Remove d3.event!\n- Remove d3.mouse.\n- Remove d3.touch.\n- Remove d3.touches.\n- Remove d3.customEvent.\n- Remove d3.clientPoint.\n- Remove d3.sourceEvent.\n- Fix *selection*.merge(*transition*) to error.\n\nFor an overview of changes, see [https://observablehq.com/@d3/d3-selection-2-0](https://observablehq.com/@d3/d3-selection-2-0).\n\n### d3-shape\n\n- Accept iterables.\n- Add [d3.line](../../../d3-shape#line)(*x*, *y*) shorthand.\n- Add [d3.area](../../../d3-shape#area)(*x*, *y0*, *y1*) shorthand.\n- Add [d3.symbol](../../../d3-shape#symbol)(*type*, *size*) shorthand.\n\n### d3-time-format\n\n- Add ISO 8601 “week year” (`%G` and `%g`).\n\n### d3-timer\n\n- Fix [*interval*.restart](../../../d3-timer#timer_restart) to restart as an interval.\n\n### d3-transition\n\n- Add [*transition*.easeVarying](../../../d3-transition#transition_easeVarying).\n- Add *transition*\\[Symbol.iterator\\]; transitions are now iterable.\n- Fix [*selection*.transition](../../../d3-transition#selection_transition) to error if the named transition to inherit is not found.k\n- Fix [*transition*.end](../../../d3-transition#transition_end) to resolve immediately if the selection is empty.\n\n### d3-zoom\n\n- Add [*zoom*.tapDistance](../../../d3-zoom#zoom_tapDistance).\n- Change [*zoom*.on](../../../d3-zoom#zoom_on) to pass the *event* directly to listeners.\n- Change the default [*zoom*.filter](../../../d3-zoom#zoom_filter) to observe *wheel* events if the control key is pressed.\n- Change the default *zoom*.wheelDelta to go faster if the control key is pressed.\n- Don‘t set touch-action: none.\n- Upgrade to [d3-selection 2](https://observablehq.com/@d3/d3-selection-2-0).\n\n### Breaking Changes\n\nD3 6.0 introduces several non-backwards-compatible changes.\n\n- Remove [d3.event](https://observablehq.com/d/f91cccf0cad5e9cb#events).\n- Change [*selection*.on](https://observablehq.com/d/f91cccf0cad5e9cb#events) to pass the *event* directly to listeners.\n- Change [*transition*.on](https://observablehq.com/d/f91cccf0cad5e9cb#events) to pass the *event* directly to listeners.\n- Change [*brush*.on](https://observablehq.com/d/f91cccf0cad5e9cb#event_brush) to pass the *event* directly to listeners.\n- Change [*drag*.on](https://observablehq.com/d/f91cccf0cad5e9cb#event_drag) to pass the *event* directly to listeners.\n- Change [*zoom*.on](https://observablehq.com/d/f91cccf0cad5e9cb#event_zoom) to pass the *event* directly to listeners.\n- Remove d3.mouse; use [d3.pointer](https://observablehq.com/d/f91cccf0cad5e9cb#pointer).\n- Remove d3.touch; use [d3.pointer](https://observablehq.com/d/f91cccf0cad5e9cb#pointer).\n- Remove d3.touches; use [d3.pointers](https://observablehq.com/d/f91cccf0cad5e9cb#pointer).\n- Remove d3.clientPoint; use [d3.pointer](https://observablehq.com/d/f91cccf0cad5e9cb#pointer).\n- Remove d3.voronoi; use [d3.Delaunay](https://observablehq.com/d/f91cccf0cad5e9cb#delaunay).\n- Remove d3.nest; use [d3.group](https://observablehq.com/d/f91cccf0cad5e9cb#group) and [d3.rollup](https://observablehq.com/d/f91cccf0cad5e9cb#group).\n- Remove d3.map; use [Map](https://observablehq.com/d/f91cccf0cad5e9cb#collection).\n- Remove d3.set; use [Set](https://observablehq.com/d/f91cccf0cad5e9cb#collection).\n- Remove d3.keys; use [Object.keys](https://observablehq.com/d/f91cccf0cad5e9cb#collection).\n- Remove d3.values; use [Object.values](https://observablehq.com/d/f91cccf0cad5e9cb#collection).\n- Remove d3.entries; use [Object.entries](https://observablehq.com/d/f91cccf0cad5e9cb#collection).\n- Rename d3.histogram to [d3.bin](https://observablehq.com/d/f91cccf0cad5e9cb#bin).\n- Rename d3.scan to [d3.leastIndex](https://observablehq.com/d/f91cccf0cad5e9cb#leastIndex).\n- Change [d3.interpolateTransformCss](https://observablehq.com/d/f91cccf0cad5e9cb#interpolateTransformCss) to require absolute units.\n- Change [d3.format](https://observablehq.com/d/f91cccf0cad5e9cb#minus) to default to the minus sign instead of hyphen-minus for negative values.\n\nD3 now requires a browser that supports [ES2015](http://www.ecma-international.org/ecma-262/6.0/). For older browsers, you must bring your own transpiler.\n\nLastly, support for [Bower](https://bower.io) has been dropped; D3 is now exclusively published to npm and GitHub.\n\nSee our [migration guide](https://observablehq.com/d/f91cccf0cad5e9cb) for help upgrading.\n\n# Changes in D3 5.0\n\n[Released March 22, 2018.](https://github.com/d3/d3/releases/tag/v5.0.0)\n\nD3 5.0 introduces only a few non-backwards-compatible changes.\n\nD3 now uses [Promises](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Using_promises) instead of asynchronous callbacks to load data. Promises simplify the structure of asynchronous code, especially in modern browsers that support [async and await](https://javascript.info/async-await). (See this [introduction to promises](https://observablehq.com/@observablehq/introduction-to-promises) on [Observable](https://observablehq.com).) For example, to load a CSV file in v4, you might say:\n\n``` javascript\nd3.csv(\"file.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data);\n});\n```\n\nIn v5, using promises:\n\n``` javascript\nd3.csv(\"file.csv\").then(function(data) {\n  console.log(data);\n});\n```\n\nNote that you don’t need to rethrow the error—the promise will reject automatically, and you can *promise*.catch if desired. Using await, the code is even simpler:\n\n``` javascript\nconst data = await d3.csv(\"file.csv\");\nconsole.log(data);\n```\n\nWith the adoption of promises, D3 now uses the [Fetch API](https://fetch.spec.whatwg.org/) instead of [XMLHttpRequest](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest): the [d3-request](../../../d3-request) module has been replaced by [d3-fetch](../../../d3-fetch). Fetch supports many powerful new features, such as [streaming responses](https://observablehq.com/@mbostock/streaming-shapefiles). D3 5.0 also deprecates and removes the [d3-queue](../../../d3-queue) module. Use [Promise.all](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) to run a batch of asynchronous tasks in parallel, or a helper library such as [p-queue](https://github.com/sindresorhus/p-queue) to [control concurrency](https://observablehq.com/@mbostock/hello-p-queue).\n\nD3 no longer provides the d3.schemeCategory20\\* categorical color schemes. These twenty-color schemes were flawed because their grouped design could falsely imply relationships in the data: a shared hue can imply that the encoded data are part of a group (a super-category), while relative lightness can imply order. Instead, D3 now includes [d3-scale-chromatic](../../../d3-scale-chromatic), which implements excellent schemes from ColorBrewer, including [categorical](../../../d3-scale-chromatic#categorical), [diverging](../../../d3-scale-chromatic#diverging), [sequential single-hue](../../../d3-scale-chromatic#sequential-single-hue) and [sequential multi-hue](../../../d3-scale-chromatic#sequential-multi-hue) schemes. These schemes are available in both discrete and continuous variants.\n\nD3 now provides implementations of [marching squares](https://observablehq.com/@d3/contours) and [density estimation](https://observablehq.com/@d3/density-contours) via [d3-contour](../../../d3-contour)! There are two new [d3-selection](../../../d3-selection) methods: [*selection*.clone](../../../d3-selection#selection_clone) for inserting clones of the selected nodes, and [d3.create](../../../d3-selection#create) for creating detached elements. [Geographic projections](../../../d3-geo) now support [*projection*.angle](../../../d3-geo#projection_angle), which has enabled several fantastic new [polyhedral projections](../../../d3-geo-polygon) by Philippe Rivière.\n\nLastly, D3’s [package.json](https://github.com/d3/d3/blob/master/package.json) no longer pins exact versions of the dependent D3 modules. This fixes an issue with [duplicate installs](https://github.com/d3/d3/issues/3256) of D3 modules.\n\n# Changes in D3 4.0\n\n[Released June 28, 2016.](https://github.com/d3/d3/releases/tag/v4.0.0)\n\nD3 4.0 is modular. Instead of one library, D3 is now [many small libraries](#table-of-contents) that are designed to work together. You can pick and choose which parts to use as you see fit. Each library is maintained in its own repository, allowing decentralized ownership and independent release cycles. The default bundle combines about thirty of these microlibraries.\n\n``` markup\n<script src=\"https://d3js.org/d3.v4.js\"></script>\n```\n\nAs before, you can load optional plugins on top of the default bundle, such as [ColorBrewer scales](../../../d3-scale-chromatic):\n\n``` markup\n<script src=\"https://d3js.org/d3.v4.js\"></script>\n<script src=\"https://d3js.org/d3-scale-chromatic.v0.3.js\"></script>\n```\n\nYou are not required to use the default bundle! If you’re just using [d3-selection](../../../d3-selection), use it as a standalone library. Like the default bundle, you can load D3 microlibraries using vanilla script tags or RequireJS (great for HTTP/2!):\n\n``` markup\n<script src=\"https://d3js.org/d3-selection.v1.js\"></script>\n```\n\nYou can also `cat` D3 microlibraries into a custom bundle, or use tools such as [Webpack](https://webpack.github.io/) and [Rollup](http://rollupjs.org/) to create [optimized bundles](https://bl.ocks.org/mbostock/bb09af4c39c79cffcde4). Custom bundles are great for applications that use a subset of D3’s features; for example, a React chart library might use D3 for scales and shapes, and React to manipulate the DOM. The D3 microlibraries are written as [ES6 modules](http://www.2ality.com/2014/09/es6-modules-final.html), and Rollup lets you pick at the symbol level to produce smaller bundles.\n\nSmall files are nice, but modularity is also about making D3 more *fun*. Microlibraries are easier to understand, develop and test. They make it easier for new people to get involved and contribute. They reduce the distinction between a “core module” and a “plugin”, and increase the pace of development in D3 features.\n\nIf you don’t care about modularity, you can mostly ignore this change and keep using the default bundle. However, there is one unavoidable consequence of adopting ES6 modules: every symbol in D3 4.0 now shares a flat namespace rather than the nested one of D3 3.x. For example, d3.scale.linear is now d3.scaleLinear, and d3.layout.treemap is now d3.treemap. The adoption of ES6 modules also means that D3 is now written exclusively in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) and has better readability. And there have been many other significant improvements to D3’s features! (Nearly all of the code from D3 3.x has been rewritten.) These changes are covered below.\n\n### Other Global Changes\n\nThe default [UMD bundle](https://github.com/umdjs/umd) is now [anonymous](https://github.com/requirejs/requirejs/wiki/Updating-existing-libraries#register-as-an-anonymous-module-). No `d3` global is exported if AMD or CommonJS is detected. In a vanilla environment, the D3 microlibraries share the `d3` global, even if you load them independently; thus, code you write is the same whether or not you use the default bundle. (See [Let’s Make a (D3) Plugin](https://bost.ocks.org/mike/d3-plugin/) for more.) The generated bundle is no longer stored in the Git repository; Bower has been repointed to [d3-bower](https://github.com/mbostock-bower/d3-bower), and you can find the generated files on [npm](https://unpkg.com/d3) or attached to the [latest release](https://github.com/d3/d3/releases/latest). The non-minified default bundle is no longer mangled, making it more readable and preserving inline comments.\n\nTo the consternation of some users, 3.x employed Unicode variable names such as λ, φ, τ and π for a concise representation of mathematical operations. A downside of this approach was that a SyntaxError would occur if you loaded the non-minified D3 using ISO-8859-1 instead of UTF-8. 3.x also used Unicode string literals, such as the SI-prefix µ for 1e-6. 4.0 uses only ASCII variable names and ASCII string literals (see [rollup-plugin-ascii](https://github.com/mbostock/rollup-plugin-ascii)), avoiding encoding problems.\n\n### Table of Contents\n\n- [Arrays](#arrays-d3-array)\n- [Axes](#axes-d3-axis)\n- [Brushes](#brushes-d3-brush)\n- [Chords](#chords-d3-chord)\n- [Collections](#collections-d3-collection)\n- [Colors](#colors-d3-color)\n- [Dispatches](#dispatches-d3-dispatch)\n- [Dragging](#dragging-d3-drag)\n- [Delimiter-Separated Values](#delimiter-separated-values-d3-dsv)\n- [Easings](#easings-d3-ease)\n- [Forces](#forces-d3-force)\n- [Number Formats](#number-formats-d3-format)\n- [Geographies](#geographies-d3-geo)\n- [Hierarchies](#hierarchies-d3-hierarchy)\n- [Internals](#internals)\n- [Interpolators](#interpolators-d3-interpolate)\n- [Paths](#paths-d3-path)\n- [Polygons](#polygons-d3-polygon)\n- [Quadtrees](#quadtrees-d3-quadtree)\n- [Queues](#queues-d3-queue)\n- [Random Numbers](#random-numbers-d3-random)\n- [Requests](#requests-d3-request)\n- [Scales](#scales-d3-scale)\n- [Selections](#selections-d3-selection)\n- [Shapes](#shapes-d3-shape)\n- [Time Formats](#time-formats-d3-time-format)\n- [Time Intervals](#time-intervals-d3-time)\n- [Timers](#timers-d3-timer)\n- [Transitions](#transitions-d3-transition)\n- [Voronoi Diagrams](#voronoi-diagrams-d3-voronoi)\n- [Zooming](#zooming-d3-zoom)\n\n## [Arrays (d3-array)](../../../d3-array)\n\nThe new [d3.scan](../../../d3-array#scan) method performs a linear scan of an array, returning the index of the least element according to the specified comparator. This is similar to [d3.min](../../../d3-array#min) and [d3.max](../../../d3-array#max), except you can use it to find the position of an extreme element, rather than just calculate an extreme value.\n\n``` javascript\nvar data = [\n  {name: \"Alice\", value: 2},\n  {name: \"Bob\", value: 3},\n  {name: \"Carol\", value: 1},\n  {name: \"Dwayne\", value: 5}\n];\n\nvar i = d3.scan(data, function(a, b) { return a.value - b.value; }); // 2\ndata[i]; // {name: \"Carol\", value: 1}\n```\n\nThe new [d3.ticks](../../../d3-array#ticks) and [d3.tickStep](../../../d3-array#tickStep) methods are useful for generating human-readable numeric ticks. These methods are a low-level alternative to [*continuous*.ticks](../../../d3-scale#continuous_ticks) from [d3-scale](../../../d3-scale). The new implementation is also more accurate, returning the optimal number of ticks as measured by relative error.\n\n``` javascript\nvar ticks = d3.ticks(0, 10, 5); // [0, 2, 4, 6, 8, 10]\n```\n\nThe [d3.range](../../../d3-array#range) method no longer makes an elaborate attempt to avoid floating-point error when *step* is not an integer. The returned values are strictly defined as *start* + *i* \\* *step*, where *i* is an integer. (Learn more about [floating point math](http://0.30000000000000004.com/).) d3.range returns the empty array for infinite ranges, rather than throwing an error.\n\nThe method signature for optional accessors has been changed to be more consistent with array methods such as [*array*.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach): the accessor is passed the current element (*d*), the index (*i*), and the array (*data*), with *this* as undefined. This affects [d3.min](../../../d3-array#min), [d3.max](../../../d3-array#max), [d3.extent](../../../d3-array#extent), [d3.sum](../../../d3-array#sum), [d3.mean](../../../d3-array#mean), [d3.median](../../../d3-array#median), [d3.quantile](../../../d3-array#quantile), [d3.variance](../../../d3-array#variance) and [d3.deviation](../../../d3-array#deviation). The [d3.quantile](../../../d3-array#quantile) method previously did not take an accessor. Some methods with optional arguments now treat those arguments as missing if they are null or undefined, rather than strictly checking arguments.length.\n\nThe new [d3.histogram](../../../d3-array#histograms) API replaces d3.layout.histogram. Rather than exposing *bin*.x and *bin*.dx on each returned bin, the histogram exposes *bin*.x0 and *bin*.x1, guaranteeing that *bin*.x0 is exactly equal to *bin*.x1 on the preceding bin. The “frequency” and “probability” modes are no longer supported; each bin is simply an array of elements from the input data, so *bin*.length is equal to D3 3.x’s *bin*.y in frequency mode. To compute a probability distribution, divide the number of elements in each bin by the total number of elements.\n\nThe *histogram*.range method has been renamed [*histogram*.domain](../../../d3-array#histogram_domain) for consistency with scales. The *histogram*.bins method has been renamed [*histogram*.thresholds](../../../d3-array#histogram_thresholds), and no longer accepts an upper value: *n* thresholds will produce *n* + 1 bins. If you specify a desired number of bins rather than thresholds, d3.histogram now uses [d3.ticks](../../../d3-array#ticks) to compute nice bin thresholds. In addition to the default Sturges’ formula, D3 now implements the [Freedman-Diaconis rule](../../../d3-array#thresholdFreedmanDiaconis) and [Scott’s normal reference rule](../../../d3-array#thresholdScott).\n\n## [Axes (d3-axis)](../../../d3-axis)\n\nTo render axes properly in D3 3.x, you needed to style them:\n\n``` markup\n<style>\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n</style>\n<script>\n\nd3.select(\".axis\")\n    .call(d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\"));\n\n</script>\n```\n\nIf you didn’t, you saw this:\n\nD3 4.0 provides default styles and shorter syntax. In place of d3.svg.axis and *axis*.orient, D3 4.0 now provides four constructors for each orientation: [d3.axisTop](../../../d3-axis#axisTop), [d3.axisRight](../../../d3-axis#axisRight), [d3.axisBottom](../../../d3-axis#axisBottom), [d3.axisLeft](../../../d3-axis#axisLeft). These constructors accept a scale, so you can reduce all of the above to:\n\n``` markup\n<script>\n\nd3.select(\".axis\")\n    .call(d3.axisBottom(x));\n\n</script>\n```\n\nAnd get this:\n\nAs before, you can customize the axis appearance either by applying stylesheets or by modifying the axis elements. The default appearance has been changed slightly to offset the axis by a half-pixel; this fixes a crisp-edges rendering issue on Safari where the axis would be drawn two-pixels thick.\n\nThere’s now an [*axis*.tickArguments](../../../d3-axis#axis_tickArguments) method, as an alternative to [*axis*.ticks](../../../d3-axis#axis_ticks) that also allows the axis tick arguments to be inspected. The [*axis*.tickSize](../../../d3-axis#axis_tickSize) method has been changed to only allow a single argument when setting the tick size. The *axis*.innerTickSize and *axis*.outerTickSize methods have been renamed [*axis*.tickSizeInner](../../../d3-axis#axis_tickSizeInner) and [*axis*.tickSizeOuter](../../../d3-axis#axis_tickSizeOuter), respectively.\n\n## [Brushes (d3-brush)](../../../d3-brush)\n\nReplacing d3.svg.brush, there are now three classes of brush for brushing along the *x*-dimension, the *y*-dimension, or both: [d3.brushX](../../../d3-brush#brushX), [d3.brushY](../../../d3-brush#brushY), [d3.brush](../../../d3-brush#brush). Brushes are no longer dependent on [scales](#scales-d3-scale); instead, each brush defines a selection in screen coordinates. This selection can be [inverted](../../../d3-scale#continuous_invert) if you want to compute the corresponding data domain. And rather than rely on the scales’ ranges to determine the brushable area, there is now a [*brush*.extent](../../../d3-brush#brush_extent) method for setting it. If you do not set the brush extent, it defaults to the full extent of the owner SVG element. The *brush*.clamp method has also been eliminated; brushing is always restricted to the brushable area defined by the brush extent.\n\nBrushes no longer store the active brush selection (*i.e.*, the highlighted region; the brush’s position) internally. The brush’s position is now stored on any elements to which the brush has been applied. The brush’s position is available as *event*.selection within a brush event or by calling [d3.brushSelection](../../../d3-brush#brushSelection) on a given *element*. To move the brush programmatically, use [*brush*.move](../../../d3-brush#brush_move) with a given [selection](#selections-d3-selection) or [transition](#transitions-d3-transition); see the [brush snapping example](https://bl.ocks.org/mbostock/6232537). The *brush*.event method has been removed.\n\nBrush interaction has been improved. By default, brushes now ignore right-clicks intended for the context menu; you can change this behavior using [*brush*.filter](../../../d3-brush#brush_filter). Brushes also ignore emulated mouse events on iOS. Holding down SHIFT (⇧) while brushing locks the *x*- or *y*-position of the brush. Holding down META (⌘) while clicking and dragging starts a new selection, rather than translating the existing selection.\n\nThe default appearance of the brush has also been improved and slightly simplified. Previously it was necessary to apply styles to the brush to give it a reasonable appearance, such as:\n\n``` css\n.brush .extent {\n  stroke: #fff;\n  fill-opacity: .125;\n  shape-rendering: crispEdges;\n}\n```\n\nThese styles are now applied by default as attributes; if you want to customize the brush appearance, you can still apply external styles or modify the brush elements. (D3 4.0 features a similar improvement to [axes](#axes-d3-axis).) A new [*brush*.handleSize](../../../d3-brush#brush_handleSize) method lets you override the brush handle size; it defaults to six pixels.\n\nThe brush now consumes handled events, making it easier to combine with other interactive behaviors such as [dragging](#dragging-d3-drag) and [zooming](#zooming-d3-zoom). The *brushstart* and *brushend* events have been renamed to *start* and *end*, respectively. The brush event no longer reports a *event*.mode to distinguish between resizing and dragging the brush.\n\n## [Chords (d3-chord)](../../../d3-chord)\n\nPursuant to the great namespace flattening:\n\n- d3.layout.chord ↦ [d3.chord](../../../d3-chord#chord)\n- d3.svg.chord ↦ [d3.ribbon](../../../d3-chord#ribbon)\n\nFor consistency with [*arc*.padAngle](../../../d3-shape#arc_padAngle), *chord*.padding has also been renamed to [*ribbon*.padAngle](../../../d3-chord#ribbon_padAngle). A new [*ribbon*.context](../../../d3-chord#ribbon_context) method lets you render chord diagrams to Canvas! See also [d3-path](#paths-d3-path).\n\n## [Collections (d3-collection)](../../../d3-collection)\n\nThe [d3.set](../../../d3-collection#set) constructor now accepts an existing set for making a copy. If you pass an array to d3.set, you can also pass a value accessor. This accessor takes the standard arguments: the current element (*d*), the index (*i*), and the array (*data*), with *this* undefined. For example:\n\n``` javascript\nvar yields = [\n  {yield: 22.13333, variety: \"Manchuria\",        year: 1932, site: \"Grand Rapids\"},\n  {yield: 26.76667, variety: \"Peatland\",         year: 1932, site: \"Grand Rapids\"},\n  {yield: 28.10000, variety: \"No. 462\",          year: 1931, site: \"Duluth\"},\n  {yield: 38.50000, variety: \"Svansota\",         year: 1932, site: \"Waseca\"},\n  {yield: 40.46667, variety: \"Svansota\",         year: 1931, site: \"Crookston\"},\n  {yield: 36.03333, variety: \"Peatland\",         year: 1932, site: \"Waseca\"},\n  {yield: 34.46667, variety: \"Wisconsin No. 38\", year: 1931, site: \"Grand Rapids\"}\n];\n\nvar sites = d3.set(yields, function(d) { return d.site; }); // Grand Rapids, Duluth, Waseca, Crookston\n```\n\nThe [d3.map](../../../d3-collection#map) constructor also follows the standard array accessor argument pattern.\n\nThe *map*.forEach and *set*.forEach methods have been renamed to [*map*.each](../../../d3-collection#map_each) and [*set*.each](../../../d3-collection#set_each) respectively. The order of arguments for *map*.each has also been changed to *value*, *key* and *map*, while the order of arguments for *set*.each is now *value*, *value* and *set*. This is closer to ES6 [*map*.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach) and [*set*.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach). Also like ES6 Map and Set, *map*.set and *set*.add now return the current collection (rather than the added value) to facilitate method chaining. New [*map*.clear](../../../d3-collection#map_clear) and [*set*.clear](../../../d3-collection#set_clear) methods can be used to empty collections.\n\nThe [*nest*.map](../../../d3-collection#nest_map) method now always returns a d3.map instance. For a plain object, use [*nest*.object](../../../d3-collection#nest_object) instead. When used in conjunction with [*nest*.rollup](../../../d3-collection#nest_rollup), [*nest*.entries](../../../d3-collection#nest_entries) now returns {key, value} objects for the leaf entries, instead of {key, values}. This makes *nest*.rollup easier to use in conjunction with [hierarchies](#hierarchies-d3-hierarchy), as in this [Nest Treemap example](https://bl.ocks.org/mbostock/2838bf53e0e65f369f476afd653663a2).\n\n## [Colors (d3-color)](../../../d3-color)\n\nAll colors now have opacity exposed as *color*.opacity, which is a number in \\[0, 1\\]. You can pass an optional opacity argument to the color space constructors [d3.rgb](../../../d3-color#rgb), [d3.hsl](../../../d3-color#hsl), [d3.lab](../../../d3-color#lab), [d3.hcl](../../../d3-color#hcl) or [d3.cubehelix](../../../d3-color#cubehelix).\n\nYou can now parse rgba(…) and hsla(…) CSS color specifiers or the string “transparent” using [d3.color](../../../d3-color#color). The “transparent” color is defined as an RGB color with zero opacity and undefined red, green and blue channels; this differs slightly from CSS which defines it as transparent black, but is useful for simplifying color interpolation logic where either the starting or ending color has undefined channels. The [*color*.toString](../../../d3-color#color_toString) method now likewise returns an rgb(…) or rgba(…) string with integer channel values, not the hexadecimal RGB format, consistent with CSS computed values. This improves performance by short-circuiting transitions when the element’s starting style matches its ending style.\n\nThe new [d3.color](../../../d3-color#color) method is the primary method for parsing colors: it returns a d3.color instance in the appropriate color space, or null if the CSS color specifier is invalid. For example:\n\n``` javascript\nvar red = d3.color(\"hsl(0, 80%, 50%)\"); // {h: 0, l: 0.5, s: 0.8, opacity: 1}\n```\n\nThe parsing implementation is now more robust. For example, you can no longer mix integers and percentages in rgb(…), and it correctly handles whitespace, decimal points, number signs, and other edge cases. The color space constructors d3.rgb, d3.hsl, d3.lab, d3.hcl and d3.cubehelix now always return a copy of the input color, converted to the corresponding color space. While [*color*.rgb](../../../d3-color#color_rgb) remains, *rgb*.hsl has been removed; use d3.hsl to convert a color to the RGB color space.\n\nThe RGB color space no longer greedily quantizes and clamps channel values when creating colors, improving accuracy in color space conversion. Quantization and clamping now occurs in *color*.toString when formatting a color for display. You can use the new [*color*.displayable](../../../d3-color#color_displayable) to test whether a color is [out-of-gamut](https://en.wikipedia.org/wiki/Gamut).\n\nThe [*rgb*.brighter](../../../d3-color#rgb_brighter) method no longer special-cases black. This is a multiplicative operator, defining a new color *r*′, *g*′, *b*′ where *r*′ = *r* × *pow*(0.7, *k*), *g*′ = *g* × *pow*(0.7, *k*) and *b*′ = *b* × *pow*(0.7, *k*); a brighter black is still black.\n\nThere’s a new [d3.cubehelix](../../../d3-color#cubehelix) color space, generalizing Dave Green’s color scheme! (See also [d3.interpolateCubehelixDefault](../../../d3-scale#interpolateCubehelixDefault) from [d3-scale](#scales-d3-scale).) You can continue to define your own custom color spaces, too; see [d3-hsv](../../../d3-hsv) for an example.\n\n## [Dispatches (d3-dispatch)](../../../d3-dispatch)\n\nRather than decorating the *dispatch* object with each event type, the dispatch object now exposes generic [*dispatch*.call](../../../d3-dispatch#dispatch_call) and [*dispatch*.apply](../../../d3-dispatch#dispatch_apply) methods which take the *type* string as the first argument. For example, in D3 3.x, you might say:\n\n``` javascript\ndispatcher.foo.call(that, \"Hello, Foo!\");\n```\n\nTo dispatch a *foo* event in D3 4.0, you’d say:\n\n``` javascript\ndispatcher.call(\"foo\", that, \"Hello, Foo!\");\n```\n\nThe [*dispatch*.on](../../../d3-dispatch#dispatch_on) method now accepts multiple typenames, allowing you to add or remove listeners for multiple events simultaneously. For example, to send both *foo* and *bar* events to the same listener:\n\n``` javascript\ndispatcher.on(\"foo bar\", function(message) {\n  console.log(message);\n});\n```\n\nThis matches the new behavior of [*selection*.on](../../../d3-selection#selection_on) in [d3-selection](#selections-d3-selection). The *dispatch*.on method now validates that the specifier *listener* is a function, rather than throwing an error in the future.\n\nThe new implementation d3.dispatch is faster, using fewer closures to improve performance. There’s also a new [*dispatch*.copy](../../../d3-dispatch#dispatch_copy) method for making a copy of a dispatcher; this is used by [d3-transition](#transitions-d3-transition) to improve the performance of transitions in the common case where all elements in a transition have the same transition event listeners.\n\n## [Dragging (d3-drag)](../../../d3-drag)\n\nThe drag behavior d3.behavior.drag has been renamed to d3.drag. The *drag*.origin method has been replaced by [*drag*.subject](../../../d3-drag#drag_subject), which allows you to define the thing being dragged at the start of a drag gesture. This is particularly useful with Canvas, where draggable objects typically share a Canvas element (as opposed to SVG, where draggable objects typically have distinct DOM elements); see the [circle dragging example](https://bl.ocks.org/mbostock/444757cc9f0fde320a5f469cd36860f4).\n\nA new [*drag*.container](../../../d3-drag#drag_container) method lets you override the parent element that defines the drag gesture coordinate system. This defaults to the parent node of the element to which the drag behavior was applied. For dragging on Canvas elements, you probably want to use the Canvas element as the container.\n\n[Drag events](../../../d3-drag#drag-events) now expose an [*event*.on](../../../d3-drag#event_on) method for registering temporary listeners for duration of the current drag gesture; these listeners can capture state for the current gesture, such as the thing being dragged. A new *event*.active property lets you detect whether multiple (multitouch) drag gestures are active concurrently. The *dragstart* and *dragend* events have been renamed to *start* and *end*. By default, drag behaviors now ignore right-clicks intended for the context menu; use [*drag*.filter](../../../d3-drag#drag_filter) to control which events are ignored. The drag behavior also ignores emulated mouse events on iOS. The drag behavior now consumes handled events, making it easier to combine with other interactive behaviors such as [zooming](#zooming-d3-zoom).\n\nThe new [d3.dragEnable](../../../d3-drag#dragEnable) and [d3.dragDisable](../../../d3-drag#dragDisable) methods provide a low-level API for implementing drag gestures across browsers and devices. These methods are also used by other D3 components, such as the [brush](#brushes-d3-brush).\n\n## [Delimiter-Separated Values (d3-dsv)](../../../d3-dsv)\n\nPursuant to the great namespace flattening, various CSV and TSV methods have new names:\n\n- d3.csv.parse ↦ [d3.csvParse](../../../d3-dsv#csvParse)\n- d3.csv.parseRows ↦ [d3.csvParseRows](../../../d3-dsv#csvParseRows)\n- d3.csv.format ↦ [d3.csvFormat](../../../d3-dsv#csvFormat)\n- d3.csv.formatRows ↦ [d3.csvFormatRows](../../../d3-dsv#csvFormatRows)\n- d3.tsv.parse ↦ [d3.tsvParse](../../../d3-dsv#tsvParse)\n- d3.tsv.parseRows ↦ [d3.tsvParseRows](../../../d3-dsv#tsvParseRows)\n- d3.tsv.format ↦ [d3.tsvFormat](../../../d3-dsv#tsvFormat)\n- d3.tsv.formatRows ↦ [d3.tsvFormatRows](../../../d3-dsv#tsvFormatRows)\n\nThe [d3.csv](../../../d3-request#csv) and [d3.tsv](../../../d3-request#tsv) methods for loading files of the corresponding formats have not been renamed, however! Those are defined in [d3-request](#requests-d3-request).There’s no longer a d3.dsv method, which served the triple purpose of defining a DSV formatter, a DSV parser and a DSV requestor; instead, there’s just [d3.dsvFormat](../../../d3-dsv#dsvFormat) which you can use to define a DSV formatter and parser. You can use [*request*.response](../../../d3-request#request_response) to make a request and then parse the response body, or just use [d3.text](../../../d3-request#text).\n\nThe [*dsv*.parse](../../../d3-dsv#dsv_parse) method now exposes the column names and their input order as *data*.columns. For example:\n\n``` javascript\nd3.csv(\"cars.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data.columns); // [\"Year\", \"Make\", \"Model\", \"Length\"]\n});\n```\n\nYou can likewise pass an optional array of column names to [*dsv*.format](../../../d3-dsv#dsv_format) to format only a subset of columns, or to specify the column order explicitly:\n\n``` javascript\nvar string = d3.csvFormat(data, [\"Year\", \"Model\", \"Length\"]);\n```\n\nThe parser is a bit faster and the formatter is a bit more robust: inputs are coerced to strings before formatting, fixing an obscure crash, and deprecated support for falling back to [*dsv*.formatRows](../../../d3-dsv#dsv_formatRows) when the input *data* is an array of arrays has been removed.\n\n## [Easings (d3-ease)](../../../d3-ease)\n\nD3 3.x used strings, such as “cubic-in-out”, to identify easing methods; these strings could be passed to d3.ease or *transition*.ease. D3 4.0 uses symbols instead, such as [d3.easeCubicInOut](../../../d3-ease#easeCubicInOut). Symbols are simpler and cleaner. They work well with Rollup to produce smaller custom bundles. You can still define your own custom easing function, too, if desired. Here’s the full list of equivalents:\n\n- linear ↦ [d3.easeLinear](../../../d3-ease#easeLinear)¹\n- linear-in ↦ [d3.easeLinear](../../../d3-ease#easeLinear)¹\n- linear-out ↦ [d3.easeLinear](../../../d3-ease#easeLinear)¹\n- linear-in-out ↦ [d3.easeLinear](../../../d3-ease#easeLinear)¹\n- linear-out-in ↦ [d3.easeLinear](../../../d3-ease#easeLinear)¹\n- poly-in ↦ [d3.easePolyIn](../../../d3-ease#easePolyIn)\n- poly-out ↦ [d3.easePolyOut](../../../d3-ease#easePolyOut)\n- poly-in-out ↦ [d3.easePolyInOut](../../../d3-ease#easePolyInOut)\n- poly-out-in ↦ REMOVED²\n- quad-in ↦ [d3.easeQuadIn](../../../d3-ease#easeQuadIn)\n- quad-out ↦ [d3.easeQuadOut](../../../d3-ease#easeQuadOut)\n- quad-in-out ↦ [d3.easeQuadInOut](../../../d3-ease#easeQuadInOut)\n- quad-out-in ↦ REMOVED²\n- cubic-in ↦ [d3.easeCubicIn](../../../d3-ease#easeCubicIn)\n- cubic-out ↦ [d3.easeCubicOut](../../../d3-ease#easeCubicOut)\n- cubic-in-out ↦ [d3.easeCubicInOut](../../../d3-ease#easeCubicInOut)\n- cubic-out-in ↦ REMOVED²\n- sin-in ↦ [d3.easeSinIn](../../../d3-ease#easeSinIn)\n- sin-out ↦ [d3.easeSinOut](../../../d3-ease#easeSinOut)\n- sin-in-out ↦ [d3.easeSinInOut](../../../d3-ease#easeSinInOut)\n- sin-out-in ↦ REMOVED²\n- exp-in ↦ [d3.easeExpIn](../../../d3-ease#easeExpIn)\n- exp-out ↦ [d3.easeExpOut](../../../d3-ease#easeExpOut)\n- exp-in-out ↦ [d3.easeExpInOut](../../../d3-ease#easeExpInOut)\n- exp-out-in ↦ REMOVED²\n- circle-in ↦ [d3.easeCircleIn](../../../d3-ease#easeCircleIn)\n- circle-out ↦ [d3.easeCircleOut](../../../d3-ease#easeCircleOut)\n- circle-in-out ↦ [d3.easeCircleInOut](../../../d3-ease#easeCircleInOut)\n- circle-out-in ↦ REMOVED²\n- elastic-in ↦ [d3.easeElasticOut](../../../d3-ease#easeElasticOut)²\n- elastic-out ↦ [d3.easeElasticIn](../../../d3-ease#easeElasticIn)²\n- elastic-in-out ↦ REMOVED²\n- elastic-out-in ↦ [d3.easeElasticInOut](../../../d3-ease#easeElasticInOut)²\n- back-in ↦ [d3.easeBackIn](../../../d3-ease#easeBackIn)\n- back-out ↦ [d3.easeBackOut](../../../d3-ease#easeBackOut)\n- back-in-out ↦ [d3.easeBackInOut](../../../d3-ease#easeBackInOut)\n- back-out-in ↦ REMOVED²\n- bounce-in ↦ [d3.easeBounceOut](../../../d3-ease#easeBounceOut)²\n- bounce-out ↦ [d3.easeBounceIn](../../../d3-ease#easeBounceIn)²\n- bounce-in-out ↦ REMOVED²\n- bounce-out-in ↦ [d3.easeBounceInOut](../../../d3-ease#easeBounceInOut)²\n\n¹ The -in, -out and -in-out variants of linear easing are identical, so there’s just d3.easeLinear.  \n² Elastic and bounce easing were inadvertently reversed in 3.x, so 4.0 eliminates -out-in easing!\n\nFor convenience, there are also default aliases for each easing method. For example, [d3.easeCubic](../../../d3-ease#easeCubic) is an alias for [d3.easeCubicInOut](../../../d3-ease#easeCubicInOut). Most default to -in-out; the exceptions are [d3.easeBounce](../../../d3-ease#easeBounce) and [d3.easeElastic](../../../d3-ease#easeElastic), which default to -out.\n\nRather than pass optional arguments to d3.ease or *transition*.ease, parameterizable easing functions now have named parameters: [*poly*.exponent](../../../d3-ease#poly_exponent), [*elastic*.amplitude](../../../d3-ease#elastic_amplitude), [*elastic*.period](../../../d3-ease#elastic_period) and [*back*.overshoot](../../../d3-ease#back_overshoot). For example, in D3 3.x you might say:\n\n``` javascript\nvar e = d3.ease(\"elastic-out-in\", 1.2);\n```\n\nThe equivalent in D3 4.0 is:\n\n``` javascript\nvar e = d3.easeElastic.amplitude(1.2);\n```\n\nMany of the easing functions have been optimized for performance and accuracy. Several bugs have been fixed, as well, such as the interpretation of the overshoot parameter for back easing, and the period parameter for elastic easing. Also, [d3-transition](#transitions-d3-transition) now explicitly guarantees that the last tick of the transition happens at exactly *t* = 1, avoiding floating point errors in some easing functions.\n\nThere’s now a nice [visual reference](../../../d3-ease) and an [animated reference](https://bl.ocks.org/mbostock/248bac3b8e354a9103c4) to the new easing functions, too!\n\n## [Forces (d3-force)](../../../d3-force)\n\nThe force layout d3.layout.force has been renamed to d3.forceSimulation. The force simulation now uses [velocity Verlet integration](https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet) rather than position Verlet, tracking the nodes’ positions (*node*.x, *node*.y) and velocities (*node*.vx, *node*.vy) rather than their previous positions (*node*.px, *node*.py).\n\nRather than hard-coding a set of built-in forces, the force simulation is now extensible: you specify which forces you want! The approach affords greater flexibility through composition. The new forces are more flexible, too: force parameters can typically be configured per-node or per-link. There are separate positioning forces for [*x*](../../../d3-force#forceX) and [*y*](../../../d3-force#forceY) that replace *force*.gravity; [*x*.x](../../../d3-force#x_x) and [*y*.y](../../../d3-force#y_y) replace *force*.size. The new [link force](../../../d3-force#forceLink) replaces *force*.linkStrength and employs better default heuristics to improve stability. The new [many-body force](../../../d3-force#forceManyBody) replaces *force*.charge and supports a new [minimum-distance parameter](../../../d3-force#manyBody_distanceMin) and performance improvements thanks to 4.0’s [new quadtrees](#quadtrees-d3-quadtree). There are also brand-new forces for [centering nodes](../../../d3-force#forceCenter) and [collision resolution](../../../d3-force#forceCollision).\n\nThe new forces and simulation have been carefully crafted to avoid nondeterminism. Rather than initializing nodes randomly, if the nodes do not have preset positions, they are placed in a phyllotaxis pattern:\n\nRandom jitter is still needed to resolve link, collision and many-body forces if there are coincident nodes, but at least in the common case, the force simulation (and the resulting force-directed graph layout) is now consistent across browsers and reloads. D3 no longer plays dice!\n\nThe force simulation has several new methods for greater control over heating, such as [*simulation*.alphaMin](../../../d3-force#simulation_alphaMin) and [*simulation*.alphaDecay](../../../d3-force#simulation_alphaDecay), and the internal timer. Calling [*simulation*.alpha](../../../d3-force#simulation_alpha) now has no effect on the internal timer, which is controlled independently via [*simulation*.stop](../../../d3-force#simulation_stop) and [*simulation*.restart](../../../d3-force#simulation_restart). The force layout’s internal timer now starts automatically on creation, removing *force*.start. As in 3.x, you can advance the simulation manually using [*simulation*.tick](../../../d3-force#simulation_tick). The *force*.friction parameter is replaced by *simulation*.velocityDecay. A new [*simulation*.alphaTarget](../../../d3-force#simulation_alphaTarget) method allows you to set the desired alpha (temperature) of the simulation, such that the simulation can be smoothly reheated during interaction, and then smoothly cooled again. This improves the stability of the graph during interaction.\n\nThe force layout no longer depends on the [drag behavior](#dragging-d3-drag), though you can certainly create [draggable force-directed graphs](https://bl.ocks.org/mbostock/ad70335eeef6d167bc36fd3c04378048)! Set *node*.fx and *node*.fy to fix a node’s position. As an alternative to a [Voronoi](#voronoi-d3-voronoi) SVG overlay, you can now use [*simulation*.find](../../../d3-force#simulation_find) to find the closest node to a pointer.\n\n## [Number Formats (d3-format)](../../../d3-format)\n\nIf a precision is not specified, the formatting behavior has changed: there is now a default precision of 6 for all directives except *none*, which defaults to 12. In 3.x, if you did not specify a precision, the number was formatted using its shortest unique representation (per [*number*.toString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)); this could lead to unexpected digits due to [floating point math](http://0.30000000000000004.com/). The new default precision in 4.0 produces more consistent results:\n\n``` javascript\nvar f = d3.format(\"e\");\nf(42);        // \"4.200000e+1\"\nf(0.1 + 0.2); // \"3.000000e-1\"\n```\n\nTo trim insignificant trailing zeroes, use the *none* directive, which is similar `g`. For example:\n\n``` javascript\nvar f = d3.format(\".3\");\nf(0.12345);   // \"0.123\"\nf(0.10000);   // \"0.1\"\nf(0.1 + 0.2); // \"0.3\"\n```\n\nUnder the hood, number formatting has improved accuracy with very large and very small numbers by using [*number*.toExponential](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) rather than [Math.log](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log) to extract the mantissa and exponent. Negative zero (-0, an IEEE 754 construct) and very small numbers that round to zero are now formatted as unsigned zero. The inherently unsafe d3.round method has been removed, along with d3.requote.\n\nThe [d3.formatPrefix](../../../d3-format#formatPrefix) method has been changed. Rather than returning an SI-prefix string, it returns an SI-prefix format function for a given *specifier* and reference *value*. For example, to format thousands:\n\n``` javascript\nvar f = d3.formatPrefix(\",.0\", 1e3);\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1,000k\"\n```\n\nUnlike the `s` format directive, d3.formatPrefix always employs the same SI-prefix, producing consistent results:\n\n``` javascript\nvar f = d3.format(\".0s\");\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1M\"\n```\n\nThe new `(` sign option uses parentheses for negative values. This is particularly useful in conjunction with `$`. For example:\n\n``` javascript\nd3.format(\"+.0f\")(-42);  // \"-42\"\nd3.format(\"(.0f\")(-42);  // \"(42)\"\nd3.format(\"+$.0f\")(-42); // \"-$42\"\nd3.format(\"($.0f\")(-42); // \"($42)\"\n```\n\nThe new `=` align option places any sign and symbol to the left of any padding:\n\n``` javascript\nd3.format(\">6d\")(-42);  // \"   -42\"\nd3.format(\"=6d\")(-42);  // \"-   42\"\nd3.format(\">(6d\")(-42); // \"  (42)\"\nd3.format(\"=(6d\")(-42); // \"(  42)\"\n```\n\nThe `b`, `o`, `d` and `x` directives now round to the nearest integer, rather than returning the empty string for non-integers:\n\n``` javascript\nd3.format(\"b\")(41.9); // \"101010\"\nd3.format(\"o\")(41.9); // \"52\"\nd3.format(\"d\")(41.9); // \"42\"\nd3.format(\"x\")(41.9); // \"2a\"\n```\n\nThe `c` directive is now for character data (*i.e.*, literal strings), not for character codes. The is useful if you just want to apply padding and alignment and don’t care about formatting numbers. For example, the infamous [left-pad](http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm) (as well as center- and right-pad!) can be conveniently implemented as:\n\n``` javascript\nd3.format(\">10c\")(\"foo\"); // \"       foo\"\nd3.format(\"^10c\")(\"foo\"); // \"   foo    \"\nd3.format(\"<10c\")(\"foo\"); // \"foo       \"\n```\n\nThere are several new methods for computing suggested decimal precisions; these are used by [d3-scale](#scales-d3-scale) for tick formatting, and are helpful for implementing custom number formats: [d3.precisionFixed](../../../d3-format#precisionFixed), [d3.precisionPrefix](../../../d3-format#precisionPrefix) and [d3.precisionRound](../../../d3-format#precisionRound). There’s also a new [d3.formatSpecifier](../../../d3-format#formatSpecifier) method for parsing, validating and debugging format specifiers; it’s also good for deriving related format specifiers, such as when you want to substitute the precision automatically.\n\nYou can now set the default locale using [d3.formatDefaultLocale](../../../d3-format#formatDefaultLocale)! The locales are published as [JSON](../../../d3-request#json) to [npm](https://unpkg.com/d3-format/locale/).\n\n## [Geographies (d3-geo)](../../../d3-geo)\n\nPursuant to the great namespace flattening, various methods have new names:\n\n- d3.geo.graticule ↦ [d3.geoGraticule](../../../d3-geo#geoGraticule)\n- d3.geo.circle ↦ [d3.geoCircle](../../../d3-geo#geoCircle)\n- d3.geo.area ↦ [d3.geoArea](../../../d3-geo#geoArea)\n- d3.geo.bounds ↦ [d3.geoBounds](../../../d3-geo#geoBounds)\n- d3.geo.centroid ↦ [d3.geoCentroid](../../../d3-geo#geoCentroid)\n- d3.geo.distance ↦ [d3.geoDistance](../../../d3-geo#geoDistance)\n- d3.geo.interpolate ↦ [d3.geoInterpolate](../../../d3-geo#geoInterpolate)\n- d3.geo.length ↦ [d3.geoLength](../../../d3-geo#geoLength)\n- d3.geo.rotation ↦ [d3.geoRotation](../../../d3-geo#geoRotation)\n- d3.geo.stream ↦ [d3.geoStream](../../../d3-geo#geoStream)\n- d3.geo.path ↦ [d3.geoPath](../../../d3-geo#geoPath)\n- d3.geo.projection ↦ [d3.geoProjection](../../../d3-geo#geoProjection)\n- d3.geo.projectionMutator ↦ [d3.geoProjectionMutator](../../../d3-geo#geoProjectionMutator)\n- d3.geo.albers ↦ [d3.geoAlbers](../../../d3-geo#geoAlbers)\n- d3.geo.albersUsa ↦ [d3.geoAlbersUsa](../../../d3-geo#geoAlbersUsa)\n- d3.geo.azimuthalEqualArea ↦ [d3.geoAzimuthalEqualArea](../../../d3-geo#geoAzimuthalEqualArea)\n- d3.geo.azimuthalEquidistant ↦ [d3.geoAzimuthalEquidistant](../../../d3-geo#geoAzimuthalEquidistant)\n- d3.geo.conicConformal ↦ [d3.geoConicConformal](../../../d3-geo#geoConicConformal)\n- d3.geo.conicEqualArea ↦ [d3.geoConicEqualArea](../../../d3-geo#geoConicEqualArea)\n- d3.geo.conicEquidistant ↦ [d3.geoConicEquidistant](../../../d3-geo#geoConicEquidistant)\n- d3.geo.equirectangular ↦ [d3.geoEquirectangular](../../../d3-geo#geoEquirectangular)\n- d3.geo.gnomonic ↦ [d3.geoGnomonic](../../../d3-geo#geoGnomonic)\n- d3.geo.mercator ↦ [d3.geoMercator](../../../d3-geo#geoMercator)\n- d3.geo.orthographic ↦ [d3.geoOrthographic](../../../d3-geo#geoOrthographic)\n- d3.geo.stereographic ↦ [d3.geoStereographic](../../../d3-geo#geoStereographic)\n- d3.geo.transverseMercator ↦ [d3.geoTransverseMercator](../../../d3-geo#geoTransverseMercator)\n\nAlso renamed for consistency:\n\n- *circle*.origin ↦ [*circle*.center](../../../d3-geo#circle_center)\n- *circle*.angle ↦ [*circle*.radius](../../../d3-geo#circle_radius)\n- *graticule*.majorExtent ↦ [*graticule*.extentMajor](../../../d3-geo#graticule_extentMajor)\n- *graticule*.minorExtent ↦ [*graticule*.extentMinor](../../../d3-geo#graticule_extentMinor)\n- *graticule*.majorStep ↦ [*graticule*.stepMajor](../../../d3-geo#graticule_stepMajor)\n- *graticule*.minorStep ↦ [*graticule*.stepMinor](../../../d3-geo#graticule_stepMinor)\n\nProjections now have more appropriate defaults. For example, [d3.geoOrthographic](../../../d3-geo#geoOrthographic) has a 90° clip angle by default, showing only the front hemisphere, and [d3.geoGnomonic](../../../d3-geo#geoGnomonic) has a default 60° clip angle. The default [projection](../../../d3-geo#path_projection) for [d3.geoPath](../../../d3-geo#geoPath) is now null rather than [d3.geoAlbersUsa](../../../d3-geo#geoAlbersUsa); a null projection is used with [pre-projected geometry](https://bl.ocks.org/mbostock/5557726) and is typically faster to render.\n\n“Fallback projections”—when you pass a function rather than a projection to [*path*.projection](../../../d3-geo#path_projection)—are no longer supported. For geographic projections, use [d3.geoProjection](../../../d3-geo#geoProjection) or [d3.geoProjectionMutator](../../../d3-geo#geoProjectionMutator) to define a custom projection. For arbitrary geometry transformations, implement the [stream interface](../../../d3-geo#streams); see also [d3.geoTransform](../../../d3-geo#geoTransform). The “raw” projections (e.g., d3.geo.equirectangular.raw) are no longer exported.\n\n## [Hierarchies (d3-hierarchy)](../../../d3-hierarchy)\n\nPursuant to the great namespace flattening:\n\n- d3.layout.cluster ↦ [d3.cluster](../../../d3-hierarchy#cluster)\n- d3.layout.hierarchy ↦ [d3.hierarchy](../../../d3-hierarchy#hierarchy)\n- d3.layout.pack ↦ [d3.pack](../../../d3-hierarchy#pack)\n- d3.layout.partition ↦ [d3.partition](../../../d3-hierarchy#partition)\n- d3.layout.tree ↦ [d3.tree](../../../d3-hierarchy#tree)\n- d3.layout.treemap ↦ [d3.treemap](../../../d3-hierarchy#treemap)\n\nAs an alternative to using JSON to represent hierarchical data (such as the “flare.json format” used by many D3 examples), the new [d3.stratify](../../../d3-hierarchy#stratify) operator simplifies the conversion of tabular data to hierarchical data! This is convenient if you already have data in a tabular format, such as the result of a SQL query or a CSV file:\n\n``` notranslate\nname,parent\nEve,\nCain,Eve\nSeth,Eve\nEnos,Seth\nNoam,Seth\nAbel,Eve\nAwan,Eve\nEnoch,Awan\nAzura,Eve\n```\n\nTo convert this to a root [*node*](../../../d3-hierarchy#hierarchy):\n\n``` javascript\nvar root = d3.stratify()\n    .id(function(d) { return d.name; })\n    .parentId(function(d) { return d.parent; })\n    (nodes);\n```\n\nThe resulting *root* can be passed to [d3.tree](../../../d3-hierarchy#tree) to produce a tree diagram like this:\n\nRoot nodes can also be created from JSON data using [d3.hierarchy](../../../d3-hierarchy#hierarchy). The hierarchy layouts now take these root nodes as input rather than operating directly on JSON data, which helps to provide a cleaner separation between the input data and the computed layout. (For example, use [*node*.copy](../../../d3-hierarchy#node_copy) to isolate layout changes.) It also simplifies the API: rather than each hierarchy layout needing to implement value and sorting accessors, there are now generic [*node*.sum](../../../d3-hierarchy#node_sum) and [*node*.sort](../../../d3-hierarchy#node_sort) methods that work with any hierarchy layout.\n\nThe new d3.hierarchy API also provides a richer set of methods for manipulating hierarchical data. For example, to generate an array of all nodes in topological order, use [*node*.descendants](../../../d3-hierarchy#node_descendants); for just leaf nodes, use [*node*.leaves](../../../d3-hierarchy#node_leaves). To highlight the ancestors of a given *node* on mouseover, use [*node*.ancestors](../../../d3-hierarchy#node_ancestors). To generate an array of {source, target} links for a given hierarchy, use [*node*.links](../../../d3-hierarchy#node_links); this replaces *treemap*.links and similar methods on the other layouts. The new [*node*.path](../../../d3-hierarchy#node_path) method replaces d3.layout.bundle; see also [d3.curveBundle](../../../d3-shape#curveBundle) for hierarchical edge bundling.\n\nThe hierarchy layouts have been rewritten using new, non-recursive traversal methods ([*node*.each](../../../d3-hierarchy#node_each), [*node*.eachAfter](../../../d3-hierarchy#node_eachAfter) and [*node*.eachBefore](../../../d3-hierarchy#node_eachBefore)), improving performance on large datasets. The d3.tree layout no longer uses a *node*.\\_ field to store temporary state during layout.\n\nTreemap tiling is now [extensible](../../../d3-hierarchy#treemap-tiling) via [*treemap*.tile](../../../d3-hierarchy#treemap_tile)! The default squarified tiling algorithm, [d3.treemapSquarify](../../../d3-hierarchy#treemapSquarify), has been completely rewritten, improving performance and fixing bugs in padding and rounding. The *treemap*.sticky method has been replaced with the [d3.treemapResquarify](../../../d3-hierarchy#treemapResquarify), which is identical to d3.treemapSquarify except it performs stable neighbor-preserving updates. The *treemap*.ratio method has been replaced with [*squarify*.ratio](../../../d3-hierarchy#squarify_ratio). And there’s a new [d3.treemapBinary](../../../d3-hierarchy#treemapBinary) for binary treemaps!\n\nTreemap padding has also been improved. The treemap now distinguishes between [outer padding](../../../d3-hierarchy#treemap_paddingOuter) that separates a parent from its children, and [inner padding](../../../d3-hierarchy#treemap_paddingInner) that separates adjacent siblings. You can set the [top-](../../../d3-hierarchy#treemap_paddingTop), [right-](../../../d3-hierarchy#treemap_paddingRight), [bottom-](../../../d3-hierarchy#treemap_paddingBottom) and [left-](../../../d3-hierarchy#treemap_paddingLeft)outer padding separately. There are new examples for the traditional [nested treemap](https://bl.ocks.org/mbostock/911ad09bdead40ec0061) and for Lü and Fogarty’s [cascaded treemap](https://bl.ocks.org/mbostock/f85ffb3a5ac518598043). And there’s a new example demonstrating [d3.nest with d3.treemap](https://bl.ocks.org/mbostock/2838bf53e0e65f369f476afd653663a2).\n\nThe space-filling layouts [d3.treemap](../../../d3-hierarchy#treemap) and [d3.partition](../../../d3-hierarchy#partition) now output *x0*, *x1*, *y0*, *y1* on each node instead of *x0*, *dx*, *y0*, *dy*. This improves accuracy by ensuring that the edges of adjacent cells are exactly equal, rather than sometimes being slightly off due to floating point math. The partition layout now supports [rounding](../../../d3-hierarchy#partition_round) and [padding](../../../d3-hierarchy#partition_padding).\n\nThe circle-packing layout, [d3.pack](../../../d3-hierarchy#pack), has been completely rewritten to better implement Wang et al.’s algorithm, fixing major bugs and improving results! Welzl’s algorithm is now used to compute the exact [smallest enclosing circle](https://bl.ocks.org/mbostock/29c534ff0b270054a01c) for each parent, rather than the approximate answer used by Wang et al. The 3.x output is shown on the left; 4.0 is shown on the right:\n\nA non-hierarchical implementation is also available as [d3.packSiblings](../../../d3-hierarchy#packSiblings), and the smallest enclosing circle implementation is available as [d3.packEnclose](../../../d3-hierarchy#packEnclose). [Pack padding](../../../d3-hierarchy#pack_padding) now applies between a parent and its children, as well as between adjacent siblings. In addition, you can now specify padding as a function that is computed dynamically for each parent.\n\n## Internals\n\nThe d3.rebind method has been removed. (See the [3.x source](https://github.com/d3/d3/blob/v3.5.17/src/core/rebind.js).) If you want to wrap a getter-setter method, the recommend pattern is to implement a wrapper method and check the return value. For example, given a *component* that uses an internal [*dispatch*](#dispatches-d3-dispatch), *component*.on can rebind *dispatch*.on as follows:\n\n``` javascript\ncomponent.on = function() {\n  var value = dispatch.on.apply(dispatch, arguments);\n  return value === dispatch ? component : value;\n};\n```\n\nThe d3.functor method has been removed. (See the [3.x source](https://github.com/d3/d3/blob/v3.5.17/src/core/functor.js).) If you want to promote a constant value to a function, the recommended pattern is to implement a closure that returns the constant value. If desired, you can use a helper method as follows:\n\n``` javascript\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n```\n\nGiven a value *x*, to promote *x* to a function if it is not already:\n\n``` javascript\nvar fx = typeof x === \"function\" ? x : constant(x);\n```\n\n## [Interpolators (d3-interpolate)](../../../d3-interpolate)\n\nThe [d3.interpolate](../../../d3-interpolate#interpolate) method no longer delegates to d3.interpolators, which has been removed; its behavior is now defined by the library. It is now slightly faster in the common case that *b* is a number. It only uses [d3.interpolateRgb](../../../d3-interpolate#interpolateRgb) if *b* is a valid CSS color specifier (and not approximately one). And if the end value *b* is null, undefined, true or false, d3.interpolate now returns a constant function which always returns *b*.\n\nThe behavior of [d3.interpolateObject](../../../d3-interpolate#interpolateObject) and [d3.interpolateArray](../../../d3-interpolate#interpolateArray) has changed slightly with respect to properties or elements in the start value *a* that do not exist in the end value *b*: these properties and elements are now ignored, such that the ending value of the interpolator at *t* = 1 is now precisely equal to *b*. So, in 3.x:\n\n``` javascript\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {bar: 1, foo: 2.5} in 3.x\n```\n\nWhereas in 4.0, *a*.bar is ignored:\n\n``` javascript\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {foo: 2.5} in 4.0\n```\n\nIf *a* or *b* are undefined or not an object, they are now implicitly converted to the empty object or empty array as appropriate, rather than throwing a TypeError.\n\nThe d3.interpolateTransform interpolator has been renamed to [d3.interpolateTransformSvg](../../../d3-interpolate#interpolateTransformSvg), and there is a new [d3.interpolateTransformCss](../../../d3-interpolate#interpolateTransformCss) to interpolate CSS transforms! This allows [d3-transition](#transitions-d3-transition) to automatically interpolate both the SVG [transform attribute](https://www.w3.org/TR/SVG/coords.html#TransformAttribute) and the CSS [transform style property](https://www.w3.org/TR/css-transforms-1/#transform-property). (Note, however, that only 2D CSS transforms are supported.) The d3.transform method has been removed.\n\nColor space interpolators now interpolate opacity (see [d3-color](#colors-d3-color)) and return rgb(…) or rgba(…) CSS color specifier strings rather than using the RGB hexadecimal format. This is necessary to support opacity interpolation, but is also beneficial because it matches CSS computed values. When a channel in the start color *a* is undefined, color interpolators now use the corresponding channel value from the end color *b*, or *vice versa*. This logic previously applied to some channels (such as saturation in HSL), but now applies to all channels in all color spaces, and is especially useful when interpolating to or from transparent.\n\nThere are now “long” versions of cylindrical color space interpolators: [d3.interpolateHslLong](../../../d3-interpolate#interpolateHslLong), [d3.interpolateHclLong](../../../d3-interpolate#interpolateHclLong) and [d3.interpolateCubehelixLong](../../../d3-interpolate#interpolateCubehelixLong). These interpolators use linear interpolation of hue, rather than using the shortest path around the 360° hue circle. See [d3.interpolateRainbow](../../../d3-scale#interpolateRainbow) for an example. The Cubehelix color space is now supported by [d3-color](#colors-d3-color), and so there are now [d3.interpolateCubehelix](../../../d3-interpolate#interpolateCubehelix) and [d3.interpolateCubehelixLong](../../../d3-interpolate#interpolateCubehelixLong) interpolators.\n\n[Gamma-corrected color interpolation](https://web.archive.org/web/20160112115812/http://www.4p8.com/eric.brasseur/gamma.html) is now supported for both RGB and Cubehelix color spaces as [*interpolate*.gamma](../../../d3-interpolate#interpolate_gamma). For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:\n\n``` javascript\nvar interpolate = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\n```\n\nThere are new interpolators for uniform non-rational [B-splines](https://en.wikipedia.org/wiki/B-spline)! These are useful for smoothly interpolating between an arbitrary sequence of values from *t* = 0 to *t* = 1, such as to generate a smooth color gradient from a discrete set of colors. The [d3.interpolateBasis](../../../d3-interpolate#interpolateBasis) and [d3.interpolateBasisClosed](../../../d3-interpolate#interpolateBasisClosed) interpolators generate one-dimensional B-splines, while [d3.interpolateRgbBasis](../../../d3-interpolate#interpolateRgbBasis) and [d3.interpolateRgbBasisClosed](../../../d3-interpolate#interpolateRgbBasisClosed) generate three-dimensional B-splines through RGB color space. These are used by [d3-scale-chromatic](../../../d3-scale-chromatic) to generate continuous color scales from ColorBrewer’s discrete color schemes, such as [PiYG](https://bl.ocks.org/mbostock/048d21cf747371b11884f75ad896e5a5).\n\nThere’s also now a [d3.quantize](../../../d3-interpolate#quantize) method for generating uniformly-spaced discrete samples from a continuous interpolator. This is useful for taking one of the built-in color scales (such as [d3.interpolateViridis](../../../d3-scale#interpolateViridis)) and quantizing it for use with [d3.scaleQuantize](../../../d3-scale#scaleQuantize), [d3.scaleQuantile](../../../d3-scale#scaleQuantile) or [d3.scaleThreshold](../../../d3-scale#scaleThreshold).\n\n## [Paths (d3-path)](../../../d3-path)\n\nThe [d3.path](../../../d3-path#path) serializer implements the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods), allowing you to write code that can render to either Canvas or SVG. For example, given some code that draws to a canvas:\n\n``` javascript\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\n```\n\nYou can render to SVG as follows:\n\n``` javascript\nvar context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\n```\n\nThe path serializer enables [d3-shape](#shapes-d3-shape) to support both Canvas and SVG; see [*line*.context](../../../d3-shape#line_context) and [*area*.context](../../../d3-shape#area_context), for example.\n\n## [Polygons (d3-polygon)](../../../d3-polygon)\n\nThere’s no longer a d3.geom.polygon constructor; instead you just pass an array of vertices to the polygon methods. So instead of *polygon*.area and *polygon*.centroid, there’s [d3.polygonArea](../../../d3-polygon#polygonArea) and [d3.polygonCentroid](../../../d3-polygon#polygonCentroid). There are also new [d3.polygonContains](../../../d3-polygon#polygonContains) and [d3.polygonLength](../../../d3-polygon#polygonLength) methods. There’s no longer an equivalent to *polygon*.clip, but if [Sutherland–Hodgman clipping](https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm) is needed, please [file a feature request](https://github.com/d3/d3-polygon/issues).\n\nThe d3.geom.hull operator has been simplified: instead of an operator with *hull*.x and *hull*.y accessors, there’s just the [d3.polygonHull](../../../d3-polygon#polygonHull) method which takes an array of points and returns the convex hull.\n\n## [Quadtrees (d3-quadtree)](../../../d3-quadtree)\n\nThe d3.geom.quadtree method has been replaced by [d3.quadtree](../../../d3-quadtree#quadtree). 4.0 removes the concept of quadtree “generators” (configurable functions that build a quadtree from an array of data); there are now just quadtrees, which you can create via d3.quadtree and add data to via [*quadtree*.add](../../../d3-quadtree#quadtree_add) and [*quadtree*.addAll](../../../d3-quadtree#quadtree_addAll). This code in 3.x:\n\n``` javascript\nvar quadtree = d3.geom.quadtree()\n    .extent([[0, 0], [width, height]])\n    (data);\n```\n\nCan be rewritten in 4.0 as:\n\n``` javascript\nvar quadtree = d3.quadtree()\n    .extent([[0, 0], [width, height]])\n    .addAll(data);\n```\n\nThe new quadtree implementation is vastly improved! It is no longer recursive, avoiding stack overflows when there are large numbers of coincident points. The internal storage is now more efficient, and the implementation is also faster; constructing a quadtree of 1M normally-distributed points takes about one second in 4.0, as compared to three seconds in 3.x.\n\nThe change in [internal *node* structure](../../../d3-quadtree#nodes) affects [*quadtree*.visit](../../../d3-quadtree#quadtree_visit): use *node*.length to distinguish leaf nodes from internal nodes. For example, to iterate over all data in a quadtree:\n\n``` javascript\nquadtree.visit(function(node) {\n  if (!node.length) {\n    do {\n      console.log(node.data);\n    } while (node = node.next)\n  }\n});\n```\n\nThere’s a new [*quadtree*.visitAfter](../../../d3-quadtree#quadtree_visitAfter) method for visiting nodes in post-order traversal. This feature is used in [d3-force](#forces-d3-force) to implement the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation).\n\nYou can now remove data from a quadtree using [*quadtree*.remove](../../../d3-quadtree#quadtree_remove) and [*quadtree*.removeAll](../../../d3-quadtree#quadtree_removeAll). When adding data to a quadtree, the quadtree will now expand its extent by repeated doubling if the new point is outside the existing extent of the quadtree. There are also [*quadtree*.extent](../../../d3-quadtree#quadtree_extent) and [*quadtree*.cover](../../../d3-quadtree#quadtree_cover) methods for explicitly expanding the extent of the quadtree after creation.\n\nQuadtrees support several new utility methods: [*quadtree*.copy](../../../d3-quadtree#quadtree_copy) returns a copy of the quadtree sharing the same data; [*quadtree*.data](../../../d3-quadtree#quadtree_data) generates an array of all data in the quadtree; [*quadtree*.size](../../../d3-quadtree#quadtree_size) returns the number of data points in the quadtree; and [*quadtree*.root](../../../d3-quadtree#quadtree_root) returns the root node, which is useful for manual traversal of the quadtree. The [*quadtree*.find](../../../d3-quadtree#quadtree_find) method now takes an optional search radius, which is useful for pointer-based selection in [force-directed graphs](https://bl.ocks.org/mbostock/ad70335eeef6d167bc36fd3c04378048).\n\n## [Queues (d3-queue)](../../../d3-queue)\n\nFormerly known as Queue.js and queue-async, [d3.queue](../../../d3-queue) is now included in the default bundle, making it easy to load data files in parallel. It has been rewritten with fewer closures to improve performance, and there are now stricter checks in place to guarantee well-defined behavior. You can now use instanceof d3.queue and inspect the queue’s internal private state.\n\n## [Random Numbers (d3-random)](../../../d3-random)\n\nPursuant to the great namespace flattening, the random number generators have new names:\n\n- d3.random.normal ↦ [d3.randomNormal](../../../d3-random#randomNormal)\n- d3.random.logNormal ↦ [d3.randomLogNormal](../../../d3-random#randomLogNormal)\n- d3.random.bates ↦ [d3.randomBates](../../../d3-random#randomBates)\n- d3.random.irwinHall ↦ [d3.randomIrwinHall](../../../d3-random#randomIrwinHall)\n\nThere are also new random number generators for [exponential](../../../d3-random#randomExponential) and [uniform](../../../d3-random#randomUniform) distributions. The [normal](../../../d3-random#randomNormal) and [log-normal](../../../d3-random#randomLogNormal) random generators have been optimized.\n\n## [Requests (d3-request)](../../../d3-request)\n\nThe d3.xhr method has been renamed to [d3.request](../../../d3-request#request). Basic authentication is now supported using [*request*.user](../../../d3-request#request_user) and [*request*.password](../../../d3-request#request_password). You can now configure a timeout using [*request*.timeout](../../../d3-request#request_timeout).\n\nIf an error occurs, the corresponding [ProgressEvent](https://xhr.spec.whatwg.org/#interface-progressevent) of type “error” is now passed to the error listener, rather than the [XMLHttpRequest](https://xhr.spec.whatwg.org/#interface-xmlhttprequest). Likewise, the ProgressEvent is passed to progress event listeners, rather than using [d3.event](../../../d3-selection#event). If [d3.xml](../../../d3-request#xml) encounters an error parsing XML, this error is now reported to error listeners rather than returning a null response.\n\nThe [d3.request](../../../d3-request#request), [d3.text](../../../d3-request#text) and [d3.xml](../../../d3-request#xml) methods no longer take an optional mime type as the second argument; use [*request*.mimeType](../../../d3-request#request_mimeType) instead. For example:\n\n``` javascript\nd3.xml(\"file.svg\").mimeType(\"image/svg+xml\").get(function(error, svg) {\n  …\n});\n```\n\nWith the exception of [d3.html](../../../d3-request#html) and [d3.xml](../../../d3-request#xml), Node is now supported via [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest).\n\n## [Scales (d3-scale)](../../../d3-scale)\n\nPursuant to the great namespace flattening:\n\n- d3.scale.linear ↦ [d3.scaleLinear](../../../d3-scale#scaleLinear)\n- d3.scale.sqrt ↦ [d3.scaleSqrt](../../../d3-scale#scaleSqrt)\n- d3.scale.pow ↦ [d3.scalePow](../../../d3-scale#scalePow)\n- d3.scale.log ↦ [d3.scaleLog](../../../d3-scale#scaleLog)\n- d3.scale.quantize ↦ [d3.scaleQuantize](../../../d3-scale#scaleQuantize)\n- d3.scale.threshold ↦ [d3.scaleThreshold](../../../d3-scale#scaleThreshold)\n- d3.scale.quantile ↦ [d3.scaleQuantile](../../../d3-scale#scaleQuantile)\n- d3.scale.identity ↦ [d3.scaleIdentity](../../../d3-scale#scaleIdentity)\n- d3.scale.ordinal ↦ [d3.scaleOrdinal](../../../d3-scale#scaleOrdinal)\n- d3.time.scale ↦ [d3.scaleTime](../../../d3-scale#scaleTime)\n- d3.time.scale.utc ↦ [d3.scaleUtc](../../../d3-scale#scaleUtc)\n\nScales now generate ticks in the same order as the domain: if you have a descending domain, you now get descending ticks. This change affects the order of tick elements generated by [axes](#axes-d3-axis). For example:\n\n``` javascript\nd3.scaleLinear().domain([10, 0]).ticks(5); // [10, 8, 6, 4, 2, 0]\n```\n\n[Log tick formatting](../../../d3-scale#log_tickFormat) now assumes a default *count* of ten, not Infinity, if not specified. Log scales with domains that span many powers (such as from 1e+3 to 1e+29) now return only one [tick](../../../d3-scale#log_ticks) per power rather than returning *base* ticks per power. Non-linear quantitative scales are slightly more accurate.\n\nYou can now control whether an ordinal scale’s domain is implicitly extended when the scale is passed a value that is not already in its domain. By default, [*ordinal*.unknown](../../../d3-scale#ordinal_unknown) is [d3.scaleImplicit](../../../d3-scale#scaleImplicit), causing unknown values to be added to the domain:\n\n``` javascript\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"]);\n\nx.domain(); // [0, 1]\nx(2); // \"blue\"\nx.domain(); // [0, 1, 2]\n```\n\nBy setting *ordinal*.unknown, you instead define the output value for unknown inputs. This is particularly useful for choropleth maps where you want to assign a color to missing data.\n\n``` javascript\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"])\n    .unknown(undefined);\n\nx.domain(); // [0, 1]\nx(2); // undefined\nx.domain(); // [0, 1]\n```\n\nThe *ordinal*.rangeBands and *ordinal*.rangeRoundBands methods have been replaced with a new subclass of ordinal scale: [band scales](../../../d3-scale#band-scales). The following code in 3.x:\n\n``` javascript\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangeBands([0, width]);\n```\n\nIs equivalent to this in 4.0:\n\n``` javascript\nvar x = d3.scaleBand()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\n```\n\nThe new [*band*.padding](../../../d3-scale#band_padding), [*band*.paddingInner](../../../d3-scale#band_paddingInner) and [*band*.paddingOuter](../../../d3-scale#band_paddingOuter) methods replace the optional arguments to *ordinal*.rangeBands. The new [*band*.bandwidth](../../../d3-scale#band_bandwidth) and [*band*.step](../../../d3-scale#band_step) methods replace *ordinal*.rangeBand. There’s also a new [*band*.align](../../../d3-scale#band_align) method which you can use to control how the extra space outside the bands is distributed, say to shift columns closer to the *y*-axis.\n\nSimilarly, the *ordinal*.rangePoints and *ordinal*.rangeRoundPoints methods have been replaced with a new subclass of ordinal scale: [point scales](../../../d3-scale#point-scales). The following code in 3.x:\n\n``` javascript\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangePoints([0, width]);\n```\n\nIs equivalent to this in 4.0:\n\n``` javascript\nvar x = d3.scalePoint()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\n```\n\nThe new [*point*.padding](../../../d3-scale#point_padding) method replaces the optional *padding* argument to *ordinal*.rangePoints. Like *ordinal*.rangeBand with *ordinal*.rangePoints, the [*point*.bandwidth](../../../d3-scale#point_bandwidth) method always returns zero; a new [*point*.step](../../../d3-scale#point_step) method returns the interval between adjacent points.\n\nThe [ordinal scale constructor](../../../d3-scale#ordinal-scales) now takes an optional *range* for a shorter alternative to [*ordinal*.range](../../../d3-scale#ordinal_range). This is especially useful now that the categorical color scales have been changed to simple arrays of colors rather than specialized ordinal scale constructors:\n\n- d3.scale.category10 ↦ [d3.schemeCategory10](../../../d3-scale#schemeCategory10)\n- d3.scale.category20 ↦ [d3.schemeCategory20](../../../d3-scale#schemeCategory20)\n- d3.scale.category20b ↦ [d3.schemeCategory20b](../../../d3-scale#schemeCategory20b)\n- d3.scale.category20c ↦ [d3.schemeCategory20c](../../../d3-scale#schemeCategory20c)\n\nThe following code in 3.x:\n\n``` javascript\nvar color = d3.scale.category10();\n```\n\nIs equivalent to this in 4.0:\n\n``` javascript\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\n```\n\n[Sequential scales](../../../d3-scale#scaleSequential), are a new class of scales with a fixed output [interpolator](../../../d3-scale#sequential_interpolator) instead of a [range](../../../d3-scale#continuous_range). Typically these scales are used to implement continuous sequential or diverging color schemes. Inspired by Matplotlib’s new [perceptually-motived colormaps](https://bids.github.io/colormap/), 4.0 now features [viridis](../../../d3-scale#interpolateViridis), [inferno](../../../d3-scale#interpolateInferno), [magma](../../../d3-scale#interpolateMagma), [plasma](../../../d3-scale#interpolatePlasma) interpolators for use with sequential scales. Using [d3.quantize](../../../d3-interpolate#quantize), these interpolators can also be applied to [quantile](../../../d3-scale#quantile-scales), [quantize](../../../d3-scale#quantize-scales) and [threshold](../../../d3-scale#threshold-scales) scales.\n\n4.0 also ships new Cubehelix schemes, including [Dave Green’s default](../../../d3-scale#interpolateCubehelixDefault) and a [cyclical rainbow](../../../d3-scale#interpolateRainbow) inspired by [Matteo Niccoli](https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/):\n\nFor even more sequential and categorical color schemes, see [d3-scale-chromatic](../../../d3-scale-chromatic).\n\nFor an introduction to scales, see [Introducing d3-scale](https://medium.com/@mbostock/introducing-d3-scale-61980c51545f).\n\n## [Selections (d3-selection)](../../../d3-selection)\n\nSelections no longer subclass Array using [prototype chain injection](http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/#wrappers_prototype_chain_injection); they are now plain objects, improving performance. The internal fields (*selection*.\\_groups, *selection*.\\_parents) are private; please use the documented public API to manipulate selections. The new [*selection*.nodes](../../../d3-selection#selection_nodes) method generates an array of all nodes in a selection.\n\nSelections are now immutable: the elements and parents in a selection never change. (The elements’ attributes and content will of course still be modified!) The [*selection*.sort](../../../d3-selection#selection_sort) and [*selection*.data](../../../d3-selection#selection_data) methods now return new selections rather than modifying the selection in-place. In addition, [*selection*.append](../../../d3-selection#selection_append) no longer merges entering nodes into the update selection; use [*selection*.merge](../../../d3-selection#selection_merge) to combine enter and update after a data join. For example, the following [general update pattern](https://bl.ocks.org/mbostock/a8a5baa4c4a470cda598) in 3.x:\n\n``` javascript\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER; modifies UPDATE! 🌶\n    .style(\"fill\", \"green\");\n\ncircle // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\n```\n\nWould be rewritten in 4.0 as:\n\n``` javascript\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER\n    .style(\"fill\", \"green\")\n  .merge(circle) // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\n```\n\nThis change is discussed further in [What Makes Software Good](https://medium.com/@mbostock/what-makes-software-good-943557f8a488).\n\nIn 3.x, the [*selection*.enter](../../../d3-selection#selection_enter) and [*selection*.exit](../../../d3-selection#selection_exit) methods were undefined until you called *selection*.data, resulting in a TypeError if you attempted to access them. In 4.0, now they simply return the empty selection if the selection has not been joined to data.\n\nIn 3.x, [*selection*.append](../../../d3-selection#selection_append) would always append the new element as the last child of its parent. A little-known trick was to use [*selection*.insert](../../../d3-selection#selection_insert) without specifying a *before* selector when entering nodes, causing the entering nodes to be inserted before the following element in the update selection. In 4.0, this is now the default behavior of *selection*.append; if you do not specify a *before* selector to *selection*.insert, the inserted element is appended as the last child. This change makes the general update pattern preserve the relative order of elements and data. For example, given the following DOM:\n\n``` markup\n<div>a</div>\n<div>b</div>\n<div>f</div>\n```\n\nAnd the following code:\n\n``` javascript\nvar div = d3.select(\"body\").selectAll(\"div\")\n  .data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], function(d) { return d || this.textContent; });\n\ndiv.enter().append(\"div\")\n    .text(function(d) { return d; });\n```\n\nThe resulting DOM will be:\n\n``` markup\n<div>a</div>\n<div>b</div>\n<div>c</div>\n<div>d</div>\n<div>e</div>\n<div>f</div>\n```\n\nThus, the entering *c*, *d* and *e* are inserted before *f*, since *f* is the following element in the update selection. Although this behavior is sufficient to preserve order if the new data’s order is stable, if the data changes order, you must still use [*selection*.order](../../../d3-selection#selection_order) to reorder elements.\n\nThere is now only one class of selection. 3.x implemented enter selections using a special class with different behavior for *enter*.append and *enter*.select; a consequence of this design was that enter selections in 3.x lacked [certain methods](https://github.com/d3/d3/issues/2043). In 4.0, enter selections are simply normal selections; they have the same methods and the same behavior. Placeholder [enter nodes](https://github.com/d3/d3-selection/blob/master/src/selection/enter.js) now implement [*node*.appendChild](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild), [*node*.insertBefore](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore), [*node*.querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector), and [*node*.querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll).\n\nThe [*selection*.data](../../../d3-selection#selection_data) method has been changed slightly with respect to duplicate keys. In 3.x, if multiple data had the same key, the duplicate data would be ignored and not included in enter, update or exit; in 4.0 the duplicate data is always put in the enter selection. In both 3.x and 4.0, if multiple elements have the same key, the duplicate elements are put in the exit selection. Thus, 4.0’s behavior is now symmetric for enter and exit, and the general update pattern will now produce a DOM that matches the data even if there are duplicate keys.\n\nSelections have several new methods! Use [*selection*.raise](../../../d3-selection#selection_raise) to move the selected elements to the front of their siblings, so that they are drawn on top; use [*selection*.lower](../../../d3-selection#selection_lower) to move them to the back. Use [*selection*.dispatch](../../../d3-selection#selection_dispatch) to dispatch a [custom event](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) to event listeners.\n\nWhen called in getter mode, [*selection*.data](../../../d3-selection#selection_data) now returns the data for all elements in the selection, rather than just the data for the first group of elements. The [*selection*.call](../../../d3-selection#selection_call) method no longer sets the `this` context when invoking the specified function; the *selection* is passed as the first argument to the function, so use that. The [*selection*.on](../../../d3-selection#selection_on) method now accepts multiple whitespace-separated typenames, so you can add or remove multiple listeners simultaneously. For example:\n\n``` javascript\nselection.on(\"mousedown touchstart\", function() {\n  console.log(d3.event.type);\n});\n```\n\nThe arguments passed to callback functions has changed slightly in 4.0 to be more consistent. The standard arguments are the element’s datum (*d*), the element’s index (*i*), and the element’s group (*nodes*), with *this* as the element. The slight exception to this convention is *selection*.data, which is evaluated for each group rather than each element; it is passed the group’s parent datum (*d*), the group index (*i*), and the selection’s parents (*parents*), with *this* as the group’s parent.\n\nThe new [d3.local](../../../d3-selection#local-variables) provides a mechanism for defining [local variables](https://bl.ocks.org/mbostock/e1192fe405703d8321a5187350910e08): state that is bound to DOM elements, and available to any descendant element. This can be a convenient alternative to using [*selection*.each](../../../d3-selection#selection_each) or storing local state in data.\n\nThe d3.ns.prefix namespace prefix map has been renamed to [d3.namespaces](../../../d3-selection#namespaces), and the d3.ns.qualify method has been renamed to [d3.namespace](../../../d3-selection#namespace). Several new low-level methods are now available, as well. [d3.matcher](../../../d3-selection#matcher) is used internally by [*selection*.filter](../../../d3-selection#selection_filter); [d3.selector](../../../d3-selection#selector) is used by [*selection*.select](../../../d3-selection#selection_select); [d3.selectorAll](../../../d3-selection#selectorAll) is used by [*selection*.selectAll](../../../d3-selection#selection_selectAll); [d3.creator](../../../d3-selection#creator) is used by [*selection*.append](../../../d3-selection#selection_append) and [*selection*.insert](../../../d3-selection#selection_insert). The new [d3.window](../../../d3-selection#window) returns the owner window for a given element, window or document. The new [d3.customEvent](../../../d3-selection#customEvent) temporarily sets [d3.event](../../../d3-selection#event) while invoking a function, allowing you to implement controls which dispatch custom events; this is used by [d3-drag](../../../d3-drag), [d3-zoom](../../../d3-zoom) and [d3-brush](../../../d3-brush).\n\nFor the sake of parsimony, the multi-value methods—where you pass an object to set multiple attributes, styles or properties simultaneously—have been extracted to [d3-selection-multi](../../../d3-selection-multi) and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: [*selection*.attrs](../../../d3-selection-multi#selection_attrs), [*selection*.styles](../../../d3-selection-multi#selection_styles) and [*selection*.properties](../../../d3-selection-multi#selection_properties).\n\n## [Shapes (d3-shape)](../../../d3-shape)\n\nPursuant to the great namespace flattening:\n\n- d3.svg.line ↦ [d3.line](../../../d3-shape#lines)\n- d3.svg.line.radial ↦ [d3.radialLine](../../../d3-shape#radialLine)\n- d3.svg.area ↦ [d3.area](../../../d3-shape#areas)\n- d3.svg.area.radial ↦ [d3.radialArea](../../../d3-shape#radialArea)\n- d3.svg.arc ↦ [d3.arc](../../../d3-shape#arcs)\n- d3.svg.symbol ↦ [d3.symbol](../../../d3-shape#symbols)\n- d3.svg.symbolTypes ↦ [d3.symbolTypes](../../../d3-shape#symbolTypes)\n- d3.layout.pie ↦ [d3.pie](../../../d3-shape#pies)\n- d3.layout.stack ↦ [d3.stack](../../../d3-shape#stacks)\n- d3.svg.diagonal ↦ REMOVED (see [d3/d3-shape#27](https://github.com/d3/d3-shape/issues/27))\n- d3.svg.diagonal.radial ↦ REMOVED\n\nShapes are no longer limited to SVG; they can now render to Canvas! Shape generators now support an optional *context*: given a [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D), you can render a shape as a canvas path to be filled or stroked. For example, a [canvas pie chart](https://bl.ocks.org/mbostock/8878e7fd82034f1d63cf) might use an arc generator:\n\n``` javascript\nvar arc = d3.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(0)\n    .context(context);\n```\n\nTo render an arc for a given datum *d*:\n\n``` javascript\ncontext.beginPath();\narc(d);\ncontext.fill();\n```\n\nSee [*line*.context](../../../d3-shape#line_context), [*area*.context](../../../d3-shape#area_context) and [*arc*.context](../../../d3-shape#arc_context) for more. Under the hood, shapes use [d3-path](#paths-d3-path) to serialize canvas path methods to SVG path data when the context is null; thus, shapes are optimized for rendering to canvas. You can also now derive lines from areas. The line shares most of the same accessors, such as [*line*.defined](../../../d3-shape#line_defined) and [*line*.curve](../../../d3-shape#line_curve), with the area from which it is derived. For example, to render the topline of an area, use [*area*.lineY1](../../../d3-shape#area_lineY1); for the baseline, use [*area*.lineY0](../../../d3-shape#area_lineY0).\n\n4.0 introduces a new curve API for specifying how line and area shapes interpolate between data points. The *line*.interpolate and *area*.interpolate methods have been replaced with [*line*.curve](../../../d3-shape#line_curve) and [*area*.curve](../../../d3-shape#area_curve). Curves are implemented using the [curve interface](../../../d3-shape#custom-curves) rather than as a function that returns an SVG path data string; this allows curves to render to either SVG or Canvas. In addition, *line*.curve and *area*.curve now take a function which instantiates a curve for a given *context*, rather than a string. The full list of equivalents:\n\n- linear ↦ [d3.curveLinear](../../../d3-shape#curveLinear)\n- linear-closed ↦ [d3.curveLinearClosed](../../../d3-shape#curveLinearClosed)\n- step ↦ [d3.curveStep](../../../d3-shape#curveStep)\n- step-before ↦ [d3.curveStepBefore](../../../d3-shape#curveStepBefore)\n- step-after ↦ [d3.curveStepAfter](../../../d3-shape#curveStepAfter)\n- basis ↦ [d3.curveBasis](../../../d3-shape#curveBasis)\n- basis-open ↦ [d3.curveBasisOpen](../../../d3-shape#curveBasisOpen)\n- basis-closed ↦ [d3.curveBasisClosed](../../../d3-shape#curveBasisClosed)\n- bundle ↦ [d3.curveBundle](../../../d3-shape#curveBundle)\n- cardinal ↦ [d3.curveCardinal](../../../d3-shape#curveCardinal)\n- cardinal-open ↦ [d3.curveCardinalOpen](../../../d3-shape#curveCardinalOpen)\n- cardinal-closed ↦ [d3.curveCardinalClosed](../../../d3-shape#curveCardinalClosed)\n- monotone ↦ [d3.curveMonotoneX](../../../d3-shape#curveMonotoneX)\n\nBut that’s not all! 4.0 now provides parameterized Catmull–Rom splines as proposed by [Yuksel *et al.*](http://www.cemyuksel.com/research/catmullrom_param/). These are available as [d3.curveCatmullRom](../../../d3-shape#curveCatmullRom), [d3.curveCatmullRomClosed](../../../d3-shape#curveCatmullRomClosed) and [d3.curveCatmullRomOpen](../../../d3-shape#curveCatmullRomOpen).\n\nEach curve type can define its own named parameters, replacing *line*.tension and *area*.tension. For example, Catmull–Rom splines are parameterized using [*catmullRom*.alpha](../../../d3-shape#curveCatmullRom_alpha) and defaults to 0.5, which corresponds to a centripetal spline that avoids self-intersections and overshoot. For a uniform Catmull–Rom spline instead:\n\n``` javascript\nvar line = d3.line()\n    .curve(d3.curveCatmullRom.alpha(0));\n```\n\n4.0 fixes the interpretation of the cardinal spline *tension* parameter, which is now specified as [*cardinal*.tension](../../../d3-shape#curveCardinal_tension) and defaults to zero for a uniform Catmull–Rom spline; a tension of one produces a linear curve. The first and last segments of basis and cardinal curves have also been fixed! The undocumented *interpolate*.reverse field has been removed. Curves can define different behavior for toplines and baselines by counting the sequence of [*curve*.lineStart](../../../d3-shape#curve_lineStart) within [*curve*.areaStart](../../../d3-shape#curve_areaStart). See the [d3.curveStep implementation](https://github.com/d3/d3-shape/blob/master/src/curve/step.js) for an example.\n\n4.0 fixes numerous bugs in the monotone curve implementation, and introduces [d3.curveMonotoneY](../../../d3-shape#curveMonotoneY); this is like d3.curveMonotoneX, except it requires that the input points are monotone in *y* rather than *x*, such as for a vertically-oriented line chart. The new [d3.curveNatural](../../../d3-shape#curveNatural) produces a [natural cubic spline](http://mathworld.wolfram.com/CubicSpline.html). The default [β](../../../d3-shape#bundle_beta) for [d3.curveBundle](../../../d3-shape#curveBundle) is now 0.85, rather than 0.7, matching the values used by [Holten](https://www.win.tue.nl/vis1/home/dholten/papers/bundles_infovis.pdf). 4.0 also has a more robust implementation of arc padding; see [*arc*.padAngle](../../../d3-shape#arc_padAngle) and [*arc*.padRadius](../../../d3-shape#arc_padRadius).\n\n4.0 introduces a new symbol type API. Symbol types are passed to [*symbol*.type](../../../d3-shape#symbol_type) in place of strings. The equivalents are:\n\n- circle ↦ [d3.symbolCircle](../../../d3-shape#symbolCircle)\n- cross ↦ [d3.symbolCross](../../../d3-shape#symbolCross)\n- diamond ↦ [d3.symbolDiamond](../../../d3-shape#symbolDiamond)\n- square ↦ [d3.symbolSquare](../../../d3-shape#symbolSquare)\n- triangle-down ↦ REMOVED\n- triangle-up ↦ [d3.symbolTriangle](../../../d3-shape#symbolTriangle)\n- ADDED ↦ [d3.symbolStar](../../../d3-shape#symbolStar)\n- ADDED ↦ [d3.symbolWye](../../../d3-shape#symbolWye)\n\nThe full set of symbol types is now:\n\nLastly, 4.0 overhauls the stack layout API, replacing d3.layout.stack with [d3.stack](../../../d3-shape#stacks). The stack generator no longer needs an *x*-accessor. In addition, the API has been simplified: the *stack* generator now accepts tabular input, such as this array of objects:\n\n``` javascript\nvar data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}\n];\n```\n\nTo generate the stack layout, first define a stack generator, and then apply it to the data:\n\n``` javascript\nvar stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\n\nvar series = stack(data);\n```\n\nThe resulting array has one element per *series*. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:\n\n``` javascript\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates\n]\n```\n\nEach series in then typically passed to an [area generator](../../../d3-shape#areas) to render an area chart, or used to construct rectangles for a bar chart. Stack generators no longer modify the input data, so *stack*.out has been removed.\n\nFor an introduction to shapes, see [Introducing d3-shape](https://medium.com/@mbostock/introducing-d3-shape-73f8367e6d12).\n\n## [Time Formats (d3-time-format)](../../../d3-time-format)\n\nPursuant to the great namespace flattening, the format constructors have new names:\n\n- d3.time.format ↦ [d3.timeFormat](../../../d3-time-format#timeFormat)\n- d3.time.format.utc ↦ [d3.utcFormat](../../../d3-time-format#utcFormat)\n- d3.time.format.iso ↦ [d3.isoFormat](../../../d3-time-format#isoFormat)\n\nThe *format*.parse method has also been removed in favor of separate [d3.timeParse](../../../d3-time-format#timeParse), [d3.utcParse](../../../d3-time-format#utcParse) and [d3.isoParse](../../../d3-time-format#isoParse) parser constructors. Thus, this code in 3.x:\n\n``` javascript\nvar parseTime = d3.time.format(\"%c\").parse;\n```\n\nCan be rewritten in 4.0 as:\n\n``` javascript\nvar parseTime = d3.timeParse(\"%c\");\n```\n\nThe multi-scale time format d3.time.format.multi has been replaced by [d3.scaleTime](../../../d3-scale#scaleTime)’s [tick format](../../../d3-scale#time_tickFormat). Time formats now coerce inputs to dates, and time parsers coerce inputs to strings. The `%Z` directive now allows more flexible parsing of time zone offsets, such as `-0700`, `-07:00`, `-07`, and `Z`. The `%p` directive is now parsed correctly when the locale’s period name is longer than two characters (*e.g.*, “a.m.”).\n\nThe default U.S. English locale now uses 12-hour time and a more concise representation of the date. This aligns with local convention and is consistent with [*date*.toLocaleString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) in Chrome, Firefox and Node:\n\n``` javascript\nvar now = new Date;\nd3.timeFormat(\"%c\")(new Date); // \"6/23/2016, 2:01:33 PM\"\nd3.timeFormat(\"%x\")(new Date); // \"6/23/2016\"\nd3.timeFormat(\"%X\")(new Date); // \"2:01:38 PM\"\n```\n\nYou can now set the default locale using [d3.timeFormatDefaultLocale](../../../d3-time-format#timeFormatDefaultLocale)! The locales are published as [JSON](../../../d3-request#json) to [npm](https://unpkg.com/d3-time-format/locale/).\n\nThe performance of time formatting and parsing has been improved, and the UTC formatter and parser have a cleaner implementation (that avoids temporarily overriding the Date global).\n\n## [Time Intervals (d3-time)](../../../d3-time)\n\nPursuant to the great namespace flattening, the local time intervals have been renamed:\n\n- ADDED ↦ [d3.timeMillisecond](../../../d3-time#timeMillisecond)\n- d3.time.second ↦ [d3.timeSecond](../../../d3-time#timeSecond)\n- d3.time.minute ↦ [d3.timeMinute](../../../d3-time#timeMinute)\n- d3.time.hour ↦ [d3.timeHour](../../../d3-time#timeHour)\n- d3.time.day ↦ [d3.timeDay](../../../d3-time#timeDay)\n- d3.time.sunday ↦ [d3.timeSunday](../../../d3-time#timeSunday)\n- d3.time.monday ↦ [d3.timeMonday](../../../d3-time#timeMonday)\n- d3.time.tuesday ↦ [d3.timeTuesday](../../../d3-time#timeTuesday)\n- d3.time.wednesday ↦ [d3.timeWednesday](../../../d3-time#timeWednesday)\n- d3.time.thursday ↦ [d3.timeThursday](../../../d3-time#timeThursday)\n- d3.time.friday ↦ [d3.timeFriday](../../../d3-time#timeFriday)\n- d3.time.saturday ↦ [d3.timeSaturday](../../../d3-time#timeSaturday)\n- d3.time.week ↦ [d3.timeWeek](../../../d3-time#timeWeek)\n- d3.time.month ↦ [d3.timeMonth](../../../d3-time#timeMonth)\n- d3.time.year ↦ [d3.timeYear](../../../d3-time#timeYear)\n\nThe UTC time intervals have likewise been renamed:\n\n- ADDED ↦ [d3.utcMillisecond](../../../d3-time#utcMillisecond)\n- d3.time.second.utc ↦ [d3.utcSecond](../../../d3-time#utcSecond)\n- d3.time.minute.utc ↦ [d3.utcMinute](../../../d3-time#utcMinute)\n- d3.time.hour.utc ↦ [d3.utcHour](../../../d3-time#utcHour)\n- d3.time.day.utc ↦ [d3.utcDay](../../../d3-time#utcDay)\n- d3.time.sunday.utc ↦ [d3.utcSunday](../../../d3-time#utcSunday)\n- d3.time.monday.utc ↦ [d3.utcMonday](../../../d3-time#utcMonday)\n- d3.time.tuesday.utc ↦ [d3.utcTuesday](../../../d3-time#utcTuesday)\n- d3.time.wednesday.utc ↦ [d3.utcWednesday](../../../d3-time#utcWednesday)\n- d3.time.thursday.utc ↦ [d3.utcThursday](../../../d3-time#utcThursday)\n- d3.time.friday.utc ↦ [d3.utcFriday](../../../d3-time#utcFriday)\n- d3.time.saturday.utc ↦ [d3.utcSaturday](../../../d3-time#utcSaturday)\n- d3.time.week.utc ↦ [d3.utcWeek](../../../d3-time#utcWeek)\n- d3.time.month.utc ↦ [d3.utcMonth](../../../d3-time#utcMonth)\n- d3.time.year.utc ↦ [d3.utcYear](../../../d3-time#utcYear)\n\nThe local time range aliases have been renamed:\n\n- d3.time.seconds ↦ [d3.timeSeconds](../../../d3-time#timeSeconds)\n- d3.time.minutes ↦ [d3.timeMinutes](../../../d3-time#timeMinutes)\n- d3.time.hours ↦ [d3.timeHours](../../../d3-time#timeHours)\n- d3.time.days ↦ [d3.timeDays](../../../d3-time#timeDays)\n- d3.time.sundays ↦ [d3.timeSundays](../../../d3-time#timeSundays)\n- d3.time.mondays ↦ [d3.timeMondays](../../../d3-time#timeMondays)\n- d3.time.tuesdays ↦ [d3.timeTuesdays](../../../d3-time#timeTuesdays)\n- d3.time.wednesdays ↦ [d3.timeWednesdays](../../../d3-time#timeWednesdays)\n- d3.time.thursdays ↦ [d3.timeThursdays](../../../d3-time#timeThursdays)\n- d3.time.fridays ↦ [d3.timeFridays](../../../d3-time#timeFridays)\n- d3.time.saturdays ↦ [d3.timeSaturdays](../../../d3-time#timeSaturdays)\n- d3.time.weeks ↦ [d3.timeWeeks](../../../d3-time#timeWeeks)\n- d3.time.months ↦ [d3.timeMonths](../../../d3-time#timeMonths)\n- d3.time.years ↦ [d3.timeYears](../../../d3-time#timeYears)\n\nThe UTC time range aliases have been renamed:\n\n- d3.time.seconds.utc ↦ [d3.utcSeconds](../../../d3-time#utcSeconds)\n- d3.time.minutes.utc ↦ [d3.utcMinutes](../../../d3-time#utcMinutes)\n- d3.time.hours.utc ↦ [d3.utcHours](../../../d3-time#utcHours)\n- d3.time.days.utc ↦ [d3.utcDays](../../../d3-time#utcDays)\n- d3.time.sundays.utc ↦ [d3.utcSundays](../../../d3-time#utcSundays)\n- d3.time.mondays.utc ↦ [d3.utcMondays](../../../d3-time#utcMondays)\n- d3.time.tuesdays.utc ↦ [d3.utcTuesdays](../../../d3-time#utcTuesdays)\n- d3.time.wednesdays.utc ↦ [d3.utcWednesdays](../../../d3-time#utcWednesdays)\n- d3.time.thursdays.utc ↦ [d3.utcThursdays](../../../d3-time#utcThursdays)\n- d3.time.fridays.utc ↦ [d3.utcFridays](../../../d3-time#utcFridays)\n- d3.time.saturdays.utc ↦ [d3.utcSaturdays](../../../d3-time#utcSaturdays)\n- d3.time.weeks.utc ↦ [d3.utcWeeks](../../../d3-time#utcWeeks)\n- d3.time.months.utc ↦ [d3.utcMonths](../../../d3-time#utcMonths)\n- d3.time.years.utc ↦ [d3.utcYears](../../../d3-time#utcYears)\n\nThe behavior of [*interval*.range](../../../d3-time#interval_range) (and the convenience aliases such as [d3.timeDays](../../../d3-time#timeDays)) has been changed when *step* is greater than one. Rather than filtering the returned dates using the field number, *interval*.range now behaves like [d3.range](../../../d3-array#range): it simply skips, returning every *step*th date. For example, the following code in 3.x returns only odd days of the month:\n\n``` javascript\nd3.time.days(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\nNote the returned array of dates does not start on the *start* date because May 28 is even. Also note that May 31 and June 1 are one day apart, not two! The behavior of d3.timeDays in 4.0 is probably closer to what you expect:\n\n``` javascript\nd3.timeDays(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sat May 28 2016 00:00:00 GMT-0700 (PDT),\n//  Mon May 30 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\nIf you want a filtered view of a time interval (say to guarantee that two overlapping ranges are consistent, such as when generating [time scale ticks](../../../d3-scale#time_ticks)), you can use the new [*interval*.every](../../../d3-time#interval_every) method or its more general cousin [*interval*.filter](../../../d3-time#interval_filter):\n\n``` javascript\nd3.timeDay.every(2).range(new Date(2016, 4, 28), new Date(2016, 5, 5));\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\nTime intervals now expose an [*interval*.count](../../../d3-time#interval_count) method for counting the number of interval boundaries after a *start* date and before or equal to an *end* date. This replaces d3.time.dayOfYear and related methods in 3.x. For example, this code in 3.x:\n\n``` javascript\nvar now = new Date;\nd3.time.dayOfYear(now); // 165\n```\n\nCan be rewritten in 4.0 as:\n\n``` javascript\nvar now = new Date;\nd3.timeDay.count(d3.timeYear(now), now); // 165\n```\n\nLikewise, in place of 3.x’s d3.time.weekOfYear, in 4.0 you would say:\n\n``` javascript\nd3.timeWeek.count(d3.timeYear(now), now); // 24\n```\n\nThe new *interval*.count is of course more general. For example, you can use it to compute hour-of-week for a heatmap:\n\n``` javascript\nd3.timeHour.count(d3.timeWeek(now), now); // 64\n```\n\nHere are all the equivalences from 3.x to 4.0:\n\n- d3.time.dayOfYear ↦ [d3.timeDay](../../../d3-time#timeDay).[count](../../../d3-time#interval_count)\n- d3.time.sundayOfYear ↦ [d3.timeSunday](../../../d3-time#timeSunday).[count](../../../d3-time#interval_count)\n- d3.time.mondayOfYear ↦ [d3.timeMonday](../../../d3-time#timeMonday).[count](../../../d3-time#interval_count)\n- d3.time.tuesdayOfYear ↦ [d3.timeTuesday](../../../d3-time#timeTuesday).[count](../../../d3-time#interval_count)\n- d3.time.wednesdayOfYear ↦ [d3.timeWednesday](../../../d3-time#timeWednesday).[count](../../../d3-time#interval_count)\n- d3.time.thursdayOfYear ↦ [d3.timeThursday](../../../d3-time#timeThursday).[count](../../../d3-time#interval_count)\n- d3.time.fridayOfYear ↦ [d3.timeFriday](../../../d3-time#timeFriday).[count](../../../d3-time#interval_count)\n- d3.time.saturdayOfYear ↦ [d3.timeSaturday](../../../d3-time#timeSaturday).[count](../../../d3-time#interval_count)\n- d3.time.weekOfYear ↦ [d3.timeWeek](../../../d3-time#timeWeek).[count](../../../d3-time#interval_count)\n- d3.time.dayOfYear.utc ↦ [d3.utcDay](../../../d3-time#utcDay).[count](../../../d3-time#interval_count)\n- d3.time.sundayOfYear.utc ↦ [d3.utcSunday](../../../d3-time#utcSunday).[count](../../../d3-time#interval_count)\n- d3.time.mondayOfYear.utc ↦ [d3.utcMonday](../../../d3-time#utcMonday).[count](../../../d3-time#interval_count)\n- d3.time.tuesdayOfYear.utc ↦ [d3.utcTuesday](../../../d3-time#utcTuesday).[count](../../../d3-time#interval_count)\n- d3.time.wednesdayOfYear.utc ↦ [d3.utcWednesday](../../../d3-time#utcWednesday).[count](../../../d3-time#interval_count)\n- d3.time.thursdayOfYear.utc ↦ [d3.utcThursday](../../../d3-time#utcThursday).[count](../../../d3-time#interval_count)\n- d3.time.fridayOfYear.utc ↦ [d3.utcFriday](../../../d3-time#utcFriday).[count](../../../d3-time#interval_count)\n- d3.time.saturdayOfYear.utc ↦ [d3.utcSaturday](../../../d3-time#utcSaturday).[count](../../../d3-time#interval_count)\n- d3.time.weekOfYear.utc ↦ [d3.utcWeek](../../../d3-time#utcWeek).[count](../../../d3-time#interval_count)\n\nD3 4.0 now also lets you define custom time intervals using [d3.timeInterval](../../../d3-time#timeInterval). The [d3.timeYear](../../../d3-time#timeYear), [d3.utcYear](../../../d3-time#utcYear), [d3.timeMillisecond](../../../d3-time#timeMillisecond) and [d3.utcMillisecond](../../../d3-time#utcMillisecond) intervals have optimized implementations of [*interval*.every](../../../d3-time#interval_every), which is necessary to generate time ticks for very large or very small domains efficiently. More generally, the performance of time intervals has been improved, and time intervals now do a better job with respect to daylight savings in various locales.\n\n## [Timers (d3-timer)](../../../d3-timer)\n\nIn D3 3.x, the only way to stop a timer was for its callback to return true. For example, this timer stops after one second:\n\n``` javascript\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed >= 1000;\n});\n```\n\nIn 4.0, use [*timer*.stop](../../../d3-timer#timer_stop) instead:\n\n``` javascript\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed >= 1000) {\n    t.stop();\n  }\n});\n```\n\nThe primary benefit of *timer*.stop is that timers are not required to self-terminate: they can be stopped externally, allowing for the immediate and synchronous disposal of associated resources, and the separation of concerns. The above is equivalent to:\n\n``` javascript\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n});\n\nd3.timeout(function() {\n  t.stop();\n}, 1000);\n```\n\nThis improvement extends to [d3-transition](#transitions-d3-transition): now when a transition is interrupted, its resources are immediately freed rather than having to wait for transition to start.\n\n4.0 also introduces a new [*timer*.restart](../../../d3-timer#timer_restart) method for restarting timers, for replacing the callback of a running timer, or for changing its delay or reference time. Unlike *timer*.stop followed by [d3.timer](../../../d3-timer#timer), *timer*.restart maintains the invocation priority of an existing timer: it guarantees that the order of invocation of active timers remains the same. The d3.timer.flush method has been renamed to [d3.timerFlush](../../../d3-timer#timerFlush).\n\nSome usage patterns in D3 3.x could cause the browser to hang when a background page returned to the foreground. For example, the following code schedules a transition every second:\n\n``` javascript\nsetInterval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // BAD\n}, 1000);\n```\n\nIf such code runs in the background for hours, thousands of queued transitions will try to run simultaneously when the page is foregrounded. D3 4.0 avoids this hang by freezing time in the background: when a page is in the background, time does not advance, and so no queue of timers accumulates to run when the page returns to the foreground. Use d3.timer instead of transitions to schedule a long-running animation, or use [d3.timeout](../../../d3-timer#timeout) and [d3.interval](../../../d3-timer#interval) in place of setTimeout and setInterval to prevent transitions from being queued in the background:\n\n``` javascript\nd3.interval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // GOOD\n}, 1000);\n```\n\nBy freezing time in the background, timers are effectively “unaware” of being backgrounded. It’s like nothing happened! 4.0 also now uses high-precision time ([performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now)) where available; the current time is available as [d3.now](../../../d3-timer#now).\n\n## [Transitions (d3-transition)](../../../d3-transition)\n\nThe [*selection*.transition](../../../d3-transition#selection_transition) method now takes an optional *transition* instance which can be used to synchronize a new transition with an existing transition. (This change is discussed further in [What Makes Software Good?](https://medium.com/@mbostock/what-makes-software-good-943557f8a488)) For example:\n\n``` javascript\nvar t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\n```\n\nTransitions created this way inherit timing from the closest ancestor element, and thus are synchronized even when the referenced *transition* has variable timing such as a staggered delay. This method replaces the deeply magical behavior of *transition*.each in 3.x; in 4.0, [*transition*.each](../../../d3-transition#transition_each) is identical to [*selection*.each](../../../d3-selection#selection_each). Use the new [*transition*.on](../../../d3-transition#transition_on) method to listen to transition events.\n\nThe meaning of [*transition*.delay](../../../d3-transition#transition_delay) has changed for chained transitions created by [*transition*.transition](../../../d3-transition#transition_transition). The specified delay is now relative to the *previous* transition in the chain, rather than the *first* transition in the chain; this makes it easier to insert interstitial pauses. For example:\n\n``` javascript\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\n```\n\nTime is now frozen in the background; see [d3-timer](#timers-d3-timer) for more information. While it was previously the case that transitions did not run in the background, now they pick up where they left off when the page returns to the foreground. This avoids page hangs by not scheduling an unbounded number of transitions in the background. If you want to schedule an infinitely-repeating transition, use transition events, or use [d3.timeout](../../../d3-timer#timeout) and [d3.interval](../../../d3-timer#interval) in place of [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) and [setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval).\n\nThe [*selection*.interrupt](../../../d3-transition#selection_interrupt) method now cancels all scheduled transitions on the selected elements, in addition to interrupting any active transition. When transitions are interrupted, any resources associated with the transition are now released immediately, rather than waiting until the transition starts, improving performance. (See also [*timer*.stop](../../../d3-timer#timer_stop).) The new [d3.interrupt](../../../d3-transition#interrupt) method is an alternative to [*selection*.interrupt](../../../d3-transition#selection_interrupt) for quickly interrupting a single node.\n\nThe new [d3.active](../../../d3-transition#active) method allows you to select the currently-active transition on a given *node*, if any. This is useful for modifying in-progress transitions and for scheduling infinitely-repeating transitions. For example, this transition continuously oscillates between red and blue:\n\n``` javascript\nd3.select(\"circle\")\n  .transition()\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\n```\n\nThe [life cycle of a transition](../../../d3-transition#the-life-of-a-transition) is now more formally defined and enforced. For example, attempting to change the duration of a running transition now throws an error rather than silently failing. The [*transition*.remove](../../../d3-transition#transition_remove) method has been fixed if multiple transition names are in use: the element is only removed if it has no scheduled transitions, regardless of name. The [*transition*.ease](../../../d3-transition#transition_ease) method now always takes an [easing function](#easings-d3-ease), not a string. When a transition ends, the tweens are invoked one last time with *t* equal to exactly 1, regardless of the associated easing function.\n\nAs with [selections](#selections-d3-selection) in 4.0, all transition callback functions now receive the standard arguments: the element’s datum (*d*), the element’s index (*i*), and the element’s group (*nodes*), with *this* as the element. This notably affects [*transition*.attrTween](../../../d3-transition#transition_attrTween) and [*transition*.styleTween](../../../d3-transition#transition_styleTween), which no longer pass the *tween* function the current attribute or style value as the third argument. The *transition*.attrTween and *transition*.styleTween methods can now be called in getter modes for debugging or to share tween definitions between transitions.\n\nHomogenous transitions are now optimized! If all elements in a transition share the same tween, interpolator, or event listeners, this state is now shared across the transition rather than separately allocated for each element. 4.0 also uses an optimized default interpolator in place of [d3.interpolate](../../../d3-interpolate#interpolate) for [*transition*.attr](../../../d3-transition#transition_attr) and [*transition*.style](../../../d3-transition#transition_style). And transitions can now interpolate both [CSS](../../../d3-interpolate#interpolateTransformCss) and [SVG](../../../d3-interpolate#interpolateTransformSvg) transforms.\n\nFor reusable components that support transitions, such as [axes](#axes-d3-axis), a new [*transition*.selection](../../../d3-transition#transition_selection) method returns the [selection](#selections-d3-selection) that corresponds to a given transition. There is also a new [*transition*.merge](../../../d3-transition#transition_merge) method that is equivalent to [*selection*.merge](../../../d3-selection#selection_merge).\n\nFor the sake of parsimony, the multi-value map methods have been extracted to [d3-selection-multi](../../../d3-selection-multi) and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: [*transition*.attrs](../../../d3-selection-multi#transition_attrs) and [*transition*.styles](../../../d3-selection-multi#transition_styles).\n\n## [Voronoi Diagrams (d3-voronoi)](../../../d3-voronoi)\n\nThe d3.geom.voronoi method has been renamed to [d3.voronoi](../../../d3-voronoi#voronoi), and the *voronoi*.clipExtent method has been renamed to [*voronoi*.extent](../../../d3-voronoi#voronoi_extent). The undocumented *polygon*.point property in 3.x, which is the element in the input *data* corresponding to the polygon, has been renamed to *polygon*.data.\n\nCalling [*voronoi*](../../../d3-voronoi#_voronoi) now returns the full [Voronoi diagram](../../../d3-voronoi#voronoi-diagrams), which includes topological information: each Voronoi edge exposes *edge*.left and *edge*.right specifying the sites on either side of the edge, and each Voronoi cell is defined as an array of these edges and a corresponding site. The Voronoi diagram can be used to efficiently compute both the Voronoi and Delaunay tessellations for a set of points: [*diagram*.polygons](../../../d3-voronoi#diagram_polygons), [*diagram*.links](../../../d3-voronoi#diagram_links), and [*diagram*.triangles](../../../d3-voronoi#diagram_triangles). The new topology is also useful in conjunction with TopoJSON; see the [Voronoi topology example](https://bl.ocks.org/mbostock/cd52a201d7694eb9d890).\n\nThe [*voronoi*.polygons](../../../d3-voronoi#voronoi_polygons) and [*diagram*.polygons](../../../d3-voronoi#diagram_polygons) now require an [extent](../../../d3-voronoi#voronoi_extent); there is no longer an implicit extent of ±1e6. The [*voronoi*.links](../../../d3-voronoi#voronoi_links), [*voronoi*.triangles](../../../d3-voronoi#voronoi_triangles), [*diagram*.links](../../../d3-voronoi#diagram_links) and [*diagram*.triangles](../../../d3-voronoi#diagram_triangles) are now affected by the clip extent: as the Delaunay is computed as the dual of the Voronoi, two sites are only linked if the clipped cells are touching. To compute the Delaunay triangulation without respect to clipping, set the extent to null.\n\nThe Voronoi generator finally has well-defined behavior for coincident vertices: the first of a set of coincident points has a defined cell, while the subsequent duplicate points have null cells. The returned array of polygons is sparse, so by using *array*.forEach or *array*.map, you can easily skip undefined cells. The Voronoi generator also now correctly handles the case where no cell edges intersect the extent.\n\n## [Zooming (d3-zoom)](../../../d3-zoom)\n\nThe zoom behavior d3.behavior.zoom has been renamed to d3.zoom. Zoom behaviors no longer store the active zoom transform (*i.e.*, the visible region; the scale and translate) internally. The zoom transform is now stored on any elements to which the zoom behavior has been applied. The zoom transform is available as *event*.transform within a zoom event or by calling [d3.zoomTransform](../../../d3-zoom#zoomTransform) on a given *element*. To zoom programmatically, use [*zoom*.transform](../../../d3-zoom#zoom_transform) with a given [selection](#selections-d3-selection) or [transition](#transitions-d3-transition); see the [zoom transitions example](https://bl.ocks.org/mbostock/b783fbb2e673561d214e09c7fb5cedee). The *zoom*.event method has been removed.\n\nTo make programmatic zooming easier, there are several new convenience methods on top of *zoom*.transform: [*zoom*.translateBy](../../../d3-zoom#zoom_translateBy), [*zoom*.scaleBy](../../../d3-zoom#zoom_scaleBy) and [*zoom*.scaleTo](../../../d3-zoom#zoom_scaleTo). There is also a new API for describing [zoom transforms](../../../d3-zoom#zoom-transforms). Zoom behaviors are no longer dependent on [scales](#scales-d3-scale), but you can use [*transform*.rescaleX](../../../d3-zoom#transform_rescaleX), [*transform*.rescaleY](../../../d3-zoom#transform_rescaleY), [*transform*.invertX](../../../d3-zoom#transform_invertX) or [*transform*.invertY](../../../d3-zoom#transform_invertY) to transform a scale’s domain. 3.x’s *event*.scale is replaced with *event*.transform.k, and *event*.translate is replaced with *event*.transform.x and *event*.transform.y. The *zoom*.center method has been removed in favor of programmatic zooming.\n\nThe zoom behavior finally supports simple constraints on panning! The new [*zoom*.translateExtent](../../../d3-zoom#zoom_translateExtent) lets you define the viewable extent of the world: the currently-visible extent (the extent of the viewport, as defined by [*zoom*.extent](../../../d3-zoom#zoom_extent)) is always contained within the translate extent. The *zoom*.size method has been replaced by *zoom*.extent, and the default behavior is now smarter: it defaults to the extent of the zoom behavior’s owner element, rather than being hardcoded to 960×500. (This also improves the default path chosen during smooth zoom transitions!)\n\nThe zoom behavior’s interaction has also improved. It now correctly handles concurrent wheeling and dragging, as well as concurrent touching and mousing. The zoom behavior now ignores wheel events at the limits of its scale extent, allowing you to scroll past a zoomable area. The *zoomstart* and *zoomend* events have been renamed *start* and *end*. By default, zoom behaviors now ignore right-clicks intended for the context menu; use [*zoom*.filter](../../../d3-zoom#zoom_filter) to control which events are ignored. The zoom behavior also ignores emulated mouse events on iOS. The zoom behavior now consumes handled events, making it easier to combine with other interactive behaviors such as [dragging](#dragging-d3-drag).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3/blob/master/CHANGES.md](https://github.com/d3/d3/blob/master/CHANGES.md)"
- name: chord
  id: d3-chord
  summary: Visualize relationships or network flow with an aesthetically-pleasing circular layout
  description: "# d3-chord\n\nVisualize relationships or network flow with an aesthetically-pleasing circular layout.\n\n## Installing\n\nIf you use npm, `npm install d3-chord`. You can also download the [latest release on GitHub](https://github.com/d3/d3-chord/releases/latest). For vanilla HTML in modern browsers, import d3-chord from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {chord} from \"https://cdn.skypack.dev/d3-chord@3\";\n\nconst c = chord();\n\n</script>\n```\n\nFor legacy environments, you can load d3-chord’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-path@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-chord@3\"></script>\n<script>\n\nconst chord = d3.chord();\n\n</script>\n```\n\n## API Reference\n\n###### d3.**chord**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nConstructs a new chord layout with the default settings.\n\n###### *chord*(*matrix*) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nComputes the chord layout for the specified square *matrix* of size *n*×*n*, where the *matrix* represents the directed flow amongst a network (a complete digraph) of *n* nodes. The given *matrix* must be an array of length *n*, where each element *matrix*\\[*i*\\] is an array of *n* numbers, where each *matrix*\\[*i*\\]\\[*j*\\] represents the flow from the *i*th node in the network to the *j*th node. Each number *matrix*\\[*i*\\]\\[*j*\\] must be nonnegative, though it can be zero if there is no flow from node *i* to node *j*. From the [Circos tableviewer example](http://mkweb.bcgsc.ca/circos/guide/tables/):\n\n``` javascript\nconst matrix = [\n  [11975,  5871, 8916, 2868],\n  [ 1951, 10048, 2060, 6171],\n  [ 8010, 16145, 8090, 8045],\n  [ 1013,   990,  940, 6907]\n];\n```\n\nThe return value of *chord*(*matrix*) is an array of *chords*, where each chord represents the combined bidirectional flow between two nodes *i* and *j* (where *i* may be equal to *j*) and is an object with the following properties:\n\n- `source` - the source subgroup\n- `target` - the target subgroup\n\nEach source and target subgroup is also an object with the following properties:\n\n- `startAngle` - the start angle in radians\n- `endAngle` - the end angle in radians\n- `value` - the flow value *matrix*\\[*i*\\]\\[*j*\\]\n- `index` - the node index *i*\n\nThe chords are typically passed to [d3.ribbon](#ribbon) to display the network relationships. The returned array includes only chord objects for which the value *matrix*\\[*i*\\]\\[*j*\\] or *matrix*\\[*j*\\]\\[*i*\\] is non-zero. Furthermore, the returned array only contains unique chords: a given chord *ij* represents the bidirectional flow from *i* to *j* *and* from *j* to *i*, and does not contain a duplicate chord *ji*; *i* and *j* are chosen such that the chord’s source always represents the larger of *matrix*\\[*i*\\]\\[*j*\\] and *matrix*\\[*j*\\]\\[*i*\\].\n\nThe *chords* array also defines a secondary array of length *n*, *chords*.groups, where each group represents the combined outflow for node *i*, corresponding to the elements *matrix*\\[*i*\\]\\[0 … *n* - 1\\], and is an object with the following properties:\n\n- `startAngle` - the start angle in radians\n- `endAngle` - the end angle in radians\n- `value` - the total outgoing flow value for node *i*\n- `index` - the node index *i*\n\nThe groups are typically passed to [d3.arc](d3-shape#arc) to produce a donut chart around the circumference of the chord layout.\n\n###### *chord*.**padAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nIf *angle* is specified, sets the pad angle between adjacent groups to the specified number in radians and returns this chord layout. If *angle* is not specified, returns the current pad angle, which defaults to zero.\n\n###### *chord*.**sortGroups**(\\[*compare*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nIf *compare* is specified, sets the group comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current group comparator, which defaults to null. If the group comparator is non-null, it is used to sort the groups by their total outflow. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).\n\n###### *chord*.**sortSubgroups**(\\[*compare*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nIf *compare* is specified, sets the subgroup comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current subgroup comparator, which defaults to null. If the subgroup comparator is non-null, it is used to sort the subgroups corresponding to *matrix*\\[*i*\\]\\[0 … *n* - 1\\] for a given group *i* by their total outflow. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).\n\n###### *chord*.**sortChords**(\\[*compare*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nIf *compare* is specified, sets the chord comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current chord comparator, which defaults to null. If the chord comparator is non-null, it is used to sort the [chords](#_chord) by their combined flow; this only affects the *z*-order of the chords. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).\n\n###### d3.**chordDirected**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js), [Examples](https://observablehq.com/@d3/directed-chord-diagram)\n\nA chord layout for directional flows. The chord from *i* to *j* is generated from the value in *matrix*\\[*i*\\]\\[*j*\\] only.\n\n###### d3.**chordTranspose**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)\n\nA transposed chord layout. Useful to highlight outgoing (rather than incoming) flows.\n\n###### d3.**ribbon**() · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nCreates a new ribbon generator with the default settings.\n\n###### *ribbon*(*arguments…*) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nGenerates a ribbon for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the ribbon generator’s accessor functions along with the `this` object. For example, with the default settings, a [chord object](#_chord) expected:\n\n``` javascript\nconst ribbon = d3.ribbon();\n\nribbon({\n  source: {startAngle: 0.7524114, endAngle: 1.1212972, radius: 240},\n  target: {startAngle: 1.8617078, endAngle: 1.9842927, radius: 240}\n}); // \"M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z\"\n```\n\nOr equivalently if the radius is instead defined as a constant:\n\n``` javascript\nconst ribbon = d3.ribbon()\n    .radius(240);\n\nribbon({\n  source: {startAngle: 0.7524114, endAngle: 1.1212972},\n  target: {startAngle: 1.8617078, endAngle: 1.9842927}\n}); // \"M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z\"\n```\n\nIf the ribbon generator has a context, then the ribbon is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.\n\n###### *ribbon*.**source**(\\[*source*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *source* is specified, sets the source accessor to the specified function and returns this ribbon generator. If *source* is not specified, returns the current source accessor, which defaults to:\n\n``` javascript\nfunction source(d) {\n  return d.source;\n}\n```\n\n###### *ribbon*.**target**(\\[*target*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *target* is specified, sets the target accessor to the specified function and returns this ribbon generator. If *target* is not specified, returns the current target accessor, which defaults to:\n\n``` javascript\nfunction target(d) {\n  return d.target;\n}\n```\n\n###### *ribbon*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *radius* is specified, sets the source and target radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current source radius accessor, which defaults to:\n\n``` javascript\nfunction radius(d) {\n  return d.radius;\n}\n```\n\n###### *ribbon*.**sourceRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *radius* is specified, sets the source radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current source radius accessor, which defaults to:\n\n``` javascript\nfunction radius(d) {\n  return d.radius;\n}\n```\n\n###### *ribbon*.**targetRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *radius* is specified, sets the target radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current target radius accessor, which defaults to:\n\n``` javascript\nfunction radius(d) {\n  return d.radius;\n}\n```\n\nBy convention, the target radius in asymmetric chord diagrams is typically inset from the source radius, resulting in a gap between the end of the directed link and its associated group arc.\n\n###### *ribbon*.**startAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *angle* is specified, sets the start angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:\n\n``` javascript\nfunction startAngle(d) {\n  return d.startAngle;\n}\n```\n\nThe *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.\n\n###### *ribbon*.**endAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *angle* is specified, sets the end angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:\n\n``` javascript\nfunction endAngle(d) {\n  return d.endAngle;\n}\n```\n\nThe *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.\n\n###### *ribbon*.**padAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *angle* is specified, sets the pad angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:\n\n``` javascript\nfunction padAngle() {\n  return 0;\n}\n```\n\nThe pad angle specifies the angular gap between adjacent ribbons.\n\n###### *ribbon*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *context* is specified, sets the context and returns this ribbon generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated ribbon](#_ribbon) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated ribbon is returned. See also [d3-path](d3-path).\n\n###### d3.**ribbonArrow**() · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nCreates a new arrow ribbon generator with the default settings.\n\n###### *ribbonArrow*.**headRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *radius* is specified, sets the arrowhead radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current arrowhead radius accessor, which defaults to:\n\n``` javascript\nfunction headRadius() {\n  return 10;\n}\n```\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-chord](https://github.com/d3/d3-chord)"
- name: chord()
  id: d3-chord#_chord
  summary: Computes the chord layout for the specified square matrix of size n×n, where the matrix represents the directed flow amongst a network (a complete digraph) of n nodes
  belongs_to: chord
  description: |-
    ###### *chord*(*matrix*) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    Computes the chord layout for the specified square *matrix* of size *n*×*n*, where the *matrix* represents the directed flow amongst a network (a complete digraph) of *n* nodes. The given *matrix* must be an array of length *n*, where each element *matrix*\[*i*\] is an array of *n* numbers, where each *matrix*\[*i*\]\[*j*\] represents the flow from the *i*th node in the network to the *j*th node. Each number *matrix*\[*i*\]\[*j*\] must be nonnegative, though it can be zero if there is no flow from node *i* to node *j*. From the [Circos tableviewer example](http://mkweb.bcgsc.ca/circos/guide/tables/):

    ``` javascript
    const matrix = [
      [11975,  5871, 8916, 2868],
      [ 1951, 10048, 2060, 6171],
      [ 8010, 16145, 8090, 8045],
      [ 1013,   990,  940, 6907]
    ];
    ```

    The return value of *chord*(*matrix*) is an array of *chords*, where each chord represents the combined bidirectional flow between two nodes *i* and *j* (where *i* may be equal to *j*) and is an object with the following properties:

    - `source` - the source subgroup
    - `target` - the target subgroup

    Each source and target subgroup is also an object with the following properties:

    - `startAngle` - the start angle in radians
    - `endAngle` - the end angle in radians
    - `value` - the flow value *matrix*\[*i*\]\[*j*\]
    - `index` - the node index *i*

    The chords are typically passed to [d3.ribbon](#ribbon) to display the network relationships. The returned array includes only chord objects for which the value *matrix*\[*i*\]\[*j*\] or *matrix*\[*j*\]\[*i*\] is non-zero. Furthermore, the returned array only contains unique chords: a given chord *ij* represents the bidirectional flow from *i* to *j* *and* from *j* to *i*, and does not contain a duplicate chord *ji*; *i* and *j* are chosen such that the chord’s source always represents the larger of *matrix*\[*i*\]\[*j*\] and *matrix*\[*j*\]\[*i*\].

    The *chords* array also defines a secondary array of length *n*, *chords*.groups, where each group represents the combined outflow for node *i*, corresponding to the elements *matrix*\[*i*\]\[0 … *n* - 1\], and is an object with the following properties:

    - `startAngle` - the start angle in radians
    - `endAngle` - the end angle in radians
    - `value` - the total outgoing flow value for node *i*
    - `index` - the node index *i*

    The groups are typically passed to [d3.arc](d3-shape#arc) to produce a donut chart around the circumference of the chord layout.
- name: chord.padAngle()
  id: d3-chord#chord_padangle
  summary: If angle is specified, sets the pad angle between adjacent groups to the specified number in radians and returns this chord layout
  belongs_to: chord
  description: |-
    ###### *chord*.**padAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    If *angle* is specified, sets the pad angle between adjacent groups to the specified number in radians and returns this chord layout. If *angle* is not specified, returns the current pad angle, which defaults to zero.
- name: chord.sortChords()
  id: d3-chord#chord_sortchords
  summary: If compare is specified, sets the chord comparator to the specified function or null and returns this chord layout
  belongs_to: chord
  description: |-
    ###### *chord*.**sortChords**(\[*compare*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    If *compare* is specified, sets the chord comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current chord comparator, which defaults to null. If the chord comparator is non-null, it is used to sort the [chords](#_chord) by their combined flow; this only affects the *z*-order of the chords. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).
- name: chord.sortGroups()
  id: d3-chord#chord_sortgroups
  summary: If compare is specified, sets the group comparator to the specified function or null and returns this chord layout
  belongs_to: chord
  description: |-
    ###### *chord*.**sortGroups**(\[*compare*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    If *compare* is specified, sets the group comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current group comparator, which defaults to null. If the group comparator is non-null, it is used to sort the groups by their total outflow. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).
- name: chord.sortSubgroups()
  id: d3-chord#chord_sortsubgroups
  summary: If compare is specified, sets the subgroup comparator to the specified function or null and returns this chord layout
  belongs_to: chord
  description: |-
    ###### *chord*.**sortSubgroups**(\[*compare*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    If *compare* is specified, sets the subgroup comparator to the specified function or null and returns this chord layout. If *compare* is not specified, returns the current subgroup comparator, which defaults to null. If the subgroup comparator is non-null, it is used to sort the subgroups corresponding to *matrix*\[*i*\]\[0 … *n* - 1\] for a given group *i* by their total outflow. See also [d3.ascending](d3-array#ascending) and [d3.descending](d3-array#descending).
- name: circle()
  id: d3-geo#_circle
  summary: Returns a new GeoJSON geometry object of type “Polygon” approximating a circle on the surface of a sphere, with the current center, radius and precision
  belongs_to: geo
  description: |-
    ###### *circle*(*arguments…*) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js "Source")

    Returns a new GeoJSON geometry object of type “Polygon” approximating a circle on the surface of a sphere, with the current [center](#circle_center), [radius](#circle_radius) and [precision](#circle_precision). Any *arguments* are passed to the accessors.
- name: circle.center()
  id: d3-geo#circle_center
  summary: If center is specified, sets the circle center to the specified point [longitude, latitude] in degrees, and returns this circle generator
  belongs_to: geo
  description: |-
    ###### *circle*.**center**(\[*center*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js "Source")

    If *center* is specified, sets the circle center to the specified point \[*longitude*, *latitude*\] in degrees, and returns this circle generator. The center may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *center* is not specified, returns the current center accessor, which defaults to:

    ``` javascript
    function center() {
      return [0, 0];
    }
    ```
- name: circle.precision()
  id: d3-geo#circle_precision
  summary: If precision is specified, sets the circle precision to the specified angle in degrees, and returns this circle generator
  belongs_to: geo
  description: |-
    ###### *circle*.**precision**(\[*angle*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js "Source")

    If *precision* is specified, sets the circle precision to the specified angle in degrees, and returns this circle generator. The precision may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *precision* is not specified, returns the current precision accessor, which defaults to:

    ``` javascript
    function precision() {
      return 6;
    }
    ```

    Small circles do not follow great arcs and thus the generated polygon is only an approximation. Specifying a smaller precision angle improves the accuracy of the approximate polygon, but also increase the cost to generate and render it.
- name: circle.radius()
  id: d3-geo#circle_radius
  summary: If radius is specified, sets the circle radius to the specified angle in degrees, and returns this circle generator
  belongs_to: geo
  description: |-
    ###### *circle*.**radius**(\[*radius*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js "Source")

    If *radius* is specified, sets the circle radius to the specified angle in degrees, and returns this circle generator. The radius may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *radius* is not specified, returns the current radius accessor, which defaults to:

    ``` javascript
    function radius() {
      return 90;
    }
    ```
- name: clip.polygon()
  id: d3-geo-polygon#polygon
  summary: Given a clipPolygon function, returns the GeoJSON polygon
  belongs_to: geo-polygon
  description: |-
    ###### clip.**polygon**()

    Given a clipPolygon function, returns the GeoJSON polygon.
- name: cluster()
  id: d3-hierarchy#_cluster
  summary: The coordinates x and y represent an arbitrary coordinate system; for example, you can treat x as an angle and y as a radius to produce a radial layout
  belongs_to: hierarchy
  description: |-
    ###### *cluster*(*root*)

    Lays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:

    - *node*.x - the *x*-coordinate of the node
    - *node*.y - the *y*-coordinate of the node

    The coordinates *x* and *y* represent an arbitrary coordinate system; for example, you can treat *x* as an angle and *y* as a radius to produce a [radial layout](https://observablehq.com/@d3/radial-dendrogram). You may want to call [*root*.sort](#node_sort) before passing the hierarchy to the cluster layout.
- name: cluster.nodeSize()
  id: d3-hierarchy#cluster_nodesize
  summary: If size is specified, sets this cluster layout’s node size to the specified two-element array of numbers [width, height] and returns this cluster layout
  belongs_to: hierarchy
  description: |-
    ###### *cluster*.**nodeSize**(\[*size*\])

    If *size* is specified, sets this cluster layout’s node size to the specified two-element array of numbers \[*width*, *height*\] and returns this cluster layout. If *size* is not specified, returns the current node size, which defaults to null. A node size of null indicates that a [layout size](#cluster_size) will be used instead. When a node size is specified, the root node is always positioned at ⟨0, 0⟩.
- name: cluster.separation()
  id: d3-hierarchy#cluster_separation
  summary: If separation is specified, sets the separation accessor to the specified function and returns this cluster layout
  belongs_to: hierarchy
  description: |-
    ###### *cluster*.**separation**(\[*separation*\])

    If *separation* is specified, sets the separation accessor to the specified function and returns this cluster layout. If *separation* is not specified, returns the current separation accessor, which defaults to:

    ``` javascript
    function separation(a, b) {
      return a.parent == b.parent ? 1 : 2;
    }
    ```

    The separation accessor is used to separate neighboring leaves. The separation function is passed two leaves *a* and *b*, and must return the desired separation. The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.
- name: cluster.size()
  id: d3-hierarchy#cluster_size
  summary: If size is specified, sets this cluster layout’s size to the specified two-element array of numbers [width, height] and returns this cluster layout
  belongs_to: hierarchy
  description: |-
    ###### *cluster*.**size**(\[*size*\])

    If *size* is specified, sets this cluster layout’s size to the specified two-element array of numbers \[*width*, *height*\] and returns this cluster layout. If *size* is not specified, returns the current layout size, which defaults to \[1, 1\]. A layout size of null indicates that a [node size](#cluster_nodeSize) will be used instead. The coordinates *x* and *y* represent an arbitrary coordinate system; for example, to produce a [radial layout](https://observablehq.com/@d3/radial-dendrogram), a size of \[360, *radius*\] corresponds to a breadth of 360° and a depth of *radius*.
- name: collection
  id: d3-collection
  summary: 'Deprecation notice: Use JavaScript’s built-in Map, Set and Object classes instead of d3-collection’s corresponding methods'
  description: "# d3-collection\n\n**Deprecation notice**: Use JavaScript’s built-in [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) classes instead of d3-collection’s corresponding methods. Use [d3-array](d3-array)’s [group](d3-array#group) and [rollup](d3-array#rollup) instead of d3-collection’s nest.\n\n------------------------------------------------------------------------\n\nHandy data structures for elements keyed by string.\n\n## Installing\n\nIf you use NPM, `npm install d3-collection`. Otherwise, download the [latest release](https://github.com/d3/d3-collection/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-collection.v1.min.js) or as part of [D3 4.0](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-collection.v1.min.js\"></script>\n<script>\n\nvar map = d3.map()\n    .set(\"foo\", 1)\n    .set(\"bar\", 2);\n\n</script>\n```\n\n## API Reference\n\n- [Objects](#objects)\n- [Maps](#maps)\n- [Sets](#sets)\n- [Nests](#nests)\n\n### Objects\n\nA common data type in JavaScript is the *associative array*, or more simply the *object*, which has a set of named properties. The standard mechanism for iterating over the keys (or property names) in an associative array is the [for…in loop](https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in). However, note that the iteration order is undefined. D3 provides several methods for converting associative arrays to standard arrays with numeric indexes.\n\nA word of caution: it is tempting to use plain objects as maps, but this causes [unexpected behavior](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/) when built-in property names are used as keys, such as `object[\"__proto__\"] = 42` and `\"hasOwnProperty\" in object`. If you cannot guarantee that map keys and set values will be safe, use [maps](#maps) and [sets](#sets) (or their ES6 equivalents) instead of plain objects.\n\n###### d3.**keys**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/keys.js \"Source\")\n\nReturns an array containing the property names of the specified object (an associative array). The order of the returned array is undefined.\n\n###### d3.**values**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/values.js \"Source\")\n\nReturns an array containing the property values of the specified object (an associative array). The order of the returned array is undefined.\n\n###### d3.**entries**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/entries.js \"Source\")\n\nReturns an array containing the property keys and values of the specified object (an associative array). Each entry is an object with a key and value attribute, such as `{key: \"foo\", value: 42}`. The order of the returned array is undefined.\n\n``` javascript\nd3.entries({foo: 42, bar: true}); // [{key: \"foo\", value: 42}, {key: \"bar\", value: true}]\n```\n\n### Maps\n\nLike [ES6 Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), but with a few differences:\n\n- Keys are coerced to strings.\n- [map.each](#map_each), not [map.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach). (Also, no *thisArg*.)\n- [map.remove](#map_remove), not [map.delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n- [map.entries](#map_entries) returns an array of {key, value} objects, not an iterator of \\[key, value\\].\n- [map.size](#map_size) is a method, not a [property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size); also, there’s [map.empty](#map_empty).\n\n###### d3.**map**(\\[*object*\\[, *key*\\]\\]) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js \"Source\")\n\nConstructs a new map. If *object* is specified, copies all enumerable properties from the specified object into this map. The specified object may also be an array or another map. An optional *key* function may be specified to compute the key for each value in the array. For example:\n\n``` javascript\nvar map = d3.map([{name: \"foo\"}, {name: \"bar\"}], function(d) { return d.name; });\nmap.get(\"foo\"); // {\"name\": \"foo\"}\nmap.get(\"bar\"); // {\"name\": \"bar\"}\nmap.get(\"baz\"); // undefined\n```\n\nSee also [nests](#nests).\n\n###### *map*.**has**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L7 \"Source\")\n\nReturns true if and only if this map has an entry for the specified *key* string. Note: the value may be `null` or `undefined`.\n\n###### *map*.**get**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L10 \"Source\")\n\nReturns the value for the specified *key* string. If the map does not have an entry for the specified *key*, returns `undefined`.\n\n###### *map*.**set**(*key*, *value*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L13 \"Source\")\n\nSets the *value* for the specified *key* string. If the map previously had an entry for the same *key* string, the old entry is replaced with the new value. Returns the map, allowing chaining. For example:\n\n``` javascript\nvar map = d3.map()\n    .set(\"foo\", 1)\n    .set(\"bar\", 2)\n    .set(\"baz\", 3);\n\nmap.get(\"foo\"); // 1\n```\n\n###### *map*.**remove**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L17 \"Source\")\n\nIf the map has an entry for the specified *key* string, removes the entry and returns true. Otherwise, this method does nothing and returns false.\n\n###### *map*.**clear**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L21 \"Source\")\n\nRemoves all entries from this map.\n\n###### *map*.**keys**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L24 \"Source\")\n\nReturns an array of string keys for every entry in this map. The order of the returned keys is arbitrary.\n\n###### *map*.**values**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L29 \"Source\")\n\nReturns an array of values for every entry in this map. The order of the returned values is arbitrary.\n\n###### *map*.**entries**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L34 \"Source\")\n\nReturns an array of key-value objects for each entry in this map. The order of the returned entries is arbitrary. Each entry’s key is a string, but the value has arbitrary type.\n\n###### *map*.**each**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L48 \"Source\")\n\nCalls the specified *function* for each entry in this map, passing the entry’s value and key as arguments, followed by the map itself. Returns undefined. The iteration order is arbitrary.\n\n###### *map*.**empty**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L44 \"Source\")\n\nReturns true if and only if this map has zero entries.\n\n###### *map*.**size**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L39 \"Source\")\n\nReturns the number of entries in this map.\n\n### Sets\n\nLike [ES6 Sets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), but with a few differences:\n\n- Values are coerced to strings.\n- [set.each](#set_each), not [set.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach). (Also, no *thisArg*.)\n- [set.remove](#set_remove), not [set.delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete).\n- [set.size](#set_size) is a method, not a [property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size); also, there’s [set.empty](#set_empty).\n\n###### d3.**set**(\\[*array*\\[, *accessor*\\]\\]) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js \"Source\")\n\nConstructs a new set. If *array* is specified, adds the given *array* of string values to the returned set. The specified array may also be another set. An optional *accessor* function may be specified, which is equivalent to calling *array.map(accessor)* before constructing the set.\n\n###### *set*.**has**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L9 \"Source\")\n\nReturns true if and only if this set has an entry for the specified *value* string.\n\n###### *set*.**add**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L10 \"Source\")\n\nAdds the specified *value* string to this set. Returns the set, allowing chaining. For example:\n\n``` javascript\nvar set = d3.set()\n    .add(\"foo\")\n    .add(\"bar\")\n    .add(\"baz\");\n\nset.has(\"foo\"); // true\n```\n\n###### *set*.**remove**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L15 \"Source\")\n\nIf the set contains the specified *value* string, removes it and returns true. Otherwise, this method does nothing and returns false.\n\n###### *set*.**clear**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L16 \"Source\")\n\nRemoves all values from this set.\n\n###### *set*.**values**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L17 \"Source\")\n\nReturns an array of the string values in this set. The order of the returned values is arbitrary. Can be used as a convenient way of computing the unique values for a set of strings. For example:\n\n``` javascript\nd3.set([\"foo\", \"bar\", \"foo\", \"baz\"]).values(); // \"foo\", \"bar\", \"baz\"\n```\n\n###### *set*.**each**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L20 \"Source\")\n\nCalls the specified *function* for each value in this set, passing the value as the first two arguments (for symmetry with [*map*.each](#map_each)), followed by the set itself. Returns undefined. The iteration order is arbitrary.\n\n###### *set*.**empty**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L19 \"Source\")\n\nReturns true if and only if this set has zero values.\n\n###### *set*.**size**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L18 \"Source\")\n\nReturns the number of values in this set.\n\n### Nests\n\nNesting allows elements in an array to be grouped into a hierarchical tree structure; think of it like the GROUP BY operator in SQL, except you can have multiple levels of grouping, and the resulting output is a tree rather than a flat table. The levels in the tree are specified by key functions. The leaf nodes of the tree can be sorted by value, while the internal nodes can be sorted by key. An optional rollup function will collapse the elements in each leaf node using a summary function. The nest operator (the object returned by [nest](#nest)) is reusable, and does not retain any references to the data that is nested.\n\nFor example, consider the following tabular data structure of Barley yields, from various sites in Minnesota during 1931-2:\n\n``` javascript\nvar yields = [\n  {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n  {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n  {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"},\n  ...\n];\n```\n\nTo facilitate visualization, it may be useful to nest the elements first by year, and then by variety, as follows:\n\n``` javascript\nvar entries = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);\n```\n\nThis returns a nested array. Each element of the outer array is a key-values pair, listing the values for each distinct key:\n\n``` javascript\n[{key: \"1931\", values: [\n   {key: \"Manchuria\", values: [\n     {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n     {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n     {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n   {key: \"Glabron\", values: [\n     {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n     {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: \"1932\", values: ...}]\n```\n\nThe nested form allows easy iteration and generation of hierarchical structures in SVG or HTML.\n\nFor a longer introduction to nesting, see:\n\n- Phoebe Bright’s [D3 Nest Tutorial and examples](http://bl.ocks.org/phoebebright/raw/3176159/)\n- Shan Carter’s [Mister Nester](http://bl.ocks.org/shancarter/raw/4748131/)\n\n###### d3.**nest**() [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js \"Source\")\n\nCreates a new nest operator. The set of keys is initially empty.\n\n###### *nest*.**key**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L4 \"Source\")\n\nRegisters a new *key* function. The *key* function will be invoked for each element in the input array and must return a string identifier to assign the element to its group. Most often, the function is a simple accessor, such as the year and variety accessors above. (Keys functions are *not* passed the input array index.) Each time a key is registered, it is pushed onto the end of the internal array of keys, and the nest operator applies an additional level of nesting.\n\n###### *nest*.**sortKeys**(*comparator*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L5 \"Source\")\n\nSorts key values for the [current key](#nest_key) using the specified *comparator* function, such as [d3.ascending](d3-array#ascending) or [d3.descending](d3-array#descending). If no comparator is specified for the current key, the order in which keys will be returned is undefined. For example, to sort years in ascending order and varieties in descending order:\n\n``` javascript\nvar entries = d3.nest()\n    .key(function(d) { return d.year; }).sortKeys(d3.ascending)\n    .key(function(d) { return d.variety; }).sortKeys(d3.descending)\n    .entries(yields);\n```\n\nNote that this only affects the result of [*nest*.entries](#nest_entries); the order of keys returned by [*nest*.map](#nest_map) and [*nest*.object](#nest_object) is always undefined, regardless of comparator.\n\n###### *nest*.**sortValues**(*comparator*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L6 \"Source\")\n\nSorts leaf elements using the specified *comparator* function, such as [d3.ascending](d3-array#ascending) or [d3.descending](d3-array#descending). This is roughly equivalent to sorting the input array before applying the nest operator; however it is typically more efficient as the size of each group is smaller. If no value comparator is specified, elements will be returned in the order they appeared in the input array. This applies to [*nest*.map](#nest_map), [*nest*.entries](#nest_entries) and [*nest*.object](#nest_object).\n\n###### *nest*.**rollup**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L7 \"Source\")\n\nSpecifies a rollup *function* to be applied on each group of leaf elements. The return value of the rollup function will replace the array of leaf values in either the associative array returned by [*nest*.map](#nest_map) or [*nest*.object](#nest_object); for [*nest*.entries](#nest_entries), it replaces the leaf *entry*.values with *entry*.value. If a [leaf comparator](#nest_sortValues) is specified, the leaf elements are sorted prior to invoking the rollup function.\n\n###### *nest*.**map**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L50 \"Source\")\n\nApplies the nest operator to the specified *array*, returning a nested [map](#map). Each entry in the returned map corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another map; otherwise, the value is the array of elements filtered from the input *array* that have the given key value. If no keys are defined, returns the input *array*.\n\n###### *nest*.**object**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L49 \"Source\")\n\nApplies the nest operator to the specified *array*, returning a nested object. Each entry in the returned associative array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another associative array; otherwise, the value is the array of elements filtered from the input *array* that have the given key value.\n\nNote: this method is unsafe if any of the keys conflict with built-in JavaScript properties, such as `__proto__`. If you cannot guarantee that the keys will be safe, you should use [nest.map](#nest_map) instead.\n\n###### *nest*.**entries**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L51 \"Source\")\n\nApplies the nest operator to the specified *array*, returning an array of key-values entries. Conceptually, this is similar to applying [*map*.entries](#map_entries) to the associative array returned by [*nest*.map](#nest_map), but it applies to every level of the hierarchy rather than just the first (outermost) level. Each entry in the returned array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another nested array of entries; otherwise, the value is the array of elements filtered from the input *array* that have the given key value.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-collection](https://github.com/d3/d3-collection)"
- name: collide.iterations()
  id: d3-force#collide_iterations
  summary: If iterations is specified, sets the number of iterations per application to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *collide*.**iterations**(\[*iterations*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)

    If *iterations* is specified, sets the number of iterations per application to the specified number and returns this force. If *iterations* is not specified, returns the current iteration count which defaults to 1. Increasing the number of iterations greatly increases the rigidity of the constraint and avoids partial overlap of nodes, but also increases the runtime cost to evaluate the force.

    #### Links

    The link force pushes linked nodes together or apart according to the desired [link distance](#link_distance). The strength of the force is proportional to the difference between the linked nodes’ distance and the target distance, similar to a spring force.
- name: collide.radius()
  id: d3-force#collide_radius
  summary: If radius is specified, sets the radius accessor to the specified number or function, re-evaluates the radius accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *collide*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)

    If *radius* is specified, sets the radius accessor to the specified number or function, re-evaluates the radius accessor for each node, and returns this force. If *radius* is not specified, returns the current radius accessor, which defaults to:

    ``` javascript
    function radius() {
      return 1;
    }
    ```

    The radius accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the radius of each node is only recomputed when the force is initialized or when this method is called with a new *radius*, and not on every application of the force.
- name: collide.strength()
  id: d3-force#collide_strength
  summary: If strength is specified, sets the force strength to the specified number in the range [0,1] and returns this force
  belongs_to: force
  description: |-
    ###### *collide*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)

    If *strength* is specified, sets the force strength to the specified number in the range \[0,1\] and returns this force. If *strength* is not specified, returns the current strength which defaults to 1.

    Overlapping nodes are resolved through iterative relaxation. For each node, the other nodes that are anticipated to overlap at the next tick (using the anticipated positions ⟨*x* + *vx*,*y* + *vy*⟩) are determined; the node’s velocity is then modified to push the node out of each overlapping node. The change in velocity is dampened by the force’s strength such that the resolution of simultaneous overlaps can be blended together to find a stable solution.
- name: color
  id: d3-color
  summary: Even though your browser understands a lot about colors, it doesn’t offer much help in manipulating colors through JavaScript
  description: "# d3-color\n\nEven though your browser understands a lot about colors, it doesn’t offer much help in manipulating colors through JavaScript. The d3-color module therefore provides representations for various color spaces, allowing specification, conversion and manipulation. (Also see [d3-interpolate](d3-interpolate) for color interpolation.)\n\nFor example, take the color named “steelblue”:\n\n``` javascript\nconst c = d3.color(\"steelblue\"); // {r: 70, g: 130, b: 180, opacity: 1}\n```\n\nLet’s try converting it to HSL:\n\n``` javascript\nconst c = d3.hsl(\"steelblue\"); // {h: 207.27…, s: 0.44, l: 0.4902…, opacity: 1}\n```\n\nNow rotate the hue by 90°, bump up the saturation, and format as a string for CSS:\n\n``` javascript\nc.h += 90;\nc.s += 0.2;\nc + \"\"; // rgb(198, 45, 205)\n```\n\nTo fade the color slightly:\n\n``` javascript\nc.opacity = 0.8;\nc + \"\"; // rgba(198, 45, 205, 0.8)\n```\n\nIn addition to the ubiquitous and machine-friendly [RGB](#rgb) and [HSL](#hsl) color space, d3-color supports color spaces that are designed for humans:\n\n- [CIELAB](#lab) (*a.k.a.* “Lab”)\n- [CIELCh_(ab)](#lch) (*a.k.a.* “LCh” or “HCL”)\n- Dave Green’s [Cubehelix](#cubehelix)\n\nCubehelix features monotonic lightness, while CIELAB and its polar form CIELCh_(ab) are perceptually uniform.\n\n## Extensions\n\nFor additional color spaces, see:\n\n- [d3-cam16](d3-cam16)\n- [d3-cam02](https://github.com/connorgr/d3-cam02)\n- [d3-hsv](d3-hsv)\n- [d3-hcg](d3-hcg)\n- [d3-hsluv](https://github.com/petulla/d3-hsluv)\n\nTo measure color differences, see:\n\n- [d3-color-difference](https://github.com/Evercoder/d3-color-difference)\n\n## Installing\n\nIf you use npm, `npm install d3-color`. You can also download the [latest release on GitHub](https://github.com/d3/d3-color/releases/latest). For vanilla HTML in modern browsers, import d3-color from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {rgb} from \"https://cdn.skypack.dev/d3-color@3\";\n\nconst steelblue = d3.rgb(\"steelblue\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-color’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script>\n\nconst steelblue = d3.rgb(\"steelblue\");\n\n</script>\n```\n\n[Try d3-color in your browser.](https://observablehq.com/collection/@d3/d3-color)\n\n## API Reference\n\n###### d3.**color**(*specifier*) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nParses the specified [CSS Color Module Level 3](http://www.w3.org/TR/css3-color/#colorunits) *specifier* string, returning an [RGB](#rgb) or [HSL](#hsl) color, along with [CSS Color Module Level 4 hex](https://www.w3.org/TR/css-color-4/#hex-notation) *specifier* strings. If the specifier was not valid, null is returned. Some examples:\n\n- `rgb(255, 255, 255)`\n- `rgb(10%, 20%, 30%)`\n- `rgba(255, 255, 255, 0.4)`\n- `rgba(10%, 20%, 30%, 0.4)`\n- `hsl(120, 50%, 20%)`\n- `hsla(120, 50%, 20%, 0.4)`\n- `#ffeeaa`\n- `#fea`\n- `#ffeeaa22`\n- `#fea2`\n- `steelblue`\n\nThe list of supported [named colors](http://www.w3.org/TR/SVG/types.html#ColorKeywords) is specified by CSS.\n\nNote: this function may also be used with `instanceof` to test if an object is a color instance. The same is true of color subclasses, allowing you to test whether a color is in a particular color space.\n\n###### *color*.**opacity**\n\nThis color’s opacity, typically in the range \\[0, 1\\].\n\n###### *color*.**rgb**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns the [RGB equivalent](#rgb) of this color. For RGB colors, that’s `this`.\n\n###### *color*.**copy**(\\[*values*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a copy of this color. If *values* is specified, any enumerable own properties of *values* are assigned to the new returned color. For example, to derive a copy of a *color* with opacity 0.5, say\n\n``` javascript\ncolor.copy({opacity: 0.5})\n```\n\n###### *color*.**brighter**(\\[*k*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a brighter copy of this color. If *k* is specified, it controls how much brighter the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n###### *color*.**darker**(\\[*k*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a darker copy of this color. If *k* is specified, it controls how much darker the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n###### *color*.**displayable**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns true if and only if the color is displayable on standard hardware. For example, this returns false for an RGB color if any channel value is less than zero or greater than 255 when rounded, or if the opacity is not in the range \\[0, 1\\].\n\n###### *color*.**formatHex**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a hexadecimal string representing this color in RGB space, such as `#f7eaba`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.\n\n###### *color*.**formatHex8**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a hexadecimal string representing this color in RGBA space, such as `#f7eaba90`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.\n\n###### *color*.**formatHsl**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a string representing this color according to the [CSS Color Module Level 3 specification](https://www.w3.org/TR/css-color-3/#hsl-color), such as `hsl(257, 50%, 80%)` or `hsla(257, 50%, 80%, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping S and L channel values to the interval \\[0, 100\\].\n\n###### *color*.**formatRgb**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a string representing this color according to the [CSS Object Model specification](https://drafts.csswg.org/cssom/#serialize-a-css-component-value), such as `rgb(247, 234, 186)` or `rgba(247, 234, 186, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping RGB channel values to the interval \\[0, 255\\].\n\n###### *color*.**toString**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nAn alias for [*color*.formatRgb](#color_formatRgb).\n\n###### d3.**rgb**(*r*, *g*, *b*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\") d3.**rgb**(*specifier*) d3.**rgb**(*color*) \n\nConstructs a new [RGB](https://en.wikipedia.org/wiki/RGB_color_model) color. The channel values are exposed as `r`, `g` and `b` properties on the returned instance. Use the [RGB color picker](http://bl.ocks.org/mbostock/78d64ca7ef013b4dcf8f) to explore this color space.\n\nIf *r*, *g* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the RGB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb). Note that unlike [*color*.rgb](#color_rgb) this method *always* returns a new instance, even if *color* is already an RGB color.\n\n###### *rgb*.**clamp**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a new RGB color where the `r`, `g`, and `b` channels are clamped to the range \\[0, 255\\] and rounded to the nearest integer value, and the `opacity` is clamped to the range \\[0, 1\\].\n\n###### d3.**hsl**(*h*, *s*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\") d3.**hsl**(*specifier*) d3.**hsl**(*color*) \n\nConstructs a new [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [HSL color picker](http://bl.ocks.org/mbostock/debaad4fcce9bcee14cf) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSL color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to HSL. (Colors already in the HSL color space skip the conversion to RGB.)\n\n###### *hsl*.**clamp**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\")\n\nReturns a new HSL color where the `h` channel is clamped to the range \\[0, 360), and the `s`, `l`, and `opacity` channels are clamped to the range \\[0, 1\\].\n\n###### d3.**lab**(*l*, *a*, *b*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**lab**(*specifier*) d3.**lab**(*color*) \n\nConstructs a new [CIELAB](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) color. The channel values are exposed as `l`, `a` and `b` properties on the returned instance. Use the [CIELAB color picker](http://bl.ocks.org/mbostock/9f37cc207c0cb166921b) to explore this color space. The value of *l* is typically in the range \\[0, 100\\], while *a* and *b* are typically in \\[-160, +160\\].\n\nIf *l*, *a* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the CIELAB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELAB. (Colors already in the CIELAB color space skip the conversion to RGB, and colors in the HCL color space are converted directly to CIELAB.)\n\n###### d3.**gray**(*l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") \n\nConstructs a new [CIELAB](#lab) color with the specified *l* value and *a* = *b* = 0.\n\n###### d3.**hcl**(*h*, *c*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**hcl**(*specifier*) d3.**hcl**(*color*) \n\nEquivalent to [d3.lch](#lch), but with reversed argument order.\n\n###### d3.**lch**(*l*, *c*, *h*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**lch**(*specifier*) d3.**lch**(*color*) \n\nConstructs a new [CIELCh_(ab)](https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC) color. The channel values are exposed as `l`, `c` and `h` properties on the returned instance. Use the [CIELCh_(ab) color picker](http://bl.ocks.org/mbostock/3e115519a1b495e0bd95) to explore this color space. The value of *l* is typically in the range \\[0, 100\\], *c* is typically in \\[0, 230\\], and *h* is typically in \\[0, 360).\n\nIf *l*, *c*, and *h* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to CIELCh_(ab) color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELCh_(ab). (Colors already in CIELCh_(ab) color space skip the conversion to RGB, and colors in CIELAB color space are converted directly to CIELCh_(ab).)\n\n###### d3.**cubehelix**(*h*, *s*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/cubehelix.js \"Source\") d3.**cubehelix**(*specifier*) d3.**cubehelix**(*color*) \n\nConstructs a new [Cubehelix](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [Cubehelix color picker](http://bl.ocks.org/mbostock/ba8d75e45794c27168b5) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the Cubehelix color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to Cubehelix. (Colors already in the Cubehelix color space skip the conversion to RGB.)\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-color](https://github.com/d3/d3-color)"
- name: color.brighter()
  id: d3-color#color_brighter
  summary: Returns a brighter copy of this color
  belongs_to: color
  description: |-
    ###### *color*.**brighter**(\[*k*\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a brighter copy of this color. If *k* is specified, it controls how much brighter the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.
- name: color.copy()
  id: d3-color#color_copy
  summary: Returns a copy of this color
  belongs_to: color
  description: |-
    ###### *color*.**copy**(\[*values*\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a copy of this color. If *values* is specified, any enumerable own properties of *values* are assigned to the new returned color. For example, to derive a copy of a *color* with opacity 0.5, say

    ``` javascript
    color.copy({opacity: 0.5})
    ```
- name: color.darker()
  id: d3-color#color_darker
  summary: Returns a darker copy of this color
  belongs_to: color
  description: |-
    ###### *color*.**darker**(\[*k*\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a darker copy of this color. If *k* is specified, it controls how much darker the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.
- name: color.displayable()
  id: d3-color#color_displayable
  summary: Returns true if and only if the color is displayable on standard hardware
  belongs_to: color
  description: |-
    ###### *color*.**displayable**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns true if and only if the color is displayable on standard hardware. For example, this returns false for an RGB color if any channel value is less than zero or greater than 255 when rounded, or if the opacity is not in the range \[0, 1\].
- name: color.formatHex()
  id: d3-color#color_formathex
  summary: 'Returns a hexadecimal string representing this color in RGB space, such as #f7eaba'
  belongs_to: color
  description: |-
    ###### *color*.**formatHex**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a hexadecimal string representing this color in RGB space, such as `#f7eaba`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.
- name: color.formatHex8()
  id: d3-color#color_formathex8
  summary: 'Returns a hexadecimal string representing this color in RGBA space, such as #f7eaba90'
  belongs_to: color
  description: |-
    ###### *color*.**formatHex8**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a hexadecimal string representing this color in RGBA space, such as `#f7eaba90`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.
- name: color.formatHsl()
  id: d3-color#color_formathsl
  summary: Returns a string representing this color according to the CSS Color Module Level 3 specification, such as hsl(257, 50%, 80%) or hsla(257, 50%, 80%, 0.2)
  belongs_to: color
  description: |-
    ###### *color*.**formatHsl**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a string representing this color according to the [CSS Color Module Level 3 specification](https://www.w3.org/TR/css-color-3/#hsl-color), such as `hsl(257, 50%, 80%)` or `hsla(257, 50%, 80%, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping S and L channel values to the interval \[0, 100\].
- name: color.formatRgb()
  id: d3-color#color_formatrgb
  summary: Returns a string representing this color according to the CSS Object Model specification, such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2)
  belongs_to: color
  description: |-
    ###### *color*.**formatRgb**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a string representing this color according to the [CSS Object Model specification](https://drafts.csswg.org/cssom/#serialize-a-css-component-value), such as `rgb(247, 234, 186)` or `rgba(247, 234, 186, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping RGB channel values to the interval \[0, 255\].
- name: color.opacity
  id: d3-color#color_opacity
  summary: This color’s opacity, typically in the range [0, 1]
  belongs_to: color
  description: |-
    ###### *color*.**opacity**

    This color’s opacity, typically in the range \[0, 1\].
- name: color.rgb()
  id: d3-color#color_rgb
  summary: Returns the RGB equivalent of this color
  belongs_to: color
  description: |-
    ###### *color*.**rgb**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns the [RGB equivalent](#rgb) of this color. For RGB colors, that’s `this`.
- name: color.toString()
  id: d3-color#color_tostring
  summary: An alias for color.formatRgb
  belongs_to: color
  description: |-
    ###### *color*.**toString**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    An alias for [*color*.formatRgb](#color_formatRgb).
- name: complexLog.cutoffLatitude()
  id: d3-geo-polygon#complexlog_cutofflatitude
  summary: If latitude is specified, sets the cutoff latitude
  belongs_to: geo-polygon
  description: "###### *complexLog*.**cutoffLatitude**(\\[*latitude*\\])\n\nIf *latitude* is specified, sets the cutoff latitude. See above. If *latitude* is not specified, returns the current cutoff latitude.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo-polygon](https://github.com/d3/d3-geo-polygon)"
- name: complexLog.planarProjectionRaw()
  id: d3-geo-polygon#complexlog_planarprojectionraw
  summary: If projectionRaw is specified, sets the planar raw projection
  belongs_to: geo-polygon
  description: |-
    ###### *complexLog*.**planarProjectionRaw**(\[*projectionRaw*\])

    If *projectionRaw* is specified, sets the planar raw projection. See above. If *projectionRaw* is not specified, returns the current planar raw projection.
- name: conic.parallels()
  id: d3-geo#conic_parallels
  summary: The two standard parallels that define the map layout in conic projections
  belongs_to: geo
  description: |-
    ###### *conic*.**parallels**(\[*parallels*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conic.js "Source")

    The [two standard parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map layout in conic projections.
- name: continuous()
  id: d3-scale#_continuous
  summary: Given a value from the domain, returns the corresponding value from the range
  belongs_to: scale
  description: |-
    ###### *continuous*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Given a *value* from the [domain](#continuous_domain), returns the corresponding value from the [range](#continuous_range). If the given *value* is outside the domain, and [clamping](#continuous_clamp) is not enabled, the mapping may be extrapolated such that the returned value is outside the range. For example, to apply a position encoding:

    ``` javascript
    var x = d3.scaleLinear()
        .domain([10, 130])
        .range([0, 960]);

    x(20); // 80
    x(50); // 320
    ```

    Or to apply a color encoding:

    ``` javascript
    var color = d3.scaleLinear()
        .domain([10, 100])
        .range(["brown", "steelblue"]);

    color(20); // "#9a3439"
    color(50); // "#7b5167"
    ```

    Or, in shorthand:

    ``` javascript
    var x = d3.scaleLinear([10, 130], [0, 960]);
    var color = d3.scaleLinear([10, 100], ["brown", "steelblue"]);
    ```
- name: continuous.clamp()
  id: d3-scale#continuous_clamp
  summary: If clamp is specified, enables or disables clamping accordingly
  belongs_to: scale
  description: |-
    ###### *continuous*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *clamp* is specified, enables or disables clamping accordingly. If clamping is disabled and the scale is passed a value outside the [domain](#continuous_domain), the scale may return a value outside the [range](#continuous_range) through extrapolation. If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to [*continuous*.invert](#continuous_invert). For example:

    ``` javascript
    var x = d3.scaleLinear()
        .domain([10, 130])
        .range([0, 960]);

    x(-10); // -160, outside range
    x.invert(-160); // -10, outside domain

    x.clamp(true);
    x(-10); // 0, clamped to range
    x.invert(-160); // 10, clamped to domain
    ```

    If *clamp* is not specified, returns whether or not the scale currently clamps values to within the range.
- name: continuous.copy()
  id: d3-scale#continuous_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: |-
    ###### *continuous*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
- name: continuous.domain()
  id: d3-scale#continuous_domain
  summary: If domain is specified, sets the scale’s domain to the specified array of numbers
  belongs_to: scale
  description: |-
    ###### *continuous*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *domain* is specified, sets the scale’s domain to the specified array of numbers. The array must contain two or more elements. If the elements in the given array are not numbers, they will be coerced to numbers. If *domain* is not specified, returns a copy of the scale’s current domain.

    Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale. For example, to create a [diverging color scale](#diverging-scales) that interpolates between white and red for negative values, and white and green for positive values, say:

    ``` javascript
    var color = d3.scaleLinear()
        .domain([-1, 0, 1])
        .range(["red", "white", "green"]);

    color(-0.5); // "rgb(255, 128, 128)"
    color(+0.5); // "rgb(128, 192, 128)"
    ```

    Internally, a piecewise scale performs a [binary search](d3-array#bisect) for the range interpolator corresponding to the given domain value. Thus, the domain must be in ascending or descending order. If the domain and range have different lengths *N* and *M*, only the first *min(N,M)* elements in each are observed.
- name: continuous.interpolate()
  id: d3-scale#continuous_interpolate
  summary: If interpolate is specified, sets the scale’s range interpolator factory
  belongs_to: scale
  description: |-
    ###### *continuous*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *interpolate* is specified, sets the scale’s [range](#continuous_range) interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range; these interpolators then map a normalized domain parameter *t* in \[0, 1\] to the corresponding value in the range. If *factory* is not specified, returns the scale’s current interpolator factory, which defaults to [d3.interpolate](d3-interpolate#interpolate). See [d3-interpolate](d3-interpolate) for more interpolators.

    For example, consider a diverging color scale with three colors in the range:

    ``` javascript
    var color = d3.scaleLinear()
        .domain([-100, 0, +100])
        .range(["red", "white", "green"]);
    ```

    Two interpolators are created internally by the scale, equivalent to:

    ``` javascript
    var i0 = d3.interpolate("red", "white"),
        i1 = d3.interpolate("white", "green");
    ```

    A common reason to specify a custom interpolator is to change the color space of interpolation. For example, to use [HCL](d3-interpolate#interpolateHcl):

    ``` javascript
    var color = d3.scaleLinear()
        .domain([10, 100])
        .range(["brown", "steelblue"])
        .interpolate(d3.interpolateHcl);
    ```

    Or for [Cubehelix](d3-interpolate#interpolateCubehelix) with a custom gamma:

    ``` javascript
    var color = d3.scaleLinear()
        .domain([10, 100])
        .range(["brown", "steelblue"])
        .interpolate(d3.interpolateCubehelix.gamma(3));
    ```

    Note: the [default interpolator](d3-interpolate#interpolate) **may reuse return values**. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place. If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance); however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
- name: continuous.invert()
  id: d3-scale#continuous_invert
  summary: Given a value from the range, returns the corresponding value from the domain
  belongs_to: scale
  description: |-
    ###### *continuous*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Given a *value* from the [range](#continuous_range), returns the corresponding value from the [domain](#continuous_domain). Inversion is useful for interaction, say to determine the data value corresponding to the position of the mouse. For example, to invert a position encoding:

    ``` javascript
    var x = d3.scaleLinear()
        .domain([10, 130])
        .range([0, 960]);

    x.invert(80); // 20
    x.invert(320); // 50
    ```

    If the given *value* is outside the range, and [clamping](#continuous_clamp) is not enabled, the mapping may be extrapolated such that the returned value is outside the domain. This method is only supported if the range is numeric. If the range is not numeric, returns NaN.

    For a valid value *y* in the range, *continuous*(*continuous*.invert(*y*)) approximately equals *y*; similarly, for a valid value *x* in the domain, *continuous*.invert(*continuous*(*x*)) approximately equals *x*. The scale and its inverse may not be exact due to the limitations of floating point precision.
- name: continuous.nice()
  id: d3-scale#continuous_nice
  summary: Extends the domain so that it starts and ends on nice round values
  belongs_to: scale
  description: |-
    ###### *continuous*.**nice**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/nice.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)

    Extends the [domain](#continuous_domain) so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. An optional tick *count* argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned [ticks](#continuous_ticks) will exactly cover the domain. Nicing is useful if the domain is computed from data, say using [extent](d3-array#extent), and may be irregular. For example, for a domain of \[0.201479…, 0.996679…\], a nice domain might be \[0.2, 1.0\]. If the domain has more than two values, nicing the domain only affects the first and last value. See also d3-array’s [tickStep](d3-array#tickStep).

    Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using [*continuous*.domain](#continuous_domain). You must re-nice the scale after setting the new domain, if desired.
- name: continuous.range()
  id: d3-scale#continuous_range
  summary: If range is specified, sets the scale’s range to the specified array of values
  belongs_to: scale
  description: |-
    ###### *continuous*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *range* is specified, sets the scale’s range to the specified array of values. The array must contain two or more elements. Unlike the [domain](#continuous_domain), elements in the given array need not be numbers; any value that is supported by the underlying [interpolator](#continuous_interpolate) will work, though note that numeric ranges are required for [invert](#continuous_invert). If *range* is not specified, returns a copy of the scale’s current range. See [*continuous*.interpolate](#continuous_interpolate) for more examples.
- name: continuous.rangeRound()
  id: d3-scale#continuous_rangeround
  summary: Sets the scale’s range to the specified array of values while also setting the scale’s interpolator to interpolateRound
  belongs_to: scale
  description: |-
    ###### *continuous*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Sets the scale’s [*range*](#continuous_range) to the specified array of values while also setting the scale’s [interpolator](#continuous_interpolate) to [interpolateRound](d3-interpolate#interpolateRound). This is a convenience method equivalent to:

    ``` javascript
    continuous
        .range(range)
        .interpolate(d3.interpolateRound);
    ```

    The rounding interpolator is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.
- name: continuous.tickFormat()
  id: d3-scale#continuous_tickformat
  summary: Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values
  belongs_to: scale
  description: |-
    ###### *continuous*.**tickFormat**(\[*count*\[, *specifier*\]\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/tickFormat.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Returns a [number format](d3-format) function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values. The specified *count* should have the same value as the count that is used to generate the [tick values](#continuous_ticks).

    An optional *specifier* allows a [custom format](d3-format#locale_format) where the precision of the format is automatically set by the scale as appropriate for the tick interval. For example, to format percentage change, you might say:

    ``` javascript
    var x = d3.scaleLinear()
        .domain([-1, 1])
        .range([0, 960]);

    var ticks = x.ticks(5),
        tickFormat = x.tickFormat(5, "+%");

    ticks.map(tickFormat); // ["-100%", "-50%", "+0%", "+50%", "+100%"]
    ```

    If *specifier* uses the format type `s`, the scale will return a [SI-prefix format](d3-format#locale_formatPrefix) based on the largest value in the domain. If the *specifier* already specifies a precision, this method is equivalent to [*locale*.format](d3-format#locale_format).

    See also [d3.tickFormat](#tickFormat).
- name: continuous.ticks()
  id: d3-scale#continuous_ticks
  summary: Returns approximately count representative values from the scale’s domain
  belongs_to: scale
  description: |-
    ###### *continuous*.**ticks**(\[*count*\])

    Returns approximately *count* representative values from the scale’s [domain](#continuous_domain). If *count* is not specified, it defaults to 10. The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10), and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. The specified *count* is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s [ticks](d3-array#ticks).
- name: continuous.unknown()
  id: d3-scale#continuous_unknown
  summary: If value is specified, sets the output value of the scale for undefined (or NaN) input values and returns this scale
  belongs_to: scale
  description: |-
    ###### *continuous*.**unknown**(\[*value*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *value* is specified, sets the output value of the scale for undefined (or NaN) input values and returns this scale. If *value* is not specified, returns the current unknown value, which defaults to undefined.
- name: contour
  id: d3-contour
  summary: This library computes contour polygons by applying marching squares to a rectangular array of numeric values
  description: "# d3-contour\n\nThis library computes contour polygons by applying [marching squares](https://en.wikipedia.org/wiki/Marching_squares) to a rectangular array of numeric values. For example, here is Maungawhau’s topology (the classic `volcano` dataset and `terrain.colors` from R):\n\nFor each [threshold value](#contours_thresholds), the [contour generator](#_contours) constructs a GeoJSON MultiPolygon geometry object representing the area where the input values are greater than or equal to the threshold value. The geometry is in planar coordinates, where ⟨*i* + 0.5, *j* + 0.5⟩ corresponds to element *i* + *jn* in the input values array. Here is an example that loads a GeoTIFF of surface temperatures, and another that blurs a noisy monochrome PNG to produce smooth contours of cloud fraction:\n\nSince the contour polygons are GeoJSON, you can transform and display them using standard tools; see [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath), [d3.geoProject](https://github.com/d3/d3-geo-projection/blob/main/README.md#geoProject) and [d3.geoStitch](https://github.com/d3/d3-geo-projection/blob/main/README.md#geoStitch), for example. Here the above contours of surface temperature are displayed in the Natural Earth projection:\n\nContour plots can also visualize continuous functions by sampling. Here is the Goldstein–Price function (a test function for global optimization) and a trippy animation of *sin*(*x* + *y*)*sin*(*x* - *y*):\n\nContours can also show the [estimated density](#density-estimation) of point clouds, which is especially useful to avoid overplotting in large datasets. This library implements fast two-dimensional kernel density estimation; see [d3.contourDensity](#contourDensity). Here is a scatterplot showing the relationship between the idle duration and eruption duration for Old Faithful:\n\nAnd here is a density contour plot showing the relationship between the weight and price of 53,940 diamonds:\n\n## Installing\n\nIf you use npm, `npm install d3-contour`. You can also download the [latest release on GitHub](https://github.com/d3/d3-contour/releases/latest). For vanilla HTML in modern browsers, import d3-contour from jsDelivr:\n\n``` markup\n<script type=\"module\">\n\nimport {contours} from \"https://cdn.jsdelivr.net/npm/d3-contour@4/+esm\";\n\nconst c = contours(values);\n\n</script>\n```\n\nFor legacy environments, you can load d3-contour’s UMD bundle; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-contour@4\"></script>\n<script>\n\n// Populate a grid of n×m values where -2 ≤ x ≤ 2 and -2 ≤ y ≤ 1.\nconst n = 256, m = 256, values = new Array(n * m);\nfor (let j = 0.5, k = 0; j < m; ++j) {\n  for (let i = 0.5; i < n; ++i, ++k) {\n    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);\n  }\n}\n\n// Compute the contour polygons at log-spaced intervals; returns an array of MultiPolygon.\nconst contours = d3.contours()\n    .size([n, m])\n    .thresholds(Array.from({ length: 19 }, (_, i) => Math.pow(2, i + 2)))\n    (values);\n\n// See https://en.wikipedia.org/wiki/Test_functions_for_optimization\nfunction goldsteinPrice(x, y) {\n  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))\n      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));\n}\n\n</script>\n```\n\n## API Reference\n\n###### d3.**contours**() · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/collection/@d3/d3-contour)\n\nConstructs a new contour generator with the default settings.\n\n###### *contours*(*values*) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js)\n\nComputes the contours for the given array of *values*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the input *values* are greater than or equal to the corresponding [threshold value](#contours_thresholds); the threshold value for each geometry object is exposed as *geometry*.value.\n\nThe input *values* must be an array of length *n*×*m* where \\[*n*, *m*\\] is the contour generator’s [size](#contours_size); furthermore, each *values*\\[*i* + *jn*\\] must represent the value at the position ⟨*i*, *j*⟩. For example, to construct a 256×256 grid for the [Goldstein–Price function](https://en.wikipedia.org/wiki/Test_functions_for_optimization) where -2 ≤ *x* ≤ 2 and -2 ≤ *y* ≤ 1:\n\n``` javascript\nvar n = 256, m = 256, values = new Array(n * m);\nfor (var j = 0.5, k = 0; j < m; ++j) {\n  for (var i = 0.5; i < n; ++i, ++k) {\n    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);\n  }\n}\n\nfunction goldsteinPrice(x, y) {\n  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))\n      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));\n}\n```\n\nThe returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection.\n\n###### *contours*.**contour**(*values*, *threshold*) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)\n\nComputes a single contour, returning a [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry object](http://geojson.org/geojson-spec.html#geometry-objects) representing the area where the input *values* are greater than or equal to the given [*threshold* value](#contours_thresholds); the threshold value for each geometry object is exposed as *geometry*.value.\n\nThe input *values* must be an array of length *n*×*m* where \\[*n*, *m*\\] is the contour generator’s [size](#contours_size); furthermore, each *values*\\[*i* + *jn*\\] must represent the value at the position ⟨*i*, *j*⟩. See [*contours*](#_contours) for an example.\n\n###### *contours*.**size**(\\[*size*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)\n\nIf *size* is specified, sets the expected size of the input *values* grid to the [contour generator](#_contour) and returns the contour generator. The *size* is specified as an array \\[*n*, *m*\\] where *n* is the number of columns in the grid and *m* is the number of rows; *n* and *m* must be positive integers. If *size* is not specified, returns the current size which defaults to \\[1, 1\\].\n\n###### *contours*.**smooth**(\\[*smooth*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/contours-smooth)\n\nIf *smooth* is specified, sets whether or not the generated contour polygons are smoothed using linear interpolation. If *smooth* is not specified, returns the current smoothing flag, which defaults to true.\n\n###### *contours*.**thresholds**(\\[*thresholds*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/volcano-contours)\n\nIf *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default implements [Sturges’ formula](https://github.com/d3/d3-array/blob/main/README.md#thresholdSturges).\n\nThresholds are defined as an array of values \\[*x0*, *x1*, …\\]. The first [generated contour](#_contour) corresponds to the area where the input values are greater than or equal to *x0*; the second contour corresponds to the area where the input values are greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as *geometry*.value.\n\nIf a *count* is specified instead of an array of *thresholds*, then the input values’ [extent](https://github.com/d3/d3-array/blob/main/README.md#extent) will be uniformly divided into approximately *count* bins; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).\n\n### Density Estimation\n\n###### d3.**contourDensity**() · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nConstructs a new density estimator with the default settings.\n\n###### *density*(*data*) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)\n\nEstimates the density contours for the given array of *data*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the estimated number of points per square pixel is greater than or equal to the corresponding [threshold value](#density_thresholds); the threshold value for each geometry object is exposed as *geometry*.value. The returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection. See also [d3.contours](#contours).\n\nThe *x*- and *y*-coordinate for each data point are computed using [*density*.x](#density_x) and [*density*.y](#density_y). In addition, [*density*.weight](#density_weight) indicates the relative contribution of each data point (default 1). The generated contours are only accurate within the estimator’s [defined size](#density_size).\n\n###### *density*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nIf *x* is specified, sets the *x*-coordinate accessor. If *x* is not specified, returns the current *x*-coordinate accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\n###### *density*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nIf *y* is specified, sets the *y*-coordinate accessor. If *y* is not specified, returns the current *y*-coordinate accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\n###### *density*.**weight**(\\[*weight*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)\n\nIf *weight* is specified, sets the accessor for point weights. If *weight* is not specified, returns the current point weight accessor, which defaults to:\n\n``` javascript\nfunction weight() {\n  return 1;\n}\n```\n\n###### *density*.**size**(\\[*size*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nIf *size* is specified, sets the size of the density estimator to the specified bounds and returns the estimator. The *size* is specified as an array \\[*width*, *height*\\], where *width* is the maximum *x*-value and *height* is the maximum *y*-value. If *size* is not specified, returns the current size which defaults to \\[960, 500\\]. The [estimated density contours](#_density) are only accurate within the defined size.\n\n###### *density*.**cellSize**(\\[*cellSize*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)\n\nIf *cellSize* is specified, sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the estimator. If *cellSize* is not specified, returns the current cell size, which defaults to 4. The cell size is rounded down to the nearest power of two. Smaller cells produce more detailed contour polygons, but are more expensive to compute.\n\n###### *density*.**thresholds**(\\[*thresholds*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nIf *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default generates about twenty nicely-rounded density thresholds.\n\nThresholds are defined as an array of values \\[*x0*, *x1*, …\\]. The first [generated density contour](#_density) corresponds to the area where the estimated density is greater than or equal to *x0*; the second contour corresponds to the area where the estimated density is greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as *geometry*.value. The first value *x0* should typically be greater than zero.\n\nIf a *count* is specified instead of an array of *thresholds*, then approximately *count* uniformly-spaced nicely-rounded thresholds will be generated; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).\n\n###### *density*.**bandwidth**(\\[*bandwidth*\\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)\n\nIf *bandwidth* is specified, sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the estimate. If *bandwidth* is not specified, returns the current bandwidth, which defaults to 20.4939…. The specified *bandwidth* is currently rounded to the nearest supported value by this implementation, and must be nonnegative.\n\n###### *density*.**contours**(*data*) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours-data)\n\nReturn a *contour*(*value*) function that can be used to compute an arbitrary contour on the given data without needing to recompute the underlying grid. The returned *contour* function also exposes a *contour*.max value which represents the maximum density of the grid.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-contour](https://github.com/d3/d3-contour)"
- name: contours()
  id: d3-contour#_contours
  summary: Computes the contours for the given array of values, returning an array of GeoJSON MultiPolygon geometry objects
  belongs_to: contour
  description: |-
    ###### *contours*(*values*) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js)

    Computes the contours for the given array of *values*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the input *values* are greater than or equal to the corresponding [threshold value](#contours_thresholds); the threshold value for each geometry object is exposed as *geometry*.value.

    The input *values* must be an array of length *n*×*m* where \[*n*, *m*\] is the contour generator’s [size](#contours_size); furthermore, each *values*\[*i* + *jn*\] must represent the value at the position ⟨*i*, *j*⟩. For example, to construct a 256×256 grid for the [Goldstein–Price function](https://en.wikipedia.org/wiki/Test_functions_for_optimization) where -2 ≤ *x* ≤ 2 and -2 ≤ *y* ≤ 1:

    ``` javascript
    var n = 256, m = 256, values = new Array(n * m);
    for (var j = 0.5, k = 0; j < m; ++j) {
      for (var i = 0.5; i < n; ++i, ++k) {
        values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);
      }
    }

    function goldsteinPrice(x, y) {
      return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))
          * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));
    }
    ```

    The returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection.
- name: contours.contour()
  id: d3-contour#contours_contour
  summary: Computes a single contour, returning a GeoJSON MultiPolygon geometry object representing the area where the input values are greater than or equal to the given threshold value; the threshold value for each geometry object is exposed as geometry.value
  belongs_to: contour
  description: |-
    ###### *contours*.**contour**(*values*, *threshold*) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)

    Computes a single contour, returning a [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry object](http://geojson.org/geojson-spec.html#geometry-objects) representing the area where the input *values* are greater than or equal to the given [*threshold* value](#contours_thresholds); the threshold value for each geometry object is exposed as *geometry*.value.

    The input *values* must be an array of length *n*×*m* where \[*n*, *m*\] is the contour generator’s [size](#contours_size); furthermore, each *values*\[*i* + *jn*\] must represent the value at the position ⟨*i*, *j*⟩. See [*contours*](#_contours) for an example.
- name: contours.size()
  id: d3-contour#contours_size
  summary: If size is specified, sets the expected size of the input values grid to the contour generator and returns the contour generator
  belongs_to: contour
  description: |-
    ###### *contours*.**size**(\[*size*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)

    If *size* is specified, sets the expected size of the input *values* grid to the [contour generator](#_contour) and returns the contour generator. The *size* is specified as an array \[*n*, *m*\] where *n* is the number of columns in the grid and *m* is the number of rows; *n* and *m* must be positive integers. If *size* is not specified, returns the current size which defaults to \[1, 1\].
- name: contours.smooth()
  id: d3-contour#contours_smooth
  summary: If smooth is specified, sets whether or not the generated contour polygons are smoothed using linear interpolation
  belongs_to: contour
  description: |-
    ###### *contours*.**smooth**(\[*smooth*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/contours-smooth)

    If *smooth* is specified, sets whether or not the generated contour polygons are smoothed using linear interpolation. If *smooth* is not specified, returns the current smoothing flag, which defaults to true.
- name: contours.thresholds()
  id: d3-contour#contours_thresholds
  summary: If thresholds is specified, sets the threshold generator to the specified function or array and returns this contour generator
  belongs_to: contour
  description: |-
    ###### *contours*.**thresholds**(\[*thresholds*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/@d3/volcano-contours)

    If *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default implements [Sturges’ formula](https://github.com/d3/d3-array/blob/main/README.md#thresholdSturges).

    Thresholds are defined as an array of values \[*x0*, *x1*, …\]. The first [generated contour](#_contour) corresponds to the area where the input values are greater than or equal to *x0*; the second contour corresponds to the area where the input values are greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as *geometry*.value.

    If a *count* is specified instead of an array of *thresholds*, then the input values’ [extent](https://github.com/d3/d3-array/blob/main/README.md#extent) will be uniformly divided into approximately *count* bins; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).

    ### Density Estimation
- name: craig.parallel()
  id: d3-geo-projection#craig_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *craig*.**parallel**(\[*parallel*\])

    Defaults to 0°.
- name: csv2json
  id: d3-dsv#csv2json
  summary: Equivalent to dsv2json
  belongs_to: dsv
  description: |-
    ###### **csv2json** \[*options…*\] \[*file*\]

    Equivalent to [dsv2json](#dsv2json).
- name: csv2tsv
  id: d3-dsv#csv2tsv
  summary: Equivalent to dsv2dsv, but the output delimiter defaults to the tab character (\t)
  belongs_to: dsv
  description: |-
    ###### **csv2tsv** \[*options…*\] \[*file*\]

    Equivalent to [dsv2dsv](#dsv2dsv), but the [output delimiter](#dsv2dsv_output_delimiter) defaults to the tab character (\t).
- name: curve.areaEnd()
  id: d3-shape#curve_areaend
  summary: Indicates the end of the current area segment
  belongs_to: shape
  description: |-
    ###### *curve*.**areaEnd**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Indicates the end of the current area segment.
- name: curve.areaStart()
  id: d3-shape#curve_areastart
  summary: Indicates the start of a new area segment
  belongs_to: shape
  description: |-
    ###### *curve*.**areaStart**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js#L7)

    Indicates the start of a new area segment. Each area segment consists of exactly two [line segments](#curve_lineStart): the topline, followed by the baseline, with the baseline points in reverse order.
- name: curve.lineEnd()
  id: d3-shape#curve_lineend
  summary: Indicates the end of the current line segment
  belongs_to: shape
  description: |-
    ###### *curve*.**lineEnd**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Indicates the end of the current line segment.
- name: curve.lineStart()
  id: d3-shape#curve_linestart
  summary: Indicates the start of a new line segment
  belongs_to: shape
  description: |-
    ###### *curve*.**lineStart**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Indicates the start of a new line segment. Zero or more [points](#curve_point) will follow.
- name: curve.point()
  id: d3-shape#curve_point
  summary: Indicates a new point in the current line segment with the given x- and y-values
  belongs_to: shape
  description: |-
    ###### *curve*.**point**(*x*, *y*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Indicates a new point in the current line segment with the given *x*- and *y*-values.

    ### Links

    The **link** shape generates a smooth cubic Bézier curve from a source point to a target point. The tangents of the curve at the start and end are either [vertical](#linkVertical), [horizontal](#linkHorizontal) or [radial](#linkRadial).
- name: cylindricalEqualArea.parallel()
  id: d3-geo-projection#cylindricalequalarea_parallel
  summary: Defaults to approximately 38.58°, fitting the world in a 960×500 rectangle
  belongs_to: geo-projection
  description: |-
    ###### *cylindricalEqualArea*.**parallel**(\[*parallel*\])

    Defaults to approximately 38.58°, fitting the world in a 960×500 rectangle.
- name: cylindricalStereographic.parallel()
  id: d3-geo-projection#cylindricalstereographic_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *cylindricalStereographic*.**parallel**(\[*parallel*\])

    Defaults to 0°.
- name: d3.active()
  id: d3-transition#active
  summary: Returns the active transition on the specified node with the specified name, if any
  belongs_to: transition
  description: |-
    ###### d3.**active**(*node*\[, *name*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/active.js)

    Returns the active transition on the specified *node* with the specified *name*, if any. If no *name* is specified, null is used. Returns null if there is no such active transition on the specified node. This method is useful for creating chained transitions. For example, to initiate disco mode:

    ``` javascript
    d3.selectAll("circle").transition()
        .delay(function(d, i) { return i * 50; })
        .on("start", function repeat() {
            d3.active(this)
                .style("fill", "red")
              .transition()
                .style("fill", "green")
              .transition()
                .style("fill", "blue")
              .transition()
                .on("start", repeat);
          });
    ```

    See [chained transitions](https://bl.ocks.org/mbostock/70d5541b547cc222aa02) for an example.

    ### Modifying Elements

    After selecting elements and creating a transition with [*selection*.transition](#selection_transition), use the transition’s transformation methods to affect document content.
- name: d3.arc()
  id: d3-shape#arc
  summary: Constructs a new arc generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**arc**() · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

    Constructs a new arc generator with the default settings.
- name: d3.area()
  id: d3-shape#area
  summary: Constructs a new area generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**area**(\[*x*\]\[, *y0*\]\[, *y1*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

    Constructs a new area generator with the default settings. If *x*, *y0* or *y1* are specified, sets the corresponding accessors to the specified function or number and returns this area generator.
- name: d3.areaRadial()
  id: d3-shape#arearadial
  summary: Constructs a new radial area generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**areaRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

    Constructs a new radial area generator with the default settings. A radial area generator is equivalent to the standard Cartesian [area generator](#area), except the [x](#area_x) and [y](#area_y) accessors are replaced with [angle](#areaRadial_angle) and [radius](#areaRadial_radius) accessors. Radial areas are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.
- name: d3.ascending()
  id: d3-array#ascending
  summary: Returns -1 if a is less than b, or 1 if a is greater than b, or 0
  belongs_to: array
  description: |-
    ###### d3.**ascending**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/ascending.js), [Examples](https://observablehq.com/@d3/d3-ascending)

    Returns -1 if *a* is less than *b*, or 1 if *a* is greater than *b*, or 0. This is the comparator function for natural order, and can be used in conjunction with the built-in [*array*.sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method to arrange elements in ascending order. It is implemented as:

    ``` javascript
    function ascending(a, b) {
      return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    ```

    Note that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.
- name: d3.autoType()
  id: d3-dsv#autotype
  summary: Given an object (or array) representing a parsed row, infers the types of values on the object and coerces them accordingly, returning the mutated object
  belongs_to: dsv
  description: |-
    ###### d3.**autoType**(*object*) [Source](https://github.com/d3/d3-dsv/blob/master/src/autoType.js "Source")

    Given an *object* (or array) representing a parsed row, infers the types of values on the *object* and coerces them accordingly, returning the mutated *object*. This function is intended to be used as a *row* accessor function in conjunction with [*dsv*.parse](#dsv_parse) and [*dsv*.parseRows](#dsv_parseRow). For example, consider the following CSV file:

    ``` notranslate
    Year,Make,Model,Length
    1997,Ford,E350,2.34
    2000,Mercury,Cougar,2.38
    ```

    When used with [d3.csvParse](#csvParse),

    ``` javascript
    d3.csvParse(string, d3.autoType)
    ```

    the resulting JavaScript array is:

    ``` javascript
    [
      {"Year": 1997, "Make": "Ford", "Model": "E350", "Length": 2.34},
      {"Year": 2000, "Make": "Mercury", "Model": "Cougar", "Length": 2.38}
    ]
    ```

    Type inference works as follows. For each *value* in the given *object*, the [trimmed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim) value is computed; the value is then re-assigned as follows:

    1.  If empty, then `null`.
    2.  If exactly `"true"`, then `true`.
    3.  If exactly `"false"`, then `false`.
    4.  If exactly `"NaN"`, then `NaN`.
    5.  Otherwise, if [coercible to a number](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-tonumber-applied-to-the-string-type), then a number.
    6.  Otherwise, if a [date-only or date-time string](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-date-time-string-format), then a Date.
    7.  Otherwise, a string (the original untrimmed value).

    Values with leading zeroes may be coerced to numbers; for example `"08904"` coerces to `8904`. However, extra characters such as commas or units (*e.g.*, `"$1.00"`, `"(123)"`, `"1,234"` or `"32px"`) will prevent number coercion, resulting in a string.

    Date strings must be in ECMAScript’s subset of the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601). When a date-only string such as YYYY-MM-DD is specified, the inferred time is midnight UTC; however, if a date-time string such as YYYY-MM-DDTHH:MM is specified without a time zone, it is assumed to be local time.

    Automatic type inference is primarily intended to provide safe, predictable behavior in conjunction with [*dsv*.format](#dsv_format) and [*dsv*.formatRows](#dsv_formatRows) for common JavaScript types. If you need different behavior, you should implement your own row accessor function.

    For more, see [the d3.autoType notebook](https://observablehq.com/@d3/d3-autotype).

    ### Content Security Policy

    If a [content security policy](http://www.w3.org/TR/CSP/) is in place, note that [*dsv*.parse](#dsv_parse) requires `unsafe-eval` in the `script-src` directive, due to the (safe) use of dynamic code generation for fast parsing. (See [source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js).) Alternatively, use [*dsv*.parseRows](#dsv_parseRows).

    ### Byte-Order Marks

    DSV files sometimes begin with a [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark); saving a spreadsheet in CSV UTF-8 format from Microsoft Excel, for example, will include a BOM. On the web this is not usually a problem because the [UTF-8 decode algorithm](https://encoding.spec.whatwg.org/#utf-8-decode) specified in the Encoding standard removes the BOM. Node.js, on the other hand, [does not remove the BOM](https://github.com/nodejs/node-v0.x-archive/issues/1918) when decoding UTF-8.

    If the BOM is not removed, the first character of the text is a zero-width non-breaking space. So if a CSV file with a BOM is parsed by [d3.csvParse](#csvParse), the first column’s name will begin with a zero-width non-breaking space. This can be hard to spot since this character is usually invisible when printed.

    To remove the BOM before parsing, consider using [strip-bom](https://www.npmjs.com/package/strip-bom).

    ## Command Line Reference
- name: d3.axisBottom()
  id: d3-axis#axisbottom
  summary: Constructs a new bottom-oriented axis generator for the given scale, with empty tick arguments, a tick size of 6 and padding of 3
  belongs_to: axis
  description: |-
    ###### d3.**axisBottom**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    Constructs a new bottom-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn below the horizontal domain path.
- name: d3.axisLeft()
  id: d3-axis#axisleft
  summary: Constructs a new left-oriented axis generator for the given scale, with empty tick arguments, a tick size of 6 and padding of 3
  belongs_to: axis
  description: |-
    ###### d3.**axisLeft**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    Constructs a new left-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn to the left of the vertical domain path.
- name: d3.axisRight()
  id: d3-axis#axisright
  summary: Constructs a new right-oriented axis generator for the given scale, with empty tick arguments, a tick size of 6 and padding of 3
  belongs_to: axis
  description: |-
    ###### d3.**axisRight**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    Constructs a new right-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn to the right of the vertical domain path.
- name: d3.axisTop()
  id: d3-axis#axistop
  summary: Constructs a new top-oriented axis generator for the given scale, with empty tick arguments, a tick size of 6 and padding of 3
  belongs_to: axis
  description: |-
    ###### d3.**axisTop**(*scale*) · [Source](https://github.com/d3/d3-axis/blob/master/src/axis.js)

    Constructs a new top-oriented axis generator for the given [scale](d3-scale), with empty [tick arguments](#axis_ticks), a [tick size](#axis_tickSize) of 6 and [padding](#axis_tickPadding) of 3. In this orientation, ticks are drawn above the horizontal domain path.
- name: d3.bin()
  id: d3-array#bin
  summary: Constructs a new bin generator with the default settings
  belongs_to: array
  description: |-
    ###### d3.**bin**() · [Source](https://github.com/d3/d3-array/blob/main/src/bin.js), [Examples](https://observablehq.com/@d3/d3-bin)

    Constructs a new bin generator with the default settings.
- name: d3.bisect()
  id: d3-array#bisect
  summary: Similar to bisectLeft, but returns an insertion point which comes after (to the right of) any existing entries of x in array
  belongs_to: array
  description: |-
    ###### d3.**bisect**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js), [Examples](https://observablehq.com/@d3/d3-bisect) d3.**bisectRight**(*array*, *x*\[, *lo*\[, *hi*\]\])

    Similar to [bisectLeft](#bisectLeft), but returns an insertion point which comes after (to the right of) any existing entries of *x* in *array*. The returned insertion point *i* partitions the *array* into two halves so that all *v* \<= *x* for *v* in *array*.slice(*lo*, *i*) for the left side and all *v* \> *x* for *v* in *array*.slice(*i*, *hi*) for the right side.
- name: d3.bisectCenter()
  id: d3-array#bisectcenter
  summary: Returns the index of the value closest to x in the given array of numbers
  belongs_to: array
  description: |-
    ###### d3.**bisectCenter**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js), [Examples](https://observablehq.com/@d3/multi-line-chart)

    Returns the index of the value closest to *x* in the given *array* of numbers. The arguments *lo* (inclusive) and *hi* (exclusive) may be used to specify a subset of the array which should be considered; by default the entire array is used.

    See [*bisector*.center](#bisector_center).
- name: d3.bisectLeft()
  id: d3-array#bisectleft
  summary: Returns the insertion point for x in array to maintain sorted order
  belongs_to: array
  description: |-
    ###### d3.**bisectLeft**(*array*, *x*\[, *lo*\[, *hi*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/bisect.js)

    Returns the insertion point for *x* in *array* to maintain sorted order. The arguments *lo* and *hi* may be used to specify a subset of the array which should be considered; by default the entire array is used. If *x* is already present in *array*, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first argument to [splice](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) assuming that *array* is already sorted. The returned insertion point *i* partitions the *array* into two halves so that all *v* \< *x* for *v* in *array*.slice(*lo*, *i*) for the left side and all *v* \>= *x* for *v* in *array*.slice(*i*, *hi*) for the right side.
- name: d3.bisector()
  id: d3-array#bisector
  summary: Returns a new bisector using the specified accessor or comparator function
  belongs_to: array
  description: |-
    ###### d3.**bisector**(*accessor*) · [Source](https://github.com/d3/d3-array/blob/main/src/bisector.js) d3.**bisector**(*comparator*)

    Returns a new bisector using the specified *accessor* or *comparator* function. This method can be used to bisect arrays of objects instead of being limited to simple arrays of primitives. For example, given the following array of objects:

    ``` javascript
    var data = [
      {date: new Date(2011, 1, 1), value: 0.5},
      {date: new Date(2011, 2, 1), value: 0.6},
      {date: new Date(2011, 3, 1), value: 0.7},
      {date: new Date(2011, 4, 1), value: 0.8}
    ];
    ```

    A suitable bisect function could be constructed as:

    ``` javascript
    var bisectDate = d3.bisector(function(d) { return d.date; }).right;
    ```

    This is equivalent to specifying a comparator:

    ``` javascript
    var bisectDate = d3.bisector(function(d, x) { return d.date - x; }).right;
    ```

    And then applied as *bisectDate*(*array*, *date*), returning an index. Note that the comparator is always passed the search value *x* as the second argument. Use a comparator rather than an accessor if you want values to be sorted in an order different than natural order, such as in descending rather than ascending order.
- name: d3.blob()
  id: d3-fetch#blob
  summary: Fetches the binary file at the specified input URL as a Blob
  belongs_to: fetch
  description: |-
    ###### d3.**blob**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/blob.js "Source")

    Fetches the binary file at the specified *input* URL as a Blob. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.
- name: d3.blur()
  id: d3-array#blur
  summary: Blurs an array of data in-place by applying three iterations of a moving average transform, for a fast approximation of a gaussian kernel of the given radius, a non-negative number, and returns the array
  belongs_to: array
  description: |-
    #### Blur

    ###### d3.**blur**(*data*, *radius*) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blur)

    Blurs an array of *data* in-place by applying three iterations of a moving average transform, for a fast approximation of a gaussian kernel of the given *radius*, a non-negative number, and returns the array.

    ``` javascript
    const randomWalk = d3.cumsum({length: 1000}, () => Math.random() - 0.5);
    blur(randomWalk, 5);
    ```

    Copy the data if you don’t want to smooth it in-place:

    ``` javascript
    const smoothed = blur(randomWalk.slice(), 5);
    ```
- name: d3.blur2()
  id: d3-array#blur2
  summary: Blurs a matrix of the given width and height in-place, by applying an horizontal blur of radius rx and a vertical blur or radius ry (which defaults to rx)
  belongs_to: array
  description: |-
    ###### d3.**blur2**({*data*, *width*\[, *height*\]}, *rx*\[, *ry*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blur)

    Blurs a matrix of the given *width* and *height* in-place, by applying an horizontal blur of radius *rx* and a vertical blur or radius *ry* (which defaults to *rx*). The matrix *data* is stored in a flat array, used to determine the *height* if it is not specified. Returns the blurred {data, width, height}.

    ``` javascript
    data = [
      1, 0, 0,
      0, 0, 0,
      0, 0, 1
    ];
    blur2({data, width: 3}, 1);
    ```
- name: d3.blurImage()
  id: d3-array#blurimage
  summary: Blurs an ImageData structure in-place, blurring each of the RGBA layers independently by applying an horizontal blur of radius rx and a vertical blur or radius ry (which defaults to rx)
  belongs_to: array
  description: |-
    ###### d3.**blurImage**(*imageData*, *rx*\[, *ry*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/blur.js), [Examples](https://observablehq.com/@d3/d3-blurimage)

    Blurs an [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) structure in-place, blurring each of the RGBA layers independently by applying an horizontal blur of radius *rx* and a vertical blur or radius *ry* (which defaults to *rx*). Returns the blurred ImageData.

    ``` javascript
    const imData = context.getImageData(0, 0, width, height);
    blurImage(imData, 5);
    ```

    ### Iterables

    These are equivalent to built-in array methods, but work with any iterable including Map, Set, and Generator.
- name: d3.brush()
  id: d3-brush#brush
  summary: Creates a new two-dimensional brush
  belongs_to: brush
  description: |-
    ###### d3.**brush**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot)

    Creates a new two-dimensional brush.
- name: d3.brushSelection()
  id: d3-brush#brushselection
  summary: Returns the current brush selection for the specified node
  belongs_to: brush
  description: "###### d3.**brushSelection**(*node*) · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/double-click-brush-clear)\n\nReturns the current brush selection for the specified *node*. Internally, an element’s brush state is stored as *element*.\\_\\_brush; however, you should use this method rather than accessing it directly. If the given *node* has no selection, returns null. Otherwise, the *selection* is defined as an array of numbers. For a [two-dimensional brush](#brush), it is \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where *x0* is the minimum *x*-value, *y0* is the minimum *y*-value, *x1* is the maximum *x*-value, and *y1* is the maximum *y*-value. For an [*x*-brush](#brushX), it is \\[*x0*, *x1*\\]; for a [*y*-brush](#brushY), it is \\[*y0*, *y1*\\].\n\n### Brush Events\n\nWhen a [brush event listener](#brush_on) is invoked, it receives the current brush event. The *event* object exposes several fields:\n\n- `target` - the associated [brush behavior](#brush).\n- `type` - the string “start”, “brush” or “end”; see [*brush*.on](#brush_on).\n- `selection` - the current [brush selection](#brushSelection).\n- `sourceEvent` - the underlying input event, such as mousemove or touchmove.\n- `mode` - the string “drag”, “space”, “handle” or “center”; the mode of the brush.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-brush](https://github.com/d3/d3-brush)"
- name: d3.brushX()
  id: d3-brush#brushx
  summary: Creates a new one-dimensional brush along the x-dimension
  belongs_to: brush
  description: |-
    ###### d3.**brushX**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js), [Examples](https://observablehq.com/@d3/focus-context)

    Creates a new one-dimensional brush along the *x*-dimension.
- name: d3.brushY()
  id: d3-brush#brushy
  summary: Creates a new one-dimensional brush along the y-dimension
  belongs_to: brush
  description: |-
    ###### d3.**brushY**() · [Source](https://github.com/d3/d3-brush/blob/master/src/brush.js)

    Creates a new one-dimensional brush along the *y*-dimension.
- name: d3.buffer()
  id: d3-fetch#buffer
  summary: Fetches the binary file at the specified input URL as an ArrayBuffer
  belongs_to: fetch
  description: |-
    ###### d3.**buffer**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/buffer.js "Source")

    Fetches the binary file at the specified *input* URL as an ArrayBuffer. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.
- name: d3.chord()
  id: d3-chord#chord
  summary: Constructs a new chord layout with the default settings
  belongs_to: chord
  description: |-
    ###### d3.**chord**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    Constructs a new chord layout with the default settings.
- name: d3.chordDirected()
  id: d3-chord#chorddirected
  summary: A chord layout for directional flows
  belongs_to: chord
  description: |-
    ###### d3.**chordDirected**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js), [Examples](https://observablehq.com/@d3/directed-chord-diagram)

    A chord layout for directional flows. The chord from *i* to *j* is generated from the value in *matrix*\[*i*\]\[*j*\] only.
- name: d3.chordTranspose()
  id: d3-chord#chordtranspose
  summary: A transposed chord layout
  belongs_to: chord
  description: |-
    ###### d3.**chordTranspose**() · [Source](https://github.com/d3/d3-chord/blob/master/src/chord.js)

    A transposed chord layout. Useful to highlight outgoing (rather than incoming) flows.
- name: d3.cluster()
  id: d3-hierarchy#cluster
  summary: 'The cluster layout produces dendrograms: node-link diagrams that place leaf nodes of the tree at the same depth'
  belongs_to: hierarchy
  description: |-
    ### Cluster

    The **cluster layout** produces [dendrograms](http://en.wikipedia.org/wiki/Dendrogram): node-link diagrams that place leaf nodes of the tree at the same depth. Dendrograms are typically less compact than [tidy trees](#tree), but are useful when all the leaves should be at the same level, such as for hierarchical clustering or [phylogenetic tree diagrams](https://observablehq.com/@mbostock/tree-of-life).

    ###### d3.**cluster**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/cluster.js), [Examples](https://observablehq.com/@d3/cluster-dendrogram)

    Creates a new cluster layout with default settings.
- name: d3.color()
  id: d3-color#color
  summary: Parses the specified CSS Color Module Level 3 specifier string, returning an RGB or HSL color, along with CSS Color Module Level 4 hex specifier strings
  belongs_to: color
  description: |-
    ###### d3.**color**(*specifier*) [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Parses the specified [CSS Color Module Level 3](http://www.w3.org/TR/css3-color/#colorunits) *specifier* string, returning an [RGB](#rgb) or [HSL](#hsl) color, along with [CSS Color Module Level 4 hex](https://www.w3.org/TR/css-color-4/#hex-notation) *specifier* strings. If the specifier was not valid, null is returned. Some examples:

    - `rgb(255, 255, 255)`
    - `rgb(10%, 20%, 30%)`
    - `rgba(255, 255, 255, 0.4)`
    - `rgba(10%, 20%, 30%, 0.4)`
    - `hsl(120, 50%, 20%)`
    - `hsla(120, 50%, 20%, 0.4)`
    - `#ffeeaa`
    - `#fea`
    - `#ffeeaa22`
    - `#fea2`
    - `steelblue`

    The list of supported [named colors](http://www.w3.org/TR/SVG/types.html#ColorKeywords) is specified by CSS.

    Note: this function may also be used with `instanceof` to test if an object is a color instance. The same is true of color subclasses, allowing you to test whether a color is in a particular color space.
- name: d3.contourDensity()
  id: d3-contour#contourdensity
  summary: Constructs a new density estimator with the default settings
  belongs_to: contour
  description: |-
    ###### d3.**contourDensity**() · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    Constructs a new density estimator with the default settings.
- name: d3.contours()
  id: d3-contour#contours
  summary: Constructs a new contour generator with the default settings
  belongs_to: contour
  description: |-
    ###### d3.**contours**() · [Source](https://github.com/d3/d3-contour/blob/main/src/contours.js), [Examples](https://observablehq.com/collection/@d3/d3-contour)

    Constructs a new contour generator with the default settings.
- name: d3.count()
  id: d3-array#count
  summary: Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable; accepts an accessor
  belongs_to: array
  description: |-
    ###### d3.**count**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/count.js), [Examples](https://observablehq.com/@d3/d3-count)

    Returns the number of valid number values (*i.e.*, not null, NaN, or undefined) in the specified *iterable*; accepts an accessor.

    For example:

    ``` javascript
    d3.count([{n: "Alice", age: NaN}, {n: "Bob", age: 18}, {n: "Other"}], d => d.age) // 1
    ```
- name: d3.create()
  id: d3-selection#create
  summary: Given the specified element name, returns a single-element selection containing a detached element of the given name in the current document
  belongs_to: selection
  description: |-
    ###### d3.**create**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/create.js)

    Given the specified element *name*, returns a single-element selection containing a detached element of the given name in the current document. This method assumes the HTML namespace, so you must specify a namespace explicitly when creating SVG or other non-HTML elements; see [namespace](#namespace) for details on supported namespace prefixes.

    ``` javascript
    d3.create("svg") // equivalent to svg:svg
    d3.create("svg:svg") // more explicitly
    d3.create("svg:g") // an SVG G element
    d3.create("g") // an HTML G (unknown) element
    ```
- name: d3.creator()
  id: d3-selection#creator
  summary: Given the specified element name, returns a function which creates an element of the given name, assuming that this is the parent element
  belongs_to: selection
  description: |-
    ###### d3.**creator**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/creator.js)

    Given the specified element *name*, returns a function which creates an element of the given name, assuming that `this` is the parent element. This method is used internally by [*selection*.append](#selection_append) and [*selection*.insert](#selection_insert) to create new elements. For example, this:

    ``` javascript
    selection.append("div");
    ```

    Is equivalent to:

    ``` javascript
    selection.append(d3.creator("div"));
    ```

    See [namespace](#namespace) for details on supported namespace prefixes, such as for SVG elements.

    ### Joining Data

    For an introduction to D3’s data joins, see the [*selection*.join notebook](https://observablehq.com/@d3/selection-join). Also see [Thinking With Joins](http://bost.ocks.org/mike/join/).
- name: d3.cross()
  id: d3-array#cross
  summary: Returns the Cartesian product of the specified iterables
  belongs_to: array
  description: |-
    ###### d3.**cross**(*...iterables*\[, *reducer*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/cross.js), [Examples](https://observablehq.com/@d3/d3-cross)

    Returns the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product) of the specified *iterables*. For example, if two iterables *a* and *b* are specified, for each element *i* in the iterable *a* and each element *j* in the iterable *b*, in order, invokes the specified *reducer* function passing the element *i* and element *j*. If a *reducer* is not specified, it defaults to a function which creates a two-element array for each pair:

    ``` javascript
    function pair(a, b) {
      return [a, b];
    }
    ```

    For example:

    ``` javascript
    d3.cross([1, 2], ["x", "y"]); // returns [[1, "x"], [1, "y"], [2, "x"], [2, "y"]]
    d3.cross([1, 2], ["x", "y"], (a, b) => a + b); // returns ["1x", "1y", "2x", "2y"]
    ```
- name: d3.csv()
  id: d3-request#csv
  summary: Returns a new request for the CSV file at the specified url with the default mime type text/csv
  belongs_to: request
  description: |-
    ###### d3.**csv**(*url*\[\[, *row*\], *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/csv.js "Source")

    Returns a new [*request*](#request) for the [CSV](d3-dsv#csvParse) file at the specified *url* with the default mime type `text/csv`. If no *callback* is specified, this is equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/csv")
        .response(function(xhr) { return d3.csvParse(xhr.responseText, row); });
    ```

    If a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/csv")
        .response(function(xhr) { return d3.csvParse(xhr.responseText, row); })
        .get(callback);
    ```

    An optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:

    ``` javascript
    function row(d) {
      return {
        year: new Date(+d.Year, 0, 1), // convert "Year" column to Date
        make: d.Make,
        model: d.Model,
        length: +d.Length // convert "Length" column to number
      };
    }
    ```

    The returned *request* exposes an additional *request*.row method as an alternative to passing the *row* conversion function to d3.csv, allowing you to configure the request before sending it. For example, this:

    ``` javascript
    d3.csv(url, row, callback);
    ```

    Is equivalent to this:

    ``` javascript
    d3.csv(url)
        .row(row)
        .get(callback);
    ```
- name: d3.csv()
  id: d3-fetch#csv
  summary: Equivalent to d3.dsv with the comma character as the delimiter
  belongs_to: fetch
  description: |-
    ###### d3.**csv**(*input*\[, *init*\]\[, *row*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js "Source")

    Equivalent to [d3.dsv](#dsv) with the comma character as the delimiter.
- name: d3.csvFormat()
  id: d3-dsv#csvformat
  summary: Equivalent to dsvFormat(",").format
  belongs_to: dsv
  description: |-
    ###### d3.**csvFormat**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[format](#dsv_format).
- name: d3.csvFormatBody()
  id: d3-dsv#csvformatbody
  summary: Equivalent to dsvFormat(",").formatBody
  belongs_to: dsv
  description: |-
    ###### d3.**csvFormatBody**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[formatBody](#dsv_formatBody).
- name: d3.csvFormatRow()
  id: d3-dsv#csvformatrow
  summary: Equivalent to dsvFormat(",").formatRow
  belongs_to: dsv
  description: |-
    ###### d3.**csvFormatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[formatRow](#dsv_formatRow).
- name: d3.csvFormatRows()
  id: d3-dsv#csvformatrows
  summary: Equivalent to dsvFormat(",").formatRows
  belongs_to: dsv
  description: |-
    ###### d3.**csvFormatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[formatRows](#dsv_formatRows).
- name: d3.csvFormatValue()
  id: d3-dsv#csvformatvalue
  summary: Equivalent to dsvFormat(",").formatValue
  belongs_to: dsv
  description: |-
    ###### d3.**csvFormatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[formatValue](#dsv_formatValue).
- name: d3.csvParse()
  id: d3-dsv#csvparse
  summary: Equivalent to dsvFormat(",").parse
  belongs_to: dsv
  description: |-
    ###### d3.**csvParse**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[parse](#dsv_parse). Note: requires unsafe-eval [content security policy](#content-security-policy).
- name: d3.csvParseRows()
  id: d3-dsv#csvparserows
  summary: Equivalent to dsvFormat(",").parseRows
  belongs_to: dsv
  description: |-
    ###### d3.**csvParseRows**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)(",").[parseRows](#dsv_parseRows).
- name: d3.cubehelix()
  id: d3-color#cubehelix
  summary: Constructs a new Cubehelix color
  belongs_to: color
  description: "###### d3.**cubehelix**(*h*, *s*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/cubehelix.js \"Source\") d3.**cubehelix**(*specifier*) d3.**cubehelix**(*color*) \n\nConstructs a new [Cubehelix](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [Cubehelix color picker](http://bl.ocks.org/mbostock/ba8d75e45794c27168b5) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the Cubehelix color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to Cubehelix. (Colors already in the Cubehelix color space skip the conversion to RGB.)\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-color](https://github.com/d3/d3-color)"
- name: d3.cumsum()
  id: d3-array#cumsum
  summary: Returns the cumulative sum of the given iterable of numbers, as a Float64Array of the same length
  belongs_to: array
  description: |-
    ###### d3.**cumsum**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/cumsum.js), [Examples](https://observablehq.com/@d3/d3-cumsum)

    Returns the cumulative sum of the given *iterable* of numbers, as a Float64Array of the same length. If the iterable contains no numbers, returns zeros. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the cumulative sum. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.curveBasis()
  id: d3-shape#curvebasis
  summary: Produces a cubic basis spline using the specified control points
  belongs_to: shape
  description: |-
    ###### d3.**curveBasis**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basis.js)

    Produces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. The first and last points are triplicated such that the spline starts at the first point and ends at the last point, and is tangent to the line between the first and second points, and to the line between the penultimate and last points.
- name: d3.curveBasisClosed()
  id: d3-shape#curvebasisclosed
  summary: Produces a closed cubic basis spline using the specified control points
  belongs_to: shape
  description: |-
    ###### d3.**curveBasisClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisClosed.js)

    Produces a closed cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop with C2 continuity.
- name: d3.curveBasisOpen()
  id: d3-shape#curvebasisopen
  summary: Produces a cubic basis spline using the specified control points
  belongs_to: shape
  description: |-
    ###### d3.**curveBasisOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisOpen.js)

    Produces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. Unlike [basis](#basis), the first and last points are not repeated, and thus the curve typically does not intersect these points.
- name: d3.curveBumpX()
  id: d3-shape#curvebumpx
  summary: Produces a Bézier curve between each pair of points, with horizontal tangents at each point
  belongs_to: shape
  description: |-
    ###### d3.**curveBumpX**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)

    Produces a Bézier curve between each pair of points, with horizontal tangents at each point.
- name: d3.curveBumpY()
  id: d3-shape#curvebumpy
  summary: Produces a Bézier curve between each pair of points, with vertical tangents at each point
  belongs_to: shape
  description: |-
    ###### d3.**curveBumpY**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)

    Produces a Bézier curve between each pair of points, with vertical tangents at each point.
- name: d3.curveBundle()
  id: d3-shape#curvebundle
  summary: Produces a straightened cubic basis spline using the specified control points, with the spline straightened according to the curve’s beta, which defaults to 0.85
  belongs_to: shape
  description: |-
    ###### d3.**curveBundle**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)

    Produces a straightened cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points, with the spline straightened according to the curve’s [*beta*](#curveBundle_beta), which defaults to 0.85. This curve is typically used in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling) to disambiguate connections, as proposed by [Danny Holten](https://www.win.tue.nl/vis1/home/dholten/) in [Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data](https://www.win.tue.nl/vis1/home/dholten/papers/bundles_infovis.pdf). This curve does not implement [*curve*.areaStart](#curve_areaStart) and [*curve*.areaEnd](#curve_areaEnd); it is intended to work with [d3.line](#lines), not [d3.area](#areas).
- name: d3.curveCardinal()
  id: d3-shape#curvecardinal
  summary: Produces a cubic cardinal spline using the specified control points, with one-sided differences used for the first and last piece
  belongs_to: shape
  description: |-
    ###### d3.**curveCardinal**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinal.js)

    Produces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points, with one-sided differences used for the first and last piece. The default [tension](#curveCardinal_tension) is 0.
- name: d3.curveCardinalClosed()
  id: d3-shape#curvecardinalclosed
  summary: Produces a closed cubic cardinal spline using the specified control points
  belongs_to: shape
  description: |-
    ###### d3.**curveCardinalClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalClosed.js)

    Produces a closed cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop. The default [tension](#curveCardinal_tension) is 0.
- name: d3.curveCardinalOpen()
  id: d3-shape#curvecardinalopen
  summary: Produces a cubic cardinal spline using the specified control points
  belongs_to: shape
  description: |-
    ###### d3.**curveCardinalOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)

    Produces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. Unlike [curveCardinal](#curveCardinal), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point. The default [tension](#curveCardinal_tension) is 0.
- name: d3.curveCatmullRom()
  id: d3-shape#curvecatmullrom
  summary: Produces a cubic Catmull–Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al
  belongs_to: shape
  description: |-
    ###### d3.**curveCatmullRom**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)

    Produces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. in [On the Parameterization of Catmull–Rom Curves](http://www.cemyuksel.com/research/catmullrom_param/), with one-sided differences used for the first and last piece.
- name: d3.curveCatmullRomClosed()
  id: d3-shape#curvecatmullromclosed
  summary: Produces a closed cubic Catmull–Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al
  belongs_to: shape
  description: |-
    ###### d3.**curveCatmullRomClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomClosed.js)

    Produces a closed cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends, the first three control points are repeated, producing a closed loop.
- name: d3.curveCatmullRomOpen()
  id: d3-shape#curvecatmullromopen
  summary: Produces a cubic Catmull–Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al
  belongs_to: shape
  description: |-
    ###### d3.**curveCatmullRomOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomOpen.js)

    Produces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. Unlike [curveCatmullRom](#curveCatmullRom), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point.
- name: d3.curveLinear()
  id: d3-shape#curvelinear
  summary: Produces a polyline through the specified points
  belongs_to: shape
  description: |-
    ###### d3.**curveLinear**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linear.js)

    Produces a polyline through the specified points.
- name: d3.curveLinearClosed()
  id: d3-shape#curvelinearclosed
  summary: Produces a closed polyline through the specified points by repeating the first point when the line segment ends
  belongs_to: shape
  description: |-
    ###### d3.**curveLinearClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linearClosed.js)

    Produces a closed polyline through the specified points by repeating the first point when the line segment ends.
- name: d3.curveMonotoneX()
  id: d3-shape#curvemonotonex
  summary: 'Produces a cubic spline that preserves monotonicity in y, assuming monotonicity in x, as proposed by Steffen in A simple method for monotonic interpolation in one dimension: “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations'
  belongs_to: shape
  description: |-
    ###### d3.**curveMonotoneX**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)

    Produces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *y*, assuming monotonicity in *x*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”
- name: d3.curveMonotoneY()
  id: d3-shape#curvemonotoney
  summary: 'Produces a cubic spline that preserves monotonicity in x, assuming monotonicity in y, as proposed by Steffen in A simple method for monotonic interpolation in one dimension: “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations'
  belongs_to: shape
  description: |-
    ###### d3.**curveMonotoneY**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)

    Produces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *x*, assuming monotonicity in *y*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”
- name: d3.curveNatural()
  id: d3-shape#curvenatural
  summary: Produces a natural cubic spline with the second derivative of the spline set to zero at the endpoints
  belongs_to: shape
  description: |-
    ###### d3.**curveNatural**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/natural.js)

    Produces a [natural](https://en.wikipedia.org/wiki/Spline_interpolation) [cubic spline](http://mathworld.wolfram.com/CubicSpline.html) with the second derivative of the spline set to zero at the endpoints.
- name: d3.curveStep()
  id: d3-shape#curvestep
  summary: Produces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines
  belongs_to: shape
  description: |-
    ###### d3.**curveStep**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes at the midpoint of each pair of adjacent *x*-values.
- name: d3.curveStepAfter()
  id: d3-shape#curvestepafter
  summary: Produces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines
  belongs_to: shape
  description: |-
    ###### d3.**curveStepAfter**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes after the *x*-value.
- name: d3.curveStepBefore()
  id: d3-shape#curvestepbefore
  summary: Produces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines
  belongs_to: shape
  description: |-
    ###### d3.**curveStepBefore**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

    Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes before the *x*-value.

    ### Custom Curves

    Curves are typically not used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). However, you can define your own curve implementation should none of the built-in curves satisfy your needs using the following interface. You can also use this low-level interface with a built-in curve type as an alternative to the line and area generators.
- name: d3.descending()
  id: d3-array#descending
  summary: Returns -1 if a is greater than b, or 1 if a is less than b, or 0
  belongs_to: array
  description: |-
    ###### d3.**descending**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/descending.js), [Examples](https://observablehq.com/@d3/d3-ascending)

    Returns -1 if *a* is greater than *b*, or 1 if *a* is less than *b*, or 0. This is the comparator function for reverse natural order, and can be used in conjunction with the built-in array sort method to arrange elements in descending order. It is implemented as:

    ``` javascript
    function descending(a, b) {
      return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }
    ```

    Note that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.

    ### Transformations

    Methods for transforming arrays and for generating new arrays.
- name: d3.deviation()
  id: d3-array#deviation
  summary: Returns the standard deviation, defined as the square root of the bias-corrected variance, of the given iterable of numbers
  belongs_to: array
  description: |-
    ###### d3.**deviation**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/deviation.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Returns the standard deviation, defined as the square root of the [bias-corrected variance](#variance), of the given *iterable* of numbers. If the iterable has fewer than two numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the standard deviation. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.difference()
  id: d3-array#difference
  summary: Returns a new InternSet containing every value in iterable that is not in any of the others iterables
  belongs_to: array
  description: |-
    ###### d3.**difference**(*iterable*, ...*others*) · [Source](https://github.com/d3/d3-array/blob/main/src/difference.js)

    Returns a new InternSet containing every value in *iterable* that is not in any of the *others* iterables.

    ``` javascript
    d3.difference([0, 1, 2, 0], [1]) // Set {0, 2}
    ```
- name: d3.disjoint()
  id: d3-array#disjoint
  summary: 'Returns true if a and b are disjoint: if a and b contain no shared value'
  belongs_to: array
  description: |-
    ###### d3.**disjoint**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/disjoint.js)

    Returns true if *a* and *b* are disjoint: if *a* and *b* contain no shared value.

    ``` javascript
    d3.disjoint([1, 3], [2, 4]) // true
    ```

    ### Bins

    Binning groups discrete samples into a smaller number of consecutive, non-overlapping intervals. They are often used to visualize the distribution of numerical data as histograms.
- name: d3.dispatch()
  id: d3-dispatch#dispatch
  summary: Creates a new dispatch for the specified event types
  belongs_to: dispatch
  description: |-
    ###### d3.**dispatch**(*types…*) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)

    Creates a new dispatch for the specified event *types*. Each *type* is a string, such as `"start"` or `"end"`.
- name: d3.drag()
  id: d3-drag#drag
  summary: Creates a new drag behavior
  belongs_to: drag
  description: |-
    ###### d3.**drag**() · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)

    Creates a new drag behavior. The returned behavior, [*drag*](#_drag), is both an object and a function, and is typically applied to selected elements via [*selection*.call](d3-selection#selection_call).
- name: d3.dragDisable()
  id: d3-drag#dragdisable
  summary: Prevents native drag-and-drop and text selection on the specified window
  belongs_to: drag
  description: |-
    ###### d3.**dragDisable**(*window*) · [Source](https://github.com/d3/d3-drag/blob/master/src/nodrag.js)

    Prevents native drag-and-drop and text selection on the specified *window*. As an alternative to preventing the default action of mousedown events (see [\#9](https://github.com/d3/d3-drag/issues/9)), this method prevents undesirable default actions following mousedown. In supported browsers, this means capturing dragstart and selectstart events, preventing the associated default actions, and immediately stopping their propagation. In browsers that do not support selection events, the user-select CSS property is set to none on the document element. This method is intended to be called on mousedown, followed by [d3.dragEnable](#dragEnable) on mouseup.
- name: d3.dragEnable()
  id: d3-drag#dragenable
  summary: Allows native drag-and-drop and text selection on the specified window; undoes the effect of d3.dragDisable
  belongs_to: drag
  description: |-
    ###### d3.**dragEnable**(*window*\[, *noclick*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/nodrag.js)

    Allows native drag-and-drop and text selection on the specified *window*; undoes the effect of [d3.dragDisable](#dragDisable). This method is intended to be called on mouseup, preceded by [d3.dragDisable](#dragDisable) on mousedown. If *noclick* is true, this method also temporarily suppresses click events. The suppression of click events expires after a zero-millisecond timeout, such that it only suppress the click event that would immediately follow the current mouseup event, if any.

    ### Drag Events

    When a [drag event listener](#drag_on) is invoked, it receives the current drag event as its first argument. The *event* object exposes several fields:

    - `target` - the associated [drag behavior](#drag).
    - `type` - the string “start”, “drag” or “end”; see [*drag*.on](#drag_on).
    - `subject` - the drag subject, defined by [*drag*.subject](#drag_subject).
    - `x` - the new *x*-coordinate of the subject; see [*drag*.container](#drag_container).
    - `y` - the new *y*-coordinate of the subject; see [*drag*.container](#drag_container).
    - `dx` - the change in *x*-coordinate since the previous drag event.
    - `dy` - the change in *y*-coordinate since the previous drag event.
    - `identifier` - the string “mouse”, or a numeric [touch identifier](https://www.w3.org/TR/touch-events/#widl-Touch-identifier).
    - `active` - the number of currently active drag gestures (on start and end, not including this one).
    - `sourceEvent` - the underlying input event, such as mousemove or touchmove.

    The *event*.active field is useful for detecting the first start event and the last end event in a sequence of concurrent drag gestures: it is zero when the first drag gesture starts, and zero when the last drag gesture ends.

    The *event* object also exposes the [*event*.on](#event_on) method.
- name: d3.dsv()
  id: d3-fetch#dsv
  summary: Fetches the DSV file at the specified input URL
  belongs_to: fetch
  description: |-
    ###### d3.**dsv**(*delimiter*, *input*\[, *init*\]\[, *row*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js "Source")

    Fetches the [DSV](d3-dsv) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields. An optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:

    ``` javascript
    const data = await d3.dsv(",", "test.csv", (d) => {
      return {
        year: new Date(+d.Year, 0, 1), // convert "Year" column to Date
        make: d.Make,
        model: d.Model,
        length: +d.Length // convert "Length" column to number
      };
    });
    ```

    If only one of *init* and *row* is specified, it is interpreted as the *row* conversion function if it is a function, and otherwise an *init* object.

    See also [d3.csv](#csv) and [d3.tsv](#tsv).
- name: d3.dsvFormat()
  id: d3-dsv#dsvformat
  summary: Constructs a new DSV parser and formatter for the specified delimiter
  belongs_to: dsv
  description: |-
    ###### d3.**dsvFormat**(*delimiter*) [\<\>](https://github.com/d3/d3-dsv/blob/master/src/dsv.js)

    Constructs a new DSV parser and formatter for the specified *delimiter*. The *delimiter* must be a single character (*i.e.*, a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.
- name: d3.easeBackIn()
  id: d3-ease#easebackin
  summary: Anticipatory easing, like a dancer bending his knees before jumping off the floor
  belongs_to: ease
  description: |-
    ###### d3.**easeBackIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L3 "Source")

    [Anticipatory](https://en.wikipedia.org/wiki/12_basic_principles_of_animation#Anticipation) easing, like a dancer bending his knees before jumping off the floor. The degree of [overshoot](#back_overshoot) is configurable; if not specified, it defaults to 1.70158.
- name: d3.easeBackOut()
  id: d3-ease#easebackout
  summary: Reverse anticipatory easing; equivalent to 1 - backIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeBackOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L15 "Source")

    Reverse anticipatory easing; equivalent to 1 - [backIn](#easeBackIn)(1 - *t*).
- name: d3.easeBounceIn()
  id: d3-ease#easebouncein
  summary: Bounce easing, like a rubber ball
  belongs_to: ease
  description: |-
    ###### d3.**easeBounceIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js#L12 "Source")

    Bounce easing, like a rubber ball.
- name: d3.easeBounceInOut()
  id: d3-ease#easebounceinout
  summary: Symmetric bounce easing; scales bounceIn for t in [0, 0.5] and bounceOut for t in [0.5, 1]
  belongs_to: ease
  description: "###### d3.**easeBounceInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js#L20 \"Source\")\n\nSymmetric bounce easing; scales [bounceIn](#easeBounceIn) for *t* in \\[0, 0.5\\] and [bounceOut](#easeBounceOut) for *t* in \\[0.5, 1\\].\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-ease](https://github.com/d3/d3-ease)"
- name: d3.easeCircleIn()
  id: d3-ease#easecirclein
  summary: Circular easing
  belongs_to: ease
  description: |-
    ###### d3.**easeCircleIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js#L1 "Source")

    Circular easing.
- name: d3.easeCircleOut()
  id: d3-ease#easecircleout
  summary: Reverse circular easing; equivalent to 1 - circleIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeCircleOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js#L5 "Source")

    Reverse circular easing; equivalent to 1 - [circleIn](#easeCircleIn)(1 - *t*).
- name: d3.easeCubicIn()
  id: d3-ease#easecubicin
  summary: Cubic easing; equivalent to polyIn.exponent(3)
  belongs_to: ease
  description: |-
    ###### d3.**easeCubicIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js#L1 "Source")

    Cubic easing; equivalent to [polyIn](#easePolyIn).[exponent](#poly_exponent)(3).
- name: d3.easeCubicOut()
  id: d3-ease#easecubicout
  summary: Reverse cubic easing; equivalent to 1 - cubicIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeCubicOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js#L5 "Source")

    Reverse cubic easing; equivalent to 1 - [cubicIn](#easeCubicIn)(1 - *t*). Also equivalent to [polyOut](#easePolyOut).[exponent](#poly_exponent)(3).
- name: d3.easeElasticIn()
  id: d3-ease#easeelasticin
  summary: Elastic easing, like a rubber band
  belongs_to: ease
  description: |-
    ###### d3.**easeElasticIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L5 "Source")

    Elastic easing, like a rubber band. The [amplitude](#elastic_amplitude) and [period](#elastic_period) of the oscillation are configurable; if not specified, they default to 1 and 0.3, respectively.
- name: d3.easeElasticInOut()
  id: d3-ease#easeelasticinout
  summary: Symmetric elastic easing; scales elasticIn for t in [0, 0.5] and elasticOut for t in [0.5, 1]
  belongs_to: ease
  description: |-
    ###### d3.**easeElasticInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L31 "Source")

    Symmetric elastic easing; scales [elasticIn](#easeElasticIn) for *t* in \[0, 0.5\] and [elasticOut](#easeElasticOut) for *t* in \[0.5, 1\].
- name: d3.easeExpIn()
  id: d3-ease#easeexpin
  summary: Exponential easing; raises 2 to the exponent 10 * (t - 1)
  belongs_to: ease
  description: |-
    ###### d3.**easeExpIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js#L1 "Source")

    Exponential easing; raises 2 to the exponent 10 \* (*t* - 1).
- name: d3.easeExpOut()
  id: d3-ease#easeexpout
  summary: Reverse exponential easing; equivalent to 1 - expIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeExpOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js#L5 "Source")

    Reverse exponential easing; equivalent to 1 - [expIn](#easeExpIn)(1 - *t*).
- name: d3.easeLinear()
  id: d3-ease#easelinear
  summary: Linear easing; the identity function; linear(t) returns t
  belongs_to: ease
  description: |-
    ###### d3.**easeLinear**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/linear.js "Source")

    Linear easing; the identity function; *linear*(*t*) returns *t*.
- name: d3.easePolyIn()
  id: d3-ease#easepolyin
  summary: Polynomial easing; raises t to the specified exponent
  belongs_to: ease
  description: |-
    ###### d3.**easePolyIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L3 "Source")

    Polynomial easing; raises *t* to the specified [exponent](#poly_exponent). If the exponent is not specified, it defaults to 3, equivalent to [cubicIn](#easeCubicIn).
- name: d3.easePolyOut()
  id: d3-ease#easepolyout
  summary: Reverse polynomial easing; equivalent to 1 - polyIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easePolyOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L15 "Source")

    Reverse polynomial easing; equivalent to 1 - [polyIn](#easePolyIn)(1 - *t*). If the [exponent](#poly_exponent) is not specified, it defaults to 3, equivalent to [cubicOut](#easeCubicOut).
- name: d3.easeQuadIn()
  id: d3-ease#easequadin
  summary: Quadratic easing; equivalent to polyIn.exponent(2)
  belongs_to: ease
  description: |-
    ###### d3.**easeQuadIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js#L1 "Source")

    Quadratic easing; equivalent to [polyIn](#easePolyIn).[exponent](#poly_exponent)(2).
- name: d3.easeQuadOut()
  id: d3-ease#easequadout
  summary: Reverse quadratic easing; equivalent to 1 - quadIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeQuadOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js#L5 "Source")

    Reverse quadratic easing; equivalent to 1 - [quadIn](#easeQuadIn)(1 - *t*). Also equivalent to [polyOut](#easePolyOut).[exponent](#poly_exponent)(2).
- name: d3.easeSinIn()
  id: d3-ease#easesinin
  summary: Sinusoidal easing; returns sin(t)
  belongs_to: ease
  description: |-
    ###### d3.**easeSinIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js#L4 "Source")

    Sinusoidal easing; returns sin(*t*).
- name: d3.easeSinOut()
  id: d3-ease#easesinout
  summary: Reverse sinusoidal easing; equivalent to 1 - sinIn(1 - t)
  belongs_to: ease
  description: |-
    ###### d3.**easeSinOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js#L8 "Source")

    Reverse sinusoidal easing; equivalent to 1 - [sinIn](#easeSinIn)(1 - *t*).
- name: d3.entries()
  id: d3-collection#entries
  summary: Returns an array containing the property keys and values of the specified object (an associative array)
  belongs_to: collection
  description: |-
    ###### d3.**entries**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/entries.js "Source")

    Returns an array containing the property keys and values of the specified object (an associative array). Each entry is an object with a key and value attribute, such as `{key: "foo", value: 42}`. The order of the returned array is undefined.

    ``` javascript
    d3.entries({foo: 42, bar: true}); // [{key: "foo", value: 42}, {key: "bar", value: true}]
    ```

    ### Maps

    Like [ES6 Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), but with a few differences:

    - Keys are coerced to strings.
    - [map.each](#map_each), not [map.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach). (Also, no *thisArg*.)
    - [map.remove](#map_remove), not [map.delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).
    - [map.entries](#map_entries) returns an array of {key, value} objects, not an iterator of \[key, value\].
    - [map.size](#map_size) is a method, not a [property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size); also, there’s [map.empty](#map_empty).
- name: d3.every()
  id: d3-array#every
  summary: Returns true if the given test function returns true for every value in the given iterable
  belongs_to: array
  description: |-
    ###### d3.**every**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/every.js)

    Returns true if the given *test* function returns true for every value in the given *iterable*. This method returns as soon as *test* returns a non-truthy value or all values are iterated over. Equivalent to [*array*.every](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every):

    ``` javascript
    d3.every(new Set([1, 3, 5, 7]), x => x & 1) // true
    ```
- name: d3.extent()
  id: d3-array#extent
  summary: Returns the minimum and maximum value in the given iterable using natural order
  belongs_to: array
  description: |-
    ###### d3.**extent**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/extent.js), [Examples](https://observablehq.com/@d3/d3-extent)

    Returns the [minimum](#min) and [maximum](#max) value in the given *iterable* using natural order. If the iterable contains no comparable values, returns \[undefined, undefined\]. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the extent.
- name: d3.fcumsum()
  id: d3-array#fcumsum
  summary: Returns a full precision cumulative sum of the given values
  belongs_to: array
  description: |-
    ###### d3.**fcumsum**(\[*values*\]\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/fsum.js), [Examples](https://observablehq.com/@d3/d3-fcumsum)

    Returns a full precision cumulative sum of the given *values*.

    ``` javascript
    d3.fcumsum([1, 1e-14, -1]); // [1, 1.00000000000001, 1e-14]
    d3.cumsum([1, 1e-14, -1]); // [1, 1.00000000000001, 9.992e-15]
    ```

    Although slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses [d3.Adder](#adder).
- name: d3.filter()
  id: d3-array#filter
  summary: Returns a new array containing the values from iterable, in order, for which the given test function returns true
  belongs_to: array
  description: |-
    ###### d3.**filter**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/filter.js)

    Returns a new array containing the values from *iterable*, in order, for which the given *test* function returns true. Equivalent to [*array*.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter):

    ``` javascript
    d3.filter(new Set([0, 2, 3, 4]), x => x & 1) // [3]
    ```
- name: d3.flatGroup()
  id: d3-array#flatgroup
  summary: Equivalent to group, but returns a flat array of [key0, key1, …, values] instead of nested maps
  belongs_to: array
  description: |-
    ###### d3.**flatGroup**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-flatgroup)

    Equivalent to [group](#group), but returns a flat array of \[*key0*, *key1*, …, *values*\] instead of nested maps.
- name: d3.flatRollup()
  id: d3-array#flatrollup
  summary: Equivalent to rollup, but returns a flat array of [key0, key1, …, value] instead of nested maps
  belongs_to: array
  description: |-
    ###### d3.**flatRollup**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-flatgroup)

    Equivalent to [rollup](#rollup), but returns a flat array of \[*key0*, *key1*, …, *value*\] instead of nested maps.
- name: d3.forceCenter()
  id: d3-force#forcecenter
  summary: Creates a new centering force with the specified x- and y- coordinates
  belongs_to: force
  description: |-
    ###### d3.**forceCenter**(\[*x*, *y*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)

    Creates a new centering force with the specified [*x*-](#center_x) and [*y*-](#center_y) coordinates. If *x* and *y* are not specified, they default to ⟨0,0⟩.
- name: d3.forceCollide()
  id: d3-force#forcecollide
  summary: Creates a new circle collision force with the specified radius
  belongs_to: force
  description: |-
    ###### d3.**forceCollide**(\[*radius*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)

    Creates a new circle collision force with the specified [*radius*](#collide_radius). If *radius* is not specified, it defaults to the constant one for all nodes.
- name: d3.forceLink()
  id: d3-force#forcelink
  summary: Creates a new link force with the specified links and default parameters
  belongs_to: force
  description: |-
    ###### d3.**forceLink**(\[*links*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    Creates a new link force with the specified *links* and default parameters. If *links* is not specified, it defaults to the empty array.
- name: d3.forceManyBody()
  id: d3-force#forcemanybody
  summary: Creates a new many-body force with the default parameters
  belongs_to: force
  description: |-
    ###### d3.**forceManyBody**() · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)

    Creates a new many-body force with the default parameters.
- name: d3.forceRadial()
  id: d3-force#forceradial
  summary: null
  belongs_to: force
  description: |-
    ###### d3.**forceRadial**(*radius*\[, *x*\]\[, *y*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)

    Creates a new positioning force towards a circle of the specified [*radius*](#radial_radius) centered at ⟨[*x*](#radial_x),[*y*](#radial_y)⟩. If *x* and *y* are not specified, they default to ⟨0,0⟩.
- name: d3.forceSimulation()
  id: d3-force#forcesimulation
  summary: Creates a new simulation with the specified array of nodes and no forces
  belongs_to: force
  description: |-
    ###### d3.**forceSimulation**(\[*nodes*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Creates a new simulation with the specified array of [*nodes*](#simulation_nodes) and no [forces](#simulation_force). If *nodes* is not specified, it defaults to the empty array. The simulator [starts](#simulation_restart) automatically; use [*simulation*.on](#simulation_on) to listen for tick events as the simulation runs. If you wish to run the simulation manually instead, call [*simulation*.stop](#simulation_stop), and then call [*simulation*.tick](#simulation_tick) as desired.
- name: d3.forceX()
  id: d3-force#forcex
  summary: Creates a new positioning force along the x-axis towards the given position x
  belongs_to: force
  description: |-
    ###### d3.**forceX**(\[*x*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)

    Creates a new positioning force along the *x*-axis towards the given position [*x*](#x_x). If *x* is not specified, it defaults to 0.
- name: d3.forceY()
  id: d3-force#forcey
  summary: Creates a new positioning force along the y-axis towards the given position y
  belongs_to: force
  description: |-
    ###### d3.**forceY**(\[*y*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)

    Creates a new positioning force along the *y*-axis towards the given position [*y*](#y_y). If *y* is not specified, it defaults to 0.
- name: d3.format()
  id: d3-format#format
  summary: An alias for locale.format on the default locale
  belongs_to: format
  description: |-
    ###### d3.**format**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L4 "Source")

    An alias for [*locale*.format](#locale_format) on the [default locale](#formatDefaultLocale).
- name: d3.formatDefaultLocale()
  id: d3-format#formatdefaultlocale
  summary: Equivalent to d3.formatLocale, except it also redefines d3.format and d3.formatPrefix to the new locale’s locale.format and locale.formatPrefix
  belongs_to: format
  description: "###### d3.**formatDefaultLocale**(*definition*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js \"Source\")\n\nEquivalent to [d3.formatLocale](#formatLocale), except it also redefines [d3.format](#format) and [d3.formatPrefix](#formatPrefix) to the new locale’s [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-format/blob/main/locale/en-US.json).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-format](https://github.com/d3/d3-format)"
- name: d3.formatLocale()
  id: d3-format#formatlocale
  summary: Returns a locale object for the specified definition with locale.format and locale.formatPrefix methods
  belongs_to: format
  description: |-
    ###### d3.**formatLocale**(*definition*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js "Source")

    Returns a *locale* object for the specified *definition* with [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix) methods. The *definition* must include the following properties:

    - `decimal` - the decimal point (e.g., `"."`).
    - `thousands` - the group separator (e.g., `","`).
    - `grouping` - the array of group sizes (e.g., `[3]`), cycled as needed.
    - `currency` - the currency prefix and suffix (e.g., `["$", ""]`).
    - `numerals` - optional; an array of ten strings to replace the numerals 0-9.
    - `percent` - optional; the percent sign (defaults to `"%"`).
    - `minus` - optional; the minus sign (defaults to `"−"`).
    - `nan` - optional; the not-a-number value (defaults `"NaN"`).

    Note that the *thousands* property is a misnomer, as the grouping definition allows groups other than thousands.
- name: d3.formatPrefix()
  id: d3-format#formatprefix
  summary: An alias for locale.formatPrefix on the default locale
  belongs_to: format
  description: |-
    ###### d3.**formatPrefix**(*specifier*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L5 "Source")

    An alias for [*locale*.formatPrefix](#locale_formatPrefix) on the [default locale](#formatDefaultLocale).
- name: d3.fsum()
  id: d3-array#fsum
  summary: Returns a full precision summation of the given values
  belongs_to: array
  description: |-
    ###### d3.**fsum**(\[*values*\]\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/fsum.js), [Examples](https://observablehq.com/@d3/d3-fsum)

    Returns a full precision summation of the given *values*.

    ``` javascript
    d3.fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]); // 1
    d3.sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]); // 0.9999999999999999
    ```

    Although slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses [d3.Adder](#adder).
- name: d3.geoAirocean()
  id: d3-geo-polygon#geoairocean
  summary: Buckminster Fuller’s Airocean projection (also known as “Dymaxion”), based on a very specific arrangement of the icosahedron which allows continuous continent shapes
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoAirocean**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/airocean.js), [Examples](https://observablehq.com/@fil/airocean-projection)

    Buckminster Fuller’s Airocean projection (also known as “Dymaxion”), based on a very specific arrangement of the icosahedron which allows continuous continent shapes. Fuller’s triangle transformation, as formulated by Robert W. Gray (and implemented by Philippe Rivière), makes the projection almost equal-area.
- name: d3.geoAiry()
  id: d3-geo-projection#geoairy
  summary: Airy’s minimum-error azimuthal projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoAiry**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/airy.js), [Examples](https://observablehq.com/@d3/airys-minimum-error) d3.**geoAiryRaw**(*beta*)

    Airy’s minimum-error azimuthal projection.
- name: d3.geoAlbers()
  id: d3-geo#geoalbers
  summary: The Albers’ equal area-conic projection
  belongs_to: geo
  description: |-
    ###### d3.**geoAlbers**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albers.js "Source")

    The Albers’ equal area-conic projection. This is a U.S.-centric configuration of [d3.geoConicEqualArea](#geoConicEqualArea).
- name: d3.geoAlbers()
  id: d3-geo-projection#geoalbers
  summary: Albers’ equal-area conic projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoAlbers**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albers.js) [\[d3-geo\]](https://github.com/d3/d3-geo/blob/main/README.md#geoAlbers)

    Albers’ [equal-area conic projection](#geoConicEqualArea).
- name: d3.geoAlbersUsa()
  id: d3-geo#geoalbersusa
  summary: 'This is a U.S.-centric composite projection of three d3.geoConicEqualArea projections: d3.geoAlbers is used for the lower forty-eight states, and separate conic equal-area projections are used for Alaska and Hawaii'
  belongs_to: geo
  description: |-
    ###### d3.**geoAlbersUsa**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albersUsa.js "Source")

    This is a U.S.-centric composite projection of three [d3.geoConicEqualArea](#geoConicEqualArea) projections: [d3.geoAlbers](#geoAlbers) is used for the lower forty-eight states, and separate conic equal-area projections are used for Alaska and Hawaii. Note that the scale for Alaska is diminished: it is projected at 0.35× its true relative area. This diagram by Philippe Rivière illustrates how this projection uses two rectangular insets for Alaska and Hawaii:

    See [Albers USA with Territories](https://www.npmjs.com/package/geo-albers-usa-territories) for an extension to all US territories, and [d3-composite-projections](http://geoexamples.com/d3-composite-projections/) for more examples.

    #### Conic Projections

    Conic projections project the sphere onto a cone, and then unroll the cone onto the plane. Conic projections have [two standard parallels](#conic_parallels).
- name: d3.geoArea()
  id: d3-geo#geoarea
  summary: Returns the spherical area of the specified GeoJSON object in steradians
  belongs_to: geo
  description: |-
    ###### d3.**geoArea**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/area.js "Source")

    Returns the spherical area of the specified GeoJSON *object* in [steradians](https://en.wikipedia.org/wiki/Steradian). This is the spherical equivalent of [*path*.area](#path_area).
- name: d3.geoArmadillo()
  id: d3-geo-projection#geoarmadillo
  summary: The armadillo projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoArmadillo**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/armadillo.js), [Examples](https://observablehq.com/@d3/armadillo) d3.**geoArmadilloRaw**(*phi0*)

    The armadillo projection. The default center assumes the default [parallel](#armadillo_parallel) of 20° and should be changed if a different parallel is used. Note: requires clipping to the sphere.
- name: d3.geoBerghaus()
  id: d3-geo-projection#geoberghaus
  summary: Berghaus’ star projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoBerghaus**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/berghaus.js), [Examples](https://observablehq.com/@d3/berghaus-star) d3.**geoBerghausRaw**(*lobes*)

    Berghaus’ star projection. The default center assumes the default [lobe number](#berghaus_lobes) of 5 and should be changed if a different number of lobes is used. Note: requires clipping to the sphere.
- name: d3.geoBonne()
  id: d3-geo-projection#geobonne
  summary: The Bonne pseudoconical equal-area projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoBonne**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bonne.js), [Examples](https://observablehq.com/@d3/bonne) d3.**geoBonneRaw**(*phi0*)

    The Bonne pseudoconical equal-area projection. The [Werner projection](https://observablehq.com/@d3/werner) is a limiting form of the Bonne projection with a standard parallel at ±90°. The default center assumes the default [parallel](#bonne_parallel) of 45° and should be changed if a different parallel is used.
- name: d3.geoBottomley()
  id: d3-geo-projection#geobottomley
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoBottomley**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bottomley.js), [Examples](https://observablehq.com/@d3/bottomley) d3.**geoBottomleyRaw**(*sinPsi*)

    The [Bottomley projection](https://cybergeo.revues.org/3977) “draws lines of latitude as concentric circular arcs, with arc lengths equal to their lengths on the globe, and placed symmetrically and equally spaced across the vertical central meridian.”
- name: d3.geoBounds()
  id: d3-geo#geobounds
  summary: Returns the spherical bounding box for the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### d3.**geoBounds**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/bounds.js "Source")

    Returns the [spherical bounding box](https://www.jasondavies.com/maps/bounds/) for the specified GeoJSON *object*. The bounding box is represented by a two-dimensional array: \[\[*left*, *bottom*\], \[*right*, *top*\]\], where *left* is the minimum longitude, *bottom* is the minimum latitude, *right* is maximum longitude, and *top* is the maximum latitude. All coordinates are given in degrees. (Note that in projected planar coordinates, the minimum latitude is typically the maximum *y*-value, and the maximum latitude is typically the minimum *y*-value.) This is the spherical equivalent of [*path*.bounds](#path_bounds).
- name: d3.geoCentroid()
  id: d3-geo#geocentroid
  summary: Returns the spherical centroid of the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### d3.**geoCentroid**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/centroid.js "Source")

    Returns the spherical centroid of the specified GeoJSON *object*. This is the spherical equivalent of [*path*.centroid](#path_centroid).
- name: d3.geoChamberlinAfrica()
  id: d3-geo-projection#geochamberlinafrica
  summary: The Chamberlin projection for Africa using points [0°, 22°], [45°, 22°], [22.5°, -22°]
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoChamberlinAfrica**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/chamberlin.js)

    The Chamberlin projection for Africa using points \[0°, 22°\], \[45°, 22°\], \[22.5°, -22°\].
- name: d3.geoCircle()
  id: d3-geo#geocircle
  summary: Returns a new circle generator
  belongs_to: geo
  description: |-
    ###### d3.**geoCircle**() [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js "Source")

    Returns a new circle generator.
- name: d3.geoClipAntimeridian
  id: d3-geo#geoclipantimeridian
  summary: A clipping function which transforms a stream such that geometries (lines or polygons) that cross the antimeridian line are cut in two, one on each side
  belongs_to: geo
  description: |-
    ###### d3.**geoClipAntimeridian**

    A clipping function which transforms a stream such that geometries (lines or polygons) that cross the antimeridian line are cut in two, one on each side. Typically used for pre-clipping.
- name: d3.geoClipCircle()
  id: d3-geo#geoclipcircle
  summary: Generates a clipping function which transforms a stream such that geometries are bounded by a small circle of radius angle around the projection’s center
  belongs_to: geo
  description: |-
    ###### d3.**geoClipCircle**(*angle*)

    Generates a clipping function which transforms a stream such that geometries are bounded by a small circle of radius *angle* around the projection’s [center](#projection_center). Typically used for pre-clipping.
- name: d3.geoClipPolygon()
  id: d3-geo-polygon#geoclippolygon
  summary: Given a GeoJSON polygon or multipolygon, returns a clip function suitable for projection.preclip
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoClipPolygon**(*polygon*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/clip/polygon.js), [Examples](https://observablehq.com/@mbostock/spherical-clipping)

    Given a GeoJSON *polygon* or *multipolygon*, returns a clip function suitable for [*projection*.preclip](d3-geo#preclip).
- name: d3.geoClipRectangle()
  id: d3-geo#geocliprectangle
  summary: Generates a clipping function which transforms a stream such that geometries are bounded by a rectangle of coordinates [[x0, y0], [x1, y1]]
  belongs_to: geo
  description: "###### d3.**geoClipRectangle**(*x0*, *y0*, *x1*, *y1*)\n\nGenerates a clipping function which transforms a stream such that geometries are bounded by a rectangle of coordinates \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\]. Typically used for post-clipping.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo](https://github.com/d3/d3-geo)"
- name: d3.geoComplexLog()
  id: d3-geo-polygon#geocomplexlog
  summary: Complex logarithmic view
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoComplexLog**(\[*planarProjectionRaw*\[*, cutoffLatitude*\]\]) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/complexLog.js), [Example](https://cgmi.github.io/complex-log-projection/) d3.**geoComplexLogRaw**(\[*planarProjectionRaw*\])

    Complex logarithmic view. This projection is based on the papers by Joachim Böttger et al.:

    - [Detail‐In‐Context Visualization for Satellite Imagery (2008)](https://doi.org/10.1111/j.1467-8659.2008.01156.x)
    - [Complex Logarithmic Views for Small Details in Large Contexts (2006)](https://doi.org/10.1109/TVCG.2006.126)

    The specified raw projection *planarProjectionRaw* is used to project onto the complex plane on which the complex logarithm is applied. Recommended are [azimuthal equal-area](d3-geo#geoAzimuthalEqualAreaRaw) (default) or [azimuthal equidistant](d3-geo#geoAzimuthalEquidistantRaw).

    *cutoffLatitude* is the latitude relative to the projection center at which to cutoff/clip the projection, lower values result in more detail around the projection center. Value must be \< 0 because complex log projects the origin to infinity.
- name: d3.geoConicConformal()
  id: d3-geo#geoconicconformal
  summary: The conic conformal projection
  belongs_to: geo
  description: |-
    ###### d3.**geoConicConformal**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicConformal.js "Source") d3.**geoConicConformalRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicConformal.js "Source")

    The conic conformal projection. The parallels default to \[30°, 30°\] resulting in flat top. See also [*conic*.parallels](#conic_parallels).
- name: d3.geoConicEqualArea()
  id: d3-geo#geoconicequalarea
  summary: The Albers’ equal-area conic projection
  belongs_to: geo
  description: |-
    ###### d3.**geoConicEqualArea**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEqualArea.js "Source") d3.**geoConicEqualAreaRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEqualArea.js "Source")

    The Albers’ equal-area conic projection. See also [*conic*.parallels](#conic_parallels).
- name: d3.geoConicEquidistant()
  id: d3-geo#geoconicequidistant
  summary: The conic equidistant projection
  belongs_to: geo
  description: |-
    ###### d3.**geoConicEquidistant**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEquidistant.js "Source") d3.**geoConicEquidistantRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEquidistant.js "Source")

    The conic equidistant projection. See also [*conic*.parallels](#conic_parallels).

    #### Cylindrical Projections

    Cylindrical projections project the sphere onto a containing cylinder, and then unroll the cylinder onto the plane. [Pseudocylindrical projections](https://web.archive.org/web/20150928042327/http://www.progonos.com/furuti/MapProj/Normal/ProjPCyl/projPCyl.html) are a generalization of cylindrical projections.
- name: d3.geoContains()
  id: d3-geo#geocontains
  summary: Returns true if and only if the specified GeoJSON object contains the specified point, or false if the object does not contain the point
  belongs_to: geo
  description: |-
    ###### d3.**geoContains**(*object*, *point*) [Source](https://github.com/d3/d3-geo/blob/main/src/contains.js "Source")

    Returns true if and only if the specified GeoJSON *object* contains the specified *point*, or false if the *object* does not contain the *point*. The point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees. For Point and MultiPoint geometries, an exact test is used; for a Sphere, true is always returned; for other geometries, an epsilon threshold is applied.
- name: d3.geoCraig()
  id: d3-geo-projection#geocraig
  summary: The Craig retroazimuthal projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoCraig**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/craig.js), [Examples](https://observablehq.com/@d3/craig) d3.**geoCraigRaw**(*phi*)

    The Craig retroazimuthal projection. Note: this projection tends to [fold over itself](https://bl.ocks.org/mbostock/4459716) if the [standard parallel](#craig_parallel) is non-zero; we have not yet implemented the necessary advanced clipping to avoid overlap.
- name: d3.geoCubic()
  id: d3-geo-polygon#geocubic
  summary: The cubic projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoCubic**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/cubic.js), [Examples](https://observablehq.com/@fil/cubic-projections)

    The cubic projection.
- name: d3.geoCylindricalEqualArea()
  id: d3-geo-projection#geocylindricalequalarea
  summary: The cylindrical equal-area projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoCylindricalEqualArea**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/cylindricalEqualArea.js), [Examples](https://observablehq.com/@mbostock/cylindrical-equal-area-projections) d3.**geoCylindricalEqualAreaRaw**(*phi0*)

    The cylindrical equal-area projection. Depending on the chosen [parallel](#cylindricalEqualArea_parallel), this projection is also known as the Lambert cylindrical equal-area (0°), Behrmann (30°), Hobo–Dyer (37.5°), Gall–Peters (45°), Balthasart (50°) and Tobler world-in-a-square (~55.654°).
- name: d3.geoCylindricalStereographic()
  id: d3-geo-projection#geocylindricalstereographic
  summary: The cylindrical stereographic projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoCylindricalStereographic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/cylindricalStereographic.js), [Examples](https://observablehq.com/@d3/cylindrical-stereographic) d3.**geoCylindricalStereographicRaw**(*phi0*)

    The cylindrical stereographic projection. Depending on the chosen [parallel](#cylindricalStereographic_parallel), this projection is also known as Braun’s stereographic (0°) and Gall’s stereographic (45°).
- name: d3.geoDistance()
  id: d3-geo#geodistance
  summary: Returns the great-arc distance in radians between the two points a and b
  belongs_to: geo
  description: |-
    ###### d3.**geoDistance**(*a*, *b*) [Source](https://github.com/d3/d3-geo/blob/main/src/distance.js "Source")

    Returns the great-arc distance in [radians](http://mathworld.wolfram.com/Radian.html) between the two points *a* and *b*. Each point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees. This is the spherical equivalent of [*path*.measure](#path_measure) given a LineString of two points.
- name: d3.geoDodecahedral()
  id: d3-geo-polygon#geododecahedral
  summary: The dodecahedral projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoDodecahedral**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/dodecahedral.js), [Examples](https://observablehq.com/@fil/dodecahedral-projection)

    The dodecahedral projection.
- name: d3.geoEisenlohr()
  id: d3-geo-projection#geoeisenlohr
  summary: The Eisenlohr conformal projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoEisenlohr**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eisenlohr.js), [Examples](https://observablehq.com/@d3/eisenlohr) d3.**geoEisenlohrRaw**(*lambda*, *phi*)

    The Eisenlohr conformal projection.
- name: d3.geoGilbert()
  id: d3-geo-projection#geogilbert
  summary: Gilbert’s two-world perspective projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoGilbert**(\[*type*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gilbert.js), [Examples](https://observablehq.com/@d3/gilbert)

    Gilbert’s two-world perspective projection. Wraps an instance of the specified projection *type*; if not specified, defaults to [d3.geoOrthographic](https://github.com/d3/d3-geo/blob/main/README.md#geoOrthographic).
- name: d3.geoGingery()
  id: d3-geo-projection#geogingery
  summary: The U.S.-centric Gingery world projection, as inspired by Cram’s Air Age
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoGingery**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js), [Examples](https://observablehq.com/@d3/gingery) d3.**geoGingeryRaw**(*rho*, *lobes*)

    The U.S.-centric Gingery world projection, as inspired by Cram’s Air Age. Note: requires clipping to the sphere.
- name: d3.geoGraticule()
  id: d3-geo#geograticule
  summary: 'Constructs a geometry generator for creating graticules: a uniform grid of meridians and parallels for showing projection distortion'
  belongs_to: geo
  description: |-
    ###### d3.**geoGraticule**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    Constructs a geometry generator for creating graticules: a uniform grid of [meridians](https://en.wikipedia.org/wiki/Meridian_(geography)) and [parallels](https://en.wikipedia.org/wiki/Circle_of_latitude) for showing projection distortion. The default graticule has meridians and parallels every 10° between ±80° latitude; for the polar regions, there are meridians every 90°.
- name: d3.geoGraticule10()
  id: d3-geo#geograticule10
  summary: A convenience method for directly generating the default 10° global graticule as a GeoJSON MultiLineString geometry object
  belongs_to: geo
  description: |-
    ###### d3.**geoGraticule10**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    A convenience method for directly generating the default 10° global graticule as a GeoJSON MultiLineString geometry object. Equivalent to:

    ``` javascript
    function geoGraticule10() {
      return d3.geoGraticule()();
    }
    ```

    ### Streams

    D3 transforms geometry using a sequence of function calls, rather than materializing intermediate representations, to minimize overhead. Streams must implement several methods to receive input geometry. Streams are inherently stateful; the meaning of a [point](#point) depends on whether the point is inside of a [line](#lineStart), and likewise a line is distinguished from a ring by a [polygon](#polygonStart). Despite the name “stream”, these method calls are currently synchronous.
- name: d3.geoGringortenQuincuncial()
  id: d3-geo-projection#geogringortenquincuncial
  summary: The Gringorten square equal-area projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoGringortenQuincuncial**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/gringorten.js)

    The Gringorten square equal-area projection.
- name: d3.geoHammer()
  id: d3-geo-projection#geohammer
  summary: The Hammer projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoHammer**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammer.js), [Examples](https://observablehq.com/@d3/hammer) d3.**geoHammerRaw**(*A*, *B*)

    The Hammer projection. Depending the chosen coefficient and aspect, also known as [Eckert–Greifendorff](https://observablehq.com/@d3/hammer?b=4), [quartic authalic](https://observablehq.com/@d3/hammer?b=Infinity), and [Briesemeister](https://observablehq.com/@d3/briesemeister-projection).
- name: d3.geoHammerRetroazimuthal()
  id: d3-geo-projection#geohammerretroazimuthal
  summary: The Hammer retroazimuthal projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoHammerRetroazimuthal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammerRetroazimuthal.js), [Examples](https://observablehq.com/@d3/hammer-retroazimuthal) d3.**geoHammerRetroazimuthalRaw**(*phi0*)

    The Hammer retroazimuthal projection. Note: requires clipping to the sphere.
- name: d3.geoHealpix()
  id: d3-geo-projection#geohealpix
  summary: 'The HEALPix projection: a Hierarchical Equal Area isoLatitude Pixelisation of a 2-sphere'
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoHealpix**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/healpix.js), [Examples](https://observablehq.com/@d3/healpix) d3.**geoHealpixRaw**(*lobes*)

    The HEALPix projection: a **H**ierarchical **E**qual **A**rea iso**L**atitude **Pix**elisation of a 2-sphere. In this implementation, the parameter *K* is fixed at 3. Note: requires clipping to the sphere.
- name: d3.geoHill()
  id: d3-geo-projection#geohill
  summary: Hill eucyclic projection is pseudoconic and equal-area
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoHill**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hill.js), [Examples](https://observablehq.com/@d3/hill-eucyclic) d3.**geoHillRaw**(*K*)

    Hill eucyclic projection is pseudoconic and equal-area.
- name: d3.geoIcosahedral()
  id: d3-geo-polygon#geoicosahedral
  summary: The icosahedral projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoIcosahedral**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/icosahedral.js), [Examples](https://observablehq.com/@fil/icosahedral-projections)

    The icosahedral projection.
- name: d3.geoIdentity()
  id: d3-geo#geoidentity
  summary: The identity transform can be used to scale, translate and clip planar geometry
  belongs_to: geo
  description: |-
    ###### d3.**geoIdentity**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/identity.js "Source")

    The identity transform can be used to scale, translate and clip planar geometry. It implements [*projection*.scale](#projection_scale), [*projection*.translate](#projection_translate), [*projection*.fitExtent](#projection_fitExtent), [*projection*.fitSize](#projection_fitSize), [*projection*.fitWidth](#projection_fitWidth), [*projection*.fitHeight](#projection_fitHeight), [*projection*.clipExtent](#projection_clipExtent), [*projection*.angle](#projection_angle), [*projection*.reflectX](#projection_reflectX) and [*projection*.reflectY](#projection_reflectY).

    ### Clipping

    Projections perform cutting or clipping of geometries in two stages.
- name: d3.geoImago()
  id: d3-geo-polygon#geoimago
  summary: The Imago projection, engineered by Justin Kunimune (2017), is inspired by Hajime Narukawa’s AuthaGraph design (1999)
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoImago**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/imago.js), [Examples](https://observablehq.com/@fil/the-imago-projection)

    The Imago projection, engineered by Justin Kunimune (2017), is inspired by Hajime Narukawa’s AuthaGraph design (1999).
- name: d3.geoInterpolate()
  id: d3-geo#geointerpolate
  summary: Returns an interpolator function given two points a and b
  belongs_to: geo
  description: |-
    ###### d3.**geoInterpolate**(*a*, *b*) [Source](https://github.com/d3/d3-geo/blob/main/src/interpolate.js "Source")

    Returns an interpolator function given two points *a* and *b*. Each point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees. The returned interpolator function takes a single argument *t*, where *t* is a number ranging from 0 to 1; a value of 0 returns the point *a*, while a value of 1 returns the point *b*. Intermediate values interpolate from *a* to *b* along the great arc that passes through both *a* and *b*. If *a* and *b* are antipodes, an arbitrary great arc is chosen.
- name: d3.geoInterrupt()
  id: d3-geo-projection#geointerrupt
  summary: Defines a new interrupted projection for the specified raw projection function project and the specified array of lobes
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterrupt**(*project*, *lobes*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/index.js), [Examples](https://observablehq.com/@d3/interrupted-sinusoidal)

    Defines a new interrupted projection for the specified [raw projection](#raw-projections) function *project* and the specified array of *lobes*. The array *lobes* contains two elements representing the hemilobes for the northern hemisphere and the southern hemisphere, respectively. Each hemilobe is an array of triangles, with each triangle represented as three points (in degrees): the start, midpoint, and end. For example, the lobes in [Goode’s interrupted homolosine](#geoInterruptedHomolosine) projection are defined as:

    ``` javascript
    [
      [
        [[-180,   0], [-100,  90], [ -40,   0]],
        [[ -40,   0], [  30,  90], [ 180,   0]]
      ],
      [
        [[-180,   0], [-160, -90], [-100,   0]],
        [[-100,   0], [ -60, -90], [ -20,   0]],
        [[ -20,   0], [  20, -90], [  80,   0]],
        [[  80,   0], [ 140, -90], [ 180,   0]]
      ]
    ]
    ```

    Note: interrupted projections typically require clipping to the sphere.
- name: d3.geoInterruptedBoggs()
  id: d3-geo-projection#geointerruptedboggs
  summary: Bogg’s interrupted eumorphic projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedBoggs**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/boggs.js), [Examples](https://observablehq.com/@d3/interrupted-boggs-eumorphic)

    Bogg’s interrupted [eumorphic projection](#geoBoggs).
- name: d3.geoInterruptedHomolosine()
  id: d3-geo-projection#geointerruptedhomolosine
  summary: Goode’s interrupted homolosine projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedHomolosine**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/homolosine.js), [Examples](https://observablehq.com/@d3/interrupted-goode-homolosine)

    Goode’s interrupted [homolosine projection](#geoHomolosine). Its [ocean-centric aspect](https://observablehq.com/@d3/interrupted-homolosine-oceans) is also well-known.
- name: d3.geoInterruptedMollweide()
  id: d3-geo-projection#geointerruptedmollweide
  summary: Goode’s interrupted Mollweide projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/mollweide.js), [Examples](https://observablehq.com/@d3/interrupted-mollweide)

    Goode’s interrupted [Mollweide projection](#geoMollweide).
- name: d3.geoInterruptedMollweideHemispheres()
  id: d3-geo-projection#geointerruptedmollweidehemispheres
  summary: The Mollweide projection interrupted into two (equal-area) hemispheres
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedMollweideHemispheres**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/mollweideHemispheres.js), [Examples](https://observablehq.com/@d3/mollweide-hemispheres)

    The [Mollweide projection](#geoMollweide) interrupted into two (equal-area) hemispheres.
- name: d3.geoInterruptedQuarticAuthalic()
  id: d3-geo-projection#geointerruptedquarticauthalic
  summary: The quartic authalic projection interrupted into two hemispheres
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedQuarticAuthalic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quarticAuthalic.js), [Examples](https://observablehq.com/@piwodlaiwo/interrupted-quartic-authalic-projection)

    The [quartic authalic projection](https://observablehq.com/@d3/hammer?b=Infinity) interrupted into two hemispheres.

    ### Polyhedral Projections
- name: d3.geoInterruptedSinuMollweide()
  id: d3-geo-projection#geointerruptedsinumollweide
  summary: Alan K
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedSinuMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/sinuMollweide.js), [Examples](https://observablehq.com/@d3/interrupted-sinu-mollweide)

    Alan K. Philbrick’s interrupted [sinu-Mollweide projection](#geoSinuMollweide).
- name: d3.geoInterruptedSinusoidal()
  id: d3-geo-projection#geointerruptedsinusoidal
  summary: An interrupted sinusoidal projection with asymmetrical lobe boundaries that emphasize land masses over oceans, after the Swedish Nordisk Världs Atlas as reproduced by C.A
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoInterruptedSinusoidal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/sinusoidal.js), [Examples](https://observablehq.com/@d3/interrupted-sinusoidal)

    An interrupted [sinusoidal projection](#geoSinusoidal) with asymmetrical lobe boundaries that emphasize land masses over oceans, after the Swedish *Nordisk Världs Atlas* as reproduced by [C.A. Furuti](https://web.archive.org/web/20150928042327/http://www.progonos.com/furuti/MapProj/Normal/ProjInt/projInt.html#InterruptedSansonFlamsteed).
- name: d3.geoIntersectArc()
  id: d3-geo-polygon#geointersectarc
  summary: Given two spherical arcs [point0, point1] and [point2, point3], returns their intersection, or undefined if there is none
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoIntersectArc**(*arcs*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/intersect.js), [Examples](https://observablehq.com/@fil/spherical-intersection)

    Given two spherical arcs \[point0, point1\] and \[point2, point3\], returns their intersection, or undefined if there is none. See “[Spherical Intersection](https://observablehq.com/@fil/spherical-intersection)”.

    ## Projections

    d3-geo-polygon adds polygon clipping to the polyhedral projections from [d3-geo-projection](d3-geo-projection). Thus, it supersedes the following symbols:
- name: d3.geoLagrange()
  id: d3-geo-projection#geolagrange
  summary: The Lagrange conformal projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoLagrange**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/lagrange.js), [Examples](https://observablehq.com/@d3/lagrange) d3.**geoLagrangeRaw**(*n*)

    The Lagrange conformal projection.
- name: d3.geoLength()
  id: d3-geo#geolength
  summary: Returns the great-arc length of the specified GeoJSON object in radians
  belongs_to: geo
  description: |-
    ###### d3.**geoLength**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/length.js "Source")

    Returns the great-arc length of the specified GeoJSON *object* in [radians](http://mathworld.wolfram.com/Radian.html). For polygons, returns the perimeter of the exterior ring plus that of any interior rings. This is the spherical equivalent of [*path*.measure](#path_measure).
- name: d3.geoLoximuthal()
  id: d3-geo-projection#geoloximuthal
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoLoximuthal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/loximuthal.js), [Examples](https://observablehq.com/@d3/loximuthal) d3.**geoLoximuthalRaw**(*phi0*)

    The [loximuthal projection](https://en.wikipedia.org/wiki/Loximuthal_projection) is “characterized by the fact that loxodromes (rhumb lines) from one chosen central point (the intersection of the central meridian and central latitude) are shown as straight lines, correct in azimuth from the center, and are ‘true to scale’… It is neither an equal-area projection nor conformal.”
- name: d3.geoModifiedStereographicAlaska()
  id: d3-geo-projection#geomodifiedstereographicalaska
  summary: A modified stereographic projection for Alaska
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoModifiedStereographicAlaska**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)

    A [modified stereographic](#geoModifiedStereographic) projection for Alaska.
- name: d3.geoModifiedStereographicGs48()
  id: d3-geo-projection#geomodifiedstereographicgs48
  summary: A modified stereographic projection for the conterminous United States
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoModifiedStereographicGs48**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)

    A [modified stereographic](#geoModifiedStereographic) projection for the conterminous United States.
- name: d3.geoModifiedStereographicGs50()
  id: d3-geo-projection#geomodifiedstereographicgs50
  summary: A modified stereographic projection for the United States including Alaska and Hawaii
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoModifiedStereographicGs50**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)

    A [modified stereographic](#geoModifiedStereographic) projection for the United States including Alaska and Hawaii. Typically clipped to the geographic extent \[\[-180°, 15°\], \[-50°, 75°\]\].
- name: d3.geoModifiedStereographicLee()
  id: d3-geo-projection#geomodifiedstereographiclee
  summary: A modified stereographic projection for the Pacific ocean
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoModifiedStereographicLee**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js), [Examples](https://observablehq.com/@d3/lee-oblated-stereographic)

    A [modified stereographic](#geoModifiedStereographic) projection for the Pacific ocean.
- name: d3.geoModifiedStereographicMiller()
  id: d3-geo-projection#geomodifiedstereographicmiller
  summary: A modified stereographic projection for Europe and Africa
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoModifiedStereographicMiller**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js), [Examples](https://observablehq.com/@d3/miller-oblated-stereographic)

    A [modified stereographic](#geoModifiedStereographic) projection for Europe and Africa. Typically clipped to the geographic extent \[\[-40°, -40°\], \[80°, 80°\]\].
- name: d3.geoPath()
  id: d3-geo#geopath
  summary: Creates a new geographic path generator with the default settings
  belongs_to: geo
  description: |-
    ###### d3.**geoPath**(\[*projection*\[, *context*\]\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    Creates a new geographic path generator with the default settings. If *projection* is specified, sets the [current projection](#path_projection). If *context* is specified, sets the [current context](#path_context).
- name: d3.geoPeirceQuincuncial()
  id: d3-geo-projection#geopeircequincuncial
  summary: The Peirce quincuncial projection is the quincuncial form of the Guyou projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoPeirceQuincuncial**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/peirce.js)

    The Peirce quincuncial projection is the quincuncial form of the [Guyou projection](#geoGuyou).

    ### Transformations
- name: d3.geoPolyhedral()
  id: d3-geo-projection#geopolyhedral
  summary: Defines a new polyhedral projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoPolyhedral**(*root*, *face*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/index.js)

    Defines a new polyhedral projection. The *root* is a spanning tree of polygon face nodes; each *node* is assigned a *node*.transform matrix. The *face* function returns the appropriate *node* for a given *lambda* and *phi* in radians. Use [*projection*.angle](https://github.com/d3/d3-geo/blob/main/README.md#projection_angle) to set the orientation of the map (the default *angle*, -30°, might change in the next major version).
- name: d3.geoPolyhedral()
  id: d3-geo-polygon#geopolyhedral
  summary: Defines a new polyhedral projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoPolyhedral**(*tree*, *face*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/index.js), [Examples](https://observablehq.com/@fil/polyhedral-projections-with-d3-geo-polygon)

    Defines a new polyhedral projection. The *tree* is a spanning tree of polygon face nodes; each *node* is assigned a *node*.transform matrix. The *face* function returns the appropriate *node* for a given *lambda* and *phi* in radians.
- name: d3.geoPolyhedralButterfly()
  id: d3-geo-projection#geopolyhedralbutterfly
  summary: The gnomonic butterfly projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoPolyhedralButterfly**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/butterfly.js), [Examples](https://observablehq.com/@d3/polyhedral-gnomonic)

    The gnomonic butterfly projection.
- name: d3.geoPolyhedralButterfly()
  id: d3-geo-polygon#geopolyhedralbutterfly
  summary: The gnomonic butterfly projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoPolyhedralButterfly**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/butterfly.js)

    The gnomonic butterfly projection.
- name: d3.geoPolyhedralCollignon()
  id: d3-geo-projection#geopolyhedralcollignon
  summary: The Collignon butterfly projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoPolyhedralCollignon**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/collignon.js), [Examples](https://observablehq.com/@d3/polyhedral-collignon)

    The Collignon butterfly projection.
- name: d3.geoPolyhedralCollignon()
  id: d3-geo-polygon#geopolyhedralcollignon
  summary: The Collignon butterfly projection
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoPolyhedralCollignon**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/collignon.js)

    The Collignon butterfly projection.
- name: d3.geoPolyhedralVoronoi()
  id: d3-geo-polygon#geopolyhedralvoronoi
  summary: Returns a polyhedral projection based on the polygons, arranged in a tree according to the parents list
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoPolyhedralVoronoi**(\[*parents*\], \[*polygons*\], \[*faceProjection*\], \[*faceFind*\]) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/voronoi.js)

    Returns a polyhedral projection based on the *polygons*, arranged in a tree according to the *parents* list. *polygons* are a GeoJSON FeatureCollection of geoVoronoi cells, which should indicate the corresponding sites (see [d3-geo-voronoi](https://github.com/Fil/d3-geo-voronoi)). An optional [*faceProjection*](#geoPolyhedral) is passed to d3.geoPolyhedral() -- note that the gnomonic projection on the polygons’ sites is the only faceProjection that works in the general case.

    The .**parents**(\[*parents*\]), .**polygons**(\[*polygons*\]), .**faceProjection**(\[*faceProjection*\]) set and read the corresponding options. Use *.faceFind(voronoi.find)* for faster results.
- name: d3.geoPolyhedralWaterman()
  id: d3-geo-projection#geopolyhedralwaterman
  summary: Steve Waterman’s butterfly projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoPolyhedralWaterman**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/waterman.js), [Examples](https://observablehq.com/@d3/watermans-butterfly)

    Steve Waterman’s butterfly projection.

    ### Quincuncial Projections
- name: d3.geoPolyhedralWaterman()
  id: d3-geo-polygon#geopolyhedralwaterman
  summary: A butterfly projection inspired by Steve Waterman’s design
  belongs_to: geo-polygon
  description: |-
    ###### d3.**geoPolyhedralWaterman**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/waterman.js)

    A butterfly projection inspired by Steve Waterman’s design.

    New projections are introduced:
- name: d3.geoProject()
  id: d3-geo-projection#geoproject
  summary: Projects the specified GeoJSON object using the specified projection, returning a shallow copy of the specified GeoJSON object with projected coordinates
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoProject**(*object*, *projection*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/project/index.js)

    Projects the specified GeoJSON *object* using the specified *projection*, returning a shallow copy of the specified GeoJSON *object* with projected coordinates. Typically, the input coordinates are spherical and the output coordinates are planar, but the *projection* can also be an [arbitrary geometric transformation](https://github.com/d3/d3-geo/blob/main/README.md#transforms).

    See also [geoproject](#geoproject-bin).
- name: d3.geoProjection()
  id: d3-geo#geoprojection
  summary: Constructs a new projection from the specified raw projection, project
  belongs_to: geo
  description: |-
    ###### d3.**geoProjection**(*project*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Constructs a new projection from the specified [raw projection](#_project), *project*. The *project* function takes the *longitude* and *latitude* of a given point in [radians](http://mathworld.wolfram.com/Radian.html), often referred to as *lambda* (λ) and *phi* (φ), and returns a two-element array \[*x*, *y*\] representing its unit projection. The *project* function does not need to scale or translate the point, as these are applied automatically by [*projection*.scale](#projection_scale), [*projection*.translate](#projection_translate), and [*projection*.center](#projection_center). Likewise, the *project* function does not need to perform any spherical rotation, as [*projection*.rotate](#projection_rotate) is applied prior to projection.

    For example, a spherical Mercator projection can be implemented as:

    ``` javascript
    var mercator = d3.geoProjection(function(x, y) {
      return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];
    });
    ```

    If the *project* function exposes an *invert* method, the returned projection will also expose [*projection*.invert](#projection_invert).
- name: d3.geoProjectionMutator()
  id: d3-geo#geoprojectionmutator
  summary: Constructs a new projection from the specified raw projection factory and returns a mutate function to call whenever the raw projection changes
  belongs_to: geo
  description: |-
    ###### d3.**geoProjectionMutator**(*factory*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Constructs a new projection from the specified [raw projection](#_project) *factory* and returns a *mutate* function to call whenever the raw projection changes. The *factory* must return a raw projection. The returned *mutate* function returns the wrapped projection. For example, a conic projection typically has two configurable parallels. A suitable *factory* function, such as [d3.geoConicEqualAreaRaw](#geoConicEqualAreaRaw), would have the form:

    ``` javascript
    // y0 and y1 represent two parallels
    function conicFactory(phi0, phi1) {
      return function conicRaw(lambda, phi) {
        return […, …];
      };
    }
    ```

    Using d3.geoProjectionMutator, you can implement a standard projection that allows the parallels to be changed, reassigning the raw projection used internally by [d3.geoProjection](#geoProjection):

    ``` javascript
    function conicCustom() {
      var phi0 = 29.5,
          phi1 = 45.5,
          mutate = d3.geoProjectionMutator(conicFactory),
          projection = mutate(phi0, phi1);

      projection.parallels = function(_) {
        return arguments.length ? mutate(phi0 = +_[0], phi1 = +_[1]) : [phi0, phi1];
      };

      return projection;
    }
    ```

    When creating a mutable projection, the *mutate* function is typically not exposed.

    ### Spherical Math
- name: d3.geoQuincuncial()
  id: d3-geo-projection#geoquincuncial
  summary: Defines a new quincuncial projection for the specified raw projection function project
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoQuincuncial**(*project*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/index.js)

    Defines a new quincuncial projection for the specified [raw projection](#raw-projections) function *project*. The default rotation is \[-90°, -90°, 45°\] and the default clip angle is 180° - ε.
- name: d3.geoRectangularPolyconic()
  id: d3-geo-projection#georectangularpolyconic
  summary: The rectangular (War Office) polyconic projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoRectangularPolyconic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/rectangularPolyconic.js), [Examples](https://observablehq.com/@d3/rectangular-polyconic) d3.**geoRectangularPolyconicRaw**(*phi0*)

    The rectangular (War Office) polyconic projection.
- name: d3.geoRotation()
  id: d3-geo#georotation
  summary: Returns a rotation function for the given angles, which must be a two- or three-element array of numbers [lambda, phi, gamma] specifying the rotation angles in degrees about each spherical axis
  belongs_to: geo
  description: |-
    ###### d3.**geoRotation**(*angles*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js "Source")

    Returns a [rotation function](#_rotation) for the given *angles*, which must be a two- or three-element array of numbers \[*lambda*, *phi*, *gamma*\] specifying the rotation angles in degrees about [each spherical axis](https://observablehq.com/@d3/three-axis-rotation). (These correspond to [yaw, pitch and roll](https://en.wikipedia.org/wiki/Aircraft_principal_axes).) If the rotation angle *gamma* is omitted, it defaults to 0. See also [*projection*.rotate](#projection_rotate).
- name: d3.geoSatellite()
  id: d3-geo-projection#geosatellite
  summary: The satellite (tilted perspective) projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoSatellite**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/satellite.js), [Examples](https://observablehq.com/@d3/satellite) d3.**geoSatelliteRaw**(*P*, *omega*)

    The satellite (tilted perspective) projection.
- name: d3.geoStitch()
  id: d3-geo-projection#geostitch
  summary: Returns a shallow copy of the specified GeoJSON object, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoStitch**(*object*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/stitch.js)

    Returns a shallow copy of the specified GeoJSON *object*, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments. The input *object* must have coordinates in longitude and latitude in decimal degrees per [RFC 7946](https://tools.ietf.org/html/rfc7946). [Antimeridian cutting](https://bl.ocks.org/mbostock/3788999), if needed, can then be re-applied after rotating to the desired projection aspect.

    See also [geostitch](#geostitch-bin).
- name: d3.geoStream()
  id: d3-geo#geostream
  summary: Streams the specified GeoJSON object to the specified projection stream
  belongs_to: geo
  description: |-
    ###### d3.**geoStream**(*object*, *stream*) [Source](https://github.com/d3/d3-geo/blob/main/src/stream.js "Source")

    Streams the specified [GeoJSON](http://geojson.org) *object* to the specified [projection *stream*](#projection-streams). While both features and geometry objects are supported as input, the stream interface only describes the geometry, and thus additional feature properties are not visible to streams.
- name: d3.geoTransform()
  id: d3-geo#geotransform
  summary: Defines an arbitrary transform using the methods defined on the specified methods object
  belongs_to: geo
  description: |-
    ###### d3.**geoTransform**(*methods*) [Source](https://github.com/d3/d3-geo/blob/main/src/transform.js "Source")

    Defines an arbitrary transform using the methods defined on the specified *methods* object. Any undefined methods will use pass-through methods that propagate inputs to the output stream. For example, to reflect the *y*-dimension (see also [*identity*.reflectY](#identity_reflectY)):

    ``` javascript
    var reflectY = d3.geoTransform({
      point: function(x, y) {
        this.stream.point(x, -y);
      }
    });
    ```

    Or to define an affine matrix transformation:

    ``` javascript
    function matrix(a, b, c, d, tx, ty) {
      return d3.geoTransform({
        point: function(x, y) {
          this.stream.point(a * x + b * y + tx, c * x + d * y + ty);
        }
      });
    }
    ```
- name: d3.geoTwoPointAzimuthalUsa()
  id: d3-geo-projection#geotwopointazimuthalusa
  summary: The two-point azimuthal projection with points [-158°, 21.5°] and [-77°, 39°], approximately representing Honolulu, HI and Washington, D.C
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoTwoPointAzimuthalUsa**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointAzimuthal.js)

    The two-point azimuthal projection with points \[-158°, 21.5°\] and \[-77°, 39°\], approximately representing Honolulu, HI and Washington, D.C.
- name: d3.geoTwoPointEquidistantUsa()
  id: d3-geo-projection#geotwopointequidistantusa
  summary: The two-point equidistant projection with points [-158°, 21.5°] and [-77°, 39°], approximately representing Honolulu, HI and Washington, D.C
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoTwoPointEquidistantUsa**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointEquidistant.js)

    The two-point equidistant projection with points \[-158°, 21.5°\] and \[-77°, 39°\], approximately representing Honolulu, HI and Washington, D.C.
- name: d3.geoWagner7()
  id: d3-geo-projection#geowagner7
  summary: The Wagner VII projection
  belongs_to: geo-projection
  description: |-
    ###### d3.**geoWagner7**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wagner7.js), Examples

    The Wagner VII projection.
- name: d3.gray()
  id: d3-color#gray
  summary: Constructs a new CIELAB color with the specified l value and a = b = 0
  belongs_to: color
  description: "###### d3.**gray**(*l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") \n\nConstructs a new [CIELAB](#lab) color with the specified *l* value and *a* = *b* = 0."
- name: d3.greatest()
  id: d3-array#greatest
  summary: Returns the greatest element of the specified iterable according to the specified comparator or accessor
  belongs_to: array
  description: |-
    ###### d3.**greatest**(*iterable*\[, *comparator*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/greatest.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**greatest**(*iterable*\[, *accessor*\])

    Returns the greatest element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns undefined. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:

    ``` javascript
    const array = [{foo: 42}, {foo: 91}];
    d3.greatest(array, (a, b) => a.foo - b.foo); // {foo: 91}
    d3.greatest(array, (a, b) => b.foo - a.foo); // {foo: 42}
    d3.greatest(array, a => a.foo); // {foo: 91}
    ```

    This function is similar to [max](#max), except it allows the use of a comparator rather than an accessor.
- name: d3.greatestIndex()
  id: d3-array#greatestindex
  summary: Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor
  belongs_to: array
  description: |-
    ###### d3.**greatestIndex**(*iterable*\[, *comparator*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/greatestIndex.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**greatestIndex**(*iterable*\[, *accessor*\])

    Returns the index of the greatest element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns -1. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:

    ``` javascript
    const array = [{foo: 42}, {foo: 91}];
    d3.greatestIndex(array, (a, b) => a.foo - b.foo); // 1
    d3.greatestIndex(array, (a, b) => b.foo - a.foo); // 0
    d3.greatestIndex(array, a => a.foo); // 1
    ```

    This function is similar to [maxIndex](#maxIndex), except it allows the use of a comparator rather than an accessor.
- name: d3.group()
  id: d3-array#group
  summary: Groups the specified iterable of values into an InternMap from key to array of value
  belongs_to: array
  description: |-
    ###### d3.**group**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)

    Groups the specified *iterable* of values into an [InternMap](#InternMap) from *key* to array of value. For example, given some data:

    ``` javascript
    data = [
      {name: "jim",   amount: "34.0",   date: "11/12/2015"},
      {name: "carl",  amount: "120.11", date: "11/12/2015"},
      {name: "stacy", amount: "12.01",  date: "01/04/2016"},
      {name: "stacy", amount: "34.05",  date: "01/04/2016"}
    ]
    ```

    To group the data by name:

    ``` javascript
    d3.group(data, d => d.name)
    ```

    This produces:

    ``` javascript
    Map(3) {
      "jim" => Array(1)
      "carl" => Array(1)
      "stacy" => Array(2)
    }
    ```

    If more than one *key* is specified, a nested InternMap is returned. For example:

    ``` javascript
    d3.group(data, d => d.name, d => d.date)
    ```

    This produces:

    ``` javascript
    Map(3) {
      "jim" => Map(1) {
        "11/12/2015" => Array(1)
      }
      "carl" => Map(1) {
        "11/12/2015" => Array(1)
      }
      "stacy" => Map(1) {
        "01/04/2016" => Array(2)
      }
    }
    ```

    To convert a Map to an Array, use [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from). For example:

    ``` javascript
    Array.from(d3.group(data, d => d.name))
    ```

    This produces:

    ``` javascript
    [
      ["jim", Array(1)],
      ["carl", Array(1)],
      ["stacy", Array(2)]
    ]
    ```

    You can also simultaneously convert the \[*key*, *value*\] to some other representation by passing a map function to Array.from:

    ``` javascript
    Array.from(d3.group(data, d => d.name), ([key, value]) => ({key, value}))
    ```

    This produces:

    ``` javascript
    [
      {key: "jim", value: Array(1)},
      {key: "carl", value: Array(1)},
      {key: "stacy", value: Array(2)}
    ]
    ```

    [*selection*.data](https://github.com/d3/d3-selection/blob/main/README.md#selection_data) accepts iterables directly, meaning that you can use a Map (or Set or other iterable) to perform a data join without first needing to convert to an array.
- name: d3.groups()
  id: d3-array#groups
  summary: Equivalent to group, but returns nested arrays instead of nested maps
  belongs_to: array
  description: |-
    ###### d3.**groups**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)

    Equivalent to [group](#group), but returns nested arrays instead of nested maps.
- name: d3.groupSort()
  id: d3-array#groupsort
  summary: Groups the specified iterable of elements according to the specified key function, sorts the groups according to the specified comparator, and then returns an array of keys in sorted order
  belongs_to: array
  description: |-
    ###### d3.**groupSort**(*iterable*, *comparator*, *key*) · [Source](https://github.com/d3/d3-array/blob/main/src/groupSort.js), [Examples](https://observablehq.com/@d3/d3-groupsort) d3.**groupSort**(*iterable*, *accessor*, *key*)

    Groups the specified *iterable* of elements according to the specified *key* function, sorts the groups according to the specified *comparator*, and then returns an array of keys in sorted order. For example, if you had a table of barley yields for different varieties, sites, and years, to sort the barley varieties by ascending median yield:

    ``` javascript
    d3.groupSort(barley, g => d3.median(g, d => d.yield), d => d.variety)
    ```

    For descending order, negate the group value:

    ``` javascript
    d3.groupSort(barley, g => -d3.median(g, d => d.yield), d => d.variety)
    ```

    If a *comparator* is passed instead of an *accessor* (i.e., if the second argument is a function that takes exactly two arguments), it will be asked to compare two groups *a* and *b* and should return a negative value if *a* should be before *b*, a positive value if *a* should be after *b*, or zero for a partial ordering.
- name: d3.hcg()
  id: d3-hcg#hcg
  summary: Constructs a new HCG color
  belongs_to: hcg
  description: "###### d3.**hcg**(*h*, *c*, *g*\\[, *opacity*\\]) d3.**hcg**(*specifier*) d3.**hcg**(*color*) \n\nConstructs a new HCG color. The channel values are exposed as `h`, `c` and `g` properties on the returned instance.\n\nIf *h*, *c* and *g* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HCG color space. See [d3.color](d3-color#color) for examples. If a [*color*](d3-color#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](d3-color#color_rgb) and then converted to HCG.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hcg](https://github.com/d3/d3-hcg)"
- name: d3.hcl()
  id: d3-color#hcl
  summary: Equivalent to d3.lch, but with reversed argument order
  belongs_to: color
  description: "###### d3.**hcl**(*h*, *c*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**hcl**(*specifier*) d3.**hcl**(*color*) \n\nEquivalent to [d3.lch](#lch), but with reversed argument order."
- name: d3.hierarchy()
  id: d3-hierarchy#hierarchy
  summary: Before you can compute a hierarchical layout, you need a root node
  belongs_to: hierarchy
  description: |-
    ### Hierarchy

    Before you can compute a hierarchical layout, you need a root node. If your data is already in a hierarchical format, such as JSON, you can pass it directly to [d3.hierarchy](#hierarchy); otherwise, you can rearrange tabular data, such as comma-separated values (CSV), into a hierarchy using [d3.stratify](#stratify).

    ###### d3.**hierarchy**(*data*\[, *children*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/index.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Constructs a root node from the specified hierarchical *data*. The specified *data* must be an object representing the root node. For example:

    ``` javascript
    {
      "name": "Eve",
      "children": [
        {
          "name": "Cain"
        },
        {
          "name": "Seth",
          "children": [
            {
              "name": "Enos"
            },
            {
              "name": "Noam"
            }
          ]
        },
        {
          "name": "Abel"
        },
        {
          "name": "Awan",
          "children": [
            {
              "name": "Enoch"
            }
          ]
        },
        {
          "name": "Azura"
        }
      ]
    }
    ```

    The specified *children* accessor function is invoked for each datum, starting with the root *data*, and must return an iterable of data representing the children, if any. If the children accessor is not specified, it defaults to:

    ``` javascript
    function children(d) {
      return d.children;
    }
    ```

    If *data* is a Map, it is implicitly converted to the entry \[undefined, *data*\], and the children accessor instead defaults to:

    ``` javascript
    function children(d) {
      return Array.isArray(d) ? d[1] : null;
    }
    ```

    This allows you to pass the result of [d3.group](https://github.com/d3/d3-array/blob/main/README.md#group) or [d3.rollup](https://github.com/d3/d3-array/blob/main/README.md#rollup) to d3.hierarchy.

    The returned node and each descendant has the following properties:

    - *node*.data - the associated data, as specified to the [constructor](#hierarchy).
    - *node*.depth - zero for the root node, and increasing by one for each descendant generation.
    - *node*.height - zero for leaf nodes, and the greatest distance from any descendant leaf for internal nodes.
    - *node*.parent - the parent node, or null for the root node.
    - *node*.children - an array of child nodes, if any; undefined for leaf nodes.
    - *node*.value - the summed value of the node and its [descendants](#node_descendants); optional, see [*node*.sum](#node_sum) and [*node*.count](#node_count).

    This method can also be used to test if a node is an `instanceof d3.hierarchy` and to extend the node prototype.
- name: d3.hsl()
  id: d3-color#hsl
  summary: Constructs a new HSL color
  belongs_to: color
  description: "###### d3.**hsl**(*h*, *s*, *l*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\") d3.**hsl**(*specifier*) d3.**hsl**(*color*) \n\nConstructs a new [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [HSL color picker](http://bl.ocks.org/mbostock/debaad4fcce9bcee14cf) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSL color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to HSL. (Colors already in the HSL color space skip the conversion to RGB.)"
- name: d3.hsv()
  id: d3-hsv#hsv
  summary: Constructs a new HSV color
  belongs_to: hsv
  description: "###### d3.**hsv**(*h*, *s*, *v*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-hsv/blob/master/src/hsv.js \"Source\") d3.**hsv**(*specifier*) d3.**hsv**(*color*) \n\nConstructs a new [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `v` properties on the returned instance.\n\nIf *h*, *s* and *v* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSV color space. See [d3.color](d3-color#color) for examples. If a [*color*](d3-color#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](d3-color#color_rgb) and then converted to HSV.\n\n###### d3.**interpolateHsv**(*a*, *b*) [Source](https://github.com/d3/d3-hsv/blob/master/src/interpolateHsv.js \"Source\") \n\nReturns an HSV color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSV; they will be converted to HSV using [d3.hsv](#hsv). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateHsvLong**(*a*, *b*) [Source](https://github.com/d3/d3-hsv/blob/master/src/interpolateHsv.js \"Source\") \n\nLike [interpolateHsv](#interpolateHsv), but does not use the shortest path between hues.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hsv](https://github.com/d3/d3-hsv)"
- name: d3.html()
  id: d3-fetch#html
  summary: Fetches the file at the specified input URL as text and then parses it as HTML
  belongs_to: fetch
  description: |-
    ###### d3.**html**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js "Source")

    Fetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as HTML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.
- name: d3.html()
  id: d3-request#html
  summary: Returns a new request for the HTML file at the specified url with the default mime type text/html
  belongs_to: request
  description: |-
    ###### d3.**html**(*url*\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/html.js "Source")

    Returns a new [*request*](#request) for the HTML file at the specified *url* with the default mime type `text/html`. The HTML file is returned as a [document fragment](https://developer.mozilla.org/en-US/docs/DOM/range.createContextualFragment). If no *callback* is specified, this is equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/html")
        .response(function(xhr) { return document.createRange().createContextualFragment(xhr.responseText); });
    ```

    If a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/html")
        .response(function(xhr) { return document.createRange().createContextualFragment(xhr.responseText); })
        .get(callback);
    ```

    HTML parsing requires a global document and relies on [DOM Ranges](https://dom.spec.whatwg.org/#ranges), which are [not supported by JSDOM](https://github.com/tmpvar/jsdom/issues/317) as of version 8.3; thus, this method is supported in browsers but not in Node.
- name: d3.image()
  id: d3-fetch#image
  summary: Fetches the image at the specified input URL
  belongs_to: fetch
  description: |-
    ###### d3.**image**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/image.js "Source")

    Fetches the image at the specified *input* URL. If *init* is specified, sets any additional properties on the image before loading. For example, to enable an anonymous [cross-origin request](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image):

    ``` javascript
    const img = await d3.image("https://example.com/test.png", {crossOrigin: "anonymous"});
    ```
- name: d3.index()
  id: d3-array#index
  summary: Equivalent to group but returns a unique value per compound key instead of an array, throwing if the key is not unique
  belongs_to: array
  description: |-
    ###### d3.**index**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group)

    Equivalent to [group](#group) but returns a unique value per compound key instead of an array, throwing if the key is not unique.

    For example, given the data defined above,

    ``` javascript
    d3.index(data, d => d.amount)
    ```

    returns

    ``` javascript
    Map(4) {
      "34.0" => Object {name: "jim", amount: "34.0", date: "11/12/2015"}
      "120.11" => Object {name: "carl", amount: "120.11", date: "11/12/2015"}
      "12.01" => Object {name: "stacy", amount: "12.01", date: "01/04/2016"}
      "34.05" => Object {name: "stacy", amount: "34.05", date: "01/04/2016"}
    }
    ```

    On the other hand,

    ``` javascript
    d3.index(data, d => d.name)
    ```

    throws an error because two objects share the same name.
- name: d3.indexes()
  id: d3-array#indexes
  summary: Equivalent to index, but returns nested arrays instead of nested maps
  belongs_to: array
  description: |-
    ###### d3.**indexes**(*iterable*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group)

    Equivalent to [index](#index), but returns nested arrays instead of nested maps.
- name: d3.interpolate()
  id: d3-interpolate#interpolate
  summary: Returns an interpolator between the two arbitrary values a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolate**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/value.js), [Examples](https://observablehq.com/@d3/d3-interpolate)

    Returns an interpolator between the two arbitrary values *a* and *b*. The interpolator implementation is based on the type of the end value *b*, using the following algorithm:

    1.  If *b* is null, undefined or a boolean, use the constant *b*.
    2.  If *b* is a number, use [interpolateNumber](#interpolateNumber).
    3.  If *b* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](#interpolateRgb).
    4.  If *b* is a [date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), use [interpolateDate](#interpolateDate).
    5.  If *b* is a string, use [interpolateString](#interpolateString).
    6.  If *b* is a [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) of numbers, use [interpolateNumberArray](#interpolateNumberArray).
    7.  If *b* is a generic [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray), use [interpolateArray](#interpolateArray).
    8.  If *b* is coercible to a number, use [interpolateNumber](#interpolateNumber).
    9.  Use [interpolateObject](#interpolateObject).

    Based on the chosen interpolator, *a* is coerced to the suitable corresponding type.
- name: d3.interpolateArray()
  id: d3-interpolate#interpolatearray
  summary: Returns an interpolator between the two arrays a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateArray**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/array.js), [Examples](https://observablehq.com/@d3/d3-interpolateobject)

    Returns an interpolator between the two arrays *a* and *b*. If *b* is a typed array (e.g., Float64Array), [interpolateNumberArray](#interpolateNumberArray) is called instead.

    Internally, an array template is created that is the same length as *b*. For each element in *b*, if there exists a corresponding element in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such element, the static value from *b* is used in the template. Then, for the given parameter *t*, the template’s embedded interpolators are evaluated. The updated array template is then returned.

    For example, if *a* is the array `[0, 1]` and *b* is the array `[1, 10, 100]`, then the result of the interpolator for *t* = 0.5 is the array `[0.5, 5.5, 100]`.

    Note: **no defensive copy** of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).
- name: d3.interpolateBasis()
  id: d3-interpolate#interpolatebasis
  summary: Returns a uniform nonrational B-spline interpolator through the specified array of values, which must be numbers
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateBasis**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/basis.js), [Examples](https://observablehq.com/@d3/d3-interpolatebasis)

    Returns a uniform nonrational B-spline interpolator through the specified array of *values*, which must be numbers. Implicit control points are generated such that the interpolator returns *values*\[0\] at *t* = 0 and *values*\[*values*.length - 1\] at *t* = 1. See also [d3.curveBasis](d3-shape#curveBasis).
- name: d3.interpolateBasisClosed()
  id: d3-interpolate#interpolatebasisclosed
  summary: Returns a uniform nonrational B-spline interpolator through the specified array of values, which must be numbers
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateBasisClosed**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/basisClosed.js), [Examples](https://observablehq.com/@d3/d3-interpolatebasis)

    Returns a uniform nonrational B-spline interpolator through the specified array of *values*, which must be numbers. The control points are implicitly repeated such that the resulting one-dimensional spline has cyclical C² continuity when repeated around *t* in \[0,1\]. See also [d3.curveBasisClosed](d3-shape#curveBasisClosed).
- name: d3.interpolateCividis()
  id: d3-scale-chromatic#interpolatecividis
  summary: Given a number t in the range [0,1], returns the corresponding color from the “cividis” color vision deficiency-optimized color scheme designed by Nuñez, Anderton, and Renslow, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateCividis**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/cividis.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “cividis” color vision deficiency-optimized color scheme designed by [Nuñez, Anderton, and Renslow](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0199239), represented as an RGB string.
- name: d3.interpolateCool()
  id: d3-scale-chromatic#interpolatecool
  summary: Given a number t in the range [0,1], returns the corresponding color from Niccoli’s perceptual rainbow, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateCool**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from [Niccoli’s perceptual rainbow](https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/), represented as an RGB string.
- name: d3.interpolateCubehelix()
  id: d3-interpolate#interpolatecubehelix
  summary: Returns a Cubehelix color space interpolator between the two colors a and b using a configurable gamma
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateCubehelix**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/cubehelix.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Or, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:

    Returns a Cubehelix color space interpolator between the two colors *a* and *b* using a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in Cubehelix; they will be converted to Cubehelix using [d3.cubehelix](d3-color#cubehelix). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.
- name: d3.interpolateCubehelixDefault()
  id: d3-scale-chromatic#interpolatecubehelixdefault
  summary: Given a number t in the range [0,1], returns the corresponding color from Green’s default Cubehelix represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateCubehelixDefault**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/cubehelix.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from [Green’s default Cubehelix](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) represented as an RGB string.
- name: d3.interpolateCubehelixLong()
  id: d3-interpolate#interpolatecubehelixlong
  summary: Like interpolateCubehelix, but does not use the shortest path between hues
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateCubehelixLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/cubehelix.js#L29), [Examples](https://observablehq.com/@d3/working-with-color)

    Or, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:

    Like [interpolateCubehelix](#interpolateCubehelix), but does not use the shortest path between hues.
- name: d3.interpolateDate()
  id: d3-interpolate#interpolatedate
  summary: Returns an interpolator between the two dates a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateDate**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/date.js), [Examples](https://observablehq.com/@d3/d3-interpolatedate)

    Returns an interpolator between the two [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) *a* and *b*.

    Note: **no defensive copy** of the returned date is created; the same Date instance is returned for every evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).
- name: d3.interpolateDiscrete()
  id: d3-interpolate#interpolatediscrete
  summary: Returns a discrete interpolator for the given array of values
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateDiscrete**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/discrete.js), [Examples](https://observablehq.com/@d3/d3-interpolatediscrete)

    Returns a discrete interpolator for the given array of *values*. The returned interpolator maps *t* in \[0, 1 / *n*) to *values*\[0\], *t* in \[1 / *n*, 2 / *n*) to *values*\[1\], and so on, where *n* = *values*.length. In effect, this is a lightweight [quantize scale](d3-scale#quantize-scales) with a fixed domain of \[0, 1\].

    ### Sampling
- name: d3.interpolateHcl()
  id: d3-interpolate#interpolatehcl
  summary: Returns a CIELCh_(ab) color space interpolator between the two colors a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateHcl**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hcl.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns a [CIELCh_(ab) color space](https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC) interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in CIELCh_(ab); they will be converted to CIELCh_(ab) using [d3.hcl](d3-color#hcl). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.
- name: d3.interpolateHclLong()
  id: d3-interpolate#interpolatehcllong
  summary: Like interpolateHcl, but does not use the shortest path between hues
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateHclLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hcl.js#L21), [Examples](https://observablehq.com/@d3/working-with-color)

    Like [interpolateHcl](#interpolateHcl), but does not use the shortest path between hues.
- name: d3.interpolateHsl()
  id: d3-interpolate#interpolatehsl
  summary: Returns an HSL color space interpolator between the two colors a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateHsl**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hsl.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL; they will be converted to HSL using [d3.hsl](d3-color#hsl). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.
- name: d3.interpolateHslLong()
  id: d3-interpolate#interpolatehsllong
  summary: Like interpolateHsl, but does not use the shortest path between hues
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateHslLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hsl.js#L21), [Examples](https://observablehq.com/@d3/working-with-color)

    Like [interpolateHsl](#interpolateHsl), but does not use the shortest path between hues.
- name: d3.interpolateHue()
  id: d3-interpolate#interpolatehue
  summary: Returns an interpolator between the two hue angles a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateHue**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hue.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns an interpolator between the two hue angles *a* and *b*. If either hue is NaN, the opposing value is used. The shortest path between hues is used. The return value of the interpolator is a number in \[0, 360).

    ### Splines

    Whereas standard interpolators blend from a starting value *a* at *t* = 0 to an ending value *b* at *t* = 1, spline interpolators smoothly blend multiple input values for *t* in \[0,1\] using piecewise polynomial functions. Only cubic uniform nonrational [B-splines](https://en.wikipedia.org/wiki/B-spline) are currently supported, also known as basis splines.
- name: d3.interpolateInferno()
  id: d3-scale-chromatic#interpolateinferno
  summary: Given a number t in the range [0,1], returns the corresponding color from the “inferno” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateInferno**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “inferno” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.
- name: d3.interpolateLab()
  id: d3-interpolate#interpolatelab
  summary: Returns a CIELAB color space interpolator between the two colors a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateLab**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/lab.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns a [CIELAB color space](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in CIELAB; they will be converted to CIELAB using [d3.lab](d3-color#lab). The return value of the interpolator is an RGB string.
- name: d3.interpolateMagma()
  id: d3-scale-chromatic#interpolatemagma
  summary: Given a number t in the range [0,1], returns the corresponding color from the “magma” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateMagma**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “magma” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.
- name: d3.interpolateNumber()
  id: d3-interpolate#interpolatenumber
  summary: Returns an interpolator between the two numbers a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateNumber**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/number.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumber)

    Returns an interpolator between the two numbers *a* and *b*. The returned interpolator is equivalent to:

    ``` javascript
    function interpolator(t) {
      return a * (1 - t) + b * t;
    }
    ```

    Caution: avoid interpolating to or from the number zero when the interpolator is used to generate a string. When very small values are stringified, they may be converted to scientific notation, which is an invalid attribute or style property value in older browsers. For example, the number `0.0000001` is converted to the string `"1e-7"`. This is particularly noticeable with interpolating opacity. To avoid scientific notation, start or end the transition at 1e-6: the smallest value that is not stringified in scientific notation.
- name: d3.interpolateNumberArray()
  id: d3-interpolate#interpolatenumberarray
  summary: Returns an interpolator between the two arrays of numbers a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateNumberArray**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/numberArray.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumberarray)

    Returns an interpolator between the two arrays of numbers *a* and *b*. Internally, an array template is created that is the same type and length as *b*. For each element in *b*, if there exists a corresponding element in *a*, the values are directly interpolated in the array template. If there is no such element, the static value from *b* is copied. The updated array template is then returned.

    Note: For performance reasons, **no defensive copy** is made of the template array and the arguments *a* and *b*; modifications of these arrays may affect subsequent evaluation of the interpolator.
- name: d3.interpolateObject()
  id: d3-interpolate#interpolateobject
  summary: Returns an interpolator between the two objects a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateObject**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/object.js), [Examples](https://observablehq.com/@d3/d3-interpolateobject)

    Returns an interpolator between the two objects *a* and *b*. Internally, an object template is created that has the same properties as *b*. For each property in *b*, if there exists a corresponding property in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such property, the static value from *b* is used in the template. Then, for the given parameter *t*, the template's embedded interpolators are evaluated and the updated object template is then returned.

    For example, if *a* is the object `{x: 0, y: 1}` and *b* is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for *t* = 0.5 is the object `{x: 0.5, y: 5.5, z: 100}`.

    Object interpolation is particularly useful for *dataspace interpolation*, where data is interpolated rather than attribute values. For example, you can interpolate an object which describes an arc in a pie chart, and then use [d3.arc](d3-shape#arc) to compute the new SVG path data.

    Note: **no defensive copy** of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).
- name: d3.interpolatePlasma()
  id: d3-scale-chromatic#interpolateplasma
  summary: Given a number t in the range [0,1], returns the corresponding color from the “plasma” perceptually-uniform color scheme designed by van der Walt and Smith for matplotlib, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolatePlasma**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “plasma” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.
- name: d3.interpolateRainbow()
  id: d3-scale-chromatic#interpolaterainbow
  summary: Given a number t in the range [0,1], returns the corresponding color from d3.interpolateWarm scale from [0.0, 0.5] followed by the d3.interpolateCool scale from [0.5, 1.0], thus implementing the cyclical less-angry rainbow color scheme
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateRainbow**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from [d3.interpolateWarm](#interpolateWarm) scale from \[0.0, 0.5\] followed by the [d3.interpolateCool](#interpolateCool) scale from \[0.5, 1.0\], thus implementing the cyclical [less-angry rainbow](http://bl.ocks.org/mbostock/310c99e53880faec2434) color scheme.
- name: d3.interpolateRgb()
  id: d3-interpolate#interpolatergb
  summary: Returns an RGB color space interpolator between the two colors a and b with a configurable gamma
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateRgb**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js), [Examples](https://observablehq.com/@d3/working-with-color)

    Or, with a corrected [gamma](#interpolate_gamma) of 2.2:

    Returns an RGB color space interpolator between the two colors *a* and *b* with a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in RGB; they will be converted to RGB using [d3.rgb](d3-color#rgb). The return value of the interpolator is an RGB string.
- name: d3.interpolateRgbBasis()
  id: d3-interpolate#interpolatergbbasis
  summary: Returns a uniform nonrational B-spline interpolator through the specified array of colors, which are converted to RGB color space
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateRgbBasis**(*colors*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js#L54), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to [RGB color space](d3-color#rgb). Implicit control points are generated such that the interpolator returns *colors*\[0\] at *t* = 0 and *colors*\[*colors*.length - 1\] at *t* = 1. Opacity interpolation is not currently supported. See also [d3.interpolateBasis](#interpolateBasis), and see [d3-scale-chromatic](d3-scale-chromatic) for examples.
- name: d3.interpolateRgbBasisClosed()
  id: d3-interpolate#interpolatergbbasisclosed
  summary: Returns a uniform nonrational B-spline interpolator through the specified array of colors, which are converted to RGB color space
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateRgbBasisClosed**(*colors*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js#L55), [Examples](https://observablehq.com/@d3/working-with-color)

    Returns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to [RGB color space](d3-color#rgb). The control points are implicitly repeated such that the resulting spline has cyclical C² continuity when repeated around *t* in \[0,1\]; this is useful, for example, to create cyclical color scales. Opacity interpolation is not currently supported. See also [d3.interpolateBasisClosed](#interpolateBasisClosed), and see [d3-scale-chromatic](d3-scale-chromatic) for examples.
- name: d3.interpolateRound()
  id: d3-interpolate#interpolateround
  summary: Returns an interpolator between the two numbers a and b; the interpolator is similar to interpolateNumber, except it will round the resulting value to the nearest integer
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateRound**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/round.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumber)

    Returns an interpolator between the two numbers *a* and *b*; the interpolator is similar to [interpolateNumber](#interpolateNumber), except it will round the resulting value to the nearest integer.
- name: d3.interpolateSinebow()
  id: d3-scale-chromatic#interpolatesinebow
  summary: Given a number t in the range [0,1], returns the corresponding color from the “sinebow” color scheme by Jim Bumgardner and Charlie Loyd
  belongs_to: scale-chromatic
  description: "###### d3.**interpolateSinebow**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/sinebow.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “sinebow” color scheme by [Jim Bumgardner](https://krazydad.com/tutorials/makecolors.php) and [Charlie Loyd](http://basecase.org/env/on-rainbows).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic)"
- name: d3.interpolateString()
  id: d3-interpolate#interpolatestring
  summary: Returns an interpolator between the two strings a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateString**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/string.js), [Examples](https://observablehq.com/@d3/d3-interpolatestring)

    Returns an interpolator between the two strings *a* and *b*. The string interpolator finds numbers embedded in *a* and *b*, where each number is of the form understood by JavaScript. A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.

    For each number embedded in *b*, the interpolator will attempt to find a corresponding number in *a*. If a corresponding number is found, a numeric interpolator is created using [interpolateNumber](#interpolateNumber). The remaining parts of the string *b* are used as a template: the static parts of the string *b* remain constant for the interpolation, with the interpolated numeric values embedded in the template.

    For example, if *a* is `"300 12px sans-serif"`, and *b* is `"500 36px Comic-Sans"`, two embedded numbers are found. The remaining static parts (of string *b*) are a space between the two numbers (`" "`), and the suffix (`"px Comic-Sans"`). The result of the interpolator at *t* = 0.5 is `"400 24px Comic-Sans"`.
- name: d3.interpolateTransformCss()
  id: d3-interpolate#interpolatetransformcss
  summary: Returns an interpolator between the two 2D CSS transforms represented by a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateTransformCss**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/transform/index.js#L62), [Examples](https://observablehq.com/@d3/d3-interpolatetransformcss)

    Returns an interpolator between the two 2D CSS transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).
- name: d3.interpolateTransformSvg()
  id: d3-interpolate#interpolatetransformsvg
  summary: Returns an interpolator between the two 2D SVG transforms represented by a and b
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateTransformSvg**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/transform/index.js#L63), [Examples](https://observablehq.com/@d3/d3-interpolatetransformcss)

    Returns an interpolator between the two 2D SVG transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).
- name: d3.interpolateTurbo()
  id: d3-scale-chromatic#interpolateturbo
  summary: Given a number t in the range [0,1], returns the corresponding color from the “turbo” color scheme by Anton Mikhailov
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateTurbo**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/turbo.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “turbo” color scheme by [Anton Mikhailov](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html).
- name: d3.interpolateViridis()
  id: d3-scale-chromatic#interpolateviridis
  summary: Given a number t in the range [0,1], returns the corresponding color from the “viridis” perceptually-uniform color scheme designed by van der Walt, Smith and Firing for matplotlib, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateViridis**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from the “viridis” perceptually-uniform color scheme designed by [van der Walt, Smith and Firing](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.
- name: d3.interpolateWarm()
  id: d3-scale-chromatic#interpolatewarm
  summary: Given a number t in the range [0,1], returns the corresponding color from a 180° rotation of Niccoli’s perceptual rainbow, represented as an RGB string
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**interpolateWarm**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js "Source")

    Given a number *t* in the range \[0,1\], returns the corresponding color from a 180° rotation of [Niccoli’s perceptual rainbow](https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/), represented as an RGB string.
- name: d3.interpolateZoom()
  id: d3-interpolate#interpolatezoom
  summary: Returns an interpolator between the two views a and b of a two-dimensional plane, based on “Smooth and efficient zooming and panning” by Jarke J
  belongs_to: interpolate
  description: |-
    ###### d3.**interpolateZoom**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/zoom.js), [Examples](https://observablehq.com/@d3/d3-interpolatezoom)

    Returns an interpolator between the two views *a* and *b* of a two-dimensional plane, based on [“Smooth and efficient zooming and panning”](http://www.win.tue.nl/~vanwijk/zoompan.pdf) by Jarke J. van Wijk and Wim A.A. Nuij. Each view is defined as an array of three numbers: *cx*, *cy* and *width*. The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.

    The returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds. This duration is based on the path length of the curved trajectory through *x,y* space. If you want a slower or faster transition, multiply this by an arbitrary scale factor (*V* as described in the original paper).
- name: d3.interrupt()
  id: d3-transition#interrupt
  summary: Interrupts the active transition of the specified name on the specified node, and cancels any pending transitions with the specified name, if any
  belongs_to: transition
  description: |-
    ###### d3.**interrupt**(*node*\[, *name*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/interrupt.js)

    Interrupts the active transition of the specified *name* on the specified *node*, and cancels any pending transitions with the specified *name*, if any. If a name is not specified, null is used. See also [*selection*.interrupt](#selection_interrupt).
- name: d3.intersection()
  id: d3-array#intersection
  summary: Returns a new InternSet containing every (distinct) value that appears in all of the given iterables
  belongs_to: array
  description: |-
    ###### d3.**intersection**(...*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/intersection.js)

    Returns a new InternSet containing every (distinct) value that appears in all of the given *iterables*. The order of values in the returned set is based on their first occurrence in the given *iterables*.

    ``` javascript
    d3.intersection([0, 2, 1, 0], [1, 3]) // Set {1}
    ```
- name: d3.interval()
  id: d3-timer#interval
  summary: Like timer, except the callback is invoked only every delay milliseconds; if delay is not specified, this is equivalent to timer
  belongs_to: timer
  description: "###### d3.**interval**(*callback*\\[, *delay*\\[, *time*\\]\\]) [Source](https://github.com/d3/d3-timer/blob/master/src/interval.js \"Source\")\n\nLike [timer](#timer), except the *callback* is invoked only every *delay* milliseconds; if *delay* is not specified, this is equivalent to [timer](#timer). A suitable replacement for [setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) that is guaranteed to not run in the background. The *callback* is passed the elapsed time.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-timer](https://github.com/d3/d3-timer)"
- name: d3.isoFormat
  id: d3-time-format#isoformat
  summary: The full ISO 8601 UTC time formatter
  belongs_to: time-format
  description: |-
    ###### d3.**isoFormat** · [Source](https://github.com/d3/d3-time-format/blob/main/src/isoFormat.js)

    The full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time formatter. Where available, this method will use [Date.toISOString](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString) to format.
- name: d3.isoParse
  id: d3-time-format#isoparse
  summary: The full ISO 8601 UTC time parser
  belongs_to: time-format
  description: |-
    ###### d3.**isoParse** · [Source](https://github.com/d3/d3-time-format/blob/main/src/isoParse.js)

    The full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time parser. Where available, this method will use the [Date constructor](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a [UTC parser function](#utcParse):

    ``` javascript
    const strictIsoParse = d3.utcParse("%Y-%m-%dT%H:%M:%S.%LZ");
    ```
- name: d3.json()
  id: d3-fetch#json
  summary: Fetches the JSON file at the specified input URL
  belongs_to: fetch
  description: |-
    ###### d3.**json**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/json.js "Source")

    Fetches the [JSON](http://json.org) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields. If the server returns a status code of [204 No Content](https://developer.mozilla.org/docs/Web/HTTP/Status/204) or [205 Reset Content](https://developer.mozilla.org/docs/Web/HTTP/Status/205), the promise resolves to `undefined`.
- name: d3.json()
  id: d3-request#json
  summary: Returns a new request to get the JSON file at the specified url with the default mime type application/json
  belongs_to: request
  description: |-
    ###### d3.**json**(*url*\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/json.js "Source")

    Returns a new [*request*](#request) to [get](#request_get) the [JSON](http://json.org) file at the specified *url* with the default mime type `application/json`. If no *callback* is specified, this is equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("application/json")
        .response(function(xhr) { return JSON.parse(xhr.responseText); });
    ```

    If a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("application/json")
        .response(function(xhr) { return JSON.parse(xhr.responseText); })
        .get(callback);
    ```
- name: d3.keys()
  id: d3-collection#keys
  summary: Returns an array containing the property names of the specified object (an associative array)
  belongs_to: collection
  description: |-
    ###### d3.**keys**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/keys.js "Source")

    Returns an array containing the property names of the specified object (an associative array). The order of the returned array is undefined.
- name: d3.lab()
  id: d3-color#lab
  summary: Constructs a new CIELAB color
  belongs_to: color
  description: "###### d3.**lab**(*l*, *a*, *b*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**lab**(*specifier*) d3.**lab**(*color*) \n\nConstructs a new [CIELAB](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) color. The channel values are exposed as `l`, `a` and `b` properties on the returned instance. Use the [CIELAB color picker](http://bl.ocks.org/mbostock/9f37cc207c0cb166921b) to explore this color space. The value of *l* is typically in the range \\[0, 100\\], while *a* and *b* are typically in \\[-160, +160\\].\n\nIf *l*, *a* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the CIELAB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELAB. (Colors already in the CIELAB color space skip the conversion to RGB, and colors in the HCL color space are converted directly to CIELAB.)"
- name: d3.lch()
  id: d3-color#lch
  summary: Constructs a new CIELCh_(ab) color
  belongs_to: color
  description: "###### d3.**lch**(*l*, *c*, *h*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/lab.js \"Source\") d3.**lch**(*specifier*) d3.**lch**(*color*) \n\nConstructs a new [CIELCh_(ab)](https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC) color. The channel values are exposed as `l`, `c` and `h` properties on the returned instance. Use the [CIELCh_(ab) color picker](http://bl.ocks.org/mbostock/3e115519a1b495e0bd95) to explore this color space. The value of *l* is typically in the range \\[0, 100\\], *c* is typically in \\[0, 230\\], and *h* is typically in \\[0, 360).\n\nIf *l*, *c*, and *h* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to CIELCh_(ab) color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELCh_(ab). (Colors already in CIELCh_(ab) color space skip the conversion to RGB, and colors in CIELAB color space are converted directly to CIELCh_(ab).)"
- name: d3.least()
  id: d3-array#least
  summary: Returns the least element of the specified iterable according to the specified comparator or accessor
  belongs_to: array
  description: |-
    ###### d3.**least**(*iterable*\[, *comparator*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/least.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**least**(*iterable*\[, *accessor*\])

    Returns the least element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns undefined. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:

    ``` javascript
    const array = [{foo: 42}, {foo: 91}];
    d3.least(array, (a, b) => a.foo - b.foo); // {foo: 42}
    d3.least(array, (a, b) => b.foo - a.foo); // {foo: 91}
    d3.least(array, a => a.foo); // {foo: 42}
    ```

    This function is similar to [min](#min), except it allows the use of a comparator rather than an accessor.
- name: d3.leastIndex()
  id: d3-array#leastindex
  summary: Returns the index of the least element of the specified iterable according to the specified comparator or accessor
  belongs_to: array
  description: |-
    ###### d3.**leastIndex**(*iterable*\[, *comparator*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/leastIndex.js), [Examples](https://observablehq.com/@d3/d3-least) d3.**leastIndex**(*iterable*\[, *accessor*\])

    Returns the index of the least element of the specified *iterable* according to the specified *comparator* or *accessor*. If the given *iterable* contains no comparable elements (*i.e.*, the comparator returns NaN when comparing each element to itself), returns -1. If *comparator* is not specified, it defaults to [ascending](#ascending). For example:

    ``` javascript
    const array = [{foo: 42}, {foo: 91}];
    d3.leastIndex(array, (a, b) => a.foo - b.foo); // 0
    d3.leastIndex(array, (a, b) => b.foo - a.foo); // 1
    d3.leastIndex(array, a => a.foo); // 0
    ```

    This function is similar to [minIndex](#minIndex), except it allows the use of a comparator rather than an accessor.
- name: d3.line()
  id: d3-shape#line
  summary: Constructs a new line generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**line**(\[*x*\]\[, *y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    Constructs a new line generator with the default settings. If *x* or *y* are specified, sets the corresponding accessors to the specified function or number and returns this line generator.
- name: d3.lineRadial()
  id: d3-shape#lineradial
  summary: Constructs a new radial line generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**lineRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)

    Constructs a new radial line generator with the default settings. A radial line generator is equivalent to the standard Cartesian [line generator](#line), except the [x](#line_x) and [y](#line_y) accessors are replaced with [angle](#lineRadial_angle) and [radius](#lineRadial_radius) accessors. Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.
- name: d3.link()
  id: d3-shape#link
  summary: Returns a new link generator using the specified curve
  belongs_to: shape
  description: |-
    ###### d3.**link**(*curve*) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Returns a new [link generator](#_link) using the specified *curve*. For example, to visualize [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the top edge of the display, you might say:

    ``` javascript
    const link = d3.link(d3.curveBumpY)
        .x(d => d.x)
        .y(d => d.y);
    ```
- name: d3.linkHorizontal()
  id: d3-shape#linkhorizontal
  summary: Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display
  belongs_to: shape
  description: |-
    ###### d3.**linkHorizontal**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Shorthand for [d3.link](#link) with [d3.curveBumpX](#curveBumpX); suitable for visualizing [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the left edge of the display. Equivalent to:

    ``` javascript
    const link = d3.link(d3.curveBumpX);
    ```
- name: d3.linkRadial()
  id: d3-shape#linkradial
  summary: Returns a new link generator with radial tangents
  belongs_to: shape
  description: |-
    ###### d3.**linkRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Returns a new [link generator](#_link) with radial tangents. For example, to visualize [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted in the center of the display, you might say:

    ``` javascript
    const link = d3.linkRadial()
        .angle(d => d.x)
        .radius(d => d.y);
    ```
- name: d3.linkVertical()
  id: d3-shape#linkvertical
  summary: Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display
  belongs_to: shape
  description: |-
    ###### d3.**linkVertical**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Shorthand for [d3.link](#link) with [d3.curveBumpY](#curveBumpY); suitable for visualizing [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the top edge of the display. Equivalent to:

    ``` javascript
    const link = d3.link(d3.curveBumpY);
    ```
- name: d3.local()
  id: d3-selection#local
  summary: Declares a new local variable
  belongs_to: selection
  description: |-
    ###### d3.**local**() · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)

    Declares a new local variable. For example:

    ``` javascript
    const foo = d3.local();
    ```

    Like `var`, each local is a distinct symbolic reference; unlike `var`, the value of each local is also scoped by the DOM.
- name: d3.map()
  id: d3-array#map
  summary: Returns a new array containing the mapped values from iterable, in order, as defined by given mapper function
  belongs_to: array
  description: |-
    ###### d3.**map**(*iterable*, *mapper*) · [Source](https://github.com/d3/d3-array/blob/main/src/map.js)

    Returns a new array containing the mapped values from *iterable*, in order, as defined by given *mapper* function. Equivalent to [*array*.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from):

    ``` javascript
    d3.map(new Set([0, 2, 3, 4]), x => x & 1) // [0, 0, 1, 0]
    ```
- name: d3.map()
  id: d3-collection#map
  summary: Constructs a new map
  belongs_to: collection
  description: |-
    ###### d3.**map**(\[*object*\[, *key*\]\]) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js "Source")

    Constructs a new map. If *object* is specified, copies all enumerable properties from the specified object into this map. The specified object may also be an array or another map. An optional *key* function may be specified to compute the key for each value in the array. For example:

    ``` javascript
    var map = d3.map([{name: "foo"}, {name: "bar"}], function(d) { return d.name; });
    map.get("foo"); // {"name": "foo"}
    map.get("bar"); // {"name": "bar"}
    map.get("baz"); // undefined
    ```

    See also [nests](#nests).
- name: d3.matcher()
  id: d3-selection#matcher
  summary: Given the specified selector, returns a function which returns true if this element matches the specified selector
  belongs_to: selection
  description: |-
    ###### d3.**matcher**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/matcher.js)

    Given the specified *selector*, returns a function which returns true if `this` element [matches](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches) the specified selector. This method is used internally by [*selection*.filter](#selection_filter). For example, this:

    ``` javascript
    const div = selection.filter("div");
    ```

    Is equivalent to:

    ``` javascript
    const div = selection.filter(d3.matcher("div"));
    ```

    (Although D3 is not a compatibility layer, this implementation does support vendor-prefixed implementations due to the recent standardization of *element*.matches.)
- name: d3.max()
  id: d3-array#max
  summary: Returns the maximum value in the given iterable using natural order
  belongs_to: array
  description: |-
    ###### d3.**max**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/max.js), [Examples](https://observablehq.com/@d3/d3-extent)

    Returns the maximum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the maximum value.

    Unlike the built-in [Math.max](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/max), this method ignores undefined values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the maximum of the strings \[“20”, “3”\] is “3”, while the maximum of the numbers \[20, 3\] is 20.

    See also [extent](#extent).
- name: d3.maxIndex()
  id: d3-array#maxindex
  summary: Returns the index of the maximum value in the given iterable using natural order
  belongs_to: array
  description: |-
    ###### d3.**maxIndex**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/maxIndex.js), [Examples](https://observablehq.com/@d3/d3-extent)

    Returns the index of the maximum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns -1. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the maximum value.

    Unlike the built-in [Math.max](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/max), this method ignores undefined values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the maximum of the strings \[“20”, “3”\] is “3”, while the maximum of the numbers \[20, 3\] is 20.
- name: d3.mean()
  id: d3-array#mean
  summary: Returns the mean of the given iterable of numbers
  belongs_to: array
  description: |-
    ###### d3.**mean**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/mean.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Returns the mean of the given *iterable* of numbers. If the iterable contains no numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the mean. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.median()
  id: d3-array#median
  summary: Returns the median of the given iterable of numbers using the R-7 method
  belongs_to: array
  description: |-
    ###### d3.**median**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/median.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Returns the median of the given *iterable* of numbers using the [R-7 method](https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample). If the iterable contains no numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the median. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.medianIndex()
  id: d3-array#medianindex
  summary: Similar to median, but returns the index of the element to the left of the median
  belongs_to: array
  description: |-
    ###### d3.**medianIndex**(*array*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/median.js)

    Similar to *median*, but returns the index of the element to the left of the median.
- name: d3.merge()
  id: d3-array#merge
  summary: Merges the specified iterable of iterables into a single array
  belongs_to: array
  description: |-
    ###### d3.**merge**(*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/merge.js), [Examples](https://observablehq.com/@d3/d3-merge)

    Merges the specified iterable of *iterables* into a single array. This method is similar to the built-in array concat method; the only difference is that it is more convenient when you have an array of arrays.

    ``` javascript
    d3.merge([[1], [2, 3]]); // returns [1, 2, 3]
    ```
- name: d3.min()
  id: d3-array#min
  summary: Returns the minimum value in the given iterable using natural order
  belongs_to: array
  description: |-
    ###### d3.**min**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/min.js), [Examples](https://observablehq.com/@d3/d3-extent)

    Returns the minimum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the minimum value.

    Unlike the built-in [Math.min](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/min), this method ignores undefined, null and NaN values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the minimum of the strings \[“20”, “3”\] is “20”, while the minimum of the numbers \[20, 3\] is 3.

    See also [extent](#extent).
- name: d3.minIndex()
  id: d3-array#minindex
  summary: Returns the index of the minimum value in the given iterable using natural order
  belongs_to: array
  description: |-
    ###### d3.**minIndex**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/minIndex.js), [Examples](https://observablehq.com/@d3/d3-extent)

    Returns the index of the minimum value in the given *iterable* using natural order. If the iterable contains no comparable values, returns -1. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the minimum value.

    Unlike the built-in [Math.min](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/min), this method ignores undefined, null and NaN values; this is useful for ignoring missing data. In addition, elements are compared using natural order rather than numeric order. For example, the minimum of the strings \[“20”, “3”\] is “20”, while the minimum of the numbers \[20, 3\] is 3.
- name: d3.mode()
  id: d3-array#mode
  summary: Returns the mode of the given iterable, i.e
  belongs_to: array
  description: |-
    ###### d3.**mode**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/mode.js), [Examples](https://observablehq.com/@d3/d3-mode)

    Returns the mode of the given *iterable*, *i.e.* the value which appears the most often. In case of equality, returns the first of the relevant values. If the iterable contains no comparable values, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the mode. This method ignores undefined, null and NaN values; this is useful for ignoring missing data.
- name: d3.namespace()
  id: d3-selection#namespace
  summary: Qualifies the specified name, which may or may not have a namespace prefix
  belongs_to: selection
  description: "###### d3.**namespace**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/namespace.js)\n\nQualifies the specified *name*, which may or may not have a namespace prefix. If the name contains a colon (`:`), the substring before the colon is interpreted as the namespace prefix, which must be registered in [d3.namespaces](#namespaces). Returns an object `space` and `local` attributes describing the full namespace URL and the local name. For example:\n\n``` javascript\nd3.namespace(\"svg:text\"); // {space: \"http://www.w3.org/2000/svg\", local: \"text\"}\n```\n\nIf the name does not contain a colon, this function merely returns the input name.\n\n###### d3.**namespaces** · [Source](https://github.com/d3/d3-selection/blob/master/src/namespaces.js)\n\nThe map of registered namespace prefixes. The initial value is:\n\n``` javascript\n{\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: \"http://www.w3.org/1999/xhtml\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n}\n```\n\nAdditional prefixes may be assigned as needed to create elements or attributes in other namespaces.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-selection](https://github.com/d3/d3-selection)"
- name: d3.namespaces
  id: d3-selection#namespaces
  summary: XML namespaces are fun! Right? Fortunately you can mostly ignore them
  belongs_to: selection
  description: |-
    ### Namespaces

    XML namespaces are fun! Right? Fortunately you can mostly ignore them.
- name: d3.nest()
  id: d3-collection#nest
  summary: Creates a new nest operator
  belongs_to: collection
  description: |-
    ###### d3.**nest**() [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js "Source")

    Creates a new nest operator. The set of keys is initially empty.
- name: d3.nice()
  id: d3-array#nice
  summary: Returns a new interval [niceStart, niceStop] covering the given interval [start, stop] and where niceStart and niceStop are guaranteed to align with the corresponding tick step
  belongs_to: array
  description: |-
    ###### d3.**nice**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/nice.js)

    Returns a new interval \[*niceStart*, *niceStop*\] covering the given interval \[*start*, *stop*\] and where *niceStart* and *niceStop* are guaranteed to align with the corresponding [tick step](#tickStep). Like [d3.tickIncrement](#tickIncrement), this requires that *start* is less than or equal to *stop*.
- name: d3.now()
  id: d3-timer#now
  summary: Returns the current time as defined by performance.now if available, and Date.now if not
  belongs_to: timer
  description: |-
    ###### d3.**now**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js "Source")

    Returns the current time as defined by [performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) if available, and [Date.now](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now) if not. The current time is updated at the start of a frame; it is thus consistent during the frame, and any timers scheduled during the same frame will be synchronized. If this method is called outside of a frame, such as in response to a user event, the current time is calculated and then fixed until the next frame, again ensuring consistent timing during event handling.
- name: d3.pack()
  id: d3-hierarchy#pack
  summary: Enclosure diagrams use containment (nesting) to represent a hierarchy
  belongs_to: hierarchy
  description: |-
    ### Pack

    Enclosure diagrams use containment (nesting) to represent a hierarchy. The size of the leaf circles encodes a quantitative dimension of the data. The enclosing circles show the approximate cumulative size of each subtree, but due to wasted space there is some distortion; only the leaf nodes can be compared accurately. Although [circle packing](http://en.wikipedia.org/wiki/Circle_packing) does not use space as efficiently as a [treemap](#treemap), the “wasted” space more prominently reveals the hierarchical structure.

    ###### d3.**pack**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/index.js), [Examples](https://observablehq.com/@d3/circle-packing)

    Creates a new pack layout with the default settings.
- name: d3.packEnclose()
  id: d3-hierarchy#packenclose
  summary: Computes the smallest circle that encloses the specified array of circles, each of which must have a circle.r property specifying the circle’s radius, and circle.x and circle.y properties specifying the circle’s center
  belongs_to: hierarchy
  description: "###### d3.**packEnclose**(*circles*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/enclose.js), [Examples](https://observablehq.com/@d3/d3-packenclose)\n\nComputes the [smallest circle](https://en.wikipedia.org/wiki/Smallest-circle_problem) that encloses the specified array of *circles*, each of which must have a *circle*.r property specifying the circle’s radius, and *circle*.x and *circle*.y properties specifying the circle’s center. The enclosing circle is computed using the [Matoušek-Sharir-Welzl algorithm](http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf). (See also [Apollonius’ Problem](https://bl.ocks.org/mbostock/751fdd637f4bc2e3f08b).)\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hierarchy](https://github.com/d3/d3-hierarchy)"
- name: d3.packSiblings()
  id: d3-hierarchy#packsiblings
  summary: Packs the specified array of circles, each of which must have a circle.r property specifying the circle’s radius
  belongs_to: hierarchy
  description: |-
    ###### d3.**packSiblings**(*circles*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/siblings.js)

    Packs the specified array of *circles*, each of which must have a *circle*.r property specifying the circle’s radius. Assigns the following properties to each circle:

    - *circle*.x - the *x*-coordinate of the circle’s center
    - *circle*.y - the *y*-coordinate of the circle’s center

    The circles are positioned according to the front-chain packing algorithm by [Wang *et al.*](https://dl.acm.org/citation.cfm?id=1124851)
- name: d3.pairs()
  id: d3-array#pairs
  summary: For each adjacent pair of elements in the specified iterable, in order, invokes the specified reducer function passing the element i and element i - 1
  belongs_to: array
  description: |-
    ###### d3.**pairs**(*iterable*\[, *reducer*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/pairs.js), [Examples](https://observablehq.com/@d3/d3-pairs)

    For each adjacent pair of elements in the specified *iterable*, in order, invokes the specified *reducer* function passing the element *i* and element *i* - 1. If a *reducer* is not specified, it defaults to a function which creates a two-element array for each pair:

    ``` javascript
    function pair(a, b) {
      return [a, b];
    }
    ```

    For example:

    ``` javascript
    d3.pairs([1, 2, 3, 4]); // returns [[1, 2], [2, 3], [3, 4]]
    d3.pairs([1, 2, 3, 4], (a, b) => b - a); // returns [1, 1, 1];
    ```

    If the specified iterable has fewer than two elements, returns the empty array.
- name: d3.partition()
  id: d3-hierarchy#partition
  summary: 'The partition layout produces adjacency diagrams: a space-filling variant of a node-link tree diagram'
  belongs_to: hierarchy
  description: |-
    ### Partition

    The **partition layout** produces adjacency diagrams: a space-filling variant of a node-link tree diagram. Rather than drawing a link between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or rectangles), and their placement relative to other nodes reveals their position in the hierarchy. The size of the nodes encodes a quantitative dimension that would be difficult to show in a node-link diagram.

    ###### d3.**partition**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/partition.js), [Examples](https://observablehq.com/@d3/icicle)

    Creates a new partition layout with the default settings.
- name: d3.path()
  id: d3-path#path
  summary: Constructs a new path serializer that implements CanvasPathMethods
  belongs_to: path
  description: |-
    ###### d3.**path**() · [Source](https://github.com/d3/d3-path/blob/master/src/path.js), [Examples](https://observablehq.com/@d3/d3-path)

    Constructs a new path serializer that implements [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods).
- name: d3.pathRound()
  id: d3-path#pathround
  summary: Like d3.path, except limits the digits after the decimal to the specified number of digits
  belongs_to: path
  description: "###### d3.**pathRound**(*digits* = 3) · [Source](https://github.com/d3/d3-path/blob/master/src/path.js), [Examples](https://observablehq.com/@d3/d3-path)\n\nLike [d3.path](#path), except limits the digits after the decimal to the specified number of *digits*.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-path](https://github.com/d3/d3-path)"
- name: d3.permute()
  id: d3-array#permute
  summary: Returns a permutation of the specified source object (or array) using the specified iterable of keys
  belongs_to: array
  description: |-
    ###### d3.**permute**(*source*, *keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/permute.js), [Examples](https://observablehq.com/@d3/d3-permute)

    Returns a permutation of the specified *source* object (or array) using the specified iterable of *keys*. The returned array contains the corresponding property of the source object for each key in *keys*, in order. For example:

    ``` javascript
    permute(["a", "b", "c"], [1, 2, 0]); // returns ["b", "c", "a"]
    ```

    It is acceptable to have more keys than source elements, and for keys to be duplicated or omitted.

    This method can also be used to extract the values from an object into an array with a stable order. Extracting keyed values in order can be useful for generating data arrays in nested selections. For example:

    ``` javascript
    let object = {yield: 27, variety: "Manchuria", year: 1931, site: "University Farm"};
    let fields = ["site", "variety", "yield"];

    d3.permute(object, fields); // returns ["University Farm", "Manchuria", 27]
    ```
- name: d3.pie()
  id: d3-shape#pie
  summary: Constructs a new pie generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**pie**() · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    Constructs a new pie generator with the default settings.
- name: d3.piecewise()
  id: d3-interpolate#piecewise
  summary: Returns a piecewise interpolator, composing interpolators for each adjacent pair of values
  belongs_to: interpolate
  description: "### Piecewise\n\n###### d3.**piecewise**(\\[*interpolate*, \\]*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/piecewise.js), [Examples](https://observablehq.com/@d3/d3-piecewise)\n\nReturns a piecewise interpolator, composing interpolators for each adjacent pair of *values*. The returned interpolator maps *t* in \\[0, 1 / (*n* - 1)\\] to *interpolate*(*values*\\[0\\], *values*\\[1\\]), *t* in \\[1 / (*n* - 1), 2 / (*n* - 1)\\] to *interpolate*(*values*\\[1\\], *values*\\[2\\]), and so on, where *n* = *values*.length. In effect, this is a lightweight [linear scale](d3-scale#linear-scales). For example, to blend through red, green and blue:\n\n``` javascript\nconst interpolate = d3.piecewise(d3.interpolateRgb.gamma(2.2), [\"red\", \"green\", \"blue\"]);\n```\n\nIf *interpolate* is not specified, defaults to [d3.interpolate](#interpolate).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-interpolate](https://github.com/d3/d3-interpolate)"
- name: d3.pointer()
  id: d3-selection#pointer
  summary: Returns a two-element array of numbers [x, y] representing the coordinates of the specified event relative to the specified target
  belongs_to: selection
  description: |-
    ###### d3.**pointer**(*event*\[, *target*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/pointer.js)

    Returns a two-element array of numbers \[*x*, *y*\] representing the coordinates of the specified *event* relative to the specified *target*. *event* can be a [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent), a [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent), a [Touch](https://www.w3.org/TR/touch-events/#touch-interface), or a custom event holding a UIEvent as *event*.sourceEvent.

    If *target* is not specified, it defaults to the source event’s currentTarget property, if available. If the *target* is an SVG element, the event’s coordinates are transformed using the [inverse](https://www.w3.org/TR/geometry-1/#dom-dommatrixreadonly-inverse) of the [screen coordinate transformation matrix](https://www.w3.org/TR/SVG/types.html#__svg__SVGGraphicsElement__getScreenCTM). If the *target* is an HTML element, the event’s coordinates are translated relative to the top-left corner of the *target*’s [bounding client rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). (As such, the coordinate system can only be translated relative to the client coordinates. See also [GeometryUtils](https://www.w3.org/TR/cssom-view-1/#the-geometryutils-interface).) Otherwise, \[*event*.pageX, *event*.pageY\] is returned.
- name: d3.pointers()
  id: d3-selection#pointers
  summary: Returns an array [[x0, y0], [x1, y1]…] of coordinates of the specified event’s pointer locations relative to the specified target
  belongs_to: selection
  description: |-
    ###### d3.**pointers**(*event*\[, *target*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/pointers.js)

    Returns an array \[\[*x0*, *y0*\], \[*x1*, *y1*\]…\] of coordinates of the specified *event*’s pointer locations relative to the specified *target*. For touch events, the returned array of positions corresponds to the *event*.touches array; for other events, returns a single-element array.

    If *target* is not specified, it defaults to the source event’s currentTarget property, if any.

    ### Control Flow

    For advanced usage, selections provide methods for custom control flow.
- name: d3.pointRadial()
  id: d3-shape#pointradial
  summary: Returns the point [x, y] for the given angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise, and the given radius
  belongs_to: shape
  description: |-
    ###### d3.**pointRadial**(*angle*, *radius*) · [Source](https://github.com/d3/d3-shape/blob/main/src/pointRadial.js), [Examples](https://observablehq.com/@d3/radial-area-chart)

    Returns the point \[*x*, *y*\] for the given *angle* in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise, and the given *radius*.

    ### Custom Symbol Types

    Symbol types are typically not used directly, instead being passed to [*symbol*.type](#symbol_type). However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface. You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.
- name: d3.polygonArea()
  id: d3-polygon#polygonarea
  summary: Returns the signed area of the specified polygon
  belongs_to: polygon
  description: |-
    ###### d3.**polygonArea**(*polygon*) [\<\>](https://github.com/d3/d3-polygon/blob/master/src/area.js "Source Code")

    Returns the signed area of the specified *polygon*. If the vertices of the polygon are in counterclockwise order (assuming a coordinate system where the origin ⟨0,0⟩ is in the top-left corner), the returned area is positive; otherwise it is negative, or zero.
- name: d3.polygonCentroid()
  id: d3-polygon#polygoncentroid
  summary: Returns the centroid of the specified polygon
  belongs_to: polygon
  description: |-
    ###### d3.**polygonCentroid**(*polygon*) [\<\>](https://github.com/d3/d3-polygon/blob/master/src/centroid.js "Source Code")

    Returns the [centroid](https://en.wikipedia.org/wiki/Centroid) of the specified *polygon*.
- name: d3.polygonContains()
  id: d3-polygon#polygoncontains
  summary: Returns true if and only if the specified point is inside the specified polygon
  belongs_to: polygon
  description: |-
    ###### d3.**polygonContains**(*polygon*, *point*) [\<\>](https://github.com/d3/d3-polygon/blob/master/src/contains.js "Source Code")

    Returns true if and only if the specified *point* is inside the specified *polygon*.
- name: d3.polygonHull()
  id: d3-polygon#polygonhull
  summary: Returns the convex hull of the specified points using Andrew’s monotone chain algorithm
  belongs_to: polygon
  description: |-
    ###### d3.**polygonHull**(*points*) [\<\>](https://github.com/d3/d3-polygon/blob/master/src/hull.js#L23 "Source Code")

    Returns the [convex hull](https://en.wikipedia.org/wiki/Convex_hull) of the specified *points* using [Andrew’s monotone chain algorithm](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain). The returned hull is represented as an array containing a subset of the input *points* arranged in counterclockwise order. Returns null if *points* has fewer than three elements.
- name: d3.polygonLength()
  id: d3-polygon#polygonlength
  summary: Returns the length of the perimeter of the specified polygon
  belongs_to: polygon
  description: "###### d3.**polygonLength**(*polygon*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/length.js \"Source Code\")\n\nReturns the length of the perimeter of the specified *polygon*.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-polygon](https://github.com/d3/d3-polygon)"
- name: d3.precisionFixed()
  id: d3-format#precisionfixed
  summary: Returns a suggested decimal precision for fixed point notation given the specified numeric step value
  belongs_to: format
  description: |-
    ###### d3.**precisionFixed**(*step*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionFixed.js "Source")

    Returns a suggested decimal precision for fixed point notation given the specified numeric *step* value. The *step* represents the minimum absolute difference between values that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1, 1.5, and 2, the *step* should be 0.5 and the suggested precision is 1:

    ``` javascript
    const p = d3.precisionFixed(0.5);
    const f = d3.format("." + p + "f");
    f(1);   // "1.0"
    f(1.5); // "1.5"
    f(2);   // "2.0"
    ```

    Whereas for the numbers 1, 2 and 3, the *step* should be 1 and the suggested precision is 0:

    ``` javascript
    const p = d3.precisionFixed(1);
    const f = d3.format("." + p + "f");
    f(1); // "1"
    f(2); // "2"
    f(3); // "3"
    ```

    Note: for the `%` format type, subtract two:

    ``` javascript
    const p = Math.max(0, d3.precisionFixed(0.05) - 2);
    const f = d3.format("." + p + "%");
    f(0.45); // "45%"
    f(0.50); // "50%"
    f(0.55); // "55%"
    ```
- name: d3.precisionPrefix()
  id: d3-format#precisionprefix
  summary: Returns a suggested decimal precision for use with locale.formatPrefix given the specified numeric step and reference value
  belongs_to: format
  description: |-
    ###### d3.**precisionPrefix**(*step*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionPrefix.js "Source")

    Returns a suggested decimal precision for use with [*locale*.formatPrefix](#locale_formatPrefix) given the specified numeric *step* and reference *value*. The *step* represents the minimum absolute difference between values that will be formatted, and *value* determines which SI prefix will be used. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1.1e6, 1.2e6, and 1.3e6, the *step* should be 1e5, the *value* could be 1.3e6, and the suggested precision is 1:

    ``` javascript
    const p = d3.precisionPrefix(1e5, 1.3e6);
    const f = d3.formatPrefix("." + p, 1.3e6);
    f(1.1e6); // "1.1M"
    f(1.2e6); // "1.2M"
    f(1.3e6); // "1.3M"
    ```
- name: d3.precisionRound()
  id: d3-format#precisionround
  summary: Returns a suggested decimal precision for format types that round to significant digits given the specified numeric step and max values
  belongs_to: format
  description: |-
    ###### d3.**precisionRound**(*step*, *max*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionRound.js "Source")

    Returns a suggested decimal precision for format types that round to significant digits given the specified numeric *step* and *max* values. The *step* represents the minimum absolute difference between values that will be formatted, and the *max* represents the largest absolute value that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 0.99, 1.0, and 1.01, the *step* should be 0.01, the *max* should be 1.01, and the suggested precision is 3:

    ``` javascript
    const p = d3.precisionRound(0.01, 1.01);
    const f = d3.format("." + p + "r");
    f(0.99); // "0.990"
    f(1.0);  // "1.00"
    f(1.01); // "1.01"
    ```

    Whereas for the numbers 0.9, 1.0, and 1.1, the *step* should be 0.1, the *max* should be 1.1, and the suggested precision is 2:

    ``` javascript
    const p = d3.precisionRound(0.1, 1.1);
    const f = d3.format("." + p + "r");
    f(0.9); // "0.90"
    f(1.0); // "1.0"
    f(1.1); // "1.1"
    ```

    Note: for the `e` format type, subtract one:

    ``` javascript
    const p = Math.max(0, d3.precisionRound(0.01, 1.01) - 1);
    const f = d3.format("." + p + "e");
    f(0.01); // "1.00e-2"
    f(1.01); // "1.01e+0"
    ```

    ### Locales
- name: d3.quadtree()
  id: d3-quadtree#quadtree
  summary: Creates a new, empty quadtree with an empty extent and the default x- and y-accessors
  belongs_to: quadtree
  description: |-
    ###### d3.**quadtree**(\[*data*\[, *x*, *y*\]\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/quadtree.js "Source")

    Creates a new, empty quadtree with an empty [extent](#quadtree_extent) and the default [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors. If *data* is specified, [adds](#quadtree_addAll) the specified iterable of data to the quadtree. This is equivalent to:

    ``` javascript
    const tree = d3.quadtree()
        .addAll(data);
    ```

    If *x* and *y* are also specified, sets the [*x*-](#quadtree_x) and [*y*-](#quadtree_y) accessors to the specified functions before adding the specified iterable of data to the quadtree, equivalent to:

    ``` javascript
    const tree = d3.quadtree()
        .x(x)
        .y(y)
        .addAll(data);
    ```
- name: d3.quantile()
  id: d3-array#quantile
  summary: Returns the p-quantile of the given iterable of numbers, where p is a number in the range [0, 1]
  belongs_to: array
  description: |-
    ###### d3.**quantile**(*iterable*, *p*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Returns the *p*-quantile of the given *iterable* of numbers, where *p* is a number in the range \[0, 1\]. For example, the median can be computed using *p* = 0.5, the first quartile at *p* = 0.25, and the third quartile at *p* = 0.75. This particular implementation uses the [R-7 method](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population), which is the default for the R programming language and Excel. For example:

    ``` javascript
    var a = [0, 10, 30];
    d3.quantile(a, 0); // 0
    d3.quantile(a, 0.5); // 10
    d3.quantile(a, 1); // 30
    d3.quantile(a, 0.25); // 5
    d3.quantile(a, 0.75); // 20
    d3.quantile(a, 0.1); // 2
    ```

    An optional *accessor* function may be specified, which is equivalent to calling *array*.map(*accessor*) before computing the quantile.
- name: d3.quantileIndex()
  id: d3-array#quantileindex
  summary: Similar to quantile, but returns the index to the left of p
  belongs_to: array
  description: |-
    ###### d3.**quantileIndex**(*array*, *p*\[, *accessor*\]) [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js "Source")

    Similar to *quantile*, but returns the index to the left of *p*.
- name: d3.quantileSorted()
  id: d3-array#quantilesorted
  summary: Similar to quantile, but expects the input to be a sorted array of values
  belongs_to: array
  description: |-
    ###### d3.**quantileSorted**(*array*, *p*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/quantile.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Similar to *quantile*, but expects the input to be a **sorted** *array* of values. In contrast with *quantile*, the accessor is only called on the elements needed to compute the quantile.
- name: d3.quantize()
  id: d3-interpolate#quantize
  summary: Returns n uniformly-spaced samples from the specified interpolator, where n is an integer greater than one
  belongs_to: interpolate
  description: |-
    ###### d3.**quantize**(*interpolator*, *n*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/d3-quantize)

    Returns *n* uniformly-spaced samples from the specified *interpolator*, where *n* is an integer greater than one. The first sample is always at *t* = 0, and the last sample is always at *t* = 1. This can be useful in generating a fixed number of samples from a given interpolator, such as to derive the range of a [quantize scale](d3-scale#quantize-scales) from a [continuous interpolator](d3-scale-chromatic#interpolateWarm).

    Caution: this method will not work with interpolators that do not return defensive copies of their output, such as [d3.interpolateArray](#interpolateArray), [d3.interpolateDate](#interpolateDate) and [d3.interpolateObject](#interpolateObject). For those interpolators, you must wrap the interpolator and create a copy for each returned value.

    ### Color Spaces
- name: d3.queue()
  id: d3-queue#queue
  summary: Constructs a new queue with the specified concurrency
  belongs_to: queue
  description: |-
    ###### d3.**queue**(\[*concurrency*\]) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js "Source")

    Constructs a new queue with the specified *concurrency*. If *concurrency* is not specified, the queue has infinite concurrency. Otherwise, *concurrency* is a positive integer. For example, if *concurrency* is 1, then all tasks will be run in series. If *concurrency* is 3, then at most three tasks will be allowed to proceed concurrently; this is useful, for example, when loading resources in a web browser.
- name: d3.randomBates()
  id: d3-random#randombates
  summary: Returns a function for generating random numbers with a Bates distribution with n independent variables
  belongs_to: random
  description: |-
    ###### d3.**randomBates**(*n*) · [Source](https://github.com/d3/d3-random/blob/master/src/bates.js), [Examples](https://observablehq.com/@d3/d3-random#bates)

    Returns a function for generating random numbers with a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution) with *n* independent variables. The case of fractional *n* is handled as with d3.randomIrwinHall, and d3.randomBates(0) is equivalent to d3.randomUniform().
- name: d3.randomBernoulli()
  id: d3-random#randombernoulli
  summary: Returns a function for generating either 1 or 0 according to a Bernoulli distribution with 1 being returned with success probability p and 0 with failure probability q = 1 - p
  belongs_to: random
  description: |-
    ###### d3.**randomBernoulli**(*p*) · [Source](https://github.com/d3/d3-random/blob/master/src/bernoulli.js), [Examples](https://observablehq.com/@d3/d3-random#bernoulli)

    Returns a function for generating either 1 or 0 according to a [Bernoulli distribution](https://en.wikipedia.org/wiki/Binomial_distribution) with 1 being returned with success probability *p* and 0 with failure probability *q* = 1 - *p*. The value *p* is in the range \[0, 1\].
- name: d3.randomBeta()
  id: d3-random#randombeta
  summary: Returns a function for generating random numbers with a beta distribution with alpha and beta shape parameters, which must both be positive
  belongs_to: random
  description: |-
    ###### d3.**randomBeta**(*alpha*, *beta*) · [Source](https://github.com/d3/d3-random/blob/master/src/beta.js), [Examples](https://observablehq.com/@parcly-taxel/the-gamma-and-beta-distributions)

    Returns a function for generating random numbers with a [beta distribution](https://en.wikipedia.org/wiki/Beta_distribution) with *alpha* and *beta* shape parameters, which must both be positive.
- name: d3.randomBinomial()
  id: d3-random#randombinomial
  summary: Returns a function for generating random numbers with a binomial distribution with n the number of trials and p the probability of success in each trial
  belongs_to: random
  description: |-
    ###### d3.**randomBinomial**(*n*, *p*) · [Source](https://github.com/d3/d3-random/blob/master/src/binomial.js), [Examples](https://observablehq.com/@d3/d3-random#binomial)

    Returns a function for generating random numbers with a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution) with *n* the number of trials and *p* the probability of success in each trial. The value *n* is greater or equal to 0, and the value *p* is in the range \[0, 1\].
- name: d3.randomCauchy()
  id: d3-random#randomcauchy
  summary: Returns a function for generating random numbers with a Cauchy distribution
  belongs_to: random
  description: |-
    ###### d3.**randomCauchy**(\[*a*\], \[*b*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/cauchy.js), [Examples](https://observablehq.com/@parcly-taxel/cauchy-and-logistic-distributions)

    Returns a function for generating random numbers with a [Cauchy distribution](https://en.wikipedia.org/wiki/Cauchy_distribution). *a* and *b* have the same meanings and default values as in d3.randomWeibull.
- name: d3.randomExponential()
  id: d3-random#randomexponential
  summary: Returns a function for generating random numbers with an exponential distribution with the rate lambda; equivalent to time between events in a Poisson process with a mean of 1 / lambda
  belongs_to: random
  description: |-
    ###### d3.**randomExponential**(*lambda*) · [Source](https://github.com/d3/d3-random/blob/master/src/exponential.js), [Examples](https://observablehq.com/@d3/d3-random#exponential)

    Returns a function for generating random numbers with an [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution) with the rate *lambda*; equivalent to time between events in a [Poisson process](https://en.wikipedia.org/wiki/Poisson_point_process) with a mean of 1 / *lambda*. For example, exponential(1/40) generates random times between events where, on average, one event occurs every 40 units of time.
- name: d3.randomGamma()
  id: d3-random#randomgamma
  summary: Returns a function for generating random numbers with a gamma distribution with k the shape parameter and theta the scale parameter
  belongs_to: random
  description: |-
    ###### d3.**randomGamma**(*k*, \[*theta*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/gamma.js), [Examples](https://observablehq.com/@parcly-taxel/the-gamma-and-beta-distributions)

    Returns a function for generating random numbers with a [gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution) with *k* the shape parameter and *theta* the scale parameter. The value *k* must be a positive value; if *theta* is not specified, it defaults to 1.
- name: d3.randomGeometric()
  id: d3-random#randomgeometric
  summary: Returns a function for generating numbers with a geometric distribution with success probability p
  belongs_to: random
  description: |-
    ###### d3.**randomGeometric**(*p*) · [Source](https://github.com/d3/d3-random/blob/master/src/geometric.js), [Examples](https://observablehq.com/@d3/d3-random#geometric)

    Returns a function for generating numbers with a [geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution) with success probability *p*. The value *p* is in the range \[0, 1\].
- name: d3.randomInt()
  id: d3-random#randomint
  summary: Returns a function for generating random integers with a uniform distribution
  belongs_to: random
  description: |-
    ###### d3.**randomInt**(\[*min*, \]\[*max*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/int.js), [Examples](https://observablehq.com/@d3/d3-random#int)

    Returns a function for generating random integers with a [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)). The minimum allowed value of a returned number is ⌊*min*⌋ (inclusive), and the maximum is ⌊*max* - 1⌋ (inclusive). If *min* is not specified, it defaults to 0. For example:

    ``` javascript
    d3.randomInt(6)(); // Returns an integer greater than or equal to 0 and less than 6.
    d3.randomInt(1, 5)(); // Returns an integer greater than or equal to 1 and less than 5.
    ```
- name: d3.randomIrwinHall()
  id: d3-random#randomirwinhall
  summary: Returns a function for generating random numbers with an Irwin–Hall distribution with n independent variables
  belongs_to: random
  description: |-
    ###### d3.**randomIrwinHall**(*n*) · [Source](https://github.com/d3/d3-random/blob/master/src/irwinHall.js), [Examples](https://observablehq.com/@d3/d3-random#irwinHall)

    Returns a function for generating random numbers with an [Irwin–Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution) with *n* independent variables. If the fractional part of *n* is non-zero, this is treated as adding d3.randomUniform() times that fractional part to the integral part.
- name: d3.randomLcg()
  id: d3-random#randomlcg
  summary: Returns a linear congruential generator; this function can be called repeatedly to obtain pseudorandom values well-distributed on the interval [0,1) and with a long period (up to 1 billion numbers), similar to Math.random
  belongs_to: random
  description: "###### d3.**randomLcg**(\\[*seed*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/lcg.js), [Examples](https://observablehq.com/@d3/d3-randomlcg)\n\nReturns a [linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator); this function can be called repeatedly to obtain pseudorandom values well-distributed on the interval \\[0,1) and with a long period (up to 1 billion numbers), similar to Math.random. A *seed* can be specified as a real number in the interval \\[0,1) or as any integer. In the latter case, only the lower 32 bits are considered. Two generators instanced with the same seed generate the same sequence, allowing to create reproducible pseudo-random experiments. If the *seed* is not specified, one is chosen using Math.random.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-random](https://github.com/d3/d3-random)"
- name: d3.randomLogistic()
  id: d3-random#randomlogistic
  summary: Returns a function for generating random numbers with a logistic distribution
  belongs_to: random
  description: |-
    ###### d3.**randomLogistic**(\[*a*\], \[*b*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/logistic.js), [Examples](https://observablehq.com/@parcly-taxel/cauchy-and-logistic-distributions)

    Returns a function for generating random numbers with a [logistic distribution](https://en.wikipedia.org/wiki/Logistic_distribution). *a* and *b* have the same meanings and default values as in d3.randomWeibull.
- name: d3.randomLogNormal()
  id: d3-random#randomlognormal
  summary: Returns a function for generating random numbers with a log-normal distribution
  belongs_to: random
  description: |-
    ###### d3.**randomLogNormal**(\[*mu*\]\[, *sigma*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/logNormal.js), [Examples](https://observablehq.com/@d3/d3-random#logNormal)

    Returns a function for generating random numbers with a [log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution). The expected value of the random variable’s natural logarithm is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.
- name: d3.randomNormal()
  id: d3-random#randomnormal
  summary: Returns a function for generating random numbers with a normal (Gaussian) distribution
  belongs_to: random
  description: |-
    ###### d3.**randomNormal**(\[*mu*\]\[, *sigma*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/normal.js), [Examples](https://observablehq.com/@d3/d3-random#normal)

    Returns a function for generating random numbers with a [normal (Gaussian) distribution](https://en.wikipedia.org/wiki/Normal_distribution). The expected value of the generated numbers is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.
- name: d3.randomPareto()
  id: d3-random#randompareto
  summary: Returns a function for generating random numbers with a Pareto distribution with the shape alpha
  belongs_to: random
  description: |-
    ###### d3.**randomPareto**(*alpha*) · [Source](https://github.com/d3/d3-random/blob/master/src/pareto.js), [Examples](https://observablehq.com/@d3/d3-random#pareto)

    Returns a function for generating random numbers with a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution) with the shape *alpha*. The value *alpha* must be a positive value.
- name: d3.randomPoisson()
  id: d3-random#randompoisson
  summary: Returns a function for generating random numbers with a Poisson distribution with mean lambda
  belongs_to: random
  description: |-
    ###### d3.**randomPoisson**(*lambda*) · [Source](https://github.com/d3/d3-random/blob/master/src/poisson.js), [Examples](https://observablehq.com/@parcly-taxel/the-poisson-distribution)

    Returns a function for generating random numbers with a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution) with mean *lambda*.
- name: d3.randomUniform()
  id: d3-random#randomuniform
  summary: Returns a function for generating random numbers with a uniform distribution
  belongs_to: random
  description: |-
    ###### d3.**randomUniform**(\[*min*, \]\[*max*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/uniform.js), [Examples](https://observablehq.com/@d3/d3-random#uniform)

    Returns a function for generating random numbers with a [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)). The minimum allowed value of a returned number is *min* (inclusive), and the maximum is *max* (exclusive). If *min* is not specified, it defaults to 0; if *max* is not specified, it defaults to 1. For example:

    ``` javascript
    d3.randomUniform(6)(); // Returns a number greater than or equal to 0 and less than 6.
    d3.randomUniform(1, 5)(); // Returns a number greater than or equal to 1 and less than 5.
    ```
- name: d3.randomWeibull()
  id: d3-random#randomweibull
  summary: In all three cases, a is the location parameter and b is the scale parameter
  belongs_to: random
  description: |-
    ###### d3.**randomWeibull**(*k*, \[*a*\], \[*b*\]) · [Source](https://github.com/d3/d3-random/blob/master/src/weibull.js), [Examples](https://observablehq.com/@parcly-taxel/frechet-gumbel-weibull)

    Returns a function for generating random numbers with one of the [generalized extreme value distributions](https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution), depending on *k*:

    - If *k* is positive, the [Weibull distribution](https://en.wikipedia.org/wiki/Weibull_distribution) with shape parameter *k*
    - If *k* is zero, the [Gumbel distribution](https://en.wikipedia.org/wiki/Gumbel_distribution)
    - If *k* is negative, the [Fréchet distribution](https://en.wikipedia.org/wiki/Fr%C3%A9chet_distribution) with shape parameter −*k*

    In all three cases, *a* is the location parameter and *b* is the scale parameter. If *a* is not specified, it defaults to 0; if *b* is not specified, it defaults to 1.
- name: d3.range()
  id: d3-array#range
  summary: Returns an array containing an arithmetic progression, similar to the Python built-in range
  belongs_to: array
  description: |-
    ###### d3.**range**(\[*start*, \]*stop*\[, *step*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/range.js), [Examples](https://observablehq.com/@d3/d3-range)

    Returns an array containing an arithmetic progression, similar to the Python built-in [range](http://docs.python.org/library/functions.html#range). This method is often used to iterate over a sequence of uniformly-spaced numeric values, such as the indexes of an array or the ticks of a linear scale. (See also [d3.ticks](#ticks) for nicely-rounded values.)

    If *step* is omitted, it defaults to 1. If *start* is omitted, it defaults to 0. The *stop* value is exclusive; it is not included in the result. If *step* is positive, the last element is the largest *start* + *i* \* *step* less than *stop*; if *step* is negative, the last element is the smallest *start* + *i* \* *step* greater than *stop*. If the returned array would contain an infinite number of values, an empty range is returned.

    The arguments are not required to be integers; however, the results are more predictable if they are. The values in the returned array are defined as *start* + *i* \* *step*, where *i* is an integer from zero to one minus the total number of elements in the returned array. For example:

    ``` javascript
    d3.range(0, 1, 0.2) // [0, 0.2, 0.4, 0.6000000000000001, 0.8]
    ```

    This unexpected behavior is due to IEEE 754 double-precision floating point, which defines 0.2 \* 3 = 0.6000000000000001. Use [d3-format](d3-format) to format numbers for human consumption with appropriate rounding; see also [linear.tickFormat](https://github.com/d3/d3-scale/blob/main/README.md#linear_tickFormat) in [d3-scale](d3-scale).

    Likewise, if the returned array should have a specific length, consider using [array.map](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on an integer range. For example:

    ``` javascript
    d3.range(0, 1, 1 / 49); // BAD: returns 50 elements!
    d3.range(49).map(function(d) { return d / 49; }); // GOOD: returns 49 elements.
    ```
- name: d3.rank()
  id: d3-array#rank
  summary: Returns an array with the rank of each value in the iterable, i.e
  belongs_to: array
  description: |-
    ###### d3.**rank**(*iterable*\[, *comparator*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/rank.js), [Examples](https://observablehq.com/@d3/rank) d3.**rank**(*iterable*\[, *accessor*\])

    Returns an array with the rank of each value in the *iterable*, *i.e.* the zero-based index of the value when the iterable is sorted. Nullish values are sorted to the end and ranked NaN. An optional *comparator* or *accessor* function may be specified; the latter is equivalent to calling *array*.map(*accessor*) before computing the ranks. If *comparator* is not specified, it defaults to [ascending](#ascending). Ties (equivalent values) all get the same rank, defined as the first time the value is found.

    ``` javascript
    d3.rank([{x: 1}, {}, {x: 2}, {x: 0}], d => d.x); // [1, NaN, 2, 0]
    d3.rank(["b", "c", "b", "a"]); // [1, 3, 1, 0]
    d3.rank([1, 2, 3], d3.descending); // [2, 1, 0]
    ```
- name: d3.reduce()
  id: d3-array#reduce
  summary: Returns the reduced value defined by given reducer function, which is repeatedly invoked for each value in iterable, being passed the current reduced value and the next value
  belongs_to: array
  description: |-
    ###### d3.**reduce**(*iterable*, *reducer*\[, *initialValue*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/reduce.js)

    Returns the reduced value defined by given *reducer* function, which is repeatedly invoked for each value in *iterable*, being passed the current reduced value and the next value. Equivalent to [*array*.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce):

    ``` javascript
    d3.reduce(new Set([0, 2, 3, 4]), (p, v) => p + v, 0) // 9
    ```
- name: d3.request()
  id: d3-request#request
  summary: Returns a new request for specified url
  belongs_to: request
  description: |-
    ###### d3.**request**(*url*\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L4 "Source")

    Returns a new *request* for specified *url*. If no *callback* is specified, the returned *request* is not yet [sent](#request_send) and can be further configured. If a *callback* is specified, it is equivalent to calling [*request*.get](#request_get) immediately after construction:

    ``` javascript
    d3.request(url)
        .get(callback);
    ```

    If you wish to specify a request header or a mime type, you must *not* specify a callback to the constructor. Use [*request*.header](#request_header) or [*request*.mimeType](#request_mimeType) followed by [*request*.get](#request_get) instead. See [d3.json](#json), [d3.csv](#csv), [d3.tsv](#tsv), [d3.html](#html) and [d3.xml](#xml) for content-specific convenience constructors.
- name: d3.reverse()
  id: d3-array#reverse
  summary: Returns an array containing the values in the given iterable in reverse order
  belongs_to: array
  description: |-
    ###### d3.**reverse**(*iterable*) · [Source](https://github.com/d3/d3-array/blob/main/src/reverse.js)

    Returns an array containing the values in the given *iterable* in reverse order. Equivalent to [*array*.reverse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse), except that it does not mutate the given *iterable*:

    ``` javascript
    d3.reverse(new Set([0, 2, 3, 1])) // [1, 3, 2, 0]
    ```
- name: d3.rgb()
  id: d3-color#rgb
  summary: Constructs a new RGB color
  belongs_to: color
  description: "###### d3.**rgb**(*r*, *g*, *b*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-color/blob/main/src/color.js \"Source\") d3.**rgb**(*specifier*) d3.**rgb**(*color*) \n\nConstructs a new [RGB](https://en.wikipedia.org/wiki/RGB_color_model) color. The channel values are exposed as `r`, `g` and `b` properties on the returned instance. Use the [RGB color picker](http://bl.ocks.org/mbostock/78d64ca7ef013b4dcf8f) to explore this color space.\n\nIf *r*, *g* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the RGB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb). Note that unlike [*color*.rgb](#color_rgb) this method *always* returns a new instance, even if *color* is already an RGB color."
- name: d3.ribbon()
  id: d3-chord#ribbon
  summary: Creates a new ribbon generator with the default settings
  belongs_to: chord
  description: |-
    ###### d3.**ribbon**() · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    Creates a new ribbon generator with the default settings.
- name: d3.ribbonArrow()
  id: d3-chord#ribbonarrow
  summary: Creates a new arrow ribbon generator with the default settings
  belongs_to: chord
  description: |-
    ###### d3.**ribbonArrow**() · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    Creates a new arrow ribbon generator with the default settings.
- name: d3.rollup()
  id: d3-array#rollup
  summary: Groups and reduces the specified iterable of values into an InternMap from key to value
  belongs_to: array
  description: |-
    ###### d3.**rollup**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)

    [Groups](#group) and reduces the specified *iterable* of values into an InternMap from *key* to value. For example, given some data:

    ``` javascript
    data = [
      {name: "jim",   amount: "34.0",   date: "11/12/2015"},
      {name: "carl",  amount: "120.11", date: "11/12/2015"},
      {name: "stacy", amount: "12.01",  date: "01/04/2016"},
      {name: "stacy", amount: "34.05",  date: "01/04/2016"}
    ]
    ```

    To count the number of elements by name:

    ``` javascript
    d3.rollup(data, v => v.length, d => d.name)
    ```

    This produces:

    ``` javascript
    Map(3) {
      "jim" => 1
      "carl" => 1
      "stacy" => 2
    }
    ```

    If more than one *key* is specified, a nested Map is returned. For example:

    ``` javascript
    d3.rollup(data, v => v.length, d => d.name, d => d.date)
    ```

    This produces:

    ``` javascript
    Map(3) {
      "jim" => Map(1) {
        "11/12/2015" => 1
      }
      "carl" => Map(1) {
        "11/12/2015" => 1
      }
      "stacy" => Map(1) {
        "01/04/2016" => 2
      }
    }
    ```

    To convert a Map to an Array, use [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from). See [d3.group](#group) for examples.
- name: d3.rollups()
  id: d3-array#rollups
  summary: Equivalent to rollup, but returns nested arrays instead of nested maps
  belongs_to: array
  description: |-
    ###### d3.**rollups**(*iterable*, *reduce*, *...keys*) · [Source](https://github.com/d3/d3-array/blob/main/src/group.js), [Examples](https://observablehq.com/@d3/d3-group-d3-rollup)

    Equivalent to [rollup](#rollup), but returns nested arrays instead of nested maps.
- name: d3.scaleBand()
  id: d3-scale#scaleband
  summary: Constructs a new band scale with the specified domain and range, no padding, no rounding and center alignment
  belongs_to: scale
  description: |-
    ###### d3.**scaleBand**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)

    Constructs a new band scale with the specified [*domain*](#band_domain) and [*range*](#band_range), no [padding](#band_padding), no [rounding](#band_round) and center [alignment](#band_align). If *domain* is not specified, it defaults to the empty domain. If *range* is not specified, it defaults to the unit range \[0, 1\].
- name: d3.scaleDiverging()
  id: d3-scale#scalediverging
  summary: Constructs a new diverging scale with the specified domain and interpolator function or array
  belongs_to: scale
  description: |-
    ###### d3.**scaleDiverging**(\[\[*domain*, \]*interpolator*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    Constructs a new diverging scale with the specified [*domain*](#diverging_domain) and [*interpolator*](#diverging_interpolator) function or array. If *domain* is not specified, it defaults to \[0, 0.5, 1\]. If *interpolator* is not specified, it defaults to the identity function. When the scale is [applied](#_diverging), the interpolator will be invoked with a value typically in the range \[0, 1\], where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value. For example, using [d3.interpolateSpectral](d3-scale-chromatic#interpolateSpectral):

    ``` javascript
    var spectral = d3.scaleDiverging(d3.interpolateSpectral);
    ```

    If *interpolator* is an array, it represents the scale’s three-element output range and is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate) and [d3.piecewise](d3-interpolate#piecewise).
- name: d3.scaleDivergingLog()
  id: d3-scale#scalediverginglog
  summary: A diverging scale with a logarithmic transform, analogous to a log scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleDivergingLog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    A [diverging scale](#diverging-scales) with a logarithmic transform, analogous to a [log scale](#log-scales).
- name: d3.scaleDivergingPow()
  id: d3-scale#scaledivergingpow
  summary: A diverging scale with an exponential transform, analogous to a power scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleDivergingPow**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    A [diverging scale](#diverging-scales) with an exponential transform, analogous to a [power scale](#pow-scales).
- name: d3.scaleDivergingSqrt()
  id: d3-scale#scaledivergingsqrt
  summary: A diverging scale with a square-root transform, analogous to a d3.scaleSqrt
  belongs_to: scale
  description: |-
    ###### d3.**scaleDivergingSqrt**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    A [diverging scale](#diverging-scales) with a square-root transform, analogous to a [d3.scaleSqrt](#scaleSqrt).
- name: d3.scaleDivergingSymlog()
  id: d3-scale#scaledivergingsymlog
  summary: A diverging scale with a symmetric logarithmic transform, analogous to a symlog scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleDivergingSymlog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    A [diverging scale](#diverging-scales) with a symmetric logarithmic transform, analogous to a [symlog scale](#symlog-scales).

    ### Quantize Scales

    Quantize scales are similar to [linear scales](#linear-scales), except they use a discrete rather than continuous range. The continuous input domain is divided into uniform segments based on the number of values in (*i.e.*, the cardinality of) the output range. Each range value *y* can be expressed as a quantized linear function of the domain value *x*: *y* = *m round(x)* + *b*. See [this choropleth](https://observablehq.com/@d3/choropleth) for an example.
- name: d3.scaleIdentity()
  id: d3-scale#scaleidentity
  summary: Constructs a new identity scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleIdentity**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/identity.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)

    Constructs a new identity scale with the specified [domain](#continuous_domain) and [range](#continuous_range). If *range* is not specified, it defaults to \[0, 1\].

    #### Radial Scales

    Radial scales are a variant of [linear scales](#linear-scales) where the range is internally squared so that an input value corresponds linearly to the squared output value. These scales are useful when you want the input value to correspond to the area of a graphical mark and the mark is specified by radius, as in a radial bar chart. Radial scales do not support [interpolate](#continuous_interpolate).
- name: d3.scaleImplicit
  id: d3-scale#scaleimplicit
  summary: 'A special value for ordinal.unknown that enables implicit domain construction: unknown values are implicitly added to the domain'
  belongs_to: scale
  description: |-
    ###### d3.**scaleImplicit** · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    A special value for [*ordinal*.unknown](#ordinal_unknown) that enables implicit domain construction: unknown values are implicitly added to the domain.

    #### Band Scales

    Band scales are like [ordinal scales](#ordinal-scales) except the output range is continuous and numeric. Discrete output values are automatically computed by the scale by dividing the continuous range into uniform bands. Band scales are typically used for bar charts with an ordinal or categorical dimension. The [unknown value](#ordinal_unknown) of a band scale is effectively undefined: they do not allow implicit domain construction.
- name: d3.scaleLinear()
  id: d3-scale#scalelinear
  summary: Constructs a new continuous scale with the specified domain and range, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scaleLinear**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/linear.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)

    Constructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \[0, 1\]. Linear scales are a good default choice for continuous quantitative data because they preserve proportional differences. Each range value *y* can be expressed as a function of the domain value *x*: *y* = *mx* + *b*.

    #### Power Scales

    Power scales are similar to [linear scales](#linear-scales), except an exponential transform is applied to the input domain value before the output range value is computed. Each range value *y* can be expressed as a function of the domain value *x*: *y* = *mx^k* + *b*, where *k* is the [exponent](#pow_exponent) value. Power scales also support negative domain values, in which case the input value and the resulting output value are multiplied by -1.
- name: d3.scaleLog()
  id: d3-scale#scalelog
  summary: Constructs a new continuous scale with the specified domain and range, the base 10, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scaleLog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Constructs a new [continuous scale](#continuous-scales) with the specified [domain](#log_domain) and [range](#log_range), the [base](#log_base) 10, the [default](d3-interpolate#interpolate) [interpolator](#log_interpolate) and [clamping](#log_clamp) disabled. If *domain* is not specified, it defaults to \[1, 10\]. If *range* is not specified, it defaults to \[0, 1\].
- name: d3.scaleOrdinal()
  id: d3-scale#scaleordinal
  summary: Constructs a new ordinal scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleOrdinal**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    Constructs a new ordinal scale with the specified [*domain*](#ordinal_domain) and [*range*](#ordinal_range). If *domain* is not specified, it defaults to the empty array. If *range* is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.
- name: d3.scalePoint()
  id: d3-scale#scalepoint
  summary: Constructs a new point scale with the specified domain and range, no padding, no rounding and center alignment
  belongs_to: scale
  description: |-
    ###### d3.**scalePoint**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    Constructs a new point scale with the specified [*domain*](#point_domain) and [*range*](#point_range), no [padding](#point_padding), no [rounding](#point_round) and center [alignment](#point_align). If *domain* is not specified, it defaults to the empty domain. If *range* is not specified, it defaults to the unit range \[0, 1\].
- name: d3.scalePow()
  id: d3-scale#scalepow
  summary: Constructs a new continuous scale with the specified domain and range, the exponent 1, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scalePow**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Constructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [exponent](#pow_exponent) 1, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \[0, 1\]. (Note that this is effectively a [linear](#linear-scales) scale until you set a different exponent.)
- name: d3.scaleQuantile()
  id: d3-scale#scalequantile
  summary: Constructs a new quantile scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleQuantile**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Constructs a new quantile scale with the specified [*domain*](#quantile_domain) and [*range*](#quantile_range). If either *domain* or *range* is not specified, each defaults to the empty array. The quantile scale is invalid until both a domain and range are specified.
- name: d3.scaleQuantize()
  id: d3-scale#scalequantize
  summary: Constructs a new quantize scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleQuantize**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Constructs a new quantize scale with the specified [*domain*](#quantize_domain) and [*range*](#quantize_range). If either *domain* or *range* is not specified, each defaults to \[0, 1\]. Thus, the default quantize scale is equivalent to the [Math.round](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round) function.
- name: d3.scaleRadial()
  id: d3-scale#scaleradial
  summary: Constructs a new radial scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleRadial**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/radial.js), [Examples](https://observablehq.com/@d3/radial-stacked-bar-chart)

    Constructs a new radial scale with the specified [domain](#continuous_domain) and [range](#continuous_range). If *domain* or *range* is not specified, each defaults to \[0, 1\].

    #### Time Scales

    Time scales are a variant of [linear scales](#linear-scales) that have a temporal domain: domain values are coerced to [dates](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) rather than numbers, and [invert](#continuous_invert) likewise returns a date. Time scales implement [ticks](#time_ticks) based on [calendar intervals](d3-time), taking the pain out of generating axes for temporal domains.

    For example, to create a position encoding:

    ``` javascript
    var x = d3.scaleTime()
        .domain([new Date(2000, 0, 1), new Date(2000, 0, 2)])
        .range([0, 960]);

    x(new Date(2000, 0, 1,  5)); // 200
    x(new Date(2000, 0, 1, 16)); // 640
    x.invert(200); // Sat Jan 01 2000 05:00:00 GMT-0800 (PST)
    x.invert(640); // Sat Jan 01 2000 16:00:00 GMT-0800 (PST)
    ```

    For a valid value *y* in the range, *time*(*time*.invert(*y*)) equals *y*; similarly, for a valid value *x* in the domain, *time*.invert(*time*(*x*)) equals *x*. The invert method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
- name: d3.scaleSequential()
  id: d3-scale#scalesequential
  summary: Constructs a new sequential scale with the specified domain and interpolator function or array
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequential**(\[\[*domain*, \]*interpolator*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    Constructs a new sequential scale with the specified [*domain*](#sequential_domain) and [*interpolator*](#sequential_interpolator) function or array. If *domain* is not specified, it defaults to \[0, 1\]. If *interpolator* is not specified, it defaults to the identity function. When the scale is [applied](#_sequential), the interpolator will be invoked with a value typically in the range \[0, 1\], where 0 represents the minimum value and 1 represents the maximum value. For example, to implement the ill-advised [HSL](d3-color#hsl) rainbow scale:

    ``` javascript
    var rainbow = d3.scaleSequential(function(t) {
      return d3.hsl(t * 360, 1, 0.5) + "";
    });
    ```

    A more aesthetically-pleasing and perceptually-effective cyclical hue encoding is to use [d3.interpolateRainbow](d3-scale-chromatic#interpolateRainbow):

    ``` javascript
    var rainbow = d3.scaleSequential(d3.interpolateRainbow);
    ```

    If *interpolator* is an array, it represents the scale’s two-element output range and is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate).
- name: d3.scaleSequentialLog()
  id: d3-scale#scalesequentiallog
  summary: A sequential scale with a logarithmic transform, analogous to a log scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequentialLog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    A [sequential scale](#sequential-scales) with a logarithmic transform, analogous to a [log scale](#log-scales).
- name: d3.scaleSequentialPow()
  id: d3-scale#scalesequentialpow
  summary: A sequential scale with an exponential transform, analogous to a power scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequentialPow**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    A [sequential scale](#sequential-scales) with an exponential transform, analogous to a [power scale](#pow-scales).
- name: d3.scaleSequentialQuantile()
  id: d3-scale#scalesequentialquantile
  summary: A sequential scale using a p-quantile transform, analogous to a quantile scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequentialQuantile**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequentialQuantile.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    A [sequential scale](#sequential-scales) using a *p*-quantile transform, analogous to a [quantile scale](#quantile-scales).
- name: d3.scaleSequentialSqrt()
  id: d3-scale#scalesequentialsqrt
  summary: A sequential scale with a square-root transform, analogous to a d3.scaleSqrt
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequentialSqrt**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    A [sequential scale](#sequential-scales) with a square-root transform, analogous to a [d3.scaleSqrt](#scaleSqrt).
- name: d3.scaleSequentialSymlog()
  id: d3-scale#scalesequentialsymlog
  summary: A sequential scale with a symmetric logarithmic transform, analogous to a symlog scale
  belongs_to: scale
  description: |-
    ###### d3.**scaleSequentialSymlog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    A [sequential scale](#sequential-scales) with a symmetric logarithmic transform, analogous to a [symlog scale](#symlog-scales).
- name: d3.scaleSqrt()
  id: d3-scale#scalesqrt
  summary: Constructs a new continuous power scale with the specified domain and range, the exponent 0.5, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scaleSqrt**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Constructs a new [continuous](#continuous-scales) [power scale](#power-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [exponent](#pow_exponent) 0.5, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \[0, 1\]. This is a convenience method equivalent to `d3.scalePow(…).exponent(0.5)`.

    #### Log Scales

    Log scales are similar to [linear scales](#linear-scales), except a logarithmic transform is applied to the input domain value before the output range value is computed. The mapping to the range value *y* can be expressed as a function of the domain value *x*: *y* = *m* log(*x*) + *b*.

    As log(0) = -∞, a log scale domain must be **strictly-positive or strictly-negative**; the domain must not include or cross zero. A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values. (For a negative domain, input and output values are implicitly multiplied by -1.) The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.
- name: d3.scaleSymlog()
  id: d3-scale#scalesymlog
  summary: Constructs a new continuous scale with the specified domain and range, the constant 1, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scaleSymlog**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/symlog.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    Constructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [constant](#symlog_constant) 1, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If *domain* is not specified, it defaults to \[0, 1\]. If *range* is not specified, it defaults to \[0, 1\].
- name: d3.scaleThreshold()
  id: d3-scale#scalethreshold
  summary: Constructs a new threshold scale with the specified domain and range
  belongs_to: scale
  description: |-
    ###### d3.**scaleThreshold**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Constructs a new threshold scale with the specified [*domain*](#threshold_domain) and [*range*](#threshold_range). If *domain* is not specified, it defaults to \[0.5\]. If *range* is not specified, it defaults to \[0, 1\]. Thus, the default threshold scale is equivalent to the [Math.round](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round) function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.
- name: d3.scaleTime()
  id: d3-scale#scaletime
  summary: Constructs a new time scale with the specified domain and range, the default interpolator and clamping disabled
  belongs_to: scale
  description: |-
    ###### d3.**scaleTime**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    Constructs a new time scale with the specified [domain](#time_domain) and [range](#time_range), the [default](d3-interpolate#interpolate) [interpolator](#time_interpolate) and [clamping](#time_clamp) disabled. If *domain* is not specified, it defaults to \[2000-01-01, 2000-01-02\]. If *range* is not specified, it defaults to \[0, 1\].
- name: d3.scaleUtc()
  id: d3-scale#scaleutc
  summary: Equivalent to scaleTime, but the returned time scale operates in Coordinated Universal Time rather than local time
  belongs_to: scale
  description: |-
    ###### d3.**scaleUtc**(\[\[*domain*, \]*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/utcTime.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    Equivalent to [scaleTime](#scaleTime), but the returned time scale operates in [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.

    ### Sequential Scales

    Sequential scales, like [diverging scales](#diverging-scales), are similar to [continuous scales](#continuous-scales) in that they map a continuous, numeric input domain to a continuous output range. However, unlike continuous scales, the input domain and output range of a sequential scale always has exactly two elements, and the output range is typically specified as an interpolator rather than an array of values. These scales do not expose [invert](#continuous_invert) and [interpolate](#continuous_interpolate) methods.
- name: d3.schemeAccent
  id: d3-scale-chromatic#schemeaccent
  summary: An array of eight categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeAccent** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Accent.js "Source")

    An array of eight categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeCategory10
  id: d3-scale-chromatic#schemecategory10
  summary: An array of ten categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeCategory10** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/category10.js "Source")

    An array of ten categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeDark2
  id: d3-scale-chromatic#schemedark2
  summary: An array of eight categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeDark2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Dark2.js "Source")

    An array of eight categorical colors represented as RGB hexadecimal strings.
- name: d3.schemePaired
  id: d3-scale-chromatic#schemepaired
  summary: An array of twelve categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemePaired** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Paired.js "Source")

    An array of twelve categorical colors represented as RGB hexadecimal strings.
- name: d3.schemePastel1
  id: d3-scale-chromatic#schemepastel1
  summary: An array of nine categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemePastel1** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Pastel1.js "Source")

    An array of nine categorical colors represented as RGB hexadecimal strings.
- name: d3.schemePastel2
  id: d3-scale-chromatic#schemepastel2
  summary: An array of eight categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemePastel2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Pastel2.js "Source")

    An array of eight categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeSet1
  id: d3-scale-chromatic#schemeset1
  summary: An array of nine categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeSet1** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set1.js "Source")

    An array of nine categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeSet2
  id: d3-scale-chromatic#schemeset2
  summary: An array of eight categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeSet2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set2.js "Source")

    An array of eight categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeSet3
  id: d3-scale-chromatic#schemeset3
  summary: An array of twelve categorical colors represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeSet3** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set3.js "Source")

    An array of twelve categorical colors represented as RGB hexadecimal strings.
- name: d3.schemeTableau10
  id: d3-scale-chromatic#schemetableau10
  summary: An array of ten categorical colors authored by Tableau as part of Tableau 10 represented as RGB hexadecimal strings
  belongs_to: scale-chromatic
  description: |-
    ###### d3.**schemeTableau10** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Tableau10.js "Source")

    An array of ten categorical colors authored by Tableau as part of [Tableau 10](https://www.tableau.com/about/blog/2016/7/colors-upgrade-tableau-10-56782) represented as RGB hexadecimal strings.

    ### Diverging

    Diverging color schemes are available as continuous interpolators (often used with [d3.scaleSequential](d3-scale#sequential-scales)) and as discrete schemes (often used with [d3.scaleOrdinal](d3-scale#ordinal-scales)). Each discrete scheme, such as [d3.schemeBrBG](#schemeBrBG), is represented as an array of arrays of hexadecimal color strings. The *k*th element of this array contains the color scheme of size *k*; for example, `d3.schemeBrBG[9]` contains an array of nine strings representing the nine colors of the brown-blue-green diverging color scheme. Diverging color schemes support a size *k* ranging from 3 to 11.
- name: d3.select()
  id: d3-selection#select
  summary: Selects the first element that matches the specified selector string
  belongs_to: selection
  description: |-
    ###### d3.**select**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/select.js)

    Selects the first element that matches the specified *selector* string. If no elements match the *selector*, returns an empty selection. If multiple elements match the *selector*, only the first matching element (in document order) will be selected. For example, to select the first anchor element:

    ``` javascript
    const anchor = d3.select("a");
    ```

    If the *selector* is not a string, instead selects the specified node; this is useful if you already have a reference to a node, such as `this` within an event listener or a global such as `document.body`. For example, to make a clicked paragraph red:

    ``` javascript
    d3.selectAll("p").on("click", function(event) {
      d3.select(this).style("color", "red");
    });
    ```
- name: d3.selectAll()
  id: d3-selection#selectall
  summary: Selects all elements that match the specified selector string
  belongs_to: selection
  description: |-
    ###### d3.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selectAll.js)

    Selects all elements that match the specified *selector* string. The elements will be selected in document order (top-to-bottom). If no elements in the document match the *selector*, or if the *selector* is null or undefined, returns an empty selection. For example, to select all paragraphs:

    ``` javascript
    const paragraph = d3.selectAll("p");
    ```

    If the *selector* is not a string, instead selects the specified array of nodes; this is useful if you already have a reference to nodes, such as `this.childNodes` within an event listener or a global such as `document.links`. The nodes may instead be an iterable, or a pseudo-array such as a NodeList. For example, to color all links red:

    ``` javascript
    d3.selectAll(document.links).style("color", "red");
    ```
- name: d3.selection()
  id: d3-selection#selection
  summary: Selects the root element, document.documentElement
  belongs_to: selection
  description: |-
    ###### d3.**selection**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/index.js)

    [Selects](#select) the root element, `document.documentElement`. This function can also be used to test for selections (`instanceof d3.selection`) or to extend the selection prototype. For example, to add a method to check checkboxes:

    ``` javascript
    d3.selection.prototype.checked = function(value) {
      return arguments.length < 1
          ? this.property("checked")
          : this.property("checked", !!value);
    };
    ```

    And then to use:

    ``` javascript
    d3.selectAll("input[type=checkbox]").checked(true);
    ```
- name: d3.selector()
  id: d3-selection#selector
  summary: Given the specified selector, returns a function which returns the first descendant of this element that matches the specified selector
  belongs_to: selection
  description: |-
    ###### d3.**selector**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selector.js)

    Given the specified *selector*, returns a function which returns the first descendant of `this` element that matches the specified selector. This method is used internally by [*selection*.select](#selection_select). For example, this:

    ``` javascript
    const div = selection.select("div");
    ```

    Is equivalent to:

    ``` javascript
    const div = selection.select(d3.selector("div"));
    ```
- name: d3.selectorAll()
  id: d3-selection#selectorall
  summary: Given the specified selector, returns a function which returns all descendants of this element that match the specified selector
  belongs_to: selection
  description: |-
    ###### d3.**selectorAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selectAll.js)

    Given the specified *selector*, returns a function which returns all descendants of `this` element that match the specified selector. This method is used internally by [*selection*.selectAll](#selection_selectAll). For example, this:

    ``` javascript
    const div = selection.selectAll("div");
    ```

    Is equivalent to:

    ``` javascript
    const div = selection.selectAll(d3.selectorAll("div"));
    ```
- name: d3.set()
  id: d3-collection#set
  summary: Constructs a new set
  belongs_to: collection
  description: |-
    ###### d3.**set**(\[*array*\[, *accessor*\]\]) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js "Source")

    Constructs a new set. If *array* is specified, adds the given *array* of string values to the returned set. The specified array may also be another set. An optional *accessor* function may be specified, which is equivalent to calling *array.map(accessor)* before constructing the set.
- name: d3.shuffle()
  id: d3-array#shuffle
  summary: Randomizes the order of the specified array in-place using the Fisher–Yates shuffle and returns the array
  belongs_to: array
  description: |-
    ###### d3.**shuffle**(*array*\[, *start*\[, *stop*\]\]) · [Source](https://github.com/d3/d3-array/blob/main/src/shuffle.js), [Examples](https://observablehq.com/@d3/d3-shuffle)

    Randomizes the order of the specified *array* in-place using the [Fisher–Yates shuffle](https://bost.ocks.org/mike/shuffle/) and returns the *array*. If *start* is specified, it is the starting index (inclusive) of the *array* to shuffle; if *start* is not specified, it defaults to zero. If *stop* is specified, it is the ending index (exclusive) of the *array* to shuffle; if *stop* is not specified, it defaults to *array*.length. For example, to shuffle the first ten elements of the *array*: shuffle(*array*, 0, 10).
- name: d3.shuffler()
  id: d3-array#shuffler
  summary: Returns a shuffle function given the specified random source
  belongs_to: array
  description: |-
    ###### d3.**shuffler**(*random*) · [Source](https://github.com/d3/d3-array/blob/main/src/shuffle.js)

    Returns a [shuffle function](#shuffle) given the specified random source. For example, using [d3.randomLcg](https://github.com/d3/d3-random/blob/main/README.md#randomLcg):

    ``` javascript
    const random = d3.randomLcg(0.9051667019185816);
    const shuffle = d3.shuffler(random);

    shuffle([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]); // returns [7, 4, 5, 3, 9, 0, 6, 1, 2, 8]
    ```
- name: d3.some()
  id: d3-array#some
  summary: Returns true if the given test function returns true for any value in the given iterable
  belongs_to: array
  description: |-
    ###### d3.**some**(*iterable*, *test*) · [Source](https://github.com/d3/d3-array/blob/main/src/some.js)

    Returns true if the given *test* function returns true for any value in the given *iterable*. This method returns as soon as *test* returns a truthy value or all values are iterated over. Equivalent to [*array*.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some):

    ``` javascript
    d3.some(new Set([0, 2, 3, 4]), x => x & 1) // true
    ```
- name: d3.sort()
  id: d3-array#sort
  summary: Returns an array containing the values in the given iterable in the sorted order defined by the given comparator or accessor function
  belongs_to: array
  description: |-
    ###### d3.**sort**(*iterable*, *comparator* = d3.ascending) · [Source](https://github.com/d3/d3-array/blob/main/src/sort.js) d3.**sort**(*iterable*, ...*accessors*)

    Returns an array containing the values in the given *iterable* in the sorted order defined by the given *comparator* or *accessor* function. If *comparator* is not specified, it defaults to [d3.ascending](#ascending). Equivalent to [*array*.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), except that it does not mutate the given *iterable*, and the comparator defaults to natural order instead of lexicographic order:

    ``` javascript
    d3.sort(new Set([0, 2, 3, 1])) // [0, 1, 2, 3]
    ```

    If an *accessor* (a function that does not take exactly two arguments) is specified,

    ``` javascript
    d3.sort(data, d => d.value)
    ```

    it is equivalent to a *comparator* using [natural order](#ascending):

    ``` javascript
    d3.sort(data, (a, b) => d3.ascending(a.value, b.value))
    ```

    The *accessor* is only invoked once per element, and thus the returned sorted order is consistent even if the accessor is nondeterministic.

    Multiple accessors may be specified to break ties:

    ``` javascript
    d3.sort(points, ({x}) => x, ({y}) => y)
    ```

    This is equivalent to:

    ``` javascript
    d3.sort(data, (a, b) => d3.ascending(a.x, b.x) || d3.ascending(a.y, b.y))
    ```

    ### Sets

    This methods implement basic set operations for any iterable.
- name: d3.stack()
  id: d3-shape#stack
  summary: Constructs a new stack generator with the default settings
  belongs_to: shape
  description: |-
    ###### d3.**stack**() · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    Constructs a new stack generator with the default settings.
- name: d3.stackOffsetDiverging()
  id: d3-shape#stackoffsetdiverging
  summary: Positive values are stacked above zero, negative values are stacked below zero, and zero values are stacked at zero
  belongs_to: shape
  description: |-
    ###### d3.**stackOffsetDiverging**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/diverging.js)

    Positive values are stacked above zero, negative values are [stacked below zero](https://observablehq.com/@d3/diverging-stacked-bar-chart), and zero values are stacked at zero.
- name: d3.stackOffsetExpand()
  id: d3-shape#stackoffsetexpand
  summary: Applies a zero baseline and normalizes the values for each point such that the topline is always one
  belongs_to: shape
  description: |-
    ###### d3.**stackOffsetExpand**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/expand.js)

    Applies a zero baseline and normalizes the values for each point such that the topline is always one.
- name: d3.stackOffsetNone()
  id: d3-shape#stackoffsetnone
  summary: Applies a zero baseline
  belongs_to: shape
  description: |-
    ###### d3.**stackOffsetNone**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/none.js)

    Applies a zero baseline.
- name: d3.stackOffsetSilhouette()
  id: d3-shape#stackoffsetsilhouette
  summary: Shifts the baseline down such that the center of the streamgraph is always at zero
  belongs_to: shape
  description: |-
    ###### d3.**stackOffsetSilhouette**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/silhouette.js)

    Shifts the baseline down such that the center of the streamgraph is always at zero.
- name: d3.stackOffsetWiggle()
  id: d3-shape#stackoffsetwiggle
  summary: Shifts the baseline so as to minimize the weighted wiggle of layers
  belongs_to: shape
  description: "###### d3.**stackOffsetWiggle**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/wiggle.js)\n\nShifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the [inside-out order](#stackOrderInsideOut). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Bryon & Wattenberg for more information.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-shape](https://github.com/d3/d3-shape)"
- name: d3.stackOrderAppearance()
  id: d3-shape#stackorderappearance
  summary: Returns a series order such that the earliest series (according to the maximum value) is at the bottom
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderAppearance**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/appearance.js)

    Returns a series order such that the earliest series (according to the maximum value) is at the bottom.
- name: d3.stackOrderAscending()
  id: d3-shape#stackorderascending
  summary: Returns a series order such that the smallest series (according to the sum of values) is at the bottom
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderAscending**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/ascending.js)

    Returns a series order such that the smallest series (according to the sum of values) is at the bottom.
- name: d3.stackOrderDescending()
  id: d3-shape#stackorderdescending
  summary: Returns a series order such that the largest series (according to the sum of values) is at the bottom
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderDescending**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/descending.js)

    Returns a series order such that the largest series (according to the sum of values) is at the bottom.
- name: d3.stackOrderInsideOut()
  id: d3-shape#stackorderinsideout
  summary: Returns a series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderInsideOut**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/insideOut.js)

    Returns a series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the [wiggle offset](#stackOffsetWiggle). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Byron & Wattenberg for more information.
- name: d3.stackOrderNone()
  id: d3-shape#stackordernone
  summary: Returns the given series order [0, 1, … n - 1] where n is the number of elements in series
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderNone**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/none.js)

    Returns the given series order \[0, 1, … *n* - 1\] where *n* is the number of elements in *series*. Thus, the stack order is given by the [key accessor](#stack_keys).
- name: d3.stackOrderReverse()
  id: d3-shape#stackorderreverse
  summary: Returns the reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series
  belongs_to: shape
  description: |-
    ###### d3.**stackOrderReverse**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/reverse.js)

    Returns the reverse of the given series order \[*n* - 1, *n* - 2, … 0\] where *n* is the number of elements in *series*. Thus, the stack order is given by the reverse of the [key accessor](#stack_keys).

    ### Stack Offsets

    Stack offsets are typically not used directly, but are instead passed to [*stack*.offset](#stack_offset).
- name: d3.stratify()
  id: d3-hierarchy#stratify
  summary: This hierarchy can now be passed to a hierarchical layout, such as d3.tree, for visualization
  belongs_to: hierarchy
  description: |-
    #### Stratify

    Consider the following table of relationships:

    | Name  | Parent |
    |-------|--------|
    | Eve   |        |
    | Cain  | Eve    |
    | Seth  | Eve    |
    | Enos  | Seth   |
    | Noam  | Seth   |
    | Abel  | Eve    |
    | Awan  | Eve    |
    | Enoch | Awan   |
    | Azura | Eve    |

    These names are conveniently unique, so we can unambiguously represent the hierarchy as a CSV file:

    ``` notranslate
    name,parent
    Eve,
    Cain,Eve
    Seth,Eve
    Enos,Seth
    Noam,Seth
    Abel,Eve
    Awan,Eve
    Enoch,Awan
    Azura,Eve
    ```

    To parse the CSV using [d3.csvParse](d3-dsv#csvParse):

    ``` javascript
    var table = d3.csvParse(text);
    ```

    This returns:

    ``` javascript
    [
      {"name": "Eve",   "parent": ""},
      {"name": "Cain",  "parent": "Eve"},
      {"name": "Seth",  "parent": "Eve"},
      {"name": "Enos",  "parent": "Seth"},
      {"name": "Noam",  "parent": "Seth"},
      {"name": "Abel",  "parent": "Eve"},
      {"name": "Awan",  "parent": "Eve"},
      {"name": "Enoch", "parent": "Awan"},
      {"name": "Azura", "parent": "Eve"}
    ]
    ```

    To convert to a hierarchy:

    ``` javascript
    var root = d3.stratify()
        .id(function(d) { return d.name; })
        .parentId(function(d) { return d.parent; })
        (table);
    ```

    This returns:

    This hierarchy can now be passed to a hierarchical layout, such as [d3.tree](#_tree), for visualization.

    ###### d3.**stratify**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)

    Constructs a new stratify operator with the default settings.
- name: d3.style()
  id: d3-selection#style
  summary: Returns the value of the style property with the specified name for the specified node
  belongs_to: selection
  description: |-
    ###### d3.**style**(*node*, *name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/style.js)

    Returns the value of the style property with the specified *name* for the specified *node*. If the *node* has an inline style with the specified *name*, its value is returned; otherwise, the [computed property value](https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value) is returned. See also [*selection*.style](#selection_style).

    ### Modifying Elements

    After selecting elements, use the selection’s transformation methods to affect document content. For example, to set the name attribute and color style of an anchor element:

    ``` javascript
    d3.select("a")
        .attr("name", "fred")
        .style("color", "red");
    ```

    To experiment with selections, visit [d3js.org](https://d3js.org) and open your browser’s developer console! (In Chrome, open the console with ⌥⌘J.) Select elements and then inspect the returned selection to see which elements are selected and how they are grouped. Call selection methods and see how the page content changes.
- name: d3.subset()
  id: d3-array#subset
  summary: 'Returns true if a is a subset of b: if every value in the given iterable a is also in the given iterable b'
  belongs_to: array
  description: |-
    ###### d3.**subset**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/subset.js)

    Returns true if *a* is a subset of *b*: if every value in the given iterable *a* is also in the given iterable *b*.

    ``` javascript
    d3.subset([1, 3], [0, 2, 1, 3, 0]) // true
    ```
- name: d3.sum()
  id: d3-array#sum
  summary: Returns the sum of the given iterable of numbers
  belongs_to: array
  description: |-
    ###### d3.**sum**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/sum.js), [Examples](https://observablehq.com/@d3/d3-sum)

    Returns the sum of the given *iterable* of numbers. If the iterable contains no numbers, returns 0. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the sum. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.superset()
  id: d3-array#superset
  summary: 'Returns true if a is a superset of b: if every value in the given iterable b is also in the given iterable a'
  belongs_to: array
  description: |-
    ###### d3.**superset**(*a*, *b*) · [Source](https://github.com/d3/d3-array/blob/main/src/superset.js)

    Returns true if *a* is a superset of *b*: if every value in the given iterable *b* is also in the given iterable *a*.

    ``` javascript
    d3.superset([0, 2, 1, 3, 0], [1, 3]) // true
    ```
- name: d3.svg()
  id: d3-fetch#svg
  summary: Fetches the file at the specified input URL as text and then parses it as SVG
  belongs_to: fetch
  description: |-
    ###### d3.**svg**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js "Source")

    Fetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as SVG. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.
- name: d3.symbol()
  id: d3-shape#symbol
  summary: Constructs a new symbol generator of the specified type and size
  belongs_to: shape
  description: |-
    ###### d3.**symbol**(\[*type*\]\[, *size*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js), [Examples](https://observablehq.com/@d3/fitted-symbols)

    Constructs a new symbol generator of the specified [type](#symbol_type) and [size](#symbol_size). If not specified, *type* defaults to a circle, and *size* defaults to 64.
- name: d3.symbolAsterisk
  id: d3-shape#symbolasterisk
  summary: The asterisk symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolAsterisk** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/asterisk.js)

    The asterisk symbol type; intended for stroking.
- name: d3.symbolCircle
  id: d3-shape#symbolcircle
  summary: The circle symbol type; intended for either filling or stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolCircle** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/circle.js)

    The circle symbol type; intended for either filling or stroking.
- name: d3.symbolCross
  id: d3-shape#symbolcross
  summary: The Greek cross symbol type, with arms of equal length; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolCross** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/cross.js)

    The Greek cross symbol type, with arms of equal length; intended for filling.
- name: d3.symbolDiamond
  id: d3-shape#symboldiamond
  summary: The rhombus symbol type; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolDiamond** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)

    The rhombus symbol type; intended for filling.
- name: d3.symbolDiamond2
  id: d3-shape#symboldiamond2
  summary: The rotated square symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolDiamond2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)

    The rotated square symbol type; intended for stroking.
- name: d3.symbolPlus
  id: d3-shape#symbolplus
  summary: The plus symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolPlus** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/plus.js)

    The plus symbol type; intended for stroking.
- name: d3.symbolsFill
  id: d3-shape#symbolsfill
  summary: 'An array containing a set of symbol types designed for filling: circle, cross, diamond, square, star, triangle, and wye'
  belongs_to: shape
  description: |-
    ###### d3.**symbolsFill** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    An array containing a set of symbol types designed for filling: [circle](#symbolCircle), [cross](#symbolCross), [diamond](#symbolDiamond), [square](#symbolSquare), [star](#symbolStar), [triangle](#symbolTriangle), and [wye](#symbolWye). Useful for constructing the range of an [ordinal scale](d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.
- name: d3.symbolSquare
  id: d3-shape#symbolsquare
  summary: The square symbol type; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolSquare** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square.js)

    The square symbol type; intended for filling.
- name: d3.symbolSquare2
  id: d3-shape#symbolsquare2
  summary: The square2 symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolSquare2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square2.js)

    The square2 symbol type; intended for stroking.
- name: d3.symbolsStroke
  id: d3-shape#symbolsstroke
  summary: 'An array containing a set of symbol types designed for stroking: circle, plus, times, triangle2, asterisk, square2, and diamond2'
  belongs_to: shape
  description: |-
    ###### d3.**symbolsStroke** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    An array containing a set of symbol types designed for stroking: [circle](#symbolCircle), [plus](#symbolPlus), [times](#symbolTimes), [triangle2](#symbolTriangle2), [asterisk](#symbolAsterisk), [square2](#symbolSquare2), and [diamond2](#symbolDiamond2). Useful for constructing the range of an [ordinal scale](d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.
- name: d3.symbolStar
  id: d3-shape#symbolstar
  summary: The pentagonal star (pentagram) symbol type; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolStar** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/star.js)

    The pentagonal star (pentagram) symbol type; intended for filling.
- name: d3.symbolTimes
  id: d3-shape#symboltimes
  summary: The X-shape symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolTimes** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/times.js)

    The X-shape symbol type; intended for stroking.
- name: d3.symbolTriangle
  id: d3-shape#symboltriangle
  summary: The up-pointing triangle symbol type; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolTriangle** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle.js)

    The up-pointing triangle symbol type; intended for filling.
- name: d3.symbolTriangle2
  id: d3-shape#symboltriangle2
  summary: The up-pointing triangle symbol type; intended for stroking
  belongs_to: shape
  description: |-
    ###### d3.**symbolTriangle2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle2.js)

    The up-pointing triangle symbol type; intended for stroking.
- name: d3.symbolWye
  id: d3-shape#symbolwye
  summary: The Y-shape symbol type; intended for filling
  belongs_to: shape
  description: |-
    ###### d3.**symbolWye** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/wye.js)

    The Y-shape symbol type; intended for filling.
- name: d3.text()
  id: d3-fetch#text
  summary: Fetches the text file at the specified input URL
  belongs_to: fetch
  description: |-
    ###### d3.**text**(*input*\[, *init*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/text.js "Source")

    Fetches the text file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.
- name: d3.text()
  id: d3-request#text
  summary: Returns a new request to get the text file at the specified url with the default mime type text/plain
  belongs_to: request
  description: |-
    ###### d3.**text**(*url*\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/text.js "Source")

    Returns a new [*request*](#request) to [get](#request_get) the text file at the specified *url* with the default mime type `text/plain`. If no *callback* is specified, this is equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/plain")
        .response(function(xhr) { return xhr.responseText; });
    ```

    If a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/plain")
        .response(function(xhr) { return xhr.responseText; })
        .get(callback);
    ```
- name: d3.thresholdFreedmanDiaconis()
  id: d3-array#thresholdfreedmandiaconis
  summary: Returns the number of bins according to the Freedman–Diaconis rule; the input values must be numbers
  belongs_to: array
  description: |-
    ###### d3.**thresholdFreedmanDiaconis**(*values*, *min*, *max*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/freedmanDiaconis.js), [Examples](https://observablehq.com/@d3/d3-bin)

    Returns the number of bins according to the [Freedman–Diaconis rule](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.
- name: d3.thresholdScott()
  id: d3-array#thresholdscott
  summary: Returns the number of bins according to Scott’s normal reference rule; the input values must be numbers
  belongs_to: array
  description: |-
    ###### d3.**thresholdScott**(*values*, *min*, *max*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/scott.js), [Examples](https://observablehq.com/@d3/d3-bin)

    Returns the number of bins according to [Scott’s normal reference rule](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.
- name: d3.thresholdSturges()
  id: d3-array#thresholdsturges
  summary: Returns the number of bins according to Sturges’ formula; the input values must be numbers
  belongs_to: array
  description: |-
    ###### d3.**thresholdSturges**(*values*) · [Source](https://github.com/d3/d3-array/blob/main/src/threshold/sturges.js), [Examples](https://observablehq.com/@d3/d3-bin)

    Returns the number of bins according to [Sturges’ formula](https://en.wikipedia.org/wiki/Histogram#Mathematical_definition); the input *values* must be numbers.

    You may also implement your own threshold generator taking three arguments: the array of input [*values*](#bin_value) derived from the data, and the [observable domain](#bin_domain) represented as *min* and *max*. The generator may then return either the array of numeric thresholds or the *count* of bins; in the latter case the domain is divided uniformly into approximately *count* bins; see [ticks](#ticks).

    For instance, when binning date values, you might want to use the ticks from a time scale ([Example](https://observablehq.com/@d3/d3-bin-time-thresholds)).

    ### Interning
- name: d3.tickFormat()
  id: d3-scale#tickformat
  summary: Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values, as determined by d3.tickStep
  belongs_to: scale
  description: |-
    ###### d3.**tickFormat**(*start*, *stop*, *count*\[, *specifier*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/tickFormat.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Returns a [number format](d3-format) function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values, as determined by [d3.tickStep](d3-array#tickStep).

    An optional *specifier* allows a [custom format](d3-format#locale_format) where the precision of the format is automatically set by the scale as appropriate for the tick interval. For example, to format percentage change, you might say:

    ``` javascript
    var tickFormat = d3.tickFormat(-1, 1, 5, "+%");

    tickFormat(-0.5); // "-50%"
    ```

    If *specifier* uses the format type `s`, the scale will return a [SI-prefix format](d3-format#locale_formatPrefix) based on the larger absolute value of *start* and *stop*. If the *specifier* already specifies a precision, this method is equivalent to [*locale*.format](d3-format#locale_format).

    #### Linear Scales
- name: d3.tickIncrement()
  id: d3-array#tickincrement
  summary: Like d3.tickStep, except requires that start is always less than or equal to stop, and if the tick step for the given start, stop and count would be less than one, returns the negative inverse tick step instead
  belongs_to: array
  description: |-
    ###### d3.**tickIncrement**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)

    Like [d3.tickStep](#tickStep), except requires that *start* is always less than or equal to *stop*, and if the tick step for the given *start*, *stop* and *count* would be less than one, returns the negative inverse tick step instead. This method is always guaranteed to return an integer, and is used by [d3.ticks](#ticks) to guarantee that the returned tick values are represented as precisely as possible in IEEE 754 floating point.
- name: d3.ticks()
  id: d3-array#ticks
  summary: Returns an array of approximately count + 1 uniformly-spaced, nicely-rounded values between start and stop (inclusive)
  belongs_to: array
  description: |-
    ###### d3.**ticks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)

    Returns an array of approximately *count* + 1 uniformly-spaced, nicely-rounded values between *start* and *stop* (inclusive). Each value is a power of ten multiplied by 1, 2 or 5. See also [d3.tickIncrement](#tickIncrement), [d3.tickStep](#tickStep) and [*linear*.ticks](https://github.com/d3/d3-scale/blob/main/README.md#linear_ticks).

    Ticks are inclusive in the sense that they may include the specified *start* and *stop* values if (and only if) they are exact, nicely-rounded values consistent with the inferred [step](#tickStep). More formally, each returned tick *t* satisfies *start* ≤ *t* and *t* ≤ *stop*.
- name: d3.tickStep()
  id: d3-array#tickstep
  summary: 'Returns the difference between adjacent tick values if the same arguments were passed to d3.ticks: a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5'
  belongs_to: array
  description: |-
    ###### d3.**tickStep**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-array/blob/main/src/ticks.js), [Examples](https://observablehq.com/@d3/d3-ticks)

    Returns the difference between adjacent tick values if the same arguments were passed to [d3.ticks](#ticks): a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5. Note that due to the limited precision of IEEE 754 floating point, the returned value may not be exact decimals; use [d3-format](d3-format) to format numbers for human consumption.
- name: d3.tile()
  id: d3-tile#tile
  summary: Constructs a new tile layout with the default settings
  belongs_to: tile
  description: |-
    ###### d3.**tile**() · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/collection/@d3/d3-tile)

    Constructs a new tile layout with the default settings.

    ``` javascript
    const tile = d3.tile();
    ```
- name: d3.tileWrap()
  id: d3-tile#tilewrap
  summary: Given tile coordinates [x, y, z], where x and y may be outside the “world” tile [0, 0, 0], returns the wrapped tile coordinates [x′, y′, z] where j = 2 ^ z, x′ = x - ⌊x / j⌋ * j and y′ = y - ⌊y / j⌋ * j
  belongs_to: tile
  description: "###### d3.**tileWrap**(*tile*) · [Source](https://github.com/d3/d3-tile/blob/master/src/wrap.js), [Examples](https://observablehq.com/@d3/wrapped-tiles)\n\nGiven *tile* coordinates \\[*x*, *y*, *z*\\], where *x* and *y* may be outside the “world” tile \\[0, 0, 0\\], returns the wrapped tile coordinates \\[*x′*, *y′*, *z*\\] where *j* = 2 ^ *z*, *x′* = *x* - ⌊*x* / *j*⌋ \\* *j* and *y′* = *y* - ⌊*y* / *j*⌋ \\* *j*. This function is most commonly used in conjunction with [*tile*.clampX](#tile_clampX) to allow horizontal wrapping of web Mercator tiles.\n\n``` javascript\nd3.tileWrap([-1, 0, 1]) // [1, 0, 1]\nd3.tileWrap([-1, 0, 2]) // [3, 0, 2]\n```\n\nSee [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-tile](https://github.com/d3/d3-tile)"
- name: d3.timeDays()
  id: d3-time#timedays
  summary: Aliases for d3.timeDay.range, d3.utcDay.range, and d3.unixDay.range
  belongs_to: time
  description: |-
    ###### d3.**timeDays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js) d3.**utcDays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js) d3.**unixDays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js)

    Aliases for [d3.timeDay](#timeDay).[range](#interval_range), [d3.utcDay](#timeDay).[range](#interval_range), and [d3.unixDay](#timeDay).[range](#interval_range).
- name: d3.timeFormat()
  id: d3-time-format#timeformat
  summary: An alias for locale.format on the default locale
  belongs_to: time-format
  description: |-
    ###### d3.**timeFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)

    An alias for [*locale*.format](#locale_format) on the [default locale](#timeFormatDefaultLocale).
- name: d3.timeFormatDefaultLocale()
  id: d3-time-format#timeformatdefaultlocale
  summary: Equivalent to d3.timeFormatLocale, except it also redefines d3.timeFormat, d3.timeParse, d3.utcFormat and d3.utcParse to the new locale’s locale.format, locale.parse, locale.utcFormat and locale.utcParse
  belongs_to: time-format
  description: "###### d3.**timeFormatDefaultLocale**(*definition*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nEquivalent to [d3.timeFormatLocale](#timeFormatLocale), except it also redefines [d3.timeFormat](#timeFormat), [d3.timeParse](#timeParse), [d3.utcFormat](#utcFormat) and [d3.utcParse](#utcParse) to the new locale’s [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat) and [*locale*.utcParse](#locale_utcParse). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-time-format/blob/main/locale/en-US.json).\n\nFor an example, see [Localized Time Axis](https://bl.ocks.org/mbostock/6f1cc065d4d172bcaf322e399aa8d62f).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-time-format](https://github.com/d3/d3-time-format)"
- name: d3.timeFormatLocale()
  id: d3-time-format#timeformatlocale
  summary: Returns a locale object for the specified definition with locale.format, locale.parse, locale.utcFormat, locale.utcParse methods
  belongs_to: time-format
  description: |-
    ###### d3.**timeFormatLocale**(*definition*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)

    Returns a *locale* object for the specified *definition* with [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat), [*locale*.utcParse](#locale_utcParse) methods. The *definition* must include the following properties:

    - `dateTime` - the date and time (`%c`) format specifier (*e.g.*, `"%a %b %e %X %Y"`).
    - `date` - the date (`%x`) format specifier (*e.g.*, `"%m/%d/%Y"`).
    - `time` - the time (`%X`) format specifier (*e.g.*, `"%H:%M:%S"`).
    - `periods` - the A.M. and P.M. equivalents (*e.g.*, `["AM", "PM"]`).
    - `days` - the full names of the weekdays, starting with Sunday.
    - `shortDays` - the abbreviated names of the weekdays, starting with Sunday.
    - `months` - the full names of the months (starting with January).
    - `shortMonths` - the abbreviated names of the months (starting with January).

    For an example, see [Localized Time Axis II](https://bl.ocks.org/mbostock/805115ebaa574e771db1875a6d828949).
- name: d3.timeFridays()
  id: d3-time#timefridays
  summary: Aliases for d3.timeFriday.range and d3.utcFriday.range
  belongs_to: time
  description: |-
    ###### d3.**timeFridays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcFridays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeFriday](#timeFriday).[range](#interval_range) and [d3.utcFriday](#timeFriday).[range](#interval_range).
- name: d3.timeHours()
  id: d3-time#timehours
  summary: Aliases for d3.timeHour.range and d3.utcHour.range
  belongs_to: time
  description: |-
    ###### d3.**timeHours**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/hour.js) d3.**utcHours**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcHour.js)

    Aliases for [d3.timeHour](#timeHour).[range](#interval_range) and [d3.utcHour](#timeHour).[range](#interval_range).
- name: d3.timeInterval()
  id: d3-time#timeinterval
  summary: Constructs a new custom interval given the specified floor and offset functions and an optional count function
  belongs_to: time
  description: |-
    ###### d3.**timeInterval**(*floor*, *offset*\[, *count*\[, *field*\]\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Constructs a new custom interval given the specified *floor* and *offset* functions and an optional *count* function.

    The *floor* function takes a single date as an argument and rounds it down to the nearest interval boundary.

    The *offset* function takes a date and an integer step as arguments and advances the specified date by the specified number of boundaries; the step may be positive, negative or zero.

    The optional *count* function takes a start date and an end date, already floored to the current interval, and returns the number of boundaries between the start (exclusive) and end (inclusive). If a *count* function is not specified, the returned interval does not expose [*interval*.count](#interval_count) or [*interval*.every](#interval_every) methods. Note: due to an internal optimization, the specified *count* function must not invoke *interval*.count on other time intervals.

    The optional *field* function takes a date, already floored to the current interval, and returns the field value of the specified date, corresponding to the number of boundaries between this date (exclusive) and the latest previous parent boundary. For example, for the [d3.timeDay](#timeDay) interval, this returns the number of days since the start of the month. If a *field* function is not specified, it defaults to counting the number of interval boundaries since the UNIX epoch of January 1, 1970 UTC. The *field* function defines the behavior of [*interval*.every](#interval_every).

    ### Intervals

    The following intervals are provided:
- name: d3.timeMilliseconds()
  id: d3-time#timemilliseconds
  summary: Aliases for d3.timeMillisecond.range and d3.utcMillisecond.range
  belongs_to: time
  description: |-
    ###### d3.**timeMilliseconds**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/millisecond.js) d3.**utcMilliseconds**(*start*, *stop*\[, *step*\])

    Aliases for [d3.timeMillisecond](#timeMillisecond).[range](#interval_range) and [d3.utcMillisecond](#timeMillisecond).[range](#interval_range).
- name: d3.timeMinutes()
  id: d3-time#timeminutes
  summary: Aliases for d3.timeMinute.range and d3.utcMinute.range
  belongs_to: time
  description: |-
    ###### d3.**timeMinutes**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/minute.js) d3.**utcMinutes**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcMinute.js)

    Aliases for [d3.timeMinute](#timeMinute).[range](#interval_range) and [d3.utcMinute](#timeMinute).[range](#interval_range).
- name: d3.timeMondays()
  id: d3-time#timemondays
  summary: Aliases for d3.timeMonday.range and d3.utcMonday.range
  belongs_to: time
  description: |-
    ###### d3.**timeMondays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcMondays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeMonday](#timeMonday).[range](#interval_range) and [d3.utcMonday](#timeMonday).[range](#interval_range).
- name: d3.timeMonths()
  id: d3-time#timemonths
  summary: Aliases for d3.timeMonth.range and d3.utcMonth.range
  belongs_to: time
  description: |-
    ###### d3.**timeMonths**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/month.js) d3.**utcMonths**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcMonth.js)

    Aliases for [d3.timeMonth](#timeMonth).[range](#interval_range) and [d3.utcMonth](#timeMonth).[range](#interval_range).
- name: d3.timeout()
  id: d3-timer#timeout
  summary: Like timer, except the timer automatically stops on its first callback
  belongs_to: timer
  description: |-
    ###### d3.**timeout**(*callback*\[, *delay*\[, *time*\]\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timeout.js "Source")

    Like [timer](#timer), except the timer automatically [stops](#timer_stop) on its first callback. A suitable replacement for [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) that is guaranteed to not run in the background. The *callback* is passed the elapsed time.
- name: d3.timeParse()
  id: d3-time-format#timeparse
  summary: An alias for locale.parse on the default locale
  belongs_to: time-format
  description: |-
    ###### d3.**timeParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)

    An alias for [*locale*.parse](#locale_parse) on the [default locale](#timeFormatDefaultLocale).
- name: d3.timer()
  id: d3-timer#timer
  summary: Schedules a new timer, invoking the specified callback repeatedly until the timer is stopped
  belongs_to: timer
  description: |-
    ###### d3.**timer**(*callback*\[, *delay*\[, *time*\]\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js "Source")

    Schedules a new timer, invoking the specified *callback* repeatedly until the timer is [stopped](#timer_stop). An optional numeric *delay* in milliseconds may be specified to invoke the given *callback* after a delay; if *delay* is not specified, it defaults to zero. The delay is relative to the specified *time* in milliseconds; if *time* is not specified, it defaults to [now](#now).

    The *callback* is passed the (apparent) *elapsed* time since the timer became active. For example:

    ``` javascript
    const t = d3.timer((elapsed) => {
      console.log(elapsed);
      if (elapsed > 200) t.stop();
    }, 150);
    ```

    This produces roughly the following console output:

    ``` notranslate
    3
    25
    48
    65
    85
    106
    125
    146
    167
    189
    209
    ```

    (The exact values may vary depending on your JavaScript runtime and what else your computer is doing.) Note that the first *elapsed* time is 3ms: this is the elapsed time since the timer started, not since the timer was scheduled. Here the timer started 150ms after it was scheduled due to the specified delay. The apparent *elapsed* time may be less than the true *elapsed* time if the page is backgrounded and [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is paused; in the background, apparent time is frozen.

    If [timer](#timer) is called within the callback of another timer, the new timer callback (if eligible as determined by the specified *delay* and *time*) will be invoked immediately at the end of the current frame, rather than waiting until the next frame. Within a frame, timer callbacks are guaranteed to be invoked in the order they were scheduled, regardless of their start time.
- name: d3.timerFlush()
  id: d3-timer#timerflush
  summary: Immediately invoke any eligible timer callbacks
  belongs_to: timer
  description: |-
    ###### d3.**timerFlush**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js "Source")

    Immediately invoke any eligible timer callbacks. Note that zero-delay timers are normally first executed after one frame (~17ms). This can cause a brief flicker because the browser renders the page twice: once at the end of the first event loop, then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop, you can run any zero-delay timers immediately and avoid the flicker.
- name: d3.timeSaturdays()
  id: d3-time#timesaturdays
  summary: Aliases for d3.timeSaturday.range and d3.utcSaturday.range
  belongs_to: time
  description: |-
    ###### d3.**timeSaturdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSaturdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeSaturday](#timeSaturday).[range](#interval_range) and [d3.utcSaturday](#timeSaturday).[range](#interval_range).
- name: d3.timeSeconds()
  id: d3-time#timeseconds
  summary: Aliases for d3.timeSecond.range and d3.utcSecond.range
  belongs_to: time
  description: |-
    ###### d3.**timeSeconds**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/second.js) d3.**utcSeconds**(*start*, *stop*\[, *step*\])

    Aliases for [d3.timeSecond](#timeSecond).[range](#interval_range) and [d3.utcSecond](#timeSecond).[range](#interval_range).
- name: d3.timeSundays()
  id: d3-time#timesundays
  summary: Aliases for d3.timeSunday.range and d3.utcSunday.range
  belongs_to: time
  description: |-
    ###### d3.**timeSundays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSundays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeSunday](#timeSunday).[range](#interval_range) and [d3.utcSunday](#timeSunday).[range](#interval_range).
- name: d3.timeThursdays()
  id: d3-time#timethursdays
  summary: Aliases for d3.timeThursday.range and d3.utcThursday.range
  belongs_to: time
  description: |-
    ###### d3.**timeThursdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcThursdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeThursday](#timeThursday).[range](#interval_range) and [d3.utcThursday](#timeThursday).[range](#interval_range).
- name: d3.timeTickInterval()
  id: d3-time#timetickinterval
  summary: Returns the time interval that would be used by d3.timeTicks given the same arguments
  belongs_to: time
  description: |-
    ###### d3.**timeTickInterval**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)

    Returns the time interval that would be used by [d3.timeTicks](#timeTicks) given the same arguments.
- name: d3.timeTicks()
  id: d3-time#timeticks
  summary: Equivalent to d3.utcTicks, but in local time
  belongs_to: time
  description: |-
    ###### d3.**timeTicks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)

    Equivalent to [d3.utcTicks](#utcTicks), but in local time.
- name: d3.timeTuesdays()
  id: d3-time#timetuesdays
  summary: Aliases for d3.timeTuesday.range and d3.utcTuesday.range
  belongs_to: time
  description: |-
    ###### d3.**timeTuesdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcTuesdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeTuesday](#timeTuesday).[range](#interval_range) and [d3.utcTuesday](#timeTuesday).[range](#interval_range).
- name: d3.timeWednesdays()
  id: d3-time#timewednesdays
  summary: Aliases for d3.timeWednesday.range and d3.utcWednesday.range
  belongs_to: time
  description: |-
    ###### d3.**timeWednesdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcWednesdays**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)

    Aliases for [d3.timeWednesday](#timeWednesday).[range](#interval_range) and [d3.utcWednesday](#timeWednesday).[range](#interval_range).
- name: d3.timeWeeks()
  id: d3-time#timeweeks
  summary: Aliases for d3.timeWeek.range and d3.utcWeek.range
  belongs_to: time
  description: |-
    ###### d3.**timeWeeks**(*start*, *stop*\[, *step*\]) d3.**utcWeeks**(*start*, *stop*\[, *step*\])

    Aliases for [d3.timeWeek](#timeWeek).[range](#interval_range) and [d3.utcWeek](#timeWeek).[range](#interval_range).
- name: d3.timeYears()
  id: d3-time#timeyears
  summary: Aliases for d3.timeYear.range and d3.utcYear.range
  belongs_to: time
  description: |-
    ###### d3.**timeYears**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/year.js) d3.**utcYears**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcYear.js)

    Aliases for [d3.timeYear](#timeYear).[range](#interval_range) and [d3.utcYear](#timeYear).[range](#interval_range).

    ### Ticks
- name: d3.transition()
  id: d3-transition#transition
  summary: Returns a new transition on the root element, document.documentElement, with the specified name
  belongs_to: transition
  description: |-
    ###### d3.**transition**(\[*name*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/index.js#L29)

    Returns a new transition on the root element, `document.documentElement`, with the specified *name*. If a *name* is not specified, null is used. The new transition is only exclusive with other transitions of the same name. The *name* may also be a [transition](#transition) instance; see [*selection*.transition](#selection_transition). This method is equivalent to:

    ``` javascript
    d3.selection()
      .transition(name)
    ```

    This function can also be used to test for transitions (`instanceof d3.transition`) or to extend the transition prototype.
- name: d3.transpose()
  id: d3-array#transpose
  summary: Uses the zip operator as a two-dimensional matrix transpose
  belongs_to: array
  description: |-
    ###### d3.**transpose**(*matrix*) · [Source](https://github.com/d3/d3-array/blob/main/src/transpose.js), [Examples](https://observablehq.com/@d3/d3-transpose)

    Uses the [zip](#zip) operator as a two-dimensional [matrix transpose](http://en.wikipedia.org/wiki/Transpose).
- name: d3.tree()
  id: d3-hierarchy#tree
  summary: The tree layout produces tidy node-link diagrams of trees using the Reingold–Tilford “tidy” algorithm, improved to run in linear time by Buchheim et al
  belongs_to: hierarchy
  description: |-
    ### Tree

    The **tree** layout produces tidy node-link diagrams of trees using the [Reingold–Tilford “tidy” algorithm](http://reingold.co/tidier-drawings.pdf), improved to run in linear time by [Buchheim *et al.*](http://dirk.jivas.de/papers/buchheim02improving.pdf) Tidy trees are typically more compact than [dendrograms](#cluster).

    ###### d3.**tree**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/tree.js), [Examples](https://observablehq.com/@d3/tidy-tree)

    Creates a new tree layout with default settings.
- name: d3.treemap()
  id: d3-hierarchy#treemap
  summary: Introduced by Ben Shneiderman in 1991, a treemap recursively subdivides area into rectangles according to each node’s associated value
  belongs_to: hierarchy
  description: |-
    ### Treemap

    Introduced by [Ben Shneiderman](http://www.cs.umd.edu/hcil/treemap-history/) in 1991, a **treemap** recursively subdivides area into rectangles according to each node’s associated value. D3’s treemap implementation supports an extensible [tiling method](#treemap_tile): the default [squarified](#treemapSquarify) method seeks to generate rectangles with a [golden](https://en.wikipedia.org/wiki/Golden_ratio) aspect ratio; this offers better readability and size estimation than [slice-and-dice](#treemapSliceDice), which simply alternates between horizontal and vertical subdivision by depth.

    ###### d3.**treemap**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/index.js), [Examples](https://observablehq.com/@d3/treemap)

    Creates a new treemap layout with default settings.
- name: d3.treemapBinary()
  id: d3-hierarchy#treemapbinary
  summary: Recursively partitions the specified nodes into an approximately-balanced binary tree, choosing horizontal partitioning for wide rectangles and vertical partitioning for tall rectangles
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapBinary**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/binary.js), [Examples](https://observablehq.com/@d3/treemap)

    Recursively partitions the specified *nodes* into an approximately-balanced binary tree, choosing horizontal partitioning for wide rectangles and vertical partitioning for tall rectangles.
- name: d3.treemapDice()
  id: d3-hierarchy#treemapdice
  summary: Divides the rectangular area specified by x0, y0, x1, y1 horizontally according the value of each of the specified node’s children
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapDice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/dice.js), [Examples](https://observablehq.com/@d3/treemap)

    Divides the rectangular area specified by *x0*, *y0*, *x1*, *y1* horizontally according the value of each of the specified *node*’s children. The children are positioned in order, starting with the left edge (*x0*) of the given rectangle. If the sum of the children’s values is less than the specified *node*’s value (*i.e.*, if the specified *node* has a non-zero internal value), the remaining empty space will be positioned on the right edge (*x1*) of the given rectangle.
- name: d3.treemapResquarify()
  id: d3-hierarchy#treemapresquarify
  summary: Like d3.treemapSquarify, except preserves the topology (node adjacencies) of the previous layout computed by d3.treemapResquarify, if there is one and it used the same target aspect ratio
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapResquarify**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/resquarify.js), [Examples](https://observablehq.com/@d3/animated-treemap)

    Like [d3.treemapSquarify](#treemapSquarify), except preserves the topology (node adjacencies) of the previous layout computed by d3.treemapResquarify, if there is one and it used the same [target aspect ratio](#squarify_ratio). This tiling method is good for animating changes to treemaps because it only changes node sizes and not their relative positions, thus avoiding distracting shuffling and occlusion. The downside of a stable update, however, is a suboptimal layout for subsequent updates: only the first layout uses the Bruls *et al.* squarified algorithm.
- name: d3.treemapSlice()
  id: d3-hierarchy#treemapslice
  summary: Divides the rectangular area specified by x0, y0, x1, y1 vertically according the value of each of the specified node’s children
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapSlice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/slice.js), [Examples](https://observablehq.com/@d3/treemap)

    Divides the rectangular area specified by *x0*, *y0*, *x1*, *y1* vertically according the value of each of the specified *node*’s children. The children are positioned in order, starting with the top edge (*y0*) of the given rectangle. If the sum of the children’s values is less than the specified *node*’s value (*i.e.*, if the specified *node* has a non-zero internal value), the remaining empty space will be positioned on the bottom edge (*y1*) of the given rectangle.
- name: d3.treemapSliceDice()
  id: d3-hierarchy#treemapslicedice
  summary: If the specified node has odd depth, delegates to treemapSlice; otherwise delegates to treemapDice
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapSliceDice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/sliceDice.js), [Examples](https://observablehq.com/@d3/treemap)

    If the specified *node* has odd depth, delegates to [treemapSlice](#treemapSlice); otherwise delegates to [treemapDice](#treemapDice).
- name: d3.treemapSquarify()
  id: d3-hierarchy#treemapsquarify
  summary: Implements the squarified treemap algorithm by Bruls et al., which seeks to produce rectangles of a given aspect ratio
  belongs_to: hierarchy
  description: |-
    ###### d3.**treemapSquarify**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/squarify.js), [Examples](https://observablehq.com/@d3/treemap)

    Implements the [squarified treemap](https://www.win.tue.nl/~vanwijk/stm.pdf) algorithm by Bruls *et al.*, which seeks to produce rectangles of a given [aspect ratio](#squarify_ratio).
- name: d3.tsv()
  id: d3-fetch#tsv
  summary: Equivalent to d3.dsv with the tab character as the delimiter
  belongs_to: fetch
  description: |-
    ###### d3.**tsv**(*input*\[, *init*\]\[, *row*\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js "Source")

    Equivalent to [d3.dsv](#dsv) with the tab character as the delimiter.
- name: d3.tsv()
  id: d3-request#tsv
  summary: Returns a new request for a TSV file at the specified url with the default mime type text/tab-separated-values
  belongs_to: request
  description: |-
    ###### d3.**tsv**(*url*\[\[, *row*\], *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/tsv.js "Source")

    Returns a new [*request*](#request) for a [TSV](d3-dsv#tsvParse) file at the specified *url* with the default mime type `text/tab-separated-values`. If no *callback* is specified, this is equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/tab-separated-values")
        .response(function(xhr) { return d3.tsvParse(xhr.responseText, row); });
    ```

    If a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:

    ``` javascript
    d3.request(url)
        .mimeType("text/tab-separated-values")
        .response(function(xhr) { return d3.tsvParse(xhr.responseText, row); })
        .get(callback);
    ```

    An optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:

    ``` javascript
    function row(d) {
      return {
        year: new Date(+d.Year, 0, 1), // convert "Year" column to Date
        make: d.Make,
        model: d.Model,
        length: +d.Length // convert "Length" column to number
      };
    }
    ```

    The returned *request* exposes an additional *request*.row method as an alternative to passing the *row* conversion function to d3.tsv, allowing you to configure the request before sending it. For example, this:

    ``` javascript
    d3.tsv(url, row, callback);
    ```

    Is equivalent to this:

    ``` javascript
    d3.tsv(url)
        .row(row)
        .get(callback);
    ```
- name: d3.tsvFormat()
  id: d3-dsv#tsvformat
  summary: Equivalent to dsvFormat("\t").format
  belongs_to: dsv
  description: |-
    ###### d3.**tsvFormat**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[format](#dsv_format).
- name: d3.tsvFormatBody()
  id: d3-dsv#tsvformatbody
  summary: Equivalent to dsvFormat("\t").formatBody
  belongs_to: dsv
  description: |-
    ###### d3.**tsvFormatBody**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[formatBody](#dsv_formatBody).
- name: d3.tsvFormatRow()
  id: d3-dsv#tsvformatrow
  summary: Equivalent to dsvFormat("\t").formatRow
  belongs_to: dsv
  description: |-
    ###### d3.**tsvFormatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[formatRow](#dsv_formatRow).
- name: d3.tsvFormatRows()
  id: d3-dsv#tsvformatrows
  summary: Equivalent to dsvFormat("\t").formatRows
  belongs_to: dsv
  description: |-
    ###### d3.**tsvFormatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[formatRows](#dsv_formatRows).
- name: d3.tsvFormatValue()
  id: d3-dsv#tsvformatvalue
  summary: Equivalent to dsvFormat("\t").formatValue
  belongs_to: dsv
  description: |-
    ###### d3.**tsvFormatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[formatValue](#dsv_formatValue).
- name: d3.tsvParse()
  id: d3-dsv#tsvparse
  summary: Equivalent to dsvFormat("\t").parse
  belongs_to: dsv
  description: |-
    ###### d3.**tsvParse**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[parse](#dsv_parse). Note: requires unsafe-eval [content security policy](#content-security-policy).
- name: d3.tsvParseRows()
  id: d3-dsv#tsvparserows
  summary: Equivalent to dsvFormat("\t").parseRows
  belongs_to: dsv
  description: |-
    ###### d3.**tsvParseRows**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js "Source")

    Equivalent to [dsvFormat](#dsvFormat)("\t").[parseRows](#dsv_parseRows).
- name: d3.union()
  id: d3-array#union
  summary: Returns a new InternSet containing every (distinct) value that appears in any of the given iterables
  belongs_to: array
  description: |-
    ###### d3.**union**(...*iterables*) · [Source](https://github.com/d3/d3-array/blob/main/src/union.js)

    Returns a new InternSet containing every (distinct) value that appears in any of the given *iterables*. The order of values in the returned set is based on their first occurrence in the given *iterables*.

    ``` javascript
    d3.union([0, 2, 1, 0], [1, 3]) // Set {0, 2, 1, 3}
    ```
- name: d3.utcFormat()
  id: d3-time-format#utcformat
  summary: An alias for locale.utcFormat on the default locale
  belongs_to: time-format
  description: |-
    ###### d3.**utcFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)

    An alias for [*locale*.utcFormat](#locale_utcFormat) on the [default locale](#timeFormatDefaultLocale).
- name: d3.utcParse()
  id: d3-time-format#utcparse
  summary: An alias for locale.utcParse on the default locale
  belongs_to: time-format
  description: |-
    ###### d3.**utcParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)

    An alias for [*locale*.utcParse](#locale_utcParse) on the [default locale](#timeFormatDefaultLocale).
- name: d3.utcTickInterval()
  id: d3-time#utctickinterval
  summary: Returns the time interval that would be used by d3.utcTicks given the same arguments
  belongs_to: time
  description: "###### d3.**utcTickInterval**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)\n\nReturns the time interval that would be used by [d3.utcTicks](#utcTicks) given the same arguments. If there is no associated interval, such as when *start* or *stop* is invalid, returns null.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-time](https://github.com/d3/d3-time)"
- name: d3.utcTicks()
  id: d3-time#utcticks
  summary: Returns an array of approximately count dates at regular intervals between start and stop (inclusive)
  belongs_to: time
  description: |-
    ###### d3.**utcTicks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)

    Returns an array of approximately *count* dates at regular intervals between *start* and *stop* (inclusive). If *stop* is before *start*, dates are returned in reverse chronological order; otherwise dates are returned in chronological order. The following UTC time intervals are considered:

    - 1 second
    - 5 seconds
    - 15 seconds
    - 30 seconds
    - 1 minute
    - 5 minutes
    - 15 minutes
    - 30 minutes
    - 1 hour
    - 3 hours
    - 6 hours
    - 12 hours
    - 1 day
    - 2 days
    - 1 week
    - 1 month
    - 3 months
    - 1 year

    Multiples of milliseconds (for small ranges) and years (for large ranges) are also considered, following the rules of [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks). The interval producing the number of dates that is closest to *count* is used. For example:

    ``` javascript
    start = new Date(Date.UTC(1970, 2, 1))
    stop = new Date(Date.UTC(1996, 2, 19))
    count = 4
    d3.utcTicks(start, stop, count) // [1975-01-01, 1980-01-01, 1985-01-01, 1990-01-01, 1995-01-01]
    ```

    If *count* is a time interval, this function behaves similarly to [*interval*.range](#interval_range) except that both *start* and *stop* are inclusive and it may return dates in reverse chronological order if *stop* is before *start*.
- name: d3.values()
  id: d3-collection#values
  summary: Returns an array containing the property values of the specified object (an associative array)
  belongs_to: collection
  description: |-
    ###### d3.**values**(*object*) [Source](https://github.com/d3/d3-collection/blob/master/src/values.js "Source")

    Returns an array containing the property values of the specified object (an associative array). The order of the returned array is undefined.
- name: d3.variance()
  id: d3-array#variance
  summary: Returns an unbiased estimator of the population variance of the given iterable of numbers using Welford’s algorithm
  belongs_to: array
  description: |-
    ###### d3.**variance**(*iterable*\[, *accessor*\]) · [Source](https://github.com/d3/d3-array/blob/main/src/variance.js), [Examples](https://observablehq.com/@d3/d3-mean-d3-median-and-friends)

    Returns an [unbiased estimator of the population variance](http://mathworld.wolfram.com/SampleVariance.html) of the given *iterable* of numbers using [Welford’s algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm). If the iterable has fewer than two numbers, returns undefined. An optional *accessor* function may be specified, which is equivalent to calling Array.from before computing the variance. This method ignores undefined and NaN values; this is useful for ignoring missing data.
- name: d3.voronoi()
  id: d3-voronoi#voronoi
  summary: Creates a new Voronoi layout with default x- and y- accessors and a null extent
  belongs_to: voronoi
  description: |-
    ###### d3.**voronoi**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js "Source")

    Creates a new Voronoi layout with default [*x*-](#voronoi_x) and [*y*-](#voronoi_y) accessors and a null [extent](#voronoi_extent).
- name: d3.window()
  id: d3-selection#window
  summary: Returns the owner window for the specified node
  belongs_to: selection
  description: |-
    ###### d3.**window**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/window.js)

    Returns the owner window for the specified *node*. If *node* is a node, returns the owner document’s default view; if *node* is a document, returns its default view; otherwise returns the *node*.
- name: d3.xml()
  id: d3-request#xml
  summary: Returns a new request to get the XML file at the specified url with the default mime type application/xml
  belongs_to: request
  description: "###### d3.**xml**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/xml.js \"Source\")\n\nReturns a new [*request*](#request) to [get](#request_get) the XML file at the specified *url* with the default mime type `application/xml`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/xml\")\n    .response(function(xhr) { return xhr.responseXML; });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/xml\")\n    .response(function(xhr) { return xhr.responseXML; })\n    .get(callback);\n```\n\nXML parsing relies on [*xhr*.responseXML](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML) which is not supported by [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest/issues/8) as of version 1.8; thus, this method is supported in browsers but not in Node.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-request](https://github.com/d3/d3-request)"
- name: d3.xml()
  id: d3-fetch#xml
  summary: Fetches the file at the specified input URL as text and then parses it as XML
  belongs_to: fetch
  description: "###### d3.**xml**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as XML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-fetch](https://github.com/d3/d3-fetch)"
- name: d3.zip()
  id: d3-array#zip
  summary: Returns an array of arrays, where the ith array contains the ith element from each of the argument arrays
  belongs_to: array
  description: |-
    ###### d3.**zip**(*arrays…*) · [Source](https://github.com/d3/d3-array/blob/main/src/zip.js), [Examples](https://observablehq.com/@d3/d3-transpose)

    Returns an array of arrays, where the *i*th array contains the *i*th element from each of the argument *arrays*. The returned array is truncated in length to the shortest array in *arrays*. If *arrays* contains only a single array, the returned array contains one-element arrays. With no arguments, the returned array is empty.

    ``` javascript
    d3.zip([1, 2], [3, 4]); // returns [[1, 3], [2, 4]]
    ```
- name: d3.zoom()
  id: d3-zoom#zoom
  summary: Creates a new zoom behavior
  belongs_to: zoom
  description: |-
    ###### d3.**zoom**() · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)

    Creates a new zoom behavior. The returned behavior, [*zoom*](#_drag), is both an object and a function, and is typically applied to selected elements via [*selection*.call](d3-selection#selection_call).
- name: d3.zoomIdentity
  id: d3-zoom#zoomidentity
  summary: The identity transform, where k = 1, t_(x) = t_(y) = 0
  belongs_to: zoom
  description: "###### d3.**zoomIdentity** · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nThe identity transform, where *k* = 1, *t_(x)* = *t_(y)* = 0.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-zoom](https://github.com/d3/d3-zoom)"
- name: d3.zoomTransform()
  id: d3-zoom#zoomtransform
  summary: Returns the current transform for the specified node
  belongs_to: zoom
  description: "###### d3.**zoomTransform**(*node*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the current transform for the specified *node*. Note that *node* should typically be a DOM element, not a *selection*. (A selection may consist of multiple nodes, in different states, and this function only returns a single transform.) If you have a selection, call [*selection*.node](d3-selection#selection_node) first:\n\n``` javascript\nvar transform = d3.zoomTransform(selection.node());\n```\n\nIn the context of an [event listener](d3-selection#selection_on), the *node* is typically the element that received the input event (which should be equal to [*event*.transform](#zoom-events)), *this*:\n\n``` javascript\nvar transform = d3.zoomTransform(this);\n```\n\nInternally, an element’s transform is stored as *element*.\\_\\_zoom; however, you should use this method rather than accessing it directly. If the given *node* has no defined transform, returns the transform of the closest ancestor, or if none exists, the [identity transformation](#zoomIdentity). The returned transform represents a two-dimensional [transformation matrix](https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations) of the form:\n\n*k* 0 *t_(x)*  \n0 *k* *t_(y)*  \n0 0 1\n\n(This matrix is capable of representing only scale and translation; a future release may also allow rotation, though this would probably not be a backwards-compatible change.) The position ⟨*x*,*y*⟩ is transformed to ⟨*xk* + *t_(x)*,*yk* + *t_(y)*⟩. The transform object exposes the following properties:\n\n- *transform*.x - the translation amount *t_(x)* along the *x*-axis.\n- *transform*.y - the translation amount *t_(y)* along the *y*-axis.\n- *transform*.k - the scale factor *k*.\n\nThese properties should be considered read-only; instead of mutating a transform, use [*transform*.scale](#transform_scale) and [*transform*.translate](#transform_translate) to derive a new transform. Also see [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy) for convenience methods on the zoom behavior. To create a transform with a given *k*, *t_(x)*, and *t_(y)*:\n\n``` javascript\nvar t = d3.zoomIdentity.translate(x, y).scale(k);\n```\n\nTo apply the transformation to a [Canvas 2D context](https://www.w3.org/TR/2dcontext/), use [*context*.translate](https://www.w3.org/TR/2dcontext/#dom-context-2d-translate) followed by [*context*.scale](https://www.w3.org/TR/2dcontext/#dom-context-2d-scale):\n\n``` javascript\ncontext.translate(transform.x, transform.y);\ncontext.scale(transform.k, transform.k);\n```\n\nSimilarly, to apply the transformation to HTML elements via [CSS](https://www.w3.org/TR/css-transforms-1/):\n\n``` javascript\ndiv.style(\"transform\", \"translate(\" + transform.x + \"px,\" + transform.y + \"px) scale(\" + transform.k + \")\");\ndiv.style(\"transform-origin\", \"0 0\");\n```\n\nTo apply the transformation to [SVG](https://www.w3.org/TR/SVG/coords.html#TransformAttribute):\n\n``` javascript\ng.attr(\"transform\", \"translate(\" + transform.x + \",\" + transform.y + \") scale(\" + transform.k + \")\");\n```\n\nOr more simply, taking advantage of [*transform*.toString](#transform_toString):\n\n``` javascript\ng.attr(\"transform\", transform);\n```\n\nNote that the order of transformations matters! The translate must be applied before the scale."
- name: delaunay
  id: d3-delaunay
  summary: This is a fast library for computing the Voronoi diagram of a set of two-dimensional points
  description: "# d3-delaunay\n\nGeorgy “The Voronator” Voronoy\n\nThis is a fast library for computing the [Voronoi diagram](https://en.wikipedia.org/wiki/Voronoi_diagram) of a set of two-dimensional points. It is based on [Delaunator](https://github.com/mapbox/delaunator), a fast library for computing the [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation) using [sweep algorithms](https://github.com/mapbox/delaunator#papers). The Voronoi diagram is constructed by connecting the circumcenters of adjacent triangles in the Delaunay triangulation.\n\nFor an interactive explanation of how this library works, see [The Delaunay’s Dual](https://observablehq.com/@mbostock/the-delaunays-dual).\n\n## Installing\n\nIf you use npm, `npm install d3-delaunay`. You can also download the [latest release on GitHub](https://github.com/d3/d3-delaunay/releases/latest). For vanilla HTML in modern browsers, import d3-delaunay from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {Delaunay} from \"https://cdn.skypack.dev/d3-delaunay@6\";\n\nconst points = [[0, 0], [0, 1], [1, 0], [1, 1]];\nconst delaunay = Delaunay.from(points);\nconst voronoi = delaunay.voronoi([0, 0, 960, 500]);\n\n</script>\n```\n\nFor legacy environments, you can load d3-delaunay’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-delaunay@6\"></script>\n<script>\n\nconst delaunay = d3.Delaunay.from(points);\n\n</script>\n```\n\n## API Reference\n\n### Delaunay\n\n###### new **Delaunay**(*points*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the Delaunay triangulation for the given flat array \\[*x0*, *y0*, *x1*, *y1*, …\\] of *points*.\n\n``` javascript\nconst delaunay = new Delaunay(Float64Array.of(0, 0, 0, 1, 1, 0, 1, 1));\n```\n\n###### Delaunay.**from**(*points*\\[, *fx*\\[, *fy*\\[, *that*\\]\\]\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the Delaunay triangulation for the given array or iterable of *points*. If *fx* and *fy* are not specified, then *points* is assumed to be an array of two-element arrays of numbers: \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\], …\\]. Otherwise, *fx* and *fy* are functions that are invoked for each element in the *points* array in order, and must return the respective *x*- and *y*-coordinate for each point. If *that* is specified, the functions *fx* and *fy* are invoked with *that* as *this*. (See [Array.from](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/from) for reference.)\n\n``` javascript\nconst delaunay = Delaunay.from([[0, 0], [0, 1], [1, 0], [1, 1]]);\n```\n\n###### *delaunay*.**points**\n\nThe coordinates of the points as an array \\[*x0*, *y0*, *x1*, *y1*, …\\]. Typically, this is a Float64Array, however you can use any array-like type in the [constructor](#new_Delaunay).\n\n###### *delaunay*.**halfedges**\n\nThe halfedge indexes as an Int32Array \\[*j0*, *j1*, …\\]. For each index 0 ≤ *i* \\< *halfedges*.length, there is a halfedge from triangle vertex *j* = *halfedges*\\[*i*\\] to triangle vertex *i*. Equivalently, this means that triangle ⌊*i* / 3⌋ is adjacent to triangle ⌊*j* / 3⌋. If *j* is negative, then triangle ⌊*i* / 3⌋ is an exterior triangle on the [convex hull](#delaunay_hull). For example, to render the internal edges of the Delaunay triangulation:\n\n``` javascript\nconst {points, halfedges, triangles} = delaunay;\nfor (let i = 0, n = halfedges.length; i < n; ++i) {\n  const j = halfedges[i];\n  if (j < i) continue;\n  const ti = triangles[i];\n  const tj = triangles[j];\n  context.moveTo(points[ti * 2], points[ti * 2 + 1]);\n  context.lineTo(points[tj * 2], points[tj * 2 + 1]);\n}\n```\n\nSee also [*delaunay*.render](#delaunay_render).\n\n###### *delaunay*.**hull**\n\nAn Int32Array of point indexes that form the convex hull in counterclockwise order. If the points are collinear, returns them ordered.\n\nSee also [*delaunay*.renderHull](#delaunay_renderHull).\n\n###### *delaunay*.**triangles**\n\nThe triangle vertex indexes as an Uint32Array \\[*i0*, *j0*, *k0*, *i1*, *j1*, *k1*, …\\]. Each contiguous triplet of indexes *i*, *j*, *k* forms a counterclockwise triangle. The coordinates of the triangle’s points can be found by going through [*delaunay*.points](#delaunay_points). For example, to render triangle *i*:\n\n``` javascript\nconst {points, triangles} = delaunay;\nconst t0 = triangles[i * 3 + 0];\nconst t1 = triangles[i * 3 + 1];\nconst t2 = triangles[i * 3 + 2];\ncontext.moveTo(points[t0 * 2], points[t0 * 2 + 1]);\ncontext.lineTo(points[t1 * 2], points[t1 * 2 + 1]);\ncontext.lineTo(points[t2 * 2], points[t2 * 2 + 1]);\ncontext.closePath();\n```\n\nSee also [*delaunay*.renderTriangle](#delaunay_renderTriangle).\n\n###### *delaunay*.**inedges**\n\nThe incoming halfedge indexes as a Int32Array \\[*e0*, *e1*, *e2*, …\\]. For each point *i*, *inedges*\\[*i*\\] is the halfedge index *e* of an incoming halfedge. For coincident points, the halfedge index is -1; for points on the convex hull, the incoming halfedge is on the convex hull; for other points, the choice of incoming halfedge is arbitrary. The *inedges* table can be used to traverse the Delaunay triangulation; see also [*delaunay*.neighbors](#delaunay_neighbors).\n\n###### *delaunay*.**find**(*x*, *y*\\[, *i*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the index of the input point that is closest to the specified point ⟨*x*, *y*⟩. The search is started at the specified point *i*. If *i* is not specified, it defaults to zero.\n\n###### *delaunay*.**neighbors**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns an iterable over the indexes of the neighboring points to the specified point *i*. The iterable is empty if *i* is a coincident point.\n\n###### *delaunay*.**render**(\\[*context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nRenders the edges of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *delaunay*.**renderHull**(\\[*context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nRenders the convex hull of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *delaunay*.**renderTriangle**(*i*\\[, *context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nRenders triangle *i* of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo, *context*.lineTo and *context*.closePath methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *delaunay*.**renderPoints**(\\[*context*\\]\\[, *radius*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nRenders the input points of the Delaunay triangulation to the specified *context* as circles with the specified *radius*. If *radius* is not specified, it defaults to 2. The specified *context* must implement the *context*.moveTo and *context*.arc methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *delaunay*.**hullPolygon()** [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the closed polygon \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\], …, \\[*x0*, *y0*\\]\\] representing the convex hull.\n\n###### *delaunay*.**trianglePolygons()** [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns an iterable over the [polygons for each triangle](#delaunay_trianglePolygon), in order.\n\n###### *delaunay*.**trianglePolygon(*i*)** [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the closed polygon \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\], \\[*x2*, *y2*\\], \\[*x0*, *y0*\\]\\] representing the triangle *i*.\n\n###### *delaunay*.**update**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nUpdates the triangulation after the points have been modified in-place.\n\n###### *delaunay*.**voronoi**(\\[*bounds*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js \"Source\")\n\nReturns the [Voronoi diagram](#voronoi) for the associated [points](#delaunay_points). When rendering, the diagram will be clipped to the specified *bounds* = \\[*xmin*, *ymin*, *xmax*, *ymax*\\]. If *bounds* is not specified, it defaults to \\[0, 0, 960, 500\\]. See [To Infinity and Back Again](https://observablehq.com/@mbostock/to-infinity-and-back-again) for an interactive explanation of Voronoi cell clipping.\n\nThe Voronoi diagram is returned even in degenerate cases where no triangulation exists — namely 0, 1 or 2 points, and collinear points.\n\n### Voronoi\n\n###### *voronoi*.**delaunay**\n\nThe Voronoi diagram’s associated [Delaunay triangulation](#delaunay).\n\n###### *voronoi*.**circumcenters**\n\nThe [circumcenters](http://mathworld.wolfram.com/Circumcenter.html) of the Delaunay triangles as a Float64Array \\[*cx0*, *cy0*, *cx1*, *cy1*, …\\]. Each contiguous pair of coordinates *cx*, *cy* is the circumcenter for the corresponding triangle. These circumcenters form the coordinates of the Voronoi cell polygons.\n\n###### *voronoi*.**vectors**\n\nA Float64Array \\[*vx0*, *vy0*, *wx0*, *wy0*, …\\] where each non-zero quadruple describes an open (infinite) cell on the outer hull, giving the directions of two open half-lines.\n\n###### *voronoi*.**xmin** *voronoi*.**ymin** *voronoi*.**xmax** *voronoi*.**ymax** \n\nThe bounds of the viewport \\[*xmin*, *ymin*, *xmax*, *ymax*\\] for rendering the Voronoi diagram. These values only affect the rendering methods ([*voronoi*.render](#voronoi_render), [*voronoi*.renderBounds](#voronoi_renderBounds), [*cell*.render](#cell_render)).\n\n###### *voronoi*.**contains**(*i*, *x*, *y*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/cell.js \"Source\")\n\nReturns true if the cell with the specified index *i* contains the specified point ⟨*x*, *y*⟩. (This method is not affected by the associated Voronoi diagram’s viewport [bounds](#voronoi_xmin).)\n\n###### *voronoi*.**neighbors**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nReturns an iterable over the indexes of the cells that share a common edge with the specified cell *i*. Voronoi neighbors are always neighbors on the Delaunay graph, but the converse is false when the common edge has been clipped out by the Voronoi diagram’s viewport.\n\n###### *voronoi*.**render**(\\[*context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nRenders the mesh of Voronoi cells to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *voronoi*.**renderBounds**(\\[*context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nRenders the viewport extent to the specified *context*. The specified *context* must implement the *context*.rect method from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). Equivalent to *context*.rect(*voronoi*.xmin, *voronoi*.ymin, *voronoi*.xmax - *voronoi*.xmin, *voronoi*.ymax - *voronoi*.ymin). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *voronoi*.**renderCell**(*i*\\[, *context*\\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nRenders the cell with the specified index *i* to the specified *context*. The specified *context* must implement the *context*.moveTo , *context*.lineTo and *context*.closePath methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.\n\n###### *voronoi*.**cellPolygons**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nReturns an iterable over the non-empty [polygons for each cell](#voronoi_cellPolygon), with the cell index as property.\n\n###### *voronoi*.**cellPolygon**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nReturns the convex, closed polygon \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\], …, \\[*x0*, *y0*\\]\\] representing the cell for the specified point *i*.\n\n###### *voronoi*.**update**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nUpdates the Voronoi diagram and underlying triangulation after the points have been modified in-place — useful for Lloyd’s relaxation.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-delaunay](https://github.com/d3/d3-delaunay)"
- name: delaunay.find()
  id: d3-delaunay#delaunay_find
  summary: Returns the index of the input point that is closest to the specified point ⟨x, y⟩. The search is started at the specified point i
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**find**(*x*, *y*\[, *i*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns the index of the input point that is closest to the specified point ⟨*x*, *y*⟩. The search is started at the specified point *i*. If *i* is not specified, it defaults to zero.
- name: Delaunay.from()
  id: d3-delaunay#delaunay_from
  summary: Returns the Delaunay triangulation for the given array or iterable of points
  belongs_to: delaunay
  description: |-
    ###### Delaunay.**from**(*points*\[, *fx*\[, *fy*\[, *that*\]\]\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns the Delaunay triangulation for the given array or iterable of *points*. If *fx* and *fy* are not specified, then *points* is assumed to be an array of two-element arrays of numbers: \[\[*x0*, *y0*\], \[*x1*, *y1*\], …\]. Otherwise, *fx* and *fy* are functions that are invoked for each element in the *points* array in order, and must return the respective *x*- and *y*-coordinate for each point. If *that* is specified, the functions *fx* and *fy* are invoked with *that* as *this*. (See [Array.from](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/from) for reference.)

    ``` javascript
    const delaunay = Delaunay.from([[0, 0], [0, 1], [1, 0], [1, 1]]);
    ```
- name: delaunay.halfedges
  id: d3-delaunay#delaunay_halfedges
  summary: The halfedge indexes as an Int32Array [j0, j1, …]
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**halfedges**

    The halfedge indexes as an Int32Array \[*j0*, *j1*, …\]. For each index 0 ≤ *i* \< *halfedges*.length, there is a halfedge from triangle vertex *j* = *halfedges*\[*i*\] to triangle vertex *i*. Equivalently, this means that triangle ⌊*i* / 3⌋ is adjacent to triangle ⌊*j* / 3⌋. If *j* is negative, then triangle ⌊*i* / 3⌋ is an exterior triangle on the [convex hull](#delaunay_hull). For example, to render the internal edges of the Delaunay triangulation:

    ``` javascript
    const {points, halfedges, triangles} = delaunay;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = triangles[i];
      const tj = triangles[j];
      context.moveTo(points[ti * 2], points[ti * 2 + 1]);
      context.lineTo(points[tj * 2], points[tj * 2 + 1]);
    }
    ```

    See also [*delaunay*.render](#delaunay_render).
- name: delaunay.hull
  id: d3-delaunay#delaunay_hull
  summary: An Int32Array of point indexes that form the convex hull in counterclockwise order
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**hull**

    An Int32Array of point indexes that form the convex hull in counterclockwise order. If the points are collinear, returns them ordered.

    See also [*delaunay*.renderHull](#delaunay_renderHull).
- name: delaunay.hullPolygon()
  id: d3-delaunay#delaunay_hullpolygon
  summary: Returns the closed polygon [[x0, y0], [x1, y1], …, [x0, y0]] representing the convex hull
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**hullPolygon()**[Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns the closed polygon \[\[*x0*, *y0*\], \[*x1*, *y1*\], …, \[*x0*, *y0*\]\] representing the convex hull.
- name: delaunay.inedges
  id: d3-delaunay#delaunay_inedges
  summary: The incoming halfedge indexes as a Int32Array [e0, e1, e2, …]
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**inedges**

    The incoming halfedge indexes as a Int32Array \[*e0*, *e1*, *e2*, …\]. For each point *i*, *inedges*\[*i*\] is the halfedge index *e* of an incoming halfedge. For coincident points, the halfedge index is -1; for points on the convex hull, the incoming halfedge is on the convex hull; for other points, the choice of incoming halfedge is arbitrary. The *inedges* table can be used to traverse the Delaunay triangulation; see also [*delaunay*.neighbors](#delaunay_neighbors).
- name: delaunay.neighbors()
  id: d3-delaunay#delaunay_neighbors
  summary: Returns an iterable over the indexes of the neighboring points to the specified point i
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**neighbors**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns an iterable over the indexes of the neighboring points to the specified point *i*. The iterable is empty if *i* is a coincident point.
- name: delaunay.points
  id: d3-delaunay#delaunay_points
  summary: The coordinates of the points as an array [x0, y0, x1, y1, …]
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**points**

    The coordinates of the points as an array \[*x0*, *y0*, *x1*, *y1*, …\]. Typically, this is a Float64Array, however you can use any array-like type in the [constructor](#new_Delaunay).
- name: delaunay.render()
  id: d3-delaunay#delaunay_render
  summary: Renders the edges of the Delaunay triangulation to the specified context
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**render**(\[*context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Renders the edges of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: delaunay.renderHull()
  id: d3-delaunay#delaunay_renderhull
  summary: Renders the convex hull of the Delaunay triangulation to the specified context
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**renderHull**(\[*context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Renders the convex hull of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: delaunay.renderPoints()
  id: d3-delaunay#delaunay_renderpoints
  summary: Renders the input points of the Delaunay triangulation to the specified context as circles with the specified radius
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**renderPoints**(\[*context*\]\[, *radius*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Renders the input points of the Delaunay triangulation to the specified *context* as circles with the specified *radius*. If *radius* is not specified, it defaults to 2. The specified *context* must implement the *context*.moveTo and *context*.arc methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: delaunay.renderTriangle()
  id: d3-delaunay#delaunay_rendertriangle
  summary: Renders triangle i of the Delaunay triangulation to the specified context
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**renderTriangle**(*i*\[, *context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Renders triangle *i* of the Delaunay triangulation to the specified *context*. The specified *context* must implement the *context*.moveTo, *context*.lineTo and *context*.closePath methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: delaunay.trianglePolygon()
  id: d3-delaunay#delaunay_trianglepolygon
  summary: Returns the closed polygon [[x0, y0], [x1, y1], [x2, y2], [x0, y0]] representing the triangle i
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**trianglePolygon(*i*)**[Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns the closed polygon \[\[*x0*, *y0*\], \[*x1*, *y1*\], \[*x2*, *y2*\], \[*x0*, *y0*\]\] representing the triangle *i*.
- name: delaunay.trianglePolygons()
  id: d3-delaunay#delaunay_trianglepolygons
  summary: Returns an iterable over the polygons for each triangle, in order
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**trianglePolygons()**[Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns an iterable over the [polygons for each triangle](#delaunay_trianglePolygon), in order.
- name: delaunay.triangles
  id: d3-delaunay#delaunay_triangles
  summary: The triangle vertex indexes as an Uint32Array [i0, j0, k0, i1, j1, k1, …]
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**triangles**

    The triangle vertex indexes as an Uint32Array \[*i0*, *j0*, *k0*, *i1*, *j1*, *k1*, …\]. Each contiguous triplet of indexes *i*, *j*, *k* forms a counterclockwise triangle. The coordinates of the triangle’s points can be found by going through [*delaunay*.points](#delaunay_points). For example, to render triangle *i*:

    ``` javascript
    const {points, triangles} = delaunay;
    const t0 = triangles[i * 3 + 0];
    const t1 = triangles[i * 3 + 1];
    const t2 = triangles[i * 3 + 2];
    context.moveTo(points[t0 * 2], points[t0 * 2 + 1]);
    context.lineTo(points[t1 * 2], points[t1 * 2 + 1]);
    context.lineTo(points[t2 * 2], points[t2 * 2 + 1]);
    context.closePath();
    ```

    See also [*delaunay*.renderTriangle](#delaunay_renderTriangle).
- name: delaunay.update()
  id: d3-delaunay#delaunay_update
  summary: Updates the triangulation after the points have been modified in-place
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**update**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Updates the triangulation after the points have been modified in-place.
- name: delaunay.voronoi()
  id: d3-delaunay#delaunay_voronoi
  summary: Returns the Voronoi diagram for the associated points
  belongs_to: delaunay
  description: |-
    ###### *delaunay*.**voronoi**(\[*bounds*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js "Source")

    Returns the [Voronoi diagram](#voronoi) for the associated [points](#delaunay_points). When rendering, the diagram will be clipped to the specified *bounds* = \[*xmin*, *ymin*, *xmax*, *ymax*\]. If *bounds* is not specified, it defaults to \[0, 0, 960, 500\]. See [To Infinity and Back Again](https://observablehq.com/@mbostock/to-infinity-and-back-again) for an interactive explanation of Voronoi cell clipping.

    The Voronoi diagram is returned even in degenerate cases where no triangulation exists — namely 0, 1 or 2 points, and collinear points.

    ### Voronoi
- name: density()
  id: d3-contour#_density
  summary: Estimates the density contours for the given array of data, returning an array of GeoJSON MultiPolygon geometry objects
  belongs_to: contour
  description: |-
    ###### *density*(*data*) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)

    Estimates the density contours for the given array of *data*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the estimated number of points per square pixel is greater than or equal to the corresponding [threshold value](#density_thresholds); the threshold value for each geometry object is exposed as *geometry*.value. The returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection. See also [d3.contours](#contours).

    The *x*- and *y*-coordinate for each data point are computed using [*density*.x](#density_x) and [*density*.y](#density_y). In addition, [*density*.weight](#density_weight) indicates the relative contribution of each data point (default 1). The generated contours are only accurate within the estimator’s [defined size](#density_size).
- name: density.bandwidth()
  id: d3-contour#density_bandwidth
  summary: If bandwidth is specified, sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the estimate
  belongs_to: contour
  description: |-
    ###### *density*.**bandwidth**(\[*bandwidth*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    If *bandwidth* is specified, sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the estimate. If *bandwidth* is not specified, returns the current bandwidth, which defaults to 20.4939…. The specified *bandwidth* is currently rounded to the nearest supported value by this implementation, and must be nonnegative.
- name: density.cellSize()
  id: d3-contour#density_cellsize
  summary: If cellSize is specified, sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the estimator
  belongs_to: contour
  description: |-
    ###### *density*.**cellSize**(\[*cellSize*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)

    If *cellSize* is specified, sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the estimator. If *cellSize* is not specified, returns the current cell size, which defaults to 4. The cell size is rounded down to the nearest power of two. Smaller cells produce more detailed contour polygons, but are more expensive to compute.
- name: density.contours()
  id: d3-contour#density_contours
  summary: Return a contour(value) function that can be used to compute an arbitrary contour on the given data without needing to recompute the underlying grid
  belongs_to: contour
  description: "###### *density*.**contours**(*data*) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours-data)\n\nReturn a *contour*(*value*) function that can be used to compute an arbitrary contour on the given data without needing to recompute the underlying grid. The returned *contour* function also exposes a *contour*.max value which represents the maximum density of the grid.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-contour](https://github.com/d3/d3-contour)"
- name: density.size()
  id: d3-contour#density_size
  summary: If size is specified, sets the size of the density estimator to the specified bounds and returns the estimator
  belongs_to: contour
  description: |-
    ###### *density*.**size**(\[*size*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    If *size* is specified, sets the size of the density estimator to the specified bounds and returns the estimator. The *size* is specified as an array \[*width*, *height*\], where *width* is the maximum *x*-value and *height* is the maximum *y*-value. If *size* is not specified, returns the current size which defaults to \[960, 500\]. The [estimated density contours](#_density) are only accurate within the defined size.
- name: density.thresholds()
  id: d3-contour#density_thresholds
  summary: If thresholds is specified, sets the threshold generator to the specified function or array and returns this contour generator
  belongs_to: contour
  description: |-
    ###### *density*.**thresholds**(\[*thresholds*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    If *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default generates about twenty nicely-rounded density thresholds.

    Thresholds are defined as an array of values \[*x0*, *x1*, …\]. The first [generated density contour](#_density) corresponds to the area where the estimated density is greater than or equal to *x0*; the second contour corresponds to the area where the estimated density is greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as *geometry*.value. The first value *x0* should typically be greater than zero.

    If a *count* is specified instead of an array of *thresholds*, then approximately *count* uniformly-spaced nicely-rounded thresholds will be generated; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).
- name: density.weight()
  id: d3-contour#density_weight
  summary: If weight is specified, sets the accessor for point weights
  belongs_to: contour
  description: |-
    ###### *density*.**weight**(\[*weight*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js)

    If *weight* is specified, sets the accessor for point weights. If *weight* is not specified, returns the current point weight accessor, which defaults to:

    ``` javascript
    function weight() {
      return 1;
    }
    ```
- name: density.x()
  id: d3-contour#density_x
  summary: If x is specified, sets the x-coordinate accessor
  belongs_to: contour
  description: |-
    ###### *density*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    If *x* is specified, sets the *x*-coordinate accessor. If *x* is not specified, returns the current *x*-coordinate accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```
- name: density.y()
  id: d3-contour#density_y
  summary: If y is specified, sets the y-coordinate accessor
  belongs_to: contour
  description: |-
    ###### *density*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-contour/blob/main/src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

    If *y* is specified, sets the *y*-coordinate accessor. If *y* is not specified, returns the current *y*-coordinate accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```
- name: diagram
  id: d3-voronoi#diagram
  summary: For each set of coincident input points, one of the points is chosen arbitrarily and assigned the associated cell; the other coincident input points’ entries are missing from the returned sparse array
  belongs_to: voronoi
  description: |-
    ###### *diagram* [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js "Source")

    The computed Voronoi diagram returned by [*voronoi*](#_voronoi) has the following properties:

    - `edges` - an array of [edges](#diagram_edge).
    - `cells` - a sparse array of [cells](#diagram_cell), one for each unique input point.

    For each set of coincident input points, one of the points is chosen arbitrarily and assigned the associated cell; the other coincident input points’ entries are missing from the returned sparse array.
- name: diagram.find()
  id: d3-voronoi#diagram_find
  summary: Returns the nearest site to point [x, y]
  belongs_to: voronoi
  description: |-
    ###### *diagram*.**find**(*x*, *y*\[, *radius*\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L119 "Source")

    Returns the nearest site to point \[*x*, *y*\]. If *radius* is specified, only sites within *radius* distance are considered.

    See Philippe Rivière’s [bl.ocks.org/1b7ddbcd71454d685d1259781968aefc](http://bl.ocks.org/Fil/1b7ddbcd71454d685d1259781968aefc) for an example.
- name: diagram.links()
  id: d3-voronoi#diagram_links
  summary: Returns the Delaunay triangulation of the specified data array as an array of links, one for each edge in the mesh
  belongs_to: voronoi
  description: |-
    ###### *diagram*.**links**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L108 "Source")

    Returns the Delaunay triangulation of the specified *data* array as an array of links, one for each edge in the mesh. Each link has the following attributes:

    - `source` - the source node, an element in *data*.
    - `target` - the target node, an element in *data*.

    Since the triangulation is computed as the dual of the Voronoi diagram, and the Voronoi diagram is clipped by the [extent](#voronoi_extent), a subset of the Delaunay links is returned.
- name: diagram.polygons()
  id: d3-voronoi#diagram_polygons
  summary: Returns a sparse array of polygons clipped to the extent, one for each cell (each unique input point) in the diagram
  belongs_to: voronoi
  description: |-
    ###### *diagram*.**polygons**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L72 "Source")

    Returns a sparse array of polygons clipped to the [*extent*](#voronoi_extent), one for each cell (each unique input point) in the diagram. Each polygon is represented as an array of points \[*x*, *y*\] where *x* and *y* are the point coordinates, and a `data` field that refers to the corresponding element in *data*. Polygons are open: they do not contain a closing point that duplicates the first point; a triangle, for example, is an array of three points. Polygons are also counterclockwise, assuming the origin ⟨0,0⟩ is in the top-left corner.

    For each set of coincident input points, one of the points is chosen arbitrarily and assigned the associated polygon; the other coincident input points’ entries are missing from the returned sparse array.
- name: diagram.triangles()
  id: d3-voronoi#diagram_triangles
  summary: Returns the Delaunay triangulation of the specified data array as an array of triangles
  belongs_to: voronoi
  description: |-
    ###### *diagram*.**triangles**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L82 "Source")

    Returns the Delaunay triangulation of the specified *data* array as an array of triangles. Each triangle is a three-element array of elements from *data*. Since the triangulation is computed as the dual of the Voronoi diagram, and the Voronoi diagram is clipped by the [extent](#voronoi_extent), a subset of the Delaunay triangulation is returned.
- name: dispatch
  id: d3-dispatch
  summary: 'Dispatching is a convenient mechanism for separating concerns with loosely-coupled code: register named callbacks and then call them with arbitrary arguments'
  description: "# d3-dispatch\n\nDispatching is a convenient mechanism for separating concerns with loosely-coupled code: register named callbacks and then call them with arbitrary arguments. A variety of D3 components, such as [d3-drag](d3-drag), use this mechanism to emit events to listeners. Think of this like Node’s [EventEmitter](https://nodejs.org/api/events.html), except every listener has a well-defined name so it’s easy to remove or replace them.\n\nFor example, to create a dispatch for *start* and *end* events:\n\n``` javascript\nconst dispatch = d3.dispatch(\"start\", \"end\");\n```\n\nYou can then register callbacks for these events using [*dispatch*.on](#dispatch_on):\n\n``` javascript\ndispatch.on(\"start\", callback1);\ndispatch.on(\"start.foo\", callback2);\ndispatch.on(\"end\", callback3);\n```\n\nThen, you can invoke all the *start* callbacks using [*dispatch*.call](#dispatch_call) or [*dispatch*.apply](#dispatch_apply):\n\n``` javascript\ndispatch.call(\"start\");\n```\n\nLike *function*.call, you may also specify the `this` context and any arguments:\n\n``` javascript\ndispatch.call(\"start\", {about: \"I am a context object\"}, \"I am an argument\");\n```\n\nWant a more involved example? See how to use [d3-dispatch for coordinated views](http://bl.ocks.org/mbostock/5872848).\n\n## Installing\n\nIf you use npm, `npm install d3-dispatch`. You can also download the [latest release on GitHub](https://github.com/d3/d3-dispatch/releases/latest). For vanilla HTML in modern browsers, import d3-dispatch from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {dispatch} from \"https://cdn.skypack.dev/d3-dispatch@3\";\n\nconst d = dispatch(\"start\", \"end\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-dispatch’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script>\n\nconst d = d3.dispatch(\"start\", \"end\");\n\n</script>\n```\n\n[Try d3-dispatch in your browser.](https://observablehq.com/collection/@d3/d3-dispatch)\n\n## API Reference\n\n###### d3.**dispatch**(*types…*) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nCreates a new dispatch for the specified event *types*. Each *type* is a string, such as `\"start\"` or `\"end\"`.\n\n###### *dispatch*.**on**(*typenames*\\[, *callback*\\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nAdds, removes or gets the *callback* for the specified *typenames*. If a *callback* function is specified, it is registered for the specified (fully-qualified) *typenames*. If a callback was already registered for the given *typenames*, the existing callback is removed before the new callback is added.\n\nThe specified *typenames* is a string, such as `start` or `end.foo`. The type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `start.foo` and `start.bar`. To specify multiple typenames, separate typenames with spaces, such as `start end` or `start.foo start.bar`.\n\nTo remove all callbacks for a given name `foo`, say `dispatch.on(\".foo\", null)`.\n\nIf *callback* is not specified, returns the current callback for the specified *typenames*, if any. If multiple typenames are specified, the first matching callback is returned.\n\n###### *dispatch*.**copy**() · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nReturns a copy of this dispatch object. Changes to this dispatch do not affect the returned copy and *vice versa*.\n\n###### *dispatch*.**call**(*type*\\[, *that*\\[, *arguments…*\\]\\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nLike [*function*.call](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), invokes each registered callback for the specified *type*, passing the callback the specified *arguments*, with *that* as the `this` context. See [*dispatch*.apply](#dispatch_apply) for more information.\n\n###### *dispatch*.**apply**(*type*\\[, *that*\\[, *arguments*\\]\\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nLike [*function*.apply](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), invokes each registered callback for the specified *type*, passing the callback the specified *arguments*, with *that* as the `this` context. For example, if you wanted to dispatch your *custom* callbacks after handling a native *click* event, while preserving the current `this` context and arguments, you could say:\n\n``` javascript\nselection.on(\"click\", function() {\n  dispatch.apply(\"custom\", this, arguments);\n});\n```\n\nYou can pass whatever arguments you want to callbacks; most commonly, you might create an object that represents an event, or pass the current datum (*d*) and index (*i*). See [function.call](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Call) and [function.apply](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Apply) for further information.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-dispatch](https://github.com/d3/d3-dispatch)"
- name: dispatch.apply()
  id: d3-dispatch#dispatch_apply
  summary: Like function.apply, invokes each registered callback for the specified type, passing the callback the specified arguments, with that as the this context
  belongs_to: dispatch
  description: "###### *dispatch*.**apply**(*type*\\[, *that*\\[, *arguments*\\]\\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)\n\nLike [*function*.apply](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), invokes each registered callback for the specified *type*, passing the callback the specified *arguments*, with *that* as the `this` context. For example, if you wanted to dispatch your *custom* callbacks after handling a native *click* event, while preserving the current `this` context and arguments, you could say:\n\n``` javascript\nselection.on(\"click\", function() {\n  dispatch.apply(\"custom\", this, arguments);\n});\n```\n\nYou can pass whatever arguments you want to callbacks; most commonly, you might create an object that represents an event, or pass the current datum (*d*) and index (*i*). See [function.call](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Call) and [function.apply](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Apply) for further information.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-dispatch](https://github.com/d3/d3-dispatch)"
- name: dispatch.call()
  id: d3-dispatch#dispatch_call
  summary: Like function.call, invokes each registered callback for the specified type, passing the callback the specified arguments, with that as the this context
  belongs_to: dispatch
  description: |-
    ###### *dispatch*.**call**(*type*\[, *that*\[, *arguments…*\]\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)

    Like [*function*.call](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), invokes each registered callback for the specified *type*, passing the callback the specified *arguments*, with *that* as the `this` context. See [*dispatch*.apply](#dispatch_apply) for more information.
- name: dispatch.copy()
  id: d3-dispatch#dispatch_copy
  summary: Returns a copy of this dispatch object
  belongs_to: dispatch
  description: |-
    ###### *dispatch*.**copy**() · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)

    Returns a copy of this dispatch object. Changes to this dispatch do not affect the returned copy and *vice versa*.
- name: dispatch.on()
  id: d3-dispatch#dispatch_on
  summary: Adds, removes or gets the callback for the specified typenames
  belongs_to: dispatch
  description: |-
    ###### *dispatch*.**on**(*typenames*\[, *callback*\]) · [Source](https://github.com/d3/d3-dispatch/blob/master/src/dispatch.js)

    Adds, removes or gets the *callback* for the specified *typenames*. If a *callback* function is specified, it is registered for the specified (fully-qualified) *typenames*. If a callback was already registered for the given *typenames*, the existing callback is removed before the new callback is added.

    The specified *typenames* is a string, such as `start` or `end.foo`. The type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `start.foo` and `start.bar`. To specify multiple typenames, separate typenames with spaces, such as `start end` or `start.foo start.bar`.

    To remove all callbacks for a given name `foo`, say `dispatch.on(".foo", null)`.

    If *callback* is not specified, returns the current callback for the specified *typenames*, if any. If multiple typenames are specified, the first matching callback is returned.
- name: diverging()
  id: d3-scale#_diverging
  summary: See continuous
  belongs_to: scale
  description: |-
    ###### *diverging*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*](#_continuous).
- name: diverging.clamp()
  id: d3-scale#diverging_clamp
  summary: See continuous.clamp
  belongs_to: scale
  description: |-
    ###### *diverging*.**clamp**(\[*clamp*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.clamp](#continuous_clamp).
- name: diverging.copy()
  id: d3-scale#diverging_copy
  summary: See continuous.copy
  belongs_to: scale
  description: |-
    ###### *diverging*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.copy](#continuous_copy).
- name: diverging.domain()
  id: d3-scale#diverging_domain
  summary: See continuous.domain
  belongs_to: scale
  description: |-
    ###### *diverging*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.domain](#continuous_domain). Note that a diverging scale’s domain must be numeric and must contain exactly three values. The default domain is \[0, 0.5, 1\].
- name: diverging.interpolator()
  id: d3-scale#diverging_interpolator
  summary: If interpolator is specified, sets the scale’s interpolator to the specified function
  belongs_to: scale
  description: |-
    ###### *diverging*.**interpolator**(\[*interpolator*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    If *interpolator* is specified, sets the scale’s interpolator to the specified function. If *interpolator* is not specified, returns the scale’s current interpolator.
- name: diverging.range()
  id: d3-scale#diverging_range
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *diverging*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.range](#continuous_range). If *range* is specified, the given three-element array is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate) and [d3.piecewise](d3-interpolate#piecewise).
- name: diverging.rangeRound()
  id: d3-scale#diverging_rangeround
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *diverging*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.range](#continuous_rangeRound). If *range* is specified, implicitly uses [d3.interpolateRound](d3-interpolate#interpolateRound) as the interpolator.
- name: diverging.unknown()
  id: d3-scale#diverging_unknown
  summary: See continuous.unknown
  belongs_to: scale
  description: |-
    ###### *diverging*.**unknown**() · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)

    See [*continuous*.unknown](#continuous_unknown).
- name: drag
  id: d3-drag
  summary: 'Drag-and-drop is a popular and easy-to-learn pointing gesture: move the pointer to an object, press and hold to grab it, “drag” the object to a new location, and release to “drop”. D3’s drag behavior provides a convenient but flexible abstraction for enabling drag-and-drop interaction on selections'
  description: "# d3-drag\n\n[Drag-and-drop](https://en.wikipedia.org/wiki/Drag_and_drop) is a popular and easy-to-learn pointing gesture: move the pointer to an object, press and hold to grab it, “drag” the object to a new location, and release to “drop”. D3’s [drag behavior](#api-reference) provides a convenient but flexible abstraction for enabling drag-and-drop interaction on [selections](d3-selection). For example, you can use d3-drag to facilitate interaction with a [force-directed graph](d3-force), or a simulation of colliding circles:\n\nYou can also use d3-drag to implement custom user interface elements, such as a slider. But the drag behavior isn’t just for moving elements around; there are a variety of ways to respond to a drag gesture. For example, you can use it to lasso elements in a scatterplot, or to paint lines on a canvas:\n\nThe drag behavior can be combined with other behaviors, such as [d3-zoom](d3-zoom) for zooming.\n\nThe drag behavior is agnostic about the DOM, so you can use it with SVG, HTML or even Canvas! And you can extend it with advanced selection techniques, such as a Voronoi overlay or a closest-target search:\n\nBest of all, the drag behavior automatically unifies mouse and touch input, and avoids browser idiosyncrasies. When [Pointer Events](https://www.w3.org/TR/pointerevents/) are more widely available, the drag behavior will support those, too.\n\n## Installing\n\nIf you use npm, `npm install d3-drag`. You can also download the [latest release on GitHub](https://github.com/d3/d3-drag/releases/latest). For vanilla HTML in modern browsers, import d3-drag from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {drag} from \"https://cdn.skypack.dev/d3-drag@3\";\n\nconst handler = drag();\n\n</script>\n```\n\nFor legacy environments, you can load d3-drag’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-selection@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-drag@3\"></script>\n<script>\n\nconst handler = d3.drag();\n\n</script>\n```\n\n[Try d3-drag in your browser.](https://observablehq.com/collection/@d3/d3-drag)\n\n## API Reference\n\nThis table describes how the drag behavior interprets native events:\n\n| Event        | Listening Element | Drag Event | Default Prevented? |\n|--------------|-------------------|------------|--------------------|\n| mousedown⁵   | selection         | start      | no¹                |\n| mousemove²   | window¹           | drag       | yes                |\n| mouseup²     | window¹           | end        | yes                |\n| dragstart²   | window            | \\-         | yes                |\n| selectstart² | window            | \\-         | yes                |\n| click³       | window            | \\-         | yes                |\n| touchstart   | selection         | start      | no⁴                |\n| touchmove    | selection         | drag       | yes                |\n| touchend     | selection         | end        | no⁴                |\n| touchcancel  | selection         | end        | no⁴                |\n\nThe propagation of all consumed events is [immediately stopped](https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation). If you want to prevent some events from initiating a drag gesture, use [*drag*.filter](#drag_filter).\n\n¹ Necessary to capture events outside an iframe; see [\\#9](https://github.com/d3/d3-drag/issues/9).  \n² Only applies during an active, mouse-based gesture; see [\\#9](https://github.com/d3/d3-drag/issues/9).  \n³ Only applies immediately after some mouse-based gestures; see [*drag*.clickDistance](#drag_clickDistance).  \n⁴ Necessary to allow [click emulation](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW7) on touch input; see [\\#9](https://github.com/d3/d3-drag/issues/9).  \n⁵ Ignored if within 500ms of a touch gesture ending; assumes [click emulation](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW7).\n\n###### d3.**drag**() · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)\n\nCreates a new drag behavior. The returned behavior, [*drag*](#_drag), is both an object and a function, and is typically applied to selected elements via [*selection*.call](d3-selection#selection_call).\n\n###### *drag*(*selection*) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)\n\nApplies this drag behavior to the specified [*selection*](d3-selection). This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to instantiate a drag behavior and apply it to a selection:\n\n``` javascript\nd3.selectAll(\".node\").call(d3.drag().on(\"start\", started));\n```\n\nInternally, the drag behavior uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for dragging. The listeners use the name `.drag`, so you can subsequently unbind the drag behavior as follows:\n\n``` javascript\nselection.on(\".drag\", null);\n```\n\nApplying the drag behavior also sets the [-webkit-tap-highlight-color](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html#//apple_ref/doc/uid/TP40006510-SW5) style to transparent, disabling the tap highlight on iOS. If you want a different tap highlight color, remove or re-apply this style after applying the drag behavior.\n\n###### *drag*.**container**(\\[*container*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)\n\nIf *container* is specified, sets the container accessor to the specified object or function and returns the drag behavior. If *container* is not specified, returns the current container accessor, which defaults to:\n\n``` javascript\nfunction container() {\n  return this.parentNode;\n}\n```\n\nThe *container* of a drag gesture determines the coordinate system of subsequent [drag events](#drag-events), affecting *event*.x and *event*.y. The element returned by the container accessor is subsequently passed to [d3.pointer](d3-selection#pointer) to determine the local coordinates of the pointer.\n\nThe default container accessor returns the parent node of the element in the originating selection (see [*drag*](#_drag)) that received the initiating input event. This is often appropriate when dragging SVG or HTML elements, since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas, however, you may want to redefine the container as the initiating element itself:\n\n``` javascript\nfunction container() {\n  return this;\n}\n```\n\nAlternatively, the container may be specified as the element directly, such as `drag.container(canvas)`.\n\n###### *drag*.**filter**(\\[*filter*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/d/c55a5839a5bb7c73)\n\nIf *filter* is specified, sets the event filter to the specified function and returns the drag behavior. If *filter* is not specified, returns the current filter, which defaults to:\n\n``` javascript\nfunction filter(event) {\n  return !event.ctrlKey && !event.button;\n}\n```\n\nIf the filter returns falsey, the initiating event is ignored and no drag gestures are started. Thus, the filter determines which input events are ignored; the default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.\n\n###### *drag*.**touchable**(\\[*touchable*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/d/c55a5839a5bb7c73)\n\nIf *touchable* is specified, sets the touch support detector to the specified function and returns the drag behavior. If *touchable* is not specified, returns the current touch support detector, which defaults to:\n\n``` javascript\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\nTouch event listeners are only registered if the detector returns truthy for the corresponding element when the drag behavior is [applied](#_drag). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.\n\n###### *drag*.**subject**(\\[*subject*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)\n\nIf *subject* is specified, sets the subject accessor to the specified object or function and returns the drag behavior. If *subject* is not specified, returns the current subject accessor, which defaults to:\n\n``` javascript\nfunction subject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n```\n\nThe *subject* of a drag gesture represents *the thing being dragged*. It is computed when an initiating input event is received, such as a mousedown or touchstart, immediately before the drag gesture starts. The subject is then exposed as *event*.subject on subsequent [drag events](#drag-events) for this gesture.\n\nThe default subject is the [datum](d3-selection#selection_datum) of the element in the originating selection (see [*drag*](#_drag)) that received the initiating input event; if this datum is undefined, an object representing the coordinates of the pointer is created. When dragging circle elements in SVG, the default subject is thus the datum of the circle being dragged. With [Canvas](https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element), the default subject is the canvas element’s datum (regardless of where on the canvas you click). In this case, a custom subject accessor would be more appropriate, such as one that picks the closest circle to the mouse within a given search *radius*:\n\n``` javascript\nfunction subject(event) {\n  let n = circles.length,\n      i,\n      dx,\n      dy,\n      d2,\n      s2 = radius * radius,\n      circle,\n      subject;\n\n  for (i = 0; i < n; ++i) {\n    circle = circles[i];\n    dx = event.x - circle.x;\n    dy = event.y - circle.y;\n    d2 = dx * dx + dy * dy;\n    if (d2 < s2) subject = circle, s2 = d2;\n  }\n\n  return subject;\n}\n```\n\n(If necessary, the above can be accelerated using [*quadtree*.find](d3-quadtree#quadtree_find), [*simulation*.find](d3-force#simulation_find) or [*delaunay*.find](d3-delaunay#delaunay_find).)\n\nThe returned subject should be an object that exposes `x` and `y` properties, so that the relative position of the subject and the pointer can be preserved during the drag gesture. If the subject is null or undefined, no drag gesture is started for this pointer; however, other starting touches may yet start drag gestures. See also [*drag*.filter](#drag_filter).\n\nThe subject of a drag gesture may not be changed after the gesture starts. The subject accessor is invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element. During the evaluation of the subject accessor, `event` is a beforestart [drag event](#drag-events). Use *event*.sourceEvent to access the initiating input event and *event*.identifier to access the touch identifier. The *event*.x and *event*.y are relative to the [container](#drag_container), and are computed using [d3.pointer](d3-selection#pointer).\n\n###### *drag*.**clickDistance**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js)\n\nIf *distance* is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to *distance* from its position on mousedown, the click event following mouseup will be suppressed. If *distance* is not specified, returns the current distance threshold, which defaults to zero. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).\n\n###### *drag*.**on**(*typenames*, \\[*listener*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js)\n\nIf *listener* is specified, sets the event *listener* for the specified *typenames* and returns the drag behavior. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element.\n\nThe *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `drag.foo` and `drag.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:\n\n- `start` - after a new pointer becomes active (on mousedown or touchstart).\n- `drag` - after an active pointer moves (on mousemove or touchmove).\n- `end` - after an active pointer becomes inactive (on mouseup, touchend or touchcancel).\n\nSee [*dispatch*.on](d3-dispatch#dispatch_on) for more.\n\nChanges to registered listeners via *drag*.on during a drag gesture *do not affect* the current drag gesture. Instead, you must use [*event*.on](#event_on), which also allows you to register temporary event listeners for the current drag gesture. **Separate events are dispatched for each active pointer** during a drag gesture. For example, if simultaneously dragging multiple subjects with multiple fingers, a start event is dispatched for each finger, even if both fingers start touching simultaneously. See [Drag Events](#drag-events) for more.\n\n###### d3.**dragDisable**(*window*) · [Source](https://github.com/d3/d3-drag/blob/master/src/nodrag.js)\n\nPrevents native drag-and-drop and text selection on the specified *window*. As an alternative to preventing the default action of mousedown events (see [\\#9](https://github.com/d3/d3-drag/issues/9)), this method prevents undesirable default actions following mousedown. In supported browsers, this means capturing dragstart and selectstart events, preventing the associated default actions, and immediately stopping their propagation. In browsers that do not support selection events, the user-select CSS property is set to none on the document element. This method is intended to be called on mousedown, followed by [d3.dragEnable](#dragEnable) on mouseup.\n\n###### d3.**dragEnable**(*window*\\[, *noclick*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/nodrag.js)\n\nAllows native drag-and-drop and text selection on the specified *window*; undoes the effect of [d3.dragDisable](#dragDisable). This method is intended to be called on mouseup, preceded by [d3.dragDisable](#dragDisable) on mousedown. If *noclick* is true, this method also temporarily suppresses click events. The suppression of click events expires after a zero-millisecond timeout, such that it only suppress the click event that would immediately follow the current mouseup event, if any.\n\n### Drag Events\n\nWhen a [drag event listener](#drag_on) is invoked, it receives the current drag event as its first argument. The *event* object exposes several fields:\n\n- `target` - the associated [drag behavior](#drag).\n- `type` - the string “start”, “drag” or “end”; see [*drag*.on](#drag_on).\n- `subject` - the drag subject, defined by [*drag*.subject](#drag_subject).\n- `x` - the new *x*-coordinate of the subject; see [*drag*.container](#drag_container).\n- `y` - the new *y*-coordinate of the subject; see [*drag*.container](#drag_container).\n- `dx` - the change in *x*-coordinate since the previous drag event.\n- `dy` - the change in *y*-coordinate since the previous drag event.\n- `identifier` - the string “mouse”, or a numeric [touch identifier](https://www.w3.org/TR/touch-events/#widl-Touch-identifier).\n- `active` - the number of currently active drag gestures (on start and end, not including this one).\n- `sourceEvent` - the underlying input event, such as mousemove or touchmove.\n\nThe *event*.active field is useful for detecting the first start event and the last end event in a sequence of concurrent drag gestures: it is zero when the first drag gesture starts, and zero when the last drag gesture ends.\n\nThe *event* object also exposes the [*event*.on](#event_on) method.\n\n###### *event*.**on**(*typenames*, \\[*listener*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/event.js)\n\nEquivalent to [*drag*.on](#drag_on), but only applies to the current drag gesture. Before the drag gesture starts, a [copy](d3-dispatch#dispatch_copy) of the current drag [event listeners](#drag_on) is made. This copy is bound to the current drag gesture and modified by *event*.on. This is useful for temporary listeners that only receive events for the current drag gesture. For example, this start event listener registers temporary drag and end event listeners as closures:\n\n``` javascript\nfunction started(event) {\n  const circle = d3.select(this).classed(\"dragging\", true);\n\n  event.on(\"drag\", dragged).on(\"end\", ended);\n\n  function dragged(event, d) {\n    circle.raise().attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n  }\n\n  function ended() {\n    circle.classed(\"dragging\", false);\n  }\n}\n```\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-drag](https://github.com/d3/d3-drag)"
- name: drag()
  id: d3-drag#_drag
  summary: Applies this drag behavior to the specified selection
  belongs_to: drag
  description: |-
    ###### *drag*(*selection*) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)

    Applies this drag behavior to the specified [*selection*](d3-selection). This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to instantiate a drag behavior and apply it to a selection:

    ``` javascript
    d3.selectAll(".node").call(d3.drag().on("start", started));
    ```

    Internally, the drag behavior uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for dragging. The listeners use the name `.drag`, so you can subsequently unbind the drag behavior as follows:

    ``` javascript
    selection.on(".drag", null);
    ```

    Applying the drag behavior also sets the [-webkit-tap-highlight-color](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html#//apple_ref/doc/uid/TP40006510-SW5) style to transparent, disabling the tap highlight on iOS. If you want a different tap highlight color, remove or re-apply this style after applying the drag behavior.
- name: drag.clickDistance()
  id: d3-drag#drag_clickdistance
  summary: If distance is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event
  belongs_to: drag
  description: |-
    ###### *drag*.**clickDistance**(\[*distance*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js)

    If *distance* is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to *distance* from its position on mousedown, the click event following mouseup will be suppressed. If *distance* is not specified, returns the current distance threshold, which defaults to zero. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).
- name: drag.container()
  id: d3-drag#drag_container
  summary: If container is specified, sets the container accessor to the specified object or function and returns the drag behavior
  belongs_to: drag
  description: |-
    ###### *drag*.**container**(\[*container*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)

    If *container* is specified, sets the container accessor to the specified object or function and returns the drag behavior. If *container* is not specified, returns the current container accessor, which defaults to:

    ``` javascript
    function container() {
      return this.parentNode;
    }
    ```

    The *container* of a drag gesture determines the coordinate system of subsequent [drag events](#drag-events), affecting *event*.x and *event*.y. The element returned by the container accessor is subsequently passed to [d3.pointer](d3-selection#pointer) to determine the local coordinates of the pointer.

    The default container accessor returns the parent node of the element in the originating selection (see [*drag*](#_drag)) that received the initiating input event. This is often appropriate when dragging SVG or HTML elements, since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas, however, you may want to redefine the container as the initiating element itself:

    ``` javascript
    function container() {
      return this;
    }
    ```

    Alternatively, the container may be specified as the element directly, such as `drag.container(canvas)`.
- name: drag.filter()
  id: d3-drag#drag_filter
  summary: If filter is specified, sets the event filter to the specified function and returns the drag behavior
  belongs_to: drag
  description: |-
    ###### *drag*.**filter**(\[*filter*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/d/c55a5839a5bb7c73)

    If *filter* is specified, sets the event filter to the specified function and returns the drag behavior. If *filter* is not specified, returns the current filter, which defaults to:

    ``` javascript
    function filter(event) {
      return !event.ctrlKey && !event.button;
    }
    ```

    If the filter returns falsey, the initiating event is ignored and no drag gestures are started. Thus, the filter determines which input events are ignored; the default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.
- name: drag.on()
  id: d3-drag#drag_on
  summary: If listener is specified, sets the event listener for the specified typenames and returns the drag behavior
  belongs_to: drag
  description: |-
    ###### *drag*.**on**(*typenames*, \[*listener*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js)

    If *listener* is specified, sets the event *listener* for the specified *typenames* and returns the drag behavior. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element.

    The *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `drag.foo` and `drag.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:

    - `start` - after a new pointer becomes active (on mousedown or touchstart).
    - `drag` - after an active pointer moves (on mousemove or touchmove).
    - `end` - after an active pointer becomes inactive (on mouseup, touchend or touchcancel).

    See [*dispatch*.on](d3-dispatch#dispatch_on) for more.

    Changes to registered listeners via *drag*.on during a drag gesture *do not affect* the current drag gesture. Instead, you must use [*event*.on](#event_on), which also allows you to register temporary event listeners for the current drag gesture. **Separate events are dispatched for each active pointer** during a drag gesture. For example, if simultaneously dragging multiple subjects with multiple fingers, a start event is dispatched for each finger, even if both fingers start touching simultaneously. See [Drag Events](#drag-events) for more.
- name: drag.subject()
  id: d3-drag#drag_subject
  summary: If subject is specified, sets the subject accessor to the specified object or function and returns the drag behavior
  belongs_to: drag
  description: |-
    ###### *drag*.**subject**(\[*subject*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/collection/@d3/d3-drag)

    If *subject* is specified, sets the subject accessor to the specified object or function and returns the drag behavior. If *subject* is not specified, returns the current subject accessor, which defaults to:

    ``` javascript
    function subject(event, d) {
      return d == null ? {x: event.x, y: event.y} : d;
    }
    ```

    The *subject* of a drag gesture represents *the thing being dragged*. It is computed when an initiating input event is received, such as a mousedown or touchstart, immediately before the drag gesture starts. The subject is then exposed as *event*.subject on subsequent [drag events](#drag-events) for this gesture.

    The default subject is the [datum](d3-selection#selection_datum) of the element in the originating selection (see [*drag*](#_drag)) that received the initiating input event; if this datum is undefined, an object representing the coordinates of the pointer is created. When dragging circle elements in SVG, the default subject is thus the datum of the circle being dragged. With [Canvas](https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element), the default subject is the canvas element’s datum (regardless of where on the canvas you click). In this case, a custom subject accessor would be more appropriate, such as one that picks the closest circle to the mouse within a given search *radius*:

    ``` javascript
    function subject(event) {
      let n = circles.length,
          i,
          dx,
          dy,
          d2,
          s2 = radius * radius,
          circle,
          subject;

      for (i = 0; i < n; ++i) {
        circle = circles[i];
        dx = event.x - circle.x;
        dy = event.y - circle.y;
        d2 = dx * dx + dy * dy;
        if (d2 < s2) subject = circle, s2 = d2;
      }

      return subject;
    }
    ```

    (If necessary, the above can be accelerated using [*quadtree*.find](d3-quadtree#quadtree_find), [*simulation*.find](d3-force#simulation_find) or [*delaunay*.find](d3-delaunay#delaunay_find).)

    The returned subject should be an object that exposes `x` and `y` properties, so that the relative position of the subject and the pointer can be preserved during the drag gesture. If the subject is null or undefined, no drag gesture is started for this pointer; however, other starting touches may yet start drag gestures. See also [*drag*.filter](#drag_filter).

    The subject of a drag gesture may not be changed after the gesture starts. The subject accessor is invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element. During the evaluation of the subject accessor, `event` is a beforestart [drag event](#drag-events). Use *event*.sourceEvent to access the initiating input event and *event*.identifier to access the touch identifier. The *event*.x and *event*.y are relative to the [container](#drag_container), and are computed using [d3.pointer](d3-selection#pointer).
- name: drag.touchable()
  id: d3-drag#drag_touchable
  summary: If touchable is specified, sets the touch support detector to the specified function and returns the drag behavior
  belongs_to: drag
  description: |-
    ###### *drag*.**touchable**(\[*touchable*\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/drag.js), [Examples](https://observablehq.com/d/c55a5839a5bb7c73)

    If *touchable* is specified, sets the touch support detector to the specified function and returns the drag behavior. If *touchable* is not specified, returns the current touch support detector, which defaults to:

    ``` javascript
    function touchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }
    ```

    Touch event listeners are only registered if the detector returns truthy for the corresponding element when the drag behavior is [applied](#_drag). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.
- name: dsv
  id: d3-dsv
  summary: This module provides a parser and formatter for delimiter-separated values, most commonly comma- (CSV) or tab-separated values (TSV)
  description: "# d3-dsv\n\nThis module provides a parser and formatter for delimiter-separated values, most commonly [comma-](https://en.wikipedia.org/wiki/Comma-separated_values) (CSV) or tab-separated values (TSV). These tabular formats are popular with spreadsheet programs such as Microsoft Excel, and are often more space-efficient than JSON. This implementation is based on [RFC 4180](http://tools.ietf.org/html/rfc4180).\n\nComma (CSV) and tab (TSV) delimiters are built-in. For example, to parse:\n\n``` javascript\nd3.csvParse(\"foo,bar\\n1,2\"); // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\nd3.tsvParse(\"foo\\tbar\\n1\\t2\"); // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\nOr to format:\n\n``` javascript\nd3.csvFormat([{foo: \"1\", bar: \"2\"}]); // \"foo,bar\\n1,2\"\nd3.tsvFormat([{foo: \"1\", bar: \"2\"}]); // \"foo\\tbar\\n1\\t2\"\n```\n\nTo use a different delimiter, such as “\\|” for pipe-separated values, use [d3.dsvFormat](#dsvFormat):\n\n``` javascript\nconst psv = d3.dsvFormat(\"|\");\n\nconsole.log(psv.parse(\"foo|bar\\n1|2\")); // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\nFor easy loading of DSV files in a browser, see [d3-fetch](d3-fetch)’s [d3.csv](d3-fetch#csv), [d3.tsv](d3-fetch#tsv) and [d3.dsv](d3-fetch#dsv) methods.\n\n## Installing\n\nIf you use npm, `npm install d3-dsv`. You can also download the [latest release on GitHub](https://github.com/d3/d3-dsv/releases/latest). For vanilla HTML in modern browsers, import d3-dsv from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {csvParse} from \"https://cdn.skypack.dev/d3-dsv@3\";\n\nconst data = csvParse(string);\n\n</script>\n```\n\nFor legacy environments, you can load d3-dsv’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dsv@3\"></script>\n<script>\n\nconst data = d3.csvParse(string);\n\n</script>\n```\n\n## API Reference\n\n###### d3.**csvParse**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[parse](#dsv_parse). Note: requires unsafe-eval [content security policy](#content-security-policy).\n\n###### d3.**csvParseRows**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[parseRows](#dsv_parseRows).\n\n###### d3.**csvFormat**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[format](#dsv_format).\n\n###### d3.**csvFormatBody**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[formatBody](#dsv_formatBody).\n\n###### d3.**csvFormatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[formatRows](#dsv_formatRows).\n\n###### d3.**csvFormatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[formatRow](#dsv_formatRow).\n\n###### d3.**csvFormatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/csv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\",\").[formatValue](#dsv_formatValue).\n\n###### d3.**tsvParse**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[parse](#dsv_parse). Note: requires unsafe-eval [content security policy](#content-security-policy).\n\n###### d3.**tsvParseRows**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[parseRows](#dsv_parseRows).\n\n###### d3.**tsvFormat**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[format](#dsv_format).\n\n###### d3.**tsvFormatBody**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[formatBody](#dsv_formatBody).\n\n###### d3.**tsvFormatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[formatRows](#dsv_formatRows).\n\n###### d3.**tsvFormatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[formatRow](#dsv_formatRow).\n\n###### d3.**tsvFormatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/tsv.js \"Source\")\n\nEquivalent to [dsvFormat](#dsvFormat)(\"\\t\").[formatValue](#dsv_formatValue).\n\n###### d3.**dsvFormat**(*delimiter*) [\\<\\>](https://github.com/d3/d3-dsv/blob/master/src/dsv.js)\n\nConstructs a new DSV parser and formatter for the specified *delimiter*. The *delimiter* must be a single character (*i.e.*, a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.\n\n###### *dsv*.**parse**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nParses the specified *string*, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of objects representing the parsed rows.\n\nUnlike [*dsv*.parseRows](#dsv_parseRows), this method requires that the first line of the DSV content contains a delimiter-separated list of column names; these column names become the attributes on the returned objects. For example, consider the following CSV file:\n\n``` notranslate\nYear,Make,Model,Length\n1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38\n```\n\nThe resulting JavaScript array is:\n\n``` javascript\n[\n  {\"Year\": \"1997\", \"Make\": \"Ford\", \"Model\": \"E350\", \"Length\": \"2.34\"},\n  {\"Year\": \"2000\", \"Make\": \"Mercury\", \"Model\": \"Cougar\", \"Length\": \"2.38\"}\n]\n```\n\nThe returned array also exposes a `columns` property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary). For example:\n\n``` javascript\ndata.columns; // [\"Year\", \"Make\", \"Model\", \"Length\"]\n```\n\nIf the column names are not unique, only the last value is returned for each name; to access all values, use [*dsv*.parseRows](#dsv_parseRows) instead (see [example](https://observablehq.com/@d3/parse-csv-with-duplicate-column-names)).\n\nIf a *row* conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types. In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the `+` operator), but better is to specify a *row* conversion function. See [d3.autoType](#autoType) for a convenient *row* conversion function that infers and coerces common types like numbers and strings.\n\nIf a *row* conversion function is specified, the specified function is invoked for each row, being passed an object representing the current row (`d`), the index (`i`) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined, the row is skipped and will be omitted from the array returned by *dsv*.parse; otherwise, the returned value defines the corresponding row object. For example:\n\n``` javascript\nconst data = d3.csvParse(string, (d) => {\n  return {\n    year: new Date(+d.Year, 0, 1), // lowercase and convert \"Year\" to Date\n    make: d.Make, // lowercase\n    model: d.Model, // lowercase\n    length: +d.Length // lowercase and convert \"Length\" to number\n  };\n});\n```\n\nNote: using `+` rather than [parseInt](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt) or [parseFloat](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseFloat) is typically faster, though more restrictive. For example, `\"30px\"` when coerced using `+` returns `NaN`, while parseInt and parseFloat return `30`.\n\nNote: requires unsafe-eval [content security policy](#content-security-policy).\n\n###### *dsv*.**parseRows**(*string*\\[, *row*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nParses the specified *string*, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of arrays representing the parsed rows.\n\nUnlike [*dsv*.parse](#dsv_parse), this method treats the header line as a standard row, and should be used whenever DSV content does not contain a header. Each row is represented as an array rather than an object. Rows may have variable length. For example, consider the following CSV file, which notably lacks a header line:\n\n``` notranslate\n1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38\n```\n\nThe resulting JavaScript array is:\n\n``` javascript\n[\n  [\"1997\", \"Ford\", \"E350\", \"2.34\"],\n  [\"2000\", \"Mercury\", \"Cougar\", \"2.38\"]\n]\n```\n\nIf a *row* conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types. In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the `+` operator), but better is to specify a *row* conversion function. See [d3.autoType](#autoType) for a convenient *row* conversion function that infers and coerces common types like numbers and strings.\n\nIf a *row* conversion function is specified, the specified function is invoked for each row, being passed an array representing the current row (`d`), the index (`i`) starting at zero for the first row, and the array of column names. If the returned value is null or undefined, the row is skipped and will be omitted from the array returned by *dsv*.parse; otherwise, the returned value defines the corresponding row object. For example:\n\n``` javascript\nconst data = d3.csvParseRows(string, (d, i) => {\n  return {\n    year: new Date(+d[0], 0, 1), // convert first column to Date\n    make: d[1],\n    model: d[2],\n    length: +d[3] // convert fourth column to number\n  };\n});\n```\n\nIn effect, *row* is similar to applying a [map](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map) and [filter](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter) operator to the returned rows.\n\n###### *dsv*.**format**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nFormats the specified array of object *rows* as delimiter-separated values, returning a string. This operation is the inverse of [*dsv*.parse](#dsv_parse). Each row will be separated by a newline (`\\n`), and each column within each row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (`\"`) or a newline will be escaped using double-quotes.\n\nIf *columns* is not specified, the list of column names that forms the header row is determined by the union of all properties on all objects in *rows*; the order of columns is nondeterministic. If *columns* is specified, it is an array of strings representing the column names. For example:\n\n``` javascript\nconst string = d3.csvFormat(data, [\"year\", \"make\", \"model\", \"length\"]);\n```\n\nAll fields on each row object will be coerced to strings. If the field value is null or undefined, the empty string is used. If the field value is a Date, the [ECMAScript date-time string format](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-date-time-string-format) (a subset of ISO 8601) is used: for example, dates at UTC midnight are formatted as `YYYY-MM-DD`. For more control over which and how fields are formatted, first map *rows* to an array of array of string, and then use [*dsv*.formatRows](#dsv_formatRows).\n\n###### *dsv*.**formatBody**(*rows*\\[, *columns*\\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nEquivalent to [*dsv*.format](#dsv_format), but omits the header row. This is useful, for example, when appending rows to an existing file.\n\n###### *dsv*.**formatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nFormats the specified array of array of string *rows* as delimiter-separated values, returning a string. This operation is the reverse of [*dsv*.parseRows](#dsv_parseRows). Each row will be separated by a newline (`\\n`), and each column within each row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n\nTo convert an array of objects to an array of arrays while explicitly specifying the columns, use [*array*.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). For example:\n\n``` javascript\nconst string = d3.csvFormatRows(data.map((d, i) => {\n  return [\n    d.year.getFullYear(), // Assuming d.year is a Date object.\n    d.make,\n    d.model,\n    d.length\n  ];\n}));\n```\n\nIf you like, you can also [*array*.concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) this result with an array of column names to generate the first row:\n\n``` javascript\nconst string = d3.csvFormatRows([[\n    \"year\",\n    \"make\",\n    \"model\",\n    \"length\"\n  ]].concat(data.map((d, i) => {\n  return [\n    d.year.getFullYear(), // Assuming d.year is a Date object.\n    d.make,\n    d.model,\n    d.length\n  ];\n})));\n```\n\n###### *dsv*.**formatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nFormats a single array *row* of strings as delimiter-separated values, returning a string. Each column within the row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n\n###### *dsv*.**formatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js \"Source\")\n\nFormat a single *value* or string as a delimiter-separated value, returning a string. A value that contains either the delimiter, a double-quote (\") or a newline will be escaped using double-quotes.\n\n###### d3.**autoType**(*object*) [Source](https://github.com/d3/d3-dsv/blob/master/src/autoType.js \"Source\")\n\nGiven an *object* (or array) representing a parsed row, infers the types of values on the *object* and coerces them accordingly, returning the mutated *object*. This function is intended to be used as a *row* accessor function in conjunction with [*dsv*.parse](#dsv_parse) and [*dsv*.parseRows](#dsv_parseRow). For example, consider the following CSV file:\n\n``` notranslate\nYear,Make,Model,Length\n1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38\n```\n\nWhen used with [d3.csvParse](#csvParse),\n\n``` javascript\nd3.csvParse(string, d3.autoType)\n```\n\nthe resulting JavaScript array is:\n\n``` javascript\n[\n  {\"Year\": 1997, \"Make\": \"Ford\", \"Model\": \"E350\", \"Length\": 2.34},\n  {\"Year\": 2000, \"Make\": \"Mercury\", \"Model\": \"Cougar\", \"Length\": 2.38}\n]\n```\n\nType inference works as follows. For each *value* in the given *object*, the [trimmed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim) value is computed; the value is then re-assigned as follows:\n\n1.  If empty, then `null`.\n2.  If exactly `\"true\"`, then `true`.\n3.  If exactly `\"false\"`, then `false`.\n4.  If exactly `\"NaN\"`, then `NaN`.\n5.  Otherwise, if [coercible to a number](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-tonumber-applied-to-the-string-type), then a number.\n6.  Otherwise, if a [date-only or date-time string](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-date-time-string-format), then a Date.\n7.  Otherwise, a string (the original untrimmed value).\n\nValues with leading zeroes may be coerced to numbers; for example `\"08904\"` coerces to `8904`. However, extra characters such as commas or units (*e.g.*, `\"$1.00\"`, `\"(123)\"`, `\"1,234\"` or `\"32px\"`) will prevent number coercion, resulting in a string.\n\nDate strings must be in ECMAScript’s subset of the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601). When a date-only string such as YYYY-MM-DD is specified, the inferred time is midnight UTC; however, if a date-time string such as YYYY-MM-DDTHH:MM is specified without a time zone, it is assumed to be local time.\n\nAutomatic type inference is primarily intended to provide safe, predictable behavior in conjunction with [*dsv*.format](#dsv_format) and [*dsv*.formatRows](#dsv_formatRows) for common JavaScript types. If you need different behavior, you should implement your own row accessor function.\n\nFor more, see [the d3.autoType notebook](https://observablehq.com/@d3/d3-autotype).\n\n### Content Security Policy\n\nIf a [content security policy](http://www.w3.org/TR/CSP/) is in place, note that [*dsv*.parse](#dsv_parse) requires `unsafe-eval` in the `script-src` directive, due to the (safe) use of dynamic code generation for fast parsing. (See [source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js).) Alternatively, use [*dsv*.parseRows](#dsv_parseRows).\n\n### Byte-Order Marks\n\nDSV files sometimes begin with a [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark); saving a spreadsheet in CSV UTF-8 format from Microsoft Excel, for example, will include a BOM. On the web this is not usually a problem because the [UTF-8 decode algorithm](https://encoding.spec.whatwg.org/#utf-8-decode) specified in the Encoding standard removes the BOM. Node.js, on the other hand, [does not remove the BOM](https://github.com/nodejs/node-v0.x-archive/issues/1918) when decoding UTF-8.\n\nIf the BOM is not removed, the first character of the text is a zero-width non-breaking space. So if a CSV file with a BOM is parsed by [d3.csvParse](#csvParse), the first column’s name will begin with a zero-width non-breaking space. This can be hard to spot since this character is usually invisible when printed.\n\nTo remove the BOM before parsing, consider using [strip-bom](https://www.npmjs.com/package/strip-bom).\n\n## Command Line Reference\n\n### dsv2dsv\n\n###### **dsv2dsv** \\[*options…*\\] \\[*file*\\]\n\nConverts the specified DSV input *file* to DSV (typically with a different delimiter or encoding). If *file* is not specified, defaults to reading from stdin. For example, to convert to CSV to TSV:\n\n``` notranslate\ncsv2tsv < example.csv > example.tsv\n```\n\nTo convert windows-1252 CSV to utf-8 CSV:\n\n``` notranslate\ndsv2dsv --input-encoding windows-1252 < latin1.csv > utf8.csv\n```\n\n###### dsv2dsv **-h** dsv2dsv **--help**\n\nOutput usage information.\n\n###### dsv2dsv **-V** dsv2dsv **--version**\n\nOutput the version number.\n\n###### dsv2dsv **-o** *file* dsv2dsv **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### dsv2dsv **-r** *delimiter* dsv2dsv **--input-delimiter** *delimiter*\n\nSpecify the input delimiter character. Defaults to “,” for reading CSV. (You can enter a tab on the command line by typing ⌃V.)\n\n###### dsv2dsv **--input-encoding** *encoding*\n\nSpecify the input character encoding. Defaults to “utf8”.\n\n###### dsv2dsv **-w** *delimiter* dsv2dsv **--output-delimiter** *delimiter*\n\nSpecify the output delimiter character. Defaults to “,” for writing CSV. (You can enter a tab on the command line by typing ⌃V.)\n\n###### dsv2dsv **--output-encoding** *encoding*\n\nSpecify the output character encoding. Defaults to “utf8”.\n\n###### **csv2tsv** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [dsv2dsv](#dsv2dsv), but the [output delimiter](#dsv2dsv_output_delimiter) defaults to the tab character (\\t).\n\n###### **tsv2csv** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [dsv2dsv](#dsv2dsv), but the [input delimiter](#dsv2dsv_output_delimiter) defaults to the tab character (\\t).\n\n### dsv2json\n\n###### **dsv2json** \\[*options…*\\] \\[*file*\\]\n\nConverts the specified DSV input *file* to JSON. If *file* is not specified, defaults to reading from stdin. For example, to convert to CSV to JSON:\n\n``` notranslate\ncsv2json < example.csv > example.json\n```\n\nOr to convert CSV to a newline-delimited JSON stream:\n\n``` notranslate\ncsv2json -n < example.csv > example.ndjson\n```\n\n###### dsv2json **-h** dsv2json **--help**\n\nOutput usage information.\n\n###### dsv2json **-V** dsv2json **--version**\n\nOutput the version number.\n\n###### dsv2json **-o** *file* dsv2json **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### dsv2json **-a** dsv2json **--auto-type**\n\nUse type inference when parsing rows. See [d3.autoType](#autoType) for how it works.\n\n###### dsv2json **-r** *delimiter* dsv2json **--input-delimiter** *delimiter*\n\nSpecify the input delimiter character. Defaults to “,” for reading CSV. (You can enter a tab on the command line by typing ⌃V.)\n\n###### dsv2json **--input-encoding** *encoding*\n\nSpecify the input character encoding. Defaults to “utf8”.\n\n###### dsv2json **-r** *encoding* dsv2json **--output-encoding** *encoding*\n\nSpecify the output character encoding. Defaults to “utf8”.\n\n###### dsv2json **-n** dsv2json **--newline-delimited**\n\nOutput [newline-delimited JSON](https://github.com/mbostock/ndjson-cli) instead of a single JSON array.\n\n###### **csv2json** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [dsv2json](#dsv2json).\n\n###### **tsv2json** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [dsv2json](#dsv2json), but the [input delimiter](#dsv2json_input_delimiter) defaults to the tab character (\\t).\n\n### json2dsv\n\n###### **json2dsv** \\[*options…*\\] \\[*file*\\]\n\nConverts the specified JSON input *file* to DSV. If *file* is not specified, defaults to reading from stdin. For example, to convert to JSON to CSV:\n\n``` notranslate\njson2csv < example.json > example.csv\n```\n\nOr to convert a newline-delimited JSON stream to CSV:\n\n``` notranslate\njson2csv -n < example.ndjson > example.csv\n```\n\n###### json2dsv **-h** json2dsv **--help**\n\nOutput usage information.\n\n###### json2dsv **-V** json2dsv **--version**\n\nOutput the version number.\n\n###### json2dsv **-o** *file* json2dsv **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### json2dsv **--input-encoding** *encoding*\n\nSpecify the input character encoding. Defaults to “utf8”.\n\n###### json2dsv **-w** *delimiter* json2dsv **--output-delimiter** *delimiter*\n\nSpecify the output delimiter character. Defaults to “,” for writing CSV. (You can enter a tab on the command line by typing ⌃V.)\n\n###### json2dsv **--output-encoding** *encoding*\n\nSpecify the output character encoding. Defaults to “utf8”.\n\n###### json2dsv **-n** json2dsv **--newline-delimited**\n\nRead [newline-delimited JSON](https://github.com/mbostock/ndjson-cli) instead of a single JSON array.\n\n###### **json2csv** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [json2dsv](#json2dsv).\n\n###### **json2tsv** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [json2dsv](#json2dsv), but the [output delimiter](#json2dsv_output_delimiter) defaults to the tab character (\\t).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-dsv](https://github.com/d3/d3-dsv)"
- name: dsv.format()
  id: d3-dsv#dsv_format
  summary: Formats the specified array of object rows as delimiter-separated values, returning a string
  belongs_to: dsv
  description: |-
    ###### *dsv*.**format**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Formats the specified array of object *rows* as delimiter-separated values, returning a string. This operation is the inverse of [*dsv*.parse](#dsv_parse). Each row will be separated by a newline (`\n`), and each column within each row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (`"`) or a newline will be escaped using double-quotes.

    If *columns* is not specified, the list of column names that forms the header row is determined by the union of all properties on all objects in *rows*; the order of columns is nondeterministic. If *columns* is specified, it is an array of strings representing the column names. For example:

    ``` javascript
    const string = d3.csvFormat(data, ["year", "make", "model", "length"]);
    ```

    All fields on each row object will be coerced to strings. If the field value is null or undefined, the empty string is used. If the field value is a Date, the [ECMAScript date-time string format](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-date-time-string-format) (a subset of ISO 8601) is used: for example, dates at UTC midnight are formatted as `YYYY-MM-DD`. For more control over which and how fields are formatted, first map *rows* to an array of array of string, and then use [*dsv*.formatRows](#dsv_formatRows).
- name: dsv.formatBody()
  id: d3-dsv#dsv_formatbody
  summary: Equivalent to dsv.format, but omits the header row
  belongs_to: dsv
  description: |-
    ###### *dsv*.**formatBody**(*rows*\[, *columns*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Equivalent to [*dsv*.format](#dsv_format), but omits the header row. This is useful, for example, when appending rows to an existing file.
- name: dsv.formatRow()
  id: d3-dsv#dsv_formatrow
  summary: Formats a single array row of strings as delimiter-separated values, returning a string
  belongs_to: dsv
  description: |-
    ###### *dsv*.**formatRow**(*row*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Formats a single array *row* of strings as delimiter-separated values, returning a string. Each column within the row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (") or a newline will be escaped using double-quotes.
- name: dsv.formatRows()
  id: d3-dsv#dsv_formatrows
  summary: Formats the specified array of array of string rows as delimiter-separated values, returning a string
  belongs_to: dsv
  description: |-
    ###### *dsv*.**formatRows**(*rows*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Formats the specified array of array of string *rows* as delimiter-separated values, returning a string. This operation is the reverse of [*dsv*.parseRows](#dsv_parseRows). Each row will be separated by a newline (`\n`), and each column within each row will be separated by the delimiter (such as a comma, `,`). Values that contain either the delimiter, a double-quote (") or a newline will be escaped using double-quotes.

    To convert an array of objects to an array of arrays while explicitly specifying the columns, use [*array*.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). For example:

    ``` javascript
    const string = d3.csvFormatRows(data.map((d, i) => {
      return [
        d.year.getFullYear(), // Assuming d.year is a Date object.
        d.make,
        d.model,
        d.length
      ];
    }));
    ```

    If you like, you can also [*array*.concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) this result with an array of column names to generate the first row:

    ``` javascript
    const string = d3.csvFormatRows([[
        "year",
        "make",
        "model",
        "length"
      ]].concat(data.map((d, i) => {
      return [
        d.year.getFullYear(), // Assuming d.year is a Date object.
        d.make,
        d.model,
        d.length
      ];
    })));
    ```
- name: dsv.formatValue()
  id: d3-dsv#dsv_formatvalue
  summary: Format a single value or string as a delimiter-separated value, returning a string
  belongs_to: dsv
  description: |-
    ###### *dsv*.**formatValue**(*value*) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Format a single *value* or string as a delimiter-separated value, returning a string. A value that contains either the delimiter, a double-quote (") or a newline will be escaped using double-quotes.
- name: dsv.parse()
  id: d3-dsv#dsv_parse
  summary: Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of objects representing the parsed rows
  belongs_to: dsv
  description: |-
    ###### *dsv*.**parse**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Parses the specified *string*, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of objects representing the parsed rows.

    Unlike [*dsv*.parseRows](#dsv_parseRows), this method requires that the first line of the DSV content contains a delimiter-separated list of column names; these column names become the attributes on the returned objects. For example, consider the following CSV file:

    ``` notranslate
    Year,Make,Model,Length
    1997,Ford,E350,2.34
    2000,Mercury,Cougar,2.38
    ```

    The resulting JavaScript array is:

    ``` javascript
    [
      {"Year": "1997", "Make": "Ford", "Model": "E350", "Length": "2.34"},
      {"Year": "2000", "Make": "Mercury", "Model": "Cougar", "Length": "2.38"}
    ]
    ```

    The returned array also exposes a `columns` property containing the column names in input order (in contrast to Object.keys, whose iteration order is arbitrary). For example:

    ``` javascript
    data.columns; // ["Year", "Make", "Model", "Length"]
    ```

    If the column names are not unique, only the last value is returned for each name; to access all values, use [*dsv*.parseRows](#dsv_parseRows) instead (see [example](https://observablehq.com/@d3/parse-csv-with-duplicate-column-names)).

    If a *row* conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types. In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the `+` operator), but better is to specify a *row* conversion function. See [d3.autoType](#autoType) for a convenient *row* conversion function that infers and coerces common types like numbers and strings.

    If a *row* conversion function is specified, the specified function is invoked for each row, being passed an object representing the current row (`d`), the index (`i`) starting at zero for the first non-header row, and the array of column names. If the returned value is null or undefined, the row is skipped and will be omitted from the array returned by *dsv*.parse; otherwise, the returned value defines the corresponding row object. For example:

    ``` javascript
    const data = d3.csvParse(string, (d) => {
      return {
        year: new Date(+d.Year, 0, 1), // lowercase and convert "Year" to Date
        make: d.Make, // lowercase
        model: d.Model, // lowercase
        length: +d.Length // lowercase and convert "Length" to number
      };
    });
    ```

    Note: using `+` rather than [parseInt](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt) or [parseFloat](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseFloat) is typically faster, though more restrictive. For example, `"30px"` when coerced using `+` returns `NaN`, while parseInt and parseFloat return `30`.

    Note: requires unsafe-eval [content security policy](#content-security-policy).
- name: dsv.parseRows()
  id: d3-dsv#dsv_parserows
  summary: Parses the specified string, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of arrays representing the parsed rows
  belongs_to: dsv
  description: |-
    ###### *dsv*.**parseRows**(*string*\[, *row*\]) [Source](https://github.com/d3/d3-dsv/blob/master/src/dsv.js "Source")

    Parses the specified *string*, which must be in the delimiter-separated values format with the appropriate delimiter, returning an array of arrays representing the parsed rows.

    Unlike [*dsv*.parse](#dsv_parse), this method treats the header line as a standard row, and should be used whenever DSV content does not contain a header. Each row is represented as an array rather than an object. Rows may have variable length. For example, consider the following CSV file, which notably lacks a header line:

    ``` notranslate
    1997,Ford,E350,2.34
    2000,Mercury,Cougar,2.38
    ```

    The resulting JavaScript array is:

    ``` javascript
    [
      ["1997", "Ford", "E350", "2.34"],
      ["2000", "Mercury", "Cougar", "2.38"]
    ]
    ```

    If a *row* conversion function is not specified, field values are strings. For safety, there is no automatic conversion to numbers, dates, or other types. In some cases, JavaScript may coerce strings to numbers for you automatically (for example, using the `+` operator), but better is to specify a *row* conversion function. See [d3.autoType](#autoType) for a convenient *row* conversion function that infers and coerces common types like numbers and strings.

    If a *row* conversion function is specified, the specified function is invoked for each row, being passed an array representing the current row (`d`), the index (`i`) starting at zero for the first row, and the array of column names. If the returned value is null or undefined, the row is skipped and will be omitted from the array returned by *dsv*.parse; otherwise, the returned value defines the corresponding row object. For example:

    ``` javascript
    const data = d3.csvParseRows(string, (d, i) => {
      return {
        year: new Date(+d[0], 0, 1), // convert first column to Date
        make: d[1],
        model: d[2],
        length: +d[3] // convert fourth column to number
      };
    });
    ```

    In effect, *row* is similar to applying a [map](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map) and [filter](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter) operator to the returned rows.
- name: dsv2dsv
  id: d3-dsv#dsv2dsv
  summary: Converts the specified DSV input file to DSV (typically with a different delimiter or encoding)
  belongs_to: dsv
  description: |-
    ### dsv2dsv

    ###### **dsv2dsv** \[*options…*\] \[*file*\]

    Converts the specified DSV input *file* to DSV (typically with a different delimiter or encoding). If *file* is not specified, defaults to reading from stdin. For example, to convert to CSV to TSV:

    ``` notranslate
    csv2tsv < example.csv > example.tsv
    ```

    To convert windows-1252 CSV to utf-8 CSV:

    ``` notranslate
    dsv2dsv --input-encoding windows-1252 < latin1.csv > utf8.csv
    ```

    ###### dsv2dsv **-h** dsv2dsv **--help**

    Output usage information.

    ###### dsv2dsv **-V** dsv2dsv **--version**

    Output the version number.

    ###### dsv2dsv **-o** *file* dsv2dsv **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### dsv2dsv **-r** *delimiter* dsv2dsv **--input-delimiter** *delimiter*

    Specify the input delimiter character. Defaults to “,” for reading CSV. (You can enter a tab on the command line by typing ⌃V.)

    ###### dsv2dsv **--input-encoding** *encoding*

    Specify the input character encoding. Defaults to “utf8”.

    ###### dsv2dsv **-w** *delimiter* dsv2dsv **--output-delimiter** *delimiter*

    Specify the output delimiter character. Defaults to “,” for writing CSV. (You can enter a tab on the command line by typing ⌃V.)

    ###### dsv2dsv **--output-encoding** *encoding*

    Specify the output character encoding. Defaults to “utf8”.
- name: dsv2json
  id: d3-dsv#dsv2json
  summary: Converts the specified DSV input file to JSON
  belongs_to: dsv
  description: |-
    ### dsv2json

    ###### **dsv2json** \[*options…*\] \[*file*\]

    Converts the specified DSV input *file* to JSON. If *file* is not specified, defaults to reading from stdin. For example, to convert to CSV to JSON:

    ``` notranslate
    csv2json < example.csv > example.json
    ```

    Or to convert CSV to a newline-delimited JSON stream:

    ``` notranslate
    csv2json -n < example.csv > example.ndjson
    ```

    ###### dsv2json **-h** dsv2json **--help**

    Output usage information.

    ###### dsv2json **-V** dsv2json **--version**

    Output the version number.

    ###### dsv2json **-o** *file* dsv2json **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### dsv2json **-a** dsv2json **--auto-type**

    Use type inference when parsing rows. See [d3.autoType](#autoType) for how it works.

    ###### dsv2json **-r** *delimiter* dsv2json **--input-delimiter** *delimiter*

    Specify the input delimiter character. Defaults to “,” for reading CSV. (You can enter a tab on the command line by typing ⌃V.)

    ###### dsv2json **--input-encoding** *encoding*

    Specify the input character encoding. Defaults to “utf8”.

    ###### dsv2json **-r** *encoding* dsv2json **--output-encoding** *encoding*

    Specify the output character encoding. Defaults to “utf8”.

    ###### dsv2json **-n** dsv2json **--newline-delimited**

    Output [newline-delimited JSON](https://github.com/mbostock/ndjson-cli) instead of a single JSON array.
- name: ease
  id: d3-ease
  summary: Easing is a method of distorting time to control apparent motion in animation
  description: "# d3-ease\n\n*Easing* is a method of distorting time to control apparent motion in animation. It is most commonly used for [slow-in, slow-out](https://en.wikipedia.org/wiki/12_basic_principles_of_animation#Slow_In_and_Slow_Out). By easing time, [animated transitions](d3-transition) are smoother and exhibit more plausible motion.\n\nThe easing types in this module implement the [ease method](#ease_ease), which takes a normalized time *t* and returns the corresponding “eased” time *tʹ*. Both the normalized time and the eased time are typically in the range \\[0,1\\], where 0 represents the start of the animation and 1 represents the end; some easing types, such as [elastic](#easeElastic), may return eased times slightly outside this range. A good easing type should return 0 if *t* = 0 and 1 if *t* = 1. See the [easing explorer](https://observablehq.com/@d3/easing) for a visual demonstration.\n\nThese easing types are largely based on work by [Robert Penner](http://robertpenner.com/easing/).\n\n## Installing\n\nIf you use npm, `npm install d3-ease`. You can also download the [latest release on GitHub](https://github.com/d3/d3-ease/releases/latest). For vanilla HTML in modern browsers, import d3-ease from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {easeCubic} from \"https://cdn.skypack.dev/d3-ease@3\";\n\nconst e = easeCubic(0.25);\n\n</script>\n```\n\nFor legacy environments, you can load d3-ease’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-ease@3\"></script>\n<script>\n\nconst e = d3.easeCubic(0.25);\n\n</script>\n```\n\n[Try d3-ease in your browser.](https://observablehq.com/@d3/easing-animations)\n\n## API Reference\n\n###### *ease*(*t*)\n\nGiven the specified normalized time *t*, typically in the range \\[0,1\\], returns the “eased” time *tʹ*, also typically in \\[0,1\\]. 0 represents the start of the animation and 1 represents the end. A good implementation returns 0 if *t* = 0 and 1 if *t* = 1. See the [easing explorer](https://observablehq.com/@d3/easing) for a visual demonstration. For example, to apply [cubic](#easeCubic) easing:\n\n``` javascript\nconst te = d3.easeCubic(t);\n```\n\nSimilarly, to apply custom [elastic](#easeElastic) easing:\n\n``` javascript\n// Before the animation starts, create your easing function.\nconst customElastic = d3.easeElastic.period(0.4);\n\n// During the animation, apply the easing function.\nconst te = customElastic(t);\n```\n\n###### d3.**easeLinear**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/linear.js \"Source\")\n\nLinear easing; the identity function; *linear*(*t*) returns *t*.\n\n###### d3.**easePolyIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L3 \"Source\")\n\nPolynomial easing; raises *t* to the specified [exponent](#poly_exponent). If the exponent is not specified, it defaults to 3, equivalent to [cubicIn](#easeCubicIn).\n\n###### d3.**easePolyOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L15 \"Source\")\n\nReverse polynomial easing; equivalent to 1 - [polyIn](#easePolyIn)(1 - *t*). If the [exponent](#poly_exponent) is not specified, it defaults to 3, equivalent to [cubicOut](#easeCubicOut).\n\n###### d3.**easePoly**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js \"Source\") d3.**easePolyInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L27 \"Source\")\n\nSymmetric polynomial easing; scales [polyIn](#easePolyIn) for *t* in \\[0, 0.5\\] and [polyOut](#easePolyOut) for *t* in \\[0.5, 1\\]. If the [exponent](#poly_exponent) is not specified, it defaults to 3, equivalent to [cubic](#easeCubic).\n\n###### *poly*.**exponent**(*e*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L1 \"Source\")\n\nReturns a new polynomial easing with the specified exponent *e*. For example, to create equivalents of [linear](#easeLinear), [quad](#easeQuad), and [cubic](#easeCubic):\n\n``` javascript\nconst linear = d3.easePoly.exponent(1);\nconst quad = d3.easePoly.exponent(2);\nconst cubic = d3.easePoly.exponent(3);\n```\n\n###### d3.**easeQuadIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js#L1 \"Source\")\n\nQuadratic easing; equivalent to [polyIn](#easePolyIn).[exponent](#poly_exponent)(2).\n\n###### d3.**easeQuadOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js#L5 \"Source\")\n\nReverse quadratic easing; equivalent to 1 - [quadIn](#easeQuadIn)(1 - *t*). Also equivalent to [polyOut](#easePolyOut).[exponent](#poly_exponent)(2).\n\n###### d3.**easeQuad**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js \"Source\") d3.**easeQuadInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/quad.js#L9 \"Source\")\n\nSymmetric quadratic easing; scales [quadIn](#easeQuadIn) for *t* in \\[0, 0.5\\] and [quadOut](#easeQuadOut) for *t* in \\[0.5, 1\\]. Also equivalent to [poly](#easePoly).[exponent](#poly_exponent)(2).\n\n###### d3.**easeCubicIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js#L1 \"Source\")\n\nCubic easing; equivalent to [polyIn](#easePolyIn).[exponent](#poly_exponent)(3).\n\n###### d3.**easeCubicOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js#L5 \"Source\")\n\nReverse cubic easing; equivalent to 1 - [cubicIn](#easeCubicIn)(1 - *t*). Also equivalent to [polyOut](#easePolyOut).[exponent](#poly_exponent)(3).\n\n###### d3.**easeCubic**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js \"Source\") d3.**easeCubicInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/cubic.js#L9 \"Source\")\n\nSymmetric cubic easing; scales [cubicIn](#easeCubicIn) for *t* in \\[0, 0.5\\] and [cubicOut](#easeCubicOut) for *t* in \\[0.5, 1\\]. Also equivalent to [poly](#easePoly).[exponent](#poly_exponent)(3).\n\n###### d3.**easeSinIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js#L4 \"Source\")\n\nSinusoidal easing; returns sin(*t*).\n\n###### d3.**easeSinOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js#L8 \"Source\")\n\nReverse sinusoidal easing; equivalent to 1 - [sinIn](#easeSinIn)(1 - *t*).\n\n###### d3.**easeSin**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js \"Source\") d3.**easeSinInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/sin.js#L12 \"Source\")\n\nSymmetric sinusoidal easing; scales [sinIn](#easeSinIn) for *t* in \\[0, 0.5\\] and [sinOut](#easeSinOut) for *t* in \\[0.5, 1\\].\n\n###### d3.**easeExpIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js#L1 \"Source\")\n\nExponential easing; raises 2 to the exponent 10 \\* (*t* - 1).\n\n###### d3.**easeExpOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js#L5 \"Source\")\n\nReverse exponential easing; equivalent to 1 - [expIn](#easeExpIn)(1 - *t*).\n\n###### d3.**easeExp**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js \"Source\") d3.**easeExpInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/exp.js#L9 \"Source\")\n\nSymmetric exponential easing; scales [expIn](#easeExpIn) for *t* in \\[0, 0.5\\] and [expOut](#easeExpOut) for *t* in \\[0.5, 1\\].\n\n###### d3.**easeCircleIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js#L1 \"Source\")\n\nCircular easing.\n\n###### d3.**easeCircleOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js#L5 \"Source\")\n\nReverse circular easing; equivalent to 1 - [circleIn](#easeCircleIn)(1 - *t*).\n\n###### d3.**easeCircle**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js \"Source\") d3.**easeCircleInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/circle.js#L9 \"Source\")\n\nSymmetric circular easing; scales [circleIn](#easeCircleIn) for *t* in \\[0, 0.5\\] and [circleOut](#easeCircleOut) for *t* in \\[0.5, 1\\].\n\n###### d3.**easeElasticIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L5 \"Source\")\n\nElastic easing, like a rubber band. The [amplitude](#elastic_amplitude) and [period](#elastic_period) of the oscillation are configurable; if not specified, they default to 1 and 0.3, respectively.\n\n###### d3.**easeElastic**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js \"Source\") d3.**easeElasticOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L18 \"Source\")\n\nReverse elastic easing; equivalent to 1 - [elasticIn](#easeElasticIn)(1 - *t*).\n\n###### d3.**easeElasticInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L31 \"Source\")\n\nSymmetric elastic easing; scales [elasticIn](#easeElasticIn) for *t* in \\[0, 0.5\\] and [elasticOut](#easeElasticOut) for *t* in \\[0.5, 1\\].\n\n###### *elastic*.**amplitude**(*a*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L40 \"Source\")\n\nReturns a new elastic easing with the specified amplitude *a*.\n\n###### *elastic*.**period**(*p*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L41 \"Source\")\n\nReturns a new elastic easing with the specified period *p*.\n\n###### d3.**easeBackIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L3 \"Source\")\n\n[Anticipatory](https://en.wikipedia.org/wiki/12_basic_principles_of_animation#Anticipation) easing, like a dancer bending his knees before jumping off the floor. The degree of [overshoot](#back_overshoot) is configurable; if not specified, it defaults to 1.70158.\n\n###### d3.**easeBackOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L15 \"Source\")\n\nReverse anticipatory easing; equivalent to 1 - [backIn](#easeBackIn)(1 - *t*).\n\n###### d3.**easeBack**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js \"Source\") d3.**easeBackInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L27 \"Source\")\n\nSymmetric anticipatory easing; scales [backIn](#easeBackIn) for *t* in \\[0, 0.5\\] and [backOut](#easeBackOut) for *t* in \\[0.5, 1\\].\n\n###### *back*.**overshoot**(*s*) [Source](https://github.com/d3/d3-ease/blob/master/src/back.js#L1 \"Source\")\n\nReturns a new back easing with the specified overshoot *s*.\n\n###### d3.**easeBounceIn**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js#L12 \"Source\")\n\nBounce easing, like a rubber ball.\n\n###### d3.**easeBounce**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js \"Source\") d3.**easeBounceOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js#L16 \"Source\")\n\nReverse bounce easing; equivalent to 1 - [bounceIn](#easeBounceIn)(1 - *t*).\n\n###### d3.**easeBounceInOut**(*t*) [Source](https://github.com/d3/d3-ease/blob/master/src/bounce.js#L20 \"Source\")\n\nSymmetric bounce easing; scales [bounceIn](#easeBounceIn) for *t* in \\[0, 0.5\\] and [bounceOut](#easeBounceOut) for *t* in \\[0.5, 1\\].\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-ease](https://github.com/d3/d3-ease)"
- name: ease()
  id: d3-ease#_ease
  summary: Given the specified normalized time t, typically in the range [0,1], returns the “eased” time tʹ, also typically in [0,1]
  belongs_to: ease
  description: |-
    ###### *ease*(*t*)

    Given the specified normalized time *t*, typically in the range \[0,1\], returns the “eased” time *tʹ*, also typically in \[0,1\]. 0 represents the start of the animation and 1 represents the end. A good implementation returns 0 if *t* = 0 and 1 if *t* = 1. See the [easing explorer](https://observablehq.com/@d3/easing) for a visual demonstration. For example, to apply [cubic](#easeCubic) easing:

    ``` javascript
    const te = d3.easeCubic(t);
    ```

    Similarly, to apply custom [elastic](#easeElastic) easing:

    ``` javascript
    // Before the animation starts, create your easing function.
    const customElastic = d3.easeElastic.period(0.4);

    // During the animation, apply the easing function.
    const te = customElastic(t);
    ```
- name: edge
  id: d3-voronoi#edge
  summary: © 2010–2023 Michael Bostock Licensed under the BSD License
  belongs_to: voronoi
  description: "###### *edge*\n\nEach edge in the diagram is an array \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\] with two additional properties:\n\n- `left` - the [site](#site) on the left side of the edge.\n- `right` - the [site](#site) on the right side of the edge; null for a clipped border edge.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-voronoi](https://github.com/d3/d3-voronoi)"
- name: elastic.amplitude()
  id: d3-ease#elastic_amplitude
  summary: Returns a new elastic easing with the specified amplitude a
  belongs_to: ease
  description: |-
    ###### *elastic*.**amplitude**(*a*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L40 "Source")

    Returns a new elastic easing with the specified amplitude *a*.
- name: elastic.period()
  id: d3-ease#elastic_period
  summary: Returns a new elastic easing with the specified period p
  belongs_to: ease
  description: |-
    ###### *elastic*.**period**(*p*) [Source](https://github.com/d3/d3-ease/blob/master/src/elastic.js#L41 "Source")

    Returns a new elastic easing with the specified period *p*.
- name: event.on()
  id: d3-drag#event_on
  summary: Equivalent to drag.on, but only applies to the current drag gesture
  belongs_to: drag
  description: "###### *event*.**on**(*typenames*, \\[*listener*\\]) · [Source](https://github.com/d3/d3-drag/blob/master/src/event.js)\n\nEquivalent to [*drag*.on](#drag_on), but only applies to the current drag gesture. Before the drag gesture starts, a [copy](d3-dispatch#dispatch_copy) of the current drag [event listeners](#drag_on) is made. This copy is bound to the current drag gesture and modified by *event*.on. This is useful for temporary listeners that only receive events for the current drag gesture. For example, this start event listener registers temporary drag and end event listeners as closures:\n\n``` javascript\nfunction started(event) {\n  const circle = d3.select(this).classed(\"dragging\", true);\n\n  event.on(\"drag\", dragged).on(\"end\", ended);\n\n  function dragged(event, d) {\n    circle.raise().attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n  }\n\n  function ended() {\n    circle.classed(\"dragging\", false);\n  }\n}\n```\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-drag](https://github.com/d3/d3-drag)"
- name: fetch
  id: d3-fetch
  summary: This module provides convenient parsing on top of Fetch
  description: "# d3-fetch\n\nThis module provides convenient parsing on top of [Fetch](https://fetch.spec.whatwg.org/). For example, to load a text file:\n\n``` javascript\nconst text = await d3.text(\"/path/to/file.txt\");\nconsole.log(text); // Hello, world!\n```\n\nTo load and parse a CSV file:\n\n``` javascript\nconst data = await d3.csv(\"/path/to/file.csv\");\nconsole.log(data); // [{\"Hello\": \"world\"}, …]\n```\n\nThis module has built-in support for parsing [JSON](#json), [CSV](#csv), and [TSV](#tsv). You can parse additional formats by using [text](#text) directly. (This module replaced [d3-request](d3-request).)\n\n## Installing\n\nIf you use npm, `npm install d3-fetch`. You can also download the [latest release on GitHub](https://github.com/d3/d3-fetch/releases/latest). For vanilla HTML in modern browsers, import d3-fetch from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {csv} from \"https://cdn.skypack.dev/d3-fetch@3\";\n\ncsv(\"/path/to/file.csv\").then((data) => {\n  console.log(data); // [{\"Hello\": \"world\"}, …]\n});\n\n</script>\n```\n\nFor legacy environments, you can load d3-fetch’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-fetch@3\"></script>\n<script>\n\nd3.csv(\"/path/to/file.csv\").then((data) => {\n  console.log(data); // [{\"Hello\": \"world\"}, …]\n});\n\n</script>\n```\n\n## API Reference\n\n###### d3.**blob**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/blob.js \"Source\")\n\nFetches the binary file at the specified *input* URL as a Blob. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n###### d3.**buffer**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/buffer.js \"Source\")\n\nFetches the binary file at the specified *input* URL as an ArrayBuffer. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n###### d3.**csv**(*input*\\[, *init*\\]\\[, *row*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nEquivalent to [d3.dsv](#dsv) with the comma character as the delimiter.\n\n###### d3.**dsv**(*delimiter*, *input*\\[, *init*\\]\\[, *row*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nFetches the [DSV](d3-dsv) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields. An optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:\n\n``` javascript\nconst data = await d3.dsv(\",\", \"test.csv\", (d) => {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n});\n```\n\nIf only one of *init* and *row* is specified, it is interpreted as the *row* conversion function if it is a function, and otherwise an *init* object.\n\nSee also [d3.csv](#csv) and [d3.tsv](#tsv).\n\n###### d3.**html**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as HTML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n###### d3.**image**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/image.js \"Source\")\n\nFetches the image at the specified *input* URL. If *init* is specified, sets any additional properties on the image before loading. For example, to enable an anonymous [cross-origin request](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image):\n\n``` javascript\nconst img = await d3.image(\"https://example.com/test.png\", {crossOrigin: \"anonymous\"});\n```\n\n###### d3.**json**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/json.js \"Source\")\n\nFetches the [JSON](http://json.org) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields. If the server returns a status code of [204 No Content](https://developer.mozilla.org/docs/Web/HTTP/Status/204) or [205 Reset Content](https://developer.mozilla.org/docs/Web/HTTP/Status/205), the promise resolves to `undefined`.\n\n###### d3.**svg**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as SVG. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n###### d3.**text**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/text.js \"Source\")\n\nFetches the text file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n###### d3.**tsv**(*input*\\[, *init*\\]\\[, *row*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nEquivalent to [d3.dsv](#dsv) with the tab character as the delimiter.\n\n###### d3.**xml**(*input*\\[, *init*\\]) · [Source](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as XML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-fetch](https://github.com/d3/d3-fetch)"
- name: force
  id: d3-force
  summary: This module implements a velocity Verlet numerical integrator for simulating physical forces on particles
  description: "# d3-force\n\nThis module implements a [velocity Verlet](https://en.wikipedia.org/wiki/Verlet_integration) numerical integrator for simulating physical forces on particles. The simulation is simplified: it assumes a constant unit time step Δ*t* = 1 for each step, and a constant unit mass *m* = 1 for all particles. As a result, a force *F* acting on a particle is equivalent to a constant acceleration *a* over the time interval Δ*t*, and can be simulated simply by adding to the particle’s velocity, which is then added to the particle’s position.\n\nIn the domain of information visualization, physical simulations are useful for studying [networks](https://observablehq.com/@d3/force-directed-graph) and [hierarchies](https://observablehq.com/@d3/force-directed-tree)!\n\nYou can also simulate circles (disks) with collision, such as for [bubble charts](http://www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html) or [beeswarm plots](https://observablehq.com/@d3/beeswarm):\n\nYou can even use it as a rudimentary physics engine, say to simulate cloth:\n\nTo use this module, create a [simulation](#simulation) for an array of [nodes](#simulation_nodes), and compose the desired [forces](#simulation_force). Then [listen](#simulation_on) for tick events to render the nodes as they update in your preferred graphics system, such as Canvas or SVG.\n\n## Installing\n\nIf you use npm, `npm install d3-force`. You can also download the [latest release on GitHub](https://github.com/d3/d3-force/releases/latest). For vanilla HTML in modern browsers, import d3-force from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {forceSimulation} from \"https://cdn.skypack.dev/d3-force@3\";\n\nconst simulation = forceSimulation(nodes);\n\n</script>\n```\n\nFor legacy environments, you can load d3-force’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-quadtree@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-force@3\"></script>\n<script>\n\nconst simulation = d3.forceSimulation(nodes);\n\n</script>\n```\n\n[Try d3-force in your browser.](https://observablehq.com/collection/@d3/d3-force)\n\n## API Reference\n\n### Simulation\n\n###### d3.**forceSimulation**(\\[*nodes*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nCreates a new simulation with the specified array of [*nodes*](#simulation_nodes) and no [forces](#simulation_force). If *nodes* is not specified, it defaults to the empty array. The simulator [starts](#simulation_restart) automatically; use [*simulation*.on](#simulation_on) to listen for tick events as the simulation runs. If you wish to run the simulation manually instead, call [*simulation*.stop](#simulation_stop), and then call [*simulation*.tick](#simulation_tick) as desired.\n\n###### *simulation*.**restart**() · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nRestarts the simulation’s internal timer and returns the simulation. In conjunction with [*simulation*.alphaTarget](#simulation_alphaTarget) or [*simulation*.alpha](#simulation_alpha), this method can be used to “reheat” the simulation during interaction, such as when dragging a node, or to resume the simulation after temporarily pausing it with [*simulation*.stop](#simulation_stop).\n\n###### *simulation*.**stop**() · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nStops the simulation’s internal timer, if it is running, and returns the simulation. If the timer is already stopped, this method does nothing. This method is useful for running the simulation manually; see [*simulation*.tick](#simulation_tick).\n\n###### *simulation*.**tick**(\\[*iterations*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nManually steps the simulation by the specified number of *iterations*, and returns the simulation. If *iterations* is not specified, it defaults to 1 (single step).\n\nFor each iteration, it increments the current [*alpha*](#simulation_alpha) by ([*alphaTarget*](#simulation_alphaTarget) - *alpha*) × [*alphaDecay*](#simulation_alphaDecay); then invokes each registered [force](#simulation_force), passing the new *alpha*; then decrements each [node](#simulation_nodes)’s velocity by *velocity* × [*velocityDecay*](#simulation_velocityDecay); lastly increments each node’s position by *velocity*.\n\nThis method does not dispatch [events](#simulation_on); events are only dispatched by the internal timer when the simulation is started automatically upon [creation](#forceSimulation) or by calling [*simulation*.restart](#simulation_restart). The natural number of ticks when the simulation is started is ⌈*log*([*alphaMin*](#simulation_alphaMin)) / *log*(1 - [*alphaDecay*](#simulation_alphaDecay))⌉; by default, this is 300.\n\nThis method can be used in conjunction with [*simulation*.stop](#simulation_stop) to compute a [static force layout](https://bl.ocks.org/mbostock/1667139). For large graphs, static layouts should be computed [in a web worker](https://bl.ocks.org/mbostock/01ab2e85e8727d6529d20391c0fd9a16) to avoid freezing the user interface.\n\n###### *simulation*.**nodes**(\\[*nodes*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *nodes* is specified, sets the simulation’s nodes to the specified array of objects, initializing their positions and velocities if necessary, and then [re-initializes](#force_initialize) any bound [forces](#simulation_force); returns the simulation. If *nodes* is not specified, returns the simulation’s array of nodes as specified to the [constructor](#forceSimulation).\n\nEach *node* must be an object. The following properties are assigned by the simulation:\n\n- `index` - the node’s zero-based index into *nodes*\n- `x` - the node’s current *x*-position\n- `y` - the node’s current *y*-position\n- `vx` - the node’s current *x*-velocity\n- `vy` - the node’s current *y*-velocity\n\nThe position ⟨*x*,*y*⟩ and velocity ⟨*vx*,*vy*⟩ may be subsequently modified by [forces](#forces) and by the simulation. If either *vx* or *vy* is NaN, the velocity is initialized to ⟨0,0⟩. If either *x* or *y* is NaN, the position is initialized in a [phyllotaxis arrangement](https://observablehq.com/@d3/force-layout-phyllotaxis), so chosen to ensure a deterministic, uniform distribution.\n\nTo fix a node in a given position, you may specify two additional properties:\n\n- `fx` - the node’s fixed *x*-position\n- `fy` - the node’s fixed *y*-position\n\nAt the end of each [tick](#simulation_tick), after the application of any forces, a node with a defined *node*.fx has *node*.x reset to this value and *node*.vx set to zero; likewise, a node with a defined *node*.fy has *node*.y reset to this value and *node*.vy set to zero. To unfix a node that was previously fixed, set *node*.fx and *node*.fy to null, or delete these properties.\n\nIf the specified array of *nodes* is modified, such as when nodes are added to or removed from the simulation, this method must be called again with the new (or changed) array to notify the simulation and bound forces of the change; the simulation does not make a defensive copy of the specified array.\n\n###### *simulation*.**alpha**(\\[*alpha*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\n*alpha* is roughly analogous to temperature in [simulated annealing](https://en.wikipedia.org/wiki/Simulated_annealing#Overview). It decreases over time as the simulation “cools down”. When *alpha* reaches *alphaMin*, the simulation stops; see [*simulation*.restart](#simulation_restart).\n\nIf *alpha* is specified, sets the current alpha to the specified number in the range \\[0,1\\] and returns this simulation. If *alpha* is not specified, returns the current alpha value, which defaults to 1.\n\n###### *simulation*.**alphaMin**(\\[*min*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *min* is specified, sets the minimum *alpha* to the specified number in the range \\[0,1\\] and returns this simulation. If *min* is not specified, returns the current minimum *alpha* value, which defaults to 0.001. The simulation’s internal timer stops when the current [*alpha*](#simulation_alpha) is less than the minimum *alpha*. The default [alpha decay rate](#simulation_alphaDecay) of ~0.0228 corresponds to 300 iterations.\n\n###### *simulation*.**alphaDecay**(\\[*decay*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *decay* is specified, sets the [*alpha*](#simulation_alpha) decay rate to the specified number in the range \\[0,1\\] and returns this simulation. If *decay* is not specified, returns the current *alpha* decay rate, which defaults to 0.0228… = 1 - *pow*(0.001, 1 / 300) where 0.001 is the default [minimum *alpha*](#simulation_alphaMin).\n\nThe alpha decay rate determines how quickly the current alpha interpolates towards the desired [target *alpha*](#simulation_alphaTarget); since the default target *alpha* is zero, by default this controls how quickly the simulation cools. Higher decay rates cause the simulation to stabilize more quickly, but risk getting stuck in a local minimum; lower values cause the simulation to take longer to run, but typically converge on a better layout. To have the simulation run forever at the current *alpha*, set the *decay* rate to zero; alternatively, set a [target *alpha*](#simulation_alphaTarget) greater than the [minimum *alpha*](#simulation_alphaMin).\n\n###### *simulation*.**alphaTarget**(\\[*target*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *target* is specified, sets the current target [*alpha*](#simulation_alpha) to the specified number in the range \\[0,1\\] and returns this simulation. If *target* is not specified, returns the current target alpha value, which defaults to 0.\n\n###### *simulation*.**velocityDecay**(\\[*decay*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *decay* is specified, sets the velocity decay factor to the specified number in the range \\[0,1\\] and returns this simulation. If *decay* is not specified, returns the current velocity decay factor, which defaults to 0.4. The decay factor is akin to atmospheric friction; after the application of any forces during a [tick](#simulation_tick), each node’s velocity is multiplied by 1 - *decay*. As with lowering the [alpha decay rate](#simulation_alphaDecay), less velocity decay may converge on a better solution, but risks numerical instabilities and oscillation.\n\n###### *simulation*.**force**(*name*\\[, *force*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *force* is specified, assigns the [force](#forces) for the specified *name* and returns this simulation. If *force* is not specified, returns the force with the specified name, or undefined if there is no such force. (By default, new simulations have no forces.) For example, to create a new simulation to layout a graph, you might say:\n\n``` javascript\nconst simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter());\n```\n\nTo remove the force with the given *name*, pass null as the *force*. For example, to remove the charge force:\n\n``` javascript\nsimulation.force(\"charge\", null);\n```\n\n###### *simulation*.**find**(*x*, *y*\\[, *radius*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nReturns the node closest to the position ⟨*x*,*y*⟩ with the given search *radius*. If *radius* is not specified, it defaults to infinity. If there is no node within the search area, returns undefined.\n\n###### *simulation*.**randomSource**(\\[*source*\\]) [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js \"Source\"))\n\nIf *source* is specified, sets the function used to generate random numbers; this should be a function that returns a number between 0 (inclusive) and 1 (exclusive). If *source* is not specified, returns this simulation’s current random source which defaults to a fixed-seed [linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator). See also [*random*.source](d3-random#random_source).\n\n###### *simulation*.**on**(*typenames*, \\[*listener*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nIf *listener* is specified, sets the event *listener* for the specified *typenames* and returns this simulation. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the `this` context as the simulation.\n\nThe *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `tick.foo` and `tick.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:\n\n- `tick` - after each tick of the simulation’s internal timer.\n- `end` - after the simulation’s timer stops when *alpha* \\< [*alphaMin*](#simulation_alphaMin).\n\nNote that *tick* events are not dispatched when [*simulation*.tick](#simulation_tick) is called manually; events are only dispatched by the internal timer and are intended for interactive rendering of the simulation. To affect the simulation, register [forces](#simulation_force) instead of modifying nodes’ positions or velocities inside a tick event listener.\n\nSee [*dispatch*.on](d3-dispatch#dispatch_on) for details.\n\n### Forces\n\nA *force* is simply a function that modifies nodes’ positions or velocities; in this context, a *force* can apply a classical physical force such as electrical charge or gravity, or it can resolve a geometric constraint, such as keeping nodes within a bounding box or keeping linked nodes a fixed distance apart. For example, a simple positioning force that moves nodes towards the origin ⟨0,0⟩ might be implemented as:\n\n``` javascript\nfunction force(alpha) {\n  for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {\n    node = nodes[i];\n    node.vx -= node.x * k;\n    node.vy -= node.y * k;\n  }\n}\n```\n\nForces typically read the node’s current position ⟨*x*,*y*⟩ and then add to (or subtract from) the node’s velocity ⟨*vx*,*vy*⟩. However, forces may also “peek ahead” to the anticipated next position of the node, ⟨*x* + *vx*,*y* + *vy*⟩; this is necessary for resolving geometric constraints through [iterative relaxation](https://en.wikipedia.org/wiki/Relaxation_(iterative_method)). Forces may also modify the position directly, which is sometimes useful to avoid adding energy to the simulation, such as when recentering the simulation in the viewport.\n\nSimulations typically compose multiple forces as desired. This module provides several for your enjoyment:\n\n- [Centering](#centering)\n- [Collision](#collision)\n- [Links](#links)\n- [Many-Body](#many-body)\n- [Positioning](#positioning)\n\nForces may optionally implement [*force*.initialize](#force_initialize) to receive the simulation’s array of nodes.\n\n###### *force*(*alpha*) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nApplies this force, optionally observing the specified *alpha*. Typically, the force is applied to the array of nodes previously passed to [*force*.initialize](#force_initialize), however, some forces may apply to a subset of nodes, or behave differently. For example, [d3.forceLink](#links) applies to the source and target of each link.\n\n###### *force*.**initialize**(*nodes*) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)\n\nSupplies the array of *nodes* and *random* source to this force. This method is called when a force is bound to a simulation via [*simulation*.force](#simulation_force) and when the simulation’s nodes change via [*simulation*.nodes](#simulation_nodes). A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.\n\n#### Centering\n\nThe centering force translates nodes uniformly so that the mean position of all nodes (the center of mass if all nodes have equal weight) is at the given position ⟨[*x*](#center_x),[*y*](#center_y)⟩. This force modifies the positions of nodes on each application; it does not modify velocities, as doing so would typically cause the nodes to overshoot and oscillate around the desired center. This force helps keeps nodes in the center of the viewport, and unlike the [positioning force](#positioning), it does not distort their relative positions.\n\n###### d3.**forceCenter**(\\[*x*, *y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)\n\nCreates a new centering force with the specified [*x*-](#center_x) and [*y*-](#center_y) coordinates. If *x* and *y* are not specified, they default to ⟨0,0⟩.\n\n###### *center*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)\n\nIf *x* is specified, sets the *x*-coordinate of the centering position to the specified number and returns this force. If *x* is not specified, returns the current *x*-coordinate, which defaults to zero.\n\n###### *center*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js)\n\nIf *y* is specified, sets the *y*-coordinate of the centering position to the specified number and returns this force. If *y* is not specified, returns the current *y*-coordinate, which defaults to zero.\n\n###### *center*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/center.js), [Examples](https://observablehq.com/@d3/forcecenter-strength)\n\nIf *strength* is specified, sets the centering force’s strength. A reduced strength of e.g. 0.05 softens the movements on interactive graphs in which new nodes enter or exit the graph. If *strength* is not specified, returns the force’s current strength, which defaults to 1.\n\n#### Collision\n\nThe collision force treats nodes as circles with a given [radius](#collide_radius), rather than points, and prevents nodes from overlapping. More formally, two nodes *a* and *b* are separated so that the distance between *a* and *b* is at least *radius*(*a*) + *radius*(*b*). To reduce jitter, this is by default a “soft” constraint with a configurable [strength](#collide_strength) and [iteration count](#collide_iterations).\n\n###### d3.**forceCollide**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)\n\nCreates a new circle collision force with the specified [*radius*](#collide_radius). If *radius* is not specified, it defaults to the constant one for all nodes.\n\n###### *collide*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)\n\nIf *radius* is specified, sets the radius accessor to the specified number or function, re-evaluates the radius accessor for each node, and returns this force. If *radius* is not specified, returns the current radius accessor, which defaults to:\n\n``` javascript\nfunction radius() {\n  return 1;\n}\n```\n\nThe radius accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the radius of each node is only recomputed when the force is initialized or when this method is called with a new *radius*, and not on every application of the force.\n\n###### *collide*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)\n\nIf *strength* is specified, sets the force strength to the specified number in the range \\[0,1\\] and returns this force. If *strength* is not specified, returns the current strength which defaults to 1.\n\nOverlapping nodes are resolved through iterative relaxation. For each node, the other nodes that are anticipated to overlap at the next tick (using the anticipated positions ⟨*x* + *vx*,*y* + *vy*⟩) are determined; the node’s velocity is then modified to push the node out of each overlapping node. The change in velocity is dampened by the force’s strength such that the resolution of simultaneous overlaps can be blended together to find a stable solution.\n\n###### *collide*.**iterations**(\\[*iterations*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/collide.js)\n\nIf *iterations* is specified, sets the number of iterations per application to the specified number and returns this force. If *iterations* is not specified, returns the current iteration count which defaults to 1. Increasing the number of iterations greatly increases the rigidity of the constraint and avoids partial overlap of nodes, but also increases the runtime cost to evaluate the force.\n\n#### Links\n\nThe link force pushes linked nodes together or apart according to the desired [link distance](#link_distance). The strength of the force is proportional to the difference between the linked nodes’ distance and the target distance, similar to a spring force.\n\n###### d3.**forceLink**(\\[*links*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nCreates a new link force with the specified *links* and default parameters. If *links* is not specified, it defaults to the empty array.\n\n###### *link*.**links**(\\[*links*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nIf *links* is specified, sets the array of links associated with this force, recomputes the [distance](#link_distance) and [strength](#link_strength) parameters for each link, and returns this force. If *links* is not specified, returns the current array of links, which defaults to the empty array.\n\nEach link is an object with the following properties:\n\n- `source` - the link’s source node; see [*simulation*.nodes](#simulation_nodes)\n- `target` - the link’s target node; see [*simulation*.nodes](#simulation_nodes)\n- `index` - the zero-based index into *links*, assigned by this method\n\nFor convenience, a link’s source and target properties may be initialized using numeric or string identifiers rather than object references; see [*link*.id](#link_id). When the link force is [initialized](#force_initialize) (or re-initialized, as when the nodes or links change), any *link*.source or *link*.target property which is *not* an object is replaced by an object reference to the corresponding *node* with the given identifier.\n\nIf the specified array of *links* is modified, such as when links are added to or removed from the simulation, this method must be called again with the new (or changed) array to notify the force of the change; the force does not make a defensive copy of the specified array.\n\n###### *link*.**id**(\\[*id*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nIf *id* is specified, sets the node id accessor to the specified function and returns this force. If *id* is not specified, returns the current node id accessor, which defaults to the numeric *node*.index:\n\n``` javascript\nfunction id(d) {\n  return d.index;\n}\n```\n\nThe default id accessor allows each link’s source and target to be specified as a zero-based index into the [nodes](#simulation_nodes) array. For example:\n\n``` javascript\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n\nNow consider a different id accessor that returns a string:\n\n``` javascript\nfunction id(d) {\n  return d.id;\n}\n```\n\nWith this accessor, you can use named sources and targets:\n\n``` javascript\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n\nThis is particularly useful when representing graphs in JSON, as JSON does not allow references. See [this example](https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35).\n\nThe id accessor is invoked for each node whenever the force is initialized, as when the [nodes](#simulation_nodes) or [links](#link_links) change, being passed the node and its zero-based index.\n\n###### *link*.**distance**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nIf *distance* is specified, sets the distance accessor to the specified number or function, re-evaluates the distance accessor for each link, and returns this force. If *distance* is not specified, returns the current distance accessor, which defaults to:\n\n``` javascript\nfunction distance() {\n  return 30;\n}\n```\n\nThe distance accessor is invoked for each [link](#link_links), being passed the *link* and its zero-based *index*. The resulting number is then stored internally, such that the distance of each link is only recomputed when the force is initialized or when this method is called with a new *distance*, and not on every application of the force.\n\n###### *link*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nIf *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each link, and returns this force. If *strength* is not specified, returns the current strength accessor, which defaults to:\n\n``` javascript\nfunction strength(link) {\n  return 1 / Math.min(count(link.source), count(link.target));\n}\n```\n\nWhere *count*(*node*) is a function that returns the number of links with the given node as a source or target. This default was chosen because it automatically reduces the strength of links connected to heavily-connected nodes, improving stability.\n\nThe strength accessor is invoked for each [link](#link_links), being passed the *link* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each link is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.\n\n###### *link*.**iterations**(\\[*iterations*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)\n\nIf *iterations* is specified, sets the number of iterations per application to the specified number and returns this force. If *iterations* is not specified, returns the current iteration count which defaults to 1. Increasing the number of iterations greatly increases the rigidity of the constraint and is useful for [complex structures such as lattices](https://observablehq.com/@d3/force-directed-lattice), but also increases the runtime cost to evaluate the force.\n\n#### Many-Body\n\nThe many-body (or *n*-body) force applies mutually amongst all [nodes](#simulation_nodes). It can be used to simulate gravity (attraction) if the [strength](#manyBody_strength) is positive, or electrostatic charge (repulsion) if the strength is negative. This implementation uses quadtrees and the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) to greatly improve performance; the accuracy can be customized using the [theta](#manyBody_theta) parameter.\n\nUnlike links, which only affect two linked nodes, the charge force is global: every node affects every other node, even if they are on disconnected subgraphs.\n\n###### d3.**forceManyBody**() · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)\n\nCreates a new many-body force with the default parameters.\n\n###### *manyBody*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)\n\nIf *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. A positive value causes nodes to attract each other, similar to gravity, while a negative value causes nodes to repel each other, similar to electrostatic charge. If *strength* is not specified, returns the current strength accessor, which defaults to:\n\n``` javascript\nfunction strength() {\n  return -30;\n}\n```\n\nThe strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.\n\n###### *manyBody*.**theta**(\\[*theta*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)\n\nIf *theta* is specified, sets the Barnes–Hut approximation criterion to the specified number and returns this force. If *theta* is not specified, returns the current value, which defaults to 0.9.\n\nTo accelerate computation, this force implements the [Barnes–Hut approximation](http://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) which takes O(*n* log *n*) per application where *n* is the number of [nodes](#simulation_nodes). For each application, a [quadtree](d3-quadtree) stores the current node positions; then for each node, the combined force of all other nodes on the given node is computed. For a cluster of nodes that is far away, the charge force can be approximated by treating the cluster as a single, larger node. The *theta* parameter determines the accuracy of the approximation: if the ratio *w* / *l* of the width *w* of the quadtree cell to the distance *l* from the node to the cell’s center of mass is less than *theta*, all nodes in the given cell are treated as a single node rather than individually.\n\n###### *manyBody*.**distanceMin**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)\n\nIf *distance* is specified, sets the minimum distance between nodes over which this force is considered. If *distance* is not specified, returns the current minimum distance, which defaults to 1. A minimum distance establishes an upper bound on the strength of the force between two nearby nodes, avoiding instability. In particular, it avoids an infinitely-strong force if two nodes are exactly coincident; in this case, the direction of the force is random.\n\n###### *manyBody*.**distanceMax**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)\n\nIf *distance* is specified, sets the maximum distance between nodes over which this force is considered. If *distance* is not specified, returns the current maximum distance, which defaults to infinity. Specifying a finite maximum distance improves performance and produces a more localized layout.\n\n#### Positioning\n\nThe [*x*](#forceX)- and [*y*](#forceY)-positioning forces push nodes towards a desired position along the given dimension with a configurable strength. The [*radial*](#forceRadial) force is similar, except it pushes nodes towards the closest point on a given circle. The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position. While these forces can be used to position individual nodes, they are intended primarily for global forces that apply to all (or most) nodes.\n\n###### d3.**forceX**(\\[*x*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)\n\nCreates a new positioning force along the *x*-axis towards the given position [*x*](#x_x). If *x* is not specified, it defaults to 0.\n\n###### *x*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)\n\nIf *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *x*-velocity: ([*x*](#x_x) - *node*.x) × *strength*. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current *x*-position to the target *x*-position with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \\[0,1\\] is not recommended.\n\nIf *strength* is not specified, returns the current strength accessor, which defaults to:\n\n``` javascript\nfunction strength() {\n  return 0.1;\n}\n```\n\nThe strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.\n\n###### *x*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)\n\nIf *x* is specified, sets the *x*-coordinate accessor to the specified number or function, re-evaluates the *x*-accessor for each node, and returns this force. If *x* is not specified, returns the current *x*-accessor, which defaults to:\n\n``` javascript\nfunction x() {\n  return 0;\n}\n```\n\nThe *x*-accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target *x*-coordinate of each node is only recomputed when the force is initialized or when this method is called with a new *x*, and not on every application of the force.\n\n###### d3.**forceY**(\\[*y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)\n\nCreates a new positioning force along the *y*-axis towards the given position [*y*](#y_y). If *y* is not specified, it defaults to 0.\n\n###### *y*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)\n\nIf *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *y*-velocity: ([*y*](#y_y) - *node*.y) × *strength*. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current *y*-position to the target *y*-position with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \\[0,1\\] is not recommended.\n\nIf *strength* is not specified, returns the current strength accessor, which defaults to:\n\n``` javascript\nfunction strength() {\n  return 0.1;\n}\n```\n\nThe strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.\n\n###### *y*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)\n\nIf *y* is specified, sets the *y*-coordinate accessor to the specified number or function, re-evaluates the *y*-accessor for each node, and returns this force. If *y* is not specified, returns the current *y*-accessor, which defaults to:\n\n``` javascript\nfunction y() {\n  return 0;\n}\n```\n\nThe *y*-accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target *y*-coordinate of each node is only recomputed when the force is initialized or when this method is called with a new *y*, and not on every application of the force.\n\n###### d3.**forceRadial**(*radius*\\[, *x*\\]\\[, *y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nCreates a new positioning force towards a circle of the specified [*radius*](#radial_radius) centered at ⟨[*x*](#radial_x),[*y*](#radial_y)⟩. If *x* and *y* are not specified, they default to ⟨0,0⟩.\n\n###### *radial*.**strength**(\\[*strength*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nIf *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *x*- and *y*-velocity. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current position to the closest point on the circle with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \\[0,1\\] is not recommended.\n\nIf *strength* is not specified, returns the current strength accessor, which defaults to:\n\n``` javascript\nfunction strength() {\n  return 0.1;\n}\n```\n\nThe strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.\n\n###### *radial*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nIf *radius* is specified, sets the circle *radius* to the specified number or function, re-evaluates the *radius* accessor for each node, and returns this force. If *radius* is not specified, returns the current *radius* accessor.\n\nThe *radius* accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target radius of each node is only recomputed when the force is initialized or when this method is called with a new *radius*, and not on every application of the force.\n\n###### *radial*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nIf *x* is specified, sets the *x*-coordinate of the circle center to the specified number and returns this force. If *x* is not specified, returns the current *x*-coordinate of the center, which defaults to zero.\n\n###### *radial*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nIf *y* is specified, sets the *y*-coordinate of the circle center to the specified number and returns this force. If *y* is not specified, returns the current *y*-coordinate of the center, which defaults to zero.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-force](https://github.com/d3/d3-force)"
- name: force()
  id: d3-force#_force
  summary: Applies this force, optionally observing the specified alpha
  belongs_to: force
  description: |-
    ###### *force*(*alpha*) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Applies this force, optionally observing the specified *alpha*. Typically, the force is applied to the array of nodes previously passed to [*force*.initialize](#force_initialize), however, some forces may apply to a subset of nodes, or behave differently. For example, [d3.forceLink](#links) applies to the source and target of each link.
- name: force.initialize()
  id: d3-force#force_initialize
  summary: Supplies the array of nodes and random source to this force
  belongs_to: force
  description: |-
    ###### *force*.**initialize**(*nodes*) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Supplies the array of *nodes* and *random* source to this force. This method is called when a force is bound to a simulation via [*simulation*.force](#simulation_force) and when the simulation’s nodes change via [*simulation*.nodes](#simulation_nodes). A force may perform necessary work during initialization, such as evaluating per-node parameters, to avoid repeatedly performing work during each application of the force.

    #### Centering

    The centering force translates nodes uniformly so that the mean position of all nodes (the center of mass if all nodes have equal weight) is at the given position ⟨[*x*](#center_x),[*y*](#center_y)⟩. This force modifies the positions of nodes on each application; it does not modify velocities, as doing so would typically cause the nodes to overshoot and oscillate around the desired center. This force helps keeps nodes in the center of the viewport, and unlike the [positioning force](#positioning), it does not distort their relative positions.
- name: format
  id: d3-format
  summary: Yet rounding error is not the only reason to customize number formatting
  description: "# d3-format\n\nEver noticed how sometimes JavaScript doesn’t display numbers the way you expect? Like, you tried to print tenths with a simple loop:\n\n``` javascript\nfor (let i = 0; i < 10; ++i) {\n  console.log(0.1 * i);\n}\n```\n\nAnd you got this:\n\n``` javascript\n0\n0.1\n0.2\n0.30000000000000004\n0.4\n0.5\n0.6000000000000001\n0.7000000000000001\n0.8\n0.9\n```\n\nWelcome to [binary floating point](https://en.wikipedia.org/wiki/Double-precision_floating-point_format)! ಠ_ಠ\n\nYet rounding error is not the only reason to customize number formatting. A table of numbers should be formatted consistently for comparison; above, 0.0 would be better than 0. Large numbers should have grouped digits (e.g., 42,000) or be in scientific or metric notation (4.2e+4, 42k). Currencies should have fixed precision ($3.50). Reported numerical results should be rounded to significant digits (4021 becomes 4000). Number formats should appropriate to the reader’s locale (42.000,00 or 42,000.00). The list goes on.\n\nFormatting numbers for human consumption is the purpose of d3-format, which is modeled after Python 3’s [format specification mini-language](https://docs.python.org/3/library/string.html#format-specification-mini-language) ([PEP 3101](https://www.python.org/dev/peps/pep-3101/)). Revisiting the example above:\n\n``` javascript\nconst f = d3.format(\".1f\");\nfor (let i = 0; i < 10; ++i) {\n  console.log(f(0.1 * i));\n}\n```\n\nNow you get this:\n\n``` javascript\n0.0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n```\n\nBut d3-format is much more than an alias for [number.toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)! A few more examples:\n\n``` javascript\nd3.format(\".0%\")(0.123);  // rounded percentage, \"12%\"\nd3.format(\"($.2f\")(-3.5); // localized fixed-point currency, \"(£3.50)\"\nd3.format(\"+20\")(42);     // space-filled and signed, \"                 +42\"\nd3.format(\".^20\")(42);    // dot-filled and centered, \".........42.........\"\nd3.format(\".2s\")(42e6);   // SI-prefix with two significant digits, \"42M\"\nd3.format(\"#x\")(48879);   // prefixed lowercase hexadecimal, \"0xbeef\"\nd3.format(\",.2r\")(4223);  // grouped thousands with two significant digits, \"4,200\"\n```\n\nSee [*locale*.format](#locale_format) for a detailed specification, and try running [d3.formatSpecifier](#formatSpecifier) on the above formats to decode their meaning.\n\n## Installing\n\nIf you use npm, `npm install d3-format`. You can also download the [latest release on GitHub](https://github.com/d3/d3-format/releases/latest). In modern browsers, you can import d3-format from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {format} from \"https://cdn.skypack.dev/d3-format@3\";\n\nconst f = format(\".2s\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-format’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-format@3\"></script>\n<script>\n\nvar f = d3.format(\".2s\");\n\n</script>\n```\n\nLocale files are published to npm and can be loaded using [d3.json](d3-fetch#json). For example, to set Russian as the default locale:\n\n``` javascript\nconst locale = await d3.json(\"https://cdn.jsdelivr.net/npm/d3-format@3/locale/ru-RU.json\");\nd3.formatDefaultLocale(locale);\nconst f = d3.format(\"$,\");\nconsole.log(f(1234.56)); // 1 234,56 руб.\n```\n\n[Try d3-format in your browser.](https://observablehq.com/@d3/d3-format)\n\n## API Reference\n\n###### d3.**format**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L4 \"Source\")\n\nAn alias for [*locale*.format](#locale_format) on the [default locale](#formatDefaultLocale).\n\n###### d3.**formatPrefix**(*specifier*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L5 \"Source\")\n\nAn alias for [*locale*.formatPrefix](#locale_formatPrefix) on the [default locale](#formatDefaultLocale).\n\n###### *locale*.**format**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js#L18 \"Source\")\n\nReturns a new format function for the given string *specifier*. The returned function takes a number as the only argument, and returns a string representing the formatted number. The general form of a specifier is:\n\n``` notranslate\n[​[fill]align][sign][symbol][0][width][,][.precision][~][type]\n```\n\nThe *fill* can be any character. The presence of a fill character is signaled by the *align* character following it, which must be one of the following:\n\n- `>` - Forces the field to be right-aligned within the available space. (Default behavior).\n- `<` - Forces the field to be left-aligned within the available space.\n- `^` - Forces the field to be centered within the available space.\n- `=` - like `>`, but with any sign and symbol to the left of any padding.\n\nThe *sign* can be:\n\n- `-` - nothing for zero or positive and a minus sign for negative. (Default behavior.)\n- `+` - a plus sign for zero or positive and a minus sign for negative.\n- `(` - nothing for zero or positive and parentheses for negative.\n- (space) - a space for zero or positive and a minus sign for negative.\n\nThe *symbol* can be:\n\n- `$` - apply currency symbols per the locale definition.\n- `#` - for binary, octal, or hexadecimal notation, prefix by `0b`, `0o`, or `0x`, respectively.\n\nThe *zero* (`0`) option enables zero-padding; this implicitly sets *fill* to `0` and *align* to `=`. The *width* defines the minimum field width; if not specified, then the width will be determined by the content. The *comma* (`,`) option enables the use of a group separator, such as a comma for thousands.\n\nDepending on the *type*, the *precision* either indicates the number of digits that follow the decimal point (types `f` and `%`), or the number of significant digits (types `​`, `e`, `g`, `r`, `s` and `p`). If the precision is not specified, it defaults to 6 for all types except `​` (none), which defaults to 12. Precision is ignored for integer formats (types `b`, `o`, `d`, `x`, and `X`) and character data (type `c`). See [precisionFixed](#precisionFixed) and [precisionRound](#precisionRound) for help picking an appropriate precision.\n\nThe `~` option trims insignificant trailing zeros across all format types. This is most commonly used in conjunction with types `r`, `e`, `s` and `%`. For example:\n\n``` javascript\nd3.format(\"s\")(1500);  // \"1.50000k\"\nd3.format(\"~s\")(1500); // \"1.5k\"\n```\n\nThe available *type* values are:\n\n- `e` - exponent notation.\n- `f` - fixed point notation.\n- `g` - either decimal or exponent notation, rounded to significant digits.\n- `r` - decimal notation, rounded to significant digits.\n- `s` - decimal notation with an [SI prefix](#locale_formatPrefix), rounded to significant digits.\n- `%` - multiply by 100, and then decimal notation with a percent sign.\n- `p` - multiply by 100, round to significant digits, and then decimal notation with a percent sign.\n- `b` - binary notation, rounded to integer.\n- `o` - octal notation, rounded to integer.\n- `d` - decimal notation, rounded to integer.\n- `x` - hexadecimal notation, using lower-case letters, rounded to integer.\n- `X` - hexadecimal notation, using upper-case letters, rounded to integer.\n- `c` - character data, for a string of text.\n\nThe type `​` (none) is also supported as shorthand for `~g` (with a default precision of 12 instead of 6), and the type `n` is shorthand for `,g`. For the `g`, `n` and `​` (none) types, decimal notation is used if the resulting string would have *precision* or fewer digits; otherwise, exponent notation is used. For example:\n\n``` javascript\nd3.format(\".2\")(42);  // \"42\"\nd3.format(\".2\")(4.2); // \"4.2\"\nd3.format(\".1\")(42);  // \"4e+1\"\nd3.format(\".1\")(4.2); // \"4\"\n```\n\n###### *locale*.**formatPrefix**(*specifier*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js#L127 \"Source\")\n\nEquivalent to [*locale*.format](#locale_format), except the returned function will convert values to the units of the appropriate [SI prefix](https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes) for the specified numeric reference *value* before formatting in fixed point notation. The following prefixes are supported:\n\n- `y` - yocto, 10⁻²⁴\n- `z` - zepto, 10⁻²¹\n- `a` - atto, 10⁻¹⁸\n- `f` - femto, 10⁻¹⁵\n- `p` - pico, 10⁻¹²\n- `n` - nano, 10⁻⁹\n- `µ` - micro, 10⁻⁶\n- `m` - milli, 10⁻³\n- `​` (none) - 10⁰\n- `k` - kilo, 10³\n- `M` - mega, 10⁶\n- `G` - giga, 10⁹\n- `T` - tera, 10¹²\n- `P` - peta, 10¹⁵\n- `E` - exa, 10¹⁸\n- `Z` - zetta, 10²¹\n- `Y` - yotta, 10²⁴\n\nUnlike [*locale*.format](#locale_format) with the `s` format type, this method returns a formatter with a consistent SI prefix, rather than computing the prefix dynamically for each number. In addition, the *precision* for the given *specifier* represents the number of digits past the decimal point (as with `f` fixed point notation), not the number of significant digits. For example:\n\n``` javascript\nconst f = d3.formatPrefix(\",.0\", 1e-6);\nf(0.00042); // \"420µ\"\nf(0.0042); // \"4,200µ\"\n```\n\nThis method is useful when formatting multiple numbers in the same units for easy comparison. See [precisionPrefix](#precisionPrefix) for help picking an appropriate precision, and [bl.ocks.org/9764126](http://bl.ocks.org/mbostock/9764126) for an example.\n\n###### d3.**formatSpecifier**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/formatSpecifier.js \"Source\")\n\nParses the specified *specifier*, returning an object with exposed fields that correspond to the [format specification mini-language](#locale_format) and a toString method that reconstructs the specifier. For example, `formatSpecifier(\"s\")` returns:\n\n``` javascript\nFormatSpecifier {\n  \"fill\": \" \",\n  \"align\": \">\",\n  \"sign\": \"-\",\n  \"symbol\": \"\",\n  \"zero\": false,\n  \"width\": undefined,\n  \"comma\": false,\n  \"precision\": undefined,\n  \"trim\": false,\n  \"type\": \"s\"\n}\n```\n\nThis method is useful for understanding how format specifiers are parsed and for deriving new specifiers. For example, you might compute an appropriate precision based on the numbers you want to format using [precisionFixed](#precisionFixed) and then create a new format:\n\n``` javascript\nconst s = d3.formatSpecifier(\"f\");\ns.precision = d3.precisionFixed(0.01);\nconst f = d3.format(s);\nf(42); // \"42.00\";\n```\n\n###### new d3.**FormatSpecifier**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/formatSpecifier.js \"Source\")\n\nGiven the specified *specifier* object, returning an object with exposed fields that correspond to the [format specification mini-language](#locale_format) and a toString method that reconstructs the specifier. For example, `new FormatSpecifier({type: \"s\"})` returns:\n\n``` javascript\nFormatSpecifier {\n  \"fill\": \" \",\n  \"align\": \">\",\n  \"sign\": \"-\",\n  \"symbol\": \"\",\n  \"zero\": false,\n  \"width\": undefined,\n  \"comma\": false,\n  \"precision\": undefined,\n  \"trim\": false,\n  \"type\": \"s\"\n}\n```\n\n###### d3.**precisionFixed**(*step*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionFixed.js \"Source\")\n\nReturns a suggested decimal precision for fixed point notation given the specified numeric *step* value. The *step* represents the minimum absolute difference between values that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1, 1.5, and 2, the *step* should be 0.5 and the suggested precision is 1:\n\n``` javascript\nconst p = d3.precisionFixed(0.5);\nconst f = d3.format(\".\" + p + \"f\");\nf(1);   // \"1.0\"\nf(1.5); // \"1.5\"\nf(2);   // \"2.0\"\n```\n\nWhereas for the numbers 1, 2 and 3, the *step* should be 1 and the suggested precision is 0:\n\n``` javascript\nconst p = d3.precisionFixed(1);\nconst f = d3.format(\".\" + p + \"f\");\nf(1); // \"1\"\nf(2); // \"2\"\nf(3); // \"3\"\n```\n\nNote: for the `%` format type, subtract two:\n\n``` javascript\nconst p = Math.max(0, d3.precisionFixed(0.05) - 2);\nconst f = d3.format(\".\" + p + \"%\");\nf(0.45); // \"45%\"\nf(0.50); // \"50%\"\nf(0.55); // \"55%\"\n```\n\n###### d3.**precisionPrefix**(*step*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionPrefix.js \"Source\")\n\nReturns a suggested decimal precision for use with [*locale*.formatPrefix](#locale_formatPrefix) given the specified numeric *step* and reference *value*. The *step* represents the minimum absolute difference between values that will be formatted, and *value* determines which SI prefix will be used. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1.1e6, 1.2e6, and 1.3e6, the *step* should be 1e5, the *value* could be 1.3e6, and the suggested precision is 1:\n\n``` javascript\nconst p = d3.precisionPrefix(1e5, 1.3e6);\nconst f = d3.formatPrefix(\".\" + p, 1.3e6);\nf(1.1e6); // \"1.1M\"\nf(1.2e6); // \"1.2M\"\nf(1.3e6); // \"1.3M\"\n```\n\n###### d3.**precisionRound**(*step*, *max*) [Source](https://github.com/d3/d3-format/blob/main/src/precisionRound.js \"Source\")\n\nReturns a suggested decimal precision for format types that round to significant digits given the specified numeric *step* and *max* values. The *step* represents the minimum absolute difference between values that will be formatted, and the *max* represents the largest absolute value that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 0.99, 1.0, and 1.01, the *step* should be 0.01, the *max* should be 1.01, and the suggested precision is 3:\n\n``` javascript\nconst p = d3.precisionRound(0.01, 1.01);\nconst f = d3.format(\".\" + p + \"r\");\nf(0.99); // \"0.990\"\nf(1.0);  // \"1.00\"\nf(1.01); // \"1.01\"\n```\n\nWhereas for the numbers 0.9, 1.0, and 1.1, the *step* should be 0.1, the *max* should be 1.1, and the suggested precision is 2:\n\n``` javascript\nconst p = d3.precisionRound(0.1, 1.1);\nconst f = d3.format(\".\" + p + \"r\");\nf(0.9); // \"0.90\"\nf(1.0); // \"1.0\"\nf(1.1); // \"1.1\"\n```\n\nNote: for the `e` format type, subtract one:\n\n``` javascript\nconst p = Math.max(0, d3.precisionRound(0.01, 1.01) - 1);\nconst f = d3.format(\".\" + p + \"e\");\nf(0.01); // \"1.00e-2\"\nf(1.01); // \"1.01e+0\"\n```\n\n### Locales\n\n###### d3.**formatLocale**(*definition*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js \"Source\")\n\nReturns a *locale* object for the specified *definition* with [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix) methods. The *definition* must include the following properties:\n\n- `decimal` - the decimal point (e.g., `\".\"`).\n- `thousands` - the group separator (e.g., `\",\"`).\n- `grouping` - the array of group sizes (e.g., `[3]`), cycled as needed.\n- `currency` - the currency prefix and suffix (e.g., `[\"$\", \"\"]`).\n- `numerals` - optional; an array of ten strings to replace the numerals 0-9.\n- `percent` - optional; the percent sign (defaults to `\"%\"`).\n- `minus` - optional; the minus sign (defaults to `\"−\"`).\n- `nan` - optional; the not-a-number value (defaults `\"NaN\"`).\n\nNote that the *thousands* property is a misnomer, as the grouping definition allows groups other than thousands.\n\n###### d3.**formatDefaultLocale**(*definition*) [Source](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js \"Source\")\n\nEquivalent to [d3.formatLocale](#formatLocale), except it also redefines [d3.format](#format) and [d3.formatPrefix](#formatPrefix) to the new locale’s [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-format/blob/main/locale/en-US.json).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-format](https://github.com/d3/d3-format)"
- name: foucautSinusoidal.alpha()
  id: d3-geo-projection#foucautsinusoidal_alpha
  summary: Relative weight of the cylindrical projection
  belongs_to: geo-projection
  description: |-
    ###### *foucautSinusoidal*.**alpha**(\[*alpha*\])

    Relative weight of the cylindrical projection. Defaults to 0.5.
- name: geo
  id: d3-geo
  summary: Map projections are sometimes implemented as point transformations
  description: "# d3-geo\n\nMap projections are sometimes implemented as point transformations. For instance, spherical Mercator:\n\n``` javascript\nfunction mercator(x, y) {\n  return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];\n}\n```\n\nThis is a reasonable *mathematical* approach if your geometry consists of continuous, infinite point sets. Yet computers do not have infinite memory, so we must instead work with discrete geometry such as polygons and polylines!\n\nDiscrete geometry makes the challenge of projecting from the sphere to the plane much harder. The edges of a spherical polygon are [geodesics](https://en.wikipedia.org/wiki/Geodesic) (segments of great circles), not straight lines. Projected to the plane, geodesics are curves in all map projections except [gnomonic](#geoGnomonic), and thus accurate projection requires interpolation along each arc. D3 uses [adaptive sampling](https://observablehq.com/@d3/adaptive-sampling) inspired by a popular [line simplification method](https://bost.ocks.org/mike/simplify/) to balance accuracy and performance.\n\nThe projection of polygons and polylines must also deal with the topological differences between the sphere and the plane. Some projections require cutting geometry that [crosses the antimeridian](https://observablehq.com/@d3/antimeridian-cutting), while others require [clipping geometry to a great circle](https://observablehq.com/@d3/orthographic-shading).\n\nSpherical polygons also require a [winding order convention](https://observablehq.com/@d3/winding-order) to determine which side of the polygon is the inside: the exterior ring for polygons smaller than a hemisphere must be clockwise, while the exterior ring for polygons [larger than a hemisphere](https://observablehq.com/@d3/oceans) must be anticlockwise. Interior rings representing holes must use the opposite winding order of their exterior ring. This winding order convention is also used by [TopoJSON](https://github.com/topojson) and [ESRI shapefiles](https://github.com/mbostock/shapefile); however, it is the **opposite** convention of GeoJSON’s [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6). (Also note that standard GeoJSON WGS84 uses planar equirectangular coordinates, not spherical coordinates, and thus may require [stitching](https://github.com/d3/d3-geo-projection/blob/main/README.md#geostitch) to remove antimeridian cuts.)\n\nD3’s approach affords great expressiveness: you can choose the right projection, and the right aspect, for your data. D3 supports a wide variety of common and [unusual map projections](d3-geo-projection). For more, see Part 2 of [The Toolmaker’s Guide](https://vimeo.com/106198518#t=20m0s).\n\nD3 uses [GeoJSON](http://geojson.org/geojson-spec.html) to represent geographic features in JavaScript. (See also [TopoJSON](https://github.com/mbostock/topojson), an extension of GeoJSON that is significantly more compact and encodes topology.) To convert shapefiles to GeoJSON, use [shp2json](https://github.com/mbostock/shapefile/blob/main/README.md#shp2json), part of the [shapefile package](https://github.com/mbostock/shapefile). See [Command-Line Cartography](https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c) for an introduction to d3-geo and related tools.\n\n## Installing\n\nIf you use npm, `npm install d3-geo`. You can also download the [latest release on GitHub](https://github.com/d3/d3-geo/releases/latest). For vanilla HTML in modern browsers, import d3-geo from jsDelivr:\n\n``` markup\n<script type=\"module\">\n\nimport {geoEqualEarth, geoPath} from \"https://cdn.jsdelivr.net/npm/d3-geo@3/+esm\";\n\nconst projection = geoEqualEarth();\nconst path = geoPath(projection);\n\n</script>\n```\n\nFor legacy environments, you can load d3-geo’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-geo@3\"></script>\n<script>\n\nconst projection = d3.geoEqualEarth();\nconst path = d3.geoPath(projection);\n\n</script>\n```\n\n[Try d3-geo in your browser.](https://observablehq.com/collection/@d3/d3-geo)\n\n## API Reference\n\n- [Paths](#paths)\n- [Projections](#projections) ([Azimuthal](#azimuthal-projections), [Composite](#composite-projections), [Conic](#conic-projections), [Cylindrical](#cylindrical-projections))\n- [Raw Projections](#raw-projections)\n- [Spherical Math](#spherical-math)\n- [Spherical Shapes](#spherical-shapes)\n- [Streams](#streams)\n- [Transforms](#transforms)\n- [Clipping](#clipping)\n\n### Paths\n\nThe geographic path generator, [d3.geoPath](#geoPath), is similar to the shape generators in [d3-shape](d3-shape): given a GeoJSON geometry or feature object, it generates an SVG path data string or [renders the path to a Canvas](https://observablehq.com/@d3/u-s-map-canvas). Canvas is recommended for dynamic or interactive projections to improve performance. Paths can be used with [projections](#projections) or [transforms](#transforms), or they can be used to render planar geometry directly to Canvas or SVG.\n\n###### d3.**geoPath**(\\[*projection*\\[, *context*\\]\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nCreates a new geographic path generator with the default settings. If *projection* is specified, sets the [current projection](#path_projection). If *context* is specified, sets the [current context](#path_context).\n\n###### *path*(*object*\\[, *arguments…*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nRenders the given *object*, which may be any GeoJSON feature or geometry object:\n\n- Point - a single position.\n- MultiPoint - an array of positions.\n- LineString - an array of positions forming a continuous line.\n- MultiLineString - an array of arrays of positions forming several lines.\n- Polygon - an array of arrays of positions forming a polygon (possibly with holes).\n- MultiPolygon - a multidimensional array of positions forming multiple polygons.\n- GeometryCollection - an array of geometry objects.\n- Feature - a feature containing one of the above geometry objects.\n- FeatureCollection - an array of feature objects.\n\nThe type *Sphere* is also supported, which is useful for rendering the outline of the globe; a sphere has no coordinates. Any additional *arguments* are passed along to the [pointRadius](#path_pointRadius) accessor.\n\nTo display multiple features, combine them into a feature collection:\n\n``` javascript\nsvg.append(\"path\")\n    .datum({type: \"FeatureCollection\", features: features})\n    .attr(\"d\", d3.geoPath());\n```\n\nOr use multiple path elements:\n\n``` javascript\nsvg.selectAll(\"path\")\n  .data(features)\n  .enter().append(\"path\")\n    .attr(\"d\", d3.geoPath());\n```\n\nSeparate path elements are typically slower than a single path element. However, distinct path elements are useful for styling and interaction (e.g., click or mouseover). Canvas rendering (see [*path*.context](#path_context)) is typically faster than SVG, but requires more effort to implement styling and interaction.\n\n###### *path*.**area**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/area.js \"Source\")\n\nReturns the projected planar area (typically in square pixels) for the specified GeoJSON *object*. Point, MultiPoint, LineString and MultiLineString geometries have zero area. For Polygon and MultiPolygon geometries, this method first computes the area of the exterior ring, and then subtracts the area of any interior holes. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoArea](#geoArea).\n\n###### *path*.**bounds**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/bounds.js \"Source\")\n\nReturns the projected planar bounding box (typically in pixels) for the specified GeoJSON *object*. The bounding box is represented by a two-dimensional array: \\[\\[*x₀*, *y₀*\\], \\[*x₁*, *y₁*\\]\\], where *x₀* is the minimum *x*-coordinate, *y₀* is the minimum *y*-coordinate, *x₁* is maximum *x*-coordinate, and *y₁* is the maximum *y*-coordinate. This is handy for, say, zooming in to a particular feature. (Note that in projected planar coordinates, the minimum latitude is typically the maximum *y*-value, and the maximum latitude is typically the minimum *y*-value.) This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoBounds](#geoBounds).\n\n###### *path*.**centroid**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/centroid.js \"Source\")\n\nReturns the projected planar centroid (typically in pixels) for the specified GeoJSON *object*. This is handy for, say, labeling state or county boundaries, or displaying a symbol map. For example, a [noncontiguous cartogram](https://observablehq.com/@d3/non-contiguous-cartogram) might scale each state around its centroid. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoCentroid](#geoCentroid).\n\n###### *path*.**digits**(\\[*digits*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nIf *digits* is specified (as a non-negative number), sets the number of fractional digits for coordinates generated in SVG path strings. If *projection* is not specified, returns the current number of digits, which defaults to 3.\n\n###### *path*.**measure**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/measure.js \"Source\")\n\nReturns the projected planar length (typically in pixels) for the specified GeoJSON *object*. Point and MultiPoint geometries have zero length. For Polygon and MultiPolygon geometries, this method computes the summed length of all rings. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoLength](#geoLength).\n\n###### *path*.**projection**(\\[*projection*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nIf a *projection* is specified, sets the current projection to the specified projection. If *projection* is not specified, returns the current projection, which defaults to null. The null projection represents the identity transformation: the input geometry is not projected and is instead rendered directly in raw coordinates. This can be useful for fast rendering of [pre-projected geometry](https://bl.ocks.org/mbostock/5557726), or for fast rendering of the equirectangular projection.\n\nThe given *projection* is typically one of D3’s built-in [geographic projections](#projections); however, any object that exposes a [*projection*.stream](#projection_stream) function can be used, enabling the use of [custom projections](https://bl.ocks.org/mbostock/5663666). See D3’s [transforms](#transforms) for more examples of arbitrary geometric transformations.\n\n###### *path*.**context**(\\[*context*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nIf *context* is specified, sets the current render context and returns the path generator. If the *context* is null, then the [path generator](#_path) will return an SVG path string; if the context is non-null, the path generator will instead call methods on the specified context to render geometry. The context must implement the following subset of the [CanvasRenderingContext2D API](https://www.w3.org/TR/2dcontext/#canvasrenderingcontext2d):\n\n- *context*.beginPath()\n- *context*.moveTo(*x*, *y*)\n- *context*.lineTo(*x*, *y*)\n- *context*.arc(*x*, *y*, *radius*, *startAngle*, *endAngle*)\n- *context*.closePath()\n\nIf a *context* is not specified, returns the current render context which defaults to null.\n\n###### *path*.**pointRadius**(\\[*radius*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js \"Source\")\n\nIf *radius* is specified, sets the radius used to display Point and MultiPoint geometries to the specified number. If *radius* is not specified, returns the current radius accessor, which defaults to 4.5. While the radius is commonly specified as a number constant, it may also be specified as a function which is computed per feature, being passed the any arguments passed to the [path generator](#_path). For example, if your GeoJSON data has additional properties, you might access those properties inside the radius function to vary the point size; alternatively, you could [d3.symbol](d3-shape#symbols) and a [projection](#geoProjection) for greater flexibility.\n\n### Projections\n\nProjections transform spherical polygonal geometry to planar polygonal geometry. D3 provides implementations of several classes of standard projections:\n\n- [Azimuthal](#azimuthal-projections)\n- [Composite](#composite-projections)\n- [Conic](#conic-projections)\n- [Cylindrical](#cylindrical-projections)\n\nFor many more projections, see [d3-geo-projection](d3-geo-projection). You can implement [custom projections](#raw-projections) using [d3.geoProjection](#geoProjection) or [d3.geoProjectionMutator](#geoProjectionMutator).\n\n###### *projection*(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nReturns a new array \\[*x*, *y*\\] (typically in pixels) representing the projected point of the given *point*. The point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees. May return null if the specified *point* has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n\n###### *projection*.**invert**(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nReturns a new array \\[*longitude*, *latitude*\\] in degrees representing the unprojected point of the given projected *point*. The point must be specified as a two-element array \\[*x*, *y*\\] (typically in pixels). May return null if the specified *point* has no defined projected position, such as when the point is outside the clipping bounds of the projection.\n\nThis method is only defined on invertible projections.\n\n###### *projection*.**stream**(*stream*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nReturns a [projection stream](#streams) for the specified output *stream*. Any input geometry is projected before being streamed to the output stream. A typical projection involves several geometry transformations: the input geometry is first converted to radians, rotated on three axes, clipped to the small circle or cut along the antimeridian, and lastly projected to the plane with adaptive resampling, scale and translation.\n\n###### *projection*.**preclip**(\\[*preclip*\\])\n\nIf *preclip* is specified, sets the projection’s spherical clipping to the specified function and returns the projection. If *preclip* is not specified, returns the current spherical clipping function (see [preclip](#preclip)).\n\n###### *projection*.**postclip**(\\[*postclip*\\])\n\nIf *postclip* is specified, sets the projection’s cartesian clipping to the specified function and returns the projection. If *postclip* is not specified, returns the current cartesian clipping function (see [postclip](#postclip)).\n\n###### *projection*.**clipAngle**(\\[*angle*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *angle* is specified, sets the projection’s clipping circle radius to the specified angle in degrees and returns the projection. If *angle* is null, switches to [antimeridian cutting](https://observablehq.com/@d3/antimeridian-cutting) rather than small-circle clipping. If *angle* is not specified, returns the current clip angle which defaults to null. Small-circle clipping is independent of viewport clipping via [*projection*.clipExtent](#projection_clipExtent).\n\nSee also [*projection*.preclip](#projection_preclip), [d3.geoClipAntimeridian](#geoClipAntimeridian), [d3.geoClipCircle](#geoClipCircle).\n\n###### *projection*.**clipExtent**(\\[*extent*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *extent* is specified, sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection. The *extent* bounds are specified as an array \\[\\[*x₀*, *y₀*\\], \\[*x₁*, *y₁*\\]\\], where *x₀* is the left-side of the viewport, *y₀* is the top, *x₁* is the right and *y₁* is the bottom. If *extent* is null, no viewport clipping is performed. If *extent* is not specified, returns the current viewport clip extent which defaults to null. Viewport clipping is independent of small-circle clipping via [*projection*.clipAngle](#projection_clipAngle).\n\nSee also [*projection*.postclip](#projection_postclip), [d3.geoClipRectangle](#geoClipRectangle).\n\n###### *projection*.**scale**(\\[*scale*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *scale* is specified, sets the projection’s scale factor to the specified value and returns the projection. If *scale* is not specified, returns the current scale factor; the default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.\n\n###### *projection*.**translate**(\\[*translate*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *translate* is specified, sets the projection’s translation offset to the specified two-element array \\[*t_(x)*, *t_(y)*\\] and returns the projection. If *translate* is not specified, returns the current translation offset which defaults to \\[480, 250\\]. The translation offset determines the pixel coordinates of the projection’s [center](#projection_center). The default translation offset places ⟨0°,0°⟩ at the center of a 960×500 area.\n\n###### *projection*.**center**(\\[*center*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *center* is specified, sets the projection’s center to the specified *center*, a two-element array of \\[*longitude*, *latitude*\\] in degrees and returns the projection. If *center* is not specified, returns the current center, which defaults to ⟨0°,0°⟩.\n\n###### *projection*.**angle**(\\[*angle*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *angle* is specified, sets the projection’s post-projection planar rotation angle to the specified *angle* in degrees and returns the projection. If *angle* is not specified, returns the projection’s current angle, which defaults to 0°. Note that it may be faster to rotate during rendering (e.g., using [*context*.rotate](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate)) rather than during projection.\n\n###### *projection*.**reflectX**(\\[*reflect*\\])\n\nIf *reflect* is specified, sets whether or not the *x*-dimension is reflected (negated) in the output. If *reflect* is not specified, returns true if *x*-reflection is enabled, which defaults to false. This can be useful to display sky and astronomical data with the orb seen from below: right ascension (eastern direction) will point to the left when North is pointing up.\n\n###### *projection*.**reflectY**(\\[*reflect*\\])\n\nIf *reflect* is specified, sets whether or not the *y*-dimension is reflected (negated) in the output. If *reflect* is not specified, returns true if *y*-reflection is enabled, which defaults to false. This is especially useful for transforming from standard [spatial reference systems](https://en.wikipedia.org/wiki/Spatial_reference_system), which treat positive *y* as pointing up, to display coordinate systems such as Canvas and SVG, which treat positive *y* as pointing down.\n\n###### *projection*.**rotate**(\\[*angles*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *rotation* is specified, sets the projection’s [three-axis spherical rotation](https://observablehq.com/@d3/three-axis-rotation) to the specified *angles*, which must be a two- or three-element array of numbers \\[*lambda*, *phi*, *gamma*\\] specifying the rotation angles in degrees about [each spherical axis](https://observablehq.com/@d3/three-axis-rotation). (These correspond to [yaw, pitch and roll](https://en.wikipedia.org/wiki/Aircraft_principal_axes).) If the rotation angle *gamma* is omitted, it defaults to 0. See also [d3.geoRotation](#geoRotation). If *rotation* is not specified, returns the current rotation which defaults \\[0, 0, 0\\].\n\n###### *projection*.**precision**(\\[*precision*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nIf *precision* is specified, sets the threshold for the projection’s [adaptive resampling](https://observablehq.com/@d3/adaptive-sampling) to the specified value in pixels and returns the projection. This value corresponds to the [Douglas–Peucker](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm) distance. If *precision* is not specified, returns the projection’s current resampling precision which defaults to √0.5 ≅ 0.70710…\n\n###### *projection*.**fitExtent**(*extent*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nSets the projection’s [scale](#projection_scale) and [translate](#projection_translate) to fit the specified GeoJSON *object* in the center of the given *extent*. The extent is specified as an array \\[\\[x₀, y₀\\], \\[x₁, y₁\\]\\], where x₀ is the left side of the bounding box, y₀ is the top, x₁ is the right and y₁ is the bottom. Returns the projection.\n\nFor example, to scale and translate the [New Jersey State Plane projection](https://bl.ocks.org/mbostock/5126418) to fit a GeoJSON object *nj* in the center of a 960×500 bounding box with 20 pixels of padding on each side:\n\n``` javascript\nvar projection = d3.geoTransverseMercator()\n    .rotate([74 + 30 / 60, -38 - 50 / 60])\n    .fitExtent([[20, 20], [940, 480]], nj);\n```\n\nAny [clip extent](#projection_clipExtent) is ignored when determining the new scale and translate. The [precision](#projection_precision) used to compute the bounding box of the given *object* is computed at an effective scale of 150.\n\n###### *projection*.**fitSize**(*size*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nA convenience method for [*projection*.fitExtent](#projection_fitExtent) where the top-left corner of the extent is \\[0, 0\\]. The following two statements are equivalent:\n\n``` javascript\nprojection.fitExtent([[0, 0], [width, height]], object);\nprojection.fitSize([width, height], object);\n```\n\n###### *projection*.**fitWidth**(*width*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nA convenience method for [*projection*.fitSize](#projection_fitSize) where the height is automatically chosen from the aspect ratio of *object* and the given constraint on *width*.\n\n###### *projection*.**fitHeight**(*height*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nA convenience method for [*projection*.fitSize](#projection_fitSize) where the width is automatically chosen from the aspect ratio of *object* and the given constraint on *height*.\n\n#### Azimuthal Projections\n\nAzimuthal projections project the sphere directly onto a plane.\n\n###### d3.**geoAzimuthalEqualArea**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/azimuthalEqualArea.js \"Source\") d3.**geoAzimuthalEqualAreaRaw**\n\nThe azimuthal equal-area projection.\n\n###### d3.**geoAzimuthalEquidistant**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/azimuthalEquidistant.js \"Source\") d3.**geoAzimuthalEquidistantRaw**\n\nThe azimuthal equidistant projection.\n\n###### d3.**geoGnomonic**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/gnomonic.js \"Source\") d3.**geoGnomonicRaw**\n\nThe gnomonic projection.\n\n###### d3.**geoOrthographic**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/orthographic.js \"Source\") d3.**geoOrthographicRaw**\n\nThe orthographic projection.\n\n###### d3.**geoStereographic**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/stereographic.js \"Source\") d3.**geoStereographicRaw**\n\nThe stereographic projection.\n\n#### Equal-Earth\n\n###### d3.**geoEqualEarth**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/equalEarth.js \"Source\") d3.**geoEqualEarthRaw**\n\nThe Equal Earth projection, by Bojan Šavrič *et al.*, 2018.\n\n#### Composite Projections\n\nComposite consist of several projections that are composed into a single display. The constituent projections have fixed clip, center and rotation, and thus composite projections do not support [*projection*.center](#projection_center), [*projection*.rotate](#projection_rotate), [*projection*.clipAngle](#projection_clipAngle), or [*projection*.clipExtent](#projection_clipExtent).\n\n###### d3.**geoAlbersUsa**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albersUsa.js \"Source\")\n\nThis is a U.S.-centric composite projection of three [d3.geoConicEqualArea](#geoConicEqualArea) projections: [d3.geoAlbers](#geoAlbers) is used for the lower forty-eight states, and separate conic equal-area projections are used for Alaska and Hawaii. Note that the scale for Alaska is diminished: it is projected at 0.35× its true relative area. This diagram by Philippe Rivière illustrates how this projection uses two rectangular insets for Alaska and Hawaii:\n\nSee [Albers USA with Territories](https://www.npmjs.com/package/geo-albers-usa-territories) for an extension to all US territories, and [d3-composite-projections](http://geoexamples.com/d3-composite-projections/) for more examples.\n\n#### Conic Projections\n\nConic projections project the sphere onto a cone, and then unroll the cone onto the plane. Conic projections have [two standard parallels](#conic_parallels).\n\n###### *conic*.**parallels**(\\[*parallels*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conic.js \"Source\")\n\nThe [two standard parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map layout in conic projections.\n\n###### d3.**geoAlbers**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albers.js \"Source\")\n\nThe Albers’ equal area-conic projection. This is a U.S.-centric configuration of [d3.geoConicEqualArea](#geoConicEqualArea).\n\n###### d3.**geoConicConformal**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicConformal.js \"Source\") d3.**geoConicConformalRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicConformal.js \"Source\")\n\nThe conic conformal projection. The parallels default to \\[30°, 30°\\] resulting in flat top. See also [*conic*.parallels](#conic_parallels).\n\n###### d3.**geoConicEqualArea**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEqualArea.js \"Source\") d3.**geoConicEqualAreaRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEqualArea.js \"Source\")\n\nThe Albers’ equal-area conic projection. See also [*conic*.parallels](#conic_parallels).\n\n###### d3.**geoConicEquidistant**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEquidistant.js \"Source\") d3.**geoConicEquidistantRaw**(*phi0*, *phi1*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEquidistant.js \"Source\")\n\nThe conic equidistant projection. See also [*conic*.parallels](#conic_parallels).\n\n#### Cylindrical Projections\n\nCylindrical projections project the sphere onto a containing cylinder, and then unroll the cylinder onto the plane. [Pseudocylindrical projections](https://web.archive.org/web/20150928042327/http://www.progonos.com/furuti/MapProj/Normal/ProjPCyl/projPCyl.html) are a generalization of cylindrical projections.\n\n###### d3.**geoEquirectangular**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/equirectangular.js \"Source\") d3.**geoEquirectangularRaw**\n\nThe equirectangular (plate carrée) projection.\n\n###### d3.**geoMercator**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/mercator.js \"Source\") d3.**geoMercatorRaw**\n\nThe spherical Mercator projection. Defines a default [*projection*.clipExtent](#projection_clipExtent) such that the world is projected to a square, clipped to approximately ±85° latitude.\n\n###### d3.**geoTransverseMercator**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/transverseMercator.js \"Source\") d3.**geoTransverseMercatorRaw**\n\nThe transverse spherical Mercator projection. Defines a default [*projection*.clipExtent](#projection_clipExtent) such that the world is projected to a square, clipped to approximately ±85° latitude.\n\n###### d3.**geoNaturalEarth1**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/naturalEarth1.js \"Source\") d3.**geoNaturalEarth1Raw**\n\nThe [Natural Earth projection](http://www.shadedrelief.com/NE_proj/) is a pseudocylindrical projection designed by Tom Patterson. It is neither conformal nor equal-area, but appealing to the eye for small-scale maps of the whole world.\n\n### Raw Projections\n\nRaw projections are point transformation functions that are used to implement custom projections; they typically passed to [d3.geoProjection](#geoProjection) or [d3.geoProjectionMutator](#geoProjectionMutator). They are exposed here to facilitate the derivation of related projections. Raw projections take spherical coordinates \\[*lambda*, *phi*\\] in radians (not degrees!) and return a point \\[*x*, *y*\\], typically in the unit square centered around the origin.\n\n###### *project*(*lambda*, *phi*)\n\nProjects the specified point \\[*lambda*, *phi*\\] in radians, returning a new point \\[*x*, *y*\\] in unitless coordinates.\n\n###### *project*.**invert**(*x*, *y*)\n\nThe inverse of [*project*](#_project).\n\n###### d3.**geoProjection**(*project*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nConstructs a new projection from the specified [raw projection](#_project), *project*. The *project* function takes the *longitude* and *latitude* of a given point in [radians](http://mathworld.wolfram.com/Radian.html), often referred to as *lambda* (λ) and *phi* (φ), and returns a two-element array \\[*x*, *y*\\] representing its unit projection. The *project* function does not need to scale or translate the point, as these are applied automatically by [*projection*.scale](#projection_scale), [*projection*.translate](#projection_translate), and [*projection*.center](#projection_center). Likewise, the *project* function does not need to perform any spherical rotation, as [*projection*.rotate](#projection_rotate) is applied prior to projection.\n\nFor example, a spherical Mercator projection can be implemented as:\n\n``` javascript\nvar mercator = d3.geoProjection(function(x, y) {\n  return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];\n});\n```\n\nIf the *project* function exposes an *invert* method, the returned projection will also expose [*projection*.invert](#projection_invert).\n\n###### d3.**geoProjectionMutator**(*factory*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js \"Source\")\n\nConstructs a new projection from the specified [raw projection](#_project) *factory* and returns a *mutate* function to call whenever the raw projection changes. The *factory* must return a raw projection. The returned *mutate* function returns the wrapped projection. For example, a conic projection typically has two configurable parallels. A suitable *factory* function, such as [d3.geoConicEqualAreaRaw](#geoConicEqualAreaRaw), would have the form:\n\n``` javascript\n// y0 and y1 represent two parallels\nfunction conicFactory(phi0, phi1) {\n  return function conicRaw(lambda, phi) {\n    return […, …];\n  };\n}\n```\n\nUsing d3.geoProjectionMutator, you can implement a standard projection that allows the parallels to be changed, reassigning the raw projection used internally by [d3.geoProjection](#geoProjection):\n\n``` javascript\nfunction conicCustom() {\n  var phi0 = 29.5,\n      phi1 = 45.5,\n      mutate = d3.geoProjectionMutator(conicFactory),\n      projection = mutate(phi0, phi1);\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(phi0 = +_[0], phi1 = +_[1]) : [phi0, phi1];\n  };\n\n  return projection;\n}\n```\n\nWhen creating a mutable projection, the *mutate* function is typically not exposed.\n\n### Spherical Math\n\n###### d3.**geoArea**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/area.js \"Source\")\n\nReturns the spherical area of the specified GeoJSON *object* in [steradians](https://en.wikipedia.org/wiki/Steradian). This is the spherical equivalent of [*path*.area](#path_area).\n\n###### d3.**geoBounds**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/bounds.js \"Source\")\n\nReturns the [spherical bounding box](https://www.jasondavies.com/maps/bounds/) for the specified GeoJSON *object*. The bounding box is represented by a two-dimensional array: \\[\\[*left*, *bottom*\\], \\[*right*, *top*\\]\\], where *left* is the minimum longitude, *bottom* is the minimum latitude, *right* is maximum longitude, and *top* is the maximum latitude. All coordinates are given in degrees. (Note that in projected planar coordinates, the minimum latitude is typically the maximum *y*-value, and the maximum latitude is typically the minimum *y*-value.) This is the spherical equivalent of [*path*.bounds](#path_bounds).\n\n###### d3.**geoCentroid**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/centroid.js \"Source\")\n\nReturns the spherical centroid of the specified GeoJSON *object*. This is the spherical equivalent of [*path*.centroid](#path_centroid).\n\n###### d3.**geoDistance**(*a*, *b*) [Source](https://github.com/d3/d3-geo/blob/main/src/distance.js \"Source\")\n\nReturns the great-arc distance in [radians](http://mathworld.wolfram.com/Radian.html) between the two points *a* and *b*. Each point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees. This is the spherical equivalent of [*path*.measure](#path_measure) given a LineString of two points.\n\n###### d3.**geoLength**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/length.js \"Source\")\n\nReturns the great-arc length of the specified GeoJSON *object* in [radians](http://mathworld.wolfram.com/Radian.html). For polygons, returns the perimeter of the exterior ring plus that of any interior rings. This is the spherical equivalent of [*path*.measure](#path_measure).\n\n###### d3.**geoInterpolate**(*a*, *b*) [Source](https://github.com/d3/d3-geo/blob/main/src/interpolate.js \"Source\")\n\nReturns an interpolator function given two points *a* and *b*. Each point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees. The returned interpolator function takes a single argument *t*, where *t* is a number ranging from 0 to 1; a value of 0 returns the point *a*, while a value of 1 returns the point *b*. Intermediate values interpolate from *a* to *b* along the great arc that passes through both *a* and *b*. If *a* and *b* are antipodes, an arbitrary great arc is chosen.\n\n###### d3.**geoContains**(*object*, *point*) [Source](https://github.com/d3/d3-geo/blob/main/src/contains.js \"Source\")\n\nReturns true if and only if the specified GeoJSON *object* contains the specified *point*, or false if the *object* does not contain the *point*. The point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees. For Point and MultiPoint geometries, an exact test is used; for a Sphere, true is always returned; for other geometries, an epsilon threshold is applied.\n\n###### d3.**geoRotation**(*angles*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js \"Source\")\n\nReturns a [rotation function](#_rotation) for the given *angles*, which must be a two- or three-element array of numbers \\[*lambda*, *phi*, *gamma*\\] specifying the rotation angles in degrees about [each spherical axis](https://observablehq.com/@d3/three-axis-rotation). (These correspond to [yaw, pitch and roll](https://en.wikipedia.org/wiki/Aircraft_principal_axes).) If the rotation angle *gamma* is omitted, it defaults to 0. See also [*projection*.rotate](#projection_rotate).\n\n###### *rotation*(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js \"Source\")\n\nReturns a new array \\[*longitude*, *latitude*\\] in degrees representing the rotated point of the given *point*. The point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees.\n\n###### *rotation*.**invert**(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js \"Source\")\n\nReturns a new array \\[*longitude*, *latitude*\\] in degrees representing the point of the given rotated *point*; the inverse of [*rotation*](#_rotation). The point must be specified as a two-element array \\[*longitude*, *latitude*\\] in degrees.\n\n### Spherical Shapes\n\nTo generate a [great arc](https://en.wikipedia.org/wiki/Great-circle_distance) (a segment of a great circle), simply pass a GeoJSON LineString geometry object to a [d3.geoPath](#geoPath). D3’s projections use great-arc interpolation for intermediate points, so there’s no need for a great arc shape generator.\n\n###### d3.**geoCircle**() [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js \"Source\")\n\nReturns a new circle generator.\n\n###### *circle*(*arguments…*) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js \"Source\")\n\nReturns a new GeoJSON geometry object of type “Polygon” approximating a circle on the surface of a sphere, with the current [center](#circle_center), [radius](#circle_radius) and [precision](#circle_precision). Any *arguments* are passed to the accessors.\n\n###### *circle*.**center**(\\[*center*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js \"Source\")\n\nIf *center* is specified, sets the circle center to the specified point \\[*longitude*, *latitude*\\] in degrees, and returns this circle generator. The center may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *center* is not specified, returns the current center accessor, which defaults to:\n\n``` javascript\nfunction center() {\n  return [0, 0];\n}\n```\n\n###### *circle*.**radius**(\\[*radius*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js \"Source\")\n\nIf *radius* is specified, sets the circle radius to the specified angle in degrees, and returns this circle generator. The radius may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *radius* is not specified, returns the current radius accessor, which defaults to:\n\n``` javascript\nfunction radius() {\n  return 90;\n}\n```\n\n###### *circle*.**precision**(\\[*angle*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/circle.js \"Source\")\n\nIf *precision* is specified, sets the circle precision to the specified angle in degrees, and returns this circle generator. The precision may also be specified as a function; this function will be invoked whenever a circle is [generated](#_circle), being passed any arguments passed to the circle generator. If *precision* is not specified, returns the current precision accessor, which defaults to:\n\n``` javascript\nfunction precision() {\n  return 6;\n}\n```\n\nSmall circles do not follow great arcs and thus the generated polygon is only an approximation. Specifying a smaller precision angle improves the accuracy of the approximate polygon, but also increase the cost to generate and render it.\n\n###### d3.**geoGraticule**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nConstructs a geometry generator for creating graticules: a uniform grid of [meridians](https://en.wikipedia.org/wiki/Meridian_(geography)) and [parallels](https://en.wikipedia.org/wiki/Circle_of_latitude) for showing projection distortion. The default graticule has meridians and parallels every 10° between ±80° latitude; for the polar regions, there are meridians every 90°.\n\n###### *graticule*() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nReturns a GeoJSON MultiLineString geometry object representing all meridians and parallels for this graticule.\n\n###### *graticule*.**lines**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nReturns an array of GeoJSON LineString geometry objects, one for each meridian or parallel for this graticule.\n\n###### *graticule*.**outline**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nReturns a GeoJSON Polygon geometry object representing the outline of this graticule, i.e. along the meridians and parallels defining its extent.\n\n###### *graticule*.**extent**(\\[*extent*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *extent* is specified, sets the major and minor extents of this graticule. If *extent* is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.\n\n###### *graticule*.**extentMajor**(\\[*extent*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *extent* is specified, sets the major extent of this graticule. If *extent* is not specified, returns the current major extent, which defaults to ⟨⟨-180°, -90° + ε⟩, ⟨180°, 90° - ε⟩⟩.\n\n###### *graticule*.**extentMinor**(\\[*extent*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *extent* is specified, sets the minor extent of this graticule. If *extent* is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.\n\n###### *graticule*.**step**(\\[*step*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *step* is specified, sets the major and minor step for this graticule. If *step* is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.\n\n###### *graticule*.**stepMajor**(\\[*step*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *step* is specified, sets the major step for this graticule. If *step* is not specified, returns the current major step, which defaults to ⟨90°, 360°⟩.\n\n###### *graticule*.**stepMinor**(\\[*step*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *step* is specified, sets the minor step for this graticule. If *step* is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.\n\n###### *graticule*.**precision**(\\[*angle*\\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nIf *precision* is specified, sets the precision for this graticule, in degrees. If *precision* is not specified, returns the current precision, which defaults to 2.5°.\n\n###### d3.**geoGraticule10**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js \"Source\")\n\nA convenience method for directly generating the default 10° global graticule as a GeoJSON MultiLineString geometry object. Equivalent to:\n\n``` javascript\nfunction geoGraticule10() {\n  return d3.geoGraticule()();\n}\n```\n\n### Streams\n\nD3 transforms geometry using a sequence of function calls, rather than materializing intermediate representations, to minimize overhead. Streams must implement several methods to receive input geometry. Streams are inherently stateful; the meaning of a [point](#point) depends on whether the point is inside of a [line](#lineStart), and likewise a line is distinguished from a ring by a [polygon](#polygonStart). Despite the name “stream”, these method calls are currently synchronous.\n\n###### d3.**geoStream**(*object*, *stream*) [Source](https://github.com/d3/d3-geo/blob/main/src/stream.js \"Source\")\n\nStreams the specified [GeoJSON](http://geojson.org) *object* to the specified [projection *stream*](#projection-streams). While both features and geometry objects are supported as input, the stream interface only describes the geometry, and thus additional feature properties are not visible to streams.\n\n###### *stream*.**point**(*x*, *y*\\[, *z*\\])\n\nIndicates a point with the specified coordinates *x* and *y* (and optionally *z*). The coordinate system is unspecified and implementation-dependent; for example, [projection streams](d3-geo-projection) require spherical coordinates in degrees as input. Outside the context of a polygon or line, a point indicates a point geometry object ([Point](http://www.geojson.org/geojson-spec.html#point) or [MultiPoint](http://www.geojson.org/geojson-spec.html#multipoint)). Within a line or polygon ring, the point indicates a control point.\n\n###### *stream*.**lineStart**()\n\nIndicates the start of a line or ring. Within a polygon, indicates the start of a ring. The first ring of a polygon is the exterior ring, and is typically clockwise. Any subsequent rings indicate holes in the polygon, and are typically counterclockwise.\n\n###### *stream*.**lineEnd**()\n\nIndicates the end of a line or ring. Within a polygon, indicates the end of a ring. Unlike GeoJSON, the redundant closing coordinate of a ring is *not* indicated via [point](#point), and instead is implied via lineEnd within a polygon. Thus, the given polygon input:\n\n``` javascript\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]\n  ]\n}\n```\n\nWill produce the following series of method calls on the stream:\n\n``` javascript\nstream.polygonStart();\nstream.lineStart();\nstream.point(0, 0);\nstream.point(0, 1);\nstream.point(1, 1);\nstream.point(1, 0);\nstream.lineEnd();\nstream.polygonEnd();\n```\n\n###### *stream*.**polygonStart**()\n\nIndicates the start of a polygon. The first line of a polygon indicates the exterior ring, and any subsequent lines indicate interior holes.\n\n###### *stream*.**polygonEnd**()\n\nIndicates the end of a polygon.\n\n###### *stream*.**sphere**()\n\nIndicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩).\n\n### Transforms\n\nTransforms are a generalization of projections. Transform implement [*projection*.stream](#projection_stream) and can be passed to [*path*.projection](#path_projection). However, they only implement a subset of the other projection methods, and represent arbitrary geometric transformations rather than projections from spherical to planar coordinates.\n\n###### d3.**geoTransform**(*methods*) [Source](https://github.com/d3/d3-geo/blob/main/src/transform.js \"Source\")\n\nDefines an arbitrary transform using the methods defined on the specified *methods* object. Any undefined methods will use pass-through methods that propagate inputs to the output stream. For example, to reflect the *y*-dimension (see also [*identity*.reflectY](#identity_reflectY)):\n\n``` javascript\nvar reflectY = d3.geoTransform({\n  point: function(x, y) {\n    this.stream.point(x, -y);\n  }\n});\n```\n\nOr to define an affine matrix transformation:\n\n``` javascript\nfunction matrix(a, b, c, d, tx, ty) {\n  return d3.geoTransform({\n    point: function(x, y) {\n      this.stream.point(a * x + b * y + tx, c * x + d * y + ty);\n    }\n  });\n}\n```\n\n###### d3.**geoIdentity**() [Source](https://github.com/d3/d3-geo/blob/main/src/projection/identity.js \"Source\")\n\nThe identity transform can be used to scale, translate and clip planar geometry. It implements [*projection*.scale](#projection_scale), [*projection*.translate](#projection_translate), [*projection*.fitExtent](#projection_fitExtent), [*projection*.fitSize](#projection_fitSize), [*projection*.fitWidth](#projection_fitWidth), [*projection*.fitHeight](#projection_fitHeight), [*projection*.clipExtent](#projection_clipExtent), [*projection*.angle](#projection_angle), [*projection*.reflectX](#projection_reflectX) and [*projection*.reflectY](#projection_reflectY).\n\n### Clipping\n\nProjections perform cutting or clipping of geometries in two stages.\n\n###### *preclip*(*stream*)\n\nPre-clipping occurs in geographic coordinates. Cutting along the antimeridian line, or clipping along a small circle are the most common strategies.\n\nSee [*projection*.preclip](#projection_preclip).\n\n###### *postclip*(*stream*)\n\nPost-clipping occurs on the plane, when a projection is bounded to a certain extent such as a rectangle.\n\nSee [*projection*.postclip](#projection_postclip).\n\nClipping functions are implemented as transformations of a [projection stream](#streams). Pre-clipping operates on spherical coordinates, in radians. Post-clipping operates on planar coordinates, in pixels.\n\n###### d3.**geoClipAntimeridian**\n\nA clipping function which transforms a stream such that geometries (lines or polygons) that cross the antimeridian line are cut in two, one on each side. Typically used for pre-clipping.\n\n###### d3.**geoClipCircle**(*angle*)\n\nGenerates a clipping function which transforms a stream such that geometries are bounded by a small circle of radius *angle* around the projection’s [center](#projection_center). Typically used for pre-clipping.\n\n###### d3.**geoClipRectangle**(*x0*, *y0*, *x1*, *y1*)\n\nGenerates a clipping function which transforms a stream such that geometries are bounded by a rectangle of coordinates \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\]. Typically used for post-clipping.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo](https://github.com/d3/d3-geo)"
- name: geo-polygon
  id: d3-geo-polygon
  summary: Clipping and geometric operations for spherical polygons
  description: "# d3-geo-polygon\n\nClipping and geometric operations for spherical polygons.\n\n## Installing\n\nIf you use NPM, `npm install d3-geo-polygon`. Otherwise, download the [latest release](https://github.com/d3/d3-geo-polygon/releases/latest). You can also load directly from [unpkg](https://unpkg.com/d3-geo-polygon/). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://unpkg.com/d3-geo@3\"></script>\n<script src=\"https://unpkg.com/d3-geo-polygon@1\"></script>\n<script>\n\n// new projection\nvar projection = d3.geoDodecahedral();\n\n// polyhedral projections don’t need SVG or canvas clipping anymore\nvar projection = d3.geoPolyhedralCollignon();\n\n// arbitrary polygon clipping on any projection\nvar projection = d3.geoEquirectangular()\n    .preclip(d3.geoClipPolygon({\n      type: \"Polygon\",\n      coordinates: [[[-10, -10], [-10, 10], [10, 10], [10, -10], [-10, -10]]]\n    }));\n\n</script>\n```\n\n## API Reference\n\n###### d3.**geoClipPolygon**(*polygon*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/clip/polygon.js), [Examples](https://observablehq.com/@mbostock/spherical-clipping)\n\nGiven a GeoJSON *polygon* or *multipolygon*, returns a clip function suitable for [*projection*.preclip](d3-geo#preclip).\n\n###### clip.**polygon**()\n\nGiven a clipPolygon function, returns the GeoJSON polygon.\n\n###### d3.**geoIntersectArc**(*arcs*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/intersect.js), [Examples](https://observablehq.com/@fil/spherical-intersection)\n\nGiven two spherical arcs \\[point0, point1\\] and \\[point2, point3\\], returns their intersection, or undefined if there is none. See “[Spherical Intersection](https://observablehq.com/@fil/spherical-intersection)”.\n\n## Projections\n\nd3-geo-polygon adds polygon clipping to the polyhedral projections from [d3-geo-projection](d3-geo-projection). Thus, it supersedes the following symbols:\n\n###### d3.**geoPolyhedral**(*tree*, *face*) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/index.js), [Examples](https://observablehq.com/@fil/polyhedral-projections-with-d3-geo-polygon)\n\nDefines a new polyhedral projection. The *tree* is a spanning tree of polygon face nodes; each *node* is assigned a *node*.transform matrix. The *face* function returns the appropriate *node* for a given *lambda* and *phi* in radians.\n\n###### *polyhedral*.**tree**() returns the spanning tree of the polyhedron, from which one can infer the faces’ centers, polygons, shared edges etc.\n\n###### d3.**geoPolyhedralButterfly**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/butterfly.js)\n\nThe gnomonic butterfly projection.\n\n###### d3.**geoPolyhedralCollignon**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/collignon.js)\n\nThe Collignon butterfly projection.\n\n###### d3.**geoPolyhedralWaterman**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/waterman.js)\n\nA butterfly projection inspired by Steve Waterman’s design.\n\nNew projections are introduced:\n\n###### d3.**geoPolyhedralVoronoi**(\\[*parents*\\], \\[*polygons*\\], \\[*faceProjection*\\], \\[*faceFind*\\]) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/voronoi.js)\n\nReturns a polyhedral projection based on the *polygons*, arranged in a tree according to the *parents* list. *polygons* are a GeoJSON FeatureCollection of geoVoronoi cells, which should indicate the corresponding sites (see [d3-geo-voronoi](https://github.com/Fil/d3-geo-voronoi)). An optional [*faceProjection*](#geoPolyhedral) is passed to d3.geoPolyhedral() -- note that the gnomonic projection on the polygons’ sites is the only faceProjection that works in the general case.\n\nThe .**parents**(\\[*parents*\\]), .**polygons**(\\[*polygons*\\]), .**faceProjection**(\\[*faceProjection*\\]) set and read the corresponding options. Use *.faceFind(voronoi.find)* for faster results.\n\n###### d3.**geoCubic**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/cubic.js), [Examples](https://observablehq.com/@fil/cubic-projections)\n\nThe cubic projection.\n\n###### d3.**geoDodecahedral**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/polyhedral/dodecahedral.js), [Examples](https://observablehq.com/@fil/dodecahedral-projection)\n\nThe dodecahedral projection.\n\n###### d3.**geoIcosahedral**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/icosahedral.js), [Examples](https://observablehq.com/@fil/icosahedral-projections)\n\nThe icosahedral projection.\n\n###### d3.**geoAirocean**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/airocean.js), [Examples](https://observablehq.com/@fil/airocean-projection)\n\nBuckminster Fuller’s Airocean projection (also known as “Dymaxion”), based on a very specific arrangement of the icosahedron which allows continuous continent shapes. Fuller’s triangle transformation, as formulated by Robert W. Gray (and implemented by Philippe Rivière), makes the projection almost equal-area.\n\n###### d3.**geoCahillKeyes**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/cahillKeyes.js), [Examples](https://observablehq.com/@d3/cahill-keyes) d3.**geoCahillKeyes**\n\nThe Cahill-Keyes projection, designed by Gene Keyes (1975), is built on Bernard J. S. Cahill’s 1909 octant design. Implementation by Mary Jo Graça (2011), ported to D3 by Enrico Spinielli (2013).\n\n###### d3.**geoImago**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/imago.js), [Examples](https://observablehq.com/@fil/the-imago-projection)\n\nThe Imago projection, engineered by Justin Kunimune (2017), is inspired by Hajime Narukawa’s AuthaGraph design (1999).\n\n###### *imago*.**k**(\\[*k*\\])\n\nExponent. Useful values include 0.59 (default, minimizes angular distortion of the continents), 0.68 (gives the closest approximation of the Authagraph) and 0.72 (prevents kinks in the graticule).\n\n###### *imago*.**shift**(\\[*shift*\\])\n\nHorizontal shift. Defaults to 1.16.\n\n###### d3.**geoTetrahedralLee**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/tetrahedralLee.js), [Examples](https://observablehq.com/@fil/lee-projection) d3.**geoLeeRaw**\n\nLee’s tetrahedral conformal projection.\n\n###### Default *angle* is +30°, apex up (-30° for base up, apex down).\n\nDefault aspect uses *projection*.rotate(\\[30, 180\\]) and has the North Pole at the triangle’s center -- use *projection*.rotate(\\[-30, 0\\]) for the [South aspect](https://observablehq.com/@fil/lee-projection).\n\n###### d3.**geoCox**() · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/cox.js), [Examples](https://observablehq.com/@fil/cox-conformal-projection-in-a-triangle) d3.**geoCoxRaw**\n\nThe Cox conformal projection.\n\n###### d3.**geoComplexLog**(\\[*planarProjectionRaw*\\[*, cutoffLatitude*\\]\\]) · [Source](https://github.com/d3/d3-geo-polygon/blob/master/src/complexLog.js), [Example](https://cgmi.github.io/complex-log-projection/) d3.**geoComplexLogRaw**(\\[*planarProjectionRaw*\\])\n\nComplex logarithmic view. This projection is based on the papers by Joachim Böttger et al.:\n\n- [Detail‐In‐Context Visualization for Satellite Imagery (2008)](https://doi.org/10.1111/j.1467-8659.2008.01156.x)\n- [Complex Logarithmic Views for Small Details in Large Contexts (2006)](https://doi.org/10.1109/TVCG.2006.126)\n\nThe specified raw projection *planarProjectionRaw* is used to project onto the complex plane on which the complex logarithm is applied. Recommended are [azimuthal equal-area](d3-geo#geoAzimuthalEqualAreaRaw) (default) or [azimuthal equidistant](d3-geo#geoAzimuthalEquidistantRaw).\n\n*cutoffLatitude* is the latitude relative to the projection center at which to cutoff/clip the projection, lower values result in more detail around the projection center. Value must be \\< 0 because complex log projects the origin to infinity.\n\n###### *complexLog*.**planarProjectionRaw**(\\[*projectionRaw*\\])\n\nIf *projectionRaw* is specified, sets the planar raw projection. See above. If *projectionRaw* is not specified, returns the current planar raw projection.\n\n###### *complexLog*.**cutoffLatitude**(\\[*latitude*\\])\n\nIf *latitude* is specified, sets the cutoff latitude. See above. If *latitude* is not specified, returns the current cutoff latitude.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo-polygon](https://github.com/d3/d3-geo-polygon)"
- name: geo-projection
  id: d3-geo-projection
  summary: Extended geographic projections for d3-geo
  description: "# d3-geo-projection\n\nExtended geographic projections for [d3-geo](d3-geo). See [Command-Line Cartography](https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c) for an introduction.\n\n## Installing\n\nIf you use npm, `npm install d3-geo-projection`. You can also download the [latest release on GitHub](https://github.com/d3/d3-geo-projection/releases/latest). For vanilla HTML in modern browsers, import d3-geo-projection from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {geoAitoff} from \"https://cdn.skypack.dev/d3-geo-projection@4\";\n\nconst projection = geoAitoff();\n\n</script>\n```\n\nFor legacy environments, you can load d3-geo-projection’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-geo@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-geo-projection@4\"></script>\n<script>\n\nconst projection = d3.geoAitoff();\n\n</script>\n```\n\n## API Reference\n\n- [Projections](#projections)\n- [Interrupted Projections](#interrupted-projections)\n- [Polyhedral Projections](#polyhedral-projections)\n- [Quincuncial Projections](#quincuncial-projections)\n- [Transformations](#transformations)\n\n### Projections\n\nNote: projections tagged \\[d3-geo\\] are exported by [d3-geo](d3-geo), not d3-geo-projection. These commonly-used projections are also included in the [d3](https://github.com/d3/d3) default bundle.\n\n###### d3.**geoAiry**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/airy.js), [Examples](https://observablehq.com/@d3/airys-minimum-error) d3.**geoAiryRaw**(*beta*)\n\nAiry’s minimum-error azimuthal projection.\n\n###### *airy*.**radius**(\\[*radius*\\])\n\nDefaults to 90°.\n\n###### d3.**geoAitoff**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/aitoff.js), [Examples](https://observablehq.com/@d3/aitoff) d3.**geoAitoffRaw**\n\nThe Aitoff projection.\n\n###### d3.**geoAlbers**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/albers.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoAlbers)\n\nAlbers’ [equal-area conic projection](#geoConicEqualArea).\n\n###### d3.**geoArmadillo**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/armadillo.js), [Examples](https://observablehq.com/@d3/armadillo) d3.**geoArmadilloRaw**(*phi0*)\n\nThe armadillo projection. The default center assumes the default [parallel](#armadillo_parallel) of 20° and should be changed if a different parallel is used. Note: requires clipping to the sphere.\n\n###### *armadillo*.**parallel**(\\[*parallel*\\])\n\nDefaults to 20°.\n\n###### d3.**geoAugust**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/august.js), [Examples](https://observablehq.com/@d3/august) d3.**geoAugustRaw**\n\nAugust’s epicycloidal conformal projection.\n\n###### d3.**geoAzimuthalEqualArea**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/azimuthalEqualArea.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoAzimuthalEqualArea), [Examples](https://observablehq.com/@d3/azimuthal-equal-area) d3.**geoAzimuthalEqualAreaRaw**\n\nThe Lambert azimuthal equal-area projection.\n\n###### d3.**geoAzimuthalEquidistant**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/azimuthalEquidistant.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoAzimuthalEquidistant), [Examples](https://observablehq.com/@d3/azimuthal-equidistant) d3.**geoAzimuthalEquidistantRaw**\n\nThe azimuthal equidistant projection.\n\n###### d3.**geoBaker**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/baker.js), [Examples](https://observablehq.com/@d3/baker-dinomic) d3.**geoBakerRaw**\n\nThe Baker Dinomic projection.\n\n###### d3.**geoBerghaus**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/berghaus.js), [Examples](https://observablehq.com/@d3/berghaus-star) d3.**geoBerghausRaw**(*lobes*)\n\nBerghaus’ star projection. The default center assumes the default [lobe number](#berghaus_lobes) of 5 and should be changed if a different number of lobes is used. Note: requires clipping to the sphere.\n\n###### *berghaus*.**lobes**(\\[*lobes*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/berghaus.js)\n\nIf *lobes* is specified, sets the number of lobes in the resulting star, and returns this projection. If *lobes* is not specified, returns the current lobe number, which defaults to 5.\n\n###### d3.**geoBertin1953**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bertin.js) d3.**geoBertin1953Raw**\n\nJacques Bertin’s 1953 projection.\n\n###### d3.**geoBoggs**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/boggs.js), [Examples](https://observablehq.com/@d3/boggs-eumorphic) d3.**geoBoggsRaw**\n\nThe Boggs eumorphic projection. More commonly used in [interrupted form](#geoInterruptedBoggs).\n\n###### d3.**geoBonne**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bonne.js), [Examples](https://observablehq.com/@d3/bonne) d3.**geoBonneRaw**(*phi0*)\n\nThe Bonne pseudoconical equal-area projection. The [Werner projection](https://observablehq.com/@d3/werner) is a limiting form of the Bonne projection with a standard parallel at ±90°. The default center assumes the default [parallel](#bonne_parallel) of 45° and should be changed if a different parallel is used.\n\n###### *bonne*.**parallel**(\\[*parallel*\\])\n\nDefaults to 45°.\n\n###### d3.**geoBottomley**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bottomley.js), [Examples](https://observablehq.com/@d3/bottomley) d3.**geoBottomleyRaw**(*sinPsi*)\n\nThe [Bottomley projection](https://cybergeo.revues.org/3977) “draws lines of latitude as concentric circular arcs, with arc lengths equal to their lengths on the globe, and placed symmetrically and equally spaced across the vertical central meridian.”\n\n###### *bottomley*.**fraction**(\\[*fraction*\\])\n\nDefaults to 0.5, corresponding to a sin(ψ) where ψ = π/6.\n\n###### d3.**geoBromley**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/bromley.js), [Examples](https://observablehq.com/@d3/bromley) d3.**geoBromleyRaw**\n\nThe Bromley projection is a rescaled [Mollweide projection](#geoMollweide).\n\n###### d3.**geoChamberlin**(*point0*, *point1*, *point2*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/chamberlin.js) d3.**geoChamberlinRaw**(*p0*, *p1*, *p2*)\n\nThe Chamberlin trimetric projection. This method does not support [*projection*.rotate](https://github.com/d3/d3-geo/blob/main/README.md#projection_rotate): the three reference points implicitly determine a fixed rotation.\n\n###### d3.**geoChamberlinAfrica**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/chamberlin.js)\n\nThe Chamberlin projection for Africa using points \\[0°, 22°\\], \\[45°, 22°\\], \\[22.5°, -22°\\].\n\n###### d3.**geoCollignon**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/collignon.js), [Examples](https://observablehq.com/@d3/collignon) d3.**geoCollignonRaw**\n\nThe Collignon equal-area pseudocylindrical projection. This projection is used in the polar areas of the [HEALPix projection](#geoHealpix).\n\n###### d3.**geoConicConformal**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicConformal.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoConicConformal), [Examples](https://observablehq.com/@d3/conic-conformal) d3.**geoConicConformalRaw**\n\nThe Lambert conformal conic projection.\n\n###### d3.**geoConicEqualArea**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEqualArea.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoConicEqualArea), [Examples](https://observablehq.com/@d3/conic-equal-area) d3.**geoConicEqualAreaRaw**\n\nAlbers’ conic equal-area projection.\n\n###### d3.**geoConicEquidistant**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/conicEquidistant.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoConicEquidistant), [Examples](https://observablehq.com/@d3/conic-equidistant) d3.**geoConicEquidistantRaw**\n\nThe conic equidistant projection.\n\n###### d3.**geoCraig**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/craig.js), [Examples](https://observablehq.com/@d3/craig) d3.**geoCraigRaw**(*phi*)\n\nThe Craig retroazimuthal projection. Note: this projection tends to [fold over itself](https://bl.ocks.org/mbostock/4459716) if the [standard parallel](#craig_parallel) is non-zero; we have not yet implemented the necessary advanced clipping to avoid overlap.\n\n###### *craig*.**parallel**(\\[*parallel*\\])\n\nDefaults to 0°.\n\n###### d3.**geoCraster**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/craster.js), [Examples](https://observablehq.com/@d3/craster) d3.**geoCrasterRaw**\n\nThe Craster parabolic projection; also known as Putniņš P4.\n\n###### d3.**geoCylindricalEqualArea**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/cylindricalEqualArea.js), [Examples](https://observablehq.com/@mbostock/cylindrical-equal-area-projections) d3.**geoCylindricalEqualAreaRaw**(*phi0*)\n\nThe cylindrical equal-area projection. Depending on the chosen [parallel](#cylindricalEqualArea_parallel), this projection is also known as the Lambert cylindrical equal-area (0°), Behrmann (30°), Hobo–Dyer (37.5°), Gall–Peters (45°), Balthasart (50°) and Tobler world-in-a-square (~55.654°).\n\n###### *cylindricalEqualArea*.**parallel**(\\[*parallel*\\])\n\nDefaults to approximately 38.58°, fitting the world in a 960×500 rectangle.\n\n###### d3.**geoCylindricalStereographic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/cylindricalStereographic.js), [Examples](https://observablehq.com/@d3/cylindrical-stereographic) d3.**geoCylindricalStereographicRaw**(*phi0*)\n\nThe cylindrical stereographic projection. Depending on the chosen [parallel](#cylindricalStereographic_parallel), this projection is also known as Braun’s stereographic (0°) and Gall’s stereographic (45°).\n\n###### *cylindricalStereographic*.**parallel**(\\[*parallel*\\])\n\nDefaults to 0°.\n\n###### d3.**geoEckert1**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert1.js), [Examples](https://observablehq.com/@d3/eckert-i) d3.**geoEckert1Raw**\n\nThe Eckert I projection.\n\n###### d3.**geoEckert2**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert2.js), [Examples](https://observablehq.com/@d3/eckert-ii) d3.**geoEckert2Raw**\n\nThe Eckert II projection.\n\n###### d3.**geoEckert3**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert3.js), [Examples](https://observablehq.com/@d3/eckert-iii) d3.**geoEckert3Raw**\n\nThe Eckert III projection.\n\n###### d3.**geoEckert4**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert4.js), [Examples](https://observablehq.com/@d3/eckert-iv) d3.**geoEckert4Raw**\n\nThe Eckert IV projection.\n\n###### d3.**geoEckert5**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert5.js), [Examples](https://observablehq.com/@d3/eckert-v) d3.**geoEckert5Raw**\n\nThe Eckert V projection.\n\n###### d3.**geoEckert6**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eckert6.js), [Examples](https://observablehq.com/@d3/eckert-vi) d3.**geoEckert6Raw**\n\nThe Eckert VI projection.\n\n###### d3.**geoEisenlohr**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/eisenlohr.js), [Examples](https://observablehq.com/@d3/eisenlohr) d3.**geoEisenlohrRaw**(*lambda*, *phi*)\n\nThe Eisenlohr conformal projection.\n\n###### d3.**geoEquirectangular**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/equirectangular.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoEquirectangular), [Examples](https://observablehq.com/@d3/equirectangular) d3.**geoEquirectangularRaw**\n\nThe equirectangular (plate carrée) projection. The [Cassini projection](https://observablehq.com/@d3/cassini) is the transverse aspect of the equirectangular projection.\n\n###### d3.**geoFahey**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/fahey.js), [Examples](https://observablehq.com/@d3/fahey) d3.**geoFaheyRaw**\n\nThe Fahey pseudocylindrical projection.\n\n###### d3.**geoFoucaut**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/foucaut.js), [Examples](https://observablehq.com/@d3/foucaut) d3.**geoFoucautRaw**\n\nFoucaut’s stereographic equivalent projection.\n\n###### d3.**geoFoucautSinusoidal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/foucautSinusoidal.js), [Examples](https://observablehq.com/@d3/foucaut-sinusoidal) d3.**geoFoucautSinusoidalRaw**\n\nFoucaut’s sinusoidal projection, an equal-area average of the sinusoidal and Lambert’s cylindrical projections.\n\n###### *foucautSinusoidal*.**alpha**(\\[*alpha*\\])\n\nRelative weight of the cylindrical projection. Defaults to 0.5.\n\n###### d3.**geoGilbert**(\\[*type*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gilbert.js), [Examples](https://observablehq.com/@d3/gilbert)\n\nGilbert’s two-world perspective projection. Wraps an instance of the specified projection *type*; if not specified, defaults to [d3.geoOrthographic](https://github.com/d3/d3-geo/blob/main/README.md#geoOrthographic).\n\n###### d3.**geoGingery**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js), [Examples](https://observablehq.com/@d3/gingery) d3.**geoGingeryRaw**(*rho*, *lobes*)\n\nThe U.S.-centric Gingery world projection, as inspired by Cram’s Air Age. Note: requires clipping to the sphere.\n\n###### *gingery*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js)\n\nDefaults to 30°.\n\n###### *gingery*.**lobes**(\\[*lobes*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js)\n\nDefaults to 6.\n\n###### d3.**geoGinzburg4**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/ginzburg4.js), [Examples](https://observablehq.com/@d3/ginzburg-iv) d3.**geoGinzburg4Raw**\n\nThe Ginzburg IV projection.\n\n###### d3.**geoGinzburg5**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/ginzburg5.js), [Examples](https://observablehq.com/@d3/ginzburg-v) d3.**geoGinzburg5Raw**\n\nThe Ginzburg V projection.\n\n###### d3.**geoGinzburg6**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/ginzburg6.js), [Examples](https://observablehq.com/@d3/ginzburg-vi) d3.**geoGinzburg6Raw**\n\nThe Ginzburg VI projection.\n\n###### d3.**geoGinzburg8**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/ginzburg8.js), [Examples](https://observablehq.com/@d3/ginzburg-viii) d3.**geoGinzburg8Raw**\n\nThe Ginzburg VIII projection.\n\n###### d3.**geoGinzburg9**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/ginzburg9.js), [Examples](https://observablehq.com/@d3/ginzburg-ix) d3.**geoGinzburg9Raw**\n\nThe Ginzburg IX projection.\n\n###### d3.**geoGnomonic**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/gnomonic.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoGnomonic), [Examples](https://observablehq.com/@d3/gnomonic) d3.**geoGnomonicRaw**\n\nThe gnomonic projection.\n\n###### d3.**geoGringorten**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gringorten.js), [Examples](https://observablehq.com/@d3/gringorten) d3.**geoGringortenRaw**\n\nThe Gringorten square equal-area projection, rearranged to give each hemisphere an entire square.\n\n###### d3.**geoGuyou**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/guyou.js), [Examples](https://observablehq.com/@d3/guyou) d3.**geoGuyouRaw**\n\nThe Guyou hemisphere-in-a-square projection. Peirce is credited with its [quincuncial form](#geoPeirceQuincuncial).\n\n###### d3.**geoHammer**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammer.js), [Examples](https://observablehq.com/@d3/hammer) d3.**geoHammerRaw**(*A*, *B*)\n\nThe Hammer projection. Depending the chosen coefficient and aspect, also known as [Eckert–Greifendorff](https://observablehq.com/@d3/hammer?b=4), [quartic authalic](https://observablehq.com/@d3/hammer?b=Infinity), and [Briesemeister](https://observablehq.com/@d3/briesemeister-projection).\n\n###### *hammer*.**coefficient**(\\[*coefficient*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammer.js)\n\nDefaults to 2.\n\n###### d3.**geoHammerRetroazimuthal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammerRetroazimuthal.js), [Examples](https://observablehq.com/@d3/hammer-retroazimuthal) d3.**geoHammerRetroazimuthalRaw**(*phi0*)\n\nThe Hammer retroazimuthal projection. Note: requires clipping to the sphere.\n\n###### *hammerRetroazimuthal*.**parallel**(\\[*parallel*\\])\n\nDefaults to 45°.\n\n###### d3.**geoHealpix**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/healpix.js), [Examples](https://observablehq.com/@d3/healpix) d3.**geoHealpixRaw**(*lobes*)\n\nThe HEALPix projection: a **H**ierarchical **E**qual **A**rea iso**L**atitude **Pix**elisation of a 2-sphere. In this implementation, the parameter *K* is fixed at 3. Note: requires clipping to the sphere.\n\n###### *healpix*.**lobes**(\\[*lobes*\\])\n\nIf *lobes* is specified, sets the number of lobes (the parameter *H* in the literature) and returns this projection. If *lobes* is not specified, returns the current lobe number, which defaults to 4.\n\n###### d3.**geoHill**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hill.js), [Examples](https://observablehq.com/@d3/hill-eucyclic) d3.**geoHillRaw**(*K*)\n\nHill eucyclic projection is pseudoconic and equal-area.\n\n###### *hill*.**ratio**(\\[*ratio*\\])\n\nDefaults to 1. With a ratio of 0, this projection becomes the [Maurer No. 73](https://observablehq.com/@d3/hill-eucyclic?b=0). As it approaches ∞, the projection converges to the [Eckert IV](#geoEckert4).\n\n###### d3.**geoHomolosine**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/homolosine.js), [Examples](https://observablehq.com/@d3/goode-homolosine) d3.**geoHomolosineRaw**\n\nThe pseudocylindrical, equal-area Goode homolosine projection is normally presented in [interrupted form](#geoInterruptedHomolosine).\n\n###### d3.**geoHufnagel**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hufnagel.js), [Examples](https://observablehq.com/@fil/hufnagel-projection) d3.**geoHufnagelRaw**\n\nA customizable family of pseudocylindrical equal-area projections by Herbert Hufnagel.\n\n###### *hufnagel*.**a**(\\[*a*\\])\n\n###### *hufnagel*.**b**(\\[*b*\\])\n\n###### *hufnagel*.**psiMax**(\\[*psiMax*\\])\n\n###### *hufnagel*.**ratio**(\\[*ratio*\\])\n\n###### d3.**geoHyperelliptical**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hyperelliptical.js), [Examples](https://observablehq.com/@fil/toblers-hyperelliptical-projection) d3.**geoHyperellipticalRaw**\n\nWaldo R. Tobler’s hyperelliptical is a family of equal-area pseudocylindrical projections. Parameters include *k*, the exponent of the superellipse (or Lamé curve) that defines the shape of the meridians (default *k* = 2.5); *alpha*, which governs the weight of the cylindrical projection that is averaged with the superellipse (default *alpha* = 0); and *gamma*, that shapes the aspect ratio (default: *gamma* = 1.183136).\n\n###### d3.**geoKavrayskiy7**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/kavrayskiy7.js), [Examples](https://observablehq.com/@d3/kavrayskiy-vii) d3.**geoKavrayskiy7Raw**\n\nThe Kavrayskiy VII pseudocylindrical projection.\n\n###### d3.**geoLagrange**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/lagrange.js), [Examples](https://observablehq.com/@d3/lagrange) d3.**geoLagrangeRaw**(*n*)\n\nThe Lagrange conformal projection.\n\n###### *lagrange*.**spacing**(\\[*spacing*\\])\n\nDefaults to 0.5.\n\n###### d3.**geoLarrivee**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/larrivee.js), [Examples](https://observablehq.com/@d3/larrivee) d3.**geoLarriveeRaw**\n\nThe Larrivée projection.\n\n###### d3.**geoLaskowski**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/laskowski.js), [Examples](https://observablehq.com/@d3/laskowski-tri-optimal) d3.**geoLaskowskiRaw**\n\nThe Laskowski tri-optimal projection simultaneously minimizes distance, angular, and areal distortion.\n\n###### d3.**geoLittrow**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/littrow.js), [Examples](https://observablehq.com/@d3/littrow) d3.**geoLittrowRaw**\n\nThe Littrow projection is the only conformal retroazimuthal map projection. Typically clipped to the geographic extent \\[\\[-90°, -60°\\], \\[90°, 60°\\]\\].\n\n###### d3.**geoLoximuthal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/loximuthal.js), [Examples](https://observablehq.com/@d3/loximuthal) d3.**geoLoximuthalRaw**(*phi0*)\n\nThe [loximuthal projection](https://en.wikipedia.org/wiki/Loximuthal_projection) is “characterized by the fact that loxodromes (rhumb lines) from one chosen central point (the intersection of the central meridian and central latitude) are shown as straight lines, correct in azimuth from the center, and are ‘true to scale’… It is neither an equal-area projection nor conformal.”\n\n###### *loximuthal*.**parallel**(\\[*parallel*\\])\n\nDefaults to 40°.\n\n###### d3.**geoMercator**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/mercator.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoMercator), [Examples](https://observablehq.com/@d3/mercator) d3.**geoMercatorRaw**\n\nThe spherical Mercator projection.\n\n###### d3.**geoMiller**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/miller.js), [Examples](https://observablehq.com/@d3/miller) d3.**geoMillerRaw**\n\nThe Miller cylindrical projection is a modified [Mercator](#geoMercator) projection.\n\n###### d3.**geoModifiedStereographic**(*coefficients*, *rotate*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js) d3.**geoModifiedStereographicRaw**(*coefficients*)\n\nThe family of [modified stereographic projections](https://www.jasondavies.com/maps/modified-stereographic/). The default [clip angle](https://github.com/d3/d3-geo/blob/main/README.md#projection_clipAngle) for these projections is 90°. These projections do not support [*projection*.rotate](https://github.com/d3/d3-geo/blob/main/README.md#projection_rotate): a fixed rotation is applied that is specific to the given *coefficients*.\n\n###### d3.**geoModifiedStereographicAlaska**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)\n\nA [modified stereographic](#geoModifiedStereographic) projection for Alaska.\n\n###### d3.**geoModifiedStereographicGs48**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)\n\nA [modified stereographic](#geoModifiedStereographic) projection for the conterminous United States.\n\n###### d3.**geoModifiedStereographicGs50**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js)\n\nA [modified stereographic](#geoModifiedStereographic) projection for the United States including Alaska and Hawaii. Typically clipped to the geographic extent \\[\\[-180°, 15°\\], \\[-50°, 75°\\]\\].\n\n###### d3.**geoModifiedStereographicMiller**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js), [Examples](https://observablehq.com/@d3/miller-oblated-stereographic)\n\nA [modified stereographic](#geoModifiedStereographic) projection for Europe and Africa. Typically clipped to the geographic extent \\[\\[-40°, -40°\\], \\[80°, 80°\\]\\].\n\n###### d3.**geoModifiedStereographicLee**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/modifiedStereographic.js), [Examples](https://observablehq.com/@d3/lee-oblated-stereographic)\n\nA [modified stereographic](#geoModifiedStereographic) projection for the Pacific ocean.\n\n###### d3.**geoMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/mollweide.js), [Examples](https://observablehq.com/@d3/mollweide) d3.**geoMollweideRaw**\n\nThe equal-area, pseudocylindrical Mollweide projection. The oblique aspect is known as the [Atlantis projection](https://observablehq.com/@d3/atlantis). [Goode’s interrupted Mollweide](#interruptedMollweide) is also widely known.\n\n###### d3.**geoMtFlatPolarParabolic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/mtFlatPolarParabolic.js), [Examples](https://observablehq.com/@d3/flat-polar-parabolic) d3.**geoMtFlatPolarParabolicRaw**\n\nThe McBryde–Thomas flat-polar parabolic pseudocylindrical equal-area projection.\n\n###### d3.**geoMtFlatPolarQuartic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/mtFlatPolarQuartic.js), [Examples](https://observablehq.com/@d3/flat-polar-quartic) d3.**geoMtFlatPolarQuarticRaw**\n\nThe McBryde–Thomas flat-polar quartic pseudocylindrical equal-area projection.\n\n###### d3.**geoMtFlatPolarSinusoidal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/mtFlatPolarSinusoidal.js), [Examples](https://observablehq.com/@d3/flat-polar-sinusoidal) d3.**geoMtFlatPolarSinusoidalRaw**\n\nThe McBryde–Thomas flat-polar sinusoidal equal-area projection.\n\n###### d3.**geoNaturalEarth1**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/naturalEarth1.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoNaturalEarth1), [Examples](https://observablehq.com/@d3/natural-earth) d3.**geoNaturalEarth1Raw**\n\nThe Natural Earth projection.\n\n###### d3.**geoNaturalEarth2**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/naturalEarth2.js), [Examples](https://observablehq.com/@d3/natural-earth-ii) d3.**geoNaturalEarth2Raw**\n\nThe [Natural Earth II](http://www.shadedrelief.com/NE2_proj/) projection. Compared to [Natural Earth](#geoNaturalEarth), it is slightly taller and rounder.\n\n###### d3.**geoNellHammer**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/nellHammer.js), [Examples](https://observablehq.com/@d3/nell-hammer) d3.**geoNellHammerRaw**\n\nThe Nell–Hammer projection.\n\n###### d3.**geoNicolosi**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/nicolosi.js), [Examples](https://observablehq.com/@toja/nicolosi-globular-projection) d3.**geoNicolosiRaw**\n\nThe Nicolosi globular projection.\n\n###### d3.**geoOrthographic**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/orthographic.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoOrthographic), [Examples](https://observablehq.com/@d3/orthographic) d3.**geoOrthographicRaw**\n\nThe orthographic projection.\n\n###### d3.**geoPatterson**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/patterson.js), [Examples](https://observablehq.com/@d3/patterson-cylindrical) d3.**geoPattersonRaw**\n\nThe Patterson cylindrical projection.\n\n###### d3.**geoPolyconic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyconic.js), [Examples](https://observablehq.com/@d3/polyconic) d3.**geoPolyconicRaw**\n\nThe American polyconic projection.\n\n###### d3.**geoRectangularPolyconic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/rectangularPolyconic.js), [Examples](https://observablehq.com/@d3/rectangular-polyconic) d3.**geoRectangularPolyconicRaw**(*phi0*)\n\nThe rectangular (War Office) polyconic projection.\n\n###### *rectangularPolyconic*.**parallel**(\\[*parallel*\\])\n\nDefaults to 0°.\n\n###### d3.**geoRobinson**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/robinson.js), [Examples](https://observablehq.com/@d3/robinson) d3.**geoRobinsonRaw**\n\nThe Robinson projection.\n\n###### d3.**geoSatellite**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/satellite.js), [Examples](https://observablehq.com/@d3/satellite) d3.**geoSatelliteRaw**(*P*, *omega*)\n\nThe satellite (tilted perspective) projection.\n\n###### *satellite*.**tilt**(\\[*tilt*\\])\n\nDefaults to 0°.\n\n###### *satellite*.**distance**(\\[*distance*\\])\n\nDistance from the center of the sphere to the point of view, as a proportion of the sphere’s radius; defaults to 2.0. The recommended maximum [clip angle](https://github.com/d3/d3-geo/blob/main/README.md#projection_clipAngle) for a given *distance* is acos(1 / *distance*) converted to degrees. If [tilt](#satellite_tilt) is also applied, then more conservative clipping may be necessary. For exact clipping, the in-development geographic projection pipeline is needed; see the [satellite explorer](https://observablehq.com/@d3/satellite-explorer).\n\n###### d3.**geoSinusoidal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/sinusoidal.js), [Examples](https://observablehq.com/@d3/sinusoidal) d3.**geoSinusoidalRaw**\n\nThe sinusoidal projection.\n\n###### d3.**geoSinuMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/sinuMollweide.js), [Examples](https://observablehq.com/@d3/sinu-mollweide) d3.**geoSinuMollweideRaw**\n\nAllen K. Philbrick’s Sinu-Mollweide projection. See also the [interrupted form](#interruptedSinuMollweide).\n\n###### d3.**geoStereographic**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/stereographic.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoStereographic), [Examples](https://observablehq.com/@d3/stereographic) d3.**geoStereographicRaw**\n\nThe stereographic projection.\n\n###### d3.**geoTimes**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/times.js), [Examples](https://observablehq.com/@d3/times) d3.**geoTimesRaw**\n\nJohn Muir’s Times projection.\n\n###### d3.**geoTransverseMercator**() · [Source](https://github.com/d3/d3-geo/blob/main/src/projection/transverseMercator.js) [\\[d3-geo\\]](https://github.com/d3/d3-geo/blob/main/README.md#geoTransverseMercator), [Examples](https://observablehq.com/@d3/transverse-mercator) d3.**geoTransverseMercatorRaw**\n\nThe transverse spherical Mercator projection.\n\n###### d3.**geoTwoPointAzimuthal**(*point0*, *point1*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointAzimuthal.js) d3.**geoTwoPointAzimuthalRaw**(*d*)\n\nThe two-point azimuthal projection “shows correct azimuths (but not distances) from either of two points to any other point. \\[It can\\] be used to locate a ship at sea, given the exact location of two radio transmitters and the direction of the ship to the transmitters.” This projection does not support [*projection*.rotate](https://github.com/d3/d3-geo/blob/main/README.md#projection_rotate), as the rotation is fixed by the two given points.\n\n###### d3.**geoTwoPointAzimuthalUsa**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointAzimuthal.js)\n\nThe two-point azimuthal projection with points \\[-158°, 21.5°\\] and \\[-77°, 39°\\], approximately representing Honolulu, HI and Washington, D.C.\n\n###### d3.**geoTwoPointEquidistant**(*point0*, *point1*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointEquidistant.js) d3.**geoTwoPointEquidistantRaw**(*z0*)\n\nThe two-point equidistant projection. This projection does not support [*projection*.rotate](https://github.com/d3/d3-geo/blob/main/README.md#projection_rotate), as the rotation is fixed by the two given points. Note: to show the whole Earth, this projection requires clipping to spherical polygons ([example](https://observablehq.com/@d3/two-point-equidistant)).\n\n###### d3.**geoTwoPointEquidistantUsa**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/twoPointEquidistant.js)\n\nThe two-point equidistant projection with points \\[-158°, 21.5°\\] and \\[-77°, 39°\\], approximately representing Honolulu, HI and Washington, D.C.\n\n###### d3.**geoVanDerGrinten**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/vanDerGrinten.js), [Examples](https://observablehq.com/@d3/van-der-grinten-i) d3.**geoVanDerGrintenRaw**\n\nThe Van der Grinten projection.\n\n###### d3.**geoVanDerGrinten2**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/vanDerGrinten2.js), [Examples](https://observablehq.com/@d3/van-der-grinten-ii) d3.**geoVanDerGrinten2Raw**\n\nThe Van der Grinten II projection.\n\n###### d3.**geoVanDerGrinten3**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/vanDerGrinten3.js), [Examples](https://observablehq.com/@d3/van-der-grinten-iii) d3.**geoVanDerGrinten3Raw**\n\nThe Van der Grinten III projection.\n\n###### d3.**geoVanDerGrinten4**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/vanDerGrinten4.js), [Examples](https://observablehq.com/@d3/van-der-grinten-iv) d3.**geoVanDerGrinten4Raw**\n\nThe Van der Grinten IV projection.\n\n###### d3.**geoWagner**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wagner.js), [Examples](https://observablehq.com/@fil/wagner-customizable-projection) d3.**geoWagnerRaw**\n\nThe Wagner projection is customizable: default values produce the Wagner VIII projection.\n\n###### *wagner*.**poleline**(\\[*poleline*\\])\n\nDefaults to 65°.\n\n###### *wagner*.**parallels**(\\[*parallels*\\])\n\nDefaults to 60°.\n\n###### *wagner*.**inflation**(\\[*inflation*\\])\n\nDefaults to 20.\n\n###### *wagner*.**ratio**(\\[*ratio*\\])\n\nDefaults to 200.\n\n###### d3.**geoWagner4**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wagner4.js), [Examples](https://observablehq.com/@d3/wagner-iv) d3.**geoWagner4Raw**\n\nThe Wagner IV projection, also known as Putniṇš P2´.\n\n###### d3.**geoWagner6**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wagner6.js), [Examples](https://observablehq.com/@d3/wagner-vi) d3.**geoWagner6Raw**\n\nThe Wagner VI projection.\n\n###### d3.**geoWagner7**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wagner7.js), Examples\n\nThe Wagner VII projection.\n\n###### d3.**geoWiechel**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/wiechel.js), [Examples](https://observablehq.com/@d3/wiechel) d3.**geoWiechelRaw**\n\nThe Wiechel projection.\n\n###### d3.**geoWinkel3**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/winkel3.js), [Examples](https://observablehq.com/@d3/winkel-tripel) d3.**geoWinkel3Raw**\n\nThe Winkel tripel projection.\n\n### Interrupted Projections\n\n###### d3.**geoInterrupt**(*project*, *lobes*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/index.js), [Examples](https://observablehq.com/@d3/interrupted-sinusoidal)\n\nDefines a new interrupted projection for the specified [raw projection](#raw-projections) function *project* and the specified array of *lobes*. The array *lobes* contains two elements representing the hemilobes for the northern hemisphere and the southern hemisphere, respectively. Each hemilobe is an array of triangles, with each triangle represented as three points (in degrees): the start, midpoint, and end. For example, the lobes in [Goode’s interrupted homolosine](#geoInterruptedHomolosine) projection are defined as:\n\n``` javascript\n[\n  [\n    [[-180,   0], [-100,  90], [ -40,   0]],\n    [[ -40,   0], [  30,  90], [ 180,   0]]\n  ],\n  [\n    [[-180,   0], [-160, -90], [-100,   0]],\n    [[-100,   0], [ -60, -90], [ -20,   0]],\n    [[ -20,   0], [  20, -90], [  80,   0]],\n    [[  80,   0], [ 140, -90], [ 180,   0]]\n  ]\n]\n```\n\nNote: interrupted projections typically require clipping to the sphere.\n\n###### *interrupted*.**lobes**(\\[*lobes*\\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/index.js)\n\nIf *lobes* is specified, sets the new array of hemilobes and returns this projection; see [d3.geoInterrupt](#geoInterrupt) for details on the format of the hemilobes array. If *lobes* is not specified, returns the current array of hemilobes.\n\n###### d3.**geoInterruptedHomolosine**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/homolosine.js), [Examples](https://observablehq.com/@d3/interrupted-goode-homolosine)\n\nGoode’s interrupted [homolosine projection](#geoHomolosine). Its [ocean-centric aspect](https://observablehq.com/@d3/interrupted-homolosine-oceans) is also well-known.\n\n###### d3.**geoInterruptedSinusoidal**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/sinusoidal.js), [Examples](https://observablehq.com/@d3/interrupted-sinusoidal)\n\nAn interrupted [sinusoidal projection](#geoSinusoidal) with asymmetrical lobe boundaries that emphasize land masses over oceans, after the Swedish *Nordisk Världs Atlas* as reproduced by [C.A. Furuti](https://web.archive.org/web/20150928042327/http://www.progonos.com/furuti/MapProj/Normal/ProjInt/projInt.html#InterruptedSansonFlamsteed).\n\n###### d3.**geoInterruptedBoggs**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/boggs.js), [Examples](https://observablehq.com/@d3/interrupted-boggs-eumorphic)\n\nBogg’s interrupted [eumorphic projection](#geoBoggs).\n\n###### d3.**geoInterruptedSinuMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/sinuMollweide.js), [Examples](https://observablehq.com/@d3/interrupted-sinu-mollweide)\n\nAlan K. Philbrick’s interrupted [sinu-Mollweide projection](#geoSinuMollweide).\n\n###### d3.**geoInterruptedMollweide**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/mollweide.js), [Examples](https://observablehq.com/@d3/interrupted-mollweide)\n\nGoode’s interrupted [Mollweide projection](#geoMollweide).\n\n###### d3.**geoInterruptedMollweideHemispheres**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/mollweideHemispheres.js), [Examples](https://observablehq.com/@d3/mollweide-hemispheres)\n\nThe [Mollweide projection](#geoMollweide) interrupted into two (equal-area) hemispheres.\n\n###### d3.**geoInterruptedQuarticAuthalic**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quarticAuthalic.js), [Examples](https://observablehq.com/@piwodlaiwo/interrupted-quartic-authalic-projection)\n\nThe [quartic authalic projection](https://observablehq.com/@d3/hammer?b=Infinity) interrupted into two hemispheres.\n\n### Polyhedral Projections\n\n###### d3.**geoPolyhedral**(*root*, *face*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/index.js)\n\nDefines a new polyhedral projection. The *root* is a spanning tree of polygon face nodes; each *node* is assigned a *node*.transform matrix. The *face* function returns the appropriate *node* for a given *lambda* and *phi* in radians. Use [*projection*.angle](https://github.com/d3/d3-geo/blob/main/README.md#projection_angle) to set the orientation of the map (the default *angle*, -30°, might change in the next major version).\n\n###### d3.**geoPolyhedralButterfly**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/butterfly.js), [Examples](https://observablehq.com/@d3/polyhedral-gnomonic)\n\nThe gnomonic butterfly projection.\n\n###### d3.**geoPolyhedralCollignon**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/collignon.js), [Examples](https://observablehq.com/@d3/polyhedral-collignon)\n\nThe Collignon butterfly projection.\n\n###### d3.**geoPolyhedralWaterman**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/polyhedral/waterman.js), [Examples](https://observablehq.com/@d3/watermans-butterfly)\n\nSteve Waterman’s butterfly projection.\n\n### Quincuncial Projections\n\n###### d3.**geoQuincuncial**(*project*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/index.js)\n\nDefines a new quincuncial projection for the specified [raw projection](#raw-projections) function *project*. The default rotation is \\[-90°, -90°, 45°\\] and the default clip angle is 180° - ε.\n\n###### d3.**geoGringortenQuincuncial**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/gringorten.js)\n\nThe Gringorten square equal-area projection.\n\n###### d3.**geoPeirceQuincuncial**() · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quincuncial/peirce.js)\n\nThe Peirce quincuncial projection is the quincuncial form of the [Guyou projection](#geoGuyou).\n\n### Transformations\n\n###### d3.**geoProject**(*object*, *projection*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/project/index.js)\n\nProjects the specified GeoJSON *object* using the specified *projection*, returning a shallow copy of the specified GeoJSON *object* with projected coordinates. Typically, the input coordinates are spherical and the output coordinates are planar, but the *projection* can also be an [arbitrary geometric transformation](https://github.com/d3/d3-geo/blob/main/README.md#transforms).\n\nSee also [geoproject](#geoproject-bin).\n\n###### d3.**geoStitch**(*object*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/stitch.js)\n\nReturns a shallow copy of the specified GeoJSON *object*, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments. The input *object* must have coordinates in longitude and latitude in decimal degrees per [RFC 7946](https://tools.ietf.org/html/rfc7946). [Antimeridian cutting](https://bl.ocks.org/mbostock/3788999), if needed, can then be re-applied after rotating to the desired projection aspect.\n\nSee also [geostitch](#geostitch-bin).\n\n###### d3.**geoQuantize**(*object*, *digits*) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/quantize.js)\n\nReturns a shallow copy of the specified GeoJSON *object*, rounding *x* and *y* coordinates according to [*number*.toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed). Typically this is done *after* [projecting](#geoProject).\n\nSee also [geoproject --precision](#geoproject_precision) and [geo2svg --precision](#geo2svg_precision).\n\n## Command-Line Reference\n\n### geo2svg\n\n###### **geo2svg** \\[*options…*\\] \\[*file*\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geo2svg)\n\nConverts the specified GeoJSON *file* to SVG. With [--newline-delimited](#geo2svg_newline_delimited), each input feature is rendered as a separate [path element](https://www.w3.org/TR/SVG/paths.html); otherwise, a single path element is generated.\n\nBy default, the SVG’s [fill](#geo2svg_fill) is set to none and the [stroke](#geo2svg_stroke) is set to black. The default [point radius](https://github.com/d3/d3-geo/blob/main/README.md#path_pointRadius) is 4.5. To override these values on a per-feature basis, the following [GeoJSON feature](http://geojson.org/geojson-spec.html#feature-objects) properties will be propagated to attributes:\n\n- fill\n- fill-rule (or fillRule)\n- fill-opacity (or fillOpacity)\n- stroke\n- stroke-width (or strokeWidth)\n- stroke-linecap (or strokeLinecap)\n- stroke-linejoin (or strokeLinejoin)\n- stroke-miterlimit (or strokeMiterlimit)\n- stroke-dasharray (or strokeDasharray)\n- stroke-dashoffset (or strokeDashoffset)\n- stroke-opacity (or strokeOpacity)\n- point-radius (or pointRadius)\n\nIf the feature has an id, the path element will have a corresponding id attribute. If the feature has a *title* property, the path element will have a title element with the corresponding value. For an example of per-feature attributes, see this [California population density map](https://bl.ocks.org/mbostock/fb6c1e5ff700f9713a9dc2f0fd392c35).\n\nNote: per-feature attributes are most useful in conjunction with [newline-delimited](#geo2svg_newline_delimited) input, as otherwise the generated SVG only has a single path element. To set these properties dynamically, pass the input through [ndjson-map](https://github.com/mbostock/ndjson-cli/blob/main/README.md#map).\n\n###### geo2svg **-h** geo2svg **--help**\n\nOutput usage information.\n\n###### geo2svg **-V** geo2svg **--version**\n\nOutput the version number.\n\n###### geo2svg **-o** *file* geo2svg **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### geo2svg **-w** *value* geo2svg **--width** *value*\n\nSpecify the output width. Defaults to 960.\n\n###### geo2svg **-h** *value* geo2svg **--height** *value*\n\nSpecify the output height. Defaults to 500.\n\n###### geo2svg **-p** *value* geo2svg **--precision** *value*\n\nReduce the precision for smaller output files. Defaults to six digits after the decimal point. See also [d3.geoQuantize](#geoQuantize).\n\n###### geo2svg **--fill** *value*\n\nSpecify the default output fill color. Defaults to none.\n\n###### geo2svg **--stroke** *value*\n\nSpecify the default output stroke color. Defaults to black.\n\n###### geo2svg **--r** *value* geo2svg **--radius** *value*\n\nSpecify the default output point radius. Defaults to 4.5.\n\n###### geo2svg **-n** geo2svg **--newline-delimited**\n\nAccept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line.\n\n### geograticule\n\n###### **geograticule** \\[*options*…\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geograticule)\n\nGenerates a GeoJSON graticule. See also [d3.geoGraticule](https://github.com/d3/d3-geo/blob/main/README.md#geoGraticule).\n\n###### geograticule **-h** geograticule **--help**\n\nOutput usage information.\n\n###### geograticule **-V** geograticule **--version**\n\nOutput the version number.\n\n###### geograticule **-o** *file* geograticule **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### geograticule **--extent** *value*\n\nSets the graticule’s [extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extent).\n\n###### geograticule **--extent-minor** *value*\n\nSets the graticule’s [minor extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extentMinor).\n\n###### geograticule **--extent-major** *value*\n\nSets the graticule’s [major extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extentMajor).\n\n###### geograticule **--step** *value*\n\nSets the graticule’s [step](https://github.com/d3/d3-geo/blob/main/README.md#graticule_step).\n\n###### geograticule **--step-minor** *value*\n\nSets the graticule’s [minor step](https://github.com/d3/d3-geo/blob/main/README.md#graticule_stepMinor).\n\n###### geograticule **--step-major** *value*\n\nSets the graticule’s [major setp](https://github.com/d3/d3-geo/blob/main/README.md#graticule_stepMajor).\n\n###### geograticule **--precision** *value*\n\nSets the graticule’s [precision](https://github.com/d3/d3-geo/blob/main/README.md#graticule_precision).\n\n### geoproject\n\n###### **geoproject** \\[*options*…\\] *projection* \\[*file*\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geoproject)\n\nProjects the GeoJSON object in the specified input *file* using the specified *projection*, outputting a new GeoJSON *object* with projected coordinates. For example, to project standard [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS_84) input using [d3.geoAlbersUsa](https://github.com/d3/d3-geo/blob/main/README.md#geoAlbersUsa):\n\n``` javascript\ngeoproject 'd3.geoAlbersUsa()' us.json \\\n  > us-albers.json\n```\n\nFor geometry that crosses the antimeridian or surrounds a pole, you will want to pass input through [geostitch](#geostitch-bin) first:\n\n``` javascript\ngeostitch world.json \\\n  | geoproject 'd3.geoMercator()' \\\n  > world-mercator.json\n```\n\nTypically, the input coordinates are spherical and the output coordinates are planar, but the *projection* can also be an [arbitrary geometric transformation](https://github.com/d3/d3-geo/blob/main/README.md#transforms). For example, to invert the *y*-axis of a standard [spatial reference system](https://en.wikipedia.org/wiki/Spatial_reference_system) such as [California Albers (EPSG:3310)](http://spatialreference.org/ref/epsg/nad83-california-albers/) and fit it to a 960×500 viewport:\n\n``` javascript\nshp2json planar.shp \\\n  | geoproject 'd3.geoIdentity().reflectY(true).fitSize([960, 500], d)' \\\n  > planar.json\n```\n\nSee also [d3.geoProject](#geoProject) and [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity).\n\n###### geoproject **-h** geoproject **--help**\n\nOutput usage information.\n\n###### geoproject **-V** geoproject **--version**\n\nOutput the version number.\n\n###### geoproject **-o** *file* geoproject **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### geoproject **-p** *value* geoproject **--precision** *value*\n\nReduce the precision for smaller output files. See also [d3.geoQuantize](#geoQuantize).\n\n###### geoproject **-n** geoproject **--newline-delimited**\n\nAccept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line, and generate newline-delimited JSON as output.\n\n###### geoproject **-r** *\\[name=\\]value* geoproject **--require** *\\[name=\\]value*\n\nRequires the specified *module*, making it available for use in any expressions used by this command. The loaded module is available as the symbol *name*. If *name* is not specified, it defaults to *module*. (If *module* is not a valid identifier, you must specify a *name*.) For example, to reproject the world on the [Airocean projection](https://github.com/d3/d3-geo-polygon/blob/main/README.md#geoAirocean):\n\n``` javascript\ngeoproject --require d3=d3-geo-polygon 'd3.geoAirocean()' world.geojson\n```\n\nThe required *module* is resolved relative to the [current working directory](https://nodejs.org/api/process.html#process_process_cwd). If the *module* is not found during normal resolution, the [global npm root](https://docs.npmjs.com/cli/root) is also searched, allowing you to require globally-installed modules from the command line.\n\nMultiple modules can be required by repeating this option.\n\n### geoquantize\n\n###### **geoquantize** \\[*options*…\\] \\[*file*\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geoquantize)\n\nReads the GeoJSON object from the specified input *file* and outputs a new GeoJSON *object* with coordinates reduced to *precision*. Same options as [geoproject](#geoproject).\n\n``` javascript\ngeoquantize us.json --precision 3 \\\n  > us-quantized.json\n```\n\n### geostitch\n\n###### **geostitch** \\[*options*…\\] \\[*file*\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geostitch)\n\nStitches the GeoJSON object in the specified input *file*, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments. The input *object* must have coordinates in longitude and latitude in decimal degrees per [RFC 7946](https://tools.ietf.org/html/rfc7946). [Antimeridian cutting](https://bl.ocks.org/mbostock/3788999), if needed, can then be re-applied after rotating to the desired projection aspect.\n\nSee [geoproject](#geoproject) for an example. See also [d3.geoStitch](#geoStitch).\n\n###### geostitch **-h** geostitch **--help**\n\nOutput usage information.\n\n###### geostitch **-V** geostitch **--version**\n\nOutput the version number.\n\n###### geostitch **-o** *file* geostitch **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### geostitch **-n** geostitch **--newline-delimited**\n\nAccept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line, and generate newline-delimited JSON as output.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo-projection](https://github.com/d3/d3-geo-projection)"
- name: geo2svg
  id: d3-geo-projection#geo2svg
  summary: Converts the specified GeoJSON file to SVG
  belongs_to: geo-projection
  description: |-
    ### geo2svg

    ###### **geo2svg** \[*options…*\] \[*file*\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geo2svg)

    Converts the specified GeoJSON *file* to SVG. With [--newline-delimited](#geo2svg_newline_delimited), each input feature is rendered as a separate [path element](https://www.w3.org/TR/SVG/paths.html); otherwise, a single path element is generated.

    By default, the SVG’s [fill](#geo2svg_fill) is set to none and the [stroke](#geo2svg_stroke) is set to black. The default [point radius](https://github.com/d3/d3-geo/blob/main/README.md#path_pointRadius) is 4.5. To override these values on a per-feature basis, the following [GeoJSON feature](http://geojson.org/geojson-spec.html#feature-objects) properties will be propagated to attributes:

    - fill
    - fill-rule (or fillRule)
    - fill-opacity (or fillOpacity)
    - stroke
    - stroke-width (or strokeWidth)
    - stroke-linecap (or strokeLinecap)
    - stroke-linejoin (or strokeLinejoin)
    - stroke-miterlimit (or strokeMiterlimit)
    - stroke-dasharray (or strokeDasharray)
    - stroke-dashoffset (or strokeDashoffset)
    - stroke-opacity (or strokeOpacity)
    - point-radius (or pointRadius)

    If the feature has an id, the path element will have a corresponding id attribute. If the feature has a *title* property, the path element will have a title element with the corresponding value. For an example of per-feature attributes, see this [California population density map](https://bl.ocks.org/mbostock/fb6c1e5ff700f9713a9dc2f0fd392c35).

    Note: per-feature attributes are most useful in conjunction with [newline-delimited](#geo2svg_newline_delimited) input, as otherwise the generated SVG only has a single path element. To set these properties dynamically, pass the input through [ndjson-map](https://github.com/mbostock/ndjson-cli/blob/main/README.md#map).

    ###### geo2svg **-h** geo2svg **--help**

    Output usage information.

    ###### geo2svg **-V** geo2svg **--version**

    Output the version number.

    ###### geo2svg **-o** *file* geo2svg **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### geo2svg **-w** *value* geo2svg **--width** *value*

    Specify the output width. Defaults to 960.

    ###### geo2svg **-h** *value* geo2svg **--height** *value*

    Specify the output height. Defaults to 500.

    ###### geo2svg **-p** *value* geo2svg **--precision** *value*

    Reduce the precision for smaller output files. Defaults to six digits after the decimal point. See also [d3.geoQuantize](#geoQuantize).

    ###### geo2svg **--fill** *value*

    Specify the default output fill color. Defaults to none.

    ###### geo2svg **--stroke** *value*

    Specify the default output stroke color. Defaults to black.

    ###### geo2svg **--r** *value* geo2svg **--radius** *value*

    Specify the default output point radius. Defaults to 4.5.

    ###### geo2svg **-n** geo2svg **--newline-delimited**

    Accept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line.
- name: geograticule
  id: d3-geo-projection#geograticule
  summary: Generates a GeoJSON graticule
  belongs_to: geo-projection
  description: |-
    ### geograticule

    ###### **geograticule** \[*options*…\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geograticule)

    Generates a GeoJSON graticule. See also [d3.geoGraticule](https://github.com/d3/d3-geo/blob/main/README.md#geoGraticule).

    ###### geograticule **-h** geograticule **--help**

    Output usage information.

    ###### geograticule **-V** geograticule **--version**

    Output the version number.

    ###### geograticule **-o** *file* geograticule **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### geograticule **--extent** *value*

    Sets the graticule’s [extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extent).

    ###### geograticule **--extent-minor** *value*

    Sets the graticule’s [minor extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extentMinor).

    ###### geograticule **--extent-major** *value*

    Sets the graticule’s [major extent](https://github.com/d3/d3-geo/blob/main/README.md#graticule_extentMajor).

    ###### geograticule **--step** *value*

    Sets the graticule’s [step](https://github.com/d3/d3-geo/blob/main/README.md#graticule_step).

    ###### geograticule **--step-minor** *value*

    Sets the graticule’s [minor step](https://github.com/d3/d3-geo/blob/main/README.md#graticule_stepMinor).

    ###### geograticule **--step-major** *value*

    Sets the graticule’s [major setp](https://github.com/d3/d3-geo/blob/main/README.md#graticule_stepMajor).

    ###### geograticule **--precision** *value*

    Sets the graticule’s [precision](https://github.com/d3/d3-geo/blob/main/README.md#graticule_precision).

    ### geoproject
- name: geoproject
  id: d3-geo-projection#geoproject-bin
  summary: Projects the GeoJSON object in the specified input file using the specified projection, outputting a new GeoJSON object with projected coordinates
  belongs_to: geo-projection
  description: |-
    ###### **geoproject** \[*options*…\] *projection* \[*file*\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geoproject)

    Projects the GeoJSON object in the specified input *file* using the specified *projection*, outputting a new GeoJSON *object* with projected coordinates. For example, to project standard [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS_84) input using [d3.geoAlbersUsa](https://github.com/d3/d3-geo/blob/main/README.md#geoAlbersUsa):

    ``` javascript
    geoproject 'd3.geoAlbersUsa()' us.json \
      > us-albers.json
    ```

    For geometry that crosses the antimeridian or surrounds a pole, you will want to pass input through [geostitch](#geostitch-bin) first:

    ``` javascript
    geostitch world.json \
      | geoproject 'd3.geoMercator()' \
      > world-mercator.json
    ```

    Typically, the input coordinates are spherical and the output coordinates are planar, but the *projection* can also be an [arbitrary geometric transformation](https://github.com/d3/d3-geo/blob/main/README.md#transforms). For example, to invert the *y*-axis of a standard [spatial reference system](https://en.wikipedia.org/wiki/Spatial_reference_system) such as [California Albers (EPSG:3310)](http://spatialreference.org/ref/epsg/nad83-california-albers/) and fit it to a 960×500 viewport:

    ``` javascript
    shp2json planar.shp \
      | geoproject 'd3.geoIdentity().reflectY(true).fitSize([960, 500], d)' \
      > planar.json
    ```

    See also [d3.geoProject](#geoProject) and [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity).

    ###### geoproject **-h** geoproject **--help**

    Output usage information.

    ###### geoproject **-V** geoproject **--version**

    Output the version number.

    ###### geoproject **-o** *file* geoproject **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### geoproject **-p** *value* geoproject **--precision** *value*

    Reduce the precision for smaller output files. See also [d3.geoQuantize](#geoQuantize).

    ###### geoproject **-n** geoproject **--newline-delimited**

    Accept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line, and generate newline-delimited JSON as output.

    ###### geoproject **-r** *\[name=\]value* geoproject **--require** *\[name=\]value*

    Requires the specified *module*, making it available for use in any expressions used by this command. The loaded module is available as the symbol *name*. If *name* is not specified, it defaults to *module*. (If *module* is not a valid identifier, you must specify a *name*.) For example, to reproject the world on the [Airocean projection](https://github.com/d3/d3-geo-polygon/blob/main/README.md#geoAirocean):

    ``` javascript
    geoproject --require d3=d3-geo-polygon 'd3.geoAirocean()' world.geojson
    ```

    The required *module* is resolved relative to the [current working directory](https://nodejs.org/api/process.html#process_process_cwd). If the *module* is not found during normal resolution, the [global npm root](https://docs.npmjs.com/cli/root) is also searched, allowing you to require globally-installed modules from the command line.

    Multiple modules can be required by repeating this option.

    ### geoquantize

    ###### **geoquantize** \[*options*…\] \[*file*\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geoquantize)

    Reads the GeoJSON object from the specified input *file* and outputs a new GeoJSON *object* with coordinates reduced to *precision*. Same options as [geoproject](#geoproject).

    ``` javascript
    geoquantize us.json --precision 3 \
      > us-quantized.json
    ```

    ### geostitch
- name: geostitch
  id: d3-geo-projection#geostitch-bin
  summary: Stitches the GeoJSON object in the specified input file, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments
  belongs_to: geo-projection
  description: "###### **geostitch** \\[*options*…\\] \\[*file*\\] · [Source](https://github.com/d3/d3-geo-projection/blob/main/bin/geostitch)\n\nStitches the GeoJSON object in the specified input *file*, removing antimeridian and polar cuts, and replacing straight Cartesian line segments with geodesic segments. The input *object* must have coordinates in longitude and latitude in decimal degrees per [RFC 7946](https://tools.ietf.org/html/rfc7946). [Antimeridian cutting](https://bl.ocks.org/mbostock/3788999), if needed, can then be re-applied after rotating to the desired projection aspect.\n\nSee [geoproject](#geoproject) for an example. See also [d3.geoStitch](#geoStitch).\n\n###### geostitch **-h** geostitch **--help**\n\nOutput usage information.\n\n###### geostitch **-V** geostitch **--version**\n\nOutput the version number.\n\n###### geostitch **-o** *file* geostitch **--out** *file*\n\nSpecify the output file name. Defaults to “-” for stdout.\n\n###### geostitch **-n** geostitch **--newline-delimited**\n\nAccept [newline-delimited JSON](http://ndjson.org/) as input, with one feature per line, and generate newline-delimited JSON as output.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-geo-projection](https://github.com/d3/d3-geo-projection)"
- name: gingery.lobes()
  id: d3-geo-projection#gingery_lobes
  summary: Defaults to 6
  belongs_to: geo-projection
  description: |-
    ###### *gingery*.**lobes**(\[*lobes*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js)

    Defaults to 6.
- name: gingery.radius()
  id: d3-geo-projection#gingery_radius
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *gingery*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/gingery.js)

    Defaults to 30°.
- name: graticule()
  id: d3-geo#_graticule
  summary: Returns a GeoJSON MultiLineString geometry object representing all meridians and parallels for this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    Returns a GeoJSON MultiLineString geometry object representing all meridians and parallels for this graticule.
- name: graticule.extent()
  id: d3-geo#graticule_extent
  summary: If extent is specified, sets the major and minor extents of this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**extent**(\[*extent*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *extent* is specified, sets the major and minor extents of this graticule. If *extent* is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.
- name: graticule.extentMajor()
  id: d3-geo#graticule_extentmajor
  summary: If extent is specified, sets the major extent of this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**extentMajor**(\[*extent*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *extent* is specified, sets the major extent of this graticule. If *extent* is not specified, returns the current major extent, which defaults to ⟨⟨-180°, -90° + ε⟩, ⟨180°, 90° - ε⟩⟩.
- name: graticule.extentMinor()
  id: d3-geo#graticule_extentminor
  summary: If extent is specified, sets the minor extent of this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**extentMinor**(\[*extent*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *extent* is specified, sets the minor extent of this graticule. If *extent* is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.
- name: graticule.lines()
  id: d3-geo#graticule_lines
  summary: Returns an array of GeoJSON LineString geometry objects, one for each meridian or parallel for this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**lines**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    Returns an array of GeoJSON LineString geometry objects, one for each meridian or parallel for this graticule.
- name: graticule.outline()
  id: d3-geo#graticule_outline
  summary: Returns a GeoJSON Polygon geometry object representing the outline of this graticule, i.e
  belongs_to: geo
  description: |-
    ###### *graticule*.**outline**() [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    Returns a GeoJSON Polygon geometry object representing the outline of this graticule, i.e. along the meridians and parallels defining its extent.
- name: graticule.precision()
  id: d3-geo#graticule_precision
  summary: If precision is specified, sets the precision for this graticule, in degrees
  belongs_to: geo
  description: |-
    ###### *graticule*.**precision**(\[*angle*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *precision* is specified, sets the precision for this graticule, in degrees. If *precision* is not specified, returns the current precision, which defaults to 2.5°.
- name: graticule.step()
  id: d3-geo#graticule_step
  summary: If step is specified, sets the major and minor step for this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**step**(\[*step*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *step* is specified, sets the major and minor step for this graticule. If *step* is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.
- name: graticule.stepMajor()
  id: d3-geo#graticule_stepmajor
  summary: If step is specified, sets the major step for this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**stepMajor**(\[*step*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *step* is specified, sets the major step for this graticule. If *step* is not specified, returns the current major step, which defaults to ⟨90°, 360°⟩.
- name: graticule.stepMinor()
  id: d3-geo#graticule_stepminor
  summary: If step is specified, sets the minor step for this graticule
  belongs_to: geo
  description: |-
    ###### *graticule*.**stepMinor**(\[*step*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/graticule.js "Source")

    If *step* is specified, sets the minor step for this graticule. If *step* is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.
- name: hammer.coefficient()
  id: d3-geo-projection#hammer_coefficient
  summary: Defaults to 2
  belongs_to: geo-projection
  description: |-
    ###### *hammer*.**coefficient**(\[*coefficient*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/hammer.js)

    Defaults to 2.
- name: hammerRetroazimuthal.parallel()
  id: d3-geo-projection#hammerretroazimuthal_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *hammerRetroazimuthal*.**parallel**(\[*parallel*\])

    Defaults to 45°.
- name: hcg
  id: d3-hcg
  summary: This module implements the HCG (Hue, Chroma, Grayness) color space
  description: "# d3-hcg\n\nThis module implements the [HCG](https://github.com/acterhd/hcg-color) (Hue, Chroma, Grayness) color space.\n\n## Installing\n\nIf you use NPM, `npm install d3-hcg`. Otherwise, download the [latest release](https://github.com/d3/d3-hcg/releases/latest). You can also load directly from [d3js.org](https://d3js.org) as a [standalone library](https://d3js.org/d3-hcg.v0.0.min.js). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-color.v1.min.js\"></script>\n<script src=\"https://unpkg.com/d3-hcg@0.0\"></script>\n<script>\n\nvar yellow = d3.hcg(\"yellow\"); // {h: 60, c: 1, g: 0, opacity: 1}\n\n</script>\n```\n\n[Try d3-hcg in your browser.](https://tonicdev.com/npm/d3-hcg)\n\n## API Reference\n\n###### d3.**hcg**(*h*, *c*, *g*\\[, *opacity*\\]) d3.**hcg**(*specifier*) d3.**hcg**(*color*) \n\nConstructs a new HCG color. The channel values are exposed as `h`, `c` and `g` properties on the returned instance.\n\nIf *h*, *c* and *g* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HCG color space. See [d3.color](d3-color#color) for examples. If a [*color*](d3-color#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](d3-color#color_rgb) and then converted to HCG.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hcg](https://github.com/d3/d3-hcg)"
- name: healpix.lobes()
  id: d3-geo-projection#healpix_lobes
  summary: If lobes is specified, sets the number of lobes (the parameter H in the literature) and returns this projection
  belongs_to: geo-projection
  description: |-
    ###### *healpix*.**lobes**(\[*lobes*\])

    If *lobes* is specified, sets the number of lobes (the parameter *H* in the literature) and returns this projection. If *lobes* is not specified, returns the current lobe number, which defaults to 4.
- name: hierarchy
  id: d3-hierarchy
  summary: Many datasets are intrinsically hierarchical
  description: "# d3-hierarchy\n\nMany datasets are intrinsically hierarchical. Consider [geographic entities](https://www.census.gov/programs-surveys/geography/guidance/hierarchy.html), such as census blocks, census tracts, counties and states; the command structure of businesses and governments; file systems and software packages. And even non-hierarchical data may be arranged empirically into a hierarchy, as with [*k*-means clustering](https://en.wikipedia.org/wiki/K-means_clustering) or [phylogenetic trees](https://observablehq.com/@mbostock/tree-of-life).\n\nThis module implements several popular techniques for visualizing hierarchical data:\n\n**Node-link diagrams** show topology using discrete marks for nodes and links, such as a circle for each node and a line connecting each parent and child. The [“tidy” tree](#tree) is delightfully compact, while the [dendrogram](#cluster) places leaves at the same level. (These have both polar and Cartesian forms.) [Indented trees](https://observablehq.com/@d3/indented-tree) are useful for interactive browsing.\n\n**Adjacency diagrams** show topology through the relative placement of nodes. They may also encode a quantitative dimension in the area of each node, for example to show revenue or file size. The [“icicle” diagram](#partition) uses rectangles, while the “sunburst” uses annular segments.\n\n**Enclosure diagrams** also use an area encoding, but show topology through containment. A [treemap](#treemap) recursively subdivides area into rectangles. [Circle-packing](#pack) tightly nests circles; this is not as space-efficient as a treemap, but perhaps more readily shows topology.\n\nA good hierarchical visualization facilitates rapid multiscale inference: micro-observations of individual elements and macro-observations of large groups.\n\n## Installing\n\nIf you use npm, `npm install d3-hierarchy`. You can also download the [latest release on GitHub](https://github.com/d3/d3-hierarchy/releases/latest). For vanilla HTML in modern browsers, import d3-hierarchy from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {treemap} from \"https://cdn.skypack.dev/d3-hierarchy@3\";\n\nconst tree = treemap();\n\n</script>\n```\n\nFor legacy environments, you can load d3-hierarchy’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-hierarchy@3\"></script>\n<script>\n\nconst tree = d3.treemap();\n\n</script>\n```\n\n## API Reference\n\n- [Hierarchy](#hierarchy) ([Stratify](#stratify))\n- [Cluster](#cluster)\n- [Tree](#tree)\n- [Treemap](#treemap) ([Treemap Tiling](#treemap-tiling))\n- [Partition](#partition)\n- [Pack](#pack)\n\n### Hierarchy\n\nBefore you can compute a hierarchical layout, you need a root node. If your data is already in a hierarchical format, such as JSON, you can pass it directly to [d3.hierarchy](#hierarchy); otherwise, you can rearrange tabular data, such as comma-separated values (CSV), into a hierarchy using [d3.stratify](#stratify).\n\n###### d3.**hierarchy**(*data*\\[, *children*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/index.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nConstructs a root node from the specified hierarchical *data*. The specified *data* must be an object representing the root node. For example:\n\n``` javascript\n{\n  \"name\": \"Eve\",\n  \"children\": [\n    {\n      \"name\": \"Cain\"\n    },\n    {\n      \"name\": \"Seth\",\n      \"children\": [\n        {\n          \"name\": \"Enos\"\n        },\n        {\n          \"name\": \"Noam\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Abel\"\n    },\n    {\n      \"name\": \"Awan\",\n      \"children\": [\n        {\n          \"name\": \"Enoch\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Azura\"\n    }\n  ]\n}\n```\n\nThe specified *children* accessor function is invoked for each datum, starting with the root *data*, and must return an iterable of data representing the children, if any. If the children accessor is not specified, it defaults to:\n\n``` javascript\nfunction children(d) {\n  return d.children;\n}\n```\n\nIf *data* is a Map, it is implicitly converted to the entry \\[undefined, *data*\\], and the children accessor instead defaults to:\n\n``` javascript\nfunction children(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n```\n\nThis allows you to pass the result of [d3.group](https://github.com/d3/d3-array/blob/main/README.md#group) or [d3.rollup](https://github.com/d3/d3-array/blob/main/README.md#rollup) to d3.hierarchy.\n\nThe returned node and each descendant has the following properties:\n\n- *node*.data - the associated data, as specified to the [constructor](#hierarchy).\n- *node*.depth - zero for the root node, and increasing by one for each descendant generation.\n- *node*.height - zero for leaf nodes, and the greatest distance from any descendant leaf for internal nodes.\n- *node*.parent - the parent node, or null for the root node.\n- *node*.children - an array of child nodes, if any; undefined for leaf nodes.\n- *node*.value - the summed value of the node and its [descendants](#node_descendants); optional, see [*node*.sum](#node_sum) and [*node*.count](#node_count).\n\nThis method can also be used to test if a node is an `instanceof d3.hierarchy` and to extend the node prototype.\n\n###### *node*.**ancestors**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/ancestors.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturns the array of ancestors nodes, starting with this node, then followed by each parent up to the root.\n\n###### *node*.**descendants**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/descendants.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturns the array of descendant nodes, starting with this node, then followed by each child in topological order.\n\n###### *node*.**leaves**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/leaves.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturns the array of leaf nodes in traversal order; leaves are nodes with no children.\n\n###### *node*.**find**(*filter*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/find.js)\n\nReturns the first node in the hierarchy from this *node* for which the specified *filter* returns a truthy value. undefined if no such node is found.\n\n###### *node*.**path**(*target*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/path.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturns the shortest path through the hierarchy from this *node* to the specified *target* node. The path starts at this *node*, ascends to the least common ancestor of this *node* and the *target* node, and then descends to the *target* node. This is particularly useful for [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling).\n\n###### *node*.**links**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/links.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturns an array of links for this *node* and its descendants, where each *link* is an object that defines source and target properties. The source of each link is the parent node, and the target is a child node.\n\n###### *node*.**sum**(*value*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/sum.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nEvaluates the specified *value* function for this *node* and each descendant in [post-order traversal](#node_eachAfter), and returns this *node*. The *node*.value property of each node is set to the numeric value returned by the specified function plus the combined value of all children. The function is passed the node’s data, and must return a non-negative number. The *value* accessor is evaluated for *node* and every descendant, including internal nodes; if you only want leaf nodes to have internal value, then return zero for any node with children. [For example](https://observablehq.com/@d3/treemap-by-count), as an alternative to [*node*.count](#node_count):\n\n``` javascript\nroot.sum(function(d) { return d.value ? 1 : 0; });\n```\n\nYou must call *node*.sum or [*node*.count](#node_count) before invoking a hierarchical layout that requires *node*.value, such as [d3.treemap](#treemap). Since the API supports [method chaining](https://en.wikipedia.org/wiki/Method_chaining), you can invoke *node*.sum and [*node*.sort](#node_sort) before computing the layout, and then subsequently generate an array of all [descendant nodes](#node_descendants) like so:\n\n``` javascript\nvar treemap = d3.treemap()\n    .size([width, height])\n    .padding(2);\n\nvar nodes = treemap(root\n    .sum(function(d) { return d.value; })\n    .sort(function(a, b) { return b.height - a.height || b.value - a.value; }))\n  .descendants();\n```\n\nThis example assumes that the node data has a value field.\n\n###### *node*.**count**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/count.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nComputes the number of leaves under this *node* and assigns it to *node*.value, and similarly for every descendant of *node*. If this *node* is a leaf, its count is one. Returns this *node*. See also [*node*.sum](#node_sum).\n\n###### *node*.**sort**(*compare*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/sort.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nSorts the children of this *node*, if any, and each of this *node*’s descendants’ children, in [pre-order traversal](#node_eachBefore) using the specified *compare* function, and returns this *node*. The specified function is passed two nodes *a* and *b* to compare. If *a* should be before *b*, the function must return a value less than zero; if *b* should be before *a*, the function must return a value greater than zero; otherwise, the relative order of *a* and *b* are not specified. See [*array*.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for more.\n\nUnlike [*node*.sum](#node_sum), the *compare* function is passed two [nodes](#hierarchy) rather than two nodes’ data. For example, if the data has a value property, this sorts nodes by the descending aggregate value of the node and all its descendants, as is recommended for [circle-packing](#pack):\n\n``` javascript\nroot\n    .sum(function(d) { return d.value; })\n    .sort(function(a, b) { return b.value - a.value; });\n```\n\nSimilarly, to sort nodes by descending height (greatest distance from any descendant leaf) and then descending value, as is recommended for [treemaps](#treemap) and [icicles](#partition):\n\n``` javascript\nroot\n    .sum(function(d) { return d.value; })\n    .sort(function(a, b) { return b.height - a.height || b.value - a.value; });\n```\n\nTo sort nodes by descending height and then ascending id, as is recommended for [trees](#tree) and [dendrograms](#cluster):\n\n``` javascript\nroot\n    .sum(function(d) { return d.value; })\n    .sort(function(a, b) { return b.height - a.height || a.id.localeCompare(b.id); });\n```\n\nYou must call *node*.sort before invoking a hierarchical layout if you want the new sort order to affect the layout; see [*node*.sum](#node_sum) for an example.\n\n###### *node*\\[**Symbol.iterator**\\]() [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/iterator.js \"Source\")\n\nReturns an iterator over the *node*’s descendants in breadth-first order. For example:\n\n``` javascript\nfor (const descendant of node) {\n  console.log(descendant);\n}\n```\n\n###### *node*.**each**(*function*\\[, *that*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/each.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nInvokes the specified *function* for *node* and each descendant in [breadth-first order](https://en.wikipedia.org/wiki/Breadth-first_search), such that a given *node* is only visited if all nodes of lesser depth have already been visited, as well as all preceding nodes of the same depth. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.\n\n###### *node*.**eachAfter**(*function*\\[, *that*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/eachAfter.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nInvokes the specified *function* for *node* and each descendant in [post-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#Post-order), such that a given *node* is only visited after all of its descendants have already been visited. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.\n\n###### *node*.**eachBefore**(*function*\\[, *that*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/eachBefore.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)\n\nInvokes the specified *function* for *node* and each descendant in [pre-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order), such that a given *node* is only visited after all of its ancestors have already been visited. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.\n\n###### *node*.**copy**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/index.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)\n\nReturn a deep copy of the subtree starting at this *node*. (The returned deep copy shares the same data, however.) The returned node is the root of a new tree; the returned node’s parent is always null and its depth is always zero.\n\n#### Stratify\n\nConsider the following table of relationships:\n\n| Name  | Parent |\n|-------|--------|\n| Eve   |        |\n| Cain  | Eve    |\n| Seth  | Eve    |\n| Enos  | Seth   |\n| Noam  | Seth   |\n| Abel  | Eve    |\n| Awan  | Eve    |\n| Enoch | Awan   |\n| Azura | Eve    |\n\nThese names are conveniently unique, so we can unambiguously represent the hierarchy as a CSV file:\n\n``` notranslate\nname,parent\nEve,\nCain,Eve\nSeth,Eve\nEnos,Seth\nNoam,Seth\nAbel,Eve\nAwan,Eve\nEnoch,Awan\nAzura,Eve\n```\n\nTo parse the CSV using [d3.csvParse](d3-dsv#csvParse):\n\n``` javascript\nvar table = d3.csvParse(text);\n```\n\nThis returns:\n\n``` javascript\n[\n  {\"name\": \"Eve\",   \"parent\": \"\"},\n  {\"name\": \"Cain\",  \"parent\": \"Eve\"},\n  {\"name\": \"Seth\",  \"parent\": \"Eve\"},\n  {\"name\": \"Enos\",  \"parent\": \"Seth\"},\n  {\"name\": \"Noam\",  \"parent\": \"Seth\"},\n  {\"name\": \"Abel\",  \"parent\": \"Eve\"},\n  {\"name\": \"Awan\",  \"parent\": \"Eve\"},\n  {\"name\": \"Enoch\", \"parent\": \"Awan\"},\n  {\"name\": \"Azura\", \"parent\": \"Eve\"}\n]\n```\n\nTo convert to a hierarchy:\n\n``` javascript\nvar root = d3.stratify()\n    .id(function(d) { return d.name; })\n    .parentId(function(d) { return d.parent; })\n    (table);\n```\n\nThis returns:\n\nThis hierarchy can now be passed to a hierarchical layout, such as [d3.tree](#_tree), for visualization.\n\n###### d3.**stratify**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)\n\nConstructs a new stratify operator with the default settings.\n\n###### *stratify*(*data*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)\n\nGenerates a new hierarchy from the specified tabular *data*.\n\n###### *stratify*.**id**(\\[*id*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)\n\nIf *id* is specified, sets the id accessor to the given function and returns this stratify operator. Otherwise, returns the current id accessor, which defaults to:\n\n``` javascript\nfunction id(d) {\n  return d.id;\n}\n```\n\nThe id accessor is invoked for each element in the input data passed to the [stratify operator](#_stratify), being passed the current datum (*d*) and the current index (*i*). The returned string is then used to identify the node’s relationships in conjunction with the [parent id](#stratify_parentId). For leaf nodes, the id may be undefined; otherwise, the id must be unique. (Null and the empty string are equivalent to undefined.)\n\n###### *stratify*.**parentId**(\\[*parentId*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)\n\nIf *parentId* is specified, sets the parent id accessor to the given function and returns this stratify operator. Otherwise, returns the current parent id accessor, which defaults to:\n\n``` javascript\nfunction parentId(d) {\n  return d.parentId;\n}\n```\n\nThe parent id accessor is invoked for each element in the input data passed to the [stratify operator](#_stratify), being passed the current datum (*d*) and the current index (*i*). The returned string is then used to identify the node’s relationships in conjunction with the [id](#stratify_id). For the root node, the parent id should be undefined. (Null and the empty string are equivalent to undefined.) There must be exactly one root node in the input data, and no circular relationships.\n\n###### *stratify*.**path**(\\[*path*\\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)\n\nIf *path* is specified, sets the path accessor to the given function and returns this stratify operator. Otherwise, returns the current path accessor, which defaults to undefined. If a path accessor is set, the id and parentId arguments are ignored, and a unix-like hierarchy is computed on the slash-delimited strings returned by the path accessor, imputing parent nodes and ids as necessary.\n\n``` javascript\nd3.stratify().path(d => d)([\"a/b\", \"a/c\"]); // nodes with id \"/a\", \"/a/b\", \"/a/c\"\n```\n\n### Cluster\n\nThe **cluster layout** produces [dendrograms](http://en.wikipedia.org/wiki/Dendrogram): node-link diagrams that place leaf nodes of the tree at the same depth. Dendrograms are typically less compact than [tidy trees](#tree), but are useful when all the leaves should be at the same level, such as for hierarchical clustering or [phylogenetic tree diagrams](https://observablehq.com/@mbostock/tree-of-life).\n\n###### d3.**cluster**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/cluster.js), [Examples](https://observablehq.com/@d3/cluster-dendrogram)\n\nCreates a new cluster layout with default settings.\n\n###### *cluster*(*root*)\n\nLays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:\n\n- *node*.x - the *x*-coordinate of the node\n- *node*.y - the *y*-coordinate of the node\n\nThe coordinates *x* and *y* represent an arbitrary coordinate system; for example, you can treat *x* as an angle and *y* as a radius to produce a [radial layout](https://observablehq.com/@d3/radial-dendrogram). You may want to call [*root*.sort](#node_sort) before passing the hierarchy to the cluster layout.\n\n###### *cluster*.**size**(\\[*size*\\])\n\nIf *size* is specified, sets this cluster layout’s size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this cluster layout. If *size* is not specified, returns the current layout size, which defaults to \\[1, 1\\]. A layout size of null indicates that a [node size](#cluster_nodeSize) will be used instead. The coordinates *x* and *y* represent an arbitrary coordinate system; for example, to produce a [radial layout](https://observablehq.com/@d3/radial-dendrogram), a size of \\[360, *radius*\\] corresponds to a breadth of 360° and a depth of *radius*.\n\n###### *cluster*.**nodeSize**(\\[*size*\\])\n\nIf *size* is specified, sets this cluster layout’s node size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this cluster layout. If *size* is not specified, returns the current node size, which defaults to null. A node size of null indicates that a [layout size](#cluster_size) will be used instead. When a node size is specified, the root node is always positioned at ⟨0, 0⟩.\n\n###### *cluster*.**separation**(\\[*separation*\\])\n\nIf *separation* is specified, sets the separation accessor to the specified function and returns this cluster layout. If *separation* is not specified, returns the current separation accessor, which defaults to:\n\n``` javascript\nfunction separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}\n```\n\nThe separation accessor is used to separate neighboring leaves. The separation function is passed two leaves *a* and *b*, and must return the desired separation. The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.\n\n### Tree\n\nThe **tree** layout produces tidy node-link diagrams of trees using the [Reingold–Tilford “tidy” algorithm](http://reingold.co/tidier-drawings.pdf), improved to run in linear time by [Buchheim *et al.*](http://dirk.jivas.de/papers/buchheim02improving.pdf) Tidy trees are typically more compact than [dendrograms](#cluster).\n\n###### d3.**tree**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/tree.js), [Examples](https://observablehq.com/@d3/tidy-tree)\n\nCreates a new tree layout with default settings.\n\n###### *tree*(*root*)\n\nLays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:\n\n- *node*.x - the *x*-coordinate of the node\n- *node*.y - the *y*-coordinate of the node\n\nThe coordinates *x* and *y* represent an arbitrary coordinate system; for example, you can treat *x* as an angle and *y* as a radius to produce a [radial layout](https://observablehq.com/@d3/radial-tidy-tree). You may want to call [*root*.sort](#node_sort) before passing the hierarchy to the tree layout.\n\n###### *tree*.**size**(\\[*size*\\])\n\nIf *size* is specified, sets this tree layout’s size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this tree layout. If *size* is not specified, returns the current layout size, which defaults to \\[1, 1\\]. A layout size of null indicates that a [node size](#tree_nodeSize) will be used instead. The coordinates *x* and *y* represent an arbitrary coordinate system; for example, to produce a [radial layout](https://observablehq.com/@d3/radial-tidy-tree), a size of \\[360, *radius*\\] corresponds to a breadth of 360° and a depth of *radius*.\n\n###### *tree*.**nodeSize**(\\[*size*\\])\n\nIf *size* is specified, sets this tree layout’s node size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this tree layout. If *size* is not specified, returns the current node size, which defaults to null. A node size of null indicates that a [layout size](#tree_size) will be used instead. When a node size is specified, the root node is always positioned at ⟨0, 0⟩.\n\n###### *tree*.**separation**(\\[*separation*\\])\n\nIf *separation* is specified, sets the separation accessor to the specified function and returns this tree layout. If *separation* is not specified, returns the current separation accessor, which defaults to:\n\n``` javascript\nfunction separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}\n```\n\nA variation that is more appropriate for radial layouts reduces the separation gap proportionally to the radius:\n\n``` javascript\nfunction separation(a, b) {\n  return (a.parent == b.parent ? 1 : 2) / a.depth;\n}\n```\n\nThe separation accessor is used to separate neighboring nodes. The separation function is passed two nodes *a* and *b*, and must return the desired separation. The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.\n\n### Treemap\n\nIntroduced by [Ben Shneiderman](http://www.cs.umd.edu/hcil/treemap-history/) in 1991, a **treemap** recursively subdivides area into rectangles according to each node’s associated value. D3’s treemap implementation supports an extensible [tiling method](#treemap_tile): the default [squarified](#treemapSquarify) method seeks to generate rectangles with a [golden](https://en.wikipedia.org/wiki/Golden_ratio) aspect ratio; this offers better readability and size estimation than [slice-and-dice](#treemapSliceDice), which simply alternates between horizontal and vertical subdivision by depth.\n\n###### d3.**treemap**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/index.js), [Examples](https://observablehq.com/@d3/treemap)\n\nCreates a new treemap layout with default settings.\n\n###### *treemap*(*root*)\n\nLays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:\n\n- *node*.x0 - the left edge of the rectangle\n- *node*.y0 - the top edge of the rectangle\n- *node*.x1 - the right edge of the rectangle\n- *node*.y1 - the bottom edge of the rectangle\n\nYou must call [*root*.sum](#node_sum) before passing the hierarchy to the treemap layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.\n\n###### *treemap*.**tile**(\\[*tile*\\])\n\nIf *tile* is specified, sets the [tiling method](#treemap-tiling) to the specified function and returns this treemap layout. If *tile* is not specified, returns the current tiling method, which defaults to [d3.treemapSquarify](#treemapSquarify) with the golden ratio.\n\n###### *treemap*.**size**(\\[*size*\\])\n\nIf *size* is specified, sets this treemap layout’s size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this treemap layout. If *size* is not specified, returns the current size, which defaults to \\[1, 1\\].\n\n###### *treemap*.**round**(\\[*round*\\])\n\nIf *round* is specified, enables or disables rounding according to the given boolean and returns this treemap layout. If *round* is not specified, returns the current rounding state, which defaults to false.\n\n###### *treemap*.**padding**(\\[*padding*\\])\n\nIf *padding* is specified, sets the [inner](#treemap_paddingInner) and [outer](#treemap_paddingOuter) padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current inner padding function.\n\n###### *treemap*.**paddingInner**(\\[*padding*\\])\n\nIf *padding* is specified, sets the inner padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current inner padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The inner padding is used to separate a node’s adjacent children.\n\n###### *treemap*.**paddingOuter**(\\[*padding*\\])\n\nIf *padding* is specified, sets the [top](#treemap_paddingTop), [right](#treemap_paddingRight), [bottom](#treemap_paddingBottom) and [left](#treemap_paddingLeft) padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current top padding function.\n\n###### *treemap*.**paddingTop**(\\[*padding*\\])\n\nIf *padding* is specified, sets the top padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current top padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The top padding is used to separate the top edge of a node from its children.\n\n###### *treemap*.**paddingRight**(\\[*padding*\\])\n\nIf *padding* is specified, sets the right padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current right padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The right padding is used to separate the right edge of a node from its children.\n\n###### *treemap*.**paddingBottom**(\\[*padding*\\])\n\nIf *padding* is specified, sets the bottom padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current bottom padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The bottom padding is used to separate the bottom edge of a node from its children.\n\n###### *treemap*.**paddingLeft**(\\[*padding*\\])\n\nIf *padding* is specified, sets the left padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current left padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The left padding is used to separate the left edge of a node from its children.\n\n#### Treemap Tiling\n\nSeveral built-in tiling methods are provided for use with [*treemap*.tile](#treemap_tile).\n\n###### d3.**treemapBinary**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/binary.js), [Examples](https://observablehq.com/@d3/treemap)\n\nRecursively partitions the specified *nodes* into an approximately-balanced binary tree, choosing horizontal partitioning for wide rectangles and vertical partitioning for tall rectangles.\n\n###### d3.**treemapDice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/dice.js), [Examples](https://observablehq.com/@d3/treemap)\n\nDivides the rectangular area specified by *x0*, *y0*, *x1*, *y1* horizontally according the value of each of the specified *node*’s children. The children are positioned in order, starting with the left edge (*x0*) of the given rectangle. If the sum of the children’s values is less than the specified *node*’s value (*i.e.*, if the specified *node* has a non-zero internal value), the remaining empty space will be positioned on the right edge (*x1*) of the given rectangle.\n\n###### d3.**treemapSlice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/slice.js), [Examples](https://observablehq.com/@d3/treemap)\n\nDivides the rectangular area specified by *x0*, *y0*, *x1*, *y1* vertically according the value of each of the specified *node*’s children. The children are positioned in order, starting with the top edge (*y0*) of the given rectangle. If the sum of the children’s values is less than the specified *node*’s value (*i.e.*, if the specified *node* has a non-zero internal value), the remaining empty space will be positioned on the bottom edge (*y1*) of the given rectangle.\n\n###### d3.**treemapSliceDice**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/sliceDice.js), [Examples](https://observablehq.com/@d3/treemap)\n\nIf the specified *node* has odd depth, delegates to [treemapSlice](#treemapSlice); otherwise delegates to [treemapDice](#treemapDice).\n\n###### d3.**treemapSquarify**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/squarify.js), [Examples](https://observablehq.com/@d3/treemap)\n\nImplements the [squarified treemap](https://www.win.tue.nl/~vanwijk/stm.pdf) algorithm by Bruls *et al.*, which seeks to produce rectangles of a given [aspect ratio](#squarify_ratio).\n\n###### d3.**treemapResquarify**(*node*, *x0*, *y0*, *x1*, *y1*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/resquarify.js), [Examples](https://observablehq.com/@d3/animated-treemap)\n\nLike [d3.treemapSquarify](#treemapSquarify), except preserves the topology (node adjacencies) of the previous layout computed by d3.treemapResquarify, if there is one and it used the same [target aspect ratio](#squarify_ratio). This tiling method is good for animating changes to treemaps because it only changes node sizes and not their relative positions, thus avoiding distracting shuffling and occlusion. The downside of a stable update, however, is a suboptimal layout for subsequent updates: only the first layout uses the Bruls *et al.* squarified algorithm.\n\n###### *squarify*.**ratio**(*ratio*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/squarify.js), [Examples](https://observablehq.com/@d3/treemap)\n\nSpecifies the desired aspect ratio of the generated rectangles. The *ratio* must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose *width*:*height* ratio is either 2:1 or 1:2. (However, you can approximately achieve this result by generating a square treemap at different dimensions, and then [stretching the treemap](https://observablehq.com/@d3/stretched-treemap) to the desired aspect ratio.) Furthermore, the specified *ratio* is merely a hint to the tiling algorithm; the rectangles are not guaranteed to have the specified aspect ratio. If not specified, the aspect ratio defaults to the golden ratio, φ = (1 + sqrt(5)) / 2, per [Kong *et al.*](http://vis.stanford.edu/papers/perception-treemaps)\n\n### Partition\n\nThe **partition layout** produces adjacency diagrams: a space-filling variant of a node-link tree diagram. Rather than drawing a link between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or rectangles), and their placement relative to other nodes reveals their position in the hierarchy. The size of the nodes encodes a quantitative dimension that would be difficult to show in a node-link diagram.\n\n###### d3.**partition**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/partition.js), [Examples](https://observablehq.com/@d3/icicle)\n\nCreates a new partition layout with the default settings.\n\n###### *partition*(*root*)\n\nLays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:\n\n- *node*.x0 - the left edge of the rectangle\n- *node*.y0 - the top edge of the rectangle\n- *node*.x1 - the right edge of the rectangle\n- *node*.y1 - the bottom edge of the rectangle\n\nYou must call [*root*.sum](#node_sum) before passing the hierarchy to the partition layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.\n\n###### *partition*.**size**(\\[*size*\\])\n\nIf *size* is specified, sets this partition layout’s size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this partition layout. If *size* is not specified, returns the current size, which defaults to \\[1, 1\\].\n\n###### *partition*.**round**(\\[*round*\\])\n\nIf *round* is specified, enables or disables rounding according to the given boolean and returns this partition layout. If *round* is not specified, returns the current rounding state, which defaults to false.\n\n###### *partition*.**padding**(\\[*padding*\\])\n\nIf *padding* is specified, sets the padding to the specified number and returns this partition layout. If *padding* is not specified, returns the current padding, which defaults to zero. The padding is used to separate a node’s adjacent children.\n\n### Pack\n\nEnclosure diagrams use containment (nesting) to represent a hierarchy. The size of the leaf circles encodes a quantitative dimension of the data. The enclosing circles show the approximate cumulative size of each subtree, but due to wasted space there is some distortion; only the leaf nodes can be compared accurately. Although [circle packing](http://en.wikipedia.org/wiki/Circle_packing) does not use space as efficiently as a [treemap](#treemap), the “wasted” space more prominently reveals the hierarchical structure.\n\n###### d3.**pack**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/index.js), [Examples](https://observablehq.com/@d3/circle-packing)\n\nCreates a new pack layout with the default settings.\n\n###### *pack*(*root*)\n\nLays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:\n\n- *node*.x - the *x*-coordinate of the circle’s center\n- *node*.y - the *y*-coordinate of the circle’s center\n- *node*.r - the radius of the circle\n\nYou must call [*root*.sum](#node_sum) before passing the hierarchy to the pack layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.\n\n###### *pack*.**radius**(\\[*radius*\\])\n\nIf *radius* is specified, sets the pack layout’s radius accessor to the specified function and returns this pack layout. If *radius* is not specified, returns the current radius accessor, which defaults to null. If the radius accessor is null, the radius of each leaf circle is derived from the leaf *node*.value (computed by [*node*.sum](#node_sum)); the radii are then scaled proportionally to fit the [layout size](#pack_size). If the radius accessor is not null, the radius of each leaf circle is specified exactly by the function.\n\n###### *pack*.**size**(\\[*size*\\])\n\nIf *size* is specified, sets this pack layout’s size to the specified two-element array of numbers \\[*width*, *height*\\] and returns this pack layout. If *size* is not specified, returns the current size, which defaults to \\[1, 1\\].\n\n###### *pack*.**padding**(\\[*padding*\\])\n\nIf *padding* is specified, sets this pack layout’s padding accessor to the specified number or function and returns this pack layout. If *padding* is not specified, returns the current padding accessor, which defaults to the constant zero. When siblings are packed, tangent siblings will be separated by approximately the specified padding; the enclosing parent circle will also be separated from its children by approximately the specified padding. If an [explicit radius](#pack_radius) is not specified, the padding is approximate because a two-pass algorithm is needed to fit within the [layout size](#pack_size): the circles are first packed without padding; a scaling factor is computed and applied to the specified padding; and lastly the circles are re-packed with padding.\n\n###### d3.**packSiblings**(*circles*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/siblings.js)\n\nPacks the specified array of *circles*, each of which must have a *circle*.r property specifying the circle’s radius. Assigns the following properties to each circle:\n\n- *circle*.x - the *x*-coordinate of the circle’s center\n- *circle*.y - the *y*-coordinate of the circle’s center\n\nThe circles are positioned according to the front-chain packing algorithm by [Wang *et al.*](https://dl.acm.org/citation.cfm?id=1124851)\n\n###### d3.**packEnclose**(*circles*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/pack/enclose.js), [Examples](https://observablehq.com/@d3/d3-packenclose)\n\nComputes the [smallest circle](https://en.wikipedia.org/wiki/Smallest-circle_problem) that encloses the specified array of *circles*, each of which must have a *circle*.r property specifying the circle’s radius, and *circle*.x and *circle*.y properties specifying the circle’s center. The enclosing circle is computed using the [Matoušek-Sharir-Welzl algorithm](http://www.inf.ethz.ch/personal/emo/PublFiles/SubexLinProg_ALG16_96.pdf). (See also [Apollonius’ Problem](https://bl.ocks.org/mbostock/751fdd637f4bc2e3f08b).)\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hierarchy](https://github.com/d3/d3-hierarchy)"
- name: hill.ratio()
  id: d3-geo-projection#hill_ratio
  summary: Defaults to 1
  belongs_to: geo-projection
  description: |-
    ###### *hill*.**ratio**(\[*ratio*\])

    Defaults to 1. With a ratio of 0, this projection becomes the [Maurer No. 73](https://observablehq.com/@d3/hill-eucyclic?b=0). As it approaches ∞, the projection converges to the [Eckert IV](#geoEckert4).
- name: hsl.clamp()
  id: d3-color#hsl_clamp
  summary: Returns a new HSL color where the h channel is clamped to the range [0, 360), and the s, l, and opacity channels are clamped to the range [0, 1]
  belongs_to: color
  description: |-
    ###### *hsl*.**clamp**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a new HSL color where the `h` channel is clamped to the range \[0, 360), and the `s`, `l`, and `opacity` channels are clamped to the range \[0, 1\].
- name: hsv
  id: d3-hsv
  summary: This module implements the HSV (Hue, Saturation, Value) color space
  description: "# d3-hsv\n\nThis module implements the [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV) (Hue, Saturation, Value) color space.\n\nFor example, to recreate R’s terrain.colors:\n\n``` javascript\nvar i0 = d3.interpolateHsvLong(d3.hsv(120, 1, 0.65), d3.hsv(60, 1, 0.90)),\n    i1 = d3.interpolateHsvLong(d3.hsv(60, 1, 0.90), d3.hsv(0, 0, 0.95));\n\nfunction interpolateTerrain(t) {\n  return t < 0.5 ? i0(t * 2) : i1((t - 0.5) * 2);\n}\n```\n\n## Installing\n\nIf you use NPM, `npm install d3-hsv`. Otherwise, download the [latest release](https://github.com/d3/d3-hsv/releases/latest). You can also load directly from [d3js.org](https://d3js.org) as a [standalone library](https://d3js.org/d3-hsv.v0.1.min.js). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-color.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-hsv.v0.1.min.js\"></script>\n<script>\n\nvar yellow = d3.hsv(\"yellow\"); // {h: 60, s: 1, v: 1, opacity: 1}\n\n</script>\n```\n\n[Try d3-hsv in your browser.](https://tonicdev.com/npm/d3-hsv)\n\n## API Reference\n\n###### d3.**hsv**(*h*, *s*, *v*\\[, *opacity*\\]) [Source](https://github.com/d3/d3-hsv/blob/master/src/hsv.js \"Source\") d3.**hsv**(*specifier*) d3.**hsv**(*color*) \n\nConstructs a new [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `v` properties on the returned instance.\n\nIf *h*, *s* and *v* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSV color space. See [d3.color](d3-color#color) for examples. If a [*color*](d3-color#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](d3-color#color_rgb) and then converted to HSV.\n\n###### d3.**interpolateHsv**(*a*, *b*) [Source](https://github.com/d3/d3-hsv/blob/master/src/interpolateHsv.js \"Source\") \n\nReturns an HSV color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSV; they will be converted to HSV using [d3.hsv](#hsv). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateHsvLong**(*a*, *b*) [Source](https://github.com/d3/d3-hsv/blob/master/src/interpolateHsv.js \"Source\") \n\nLike [interpolateHsv](#interpolateHsv), but does not use the shortest path between hues.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-hsv](https://github.com/d3/d3-hsv)"
- name: hufnagel.a()
  id: d3-geo-projection#hufnagel_a
  summary: null
  belongs_to: geo-projection
  description: '###### *hufnagel*.**a**(\[*a*\])'
- name: hufnagel.b()
  id: d3-geo-projection#hufnagel_b
  summary: null
  belongs_to: geo-projection
  description: '###### *hufnagel*.**b**(\[*b*\])'
- name: hufnagel.psiMax()
  id: d3-geo-projection#hufnagel_psimax
  summary: null
  belongs_to: geo-projection
  description: '###### *hufnagel*.**psiMax**(\[*psiMax*\])'
- name: hufnagel.ratio()
  id: d3-geo-projection#hufnagel_ratio
  summary: null
  belongs_to: geo-projection
  description: '###### *hufnagel*.**ratio**(\[*ratio*\])'
- name: imago.k()
  id: d3-geo-polygon#imago_k
  summary: Exponent
  belongs_to: geo-polygon
  description: |-
    ###### *imago*.**k**(\[*k*\])

    Exponent. Useful values include 0.59 (default, minimizes angular distortion of the continents), 0.68 (gives the closest approximation of the Authagraph) and 0.72 (prevents kinks in the graticule).
- name: imago.shift()
  id: d3-geo-polygon#imago_cut
  summary: Horizontal shift
  belongs_to: geo-polygon
  description: |-
    ###### *imago*.**shift**(\[*shift*\])

    Horizontal shift. Defaults to 1.16.
- name: interpolate
  id: d3-interpolate
  summary: This module provides a variety of interpolation methods for blending between two values
  description: "# d3-interpolate\n\nThis module provides a variety of interpolation methods for blending between two values. Values may be numbers, colors, strings, arrays, or even deeply-nested objects. For example:\n\n``` javascript\nconst i = d3.interpolateNumber(10, 20);\ni(0.0); // 10\ni(0.2); // 12\ni(0.5); // 15\ni(1.0); // 20\n```\n\nThe returned function `i` is called an *interpolator*. Given a starting value *a* and an ending value *b*, it takes a parameter *t* in the domain \\[0, 1\\] and returns the corresponding interpolated value between *a* and *b*. An interpolator typically returns a value equivalent to *a* at *t* = 0 and a value equivalent to *b* at *t* = 1.\n\nYou can interpolate more than just numbers. To find the perceptual midpoint between steelblue and brown:\n\n``` javascript\nd3.interpolateLab(\"steelblue\", \"brown\")(0.5); // \"rgb(142, 92, 109)\"\n```\n\nHere’s a more elaborate example demonstrating type inference used by [interpolate](#interpolate):\n\n``` javascript\nconst i = d3.interpolate({colors: [\"red\", \"blue\"]}, {colors: [\"white\", \"black\"]});\ni(0.0); // {colors: [\"rgb(255, 0, 0)\", \"rgb(0, 0, 255)\"]}\ni(0.5); // {colors: [\"rgb(255, 128, 128)\", \"rgb(0, 0, 128)\"]}\ni(1.0); // {colors: [\"rgb(255, 255, 255)\", \"rgb(0, 0, 0)\"]}\n```\n\nNote that the generic value interpolator detects not only nested objects and arrays, but also color strings and numbers embedded in strings!\n\n## Installing\n\nIf you use npm, `npm install d3-interpolate`. You can also download the [latest release on GitHub](https://github.com/d3/d3-interpolate/releases/latest). For vanilla HTML in modern browsers, import d3-interpolate from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {interpolateRgb} from \"https://cdn.skypack.dev/d3-interpolate@3\";\n\nconst interpolate = interpolateRgb(\"steelblue\", \"brown\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-interpolate’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported. (If using [color interpolation](#color-spaces), also load [d3-color](d3-color).)\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script>\n\nconst interpolate = d3.interpolateRgb(\"steelblue\", \"brown\");\n\n</script>\n```\n\n## API Reference\n\n###### d3.**interpolate**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/value.js), [Examples](https://observablehq.com/@d3/d3-interpolate)\n\nReturns an interpolator between the two arbitrary values *a* and *b*. The interpolator implementation is based on the type of the end value *b*, using the following algorithm:\n\n1.  If *b* is null, undefined or a boolean, use the constant *b*.\n2.  If *b* is a number, use [interpolateNumber](#interpolateNumber).\n3.  If *b* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](#interpolateRgb).\n4.  If *b* is a [date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), use [interpolateDate](#interpolateDate).\n5.  If *b* is a string, use [interpolateString](#interpolateString).\n6.  If *b* is a [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) of numbers, use [interpolateNumberArray](#interpolateNumberArray).\n7.  If *b* is a generic [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray), use [interpolateArray](#interpolateArray).\n8.  If *b* is coercible to a number, use [interpolateNumber](#interpolateNumber).\n9.  Use [interpolateObject](#interpolateObject).\n\nBased on the chosen interpolator, *a* is coerced to the suitable corresponding type.\n\n###### d3.**interpolateNumber**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/number.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumber)\n\nReturns an interpolator between the two numbers *a* and *b*. The returned interpolator is equivalent to:\n\n``` javascript\nfunction interpolator(t) {\n  return a * (1 - t) + b * t;\n}\n```\n\nCaution: avoid interpolating to or from the number zero when the interpolator is used to generate a string. When very small values are stringified, they may be converted to scientific notation, which is an invalid attribute or style property value in older browsers. For example, the number `0.0000001` is converted to the string `\"1e-7\"`. This is particularly noticeable with interpolating opacity. To avoid scientific notation, start or end the transition at 1e-6: the smallest value that is not stringified in scientific notation.\n\n###### d3.**interpolateRound**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/round.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumber)\n\nReturns an interpolator between the two numbers *a* and *b*; the interpolator is similar to [interpolateNumber](#interpolateNumber), except it will round the resulting value to the nearest integer.\n\n###### d3.**interpolateString**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/string.js), [Examples](https://observablehq.com/@d3/d3-interpolatestring)\n\nReturns an interpolator between the two strings *a* and *b*. The string interpolator finds numbers embedded in *a* and *b*, where each number is of the form understood by JavaScript. A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.\n\nFor each number embedded in *b*, the interpolator will attempt to find a corresponding number in *a*. If a corresponding number is found, a numeric interpolator is created using [interpolateNumber](#interpolateNumber). The remaining parts of the string *b* are used as a template: the static parts of the string *b* remain constant for the interpolation, with the interpolated numeric values embedded in the template.\n\nFor example, if *a* is `\"300 12px sans-serif\"`, and *b* is `\"500 36px Comic-Sans\"`, two embedded numbers are found. The remaining static parts (of string *b*) are a space between the two numbers (`\" \"`), and the suffix (`\"px Comic-Sans\"`). The result of the interpolator at *t* = 0.5 is `\"400 24px Comic-Sans\"`.\n\n###### d3.**interpolateDate**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/date.js), [Examples](https://observablehq.com/@d3/d3-interpolatedate)\n\nReturns an interpolator between the two [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) *a* and *b*.\n\nNote: **no defensive copy** of the returned date is created; the same Date instance is returned for every evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).\n\n###### d3.**interpolateArray**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/array.js), [Examples](https://observablehq.com/@d3/d3-interpolateobject)\n\nReturns an interpolator between the two arrays *a* and *b*. If *b* is a typed array (e.g., Float64Array), [interpolateNumberArray](#interpolateNumberArray) is called instead.\n\nInternally, an array template is created that is the same length as *b*. For each element in *b*, if there exists a corresponding element in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such element, the static value from *b* is used in the template. Then, for the given parameter *t*, the template’s embedded interpolators are evaluated. The updated array template is then returned.\n\nFor example, if *a* is the array `[0, 1]` and *b* is the array `[1, 10, 100]`, then the result of the interpolator for *t* = 0.5 is the array `[0.5, 5.5, 100]`.\n\nNote: **no defensive copy** of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).\n\n###### d3.**interpolateNumberArray**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/numberArray.js), [Examples](https://observablehq.com/@d3/d3-interpolatenumberarray)\n\nReturns an interpolator between the two arrays of numbers *a* and *b*. Internally, an array template is created that is the same type and length as *b*. For each element in *b*, if there exists a corresponding element in *a*, the values are directly interpolated in the array template. If there is no such element, the static value from *b* is copied. The updated array template is then returned.\n\nNote: For performance reasons, **no defensive copy** is made of the template array and the arguments *a* and *b*; modifications of these arrays may affect subsequent evaluation of the interpolator.\n\n###### d3.**interpolateObject**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/object.js), [Examples](https://observablehq.com/@d3/d3-interpolateobject)\n\nReturns an interpolator between the two objects *a* and *b*. Internally, an object template is created that has the same properties as *b*. For each property in *b*, if there exists a corresponding property in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such property, the static value from *b* is used in the template. Then, for the given parameter *t*, the template's embedded interpolators are evaluated and the updated object template is then returned.\n\nFor example, if *a* is the object `{x: 0, y: 1}` and *b* is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for *t* = 0.5 is the object `{x: 0.5, y: 5.5, z: 100}`.\n\nObject interpolation is particularly useful for *dataspace interpolation*, where data is interpolated rather than attribute values. For example, you can interpolate an object which describes an arc in a pie chart, and then use [d3.arc](d3-shape#arc) to compute the new SVG path data.\n\nNote: **no defensive copy** of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](d3-transition).\n\n###### d3.**interpolateTransformCss**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/transform/index.js#L62), [Examples](https://observablehq.com/@d3/d3-interpolatetransformcss)\n\nReturns an interpolator between the two 2D CSS transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n\n###### d3.**interpolateTransformSvg**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/transform/index.js#L63), [Examples](https://observablehq.com/@d3/d3-interpolatetransformcss)\n\nReturns an interpolator between the two 2D SVG transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n\n###### d3.**interpolateZoom**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/zoom.js), [Examples](https://observablehq.com/@d3/d3-interpolatezoom)\n\nReturns an interpolator between the two views *a* and *b* of a two-dimensional plane, based on [“Smooth and efficient zooming and panning”](http://www.win.tue.nl/~vanwijk/zoompan.pdf) by Jarke J. van Wijk and Wim A.A. Nuij. Each view is defined as an array of three numbers: *cx*, *cy* and *width*. The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.\n\nThe returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds. This duration is based on the path length of the curved trajectory through *x,y* space. If you want a slower or faster transition, multiply this by an arbitrary scale factor (*V* as described in the original paper).\n\n###### *interpolateZoom*.**rho**(*rho*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/zoom.js)\n\nGiven a [zoom interpolator](#interpolateZoom), returns a new zoom interpolator using the specified curvature *rho*. When *rho* is close to 0, the interpolator is almost linear. The default curvature is sqrt(2).\n\n###### d3.**interpolateDiscrete**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/discrete.js), [Examples](https://observablehq.com/@d3/d3-interpolatediscrete)\n\nReturns a discrete interpolator for the given array of *values*. The returned interpolator maps *t* in \\[0, 1 / *n*) to *values*\\[0\\], *t* in \\[1 / *n*, 2 / *n*) to *values*\\[1\\], and so on, where *n* = *values*.length. In effect, this is a lightweight [quantize scale](d3-scale#quantize-scales) with a fixed domain of \\[0, 1\\].\n\n### Sampling\n\n###### d3.**quantize**(*interpolator*, *n*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/d3-quantize)\n\nReturns *n* uniformly-spaced samples from the specified *interpolator*, where *n* is an integer greater than one. The first sample is always at *t* = 0, and the last sample is always at *t* = 1. This can be useful in generating a fixed number of samples from a given interpolator, such as to derive the range of a [quantize scale](d3-scale#quantize-scales) from a [continuous interpolator](d3-scale-chromatic#interpolateWarm).\n\nCaution: this method will not work with interpolators that do not return defensive copies of their output, such as [d3.interpolateArray](#interpolateArray), [d3.interpolateDate](#interpolateDate) and [d3.interpolateObject](#interpolateObject). For those interpolators, you must wrap the interpolator and create a copy for each returned value.\n\n### Color Spaces\n\n###### d3.**interpolateRgb**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nOr, with a corrected [gamma](#interpolate_gamma) of 2.2:\n\nReturns an RGB color space interpolator between the two colors *a* and *b* with a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in RGB; they will be converted to RGB using [d3.rgb](d3-color#rgb). The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateRgbBasis**(*colors*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js#L54), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to [RGB color space](d3-color#rgb). Implicit control points are generated such that the interpolator returns *colors*\\[0\\] at *t* = 0 and *colors*\\[*colors*.length - 1\\] at *t* = 1. Opacity interpolation is not currently supported. See also [d3.interpolateBasis](#interpolateBasis), and see [d3-scale-chromatic](d3-scale-chromatic) for examples.\n\n###### d3.**interpolateRgbBasisClosed**(*colors*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/rgb.js#L55), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to [RGB color space](d3-color#rgb). The control points are implicitly repeated such that the resulting spline has cyclical C² continuity when repeated around *t* in \\[0,1\\]; this is useful, for example, to create cyclical color scales. Opacity interpolation is not currently supported. See also [d3.interpolateBasisClosed](#interpolateBasisClosed), and see [d3-scale-chromatic](d3-scale-chromatic) for examples.\n\n###### d3.**interpolateHsl**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hsl.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL; they will be converted to HSL using [d3.hsl](d3-color#hsl). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateHslLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hsl.js#L21), [Examples](https://observablehq.com/@d3/working-with-color)\n\nLike [interpolateHsl](#interpolateHsl), but does not use the shortest path between hues.\n\n###### d3.**interpolateLab**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/lab.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns a [CIELAB color space](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in CIELAB; they will be converted to CIELAB using [d3.lab](d3-color#lab). The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateHcl**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hcl.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns a [CIELCh_(ab) color space](https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC) interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in CIELCh_(ab); they will be converted to CIELCh_(ab) using [d3.hcl](d3-color#hcl). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateHclLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hcl.js#L21), [Examples](https://observablehq.com/@d3/working-with-color)\n\nLike [interpolateHcl](#interpolateHcl), but does not use the shortest path between hues.\n\n###### d3.**interpolateCubehelix**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/cubehelix.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nOr, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:\n\nReturns a Cubehelix color space interpolator between the two colors *a* and *b* using a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in Cubehelix; they will be converted to Cubehelix using [d3.cubehelix](d3-color#cubehelix). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n###### d3.**interpolateCubehelixLong**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/cubehelix.js#L29), [Examples](https://observablehq.com/@d3/working-with-color)\n\nOr, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:\n\nLike [interpolateCubehelix](#interpolateCubehelix), but does not use the shortest path between hues.\n\n###### *interpolate*.**gamma**(*gamma*)\n\nGiven that *interpolate* is one of [interpolateRgb](#interpolateRgb), [interpolateCubehelix](#interpolateCubehelix) or [interpolateCubehelixLong](#interpolateCubehelixLong), returns a new interpolator factory of the same type using the specified *gamma*. For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:\n\n``` javascript\nconst interpolator = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\n```\n\nSee Eric Brasseur’s article, [Gamma error in picture scaling](http://www.ericbrasseur.org/gamma.html), for more on gamma correction.\n\n###### d3.**interpolateHue**(*a*, *b*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/hue.js), [Examples](https://observablehq.com/@d3/working-with-color)\n\nReturns an interpolator between the two hue angles *a* and *b*. If either hue is NaN, the opposing value is used. The shortest path between hues is used. The return value of the interpolator is a number in \\[0, 360).\n\n### Splines\n\nWhereas standard interpolators blend from a starting value *a* at *t* = 0 to an ending value *b* at *t* = 1, spline interpolators smoothly blend multiple input values for *t* in \\[0,1\\] using piecewise polynomial functions. Only cubic uniform nonrational [B-splines](https://en.wikipedia.org/wiki/B-spline) are currently supported, also known as basis splines.\n\n###### d3.**interpolateBasis**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/basis.js), [Examples](https://observablehq.com/@d3/d3-interpolatebasis)\n\nReturns a uniform nonrational B-spline interpolator through the specified array of *values*, which must be numbers. Implicit control points are generated such that the interpolator returns *values*\\[0\\] at *t* = 0 and *values*\\[*values*.length - 1\\] at *t* = 1. See also [d3.curveBasis](d3-shape#curveBasis).\n\n###### d3.**interpolateBasisClosed**(*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/basisClosed.js), [Examples](https://observablehq.com/@d3/d3-interpolatebasis)\n\nReturns a uniform nonrational B-spline interpolator through the specified array of *values*, which must be numbers. The control points are implicitly repeated such that the resulting one-dimensional spline has cyclical C² continuity when repeated around *t* in \\[0,1\\]. See also [d3.curveBasisClosed](d3-shape#curveBasisClosed).\n\n### Piecewise\n\n###### d3.**piecewise**(\\[*interpolate*, \\]*values*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/piecewise.js), [Examples](https://observablehq.com/@d3/d3-piecewise)\n\nReturns a piecewise interpolator, composing interpolators for each adjacent pair of *values*. The returned interpolator maps *t* in \\[0, 1 / (*n* - 1)\\] to *interpolate*(*values*\\[0\\], *values*\\[1\\]), *t* in \\[1 / (*n* - 1), 2 / (*n* - 1)\\] to *interpolate*(*values*\\[1\\], *values*\\[2\\]), and so on, where *n* = *values*.length. In effect, this is a lightweight [linear scale](d3-scale#linear-scales). For example, to blend through red, green and blue:\n\n``` javascript\nconst interpolate = d3.piecewise(d3.interpolateRgb.gamma(2.2), [\"red\", \"green\", \"blue\"]);\n```\n\nIf *interpolate* is not specified, defaults to [d3.interpolate](#interpolate).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-interpolate](https://github.com/d3/d3-interpolate)"
- name: interpolate.gamma()
  id: d3-interpolate#interpolate_gamma
  summary: Given that interpolate is one of interpolateRgb, interpolateCubehelix or interpolateCubehelixLong, returns a new interpolator factory of the same type using the specified gamma
  belongs_to: interpolate
  description: |-
    ###### *interpolate*.**gamma**(*gamma*)

    Given that *interpolate* is one of [interpolateRgb](#interpolateRgb), [interpolateCubehelix](#interpolateCubehelix) or [interpolateCubehelixLong](#interpolateCubehelixLong), returns a new interpolator factory of the same type using the specified *gamma*. For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:

    ``` javascript
    const interpolator = d3.interpolateRgb.gamma(2.2)("purple", "orange");
    ```

    See Eric Brasseur’s article, [Gamma error in picture scaling](http://www.ericbrasseur.org/gamma.html), for more on gamma correction.
- name: interpolateZoom.rho()
  id: d3-interpolate#interpolatezoom_rho
  summary: Given a zoom interpolator, returns a new zoom interpolator using the specified curvature rho
  belongs_to: interpolate
  description: |-
    ###### *interpolateZoom*.**rho**(*rho*) · [Source](https://github.com/d3/d3-interpolate/blob/master/src/zoom.js)

    Given a [zoom interpolator](#interpolateZoom), returns a new zoom interpolator using the specified curvature *rho*. When *rho* is close to 0, the interpolator is almost linear. The default curvature is sqrt(2).
- name: interrupted.lobes()
  id: d3-geo-projection#interrupted_lobes
  summary: If lobes is specified, sets the new array of hemilobes and returns this projection; see d3.geoInterrupt for details on the format of the hemilobes array
  belongs_to: geo-projection
  description: |-
    ###### *interrupted*.**lobes**(\[*lobes*\]) · [Source](https://github.com/d3/d3-geo-projection/blob/main/src/interrupted/index.js)

    If *lobes* is specified, sets the new array of hemilobes and returns this projection; see [d3.geoInterrupt](#geoInterrupt) for details on the format of the hemilobes array. If *lobes* is not specified, returns the current array of hemilobes.
- name: interval()
  id: d3-time#_interval
  summary: Equivalent to interval.floor, except if date is not specified, it defaults to the current time
  belongs_to: time
  description: |-
    ###### *interval*(\[*date*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Equivalent to [*interval*.floor](#interval_floor), except if *date* is not specified, it defaults to the current time. For example, [d3.timeYear](#timeYear)(*date*) and d3.timeYear.floor(*date*) are equivalent.

    ``` javascript
    monday = d3.timeMonday() // the latest preceeding Monday, local time
    ```
- name: interval.ceil()
  id: d3-time#interval_ceil
  summary: Returns a new date representing the earliest interval boundary date after or equal to date
  belongs_to: time
  description: |-
    ###### *interval*.**ceil**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a new date representing the earliest interval boundary date after or equal to *date*. For example, [d3.timeDay](#timeDay).ceil(*date*) typically returns 12:00 AM local time on the date following the given *date*.

    This method is idempotent: if the specified *date* is already ceilinged to the current interval, a new date with an identical time is returned. Furthermore, the returned date is the maximum expressible value of the associated interval, such that *interval*.ceil(*interval*.ceil(*date*) + 1) returns the following interval boundary date.
- name: interval.count()
  id: d3-time#interval_count
  summary: Returns the number of interval boundaries after start (exclusive) and before or equal to end (inclusive)
  belongs_to: time
  description: |-
    ###### *interval*.**count**(*start*, *end*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns the number of interval boundaries after *start* (exclusive) and before or equal to *end* (inclusive). Note that this behavior is slightly different than [*interval*.range](#interval_range) because its purpose is to return the zero-based number of the specified *end* date relative to the specified *start* date. For example, to compute the current zero-based day-of-year number:

    ``` javascript
    d3.timeDay.count(d3.timeYear(now), now) // 177
    ```

    Likewise, to compute the current zero-based week-of-year number for weeks that start on Sunday:

    ``` javascript
    d3.timeSunday.count(d3.timeYear(now), now) // 25
    ```
- name: interval.every()
  id: d3-time#interval_every
  summary: Returns a filtered view of this interval representing every stepth date
  belongs_to: time
  description: |-
    ###### *interval*.**every**(*step*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a [filtered](#interval_filter) view of this interval representing every *step*th date. The meaning of *step* is dependent on this interval’s parent interval as defined by the field function. For example, [d3.timeMinute](#timeMinute).every(15) returns an interval representing every fifteen minutes, starting on the hour: :00, :15, :30, :45, *etc.* Note that for some intervals, the resulting dates may not be uniformly-spaced; [d3.timeDay](#timeDay)’s parent interval is [d3.timeMonth](#timeMonth), and thus the interval number resets at the start of each month. If *step* is not valid, returns null. If *step* is one, returns this interval.

    This method can be used in conjunction with [*interval*.range](#interval_range) to ensure that two overlapping ranges are consistent. For example, this range contains odd days:

    ``` javascript
    d3.timeDay.every(2).range(new Date(2015, 0, 1), new Date(2015, 0, 7)) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]
    ```

    As does this one:

    ``` javascript
    d3.timeDay.every(2).range(new Date(2015, 0, 2), new Date(2015, 0, 8)) // [2015-01-03T00:00, 2015-01-05T00:00, 2015-01-07T00:00]
    ```

    The returned filtered interval does not support [*interval*.count](#interval_count). See also [*interval*.filter](#interval_filter).
- name: interval.filter()
  id: d3-time#interval_filter
  summary: Returns a new interval that is a filtered subset of this interval using the specified test function
  belongs_to: time
  description: |-
    ###### *interval*.**filter**(*test*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a new interval that is a filtered subset of this interval using the specified *test* function. The *test* function is passed a date and should return true if and only if the specified date should be considered part of the interval. For example, to create an interval that returns the 1st, 11th, 21th and 31th (if it exists) of each month:

    ``` javascript
    d3.timeDay.filter(d => (d.getDate() - 1) % 10 === 0)
    ```

    The returned filtered interval does not support [*interval*.count](#interval_count). See also [*interval*.every](#interval_every).
- name: interval.floor()
  id: d3-time#interval_floor
  summary: Returns a new date representing the latest interval boundary date before or equal to date
  belongs_to: time
  description: |-
    ###### *interval*.**floor**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a new date representing the latest interval boundary date before or equal to *date*. For example, [d3.timeDay](#timeDay).floor(*date*) typically returns 12:00 AM local time on the given *date*.

    This method is idempotent: if the specified *date* is already floored to the current interval, a new date with an identical time is returned. Furthermore, the returned date is the minimum expressible value of the associated interval, such that *interval*.floor(*interval*.floor(*date*) - 1) returns the preceeding interval boundary date.

    Note that the `==` and `===` operators do not compare by value with [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects, and thus you cannot use them to tell whether the specified *date* has already been floored. Instead, coerce to a number and then compare:

    ``` javascript
    // Returns true if the specified date is a day boundary.
    function isDay(date) {
      return +d3.timeDay.floor(date) === +date;
    }
    ```

    This is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.
- name: interval.offset()
  id: d3-time#interval_offset
  summary: Returns a new date equal to date plus step intervals
  belongs_to: time
  description: |-
    ###### *interval*.**offset**(*date*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a new date equal to *date* plus *step* intervals. If *step* is not specified it defaults to 1. If *step* is negative, then the returned date will be before the specified *date*; if *step* is zero, then a copy of the specified *date* is returned; if *step* is not an integer, it is [floored](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor). This method does not round the specified *date* to the interval. For example, if *date* is today at 5:34 PM, then [d3.timeDay](#timeDay).offset(*date*, 1) returns 5:34 PM tomorrow (even if daylight saving changes!).
- name: interval.range()
  id: d3-time#interval_range
  summary: Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive)
  belongs_to: time
  description: |-
    ###### *interval*.**range**(*start*, *stop*\[, *step*\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns an array of dates representing every interval boundary after or equal to *start* (inclusive) and before *stop* (exclusive). If *step* is specified, then every *step*th boundary will be returned; for example, for the [d3.timeDay](#timeDay) interval a *step* of 2 will return every other day. If *step* is not an integer, it is [floored](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor).

    The first date in the returned array is the earliest boundary after or equal to *start*; subsequent dates are [offset](#interval_offset) by *step* intervals and [floored](#interval_floor). Thus, two overlapping ranges may be consistent. For example, this range contains odd days:

    ``` javascript
    d3.timeDay.range(new Date(2015, 0, 1), new Date(2015, 0, 7), 2) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]
    ```

    While this contains even days:

    ``` javascript
    d3.timeDay.range(new Date(2015, 0, 2), new Date(2015, 0, 8), 2) // [2015-01-02T00:00, 2015-01-04T00:00, 2015-01-06T00:00]
    ```

    To make ranges consistent when a *step* is specified, use [*interval*.every](#interval_every) instead.
- name: interval.round()
  id: d3-time#interval_round
  summary: Returns a new date representing the closest interval boundary date to date
  belongs_to: time
  description: |-
    ###### *interval*.**round**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)

    Returns a new date representing the closest interval boundary date to *date*. For example, [d3.timeDay](#timeDay).round(*date*) typically returns 12:00 AM local time on the given *date* if it is on or before noon, and 12:00 AM of the following day if it is after noon.

    This method is idempotent: if the specified *date* is already rounded to the current interval, a new date with an identical time is returned.
- name: json2csv
  id: d3-dsv#json2csv
  summary: Equivalent to json2dsv
  belongs_to: dsv
  description: |-
    ###### **json2csv** \[*options…*\] \[*file*\]

    Equivalent to [json2dsv](#json2dsv).
- name: json2dsv
  id: d3-dsv#json2dsv
  summary: Converts the specified JSON input file to DSV
  belongs_to: dsv
  description: |-
    ### json2dsv

    ###### **json2dsv** \[*options…*\] \[*file*\]

    Converts the specified JSON input *file* to DSV. If *file* is not specified, defaults to reading from stdin. For example, to convert to JSON to CSV:

    ``` notranslate
    json2csv < example.json > example.csv
    ```

    Or to convert a newline-delimited JSON stream to CSV:

    ``` notranslate
    json2csv -n < example.ndjson > example.csv
    ```

    ###### json2dsv **-h** json2dsv **--help**

    Output usage information.

    ###### json2dsv **-V** json2dsv **--version**

    Output the version number.

    ###### json2dsv **-o** *file* json2dsv **--out** *file*

    Specify the output file name. Defaults to “-” for stdout.

    ###### json2dsv **--input-encoding** *encoding*

    Specify the input character encoding. Defaults to “utf8”.

    ###### json2dsv **-w** *delimiter* json2dsv **--output-delimiter** *delimiter*

    Specify the output delimiter character. Defaults to “,” for writing CSV. (You can enter a tab on the command line by typing ⌃V.)

    ###### json2dsv **--output-encoding** *encoding*

    Specify the output character encoding. Defaults to “utf8”.

    ###### json2dsv **-n** json2dsv **--newline-delimited**

    Read [newline-delimited JSON](https://github.com/mbostock/ndjson-cli) instead of a single JSON array.
- name: json2tsv
  id: d3-dsv#json2tsv
  summary: Equivalent to json2dsv, but the output delimiter defaults to the tab character (\t)
  belongs_to: dsv
  description: "###### **json2tsv** \\[*options…*\\] \\[*file*\\]\n\nEquivalent to [json2dsv](#json2dsv), but the [output delimiter](#json2dsv_output_delimiter) defaults to the tab character (\\t).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-dsv](https://github.com/d3/d3-dsv)"
- name: lagrange.spacing()
  id: d3-geo-projection#lagrange_spacing
  summary: Defaults to 0.5
  belongs_to: geo-projection
  description: |-
    ###### *lagrange*.**spacing**(\[*spacing*\])

    Defaults to 0.5.
- name: line()
  id: d3-shape#_line
  summary: Generates a line for the given array of data
  belongs_to: shape
  description: |-
    ###### *line*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    Generates a line for the given array of *data*. Depending on this line generator’s associated [curve](#line_curve), the given input *data* may need to be sorted by *x*-value before being passed to the line generator. If the line generator has a [context](#line_context), then the line is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.
- name: line.context()
  id: d3-shape#line_context
  summary: If context is specified, sets the context and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    If *context* is specified, sets the context and returns this line generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated line](#_line) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated line is returned.
- name: line.curve()
  id: d3-shape#line_curve
  summary: If curve is specified, sets the curve factory and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**curve**(\[*curve*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    If *curve* is specified, sets the [curve factory](#curves) and returns this line generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).
- name: line.defined()
  id: d3-shape#line_defined
  summary: If defined is specified, sets the defined accessor to the specified function or boolean and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**defined**(\[*defined*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    If *defined* is specified, sets the defined accessor to the specified function or boolean and returns this line generator. If *defined* is not specified, returns the current defined accessor, which defaults to:

    ``` javascript
    function defined() {
      return true;
    }
    ```

    The default accessor thus assumes that the input data is always defined. When a line is [generated](#_line), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x](#line_x) and [y](#line_y) accessors will subsequently be evaluated and the point will be added to the current line segment. Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point. As a result, the generated line may have several discrete segments. For example:

    Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.
- name: line.digits()
  id: d3-shape#line_digits
  summary: If digits is specified, sets the maximum number of digits after the decimal separator and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**digits**(\[*digits*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js)

    If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this line generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#line_context) is null, as when this line generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).
- name: line.x()
  id: d3-shape#line_x
  summary: If x is specified, sets the x accessor to the specified function or number and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    If *x* is specified, sets the x accessor to the specified function or number and returns this line generator. If *x* is not specified, returns the current x accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```

    When a line is [generated](#_line), the x accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](d3-scale#time-scales) and `y` is a [linear scale](d3-scale#linear-scales):

    ``` javascript
    const data = [
      {date: new Date(2007, 3, 24), value: 93.24},
      {date: new Date(2007, 3, 25), value: 95.35},
      {date: new Date(2007, 3, 26), value: 98.84},
      {date: new Date(2007, 3, 27), value: 99.92},
      {date: new Date(2007, 3, 30), value: 99.80},
      {date: new Date(2007, 4,  1), value: 99.47},
      …
    ];

    const line = d3.line()
        .x(d => x(d.date))
        .y(d => y(d.value));
    ```
- name: line.y()
  id: d3-shape#line_y
  summary: If y is specified, sets the y accessor to the specified function or number and returns this line generator
  belongs_to: shape
  description: |-
    ###### *line*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

    If *y* is specified, sets the y accessor to the specified function or number and returns this line generator. If *y* is not specified, returns the current y accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```

    When a line is [generated](#_line), the y accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default y accessor assumes that the input data are two-element arrays of numbers. See [*line*.x](#line_x) for more information.
- name: lineRadial()
  id: d3-shape#_lineradial
  summary: Equivalent to line
  belongs_to: shape
  description: |-
    ###### *lineRadial*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L4), [Examples](https://observablehq.com/@d3/d3-lineradial)

    Equivalent to [*line*](#_line).
- name: lineRadial.angle()
  id: d3-shape#lineradial_angle
  summary: Equivalent to line.x, except the accessor returns the angle in radians, with 0 at -y (12 o’clock)
  belongs_to: shape
  description: |-
    ###### *lineRadial*.**angle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L7), [Examples](https://observablehq.com/@d3/d3-lineradial)

    Equivalent to [*line*.x](#line_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).
- name: lineRadial.context()
  id: d3-shape#lineradial_context
  summary: Equivalent to line.context
  belongs_to: shape
  description: |-
    ###### *lineRadial*.**context**(\[*context*\])

    Equivalent to [*line*.context](#line_context).

    ### Areas

    The area generator produces an area, as in an area chart. An area is defined by two bounding [lines](#lines), either splines or polylines. Typically, the two lines share the same [*x*-values](#area_x) ([x0](#area_x0) = [x1](#area_x1)), differing only in *y*-value ([y0](#area_y0) and [y1](#area_y1)); most commonly, y0 is defined as a constant representing [zero](http://www.vox.com/2015/11/19/9758062/y-axis-zero-chart). The first line (the *topline*) is defined by x1 and y1 and is rendered first; the second line (the *baseline*) is defined by x0 and y0 and is rendered second, with the points in reverse order. With a [curveLinear](#curveLinear) [curve](#area_curve), this produces a clockwise polygon.
- name: lineRadial.curve()
  id: d3-shape#lineradial_curve
  summary: Equivalent to line.curve
  belongs_to: shape
  description: |-
    ###### *lineRadial*.**curve**(\[*curve*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)

    Equivalent to [*line*.curve](#line_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial lines because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial lines.
- name: lineRadial.defined()
  id: d3-shape#lineradial_defined
  summary: Equivalent to line.defined
  belongs_to: shape
  description: |-
    ###### *lineRadial*.**defined**(\[*defined*\])

    Equivalent to [*line*.defined](#line_defined).
- name: lineRadial.radius()
  id: d3-shape#lineradial_radius
  summary: null
  belongs_to: shape
  description: |-
    ###### *lineRadial*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L8), [Examples](https://observablehq.com/@d3/d3-lineradial)

    Equivalent to [*line*.y](#line_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.
- name: link()
  id: d3-shape#_link
  summary: Generates a link for the given arguments
  belongs_to: shape
  description: |-
    ###### *link*(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Generates a link for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the link generator’s accessor functions along with the `this` object. For example, with the default settings, an object expected:

    ``` javascript
    link({
      source: [100, 100],
      target: [300, 300]
    });
    ```
- name: link.context()
  id: d3-shape#link_context
  summary: If context is specified, sets the context and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *context* is specified, sets the context and returns this link generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated link](#_link) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated link is returned. See also [d3-path](d3-path).
- name: link.digits()
  id: d3-shape#link_digits
  summary: If digits is specified, sets the maximum number of digits after the decimal separator and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**digits**(\[*digits*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this link generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#link_context) is null, as when this link generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).
- name: link.distance()
  id: d3-force#link_distance
  summary: If distance is specified, sets the distance accessor to the specified number or function, re-evaluates the distance accessor for each link, and returns this force
  belongs_to: force
  description: |-
    ###### *link*.**distance**(\[*distance*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    If *distance* is specified, sets the distance accessor to the specified number or function, re-evaluates the distance accessor for each link, and returns this force. If *distance* is not specified, returns the current distance accessor, which defaults to:

    ``` javascript
    function distance() {
      return 30;
    }
    ```

    The distance accessor is invoked for each [link](#link_links), being passed the *link* and its zero-based *index*. The resulting number is then stored internally, such that the distance of each link is only recomputed when the force is initialized or when this method is called with a new *distance*, and not on every application of the force.
- name: link.id()
  id: d3-force#link_id
  summary: If id is specified, sets the node id accessor to the specified function and returns this force
  belongs_to: force
  description: |-
    ###### *link*.**id**(\[*id*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    If *id* is specified, sets the node id accessor to the specified function and returns this force. If *id* is not specified, returns the current node id accessor, which defaults to the numeric *node*.index:

    ``` javascript
    function id(d) {
      return d.index;
    }
    ```

    The default id accessor allows each link’s source and target to be specified as a zero-based index into the [nodes](#simulation_nodes) array. For example:

    ``` javascript
    const nodes = [
      {"id": "Alice"},
      {"id": "Bob"},
      {"id": "Carol"}
    ];

    const links = [
      {"source": 0, "target": 1}, // Alice → Bob
      {"source": 1, "target": 2} // Bob → Carol
    ];
    ```

    Now consider a different id accessor that returns a string:

    ``` javascript
    function id(d) {
      return d.id;
    }
    ```

    With this accessor, you can use named sources and targets:

    ``` javascript
    const nodes = [
      {"id": "Alice"},
      {"id": "Bob"},
      {"id": "Carol"}
    ];

    const links = [
      {"source": "Alice", "target": "Bob"},
      {"source": "Bob", "target": "Carol"}
    ];
    ```

    This is particularly useful when representing graphs in JSON, as JSON does not allow references. See [this example](https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35).

    The id accessor is invoked for each node whenever the force is initialized, as when the [nodes](#simulation_nodes) or [links](#link_links) change, being passed the node and its zero-based index.
- name: link.iterations()
  id: d3-force#link_iterations
  summary: If iterations is specified, sets the number of iterations per application to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *link*.**iterations**(\[*iterations*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    If *iterations* is specified, sets the number of iterations per application to the specified number and returns this force. If *iterations* is not specified, returns the current iteration count which defaults to 1. Increasing the number of iterations greatly increases the rigidity of the constraint and is useful for [complex structures such as lattices](https://observablehq.com/@d3/force-directed-lattice), but also increases the runtime cost to evaluate the force.

    #### Many-Body

    The many-body (or *n*-body) force applies mutually amongst all [nodes](#simulation_nodes). It can be used to simulate gravity (attraction) if the [strength](#manyBody_strength) is positive, or electrostatic charge (repulsion) if the strength is negative. This implementation uses quadtrees and the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) to greatly improve performance; the accuracy can be customized using the [theta](#manyBody_theta) parameter.

    Unlike links, which only affect two linked nodes, the charge force is global: every node affects every other node, even if they are on disconnected subgraphs.
- name: link.links()
  id: d3-force#link_links
  summary: If links is specified, sets the array of links associated with this force, recomputes the distance and strength parameters for each link, and returns this force
  belongs_to: force
  description: |-
    ###### *link*.**links**(\[*links*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    If *links* is specified, sets the array of links associated with this force, recomputes the [distance](#link_distance) and [strength](#link_strength) parameters for each link, and returns this force. If *links* is not specified, returns the current array of links, which defaults to the empty array.

    Each link is an object with the following properties:

    - `source` - the link’s source node; see [*simulation*.nodes](#simulation_nodes)
    - `target` - the link’s target node; see [*simulation*.nodes](#simulation_nodes)
    - `index` - the zero-based index into *links*, assigned by this method

    For convenience, a link’s source and target properties may be initialized using numeric or string identifiers rather than object references; see [*link*.id](#link_id). When the link force is [initialized](#force_initialize) (or re-initialized, as when the nodes or links change), any *link*.source or *link*.target property which is *not* an object is replaced by an object reference to the corresponding *node* with the given identifier.

    If the specified array of *links* is modified, such as when links are added to or removed from the simulation, this method must be called again with the new (or changed) array to notify the force of the change; the force does not make a defensive copy of the specified array.
- name: link.source()
  id: d3-shape#link_source
  summary: If source is specified, sets the source accessor to the specified function and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**source**(\[*source*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *source* is specified, sets the source accessor to the specified function and returns this link generator. If *source* is not specified, returns the current source accessor, which defaults to:

    ``` javascript
    function source(d) {
      return d.source;
    }
    ```
- name: link.strength()
  id: d3-force#link_strength
  summary: If strength is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each link, and returns this force
  belongs_to: force
  description: |-
    ###### *link*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/link.js)

    If *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each link, and returns this force. If *strength* is not specified, returns the current strength accessor, which defaults to:

    ``` javascript
    function strength(link) {
      return 1 / Math.min(count(link.source), count(link.target));
    }
    ```

    Where *count*(*node*) is a function that returns the number of links with the given node as a source or target. This default was chosen because it automatically reduces the strength of links connected to heavily-connected nodes, improving stability.

    The strength accessor is invoked for each [link](#link_links), being passed the *link* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each link is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.
- name: link.target()
  id: d3-shape#link_target
  summary: If target is specified, sets the target accessor to the specified function and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**target**(\[*target*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *target* is specified, sets the target accessor to the specified function and returns this link generator. If *target* is not specified, returns the current target accessor, which defaults to:

    ``` javascript
    function target(d) {
      return d.target;
    }
    ```
- name: link.x()
  id: d3-shape#link_x
  summary: If x is specified, sets the x-accessor to the specified function or number and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *x* is specified, sets the *x*-accessor to the specified function or number and returns this link generator. If *x* is not specified, returns the current *x*-accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```
- name: link.y()
  id: d3-shape#link_y
  summary: If y is specified, sets the y-accessor to the specified function or number and returns this link generator
  belongs_to: shape
  description: |-
    ###### *link*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    If *y* is specified, sets the *y*-accessor to the specified function or number and returns this link generator. If *y* is not specified, returns the current *y*-accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```
- name: linkRadial.angle()
  id: d3-shape#linkradial_angle
  summary: Equivalent to link.x, except the accessor returns the angle in radians, with 0 at -y (12 o’clock)
  belongs_to: shape
  description: |-
    ###### *linkRadial*.**angle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Equivalent to [*link*.x](#link_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).
- name: linkRadial.radius()
  id: d3-shape#linkradial_radius
  summary: Symbols provide a categorical shape encoding as is commonly used in scatterplots
  belongs_to: shape
  description: |-
    ###### *linkRadial*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

    Equivalent to [*link*.y](#link_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

    ### Symbols

    Symbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to move the symbol to a different position.
- name: local.get()
  id: d3-selection#local_get
  summary: Returns the value of this local on the specified node
  belongs_to: selection
  description: |-
    ###### *local*.**get**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)

    Returns the value of this local on the specified *node*. If the *node* does not define this local, returns the value from the nearest ancestor that defines it. Returns undefined if no ancestor defines this local.
- name: local.remove()
  id: d3-selection#local_remove
  summary: Deletes this local’s value from the specified node
  belongs_to: selection
  description: |-
    ###### *local*.**remove**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)

    Deletes this local’s value from the specified *node*. Returns true if the *node* defined this local prior to removal, and false otherwise. If ancestors also define this local, those definitions are unaffected, and thus [*local*.get](#local_get) will still return the inherited value.
- name: local.set()
  id: d3-selection#local_set
  summary: Sets the value of this local on the specified node to the value, and returns the specified value
  belongs_to: selection
  description: |-
    ###### *local*.**set**(*node*, *value*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)

    Sets the value of this local on the specified *node* to the *value*, and returns the specified *value*. This is often performed using [*selection*.each](#selection_each):

    ``` javascript
    selection.each(function(d) { foo.set(this, d.value); });
    ```

    If you are just setting a single variable, consider using [*selection*.property](#selection_property):

    ``` javascript
    selection.property(foo, d => d.value);
    ```
- name: local.toString()
  id: d3-selection#local_tostring
  summary: Returns the automatically-generated identifier for this local
  belongs_to: selection
  description: |-
    ###### *local*.**toString**() · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)

    Returns the automatically-generated identifier for this local. This is the name of the property that is used to store the local’s value on elements, and thus you can also set or get the local’s value using *element*\[*local*\] or by using [*selection*.property](#selection_property).
- name: locale.format()
  id: d3-time-format#locale_format
  summary: Returns a new formatter for the given string specifier
  belongs_to: time-format
  description: |-
    ###### *locale*.**format**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)

    Returns a new formatter for the given string *specifier*. The specifier string may contain the following directives:

    - `%a` - abbreviated weekday name.\*
    - `%A` - full weekday name.\*
    - `%b` - abbreviated month name.\*
    - `%B` - full month name.\*
    - `%c` - the locale’s date and time, such as `%x, %X`.\*
    - `%d` - zero-padded day of the month as a decimal number \[01,31\].
    - `%e` - space-padded day of the month as a decimal number \[ 1,31\]; equivalent to `%_d`.
    - `%f` - microseconds as a decimal number \[000000, 999999\].
    - `%g` - ISO 8601 week-based year without century as a decimal number \[00,99\].
    - `%G` - ISO 8601 week-based year with century as a decimal number.
    - `%H` - hour (24-hour clock) as a decimal number \[00,23\].
    - `%I` - hour (12-hour clock) as a decimal number \[01,12\].
    - `%j` - day of the year as a decimal number \[001,366\].
    - `%m` - month as a decimal number \[01,12\].
    - `%M` - minute as a decimal number \[00,59\].
    - `%L` - milliseconds as a decimal number \[000, 999\].
    - `%p` - either AM or PM.\*
    - `%q` - quarter of the year as a decimal number \[1,4\].
    - `%Q` - milliseconds since UNIX epoch.
    - `%s` - seconds since UNIX epoch.
    - `%S` - second as a decimal number \[00,61\].
    - `%u` - Monday-based (ISO 8601) weekday as a decimal number \[1,7\].
    - `%U` - Sunday-based week of the year as a decimal number \[00,53\].
    - `%V` - ISO 8601 week of the year as a decimal number \[01, 53\].
    - `%w` - Sunday-based weekday as a decimal number \[0,6\].
    - `%W` - Monday-based week of the year as a decimal number \[00,53\].
    - `%x` - the locale’s date, such as `%-m/%-d/%Y`.\*
    - `%X` - the locale’s time, such as `%-I:%M:%S %p`.\*
    - `%y` - year without century as a decimal number \[00,99\].
    - `%Y` - year with century as a decimal number, such as `1999`.
    - `%Z` - time zone offset, such as `-0700`, `-07:00`, `-07`, or `Z`.
    - `%%` - a literal percent sign (`%`).

    Directives marked with an asterisk (\*) may be affected by the [locale definition](#locales).

    For `%U`, all days in a new year preceding the first Sunday are considered to be in week 0. For `%W`, all days in a new year preceding the first Monday are considered to be in week 0. Week numbers are computed using [*interval*.count](https://github.com/d3/d3-time/blob/main/README.md#interval_count). For example, 2015-52 and 2016-00 represent Monday, December 28, 2015, while 2015-53 and 2016-01 represent Monday, January 4, 2016. This differs from the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) specification (`%V`), which uses a more complicated definition!

    For `%V`,`%g` and `%G`, per the [strftime man page](http://man7.org/linux/man-pages/man3/strftime.3.html):

    > In this system, weeks start on a Monday, and are numbered from 01, for the first week, up to 52 or 53, for the last week. Week 1 is the first week where four or more days fall within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday; or, the week that has 4 January in it). If the ISO week number belongs to the previous or next year, that year is used instead.

    The `%` sign indicating a directive may be immediately followed by a padding modifier:

    - `0` - zero-padding
    - `_` - space-padding
    - `-` - disable padding

    If no padding modifier is specified, the default is `0` for all directives except `%e`, which defaults to `_`. (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)

    The returned function formats a specified *[date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)*, returning the corresponding string.

    ``` javascript
    const formatMonth = d3.timeFormat("%B"),
        formatDay = d3.timeFormat("%A"),
        date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)

    formatMonth(date); // "May"
    formatDay(date); // "Thursday"
    ```
- name: locale.format()
  id: d3-format#locale_format
  summary: Returns a new format function for the given string specifier
  belongs_to: format
  description: |-
    ###### *locale*.**format**(*specifier*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js#L18 "Source")

    Returns a new format function for the given string *specifier*. The returned function takes a number as the only argument, and returns a string representing the formatted number. The general form of a specifier is:

    ``` notranslate
    [​[fill]align][sign][symbol][0][width][,][.precision][~][type]
    ```

    The *fill* can be any character. The presence of a fill character is signaled by the *align* character following it, which must be one of the following:

    - `>` - Forces the field to be right-aligned within the available space. (Default behavior).
    - `<` - Forces the field to be left-aligned within the available space.
    - `^` - Forces the field to be centered within the available space.
    - `=` - like `>`, but with any sign and symbol to the left of any padding.

    The *sign* can be:

    - `-` - nothing for zero or positive and a minus sign for negative. (Default behavior.)
    - `+` - a plus sign for zero or positive and a minus sign for negative.
    - `(` - nothing for zero or positive and parentheses for negative.
    - (space) - a space for zero or positive and a minus sign for negative.

    The *symbol* can be:

    - `$` - apply currency symbols per the locale definition.
    - `#` - for binary, octal, or hexadecimal notation, prefix by `0b`, `0o`, or `0x`, respectively.

    The *zero* (`0`) option enables zero-padding; this implicitly sets *fill* to `0` and *align* to `=`. The *width* defines the minimum field width; if not specified, then the width will be determined by the content. The *comma* (`,`) option enables the use of a group separator, such as a comma for thousands.

    Depending on the *type*, the *precision* either indicates the number of digits that follow the decimal point (types `f` and `%`), or the number of significant digits (types `​`, `e`, `g`, `r`, `s` and `p`). If the precision is not specified, it defaults to 6 for all types except `​` (none), which defaults to 12. Precision is ignored for integer formats (types `b`, `o`, `d`, `x`, and `X`) and character data (type `c`). See [precisionFixed](#precisionFixed) and [precisionRound](#precisionRound) for help picking an appropriate precision.

    The `~` option trims insignificant trailing zeros across all format types. This is most commonly used in conjunction with types `r`, `e`, `s` and `%`. For example:

    ``` javascript
    d3.format("s")(1500);  // "1.50000k"
    d3.format("~s")(1500); // "1.5k"
    ```

    The available *type* values are:

    - `e` - exponent notation.
    - `f` - fixed point notation.
    - `g` - either decimal or exponent notation, rounded to significant digits.
    - `r` - decimal notation, rounded to significant digits.
    - `s` - decimal notation with an [SI prefix](#locale_formatPrefix), rounded to significant digits.
    - `%` - multiply by 100, and then decimal notation with a percent sign.
    - `p` - multiply by 100, round to significant digits, and then decimal notation with a percent sign.
    - `b` - binary notation, rounded to integer.
    - `o` - octal notation, rounded to integer.
    - `d` - decimal notation, rounded to integer.
    - `x` - hexadecimal notation, using lower-case letters, rounded to integer.
    - `X` - hexadecimal notation, using upper-case letters, rounded to integer.
    - `c` - character data, for a string of text.

    The type `​` (none) is also supported as shorthand for `~g` (with a default precision of 12 instead of 6), and the type `n` is shorthand for `,g`. For the `g`, `n` and `​` (none) types, decimal notation is used if the resulting string would have *precision* or fewer digits; otherwise, exponent notation is used. For example:

    ``` javascript
    d3.format(".2")(42);  // "42"
    d3.format(".2")(4.2); // "4.2"
    d3.format(".1")(42);  // "4e+1"
    d3.format(".1")(4.2); // "4"
    ```
- name: locale.formatPrefix()
  id: d3-format#locale_formatprefix
  summary: Equivalent to locale.format, except the returned function will convert values to the units of the appropriate SI prefix for the specified numeric reference value before formatting in fixed point notation
  belongs_to: format
  description: |-
    ###### *locale*.**formatPrefix**(*specifier*, *value*) [Source](https://github.com/d3/d3-format/blob/main/src/locale.js#L127 "Source")

    Equivalent to [*locale*.format](#locale_format), except the returned function will convert values to the units of the appropriate [SI prefix](https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes) for the specified numeric reference *value* before formatting in fixed point notation. The following prefixes are supported:

    - `y` - yocto, 10⁻²⁴
    - `z` - zepto, 10⁻²¹
    - `a` - atto, 10⁻¹⁸
    - `f` - femto, 10⁻¹⁵
    - `p` - pico, 10⁻¹²
    - `n` - nano, 10⁻⁹
    - `µ` - micro, 10⁻⁶
    - `m` - milli, 10⁻³
    - `​` (none) - 10⁰
    - `k` - kilo, 10³
    - `M` - mega, 10⁶
    - `G` - giga, 10⁹
    - `T` - tera, 10¹²
    - `P` - peta, 10¹⁵
    - `E` - exa, 10¹⁸
    - `Z` - zetta, 10²¹
    - `Y` - yotta, 10²⁴

    Unlike [*locale*.format](#locale_format) with the `s` format type, this method returns a formatter with a consistent SI prefix, rather than computing the prefix dynamically for each number. In addition, the *precision* for the given *specifier* represents the number of digits past the decimal point (as with `f` fixed point notation), not the number of significant digits. For example:

    ``` javascript
    const f = d3.formatPrefix(",.0", 1e-6);
    f(0.00042); // "420µ"
    f(0.0042); // "4,200µ"
    ```

    This method is useful when formatting multiple numbers in the same units for easy comparison. See [precisionPrefix](#precisionPrefix) for help picking an appropriate precision, and [bl.ocks.org/9764126](http://bl.ocks.org/mbostock/9764126) for an example.
- name: locale.parse()
  id: d3-time-format#locale_parse
  summary: Returns a new parser for the given string specifier
  belongs_to: time-format
  description: |-
    ###### *locale*.**parse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)

    Returns a new parser for the given string *specifier*. The specifier string may contain the same directives as [*locale*.format](#locale_format). The `%d` and `%e` directives are considered equivalent for parsing.

    The returned function parses a specified *string*, returning the corresponding [date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) or null if the string could not be parsed according to this format’s specifier. Parsing is strict: if the specified *string* does not exactly match the associated specifier, this method returns null. For example, if the associated specifier is `%Y-%m-%dT%H:%M:%SZ`, then the string `"2011-07-01T19:15:28Z"` will be parsed as expected, but `"2011-07-01T19:15:28"`, `"2011-07-01 19:15:28"` and `"2011-07-01"` will return null. (Note that the literal `Z` here is different from the time zone offset directive `%Z`.) If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.
- name: locale.utcFormat()
  id: d3-time-format#locale_utcformat
  summary: Equivalent to locale.format, except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time
  belongs_to: time-format
  description: |-
    ###### *locale*.**utcFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)

    Equivalent to [*locale*.format](#locale_format), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.
- name: locale.utcParse()
  id: d3-time-format#locale_utcparse
  summary: Equivalent to locale.parse, except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time
  belongs_to: time-format
  description: |-
    ###### *locale*.**utcParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)

    Equivalent to [*locale*.parse](#locale_parse), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.

    ### Locales
- name: log()
  id: d3-scale#_log
  summary: See continuous
  belongs_to: scale
  description: |-
    ###### *log*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*](#_continuous).
- name: log.base()
  id: d3-scale#log_base
  summary: If base is specified, sets the base for this logarithmic scale to the specified value
  belongs_to: scale
  description: |-
    ###### *log*.**base**(\[*base*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *base* is specified, sets the base for this logarithmic scale to the specified value. If *base* is not specified, returns the current base, which defaults to 10.
- name: log.clamp()
  id: d3-scale#log_clamp
  summary: See continuous.clamp
  belongs_to: scale
  description: |-
    ###### *log*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.clamp](#continuous_clamp).
- name: log.copy()
  id: d3-scale#log_copy
  summary: See continuous.copy
  belongs_to: scale
  description: |-
    ###### *log*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.copy](#continuous_copy).

    #### Symlog Scales

    See [A bi-symmetric log transformation for wide-range data](https://www.researchgate.net/profile/John_Webber4/publication/233967063_A_bi-symmetric_log_transformation_for_wide-range_data/links/0fcfd50d791c85082e000000.pdf) by Webber for more.
- name: log.domain()
  id: d3-scale#log_domain
  summary: See continuous.domain
  belongs_to: scale
  description: |-
    ###### *log*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.domain](#continuous_domain).
- name: log.interpolate()
  id: d3-scale#log_interpolate
  summary: See continuous.interpolate
  belongs_to: scale
  description: |-
    ###### *log*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.interpolate](#continuous_interpolate).
- name: log.invert()
  id: d3-scale#log_invert
  summary: See continuous.invert
  belongs_to: scale
  description: |-
    ###### *log*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.invert](#continuous_invert).
- name: log.nice()
  id: d3-scale#log_nice
  summary: Like continuous.nice, except extends the domain to integer powers of base
  belongs_to: scale
  description: |-
    ###### *log*.**nice**() · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)

    Like [*continuous*.nice](#continuous_nice), except extends the domain to integer powers of [base](#log_base). For example, for a domain of \[0.201479…, 0.996679…\], and base 10, the nice domain is \[0.1, 1\]. If the domain has more than two values, nicing the domain only affects the first and last value.
- name: log.range()
  id: d3-scale#log_range
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *log*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.range](#continuous_range).
- name: log.rangeRound()
  id: d3-scale#log_rangeround
  summary: See continuous.rangeRound
  belongs_to: scale
  description: |-
    ###### *log*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.rangeRound](#continuous_rangeRound).
- name: log.tickFormat()
  id: d3-scale#log_tickformat
  summary: Like continuous.tickFormat, but customized for a log scale
  belongs_to: scale
  description: |-
    ###### *log*.**tickFormat**(\[*count*\[, *specifier*\]\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Like [*continuous*.tickFormat](#continuous_tickFormat), but customized for a log scale. The specified *count* typically has the same value as the count that is used to generate the [tick values](#continuous_ticks). If there are too many ticks, the formatter may return the empty string for some of the tick labels; however, note that the ticks are still shown. To disable filtering, specify a *count* of Infinity. When specifying a count, you may also provide a format *specifier* or format function. For example, to get a tick formatter that will display 20 ticks of a currency, say `log.tickFormat(20, "$,f")`. If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format. This provides a convenient way of specifying a format whose precision will be automatically set by the scale.
- name: log.ticks()
  id: d3-scale#log_ticks
  summary: Like continuous.ticks, but customized for a log scale
  belongs_to: scale
  description: |-
    ###### *log*.**ticks**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Like [*continuous*.ticks](#continuous_ticks), but customized for a log scale. If the [base](#log_base) is an integer, the returned ticks are uniformly spaced within each integer power of base; otherwise, one tick per power of base is returned. The returned ticks are guaranteed to be within the extent of the domain. If the orders of magnitude in the [domain](#log_domain) is greater than *count*, then at most one tick per power is returned. Otherwise, the tick values are unfiltered, but note that you can use [*log*.tickFormat](#log_tickFormat) to filter the display of tick labels. If *count* is not specified, it defaults to 10.
- name: loximuthal.parallel()
  id: d3-geo-projection#loximuthal_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *loximuthal*.**parallel**(\[*parallel*\])

    Defaults to 40°.
- name: manyBody.distanceMax()
  id: d3-force#manybody_distancemax
  summary: If distance is specified, sets the maximum distance between nodes over which this force is considered
  belongs_to: force
  description: |-
    ###### *manyBody*.**distanceMax**(\[*distance*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)

    If *distance* is specified, sets the maximum distance between nodes over which this force is considered. If *distance* is not specified, returns the current maximum distance, which defaults to infinity. Specifying a finite maximum distance improves performance and produces a more localized layout.

    #### Positioning

    The [*x*](#forceX)- and [*y*](#forceY)-positioning forces push nodes towards a desired position along the given dimension with a configurable strength. The [*radial*](#forceRadial) force is similar, except it pushes nodes towards the closest point on a given circle. The strength of the force is proportional to the one-dimensional distance between the node’s position and the target position. While these forces can be used to position individual nodes, they are intended primarily for global forces that apply to all (or most) nodes.
- name: manyBody.distanceMin()
  id: d3-force#manybody_distancemin
  summary: If distance is specified, sets the minimum distance between nodes over which this force is considered
  belongs_to: force
  description: |-
    ###### *manyBody*.**distanceMin**(\[*distance*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)

    If *distance* is specified, sets the minimum distance between nodes over which this force is considered. If *distance* is not specified, returns the current minimum distance, which defaults to 1. A minimum distance establishes an upper bound on the strength of the force between two nearby nodes, avoiding instability. In particular, it avoids an infinitely-strong force if two nodes are exactly coincident; in this case, the direction of the force is random.
- name: manyBody.strength()
  id: d3-force#manybody_strength
  summary: If strength is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *manyBody*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)

    If *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. A positive value causes nodes to attract each other, similar to gravity, while a negative value causes nodes to repel each other, similar to electrostatic charge. If *strength* is not specified, returns the current strength accessor, which defaults to:

    ``` javascript
    function strength() {
      return -30;
    }
    ```

    The strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.
- name: manyBody.theta()
  id: d3-force#manybody_theta
  summary: If theta is specified, sets the Barnes–Hut approximation criterion to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *manyBody*.**theta**(\[*theta*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/manyBody.js)

    If *theta* is specified, sets the Barnes–Hut approximation criterion to the specified number and returns this force. If *theta* is not specified, returns the current value, which defaults to 0.9.

    To accelerate computation, this force implements the [Barnes–Hut approximation](http://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) which takes O(*n* log *n*) per application where *n* is the number of [nodes](#simulation_nodes). For each application, a [quadtree](d3-quadtree) stores the current node positions; then for each node, the combined force of all other nodes on the given node is computed. For a cluster of nodes that is far away, the charge force can be approximated by treating the cluster as a single, larger node. The *theta* parameter determines the accuracy of the approximation: if the ratio *w* / *l* of the width *w* of the quadtree cell to the distance *l* from the node to the cell’s center of mass is less than *theta*, all nodes in the given cell are treated as a single node rather than individually.
- name: map.clear()
  id: d3-collection#map_clear
  summary: Removes all entries from this map
  belongs_to: collection
  description: |-
    ###### *map*.**clear**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L21 "Source")

    Removes all entries from this map.
- name: map.each()
  id: d3-collection#map_each
  summary: Calls the specified function for each entry in this map, passing the entry’s value and key as arguments, followed by the map itself
  belongs_to: collection
  description: |-
    ###### *map*.**each**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L48 "Source")

    Calls the specified *function* for each entry in this map, passing the entry’s value and key as arguments, followed by the map itself. Returns undefined. The iteration order is arbitrary.
- name: map.empty()
  id: d3-collection#map_empty
  summary: Returns true if and only if this map has zero entries
  belongs_to: collection
  description: |-
    ###### *map*.**empty**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L44 "Source")

    Returns true if and only if this map has zero entries.
- name: map.entries()
  id: d3-collection#map_entries
  summary: Returns an array of key-value objects for each entry in this map
  belongs_to: collection
  description: |-
    ###### *map*.**entries**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L34 "Source")

    Returns an array of key-value objects for each entry in this map. The order of the returned entries is arbitrary. Each entry’s key is a string, but the value has arbitrary type.
- name: map.get()
  id: d3-collection#map_get
  summary: Returns the value for the specified key string
  belongs_to: collection
  description: |-
    ###### *map*.**get**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L10 "Source")

    Returns the value for the specified *key* string. If the map does not have an entry for the specified *key*, returns `undefined`.
- name: map.has()
  id: d3-collection#map_has
  summary: Returns true if and only if this map has an entry for the specified key string
  belongs_to: collection
  description: |-
    ###### *map*.**has**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L7 "Source")

    Returns true if and only if this map has an entry for the specified *key* string. Note: the value may be `null` or `undefined`.
- name: map.keys()
  id: d3-collection#map_keys
  summary: Returns an array of string keys for every entry in this map
  belongs_to: collection
  description: |-
    ###### *map*.**keys**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L24 "Source")

    Returns an array of string keys for every entry in this map. The order of the returned keys is arbitrary.
- name: map.remove()
  id: d3-collection#map_remove
  summary: If the map has an entry for the specified key string, removes the entry and returns true
  belongs_to: collection
  description: |-
    ###### *map*.**remove**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L17 "Source")

    If the map has an entry for the specified *key* string, removes the entry and returns true. Otherwise, this method does nothing and returns false.
- name: map.set()
  id: d3-collection#map_set
  summary: Sets the value for the specified key string
  belongs_to: collection
  description: |-
    ###### *map*.**set**(*key*, *value*) [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L13 "Source")

    Sets the *value* for the specified *key* string. If the map previously had an entry for the same *key* string, the old entry is replaced with the new value. Returns the map, allowing chaining. For example:

    ``` javascript
    var map = d3.map()
        .set("foo", 1)
        .set("bar", 2)
        .set("baz", 3);

    map.get("foo"); // 1
    ```
- name: map.size()
  id: d3-collection#map_size
  summary: Returns the number of entries in this map
  belongs_to: collection
  description: |-
    ###### *map*.**size**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L39 "Source")

    Returns the number of entries in this map.

    ### Sets

    Like [ES6 Sets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), but with a few differences:

    - Values are coerced to strings.
    - [set.each](#set_each), not [set.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach). (Also, no *thisArg*.)
    - [set.remove](#set_remove), not [set.delete](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete).
    - [set.size](#set_size) is a method, not a [property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size); also, there’s [set.empty](#set_empty).

    &nbsp;
- name: map.values()
  id: d3-collection#map_values
  summary: Returns an array of values for every entry in this map
  belongs_to: collection
  description: |-
    ###### *map*.**values**() [Source](https://github.com/d3/d3-collection/blob/master/src/map.js#L29 "Source")

    Returns an array of values for every entry in this map. The order of the returned values is arbitrary.
- name: nest.entries()
  id: d3-collection#nest_entries
  summary: Applies the nest operator to the specified array, returning an array of key-values entries
  belongs_to: collection
  description: "###### *nest*.**entries**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L51 \"Source\")\n\nApplies the nest operator to the specified *array*, returning an array of key-values entries. Conceptually, this is similar to applying [*map*.entries](#map_entries) to the associative array returned by [*nest*.map](#nest_map), but it applies to every level of the hierarchy rather than just the first (outermost) level. Each entry in the returned array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another nested array of entries; otherwise, the value is the array of elements filtered from the input *array* that have the given key value.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-collection](https://github.com/d3/d3-collection)"
- name: nest.key()
  id: d3-collection#nest_key
  summary: Registers a new key function
  belongs_to: collection
  description: |-
    ###### *nest*.**key**(*key*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L4 "Source")

    Registers a new *key* function. The *key* function will be invoked for each element in the input array and must return a string identifier to assign the element to its group. Most often, the function is a simple accessor, such as the year and variety accessors above. (Keys functions are *not* passed the input array index.) Each time a key is registered, it is pushed onto the end of the internal array of keys, and the nest operator applies an additional level of nesting.
- name: nest.map()
  id: d3-collection#nest_map
  summary: Applies the nest operator to the specified array, returning a nested map
  belongs_to: collection
  description: |-
    ###### *nest*.**map**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L50 "Source")

    Applies the nest operator to the specified *array*, returning a nested [map](#map). Each entry in the returned map corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another map; otherwise, the value is the array of elements filtered from the input *array* that have the given key value. If no keys are defined, returns the input *array*.
- name: nest.object()
  id: d3-collection#nest_object
  summary: Applies the nest operator to the specified array, returning a nested object
  belongs_to: collection
  description: |-
    ###### *nest*.**object**(*array*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L49 "Source")

    Applies the nest operator to the specified *array*, returning a nested object. Each entry in the returned associative array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another associative array; otherwise, the value is the array of elements filtered from the input *array* that have the given key value.

    Note: this method is unsafe if any of the keys conflict with built-in JavaScript properties, such as `__proto__`. If you cannot guarantee that the keys will be safe, you should use [nest.map](#nest_map) instead.
- name: nest.rollup()
  id: d3-collection#nest_rollup
  summary: Specifies a rollup function to be applied on each group of leaf elements
  belongs_to: collection
  description: |-
    ###### *nest*.**rollup**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L7 "Source")

    Specifies a rollup *function* to be applied on each group of leaf elements. The return value of the rollup function will replace the array of leaf values in either the associative array returned by [*nest*.map](#nest_map) or [*nest*.object](#nest_object); for [*nest*.entries](#nest_entries), it replaces the leaf *entry*.values with *entry*.value. If a [leaf comparator](#nest_sortValues) is specified, the leaf elements are sorted prior to invoking the rollup function.
- name: nest.sortKeys()
  id: d3-collection#nest_sortkeys
  summary: Sorts key values for the current key using the specified comparator function, such as d3.ascending or d3.descending
  belongs_to: collection
  description: |-
    ###### *nest*.**sortKeys**(*comparator*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L5 "Source")

    Sorts key values for the [current key](#nest_key) using the specified *comparator* function, such as [d3.ascending](d3-array#ascending) or [d3.descending](d3-array#descending). If no comparator is specified for the current key, the order in which keys will be returned is undefined. For example, to sort years in ascending order and varieties in descending order:

    ``` javascript
    var entries = d3.nest()
        .key(function(d) { return d.year; }).sortKeys(d3.ascending)
        .key(function(d) { return d.variety; }).sortKeys(d3.descending)
        .entries(yields);
    ```

    Note that this only affects the result of [*nest*.entries](#nest_entries); the order of keys returned by [*nest*.map](#nest_map) and [*nest*.object](#nest_object) is always undefined, regardless of comparator.
- name: nest.sortValues()
  id: d3-collection#nest_sortvalues
  summary: Sorts leaf elements using the specified comparator function, such as d3.ascending or d3.descending
  belongs_to: collection
  description: |-
    ###### *nest*.**sortValues**(*comparator*) [Source](https://github.com/d3/d3-collection/blob/master/src/nest.js#L6 "Source")

    Sorts leaf elements using the specified *comparator* function, such as [d3.ascending](d3-array#ascending) or [d3.descending](d3-array#descending). This is roughly equivalent to sorting the input array before applying the nest operator; however it is typically more efficient as the size of each group is smaller. If no value comparator is specified, elements will be returned in the order they appeared in the input array. This applies to [*nest*.map](#nest_map), [*nest*.entries](#nest_entries) and [*nest*.object](#nest_object).
- name: node()
  id: d3-hierarchy#node_iterator
  summary: Returns an iterator over the node’s descendants in breadth-first order
  belongs_to: hierarchy
  description: |-
    ###### *node*\[**Symbol.iterator**\]() [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/iterator.js "Source")

    Returns an iterator over the *node*’s descendants in breadth-first order. For example:

    ``` javascript
    for (const descendant of node) {
      console.log(descendant);
    }
    ```
- name: node.ancestors()
  id: d3-hierarchy#node_ancestors
  summary: Returns the array of ancestors nodes, starting with this node, then followed by each parent up to the root
  belongs_to: hierarchy
  description: |-
    ###### *node*.**ancestors**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/ancestors.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Returns the array of ancestors nodes, starting with this node, then followed by each parent up to the root.
- name: node.copy()
  id: d3-hierarchy#node_copy
  summary: Return a deep copy of the subtree starting at this node
  belongs_to: hierarchy
  description: |-
    ###### *node*.**copy**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/index.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Return a deep copy of the subtree starting at this *node*. (The returned deep copy shares the same data, however.) The returned node is the root of a new tree; the returned node’s parent is always null and its depth is always zero.
- name: node.count()
  id: d3-hierarchy#node_count
  summary: Computes the number of leaves under this node and assigns it to node.value, and similarly for every descendant of node
  belongs_to: hierarchy
  description: |-
    ###### *node*.**count**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/count.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Computes the number of leaves under this *node* and assigns it to *node*.value, and similarly for every descendant of *node*. If this *node* is a leaf, its count is one. Returns this *node*. See also [*node*.sum](#node_sum).
- name: node.descendants()
  id: d3-hierarchy#node_descendants
  summary: Returns the array of descendant nodes, starting with this node, then followed by each child in topological order
  belongs_to: hierarchy
  description: |-
    ###### *node*.**descendants**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/descendants.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Returns the array of descendant nodes, starting with this node, then followed by each child in topological order.
- name: node.each()
  id: d3-hierarchy#node_each
  summary: Invokes the specified function for node and each descendant in breadth-first order, such that a given node is only visited if all nodes of lesser depth have already been visited, as well as all preceding nodes of the same depth
  belongs_to: hierarchy
  description: |-
    ###### *node*.**each**(*function*\[, *that*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/each.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Invokes the specified *function* for *node* and each descendant in [breadth-first order](https://en.wikipedia.org/wiki/Breadth-first_search), such that a given *node* is only visited if all nodes of lesser depth have already been visited, as well as all preceding nodes of the same depth. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.
- name: node.eachAfter()
  id: d3-hierarchy#node_eachafter
  summary: Invokes the specified function for node and each descendant in post-order traversal, such that a given node is only visited after all of its descendants have already been visited
  belongs_to: hierarchy
  description: |-
    ###### *node*.**eachAfter**(*function*\[, *that*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/eachAfter.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Invokes the specified *function* for *node* and each descendant in [post-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#Post-order), such that a given *node* is only visited after all of its descendants have already been visited. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.
- name: node.eachBefore()
  id: d3-hierarchy#node_eachbefore
  summary: Invokes the specified function for node and each descendant in pre-order traversal, such that a given node is only visited after all of its ancestors have already been visited
  belongs_to: hierarchy
  description: |-
    ###### *node*.**eachBefore**(*function*\[, *that*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/eachBefore.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Invokes the specified *function* for *node* and each descendant in [pre-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order), such that a given *node* is only visited after all of its ancestors have already been visited. The specified function is passed the current *descendant*, the zero-based traversal *index*, and this *node*. If *that* is specified, it is the this context of the callback.
- name: node.find()
  id: d3-hierarchy#node_find
  summary: Returns the first node in the hierarchy from this node for which the specified filter returns a truthy value
  belongs_to: hierarchy
  description: |-
    ###### *node*.**find**(*filter*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/find.js)

    Returns the first node in the hierarchy from this *node* for which the specified *filter* returns a truthy value. undefined if no such node is found.
- name: node.leaves()
  id: d3-hierarchy#node_leaves
  summary: Returns the array of leaf nodes in traversal order; leaves are nodes with no children
  belongs_to: hierarchy
  description: |-
    ###### *node*.**leaves**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/leaves.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Returns the array of leaf nodes in traversal order; leaves are nodes with no children.
- name: node.links()
  id: d3-hierarchy#node_links
  summary: Returns an array of links for this node and its descendants, where each link is an object that defines source and target properties
  belongs_to: hierarchy
  description: |-
    ###### *node*.**links**() · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/links.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Returns an array of links for this *node* and its descendants, where each *link* is an object that defines source and target properties. The source of each link is the parent node, and the target is a child node.
- name: node.path()
  id: d3-hierarchy#node_path
  summary: Returns the shortest path through the hierarchy from this node to the specified target node
  belongs_to: hierarchy
  description: |-
    ###### *node*.**path**(*target*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/path.js), [Examples](https://observablehq.com/@d3/d3-hierarchy)

    Returns the shortest path through the hierarchy from this *node* to the specified *target* node. The path starts at this *node*, ascends to the least common ancestor of this *node* and the *target* node, and then descends to the *target* node. This is particularly useful for [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling).
- name: node.sort()
  id: d3-hierarchy#node_sort
  summary: Sorts the children of this node, if any, and each of this node’s descendants’ children, in pre-order traversal using the specified compare function, and returns this node
  belongs_to: hierarchy
  description: |-
    ###### *node*.**sort**(*compare*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/sort.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Sorts the children of this *node*, if any, and each of this *node*’s descendants’ children, in [pre-order traversal](#node_eachBefore) using the specified *compare* function, and returns this *node*. The specified function is passed two nodes *a* and *b* to compare. If *a* should be before *b*, the function must return a value less than zero; if *b* should be before *a*, the function must return a value greater than zero; otherwise, the relative order of *a* and *b* are not specified. See [*array*.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for more.

    Unlike [*node*.sum](#node_sum), the *compare* function is passed two [nodes](#hierarchy) rather than two nodes’ data. For example, if the data has a value property, this sorts nodes by the descending aggregate value of the node and all its descendants, as is recommended for [circle-packing](#pack):

    ``` javascript
    root
        .sum(function(d) { return d.value; })
        .sort(function(a, b) { return b.value - a.value; });
    ```

    Similarly, to sort nodes by descending height (greatest distance from any descendant leaf) and then descending value, as is recommended for [treemaps](#treemap) and [icicles](#partition):

    ``` javascript
    root
        .sum(function(d) { return d.value; })
        .sort(function(a, b) { return b.height - a.height || b.value - a.value; });
    ```

    To sort nodes by descending height and then ascending id, as is recommended for [trees](#tree) and [dendrograms](#cluster):

    ``` javascript
    root
        .sum(function(d) { return d.value; })
        .sort(function(a, b) { return b.height - a.height || a.id.localeCompare(b.id); });
    ```

    You must call *node*.sort before invoking a hierarchical layout if you want the new sort order to affect the layout; see [*node*.sum](#node_sum) for an example.
- name: node.sum()
  id: d3-hierarchy#node_sum
  summary: Evaluates the specified value function for this node and each descendant in post-order traversal, and returns this node
  belongs_to: hierarchy
  description: |-
    ###### *node*.**sum**(*value*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/hierarchy/sum.js), [Examples](https://observablehq.com/@d3/visiting-a-d3-hierarchy)

    Evaluates the specified *value* function for this *node* and each descendant in [post-order traversal](#node_eachAfter), and returns this *node*. The *node*.value property of each node is set to the numeric value returned by the specified function plus the combined value of all children. The function is passed the node’s data, and must return a non-negative number. The *value* accessor is evaluated for *node* and every descendant, including internal nodes; if you only want leaf nodes to have internal value, then return zero for any node with children. [For example](https://observablehq.com/@d3/treemap-by-count), as an alternative to [*node*.count](#node_count):

    ``` javascript
    root.sum(function(d) { return d.value ? 1 : 0; });
    ```

    You must call *node*.sum or [*node*.count](#node_count) before invoking a hierarchical layout that requires *node*.value, such as [d3.treemap](#treemap). Since the API supports [method chaining](https://en.wikipedia.org/wiki/Method_chaining), you can invoke *node*.sum and [*node*.sort](#node_sort) before computing the layout, and then subsequently generate an array of all [descendant nodes](#node_descendants) like so:

    ``` javascript
    var treemap = d3.treemap()
        .size([width, height])
        .padding(2);

    var nodes = treemap(root
        .sum(function(d) { return d.value; })
        .sort(function(a, b) { return b.height - a.height || b.value - a.value; }))
      .descendants();
    ```

    This example assumes that the node data has a value field.
- name: ordinal()
  id: d3-scale#_ordinal
  summary: Given a value in the input domain, returns the corresponding value in the output range
  belongs_to: scale
  description: |-
    ###### *ordinal*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    Given a *value* in the input [domain](#ordinal_domain), returns the corresponding value in the output [range](#ordinal_range). If the given *value* is not in the scale’s [domain](#ordinal_domain), returns the [unknown](#ordinal_unknown); or, if the unknown value is [implicit](#scaleImplicit) (the default), then the *value* is implicitly added to the domain and the next-available value in the range is assigned to *value*, such that this and subsequent invocations of the scale given the same input *value* return the same output value.
- name: ordinal.copy()
  id: d3-scale#ordinal_copy
  summary: Returns an exact copy of this ordinal scale
  belongs_to: scale
  description: |-
    ###### *ordinal*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    Returns an exact copy of this ordinal scale. Changes to this scale will not affect the returned scale, and vice versa.
- name: ordinal.domain()
  id: d3-scale#ordinal_domain
  summary: If domain is specified, sets the domain to the specified array of values
  belongs_to: scale
  description: |-
    ###### *ordinal*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    If *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first element in the range, the second domain value to the second range value, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to retrieve a value from the range. Thus, an ordinal scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding range value. If *domain* is not specified, this method returns the current domain.

    Setting the domain on an ordinal scale is optional if the [unknown value](#ordinal_unknown) is [implicit](#scaleImplicit) (the default). In this case, the domain will be inferred implicitly from usage by assigning each unique value passed to the scale a new value from the range. Note that an explicit domain is recommended to ensure deterministic behavior, as inferring the domain from usage will be dependent on ordering.
- name: ordinal.range()
  id: d3-scale#ordinal_range
  summary: If range is specified, sets the range of the ordinal scale to the specified array of values
  belongs_to: scale
  description: |-
    ###### *ordinal*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    If *range* is specified, sets the range of the ordinal scale to the specified array of values. The first element in the domain will be mapped to the first element in *range*, the second domain value to the second range value, and so on. If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range. If *range* is not specified, this method returns the current range.
- name: ordinal.unknown()
  id: d3-scale#ordinal_unknown
  summary: If value is specified, sets the output value of the scale for unknown input values and returns this scale
  belongs_to: scale
  description: |-
    ###### *ordinal*.**unknown**(\[*value*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)

    If *value* is specified, sets the output value of the scale for unknown input values and returns this scale. If *value* is not specified, returns the current unknown value, which defaults to [implicit](#scaleImplicit). The implicit value enables implicit domain construction; see [*ordinal*.domain](#ordinal_domain).
- name: pack()
  id: d3-hierarchy#_pack
  summary: You must call root.sum before passing the hierarchy to the pack layout
  belongs_to: hierarchy
  description: |-
    ###### *pack*(*root*)

    Lays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:

    - *node*.x - the *x*-coordinate of the circle’s center
    - *node*.y - the *y*-coordinate of the circle’s center
    - *node*.r - the radius of the circle

    You must call [*root*.sum](#node_sum) before passing the hierarchy to the pack layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.
- name: pack.padding()
  id: d3-hierarchy#pack_padding
  summary: If padding is specified, sets this pack layout’s padding accessor to the specified number or function and returns this pack layout
  belongs_to: hierarchy
  description: |-
    ###### *pack*.**padding**(\[*padding*\])

    If *padding* is specified, sets this pack layout’s padding accessor to the specified number or function and returns this pack layout. If *padding* is not specified, returns the current padding accessor, which defaults to the constant zero. When siblings are packed, tangent siblings will be separated by approximately the specified padding; the enclosing parent circle will also be separated from its children by approximately the specified padding. If an [explicit radius](#pack_radius) is not specified, the padding is approximate because a two-pass algorithm is needed to fit within the [layout size](#pack_size): the circles are first packed without padding; a scaling factor is computed and applied to the specified padding; and lastly the circles are re-packed with padding.
- name: pack.radius()
  id: d3-hierarchy#pack_radius
  summary: If radius is specified, sets the pack layout’s radius accessor to the specified function and returns this pack layout
  belongs_to: hierarchy
  description: |-
    ###### *pack*.**radius**(\[*radius*\])

    If *radius* is specified, sets the pack layout’s radius accessor to the specified function and returns this pack layout. If *radius* is not specified, returns the current radius accessor, which defaults to null. If the radius accessor is null, the radius of each leaf circle is derived from the leaf *node*.value (computed by [*node*.sum](#node_sum)); the radii are then scaled proportionally to fit the [layout size](#pack_size). If the radius accessor is not null, the radius of each leaf circle is specified exactly by the function.
- name: pack.size()
  id: d3-hierarchy#pack_size
  summary: If size is specified, sets this pack layout’s size to the specified two-element array of numbers [width, height] and returns this pack layout
  belongs_to: hierarchy
  description: |-
    ###### *pack*.**size**(\[*size*\])

    If *size* is specified, sets this pack layout’s size to the specified two-element array of numbers \[*width*, *height*\] and returns this pack layout. If *size* is not specified, returns the current size, which defaults to \[1, 1\].
- name: partition()
  id: d3-hierarchy#_partition
  summary: You must call root.sum before passing the hierarchy to the partition layout
  belongs_to: hierarchy
  description: |-
    ###### *partition*(*root*)

    Lays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:

    - *node*.x0 - the left edge of the rectangle
    - *node*.y0 - the top edge of the rectangle
    - *node*.x1 - the right edge of the rectangle
    - *node*.y1 - the bottom edge of the rectangle

    You must call [*root*.sum](#node_sum) before passing the hierarchy to the partition layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.
- name: partition.padding()
  id: d3-hierarchy#partition_padding
  summary: If padding is specified, sets the padding to the specified number and returns this partition layout
  belongs_to: hierarchy
  description: |-
    ###### *partition*.**padding**(\[*padding*\])

    If *padding* is specified, sets the padding to the specified number and returns this partition layout. If *padding* is not specified, returns the current padding, which defaults to zero. The padding is used to separate a node’s adjacent children.
- name: partition.round()
  id: d3-hierarchy#partition_round
  summary: If round is specified, enables or disables rounding according to the given boolean and returns this partition layout
  belongs_to: hierarchy
  description: |-
    ###### *partition*.**round**(\[*round*\])

    If *round* is specified, enables or disables rounding according to the given boolean and returns this partition layout. If *round* is not specified, returns the current rounding state, which defaults to false.
- name: partition.size()
  id: d3-hierarchy#partition_size
  summary: If size is specified, sets this partition layout’s size to the specified two-element array of numbers [width, height] and returns this partition layout
  belongs_to: hierarchy
  description: |-
    ###### *partition*.**size**(\[*size*\])

    If *size* is specified, sets this partition layout’s size to the specified two-element array of numbers \[*width*, *height*\] and returns this partition layout. If *size* is not specified, returns the current size, which defaults to \[1, 1\].
- name: path
  id: d3-path
  summary: The d3-path module lets you take this exact code and additionally render to SVG
  description: "# d3-path\n\nSay you have some code that draws to a 2D canvas:\n\n``` javascript\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\n```\n\nThe d3-path module lets you take this exact code and additionally render to [SVG](http://www.w3.org/TR/SVG/paths.html). It works by [serializing](#path_toString) [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls to [SVG path data](http://www.w3.org/TR/SVG/paths.html#PathData). For example:\n\n``` javascript\nconst context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\n```\n\nNow code you write once can be used with both Canvas (for performance) and SVG (for convenience). For a practical example, see [d3-shape](d3-shape).\n\n## Installing\n\nIf you use npm, `npm install d3-path`. You can also download the [latest release on GitHub](https://github.com/d3/d3-path/releases/latest). In modern browsers, you can import d3-path from jsDelivr:\n\n``` markup\n<script type=\"module\">\n\nimport {path} from \"https://cdn.jsdelivr.net/npm/d3-path@3/+esm\";\n\nconst p = path();\np.moveTo(1, 2);\np.lineTo(3, 4);\np.closePath();\n\n</script>\n```\n\nFor legacy environments, you can load d3-path’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-path@3\"></script>\n<script>\n\nconst path = d3.path();\n\n</script>\n```\n\n## API Reference\n\n###### d3.**path**() · [Source](https://github.com/d3/d3-path/blob/master/src/path.js), [Examples](https://observablehq.com/@d3/d3-path)\n\nConstructs a new path serializer that implements [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods).\n\n###### *path*.**moveTo**(*x*, *y*)\n\nMove to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.moveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-moveto) and SVG’s [“moveto” command](http://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands).\n\n###### *path*.**closePath**()\n\nEnds the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath. Equivalent to [*context*.closePath](http://www.w3.org/TR/2dcontext/#dom-context-2d-closepath) and SVG’s [“closepath” command](http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand).\n\n###### *path*.**lineTo**(*x*, *y*)\n\nDraws a straight line from the current point to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.lineTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-lineto) and SVG’s [“lineto” command](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).\n\n###### *path*.**quadraticCurveTo**(*cpx*, *cpy*, *x*, *y*)\n\nDraws a quadratic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control point ⟨*cpx*, *cpy*⟩. Equivalent to [*context*.quadraticCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto) and SVG’s [quadratic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands).\n\n###### *path*.**bezierCurveTo**(*cpx1*, *cpy1*, *cpx2*, *cpy2*, *x*, *y*)\n\nDraws a cubic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control points ⟨*cpx1*, *cpy1*⟩ and ⟨*cpx2*, *cpy2*⟩. Equivalent to [*context*.bezierCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-beziercurveto) and SVG’s [cubic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands).\n\n###### *path*.**arcTo**(*x1*, *y1*, *x2*, *y2*, *radius*)\n\nDraws a circular arc segment with the specified *radius* that starts tangent to the line between the current point and the specified point ⟨*x1*, *y1*⟩ and ends tangent to the line between the specified points ⟨*x1*, *y1*⟩ and ⟨*x2*, *y2*⟩. If the first tangent point is not equal to the current point, a straight line is drawn between the current point and the first tangent point. Equivalent to [*context*.arcTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).\n\n###### *path*.**arc**(*x*, *y*, *radius*, *startAngle*, *endAngle*\\[, *anticlockwise*\\])\n\nDraws a circular arc segment with the specified center ⟨*x*, *y*⟩, *radius*, *startAngle* and *endAngle*. If *anticlockwise* is true, the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction. If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc. Equivalent to [*context*.arc](http://www.w3.org/TR/2dcontext/#dom-context-2d-arc) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).\n\n###### *path*.**rect**(*x*, *y*, *w*, *h*)\n\nCreates a new subpath containing just the four points ⟨*x*, *y*⟩, ⟨*x* + *w*, *y*⟩, ⟨*x* + *w*, *y* + *h*⟩, ⟨*x*, *y* + *h*⟩, with those four points connected by straight lines, and then marks the subpath as closed. Equivalent to [*context*.rect](http://www.w3.org/TR/2dcontext/#dom-context-2d-rect) and uses SVG’s [“lineto” commands](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).\n\n###### *path*.**toString**()\n\nReturns the string representation of this *path* according to SVG’s [path data specification](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n###### d3.**pathRound**(*digits* = 3) · [Source](https://github.com/d3/d3-path/blob/master/src/path.js), [Examples](https://observablehq.com/@d3/d3-path)\n\nLike [d3.path](#path), except limits the digits after the decimal to the specified number of *digits*.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-path](https://github.com/d3/d3-path)"
- name: path()
  id: d3-geo#_path
  summary: The type Sphere is also supported, which is useful for rendering the outline of the globe; a sphere has no coordinates
  belongs_to: geo
  description: |-
    ###### *path*(*object*\[, *arguments…*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    Renders the given *object*, which may be any GeoJSON feature or geometry object:

    - Point - a single position.
    - MultiPoint - an array of positions.
    - LineString - an array of positions forming a continuous line.
    - MultiLineString - an array of arrays of positions forming several lines.
    - Polygon - an array of arrays of positions forming a polygon (possibly with holes).
    - MultiPolygon - a multidimensional array of positions forming multiple polygons.
    - GeometryCollection - an array of geometry objects.
    - Feature - a feature containing one of the above geometry objects.
    - FeatureCollection - an array of feature objects.

    The type *Sphere* is also supported, which is useful for rendering the outline of the globe; a sphere has no coordinates. Any additional *arguments* are passed along to the [pointRadius](#path_pointRadius) accessor.

    To display multiple features, combine them into a feature collection:

    ``` javascript
    svg.append("path")
        .datum({type: "FeatureCollection", features: features})
        .attr("d", d3.geoPath());
    ```

    Or use multiple path elements:

    ``` javascript
    svg.selectAll("path")
      .data(features)
      .enter().append("path")
        .attr("d", d3.geoPath());
    ```

    Separate path elements are typically slower than a single path element. However, distinct path elements are useful for styling and interaction (e.g., click or mouseover). Canvas rendering (see [*path*.context](#path_context)) is typically faster than SVG, but requires more effort to implement styling and interaction.
- name: path.arc()
  id: d3-path#path_arc
  summary: Draws a circular arc segment with the specified center ⟨x, y⟩, radius, startAngle and endAngle
  belongs_to: path
  description: |-
    ###### *path*.**arc**(*x*, *y*, *radius*, *startAngle*, *endAngle*\[, *anticlockwise*\])

    Draws a circular arc segment with the specified center ⟨*x*, *y*⟩, *radius*, *startAngle* and *endAngle*. If *anticlockwise* is true, the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction. If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc. Equivalent to [*context*.arc](http://www.w3.org/TR/2dcontext/#dom-context-2d-arc) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).
- name: path.arcTo()
  id: d3-path#path_arcto
  summary: Draws a circular arc segment with the specified radius that starts tangent to the line between the current point and the specified point ⟨x1, y1⟩ and ends tangent to the line between the specified points ⟨x1, y1⟩ and ⟨x2, y2⟩. If the first tangent point is not equal to the current point, a straight line is drawn between the current point and the first tangent point
  belongs_to: path
  description: |-
    ###### *path*.**arcTo**(*x1*, *y1*, *x2*, *y2*, *radius*)

    Draws a circular arc segment with the specified *radius* that starts tangent to the line between the current point and the specified point ⟨*x1*, *y1*⟩ and ends tangent to the line between the specified points ⟨*x1*, *y1*⟩ and ⟨*x2*, *y2*⟩. If the first tangent point is not equal to the current point, a straight line is drawn between the current point and the first tangent point. Equivalent to [*context*.arcTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).
- name: path.area()
  id: d3-geo#path_area
  summary: Returns the projected planar area (typically in square pixels) for the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### *path*.**area**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/area.js "Source")

    Returns the projected planar area (typically in square pixels) for the specified GeoJSON *object*. Point, MultiPoint, LineString and MultiLineString geometries have zero area. For Polygon and MultiPolygon geometries, this method first computes the area of the exterior ring, and then subtracts the area of any interior holes. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoArea](#geoArea).
- name: path.bezierCurveTo()
  id: d3-path#path_beziercurveto
  summary: Draws a cubic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control points ⟨cpx1, cpy1⟩ and ⟨cpx2, cpy2⟩. Equivalent to context.bezierCurveTo and SVG’s cubic Bézier curve commands
  belongs_to: path
  description: |-
    ###### *path*.**bezierCurveTo**(*cpx1*, *cpy1*, *cpx2*, *cpy2*, *x*, *y*)

    Draws a cubic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control points ⟨*cpx1*, *cpy1*⟩ and ⟨*cpx2*, *cpy2*⟩. Equivalent to [*context*.bezierCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-beziercurveto) and SVG’s [cubic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands).
- name: path.bounds()
  id: d3-geo#path_bounds
  summary: Returns the projected planar bounding box (typically in pixels) for the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### *path*.**bounds**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/bounds.js "Source")

    Returns the projected planar bounding box (typically in pixels) for the specified GeoJSON *object*. The bounding box is represented by a two-dimensional array: \[\[*x₀*, *y₀*\], \[*x₁*, *y₁*\]\], where *x₀* is the minimum *x*-coordinate, *y₀* is the minimum *y*-coordinate, *x₁* is maximum *x*-coordinate, and *y₁* is the maximum *y*-coordinate. This is handy for, say, zooming in to a particular feature. (Note that in projected planar coordinates, the minimum latitude is typically the maximum *y*-value, and the maximum latitude is typically the minimum *y*-value.) This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoBounds](#geoBounds).
- name: path.centroid()
  id: d3-geo#path_centroid
  summary: Returns the projected planar centroid (typically in pixels) for the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### *path*.**centroid**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/centroid.js "Source")

    Returns the projected planar centroid (typically in pixels) for the specified GeoJSON *object*. This is handy for, say, labeling state or county boundaries, or displaying a symbol map. For example, a [noncontiguous cartogram](https://observablehq.com/@d3/non-contiguous-cartogram) might scale each state around its centroid. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoCentroid](#geoCentroid).
- name: path.closePath()
  id: d3-path#path_closepath
  summary: Ends the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath
  belongs_to: path
  description: |-
    ###### *path*.**closePath**()

    Ends the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath. Equivalent to [*context*.closePath](http://www.w3.org/TR/2dcontext/#dom-context-2d-closepath) and SVG’s [“closepath” command](http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand).
- name: path.context()
  id: d3-geo#path_context
  summary: If context is specified, sets the current render context and returns the path generator
  belongs_to: geo
  description: |-
    ###### *path*.**context**(\[*context*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    If *context* is specified, sets the current render context and returns the path generator. If the *context* is null, then the [path generator](#_path) will return an SVG path string; if the context is non-null, the path generator will instead call methods on the specified context to render geometry. The context must implement the following subset of the [CanvasRenderingContext2D API](https://www.w3.org/TR/2dcontext/#canvasrenderingcontext2d):

    - *context*.beginPath()
    - *context*.moveTo(*x*, *y*)
    - *context*.lineTo(*x*, *y*)
    - *context*.arc(*x*, *y*, *radius*, *startAngle*, *endAngle*)
    - *context*.closePath()

    If a *context* is not specified, returns the current render context which defaults to null.
- name: path.digits()
  id: d3-geo#path_digits
  summary: If digits is specified (as a non-negative number), sets the number of fractional digits for coordinates generated in SVG path strings
  belongs_to: geo
  description: |-
    ###### *path*.**digits**(\[*digits*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    If *digits* is specified (as a non-negative number), sets the number of fractional digits for coordinates generated in SVG path strings. If *projection* is not specified, returns the current number of digits, which defaults to 3.
- name: path.lineTo()
  id: d3-path#path_lineto
  summary: Draws a straight line from the current point to the specified point ⟨x, y⟩. Equivalent to context.lineTo and SVG’s “lineto” command
  belongs_to: path
  description: |-
    ###### *path*.**lineTo**(*x*, *y*)

    Draws a straight line from the current point to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.lineTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-lineto) and SVG’s [“lineto” command](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).
- name: path.measure()
  id: d3-geo#path_measure
  summary: Returns the projected planar length (typically in pixels) for the specified GeoJSON object
  belongs_to: geo
  description: |-
    ###### *path*.**measure**(*object*) [Source](https://github.com/d3/d3-geo/blob/main/src/path/measure.js "Source")

    Returns the projected planar length (typically in pixels) for the specified GeoJSON *object*. Point and MultiPoint geometries have zero length. For Polygon and MultiPolygon geometries, this method computes the summed length of all rings. This method observes any clipping performed by the [projection](#path_projection); see [*projection*.clipAngle](#projection_clipAngle) and [*projection*.clipExtent](#projection_clipExtent). This is the planar equivalent of [d3.geoLength](#geoLength).
- name: path.moveTo()
  id: d3-path#path_moveto
  summary: Move to the specified point ⟨x, y⟩. Equivalent to context.moveTo and SVG’s “moveto” command
  belongs_to: path
  description: |-
    ###### *path*.**moveTo**(*x*, *y*)

    Move to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.moveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-moveto) and SVG’s [“moveto” command](http://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands).
- name: path.pointRadius()
  id: d3-geo#path_pointradius
  summary: If radius is specified, sets the radius used to display Point and MultiPoint geometries to the specified number
  belongs_to: geo
  description: |-
    ###### *path*.**pointRadius**(\[*radius*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    If *radius* is specified, sets the radius used to display Point and MultiPoint geometries to the specified number. If *radius* is not specified, returns the current radius accessor, which defaults to 4.5. While the radius is commonly specified as a number constant, it may also be specified as a function which is computed per feature, being passed the any arguments passed to the [path generator](#_path). For example, if your GeoJSON data has additional properties, you might access those properties inside the radius function to vary the point size; alternatively, you could [d3.symbol](d3-shape#symbols) and a [projection](#geoProjection) for greater flexibility.

    ### Projections

    Projections transform spherical polygonal geometry to planar polygonal geometry. D3 provides implementations of several classes of standard projections:

    - [Azimuthal](#azimuthal-projections)
    - [Composite](#composite-projections)
    - [Conic](#conic-projections)
    - [Cylindrical](#cylindrical-projections)

    For many more projections, see [d3-geo-projection](d3-geo-projection). You can implement [custom projections](#raw-projections) using [d3.geoProjection](#geoProjection) or [d3.geoProjectionMutator](#geoProjectionMutator).
- name: path.projection()
  id: d3-geo#path_projection
  summary: If a projection is specified, sets the current projection to the specified projection
  belongs_to: geo
  description: |-
    ###### *path*.**projection**(\[*projection*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/path/index.js "Source")

    If a *projection* is specified, sets the current projection to the specified projection. If *projection* is not specified, returns the current projection, which defaults to null. The null projection represents the identity transformation: the input geometry is not projected and is instead rendered directly in raw coordinates. This can be useful for fast rendering of [pre-projected geometry](https://bl.ocks.org/mbostock/5557726), or for fast rendering of the equirectangular projection.

    The given *projection* is typically one of D3’s built-in [geographic projections](#projections); however, any object that exposes a [*projection*.stream](#projection_stream) function can be used, enabling the use of [custom projections](https://bl.ocks.org/mbostock/5663666). See D3’s [transforms](#transforms) for more examples of arbitrary geometric transformations.
- name: path.quadraticCurveTo()
  id: d3-path#path_quadraticcurveto
  summary: Draws a quadratic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control point ⟨cpx, cpy⟩. Equivalent to context.quadraticCurveTo and SVG’s quadratic Bézier curve commands
  belongs_to: path
  description: |-
    ###### *path*.**quadraticCurveTo**(*cpx*, *cpy*, *x*, *y*)

    Draws a quadratic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control point ⟨*cpx*, *cpy*⟩. Equivalent to [*context*.quadraticCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto) and SVG’s [quadratic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands).
- name: path.rect()
  id: d3-path#path_rect
  summary: Creates a new subpath containing just the four points ⟨x, y⟩, ⟨x + w, y⟩, ⟨x + w, y + h⟩, ⟨x, y + h⟩, with those four points connected by straight lines, and then marks the subpath as closed
  belongs_to: path
  description: |-
    ###### *path*.**rect**(*x*, *y*, *w*, *h*)

    Creates a new subpath containing just the four points ⟨*x*, *y*⟩, ⟨*x* + *w*, *y*⟩, ⟨*x* + *w*, *y* + *h*⟩, ⟨*x*, *y* + *h*⟩, with those four points connected by straight lines, and then marks the subpath as closed. Equivalent to [*context*.rect](http://www.w3.org/TR/2dcontext/#dom-context-2d-rect) and uses SVG’s [“lineto” commands](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).
- name: path.toString()
  id: d3-path#path_tostring
  summary: Returns the string representation of this path according to SVG’s path data specification
  belongs_to: path
  description: |-
    ###### *path*.**toString**()

    Returns the string representation of this *path* according to SVG’s [path data specification](http://www.w3.org/TR/SVG/paths.html#PathData).
- name: pie()
  id: d3-shape#_pie
  summary: Generates a pie for the given array of data, returning an array of objects representing each datum’s arc angles
  belongs_to: shape
  description: |-
    ###### *pie*(*data*\[, *arguments…*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    Generates a pie for the given array of *data*, returning an array of objects representing each datum’s arc angles. Any additional *arguments* are arbitrary; they are simply propagated to the pie generator’s accessor functions along with the `this` object. The length of the returned array is the same as *data*, and each element *i* in the returned array corresponds to the element *i* in the input data. Each object in the returned array has the following properties:

    - `data` - the input datum; the corresponding element in the input data array.
    - `value` - the numeric [value](#pie_value) of the arc.
    - `index` - the zero-based [sorted index](#pie_sort) of the arc.
    - `startAngle` - the [start angle](#pie_startAngle) of the arc.
    - `endAngle` - the [end angle](#pie_endAngle) of the arc.
    - `padAngle` - the [pad angle](#pie_padAngle) of the arc.

    This representation is designed to work with the arc generator’s default [startAngle](#arc_startAngle), [endAngle](#arc_endAngle) and [padAngle](#arc_padAngle) accessors. The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify angles in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.

    Given a small dataset of numbers, here is how to compute the arc angles to render this data as a pie chart:

    ``` javascript
    const data = [1, 1, 2, 3, 5, 8, 13, 21];
    const arcs = d3.pie()(data);
    ```

    The first pair of parens, `pie()`, [constructs](#pie) a default pie generator. The second, `pie()(data)`, [invokes](#_pie) this generator on the dataset, returning an array of objects:

    ``` javascript
    [
      {"data":  1, "value":  1, "index": 6, "startAngle": 6.050474740247008, "endAngle": 6.166830023713296, "padAngle": 0},
      {"data":  1, "value":  1, "index": 7, "startAngle": 6.166830023713296, "endAngle": 6.283185307179584, "padAngle": 0},
      {"data":  2, "value":  2, "index": 5, "startAngle": 5.817764173314431, "endAngle": 6.050474740247008, "padAngle": 0},
      {"data":  3, "value":  3, "index": 4, "startAngle": 5.468698322915565, "endAngle": 5.817764173314431, "padAngle": 0},
      {"data":  5, "value":  5, "index": 3, "startAngle": 4.886921905584122, "endAngle": 5.468698322915565, "padAngle": 0},
      {"data":  8, "value":  8, "index": 2, "startAngle": 3.956079637853813, "endAngle": 4.886921905584122, "padAngle": 0},
      {"data": 13, "value": 13, "index": 1, "startAngle": 2.443460952792061, "endAngle": 3.956079637853813, "padAngle": 0},
      {"data": 21, "value": 21, "index": 0, "startAngle": 0.000000000000000, "endAngle": 2.443460952792061, "padAngle": 0}
    ]
    ```

    Note that the returned array is in the same order as the data, even though this pie chart is [sorted](#pie_sortValues) by descending value, starting with the arc for the last datum (value 21) at 12 o’clock.
- name: pie.endAngle()
  id: d3-shape#pie_endangle
  summary: If angle is specified, sets the overall end angle of the pie to the specified function or number and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**endAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *angle* is specified, sets the overall end angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:

    ``` javascript
    function endAngle() {
      return 2 * Math.PI;
    }
    ```

    The end angle here means the *overall* end angle of the pie, *i.e.*, the end angle of the last arc. The end angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.

    The value of the end angle is constrained to [startAngle](#pie_startAngle) ± τ, such that \|endAngle - startAngle\| ≤ τ.
- name: pie.padAngle()
  id: d3-shape#pie_padangle
  summary: If angle is specified, sets the pad angle to the specified function or number and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**padAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *angle* is specified, sets the pad angle to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:

    ``` javascript
    function padAngle() {
      return 0;
    }
    ```

    The pad angle here means the angular separation between each adjacent arc. The total amount of padding reserved is the specified *angle* times the number of elements in the input data array, and at most \|endAngle - startAngle\|; the remaining space is then divided proportionally by [value](#pie_value) such that the relative area of each arc is preserved. See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. The pad angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians.

    ### Lines

    The line generator produces a [spline](https://en.wikipedia.org/wiki/Spline_(mathematics)) or [polyline](https://en.wikipedia.org/wiki/Polygonal_chain), as in a line chart. Lines also appear in many other visualization types, such as the links in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling).
- name: pie.sort()
  id: d3-shape#pie_sort
  summary: If compare is specified, sets the data comparator to the specified function and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**sort**(\[*compare*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *compare* is specified, sets the data comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current data comparator, which defaults to null. If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the [value comparator](#pie_sortValues) to null.

    The *compare* function takes two arguments *a* and *b*, each elements from the input data array. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by their associated name:

    ``` javascript
    pie.sort((a, b) => a.name.localeCompare(b.name));
    ```

    Sorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).
- name: pie.sortValues()
  id: d3-shape#pie_sortvalues
  summary: If compare is specified, sets the value comparator to the specified function and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**sortValues**(\[*compare*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *compare* is specified, sets the value comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current value comparator, which defaults to descending value. The default value comparator is implemented as:

    ``` javascript
    function compare(a, b) {
      return b - a;
    }
    ```

    If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the value comparator implicitly sets the [data comparator](#pie_sort) to null.

    The value comparator is similar to the [data comparator](#pie_sort), except the two arguments *a* and *b* are values derived from the input data array using the [value accessor](#pie_value), not the data elements. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by ascending value:

    ``` javascript
    pie.sortValues((a, b) => a - b);
    ```

    Sorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).
- name: pie.startAngle()
  id: d3-shape#pie_startangle
  summary: If angle is specified, sets the overall start angle of the pie to the specified function or number and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**startAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *angle* is specified, sets the overall start angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:

    ``` javascript
    function startAngle() {
      return 0;
    }
    ```

    The start angle here means the *overall* start angle of the pie, *i.e.*, the start angle of the first arc. The start angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.
- name: pie.value()
  id: d3-shape#pie_value
  summary: If value is specified, sets the value accessor to the specified function or number and returns this pie generator
  belongs_to: shape
  description: |-
    ###### *pie*.**value**(\[*value*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

    If *value* is specified, sets the value accessor to the specified function or number and returns this pie generator. If *value* is not specified, returns the current value accessor, which defaults to:

    ``` javascript
    function value(d) {
      return d;
    }
    ```

    When a pie is [generated](#_pie), the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using [valueOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf). If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum. For example:

    ``` javascript
    const data = [
      {"number":  4, "name": "Locke"},
      {"number":  8, "name": "Reyes"},
      {"number": 15, "name": "Ford"},
      {"number": 16, "name": "Jarrah"},
      {"number": 23, "name": "Shephard"},
      {"number": 42, "name": "Kwon"}
    ];

    const arcs = d3.pie()
        .value(d => d.number)
        (data);
    ```

    This is similar to [mapping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) your data to values before invoking the pie generator:

    ``` javascript
    const arcs = d3.pie()(data.map(d => d.number));
    ```

    The benefit of an accessor is that the input data remains associated with the returned objects, thereby making it easier to access other fields of the data, for example to set the color or to add text labels.
- name: point()
  id: d3-scale#_point
  summary: Given a value in the input domain, returns the corresponding point derived from the output range
  belongs_to: scale
  description: |-
    ###### *point*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    Given a *value* in the input [domain](#point_domain), returns the corresponding point derived from the output [range](#point_range). If the given *value* is not in the scale’s domain, returns undefined.
- name: point.align()
  id: d3-scale#point_align
  summary: If align is specified, sets the alignment to the specified value which must be in the range [0, 1]
  belongs_to: scale
  description: |-
    ###### *point*.**align**(\[*align*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    If *align* is specified, sets the alignment to the specified value which must be in the range \[0, 1\]. If *align* is not specified, returns the current alignment which defaults to 0.5. The alignment specifies how any leftover unused space in the range is distributed. A value of 0.5 indicates that the leftover space should be equally distributed before the first point and after the last point; *i.e.*, the points should be centered within the range. A value of 0 or 1 may be used to shift the points to one side, say to position them adjacent to an axis.
- name: point.bandwidth()
  id: d3-scale#point_bandwidth
  summary: Returns zero
  belongs_to: scale
  description: |-
    ###### *point*.**bandwidth**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    Returns zero.
- name: point.copy()
  id: d3-scale#point_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: "###### *point*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-scale](https://github.com/d3/d3-scale)"
- name: point.domain()
  id: d3-scale#point_domain
  summary: If domain is specified, sets the domain to the specified array of values
  belongs_to: scale
  description: |-
    ###### *point*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    If *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first point, the second domain value to the second point, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to determine the point. Thus, a point scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding point. If *domain* is not specified, this method returns the current domain.
- name: point.padding()
  id: d3-scale#point_padding
  summary: If padding is specified, sets the outer padding to the specified number which is typically in the range [0, 1]
  belongs_to: scale
  description: |-
    ###### *point*.**padding**(\[*padding*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    If *padding* is specified, sets the outer padding to the specified number which is typically in the range \[0, 1\]. If *padding* is not specified, returns the current outer padding which defaults to 0. The outer padding specifies the amount of blank space, in terms of multiples of the [step](#band_step), to reserve before the first point and after the last point. Equivalent to [*band*.paddingOuter](#band_paddingOuter).
- name: point.range()
  id: d3-scale#point_range
  summary: If range is specified, sets the scale’s range to the specified two-element array of numbers
  belongs_to: scale
  description: |-
    ###### *point*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    If *range* is specified, sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. If *range* is not specified, returns the scale’s current range, which defaults to \[0, 1\].
- name: point.rangeRound()
  id: d3-scale#point_rangeround
  summary: Sets the scale’s range to the specified two-element array of numbers while also enabling rounding
  belongs_to: scale
  description: |-
    ###### *point*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    Sets the scale’s [*range*](#point_range) to the specified two-element array of numbers while also enabling [rounding](#point_round). This is a convenience method equivalent to:

    ``` javascript
    point
        .range(range)
        .round(true);
    ```

    Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles.
- name: point.round()
  id: d3-scale#point_round
  summary: If round is specified, enables or disables rounding accordingly
  belongs_to: scale
  description: |-
    ###### *point*.**round**(\[*round*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    If *round* is specified, enables or disables rounding accordingly. If rounding is enabled, the position of each point will be integers. Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding! Use [*point*.align](#point_align) to specify how the leftover space is distributed.
- name: point.step()
  id: d3-scale#point_step
  summary: Returns the distance between the starts of adjacent points
  belongs_to: scale
  description: |-
    ###### *point*.**step**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)

    Returns the distance between the starts of adjacent points.
- name: poly.exponent()
  id: d3-ease#poly_exponent
  summary: Returns a new polynomial easing with the specified exponent e
  belongs_to: ease
  description: |-
    ###### *poly*.**exponent**(*e*) [Source](https://github.com/d3/d3-ease/blob/master/src/poly.js#L1 "Source")

    Returns a new polynomial easing with the specified exponent *e*. For example, to create equivalents of [linear](#easeLinear), [quad](#easeQuad), and [cubic](#easeCubic):

    ``` javascript
    const linear = d3.easePoly.exponent(1);
    const quad = d3.easePoly.exponent(2);
    const cubic = d3.easePoly.exponent(3);
    ```
- name: polygon
  id: d3-polygon
  summary: This module provides a few basic geometric operations for two-dimensional polygons
  description: "# d3-polygon\n\nThis module provides a few basic geometric operations for two-dimensional polygons. Each polygon is represented as an array of two-element arrays \\[​\\[*x1*, *y1*\\], \\[*x2*, *y2*\\], …\\], and may either be closed (wherein the first and last point are the same) or open (wherein they are not). Typically polygons are in counterclockwise order, assuming a coordinate system where the origin ⟨0,0⟩ is in the top-left corner.\n\n## Installing\n\nIf you use npm, `npm install d3-polygon`. You can also download the [latest release on GitHub](https://github.com/d3/d3-polygon/releases/latest). For vanilla HTML in modern browsers, import d3-polygon from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {polygonHull} from \"https://cdn.skypack.dev/d3-polygon@3\";\n\nconst hull = polygonHull(points);\n\n</script>\n```\n\nFor legacy environments, you can load d3-polygon’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-polygon@3\"></script>\n<script>\n\nconst hull = d3.polygonHull(points);\n\n</script>\n```\n\n## API Reference\n\n###### d3.**polygonArea**(*polygon*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/area.js \"Source Code\")\n\nReturns the signed area of the specified *polygon*. If the vertices of the polygon are in counterclockwise order (assuming a coordinate system where the origin ⟨0,0⟩ is in the top-left corner), the returned area is positive; otherwise it is negative, or zero.\n\n###### d3.**polygonCentroid**(*polygon*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/centroid.js \"Source Code\")\n\nReturns the [centroid](https://en.wikipedia.org/wiki/Centroid) of the specified *polygon*.\n\n###### d3.**polygonHull**(*points*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/hull.js#L23 \"Source Code\")\n\nReturns the [convex hull](https://en.wikipedia.org/wiki/Convex_hull) of the specified *points* using [Andrew’s monotone chain algorithm](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain). The returned hull is represented as an array containing a subset of the input *points* arranged in counterclockwise order. Returns null if *points* has fewer than three elements.\n\n###### d3.**polygonContains**(*polygon*, *point*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/contains.js \"Source Code\")\n\nReturns true if and only if the specified *point* is inside the specified *polygon*.\n\n###### d3.**polygonLength**(*polygon*) [\\<\\>](https://github.com/d3/d3-polygon/blob/master/src/length.js \"Source Code\")\n\nReturns the length of the perimeter of the specified *polygon*.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-polygon](https://github.com/d3/d3-polygon)"
- name: postclip()
  id: d3-geo#postclip
  summary: Post-clipping occurs on the plane, when a projection is bounded to a certain extent such as a rectangle
  belongs_to: geo
  description: |-
    ###### *postclip*(*stream*)

    Post-clipping occurs on the plane, when a projection is bounded to a certain extent such as a rectangle.

    See [*projection*.postclip](#projection_postclip).

    Clipping functions are implemented as transformations of a [projection stream](#streams). Pre-clipping operates on spherical coordinates, in radians. Post-clipping operates on planar coordinates, in pixels.
- name: pow()
  id: d3-scale#_pow
  summary: See continuous
  belongs_to: scale
  description: |-
    ###### *pow*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*](#_continuous).
- name: pow.clamp()
  id: d3-scale#pow_clamp
  summary: See continuous.clamp
  belongs_to: scale
  description: |-
    ###### *pow*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.clamp](#continuous_clamp).
- name: pow.copy()
  id: d3-scale#pow_copy
  summary: See continuous.copy
  belongs_to: scale
  description: |-
    ###### *pow*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.copy](#continuous_copy).
- name: pow.domain()
  id: d3-scale#pow_domain
  summary: See continuous.domain
  belongs_to: scale
  description: |-
    ###### *pow*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.domain](#continuous_domain).
- name: pow.exponent()
  id: d3-scale#pow_exponent
  summary: If exponent is specified, sets the current exponent to the given numeric value
  belongs_to: scale
  description: |-
    ###### *pow*.**exponent**(\[*exponent*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *exponent* is specified, sets the current exponent to the given numeric value. If *exponent* is not specified, returns the current exponent, which defaults to 1. (Note that this is effectively a [linear](#linear-scales) scale until you set a different exponent.)
- name: pow.interpolate()
  id: d3-scale#pow_interpolate
  summary: See continuous.interpolate
  belongs_to: scale
  description: |-
    ###### *pow*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.interpolate](#continuous_interpolate).
- name: pow.invert()
  id: d3-scale#pow_invert
  summary: See continuous.invert
  belongs_to: scale
  description: |-
    ###### *pow*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.invert](#continuous_invert).
- name: pow.nice()
  id: d3-scale#pow_nice
  summary: See continuous.nice
  belongs_to: scale
  description: |-
    ###### *pow*.**nice**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.nice](#continuous_nice).
- name: pow.range()
  id: d3-scale#pow_range
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *pow*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.range](#continuous_range).
- name: pow.rangeRound()
  id: d3-scale#pow_rangeround
  summary: See continuous.rangeRound
  belongs_to: scale
  description: |-
    ###### *pow*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    See [*continuous*.rangeRound](#continuous_rangeRound).
- name: pow.tickFormat()
  id: d3-scale#pow_tickformat
  summary: See continuous.tickFormat
  belongs_to: scale
  description: |-
    ###### *pow*.**tickFormat**(\[*count*\[, *specifier*\]\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    See [*continuous*.tickFormat](#continuous_tickFormat).
- name: pow.ticks()
  id: d3-scale#pow_ticks
  summary: See continuous.ticks
  belongs_to: scale
  description: |-
    ###### *pow*.**ticks**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    See [*continuous*.ticks](#continuous_ticks).
- name: preclip()
  id: d3-geo#preclip
  summary: Pre-clipping occurs in geographic coordinates
  belongs_to: geo
  description: |-
    ###### *preclip*(*stream*)

    Pre-clipping occurs in geographic coordinates. Cutting along the antimeridian line, or clipping along a small circle are the most common strategies.

    See [*projection*.preclip](#projection_preclip).
- name: project()
  id: d3-geo#_project
  summary: Projects the specified point [lambda, phi] in radians, returning a new point [x, y] in unitless coordinates
  belongs_to: geo
  description: |-
    ###### *project*(*lambda*, *phi*)

    Projects the specified point \[*lambda*, *phi*\] in radians, returning a new point \[*x*, *y*\] in unitless coordinates.
- name: project.invert()
  id: d3-geo#project_invert
  summary: The inverse of project
  belongs_to: geo
  description: |-
    ###### *project*.**invert**(*x*, *y*)

    The inverse of [*project*](#_project).
- name: projection()
  id: d3-geo#_projection
  summary: Returns a new array [x, y] (typically in pixels) representing the projected point of the given point
  belongs_to: geo
  description: |-
    ###### *projection*(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Returns a new array \[*x*, *y*\] (typically in pixels) representing the projected point of the given *point*. The point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees. May return null if the specified *point* has no defined projected position, such as when the point is outside the clipping bounds of the projection.
- name: projection.angle()
  id: d3-geo#projection_angle
  summary: If angle is specified, sets the projection’s post-projection planar rotation angle to the specified angle in degrees and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**angle**(\[*angle*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *angle* is specified, sets the projection’s post-projection planar rotation angle to the specified *angle* in degrees and returns the projection. If *angle* is not specified, returns the projection’s current angle, which defaults to 0°. Note that it may be faster to rotate during rendering (e.g., using [*context*.rotate](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate)) rather than during projection.
- name: projection.center()
  id: d3-geo#projection_center
  summary: If center is specified, sets the projection’s center to the specified center, a two-element array of [longitude, latitude] in degrees and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**center**(\[*center*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *center* is specified, sets the projection’s center to the specified *center*, a two-element array of \[*longitude*, *latitude*\] in degrees and returns the projection. If *center* is not specified, returns the current center, which defaults to ⟨0°,0°⟩.
- name: projection.clipAngle()
  id: d3-geo#projection_clipangle
  summary: If angle is specified, sets the projection’s clipping circle radius to the specified angle in degrees and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**clipAngle**(\[*angle*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *angle* is specified, sets the projection’s clipping circle radius to the specified angle in degrees and returns the projection. If *angle* is null, switches to [antimeridian cutting](https://observablehq.com/@d3/antimeridian-cutting) rather than small-circle clipping. If *angle* is not specified, returns the current clip angle which defaults to null. Small-circle clipping is independent of viewport clipping via [*projection*.clipExtent](#projection_clipExtent).

    See also [*projection*.preclip](#projection_preclip), [d3.geoClipAntimeridian](#geoClipAntimeridian), [d3.geoClipCircle](#geoClipCircle).
- name: projection.clipExtent()
  id: d3-geo#projection_clipextent
  summary: If extent is specified, sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**clipExtent**(\[*extent*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *extent* is specified, sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection. The *extent* bounds are specified as an array \[\[*x₀*, *y₀*\], \[*x₁*, *y₁*\]\], where *x₀* is the left-side of the viewport, *y₀* is the top, *x₁* is the right and *y₁* is the bottom. If *extent* is null, no viewport clipping is performed. If *extent* is not specified, returns the current viewport clip extent which defaults to null. Viewport clipping is independent of small-circle clipping via [*projection*.clipAngle](#projection_clipAngle).

    See also [*projection*.postclip](#projection_postclip), [d3.geoClipRectangle](#geoClipRectangle).
- name: projection.fitExtent()
  id: d3-geo#projection_fitextent
  summary: Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent
  belongs_to: geo
  description: |-
    ###### *projection*.**fitExtent**(*extent*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Sets the projection’s [scale](#projection_scale) and [translate](#projection_translate) to fit the specified GeoJSON *object* in the center of the given *extent*. The extent is specified as an array \[\[x₀, y₀\], \[x₁, y₁\]\], where x₀ is the left side of the bounding box, y₀ is the top, x₁ is the right and y₁ is the bottom. Returns the projection.

    For example, to scale and translate the [New Jersey State Plane projection](https://bl.ocks.org/mbostock/5126418) to fit a GeoJSON object *nj* in the center of a 960×500 bounding box with 20 pixels of padding on each side:

    ``` javascript
    var projection = d3.geoTransverseMercator()
        .rotate([74 + 30 / 60, -38 - 50 / 60])
        .fitExtent([[20, 20], [940, 480]], nj);
    ```

    Any [clip extent](#projection_clipExtent) is ignored when determining the new scale and translate. The [precision](#projection_precision) used to compute the bounding box of the given *object* is computed at an effective scale of 150.
- name: projection.fitHeight()
  id: d3-geo#projection_fitheight
  summary: A convenience method for projection.fitSize where the width is automatically chosen from the aspect ratio of object and the given constraint on height
  belongs_to: geo
  description: |-
    ###### *projection*.**fitHeight**(*height*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    A convenience method for [*projection*.fitSize](#projection_fitSize) where the width is automatically chosen from the aspect ratio of *object* and the given constraint on *height*.

    #### Azimuthal Projections

    Azimuthal projections project the sphere directly onto a plane.
- name: projection.fitSize()
  id: d3-geo#projection_fitsize
  summary: A convenience method for projection.fitExtent where the top-left corner of the extent is [0, 0]
  belongs_to: geo
  description: |-
    ###### *projection*.**fitSize**(*size*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    A convenience method for [*projection*.fitExtent](#projection_fitExtent) where the top-left corner of the extent is \[0, 0\]. The following two statements are equivalent:

    ``` javascript
    projection.fitExtent([[0, 0], [width, height]], object);
    projection.fitSize([width, height], object);
    ```
- name: projection.fitWidth()
  id: d3-geo#projection_fitwidth
  summary: A convenience method for projection.fitSize where the height is automatically chosen from the aspect ratio of object and the given constraint on width
  belongs_to: geo
  description: |-
    ###### *projection*.**fitWidth**(*width*, *object*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    A convenience method for [*projection*.fitSize](#projection_fitSize) where the height is automatically chosen from the aspect ratio of *object* and the given constraint on *width*.
- name: projection.invert()
  id: d3-geo#projection_invert
  summary: Returns a new array [longitude, latitude] in degrees representing the unprojected point of the given projected point
  belongs_to: geo
  description: |-
    ###### *projection*.**invert**(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Returns a new array \[*longitude*, *latitude*\] in degrees representing the unprojected point of the given projected *point*. The point must be specified as a two-element array \[*x*, *y*\] (typically in pixels). May return null if the specified *point* has no defined projected position, such as when the point is outside the clipping bounds of the projection.

    This method is only defined on invertible projections.
- name: projection.postclip()
  id: d3-geo#projection_postclip
  summary: If postclip is specified, sets the projection’s cartesian clipping to the specified function and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**postclip**(\[*postclip*\])

    If *postclip* is specified, sets the projection’s cartesian clipping to the specified function and returns the projection. If *postclip* is not specified, returns the current cartesian clipping function (see [postclip](#postclip)).
- name: projection.precision()
  id: d3-geo#projection_precision
  summary: If precision is specified, sets the threshold for the projection’s adaptive resampling to the specified value in pixels and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**precision**(\[*precision*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *precision* is specified, sets the threshold for the projection’s [adaptive resampling](https://observablehq.com/@d3/adaptive-sampling) to the specified value in pixels and returns the projection. This value corresponds to the [Douglas–Peucker](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm) distance. If *precision* is not specified, returns the projection’s current resampling precision which defaults to √0.5 ≅ 0.70710…
- name: projection.preclip()
  id: d3-geo#projection_preclip
  summary: If preclip is specified, sets the projection’s spherical clipping to the specified function and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**preclip**(\[*preclip*\])

    If *preclip* is specified, sets the projection’s spherical clipping to the specified function and returns the projection. If *preclip* is not specified, returns the current spherical clipping function (see [preclip](#preclip)).
- name: projection.reflectX()
  id: d3-geo#projection_reflectx
  summary: If reflect is specified, sets whether or not the x-dimension is reflected (negated) in the output
  belongs_to: geo
  description: |-
    ###### *projection*.**reflectX**(\[*reflect*\])

    If *reflect* is specified, sets whether or not the *x*-dimension is reflected (negated) in the output. If *reflect* is not specified, returns true if *x*-reflection is enabled, which defaults to false. This can be useful to display sky and astronomical data with the orb seen from below: right ascension (eastern direction) will point to the left when North is pointing up.
- name: projection.reflectY()
  id: d3-geo#projection_reflecty
  summary: If reflect is specified, sets whether or not the y-dimension is reflected (negated) in the output
  belongs_to: geo
  description: |-
    ###### *projection*.**reflectY**(\[*reflect*\])

    If *reflect* is specified, sets whether or not the *y*-dimension is reflected (negated) in the output. If *reflect* is not specified, returns true if *y*-reflection is enabled, which defaults to false. This is especially useful for transforming from standard [spatial reference systems](https://en.wikipedia.org/wiki/Spatial_reference_system), which treat positive *y* as pointing up, to display coordinate systems such as Canvas and SVG, which treat positive *y* as pointing down.
- name: projection.rotate()
  id: d3-geo#projection_rotate
  summary: If rotation is specified, sets the projection’s three-axis spherical rotation to the specified angles, which must be a two- or three-element array of numbers [lambda, phi, gamma] specifying the rotation angles in degrees about each spherical axis
  belongs_to: geo
  description: |-
    ###### *projection*.**rotate**(\[*angles*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *rotation* is specified, sets the projection’s [three-axis spherical rotation](https://observablehq.com/@d3/three-axis-rotation) to the specified *angles*, which must be a two- or three-element array of numbers \[*lambda*, *phi*, *gamma*\] specifying the rotation angles in degrees about [each spherical axis](https://observablehq.com/@d3/three-axis-rotation). (These correspond to [yaw, pitch and roll](https://en.wikipedia.org/wiki/Aircraft_principal_axes).) If the rotation angle *gamma* is omitted, it defaults to 0. See also [d3.geoRotation](#geoRotation). If *rotation* is not specified, returns the current rotation which defaults \[0, 0, 0\].
- name: projection.scale()
  id: d3-geo#projection_scale
  summary: If scale is specified, sets the projection’s scale factor to the specified value and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**scale**(\[*scale*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *scale* is specified, sets the projection’s scale factor to the specified value and returns the projection. If *scale* is not specified, returns the current scale factor; the default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, absolute scale factors are not equivalent across projections.
- name: projection.stream()
  id: d3-geo#projection_stream
  summary: Returns a projection stream for the specified output stream
  belongs_to: geo
  description: |-
    ###### *projection*.**stream**(*stream*) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    Returns a [projection stream](#streams) for the specified output *stream*. Any input geometry is projected before being streamed to the output stream. A typical projection involves several geometry transformations: the input geometry is first converted to radians, rotated on three axes, clipped to the small circle or cut along the antimeridian, and lastly projected to the plane with adaptive resampling, scale and translation.
- name: projection.translate()
  id: d3-geo#projection_translate
  summary: If translate is specified, sets the projection’s translation offset to the specified two-element array [t_(x), t_(y)] and returns the projection
  belongs_to: geo
  description: |-
    ###### *projection*.**translate**(\[*translate*\]) [Source](https://github.com/d3/d3-geo/blob/main/src/projection/index.js "Source")

    If *translate* is specified, sets the projection’s translation offset to the specified two-element array \[*t_(x)*, *t_(y)*\] and returns the projection. If *translate* is not specified, returns the current translation offset which defaults to \[480, 250\]. The translation offset determines the pixel coordinates of the projection’s [center](#projection_center). The default translation offset places ⟨0°,0°⟩ at the center of a 960×500 area.
- name: quadtree
  id: d3-quadtree
  summary: A quadtree recursively partitions two-dimensional space into squares, dividing each square into four equally-sized squares
  description: "# d3-quadtree\n\nA [quadtree](https://en.wikipedia.org/wiki/Quadtree) recursively partitions two-dimensional space into squares, dividing each square into four equally-sized squares. Each distinct point exists in a unique leaf [node](#nodes); coincident points are represented by a linked list. Quadtrees can accelerate various spatial operations, such as the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) for computing many-body forces, collision detection, and searching for nearby points.\n\n## Installing\n\nIf you use npm, `npm install d3-quadtree`. You can also download the [latest release on GitHub](https://github.com/d3/d3-quadtree/releases/latest). For vanilla HTML in modern browsers, import d3-quadtree from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {quadtree} from \"https://cdn.skypack.dev/d3-quadtree@3\";\n\nconst tree = quadtree();\n\n</script>\n```\n\nFor legacy environments, you can load d3-quadtree’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-quadtree@3\"></script>\n<script>\n\nconst tree = d3.quadtree();\n\n</script>\n```\n\n## API Reference\n\n###### d3.**quadtree**(\\[*data*\\[, *x*, *y*\\]\\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/quadtree.js \"Source\")\n\nCreates a new, empty quadtree with an empty [extent](#quadtree_extent) and the default [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors. If *data* is specified, [adds](#quadtree_addAll) the specified iterable of data to the quadtree. This is equivalent to:\n\n``` javascript\nconst tree = d3.quadtree()\n    .addAll(data);\n```\n\nIf *x* and *y* are also specified, sets the [*x*-](#quadtree_x) and [*y*-](#quadtree_y) accessors to the specified functions before adding the specified iterable of data to the quadtree, equivalent to:\n\n``` javascript\nconst tree = d3.quadtree()\n    .x(x)\n    .y(y)\n    .addAll(data);\n```\n\n###### *quadtree*.**x**(\\[*x*\\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/x.js \"Source\")\n\nIf *x* is specified, sets the current *x*-coordinate accessor and returns the quadtree. If *x* is not specified, returns the current *x*-accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\nThe *x*-acccessor is used to derive the *x*-coordinate of data when [adding](#quadtree_add) to and [removing](#quadtree_remove) from the tree. It is also used when [finding](#quadtree_find) to re-access the coordinates of data previously added to the tree; therefore, the *x*- and *y*-accessors must be consistent, returning the same value given the same input.\n\n###### *quadtree*.**y**(\\[*y*\\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/y.js \"Source\")\n\nIf *y* is specified, sets the current *y*-coordinate accessor and returns the quadtree. If *y* is not specified, returns the current *y*-accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\nThe *y*-acccessor is used to derive the *y*-coordinate of data when [adding](#quadtree_add) to and [removing](#quadtree_remove) from the tree. It is also used when [finding](#quadtree_find) to re-access the coordinates of data previously added to the tree; therefore, the *x*- and *y*-accessors must be consistent, returning the same value given the same input.\n\n###### *quadtree*.**extent**(\\[*extent*\\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/extent.js \"Source\")\n\nIf *extent* is specified, expands the quadtree to [cover](#quadtree_cover) the specified points \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\] and returns the quadtree. If *extent* is not specified, returns the quadtree’s current extent \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where *x0* and *y0* are the inclusive lower bounds and *x1* and *y1* are the inclusive upper bounds, or undefined if the quadtree has no extent. The extent may also be expanded by calling [*quadtree*.cover](#quadtree_cover) or [*quadtree*.add](#quadtree_add).\n\n###### *quadtree*.**cover**(*x*, *y*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/cover.js \"Source\")\n\nExpands the quadtree to cover the specified point ⟨*x*,*y*⟩, and returns the quadtree. If the quadtree’s extent already covers the specified point, this method does nothing. If the quadtree has an extent, the extent is repeatedly doubled to cover the specified point, wrapping the [root](#quadtree_root) [node](#nodes) as necessary; if the quadtree is empty, the extent is initialized to the extent \\[\\[⌊*x*⌋, ⌊*y*⌋\\], \\[⌈*x*⌉, ⌈*y*⌉\\]\\]. (Rounding is necessary such that if the extent is later doubled, the boundaries of existing quadrants do not change due to floating point error.)\n\n###### *quadtree*.**add**(*datum*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/add.js \"Source\")\n\nAdds the specified *datum* to the quadtree, deriving its coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If the new point is outside the current [extent](#quadtree_extent) of the quadtree, the quadtree is automatically expanded to [cover](#quadtree_cover) the new point.\n\n###### *quadtree*.**addAll**(*data*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/add.js \"Source\")\n\nAdds the specified iterable of *data* to the quadtree, deriving each element’s coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and return this quadtree. This is approximately equivalent to calling [*quadtree*.add](#quadtree_add) repeatedly:\n\n``` javascript\nfor (let i = 0, n = data.length; i < n; ++i) {\n  quadtree.add(data[i]);\n}\n```\n\nHowever, this method results in a more compact quadtree because the extent of the *data* is computed first before adding the data.\n\n###### *quadtree*.**remove**(*datum*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/remove.js \"Source\")\n\nRemoves the specified *datum* from the quadtree, deriving its coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If the specified *datum* does not exist in this quadtree, this method does nothing.\n\n###### *quadtree*.**removeAll**(*data*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/remove.js \"Source\")\n\nRemoves the specified *data* from the quadtree, deriving their coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If a specified datum does not exist in this quadtree, it is ignored.\n\n###### *quadtree*.**copy**()\n\nReturns a copy of the quadtree. All [nodes](#nodes) in the returned quadtree are identical copies of the corresponding node in the quadtree; however, any data in the quadtree is shared by reference and not copied.\n\n###### *quadtree*.**root**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/root.js \"Source\")\n\nReturns the root [node](#nodes) of the quadtree.\n\n###### *quadtree*.**data**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/data.js \"Source\")\n\nReturns an array of all data in the quadtree.\n\n###### *quadtree*.**size**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/size.js \"Source\")\n\nReturns the total number of data in the quadtree.\n\n###### *quadtree*.**find**(*x*, *y*\\[, *radius*\\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/find.js \"Source\")\n\nReturns the datum closest to the position ⟨*x*,*y*⟩ with the given search *radius*. If *radius* is not specified, it defaults to infinity. If there is no datum within the search area, returns undefined.\n\n###### *quadtree*.**visit**(*callback*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/visit.js \"Source\")\n\nVisits each [node](#nodes) in the quadtree in pre-order traversal, invoking the specified *callback* with arguments *node*, *x0*, *y0*, *x1*, *y1* for each node, where *node* is the node being visited, ⟨*x0*, *y0*⟩ are the lower bounds of the node, and ⟨*x1*, *y1*⟩ are the upper bounds, and returns the quadtree. (Assuming that positive *x* is right and positive *y* is down, as is typically the case in Canvas and SVG, ⟨*x0*, *y0*⟩ is the top-left corner and ⟨*x1*, *y1*⟩ is the lower-right corner; however, the coordinate system is arbitrary, so more formally *x0* \\<= *x1* and *y0* \\<= *y1*.)\n\nIf the *callback* returns true for a given node, then the children of that node are not visited; otherwise, all child nodes are visited. This can be used to quickly visit only parts of the tree, for example when using the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation). Note, however, that child quadrants are always visited in sibling order: top-left, top-right, bottom-left, bottom-right. In cases such as [search](#quadtree_find), visiting siblings in a specific order may be faster.\n\nAs an example, the following visits the quadtree and returns all the nodes within a rectangular extent \\[xmin, ymin, xmax, ymax\\], ignoring quads that cannot possibly contain any such node:\n\n``` javascript\nfunction search(quadtree, xmin, ymin, xmax, ymax) {\n  const results = [];\n  quadtree.visit((node, x1, y1, x2, y2) => {\n    if (!node.length) {\n      do {\n        let d = node.data;\n        if (d[0] >= xmin && d[0] < xmax && d[1] >= ymin && d[1] < ymax) {\n          results.push(d);\n        }\n      } while (node = node.next);\n    }\n    return x1 >= xmax || y1 >= ymax || x2 < xmin || y2 < ymin;\n  });\n  return results;\n}\n```\n\n###### *quadtree*.**visitAfter**(*callback*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/visitAfter.js \"Source\")\n\nVisits each [node](#nodes) in the quadtree in post-order traversal, invoking the specified *callback* with arguments *node*, *x0*, *y0*, *x1*, *y1* for each node, where *node* is the node being visited, ⟨*x0*, *y0*⟩ are the lower bounds of the node, and ⟨*x1*, *y1*⟩ are the upper bounds, and returns the quadtree. (Assuming that positive *x* is right and positive *y* is down, as is typically the case in Canvas and SVG, ⟨*x0*, *y0*⟩ is the top-left corner and ⟨*x1*, *y1*⟩ is the lower-right corner; however, the coordinate system is arbitrary, so more formally *x0* \\<= *x1* and *y0* \\<= *y1*.) Returns *root*.\n\n### Nodes\n\nInternal nodes of the quadtree are represented as four-element arrays in left-to-right, top-to-bottom order:\n\n- `0` - the top-left quadrant, if any.\n- `1` - the top-right quadrant, if any.\n- `2` - the bottom-left quadrant, if any.\n- `3` - the bottom-right quadrant, if any.\n\nA child quadrant may be undefined if it is empty.\n\nLeaf nodes are represented as objects with the following properties:\n\n- `data` - the data associated with this point, as passed to [*quadtree*.add](#quadtree_add).\n- `next` - the next datum in this leaf, if any.\n\nThe `length` property may be used to distinguish leaf nodes from internal nodes: it is undefined for leaf nodes, and 4 for internal nodes. For example, to iterate over all data in a leaf node:\n\n``` javascript\nif (!node.length) do console.log(node.data); while (node = node.next);\n```\n\nThe point’s *x*- and *y*-coordinates **must not be modified** while the point is in the quadtree. To update a point’s position, [remove](#quadtree_remove) the point and then re-[add](#quadtree_add) it to the quadtree at the new position. Alternatively, you may discard the existing quadtree entirely and create a new one from scratch; this may be more efficient if many of the points have moved.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-quadtree](https://github.com/d3/d3-quadtree)"
- name: quadtree.add()
  id: d3-quadtree#quadtree_add
  summary: Adds the specified datum to the quadtree, deriving its coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**add**(*datum*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/add.js "Source")

    Adds the specified *datum* to the quadtree, deriving its coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If the new point is outside the current [extent](#quadtree_extent) of the quadtree, the quadtree is automatically expanded to [cover](#quadtree_cover) the new point.
- name: quadtree.addAll()
  id: d3-quadtree#quadtree_addall
  summary: Adds the specified iterable of data to the quadtree, deriving each element’s coordinates ⟨x,y⟩ using the current x- and y-accessors, and return this quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**addAll**(*data*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/add.js "Source")

    Adds the specified iterable of *data* to the quadtree, deriving each element’s coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and return this quadtree. This is approximately equivalent to calling [*quadtree*.add](#quadtree_add) repeatedly:

    ``` javascript
    for (let i = 0, n = data.length; i < n; ++i) {
      quadtree.add(data[i]);
    }
    ```

    However, this method results in a more compact quadtree because the extent of the *data* is computed first before adding the data.
- name: quadtree.copy()
  id: d3-quadtree#quadtree_copy
  summary: Returns a copy of the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**copy**()

    Returns a copy of the quadtree. All [nodes](#nodes) in the returned quadtree are identical copies of the corresponding node in the quadtree; however, any data in the quadtree is shared by reference and not copied.
- name: quadtree.cover()
  id: d3-quadtree#quadtree_cover
  summary: Expands the quadtree to cover the specified point ⟨x,y⟩, and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**cover**(*x*, *y*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/cover.js "Source")

    Expands the quadtree to cover the specified point ⟨*x*,*y*⟩, and returns the quadtree. If the quadtree’s extent already covers the specified point, this method does nothing. If the quadtree has an extent, the extent is repeatedly doubled to cover the specified point, wrapping the [root](#quadtree_root) [node](#nodes) as necessary; if the quadtree is empty, the extent is initialized to the extent \[\[⌊*x*⌋, ⌊*y*⌋\], \[⌈*x*⌉, ⌈*y*⌉\]\]. (Rounding is necessary such that if the extent is later doubled, the boundaries of existing quadrants do not change due to floating point error.)
- name: quadtree.data()
  id: d3-quadtree#quadtree_data
  summary: Returns an array of all data in the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**data**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/data.js "Source")

    Returns an array of all data in the quadtree.
- name: quadtree.extent()
  id: d3-quadtree#quadtree_extent
  summary: If extent is specified, expands the quadtree to cover the specified points [[x0, y0], [x1, y1]] and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**extent**(\[*extent*\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/extent.js "Source")

    If *extent* is specified, expands the quadtree to [cover](#quadtree_cover) the specified points \[\[*x0*, *y0*\], \[*x1*, *y1*\]\] and returns the quadtree. If *extent* is not specified, returns the quadtree’s current extent \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where *x0* and *y0* are the inclusive lower bounds and *x1* and *y1* are the inclusive upper bounds, or undefined if the quadtree has no extent. The extent may also be expanded by calling [*quadtree*.cover](#quadtree_cover) or [*quadtree*.add](#quadtree_add).
- name: quadtree.find()
  id: d3-quadtree#quadtree_find
  summary: Returns the datum closest to the position ⟨x,y⟩ with the given search radius
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**find**(*x*, *y*\[, *radius*\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/find.js "Source")

    Returns the datum closest to the position ⟨*x*,*y*⟩ with the given search *radius*. If *radius* is not specified, it defaults to infinity. If there is no datum within the search area, returns undefined.
- name: quadtree.remove()
  id: d3-quadtree#quadtree_remove
  summary: Removes the specified datum from the quadtree, deriving its coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**remove**(*datum*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/remove.js "Source")

    Removes the specified *datum* from the quadtree, deriving its coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If the specified *datum* does not exist in this quadtree, this method does nothing.
- name: quadtree.removeAll()
  id: d3-quadtree#quadtree_removeall
  summary: Removes the specified data from the quadtree, deriving their coordinates ⟨x,y⟩ using the current x- and y-accessors, and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**removeAll**(*data*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/remove.js "Source")

    Removes the specified *data* from the quadtree, deriving their coordinates ⟨*x*,*y*⟩ using the current [*x*-](#quadtree_x) and [*y*-](#quadtree_y)accessors, and returns the quadtree. If a specified datum does not exist in this quadtree, it is ignored.
- name: quadtree.root()
  id: d3-quadtree#quadtree_root
  summary: Returns the root node of the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**root**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/root.js "Source")

    Returns the root [node](#nodes) of the quadtree.
- name: quadtree.size()
  id: d3-quadtree#quadtree_size
  summary: Returns the total number of data in the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**size**() [Source](https://github.com/d3/d3-quadtree/blob/master/src/size.js "Source")

    Returns the total number of data in the quadtree.
- name: quadtree.visit()
  id: d3-quadtree#quadtree_visit
  summary: Visits each node in the quadtree in pre-order traversal, invoking the specified callback with arguments node, x0, y0, x1, y1 for each node, where node is the node being visited, ⟨x0, y0⟩ are the lower bounds of the node, and ⟨x1, y1⟩ are the upper bounds, and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**visit**(*callback*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/visit.js "Source")

    Visits each [node](#nodes) in the quadtree in pre-order traversal, invoking the specified *callback* with arguments *node*, *x0*, *y0*, *x1*, *y1* for each node, where *node* is the node being visited, ⟨*x0*, *y0*⟩ are the lower bounds of the node, and ⟨*x1*, *y1*⟩ are the upper bounds, and returns the quadtree. (Assuming that positive *x* is right and positive *y* is down, as is typically the case in Canvas and SVG, ⟨*x0*, *y0*⟩ is the top-left corner and ⟨*x1*, *y1*⟩ is the lower-right corner; however, the coordinate system is arbitrary, so more formally *x0* \<= *x1* and *y0* \<= *y1*.)

    If the *callback* returns true for a given node, then the children of that node are not visited; otherwise, all child nodes are visited. This can be used to quickly visit only parts of the tree, for example when using the [Barnes–Hut approximation](https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation). Note, however, that child quadrants are always visited in sibling order: top-left, top-right, bottom-left, bottom-right. In cases such as [search](#quadtree_find), visiting siblings in a specific order may be faster.

    As an example, the following visits the quadtree and returns all the nodes within a rectangular extent \[xmin, ymin, xmax, ymax\], ignoring quads that cannot possibly contain any such node:

    ``` javascript
    function search(quadtree, xmin, ymin, xmax, ymax) {
      const results = [];
      quadtree.visit((node, x1, y1, x2, y2) => {
        if (!node.length) {
          do {
            let d = node.data;
            if (d[0] >= xmin && d[0] < xmax && d[1] >= ymin && d[1] < ymax) {
              results.push(d);
            }
          } while (node = node.next);
        }
        return x1 >= xmax || y1 >= ymax || x2 < xmin || y2 < ymin;
      });
      return results;
    }
    ```
- name: quadtree.visitAfter()
  id: d3-quadtree#quadtree_visitafter
  summary: Visits each node in the quadtree in post-order traversal, invoking the specified callback with arguments node, x0, y0, x1, y1 for each node, where node is the node being visited, ⟨x0, y0⟩ are the lower bounds of the node, and ⟨x1, y1⟩ are the upper bounds, and returns the quadtree
  belongs_to: quadtree
  description: "###### *quadtree*.**visitAfter**(*callback*) [Source](https://github.com/d3/d3-quadtree/blob/master/src/visitAfter.js \"Source\")\n\nVisits each [node](#nodes) in the quadtree in post-order traversal, invoking the specified *callback* with arguments *node*, *x0*, *y0*, *x1*, *y1* for each node, where *node* is the node being visited, ⟨*x0*, *y0*⟩ are the lower bounds of the node, and ⟨*x1*, *y1*⟩ are the upper bounds, and returns the quadtree. (Assuming that positive *x* is right and positive *y* is down, as is typically the case in Canvas and SVG, ⟨*x0*, *y0*⟩ is the top-left corner and ⟨*x1*, *y1*⟩ is the lower-right corner; however, the coordinate system is arbitrary, so more formally *x0* \\<= *x1* and *y0* \\<= *y1*.) Returns *root*.\n\n### Nodes\n\nInternal nodes of the quadtree are represented as four-element arrays in left-to-right, top-to-bottom order:\n\n- `0` - the top-left quadrant, if any.\n- `1` - the top-right quadrant, if any.\n- `2` - the bottom-left quadrant, if any.\n- `3` - the bottom-right quadrant, if any.\n\nA child quadrant may be undefined if it is empty.\n\nLeaf nodes are represented as objects with the following properties:\n\n- `data` - the data associated with this point, as passed to [*quadtree*.add](#quadtree_add).\n- `next` - the next datum in this leaf, if any.\n\nThe `length` property may be used to distinguish leaf nodes from internal nodes: it is undefined for leaf nodes, and 4 for internal nodes. For example, to iterate over all data in a leaf node:\n\n``` javascript\nif (!node.length) do console.log(node.data); while (node = node.next);\n```\n\nThe point’s *x*- and *y*-coordinates **must not be modified** while the point is in the quadtree. To update a point’s position, [remove](#quadtree_remove) the point and then re-[add](#quadtree_add) it to the quadtree at the new position. Alternatively, you may discard the existing quadtree entirely and create a new one from scratch; this may be more efficient if many of the points have moved.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-quadtree](https://github.com/d3/d3-quadtree)"
- name: quadtree.x()
  id: d3-quadtree#quadtree_x
  summary: If x is specified, sets the current x-coordinate accessor and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**x**(\[*x*\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/x.js "Source")

    If *x* is specified, sets the current *x*-coordinate accessor and returns the quadtree. If *x* is not specified, returns the current *x*-accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```

    The *x*-acccessor is used to derive the *x*-coordinate of data when [adding](#quadtree_add) to and [removing](#quadtree_remove) from the tree. It is also used when [finding](#quadtree_find) to re-access the coordinates of data previously added to the tree; therefore, the *x*- and *y*-accessors must be consistent, returning the same value given the same input.
- name: quadtree.y()
  id: d3-quadtree#quadtree_y
  summary: If y is specified, sets the current y-coordinate accessor and returns the quadtree
  belongs_to: quadtree
  description: |-
    ###### *quadtree*.**y**(\[*y*\]) [Source](https://github.com/d3/d3-quadtree/blob/master/src/y.js "Source")

    If *y* is specified, sets the current *y*-coordinate accessor and returns the quadtree. If *y* is not specified, returns the current *y*-accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```

    The *y*-acccessor is used to derive the *y*-coordinate of data when [adding](#quadtree_add) to and [removing](#quadtree_remove) from the tree. It is also used when [finding](#quadtree_find) to re-access the coordinates of data previously added to the tree; therefore, the *x*- and *y*-accessors must be consistent, returning the same value given the same input.
- name: quantile()
  id: d3-scale#_quantile
  summary: Given a value in the input domain, returns the corresponding value in the output range
  belongs_to: scale
  description: |-
    ###### *quantile*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Given a *value* in the input [domain](#quantile_domain), returns the corresponding value in the output [range](#quantile_range).
- name: quantile.copy()
  id: d3-scale#quantile_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: |-
    ###### *quantile*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.

    ### Threshold Scales

    Threshold scales are similar to [quantize scales](#quantize-scales), except they allow you to map arbitrary subsets of the domain to discrete values in the range. The input domain is still continuous, and divided into slices based on a set of threshold values. See [this choropleth](https://observablehq.com/@d3/threshold-choropleth) for an example.
- name: quantile.domain()
  id: d3-scale#quantile_domain
  summary: If domain is specified, sets the domain of the quantile scale to the specified set of discrete numeric values
  belongs_to: scale
  description: |-
    ###### *quantile*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *domain* is specified, sets the domain of the quantile scale to the specified set of discrete numeric values. The array must not be empty, and must contain at least one numeric value; NaN, null and undefined values are ignored and not considered part of the sample population. If the elements in the given array are not numbers, they will be coerced to numbers. A copy of the input array is sorted and stored internally. If *domain* is not specified, returns the scale’s current domain.
- name: quantile.invertExtent()
  id: d3-scale#quantile_invertextent
  summary: 'Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantile'
  belongs_to: scale
  description: |-
    ###### *quantile*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns the extent of values in the [domain](#quantile_domain) \[*x0*, *x1*\] for the corresponding *value* in the [range](#quantile_range): the inverse of [*quantile*](#_quantile). This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
- name: quantile.quantiles()
  id: d3-scale#quantile_quantiles
  summary: Returns the quantile thresholds
  belongs_to: scale
  description: |-
    ###### *quantile*.**quantiles**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns the quantile thresholds. If the [range](#quantile_range) contains *n* discrete values, the returned array will contain *n* - 1 thresholds. Values less than the first threshold are considered in the first quantile; values greater than or equal to the first threshold but less than the second threshold are in the second quantile, and so on. Internally, the thresholds array is used with [bisect](d3-array#bisect) to find the output quantile associated with the given input value.
- name: quantile.range()
  id: d3-scale#quantile_range
  summary: If range is specified, sets the discrete values in the range
  belongs_to: scale
  description: |-
    ###### *quantile*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *range* is specified, sets the discrete values in the range. The array must not be empty, and may contain any type of value. The number of values in (the cardinality, or length, of) the *range* array determines the number of quantiles that are computed. For example, to compute quartiles, *range* must be an array of four elements such as \[0, 1, 2, 3\]. If *range* is not specified, returns the current range.
- name: quantize()
  id: d3-scale#_quantize
  summary: Given a value in the input domain, returns the corresponding value in the output range
  belongs_to: scale
  description: |-
    ###### *quantize*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Given a *value* in the input [domain](#quantize_domain), returns the corresponding value in the output [range](#quantize_range). For example, to apply a color encoding:

    ``` javascript
    var color = d3.scaleQuantize()
        .domain([0, 1])
        .range(["brown", "steelblue"]);

    color(0.49); // "brown"
    color(0.51); // "steelblue"
    ```

    Or dividing the domain into three equally-sized parts with different range values to compute an appropriate stroke width:

    ``` javascript
    var width = d3.scaleQuantize()
        .domain([10, 100])
        .range([1, 2, 4]);

    width(20); // 1
    width(50); // 2
    width(80); // 4
    ```
- name: quantize.copy()
  id: d3-scale#quantize_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: |-
    ###### *quantize*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.

    ### Quantile Scales

    Quantile scales map a sampled input domain to a discrete range. The domain is considered continuous and thus the scale will accept any reasonable input value; however, the domain is specified as a discrete set of sample values. The number of values in (the cardinality of) the output range determines the number of quantiles that will be computed from the domain. To compute the quantiles, the domain is sorted, and treated as a [population of discrete values](https://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population); see d3-array’s [quantile](d3-array#quantile). See [this quantile choropleth](https://observablehq.com/@d3/quantile-choropleth) for an example.
- name: quantize.domain()
  id: d3-scale#quantize_domain
  summary: If domain is specified, sets the scale’s domain to the specified two-element array of numbers
  belongs_to: scale
  description: |-
    ###### *quantize*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *domain* is specified, sets the scale’s domain to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. The numbers must be in ascending order or the behavior of the scale is undefined. If *domain* is not specified, returns the scale’s current domain.
- name: quantize.invertExtent()
  id: d3-scale#quantize_invertextent
  summary: 'Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantize'
  belongs_to: scale
  description: |-
    ###### *quantize*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns the extent of values in the [domain](#quantize_domain) \[*x0*, *x1*\] for the corresponding *value* in the [range](#quantize_range): the inverse of [*quantize*](#_quantize). This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.

    ``` javascript
    var width = d3.scaleQuantize()
        .domain([10, 100])
        .range([1, 2, 4]);

    width.invertExtent(2); // [40, 70]
    ```
- name: quantize.nice()
  id: d3-scale#quantize_nice
  summary: Equivalent to continuous.nice
  belongs_to: scale
  description: |-
    ###### *quantize*.**nice**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Equivalent to [*continuous*.nice](#continuous_nice).
- name: quantize.range()
  id: d3-scale#quantize_range
  summary: If range is specified, sets the scale’s range to the specified array of values
  belongs_to: scale
  description: |-
    ###### *quantize*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *range* is specified, sets the scale’s range to the specified array of values. The array may contain any number of discrete values. The elements in the given array need not be numbers; any value or type will work. If *range* is not specified, returns the scale’s current range.
- name: quantize.thresholds()
  id: d3-scale#quantize_thresholds
  summary: Returns the array of computed thresholds within the domain
  belongs_to: scale
  description: |-
    ###### *quantize*.**thresholds**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns the array of computed thresholds within the [domain](#quantize_domain).
- name: quantize.tickFormat()
  id: d3-scale#quantize_tickformat
  summary: Equivalent to continuous.tickFormat
  belongs_to: scale
  description: |-
    ###### *quantize*.**tickFormat**(\[*count*\[, *specifier*\]\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/linear.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Equivalent to [*continuous*.tickFormat](#continuous_tickFormat).
- name: quantize.ticks()
  id: d3-scale#quantize_ticks
  summary: Equivalent to continuous.ticks
  belongs_to: scale
  description: |-
    ###### *quantize*.**ticks**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/scale-ticks)

    Equivalent to [*continuous*.ticks](#continuous_ticks).
- name: queue
  id: d3-queue
  summary: 'A queue evaluates zero or more deferred asynchronous tasks with configurable concurrency: you control how many tasks run at the same time'
  description: "# d3-queue\n\nA **queue** evaluates zero or more *deferred* asynchronous tasks with configurable concurrency: you control how many tasks run at the same time. When all the tasks complete, or an error occurs, the queue passes the results to your *await* callback. This library is similar to [Async.js](https://github.com/caolan/async)’s [parallel](https://github.com/caolan/async#paralleltasks-callback) (when *concurrency* is infinite), [series](https://github.com/caolan/async#seriestasks-callback) (when *concurrency* is 1), and [queue](https://github.com/caolan/async#queue), but features a much smaller footprint: as of release 2, d3-queue is about 700 bytes gzipped, compared to 4,300 for Async.\n\nEach task is defined as a function that takes a callback as its last argument. For example, here’s a task that says hello after a short delay:\n\n``` javascript\nfunction delayedHello(callback) {\n  setTimeout(function() {\n    console.log(\"Hello!\");\n    callback(null);\n  }, 250);\n}\n```\n\nWhen a task completes, it must call the provided callback. The first argument to the callback should be null if the task is successful, or the error if the task failed. The optional second argument to the callback is the return value of the task. (To return multiple values from a single callback, wrap the results in an object or array.)\n\nTo run multiple tasks simultaneously, create a queue, *defer* your tasks, and then register an *await* callback to be called when all of the tasks complete (or an error occurs):\n\n``` javascript\nvar q = d3.queue();\nq.defer(delayedHello);\nq.defer(delayedHello);\nq.await(function(error) {\n  if (error) throw error;\n  console.log(\"Goodbye!\");\n});\n```\n\nOf course, you can also use a `for` loop to defer many tasks:\n\n``` javascript\nvar q = d3.queue();\n\nfor (var i = 0; i < 1000; ++i) {\n  q.defer(delayedHello);\n}\n\nq.awaitAll(function(error) {\n  if (error) throw error;\n  console.log(\"Goodbye!\");\n});\n```\n\nTasks can take optional arguments. For example, here’s how to configure the delay before hello and provide a name:\n\n``` javascript\nfunction delayedHello(name, delay, callback) {\n  setTimeout(function() {\n    console.log(\"Hello, \" + name + \"!\");\n    callback(null);\n  }, delay);\n}\n```\n\nAny additional arguments provided to [*queue*.defer](#queue_defer) are automatically passed along to the task function before the callback argument. You can also use method chaining for conciseness, avoiding the need for a local variable:\n\n``` javascript\nd3.queue()\n    .defer(delayedHello, \"Alice\", 250)\n    .defer(delayedHello, \"Bob\", 500)\n    .defer(delayedHello, \"Carol\", 750)\n    .await(function(error) {\n      if (error) throw error;\n      console.log(\"Goodbye!\");\n    });\n```\n\nThe [asynchronous callback pattern](https://github.com/maxogden/art-of-node#callbacks) is very common in Node.js, so Queue works directly with many Node APIs. For example, to [stat two files](https://nodejs.org/dist/latest/docs/api/fs.html#fs_fs_stat_path_callback) concurrently:\n\n``` javascript\nd3.queue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .await(function(error, file1, file2) {\n      if (error) throw error;\n      console.log(file1, file2);\n    });\n```\n\nYou can also make abortable tasks: these tasks return an object with an *abort* method which terminates the task. So, if a task calls [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) on start, it can call [clearTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout) on abort. For example:\n\n``` javascript\nfunction delayedHello(name, delay, callback) {\n  var id = setTimeout(function() {\n    console.log(\"Hello, \" + name + \"!\");\n    callback(null);\n  }, delay);\n  return {\n    abort: function() {\n      clearTimeout(id);\n    }\n  };\n}\n```\n\nWhen you call [*queue*.abort](#queue_abort), any in-progress tasks will be immediately aborted; in addition, any pending (not-yet-started) tasks will not be started. Note that you can also use *queue*.abort *without* abortable tasks, in which case pending tasks will be cancelled, though active tasks will continue to run. Conveniently, the [d3-request](d3-request) library implements abort atop XMLHttpRequest. For example:\n\n``` javascript\nvar q = d3.queue()\n    .defer(d3.request, \"http://www.google.com:81\")\n    .defer(d3.request, \"http://www.google.com:81\")\n    .defer(d3.request, \"http://www.google.com:81\")\n    .awaitAll(function(error, results) {\n      if (error) throw error;\n      console.log(results);\n    });\n```\n\nTo abort these requests, call `q.abort()`.\n\n## Installing\n\nIf you use NPM, `npm install d3-queue`. If you use Bower, `bower install d3-queue`. Otherwise, download the [latest release](https://github.com/d3/d3-queue/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-queue.v3.min.js) or as part of [D3 4.0](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-queue.v3.min.js\"></script>\n<script>\n\nvar q = d3.queue();\n\n</script>\n```\n\n[Try d3-queue in your browser.](https://tonicdev.com/npm/d3-queue)\n\n## API Reference\n\n###### d3.**queue**(\\[*concurrency*\\]) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js \"Source\")\n\nConstructs a new queue with the specified *concurrency*. If *concurrency* is not specified, the queue has infinite concurrency. Otherwise, *concurrency* is a positive integer. For example, if *concurrency* is 1, then all tasks will be run in series. If *concurrency* is 3, then at most three tasks will be allowed to proceed concurrently; this is useful, for example, when loading resources in a web browser.\n\n###### *queue*.**defer**(*task*\\[, *arguments*…\\]) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L20 \"Source\")\n\nAdds the specified asynchronous *task* callback to the queue, with any optional *arguments*. The *task* is a function that will be called when the task should start. It is passed the specified optional *arguments* and an additional *callback* as the last argument; the callback must be invoked by the task when it finishes. The task must invoke the callback with two arguments: the *error*, if any, and the *result* of the task. To return multiple results from a single callback, wrap the results in an object or array.\n\nFor example, here’s a task which computes the answer to the ultimate question of life, the universe, and everything after a short delay:\n\n``` javascript\nfunction simpleTask(callback) {\n  setTimeout(function() {\n    callback(null, {answer: 42});\n  }, 250);\n}\n```\n\nIf the task calls back with an error, any tasks that were scheduled *but not yet started* will not run. For a serial queue (of *concurrency* 1), this means that a task will only run if all previous tasks succeed. For a queue with higher concurrency, only the first error that occurs is reported to the await callback, and tasks that were started before the error occurred will continue to run; note, however, that their results will not be reported to the await callback.\n\nTasks can only be deferred before [*queue*.await](#queue_await) or [*queue*.awaitAll](#queue_awaitAll) is called. If a task is deferred after then, an error is thrown. If the *task* is not a function, an error is thrown.\n\n###### *queue*.**abort**() [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L29 \"Source\")\n\nAborts any active tasks, invoking each active task’s *task*.abort function, if any. Also prevents any new tasks from starting, and immediately invokes the [*queue*.await](#queue_await) or [*queue*.awaitAll](#queue_awaitAll) callback with an error indicating that the queue was aborted. See the [introduction](#d3-queue) for an example implementation of an abortable task. Note that if your tasks are not abortable, any running tasks will continue to run, even after the await callback has been invoked with the abort error. The await callback is invoked exactly once on abort, and so is not called when any running tasks subsequently succeed or fail.\n\n###### *queue*.**await**(*callback*) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L33 \"Source\")\n\nSets the *callback* to be invoked when all deferred tasks have finished. The first argument to the *callback* is the first error that occurred, or null if no error occurred. If an error occurred, there are no additional arguments to the callback. Otherwise, the *callback* is passed each result as an additional argument. For example:\n\n``` javascript\nd3.queue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .await(function(error, file1, file2) { console.log(file1, file2); });\n```\n\nIf all [deferred](#queue_defer) tasks have already completed, the callback will be invoked immediately. This method may only be called once, after any tasks have been deferred. If this method is called multiple times, or if it is called after [*queue*.awaitAll](#queue_awaitAll), an error is thrown. If the *callback* is not a function, an error is thrown.\n\n###### *queue*.**awaitAll**(*callback*) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L39 \"Source\")\n\nSets the *callback* to be invoked when all deferred tasks have finished. The first argument to the *callback* is the first error that occurred, or null if no error occurred. If an error occurred, there are no additional arguments to the callback. Otherwise, the *callback* is also passed an array of results as the second argument. For example:\n\n``` javascript\nd3.queue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .awaitAll(function(error, files) { console.log(files); });\n```\n\nIf all [deferred](#queue_defer) tasks have already completed, the callback will be invoked immediately. This method may only be called once, after any tasks have been deferred. If this method is called multiple times, or if it is called after [*queue*.await](#queue_await), an error is thrown. If the *callback* is not a function, an error is thrown.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-queue](https://github.com/d3/d3-queue)"
- name: queue.abort()
  id: d3-queue#queue_abort
  summary: Aborts any active tasks, invoking each active task’s task.abort function, if any
  belongs_to: queue
  description: |-
    ###### *queue*.**abort**() [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L29 "Source")

    Aborts any active tasks, invoking each active task’s *task*.abort function, if any. Also prevents any new tasks from starting, and immediately invokes the [*queue*.await](#queue_await) or [*queue*.awaitAll](#queue_awaitAll) callback with an error indicating that the queue was aborted. See the [introduction](#d3-queue) for an example implementation of an abortable task. Note that if your tasks are not abortable, any running tasks will continue to run, even after the await callback has been invoked with the abort error. The await callback is invoked exactly once on abort, and so is not called when any running tasks subsequently succeed or fail.
- name: queue.await()
  id: d3-queue#queue_await
  summary: Sets the callback to be invoked when all deferred tasks have finished
  belongs_to: queue
  description: |-
    ###### *queue*.**await**(*callback*) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L33 "Source")

    Sets the *callback* to be invoked when all deferred tasks have finished. The first argument to the *callback* is the first error that occurred, or null if no error occurred. If an error occurred, there are no additional arguments to the callback. Otherwise, the *callback* is passed each result as an additional argument. For example:

    ``` javascript
    d3.queue()
        .defer(fs.stat, __dirname + "/../Makefile")
        .defer(fs.stat, __dirname + "/../package.json")
        .await(function(error, file1, file2) { console.log(file1, file2); });
    ```

    If all [deferred](#queue_defer) tasks have already completed, the callback will be invoked immediately. This method may only be called once, after any tasks have been deferred. If this method is called multiple times, or if it is called after [*queue*.awaitAll](#queue_awaitAll), an error is thrown. If the *callback* is not a function, an error is thrown.
- name: queue.awaitAll()
  id: d3-queue#queue_awaitall
  summary: Sets the callback to be invoked when all deferred tasks have finished
  belongs_to: queue
  description: "###### *queue*.**awaitAll**(*callback*) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L39 \"Source\")\n\nSets the *callback* to be invoked when all deferred tasks have finished. The first argument to the *callback* is the first error that occurred, or null if no error occurred. If an error occurred, there are no additional arguments to the callback. Otherwise, the *callback* is also passed an array of results as the second argument. For example:\n\n``` javascript\nd3.queue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .awaitAll(function(error, files) { console.log(files); });\n```\n\nIf all [deferred](#queue_defer) tasks have already completed, the callback will be invoked immediately. This method may only be called once, after any tasks have been deferred. If this method is called multiple times, or if it is called after [*queue*.await](#queue_await), an error is thrown. If the *callback* is not a function, an error is thrown.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-queue](https://github.com/d3/d3-queue)"
- name: queue.defer()
  id: d3-queue#queue_defer
  summary: Adds the specified asynchronous task callback to the queue, with any optional arguments
  belongs_to: queue
  description: |-
    ###### *queue*.**defer**(*task*\[, *arguments*…\]) [Source](https://github.com/d3/d3-queue/blob/master/src/queue.js#L20 "Source")

    Adds the specified asynchronous *task* callback to the queue, with any optional *arguments*. The *task* is a function that will be called when the task should start. It is passed the specified optional *arguments* and an additional *callback* as the last argument; the callback must be invoked by the task when it finishes. The task must invoke the callback with two arguments: the *error*, if any, and the *result* of the task. To return multiple results from a single callback, wrap the results in an object or array.

    For example, here’s a task which computes the answer to the ultimate question of life, the universe, and everything after a short delay:

    ``` javascript
    function simpleTask(callback) {
      setTimeout(function() {
        callback(null, {answer: 42});
      }, 250);
    }
    ```

    If the task calls back with an error, any tasks that were scheduled *but not yet started* will not run. For a serial queue (of *concurrency* 1), this means that a task will only run if all previous tasks succeed. For a queue with higher concurrency, only the first error that occurs is reported to the await callback, and tasks that were started before the error occurred will continue to run; note, however, that their results will not be reported to the await callback.

    Tasks can only be deferred before [*queue*.await](#queue_await) or [*queue*.awaitAll](#queue_awaitAll) is called. If a task is deferred after then, an error is thrown. If the *task* is not a function, an error is thrown.
- name: radial.radius()
  id: d3-force#radial_radius
  summary: If radius is specified, sets the circle radius to the specified number or function, re-evaluates the radius accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *radial*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)

    If *radius* is specified, sets the circle *radius* to the specified number or function, re-evaluates the *radius* accessor for each node, and returns this force. If *radius* is not specified, returns the current *radius* accessor.

    The *radius* accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target radius of each node is only recomputed when the force is initialized or when this method is called with a new *radius*, and not on every application of the force.
- name: radial.strength()
  id: d3-force#radial_strength
  summary: If strength is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *radial*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)

    If *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *x*- and *y*-velocity. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current position to the closest point on the circle with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \[0,1\] is not recommended.

    If *strength* is not specified, returns the current strength accessor, which defaults to:

    ``` javascript
    function strength() {
      return 0.1;
    }
    ```

    The strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.
- name: radial.x()
  id: d3-force#radial_x
  summary: If x is specified, sets the x-coordinate of the circle center to the specified number and returns this force
  belongs_to: force
  description: |-
    ###### *radial*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)

    If *x* is specified, sets the *x*-coordinate of the circle center to the specified number and returns this force. If *x* is not specified, returns the current *x*-coordinate of the center, which defaults to zero.
- name: radial.y()
  id: d3-force#radial_y
  summary: If y is specified, sets the y-coordinate of the circle center to the specified number and returns this force
  belongs_to: force
  description: "###### *radial*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-force/blob/master/src/radial.js)\n\nIf *y* is specified, sets the *y*-coordinate of the circle center to the specified number and returns this force. If *y* is not specified, returns the current *y*-coordinate of the center, which defaults to zero.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-force](https://github.com/d3/d3-force)"
- name: random
  id: d3-random
  summary: Generate random numbers from various distributions
  description: "# d3-random\n\nGenerate random numbers from various distributions.\n\nSee the [d3-random collection on Observable](https://observablehq.com/collection/@d3/d3-random) for examples.\n\n## Installing\n\nIf you use npm, `npm install d3-random`. You can also download the [latest release on GitHub](https://github.com/d3/d3-random/releases/latest). For vanilla HTML in modern browsers, import d3-random from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {randomUniform} from \"https://cdn.skypack.dev/d3-random@3\";\n\nconst random = randomUniform(1, 10);\n\n</script>\n```\n\nFor legacy environments, you can load d3-random’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-random@3\"></script>\n<script>\n\nconst random = d3.randomUniform(1, 10);\n\n</script>\n```\n\n## API Reference\n\n###### d3.**randomUniform**(\\[*min*, \\]\\[*max*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/uniform.js), [Examples](https://observablehq.com/@d3/d3-random#uniform)\n\nReturns a function for generating random numbers with a [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)). The minimum allowed value of a returned number is *min* (inclusive), and the maximum is *max* (exclusive). If *min* is not specified, it defaults to 0; if *max* is not specified, it defaults to 1. For example:\n\n``` javascript\nd3.randomUniform(6)(); // Returns a number greater than or equal to 0 and less than 6.\nd3.randomUniform(1, 5)(); // Returns a number greater than or equal to 1 and less than 5.\n```\n\n###### d3.**randomInt**(\\[*min*, \\]\\[*max*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/int.js), [Examples](https://observablehq.com/@d3/d3-random#int)\n\nReturns a function for generating random integers with a [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)). The minimum allowed value of a returned number is ⌊*min*⌋ (inclusive), and the maximum is ⌊*max* - 1⌋ (inclusive). If *min* is not specified, it defaults to 0. For example:\n\n``` javascript\nd3.randomInt(6)(); // Returns an integer greater than or equal to 0 and less than 6.\nd3.randomInt(1, 5)(); // Returns an integer greater than or equal to 1 and less than 5.\n```\n\n###### d3.**randomNormal**(\\[*mu*\\]\\[, *sigma*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/normal.js), [Examples](https://observablehq.com/@d3/d3-random#normal)\n\nReturns a function for generating random numbers with a [normal (Gaussian) distribution](https://en.wikipedia.org/wiki/Normal_distribution). The expected value of the generated numbers is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.\n\n###### d3.**randomLogNormal**(\\[*mu*\\]\\[, *sigma*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/logNormal.js), [Examples](https://observablehq.com/@d3/d3-random#logNormal)\n\nReturns a function for generating random numbers with a [log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution). The expected value of the random variable’s natural logarithm is *mu*, with the given standard deviation *sigma*. If *mu* is not specified, it defaults to 0; if *sigma* is not specified, it defaults to 1.\n\n###### d3.**randomBates**(*n*) · [Source](https://github.com/d3/d3-random/blob/master/src/bates.js), [Examples](https://observablehq.com/@d3/d3-random#bates)\n\nReturns a function for generating random numbers with a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution) with *n* independent variables. The case of fractional *n* is handled as with d3.randomIrwinHall, and d3.randomBates(0) is equivalent to d3.randomUniform().\n\n###### d3.**randomIrwinHall**(*n*) · [Source](https://github.com/d3/d3-random/blob/master/src/irwinHall.js), [Examples](https://observablehq.com/@d3/d3-random#irwinHall)\n\nReturns a function for generating random numbers with an [Irwin–Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution) with *n* independent variables. If the fractional part of *n* is non-zero, this is treated as adding d3.randomUniform() times that fractional part to the integral part.\n\n###### d3.**randomExponential**(*lambda*) · [Source](https://github.com/d3/d3-random/blob/master/src/exponential.js), [Examples](https://observablehq.com/@d3/d3-random#exponential)\n\nReturns a function for generating random numbers with an [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution) with the rate *lambda*; equivalent to time between events in a [Poisson process](https://en.wikipedia.org/wiki/Poisson_point_process) with a mean of 1 / *lambda*. For example, exponential(1/40) generates random times between events where, on average, one event occurs every 40 units of time.\n\n###### d3.**randomPareto**(*alpha*) · [Source](https://github.com/d3/d3-random/blob/master/src/pareto.js), [Examples](https://observablehq.com/@d3/d3-random#pareto)\n\nReturns a function for generating random numbers with a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution) with the shape *alpha*. The value *alpha* must be a positive value.\n\n###### d3.**randomBernoulli**(*p*) · [Source](https://github.com/d3/d3-random/blob/master/src/bernoulli.js), [Examples](https://observablehq.com/@d3/d3-random#bernoulli)\n\nReturns a function for generating either 1 or 0 according to a [Bernoulli distribution](https://en.wikipedia.org/wiki/Binomial_distribution) with 1 being returned with success probability *p* and 0 with failure probability *q* = 1 - *p*. The value *p* is in the range \\[0, 1\\].\n\n###### d3.**randomGeometric**(*p*) · [Source](https://github.com/d3/d3-random/blob/master/src/geometric.js), [Examples](https://observablehq.com/@d3/d3-random#geometric)\n\nReturns a function for generating numbers with a [geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution) with success probability *p*. The value *p* is in the range \\[0, 1\\].\n\n###### d3.**randomBinomial**(*n*, *p*) · [Source](https://github.com/d3/d3-random/blob/master/src/binomial.js), [Examples](https://observablehq.com/@d3/d3-random#binomial)\n\nReturns a function for generating random numbers with a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution) with *n* the number of trials and *p* the probability of success in each trial. The value *n* is greater or equal to 0, and the value *p* is in the range \\[0, 1\\].\n\n###### d3.**randomGamma**(*k*, \\[*theta*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/gamma.js), [Examples](https://observablehq.com/@parcly-taxel/the-gamma-and-beta-distributions)\n\nReturns a function for generating random numbers with a [gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution) with *k* the shape parameter and *theta* the scale parameter. The value *k* must be a positive value; if *theta* is not specified, it defaults to 1.\n\n###### d3.**randomBeta**(*alpha*, *beta*) · [Source](https://github.com/d3/d3-random/blob/master/src/beta.js), [Examples](https://observablehq.com/@parcly-taxel/the-gamma-and-beta-distributions)\n\nReturns a function for generating random numbers with a [beta distribution](https://en.wikipedia.org/wiki/Beta_distribution) with *alpha* and *beta* shape parameters, which must both be positive.\n\n###### d3.**randomWeibull**(*k*, \\[*a*\\], \\[*b*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/weibull.js), [Examples](https://observablehq.com/@parcly-taxel/frechet-gumbel-weibull)\n\nReturns a function for generating random numbers with one of the [generalized extreme value distributions](https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution), depending on *k*:\n\n- If *k* is positive, the [Weibull distribution](https://en.wikipedia.org/wiki/Weibull_distribution) with shape parameter *k*\n- If *k* is zero, the [Gumbel distribution](https://en.wikipedia.org/wiki/Gumbel_distribution)\n- If *k* is negative, the [Fréchet distribution](https://en.wikipedia.org/wiki/Fr%C3%A9chet_distribution) with shape parameter −*k*\n\nIn all three cases, *a* is the location parameter and *b* is the scale parameter. If *a* is not specified, it defaults to 0; if *b* is not specified, it defaults to 1.\n\n###### d3.**randomCauchy**(\\[*a*\\], \\[*b*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/cauchy.js), [Examples](https://observablehq.com/@parcly-taxel/cauchy-and-logistic-distributions)\n\nReturns a function for generating random numbers with a [Cauchy distribution](https://en.wikipedia.org/wiki/Cauchy_distribution). *a* and *b* have the same meanings and default values as in d3.randomWeibull.\n\n###### d3.**randomLogistic**(\\[*a*\\], \\[*b*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/logistic.js), [Examples](https://observablehq.com/@parcly-taxel/cauchy-and-logistic-distributions)\n\nReturns a function for generating random numbers with a [logistic distribution](https://en.wikipedia.org/wiki/Logistic_distribution). *a* and *b* have the same meanings and default values as in d3.randomWeibull.\n\n###### d3.**randomPoisson**(*lambda*) · [Source](https://github.com/d3/d3-random/blob/master/src/poisson.js), [Examples](https://observablehq.com/@parcly-taxel/the-poisson-distribution)\n\nReturns a function for generating random numbers with a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution) with mean *lambda*.\n\n###### *random*.**source**(*source*) · [Examples](https://observablehq.com/@d3/random-source)\n\nReturns the same type of function for generating random numbers but where the given random number generator *source* is used as the source of randomness instead of Math.random. The given random number generator must implement the same interface as Math.random and only return values in the range \\[0, 1). This is useful when a seeded random number generator is preferable to Math.random. For example:\n\n``` javascript\nimport {randomLcg, randomNormal} from \"d3-random\";\n\nconst seed = 0.44871573888282423; // any number in [0, 1)\nconst random = randomNormal.source(randomLcg(seed))(0, 1);\n\nrandom(); // -0.6253955998897069\n```\n\n###### d3.**randomLcg**(\\[*seed*\\]) · [Source](https://github.com/d3/d3-random/blob/master/src/lcg.js), [Examples](https://observablehq.com/@d3/d3-randomlcg)\n\nReturns a [linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator); this function can be called repeatedly to obtain pseudorandom values well-distributed on the interval \\[0,1) and with a long period (up to 1 billion numbers), similar to Math.random. A *seed* can be specified as a real number in the interval \\[0,1) or as any integer. In the latter case, only the lower 32 bits are considered. Two generators instanced with the same seed generate the same sequence, allowing to create reproducible pseudo-random experiments. If the *seed* is not specified, one is chosen using Math.random.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-random](https://github.com/d3/d3-random)"
- name: random.source()
  id: d3-random#random_source
  summary: Returns the same type of function for generating random numbers but where the given random number generator source is used as the source of randomness instead of Math.random
  belongs_to: random
  description: |-
    ###### *random*.**source**(*source*) · [Examples](https://observablehq.com/@d3/random-source)

    Returns the same type of function for generating random numbers but where the given random number generator *source* is used as the source of randomness instead of Math.random. The given random number generator must implement the same interface as Math.random and only return values in the range \[0, 1). This is useful when a seeded random number generator is preferable to Math.random. For example:

    ``` javascript
    import {randomLcg, randomNormal} from "d3-random";

    const seed = 0.44871573888282423; // any number in [0, 1)
    const random = randomNormal.source(randomLcg(seed))(0, 1);

    random(); // -0.6253955998897069
    ```
- name: rectangularPolyconic.parallel()
  id: d3-geo-projection#rectangularpolyconic_parallel
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *rectangularPolyconic*.**parallel**(\[*parallel*\])

    Defaults to 0°.
- name: request
  id: d3-request
  summary: This module is deprecated as of D3 5.0; please use d3-fetch instead
  description: "# d3-request\n\n**This module is deprecated as of D3 5.0; please use [d3-fetch](d3-fetch) instead.**\n\nThis module provides a convenient alternative to XMLHttpRequest. For example, to load a text file:\n\n``` javascript\nd3.text(\"/path/to/file.txt\", function(error, text) {\n  if (error) throw error;\n  console.log(text); // Hello, world!\n});\n```\n\nTo load and parse a CSV file:\n\n``` javascript\nd3.csv(\"/path/to/file.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data); // [{\"Hello\": \"world\"}, …]\n});\n```\n\nTo post some query parameters:\n\n``` javascript\nd3.request(\"/path/to/resource\")\n    .header(\"X-Requested-With\", \"XMLHttpRequest\")\n    .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    .post(\"a=2&b=3\", callback);\n```\n\nThis module has built-in support for parsing [JSON](#json), [CSV](#csv) and [TSV](#tsv); in browsers, but not in Node, [HTML](#html) and [XML](#xml) are also supported. You can parse additional formats by using [request](#request) or [text](#text) directly.\n\n## Installing\n\nIf you use NPM, `npm install d3-request`. Otherwise, download the [latest release](https://github.com/d3/d3-request/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-request.v1.min.js) or as part of [D3 4.0](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-collection.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-dispatch.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-dsv.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-request.v1.min.js\"></script>\n<script>\n\nd3.csv(\"/path/to/file.csv\", callback);\n\n</script>\n```\n\n## API Reference\n\n###### d3.**request**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L4 \"Source\")\n\nReturns a new *request* for specified *url*. If no *callback* is specified, the returned *request* is not yet [sent](#request_send) and can be further configured. If a *callback* is specified, it is equivalent to calling [*request*.get](#request_get) immediately after construction:\n\n``` javascript\nd3.request(url)\n    .get(callback);\n```\n\nIf you wish to specify a request header or a mime type, you must *not* specify a callback to the constructor. Use [*request*.header](#request_header) or [*request*.mimeType](#request_mimeType) followed by [*request*.get](#request_get) instead. See [d3.json](#json), [d3.csv](#csv), [d3.tsv](#tsv), [d3.html](#html) and [d3.xml](#xml) for content-specific convenience constructors.\n\n###### *request*.**header**(*name*\\[, *value*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L51 \"Source\")\n\nIf *value* is specified, sets the request header with the specified *name* to the specified value and returns this request instance. If *value* is null, removes the request header with the specified *name* instead. If *value* is not specified, returns the current value of the request header with the specified *name*. Header names are case-insensitive.\n\nRequest headers can only be modified before the request is [sent](#request_send). Therefore, you cannot pass a callback to the [request constructor](#request) if you wish to specify a header; use [*request*.get](#request_get) or similar instead. For example:\n\n``` javascript\nd3.request(url)\n    .header(\"Accept-Language\", \"en-US\")\n    .header(\"X-Requested-With\", \"XMLHttpRequest\")\n    .get(callback);\n```\n\nNote: this library does not set the X-Requested-With header to `XMLHttpRequest` by default. Some servers require this header to mitigate unwanted requests, but the presence of the header triggers CORS preflight checks; if necessary, set this header before sending the request.\n\n###### *request*.**mimeType**(\\[*type*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L60 \"Source\")\n\nIf *type* is specified, sets the request mime type to the specified value and returns this request instance. If *type* is null, clears the current mime type (if any) instead. If *type* is not specified, returns the current mime type, which defaults to null. The mime type is used to both set the [\"Accept\" request header](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) and for [overrideMimeType](http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype%28%29-method), where supported.\n\nThe request mime type can only be modified before the request is [sent](#request_send). Therefore, you cannot pass a callback to the [request constructor](#request) if you wish to override the mime type; use [*request*.get](#request_get) or similar instead. For example:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/csv\")\n    .get(callback);\n```\n\n###### *request*.**user**(\\[*value*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L80 \"Source\")\n\nIf *value* is specified, sets the user name for authentication to the specified string and returns this request instance. If *value* is not specified, returns the current user name, which defaults to null.\n\n###### *request*.**password**(\\[*value*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L84 \"Source\")\n\nIf *value* is specified, sets the password for authentication to the specified string and returns this request instance. If *value* is not specified, returns the current password, which defaults to null.\n\n###### *request*.**timeout**(\\[*timeout*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L74 \"Source\")\n\nIf *timeout* is specified, sets the [timeout](http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute) attribute of the request to the specified number of milliseconds and returns this request instance. If *timeout* is not specified, returns the current response timeout, which defaults to 0.\n\n###### *request*.**responseType**(\\[*type*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L68 \"Source\")\n\nIf *type* is specified, sets the [response type](http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute) attribute of the request and returns this request instance. Typical values are: `​` (the empty string), `arraybuffer`, `blob`, `document`, and `text`. If *type* is not specified, returns the current response type, which defaults to `​`.\n\n###### *request*.**response**(*value*) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L90 \"Source\")\n\nSets the response value function to the specified function and returns this request instance. The response value function is used to map the response XMLHttpRequest object to a useful data value. See the convenience methods [json](#json) and [text](#text) for examples.\n\n###### *request*.**get**(\\[*data*\\]\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L96 \"Source\")\n\nEquivalent to [*request*.send](#request_send) with the GET method:\n\n``` javascript\nrequest.send(\"GET\", data, callback);\n```\n\n###### *request*.**post**(\\[*data*\\]\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L101 \"Source\")\n\nEquivalent to [*request*.send](#request_send) with the POST method:\n\n``` javascript\nrequest.send(\"POST\", data, callback);\n```\n\n###### *request*.**send**(*method*\\[, *data*\\]\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L106 \"Source\")\n\nIssues this request using the specified *method* (such as `GET` or `POST`), optionally posting the specified *data* in the request body, and returns this request instance. If a *callback* is specified, the callback will be invoked asynchronously when the request succeeds or fails. The callback is invoked with two arguments: the error, if any, and the [response value](#request_response). The response value is undefined if an error occurs. This is equivalent to:\n\n``` javascript\nrequest\n    .on(\"error\", function(error) { callback(error); })\n    .on(\"load\", function(xhr) { callback(null, xhr); })\n    .send(method, data);\n```\n\nIf no *callback* is specified, then \"load\" and \"error\" listeners should be registered via [*request*.on](#request_on).\n\n###### *request*.**abort**() [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L121 \"Source\")\n\nAborts this request, if it is currently in-flight, and returns this request instance. See [XMLHttpRequest’s abort](http://www.w3.org/TR/XMLHttpRequest/#the-abort%28%29-method).\n\n###### *request*.**on**(*type*\\[, *listener*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L126 \"Source\")\n\nIf *listener* is specified, sets the event *listener* for the specified *type* and returns this request instance. If an event listener was already registered for the same type, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event *listener* for the specified *type* (if any) instead. If *listener* is not specified, returns the currently-assigned listener for the specified type, if any.\n\nThe type must be one of the following:\n\n- `beforesend` - to allow custom headers and the like to be set before the request is [sent](#request_send).\n- `progress` - to monitor the [progress of the request](http://www.w3.org/TR/progress-events/).\n- `load` - when the request completes successfully.\n- `error` - when the request completes unsuccessfully; this includes 4xx and 5xx response codes.\n\nTo register multiple listeners for the same *type*, the type may be followed by an optional name, such as `load.foo` and `load.bar`. See [d3-dispatch](d3-dispatch) for details.\n\n###### d3.**csv**(*url*\\[\\[, *row*\\], *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/csv.js \"Source\")\n\nReturns a new [*request*](#request) for the [CSV](d3-dsv#csvParse) file at the specified *url* with the default mime type `text/csv`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/csv\")\n    .response(function(xhr) { return d3.csvParse(xhr.responseText, row); });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/csv\")\n    .response(function(xhr) { return d3.csvParse(xhr.responseText, row); })\n    .get(callback);\n```\n\nAn optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:\n\n``` javascript\nfunction row(d) {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n}\n```\n\nThe returned *request* exposes an additional *request*.row method as an alternative to passing the *row* conversion function to d3.csv, allowing you to configure the request before sending it. For example, this:\n\n``` javascript\nd3.csv(url, row, callback);\n```\n\nIs equivalent to this:\n\n``` javascript\nd3.csv(url)\n    .row(row)\n    .get(callback);\n```\n\n###### d3.**html**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/html.js \"Source\")\n\nReturns a new [*request*](#request) for the HTML file at the specified *url* with the default mime type `text/html`. The HTML file is returned as a [document fragment](https://developer.mozilla.org/en-US/docs/DOM/range.createContextualFragment). If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/html\")\n    .response(function(xhr) { return document.createRange().createContextualFragment(xhr.responseText); });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/html\")\n    .response(function(xhr) { return document.createRange().createContextualFragment(xhr.responseText); })\n    .get(callback);\n```\n\nHTML parsing requires a global document and relies on [DOM Ranges](https://dom.spec.whatwg.org/#ranges), which are [not supported by JSDOM](https://github.com/tmpvar/jsdom/issues/317) as of version 8.3; thus, this method is supported in browsers but not in Node.\n\n###### d3.**json**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/json.js \"Source\")\n\nReturns a new [*request*](#request) to [get](#request_get) the [JSON](http://json.org) file at the specified *url* with the default mime type `application/json`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/json\")\n    .response(function(xhr) { return JSON.parse(xhr.responseText); });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/json\")\n    .response(function(xhr) { return JSON.parse(xhr.responseText); })\n    .get(callback);\n```\n\n###### d3.**text**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/text.js \"Source\")\n\nReturns a new [*request*](#request) to [get](#request_get) the text file at the specified *url* with the default mime type `text/plain`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .get(callback);\n```\n\n###### d3.**tsv**(*url*\\[\\[, *row*\\], *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/tsv.js \"Source\")\n\nReturns a new [*request*](#request) for a [TSV](d3-dsv#tsvParse) file at the specified *url* with the default mime type `text/tab-separated-values`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/tab-separated-values\")\n    .response(function(xhr) { return d3.tsvParse(xhr.responseText, row); });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"text/tab-separated-values\")\n    .response(function(xhr) { return d3.tsvParse(xhr.responseText, row); })\n    .get(callback);\n```\n\nAn optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](d3-dsv#dsv_parse) for details. For example:\n\n``` javascript\nfunction row(d) {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n}\n```\n\nThe returned *request* exposes an additional *request*.row method as an alternative to passing the *row* conversion function to d3.tsv, allowing you to configure the request before sending it. For example, this:\n\n``` javascript\nd3.tsv(url, row, callback);\n```\n\nIs equivalent to this:\n\n``` javascript\nd3.tsv(url)\n    .row(row)\n    .get(callback);\n```\n\n###### d3.**xml**(*url*\\[, *callback*\\]) [Source](https://github.com/d3/d3-request/blob/master/src/xml.js \"Source\")\n\nReturns a new [*request*](#request) to [get](#request_get) the XML file at the specified *url* with the default mime type `application/xml`. If no *callback* is specified, this is equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/xml\")\n    .response(function(xhr) { return xhr.responseXML; });\n```\n\nIf a *callback* is specified, a [GET](#request_get) request is sent, making it equivalent to:\n\n``` javascript\nd3.request(url)\n    .mimeType(\"application/xml\")\n    .response(function(xhr) { return xhr.responseXML; })\n    .get(callback);\n```\n\nXML parsing relies on [*xhr*.responseXML](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML) which is not supported by [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest/issues/8) as of version 1.8; thus, this method is supported in browsers but not in Node.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-request](https://github.com/d3/d3-request)"
- name: request.abort()
  id: d3-request#request_abort
  summary: Aborts this request, if it is currently in-flight, and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**abort**() [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L121 "Source")

    Aborts this request, if it is currently in-flight, and returns this request instance. See [XMLHttpRequest’s abort](http://www.w3.org/TR/XMLHttpRequest/#the-abort%28%29-method).
- name: request.get()
  id: d3-request#request_get
  summary: null
  belongs_to: request
  description: |-
    ###### *request*.**get**(\[*data*\]\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L96 "Source")

    Equivalent to [*request*.send](#request_send) with the GET method:

    ``` javascript
    request.send("GET", data, callback);
    ```
- name: request.header()
  id: d3-request#request_header
  summary: If value is specified, sets the request header with the specified name to the specified value and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**header**(*name*\[, *value*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L51 "Source")

    If *value* is specified, sets the request header with the specified *name* to the specified value and returns this request instance. If *value* is null, removes the request header with the specified *name* instead. If *value* is not specified, returns the current value of the request header with the specified *name*. Header names are case-insensitive.

    Request headers can only be modified before the request is [sent](#request_send). Therefore, you cannot pass a callback to the [request constructor](#request) if you wish to specify a header; use [*request*.get](#request_get) or similar instead. For example:

    ``` javascript
    d3.request(url)
        .header("Accept-Language", "en-US")
        .header("X-Requested-With", "XMLHttpRequest")
        .get(callback);
    ```

    Note: this library does not set the X-Requested-With header to `XMLHttpRequest` by default. Some servers require this header to mitigate unwanted requests, but the presence of the header triggers CORS preflight checks; if necessary, set this header before sending the request.
- name: request.mimeType()
  id: d3-request#request_mimetype
  summary: If type is specified, sets the request mime type to the specified value and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**mimeType**(\[*type*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L60 "Source")

    If *type* is specified, sets the request mime type to the specified value and returns this request instance. If *type* is null, clears the current mime type (if any) instead. If *type* is not specified, returns the current mime type, which defaults to null. The mime type is used to both set the ["Accept" request header](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) and for [overrideMimeType](http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype%28%29-method), where supported.

    The request mime type can only be modified before the request is [sent](#request_send). Therefore, you cannot pass a callback to the [request constructor](#request) if you wish to override the mime type; use [*request*.get](#request_get) or similar instead. For example:

    ``` javascript
    d3.request(url)
        .mimeType("text/csv")
        .get(callback);
    ```
- name: request.on()
  id: d3-request#request_on
  summary: If listener is specified, sets the event listener for the specified type and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**on**(*type*\[, *listener*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L126 "Source")

    If *listener* is specified, sets the event *listener* for the specified *type* and returns this request instance. If an event listener was already registered for the same type, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event *listener* for the specified *type* (if any) instead. If *listener* is not specified, returns the currently-assigned listener for the specified type, if any.

    The type must be one of the following:

    - `beforesend` - to allow custom headers and the like to be set before the request is [sent](#request_send).
    - `progress` - to monitor the [progress of the request](http://www.w3.org/TR/progress-events/).
    - `load` - when the request completes successfully.
    - `error` - when the request completes unsuccessfully; this includes 4xx and 5xx response codes.

    To register multiple listeners for the same *type*, the type may be followed by an optional name, such as `load.foo` and `load.bar`. See [d3-dispatch](d3-dispatch) for details.
- name: request.password()
  id: d3-request#request_password
  summary: If value is specified, sets the password for authentication to the specified string and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**password**(\[*value*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L84 "Source")

    If *value* is specified, sets the password for authentication to the specified string and returns this request instance. If *value* is not specified, returns the current password, which defaults to null.
- name: request.post()
  id: d3-request#request_post
  summary: null
  belongs_to: request
  description: |-
    ###### *request*.**post**(\[*data*\]\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L101 "Source")

    Equivalent to [*request*.send](#request_send) with the POST method:

    ``` javascript
    request.send("POST", data, callback);
    ```
- name: request.response()
  id: d3-request#request_response
  summary: Sets the response value function to the specified function and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**response**(*value*) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L90 "Source")

    Sets the response value function to the specified function and returns this request instance. The response value function is used to map the response XMLHttpRequest object to a useful data value. See the convenience methods [json](#json) and [text](#text) for examples.
- name: request.responseType()
  id: d3-request#request_responsetype
  summary: If type is specified, sets the response type attribute of the request and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**responseType**(\[*type*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L68 "Source")

    If *type* is specified, sets the [response type](http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute) attribute of the request and returns this request instance. Typical values are: `​` (the empty string), `arraybuffer`, `blob`, `document`, and `text`. If *type* is not specified, returns the current response type, which defaults to `​`.
- name: request.send()
  id: d3-request#request_send
  summary: Issues this request using the specified method (such as GET or POST), optionally posting the specified data in the request body, and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**send**(*method*\[, *data*\]\[, *callback*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L106 "Source")

    Issues this request using the specified *method* (such as `GET` or `POST`), optionally posting the specified *data* in the request body, and returns this request instance. If a *callback* is specified, the callback will be invoked asynchronously when the request succeeds or fails. The callback is invoked with two arguments: the error, if any, and the [response value](#request_response). The response value is undefined if an error occurs. This is equivalent to:

    ``` javascript
    request
        .on("error", function(error) { callback(error); })
        .on("load", function(xhr) { callback(null, xhr); })
        .send(method, data);
    ```

    If no *callback* is specified, then "load" and "error" listeners should be registered via [*request*.on](#request_on).
- name: request.timeout()
  id: d3-request#request_timeout
  summary: If timeout is specified, sets the timeout attribute of the request to the specified number of milliseconds and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**timeout**(\[*timeout*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L74 "Source")

    If *timeout* is specified, sets the [timeout](http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute) attribute of the request to the specified number of milliseconds and returns this request instance. If *timeout* is not specified, returns the current response timeout, which defaults to 0.
- name: request.user()
  id: d3-request#request_user
  summary: If value is specified, sets the user name for authentication to the specified string and returns this request instance
  belongs_to: request
  description: |-
    ###### *request*.**user**(\[*value*\]) [Source](https://github.com/d3/d3-request/blob/master/src/request.js#L80 "Source")

    If *value* is specified, sets the user name for authentication to the specified string and returns this request instance. If *value* is not specified, returns the current user name, which defaults to null.
- name: rgb.clamp()
  id: d3-color#rgb_clamp
  summary: Returns a new RGB color where the r, g, and b channels are clamped to the range [0, 255] and rounded to the nearest integer value, and the opacity is clamped to the range [0, 1]
  belongs_to: color
  description: |-
    ###### *rgb*.**clamp**() [Source](https://github.com/d3/d3-color/blob/main/src/color.js "Source")

    Returns a new RGB color where the `r`, `g`, and `b` channels are clamped to the range \[0, 255\] and rounded to the nearest integer value, and the `opacity` is clamped to the range \[0, 1\].
- name: ribbon()
  id: d3-chord#_ribbon
  summary: Generates a ribbon for the given arguments
  belongs_to: chord
  description: |-
    ###### *ribbon*(*arguments…*) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    Generates a ribbon for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the ribbon generator’s accessor functions along with the `this` object. For example, with the default settings, a [chord object](#_chord) expected:

    ``` javascript
    const ribbon = d3.ribbon();

    ribbon({
      source: {startAngle: 0.7524114, endAngle: 1.1212972, radius: 240},
      target: {startAngle: 1.8617078, endAngle: 1.9842927, radius: 240}
    }); // "M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z"
    ```

    Or equivalently if the radius is instead defined as a constant:

    ``` javascript
    const ribbon = d3.ribbon()
        .radius(240);

    ribbon({
      source: {startAngle: 0.7524114, endAngle: 1.1212972},
      target: {startAngle: 1.8617078, endAngle: 1.9842927}
    }); // "M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z"
    ```

    If the ribbon generator has a context, then the ribbon is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.
- name: ribbon.context()
  id: d3-chord#ribbon_context
  summary: If context is specified, sets the context and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *context* is specified, sets the context and returns this ribbon generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated ribbon](#_ribbon) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated ribbon is returned. See also [d3-path](d3-path).
- name: ribbon.endAngle()
  id: d3-chord#ribbon_endangle
  summary: If angle is specified, sets the end angle accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**endAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *angle* is specified, sets the end angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:

    ``` javascript
    function endAngle(d) {
      return d.endAngle;
    }
    ```

    The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.
- name: ribbon.padAngle()
  id: d3-chord#ribbon_padangle
  summary: If angle is specified, sets the pad angle accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**padAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *angle* is specified, sets the pad angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:

    ``` javascript
    function padAngle() {
      return 0;
    }
    ```

    The pad angle specifies the angular gap between adjacent ribbons.
- name: ribbon.radius()
  id: d3-chord#ribbon_radius
  summary: If radius is specified, sets the source and target radius accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**radius**(\[*radius*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *radius* is specified, sets the source and target radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current source radius accessor, which defaults to:

    ``` javascript
    function radius(d) {
      return d.radius;
    }
    ```
- name: ribbon.source()
  id: d3-chord#ribbon_source
  summary: If source is specified, sets the source accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**source**(\[*source*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *source* is specified, sets the source accessor to the specified function and returns this ribbon generator. If *source* is not specified, returns the current source accessor, which defaults to:

    ``` javascript
    function source(d) {
      return d.source;
    }
    ```
- name: ribbon.sourceRadius()
  id: d3-chord#ribbon_sourceradius
  summary: If radius is specified, sets the source radius accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**sourceRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *radius* is specified, sets the source radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current source radius accessor, which defaults to:

    ``` javascript
    function radius(d) {
      return d.radius;
    }
    ```
- name: ribbon.startAngle()
  id: d3-chord#ribbon_startangle
  summary: If angle is specified, sets the start angle accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**startAngle**(\[*angle*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *angle* is specified, sets the start angle accessor to the specified function and returns this ribbon generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:

    ``` javascript
    function startAngle(d) {
      return d.startAngle;
    }
    ```

    The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.
- name: ribbon.target()
  id: d3-chord#ribbon_target
  summary: If target is specified, sets the target accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**target**(\[*target*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *target* is specified, sets the target accessor to the specified function and returns this ribbon generator. If *target* is not specified, returns the current target accessor, which defaults to:

    ``` javascript
    function target(d) {
      return d.target;
    }
    ```
- name: ribbon.targetRadius()
  id: d3-chord#ribbon_targetradius
  summary: If radius is specified, sets the target radius accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: |-
    ###### *ribbon*.**targetRadius**(\[*radius*\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)

    If *radius* is specified, sets the target radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current target radius accessor, which defaults to:

    ``` javascript
    function radius(d) {
      return d.radius;
    }
    ```

    By convention, the target radius in asymmetric chord diagrams is typically inset from the source radius, resulting in a gap between the end of the directed link and its associated group arc.
- name: ribbonArrow.headRadius()
  id: d3-chord#ribbonarrow_headradius
  summary: If radius is specified, sets the arrowhead radius accessor to the specified function and returns this ribbon generator
  belongs_to: chord
  description: "###### *ribbonArrow*.**headRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-chord/blob/master/src/ribbon.js)\n\nIf *radius* is specified, sets the arrowhead radius accessor to the specified function and returns this ribbon generator. If *radius* is not specified, returns the current arrowhead radius accessor, which defaults to:\n\n``` javascript\nfunction headRadius() {\n  return 10;\n}\n```\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-chord](https://github.com/d3/d3-chord)"
- name: rotation()
  id: d3-geo#_rotation
  summary: Returns a new array [longitude, latitude] in degrees representing the rotated point of the given point
  belongs_to: geo
  description: |-
    ###### *rotation*(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js "Source")

    Returns a new array \[*longitude*, *latitude*\] in degrees representing the rotated point of the given *point*. The point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees.
- name: rotation.invert()
  id: d3-geo#rotation_invert
  summary: Returns a new array [longitude, latitude] in degrees representing the point of the given rotated point; the inverse of rotation
  belongs_to: geo
  description: |-
    ###### *rotation*.**invert**(*point*) [Source](https://github.com/d3/d3-geo/blob/main/src/rotation.js "Source")

    Returns a new array \[*longitude*, *latitude*\] in degrees representing the point of the given rotated *point*; the inverse of [*rotation*](#_rotation). The point must be specified as a two-element array \[*longitude*, *latitude*\] in degrees.

    ### Spherical Shapes

    To generate a [great arc](https://en.wikipedia.org/wiki/Great-circle_distance) (a segment of a great circle), simply pass a GeoJSON LineString geometry object to a [d3.geoPath](#geoPath). D3’s projections use great-arc interpolation for intermediate points, so there’s no need for a great arc shape generator.
- name: satellite.distance()
  id: d3-geo-projection#satellite_distance
  summary: Distance from the center of the sphere to the point of view, as a proportion of the sphere’s radius; defaults to 2.0
  belongs_to: geo-projection
  description: |-
    ###### *satellite*.**distance**(\[*distance*\])

    Distance from the center of the sphere to the point of view, as a proportion of the sphere’s radius; defaults to 2.0. The recommended maximum [clip angle](https://github.com/d3/d3-geo/blob/main/README.md#projection_clipAngle) for a given *distance* is acos(1 / *distance*) converted to degrees. If [tilt](#satellite_tilt) is also applied, then more conservative clipping may be necessary. For exact clipping, the in-development geographic projection pipeline is needed; see the [satellite explorer](https://observablehq.com/@d3/satellite-explorer).
- name: satellite.tilt()
  id: d3-geo-projection#satellite_tilt
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *satellite*.**tilt**(\[*tilt*\])

    Defaults to 0°.
- name: scale
  id: d3-scale
  summary: 'Scales are a convenient abstraction for a fundamental task in visualization: mapping a dimension of abstract data to a visual representation'
  description: "# d3-scale\n\nScales are a convenient abstraction for a fundamental task in visualization: mapping a dimension of abstract data to a visual representation. Although most often used for position-encoding quantitative data, such as mapping a measurement in meters to a position in pixels for dots in a scatterplot, scales can represent virtually any visual encoding, such as diverging colors, stroke widths, or symbol size. Scales can also be used with virtually any type of data, such as named categorical data or discrete data that requires sensible breaks.\n\nFor [continuous](#continuous-scales) quantitative data, you typically want a [linear scale](#linear-scales). (For time series data, a [time scale](#time-scales).) If the distribution calls for it, consider transforming data using a [power](#power-scales) or [log](#log-scales) scale. A [quantize scale](#quantize-scales) may aid differentiation by rounding continuous data to a fixed set of discrete values; similarly, a [quantile scale](#quantile-scales) computes quantiles from a sample population, and a [threshold scale](#threshold-scales) allows you to specify arbitrary breaks in continuous data.\n\nFor discrete ordinal (ordered) or categorical (unordered) data, an [ordinal scale](#ordinal-scales) specifies an explicit mapping from a set of data values to a corresponding set of visual attributes (such as colors). The related [band](#band-scales) and [point](#point-scales) scales are useful for position-encoding ordinal data, such as bars in a bar chart or dots in an categorical scatterplot.\n\nThis repository does not provide color schemes; see [d3-scale-chromatic](d3-scale-chromatic) for color schemes designed to work with d3-scale.\n\nScales have no intrinsic visual representation. However, most scales can [generate](#continuous_ticks) and [format](#continuous_tickFormat) ticks for reference marks to aid in the construction of axes.\n\nFor a longer introduction, see these recommended tutorials:\n\n- [Introducing d3-scale](https://medium.com/@mbostock/introducing-d3-scale-61980c51545f) by Mike Bostock\n\n- Chapter 7. Scales of [*Interactive Data Visualization for the Web*](http://alignedleft.com/work/d3-book) by Scott Murray\n\n- [d3: scales, and color.](https://jckr.github.io/blog/2011/08/11/d3-scales-and-color/) by Jérôme Cukier\n\n## Installing\n\nIf you use npm, `npm install d3-scale`. You can also download the [latest release on GitHub](https://github.com/d3/d3-scale/releases/latest). For vanilla HTML in modern browsers, import d3-scale from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {scaleLinear} from \"https://cdn.skypack.dev/d3-scale@4\";\n\nconst x = scaleLinear();\n\n</script>\n```\n\nFor legacy environments, you can load d3-scale’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-format@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-time@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-time-format@4\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-scale@4\"></script>\n<script>\n\nconst x = d3.scaleLinear();\n\n</script>\n```\n\n(You can omit d3-time and d3-time-format if you’re not using [d3.scaleTime](#scaleTime) or [d3.scaleUtc](#scaleUtc).)\n\n## API Reference\n\n- [Continuous](#continuous-scales) ([Linear](#linear-scales), [Power](#power-scales), [Log](#log-scales), [Identity](#identity-scales), [Time](#time-scales), [Radial](#radial-scales))\n- [Sequential](#sequential-scales)\n- [Diverging](#diverging-scales)\n- [Quantize](#quantize-scales)\n- [Quantile](#quantile-scales)\n- [Threshold](#threshold-scales)\n- [Ordinal](#ordinal-scales) ([Band](#band-scales), [Point](#point-scales))\n\n### Continuous Scales\n\nContinuous scales map a continuous, quantitative input [domain](#continuous_domain) to a continuous output [range](#continuous_range). If the range is also numeric, the mapping may be [inverted](#continuous_invert). A continuous scale is not constructed directly; instead, try a [linear](#linear-scales), [power](#power-scales), [log](#log-scales), [identity](#identity-scales), [radial](#radial-scales), [time](#time-scales) or [sequential color](#sequential-scales) scale.\n\n###### *continuous*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nGiven a *value* from the [domain](#continuous_domain), returns the corresponding value from the [range](#continuous_range). If the given *value* is outside the domain, and [clamping](#continuous_clamp) is not enabled, the mapping may be extrapolated such that the returned value is outside the range. For example, to apply a position encoding:\n\n``` javascript\nvar x = d3.scaleLinear()\n    .domain([10, 130])\n    .range([0, 960]);\n\nx(20); // 80\nx(50); // 320\n```\n\nOr to apply a color encoding:\n\n``` javascript\nvar color = d3.scaleLinear()\n    .domain([10, 100])\n    .range([\"brown\", \"steelblue\"]);\n\ncolor(20); // \"#9a3439\"\ncolor(50); // \"#7b5167\"\n```\n\nOr, in shorthand:\n\n``` javascript\nvar x = d3.scaleLinear([10, 130], [0, 960]);\nvar color = d3.scaleLinear([10, 100], [\"brown\", \"steelblue\"]);\n```\n\n###### *continuous*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nGiven a *value* from the [range](#continuous_range), returns the corresponding value from the [domain](#continuous_domain). Inversion is useful for interaction, say to determine the data value corresponding to the position of the mouse. For example, to invert a position encoding:\n\n``` javascript\nvar x = d3.scaleLinear()\n    .domain([10, 130])\n    .range([0, 960]);\n\nx.invert(80); // 20\nx.invert(320); // 50\n```\n\nIf the given *value* is outside the range, and [clamping](#continuous_clamp) is not enabled, the mapping may be extrapolated such that the returned value is outside the domain. This method is only supported if the range is numeric. If the range is not numeric, returns NaN.\n\nFor a valid value *y* in the range, *continuous*(*continuous*.invert(*y*)) approximately equals *y*; similarly, for a valid value *x* in the domain, *continuous*.invert(*continuous*(*x*)) approximately equals *x*. The scale and its inverse may not be exact due to the limitations of floating point precision.\n\n###### *continuous*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *domain* is specified, sets the scale’s domain to the specified array of numbers. The array must contain two or more elements. If the elements in the given array are not numbers, they will be coerced to numbers. If *domain* is not specified, returns a copy of the scale’s current domain.\n\nAlthough continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale. For example, to create a [diverging color scale](#diverging-scales) that interpolates between white and red for negative values, and white and green for positive values, say:\n\n``` javascript\nvar color = d3.scaleLinear()\n    .domain([-1, 0, 1])\n    .range([\"red\", \"white\", \"green\"]);\n\ncolor(-0.5); // \"rgb(255, 128, 128)\"\ncolor(+0.5); // \"rgb(128, 192, 128)\"\n```\n\nInternally, a piecewise scale performs a [binary search](d3-array#bisect) for the range interpolator corresponding to the given domain value. Thus, the domain must be in ascending or descending order. If the domain and range have different lengths *N* and *M*, only the first *min(N,M)* elements in each are observed.\n\n###### *continuous*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *range* is specified, sets the scale’s range to the specified array of values. The array must contain two or more elements. Unlike the [domain](#continuous_domain), elements in the given array need not be numbers; any value that is supported by the underlying [interpolator](#continuous_interpolate) will work, though note that numeric ranges are required for [invert](#continuous_invert). If *range* is not specified, returns a copy of the scale’s current range. See [*continuous*.interpolate](#continuous_interpolate) for more examples.\n\n###### *continuous*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSets the scale’s [*range*](#continuous_range) to the specified array of values while also setting the scale’s [interpolator](#continuous_interpolate) to [interpolateRound](d3-interpolate#interpolateRound). This is a convenience method equivalent to:\n\n``` javascript\ncontinuous\n    .range(range)\n    .interpolate(d3.interpolateRound);\n```\n\nThe rounding interpolator is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.\n\n###### *continuous*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *clamp* is specified, enables or disables clamping accordingly. If clamping is disabled and the scale is passed a value outside the [domain](#continuous_domain), the scale may return a value outside the [range](#continuous_range) through extrapolation. If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to [*continuous*.invert](#continuous_invert). For example:\n\n``` javascript\nvar x = d3.scaleLinear()\n    .domain([10, 130])\n    .range([0, 960]);\n\nx(-10); // -160, outside range\nx.invert(-160); // -10, outside domain\n\nx.clamp(true);\nx(-10); // 0, clamped to range\nx.invert(-160); // 10, clamped to domain\n```\n\nIf *clamp* is not specified, returns whether or not the scale currently clamps values to within the range.\n\n###### *continuous*.**unknown**(\\[*value*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *value* is specified, sets the output value of the scale for undefined (or NaN) input values and returns this scale. If *value* is not specified, returns the current unknown value, which defaults to undefined.\n\n###### *continuous*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *interpolate* is specified, sets the scale’s [range](#continuous_range) interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range; these interpolators then map a normalized domain parameter *t* in \\[0, 1\\] to the corresponding value in the range. If *factory* is not specified, returns the scale’s current interpolator factory, which defaults to [d3.interpolate](d3-interpolate#interpolate). See [d3-interpolate](d3-interpolate) for more interpolators.\n\nFor example, consider a diverging color scale with three colors in the range:\n\n``` javascript\nvar color = d3.scaleLinear()\n    .domain([-100, 0, +100])\n    .range([\"red\", \"white\", \"green\"]);\n```\n\nTwo interpolators are created internally by the scale, equivalent to:\n\n``` javascript\nvar i0 = d3.interpolate(\"red\", \"white\"),\n    i1 = d3.interpolate(\"white\", \"green\");\n```\n\nA common reason to specify a custom interpolator is to change the color space of interpolation. For example, to use [HCL](d3-interpolate#interpolateHcl):\n\n``` javascript\nvar color = d3.scaleLinear()\n    .domain([10, 100])\n    .range([\"brown\", \"steelblue\"])\n    .interpolate(d3.interpolateHcl);\n```\n\nOr for [Cubehelix](d3-interpolate#interpolateCubehelix) with a custom gamma:\n\n``` javascript\nvar color = d3.scaleLinear()\n    .domain([10, 100])\n    .range([\"brown\", \"steelblue\"])\n    .interpolate(d3.interpolateCubehelix.gamma(3));\n```\n\nNote: the [default interpolator](d3-interpolate#interpolate) **may reuse return values**. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place. If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance); however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.\n\n###### *continuous*.**ticks**(\\[*count*\\])\n\nReturns approximately *count* representative values from the scale’s [domain](#continuous_domain). If *count* is not specified, it defaults to 10. The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10), and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. The specified *count* is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s [ticks](d3-array#ticks).\n\n###### *continuous*.**tickFormat**(\\[*count*\\[, *specifier*\\]\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/tickFormat.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nReturns a [number format](d3-format) function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values. The specified *count* should have the same value as the count that is used to generate the [tick values](#continuous_ticks).\n\nAn optional *specifier* allows a [custom format](d3-format#locale_format) where the precision of the format is automatically set by the scale as appropriate for the tick interval. For example, to format percentage change, you might say:\n\n``` javascript\nvar x = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([0, 960]);\n\nvar ticks = x.ticks(5),\n    tickFormat = x.tickFormat(5, \"+%\");\n\nticks.map(tickFormat); // [\"-100%\", \"-50%\", \"+0%\", \"+50%\", \"+100%\"]\n```\n\nIf *specifier* uses the format type `s`, the scale will return a [SI-prefix format](d3-format#locale_formatPrefix) based on the largest value in the domain. If the *specifier* already specifies a precision, this method is equivalent to [*locale*.format](d3-format#locale_format).\n\nSee also [d3.tickFormat](#tickFormat).\n\n###### *continuous*.**nice**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/nice.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)\n\nExtends the [domain](#continuous_domain) so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. An optional tick *count* argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned [ticks](#continuous_ticks) will exactly cover the domain. Nicing is useful if the domain is computed from data, say using [extent](d3-array#extent), and may be irregular. For example, for a domain of \\[0.201479…, 0.996679…\\], a nice domain might be \\[0.2, 1.0\\]. If the domain has more than two values, nicing the domain only affects the first and last value. See also d3-array’s [tickStep](d3-array#tickStep).\n\nNicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using [*continuous*.domain](#continuous_domain). You must re-nice the scale after setting the new domain, if desired.\n\n###### *continuous*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n###### d3.**tickFormat**(*start*, *stop*, *count*\\[, *specifier*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/tickFormat.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nReturns a [number format](d3-format) function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values, as determined by [d3.tickStep](d3-array#tickStep).\n\nAn optional *specifier* allows a [custom format](d3-format#locale_format) where the precision of the format is automatically set by the scale as appropriate for the tick interval. For example, to format percentage change, you might say:\n\n``` javascript\nvar tickFormat = d3.tickFormat(-1, 1, 5, \"+%\");\n\ntickFormat(-0.5); // \"-50%\"\n```\n\nIf *specifier* uses the format type `s`, the scale will return a [SI-prefix format](d3-format#locale_formatPrefix) based on the larger absolute value of *start* and *stop*. If the *specifier* already specifies a precision, this method is equivalent to [*locale*.format](d3-format#locale_format).\n\n#### Linear Scales\n\n###### d3.**scaleLinear**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/linear.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)\n\nConstructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \\[0, 1\\]. Linear scales are a good default choice for continuous quantitative data because they preserve proportional differences. Each range value *y* can be expressed as a function of the domain value *x*: *y* = *mx* + *b*.\n\n#### Power Scales\n\nPower scales are similar to [linear scales](#linear-scales), except an exponential transform is applied to the input domain value before the output range value is computed. Each range value *y* can be expressed as a function of the domain value *x*: *y* = *mx^k* + *b*, where *k* is the [exponent](#pow_exponent) value. Power scales also support negative domain values, in which case the input value and the resulting output value are multiplied by -1.\n\n###### d3.**scalePow**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nConstructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [exponent](#pow_exponent) 1, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \\[0, 1\\]. (Note that this is effectively a [linear](#linear-scales) scale until you set a different exponent.)\n\n###### *pow*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*](#_continuous).\n\n###### *pow*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.invert](#continuous_invert).\n\n###### *pow*.**exponent**(\\[*exponent*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *exponent* is specified, sets the current exponent to the given numeric value. If *exponent* is not specified, returns the current exponent, which defaults to 1. (Note that this is effectively a [linear](#linear-scales) scale until you set a different exponent.)\n\n###### *pow*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.domain](#continuous_domain).\n\n###### *pow*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.range](#continuous_range).\n\n###### *pow*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.rangeRound](#continuous_rangeRound).\n\n###### *pow*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.clamp](#continuous_clamp).\n\n###### *pow*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.interpolate](#continuous_interpolate).\n\n###### *pow*.**ticks**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nSee [*continuous*.ticks](#continuous_ticks).\n\n###### *pow*.**tickFormat**(\\[*count*\\[, *specifier*\\]\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nSee [*continuous*.tickFormat](#continuous_tickFormat).\n\n###### *pow*.**nice**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.nice](#continuous_nice).\n\n###### *pow*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.copy](#continuous_copy).\n\n###### d3.**scaleSqrt**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/pow.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nConstructs a new [continuous](#continuous-scales) [power scale](#power-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [exponent](#pow_exponent) 0.5, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If either *domain* or *range* are not specified, each defaults to \\[0, 1\\]. This is a convenience method equivalent to `d3.scalePow(…).exponent(0.5)`.\n\n#### Log Scales\n\nLog scales are similar to [linear scales](#linear-scales), except a logarithmic transform is applied to the input domain value before the output range value is computed. The mapping to the range value *y* can be expressed as a function of the domain value *x*: *y* = *m* log(*x*) + *b*.\n\nAs log(0) = -∞, a log scale domain must be **strictly-positive or strictly-negative**; the domain must not include or cross zero. A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values. (For a negative domain, input and output values are implicitly multiplied by -1.) The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.\n\n###### d3.**scaleLog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nConstructs a new [continuous scale](#continuous-scales) with the specified [domain](#log_domain) and [range](#log_range), the [base](#log_base) 10, the [default](d3-interpolate#interpolate) [interpolator](#log_interpolate) and [clamping](#log_clamp) disabled. If *domain* is not specified, it defaults to \\[1, 10\\]. If *range* is not specified, it defaults to \\[0, 1\\].\n\n###### *log*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*](#_continuous).\n\n###### *log*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.invert](#continuous_invert).\n\n###### *log*.**base**(\\[*base*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *base* is specified, sets the base for this logarithmic scale to the specified value. If *base* is not specified, returns the current base, which defaults to 10.\n\n###### *log*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.domain](#continuous_domain).\n\n###### *log*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/continuous.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.range](#continuous_range).\n\n###### *log*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.rangeRound](#continuous_rangeRound).\n\n###### *log*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.clamp](#continuous_clamp).\n\n###### *log*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.interpolate](#continuous_interpolate).\n\n###### *log*.**ticks**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nLike [*continuous*.ticks](#continuous_ticks), but customized for a log scale. If the [base](#log_base) is an integer, the returned ticks are uniformly spaced within each integer power of base; otherwise, one tick per power of base is returned. The returned ticks are guaranteed to be within the extent of the domain. If the orders of magnitude in the [domain](#log_domain) is greater than *count*, then at most one tick per power is returned. Otherwise, the tick values are unfiltered, but note that you can use [*log*.tickFormat](#log_tickFormat) to filter the display of tick labels. If *count* is not specified, it defaults to 10.\n\n###### *log*.**tickFormat**(\\[*count*\\[, *specifier*\\]\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nLike [*continuous*.tickFormat](#continuous_tickFormat), but customized for a log scale. The specified *count* typically has the same value as the count that is used to generate the [tick values](#continuous_ticks). If there are too many ticks, the formatter may return the empty string for some of the tick labels; however, note that the ticks are still shown. To disable filtering, specify a *count* of Infinity. When specifying a count, you may also provide a format *specifier* or format function. For example, to get a tick formatter that will display 20 ticks of a currency, say `log.tickFormat(20, \"$,f\")`. If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format. This provides a convenient way of specifying a format whose precision will be automatically set by the scale.\n\n###### *log*.**nice**() · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)\n\nLike [*continuous*.nice](#continuous_nice), except extends the domain to integer powers of [base](#log_base). For example, for a domain of \\[0.201479…, 0.996679…\\], and base 10, the nice domain is \\[0.1, 1\\]. If the domain has more than two values, nicing the domain only affects the first and last value.\n\n###### *log*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/log.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nSee [*continuous*.copy](#continuous_copy).\n\n#### Symlog Scales\n\nSee [A bi-symmetric log transformation for wide-range data](https://www.researchgate.net/profile/John_Webber4/publication/233967063_A_bi-symmetric_log_transformation_for_wide-range_data/links/0fcfd50d791c85082e000000.pdf) by Webber for more.\n\n###### d3.**scaleSymlog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/symlog.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nConstructs a new [continuous scale](#continuous-scales) with the specified [domain](#continuous_domain) and [range](#continuous_range), the [constant](#symlog_constant) 1, the [default](d3-interpolate#interpolate) [interpolator](#continuous_interpolate) and [clamping](#continuous_clamp) disabled. If *domain* is not specified, it defaults to \\[0, 1\\]. If *range* is not specified, it defaults to \\[0, 1\\].\n\n###### *symlog*.**constant**(\\[*constant*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/symlog.js), [Examples](https://observablehq.com/@d3/continuous-scales)\n\nIf *constant* is specified, sets the symlog constant to the specified number and returns this scale; otherwise returns the current value of the symlog constant, which defaults to 1. See “A bi-symmetric log transformation for wide-range data” by Webber for more.\n\n#### Identity Scales\n\nIdentity scales are a special case of [linear scales](#linear-scales) where the domain and range are identical; the scale and its invert method are thus the identity function. These scales are occasionally useful when working with pixel coordinates, say in conjunction with an axis. Identity scales do not support [rangeRound](#continuous_rangeRound), [clamp](#continuous_clamp) or [interpolate](#continuous_interpolate).\n\n###### d3.**scaleIdentity**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/identity.js), [Examples](https://observablehq.com/@d3/d3-scalelinear)\n\nConstructs a new identity scale with the specified [domain](#continuous_domain) and [range](#continuous_range). If *range* is not specified, it defaults to \\[0, 1\\].\n\n#### Radial Scales\n\nRadial scales are a variant of [linear scales](#linear-scales) where the range is internally squared so that an input value corresponds linearly to the squared output value. These scales are useful when you want the input value to correspond to the area of a graphical mark and the mark is specified by radius, as in a radial bar chart. Radial scales do not support [interpolate](#continuous_interpolate).\n\n###### d3.**scaleRadial**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/radial.js), [Examples](https://observablehq.com/@d3/radial-stacked-bar-chart)\n\nConstructs a new radial scale with the specified [domain](#continuous_domain) and [range](#continuous_range). If *domain* or *range* is not specified, each defaults to \\[0, 1\\].\n\n#### Time Scales\n\nTime scales are a variant of [linear scales](#linear-scales) that have a temporal domain: domain values are coerced to [dates](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) rather than numbers, and [invert](#continuous_invert) likewise returns a date. Time scales implement [ticks](#time_ticks) based on [calendar intervals](d3-time), taking the pain out of generating axes for temporal domains.\n\nFor example, to create a position encoding:\n\n``` javascript\nvar x = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 0, 2)])\n    .range([0, 960]);\n\nx(new Date(2000, 0, 1,  5)); // 200\nx(new Date(2000, 0, 1, 16)); // 640\nx.invert(200); // Sat Jan 01 2000 05:00:00 GMT-0800 (PST)\nx.invert(640); // Sat Jan 01 2000 16:00:00 GMT-0800 (PST)\n```\n\nFor a valid value *y* in the range, *time*(*time*.invert(*y*)) equals *y*; similarly, for a valid value *x* in the domain, *time*.invert(*time*(*x*)) equals *x*. The invert method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n\n###### d3.**scaleTime**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nConstructs a new time scale with the specified [domain](#time_domain) and [range](#time_range), the [default](d3-interpolate#interpolate) [interpolator](#time_interpolate) and [clamping](#time_clamp) disabled. If *domain* is not specified, it defaults to \\[2000-01-01, 2000-01-02\\]. If *range* is not specified, it defaults to \\[0, 1\\].\n\n###### *time*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*](#_continuous).\n\n###### *time*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.invert](#continuous_invert).\n\n###### *time*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.domain](#continuous_domain).\n\n###### *time*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.range](#continuous_range).\n\n###### *time*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.rangeRound](#continuous_rangeRound).\n\n###### *time*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.clamp](#continuous_clamp).\n\n###### *time*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.interpolate](#continuous_interpolate).\n\n###### *time*.**ticks**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime) *time*.**ticks**(\\[*interval*\\])\n\nReturns representative dates from the scale’s [domain](#time_domain). The returned tick values are uniformly-spaced (mostly), have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.\n\nAn optional *count* may be specified to affect how many ticks are generated. If *count* is not specified, it defaults to 10. The specified *count* is only a hint; the scale may return more or fewer values depending on the domain. For example, to create ten default ticks, say:\n\n``` javascript\nvar x = d3.scaleTime();\n\nx.ticks(10);\n// [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 03:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 06:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 09:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 12:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 15:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 18:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 21:00:00 GMT-0800 (PST),\n//  Sun Jan 02 2000 00:00:00 GMT-0800 (PST)]\n```\n\nThe following time intervals are considered for automatic ticks:\n\n- 1-, 5-, 15- and 30-second.\n- 1-, 5-, 15- and 30-minute.\n- 1-, 3-, 6- and 12-hour.\n- 1- and 2-day.\n- 1-week.\n- 1- and 3-month.\n- 1-year.\n\nIn lieu of a *count*, a [time *interval*](d3-time#intervals) may be explicitly specified. To prune the generated ticks for a given time *interval*, use [*interval*.every](d3-time#interval_every). For example, to generate ticks at 15-[minute](d3-time#minute) intervals:\n\n``` javascript\nvar x = d3.scaleTime()\n    .domain([new Date(2000, 0, 1, 0), new Date(2000, 0, 1, 2)]);\n\nx.ticks(d3.timeMinute.every(15));\n// [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 00:15:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 00:30:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 00:45:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 01:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 01:15:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 01:30:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 01:45:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 02:00:00 GMT-0800 (PST)]\n```\n\nAlternatively, pass a test function to [*interval*.filter](d3-time#interval_filter):\n\n``` javascript\nx.ticks(d3.timeMinute.filter(function(d) {\n  return d.getMinutes() % 15 === 0;\n}));\n```\n\nNote: in some cases, such as with day ticks, specifying a *step* can result in irregular spacing of ticks because time intervals have varying length.\n\n###### *time*.**tickFormat**(\\[*count*\\[, *specifier*\\]\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/scale-ticks) *time*.**tickFormat**(\\[*interval*\\[, *specifier*\\]\\])\n\nReturns a time format function suitable for displaying [tick](#time_ticks) values. The specified *count* or *interval* is currently ignored, but is accepted for consistency with other scales such as [*continuous*.tickFormat](#continuous_tickFormat). If a format *specifier* is specified, this method is equivalent to [format](d3-time-format#format). If *specifier* is not specified, the default time format is returned. The default multi-scale time format chooses a human-readable representation based on the specified date as follows:\n\n- `%Y` - for year boundaries, such as `2011`.\n- `%B` - for month boundaries, such as `February`.\n- `%b %d` - for week boundaries, such as `Feb 06`.\n- `%a %d` - for day boundaries, such as `Mon 07`.\n- `%I %p` - for hour boundaries, such as `01 AM`.\n- `%I:%M` - for minute boundaries, such as `01:23`.\n- `:%S` - for second boundaries, such as `:45`.\n- `.%L` - milliseconds for all other times, such as `.012`.\n\nAlthough somewhat unusual, this default behavior has the benefit of providing both local and global context: for example, formatting a sequence of ticks as \\[11 PM, Mon 07, 01 AM\\] reveals information about hours, dates, and day simultaneously, rather than just the hours \\[11 PM, 12 AM, 01 AM\\]. See [d3-time-format](d3-time-format) if you’d like to roll your own conditional time format.\n\n###### *time*.**nice**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime) *time*.**nice**(\\[*interval*\\])\n\nExtends the [domain](#time_domain) so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. See [*continuous*.nice](#continuous_nice) for more.\n\nAn optional tick *count* argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned [ticks](#time_ticks) will exactly cover the domain. Alternatively, a [time *interval*](d3-time#intervals) may be specified to explicitly set the ticks. If an *interval* is specified, an optional *step* may also be specified to skip some ticks. For example, `time.nice(d3.timeSecond.every(10))` will extend the domain to an even ten seconds (0, 10, 20, *etc.*). See [*time*.ticks](#time_ticks) and [*interval*.every](d3-time#interval_every) for further detail.\n\nNicing is useful if the domain is computed from data, say using [extent](d3-array#extent), and may be irregular. For example, for a domain of \\[2009-07-13T00:02, 2009-07-13T23:48\\], the nice domain is \\[2009-07-13, 2009-07-14\\]. If the domain has more than two values, nicing the domain only affects the first and last value.\n\n###### *time*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nSee [*continuous*.copy](#continuous_copy).\n\n###### d3.**scaleUtc**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/utcTime.js), [Examples](https://observablehq.com/@d3/d3-scaletime)\n\nEquivalent to [scaleTime](#scaleTime), but the returned time scale operates in [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n### Sequential Scales\n\nSequential scales, like [diverging scales](#diverging-scales), are similar to [continuous scales](#continuous-scales) in that they map a continuous, numeric input domain to a continuous output range. However, unlike continuous scales, the input domain and output range of a sequential scale always has exactly two elements, and the output range is typically specified as an interpolator rather than an array of values. These scales do not expose [invert](#continuous_invert) and [interpolate](#continuous_interpolate) methods.\n\n###### d3.**scaleSequential**(\\[\\[*domain*, \\]*interpolator*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nConstructs a new sequential scale with the specified [*domain*](#sequential_domain) and [*interpolator*](#sequential_interpolator) function or array. If *domain* is not specified, it defaults to \\[0, 1\\]. If *interpolator* is not specified, it defaults to the identity function. When the scale is [applied](#_sequential), the interpolator will be invoked with a value typically in the range \\[0, 1\\], where 0 represents the minimum value and 1 represents the maximum value. For example, to implement the ill-advised [HSL](d3-color#hsl) rainbow scale:\n\n``` javascript\nvar rainbow = d3.scaleSequential(function(t) {\n  return d3.hsl(t * 360, 1, 0.5) + \"\";\n});\n```\n\nA more aesthetically-pleasing and perceptually-effective cyclical hue encoding is to use [d3.interpolateRainbow](d3-scale-chromatic#interpolateRainbow):\n\n``` javascript\nvar rainbow = d3.scaleSequential(d3.interpolateRainbow);\n```\n\nIf *interpolator* is an array, it represents the scale’s two-element output range and is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate).\n\n###### *sequential*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*](#_continuous).\n\n###### *sequential*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*.domain](#continuous_domain). Note that a sequential scale’s domain must be numeric and must contain exactly two values.\n\n###### *sequential*.**clamp**(\\[*clamp*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*.clamp](#continuous_clamp).\n\n###### *sequential*.**interpolator**(\\[*interpolator*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nIf *interpolator* is specified, sets the scale’s interpolator to the specified function. If *interpolator* is not specified, returns the scale’s current interpolator.\n\n###### *sequential*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*.range](#continuous_range). If *range* is specified, the given two-element array is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate).\n\n###### *sequential*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*.rangeRound](#continuous_rangeRound). If *range* is specified, implicitly uses [d3.interpolateRound](d3-interpolate#interpolateRound) as the interpolator.\n\n###### *sequential*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nSee [*continuous*.copy](#continuous_copy).\n\n###### d3.**scaleSequentialLog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nA [sequential scale](#sequential-scales) with a logarithmic transform, analogous to a [log scale](#log-scales).\n\n###### d3.**scaleSequentialPow**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nA [sequential scale](#sequential-scales) with an exponential transform, analogous to a [power scale](#pow-scales).\n\n###### d3.**scaleSequentialSqrt**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nA [sequential scale](#sequential-scales) with a square-root transform, analogous to a [d3.scaleSqrt](#scaleSqrt).\n\n###### d3.**scaleSequentialSymlog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nA [sequential scale](#sequential-scales) with a symmetric logarithmic transform, analogous to a [symlog scale](#symlog-scales).\n\n###### d3.**scaleSequentialQuantile**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequentialQuantile.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nA [sequential scale](#sequential-scales) using a *p*-quantile transform, analogous to a [quantile scale](#quantile-scales).\n\n###### *sequentialQuantile*.**quantiles**(*n*) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequentialQuantile.js), [Examples](https://observablehq.com/@d3/sequential-scales)\n\nReturns an array of *n* + 1 quantiles. For example, if *n* = 4, returns an array of five numbers: the minimum value, the first quartile, the median, the third quartile, and the maximum.\n\n### Diverging Scales\n\nDiverging scales, like [sequential scales](#sequential-scales), are similar to [continuous scales](#continuous-scales) in that they map a continuous, numeric input domain to a continuous output range. However, unlike continuous scales, the input domain and output range of a diverging scale always has exactly three elements, and the output range is typically specified as an interpolator rather than an array of values. These scales do not expose [invert](#continuous_invert) and [interpolate](#continuous_interpolate) methods.\n\n###### d3.**scaleDiverging**(\\[\\[*domain*, \\]*interpolator*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nConstructs a new diverging scale with the specified [*domain*](#diverging_domain) and [*interpolator*](#diverging_interpolator) function or array. If *domain* is not specified, it defaults to \\[0, 0.5, 1\\]. If *interpolator* is not specified, it defaults to the identity function. When the scale is [applied](#_diverging), the interpolator will be invoked with a value typically in the range \\[0, 1\\], where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value. For example, using [d3.interpolateSpectral](d3-scale-chromatic#interpolateSpectral):\n\n``` javascript\nvar spectral = d3.scaleDiverging(d3.interpolateSpectral);\n```\n\nIf *interpolator* is an array, it represents the scale’s three-element output range and is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate) and [d3.piecewise](d3-interpolate#piecewise).\n\n###### *diverging*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*](#_continuous).\n\n###### *diverging*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.domain](#continuous_domain). Note that a diverging scale’s domain must be numeric and must contain exactly three values. The default domain is \\[0, 0.5, 1\\].\n\n###### *diverging*.**clamp**(\\[*clamp*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.clamp](#continuous_clamp).\n\n###### *diverging*.**interpolator**(\\[*interpolator*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nIf *interpolator* is specified, sets the scale’s interpolator to the specified function. If *interpolator* is not specified, returns the scale’s current interpolator.\n\n###### *diverging*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.range](#continuous_range). If *range* is specified, the given three-element array is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate) and [d3.piecewise](d3-interpolate#piecewise).\n\n###### *diverging*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.range](#continuous_rangeRound). If *range* is specified, implicitly uses [d3.interpolateRound](d3-interpolate#interpolateRound) as the interpolator.\n\n###### *diverging*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.copy](#continuous_copy).\n\n###### *diverging*.**unknown**() · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nSee [*continuous*.unknown](#continuous_unknown).\n\n###### d3.**scaleDivergingLog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nA [diverging scale](#diverging-scales) with a logarithmic transform, analogous to a [log scale](#log-scales).\n\n###### d3.**scaleDivergingPow**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nA [diverging scale](#diverging-scales) with an exponential transform, analogous to a [power scale](#pow-scales).\n\n###### d3.**scaleDivergingSqrt**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nA [diverging scale](#diverging-scales) with a square-root transform, analogous to a [d3.scaleSqrt](#scaleSqrt).\n\n###### d3.**scaleDivergingSymlog**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/diverging.js), [Examples](https://observablehq.com/@d3/diverging-scales)\n\nA [diverging scale](#diverging-scales) with a symmetric logarithmic transform, analogous to a [symlog scale](#symlog-scales).\n\n### Quantize Scales\n\nQuantize scales are similar to [linear scales](#linear-scales), except they use a discrete rather than continuous range. The continuous input domain is divided into uniform segments based on the number of values in (*i.e.*, the cardinality of) the output range. Each range value *y* can be expressed as a quantized linear function of the domain value *x*: *y* = *m round(x)* + *b*. See [this choropleth](https://observablehq.com/@d3/choropleth) for an example.\n\n###### d3.**scaleQuantize**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nConstructs a new quantize scale with the specified [*domain*](#quantize_domain) and [*range*](#quantize_range). If either *domain* or *range* is not specified, each defaults to \\[0, 1\\]. Thus, the default quantize scale is equivalent to the [Math.round](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round) function.\n\n###### *quantize*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nGiven a *value* in the input [domain](#quantize_domain), returns the corresponding value in the output [range](#quantize_range). For example, to apply a color encoding:\n\n``` javascript\nvar color = d3.scaleQuantize()\n    .domain([0, 1])\n    .range([\"brown\", \"steelblue\"]);\n\ncolor(0.49); // \"brown\"\ncolor(0.51); // \"steelblue\"\n```\n\nOr dividing the domain into three equally-sized parts with different range values to compute an appropriate stroke width:\n\n``` javascript\nvar width = d3.scaleQuantize()\n    .domain([10, 100])\n    .range([1, 2, 4]);\n\nwidth(20); // 1\nwidth(50); // 2\nwidth(80); // 4\n```\n\n###### *quantize*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns the extent of values in the [domain](#quantize_domain) \\[*x0*, *x1*\\] for the corresponding *value* in the [range](#quantize_range): the inverse of [*quantize*](#_quantize). This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n\n``` javascript\nvar width = d3.scaleQuantize()\n    .domain([10, 100])\n    .range([1, 2, 4]);\n\nwidth.invertExtent(2); // [40, 70]\n```\n\n###### *quantize*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *domain* is specified, sets the scale’s domain to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. The numbers must be in ascending order or the behavior of the scale is undefined. If *domain* is not specified, returns the scale’s current domain.\n\n###### *quantize*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *range* is specified, sets the scale’s range to the specified array of values. The array may contain any number of discrete values. The elements in the given array need not be numbers; any value or type will work. If *range* is not specified, returns the scale’s current range.\n\n###### *quantize*.**ticks**(\\[*count*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nEquivalent to [*continuous*.ticks](#continuous_ticks).\n\n###### *quantize*.**tickFormat**(\\[*count*\\[, *specifier*\\]\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/linear.js), [Examples](https://observablehq.com/@d3/scale-ticks)\n\nEquivalent to [*continuous*.tickFormat](#continuous_tickFormat).\n\n###### *quantize*.**nice**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nEquivalent to [*continuous*.nice](#continuous_nice).\n\n###### *quantize*.**thresholds**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns the array of computed thresholds within the [domain](#quantize_domain).\n\n###### *quantize*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantize.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n### Quantile Scales\n\nQuantile scales map a sampled input domain to a discrete range. The domain is considered continuous and thus the scale will accept any reasonable input value; however, the domain is specified as a discrete set of sample values. The number of values in (the cardinality of) the output range determines the number of quantiles that will be computed from the domain. To compute the quantiles, the domain is sorted, and treated as a [population of discrete values](https://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population); see d3-array’s [quantile](d3-array#quantile). See [this quantile choropleth](https://observablehq.com/@d3/quantile-choropleth) for an example.\n\n###### d3.**scaleQuantile**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nConstructs a new quantile scale with the specified [*domain*](#quantile_domain) and [*range*](#quantile_range). If either *domain* or *range* is not specified, each defaults to the empty array. The quantile scale is invalid until both a domain and range are specified.\n\n###### *quantile*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nGiven a *value* in the input [domain](#quantile_domain), returns the corresponding value in the output [range](#quantile_range).\n\n###### *quantile*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns the extent of values in the [domain](#quantile_domain) \\[*x0*, *x1*\\] for the corresponding *value* in the [range](#quantile_range): the inverse of [*quantile*](#_quantile). This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.\n\n###### *quantile*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *domain* is specified, sets the domain of the quantile scale to the specified set of discrete numeric values. The array must not be empty, and must contain at least one numeric value; NaN, null and undefined values are ignored and not considered part of the sample population. If the elements in the given array are not numbers, they will be coerced to numbers. A copy of the input array is sorted and stored internally. If *domain* is not specified, returns the scale’s current domain.\n\n###### *quantile*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *range* is specified, sets the discrete values in the range. The array must not be empty, and may contain any type of value. The number of values in (the cardinality, or length, of) the *range* array determines the number of quantiles that are computed. For example, to compute quartiles, *range* must be an array of four elements such as \\[0, 1, 2, 3\\]. If *range* is not specified, returns the current range.\n\n###### *quantile*.**quantiles**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns the quantile thresholds. If the [range](#quantile_range) contains *n* discrete values, the returned array will contain *n* - 1 thresholds. Values less than the first threshold are considered in the first quantile; values greater than or equal to the first threshold but less than the second threshold are in the second quantile, and so on. Internally, the thresholds array is used with [bisect](d3-array#bisect) to find the output quantile associated with the given input value.\n\n###### *quantile*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/quantile.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n### Threshold Scales\n\nThreshold scales are similar to [quantize scales](#quantize-scales), except they allow you to map arbitrary subsets of the domain to discrete values in the range. The input domain is still continuous, and divided into slices based on a set of threshold values. See [this choropleth](https://observablehq.com/@d3/threshold-choropleth) for an example.\n\n###### d3.**scaleThreshold**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nConstructs a new threshold scale with the specified [*domain*](#threshold_domain) and [*range*](#threshold_range). If *domain* is not specified, it defaults to \\[0.5\\]. If *range* is not specified, it defaults to \\[0, 1\\]. Thus, the default threshold scale is equivalent to the [Math.round](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round) function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.\n\n###### *threshold*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nGiven a *value* in the input [domain](#threshold_domain), returns the corresponding value in the output [range](#threshold_range). For example:\n\n``` javascript\nvar color = d3.scaleThreshold()\n    .domain([0, 1])\n    .range([\"red\", \"white\", \"green\"]);\n\ncolor(-1);   // \"red\"\ncolor(0);    // \"white\"\ncolor(0.5);  // \"white\"\ncolor(1);    // \"green\"\ncolor(1000); // \"green\"\n```\n\n###### *threshold*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/choropleth)\n\nReturns the extent of values in the [domain](#threshold_domain) \\[*x0*, *x1*\\] for the corresponding *value* in the [range](#threshold_range), representing the inverse mapping from range to domain. This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse. For example:\n\n``` javascript\nvar color = d3.scaleThreshold()\n    .domain([0, 1])\n    .range([\"red\", \"white\", \"green\"]);\n\ncolor.invertExtent(\"red\"); // [undefined, 0]\ncolor.invertExtent(\"white\"); // [0, 1]\ncolor.invertExtent(\"green\"); // [1, undefined]\n```\n\n###### *threshold*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *domain* is specified, sets the scale’s domain to the specified array of values. The values must be in ascending order or the behavior of the scale is undefined. The values are typically numbers, but any naturally ordered values (such as strings) will work; a threshold scale can be used to encode any type that is ordered. If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N. If there are fewer than N elements in the domain, the additional values in the range are ignored. If there are more than N elements in the domain, the scale may return undefined for some inputs. If *domain* is not specified, returns the scale’s current domain.\n\n###### *threshold*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nIf *range* is specified, sets the scale’s range to the specified array of values. If the number of values in the scale’s domain is N, the number of values in the scale’s range must be N+1. If there are fewer than N+1 elements in the range, the scale may return undefined for some inputs. If there are more than N+1 elements in the range, the additional values are ignored. The elements in the given array need not be numbers; any value or type will work. If *range* is not specified, returns the scale’s current range.\n\n###### *threshold*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n### Ordinal Scales\n\nUnlike [continuous scales](#continuous-scales), ordinal scales have a discrete domain and range. For example, an ordinal scale might map a set of named categories to a set of colors, or determine the horizontal positions of columns in a column chart.\n\n###### d3.**scaleOrdinal**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nConstructs a new ordinal scale with the specified [*domain*](#ordinal_domain) and [*range*](#ordinal_range). If *domain* is not specified, it defaults to the empty array. If *range* is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.\n\n###### *ordinal*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nGiven a *value* in the input [domain](#ordinal_domain), returns the corresponding value in the output [range](#ordinal_range). If the given *value* is not in the scale’s [domain](#ordinal_domain), returns the [unknown](#ordinal_unknown); or, if the unknown value is [implicit](#scaleImplicit) (the default), then the *value* is implicitly added to the domain and the next-available value in the range is assigned to *value*, such that this and subsequent invocations of the scale given the same input *value* return the same output value.\n\n###### *ordinal*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nIf *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first element in the range, the second domain value to the second range value, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to retrieve a value from the range. Thus, an ordinal scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding range value. If *domain* is not specified, this method returns the current domain.\n\nSetting the domain on an ordinal scale is optional if the [unknown value](#ordinal_unknown) is [implicit](#scaleImplicit) (the default). In this case, the domain will be inferred implicitly from usage by assigning each unique value passed to the scale a new value from the range. Note that an explicit domain is recommended to ensure deterministic behavior, as inferring the domain from usage will be dependent on ordering.\n\n###### *ordinal*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nIf *range* is specified, sets the range of the ordinal scale to the specified array of values. The first element in the domain will be mapped to the first element in *range*, the second domain value to the second range value, and so on. If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range. If *range* is not specified, this method returns the current range.\n\n###### *ordinal*.**unknown**(\\[*value*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nIf *value* is specified, sets the output value of the scale for unknown input values and returns this scale. If *value* is not specified, returns the current unknown value, which defaults to [implicit](#scaleImplicit). The implicit value enables implicit domain construction; see [*ordinal*.domain](#ordinal_domain).\n\n###### *ordinal*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nReturns an exact copy of this ordinal scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n###### d3.**scaleImplicit** · [Source](https://github.com/d3/d3-scale/blob/master/src/ordinal.js), [Examples](https://observablehq.com/@d3/d3-scaleordinal)\n\nA special value for [*ordinal*.unknown](#ordinal_unknown) that enables implicit domain construction: unknown values are implicitly added to the domain.\n\n#### Band Scales\n\nBand scales are like [ordinal scales](#ordinal-scales) except the output range is continuous and numeric. Discrete output values are automatically computed by the scale by dividing the continuous range into uniform bands. Band scales are typically used for bar charts with an ordinal or categorical dimension. The [unknown value](#ordinal_unknown) of a band scale is effectively undefined: they do not allow implicit domain construction.\n\n###### d3.**scaleBand**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nConstructs a new band scale with the specified [*domain*](#band_domain) and [*range*](#band_range), no [padding](#band_padding), no [rounding](#band_round) and center [alignment](#band_align). If *domain* is not specified, it defaults to the empty domain. If *range* is not specified, it defaults to the unit range \\[0, 1\\].\n\n###### *band*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nGiven a *value* in the input [domain](#band_domain), returns the start of the corresponding band derived from the output [range](#band_range). If the given *value* is not in the scale’s domain, returns undefined.\n\n###### *band*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first band, the second domain value to the second band, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to determine the band. Thus, a band scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding band. If *domain* is not specified, this method returns the current domain.\n\n###### *band*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *range* is specified, sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. If *range* is not specified, returns the scale’s current range, which defaults to \\[0, 1\\].\n\n###### *band*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nSets the scale’s [*range*](#band_range) to the specified two-element array of numbers while also enabling [rounding](#band_round). This is a convenience method equivalent to:\n\n``` javascript\nband\n    .range(range)\n    .round(true);\n```\n\nRounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles.\n\n###### *band*.**round**(\\[*round*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *round* is specified, enables or disables rounding accordingly. If rounding is enabled, the start and stop of each band will be integers. Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding! Use [*band*.align](#band_align) to specify how the leftover space is distributed.\n\n###### *band*.**paddingInner**(\\[*padding*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *padding* is specified, sets the inner padding to the specified number which must be less than or equal to 1. If *padding* is not specified, returns the current inner padding which defaults to 0. The inner padding specifies the proportion of the range that is reserved for blank space between bands; a value of 0 means no blank space between bands, and a value of 1 means a [bandwidth](#band_bandwidth) of zero.\n\n###### *band*.**paddingOuter**(\\[*padding*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *padding* is specified, sets the outer padding to the specified number which is typically in the range \\[0, 1\\]. If *padding* is not specified, returns the current outer padding which defaults to 0. The outer padding specifies the amount of blank space, in terms of multiples of the [step](#band_step), to reserve before the first band and after the last band.\n\n###### *band*.**padding**(\\[*padding*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nA convenience method for setting the [inner](#band_paddingInner) and [outer](#band_paddingOuter) padding to the same *padding* value. If *padding* is not specified, returns the inner padding.\n\n###### *band*.**align**(\\[*align*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nIf *align* is specified, sets the alignment to the specified value which must be in the range \\[0, 1\\]. If *align* is not specified, returns the current alignment which defaults to 0.5. The alignment specifies how outer padding is distributed in the range. A value of 0.5 indicates that the outer padding should be equally distributed before the first band and after the last band; *i.e.*, the bands should be centered within the range. A value of 0 or 1 may be used to shift the bands to one side, say to position them adjacent to an axis. For more, [see this explainer](https://observablehq.com/@d3/band-align).\n\n###### *band*.**bandwidth**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nReturns the width of each band.\n\n###### *band*.**step**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nReturns the distance between the starts of adjacent bands.\n\n###### *band*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scaleband)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n#### Point Scales\n\nPoint scales are a variant of [band scales](#band-scales) with the bandwidth fixed to zero. Point scales are typically used for scatterplots with an ordinal or categorical dimension. The [unknown value](#ordinal_unknown) of a point scale is always undefined: they do not allow implicit domain construction.\n\n###### d3.**scalePoint**(\\[\\[*domain*, \\]*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nConstructs a new point scale with the specified [*domain*](#point_domain) and [*range*](#point_range), no [padding](#point_padding), no [rounding](#point_round) and center [alignment](#point_align). If *domain* is not specified, it defaults to the empty domain. If *range* is not specified, it defaults to the unit range \\[0, 1\\].\n\n###### *point*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nGiven a *value* in the input [domain](#point_domain), returns the corresponding point derived from the output [range](#point_range). If the given *value* is not in the scale’s domain, returns undefined.\n\n###### *point*.**domain**(\\[*domain*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nIf *domain* is specified, sets the domain to the specified array of values. The first element in *domain* will be mapped to the first point, the second domain value to the second point, and so on. Domain values are stored internally in an [InternMap](https://github.com/mbostock/internmap) from primitive value to index; the resulting index is then used to determine the point. Thus, a point scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding point. If *domain* is not specified, this method returns the current domain.\n\n###### *point*.**range**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nIf *range* is specified, sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers. If *range* is not specified, returns the scale’s current range, which defaults to \\[0, 1\\].\n\n###### *point*.**rangeRound**(\\[*range*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nSets the scale’s [*range*](#point_range) to the specified two-element array of numbers while also enabling [rounding](#point_round). This is a convenience method equivalent to:\n\n``` javascript\npoint\n    .range(range)\n    .round(true);\n```\n\nRounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles.\n\n###### *point*.**round**(\\[*round*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nIf *round* is specified, enables or disables rounding accordingly. If rounding is enabled, the position of each point will be integers. Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the [shape-rendering](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering) “crispEdges” styles. Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding! Use [*point*.align](#point_align) to specify how the leftover space is distributed.\n\n###### *point*.**padding**(\\[*padding*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nIf *padding* is specified, sets the outer padding to the specified number which is typically in the range \\[0, 1\\]. If *padding* is not specified, returns the current outer padding which defaults to 0. The outer padding specifies the amount of blank space, in terms of multiples of the [step](#band_step), to reserve before the first point and after the last point. Equivalent to [*band*.paddingOuter](#band_paddingOuter).\n\n###### *point*.**align**(\\[*align*\\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nIf *align* is specified, sets the alignment to the specified value which must be in the range \\[0, 1\\]. If *align* is not specified, returns the current alignment which defaults to 0.5. The alignment specifies how any leftover unused space in the range is distributed. A value of 0.5 indicates that the leftover space should be equally distributed before the first point and after the last point; *i.e.*, the points should be centered within the range. A value of 0 or 1 may be used to shift the points to one side, say to position them adjacent to an axis.\n\n###### *point*.**bandwidth**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nReturns zero.\n\n###### *point*.**step**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nReturns the distance between the starts of adjacent points.\n\n###### *point*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/band.js), [Examples](https://observablehq.com/@d3/d3-scalepoint)\n\nReturns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-scale](https://github.com/d3/d3-scale)"
- name: scale-chromatic
  id: d3-scale-chromatic
  summary: This module provides sequential, diverging and categorical color schemes designed to work with d3-scale’s d3.scaleOrdinal and d3.scaleSequential
  description: "# d3-scale-chromatic\n\nThis module provides sequential, diverging and categorical color schemes designed to work with [d3-scale](d3-scale)’s [d3.scaleOrdinal](d3-scale#ordinal-scales) and [d3.scaleSequential](d3-scale#sequential-scales). Most of these schemes are derived from Cynthia A. Brewer’s [ColorBrewer](http://colorbrewer2.org). Since ColorBrewer publishes only discrete color schemes, the sequential and diverging scales are interpolated using [uniform B-splines](https://bl.ocks.org/mbostock/048d21cf747371b11884f75ad896e5a5).\n\nFor example, to create a categorical color scale using the [Accent](#schemeAccent) color scheme:\n\n``` javascript\nvar accent = d3.scaleOrdinal(d3.schemeAccent);\n```\n\nTo create a sequential discrete nine-color scale using the [Blues](#schemeBlues) color scheme:\n\n``` javascript\nvar blues = d3.scaleOrdinal(d3.schemeBlues[9]);\n```\n\nTo create a diverging, continuous color scale using the [PiYG](#interpolatePiYG) color scheme:\n\n``` javascript\nvar piyg = d3.scaleSequential(d3.interpolatePiYG);\n```\n\n## Installing\n\nIf you use npm, `npm install d3-scale-chromatic`. You can also download the [latest release on GitHub](https://github.com/d3/d3-scale-chromatic/releases/latest). For vanilla HTML in modern browsers, import d3-scale-chromatic from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {interpolateYlGn} from \"https://cdn.skypack.dev/d3-scale-chromatic@3\";\n\nconst yellow = interpolateYlGn(0); // \"rgb(255, 255, 229)\"\nconst yellowGreen = interpolateYlGn(0.5); // \"rgb(120, 197, 120)\"\nconst green = interpolateYlGn(1); // \"rgb(0, 69, 41)\"\n\n</script>\n```\n\nFor legacy environments, you can load d3-scale-chromatic’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-scale-chromatic@3\"></script>\n<script>\n\nconst yellow = d3.interpolateYlGn(0); // \"rgb(255, 255, 229)\"\nconst yellowGreen = d3.interpolateYlGn(0.5); // \"rgb(120, 197, 120)\"\nconst green = d3.interpolateYlGn(1); // \"rgb(0, 69, 41)\"\n\n</script>\n```\n\n[Try d3-scale-chromatic in your browser.](https://observablehq.com/collection/@d3/d3-scale-chromatic)\n\n## API Reference\n\n### Categorical\n\n###### d3.**schemeCategory10** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/category10.js \"Source\")\n\nAn array of ten categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeAccent** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Accent.js \"Source\")\n\nAn array of eight categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeDark2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Dark2.js \"Source\")\n\nAn array of eight categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemePaired** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Paired.js \"Source\")\n\nAn array of twelve categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemePastel1** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Pastel1.js \"Source\")\n\nAn array of nine categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemePastel2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Pastel2.js \"Source\")\n\nAn array of eight categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeSet1** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set1.js \"Source\")\n\nAn array of nine categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeSet2** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set2.js \"Source\")\n\nAn array of eight categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeSet3** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Set3.js \"Source\")\n\nAn array of twelve categorical colors represented as RGB hexadecimal strings.\n\n###### d3.**schemeTableau10** [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/categorical/Tableau10.js \"Source\")\n\nAn array of ten categorical colors authored by Tableau as part of [Tableau 10](https://www.tableau.com/about/blog/2016/7/colors-upgrade-tableau-10-56782) represented as RGB hexadecimal strings.\n\n### Diverging\n\nDiverging color schemes are available as continuous interpolators (often used with [d3.scaleSequential](d3-scale#sequential-scales)) and as discrete schemes (often used with [d3.scaleOrdinal](d3-scale#ordinal-scales)). Each discrete scheme, such as [d3.schemeBrBG](#schemeBrBG), is represented as an array of arrays of hexadecimal color strings. The *k*th element of this array contains the color scheme of size *k*; for example, `d3.schemeBrBG[9]` contains an array of nine strings representing the nine colors of the brown-blue-green diverging color scheme. Diverging color schemes support a size *k* ranging from 3 to 11.\n\n###### d3.**interpolateBrBG**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/BrBG.js \"Source\") d3.**schemeBrBG**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “BrBG” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolatePRGn**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/PRGn.js \"Source\") d3.**schemePRGn**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PRGn” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolatePiYG**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/PiYG.js \"Source\") d3.**schemePiYG**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PiYG” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolatePuOr**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/PuOr.js \"Source\") d3.**schemePuOr**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PuOr” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolateRdBu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/RdBu.js \"Source\") d3.**schemeRdBu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “RdBu” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolateRdGy**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/RdGy.js \"Source\") d3.**schemeRdGy**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “RdGy” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolateRdYlBu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/RdYlBu.js \"Source\") d3.**schemeRdYlBu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “RdYlBu” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolateRdYlGn**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/RdYlGn.js \"Source\") d3.**schemeRdYlGn**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “RdYlGn” diverging color scheme represented as an RGB string.\n\n###### d3.**interpolateSpectral**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/diverging/Spectral.js \"Source\") d3.**schemeSpectral**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Spectral” diverging color scheme represented as an RGB string.\n\n### Sequential (Single Hue)\n\nSequential, single-hue color schemes are available as continuous interpolators (often used with [d3.scaleSequential](d3-scale#sequential-scales)) and as discrete schemes (often used with [d3.scaleOrdinal](d3-scale#ordinal-scales)). Each discrete scheme, such as [d3.schemeBlues](#schemeBlues), is represented as an array of arrays of hexadecimal color strings. The *k*th element of this array contains the color scheme of size *k*; for example, `d3.schemeBlues[9]` contains an array of nine strings representing the nine colors of the blue sequential color scheme. Sequential, single-hue color schemes support a size *k* ranging from 3 to 9.\n\n###### d3.**interpolateBlues**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Blues.js \"Source\") d3.**schemeBlues**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Blues” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateGreens**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Greens.js \"Source\") d3.**schemeGreens**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Greens” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateGreys**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Greys.js \"Source\") d3.**schemeGreys**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Greys” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateOranges**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Oranges.js \"Source\") d3.**schemeOranges**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Oranges” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolatePurples**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Purples.js \"Source\") d3.**schemePurples**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Purples” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateReds**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-single/Reds.js \"Source\") d3.**schemeReds**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “Reds” sequential color scheme represented as an RGB string.\n\n### Sequential (Multi-Hue)\n\nSequential, multi-hue color schemes are available as continuous interpolators (often used with [d3.scaleSequential](d3-scale#sequential-scales)) and as discrete schemes (often used with [d3.scaleOrdinal](d3-scale#ordinal-scales)). Each discrete scheme, such as [d3.schemeBuGn](#schemeBuGn), is represented as an array of arrays of hexadecimal color strings. The *k*th element of this array contains the color scheme of size *k*; for example, `d3.schemeBuGn[9]` contains an array of nine strings representing the nine colors of the blue-green sequential color scheme. Sequential, multi-hue color schemes support a size *k* ranging from 3 to 9.\n\n###### d3.**interpolateTurbo**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/turbo.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “turbo” color scheme by [Anton Mikhailov](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html).\n\n###### d3.**interpolateViridis**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “viridis” perceptually-uniform color scheme designed by [van der Walt, Smith and Firing](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.\n\n###### d3.**interpolateInferno**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “inferno” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.\n\n###### d3.**interpolateMagma**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “magma” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.\n\n###### d3.**interpolatePlasma**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/viridis.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “plasma” perceptually-uniform color scheme designed by [van der Walt and Smith](https://bids.github.io/colormap/) for matplotlib, represented as an RGB string.\n\n###### d3.**interpolateCividis**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/cividis.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “cividis” color vision deficiency-optimized color scheme designed by [Nuñez, Anderton, and Renslow](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0199239), represented as an RGB string.\n\n###### d3.**interpolateWarm**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from a 180° rotation of [Niccoli’s perceptual rainbow](https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/), represented as an RGB string.\n\n###### d3.**interpolateCool**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from [Niccoli’s perceptual rainbow](https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/), represented as an RGB string.\n\n###### d3.**interpolateCubehelixDefault**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/cubehelix.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from [Green’s default Cubehelix](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) represented as an RGB string.\n\n###### d3.**interpolateBuGn**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/BuGn.js \"Source\") d3.**schemeBuGn**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “BuGn” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateBuPu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/BuPu.js \"Source\") d3.**schemeBuPu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “BuPu” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateGnBu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/GnBu.js \"Source\") d3.**schemeGnBu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “GnBu” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateOrRd**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/OrRd.js \"Source\") d3.**schemeOrRd**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “OrRd” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolatePuBuGn**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/PuBuGn.js \"Source\") d3.**schemePuBuGn**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PuBuGn” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolatePuBu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/PuBu.js \"Source\") d3.**schemePuBu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PuBu” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolatePuRd**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/PuRd.js \"Source\") d3.**schemePuRd**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “PuRd” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateRdPu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/RdPu.js \"Source\") d3.**schemeRdPu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “RdPu” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateYlGnBu**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/YlGnBu.js \"Source\") d3.**schemeYlGnBu**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “YlGnBu” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateYlGn**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/YlGn.js \"Source\") d3.**schemeYlGn**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “YlGn” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateYlOrBr**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/YlOrBr.js \"Source\") d3.**schemeYlOrBr**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “YlOrBr” sequential color scheme represented as an RGB string.\n\n###### d3.**interpolateYlOrRd**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/YlOrRd.js \"Source\") d3.**schemeYlOrRd**\\[*k*\\]\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “YlOrRd” sequential color scheme represented as an RGB string.\n\n### Cyclical\n\n###### d3.**interpolateRainbow**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/rainbow.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from [d3.interpolateWarm](#interpolateWarm) scale from \\[0.0, 0.5\\] followed by the [d3.interpolateCool](#interpolateCool) scale from \\[0.5, 1.0\\], thus implementing the cyclical [less-angry rainbow](http://bl.ocks.org/mbostock/310c99e53880faec2434) color scheme.\n\n###### d3.**interpolateSinebow**(*t*) [Source](https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/sinebow.js \"Source\")\n\nGiven a number *t* in the range \\[0,1\\], returns the corresponding color from the “sinebow” color scheme by [Jim Bumgardner](https://krazydad.com/tutorials/makecolors.php) and [Charlie Loyd](http://basecase.org/env/on-rainbows).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic)"
- name: selection
  id: d3-selection
  summary: 'Selections allow powerful data-driven transformation of the document object model (DOM): set attributes, styles, properties, HTML or text content, and more'
  description: "# d3-selection\n\nSelections allow powerful data-driven transformation of the document object model (DOM): set [attributes](#selection_attr), [styles](#selection_style), [properties](#selection_property), [HTML](#selection_html) or [text](#selection_text) content, and more. Using the [data join](#joining-data)’s [enter](#selection_enter) and [exit](#selection_enter) selections, you can also [add](#selection_append) or [remove](#selection_remove) elements to correspond to data.\n\nSelection methods typically return the current selection, or a new selection, allowing the concise application of multiple operations on a given selection via method chaining. For example, to set the class and color style of all paragraph elements in the current document:\n\n``` javascript\nd3.selectAll(\"p\")\n    .attr(\"class\", \"graf\")\n    .style(\"color\", \"red\");\n```\n\nThis is equivalent to:\n\n``` javascript\nconst p = d3.selectAll(\"p\");\np.attr(\"class\", \"graf\");\np.style(\"color\", \"red\");\n```\n\nBy convention, selection methods that return the current selection use *four* spaces of indent, while methods that return a new selection use only *two*. This helps reveal changes of context by making them stick out of the chain:\n\n``` javascript\nd3.select(\"body\")\n  .append(\"svg\")\n    .attr(\"width\", 960)\n    .attr(\"height\", 500)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(20,20)\")\n  .append(\"rect\")\n    .attr(\"width\", 920)\n    .attr(\"height\", 460);\n```\n\nSelections are immutable. All selection methods that affect which elements are selected (or their order) return a new selection rather than modifying the current selection. However, note that elements are necessarily mutable, as selections drive transformations of the document!\n\nFor more, see [the d3-selection collection on Observable](https://observablehq.com/collection/@d3/d3-selection).\n\n## Installing\n\nIf you use npm, `npm install d3-selection`. You can also download the [latest release on GitHub](https://github.com/d3/d3-selection/releases/latest). For vanilla HTML in modern browsers, import d3-selection from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {selectAll} from \"https://cdn.skypack.dev/d3-selection@3\";\n\nconst div = selectAll(\"div\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-selection’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-selection@3\"></script>\n<script>\n\nconst div = d3.selectAll(\"div\");\n\n</script>\n```\n\n[Try d3-selection in your browser.](https://observablehq.com/collection/@d3/d3-selection)\n\n## API Reference\n\n- [Selecting Elements](#selecting-elements)\n- [Modifying Elements](#modifying-elements)\n- [Joining Data](#joining-data)\n- [Handling Events](#handling-events)\n- [Control Flow](#control-flow)\n- [Local Variables](#local-variables)\n- [Namespaces](#namespaces)\n\n### Selecting Elements\n\nSelection methods accept [W3C selector strings](http://www.w3.org/TR/selectors-api/) such as `.fancy` to select elements with the class *fancy*, or `div` to select DIV elements. Selection methods come in two forms: select and selectAll: the former selects only the first matching element, while the latter selects all matching elements in document order. The top-level selection methods, [d3.select](#select) and [d3.selectAll](#selectAll), query the entire document; the subselection methods, [*selection*.select](#selection_select) and [*selection*.selectAll](#selection_selectAll), restrict selection to descendants of the selected elements.\n\n###### d3.**selection**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/index.js)\n\n[Selects](#select) the root element, `document.documentElement`. This function can also be used to test for selections (`instanceof d3.selection`) or to extend the selection prototype. For example, to add a method to check checkboxes:\n\n``` javascript\nd3.selection.prototype.checked = function(value) {\n  return arguments.length < 1\n      ? this.property(\"checked\")\n      : this.property(\"checked\", !!value);\n};\n```\n\nAnd then to use:\n\n``` javascript\nd3.selectAll(\"input[type=checkbox]\").checked(true);\n```\n\n###### d3.**select**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/select.js)\n\nSelects the first element that matches the specified *selector* string. If no elements match the *selector*, returns an empty selection. If multiple elements match the *selector*, only the first matching element (in document order) will be selected. For example, to select the first anchor element:\n\n``` javascript\nconst anchor = d3.select(\"a\");\n```\n\nIf the *selector* is not a string, instead selects the specified node; this is useful if you already have a reference to a node, such as `this` within an event listener or a global such as `document.body`. For example, to make a clicked paragraph red:\n\n``` javascript\nd3.selectAll(\"p\").on(\"click\", function(event) {\n  d3.select(this).style(\"color\", \"red\");\n});\n```\n\n###### d3.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selectAll.js)\n\nSelects all elements that match the specified *selector* string. The elements will be selected in document order (top-to-bottom). If no elements in the document match the *selector*, or if the *selector* is null or undefined, returns an empty selection. For example, to select all paragraphs:\n\n``` javascript\nconst paragraph = d3.selectAll(\"p\");\n```\n\nIf the *selector* is not a string, instead selects the specified array of nodes; this is useful if you already have a reference to nodes, such as `this.childNodes` within an event listener or a global such as `document.links`. The nodes may instead be an iterable, or a pseudo-array such as a NodeList. For example, to color all links red:\n\n``` javascript\nd3.selectAll(document.links).style(\"color\", \"red\");\n```\n\n###### *selection*.**select**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/select.js)\n\nFor each selected element, selects the first descendant element that matches the specified *selector* string. If no element matches the specified selector for the current element, the element at the current index will be null in the returned selection. (If the *selector* is null, every element in the returned selection will be null, resulting in an empty selection.) If the current element has associated data, this data is propagated to the corresponding selected element. If multiple elements match the selector, only the first matching element in document order is selected. For example, to select the first bold element in every paragraph:\n\n``` javascript\nconst b = d3.selectAll(\"p\").select(\"b\");\n```\n\nIf the *selector* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). It must return an element, or null if there is no matching element. For example, to select the previous sibling of each paragraph:\n\n``` javascript\nconst previous = d3.selectAll(\"p\").select(function() {\n  return this.previousElementSibling;\n});\n```\n\nUnlike [*selection*.selectAll](#selection_selectAll), *selection*.select does not affect grouping: it preserves the existing group structure and indexes, and propagates data (if any) to selected children. Grouping plays an important role in the [data join](#joining-data). See [Nested Selections](http://bost.ocks.org/mike/nest/) and [How Selections Work](http://bost.ocks.org/mike/selection/) for more on this topic.\n\n###### *selection*.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectAll.js)\n\nFor each selected element, selects the descendant elements that match the specified *selector* string. The elements in the returned selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector for the current element, or if the *selector* is null, the group at the current index will be empty. The selected elements do not inherit data from this selection; use [*selection*.data](#selection_data) to propagate data to children. For example, to select the bold elements in every paragraph:\n\n``` javascript\nconst b = d3.selectAll(\"p\").selectAll(\"b\");\n```\n\nIf the *selector* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). It must return an array of elements (or an iterable, or a pseudo-array such as a NodeList), or the empty array if there are no matching elements. For example, to select the previous and next siblings of each paragraph:\n\n``` javascript\nconst sibling = d3.selectAll(\"p\").selectAll(function() {\n  return [\n    this.previousElementSibling,\n    this.nextElementSibling\n  ];\n});\n```\n\nUnlike [*selection*.select](#selection_select), *selection*.selectAll does affect grouping: each selected descendant is grouped by the parent element in the originating selection. Grouping plays an important role in the [data join](#joining-data). See [Nested Selections](http://bost.ocks.org/mike/nest/) and [How Selections Work](http://bost.ocks.org/mike/selection/) for more on this topic.\n\n###### *selection*.**filter**(*filter*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/filter.js)\n\nFilters the selection, returning a new selection that contains only the elements for which the specified *filter* is true. The *filter* may be specified either as a selector string or a function. If the *filter* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]).\n\nFor example, to filter a selection of table rows to contain only even rows:\n\n``` javascript\nconst even = d3.selectAll(\"tr\").filter(\":nth-child(even)\");\n```\n\nThis is approximately equivalent to using [d3.selectAll](#selectAll) directly, although the indexes may be different:\n\n``` javascript\nconst even = d3.selectAll(\"tr:nth-child(even)\");\n```\n\nSimilarly, using a function:\n\n``` javascript\nconst even = d3.selectAll(\"tr\").filter((d, i) => i & 1);\n```\n\nOr using [*selection*.select](#selection_select) (and avoiding an arrow function, since *this* is needed to refer to the current element):\n\n``` javascript\nconst even = d3.selectAll(\"tr\").select(function(d, i) { return i & 1 ? this : null; });\n```\n\nNote that the `:nth-child` pseudo-class is a one-based index rather than a zero-based index. Also, the above filter functions do not have precisely the same meaning as `:nth-child`; they rely on the selection index rather than the number of preceding sibling elements in the DOM.\n\nThe returned filtered selection preserves the parents of this selection, but like [*array*.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), it does not preserve indexes as some elements may be removed; use [*selection*.select](#selection_select) to preserve the index, if needed.\n\n###### *selection*.**merge**(*other*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/merge.js)\n\nReturns a new selection merging this selection with the specified *other* selection or transition. The returned selection has the same number of groups and the same parents as this selection. Any missing (null) elements in this selection are filled with the corresponding element, if present (not null), from the specified *selection*. (If the *other* selection has additional groups or parents, they are ignored.)\n\nThis method is used internally by [*selection*.join](#selection_join) to merge the [enter](#selection_enter) and [update](#selection_data) selections after [binding data](#joining-data). You can also merge explicitly, although note that since merging is based on element index, you should use operations that preserve index, such as [*selection*.select](#selection_select) instead of [*selection*.filter](#selection_filter). For example:\n\n``` javascript\nconst odd = selection.select(function(d, i) { return i & 1 ? this : null; ));\nconst even = selection.select(function(d, i) { return i & 1 ? null : this; ));\nconst merged = odd.merge(even);\n```\n\nSee [*selection*.data](#selection_data) for more.\n\nThis method is not intended for concatenating arbitrary selections, however: if both this selection and the specified *other* selection have (non-null) elements at the same index, this selection’s element is returned in the merge and the *other* selection’s element is ignored.\n\n###### *selection*.**selectChild**(\\[*selector*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectChild.js)\n\nReturns a new selection with the (first) child of each element of the current selection matching the *selector*. If no *selector* is specified, selects the first child (if any). If the *selector* is specified as a string, selects the first child that matches (if any). If the *selector* is a function, it is evaluated for each of the children nodes, in order, being passed the child (*child*), the child’s index (*i*), and the list of children (*children*); the method selects the first child for which the selector return truthy, if any.\n\n###### *selection*.**selectChildren**(\\[*selector*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectChildren.js)\n\nReturns a new selection with the children of each element of the current selection matching the *selector*. If no *selector* is specified, selects all the children. If the *selector* is specified as a string, selects the children that match (if any). If the *selector* is a function, it is evaluated for each of the children nodes, in order, being passed the child (*child*), the child’s index (*i*), and the list of children (*children*); the method selects all children for which the selector return truthy.\n\n###### *selection*.**selection**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/index.js)\n\nReturns the selection (for symmetry with [*transition*.selection](d3-transition#transition_selection)).\n\n###### d3.**matcher**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/matcher.js)\n\nGiven the specified *selector*, returns a function which returns true if `this` element [matches](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches) the specified selector. This method is used internally by [*selection*.filter](#selection_filter). For example, this:\n\n``` javascript\nconst div = selection.filter(\"div\");\n```\n\nIs equivalent to:\n\n``` javascript\nconst div = selection.filter(d3.matcher(\"div\"));\n```\n\n(Although D3 is not a compatibility layer, this implementation does support vendor-prefixed implementations due to the recent standardization of *element*.matches.)\n\n###### d3.**selector**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selector.js)\n\nGiven the specified *selector*, returns a function which returns the first descendant of `this` element that matches the specified selector. This method is used internally by [*selection*.select](#selection_select). For example, this:\n\n``` javascript\nconst div = selection.select(\"div\");\n```\n\nIs equivalent to:\n\n``` javascript\nconst div = selection.select(d3.selector(\"div\"));\n```\n\n###### d3.**selectorAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selectAll.js)\n\nGiven the specified *selector*, returns a function which returns all descendants of `this` element that match the specified selector. This method is used internally by [*selection*.selectAll](#selection_selectAll). For example, this:\n\n``` javascript\nconst div = selection.selectAll(\"div\");\n```\n\nIs equivalent to:\n\n``` javascript\nconst div = selection.selectAll(d3.selectorAll(\"div\"));\n```\n\n###### d3.**window**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/window.js)\n\nReturns the owner window for the specified *node*. If *node* is a node, returns the owner document’s default view; if *node* is a document, returns its default view; otherwise returns the *node*.\n\n###### d3.**style**(*node*, *name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/style.js)\n\nReturns the value of the style property with the specified *name* for the specified *node*. If the *node* has an inline style with the specified *name*, its value is returned; otherwise, the [computed property value](https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value) is returned. See also [*selection*.style](#selection_style).\n\n### Modifying Elements\n\nAfter selecting elements, use the selection’s transformation methods to affect document content. For example, to set the name attribute and color style of an anchor element:\n\n``` javascript\nd3.select(\"a\")\n    .attr(\"name\", \"fred\")\n    .style(\"color\", \"red\");\n```\n\nTo experiment with selections, visit [d3js.org](https://d3js.org) and open your browser’s developer console! (In Chrome, open the console with ⌥⌘J.) Select elements and then inspect the returned selection to see which elements are selected and how they are grouped. Call selection methods and see how the page content changes.\n\n###### *selection*.**attr**(*name*\\[, *value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/attr.js)\n\nIf a *value* is specified, sets the attribute with the specified *name* to the specified value on the selected elements and returns this selection. If the *value* is a constant, all elements are given the same attribute value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.\n\nIf a *value* is not specified, returns the current value of the specified attribute for the first (non-null) element in the selection. This is generally useful only if you know that the selection contains exactly one element.\n\nThe specified *name* may have a namespace prefix, such as `xlink:href` to specify the `href` attribute in the XLink namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map.\n\n###### *selection*.**classed**(*names*\\[, *value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/classed.js)\n\nIf a *value* is specified, assigns or unassigns the specified CSS class *names* on the selected elements by setting the `class` attribute or modifying the `classList` property and returns this selection. The specified *names* is a string of space-separated class names. For example, to assign the classes `foo` and `bar` to the selected elements:\n\n``` javascript\nselection.classed(\"foo bar\", true);\n```\n\nIf the *value* is truthy, then all elements are assigned the specified classes; otherwise, the classes are unassigned. If the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to assign or unassign classes on each element. For example, to randomly associate the class *foo* with on average half the selected elements:\n\n``` javascript\nselection.classed(\"foo\", () => Math.random() > 0.5);\n```\n\nIf a *value* is not specified, returns true if and only if the first (non-null) selected element has the specified *classes*. This is generally useful only if you know the selection contains exactly one element.\n\n###### *selection*.**style**(*name*\\[, *value*\\[, *priority*\\]\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/style.js)\n\nIf a *value* is specified, sets the style property with the specified *name* to the specified value on the selected elements and returns this selection. If the *value* is a constant, then all elements are given the same style property value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to set each element’s style property. A null value will remove the style property. An optional *priority* may also be specified, either as null or the string `important` (without the exclamation point).\n\nIf a *value* is not specified, returns the current value of the specified style property for the first (non-null) element in the selection. The current value is defined as the element’s inline value, if present, and otherwise its [computed value](https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value). Accessing the current style value is generally useful only if you know the selection contains exactly one element.\n\nCaution: unlike many SVG attributes, CSS styles typically have associated units. For example, `3px` is a valid stroke-width property value, while `3` is not. Some browsers implicitly assign the `px` (pixel) unit to numeric values, but not all browsers do: IE, for example, throws an “invalid arguments” error!\n\n###### *selection*.**property**(*name*\\[, *value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/property.js)\n\nSome HTML elements have special properties that are not addressable using attributes or styles, such as a form field’s text `value` and a checkbox’s `checked` boolean. Use this method to get or set these properties.\n\nIf a *value* is specified, sets the property with the specified *name* to the specified value on selected elements. If the *value* is a constant, then all elements are given the same property value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to set each element’s property. A null value will delete the specified property.\n\nIf a *value* is not specified, returns the value of the specified property for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.\n\n###### *selection*.**text**(\\[*value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/text.js)\n\nIf a *value* is specified, sets the [text content](http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent) to the specified value on all selected elements, replacing any existing child elements. If the *value* is a constant, then all elements are given the same text content; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to set each element’s text content. A null value will clear the content.\n\nIf a *value* is not specified, returns the text content for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.\n\n###### *selection*.**html**(\\[*value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/html.js)\n\nIf a *value* is specified, sets the [inner HTML](http://dev.w3.org/html5/spec-LC/apis-in-html-documents.html#innerhtml) to the specified value on all selected elements, replacing any existing child elements. If the *value* is a constant, then all elements are given the same inner HTML; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function’s return value is then used to set each element’s inner HTML. A null value will clear the content.\n\nIf a *value* is not specified, returns the inner HTML for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.\n\nUse [*selection*.append](#selection_append) or [*selection*.insert](#selection_insert) instead to create data-driven content; this method is intended for when you want a little bit of HTML, say for rich formatting. Also, *selection*.html is only supported on HTML elements. SVG elements and other non-HTML elements do not support the innerHTML property, and thus are incompatible with *selection*.html. Consider using [XMLSerializer](https://developer.mozilla.org/en-US/docs/XMLSerializer) to convert a DOM subtree to text. See also the [innersvg polyfill](https://code.google.com/p/innersvg/), which provides a shim to support the innerHTML property on SVG elements.\n\n###### *selection*.**append**(*type*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/append.js)\n\nIf the specified *type* is a string, appends a new element of this type (tag name) as the last child of each selected element, or before the next following sibling in the update selection if this is an [enter selection](#selection_enter). The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data; however, note that [*selection*.order](#selection_order) may still be required if updating elements change order (*i.e.*, if the order of new data is inconsistent with old data).\n\nIf the specified *type* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). This function should return an element to be appended. (The function typically creates a new element, but it may instead return an existing element.) For example, to append a paragraph to each DIV element:\n\n``` javascript\nd3.selectAll(\"div\").append(\"p\");\n```\n\nThis is equivalent to:\n\n``` javascript\nd3.selectAll(\"div\").append(() => document.createElement(\"p\"));\n```\n\nWhich is equivalent to:\n\n``` javascript\nd3.selectAll(\"div\").select(function() {\n  return this.appendChild(document.createElement(\"p\"));\n});\n```\n\nIn both cases, this method returns a new selection containing the appended elements. Each new element inherits the data of the current elements, if any, in the same manner as [*selection*.select](#selection_select).\n\nThe specified *name* may have a namespace prefix, such as `svg:text` to specify a `text` attribute in the SVG namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map. If no namespace is specified, the namespace will be inherited from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, `svg` implies `svg:svg`).\n\n###### *selection*.**insert**(*type*\\[, *before*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/insert.js)\n\nIf the specified *type* is a string, inserts a new element of this type (tag name) before the first element matching the specified *before* selector for each selected element. For example, a *before* selector `:first-child` will prepend nodes before the first child. If *before* is not specified, it defaults to null. (To append elements in an order consistent with [bound data](#joining-data), use [*selection*.append](#selection_append).)\n\nBoth *type* and *before* may instead be specified as functions which are evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The *type* function should return an element to be inserted; the *before* function should return the child element before which the element should be inserted. For example, to append a paragraph to each DIV element:\n\n``` javascript\nd3.selectAll(\"div\").insert(\"p\");\n```\n\nThis is equivalent to:\n\n``` javascript\nd3.selectAll(\"div\").insert(() => document.createElement(\"p\"));\n```\n\nWhich is equivalent to:\n\n``` javascript\nd3.selectAll(\"div\").select(function() {\n  return this.insertBefore(document.createElement(\"p\"), null);\n});\n```\n\nIn both cases, this method returns a new selection containing the appended elements. Each new element inherits the data of the current elements, if any, in the same manner as [*selection*.select](#selection_select).\n\nThe specified *name* may have a namespace prefix, such as `svg:text` to specify a `text` attribute in the SVG namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map. If no namespace is specified, the namespace will be inherited from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, `svg` implies `svg:svg`).\n\n###### *selection*.**remove**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/remove.js)\n\nRemoves the selected elements from the document. Returns this selection (the removed elements) which are now detached from the DOM. There is not currently a dedicated API to add removed elements back to the document; however, you can pass a function to [*selection*.append](#selection_append) or [*selection*.insert](#selection_insert) to re-add elements.\n\n###### *selection*.**clone**(\\[*deep*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/clone.js)\n\nInserts clones of the selected elements immediately following the selected elements and returns a selection of the newly added clones. If *deep* is truthy, the descendant nodes of the selected elements will be cloned as well. Otherwise, only the elements themselves will be cloned. Equivalent to:\n\n``` javascript\nselection.select(function() {\n  return this.parentNode.insertBefore(this.cloneNode(deep), this.nextSibling);\n});\n```\n\n###### *selection*.**sort**(*compare*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/sort.js)\n\nReturns a new selection that contains a copy of each group in this selection sorted according to the *compare* function. After sorting, re-inserts elements to match the resulting order (per [*selection*.order](#selection_order)).\n\nThe compare function, which defaults to [ascending](d3-array#ascending), is passed two elements’ data *a* and *b* to compare. It should return either a negative, positive, or zero value. If negative, then *a* should be before *b*; if positive, then *a* should be after *b*; otherwise, *a* and *b* are considered equal and the order is arbitrary.\n\nNote that sorting is not guaranteed to be stable; however, it is guaranteed to have the same behavior as your browser’s built-in [sort](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) method on arrays.\n\n###### *selection*.**order**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/order.js)\n\nRe-inserts elements into the document such that the document order of each group matches the selection order. This is equivalent to calling [*selection*.sort](#selection_sort) if the data is already sorted, but much faster.\n\n###### *selection*.**raise**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/raise.js)\n\nRe-inserts each selected element, in order, as the last child of its parent. Equivalent to:\n\n``` javascript\nselection.each(function() {\n  this.parentNode.appendChild(this);\n});\n```\n\n###### *selection*.**lower**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/lower.js)\n\nRe-inserts each selected element, in order, as the first child of its parent. Equivalent to:\n\n``` javascript\nselection.each(function() {\n  this.parentNode.insertBefore(this, this.parentNode.firstChild);\n});\n```\n\n###### d3.**create**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/create.js)\n\nGiven the specified element *name*, returns a single-element selection containing a detached element of the given name in the current document. This method assumes the HTML namespace, so you must specify a namespace explicitly when creating SVG or other non-HTML elements; see [namespace](#namespace) for details on supported namespace prefixes.\n\n``` javascript\nd3.create(\"svg\") // equivalent to svg:svg\nd3.create(\"svg:svg\") // more explicitly\nd3.create(\"svg:g\") // an SVG G element\nd3.create(\"g\") // an HTML G (unknown) element\n```\n\n###### d3.**creator**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/creator.js)\n\nGiven the specified element *name*, returns a function which creates an element of the given name, assuming that `this` is the parent element. This method is used internally by [*selection*.append](#selection_append) and [*selection*.insert](#selection_insert) to create new elements. For example, this:\n\n``` javascript\nselection.append(\"div\");\n```\n\nIs equivalent to:\n\n``` javascript\nselection.append(d3.creator(\"div\"));\n```\n\nSee [namespace](#namespace) for details on supported namespace prefixes, such as for SVG elements.\n\n### Joining Data\n\nFor an introduction to D3’s data joins, see the [*selection*.join notebook](https://observablehq.com/@d3/selection-join). Also see [Thinking With Joins](http://bost.ocks.org/mike/join/).\n\n###### *selection*.**data**(\\[*data*\\[, *key*\\]\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/data.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot)\n\nBinds the specified array of *data* with the selected elements, returning a new selection that represents the *update* selection: the elements successfully bound to data. Also defines the [enter](#selection_enter) and [exit](#selection_exit) selections on the returned selection, which can be used to add or remove elements to correspond to the new data. The specified *data* is an array of arbitrary values (*e.g.*, numbers or objects), or a function that returns an array of values for each group. When data is assigned to an element, it is stored in the property `__data__`, thus making the data “sticky” and available on re-selection.\n\nThe *data* is specified **for each group** in the selection. If the selection has multiple groups (such as [d3.selectAll](#selectAll) followed by [*selection*.selectAll](#selection_selectAll)), then *data* should typically be specified as a function. This function will be evaluated for each group in order, being passed the group’s parent datum (*d*, which may be undefined), the group index (*i*), and the selection’s parent nodes (*nodes*), with *this* as the group’s parent element.\n\nIn conjunction with [*selection*.join](#selection_join) (or more explicitly with [*selection*.enter](#selection_enter), [*selection*.exit](#selection_exit), [*selection*.append](#selection_append) and [*selection*.remove](#selection_remove)), *selection*.data can be used to enter, update and exit elements to match data. For example, to create an HTML table from a matrix of numbers:\n\n``` javascript\nconst matrix = [\n  [11975,  5871, 8916, 2868],\n  [ 1951, 10048, 2060, 6171],\n  [ 8010, 16145, 8090, 8045],\n  [ 1013,   990,  940, 6907]\n];\n\nd3.select(\"body\")\n  .append(\"table\")\n  .selectAll(\"tr\")\n  .data(matrix)\n  .join(\"tr\")\n  .selectAll(\"td\")\n  .data(d => d)\n  .join(\"td\")\n    .text(d => d);\n```\n\nIn this example the *data* function is the identity function: for each table row, it returns the corresponding row from the data matrix.\n\nIf a *key* function is not specified, then the first datum in *data* is assigned to the first selected element, the second datum to the second selected element, and so on. A *key* function may be specified to control which datum is assigned to which element, replacing the default join-by-index, by computing a string identifier for each datum and element. This key function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]); the returned string is the element’s key. The key function is then also evaluated for each new datum in *data*, being passed the current datum (*d*), the current index (*i*), and the group’s new *data*, with *this* as the group’s parent DOM element; the returned string is the datum’s key. The datum for a given key is assigned to the element with the matching key. If multiple elements have the same key, the duplicate elements are put into the exit selection; if multiple data have the same key, the duplicate data are put into the enter selection.\n\nFor example, given this document:\n\n``` markup\n<div id=\"Ford\"></div>\n<div id=\"Jarrah\"></div>\n<div id=\"Kwon\"></div>\n<div id=\"Locke\"></div>\n<div id=\"Reyes\"></div>\n<div id=\"Shephard\"></div>\n```\n\nYou could join data by key as follows:\n\n``` javascript\nconst data = [\n  {name: \"Locke\", number: 4},\n  {name: \"Reyes\", number: 8},\n  {name: \"Ford\", number: 15},\n  {name: \"Jarrah\", number: 16},\n  {name: \"Shephard\", number: 23},\n  {name: \"Kwon\", number: 42}\n];\n\nd3.selectAll(\"div\")\n  .data(data, function(d) { return d ? d.name : this.id; })\n    .text(d => d.number);\n```\n\nThis example key function uses the datum *d* if present, and otherwise falls back to the element’s id property. Since these elements were not previously bound to data, the datum *d* is null when the key function is evaluated on selected elements, and non-null when the key function is evaluated on the new data.\n\nThe *update* and *enter* selections are returned in data order, while the *exit* selection preserves the selection order prior to the join. If a key function is specified, the order of elements in the selection may not match their order in the document; use [*selection*.order](#selection_order) or [*selection*.sort](#selection_sort) as needed. For more on how the key function affects the join, see [A Bar Chart, Part 2](http://bost.ocks.org/mike/bar/2/) and [Object Constancy](http://bost.ocks.org/mike/constancy/).\n\nIf *data* is not specified, this method returns the array of data for the selected elements.\n\nThis method cannot be used to clear bound data; use [*selection*.datum](#selection_datum) instead.\n\n###### *selection*.**join**(*enter*\\[, *update*\\]\\[, *exit*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/join.js)\n\nAppends, removes and reorders elements as necessary to match the data that was previously bound by [*selection*.data](#selection_data), returning the [merged](#selection_merge) enter and update selection. This method is a convenient alternative to the explicit [general update pattern](https://bl.ocks.org/mbostock/3808218), replacing [*selection*.enter](#selection_enter), [*selection*.exit](#selection_exit), [*selection*.append](#selection_append), [*selection*.remove](#selection_remove), and [*selection*.order](#selection_order). For example:\n\n``` javascript\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\"circle\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n```\n\nThe *enter* function may be specified as a string shorthand, as above, which is equivalent to [*selection*.append](#selection_append) with the given element name. Likewise, optional *update* and *exit* functions may be specified, which default to the identity function and calling [*selection*.remove](#selection_remove), respectively. The shorthand above is thus equivalent to:\n\n``` javascript\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\n    enter => enter.append(\"circle\"),\n    update => update,\n    exit => exit.remove()\n  )\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n```\n\nBy passing separate functions on enter, update and exit, you have greater control over what happens. And by specifying a key function to [*selection*.data](#selection_data), you can minimize changes to the DOM to optimize performance. For example, to set different fill colors for enter and update:\n\n``` javascript\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\n    enter => enter.append(\"circle\").attr(\"fill\", \"green\"),\n    update => update.attr(\"fill\", \"blue\")\n  )\n    .attr(\"stroke\", \"black\");\n```\n\nThe selections returned by the *enter* and *update* functions are merged and then returned by *selection*.join.\n\nYou can animate enter, update and exit by creating transitions inside the *enter*, *update* and *exit* functions. If the *enter* and *update* functions return transitions, their underlying selections are merged and then returned by *selection*.join. The return value of the *exit* function is not used.\n\nFor more, see the [*selection*.join notebook](https://observablehq.com/@d3/selection-join).\n\n###### *selection*.**enter**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/enter.js)\n\nReturns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection. (The enter selection is empty for selections not returned by [*selection*.data](#selection_data).)\n\nThe enter selection is typically used to create “missing” elements corresponding to new data. For example, to create DIV elements from an array of numbers:\n\n``` javascript\nconst div = d3.select(\"body\")\n  .selectAll(\"div\")\n  .data([4, 8, 15, 16, 23, 42])\n  .enter().append(\"div\")\n    .text(d => d);\n```\n\nIf the body is initially empty, the above code will create six new DIV elements, append them to the body in-order, and assign their text content as the associated (string-coerced) number:\n\n``` markup\n<div>4</div>\n<div>8</div>\n<div>15</div>\n<div>16</div>\n<div>23</div>\n<div>42</div>\n```\n\nConceptually, the enter selection’s placeholders are pointers to the parent element (in this example, the document body). The enter selection is typically only used transiently to append elements, and is often [merged](#selection_merge) with the update selection after appending, such that modifications can be applied to both entering and updating elements.\n\n###### *selection*.**exit**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/exit.js)\n\nReturns the exit selection: existing DOM elements in the selection for which no new datum was found. (The exit selection is empty for selections not returned by [*selection*.data](#selection_data).)\n\nThe exit selection is typically used to remove “superfluous” elements corresponding to old data. For example, to update the DIV elements created previously with a new array of numbers:\n\n``` javascript\ndiv = div.data([1, 2, 4, 8, 16, 32], d => d);\n```\n\nSince a key function was specified (as the identity function), and the new data contains the numbers \\[4, 8, 16\\] which match existing elements in the document, the update selection contains three DIV elements. Leaving those elements as-is, we can append new elements for \\[1, 2, 32\\] using the enter selection:\n\n``` javascript\ndiv.enter().append(\"div\").text(d => d);\n```\n\nLikewise, to remove the exiting elements \\[15, 23, 42\\]:\n\n``` javascript\ndiv.exit().remove();\n```\n\nNow the document body looks like this:\n\n``` markup\n<div>1</div>\n<div>2</div>\n<div>4</div>\n<div>8</div>\n<div>16</div>\n<div>32</div>\n```\n\nThe order of the DOM elements matches the order of the data because the old data’s order and the new data’s order were consistent. If the new data’s order is different, use [*selection*.order](#selection_order) to reorder the elements in the DOM. See the [General Update Pattern](http://bl.ocks.org/mbostock/3808218) example thread for more on data joins.\n\n###### *selection*.**datum**(\\[*value*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/datum.js)\n\nGets or sets the bound data for each selected element. Unlike [*selection*.data](#selection_data), this method does not compute a join and does not affect indexes or the enter and exit selections.\n\nIf a *value* is specified, sets the element’s bound data to the specified value on all selected elements. If the *value* is a constant, all elements are given the same datum; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). The function is then used to set each element’s new data. A null value will delete the bound data.\n\nIf a *value* is not specified, returns the bound datum for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.\n\nThis method is useful for accessing HTML5 [custom data attributes](http://www.w3.org/TR/html5/dom.html#custom-data-attribute). For example, given the following elements:\n\n``` markup\n<ul id=\"list\">\n  <li data-username=\"shawnbot\">Shawn Allen</li>\n  <li data-username=\"mbostock\">Mike Bostock</li>\n</ul>\n```\n\nYou can expose the custom data attributes by setting each element’s data as the built-in [dataset](http://www.w3.org/TR/html5/dom.html#dom-dataset) property:\n\n``` javascript\nselection.datum(function() { return this.dataset; })\n```\n\n### Handling Events\n\nFor interaction, selections allow listening for and dispatching of events.\n\n###### *selection*.**on**(*typenames*\\[, *listener*\\[, *options*\\]\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/on.js)\n\nAdds or removes a *listener* to each selected element for the specified event *typenames*. The *typenames* is a string event type, such as `click`, `mouseover`, or `submit`; any [DOM event type](https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events) supported by your browser may be used. The type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `click.foo` and `click.bar`. To specify multiple typenames, separate typenames with spaces, such as `input change` or `click.foo click.bar`.\n\nWhen a specified event is dispatched on a selected element, the specified *listener* will be evaluated for the element, being passed the current event (*event*) and the current datum (*d*), with *this* as the current DOM element (*event*.currentTarget). Listeners always see the latest datum for their element. Note: while you can use [*event*.pageX](https://developer.mozilla.org/en/DOM/event.pageX) and [*event*.pageY](https://developer.mozilla.org/en/DOM/event.pageY) directly, it is often convenient to transform the event position to the local coordinate system of the element that received the event using [d3.pointer](#pointer).\n\nIf an event listener was previously registered for the same *typename* on a selected element, the old listener is removed before the new listener is added. To remove a listener, pass null as the *listener*. To remove all listeners for a given name, pass null as the *listener* and `.foo` as the *typename*, where `foo` is the name; to remove all listeners with no name, specify `.` as the *typename*.\n\nAn optional *options* object may specify characteristics about the event listener, such as whether it is capturing or passive; see [*element*.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).\n\nIf a *listener* is not specified, returns the currently-assigned listener for the specified event *typename* on the first (non-null) selected element, if any. If multiple typenames are specified, the first matching listener is returned.\n\n###### *selection*.**dispatch**(*type*\\[, *parameters*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/dispatch.js)\n\nDispatches a [custom event](http://www.w3.org/TR/dom/#interface-customevent) of the specified *type* to each selected element, in order. An optional *parameters* map may be specified to set additional properties of the event. It may contain the following fields:\n\n- [`bubbles`](https://www.w3.org/TR/dom/#dom-event-bubbles) - if true, the event is dispatched to ancestors in reverse tree order.\n- [`cancelable`](https://www.w3.org/TR/dom/#dom-event-cancelable) - if true, *event*.preventDefault is allowed.\n- [`detail`](https://www.w3.org/TR/dom/#dom-customevent-detail) - any custom data associated with the event.\n\nIf *parameters* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). It must return the parameters map for the current element.\n\n###### d3.**pointer**(*event*\\[, *target*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/pointer.js)\n\nReturns a two-element array of numbers \\[*x*, *y*\\] representing the coordinates of the specified *event* relative to the specified *target*. *event* can be a [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent), a [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent), a [Touch](https://www.w3.org/TR/touch-events/#touch-interface), or a custom event holding a UIEvent as *event*.sourceEvent.\n\nIf *target* is not specified, it defaults to the source event’s currentTarget property, if available. If the *target* is an SVG element, the event’s coordinates are transformed using the [inverse](https://www.w3.org/TR/geometry-1/#dom-dommatrixreadonly-inverse) of the [screen coordinate transformation matrix](https://www.w3.org/TR/SVG/types.html#__svg__SVGGraphicsElement__getScreenCTM). If the *target* is an HTML element, the event’s coordinates are translated relative to the top-left corner of the *target*’s [bounding client rectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). (As such, the coordinate system can only be translated relative to the client coordinates. See also [GeometryUtils](https://www.w3.org/TR/cssom-view-1/#the-geometryutils-interface).) Otherwise, \\[*event*.pageX, *event*.pageY\\] is returned.\n\n###### d3.**pointers**(*event*\\[, *target*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/pointers.js)\n\nReturns an array \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]…\\] of coordinates of the specified *event*’s pointer locations relative to the specified *target*. For touch events, the returned array of positions corresponds to the *event*.touches array; for other events, returns a single-element array.\n\nIf *target* is not specified, it defaults to the source event’s currentTarget property, if any.\n\n### Control Flow\n\nFor advanced usage, selections provide methods for custom control flow.\n\n###### *selection*.**each**(*function*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/each.js)\n\nInvokes the specified *function* for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\\[*i*\\]). This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously, such as:\n\n``` javascript\nparent.each(function(p, j) {\n  d3.select(this)\n    .selectAll(\".child\")\n      .text(d => `child ${d.name} of ${p.name}`);\n});\n```\n\nSee [Sized Donut Multiples](http://bl.ocks.org/mbostock/4c5fad723c87d2fd8273) for an example.\n\n###### *selection*.**call**(*function*\\[, *arguments…*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/call.js)\n\nInvokes the specified *function* exactly once, passing in this selection along with any optional *arguments*. Returns this selection. This is equivalent to invoking the function by hand but facilitates method chaining. For example, to set several styles in a reusable function:\n\n``` javascript\nfunction name(selection, first, last) {\n  selection\n      .attr(\"first-name\", first)\n      .attr(\"last-name\", last);\n}\n```\n\nNow say:\n\n``` javascript\nd3.selectAll(\"div\").call(name, \"John\", \"Snow\");\n```\n\nThis is roughly equivalent to:\n\n``` javascript\nname(d3.selectAll(\"div\"), \"John\", \"Snow\");\n```\n\nThe only difference is that *selection*.call always returns the *selection* and not the return value of the called *function*, `name`.\n\n###### *selection*.**empty**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/empty.js)\n\nReturns true if this selection contains no (non-null) elements.\n\n###### *selection*.**nodes**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/nodes.js)\n\nReturns an array of all (non-null) elements in this selection. Equivalent to:\n\n``` javascript\nconst elements = Array.from(selection);\n```\n\nSee also [*selection*\\[Symbol.iterator\\]](#selection_iterator).\n\n###### *selection*.**node**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/node.js)\n\nReturns the first (non-null) element in this selection. If the selection is empty, returns null.\n\n###### *selection*.**size**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/size.js)\n\nReturns the total number of (non-null) elements in this selection.\n\n###### *selection*\\[**Symbol.iterator**\\]() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/iterator.js)\n\nReturns an iterator over the selected (non-null) elements. For example, to iterate over the selected elements:\n\n``` javascript\nfor (const element of selection) {\n  console.log(element);\n}\n```\n\nTo flatten the selection to an array:\n\n``` javascript\nconst elements = [...selection];\n```\n\n### Local Variables\n\nD3 locals allow you to define local state independent of data. For instance, when rendering [small multiples](http://bl.ocks.org/mbostock/e1192fe405703d8321a5187350910e08) of time-series data, you might want the same *x*-scale for all charts but distinct *y*-scales to compare the relative performance of each metric. D3 locals are scoped by DOM elements: on set, the value is stored on the given element; on get, the value is retrieved from given element or the nearest ancestor that defines it.\n\n###### d3.**local**() · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)\n\nDeclares a new local variable. For example:\n\n``` javascript\nconst foo = d3.local();\n```\n\nLike `var`, each local is a distinct symbolic reference; unlike `var`, the value of each local is also scoped by the DOM.\n\n###### *local*.**set**(*node*, *value*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)\n\nSets the value of this local on the specified *node* to the *value*, and returns the specified *value*. This is often performed using [*selection*.each](#selection_each):\n\n``` javascript\nselection.each(function(d) { foo.set(this, d.value); });\n```\n\nIf you are just setting a single variable, consider using [*selection*.property](#selection_property):\n\n``` javascript\nselection.property(foo, d => d.value);\n```\n\n###### *local*.**get**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)\n\nReturns the value of this local on the specified *node*. If the *node* does not define this local, returns the value from the nearest ancestor that defines it. Returns undefined if no ancestor defines this local.\n\n###### *local*.**remove**(*node*) · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)\n\nDeletes this local’s value from the specified *node*. Returns true if the *node* defined this local prior to removal, and false otherwise. If ancestors also define this local, those definitions are unaffected, and thus [*local*.get](#local_get) will still return the inherited value.\n\n###### *local*.**toString**() · [Source](https://github.com/d3/d3-selection/blob/master/src/local.js)\n\nReturns the automatically-generated identifier for this local. This is the name of the property that is used to store the local’s value on elements, and thus you can also set or get the local’s value using *element*\\[*local*\\] or by using [*selection*.property](#selection_property).\n\n### Namespaces\n\nXML namespaces are fun! Right? Fortunately you can mostly ignore them.\n\n###### d3.**namespace**(*name*) · [Source](https://github.com/d3/d3-selection/blob/master/src/namespace.js)\n\nQualifies the specified *name*, which may or may not have a namespace prefix. If the name contains a colon (`:`), the substring before the colon is interpreted as the namespace prefix, which must be registered in [d3.namespaces](#namespaces). Returns an object `space` and `local` attributes describing the full namespace URL and the local name. For example:\n\n``` javascript\nd3.namespace(\"svg:text\"); // {space: \"http://www.w3.org/2000/svg\", local: \"text\"}\n```\n\nIf the name does not contain a colon, this function merely returns the input name.\n\n###### d3.**namespaces** · [Source](https://github.com/d3/d3-selection/blob/master/src/namespaces.js)\n\nThe map of registered namespace prefixes. The initial value is:\n\n``` javascript\n{\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: \"http://www.w3.org/1999/xhtml\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n}\n```\n\nAdditional prefixes may be assigned as needed to create elements or attributes in other namespaces.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-selection](https://github.com/d3/d3-selection)"
- name: selection()
  id: d3-selection#selection_iterator
  summary: Returns an iterator over the selected (non-null) elements
  belongs_to: selection
  description: |-
    ###### *selection*\[**Symbol.iterator**\]() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/iterator.js)

    Returns an iterator over the selected (non-null) elements. For example, to iterate over the selected elements:

    ``` javascript
    for (const element of selection) {
      console.log(element);
    }
    ```

    To flatten the selection to an array:

    ``` javascript
    const elements = [...selection];
    ```

    ### Local Variables

    D3 locals allow you to define local state independent of data. For instance, when rendering [small multiples](http://bl.ocks.org/mbostock/e1192fe405703d8321a5187350910e08) of time-series data, you might want the same *x*-scale for all charts but distinct *y*-scales to compare the relative performance of each metric. D3 locals are scoped by DOM elements: on set, the value is stored on the given element; on get, the value is retrieved from given element or the nearest ancestor that defines it.
- name: selection-multi
  id: d3-selection-multi
  summary: This module adds multi-value syntax to selections and transitions, allowing you to set multiple attributes, styles or properties simultaneously with more concise syntax
  description: "# d3-selection-multi\n\nThis module adds multi-value syntax to [selections](d3-selection) and [transitions](d3-transition), allowing you to set multiple attributes, styles or properties simultaneously with more concise syntax. For example:\n\n``` javascript\nd3.select(\"body\").append(\"div\")\n    .attrs({\n      title: \"A cheery, timeless greeting.\",\n      class: \"greeting\"\n    })\n    .text(\"Hello, world!\");\n```\n\nThis is equivalent to:\n\n``` javascript\nd3.select(\"body\").append(\"div\")\n    .attr(\"title\", \"A cheery, timeless greeting.\")\n    .attr(\"class\", \"greeting\")\n    .text(\"Hello, world!\");\n```\n\nLike [*selection*.attr](d3-selection#selection_attr), the values in the multi-value object can be functions of data:\n\n``` javascript\nd3.select(\"body\").append(\"div\")\n    .attrs({\n      title: function(d) { return d.title; },\n      id: function(d, i) { return \"id-\" + i; },\n    });\n```\n\nAlternatively, you can pass a function which returns an object, allowing you to share some computational effort across multiple attributes, or to determine which attribute to set dynamically:\n\n``` javascript\nd3.select(\"body\").append(\"div\")\n    .attrs(function(d, i) { return {title: d.title, id: \"id-\" + i}; });\n```\n\nThis module is not included in the [default D3 bundle](https://github.com/d3/d3) for parsimony’s sake: the single-value methods such as [*selection*.attr](d3-selection#selection_attr) are recommended for most users, as there is little benefit to the shorter syntax provided by these convenience method.\n\n## Installing\n\nIf you use NPM, `npm install d3-selection-multi`. Otherwise, download the [latest release](https://github.com/d3/d3-selection-multi/releases/latest) or load directly from [d3js.org](https://d3js.org) as a [standalone library](https://d3js.org/d3-selection-multi.v1.min.js). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-color.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-dispatch.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-ease.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-interpolate.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-timer.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-transition.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection-multi.v1.min.js\"></script>\n<script>\n\nvar div = d3.selectAll(\"div\")\n    .attrs({title: \"Hello, world!\"})\n    .styles({\"color\": \"red\"});\n\n</script>\n```\n\nOr, in combination with the [D3 default bundle](https://github.com/d3/d3):\n\n``` markup\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection-multi.v1.min.js\"></script>\n<script>\n\nvar div = d3.selectAll(\"div\")\n    .attrs({title: \"Hello, world!\"})\n    .styles({\"color\": \"red\"});\n\n</script>\n```\n\n[Try d3-selection-multi in your browser.](https://tonicdev.com/npm/d3-selection-multi)\n\n## API Reference\n\n###### *selection*.**attrs**(*values*)\n\nA convenience method on top of [*selection*.attr](d3-selection#selection_attr) for setting multiple attributes. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n``` javascript\nselection.attrs({foo: \"foo-value\", bar: function(d) { return d.bar; }});\n```\n\nIf a value is a constant, all elements are given the same attribute value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set attributes on the current element. For example:\n\n``` javascript\nselection.attrs(function(d) { return {foo: \"foo-value\", bar: d.bar}; });\n```\n\nPassing a function to *selection*.attrs is convenient for sharing some computational effort or state across multiple attributes, or for specifying dynamically which attributes to set.\n\n###### *selection*.**styles**(*values*\\[, *priority*\\])\n\nA convenience method on top of [*selection*.style](d3-selection#selection_style) for setting multiple style properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n``` javascript\nselection.styles({fill: \"red\", stroke: function(d) { return d.stroke; }});\n```\n\nIf a value is a constant, all elements are given the same style property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s style properties. A null value will remove the specified style properties.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set style properties on the current element. For example:\n\n``` javascript\nselection.styles(function(d) { return {fill: \"red\", stroke: d.stroke}; });\n```\n\nPassing a function to *selection*.styles is convenient for sharing some computational effort or state across multiple style properties, or for specifying dynamically which style properties to set.\n\n###### *selection*.**properties**(*values*)\n\nA convenience method on top of [*selection*.property](d3-selection#selection_property) for setting multiple element properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n``` javascript\nselection.properties({foo: \"foo-value\", id: function(d, i) { return \"id-\" + i; }});\n```\n\nIf a value is a constant, all elements are given the same property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s properties. A null value will remove the specified properties.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set properties on the current element. For example:\n\n``` javascript\nselection.properties(function(d, i) { return {foo: \"foo-value\", id: \"id-\" + i}; });\n```\n\nPassing a function to *selection*.properties is convenient for sharing some computational effort or state across multiple properties, or for specifying dynamically which properties to set.\n\n###### *transition*.**attrs**(*values*)\n\nLike [*selection*.attrs](#selection_attrs), but for [*transition*.attr](d3-transition#transition_attr).\n\n###### *transition*.**styles**(*values*\\[, *priority*\\])\n\nLike [*selection*.styles](#selection_styles), but for [*transition*.style](d3-transition#transition_style).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-selection-multi](https://github.com/d3/d3-selection-multi)"
- name: selection.append()
  id: d3-selection#selection_append
  summary: If the specified type is a string, appends a new element of this type (tag name) as the last child of each selected element, or before the next following sibling in the update selection if this is an enter selection
  belongs_to: selection
  description: |-
    ###### *selection*.**append**(*type*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/append.js)

    If the specified *type* is a string, appends a new element of this type (tag name) as the last child of each selected element, or before the next following sibling in the update selection if this is an [enter selection](#selection_enter). The latter behavior for enter selections allows you to insert elements into the DOM in an order consistent with the new bound data; however, note that [*selection*.order](#selection_order) may still be required if updating elements change order (*i.e.*, if the order of new data is inconsistent with old data).

    If the specified *type* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). This function should return an element to be appended. (The function typically creates a new element, but it may instead return an existing element.) For example, to append a paragraph to each DIV element:

    ``` javascript
    d3.selectAll("div").append("p");
    ```

    This is equivalent to:

    ``` javascript
    d3.selectAll("div").append(() => document.createElement("p"));
    ```

    Which is equivalent to:

    ``` javascript
    d3.selectAll("div").select(function() {
      return this.appendChild(document.createElement("p"));
    });
    ```

    In both cases, this method returns a new selection containing the appended elements. Each new element inherits the data of the current elements, if any, in the same manner as [*selection*.select](#selection_select).

    The specified *name* may have a namespace prefix, such as `svg:text` to specify a `text` attribute in the SVG namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map. If no namespace is specified, the namespace will be inherited from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, `svg` implies `svg:svg`).
- name: selection.attr()
  id: d3-selection#selection_attr
  summary: If a value is specified, sets the attribute with the specified name to the specified value on the selected elements and returns this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**attr**(*name*\[, *value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/attr.js)

    If a *value* is specified, sets the attribute with the specified *name* to the specified value on the selected elements and returns this selection. If the *value* is a constant, all elements are given the same attribute value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.

    If a *value* is not specified, returns the current value of the specified attribute for the first (non-null) element in the selection. This is generally useful only if you know that the selection contains exactly one element.

    The specified *name* may have a namespace prefix, such as `xlink:href` to specify the `href` attribute in the XLink namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map.
- name: selection.attrs()
  id: d3-selection-multi#selection_attrs
  summary: A convenience method on top of selection.attr for setting multiple attributes
  belongs_to: selection-multi
  description: |-
    ###### *selection*.**attrs**(*values*)

    A convenience method on top of [*selection*.attr](d3-selection#selection_attr) for setting multiple attributes. If the specified *values* is an object, the values may be specified either as strings or functions. For example:

    ``` javascript
    selection.attrs({foo: "foo-value", bar: function(d) { return d.bar; }});
    ```

    If a value is a constant, all elements are given the same attribute value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.

    If the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set attributes on the current element. For example:

    ``` javascript
    selection.attrs(function(d) { return {foo: "foo-value", bar: d.bar}; });
    ```

    Passing a function to *selection*.attrs is convenient for sharing some computational effort or state across multiple attributes, or for specifying dynamically which attributes to set.
- name: selection.call()
  id: d3-selection#selection_call
  summary: Invokes the specified function exactly once, passing in this selection along with any optional arguments
  belongs_to: selection
  description: |-
    ###### *selection*.**call**(*function*\[, *arguments…*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/call.js)

    Invokes the specified *function* exactly once, passing in this selection along with any optional *arguments*. Returns this selection. This is equivalent to invoking the function by hand but facilitates method chaining. For example, to set several styles in a reusable function:

    ``` javascript
    function name(selection, first, last) {
      selection
          .attr("first-name", first)
          .attr("last-name", last);
    }
    ```

    Now say:

    ``` javascript
    d3.selectAll("div").call(name, "John", "Snow");
    ```

    This is roughly equivalent to:

    ``` javascript
    name(d3.selectAll("div"), "John", "Snow");
    ```

    The only difference is that *selection*.call always returns the *selection* and not the return value of the called *function*, `name`.
- name: selection.classed()
  id: d3-selection#selection_classed
  summary: If a value is specified, assigns or unassigns the specified CSS class names on the selected elements by setting the class attribute or modifying the classList property and returns this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**classed**(*names*\[, *value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/classed.js)

    If a *value* is specified, assigns or unassigns the specified CSS class *names* on the selected elements by setting the `class` attribute or modifying the `classList` property and returns this selection. The specified *names* is a string of space-separated class names. For example, to assign the classes `foo` and `bar` to the selected elements:

    ``` javascript
    selection.classed("foo bar", true);
    ```

    If the *value* is truthy, then all elements are assigned the specified classes; otherwise, the classes are unassigned. If the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to assign or unassign classes on each element. For example, to randomly associate the class *foo* with on average half the selected elements:

    ``` javascript
    selection.classed("foo", () => Math.random() > 0.5);
    ```

    If a *value* is not specified, returns true if and only if the first (non-null) selected element has the specified *classes*. This is generally useful only if you know the selection contains exactly one element.
- name: selection.clone()
  id: d3-selection#selection_clone
  summary: Inserts clones of the selected elements immediately following the selected elements and returns a selection of the newly added clones
  belongs_to: selection
  description: |-
    ###### *selection*.**clone**(\[*deep*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/clone.js)

    Inserts clones of the selected elements immediately following the selected elements and returns a selection of the newly added clones. If *deep* is truthy, the descendant nodes of the selected elements will be cloned as well. Otherwise, only the elements themselves will be cloned. Equivalent to:

    ``` javascript
    selection.select(function() {
      return this.parentNode.insertBefore(this.cloneNode(deep), this.nextSibling);
    });
    ```
- name: selection.data()
  id: d3-selection#selection_data
  summary: 'Binds the specified array of data with the selected elements, returning a new selection that represents the update selection: the elements successfully bound to data'
  belongs_to: selection
  description: |-
    ###### *selection*.**data**(\[*data*\[, *key*\]\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/data.js), [Examples](https://observablehq.com/@d3/brushable-scatterplot)

    Binds the specified array of *data* with the selected elements, returning a new selection that represents the *update* selection: the elements successfully bound to data. Also defines the [enter](#selection_enter) and [exit](#selection_exit) selections on the returned selection, which can be used to add or remove elements to correspond to the new data. The specified *data* is an array of arbitrary values (*e.g.*, numbers or objects), or a function that returns an array of values for each group. When data is assigned to an element, it is stored in the property `__data__`, thus making the data “sticky” and available on re-selection.

    The *data* is specified **for each group** in the selection. If the selection has multiple groups (such as [d3.selectAll](#selectAll) followed by [*selection*.selectAll](#selection_selectAll)), then *data* should typically be specified as a function. This function will be evaluated for each group in order, being passed the group’s parent datum (*d*, which may be undefined), the group index (*i*), and the selection’s parent nodes (*nodes*), with *this* as the group’s parent element.

    In conjunction with [*selection*.join](#selection_join) (or more explicitly with [*selection*.enter](#selection_enter), [*selection*.exit](#selection_exit), [*selection*.append](#selection_append) and [*selection*.remove](#selection_remove)), *selection*.data can be used to enter, update and exit elements to match data. For example, to create an HTML table from a matrix of numbers:

    ``` javascript
    const matrix = [
      [11975,  5871, 8916, 2868],
      [ 1951, 10048, 2060, 6171],
      [ 8010, 16145, 8090, 8045],
      [ 1013,   990,  940, 6907]
    ];

    d3.select("body")
      .append("table")
      .selectAll("tr")
      .data(matrix)
      .join("tr")
      .selectAll("td")
      .data(d => d)
      .join("td")
        .text(d => d);
    ```

    In this example the *data* function is the identity function: for each table row, it returns the corresponding row from the data matrix.

    If a *key* function is not specified, then the first datum in *data* is assigned to the first selected element, the second datum to the second selected element, and so on. A *key* function may be specified to control which datum is assigned to which element, replacing the default join-by-index, by computing a string identifier for each datum and element. This key function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]); the returned string is the element’s key. The key function is then also evaluated for each new datum in *data*, being passed the current datum (*d*), the current index (*i*), and the group’s new *data*, with *this* as the group’s parent DOM element; the returned string is the datum’s key. The datum for a given key is assigned to the element with the matching key. If multiple elements have the same key, the duplicate elements are put into the exit selection; if multiple data have the same key, the duplicate data are put into the enter selection.

    For example, given this document:

    ``` markup
    <div id="Ford"></div>
    <div id="Jarrah"></div>
    <div id="Kwon"></div>
    <div id="Locke"></div>
    <div id="Reyes"></div>
    <div id="Shephard"></div>
    ```

    You could join data by key as follows:

    ``` javascript
    const data = [
      {name: "Locke", number: 4},
      {name: "Reyes", number: 8},
      {name: "Ford", number: 15},
      {name: "Jarrah", number: 16},
      {name: "Shephard", number: 23},
      {name: "Kwon", number: 42}
    ];

    d3.selectAll("div")
      .data(data, function(d) { return d ? d.name : this.id; })
        .text(d => d.number);
    ```

    This example key function uses the datum *d* if present, and otherwise falls back to the element’s id property. Since these elements were not previously bound to data, the datum *d* is null when the key function is evaluated on selected elements, and non-null when the key function is evaluated on the new data.

    The *update* and *enter* selections are returned in data order, while the *exit* selection preserves the selection order prior to the join. If a key function is specified, the order of elements in the selection may not match their order in the document; use [*selection*.order](#selection_order) or [*selection*.sort](#selection_sort) as needed. For more on how the key function affects the join, see [A Bar Chart, Part 2](http://bost.ocks.org/mike/bar/2/) and [Object Constancy](http://bost.ocks.org/mike/constancy/).

    If *data* is not specified, this method returns the array of data for the selected elements.

    This method cannot be used to clear bound data; use [*selection*.datum](#selection_datum) instead.
- name: selection.datum()
  id: d3-selection#selection_datum
  summary: Gets or sets the bound data for each selected element
  belongs_to: selection
  description: |-
    ###### *selection*.**datum**(\[*value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/datum.js)

    Gets or sets the bound data for each selected element. Unlike [*selection*.data](#selection_data), this method does not compute a join and does not affect indexes or the enter and exit selections.

    If a *value* is specified, sets the element’s bound data to the specified value on all selected elements. If the *value* is a constant, all elements are given the same datum; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function is then used to set each element’s new data. A null value will delete the bound data.

    If a *value* is not specified, returns the bound datum for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.

    This method is useful for accessing HTML5 [custom data attributes](http://www.w3.org/TR/html5/dom.html#custom-data-attribute). For example, given the following elements:

    ``` markup
    <ul id="list">
      <li data-username="shawnbot">Shawn Allen</li>
      <li data-username="mbostock">Mike Bostock</li>
    </ul>
    ```

    You can expose the custom data attributes by setting each element’s data as the built-in [dataset](http://www.w3.org/TR/html5/dom.html#dom-dataset) property:

    ``` javascript
    selection.datum(function() { return this.dataset; })
    ```

    ### Handling Events

    For interaction, selections allow listening for and dispatching of events.
- name: selection.dispatch()
  id: d3-selection#selection_dispatch
  summary: Dispatches a custom event of the specified type to each selected element, in order
  belongs_to: selection
  description: |-
    ###### *selection*.**dispatch**(*type*\[, *parameters*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/dispatch.js)

    Dispatches a [custom event](http://www.w3.org/TR/dom/#interface-customevent) of the specified *type* to each selected element, in order. An optional *parameters* map may be specified to set additional properties of the event. It may contain the following fields:

    - [`bubbles`](https://www.w3.org/TR/dom/#dom-event-bubbles) - if true, the event is dispatched to ancestors in reverse tree order.
    - [`cancelable`](https://www.w3.org/TR/dom/#dom-event-cancelable) - if true, *event*.preventDefault is allowed.
    - [`detail`](https://www.w3.org/TR/dom/#dom-customevent-detail) - any custom data associated with the event.

    If *parameters* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). It must return the parameters map for the current element.
- name: selection.each()
  id: d3-selection#selection_each
  summary: Invokes the specified function for each selected element, in order, being passed the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element (nodes[i])
  belongs_to: selection
  description: |-
    ###### *selection*.**each**(*function*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/each.js)

    Invokes the specified *function* for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously, such as:

    ``` javascript
    parent.each(function(p, j) {
      d3.select(this)
        .selectAll(".child")
          .text(d => `child ${d.name} of ${p.name}`);
    });
    ```

    See [Sized Donut Multiples](http://bl.ocks.org/mbostock/4c5fad723c87d2fd8273) for an example.
- name: selection.empty()
  id: d3-selection#selection_empty
  summary: Returns true if this selection contains no (non-null) elements
  belongs_to: selection
  description: |-
    ###### *selection*.**empty**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/empty.js)

    Returns true if this selection contains no (non-null) elements.
- name: selection.enter()
  id: d3-selection#selection_enter
  summary: 'Returns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection'
  belongs_to: selection
  description: |-
    ###### *selection*.**enter**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/enter.js)

    Returns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection. (The enter selection is empty for selections not returned by [*selection*.data](#selection_data).)

    The enter selection is typically used to create “missing” elements corresponding to new data. For example, to create DIV elements from an array of numbers:

    ``` javascript
    const div = d3.select("body")
      .selectAll("div")
      .data([4, 8, 15, 16, 23, 42])
      .enter().append("div")
        .text(d => d);
    ```

    If the body is initially empty, the above code will create six new DIV elements, append them to the body in-order, and assign their text content as the associated (string-coerced) number:

    ``` markup
    <div>4</div>
    <div>8</div>
    <div>15</div>
    <div>16</div>
    <div>23</div>
    <div>42</div>
    ```

    Conceptually, the enter selection’s placeholders are pointers to the parent element (in this example, the document body). The enter selection is typically only used transiently to append elements, and is often [merged](#selection_merge) with the update selection after appending, such that modifications can be applied to both entering and updating elements.
- name: selection.exit()
  id: d3-selection#selection_exit
  summary: 'Returns the exit selection: existing DOM elements in the selection for which no new datum was found'
  belongs_to: selection
  description: |-
    ###### *selection*.**exit**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/exit.js)

    Returns the exit selection: existing DOM elements in the selection for which no new datum was found. (The exit selection is empty for selections not returned by [*selection*.data](#selection_data).)

    The exit selection is typically used to remove “superfluous” elements corresponding to old data. For example, to update the DIV elements created previously with a new array of numbers:

    ``` javascript
    div = div.data([1, 2, 4, 8, 16, 32], d => d);
    ```

    Since a key function was specified (as the identity function), and the new data contains the numbers \[4, 8, 16\] which match existing elements in the document, the update selection contains three DIV elements. Leaving those elements as-is, we can append new elements for \[1, 2, 32\] using the enter selection:

    ``` javascript
    div.enter().append("div").text(d => d);
    ```

    Likewise, to remove the exiting elements \[15, 23, 42\]:

    ``` javascript
    div.exit().remove();
    ```

    Now the document body looks like this:

    ``` markup
    <div>1</div>
    <div>2</div>
    <div>4</div>
    <div>8</div>
    <div>16</div>
    <div>32</div>
    ```

    The order of the DOM elements matches the order of the data because the old data’s order and the new data’s order were consistent. If the new data’s order is different, use [*selection*.order](#selection_order) to reorder the elements in the DOM. See the [General Update Pattern](http://bl.ocks.org/mbostock/3808218) example thread for more on data joins.
- name: selection.filter()
  id: d3-selection#selection_filter
  summary: Filters the selection, returning a new selection that contains only the elements for which the specified filter is true
  belongs_to: selection
  description: |-
    ###### *selection*.**filter**(*filter*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/filter.js)

    Filters the selection, returning a new selection that contains only the elements for which the specified *filter* is true. The *filter* may be specified either as a selector string or a function. If the *filter* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]).

    For example, to filter a selection of table rows to contain only even rows:

    ``` javascript
    const even = d3.selectAll("tr").filter(":nth-child(even)");
    ```

    This is approximately equivalent to using [d3.selectAll](#selectAll) directly, although the indexes may be different:

    ``` javascript
    const even = d3.selectAll("tr:nth-child(even)");
    ```

    Similarly, using a function:

    ``` javascript
    const even = d3.selectAll("tr").filter((d, i) => i & 1);
    ```

    Or using [*selection*.select](#selection_select) (and avoiding an arrow function, since *this* is needed to refer to the current element):

    ``` javascript
    const even = d3.selectAll("tr").select(function(d, i) { return i & 1 ? this : null; });
    ```

    Note that the `:nth-child` pseudo-class is a one-based index rather than a zero-based index. Also, the above filter functions do not have precisely the same meaning as `:nth-child`; they rely on the selection index rather than the number of preceding sibling elements in the DOM.

    The returned filtered selection preserves the parents of this selection, but like [*array*.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), it does not preserve indexes as some elements may be removed; use [*selection*.select](#selection_select) to preserve the index, if needed.
- name: selection.html()
  id: d3-selection#selection_html
  summary: If a value is specified, sets the inner HTML to the specified value on all selected elements, replacing any existing child elements
  belongs_to: selection
  description: |-
    ###### *selection*.**html**(\[*value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/html.js)

    If a *value* is specified, sets the [inner HTML](http://dev.w3.org/html5/spec-LC/apis-in-html-documents.html#innerhtml) to the specified value on all selected elements, replacing any existing child elements. If the *value* is a constant, then all elements are given the same inner HTML; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to set each element’s inner HTML. A null value will clear the content.

    If a *value* is not specified, returns the inner HTML for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.

    Use [*selection*.append](#selection_append) or [*selection*.insert](#selection_insert) instead to create data-driven content; this method is intended for when you want a little bit of HTML, say for rich formatting. Also, *selection*.html is only supported on HTML elements. SVG elements and other non-HTML elements do not support the innerHTML property, and thus are incompatible with *selection*.html. Consider using [XMLSerializer](https://developer.mozilla.org/en-US/docs/XMLSerializer) to convert a DOM subtree to text. See also the [innersvg polyfill](https://code.google.com/p/innersvg/), which provides a shim to support the innerHTML property on SVG elements.
- name: selection.insert()
  id: d3-selection#selection_insert
  summary: If the specified type is a string, inserts a new element of this type (tag name) before the first element matching the specified before selector for each selected element
  belongs_to: selection
  description: |-
    ###### *selection*.**insert**(*type*\[, *before*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/insert.js)

    If the specified *type* is a string, inserts a new element of this type (tag name) before the first element matching the specified *before* selector for each selected element. For example, a *before* selector `:first-child` will prepend nodes before the first child. If *before* is not specified, it defaults to null. (To append elements in an order consistent with [bound data](#joining-data), use [*selection*.append](#selection_append).)

    Both *type* and *before* may instead be specified as functions which are evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The *type* function should return an element to be inserted; the *before* function should return the child element before which the element should be inserted. For example, to append a paragraph to each DIV element:

    ``` javascript
    d3.selectAll("div").insert("p");
    ```

    This is equivalent to:

    ``` javascript
    d3.selectAll("div").insert(() => document.createElement("p"));
    ```

    Which is equivalent to:

    ``` javascript
    d3.selectAll("div").select(function() {
      return this.insertBefore(document.createElement("p"), null);
    });
    ```

    In both cases, this method returns a new selection containing the appended elements. Each new element inherits the data of the current elements, if any, in the same manner as [*selection*.select](#selection_select).

    The specified *name* may have a namespace prefix, such as `svg:text` to specify a `text` attribute in the SVG namespace. See [namespaces](#namespaces) for the map of supported namespaces; additional namespaces can be registered by adding to the map. If no namespace is specified, the namespace will be inherited from the parent element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, `svg` implies `svg:svg`).
- name: selection.interrupt()
  id: d3-transition#selection_interrupt
  summary: Interrupts the active transition of the specified name on the selected elements, and cancels any pending transitions with the specified name, if any
  belongs_to: transition
  description: |-
    ###### *selection*.**interrupt**(\[*name*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/selection/interrupt.js)

    Interrupts the active transition of the specified *name* on the selected elements, and cancels any pending transitions with the specified *name*, if any. If a name is not specified, null is used.

    Interrupting a transition on an element has no effect on any transitions on any descendant elements. For example, an [axis transition](d3-axis) consists of multiple independent, synchronized transitions on the descendants of the axis [G element](https://www.w3.org/TR/SVG/struct.html#Groups) (the tick lines, the tick labels, the domain path, *etc.*). To interrupt the axis transition, you must therefore interrupt the descendants:

    ``` javascript
    selection.selectAll("*").interrupt();
    ```

    The [universal selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors), `*`, selects all descendant elements. If you also want to interrupt the G element itself:

    ``` javascript
    selection.interrupt().selectAll("*").interrupt();
    ```
- name: selection.join()
  id: d3-selection#selection_join
  summary: Appends, removes and reorders elements as necessary to match the data that was previously bound by selection.data, returning the merged enter and update selection
  belongs_to: selection
  description: |-
    ###### *selection*.**join**(*enter*\[, *update*\]\[, *exit*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/join.js)

    Appends, removes and reorders elements as necessary to match the data that was previously bound by [*selection*.data](#selection_data), returning the [merged](#selection_merge) enter and update selection. This method is a convenient alternative to the explicit [general update pattern](https://bl.ocks.org/mbostock/3808218), replacing [*selection*.enter](#selection_enter), [*selection*.exit](#selection_exit), [*selection*.append](#selection_append), [*selection*.remove](#selection_remove), and [*selection*.order](#selection_order). For example:

    ``` javascript
    svg.selectAll("circle")
      .data(data)
      .join("circle")
        .attr("fill", "none")
        .attr("stroke", "black");
    ```

    The *enter* function may be specified as a string shorthand, as above, which is equivalent to [*selection*.append](#selection_append) with the given element name. Likewise, optional *update* and *exit* functions may be specified, which default to the identity function and calling [*selection*.remove](#selection_remove), respectively. The shorthand above is thus equivalent to:

    ``` javascript
    svg.selectAll("circle")
      .data(data)
      .join(
        enter => enter.append("circle"),
        update => update,
        exit => exit.remove()
      )
        .attr("fill", "none")
        .attr("stroke", "black");
    ```

    By passing separate functions on enter, update and exit, you have greater control over what happens. And by specifying a key function to [*selection*.data](#selection_data), you can minimize changes to the DOM to optimize performance. For example, to set different fill colors for enter and update:

    ``` javascript
    svg.selectAll("circle")
      .data(data)
      .join(
        enter => enter.append("circle").attr("fill", "green"),
        update => update.attr("fill", "blue")
      )
        .attr("stroke", "black");
    ```

    The selections returned by the *enter* and *update* functions are merged and then returned by *selection*.join.

    You can animate enter, update and exit by creating transitions inside the *enter*, *update* and *exit* functions. If the *enter* and *update* functions return transitions, their underlying selections are merged and then returned by *selection*.join. The return value of the *exit* function is not used.

    For more, see the [*selection*.join notebook](https://observablehq.com/@d3/selection-join).
- name: selection.lower()
  id: d3-selection#selection_lower
  summary: Re-inserts each selected element, in order, as the first child of its parent
  belongs_to: selection
  description: |-
    ###### *selection*.**lower**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/lower.js)

    Re-inserts each selected element, in order, as the first child of its parent. Equivalent to:

    ``` javascript
    selection.each(function() {
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
    });
    ```
- name: selection.merge()
  id: d3-selection#selection_merge
  summary: Returns a new selection merging this selection with the specified other selection or transition
  belongs_to: selection
  description: |-
    ###### *selection*.**merge**(*other*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/merge.js)

    Returns a new selection merging this selection with the specified *other* selection or transition. The returned selection has the same number of groups and the same parents as this selection. Any missing (null) elements in this selection are filled with the corresponding element, if present (not null), from the specified *selection*. (If the *other* selection has additional groups or parents, they are ignored.)

    This method is used internally by [*selection*.join](#selection_join) to merge the [enter](#selection_enter) and [update](#selection_data) selections after [binding data](#joining-data). You can also merge explicitly, although note that since merging is based on element index, you should use operations that preserve index, such as [*selection*.select](#selection_select) instead of [*selection*.filter](#selection_filter). For example:

    ``` javascript
    const odd = selection.select(function(d, i) { return i & 1 ? this : null; ));
    const even = selection.select(function(d, i) { return i & 1 ? null : this; ));
    const merged = odd.merge(even);
    ```

    See [*selection*.data](#selection_data) for more.

    This method is not intended for concatenating arbitrary selections, however: if both this selection and the specified *other* selection have (non-null) elements at the same index, this selection’s element is returned in the merge and the *other* selection’s element is ignored.
- name: selection.node()
  id: d3-selection#selection_node
  summary: Returns the first (non-null) element in this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**node**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/node.js)

    Returns the first (non-null) element in this selection. If the selection is empty, returns null.
- name: selection.nodes()
  id: d3-selection#selection_nodes
  summary: Returns an array of all (non-null) elements in this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**nodes**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/nodes.js)

    Returns an array of all (non-null) elements in this selection. Equivalent to:

    ``` javascript
    const elements = Array.from(selection);
    ```

    See also [*selection*\[Symbol.iterator\]](#selection_iterator).
- name: selection.on()
  id: d3-selection#selection_on
  summary: Adds or removes a listener to each selected element for the specified event typenames
  belongs_to: selection
  description: |-
    ###### *selection*.**on**(*typenames*\[, *listener*\[, *options*\]\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/on.js)

    Adds or removes a *listener* to each selected element for the specified event *typenames*. The *typenames* is a string event type, such as `click`, `mouseover`, or `submit`; any [DOM event type](https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events) supported by your browser may be used. The type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `click.foo` and `click.bar`. To specify multiple typenames, separate typenames with spaces, such as `input change` or `click.foo click.bar`.

    When a specified event is dispatched on a selected element, the specified *listener* will be evaluated for the element, being passed the current event (*event*) and the current datum (*d*), with *this* as the current DOM element (*event*.currentTarget). Listeners always see the latest datum for their element. Note: while you can use [*event*.pageX](https://developer.mozilla.org/en/DOM/event.pageX) and [*event*.pageY](https://developer.mozilla.org/en/DOM/event.pageY) directly, it is often convenient to transform the event position to the local coordinate system of the element that received the event using [d3.pointer](#pointer).

    If an event listener was previously registered for the same *typename* on a selected element, the old listener is removed before the new listener is added. To remove a listener, pass null as the *listener*. To remove all listeners for a given name, pass null as the *listener* and `.foo` as the *typename*, where `foo` is the name; to remove all listeners with no name, specify `.` as the *typename*.

    An optional *options* object may specify characteristics about the event listener, such as whether it is capturing or passive; see [*element*.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).

    If a *listener* is not specified, returns the currently-assigned listener for the specified event *typename* on the first (non-null) selected element, if any. If multiple typenames are specified, the first matching listener is returned.
- name: selection.order()
  id: d3-selection#selection_order
  summary: Re-inserts elements into the document such that the document order of each group matches the selection order
  belongs_to: selection
  description: |-
    ###### *selection*.**order**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/order.js)

    Re-inserts elements into the document such that the document order of each group matches the selection order. This is equivalent to calling [*selection*.sort](#selection_sort) if the data is already sorted, but much faster.
- name: selection.properties()
  id: d3-selection-multi#selection_properties
  summary: A convenience method on top of selection.property for setting multiple element properties
  belongs_to: selection-multi
  description: |-
    ###### *selection*.**properties**(*values*)

    A convenience method on top of [*selection*.property](d3-selection#selection_property) for setting multiple element properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:

    ``` javascript
    selection.properties({foo: "foo-value", id: function(d, i) { return "id-" + i; }});
    ```

    If a value is a constant, all elements are given the same property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s properties. A null value will remove the specified properties.

    If the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set properties on the current element. For example:

    ``` javascript
    selection.properties(function(d, i) { return {foo: "foo-value", id: "id-" + i}; });
    ```

    Passing a function to *selection*.properties is convenient for sharing some computational effort or state across multiple properties, or for specifying dynamically which properties to set.
- name: selection.property()
  id: d3-selection#selection_property
  summary: Some HTML elements have special properties that are not addressable using attributes or styles, such as a form field’s text value and a checkbox’s checked boolean
  belongs_to: selection
  description: |-
    ###### *selection*.**property**(*name*\[, *value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/property.js)

    Some HTML elements have special properties that are not addressable using attributes or styles, such as a form field’s text `value` and a checkbox’s `checked` boolean. Use this method to get or set these properties.

    If a *value* is specified, sets the property with the specified *name* to the specified value on selected elements. If the *value* is a constant, then all elements are given the same property value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to set each element’s property. A null value will delete the specified property.

    If a *value* is not specified, returns the value of the specified property for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.
- name: selection.raise()
  id: d3-selection#selection_raise
  summary: Re-inserts each selected element, in order, as the last child of its parent
  belongs_to: selection
  description: |-
    ###### *selection*.**raise**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/raise.js)

    Re-inserts each selected element, in order, as the last child of its parent. Equivalent to:

    ``` javascript
    selection.each(function() {
      this.parentNode.appendChild(this);
    });
    ```
- name: selection.remove()
  id: d3-selection#selection_remove
  summary: Removes the selected elements from the document
  belongs_to: selection
  description: |-
    ###### *selection*.**remove**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/remove.js)

    Removes the selected elements from the document. Returns this selection (the removed elements) which are now detached from the DOM. There is not currently a dedicated API to add removed elements back to the document; however, you can pass a function to [*selection*.append](#selection_append) or [*selection*.insert](#selection_insert) to re-add elements.
- name: selection.select()
  id: d3-selection#selection_select
  summary: For each selected element, selects the first descendant element that matches the specified selector string
  belongs_to: selection
  description: |-
    ###### *selection*.**select**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/select.js)

    For each selected element, selects the first descendant element that matches the specified *selector* string. If no element matches the specified selector for the current element, the element at the current index will be null in the returned selection. (If the *selector* is null, every element in the returned selection will be null, resulting in an empty selection.) If the current element has associated data, this data is propagated to the corresponding selected element. If multiple elements match the selector, only the first matching element in document order is selected. For example, to select the first bold element in every paragraph:

    ``` javascript
    const b = d3.selectAll("p").select("b");
    ```

    If the *selector* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). It must return an element, or null if there is no matching element. For example, to select the previous sibling of each paragraph:

    ``` javascript
    const previous = d3.selectAll("p").select(function() {
      return this.previousElementSibling;
    });
    ```

    Unlike [*selection*.selectAll](#selection_selectAll), *selection*.select does not affect grouping: it preserves the existing group structure and indexes, and propagates data (if any) to selected children. Grouping plays an important role in the [data join](#joining-data). See [Nested Selections](http://bost.ocks.org/mike/nest/) and [How Selections Work](http://bost.ocks.org/mike/selection/) for more on this topic.
- name: selection.selectAll()
  id: d3-selection#selection_selectall
  summary: For each selected element, selects the descendant elements that match the specified selector string
  belongs_to: selection
  description: |-
    ###### *selection*.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectAll.js)

    For each selected element, selects the descendant elements that match the specified *selector* string. The elements in the returned selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector for the current element, or if the *selector* is null, the group at the current index will be empty. The selected elements do not inherit data from this selection; use [*selection*.data](#selection_data) to propagate data to children. For example, to select the bold elements in every paragraph:

    ``` javascript
    const b = d3.selectAll("p").selectAll("b");
    ```

    If the *selector* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). It must return an array of elements (or an iterable, or a pseudo-array such as a NodeList), or the empty array if there are no matching elements. For example, to select the previous and next siblings of each paragraph:

    ``` javascript
    const sibling = d3.selectAll("p").selectAll(function() {
      return [
        this.previousElementSibling,
        this.nextElementSibling
      ];
    });
    ```

    Unlike [*selection*.select](#selection_select), *selection*.selectAll does affect grouping: each selected descendant is grouped by the parent element in the originating selection. Grouping plays an important role in the [data join](#joining-data). See [Nested Selections](http://bost.ocks.org/mike/nest/) and [How Selections Work](http://bost.ocks.org/mike/selection/) for more on this topic.
- name: selection.selectChild()
  id: d3-selection#selection_selectchild
  summary: Returns a new selection with the (first) child of each element of the current selection matching the selector
  belongs_to: selection
  description: |-
    ###### *selection*.**selectChild**(\[*selector*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectChild.js)

    Returns a new selection with the (first) child of each element of the current selection matching the *selector*. If no *selector* is specified, selects the first child (if any). If the *selector* is specified as a string, selects the first child that matches (if any). If the *selector* is a function, it is evaluated for each of the children nodes, in order, being passed the child (*child*), the child’s index (*i*), and the list of children (*children*); the method selects the first child for which the selector return truthy, if any.
- name: selection.selectChildren()
  id: d3-selection#selection_selectchildren
  summary: Returns a new selection with the children of each element of the current selection matching the selector
  belongs_to: selection
  description: |-
    ###### *selection*.**selectChildren**(\[*selector*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/selectChildren.js)

    Returns a new selection with the children of each element of the current selection matching the *selector*. If no *selector* is specified, selects all the children. If the *selector* is specified as a string, selects the children that match (if any). If the *selector* is a function, it is evaluated for each of the children nodes, in order, being passed the child (*child*), the child’s index (*i*), and the list of children (*children*); the method selects all children for which the selector return truthy.
- name: selection.selection()
  id: d3-selection#selection_selection
  summary: Returns the selection (for symmetry with transition.selection)
  belongs_to: selection
  description: |-
    ###### *selection*.**selection**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/index.js)

    Returns the selection (for symmetry with [*transition*.selection](d3-transition#transition_selection)).
- name: selection.size()
  id: d3-selection#selection_size
  summary: Returns the total number of (non-null) elements in this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**size**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/size.js)

    Returns the total number of (non-null) elements in this selection.
- name: selection.sort()
  id: d3-selection#selection_sort
  summary: Returns a new selection that contains a copy of each group in this selection sorted according to the compare function
  belongs_to: selection
  description: |-
    ###### *selection*.**sort**(*compare*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/sort.js)

    Returns a new selection that contains a copy of each group in this selection sorted according to the *compare* function. After sorting, re-inserts elements to match the resulting order (per [*selection*.order](#selection_order)).

    The compare function, which defaults to [ascending](d3-array#ascending), is passed two elements’ data *a* and *b* to compare. It should return either a negative, positive, or zero value. If negative, then *a* should be before *b*; if positive, then *a* should be after *b*; otherwise, *a* and *b* are considered equal and the order is arbitrary.

    Note that sorting is not guaranteed to be stable; however, it is guaranteed to have the same behavior as your browser’s built-in [sort](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) method on arrays.
- name: selection.style()
  id: d3-selection#selection_style
  summary: If a value is specified, sets the style property with the specified name to the specified value on the selected elements and returns this selection
  belongs_to: selection
  description: |-
    ###### *selection*.**style**(*name*\[, *value*\[, *priority*\]\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/style.js)

    If a *value* is specified, sets the style property with the specified *name* to the specified value on the selected elements and returns this selection. If the *value* is a constant, then all elements are given the same style property value; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to set each element’s style property. A null value will remove the style property. An optional *priority* may also be specified, either as null or the string `important` (without the exclamation point).

    If a *value* is not specified, returns the current value of the specified style property for the first (non-null) element in the selection. The current value is defined as the element’s inline value, if present, and otherwise its [computed value](https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value). Accessing the current style value is generally useful only if you know the selection contains exactly one element.

    Caution: unlike many SVG attributes, CSS styles typically have associated units. For example, `3px` is a valid stroke-width property value, while `3` is not. Some browsers implicitly assign the `px` (pixel) unit to numeric values, but not all browsers do: IE, for example, throws an “invalid arguments” error!
- name: selection.styles()
  id: d3-selection-multi#selection_styles
  summary: A convenience method on top of selection.style for setting multiple style properties
  belongs_to: selection-multi
  description: |-
    ###### *selection*.**styles**(*values*\[, *priority*\])

    A convenience method on top of [*selection*.style](d3-selection#selection_style) for setting multiple style properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:

    ``` javascript
    selection.styles({fill: "red", stroke: function(d) { return d.stroke; }});
    ```

    If a value is a constant, all elements are given the same style property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s style properties. A null value will remove the specified style properties.

    If the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set style properties on the current element. For example:

    ``` javascript
    selection.styles(function(d) { return {fill: "red", stroke: d.stroke}; });
    ```

    Passing a function to *selection*.styles is convenient for sharing some computational effort or state across multiple style properties, or for specifying dynamically which style properties to set.
- name: selection.text()
  id: d3-selection#selection_text
  summary: If a value is specified, sets the text content to the specified value on all selected elements, replacing any existing child elements
  belongs_to: selection
  description: |-
    ###### *selection*.**text**(\[*value*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/text.js)

    If a *value* is specified, sets the [text content](http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent) to the specified value on all selected elements, replacing any existing child elements. If the *value* is a constant, then all elements are given the same text content; otherwise, if the *value* is a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element (*nodes*\[*i*\]). The function’s return value is then used to set each element’s text content. A null value will clear the content.

    If a *value* is not specified, returns the text content for the first (non-null) element in the selection. This is generally useful only if you know the selection contains exactly one element.
- name: selection.transition()
  id: d3-transition#selection_transition
  summary: Returns a new transition on the given selection with the specified name
  belongs_to: transition
  description: |-
    ###### *selection*.**transition**(\[*name*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/selection/transition.js)

    Returns a new transition on the given *selection* with the specified *name*. If a *name* is not specified, null is used. The new transition is only exclusive with other transitions of the same name.

    If the *name* is a [transition](#transition) instance, the returned transition has the same id and name as the specified transition. If a transition with the same id already exists on a selected element, the existing transition is returned for that element. Otherwise, the timing of the returned transition is inherited from the existing transition of the same id on the nearest ancestor of each selected element. Thus, this method can be used to synchronize a transition across multiple selections, or to re-select a transition for specific elements and modify its configuration. For example:

    ``` javascript
    const t = d3.transition()
        .duration(750)
        .ease(d3.easeLinear);

    d3.selectAll(".apple").transition(t)
        .style("fill", "red");

    d3.selectAll(".orange").transition(t)
        .style("fill", "orange");
    ```

    If the specified *transition* is not found on a selected node or its ancestors (such as if the transition [already ended](#the-life-of-a-transition)), the default timing parameters are used; however, in a future release, this will likely be changed to throw an error. See [\#59](https://github.com/d3/d3-transition/issues/59).
- name: sequential()
  id: d3-scale#_sequential
  summary: See continuous
  belongs_to: scale
  description: |-
    ###### *sequential*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*](#_continuous).
- name: sequential.clamp()
  id: d3-scale#sequential_clamp
  summary: See continuous.clamp
  belongs_to: scale
  description: |-
    ###### *sequential*.**clamp**(\[*clamp*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*.clamp](#continuous_clamp).
- name: sequential.copy()
  id: d3-scale#sequential_copy
  summary: See continuous.copy
  belongs_to: scale
  description: |-
    ###### *sequential*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*.copy](#continuous_copy).
- name: sequential.domain()
  id: d3-scale#sequential_domain
  summary: See continuous.domain
  belongs_to: scale
  description: |-
    ###### *sequential*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*.domain](#continuous_domain). Note that a sequential scale’s domain must be numeric and must contain exactly two values.
- name: sequential.interpolator()
  id: d3-scale#sequential_interpolator
  summary: If interpolator is specified, sets the scale’s interpolator to the specified function
  belongs_to: scale
  description: |-
    ###### *sequential*.**interpolator**(\[*interpolator*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    If *interpolator* is specified, sets the scale’s interpolator to the specified function. If *interpolator* is not specified, returns the scale’s current interpolator.
- name: sequential.range()
  id: d3-scale#sequential_range
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *sequential*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*.range](#continuous_range). If *range* is specified, the given two-element array is converted to an interpolator function using [d3.interpolate](d3-interpolate#interpolate).
- name: sequential.rangeRound()
  id: d3-scale#sequential_rangeround
  summary: See continuous.rangeRound
  belongs_to: scale
  description: |-
    ###### *sequential*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequential.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    See [*continuous*.rangeRound](#continuous_rangeRound). If *range* is specified, implicitly uses [d3.interpolateRound](d3-interpolate#interpolateRound) as the interpolator.
- name: sequentialQuantile.quantiles()
  id: d3-scale#sequentialquantile_quantiles
  summary: Returns an array of n + 1 quantiles
  belongs_to: scale
  description: |-
    ###### *sequentialQuantile*.**quantiles**(*n*) · [Source](https://github.com/d3/d3-scale/blob/master/src/sequentialQuantile.js), [Examples](https://observablehq.com/@d3/sequential-scales)

    Returns an array of *n* + 1 quantiles. For example, if *n* = 4, returns an array of five numbers: the minimum value, the first quartile, the median, the third quartile, and the maximum.

    ### Diverging Scales

    Diverging scales, like [sequential scales](#sequential-scales), are similar to [continuous scales](#continuous-scales) in that they map a continuous, numeric input domain to a continuous output range. However, unlike continuous scales, the input domain and output range of a diverging scale always has exactly three elements, and the output range is typically specified as an interpolator rather than an array of values. These scales do not expose [invert](#continuous_invert) and [interpolate](#continuous_interpolate) methods.
- name: set.add()
  id: d3-collection#set_add
  summary: Adds the specified value string to this set
  belongs_to: collection
  description: |-
    ###### *set*.**add**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L10 "Source")

    Adds the specified *value* string to this set. Returns the set, allowing chaining. For example:

    ``` javascript
    var set = d3.set()
        .add("foo")
        .add("bar")
        .add("baz");

    set.has("foo"); // true
    ```
- name: set.clear()
  id: d3-collection#set_clear
  summary: Removes all values from this set
  belongs_to: collection
  description: |-
    ###### *set*.**clear**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L16 "Source")

    Removes all values from this set.
- name: set.each()
  id: d3-collection#set_each
  summary: Calls the specified function for each value in this set, passing the value as the first two arguments (for symmetry with map.each), followed by the set itself
  belongs_to: collection
  description: |-
    ###### *set*.**each**(*function*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L20 "Source")

    Calls the specified *function* for each value in this set, passing the value as the first two arguments (for symmetry with [*map*.each](#map_each)), followed by the set itself. Returns undefined. The iteration order is arbitrary.
- name: set.empty()
  id: d3-collection#set_empty
  summary: Returns true if and only if this set has zero values
  belongs_to: collection
  description: |-
    ###### *set*.**empty**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L19 "Source")

    Returns true if and only if this set has zero values.
- name: set.has()
  id: d3-collection#set_has
  summary: Returns true if and only if this set has an entry for the specified value string
  belongs_to: collection
  description: |-
    ###### *set*.**has**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L9 "Source")

    Returns true if and only if this set has an entry for the specified *value* string.
- name: set.remove()
  id: d3-collection#set_remove
  summary: If the set contains the specified value string, removes it and returns true
  belongs_to: collection
  description: |-
    ###### *set*.**remove**(*value*) [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L15 "Source")

    If the set contains the specified *value* string, removes it and returns true. Otherwise, this method does nothing and returns false.
- name: set.size()
  id: d3-collection#set_size
  summary: Returns the number of values in this set
  belongs_to: collection
  description: |-
    ###### *set*.**size**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L18 "Source")

    Returns the number of values in this set.

    ### Nests

    Nesting allows elements in an array to be grouped into a hierarchical tree structure; think of it like the GROUP BY operator in SQL, except you can have multiple levels of grouping, and the resulting output is a tree rather than a flat table. The levels in the tree are specified by key functions. The leaf nodes of the tree can be sorted by value, while the internal nodes can be sorted by key. An optional rollup function will collapse the elements in each leaf node using a summary function. The nest operator (the object returned by [nest](#nest)) is reusable, and does not retain any references to the data that is nested.

    For example, consider the following tabular data structure of Barley yields, from various sites in Minnesota during 1931-2:

    ``` javascript
    var yields = [
      {yield: 27.00, variety: "Manchuria", year: 1931, site: "University Farm"},
      {yield: 48.87, variety: "Manchuria", year: 1931, site: "Waseca"},
      {yield: 27.43, variety: "Manchuria", year: 1931, site: "Morris"},
      ...
    ];
    ```

    To facilitate visualization, it may be useful to nest the elements first by year, and then by variety, as follows:

    ``` javascript
    var entries = d3.nest()
        .key(function(d) { return d.year; })
        .key(function(d) { return d.variety; })
        .entries(yields);
    ```

    This returns a nested array. Each element of the outer array is a key-values pair, listing the values for each distinct key:

    ``` javascript
    [{key: "1931", values: [
       {key: "Manchuria", values: [
         {yield: 27.00, variety: "Manchuria", year: 1931, site: "University Farm"},
         {yield: 48.87, variety: "Manchuria", year: 1931, site: "Waseca"},
         {yield: 27.43, variety: "Manchuria", year: 1931, site: "Morris"}, ...]},
       {key: "Glabron", values: [
         {yield: 43.07, variety: "Glabron", year: 1931, site: "University Farm"},
         {yield: 55.20, variety: "Glabron", year: 1931, site: "Waseca"}, ...]}, ...]},
     {key: "1932", values: ...}]
    ```

    The nested form allows easy iteration and generation of hierarchical structures in SVG or HTML.

    For a longer introduction to nesting, see:

    - Phoebe Bright’s [D3 Nest Tutorial and examples](http://bl.ocks.org/phoebebright/raw/3176159/)
    - Shan Carter’s [Mister Nester](http://bl.ocks.org/shancarter/raw/4748131/)

    &nbsp;
- name: set.values()
  id: d3-collection#set_values
  summary: Returns an array of the string values in this set
  belongs_to: collection
  description: |-
    ###### *set*.**values**() [Source](https://github.com/d3/d3-collection/blob/master/src/set.js#L17 "Source")

    Returns an array of the string values in this set. The order of the returned values is arbitrary. Can be used as a convenient way of computing the unique values for a set of strings. For example:

    ``` javascript
    d3.set(["foo", "bar", "foo", "baz"]).values(); // "foo", "bar", "baz"
    ```
- name: shape
  id: d3-shape
  summary: Visualizations typically consist of discrete graphical marks, such as symbols, arcs, lines and areas
  description: "# d3-shape\n\nVisualizations typically consist of discrete graphical marks, such as [symbols](#symbols), [arcs](#arcs), [lines](#lines) and [areas](#areas). While the rectangles of a bar chart may be easy enough to generate directly using [SVG](http://www.w3.org/TR/SVG/paths.html#PathData) or [Canvas](http://www.w3.org/TR/2dcontext/#canvaspathmethods), other shapes are complex, such as rounded annular sectors and centripetal Catmull–Rom splines. This module provides a variety of shape generators for your convenience.\n\nAs with other aspects of D3, these shapes are driven by data: each shape generator exposes accessors that control how the input data are mapped to a visual representation. For example, you might define a line generator for a time series by [scaling](d3-scale) fields of your data to fit the chart:\n\n``` javascript\nconst line = d3.line()\n    .x(d => x(d.date))\n    .y(d => y(d.value));\n```\n\nThis line generator can then be used to compute the `d` attribute of an SVG path element:\n\n``` javascript\npath.datum(data).attr(\"d\", line);\n```\n\nOr you can use it to render to a Canvas 2D context:\n\n``` javascript\nline.context(context)(data);\n```\n\nFor more, read [Introducing d3-shape](https://medium.com/@mbostock/introducing-d3-shape-73f8367e6d12).\n\n## Installing\n\nIf you use npm, `npm install d3-shape`. You can also download the [latest release on GitHub](https://github.com/d3/d3-shape/releases/latest). For vanilla HTML in modern browsers, import d3-shape from jsDelivr:\n\n``` markup\n<script type=\"module\">\n\nimport {line} from \"https://cdn.jsdelivr.net/npm/d3-shape@3/+esm\";\n\nconst l = line();\n\n</script>\n```\n\nFor legacy environments, you can load d3-shape’s UMD bundle; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-path@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-shape@3\"></script>\n<script>\n\nconst l = d3.line();\n\n</script>\n```\n\n## API Reference\n\n- [Arcs](#arcs)\n- [Pies](#pies)\n- [Lines](#lines)\n- [Areas](#areas)\n- [Curves](#curves)\n- [Custom Curves](#custom-curves)\n- [Links](#links)\n- [Symbols](#symbols)\n- [Custom Symbol Types](#custom-symbol-types)\n- [Stacks](#stacks)\n\nNote: all the methods that accept arrays also accept iterables and convert them to arrays internally.\n\n### Arcs\n\nThe arc generator produces a [circular](https://en.wikipedia.org/wiki/Circular_sector) or [annular](https://en.wikipedia.org/wiki/Annulus_(mathematics)) sector, as in a pie or donut chart. If the absolute difference between the [start](#arc_startAngle) and [end](#arc_endAngle) angles (the *angular span*) is greater than [τ](https://en.wikipedia.org/wiki/Turn_(geometry)#Tau_proposal), the arc generator will produce a complete circle or annulus. If it is less than τ, the arc’s angular length will be equal to the absolute difference between the two angles (going clockwise if the signed difference is positive and anticlockwise if it is negative). If the absolute difference is less than τ, the arc may have [rounded corners](#arc_cornerRadius) and [angular padding](#arc_padAngle). Arcs are always centered at ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to move the arc to a different position.\n\nSee also the [pie generator](#pies), which computes the necessary angles to represent an array of data as a pie or donut chart; these angles can then be passed to an arc generator.\n\n###### d3.**arc**() · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nConstructs a new arc generator with the default settings.\n\n###### *arc*(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nGenerates an arc for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. For example, with the default settings, an object with radii and angles is expected:\n\n``` javascript\nconst arc = d3.arc();\n\narc({\n  innerRadius: 0,\n  outerRadius: 100,\n  startAngle: 0,\n  endAngle: Math.PI / 2\n}); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\n\nIf the radii and angles are instead defined as constants, you can generate an arc without any arguments:\n\n``` javascript\nconst arc = d3.arc()\n    .innerRadius(0)\n    .outerRadius(100)\n    .startAngle(0)\n    .endAngle(Math.PI / 2);\n\narc(); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\n\nIf the arc generator has a [context](#arc_context), then the arc is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.\n\n###### *arc*.**centroid**(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nComputes the midpoint \\[*x*, *y*\\] of the center line of the arc that would be [generated](#_arc) by the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. To be consistent with the generated arc, the accessors must be deterministic, *i.e.*, return the same value given the same arguments. The midpoint is defined as ([startAngle](#arc_startAngle) + [endAngle](#arc_endAngle)) / 2 and ([innerRadius](#arc_innerRadius) + [outerRadius](#arc_outerRadius)) / 2. For example:\n\nNote that this is **not the geometric center** of the arc, which may be outside the arc; this method is merely a convenience for positioning labels.\n\n###### *arc*.**innerRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *radius* is specified, sets the inner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current inner radius accessor, which defaults to:\n\n``` javascript\nfunction innerRadius(d) {\n  return d.innerRadius;\n}\n```\n\nSpecifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a [sqrt scale](d3-scale#sqrt). More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.\n\n###### *arc*.**outerRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *radius* is specified, sets the outer radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current outer radius accessor, which defaults to:\n\n``` javascript\nfunction outerRadius(d) {\n  return d.outerRadius;\n}\n```\n\nSpecifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart, often in conjunction with a [sqrt scale](d3-scale#sqrt). More commonly, a constant outer radius is used for a pie or donut chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.\n\n###### *arc*.**cornerRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *radius* is specified, sets the corner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current corner radius accessor, which defaults to:\n\n``` javascript\nfunction cornerRadius() {\n  return 0;\n}\n```\n\nIf the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius. For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded. The corner circles are shown in this diagram:\n\nThe corner radius may not be larger than ([outerRadius](#arc_outerRadius) - [innerRadius](#arc_innerRadius)) / 2. In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect. This is occurs more often with the inner corners. See the [arc corners animation](https://observablehq.com/@d3/arc-corners) for illustration.\n\n###### *arc*.**startAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *angle* is specified, sets the start angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:\n\n``` javascript\nfunction startAngle(d) {\n  return d.startAngle;\n}\n```\n\nThe *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If \\|endAngle - startAngle\\| ≥ τ, a complete circle or annulus is generated rather than a sector.\n\n###### *arc*.**endAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *angle* is specified, sets the end angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:\n\n``` javascript\nfunction endAngle(d) {\n  return d.endAngle;\n}\n```\n\nThe *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If \\|endAngle - startAngle\\| ≥ τ, a complete circle or annulus is generated rather than a sector.\n\n###### *arc*.**padAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *angle* is specified, sets the pad angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:\n\n``` javascript\nfunction padAngle() {\n  return d && d.padAngle;\n}\n```\n\nThe pad angle is converted to a fixed linear distance separating adjacent arcs, defined as [padRadius](#arc_padRadius) \\* padAngle. This distance is subtracted equally from the [start](#arc_startAngle) and [end](#arc_endAngle) of the arc. If the arc forms a complete circle or annulus, as when \\|endAngle - startAngle\\| ≥ τ, the pad angle is ignored.\n\nIf the [inner radius](#arc_innerRadius) or angular span is small relative to the pad angle, it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector. For this reason, padding is typically only applied to annular sectors (*i.e.*, when innerRadius is positive), as shown in this diagram:\n\nThe recommended minimum inner radius when using padding is outerRadius \\* padAngle / sin(θ), where θ is the angular span of the smallest arc before padding. For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels. See the [arc padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration.\n\nOften, the pad angle is not set directly on the arc generator, but is instead computed by the [pie generator](#pies) so as to ensure that the area of padded arcs is proportional to their value; see [*pie*.padAngle](#pie_padAngle). See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.\n\n###### *arc*.**padRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *radius* is specified, sets the pad radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt([innerRadius](#arc_innerRadius) \\* innerRadius + [outerRadius](#arc_outerRadius) \\* outerRadius). The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius \\* [padAngle](#arc_padAngle).\n\n###### *arc*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *context* is specified, sets the context and returns this arc generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated arc](#_arc) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated arc is returned.\n\n###### *arc*.**digits**(\\[*digits*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)\n\nIf *digits* is specified, sets the maximum number of digits after the decimal separator and returns this arc generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#arc_context) is null, as when this arc generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n### Pies\n\nThe pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart; these angles can then be passed to an [arc generator](#arcs).\n\n###### d3.**pie**() · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nConstructs a new pie generator with the default settings.\n\n###### *pie*(*data*\\[, *arguments…*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nGenerates a pie for the given array of *data*, returning an array of objects representing each datum’s arc angles. Any additional *arguments* are arbitrary; they are simply propagated to the pie generator’s accessor functions along with the `this` object. The length of the returned array is the same as *data*, and each element *i* in the returned array corresponds to the element *i* in the input data. Each object in the returned array has the following properties:\n\n- `data` - the input datum; the corresponding element in the input data array.\n- `value` - the numeric [value](#pie_value) of the arc.\n- `index` - the zero-based [sorted index](#pie_sort) of the arc.\n- `startAngle` - the [start angle](#pie_startAngle) of the arc.\n- `endAngle` - the [end angle](#pie_endAngle) of the arc.\n- `padAngle` - the [pad angle](#pie_padAngle) of the arc.\n\nThis representation is designed to work with the arc generator’s default [startAngle](#arc_startAngle), [endAngle](#arc_endAngle) and [padAngle](#arc_padAngle) accessors. The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify angles in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.\n\nGiven a small dataset of numbers, here is how to compute the arc angles to render this data as a pie chart:\n\n``` javascript\nconst data = [1, 1, 2, 3, 5, 8, 13, 21];\nconst arcs = d3.pie()(data);\n```\n\nThe first pair of parens, `pie()`, [constructs](#pie) a default pie generator. The second, `pie()(data)`, [invokes](#_pie) this generator on the dataset, returning an array of objects:\n\n``` javascript\n[\n  {\"data\":  1, \"value\":  1, \"index\": 6, \"startAngle\": 6.050474740247008, \"endAngle\": 6.166830023713296, \"padAngle\": 0},\n  {\"data\":  1, \"value\":  1, \"index\": 7, \"startAngle\": 6.166830023713296, \"endAngle\": 6.283185307179584, \"padAngle\": 0},\n  {\"data\":  2, \"value\":  2, \"index\": 5, \"startAngle\": 5.817764173314431, \"endAngle\": 6.050474740247008, \"padAngle\": 0},\n  {\"data\":  3, \"value\":  3, \"index\": 4, \"startAngle\": 5.468698322915565, \"endAngle\": 5.817764173314431, \"padAngle\": 0},\n  {\"data\":  5, \"value\":  5, \"index\": 3, \"startAngle\": 4.886921905584122, \"endAngle\": 5.468698322915565, \"padAngle\": 0},\n  {\"data\":  8, \"value\":  8, \"index\": 2, \"startAngle\": 3.956079637853813, \"endAngle\": 4.886921905584122, \"padAngle\": 0},\n  {\"data\": 13, \"value\": 13, \"index\": 1, \"startAngle\": 2.443460952792061, \"endAngle\": 3.956079637853813, \"padAngle\": 0},\n  {\"data\": 21, \"value\": 21, \"index\": 0, \"startAngle\": 0.000000000000000, \"endAngle\": 2.443460952792061, \"padAngle\": 0}\n]\n```\n\nNote that the returned array is in the same order as the data, even though this pie chart is [sorted](#pie_sortValues) by descending value, starting with the arc for the last datum (value 21) at 12 o’clock.\n\n###### *pie*.**value**(\\[*value*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *value* is specified, sets the value accessor to the specified function or number and returns this pie generator. If *value* is not specified, returns the current value accessor, which defaults to:\n\n``` javascript\nfunction value(d) {\n  return d;\n}\n```\n\nWhen a pie is [generated](#_pie), the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using [valueOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf). If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum. For example:\n\n``` javascript\nconst data = [\n  {\"number\":  4, \"name\": \"Locke\"},\n  {\"number\":  8, \"name\": \"Reyes\"},\n  {\"number\": 15, \"name\": \"Ford\"},\n  {\"number\": 16, \"name\": \"Jarrah\"},\n  {\"number\": 23, \"name\": \"Shephard\"},\n  {\"number\": 42, \"name\": \"Kwon\"}\n];\n\nconst arcs = d3.pie()\n    .value(d => d.number)\n    (data);\n```\n\nThis is similar to [mapping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) your data to values before invoking the pie generator:\n\n``` javascript\nconst arcs = d3.pie()(data.map(d => d.number));\n```\n\nThe benefit of an accessor is that the input data remains associated with the returned objects, thereby making it easier to access other fields of the data, for example to set the color or to add text labels.\n\n###### *pie*.**sort**(\\[*compare*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *compare* is specified, sets the data comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current data comparator, which defaults to null. If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the [value comparator](#pie_sortValues) to null.\n\nThe *compare* function takes two arguments *a* and *b*, each elements from the input data array. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by their associated name:\n\n``` javascript\npie.sort((a, b) => a.name.localeCompare(b.name));\n```\n\nSorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).\n\n###### *pie*.**sortValues**(\\[*compare*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *compare* is specified, sets the value comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current value comparator, which defaults to descending value. The default value comparator is implemented as:\n\n``` javascript\nfunction compare(a, b) {\n  return b - a;\n}\n```\n\nIf both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the value comparator implicitly sets the [data comparator](#pie_sort) to null.\n\nThe value comparator is similar to the [data comparator](#pie_sort), except the two arguments *a* and *b* are values derived from the input data array using the [value accessor](#pie_value), not the data elements. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by ascending value:\n\n``` javascript\npie.sortValues((a, b) => a - b);\n```\n\nSorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).\n\n###### *pie*.**startAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *angle* is specified, sets the overall start angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:\n\n``` javascript\nfunction startAngle() {\n  return 0;\n}\n```\n\nThe start angle here means the *overall* start angle of the pie, *i.e.*, the start angle of the first arc. The start angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.\n\n###### *pie*.**endAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *angle* is specified, sets the overall end angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:\n\n``` javascript\nfunction endAngle() {\n  return 2 * Math.PI;\n}\n```\n\nThe end angle here means the *overall* end angle of the pie, *i.e.*, the end angle of the last arc. The end angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.\n\nThe value of the end angle is constrained to [startAngle](#pie_startAngle) ± τ, such that \\|endAngle - startAngle\\| ≤ τ.\n\n###### *pie*.**padAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)\n\nIf *angle* is specified, sets the pad angle to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:\n\n``` javascript\nfunction padAngle() {\n  return 0;\n}\n```\n\nThe pad angle here means the angular separation between each adjacent arc. The total amount of padding reserved is the specified *angle* times the number of elements in the input data array, and at most \\|endAngle - startAngle\\|; the remaining space is then divided proportionally by [value](#pie_value) such that the relative area of each arc is preserved. See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. The pad angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians.\n\n### Lines\n\nThe line generator produces a [spline](https://en.wikipedia.org/wiki/Spline_(mathematics)) or [polyline](https://en.wikipedia.org/wiki/Polygonal_chain), as in a line chart. Lines also appear in many other visualization types, such as the links in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling).\n\n###### d3.**line**(\\[*x*\\]\\[, *y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nConstructs a new line generator with the default settings. If *x* or *y* are specified, sets the corresponding accessors to the specified function or number and returns this line generator.\n\n###### *line*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nGenerates a line for the given array of *data*. Depending on this line generator’s associated [curve](#line_curve), the given input *data* may need to be sorted by *x*-value before being passed to the line generator. If the line generator has a [context](#line_context), then the line is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.\n\n###### *line*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nIf *x* is specified, sets the x accessor to the specified function or number and returns this line generator. If *x* is not specified, returns the current x accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\nWhen a line is [generated](#_line), the x accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](d3-scale#time-scales) and `y` is a [linear scale](d3-scale#linear-scales):\n\n``` javascript\nconst data = [\n  {date: new Date(2007, 3, 24), value: 93.24},\n  {date: new Date(2007, 3, 25), value: 95.35},\n  {date: new Date(2007, 3, 26), value: 98.84},\n  {date: new Date(2007, 3, 27), value: 99.92},\n  {date: new Date(2007, 3, 30), value: 99.80},\n  {date: new Date(2007, 4,  1), value: 99.47},\n  …\n];\n\nconst line = d3.line()\n    .x(d => x(d.date))\n    .y(d => y(d.value));\n```\n\n###### *line*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nIf *y* is specified, sets the y accessor to the specified function or number and returns this line generator. If *y* is not specified, returns the current y accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\nWhen a line is [generated](#_line), the y accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default y accessor assumes that the input data are two-element arrays of numbers. See [*line*.x](#line_x) for more information.\n\n###### *line*.**defined**(\\[*defined*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nIf *defined* is specified, sets the defined accessor to the specified function or boolean and returns this line generator. If *defined* is not specified, returns the current defined accessor, which defaults to:\n\n``` javascript\nfunction defined() {\n  return true;\n}\n```\n\nThe default accessor thus assumes that the input data is always defined. When a line is [generated](#_line), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x](#line_x) and [y](#line_y) accessors will subsequently be evaluated and the point will be added to the current line segment. Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point. As a result, the generated line may have several discrete segments. For example:\n\nNote that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.\n\n###### *line*.**curve**(\\[*curve*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nIf *curve* is specified, sets the [curve factory](#curves) and returns this line generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).\n\n###### *line*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)\n\nIf *context* is specified, sets the context and returns this line generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated line](#_line) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated line is returned.\n\n###### *line*.**digits**(\\[*digits*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js)\n\nIf *digits* is specified, sets the maximum number of digits after the decimal separator and returns this line generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#line_context) is null, as when this line generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n###### d3.**lineRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)\n\nConstructs a new radial line generator with the default settings. A radial line generator is equivalent to the standard Cartesian [line generator](#line), except the [x](#line_x) and [y](#line_y) accessors are replaced with [angle](#lineRadial_angle) and [radius](#lineRadial_radius) accessors. Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.\n\n###### *lineRadial*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L4), [Examples](https://observablehq.com/@d3/d3-lineradial)\n\nEquivalent to [*line*](#_line).\n\n###### *lineRadial*.**angle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L7), [Examples](https://observablehq.com/@d3/d3-lineradial)\n\nEquivalent to [*line*.x](#line_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).\n\n###### *lineRadial*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L8), [Examples](https://observablehq.com/@d3/d3-lineradial)\n\nEquivalent to [*line*.y](#line_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n\n###### *lineRadial*.**defined**(\\[*defined*\\])\n\nEquivalent to [*line*.defined](#line_defined).\n\n###### *lineRadial*.**curve**(\\[*curve*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)\n\nEquivalent to [*line*.curve](#line_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial lines because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial lines.\n\n###### *lineRadial*.**context**(\\[*context*\\])\n\nEquivalent to [*line*.context](#line_context).\n\n### Areas\n\nThe area generator produces an area, as in an area chart. An area is defined by two bounding [lines](#lines), either splines or polylines. Typically, the two lines share the same [*x*-values](#area_x) ([x0](#area_x0) = [x1](#area_x1)), differing only in *y*-value ([y0](#area_y0) and [y1](#area_y1)); most commonly, y0 is defined as a constant representing [zero](http://www.vox.com/2015/11/19/9758062/y-axis-zero-chart). The first line (the *topline*) is defined by x1 and y1 and is rendered first; the second line (the *baseline*) is defined by x0 and y0 and is rendered second, with the points in reverse order. With a [curveLinear](#curveLinear) [curve](#area_curve), this produces a clockwise polygon.\n\n###### d3.**area**(\\[*x*\\]\\[, *y0*\\]\\[, *y1*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nConstructs a new area generator with the default settings. If *x*, *y0* or *y1* are specified, sets the corresponding accessors to the specified function or number and returns this area generator.\n\n###### *area*(*data*) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nGenerates an area for the given array of *data*. Depending on this area generator’s associated [curve](#area_curve), the given input *data* may need to be sorted by *x*-value before being passed to the area generator. If the area generator has a [context](#line_context), then the area is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.\n\n###### *area*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *x* is specified, sets [x0](#area_x0) to *x* and [x1](#area_x1) to null and returns this area generator. If *x* is not specified, returns the current x0 accessor.\n\n###### *area*.**x0**(\\[*x*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *x* is specified, sets the x0 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x0 accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\nWhen an area is [generated](#_area), the x0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x0 accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](d3-scale#time-scales) and `y` is a [linear scale](d3-scale#linear-scales):\n\n``` javascript\nconst data = [\n  {date: new Date(2007, 3, 24), value: 93.24},\n  {date: new Date(2007, 3, 25), value: 95.35},\n  {date: new Date(2007, 3, 26), value: 98.84},\n  {date: new Date(2007, 3, 27), value: 99.92},\n  {date: new Date(2007, 3, 30), value: 99.80},\n  {date: new Date(2007, 4,  1), value: 99.47},\n  …\n];\n\nconst area = d3.area()\n    .x(d => x(d.date))\n    .y1(d => y(d.value))\n    .y0(y(0));\n```\n\n###### *area*.**x1**(\\[*x*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *x* is specified, sets the x1 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x1 accessor, which defaults to null, indicating that the previously-computed [x0](#area_x0) value should be reused for the x1 value.\n\nWhen an area is [generated](#_area), the x1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.\n\n###### *area*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *y* is specified, sets [y0](#area_y0) to *y* and [y1](#area_y1) to null and returns this area generator. If *y* is not specified, returns the current y0 accessor.\n\n###### *area*.**y0**(\\[*y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *y* is specified, sets the y0 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y0 accessor, which defaults to:\n\n``` javascript\nfunction y() {\n  return 0;\n}\n```\n\nWhen an area is [generated](#_area), the y0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.\n\n###### *area*.**y1**(\\[*y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *y* is specified, sets the y1 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y1 accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\nA null accessor is also allowed, indicating that the previously-computed [y0](#area_y0) value should be reused for the y1 value. When an area is [generated](#_area), the y1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.\n\n###### *area*.**defined**(\\[*defined*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *defined* is specified, sets the defined accessor to the specified function or boolean and returns this area generator. If *defined* is not specified, returns the current defined accessor, which defaults to:\n\n``` javascript\nfunction defined() {\n  return true;\n}\n```\n\nThe default accessor thus assumes that the input data is always defined. When an area is [generated](#_area), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x0](#area_x0), [x1](#area_x1), [y0](#area_y0) and [y1](#area_y1) accessors will subsequently be evaluated and the point will be added to the current area segment. Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point. As a result, the generated area may have several discrete segments. For example:\n\nNote that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.\n\n###### *area*.**curve**(\\[*curve*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *curve* is specified, sets the [curve factory](#curves) and returns this area generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).\n\n###### *area*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *context* is specified, sets the context and returns this area generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated area](#_area) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated area is returned.\n\n###### *area*.**digits**(\\[*digits*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nIf *digits* is specified, sets the maximum number of digits after the decimal separator and returns this area generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#area_context) is null, as when this area generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n###### *area*.**lineX0**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js) *area*.**lineY0**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nReturns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).\n\n###### *area*.**lineX1**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nReturns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x1*-accessor](#area_x1), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).\n\n###### *area*.**lineY1**() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)\n\nReturns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y1*-accessor](#area_y1).\n\n###### d3.**areaRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nConstructs a new radial area generator with the default settings. A radial area generator is equivalent to the standard Cartesian [area generator](#area), except the [x](#area_x) and [y](#area_y) accessors are replaced with [angle](#areaRadial_angle) and [radius](#areaRadial_radius) accessors. Radial areas are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.\n\n###### *areaRadial*(*data*)\n\nEquivalent to [*area*](#_area).\n\n###### *areaRadial*.**angle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.x](#area_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).\n\n###### *areaRadial*.**startAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.x0](#area_x0), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.\n\n###### *areaRadial*.**endAngle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.x1](#area_x1), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.\n\n###### *areaRadial*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.y](#area_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n\n###### *areaRadial*.**innerRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.y0](#area_y0), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n\n###### *areaRadial*.**outerRadius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.y1](#area_y1), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n\n###### *areaRadial*.**defined**(\\[*defined*\\])\n\nEquivalent to [*area*.defined](#area_defined).\n\n###### *areaRadial*.**curve**(\\[*curve*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nEquivalent to [*area*.curve](#area_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial areas because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial areas.\n\n###### *areaRadial*.**context**(\\[*context*\\])\n\nEquivalent to [*line*.context](#line_context).\n\n###### *areaRadial*.**lineStartAngle**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js) *areaRadial*.**lineInnerRadius**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nReturns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).\n\n###### *areaRadial*.**lineEndAngle**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nReturns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [end angle accessor](#areaRadial_endAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).\n\n###### *areaRadial*.**lineOuterRadius**() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)\n\nReturns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [outer radius accessor](#areaRadial_outerRadius).\n\n### Curves\n\nWhile [lines](#lines) are defined as a sequence of two-dimensional \\[*x*, *y*\\] points, and [areas](#areas) are similarly defined by a topline and a baseline, there remains the task of transforming this discrete representation into a continuous shape: *i.e.*, how to interpolate between the points. A variety of curves are provided for this purpose.\n\nCurves are typically not constructed or used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). For example:\n\n``` javascript\nconst line = d3.line(d => d.date, d => d.value)\n    .curve(d3.curveCatmullRom.alpha(0.5));\n```\n\n###### d3.**curveBasis**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basis.js)\n\nProduces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. The first and last points are triplicated such that the spline starts at the first point and ends at the last point, and is tangent to the line between the first and second points, and to the line between the penultimate and last points.\n\n###### d3.**curveBasisClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisClosed.js)\n\nProduces a closed cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop with C2 continuity.\n\n###### d3.**curveBasisOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisOpen.js)\n\nProduces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. Unlike [basis](#basis), the first and last points are not repeated, and thus the curve typically does not intersect these points.\n\n###### d3.**curveBumpX**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)\n\nProduces a Bézier curve between each pair of points, with horizontal tangents at each point.\n\n###### d3.**curveBumpY**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)\n\nProduces a Bézier curve between each pair of points, with vertical tangents at each point.\n\n###### d3.**curveBundle**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)\n\nProduces a straightened cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points, with the spline straightened according to the curve’s [*beta*](#curveBundle_beta), which defaults to 0.85. This curve is typically used in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling) to disambiguate connections, as proposed by [Danny Holten](https://www.win.tue.nl/vis1/home/dholten/) in [Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data](https://www.win.tue.nl/vis1/home/dholten/papers/bundles_infovis.pdf). This curve does not implement [*curve*.areaStart](#curve_areaStart) and [*curve*.areaEnd](#curve_areaEnd); it is intended to work with [d3.line](#lines), not [d3.area](#areas).\n\n###### *bundle*.**beta**(*beta*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)\n\nReturns a bundle curve with the specified *beta* in the range \\[0, 1\\], representing the bundle strength. If *beta* equals zero, a straight line between the first and last point is produced; if *beta* equals one, a standard [basis](#basis) spline is produced. For example:\n\n``` javascript\nconst line = d3.line().curve(d3.curveBundle.beta(0.5));\n```\n\n###### d3.**curveCardinal**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinal.js)\n\nProduces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points, with one-sided differences used for the first and last piece. The default [tension](#curveCardinal_tension) is 0.\n\n###### d3.**curveCardinalClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalClosed.js)\n\nProduces a closed cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop. The default [tension](#curveCardinal_tension) is 0.\n\n###### d3.**curveCardinalOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)\n\nProduces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. Unlike [curveCardinal](#curveCardinal), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point. The default [tension](#curveCardinal_tension) is 0.\n\n###### *cardinal*.**tension**(*tension*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)\n\nReturns a cardinal curve with the specified *tension* in the range \\[0, 1\\]. The *tension* determines the length of the tangents: a *tension* of one yields all zero tangents, equivalent to [curveLinear](#curveLinear); a *tension* of zero produces a uniform [Catmull–Rom](#curveCatmullRom) spline. For example:\n\n``` javascript\nconst line = d3.line().curve(d3.curveCardinal.tension(0.5));\n```\n\n###### d3.**curveCatmullRom**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)\n\nProduces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. in [On the Parameterization of Catmull–Rom Curves](http://www.cemyuksel.com/research/catmullrom_param/), with one-sided differences used for the first and last piece.\n\n###### d3.**curveCatmullRomClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomClosed.js)\n\nProduces a closed cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends, the first three control points are repeated, producing a closed loop.\n\n###### d3.**curveCatmullRomOpen**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomOpen.js)\n\nProduces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. Unlike [curveCatmullRom](#curveCatmullRom), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point.\n\n###### *catmullRom*.**alpha**(*alpha*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)\n\nReturns a cubic Catmull–Rom curve with the specified *alpha* in the range \\[0, 1\\]. If *alpha* is zero, produces a uniform spline, equivalent to [curveCardinal](#curveCardinal) with a tension of zero; if *alpha* is one, produces a chordal spline; if *alpha* is 0.5, produces a [centripetal spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline). Centripetal splines are recommended to avoid self-intersections and overshoot. For example:\n\n``` javascript\nconst line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));\n```\n\n###### d3.**curveLinear**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linear.js)\n\nProduces a polyline through the specified points.\n\n###### d3.**curveLinearClosed**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linearClosed.js)\n\nProduces a closed polyline through the specified points by repeating the first point when the line segment ends.\n\n###### d3.**curveMonotoneX**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)\n\nProduces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *y*, assuming monotonicity in *x*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”\n\n###### d3.**curveMonotoneY**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)\n\nProduces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *x*, assuming monotonicity in *y*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”\n\n###### d3.**curveNatural**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/natural.js)\n\nProduces a [natural](https://en.wikipedia.org/wiki/Spline_interpolation) [cubic spline](http://mathworld.wolfram.com/CubicSpline.html) with the second derivative of the spline set to zero at the endpoints.\n\n###### d3.**curveStep**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nProduces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes at the midpoint of each pair of adjacent *x*-values.\n\n###### d3.**curveStepAfter**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nProduces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes after the *x*-value.\n\n###### d3.**curveStepBefore**(*context*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nProduces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes before the *x*-value.\n\n### Custom Curves\n\nCurves are typically not used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). However, you can define your own curve implementation should none of the built-in curves satisfy your needs using the following interface. You can also use this low-level interface with a built-in curve type as an alternative to the line and area generators.\n\n###### *curve*.**areaStart**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js#L7)\n\nIndicates the start of a new area segment. Each area segment consists of exactly two [line segments](#curve_lineStart): the topline, followed by the baseline, with the baseline points in reverse order.\n\n###### *curve*.**areaEnd**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nIndicates the end of the current area segment.\n\n###### *curve*.**lineStart**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nIndicates the start of a new line segment. Zero or more [points](#curve_point) will follow.\n\n###### *curve*.**lineEnd**() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nIndicates the end of the current line segment.\n\n###### *curve*.**point**(*x*, *y*) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)\n\nIndicates a new point in the current line segment with the given *x*- and *y*-values.\n\n### Links\n\nThe **link** shape generates a smooth cubic Bézier curve from a source point to a target point. The tangents of the curve at the start and end are either [vertical](#linkVertical), [horizontal](#linkHorizontal) or [radial](#linkRadial).\n\n###### d3.**link**(*curve*) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nReturns a new [link generator](#_link) using the specified *curve*. For example, to visualize [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the top edge of the display, you might say:\n\n``` javascript\nconst link = d3.link(d3.curveBumpY)\n    .x(d => d.x)\n    .y(d => d.y);\n```\n\n###### d3.**linkVertical**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nShorthand for [d3.link](#link) with [d3.curveBumpY](#curveBumpY); suitable for visualizing [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the top edge of the display. Equivalent to:\n\n``` javascript\nconst link = d3.link(d3.curveBumpY);\n```\n\n###### d3.**linkHorizontal**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nShorthand for [d3.link](#link) with [d3.curveBumpX](#curveBumpX); suitable for visualizing [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted on the left edge of the display. Equivalent to:\n\n``` javascript\nconst link = d3.link(d3.curveBumpX);\n```\n\n###### *link*(*arguments…*) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nGenerates a link for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the link generator’s accessor functions along with the `this` object. For example, with the default settings, an object expected:\n\n``` javascript\nlink({\n  source: [100, 100],\n  target: [300, 300]\n});\n```\n\n###### *link*.**source**(\\[*source*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *source* is specified, sets the source accessor to the specified function and returns this link generator. If *source* is not specified, returns the current source accessor, which defaults to:\n\n``` javascript\nfunction source(d) {\n  return d.source;\n}\n```\n\n###### *link*.**target**(\\[*target*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *target* is specified, sets the target accessor to the specified function and returns this link generator. If *target* is not specified, returns the current target accessor, which defaults to:\n\n``` javascript\nfunction target(d) {\n  return d.target;\n}\n```\n\n###### *link*.**x**(\\[*x*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *x* is specified, sets the *x*-accessor to the specified function or number and returns this link generator. If *x* is not specified, returns the current *x*-accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\n###### *link*.**y**(\\[*y*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *y* is specified, sets the *y*-accessor to the specified function or number and returns this link generator. If *y* is not specified, returns the current *y*-accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\n###### *link*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *context* is specified, sets the context and returns this link generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated link](#_link) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated link is returned. See also [d3-path](d3-path).\n\n###### *link*.**digits**(\\[*digits*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nIf *digits* is specified, sets the maximum number of digits after the decimal separator and returns this link generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#link_context) is null, as when this link generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n###### d3.**linkRadial**() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nReturns a new [link generator](#_link) with radial tangents. For example, to visualize [links](d3-hierarchy#node_links) in a [tree diagram](d3-hierarchy#tree) rooted in the center of the display, you might say:\n\n``` javascript\nconst link = d3.linkRadial()\n    .angle(d => d.x)\n    .radius(d => d.y);\n```\n\n###### *linkRadial*.**angle**(\\[*angle*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nEquivalent to [*link*.x](#link_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).\n\n###### *linkRadial*.**radius**(\\[*radius*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)\n\nEquivalent to [*link*.y](#link_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.\n\n### Symbols\n\nSymbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to move the symbol to a different position.\n\n###### d3.**symbol**(\\[*type*\\]\\[, *size*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js), [Examples](https://observablehq.com/@d3/fitted-symbols)\n\nConstructs a new symbol generator of the specified [type](#symbol_type) and [size](#symbol_size). If not specified, *type* defaults to a circle, and *size* defaults to 64.\n\n###### *symbol*(*arguments*…) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nGenerates a symbol for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the symbol generator’s accessor functions along with the `this` object. For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels. If the symbol generator has a [context](#symbol_context), then the symbol is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.\n\n###### *symbol*.**type**(\\[*type*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nIf *type* is specified, sets the symbol type to the specified function or symbol type and returns this symbol generator. If *type* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](d3-selection#selection_attr) if you are using d3-selection.) If *type* is not specified, returns the current symbol type accessor, which defaults to:\n\n``` javascript\nfunction type() {\n  return circle;\n}\n```\n\nSee [symbolsFill](#symbolsFill) and [symbolsStroke](#symbolsStroke) for built-in symbol types. To implement a custom symbol type, pass an object that implements [*symbolType*.draw](#symbolType_draw).\n\n###### *symbol*.**size**(\\[*size*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nIf *size* is specified, sets the size to the specified function or number and returns this symbol generator. If *size* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](d3-selection#selection_attr) if you are using d3-selection.) If *size* is not specified, returns the current size accessor, which defaults to:\n\n``` javascript\nfunction size() {\n  return 64;\n}\n```\n\nSpecifying the size as a function is useful for constructing a scatterplot with a size encoding. If you wish to scale the symbol to fit a given bounding box, rather than by area, try [SVG’s getBBox](https://observablehq.com/d/1fac2626b9e1b65f).\n\n###### *symbol*.**context**(\\[*context*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nIf *context* is specified, sets the context and returns this symbol generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated symbol](#_symbol) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated symbol is returned.\n\n###### *symbol*.**digits**(\\[*digits*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nIf *digits* is specified, sets the maximum number of digits after the decimal separator and returns this symbol generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#symbol_context) is null, as when this symbol generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).\n\n###### d3.**symbolsFill** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nAn array containing a set of symbol types designed for filling: [circle](#symbolCircle), [cross](#symbolCross), [diamond](#symbolDiamond), [square](#symbolSquare), [star](#symbolStar), [triangle](#symbolTriangle), and [wye](#symbolWye). Useful for constructing the range of an [ordinal scale](d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.\n\n###### d3.**symbolsStroke** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)\n\nAn array containing a set of symbol types designed for stroking: [circle](#symbolCircle), [plus](#symbolPlus), [times](#symbolTimes), [triangle2](#symbolTriangle2), [asterisk](#symbolAsterisk), [square2](#symbolSquare2), and [diamond2](#symbolDiamond2). Useful for constructing the range of an [ordinal scale](d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.\n\n###### d3.**symbolAsterisk** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/asterisk.js)\n\nThe asterisk symbol type; intended for stroking.\n\n###### d3.**symbolCircle** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/circle.js)\n\nThe circle symbol type; intended for either filling or stroking.\n\n###### d3.**symbolCross** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/cross.js)\n\nThe Greek cross symbol type, with arms of equal length; intended for filling.\n\n###### d3.**symbolDiamond** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)\n\nThe rhombus symbol type; intended for filling.\n\n###### d3.**symbolDiamond2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)\n\nThe rotated square symbol type; intended for stroking.\n\n###### d3.**symbolPlus** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/plus.js)\n\nThe plus symbol type; intended for stroking.\n\n###### d3.**symbolSquare** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square.js)\n\nThe square symbol type; intended for filling.\n\n###### d3.**symbolSquare2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square2.js)\n\nThe square2 symbol type; intended for stroking.\n\n###### d3.**symbolStar** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/star.js)\n\nThe pentagonal star (pentagram) symbol type; intended for filling.\n\n###### d3.**symbolTriangle** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle.js)\n\nThe up-pointing triangle symbol type; intended for filling.\n\n###### d3.**symbolTriangle2** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle2.js)\n\nThe up-pointing triangle symbol type; intended for stroking.\n\n###### d3.**symbolWye** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/wye.js)\n\nThe Y-shape symbol type; intended for filling.\n\n###### d3.**symbolTimes** · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/times.js)\n\nThe X-shape symbol type; intended for stroking.\n\n###### d3.**pointRadial**(*angle*, *radius*) · [Source](https://github.com/d3/d3-shape/blob/main/src/pointRadial.js), [Examples](https://observablehq.com/@d3/radial-area-chart)\n\nReturns the point \\[*x*, *y*\\] for the given *angle* in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise, and the given *radius*.\n\n### Custom Symbol Types\n\nSymbol types are typically not used directly, instead being passed to [*symbol*.type](#symbol_type). However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface. You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.\n\n###### *symbolType*.**draw**(*context*, *size*)\n\nRenders this symbol type to the specified *context* with the specified *size* in square pixels. The *context* implements the [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods) interface. (Note that this is a subset of the CanvasRenderingContext2D interface!)\n\n### Stacks\n\nSome shape types can be stacked, placing one shape adjacent to another. For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically. This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.\n\nStacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned. So, chose the [stack order](#stack_order) carefully, and consider a [streamgraph](#stackOffsetWiggle). (See also [grouped charts](https://observablehq.com/@d3/grouped-bar-chart).)\n\nLike the [pie generator](#pies), the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an [area generator](#areas) or use directly, say to position bars.\n\n###### d3.**stack**() · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nConstructs a new stack generator with the default settings.\n\n###### *stack*(*data*\\[, *arguments…*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nGenerates a stack for the given array of *data*, returning an array representing each series. Any additional *arguments* are arbitrary; they are simply propagated to accessors along with the `this` object.\n\nThe series are determined by the [keys accessor](#stack_keys); each series *i* in the returned array corresponds to the *i*th key. Each series is an array of points, where each point *j* corresponds to the *j*th element in the input *data*. Lastly, each point is represented as an array \\[*y0*, *y1*\\] where *y0* is the lower value (baseline) and *y1* is the upper value (topline); the difference between *y0* and *y1* corresponds to the computed [value](#stack_value) for this point. The key for each series is available as *series*.key, and the [index](#stack_order) as *series*.index. The input data element for each point is available as *point*.data.\n\nFor example, consider the following table representing monthly sales of fruits:\n\n| Month  | Apples | Bananas | Cherries | Durians |\n|--------|--------|---------|----------|---------|\n| 1/2015 | 3840   | 1920    | 960      | 400     |\n| 2/2015 | 1600   | 1440    | 960      | 400     |\n| 3/2015 | 640    | 960     | 640      | 400     |\n| 4/2015 | 320    | 480     | 640      | 400     |\n\nThis might be represented in JavaScript as an array of objects:\n\n``` javascript\nconst data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, durians: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, durians: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, durians: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, durians: 400}\n];\n```\n\nTo produce a stack for this data:\n\n``` javascript\nconst stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"durians\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\n\nconst series = stack(data);\n```\n\nThe resulting array has one element per *series*. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:\n\n``` javascript\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // durians\n]\n```\n\nEach series in then typically passed to an [area generator](#areas) to render an area chart, or used to construct rectangles for a bar chart.\n\n###### *stack*.**keys**(\\[*keys*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nIf *keys* is specified, sets the keys accessor to the specified function or array and returns this stack generator. If *keys* is not specified, returns the current keys accessor, which defaults to the empty array. A series (layer) is [generated](#_stack) for each key. Keys are typically strings, but they may be arbitrary values. The series’ key is passed to the [value accessor](#stack_value), along with each data point, to compute the point’s value.\n\n###### *stack*.**value**(\\[*value*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nIf *value* is specified, sets the value accessor to the specified function or number and returns this stack generator. If *value* is not specified, returns the current value accessor, which defaults to:\n\n``` javascript\nfunction value(d, key) {\n  return d[key];\n}\n```\n\nThus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see [*stack*](#_stack) for an example.\n\n###### *stack*.**order**(\\[*order*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nIf *order* is specified, sets the order accessor to the specified function or array and returns this stack generator. If *order* is not specified, returns the current order accessor, which defaults to [stackOrderNone](#stackOrderNone); this uses the order given by the [key accessor](#stack_key). See [stack orders](#stack-orders) for the built-in orders.\n\nIf *order* is a function, it is passed the generated series array and must return an array of numeric indexes representing the stack order. For example, the default order is defined as:\n\n``` javascript\nfunction orderNone(series) {\n  let n = series.length;\n  const o = new Array(n);\n  while (--n >= 0) o[n] = n;\n  return o;\n}\n```\n\nThe stack order is computed prior to the [offset](#stack_offset); thus, the lower value for all points is zero at the time the order is computed. The index attribute for each series is also not set until after the order is computed.\n\n###### *stack*.**offset**(\\[*offset*\\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)\n\nIf *offset* is specified, sets the offset accessor to the specified function and returns this stack generator. If *offset* is not specified, returns the current offset acccesor, which defaults to [stackOffsetNone](#stackOffsetNone); this uses a zero baseline. See [stack offsets](#stack-offsets) for the built-in offsets.\n\nThe offset function is passed the generated series array and the order index array; it is then responsible for updating the lower and upper values in the series array. For example, the default offset is defined as:\n\n``` javascript\nfunction offsetNone(series, order) {\n  if (!((n = series.length) > 1)) return;\n  for (let i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n    s0 = s1, s1 = series[order[i]];\n    for (let j = 0; j < m; ++j) {\n      s1[j][1] += s1[j][0] = s0[j][1];\n    }\n  }\n}\n```\n\n### Stack Orders\n\nStack orders are typically not used directly, but are instead passed to [*stack*.order](#stack_order).\n\n###### d3.**stackOrderAppearance**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/appearance.js)\n\nReturns a series order such that the earliest series (according to the maximum value) is at the bottom.\n\n###### d3.**stackOrderAscending**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/ascending.js)\n\nReturns a series order such that the smallest series (according to the sum of values) is at the bottom.\n\n###### d3.**stackOrderDescending**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/descending.js)\n\nReturns a series order such that the largest series (according to the sum of values) is at the bottom.\n\n###### d3.**stackOrderInsideOut**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/insideOut.js)\n\nReturns a series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the [wiggle offset](#stackOffsetWiggle). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Byron & Wattenberg for more information.\n\n###### d3.**stackOrderNone**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/none.js)\n\nReturns the given series order \\[0, 1, … *n* - 1\\] where *n* is the number of elements in *series*. Thus, the stack order is given by the [key accessor](#stack_keys).\n\n###### d3.**stackOrderReverse**(*series*) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/reverse.js)\n\nReturns the reverse of the given series order \\[*n* - 1, *n* - 2, … 0\\] where *n* is the number of elements in *series*. Thus, the stack order is given by the reverse of the [key accessor](#stack_keys).\n\n### Stack Offsets\n\nStack offsets are typically not used directly, but are instead passed to [*stack*.offset](#stack_offset).\n\n###### d3.**stackOffsetExpand**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/expand.js)\n\nApplies a zero baseline and normalizes the values for each point such that the topline is always one.\n\n###### d3.**stackOffsetDiverging**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/diverging.js)\n\nPositive values are stacked above zero, negative values are [stacked below zero](https://observablehq.com/@d3/diverging-stacked-bar-chart), and zero values are stacked at zero.\n\n###### d3.**stackOffsetNone**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/none.js)\n\nApplies a zero baseline.\n\n###### d3.**stackOffsetSilhouette**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/silhouette.js)\n\nShifts the baseline down such that the center of the streamgraph is always at zero.\n\n###### d3.**stackOffsetWiggle**(*series*, *order*) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/wiggle.js)\n\nShifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the [inside-out order](#stackOrderInsideOut). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Bryon & Wattenberg for more information.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-shape](https://github.com/d3/d3-shape)"
- name: simulation.alpha()
  id: d3-force#simulation_alpha
  summary: alpha is roughly analogous to temperature in simulated annealing
  belongs_to: force
  description: |-
    ###### *simulation*.**alpha**(\[*alpha*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    *alpha* is roughly analogous to temperature in [simulated annealing](https://en.wikipedia.org/wiki/Simulated_annealing#Overview). It decreases over time as the simulation “cools down”. When *alpha* reaches *alphaMin*, the simulation stops; see [*simulation*.restart](#simulation_restart).

    If *alpha* is specified, sets the current alpha to the specified number in the range \[0,1\] and returns this simulation. If *alpha* is not specified, returns the current alpha value, which defaults to 1.
- name: simulation.alphaDecay()
  id: d3-force#simulation_alphadecay
  summary: If decay is specified, sets the alpha decay rate to the specified number in the range [0,1] and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**alphaDecay**(\[*decay*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *decay* is specified, sets the [*alpha*](#simulation_alpha) decay rate to the specified number in the range \[0,1\] and returns this simulation. If *decay* is not specified, returns the current *alpha* decay rate, which defaults to 0.0228… = 1 - *pow*(0.001, 1 / 300) where 0.001 is the default [minimum *alpha*](#simulation_alphaMin).

    The alpha decay rate determines how quickly the current alpha interpolates towards the desired [target *alpha*](#simulation_alphaTarget); since the default target *alpha* is zero, by default this controls how quickly the simulation cools. Higher decay rates cause the simulation to stabilize more quickly, but risk getting stuck in a local minimum; lower values cause the simulation to take longer to run, but typically converge on a better layout. To have the simulation run forever at the current *alpha*, set the *decay* rate to zero; alternatively, set a [target *alpha*](#simulation_alphaTarget) greater than the [minimum *alpha*](#simulation_alphaMin).
- name: simulation.alphaMin()
  id: d3-force#simulation_alphamin
  summary: If min is specified, sets the minimum alpha to the specified number in the range [0,1] and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**alphaMin**(\[*min*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *min* is specified, sets the minimum *alpha* to the specified number in the range \[0,1\] and returns this simulation. If *min* is not specified, returns the current minimum *alpha* value, which defaults to 0.001. The simulation’s internal timer stops when the current [*alpha*](#simulation_alpha) is less than the minimum *alpha*. The default [alpha decay rate](#simulation_alphaDecay) of ~0.0228 corresponds to 300 iterations.
- name: simulation.alphaTarget()
  id: d3-force#simulation_alphatarget
  summary: If target is specified, sets the current target alpha to the specified number in the range [0,1] and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**alphaTarget**(\[*target*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *target* is specified, sets the current target [*alpha*](#simulation_alpha) to the specified number in the range \[0,1\] and returns this simulation. If *target* is not specified, returns the current target alpha value, which defaults to 0.
- name: simulation.find()
  id: d3-force#simulation_find
  summary: Returns the node closest to the position ⟨x,y⟩ with the given search radius
  belongs_to: force
  description: |-
    ###### *simulation*.**find**(*x*, *y*\[, *radius*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Returns the node closest to the position ⟨*x*,*y*⟩ with the given search *radius*. If *radius* is not specified, it defaults to infinity. If there is no node within the search area, returns undefined.
- name: simulation.force()
  id: d3-force#simulation_force
  summary: If force is specified, assigns the force for the specified name and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**force**(*name*\[, *force*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *force* is specified, assigns the [force](#forces) for the specified *name* and returns this simulation. If *force* is not specified, returns the force with the specified name, or undefined if there is no such force. (By default, new simulations have no forces.) For example, to create a new simulation to layout a graph, you might say:

    ``` javascript
    const simulation = d3.forceSimulation(nodes)
        .force("charge", d3.forceManyBody())
        .force("link", d3.forceLink(links))
        .force("center", d3.forceCenter());
    ```

    To remove the force with the given *name*, pass null as the *force*. For example, to remove the charge force:

    ``` javascript
    simulation.force("charge", null);
    ```
- name: simulation.nodes()
  id: d3-force#simulation_nodes
  summary: If nodes is specified, sets the simulation’s nodes to the specified array of objects, initializing their positions and velocities if necessary, and then re-initializes any bound forces; returns the simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**nodes**(\[*nodes*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *nodes* is specified, sets the simulation’s nodes to the specified array of objects, initializing their positions and velocities if necessary, and then [re-initializes](#force_initialize) any bound [forces](#simulation_force); returns the simulation. If *nodes* is not specified, returns the simulation’s array of nodes as specified to the [constructor](#forceSimulation).

    Each *node* must be an object. The following properties are assigned by the simulation:

    - `index` - the node’s zero-based index into *nodes*
    - `x` - the node’s current *x*-position
    - `y` - the node’s current *y*-position
    - `vx` - the node’s current *x*-velocity
    - `vy` - the node’s current *y*-velocity

    The position ⟨*x*,*y*⟩ and velocity ⟨*vx*,*vy*⟩ may be subsequently modified by [forces](#forces) and by the simulation. If either *vx* or *vy* is NaN, the velocity is initialized to ⟨0,0⟩. If either *x* or *y* is NaN, the position is initialized in a [phyllotaxis arrangement](https://observablehq.com/@d3/force-layout-phyllotaxis), so chosen to ensure a deterministic, uniform distribution.

    To fix a node in a given position, you may specify two additional properties:

    - `fx` - the node’s fixed *x*-position
    - `fy` - the node’s fixed *y*-position

    At the end of each [tick](#simulation_tick), after the application of any forces, a node with a defined *node*.fx has *node*.x reset to this value and *node*.vx set to zero; likewise, a node with a defined *node*.fy has *node*.y reset to this value and *node*.vy set to zero. To unfix a node that was previously fixed, set *node*.fx and *node*.fy to null, or delete these properties.

    If the specified array of *nodes* is modified, such as when nodes are added to or removed from the simulation, this method must be called again with the new (or changed) array to notify the simulation and bound forces of the change; the simulation does not make a defensive copy of the specified array.
- name: simulation.on()
  id: d3-force#simulation_on
  summary: If listener is specified, sets the event listener for the specified typenames and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**on**(*typenames*, \[*listener*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *listener* is specified, sets the event *listener* for the specified *typenames* and returns this simulation. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the `this` context as the simulation.

    The *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `tick.foo` and `tick.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:

    - `tick` - after each tick of the simulation’s internal timer.
    - `end` - after the simulation’s timer stops when *alpha* \< [*alphaMin*](#simulation_alphaMin).

    Note that *tick* events are not dispatched when [*simulation*.tick](#simulation_tick) is called manually; events are only dispatched by the internal timer and are intended for interactive rendering of the simulation. To affect the simulation, register [forces](#simulation_force) instead of modifying nodes’ positions or velocities inside a tick event listener.

    See [*dispatch*.on](d3-dispatch#dispatch_on) for details.

    ### Forces

    A *force* is simply a function that modifies nodes’ positions or velocities; in this context, a *force* can apply a classical physical force such as electrical charge or gravity, or it can resolve a geometric constraint, such as keeping nodes within a bounding box or keeping linked nodes a fixed distance apart. For example, a simple positioning force that moves nodes towards the origin ⟨0,0⟩ might be implemented as:

    ``` javascript
    function force(alpha) {
      for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {
        node = nodes[i];
        node.vx -= node.x * k;
        node.vy -= node.y * k;
      }
    }
    ```

    Forces typically read the node’s current position ⟨*x*,*y*⟩ and then add to (or subtract from) the node’s velocity ⟨*vx*,*vy*⟩. However, forces may also “peek ahead” to the anticipated next position of the node, ⟨*x* + *vx*,*y* + *vy*⟩; this is necessary for resolving geometric constraints through [iterative relaxation](https://en.wikipedia.org/wiki/Relaxation_(iterative_method)). Forces may also modify the position directly, which is sometimes useful to avoid adding energy to the simulation, such as when recentering the simulation in the viewport.

    Simulations typically compose multiple forces as desired. This module provides several for your enjoyment:

    - [Centering](#centering)
    - [Collision](#collision)
    - [Links](#links)
    - [Many-Body](#many-body)
    - [Positioning](#positioning)

    Forces may optionally implement [*force*.initialize](#force_initialize) to receive the simulation’s array of nodes.
- name: simulation.random()
  id: d3-force#simulation_randomsource
  summary: If source is specified, sets the function used to generate random numbers; this should be a function that returns a number between 0 (inclusive) and 1 (exclusive)
  belongs_to: force
  description: |-
    ###### *simulation*.**randomSource**(\[*source*\]) [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js "Source"))

    If *source* is specified, sets the function used to generate random numbers; this should be a function that returns a number between 0 (inclusive) and 1 (exclusive). If *source* is not specified, returns this simulation’s current random source which defaults to a fixed-seed [linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator). See also [*random*.source](d3-random#random_source).
- name: simulation.restart()
  id: d3-force#simulation_restart
  summary: Restarts the simulation’s internal timer and returns the simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**restart**() · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Restarts the simulation’s internal timer and returns the simulation. In conjunction with [*simulation*.alphaTarget](#simulation_alphaTarget) or [*simulation*.alpha](#simulation_alpha), this method can be used to “reheat” the simulation during interaction, such as when dragging a node, or to resume the simulation after temporarily pausing it with [*simulation*.stop](#simulation_stop).
- name: simulation.stop()
  id: d3-force#simulation_stop
  summary: Stops the simulation’s internal timer, if it is running, and returns the simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**stop**() · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Stops the simulation’s internal timer, if it is running, and returns the simulation. If the timer is already stopped, this method does nothing. This method is useful for running the simulation manually; see [*simulation*.tick](#simulation_tick).
- name: simulation.tick()
  id: d3-force#simulation_tick
  summary: Manually steps the simulation by the specified number of iterations, and returns the simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**tick**(\[*iterations*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    Manually steps the simulation by the specified number of *iterations*, and returns the simulation. If *iterations* is not specified, it defaults to 1 (single step).

    For each iteration, it increments the current [*alpha*](#simulation_alpha) by ([*alphaTarget*](#simulation_alphaTarget) - *alpha*) × [*alphaDecay*](#simulation_alphaDecay); then invokes each registered [force](#simulation_force), passing the new *alpha*; then decrements each [node](#simulation_nodes)’s velocity by *velocity* × [*velocityDecay*](#simulation_velocityDecay); lastly increments each node’s position by *velocity*.

    This method does not dispatch [events](#simulation_on); events are only dispatched by the internal timer when the simulation is started automatically upon [creation](#forceSimulation) or by calling [*simulation*.restart](#simulation_restart). The natural number of ticks when the simulation is started is ⌈*log*([*alphaMin*](#simulation_alphaMin)) / *log*(1 - [*alphaDecay*](#simulation_alphaDecay))⌉; by default, this is 300.

    This method can be used in conjunction with [*simulation*.stop](#simulation_stop) to compute a [static force layout](https://bl.ocks.org/mbostock/1667139). For large graphs, static layouts should be computed [in a web worker](https://bl.ocks.org/mbostock/01ab2e85e8727d6529d20391c0fd9a16) to avoid freezing the user interface.
- name: simulation.velocityDecay()
  id: d3-force#simulation_velocitydecay
  summary: If decay is specified, sets the velocity decay factor to the specified number in the range [0,1] and returns this simulation
  belongs_to: force
  description: |-
    ###### *simulation*.**velocityDecay**(\[*decay*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/simulation.js)

    If *decay* is specified, sets the velocity decay factor to the specified number in the range \[0,1\] and returns this simulation. If *decay* is not specified, returns the current velocity decay factor, which defaults to 0.4. The decay factor is akin to atmospheric friction; after the application of any forces during a [tick](#simulation_tick), each node’s velocity is multiplied by 1 - *decay*. As with lowering the [alpha decay rate](#simulation_alphaDecay), less velocity decay may converge on a better solution, but risks numerical instabilities and oscillation.
- name: site
  id: d3-voronoi#site
  summary: null
  belongs_to: voronoi
  description: |-
    ###### *site*

    Each site in the diagram is an array \[*x*, *y*\] with two additional properties:

    - `index` - the site’s index, corresponding to the associated input point.
    - `data` - the input data corresponding to this site.

    &nbsp;
- name: squarify.ratio()
  id: d3-hierarchy#squarify_ratio
  summary: Specifies the desired aspect ratio of the generated rectangles
  belongs_to: hierarchy
  description: |-
    ###### *squarify*.**ratio**(*ratio*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/treemap/squarify.js), [Examples](https://observablehq.com/@d3/treemap)

    Specifies the desired aspect ratio of the generated rectangles. The *ratio* must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose *width*:*height* ratio is either 2:1 or 1:2. (However, you can approximately achieve this result by generating a square treemap at different dimensions, and then [stretching the treemap](https://observablehq.com/@d3/stretched-treemap) to the desired aspect ratio.) Furthermore, the specified *ratio* is merely a hint to the tiling algorithm; the rectangles are not guaranteed to have the specified aspect ratio. If not specified, the aspect ratio defaults to the golden ratio, φ = (1 + sqrt(5)) / 2, per [Kong *et al.*](http://vis.stanford.edu/papers/perception-treemaps)
- name: stack()
  id: d3-shape#_stack
  summary: Generates a stack for the given array of data, returning an array representing each series
  belongs_to: shape
  description: |-
    ###### *stack*(*data*\[, *arguments…*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    Generates a stack for the given array of *data*, returning an array representing each series. Any additional *arguments* are arbitrary; they are simply propagated to accessors along with the `this` object.

    The series are determined by the [keys accessor](#stack_keys); each series *i* in the returned array corresponds to the *i*th key. Each series is an array of points, where each point *j* corresponds to the *j*th element in the input *data*. Lastly, each point is represented as an array \[*y0*, *y1*\] where *y0* is the lower value (baseline) and *y1* is the upper value (topline); the difference between *y0* and *y1* corresponds to the computed [value](#stack_value) for this point. The key for each series is available as *series*.key, and the [index](#stack_order) as *series*.index. The input data element for each point is available as *point*.data.

    For example, consider the following table representing monthly sales of fruits:

    | Month  | Apples | Bananas | Cherries | Durians |
    |--------|--------|---------|----------|---------|
    | 1/2015 | 3840   | 1920    | 960      | 400     |
    | 2/2015 | 1600   | 1440    | 960      | 400     |
    | 3/2015 | 640    | 960     | 640      | 400     |
    | 4/2015 | 320    | 480     | 640      | 400     |

    This might be represented in JavaScript as an array of objects:

    ``` javascript
    const data = [
      {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, durians: 400},
      {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, durians: 400},
      {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, durians: 400},
      {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, durians: 400}
    ];
    ```

    To produce a stack for this data:

    ``` javascript
    const stack = d3.stack()
        .keys(["apples", "bananas", "cherries", "durians"])
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetNone);

    const series = stack(data);
    ```

    The resulting array has one element per *series*. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:

    ``` javascript
    [
      [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples
      [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas
      [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries
      [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // durians
    ]
    ```

    Each series in then typically passed to an [area generator](#areas) to render an area chart, or used to construct rectangles for a bar chart.
- name: stack.keys()
  id: d3-shape#stack_keys
  summary: If keys is specified, sets the keys accessor to the specified function or array and returns this stack generator
  belongs_to: shape
  description: |-
    ###### *stack*.**keys**(\[*keys*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    If *keys* is specified, sets the keys accessor to the specified function or array and returns this stack generator. If *keys* is not specified, returns the current keys accessor, which defaults to the empty array. A series (layer) is [generated](#_stack) for each key. Keys are typically strings, but they may be arbitrary values. The series’ key is passed to the [value accessor](#stack_value), along with each data point, to compute the point’s value.
- name: stack.offset()
  id: d3-shape#stack_offset
  summary: If offset is specified, sets the offset accessor to the specified function and returns this stack generator
  belongs_to: shape
  description: |-
    ###### *stack*.**offset**(\[*offset*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    If *offset* is specified, sets the offset accessor to the specified function and returns this stack generator. If *offset* is not specified, returns the current offset acccesor, which defaults to [stackOffsetNone](#stackOffsetNone); this uses a zero baseline. See [stack offsets](#stack-offsets) for the built-in offsets.

    The offset function is passed the generated series array and the order index array; it is then responsible for updating the lower and upper values in the series array. For example, the default offset is defined as:

    ``` javascript
    function offsetNone(series, order) {
      if (!((n = series.length) > 1)) return;
      for (let i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (let j = 0; j < m; ++j) {
          s1[j][1] += s1[j][0] = s0[j][1];
        }
      }
    }
    ```

    ### Stack Orders

    Stack orders are typically not used directly, but are instead passed to [*stack*.order](#stack_order).
- name: stack.order()
  id: d3-shape#stack_order
  summary: If order is specified, sets the order accessor to the specified function or array and returns this stack generator
  belongs_to: shape
  description: |-
    ###### *stack*.**order**(\[*order*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    If *order* is specified, sets the order accessor to the specified function or array and returns this stack generator. If *order* is not specified, returns the current order accessor, which defaults to [stackOrderNone](#stackOrderNone); this uses the order given by the [key accessor](#stack_key). See [stack orders](#stack-orders) for the built-in orders.

    If *order* is a function, it is passed the generated series array and must return an array of numeric indexes representing the stack order. For example, the default order is defined as:

    ``` javascript
    function orderNone(series) {
      let n = series.length;
      const o = new Array(n);
      while (--n >= 0) o[n] = n;
      return o;
    }
    ```

    The stack order is computed prior to the [offset](#stack_offset); thus, the lower value for all points is zero at the time the order is computed. The index attribute for each series is also not set until after the order is computed.
- name: stack.value()
  id: d3-shape#stack_value
  summary: If value is specified, sets the value accessor to the specified function or number and returns this stack generator
  belongs_to: shape
  description: |-
    ###### *stack*.**value**(\[*value*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

    If *value* is specified, sets the value accessor to the specified function or number and returns this stack generator. If *value* is not specified, returns the current value accessor, which defaults to:

    ``` javascript
    function value(d, key) {
      return d[key];
    }
    ```

    Thus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see [*stack*](#_stack) for an example.
- name: stratify()
  id: d3-hierarchy#_stratify
  summary: Generates a new hierarchy from the specified tabular data
  belongs_to: hierarchy
  description: |-
    ###### *stratify*(*data*) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)

    Generates a new hierarchy from the specified tabular *data*.
- name: stratify.id()
  id: d3-hierarchy#stratify_id
  summary: If id is specified, sets the id accessor to the given function and returns this stratify operator
  belongs_to: hierarchy
  description: |-
    ###### *stratify*.**id**(\[*id*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)

    If *id* is specified, sets the id accessor to the given function and returns this stratify operator. Otherwise, returns the current id accessor, which defaults to:

    ``` javascript
    function id(d) {
      return d.id;
    }
    ```

    The id accessor is invoked for each element in the input data passed to the [stratify operator](#_stratify), being passed the current datum (*d*) and the current index (*i*). The returned string is then used to identify the node’s relationships in conjunction with the [parent id](#stratify_parentId). For leaf nodes, the id may be undefined; otherwise, the id must be unique. (Null and the empty string are equivalent to undefined.)
- name: stratify.parentId()
  id: d3-hierarchy#stratify_parentid
  summary: If parentId is specified, sets the parent id accessor to the given function and returns this stratify operator
  belongs_to: hierarchy
  description: |-
    ###### *stratify*.**parentId**(\[*parentId*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)

    If *parentId* is specified, sets the parent id accessor to the given function and returns this stratify operator. Otherwise, returns the current parent id accessor, which defaults to:

    ``` javascript
    function parentId(d) {
      return d.parentId;
    }
    ```

    The parent id accessor is invoked for each element in the input data passed to the [stratify operator](#_stratify), being passed the current datum (*d*) and the current index (*i*). The returned string is then used to identify the node’s relationships in conjunction with the [id](#stratify_id). For the root node, the parent id should be undefined. (Null and the empty string are equivalent to undefined.) There must be exactly one root node in the input data, and no circular relationships.
- name: stratify.path()
  id: d3-hierarchy#stratify_path
  summary: If path is specified, sets the path accessor to the given function and returns this stratify operator
  belongs_to: hierarchy
  description: |-
    ###### *stratify*.**path**(\[*path*\]) · [Source](https://github.com/d3/d3-hierarchy/blob/main/src/stratify.js), [Examples](https://observablehq.com/@d3/d3-stratify)

    If *path* is specified, sets the path accessor to the given function and returns this stratify operator. Otherwise, returns the current path accessor, which defaults to undefined. If a path accessor is set, the id and parentId arguments are ignored, and a unix-like hierarchy is computed on the slash-delimited strings returned by the path accessor, imputing parent nodes and ids as necessary.

    ``` javascript
    d3.stratify().path(d => d)(["a/b", "a/c"]); // nodes with id "/a", "/a/b", "/a/c"
    ```
- name: stream.lineEnd()
  id: d3-geo#stream_lineend
  summary: Indicates the end of a line or ring
  belongs_to: geo
  description: |-
    ###### *stream*.**lineEnd**()

    Indicates the end of a line or ring. Within a polygon, indicates the end of a ring. Unlike GeoJSON, the redundant closing coordinate of a ring is *not* indicated via [point](#point), and instead is implied via lineEnd within a polygon. Thus, the given polygon input:

    ``` javascript
    {
      "type": "Polygon",
      "coordinates": [
        [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]
      ]
    }
    ```

    Will produce the following series of method calls on the stream:

    ``` javascript
    stream.polygonStart();
    stream.lineStart();
    stream.point(0, 0);
    stream.point(0, 1);
    stream.point(1, 1);
    stream.point(1, 0);
    stream.lineEnd();
    stream.polygonEnd();
    ```
- name: stream.lineStart()
  id: d3-geo#stream_linestart
  summary: Indicates the start of a line or ring
  belongs_to: geo
  description: |-
    ###### *stream*.**lineStart**()

    Indicates the start of a line or ring. Within a polygon, indicates the start of a ring. The first ring of a polygon is the exterior ring, and is typically clockwise. Any subsequent rings indicate holes in the polygon, and are typically counterclockwise.
- name: stream.point()
  id: d3-geo#stream_point
  summary: Indicates a point with the specified coordinates x and y (and optionally z)
  belongs_to: geo
  description: |-
    ###### *stream*.**point**(*x*, *y*\[, *z*\])

    Indicates a point with the specified coordinates *x* and *y* (and optionally *z*). The coordinate system is unspecified and implementation-dependent; for example, [projection streams](d3-geo-projection) require spherical coordinates in degrees as input. Outside the context of a polygon or line, a point indicates a point geometry object ([Point](http://www.geojson.org/geojson-spec.html#point) or [MultiPoint](http://www.geojson.org/geojson-spec.html#multipoint)). Within a line or polygon ring, the point indicates a control point.
- name: stream.polygonEnd()
  id: d3-geo#stream_polygonend
  summary: Indicates the end of a polygon
  belongs_to: geo
  description: |-
    ###### *stream*.**polygonEnd**()

    Indicates the end of a polygon.
- name: stream.polygonStart()
  id: d3-geo#stream_polygonstart
  summary: Indicates the start of a polygon
  belongs_to: geo
  description: |-
    ###### *stream*.**polygonStart**()

    Indicates the start of a polygon. The first line of a polygon indicates the exterior ring, and any subsequent lines indicate interior holes.
- name: stream.sphere()
  id: d3-geo#stream_sphere
  summary: Indicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩)
  belongs_to: geo
  description: |-
    ###### *stream*.**sphere**()

    Indicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩).

    ### Transforms

    Transforms are a generalization of projections. Transform implement [*projection*.stream](#projection_stream) and can be passed to [*path*.projection](#path_projection). However, they only implement a subset of the other projection methods, and represent arbitrary geometric transformations rather than projections from spherical to planar coordinates.
- name: symbol()
  id: d3-shape#_symbol
  summary: Generates a symbol for the given arguments
  belongs_to: shape
  description: |-
    ###### *symbol*(*arguments*…) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    Generates a symbol for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the symbol generator’s accessor functions along with the `this` object. For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels. If the symbol generator has a [context](#symbol_context), then the symbol is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.
- name: symbol.context()
  id: d3-shape#symbol_context
  summary: If context is specified, sets the context and returns this symbol generator
  belongs_to: shape
  description: |-
    ###### *symbol*.**context**(\[*context*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    If *context* is specified, sets the context and returns this symbol generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated symbol](#_symbol) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated symbol is returned.
- name: symbol.digits()
  id: d3-shape#symbol_digits
  summary: If digits is specified, sets the maximum number of digits after the decimal separator and returns this symbol generator
  belongs_to: shape
  description: |-
    ###### *symbol*.**digits**(\[*digits*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this symbol generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#symbol_context) is null, as when this symbol generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).
- name: symbol.size()
  id: d3-shape#symbol_size
  summary: If size is specified, sets the size to the specified function or number and returns this symbol generator
  belongs_to: shape
  description: |-
    ###### *symbol*.**size**(\[*size*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    If *size* is specified, sets the size to the specified function or number and returns this symbol generator. If *size* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](d3-selection#selection_attr) if you are using d3-selection.) If *size* is not specified, returns the current size accessor, which defaults to:

    ``` javascript
    function size() {
      return 64;
    }
    ```

    Specifying the size as a function is useful for constructing a scatterplot with a size encoding. If you wish to scale the symbol to fit a given bounding box, rather than by area, try [SVG’s getBBox](https://observablehq.com/d/1fac2626b9e1b65f).
- name: symbol.type()
  id: d3-shape#symbol_type
  summary: If type is specified, sets the symbol type to the specified function or symbol type and returns this symbol generator
  belongs_to: shape
  description: |-
    ###### *symbol*.**type**(\[*type*\]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

    If *type* is specified, sets the symbol type to the specified function or symbol type and returns this symbol generator. If *type* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](d3-selection#selection_attr) if you are using d3-selection.) If *type* is not specified, returns the current symbol type accessor, which defaults to:

    ``` javascript
    function type() {
      return circle;
    }
    ```

    See [symbolsFill](#symbolsFill) and [symbolsStroke](#symbolsStroke) for built-in symbol types. To implement a custom symbol type, pass an object that implements [*symbolType*.draw](#symbolType_draw).
- name: symbolType.draw()
  id: d3-shape#symboltype_draw
  summary: Renders this symbol type to the specified context with the specified size in square pixels
  belongs_to: shape
  description: |-
    ###### *symbolType*.**draw**(*context*, *size*)

    Renders this symbol type to the specified *context* with the specified *size* in square pixels. The *context* implements the [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods) interface. (Note that this is a subset of the CanvasRenderingContext2D interface!)

    ### Stacks

    Some shape types can be stacked, placing one shape adjacent to another. For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically. This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.

    Stacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned. So, chose the [stack order](#stack_order) carefully, and consider a [streamgraph](#stackOffsetWiggle). (See also [grouped charts](https://observablehq.com/@d3/grouped-bar-chart).)

    Like the [pie generator](#pies), the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an [area generator](#areas) or use directly, say to position bars.
- name: symlog.constant()
  id: d3-scale#symlog_constant
  summary: If constant is specified, sets the symlog constant to the specified number and returns this scale; otherwise returns the current value of the symlog constant, which defaults to 1
  belongs_to: scale
  description: |-
    ###### *symlog*.**constant**(\[*constant*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/symlog.js), [Examples](https://observablehq.com/@d3/continuous-scales)

    If *constant* is specified, sets the symlog constant to the specified number and returns this scale; otherwise returns the current value of the symlog constant, which defaults to 1. See “A bi-symmetric log transformation for wide-range data” by Webber for more.

    #### Identity Scales

    Identity scales are a special case of [linear scales](#linear-scales) where the domain and range are identical; the scale and its invert method are thus the identity function. These scales are occasionally useful when working with pixel coordinates, say in conjunction with an axis. Identity scales do not support [rangeRound](#continuous_rangeRound), [clamp](#continuous_clamp) or [interpolate](#continuous_interpolate).
- name: threshold()
  id: d3-scale#_threshold
  summary: Given a value in the input domain, returns the corresponding value in the output range
  belongs_to: scale
  description: |-
    ###### *threshold*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Given a *value* in the input [domain](#threshold_domain), returns the corresponding value in the output [range](#threshold_range). For example:

    ``` javascript
    var color = d3.scaleThreshold()
        .domain([0, 1])
        .range(["red", "white", "green"]);

    color(-1);   // "red"
    color(0);    // "white"
    color(0.5);  // "white"
    color(1);    // "green"
    color(1000); // "green"
    ```
- name: threshold.copy()
  id: d3-scale#threshold_copy
  summary: Returns an exact copy of this scale
  belongs_to: scale
  description: |-
    ###### *threshold*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.

    ### Ordinal Scales

    Unlike [continuous scales](#continuous-scales), ordinal scales have a discrete domain and range. For example, an ordinal scale might map a set of named categories to a set of colors, or determine the horizontal positions of columns in a column chart.
- name: threshold.domain()
  id: d3-scale#threshold_domain
  summary: If domain is specified, sets the scale’s domain to the specified array of values
  belongs_to: scale
  description: |-
    ###### *threshold*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *domain* is specified, sets the scale’s domain to the specified array of values. The values must be in ascending order or the behavior of the scale is undefined. The values are typically numbers, but any naturally ordered values (such as strings) will work; a threshold scale can be used to encode any type that is ordered. If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N. If there are fewer than N elements in the domain, the additional values in the range are ignored. If there are more than N elements in the domain, the scale may return undefined for some inputs. If *domain* is not specified, returns the scale’s current domain.
- name: threshold.invertExtent()
  id: d3-scale#threshold_invertextent
  summary: Returns the extent of values in the domain [x0, x1] for the corresponding value in the range, representing the inverse mapping from range to domain
  belongs_to: scale
  description: |-
    ###### *threshold*.**invertExtent**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/choropleth)

    Returns the extent of values in the [domain](#threshold_domain) \[*x0*, *x1*\] for the corresponding *value* in the [range](#threshold_range), representing the inverse mapping from range to domain. This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse. For example:

    ``` javascript
    var color = d3.scaleThreshold()
        .domain([0, 1])
        .range(["red", "white", "green"]);

    color.invertExtent("red"); // [undefined, 0]
    color.invertExtent("white"); // [0, 1]
    color.invertExtent("green"); // [1, undefined]
    ```
- name: threshold.range()
  id: d3-scale#threshold_range
  summary: If range is specified, sets the scale’s range to the specified array of values
  belongs_to: scale
  description: |-
    ###### *threshold*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/threshold.js), [Examples](https://observablehq.com/@d3/quantile-quantize-and-threshold-scales)

    If *range* is specified, sets the scale’s range to the specified array of values. If the number of values in the scale’s domain is N, the number of values in the scale’s range must be N+1. If there are fewer than N+1 elements in the range, the scale may return undefined for some inputs. If there are more than N+1 elements in the range, the additional values are ignored. The elements in the given array need not be numbers; any value or type will work. If *range* is not specified, returns the scale’s current range.
- name: tile
  id: d3-tile
  summary: Quadtree tiles are common for representing large, multi-resolution geometry and images, as in “slippy” maps
  description: "# d3-tile\n\nQuadtree tiles are common for representing large, multi-resolution geometry and images, as in “slippy” maps. d3.tile provides a convenient mechanism for computing which tile coordinates should be visible in the given viewport. Unlike dedicated libraries for slippy maps, such as [Leaflet](https://leafletjs.com/), d3.tile’s tiny, low-level API is agnostic about how the tiles are presented and offers greater flexibility. d3.tile works well with [d3-geo](d3-geo) for geographic maps and [d3-zoom](d3-zoom) for interaction.\n\nFor examples, see the [d3-tile collection](https://observablehq.com/collection/@d3/d3-tile) on Observable.\n\n## Installing\n\nIf you use NPM, `npm install d3-tile`. Otherwise, download the [latest release](https://github.com/d3/d3-tile/releases/latest). You can also load directly as a [standalone library](https://cdn.jsdelivr.net/npm/d3-tile). ES modules, AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-tile@1\"></script>\n<script>\n\nconst tile = d3.tile();\nconst tiles = tile({k: 256, x: 480, y: 250});\n\n</script>\n```\n\n## API Reference\n\n###### d3.**tile**() · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/collection/@d3/d3-tile)\n\nConstructs a new tile layout with the default settings.\n\n``` javascript\nconst tile = d3.tile();\n```\n\n###### *tile*(…*arguments*) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/collection/@d3/d3-tile)\n\nComputes the set of tiles to display given the current settings, computing the [scale](#tile_scale) and [translate](#tile_translate) by invoking the corresponding accessors with the given *arguments*. Returns an array of \\[*x*, *y*, *z*\\] arrays representing the *x*- (horizontal), *y*- (vertical) and *z*- (zoom) integer coordinates of any tiles which intersect the current viewport; these are the “visible” tiles. The returned tiles array also has tiles.*scale* and tiles.*translate* properties which together with an individual tile’s *x* and *y* determine the intended location of the tile in the viewport.\n\nFor example, the following function computes the pixel coordinates of the top-left corner of the given tile in the current viewport:\n\n``` javascript\nfunction position(tile, tiles) {\n  const [x, y] = tile;\n  const {translate: [tx, ty], scale: k} = tiles;\n  return [(x + tx) * k, (y + ty) * k];\n}\n```\n\nAnd in use:\n\n``` javascript\nconst tile = d3.tile();\nconst tiles = tile({k: 256, x: 480, y: 250});\nfor (const t of tiles) {\n  console.log(`tile ${t} is at ${position(t, tiles)}`);\n}\n```\n\nSee [Zoomable Tiles](https://observablehq.com/@d3/zoomable-tiles) for more information on tile coordinates.\n\n###### *tile*.**extent**(\\[*extent*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *extent* is specified, sets this tile layout’s viewport extent to the specified array \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where \\[*x0*, *y0*\\] is the top-left corner and \\[*x1*, *y1*\\] is the bottom-right corner, and returns this tile layout. If *extent* is not specified, returns the current viewport extent, which defaults to \\[\\[0, 0\\], \\[960, 500\\]\\].\n\n``` javascript\nconst tile = d3.tile().extent([[100, 200], [300, 400]]);\n```\n\nSetting the viewport extent implicitly sets the [viewport size](#tile_size).\n\n###### *tile*.**size**(\\[*size*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *size* is specified, sets this tile layout’s viewport size to the specified array of numbers \\[*width*, *height*\\] and returns this tile layout. If *size* is not specified, returns the current viewport size, which defaults to \\[960, 500\\].\n\n``` javascript\nconst tile = d3.tile().size([200, 200]);\n```\n\nThis is a convenience method for setting the [viewport extent](#tile_extent) to \\[\\[0, 0\\], \\[*width*, *height*\\]\\].\n\n###### *tile*.**scale**(\\[*scale*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *scale* is specified, sets this tile layout’s scale function and returns this tile layout. If *scale* is a function, it is invoked when the [tile layout](#_tile) is invoked, being passed the same arguments as the tile layout; this function must return a number indicating the desired width and height of the world tile \\[0, 0, 0\\].\n\n``` javascript\nconst tile = d3.tile().scale(t => t.scale).translate(t => t.translate);\nconst tiles = tile({scale: 1024, translate: [100, 200]});\n```\n\nIf *scale* is not a function, it assumed to be a constant number, and is wrapped in a function.\n\n``` javascript\nconst tile = d3.tile().scale(1024).translate([100, 200]);\n```\n\nIf *scale* is not specified, returns the current layout scale function, which defaults to:\n\n``` javascript\nfunction scale(transform) {\n  return transform.k;\n}\n```\n\nThis default is compatible with a [d3-zoom transform](d3-zoom#zoom-transforms).\n\n###### *tile*.**translate**(\\[*translate*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *translate* is specified, sets this tile layout’s translate function and returns this tile layout. If *translate* is a function, it is invoked when the [tile layout](#_tile) is invoked, being passed the same arguments as the tile layout; this function must return an array of numbers \\[*x*, *y*\\] indicating the desired coordinates the center of the world tile \\[0, 0, 0\\].\n\n``` javascript\nconst tile = d3.tile().scale(t => t.scale).translate(t => t.translate);\nconst tiles = tile({scale: 1024, translate: [100, 200]});\n```\n\nIf *translate* is not a function, it is assumed to be a constant array \\[*x*, *y*\\] and is wrapped in a function.\n\n``` javascript\nconst tile = d3.tile().scale(1024).translate([100, 200]);\n```\n\nIf *translate* is not specified, returns the current layout translate function, which defaults to:\n\n``` javascript\nfunction translate(transform) {\n  return [transform.x, transform.y];\n}\n```\n\nThis default is compatible with a [d3-zoom transform](d3-zoom#zoom-transforms).\n\n###### *tile*.**clampX**(\\[*clamp*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/wrapped-tiles)\n\nIf *clamp* is specified, sets whether or not the visible tiles will be clamped in the *x*-dimension and returns this tile layout. If *clamp* is not specified, returns whether *x*-clamping is enabled, which defaults to true. If *x*-clamping is disabled, then the tile layout may return tiles that are outside the normal bounds 0 ≤ *x* \\< 2^*z* of the “world” tile \\[0, 0, 0\\].\n\n``` javascript\nconst tile = d3.tile().clampX(false);\n```\n\nSee [d3.tileWrap](#tileWrap) for converting these coordinates to wrapped in-world coordinates, and [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example.\n\n###### *tile*.**clampY**(\\[*clamp*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *clamp* is specified, sets whether or not the visible tiles will be clamped in the *y*-dimension and returns this tile layout. If *clamp* is not specified, returns whether *y*-clamping is enabled, which defaults to true. If *y*-clamping is disabled, then the tile layout may return tiles that are outside the normal bounds 0 ≤ *y* \\< 2^*z* of the “world” tile \\[0, 0, 0\\].\n\n``` javascript\nconst tile = d3.tile().clampY(false);\n```\n\nSee [d3.tileWrap](#tileWrap) for converting these coordinates to wrapped in-world coordinates, and [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example. See also [*tile*.clampX](#tile_clampX).\n\n###### *tile*.**clamp**(\\[*clamp*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)\n\nIf *clamp* is specified, sets [*tile*.clampX](#tile_clampX) and [*tile*.clampY](#tile_clampY) to the specified boolean *clamp* and returns this tile layout. If *clamp* is not specified, returns true if *tile*.clampX and *tile*.clampY are both true, and false otherwise.\n\n``` javascript\nconst tile = d3.tile().clamp(false);\n```\n\n###### *tile*.**tileSize**(\\[*tileSize*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/tile-tilesize)\n\nIf *tileSize* is specified, sets this tile layout’s tile width and height to the specified number *tileSize* and returns this tile layout. If *tileSize* is not specified, returns the current layout tile size, which defaults to 256. 256 and 512 are the most common tile sizes.\n\n``` javascript\nconst tile = d3.tile().tileSize(512);\n```\n\n###### *tile*.**zoomDelta**(\\[*zoomDelta*\\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/tile-zoomdelta)\n\nIf *zoomDelta* is specified, sets this tile layout’s zoom offset to the specified number *zoomDelta* and returns this tile layout. If *zoomDelta* is not specified, returns the current zoom offset, which defaults to 0. The zoom offset affects which *z*-coordinate is chosen based on the current [scale](#tile_scale); the default zoom offset of 0 will choose the *z* that is closest the displayed size; a zoom offset of -1 will use *z* - 1, giving tiles that are twice as big (lower resolution); a zoom offset of +1 will use *z* + 1, giving tiles that are twice as small (higher resolution). The latter might be appropriate for showing 256×256 tiles in a 128×128 space on a high-resolution screen.\n\n``` javascript\nconst tile = d3.tile().zoomDelta(2);\n```\n\n###### d3.**tileWrap**(*tile*) · [Source](https://github.com/d3/d3-tile/blob/master/src/wrap.js), [Examples](https://observablehq.com/@d3/wrapped-tiles)\n\nGiven *tile* coordinates \\[*x*, *y*, *z*\\], where *x* and *y* may be outside the “world” tile \\[0, 0, 0\\], returns the wrapped tile coordinates \\[*x′*, *y′*, *z*\\] where *j* = 2 ^ *z*, *x′* = *x* - ⌊*x* / *j*⌋ \\* *j* and *y′* = *y* - ⌊*y* / *j*⌋ \\* *j*. This function is most commonly used in conjunction with [*tile*.clampX](#tile_clampX) to allow horizontal wrapping of web Mercator tiles.\n\n``` javascript\nd3.tileWrap([-1, 0, 1]) // [1, 0, 1]\nd3.tileWrap([-1, 0, 2]) // [3, 0, 2]\n```\n\nSee [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-tile](https://github.com/d3/d3-tile)"
- name: tile()
  id: d3-tile#_tile
  summary: Computes the set of tiles to display given the current settings, computing the scale and translate by invoking the corresponding accessors with the given arguments
  belongs_to: tile
  description: |-
    ###### *tile*(…*arguments*) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/collection/@d3/d3-tile)

    Computes the set of tiles to display given the current settings, computing the [scale](#tile_scale) and [translate](#tile_translate) by invoking the corresponding accessors with the given *arguments*. Returns an array of \[*x*, *y*, *z*\] arrays representing the *x*- (horizontal), *y*- (vertical) and *z*- (zoom) integer coordinates of any tiles which intersect the current viewport; these are the “visible” tiles. The returned tiles array also has tiles.*scale* and tiles.*translate* properties which together with an individual tile’s *x* and *y* determine the intended location of the tile in the viewport.

    For example, the following function computes the pixel coordinates of the top-left corner of the given tile in the current viewport:

    ``` javascript
    function position(tile, tiles) {
      const [x, y] = tile;
      const {translate: [tx, ty], scale: k} = tiles;
      return [(x + tx) * k, (y + ty) * k];
    }
    ```

    And in use:

    ``` javascript
    const tile = d3.tile();
    const tiles = tile({k: 256, x: 480, y: 250});
    for (const t of tiles) {
      console.log(`tile ${t} is at ${position(t, tiles)}`);
    }
    ```

    See [Zoomable Tiles](https://observablehq.com/@d3/zoomable-tiles) for more information on tile coordinates.
- name: tile.clamp()
  id: d3-tile#tile_clamp
  summary: If clamp is specified, sets tile.clampX and tile.clampY to the specified boolean clamp and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**clamp**(\[*clamp*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *clamp* is specified, sets [*tile*.clampX](#tile_clampX) and [*tile*.clampY](#tile_clampY) to the specified boolean *clamp* and returns this tile layout. If *clamp* is not specified, returns true if *tile*.clampX and *tile*.clampY are both true, and false otherwise.

    ``` javascript
    const tile = d3.tile().clamp(false);
    ```
- name: tile.clampX()
  id: d3-tile#tile_clampx
  summary: If clamp is specified, sets whether or not the visible tiles will be clamped in the x-dimension and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**clampX**(\[*clamp*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/wrapped-tiles)

    If *clamp* is specified, sets whether or not the visible tiles will be clamped in the *x*-dimension and returns this tile layout. If *clamp* is not specified, returns whether *x*-clamping is enabled, which defaults to true. If *x*-clamping is disabled, then the tile layout may return tiles that are outside the normal bounds 0 ≤ *x* \< 2^*z* of the “world” tile \[0, 0, 0\].

    ``` javascript
    const tile = d3.tile().clampX(false);
    ```

    See [d3.tileWrap](#tileWrap) for converting these coordinates to wrapped in-world coordinates, and [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example.
- name: tile.clampY()
  id: d3-tile#tile_clampy
  summary: If clamp is specified, sets whether or not the visible tiles will be clamped in the y-dimension and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**clampY**(\[*clamp*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *clamp* is specified, sets whether or not the visible tiles will be clamped in the *y*-dimension and returns this tile layout. If *clamp* is not specified, returns whether *y*-clamping is enabled, which defaults to true. If *y*-clamping is disabled, then the tile layout may return tiles that are outside the normal bounds 0 ≤ *y* \< 2^*z* of the “world” tile \[0, 0, 0\].

    ``` javascript
    const tile = d3.tile().clampY(false);
    ```

    See [d3.tileWrap](#tileWrap) for converting these coordinates to wrapped in-world coordinates, and [Wrapped Tiles](https://observablehq.com/@d3/wrapped-tiles) for example. See also [*tile*.clampX](#tile_clampX).
- name: tile.extent()
  id: d3-tile#tile_extent
  summary: If extent is specified, sets this tile layout’s viewport extent to the specified array [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner and [x1, y1] is the bottom-right corner, and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**extent**(\[*extent*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *extent* is specified, sets this tile layout’s viewport extent to the specified array \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where \[*x0*, *y0*\] is the top-left corner and \[*x1*, *y1*\] is the bottom-right corner, and returns this tile layout. If *extent* is not specified, returns the current viewport extent, which defaults to \[\[0, 0\], \[960, 500\]\].

    ``` javascript
    const tile = d3.tile().extent([[100, 200], [300, 400]]);
    ```

    Setting the viewport extent implicitly sets the [viewport size](#tile_size).
- name: tile.scale()
  id: d3-tile#tile_scale
  summary: If scale is specified, sets this tile layout’s scale function and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**scale**(\[*scale*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *scale* is specified, sets this tile layout’s scale function and returns this tile layout. If *scale* is a function, it is invoked when the [tile layout](#_tile) is invoked, being passed the same arguments as the tile layout; this function must return a number indicating the desired width and height of the world tile \[0, 0, 0\].

    ``` javascript
    const tile = d3.tile().scale(t => t.scale).translate(t => t.translate);
    const tiles = tile({scale: 1024, translate: [100, 200]});
    ```

    If *scale* is not a function, it assumed to be a constant number, and is wrapped in a function.

    ``` javascript
    const tile = d3.tile().scale(1024).translate([100, 200]);
    ```

    If *scale* is not specified, returns the current layout scale function, which defaults to:

    ``` javascript
    function scale(transform) {
      return transform.k;
    }
    ```

    This default is compatible with a [d3-zoom transform](d3-zoom#zoom-transforms).
- name: tile.size()
  id: d3-tile#tile_size
  summary: If size is specified, sets this tile layout’s viewport size to the specified array of numbers [width, height] and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**size**(\[*size*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *size* is specified, sets this tile layout’s viewport size to the specified array of numbers \[*width*, *height*\] and returns this tile layout. If *size* is not specified, returns the current viewport size, which defaults to \[960, 500\].

    ``` javascript
    const tile = d3.tile().size([200, 200]);
    ```

    This is a convenience method for setting the [viewport extent](#tile_extent) to \[\[0, 0\], \[*width*, *height*\]\].
- name: tile.tileSize()
  id: d3-tile#tile_tilesize
  summary: If tileSize is specified, sets this tile layout’s tile width and height to the specified number tileSize and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**tileSize**(\[*tileSize*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/tile-tilesize)

    If *tileSize* is specified, sets this tile layout’s tile width and height to the specified number *tileSize* and returns this tile layout. If *tileSize* is not specified, returns the current layout tile size, which defaults to 256. 256 and 512 are the most common tile sizes.

    ``` javascript
    const tile = d3.tile().tileSize(512);
    ```
- name: tile.translate()
  id: d3-tile#tile_translate
  summary: If translate is specified, sets this tile layout’s translate function and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**translate**(\[*translate*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js)

    If *translate* is specified, sets this tile layout’s translate function and returns this tile layout. If *translate* is a function, it is invoked when the [tile layout](#_tile) is invoked, being passed the same arguments as the tile layout; this function must return an array of numbers \[*x*, *y*\] indicating the desired coordinates the center of the world tile \[0, 0, 0\].

    ``` javascript
    const tile = d3.tile().scale(t => t.scale).translate(t => t.translate);
    const tiles = tile({scale: 1024, translate: [100, 200]});
    ```

    If *translate* is not a function, it is assumed to be a constant array \[*x*, *y*\] and is wrapped in a function.

    ``` javascript
    const tile = d3.tile().scale(1024).translate([100, 200]);
    ```

    If *translate* is not specified, returns the current layout translate function, which defaults to:

    ``` javascript
    function translate(transform) {
      return [transform.x, transform.y];
    }
    ```

    This default is compatible with a [d3-zoom transform](d3-zoom#zoom-transforms).
- name: tile.zoomDelta()
  id: d3-tile#tile_zoomdelta
  summary: If zoomDelta is specified, sets this tile layout’s zoom offset to the specified number zoomDelta and returns this tile layout
  belongs_to: tile
  description: |-
    ###### *tile*.**zoomDelta**(\[*zoomDelta*\]) · [Source](https://github.com/d3/d3-tile/blob/master/src/tile.js), [Examples](https://observablehq.com/@d3/tile-zoomdelta)

    If *zoomDelta* is specified, sets this tile layout’s zoom offset to the specified number *zoomDelta* and returns this tile layout. If *zoomDelta* is not specified, returns the current zoom offset, which defaults to 0. The zoom offset affects which *z*-coordinate is chosen based on the current [scale](#tile_scale); the default zoom offset of 0 will choose the *z* that is closest the displayed size; a zoom offset of -1 will use *z* - 1, giving tiles that are twice as big (lower resolution); a zoom offset of +1 will use *z* + 1, giving tiles that are twice as small (higher resolution). The latter might be appropriate for showing 256×256 tiles in a 128×128 space on a high-resolution screen.

    ``` javascript
    const tile = d3.tile().zoomDelta(2);
    ```
- name: time
  id: d3-time
  summary: When visualizing time series data, analyzing temporal patterns, or working with time in general, the irregularities of conventional time units quickly become apparent
  description: "# d3-time\n\nWhen visualizing time series data, analyzing temporal patterns, or working with time in general, the irregularities of conventional time units quickly become apparent. In the [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar), for example, most months have 31 days but some have 28, 29 or 30; most years have 365 days but [leap years](https://en.wikipedia.org/wiki/Leap_year) have 366; and with [daylight saving](https://en.wikipedia.org/wiki/Daylight_saving_time), most days have 24 hours but some have 23 or 25. Adding to complexity, daylight saving conventions vary around the world.\n\nAs a result of these temporal peculiarities, it can be difficult to perform seemingly-trivial tasks. For example, if you want to compute the number of days that have passed between two dates, you can’t simply subtract and divide by 24 hours (86,400,000 ms):\n\n``` javascript\nstart = new Date(2015, 02, 01) // 2015-03-01T00:00\nend = new Date(2015, 03, 01) // 2015-04-01T00:00\n(end - start) / 864e5 // 30.958333333333332, oops! 🤯\n```\n\nYou can, however, use [d3.timeDay](#timeDay).[count](#interval_count):\n\n``` javascript\nd3.timeDay.count(start, end) // 31 😌\n```\n\nThe [day](#day) [interval](#api-reference) is one of several provided by d3-time. Each interval represents a conventional unit of time—[hours](#timeHour), [weeks](#timeWeek), [months](#timeMonth), *etc.*—and has methods to calculate boundary dates. For example, [d3.timeDay](#timeDay) computes midnight (typically 12:00 AM local time) of the corresponding day. In addition to [rounding](#interval_round) and [counting](#interval_count), intervals can also be used to generate arrays of boundary dates. For example, to compute each Sunday in the current month:\n\n``` javascript\nstart = d3.timeMonth.floor() // 2015-01-01T00:00\nstop = d3.timeMonth.ceil() // 2015-02-01T00:00\nd3.timeWeek.range(start, stop) // [2015-01-07T00:00, 2015-01-14T00:00, 2015-01-21T00:00, 2015-01-28T00:00]\n```\n\nThe d3-time module does not implement its own calendaring system; it merely implements a convenient API for calendar math on top of ECMAScript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date). Thus, it ignores leap seconds and can only work with the local time zone and [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) (UTC).\n\nThis module is used by D3’s time scales to generate sensible ticks, by D3’s time format, and can also be used directly to do things like [calendar layouts](http://bl.ocks.org/mbostock/4063318).\n\n## Installing\n\nIf you use npm, `npm install d3-time`. You can also download the [latest release on GitHub](https://github.com/d3/d3-time/releases/latest). For vanilla HTML in modern browsers, import d3-time from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {timeDay} from \"https://cdn.skypack.dev/d3-time@3\";\n\nconst day = timeDay();\n\n</script>\n```\n\nFor legacy environments, you can load d3-time’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-time@3\"></script>\n<script>\n\nconst day = d3.timeDay();\n\n</script>\n```\n\n[Try d3-time in your browser.](https://observablehq.com/collection/@d3/d3-time)\n\n## API Reference\n\n###### *interval*(\\[*date*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nEquivalent to [*interval*.floor](#interval_floor), except if *date* is not specified, it defaults to the current time. For example, [d3.timeYear](#timeYear)(*date*) and d3.timeYear.floor(*date*) are equivalent.\n\n``` javascript\nmonday = d3.timeMonday() // the latest preceeding Monday, local time\n```\n\n###### *interval*.**floor**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a new date representing the latest interval boundary date before or equal to *date*. For example, [d3.timeDay](#timeDay).floor(*date*) typically returns 12:00 AM local time on the given *date*.\n\nThis method is idempotent: if the specified *date* is already floored to the current interval, a new date with an identical time is returned. Furthermore, the returned date is the minimum expressible value of the associated interval, such that *interval*.floor(*interval*.floor(*date*) - 1) returns the preceeding interval boundary date.\n\nNote that the `==` and `===` operators do not compare by value with [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects, and thus you cannot use them to tell whether the specified *date* has already been floored. Instead, coerce to a number and then compare:\n\n``` javascript\n// Returns true if the specified date is a day boundary.\nfunction isDay(date) {\n  return +d3.timeDay.floor(date) === +date;\n}\n```\n\nThis is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.\n\n###### *interval*.**round**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a new date representing the closest interval boundary date to *date*. For example, [d3.timeDay](#timeDay).round(*date*) typically returns 12:00 AM local time on the given *date* if it is on or before noon, and 12:00 AM of the following day if it is after noon.\n\nThis method is idempotent: if the specified *date* is already rounded to the current interval, a new date with an identical time is returned.\n\n###### *interval*.**ceil**(*date*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a new date representing the earliest interval boundary date after or equal to *date*. For example, [d3.timeDay](#timeDay).ceil(*date*) typically returns 12:00 AM local time on the date following the given *date*.\n\nThis method is idempotent: if the specified *date* is already ceilinged to the current interval, a new date with an identical time is returned. Furthermore, the returned date is the maximum expressible value of the associated interval, such that *interval*.ceil(*interval*.ceil(*date*) + 1) returns the following interval boundary date.\n\n###### *interval*.**offset**(*date*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a new date equal to *date* plus *step* intervals. If *step* is not specified it defaults to 1. If *step* is negative, then the returned date will be before the specified *date*; if *step* is zero, then a copy of the specified *date* is returned; if *step* is not an integer, it is [floored](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor). This method does not round the specified *date* to the interval. For example, if *date* is today at 5:34 PM, then [d3.timeDay](#timeDay).offset(*date*, 1) returns 5:34 PM tomorrow (even if daylight saving changes!).\n\n###### *interval*.**range**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns an array of dates representing every interval boundary after or equal to *start* (inclusive) and before *stop* (exclusive). If *step* is specified, then every *step*th boundary will be returned; for example, for the [d3.timeDay](#timeDay) interval a *step* of 2 will return every other day. If *step* is not an integer, it is [floored](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor).\n\nThe first date in the returned array is the earliest boundary after or equal to *start*; subsequent dates are [offset](#interval_offset) by *step* intervals and [floored](#interval_floor). Thus, two overlapping ranges may be consistent. For example, this range contains odd days:\n\n``` javascript\nd3.timeDay.range(new Date(2015, 0, 1), new Date(2015, 0, 7), 2) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]\n```\n\nWhile this contains even days:\n\n``` javascript\nd3.timeDay.range(new Date(2015, 0, 2), new Date(2015, 0, 8), 2) // [2015-01-02T00:00, 2015-01-04T00:00, 2015-01-06T00:00]\n```\n\nTo make ranges consistent when a *step* is specified, use [*interval*.every](#interval_every) instead.\n\n###### *interval*.**filter**(*test*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a new interval that is a filtered subset of this interval using the specified *test* function. The *test* function is passed a date and should return true if and only if the specified date should be considered part of the interval. For example, to create an interval that returns the 1st, 11th, 21th and 31th (if it exists) of each month:\n\n``` javascript\nd3.timeDay.filter(d => (d.getDate() - 1) % 10 === 0)\n```\n\nThe returned filtered interval does not support [*interval*.count](#interval_count). See also [*interval*.every](#interval_every).\n\n###### *interval*.**every**(*step*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns a [filtered](#interval_filter) view of this interval representing every *step*th date. The meaning of *step* is dependent on this interval’s parent interval as defined by the field function. For example, [d3.timeMinute](#timeMinute).every(15) returns an interval representing every fifteen minutes, starting on the hour: :00, :15, :30, :45, *etc.* Note that for some intervals, the resulting dates may not be uniformly-spaced; [d3.timeDay](#timeDay)’s parent interval is [d3.timeMonth](#timeMonth), and thus the interval number resets at the start of each month. If *step* is not valid, returns null. If *step* is one, returns this interval.\n\nThis method can be used in conjunction with [*interval*.range](#interval_range) to ensure that two overlapping ranges are consistent. For example, this range contains odd days:\n\n``` javascript\nd3.timeDay.every(2).range(new Date(2015, 0, 1), new Date(2015, 0, 7)) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]\n```\n\nAs does this one:\n\n``` javascript\nd3.timeDay.every(2).range(new Date(2015, 0, 2), new Date(2015, 0, 8)) // [2015-01-03T00:00, 2015-01-05T00:00, 2015-01-07T00:00]\n```\n\nThe returned filtered interval does not support [*interval*.count](#interval_count). See also [*interval*.filter](#interval_filter).\n\n###### *interval*.**count**(*start*, *end*) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nReturns the number of interval boundaries after *start* (exclusive) and before or equal to *end* (inclusive). Note that this behavior is slightly different than [*interval*.range](#interval_range) because its purpose is to return the zero-based number of the specified *end* date relative to the specified *start* date. For example, to compute the current zero-based day-of-year number:\n\n``` javascript\nd3.timeDay.count(d3.timeYear(now), now) // 177\n```\n\nLikewise, to compute the current zero-based week-of-year number for weeks that start on Sunday:\n\n``` javascript\nd3.timeSunday.count(d3.timeYear(now), now) // 25\n```\n\n###### d3.**timeInterval**(*floor*, *offset*\\[, *count*\\[, *field*\\]\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/interval.js)\n\nConstructs a new custom interval given the specified *floor* and *offset* functions and an optional *count* function.\n\nThe *floor* function takes a single date as an argument and rounds it down to the nearest interval boundary.\n\nThe *offset* function takes a date and an integer step as arguments and advances the specified date by the specified number of boundaries; the step may be positive, negative or zero.\n\nThe optional *count* function takes a start date and an end date, already floored to the current interval, and returns the number of boundaries between the start (exclusive) and end (inclusive). If a *count* function is not specified, the returned interval does not expose [*interval*.count](#interval_count) or [*interval*.every](#interval_every) methods. Note: due to an internal optimization, the specified *count* function must not invoke *interval*.count on other time intervals.\n\nThe optional *field* function takes a date, already floored to the current interval, and returns the field value of the specified date, corresponding to the number of boundaries between this date (exclusive) and the latest previous parent boundary. For example, for the [d3.timeDay](#timeDay) interval, this returns the number of days since the start of the month. If a *field* function is not specified, it defaults to counting the number of interval boundaries since the UNIX epoch of January 1, 1970 UTC. The *field* function defines the behavior of [*interval*.every](#interval_every).\n\n### Intervals\n\nThe following intervals are provided:\n\n###### d3.**timeMillisecond** · [Source](https://github.com/d3/d3-time/blob/main/src/millisecond.js \"Source\") d3.**utcMillisecond**\n\nMilliseconds; the shortest available time unit.\n\n###### d3.**timeSecond** · [Source](https://github.com/d3/d3-time/blob/main/src/second.js \"Source\") d3.**utcSecond**\n\nSeconds (e.g., 01:23:45.0000 AM); 1,000 milliseconds.\n\n###### d3.**timeMinute** · [Source](https://github.com/d3/d3-time/blob/main/src/minute.js \"Source\") d3.**utcMinute** · [Source](https://github.com/d3/d3-time/blob/main/src/utcMinute.js \"Source\")\n\nMinutes (e.g., 01:02:00 AM); 60 seconds. Note that ECMAScript [ignores leap seconds](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1).\n\n###### d3.**timeHour** · [Source](https://github.com/d3/d3-time/blob/main/src/hour.js \"Source\") d3.**utcHour** · [Source](https://github.com/d3/d3-time/blob/main/src/utcHour.js \"Source\")\n\nHours (e.g., 01:00 AM); 60 minutes. Note that advancing time by one hour in local time can return the same hour or skip an hour due to daylight saving.\n\n###### d3.**timeDay** · [Source](https://github.com/d3/d3-time/blob/main/src/day.js \"Source\") d3.**utcDay** · [Source](https://github.com/d3/d3-time/blob/main/src/day.js) d3.**unixDay** · [Source](https://github.com/d3/d3-time/blob/main/src/day.js)\n\nDays (e.g., February 7, 2012 at 12:00 AM); typically 24 hours. Days in local time may range from 23 to 25 hours due to daylight saving. d3.unixDay is like [d3.utcDay](#timeDay), except it counts days since the UNIX epoch (January 1, 1970) such that *interval*.every returns uniformly-spaced dates rather than varying based on day-of-month.\n\n###### d3.**timeWeek** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js \"Source\") d3.**utcWeek** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js \"Source\")\n\nAlias for [d3.timeSunday](#timeSunday); 7 days and typically 168 hours. Weeks in local time may range from 167 to 169 hours due to daylight saving.\n\n###### d3.**timeSunday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSunday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nSunday-based weeks (e.g., February 5, 2012 at 12:00 AM).\n\n###### d3.**timeMonday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcMonday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nMonday-based weeks (e.g., February 6, 2012 at 12:00 AM).\n\n###### d3.**timeTuesday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcTuesday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nTuesday-based weeks (e.g., February 7, 2012 at 12:00 AM).\n\n###### d3.**timeWednesday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcWednesday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nWednesday-based weeks (e.g., February 8, 2012 at 12:00 AM).\n\n###### d3.**timeThursday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcThursday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nThursday-based weeks (e.g., February 9, 2012 at 12:00 AM).\n\n###### d3.**timeFriday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcFriday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nFriday-based weeks (e.g., February 10, 2012 at 12:00 AM).\n\n###### d3.**timeSaturday** · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSaturday** · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nSaturday-based weeks (e.g., February 11, 2012 at 12:00 AM).\n\n###### d3.**timeMonth** · [Source](https://github.com/d3/d3-time/blob/main/src/month.js \"Source\") d3.**utcMonth** · [Source](https://github.com/d3/d3-time/blob/main/src/utcMonth.js \"Source\")\n\nMonths (e.g., February 1, 2012 at 12:00 AM); ranges from 28 to 31 days.\n\n###### d3.**timeYear** · [Source](https://github.com/d3/d3-time/blob/main/src/year.js \"Source\") d3.**utcYear** · [Source](https://github.com/d3/d3-time/blob/main/src/utcYear.js \"Source\")\n\nYears (e.g., January 1, 2012 at 12:00 AM); ranges from 365 to 366 days.\n\n### Ranges\n\nFor convenience, aliases for [*interval*.range](#interval_range) are also provided as plural forms of the corresponding interval.\n\n###### d3.**timeMilliseconds**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/millisecond.js) d3.**utcMilliseconds**(*start*, *stop*\\[, *step*\\])\n\nAliases for [d3.timeMillisecond](#timeMillisecond).[range](#interval_range) and [d3.utcMillisecond](#timeMillisecond).[range](#interval_range).\n\n###### d3.**timeSeconds**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/second.js) d3.**utcSeconds**(*start*, *stop*\\[, *step*\\])\n\nAliases for [d3.timeSecond](#timeSecond).[range](#interval_range) and [d3.utcSecond](#timeSecond).[range](#interval_range).\n\n###### d3.**timeMinutes**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/minute.js) d3.**utcMinutes**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcMinute.js)\n\nAliases for [d3.timeMinute](#timeMinute).[range](#interval_range) and [d3.utcMinute](#timeMinute).[range](#interval_range).\n\n###### d3.**timeHours**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/hour.js) d3.**utcHours**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcHour.js)\n\nAliases for [d3.timeHour](#timeHour).[range](#interval_range) and [d3.utcHour](#timeHour).[range](#interval_range).\n\n###### d3.**timeDays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js) d3.**utcDays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js) d3.**unixDays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/day.js)\n\nAliases for [d3.timeDay](#timeDay).[range](#interval_range), [d3.utcDay](#timeDay).[range](#interval_range), and [d3.unixDay](#timeDay).[range](#interval_range).\n\n###### d3.**timeWeeks**(*start*, *stop*\\[, *step*\\]) d3.**utcWeeks**(*start*, *stop*\\[, *step*\\])\n\nAliases for [d3.timeWeek](#timeWeek).[range](#interval_range) and [d3.utcWeek](#timeWeek).[range](#interval_range).\n\n###### d3.**timeSundays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSundays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeSunday](#timeSunday).[range](#interval_range) and [d3.utcSunday](#timeSunday).[range](#interval_range).\n\n###### d3.**timeMondays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcMondays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeMonday](#timeMonday).[range](#interval_range) and [d3.utcMonday](#timeMonday).[range](#interval_range).\n\n###### d3.**timeTuesdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcTuesdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeTuesday](#timeTuesday).[range](#interval_range) and [d3.utcTuesday](#timeTuesday).[range](#interval_range).\n\n###### d3.**timeWednesdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcWednesdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeWednesday](#timeWednesday).[range](#interval_range) and [d3.utcWednesday](#timeWednesday).[range](#interval_range).\n\n###### d3.**timeThursdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcThursdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeThursday](#timeThursday).[range](#interval_range) and [d3.utcThursday](#timeThursday).[range](#interval_range).\n\n###### d3.**timeFridays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcFridays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeFriday](#timeFriday).[range](#interval_range) and [d3.utcFriday](#timeFriday).[range](#interval_range).\n\n###### d3.**timeSaturdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/week.js) d3.**utcSaturdays**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcWeek.js)\n\nAliases for [d3.timeSaturday](#timeSaturday).[range](#interval_range) and [d3.utcSaturday](#timeSaturday).[range](#interval_range).\n\n###### d3.**timeMonths**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/month.js) d3.**utcMonths**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcMonth.js)\n\nAliases for [d3.timeMonth](#timeMonth).[range](#interval_range) and [d3.utcMonth](#timeMonth).[range](#interval_range).\n\n###### d3.**timeYears**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/year.js) d3.**utcYears**(*start*, *stop*\\[, *step*\\]) · [Source](https://github.com/d3/d3-time/blob/main/src/utcYear.js)\n\nAliases for [d3.timeYear](#timeYear).[range](#interval_range) and [d3.utcYear](#timeYear).[range](#interval_range).\n\n### Ticks\n\n###### d3.**timeTicks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)\n\nEquivalent to [d3.utcTicks](#utcTicks), but in local time.\n\n###### d3.**timeTickInterval**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)\n\nReturns the time interval that would be used by [d3.timeTicks](#timeTicks) given the same arguments.\n\n###### d3.**utcTicks**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)\n\nReturns an array of approximately *count* dates at regular intervals between *start* and *stop* (inclusive). If *stop* is before *start*, dates are returned in reverse chronological order; otherwise dates are returned in chronological order. The following UTC time intervals are considered:\n\n- 1 second\n- 5 seconds\n- 15 seconds\n- 30 seconds\n- 1 minute\n- 5 minutes\n- 15 minutes\n- 30 minutes\n- 1 hour\n- 3 hours\n- 6 hours\n- 12 hours\n- 1 day\n- 2 days\n- 1 week\n- 1 month\n- 3 months\n- 1 year\n\nMultiples of milliseconds (for small ranges) and years (for large ranges) are also considered, following the rules of [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks). The interval producing the number of dates that is closest to *count* is used. For example:\n\n``` javascript\nstart = new Date(Date.UTC(1970, 2, 1))\nstop = new Date(Date.UTC(1996, 2, 19))\ncount = 4\nd3.utcTicks(start, stop, count) // [1975-01-01, 1980-01-01, 1985-01-01, 1990-01-01, 1995-01-01]\n```\n\nIf *count* is a time interval, this function behaves similarly to [*interval*.range](#interval_range) except that both *start* and *stop* are inclusive and it may return dates in reverse chronological order if *stop* is before *start*.\n\n###### d3.**utcTickInterval**(*start*, *stop*, *count*) · [Source](https://github.com/d3/d3-time/blob/main/src/ticks.js)\n\nReturns the time interval that would be used by [d3.utcTicks](#utcTicks) given the same arguments. If there is no associated interval, such as when *start* or *stop* is invalid, returns null.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-time](https://github.com/d3/d3-time)"
- name: time()
  id: d3-scale#_time
  summary: See continuous
  belongs_to: scale
  description: |-
    ###### *time*(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*](#_continuous).
- name: time-format
  id: d3-time-format
  summary: This module provides an approximate JavaScript implementation of the venerable strptime and strftime functions from the C standard library, and can be used to parse or format dates in a variety of locale-specific representations
  description: "# d3-time-format\n\nThis module provides an approximate JavaScript implementation of the venerable [strptime](http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html) and [strftime](http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html) functions from the C standard library, and can be used to parse or format [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) in a variety of locale-specific representations. To format a date, create a [formatter](#locale_format) from a specifier (a string with the desired format *directives*, indicated by `%`); then pass a date to the formatter, which returns a string. For example, to convert the current date to a human-readable string:\n\n``` javascript\nconst formatTime = d3.timeFormat(\"%B %d, %Y\");\nformatTime(new Date); // \"June 30, 2015\"\n```\n\nLikewise, to convert a string back to a date, create a [parser](#locale_parse):\n\n``` javascript\nconst parseTime = d3.timeParse(\"%B %d, %Y\");\nparseTime(\"June 30, 2015\"); // Tue Jun 30 2015 00:00:00 GMT-0700 (PDT)\n```\n\nYou can implement more elaborate conditional time formats, too. For example, here’s a [multi-scale time format](https://bl.ocks.org/mbostock/4149176) using [time intervals](d3-time):\n\n``` javascript\nconst formatMillisecond = d3.timeFormat(\".%L\"),\n    formatSecond = d3.timeFormat(\":%S\"),\n    formatMinute = d3.timeFormat(\"%I:%M\"),\n    formatHour = d3.timeFormat(\"%I %p\"),\n    formatDay = d3.timeFormat(\"%a %d\"),\n    formatWeek = d3.timeFormat(\"%b %d\"),\n    formatMonth = d3.timeFormat(\"%B\"),\n    formatYear = d3.timeFormat(\"%Y\");\n\nfunction multiFormat(date) {\n  return (d3.timeSecond(date) < date ? formatMillisecond\n      : d3.timeMinute(date) < date ? formatSecond\n      : d3.timeHour(date) < date ? formatMinute\n      : d3.timeDay(date) < date ? formatHour\n      : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)\n      : d3.timeYear(date) < date ? formatMonth\n      : formatYear)(date);\n}\n```\n\nThis module is used by D3 [time scales](https://github.com/d3/d3-scale/blob/main/README.md#time-scales) to generate human-readable ticks.\n\n## Installing\n\nIf you use npm, `npm install d3-time-format`. You can also download the [latest release on GitHub](https://github.com/d3/d3-time-format/releases/latest). For vanilla HTML in modern browsers, import d3-time-format from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {timeFormat} from \"https://cdn.skypack.dev/d3-time-format@4\";\n\nconst format = timeFormat(\"%x\");\n\n</script>\n```\n\nFor legacy environments, you can load d3-time-format’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-array@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-time@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-time-format@4\"></script>\n<script>\n\nconst format = d3.timeFormat(\"%x\");\n\n</script>\n```\n\nLocale files are published to npm and can be loaded using [d3.json](https://github.com/d3/d3-fetch/blob/main/README.md#json). For example, to set Russian as the default locale:\n\n``` javascript\nd3.json(\"https://cdn.jsdelivr.net/npm/d3-time-format@3/locale/ru-RU.json\").then(locale => {\n  d3.timeFormatDefaultLocale(locale);\n\n  const format = d3.timeFormat(\"%c\");\n\n  console.log(format(new Date)); // понедельник,  5 декабря 2016 г. 10:31:59\n});\n```\n\n## API Reference\n\n###### d3.**timeFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nAn alias for [*locale*.format](#locale_format) on the [default locale](#timeFormatDefaultLocale).\n\n###### d3.**timeParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nAn alias for [*locale*.parse](#locale_parse) on the [default locale](#timeFormatDefaultLocale).\n\n###### d3.**utcFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nAn alias for [*locale*.utcFormat](#locale_utcFormat) on the [default locale](#timeFormatDefaultLocale).\n\n###### d3.**utcParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nAn alias for [*locale*.utcParse](#locale_utcParse) on the [default locale](#timeFormatDefaultLocale).\n\n###### d3.**isoFormat** · [Source](https://github.com/d3/d3-time-format/blob/main/src/isoFormat.js)\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time formatter. Where available, this method will use [Date.toISOString](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString) to format.\n\n###### d3.**isoParse** · [Source](https://github.com/d3/d3-time-format/blob/main/src/isoParse.js)\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time parser. Where available, this method will use the [Date constructor](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a [UTC parser function](#utcParse):\n\n``` javascript\nconst strictIsoParse = d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n```\n\n###### *locale*.**format**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)\n\nReturns a new formatter for the given string *specifier*. The specifier string may contain the following directives:\n\n- `%a` - abbreviated weekday name.\\*\n- `%A` - full weekday name.\\*\n- `%b` - abbreviated month name.\\*\n- `%B` - full month name.\\*\n- `%c` - the locale’s date and time, such as `%x, %X`.\\*\n- `%d` - zero-padded day of the month as a decimal number \\[01,31\\].\n- `%e` - space-padded day of the month as a decimal number \\[ 1,31\\]; equivalent to `%_d`.\n- `%f` - microseconds as a decimal number \\[000000, 999999\\].\n- `%g` - ISO 8601 week-based year without century as a decimal number \\[00,99\\].\n- `%G` - ISO 8601 week-based year with century as a decimal number.\n- `%H` - hour (24-hour clock) as a decimal number \\[00,23\\].\n- `%I` - hour (12-hour clock) as a decimal number \\[01,12\\].\n- `%j` - day of the year as a decimal number \\[001,366\\].\n- `%m` - month as a decimal number \\[01,12\\].\n- `%M` - minute as a decimal number \\[00,59\\].\n- `%L` - milliseconds as a decimal number \\[000, 999\\].\n- `%p` - either AM or PM.\\*\n- `%q` - quarter of the year as a decimal number \\[1,4\\].\n- `%Q` - milliseconds since UNIX epoch.\n- `%s` - seconds since UNIX epoch.\n- `%S` - second as a decimal number \\[00,61\\].\n- `%u` - Monday-based (ISO 8601) weekday as a decimal number \\[1,7\\].\n- `%U` - Sunday-based week of the year as a decimal number \\[00,53\\].\n- `%V` - ISO 8601 week of the year as a decimal number \\[01, 53\\].\n- `%w` - Sunday-based weekday as a decimal number \\[0,6\\].\n- `%W` - Monday-based week of the year as a decimal number \\[00,53\\].\n- `%x` - the locale’s date, such as `%-m/%-d/%Y`.\\*\n- `%X` - the locale’s time, such as `%-I:%M:%S %p`.\\*\n- `%y` - year without century as a decimal number \\[00,99\\].\n- `%Y` - year with century as a decimal number, such as `1999`.\n- `%Z` - time zone offset, such as `-0700`, `-07:00`, `-07`, or `Z`.\n- `%%` - a literal percent sign (`%`).\n\nDirectives marked with an asterisk (\\*) may be affected by the [locale definition](#locales).\n\nFor `%U`, all days in a new year preceding the first Sunday are considered to be in week 0. For `%W`, all days in a new year preceding the first Monday are considered to be in week 0. Week numbers are computed using [*interval*.count](https://github.com/d3/d3-time/blob/main/README.md#interval_count). For example, 2015-52 and 2016-00 represent Monday, December 28, 2015, while 2015-53 and 2016-01 represent Monday, January 4, 2016. This differs from the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) specification (`%V`), which uses a more complicated definition!\n\nFor `%V`,`%g` and `%G`, per the [strftime man page](http://man7.org/linux/man-pages/man3/strftime.3.html):\n\n> In this system, weeks start on a Monday, and are numbered from 01, for the first week, up to 52 or 53, for the last week. Week 1 is the first week where four or more days fall within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday; or, the week that has 4 January in it). If the ISO week number belongs to the previous or next year, that year is used instead.\n\nThe `%` sign indicating a directive may be immediately followed by a padding modifier:\n\n- `0` - zero-padding\n- `_` - space-padding\n- `-` - disable padding\n\nIf no padding modifier is specified, the default is `0` for all directives except `%e`, which defaults to `_`. (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)\n\nThe returned function formats a specified *[date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)*, returning the corresponding string.\n\n``` javascript\nconst formatMonth = d3.timeFormat(\"%B\"),\n    formatDay = d3.timeFormat(\"%A\"),\n    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)\n\nformatMonth(date); // \"May\"\nformatDay(date); // \"Thursday\"\n```\n\n###### *locale*.**parse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)\n\nReturns a new parser for the given string *specifier*. The specifier string may contain the same directives as [*locale*.format](#locale_format). The `%d` and `%e` directives are considered equivalent for parsing.\n\nThe returned function parses a specified *string*, returning the corresponding [date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) or null if the string could not be parsed according to this format’s specifier. Parsing is strict: if the specified *string* does not exactly match the associated specifier, this method returns null. For example, if the associated specifier is `%Y-%m-%dT%H:%M:%SZ`, then the string `\"2011-07-01T19:15:28Z\"` will be parsed as expected, but `\"2011-07-01T19:15:28\"`, `\"2011-07-01 19:15:28\"` and `\"2011-07-01\"` will return null. (Note that the literal `Z` here is different from the time zone offset directive `%Z`.) If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.\n\n###### *locale*.**utcFormat**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)\n\nEquivalent to [*locale*.format](#locale_format), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n###### *locale*.**utcParse**(*specifier*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)\n\nEquivalent to [*locale*.parse](#locale_parse), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n### Locales\n\n###### d3.**timeFormatLocale**(*definition*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/locale.js)\n\nReturns a *locale* object for the specified *definition* with [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat), [*locale*.utcParse](#locale_utcParse) methods. The *definition* must include the following properties:\n\n- `dateTime` - the date and time (`%c`) format specifier (*e.g.*, `\"%a %b %e %X %Y\"`).\n- `date` - the date (`%x`) format specifier (*e.g.*, `\"%m/%d/%Y\"`).\n- `time` - the time (`%X`) format specifier (*e.g.*, `\"%H:%M:%S\"`).\n- `periods` - the A.M. and P.M. equivalents (*e.g.*, `[\"AM\", \"PM\"]`).\n- `days` - the full names of the weekdays, starting with Sunday.\n- `shortDays` - the abbreviated names of the weekdays, starting with Sunday.\n- `months` - the full names of the months (starting with January).\n- `shortMonths` - the abbreviated names of the months (starting with January).\n\nFor an example, see [Localized Time Axis II](https://bl.ocks.org/mbostock/805115ebaa574e771db1875a6d828949).\n\n###### d3.**timeFormatDefaultLocale**(*definition*) · [Source](https://github.com/d3/d3-time-format/blob/main/src/defaultLocale.js)\n\nEquivalent to [d3.timeFormatLocale](#timeFormatLocale), except it also redefines [d3.timeFormat](#timeFormat), [d3.timeParse](#timeParse), [d3.utcFormat](#utcFormat) and [d3.utcParse](#utcParse) to the new locale’s [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat) and [*locale*.utcParse](#locale_utcParse). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-time-format/blob/main/locale/en-US.json).\n\nFor an example, see [Localized Time Axis](https://bl.ocks.org/mbostock/6f1cc065d4d172bcaf322e399aa8d62f).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-time-format](https://github.com/d3/d3-time-format)"
- name: time.clamp()
  id: d3-scale#time_clamp
  summary: See continuous.clamp
  belongs_to: scale
  description: |-
    ###### *time*.**clamp**(*clamp*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.clamp](#continuous_clamp).
- name: time.copy()
  id: d3-scale#time_copy
  summary: See continuous.copy
  belongs_to: scale
  description: |-
    ###### *time*.**copy**() · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.copy](#continuous_copy).
- name: time.domain()
  id: d3-scale#time_domain
  summary: See continuous.domain
  belongs_to: scale
  description: |-
    ###### *time*.**domain**(\[*domain*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.domain](#continuous_domain).
- name: time.interpolate()
  id: d3-scale#time_interpolate
  summary: See continuous.interpolate
  belongs_to: scale
  description: |-
    ###### *time*.**interpolate**(*interpolate*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.interpolate](#continuous_interpolate).
- name: time.invert()
  id: d3-scale#time_invert
  summary: See continuous.invert
  belongs_to: scale
  description: |-
    ###### *time*.**invert**(*value*) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.invert](#continuous_invert).
- name: time.nice()
  id: d3-scale#time_nice
  summary: Extends the domain so that it starts and ends on nice round values
  belongs_to: scale
  description: |-
    ###### *time*.**nice**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime) *time*.**nice**(\[*interval*\])

    Extends the [domain](#time_domain) so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. See [*continuous*.nice](#continuous_nice) for more.

    An optional tick *count* argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned [ticks](#time_ticks) will exactly cover the domain. Alternatively, a [time *interval*](d3-time#intervals) may be specified to explicitly set the ticks. If an *interval* is specified, an optional *step* may also be specified to skip some ticks. For example, `time.nice(d3.timeSecond.every(10))` will extend the domain to an even ten seconds (0, 10, 20, *etc.*). See [*time*.ticks](#time_ticks) and [*interval*.every](d3-time#interval_every) for further detail.

    Nicing is useful if the domain is computed from data, say using [extent](d3-array#extent), and may be irregular. For example, for a domain of \[2009-07-13T00:02, 2009-07-13T23:48\], the nice domain is \[2009-07-13, 2009-07-14\]. If the domain has more than two values, nicing the domain only affects the first and last value.
- name: time.range()
  id: d3-scale#time_range
  summary: See continuous.range
  belongs_to: scale
  description: |-
    ###### *time*.**range**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.range](#continuous_range).
- name: time.rangeRound()
  id: d3-scale#time_rangeround
  summary: See continuous.rangeRound
  belongs_to: scale
  description: |-
    ###### *time*.**rangeRound**(\[*range*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime)

    See [*continuous*.rangeRound](#continuous_rangeRound).
- name: time.tickFormat()
  id: d3-scale#time_tickformat
  summary: Returns a time format function suitable for displaying tick values
  belongs_to: scale
  description: |-
    ###### *time*.**tickFormat**(\[*count*\[, *specifier*\]\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/scale-ticks) *time*.**tickFormat**(\[*interval*\[, *specifier*\]\])

    Returns a time format function suitable for displaying [tick](#time_ticks) values. The specified *count* or *interval* is currently ignored, but is accepted for consistency with other scales such as [*continuous*.tickFormat](#continuous_tickFormat). If a format *specifier* is specified, this method is equivalent to [format](d3-time-format#format). If *specifier* is not specified, the default time format is returned. The default multi-scale time format chooses a human-readable representation based on the specified date as follows:

    - `%Y` - for year boundaries, such as `2011`.
    - `%B` - for month boundaries, such as `February`.
    - `%b %d` - for week boundaries, such as `Feb 06`.
    - `%a %d` - for day boundaries, such as `Mon 07`.
    - `%I %p` - for hour boundaries, such as `01 AM`.
    - `%I:%M` - for minute boundaries, such as `01:23`.
    - `:%S` - for second boundaries, such as `:45`.
    - `.%L` - milliseconds for all other times, such as `.012`.

    Although somewhat unusual, this default behavior has the benefit of providing both local and global context: for example, formatting a sequence of ticks as \[11 PM, Mon 07, 01 AM\] reveals information about hours, dates, and day simultaneously, rather than just the hours \[11 PM, 12 AM, 01 AM\]. See [d3-time-format](d3-time-format) if you’d like to roll your own conditional time format.
- name: time.ticks()
  id: d3-scale#time_ticks
  summary: Returns representative dates from the scale’s domain
  belongs_to: scale
  description: |-
    ###### *time*.**ticks**(\[*count*\]) · [Source](https://github.com/d3/d3-scale/blob/master/src/time.js), [Examples](https://observablehq.com/@d3/d3-scaletime) *time*.**ticks**(\[*interval*\])

    Returns representative dates from the scale’s [domain](#time_domain). The returned tick values are uniformly-spaced (mostly), have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.

    An optional *count* may be specified to affect how many ticks are generated. If *count* is not specified, it defaults to 10. The specified *count* is only a hint; the scale may return more or fewer values depending on the domain. For example, to create ten default ticks, say:

    ``` javascript
    var x = d3.scaleTime();

    x.ticks(10);
    // [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 03:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 06:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 09:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 12:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 15:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 18:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 21:00:00 GMT-0800 (PST),
    //  Sun Jan 02 2000 00:00:00 GMT-0800 (PST)]
    ```

    The following time intervals are considered for automatic ticks:

    - 1-, 5-, 15- and 30-second.
    - 1-, 5-, 15- and 30-minute.
    - 1-, 3-, 6- and 12-hour.
    - 1- and 2-day.
    - 1-week.
    - 1- and 3-month.
    - 1-year.

    In lieu of a *count*, a [time *interval*](d3-time#intervals) may be explicitly specified. To prune the generated ticks for a given time *interval*, use [*interval*.every](d3-time#interval_every). For example, to generate ticks at 15-[minute](d3-time#minute) intervals:

    ``` javascript
    var x = d3.scaleTime()
        .domain([new Date(2000, 0, 1, 0), new Date(2000, 0, 1, 2)]);

    x.ticks(d3.timeMinute.every(15));
    // [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 00:15:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 00:30:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 00:45:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 01:00:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 01:15:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 01:30:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 01:45:00 GMT-0800 (PST),
    //  Sat Jan 01 2000 02:00:00 GMT-0800 (PST)]
    ```

    Alternatively, pass a test function to [*interval*.filter](d3-time#interval_filter):

    ``` javascript
    x.ticks(d3.timeMinute.filter(function(d) {
      return d.getMinutes() % 15 === 0;
    }));
    ```

    Note: in some cases, such as with day ticks, specifying a *step* can result in irregular spacing of ticks because time intervals have varying length.
- name: timer
  id: d3-timer
  summary: This module provides an efficient queue capable of managing thousands of concurrent animations, while guaranteeing consistent, synchronized timing with concurrent or staged animations
  description: "# d3-timer\n\nThis module provides an efficient queue capable of managing thousands of concurrent animations, while guaranteeing consistent, synchronized timing with concurrent or staged animations. Internally, it uses [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) for fluid animation (if available), switching to [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) for delays longer than 24ms.\n\n## Installing\n\nIf you use npm, `npm install d3-timer`. You can also download the [latest release on GitHub](https://github.com/d3/d3-timer/releases/latest). For vanilla HTML in modern browsers, import d3-timer from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {timer} from \"https://cdn.skypack.dev/d3-timer@3\";\n\nconst t = timer(callback);\n\n</script>\n```\n\nFor legacy environments, you can load d3-timer’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script>\n\nconst timer = d3.timer(callback);\n\n</script>\n```\n\n## API Reference\n\n###### d3.**now**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js \"Source\")\n\nReturns the current time as defined by [performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) if available, and [Date.now](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now) if not. The current time is updated at the start of a frame; it is thus consistent during the frame, and any timers scheduled during the same frame will be synchronized. If this method is called outside of a frame, such as in response to a user event, the current time is calculated and then fixed until the next frame, again ensuring consistent timing during event handling.\n\n###### d3.**timer**(*callback*\\[, *delay*\\[, *time*\\]\\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js \"Source\")\n\nSchedules a new timer, invoking the specified *callback* repeatedly until the timer is [stopped](#timer_stop). An optional numeric *delay* in milliseconds may be specified to invoke the given *callback* after a delay; if *delay* is not specified, it defaults to zero. The delay is relative to the specified *time* in milliseconds; if *time* is not specified, it defaults to [now](#now).\n\nThe *callback* is passed the (apparent) *elapsed* time since the timer became active. For example:\n\n``` javascript\nconst t = d3.timer((elapsed) => {\n  console.log(elapsed);\n  if (elapsed > 200) t.stop();\n}, 150);\n```\n\nThis produces roughly the following console output:\n\n``` notranslate\n3\n25\n48\n65\n85\n106\n125\n146\n167\n189\n209\n```\n\n(The exact values may vary depending on your JavaScript runtime and what else your computer is doing.) Note that the first *elapsed* time is 3ms: this is the elapsed time since the timer started, not since the timer was scheduled. Here the timer started 150ms after it was scheduled due to the specified delay. The apparent *elapsed* time may be less than the true *elapsed* time if the page is backgrounded and [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is paused; in the background, apparent time is frozen.\n\nIf [timer](#timer) is called within the callback of another timer, the new timer callback (if eligible as determined by the specified *delay* and *time*) will be invoked immediately at the end of the current frame, rather than waiting until the next frame. Within a frame, timer callbacks are guaranteed to be invoked in the order they were scheduled, regardless of their start time.\n\n###### *timer*.**restart**(*callback*\\[, *delay*\\[, *time*\\]\\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js \"Source\")\n\nRestart a timer with the specified *callback* and optional *delay* and *time*. This is equivalent to stopping this timer and creating a new timer with the specified arguments, although this timer retains the original invocation priority.\n\n###### *timer*.**stop**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js \"Source\")\n\nStops this timer, preventing subsequent callbacks. This method has no effect if the timer has already stopped.\n\n###### d3.**timerFlush**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js \"Source\")\n\nImmediately invoke any eligible timer callbacks. Note that zero-delay timers are normally first executed after one frame (~17ms). This can cause a brief flicker because the browser renders the page twice: once at the end of the first event loop, then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop, you can run any zero-delay timers immediately and avoid the flicker.\n\n###### d3.**timeout**(*callback*\\[, *delay*\\[, *time*\\]\\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timeout.js \"Source\")\n\nLike [timer](#timer), except the timer automatically [stops](#timer_stop) on its first callback. A suitable replacement for [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) that is guaranteed to not run in the background. The *callback* is passed the elapsed time.\n\n###### d3.**interval**(*callback*\\[, *delay*\\[, *time*\\]\\]) [Source](https://github.com/d3/d3-timer/blob/master/src/interval.js \"Source\")\n\nLike [timer](#timer), except the *callback* is invoked only every *delay* milliseconds; if *delay* is not specified, this is equivalent to [timer](#timer). A suitable replacement for [setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) that is guaranteed to not run in the background. The *callback* is passed the elapsed time.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-timer](https://github.com/d3/d3-timer)"
- name: timer.restart()
  id: d3-timer#timer_restart
  summary: Restart a timer with the specified callback and optional delay and time
  belongs_to: timer
  description: |-
    ###### *timer*.**restart**(*callback*\[, *delay*\[, *time*\]\]) [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js "Source")

    Restart a timer with the specified *callback* and optional *delay* and *time*. This is equivalent to stopping this timer and creating a new timer with the specified arguments, although this timer retains the original invocation priority.
- name: timer.stop()
  id: d3-timer#timer_stop
  summary: Stops this timer, preventing subsequent callbacks
  belongs_to: timer
  description: |-
    ###### *timer*.**stop**() [Source](https://github.com/d3/d3-timer/blob/master/src/timer.js "Source")

    Stops this timer, preventing subsequent callbacks. This method has no effect if the timer has already stopped.
- name: transform.apply()
  id: d3-zoom#transform_apply
  summary: Returns the transformation of the specified point which is a two-element array of numbers [x, y]
  belongs_to: zoom
  description: |-
    ###### *transform*.**apply**(*point*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the transformation of the specified *point* which is a two-element array of numbers \[*x*, *y*\]. The returned point is equal to \[*xk* + *t_(x)*, *yk* + *t_(y)*\].
- name: transform.applyX()
  id: d3-zoom#transform_applyx
  summary: Returns the transformation of the specified x-coordinate, xk + t_(x)
  belongs_to: zoom
  description: |-
    ###### *transform*.**applyX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the transformation of the specified *x*-coordinate, *xk* + *t_(x)*.
- name: transform.applyY()
  id: d3-zoom#transform_applyy
  summary: Returns the transformation of the specified y-coordinate, yk + t_(y)
  belongs_to: zoom
  description: |-
    ###### *transform*.**applyY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the transformation of the specified *y*-coordinate, *yk* + *t_(y)*.
- name: transform.invert()
  id: d3-zoom#transform_invert
  summary: Returns the inverse transformation of the specified point which is a two-element array of numbers [x, y]
  belongs_to: zoom
  description: |-
    ###### *transform*.**invert**(*point*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the inverse transformation of the specified *point* which is a two-element array of numbers \[*x*, *y*\]. The returned point is equal to \[(*x* - *t_(x)*) / *k*, (*y* - *t_(y)*) / *k*\].
- name: transform.invertX()
  id: d3-zoom#transform_invertx
  summary: Returns the inverse transformation of the specified x-coordinate, (x - t_(x)) / k
  belongs_to: zoom
  description: |-
    ###### *transform*.**invertX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the inverse transformation of the specified *x*-coordinate, (*x* - *t_(x)*) / *k*.
- name: transform.invertY()
  id: d3-zoom#transform_inverty
  summary: Returns the inverse transformation of the specified y-coordinate, (y - t_(y)) / k
  belongs_to: zoom
  description: |-
    ###### *transform*.**invertY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns the inverse transformation of the specified *y*-coordinate, (*y* - *t_(y)*) / *k*.
- name: transform.rescaleX()
  id: d3-zoom#transform_rescalex
  summary: Returns a copy of the continuous scale x whose domain is transformed
  belongs_to: zoom
  description: |-
    ###### *transform*.**rescaleX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns a [copy](d3-scale#continuous_copy) of the [continuous scale](d3-scale#continuous-scales) *x* whose [domain](d3-scale#continuous_domain) is transformed. This is implemented by first applying the [inverse *x*-transform](#transform_invertX) on the scale’s [range](d3-scale#continuous_range), and then applying the [inverse scale](d3-scale#continuous_invert) to compute the corresponding domain:

    ``` javascript
    function rescaleX(x) {
      var range = x.range().map(transform.invertX, transform),
          domain = range.map(x.invert, x);
      return x.copy().domain(domain);
    }
    ```

    The scale *x* must use [d3.interpolateNumber](d3-interpolate#interpolateNumber); do not use [*continuous*.rangeRound](d3-scale#continuous_rangeRound) as this reduces the accuracy of [*continuous*.invert](d3-scale#continuous_invert) and can lead to an inaccurate rescaled domain. This method does not modify the input scale *x*; *x* thus represents the untransformed scale, while the returned scale represents its transformed view.
- name: transform.rescaleY()
  id: d3-zoom#transform_rescaley
  summary: Returns a copy of the continuous scale y whose domain is transformed
  belongs_to: zoom
  description: |-
    ###### *transform*.**rescaleY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns a [copy](d3-scale#continuous_copy) of the [continuous scale](d3-scale#continuous-scales) *y* whose [domain](d3-scale#continuous_domain) is transformed. This is implemented by first applying the [inverse *y*-transform](#transform_invertY) on the scale’s [range](d3-scale#continuous_range), and then applying the [inverse scale](d3-scale#continuous_invert) to compute the corresponding domain:

    ``` javascript
    function rescaleY(y) {
      var range = y.range().map(transform.invertY, transform),
          domain = range.map(y.invert, y);
      return y.copy().domain(domain);
    }
    ```

    The scale *y* must use [d3.interpolateNumber](d3-interpolate#interpolateNumber); do not use [*continuous*.rangeRound](d3-scale#continuous_rangeRound) as this reduces the accuracy of [*continuous*.invert](d3-scale#continuous_invert) and can lead to an inaccurate rescaled domain. This method does not modify the input scale *y*; *y* thus represents the untransformed scale, while the returned scale represents its transformed view.
- name: transform.scale()
  id: d3-zoom#transform_scale
  summary: Returns a transform whose scale k₁ is equal to k₀k, where k₀ is this transform’s scale
  belongs_to: zoom
  description: |-
    ###### *transform*.**scale**(*k*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns a transform whose scale *k₁* is equal to *k₀k*, where *k₀* is this transform’s scale.
- name: transform.toString()
  id: d3-zoom#transform_tostring
  summary: Returns a string representing the SVG transform corresponding to this transform
  belongs_to: zoom
  description: |-
    ###### *transform*.**toString**() · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns a string representing the [SVG transform](https://www.w3.org/TR/SVG/coords.html#TransformAttribute) corresponding to this transform. Implemented as:

    ``` javascript
    function toString() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
    ```
- name: transform.translate()
  id: d3-zoom#transform_translate
  summary: Returns a transform whose translation t_(x1) and t_(y1) is equal to t_(x0) + t_(k) x and t_(y0) + t_(k) y, where t_(x0) and t_(y0) is this transform’s translation and t_(k) is this transform’s scale
  belongs_to: zoom
  description: |-
    ###### *transform*.**translate**(*x*, *y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)

    Returns a transform whose translation *t_(x1)* and *t_(y1)* is equal to *t_(x0)* + *t_(k) x* and *t_(y0)* + *t_(k) y*, where *t_(x0)* and *t_(y0)* is this transform’s translation and *t_(k)* is this transform’s scale.
- name: transition
  id: d3-transition
  summary: A transition is a selection-like interface for animating changes to the DOM
  description: "# d3-transition\n\nA transition is a [selection](d3-selection)-like interface for animating changes to the DOM. Instead of applying changes instantaneously, transitions smoothly interpolate the DOM from its current state to the desired target state over a given duration.\n\nTo apply a transition, select elements, call [*selection*.transition](#selection_transition), and then make the desired changes. For example:\n\n``` javascript\nd3.select(\"body\")\n  .transition()\n    .style(\"background-color\", \"red\");\n```\n\nTransitions support most selection methods (such as [*transition*.attr](#transition_attr) and [*transition*.style](#transition_style) in place of [*selection*.attr](d3-selection#selection_attr) and [*selection*.style](d3-selection#selection_style)), but not all methods are supported; for example, you must [append](d3-selection#selection_append) elements or [bind data](d3-selection#joining-data) before a transition starts. A [*transition*.remove](#transition_remove) operator is provided for convenient removal of elements when the transition ends.\n\nTo compute intermediate state, transitions leverage a variety of [built-in interpolators](d3-interpolate). [Colors](d3-interpolate#interpolateRgb), [numbers](d3-interpolate#interpolateNumber), and [transforms](d3-interpolate#interpolateTransform) are automatically detected. [Strings](d3-interpolate#interpolateString) with embedded numbers are also detected, as is common with many styles (such as padding or font sizes) and paths. To specify a custom interpolator, use [*transition*.attrTween](#transition_attrTween), [*transition*.styleTween](#transition_styleTween) or [*transition*.tween](#transition_tween).\n\n## Installing\n\nIf you use npm, `npm install d3-transition`. You can also download the [latest release on GitHub](https://github.com/d3/d3-transition/releases/latest). For vanilla HTML in modern browsers, import d3-transition from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {transition} from \"https://cdn.skypack.dev/d3-transition@3\";\n\nconst t = transition();\n\n</script>\n```\n\nFor legacy environments, you can load d3-transition’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-ease@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-selection@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-transition@3\"></script>\n<script>\n\nconst t = d3.transition();\n\n</script>\n```\n\n[Try d3-transition in your browser.](https://observablehq.com/collection/@d3/d3-transition)\n\n## API Reference\n\n- [Selecting Elements](#selecting-elements)\n- [Modifying Elements](#modifying-elements)\n- [Timing](#timing)\n- [Control Flow](#control-flow)\n- [The Life of a Transition](#the-life-of-a-transition)\n\n### Selecting Elements\n\nTransitions are derived from [selections](d3-selection) via [*selection*.transition](#selection_transition). You can also create a transition on the document root element using [d3.transition](#transition).\n\n###### *selection*.**transition**(\\[*name*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/selection/transition.js)\n\nReturns a new transition on the given *selection* with the specified *name*. If a *name* is not specified, null is used. The new transition is only exclusive with other transitions of the same name.\n\nIf the *name* is a [transition](#transition) instance, the returned transition has the same id and name as the specified transition. If a transition with the same id already exists on a selected element, the existing transition is returned for that element. Otherwise, the timing of the returned transition is inherited from the existing transition of the same id on the nearest ancestor of each selected element. Thus, this method can be used to synchronize a transition across multiple selections, or to re-select a transition for specific elements and modify its configuration. For example:\n\n``` javascript\nconst t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\n```\n\nIf the specified *transition* is not found on a selected node or its ancestors (such as if the transition [already ended](#the-life-of-a-transition)), the default timing parameters are used; however, in a future release, this will likely be changed to throw an error. See [\\#59](https://github.com/d3/d3-transition/issues/59).\n\n###### *selection*.**interrupt**(\\[*name*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/selection/interrupt.js)\n\nInterrupts the active transition of the specified *name* on the selected elements, and cancels any pending transitions with the specified *name*, if any. If a name is not specified, null is used.\n\nInterrupting a transition on an element has no effect on any transitions on any descendant elements. For example, an [axis transition](d3-axis) consists of multiple independent, synchronized transitions on the descendants of the axis [G element](https://www.w3.org/TR/SVG/struct.html#Groups) (the tick lines, the tick labels, the domain path, *etc.*). To interrupt the axis transition, you must therefore interrupt the descendants:\n\n``` javascript\nselection.selectAll(\"*\").interrupt();\n```\n\nThe [universal selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors), `*`, selects all descendant elements. If you also want to interrupt the G element itself:\n\n``` javascript\nselection.interrupt().selectAll(\"*\").interrupt();\n```\n\n###### d3.**interrupt**(*node*\\[, *name*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/interrupt.js)\n\nInterrupts the active transition of the specified *name* on the specified *node*, and cancels any pending transitions with the specified *name*, if any. If a name is not specified, null is used. See also [*selection*.interrupt](#selection_interrupt).\n\n###### d3.**transition**(\\[*name*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/index.js#L29)\n\nReturns a new transition on the root element, `document.documentElement`, with the specified *name*. If a *name* is not specified, null is used. The new transition is only exclusive with other transitions of the same name. The *name* may also be a [transition](#transition) instance; see [*selection*.transition](#selection_transition). This method is equivalent to:\n\n``` javascript\nd3.selection()\n  .transition(name)\n```\n\nThis function can also be used to test for transitions (`instanceof d3.transition`) or to extend the transition prototype.\n\n###### *transition*.**select**(*selector*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/select.js)\n\nFor each selected element, selects the first descendant element that matches the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.select](d3-selection#selection_select), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .select(selector)\n  .transition(transition)\n```\n\n###### *transition*.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selectAll.js)\n\nFor each selected element, selects all descendant elements that match the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectAll](d3-selection#selection_selectAll), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .selectAll(selector)\n  .transition(transition)\n```\n\n###### *transition*.**selectChild**(\\[*selector*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/select.js)\n\nFor each selected element, selects the first child element that matches the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectChild](d3-selection#selection_selectChild), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .selectChild(selector)\n  .transition(transition)\n```\n\n###### *transition*.**selectChildren**(\\[*selector*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selectAll.js)\n\nFor each selected element, selects all children that match the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectChildren](d3-selection#selection_selectChildren), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .selectChildren(selector)\n  .transition(transition)\n```\n\n###### *transition*.**filter**(*filter*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/filter.js)\n\nFor each selected element, selects only the elements that match the specified *filter*, and returns a transition on the resulting selection. The *filter* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.filter](d3-selection#selection_filter), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .filter(filter)\n  .transition(transition)\n```\n\n###### *transition*.**merge**(*other*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/merge.js)\n\nReturns a new transition merging this transition with the specified *other* transition, which must have the same id as this transition. The returned transition has the same number of groups, the same parents, the same name and the same id as this transition. Any missing (null) elements in this transition are filled with the corresponding element, if present (not null), from the *other* transition.\n\nThis method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), merging with the selection likewise derived from the *other* transition via [*selection*.merge](d3-selection#selection_merge), and then creating a new transition via [*selection*.transition](#selection_transition):\n\n``` javascript\ntransition\n  .selection()\n  .merge(other.selection())\n  .transition(transition)\n```\n\n###### *transition*.**transition**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/transition.js)\n\nReturns a new transition on the same selected elements as this transition, scheduled to start when this transition ends. The new transition inherits a reference time equal to this transition’s time plus its [delay](#transition_delay) and [duration](#transition_duration). The new transition also inherits this transition’s name, duration, and [easing](#transition_ease). This method can be used to schedule a sequence of chained transitions. For example:\n\n``` javascript\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\n```\n\nThe delay for each transition is relative to its previous transition. Thus, in the above example, apples will stay red for one second before the last transition to brown starts.\n\n###### *transition*.**selection**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selection.js)\n\nReturns the [selection](d3-selection#selection) corresponding to this transition.\n\n###### d3.**active**(*node*\\[, *name*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/active.js)\n\nReturns the active transition on the specified *node* with the specified *name*, if any. If no *name* is specified, null is used. Returns null if there is no such active transition on the specified node. This method is useful for creating chained transitions. For example, to initiate disco mode:\n\n``` javascript\nd3.selectAll(\"circle\").transition()\n    .delay(function(d, i) { return i * 50; })\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"green\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\n```\n\nSee [chained transitions](https://bl.ocks.org/mbostock/70d5541b547cc222aa02) for an example.\n\n### Modifying Elements\n\nAfter selecting elements and creating a transition with [*selection*.transition](#selection_transition), use the transition’s transformation methods to affect document content.\n\n###### *transition*.**attr**(*name*, *value*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/attr.js)\n\nFor each selected element, assigns the [attribute tween](#transition_attrTween) for the attribute with the specified *name* to the specified target *value*. The starting value of the tween is the attribute’s value when the transition starts. The target *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element.\n\nIf the target value is null, the attribute is removed when the transition starts. Otherwise, an interpolator is chosen based on the type of the target value, using the following algorithm:\n\n1.  If *value* is a number, use [interpolateNumber](d3-interpolate#interpolateNumber).\n2.  If *value* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](d3-interpolate#interpolateRgb).\n3.  Use [interpolateString](d3-interpolate#interpolateString).\n\nTo apply a different interpolator, use [*transition*.attrTween](#transition_attrTween).\n\n###### *transition*.**attrTween**(*name*\\[, *factory*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/attrTween.js)\n\nIf *factory* is specified and not null, assigns the attribute [tween](#transition_tween) for the attribute with the specified *name* to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \\[0, 1\\]. Lastly, the return value of the interpolator will be used to set the attribute value. The interpolator must return a string. (To remove an attribute at the start of a transition, use [*transition*.attr](#transition_attr); to remove an attribute at the end of a transition, use [*transition*.on](#transition_on) to listen for the *end* event.)\n\nIf the specified *factory* is null, removes the previously-assigned attribute tween of the specified *name*, if any. If *factory* is not specified, returns the current interpolator factory for attribute with the specified *name*, or undefined if no such tween exists.\n\nFor example, to interpolate the fill attribute from red to blue:\n\n``` javascript\ntransition.attrTween(\"fill\", function() {\n  return d3.interpolateRgb(\"red\", \"blue\");\n});\n```\n\nOr to interpolate from the current fill to blue, like [*transition*.attr](#transition_attr):\n\n``` javascript\ntransition.attrTween(\"fill\", function() {\n  return d3.interpolateRgb(this.getAttribute(\"fill\"), \"blue\");\n});\n```\n\nOr to apply a custom rainbow interpolator:\n\n``` javascript\ntransition.attrTween(\"fill\", function() {\n  return function(t) {\n    return \"hsl(\" + t * 360 + \",100%,50%)\";\n  };\n});\n```\n\nThis method is useful to specify a custom interpolator, such as one that understands [SVG paths](https://bl.ocks.org/mbostock/3916621). A useful technique is *data interpolation*, where [d3.interpolateObject](d3-interpolate#interpolateObject) is used to interpolate two data values, and the resulting value is then used (say, with a [shape](d3-shape)) to compute the new attribute value.\n\n###### *transition*.**style**(*name*, *value*\\[, *priority*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/style.js)\n\nFor each selected element, assigns the [style tween](#transition_styleTween) for the style with the specified *name* to the specified target *value* with the specified *priority*. The starting value of the tween is the style’s inline value if present, and otherwise its computed value, when the transition starts. The target *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element.\n\nIf the target value is null, the style is removed when the transition starts. Otherwise, an interpolator is chosen based on the type of the target value, using the following algorithm:\n\n1.  If *value* is a number, use [interpolateNumber](d3-interpolate#interpolateNumber).\n2.  If *value* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](d3-interpolate#interpolateRgb).\n3.  Use [interpolateString](d3-interpolate#interpolateString).\n\nTo apply a different interpolator, use [*transition*.styleTween](#transition_styleTween).\n\n###### *transition*.**styleTween**(*name*\\[, *factory*\\[, *priority*\\]\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/styleTween.js)\n\nIf *factory* is specified and not null, assigns the style [tween](#transition_tween) for the style with the specified *name* to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \\[0, 1\\]. Lastly, the return value of the interpolator will be used to set the style value with the specified *priority*. The interpolator must return a string. (To remove an style at the start of a transition, use [*transition*.style](#transition_style); to remove an style at the end of a transition, use [*transition*.on](#transition_on) to listen for the *end* event.)\n\nIf the specified *factory* is null, removes the previously-assigned style tween of the specified *name*, if any. If *factory* is not specified, returns the current interpolator factory for style with the specified *name*, or undefined if no such tween exists.\n\nFor example, to interpolate the fill style from red to blue:\n\n``` javascript\ntransition.styleTween(\"fill\", function() {\n  return d3.interpolateRgb(\"red\", \"blue\");\n});\n```\n\nOr to interpolate from the current fill to blue, like [*transition*.style](#transition_style):\n\n``` javascript\ntransition.styleTween(\"fill\", function() {\n  return d3.interpolateRgb(this.style.fill, \"blue\");\n});\n```\n\nOr to apply a custom rainbow interpolator:\n\n``` javascript\ntransition.styleTween(\"fill\", function() {\n  return function(t) {\n    return \"hsl(\" + t * 360 + \",100%,50%)\";\n  };\n});\n```\n\nThis method is useful to specify a custom interpolator, such as with *data interpolation*, where [d3.interpolateObject](d3-interpolate#interpolateObject) is used to interpolate two data values, and the resulting value is then used to compute the new style value.\n\n###### *transition*.**text**(*value*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/text.js)\n\nFor each selected element, sets the [text content](http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent) to the specified target *value* when the transition starts. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s text content. A null value will clear the content.\n\nTo interpolate text rather than to set it on start, use [*transition*.textTween](#transition_textTween) or append a replacement element and cross-fade opacity. Text is not interpolated by default because it is usually undesirable.\n\n###### *transition*.**textTween**(*factory*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/textTween.js), [Examples](https://observablehq.com/@d3/transition-texttween)\n\nIf *factory* is specified and not null, assigns the text [tween](#transition_tween) to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \\[0, 1\\]. Lastly, the return value of the interpolator will be used to set the text. The interpolator must return a string.\n\nFor example, to interpolate the text with integers from 0 to 100:\n\n``` javascript\ntransition.textTween(function() {\n  return d3.interpolateRound(0, 100);\n});\n```\n\nIf the specified *factory* is null, removes the previously-assigned text tween, if any. If *factory* is not specified, returns the current interpolator factory for text, or undefined if no such tween exists.\n\n###### *transition*.**remove**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/remove.js)\n\nFor each selected element, [removes](d3-selection#selection_remove) the element when the transition ends, as long as the element has no other active or pending transitions. If the element has other active or pending transitions, does nothing.\n\n###### *transition*.**tween**(*name*\\[, *value*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/tween.js)\n\nFor each selected element, assigns the tween with the specified *name* with the specified *value* function. The *value* must be specified as a function that returns a function. When the transition starts, the *value* function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned function is then invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \\[0, 1\\]. If the specified *value* is null, removes the previously-assigned tween of the specified *name*, if any.\n\nFor example, to interpolate the fill attribute to blue, like [*transition*.attr](#transition_attr):\n\n``` javascript\ntransition.tween(\"attr.fill\", function() {\n  const i = d3.interpolateRgb(this.getAttribute(\"fill\"), \"blue\");\n  return function(t) {\n    this.setAttribute(\"fill\", i(t));\n  };\n});\n```\n\nThis method is useful to specify a custom interpolator, or to perform side-effects, say to animate the [scroll offset](https://bl.ocks.org/mbostock/1649463).\n\n### Timing\n\nThe [easing](#transition_ease), [delay](#transition_delay) and [duration](#transition_duration) of a transition is configurable. For example, a per-element delay can be used to [stagger the reordering](https://observablehq.com/@d3/sortable-bar-chart) of elements, improving perception. See [Animated Transitions in Statistical Data Graphics](http://vis.berkeley.edu/papers/animated_transitions/) for recommendations.\n\n###### *transition*.**delay**(\\[*value*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/delay.js)\n\nFor each selected element, sets the transition delay to the specified *value* in milliseconds. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s transition delay. If a delay is not specified, it defaults to zero.\n\nIf a *value* is not specified, returns the current value of the delay for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.\n\nSetting the delay to a multiple of the index `i` is a convenient way to stagger transitions across a set of elements. For example:\n\n``` javascript\ntransition.delay(function(d, i) { return i * 10; });\n```\n\nOf course, you can also compute the delay as a function of the data, or [sort the selection](d3-selection#selection_sort) before computed an index-based delay.\n\n###### *transition*.**duration**(\\[*value*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/duration.js)\n\nFor each selected element, sets the transition duration to the specified *value* in milliseconds. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s transition duration. If a duration is not specified, it defaults to 250ms.\n\nIf a *value* is not specified, returns the current value of the duration for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.\n\n###### *transition*.**ease**(\\[*value*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/ease.js)\n\nSpecifies the transition [easing function](d3-ease) for all selected elements. The *value* must be specified as a function. The easing function is invoked for each frame of the animation, being passed the normalized time *t* in the range \\[0, 1\\]; it must then return the eased time *tʹ* which is typically also in the range \\[0, 1\\]. A good easing function should return 0 if *t* = 0 and 1 if *t* = 1. If an easing function is not specified, it defaults to [d3.easeCubic](d3-ease#easeCubic).\n\nIf a *value* is not specified, returns the current easing function for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.\n\n###### *transition*.**easeVarying**(*factory*) [Source](https://github.com/d3/d3-transition/blob/master/src/transition/easeVarying.js \"Source\")\n\nSpecifies a factory for the transition [easing function](d3-ease). The *factory* must be a function. It is invoked for each node of the selection, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. It must return an easing function.\n\n### Control Flow\n\nFor advanced usage, transitions provide methods for custom control flow.\n\n###### *transition*.**end**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/end.js)\n\nReturns a promise that resolves when every selected element finishes transitioning. If any element’s transition is cancelled or interrupted, the promise rejects.\n\n###### *transition*.**on**(*typenames*\\[, *listener*\\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/on.js)\n\nAdds or removes a *listener* to each selected element for the specified event *typenames*. The *typenames* is one of the following string event types:\n\n- `start` - when the transition starts.\n- `end` - when the transition ends.\n- `interrupt` - when the transition is interrupted.\n- `cancel` - when the transition is cancelled.\n\nSee [The Life of a Transition](#the-life-of-a-transition) for more. Note that these are *not* native DOM events as implemented by [*selection*.on](d3-selection#selection_on) and [*selection*.dispatch](d3-selection#selection_dispatch), but transition events!\n\nThe type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `start.foo` and `start.bar`. To specify multiple typenames, separate typenames with spaces, such as `interrupt end` or `start.foo start.bar`.\n\nWhen a specified transition event is dispatched on a selected node, the specified *listener* will be invoked for the transitioning element, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. Listeners always see the latest datum for their element, but the index is a property of the selection and is fixed when the listener is assigned; to update the index, re-assign the listener.\n\nIf an event listener was previously registered for the same *typename* on a selected element, the old listener is removed before the new listener is added. To remove a listener, pass null as the *listener*. To remove all listeners for a given name, pass null as the *listener* and `.foo` as the *typename*, where `foo` is the name; to remove all listeners with no name, specify `.` as the *typename*.\n\nIf a *listener* is not specified, returns the currently-assigned listener for the specified event *typename* on the first (non-null) selected element, if any. If multiple typenames are specified, the first matching listener is returned.\n\n###### *transition*.**each**(*function*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/each.js)\n\nInvokes the specified *function* for each selected element, passing in the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously. Equivalent to [*selection*.each](d3-selection#selection_each).\n\n###### *transition*.**call**(*function*\\[, *arguments…*\\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/call.js)\n\nInvokes the specified *function* exactly once, passing in this transition along with any optional *arguments*. Returns this transition. This is equivalent to invoking the function by hand but facilitates method chaining. For example, to set several attributes in a reusable function:\n\n``` javascript\nfunction color(transition, fill, stroke) {\n  transition\n      .style(\"fill\", fill)\n      .style(\"stroke\", stroke);\n}\n```\n\nNow say:\n\n``` javascript\nd3.selectAll(\"div\").transition().call(color, \"red\", \"blue\");\n```\n\nThis is equivalent to:\n\n``` javascript\ncolor(d3.selectAll(\"div\").transition(), \"red\", \"blue\");\n```\n\nEquivalent to [*selection*.call](d3-selection#selection_call).\n\n###### *transition*.**empty**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/empty.js)\n\nReturns true if this transition contains no (non-null) elements. Equivalent to [*selection*.empty](d3-selection#selection_empty).\n\n###### *transition*.**nodes**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/nodes.js)\n\nReturns an array of all (non-null) elements in this transition. Equivalent to [*selection*.nodes](d3-selection#selection_nodes).\n\n###### *transition*.**node**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/node.js)\n\nReturns the first (non-null) element in this transition. If the transition is empty, returns null. Equivalent to [*selection*.node](d3-selection#selection_node).\n\n###### *transition*.**size**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/size.js)\n\nReturns the total number of elements in this transition. Equivalent to [*selection*.size](d3-selection#selection_size).\n\n### The Life of a Transition\n\nImmediately after creating a transition, such as by [*selection*.transition](#selection_transition) or [*transition*.transition](#transition_transition), you may configure the transition using methods such as [*transition*.delay](#transition_delay), [*transition*.duration](#transition_duration), [*transition*.attr](#transition_attr) and [*transition*.style](#transition_style). Methods that specify target values (such as *transition*.attr) are evaluated synchronously; however, methods that require the starting value for interpolation, such as [*transition*.attrTween](#transition_attrTween) and [*transition*.styleTween](#transition_styleTween), must be deferred until the transition starts.\n\nShortly after creation, either at the end of the current frame or during the next frame, the transition is scheduled. At this point, the delay and `start` event listeners may no longer be changed; attempting to do so throws an error with the message “too late: already scheduled” (or if the transition has ended, “transition not found”).\n\nWhen the transition subsequently starts, it interrupts the active transition of the same name on the same element, if any, dispatching an `interrupt` event to registered listeners. (Note that interrupts happen on start, not creation, and thus even a zero-delay transition will not immediately interrupt the active transition: the old transition is given a final frame. Use [*selection*.interrupt](#selection_interrupt) to interrupt immediately.) The starting transition also cancels any pending transitions of the same name on the same element that were created before the starting transition. The transition then dispatches a `start` event to registered listeners. This is the last moment at which the transition may be modified: the transition’s timing, tweens, and listeners may not be changed when it is running; attempting to do so throws an error with the message “too late: already running” (or if the transition has ended, “transition not found”). The transition initializes its tweens immediately after starting.\n\nDuring the frame the transition starts, but *after* all transitions starting this frame have been started, the transition invokes its tweens for the first time. Batching tween initialization, which typically involves reading from the DOM, improves performance by avoiding interleaved DOM reads and writes.\n\nFor each frame that a transition is active, it invokes its tweens with an [eased](#transition_ease) *t*-value ranging from 0 to 1. Within each frame, the transition invokes its tweens in the order they were registered.\n\nWhen a transition ends, it invokes its tweens a final time with a (non-eased) *t*-value of 1. It then dispatches an `end` event to registered listeners. This is the last moment at which the transition may be inspected: after ending, the transition is deleted from the element, and its configuration is destroyed. (A transition’s configuration is also destroyed on interrupt or cancel.) Attempting to inspect a transition after it is destroyed throws an error with the message “transition not found”.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-transition](https://github.com/d3/d3-transition)"
- name: transition.attr()
  id: d3-transition#transition_attr
  summary: For each selected element, assigns the attribute tween for the attribute with the specified name to the specified target value
  belongs_to: transition
  description: |-
    ###### *transition*.**attr**(*name*, *value*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/attr.js)

    For each selected element, assigns the [attribute tween](#transition_attrTween) for the attribute with the specified *name* to the specified target *value*. The starting value of the tween is the attribute’s value when the transition starts. The target *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element.

    If the target value is null, the attribute is removed when the transition starts. Otherwise, an interpolator is chosen based on the type of the target value, using the following algorithm:

    1.  If *value* is a number, use [interpolateNumber](d3-interpolate#interpolateNumber).
    2.  If *value* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](d3-interpolate#interpolateRgb).
    3.  Use [interpolateString](d3-interpolate#interpolateString).

    To apply a different interpolator, use [*transition*.attrTween](#transition_attrTween).
- name: transition.attrs()
  id: d3-selection-multi#transition_attrs
  summary: Like selection.attrs, but for transition.attr
  belongs_to: selection-multi
  description: |-
    ###### *transition*.**attrs**(*values*)

    Like [*selection*.attrs](#selection_attrs), but for [*transition*.attr](d3-transition#transition_attr).
- name: transition.attrTween()
  id: d3-transition#transition_attrtween
  summary: If factory is specified and not null, assigns the attribute tween for the attribute with the specified name to the specified interpolator factory
  belongs_to: transition
  description: |-
    ###### *transition*.**attrTween**(*name*\[, *factory*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/attrTween.js)

    If *factory* is specified and not null, assigns the attribute [tween](#transition_tween) for the attribute with the specified *name* to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \[0, 1\]. Lastly, the return value of the interpolator will be used to set the attribute value. The interpolator must return a string. (To remove an attribute at the start of a transition, use [*transition*.attr](#transition_attr); to remove an attribute at the end of a transition, use [*transition*.on](#transition_on) to listen for the *end* event.)

    If the specified *factory* is null, removes the previously-assigned attribute tween of the specified *name*, if any. If *factory* is not specified, returns the current interpolator factory for attribute with the specified *name*, or undefined if no such tween exists.

    For example, to interpolate the fill attribute from red to blue:

    ``` javascript
    transition.attrTween("fill", function() {
      return d3.interpolateRgb("red", "blue");
    });
    ```

    Or to interpolate from the current fill to blue, like [*transition*.attr](#transition_attr):

    ``` javascript
    transition.attrTween("fill", function() {
      return d3.interpolateRgb(this.getAttribute("fill"), "blue");
    });
    ```

    Or to apply a custom rainbow interpolator:

    ``` javascript
    transition.attrTween("fill", function() {
      return function(t) {
        return "hsl(" + t * 360 + ",100%,50%)";
      };
    });
    ```

    This method is useful to specify a custom interpolator, such as one that understands [SVG paths](https://bl.ocks.org/mbostock/3916621). A useful technique is *data interpolation*, where [d3.interpolateObject](d3-interpolate#interpolateObject) is used to interpolate two data values, and the resulting value is then used (say, with a [shape](d3-shape)) to compute the new attribute value.
- name: transition.call()
  id: d3-transition#transition_call
  summary: Invokes the specified function exactly once, passing in this transition along with any optional arguments
  belongs_to: transition
  description: |-
    ###### *transition*.**call**(*function*\[, *arguments…*\]) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/call.js)

    Invokes the specified *function* exactly once, passing in this transition along with any optional *arguments*. Returns this transition. This is equivalent to invoking the function by hand but facilitates method chaining. For example, to set several attributes in a reusable function:

    ``` javascript
    function color(transition, fill, stroke) {
      transition
          .style("fill", fill)
          .style("stroke", stroke);
    }
    ```

    Now say:

    ``` javascript
    d3.selectAll("div").transition().call(color, "red", "blue");
    ```

    This is equivalent to:

    ``` javascript
    color(d3.selectAll("div").transition(), "red", "blue");
    ```

    Equivalent to [*selection*.call](d3-selection#selection_call).
- name: transition.delay()
  id: d3-transition#transition_delay
  summary: For each selected element, sets the transition delay to the specified value in milliseconds
  belongs_to: transition
  description: |-
    ###### *transition*.**delay**(\[*value*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/delay.js)

    For each selected element, sets the transition delay to the specified *value* in milliseconds. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s transition delay. If a delay is not specified, it defaults to zero.

    If a *value* is not specified, returns the current value of the delay for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.

    Setting the delay to a multiple of the index `i` is a convenient way to stagger transitions across a set of elements. For example:

    ``` javascript
    transition.delay(function(d, i) { return i * 10; });
    ```

    Of course, you can also compute the delay as a function of the data, or [sort the selection](d3-selection#selection_sort) before computed an index-based delay.
- name: transition.duration()
  id: d3-transition#transition_duration
  summary: For each selected element, sets the transition duration to the specified value in milliseconds
  belongs_to: transition
  description: |-
    ###### *transition*.**duration**(\[*value*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/duration.js)

    For each selected element, sets the transition duration to the specified *value* in milliseconds. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s transition duration. If a duration is not specified, it defaults to 250ms.

    If a *value* is not specified, returns the current value of the duration for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.
- name: transition.each()
  id: d3-transition#transition_each
  summary: Invokes the specified function for each selected element, passing in the current datum (d), the current index (i), and the current group (nodes), with this as the current DOM element
  belongs_to: transition
  description: |-
    ###### *transition*.**each**(*function*) · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/each.js)

    Invokes the specified *function* for each selected element, passing in the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. This method can be used to invoke arbitrary code for each selected element, and is useful for creating a context to access parent and child data simultaneously. Equivalent to [*selection*.each](d3-selection#selection_each).
- name: transition.ease()
  id: d3-transition#transition_ease
  summary: Specifies the transition easing function for all selected elements
  belongs_to: transition
  description: |-
    ###### *transition*.**ease**(\[*value*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/ease.js)

    Specifies the transition [easing function](d3-ease) for all selected elements. The *value* must be specified as a function. The easing function is invoked for each frame of the animation, being passed the normalized time *t* in the range \[0, 1\]; it must then return the eased time *tʹ* which is typically also in the range \[0, 1\]. A good easing function should return 0 if *t* = 0 and 1 if *t* = 1. If an easing function is not specified, it defaults to [d3.easeCubic](d3-ease#easeCubic).

    If a *value* is not specified, returns the current easing function for the first (non-null) element in the transition. This is generally useful only if you know that the transition contains exactly one element.
- name: transition.easeVarying()
  id: d3-transition#transition_easevarying
  summary: Specifies a factory for the transition easing function
  belongs_to: transition
  description: |-
    ###### *transition*.**easeVarying**(*factory*) [Source](https://github.com/d3/d3-transition/blob/master/src/transition/easeVarying.js "Source")

    Specifies a factory for the transition [easing function](d3-ease). The *factory* must be a function. It is invoked for each node of the selection, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. It must return an easing function.

    ### Control Flow

    For advanced usage, transitions provide methods for custom control flow.
- name: transition.empty()
  id: d3-transition#transition_empty
  summary: Returns true if this transition contains no (non-null) elements
  belongs_to: transition
  description: |-
    ###### *transition*.**empty**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/empty.js)

    Returns true if this transition contains no (non-null) elements. Equivalent to [*selection*.empty](d3-selection#selection_empty).
- name: transition.end()
  id: d3-transition#transition_end
  summary: Returns a promise that resolves when every selected element finishes transitioning
  belongs_to: transition
  description: |-
    ###### *transition*.**end**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/end.js)

    Returns a promise that resolves when every selected element finishes transitioning. If any element’s transition is cancelled or interrupted, the promise rejects.
- name: transition.filter()
  id: d3-transition#transition_filter
  summary: For each selected element, selects only the elements that match the specified filter, and returns a transition on the resulting selection
  belongs_to: transition
  description: |-
    ###### *transition*.**filter**(*filter*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/filter.js)

    For each selected element, selects only the elements that match the specified *filter*, and returns a transition on the resulting selection. The *filter* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.filter](d3-selection#selection_filter), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .filter(filter)
      .transition(transition)
    ```
- name: transition.merge()
  id: d3-transition#transition_merge
  summary: Returns a new transition merging this transition with the specified other transition, which must have the same id as this transition
  belongs_to: transition
  description: |-
    ###### *transition*.**merge**(*other*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/merge.js)

    Returns a new transition merging this transition with the specified *other* transition, which must have the same id as this transition. The returned transition has the same number of groups, the same parents, the same name and the same id as this transition. Any missing (null) elements in this transition are filled with the corresponding element, if present (not null), from the *other* transition.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), merging with the selection likewise derived from the *other* transition via [*selection*.merge](d3-selection#selection_merge), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .merge(other.selection())
      .transition(transition)
    ```
- name: transition.node()
  id: d3-transition#transition_node
  summary: Returns the first (non-null) element in this transition
  belongs_to: transition
  description: |-
    ###### *transition*.**node**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/node.js)

    Returns the first (non-null) element in this transition. If the transition is empty, returns null. Equivalent to [*selection*.node](d3-selection#selection_node).
- name: transition.nodes()
  id: d3-transition#transition_nodes
  summary: Returns an array of all (non-null) elements in this transition
  belongs_to: transition
  description: |-
    ###### *transition*.**nodes**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/nodes.js)

    Returns an array of all (non-null) elements in this transition. Equivalent to [*selection*.nodes](d3-selection#selection_nodes).
- name: transition.on()
  id: d3-transition#transition_on
  summary: Adds or removes a listener to each selected element for the specified event typenames
  belongs_to: transition
  description: |-
    ###### *transition*.**on**(*typenames*\[, *listener*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/on.js)

    Adds or removes a *listener* to each selected element for the specified event *typenames*. The *typenames* is one of the following string event types:

    - `start` - when the transition starts.
    - `end` - when the transition ends.
    - `interrupt` - when the transition is interrupted.
    - `cancel` - when the transition is cancelled.

    See [The Life of a Transition](#the-life-of-a-transition) for more. Note that these are *not* native DOM events as implemented by [*selection*.on](d3-selection#selection_on) and [*selection*.dispatch](d3-selection#selection_dispatch), but transition events!

    The type may be optionally followed by a period (`.`) and a name; the optional name allows multiple callbacks to be registered to receive events of the same type, such as `start.foo` and `start.bar`. To specify multiple typenames, separate typenames with spaces, such as `interrupt end` or `start.foo start.bar`.

    When a specified transition event is dispatched on a selected node, the specified *listener* will be invoked for the transitioning element, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. Listeners always see the latest datum for their element, but the index is a property of the selection and is fixed when the listener is assigned; to update the index, re-assign the listener.

    If an event listener was previously registered for the same *typename* on a selected element, the old listener is removed before the new listener is added. To remove a listener, pass null as the *listener*. To remove all listeners for a given name, pass null as the *listener* and `.foo` as the *typename*, where `foo` is the name; to remove all listeners with no name, specify `.` as the *typename*.

    If a *listener* is not specified, returns the currently-assigned listener for the specified event *typename* on the first (non-null) selected element, if any. If multiple typenames are specified, the first matching listener is returned.
- name: transition.remove()
  id: d3-transition#transition_remove
  summary: For each selected element, removes the element when the transition ends, as long as the element has no other active or pending transitions
  belongs_to: transition
  description: |-
    ###### *transition*.**remove**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/remove.js)

    For each selected element, [removes](d3-selection#selection_remove) the element when the transition ends, as long as the element has no other active or pending transitions. If the element has other active or pending transitions, does nothing.
- name: transition.select()
  id: d3-transition#transition_select
  summary: For each selected element, selects the first descendant element that matches the specified selector string, if any, and returns a transition on the resulting selection
  belongs_to: transition
  description: |-
    ###### *transition*.**select**(*selector*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/select.js)

    For each selected element, selects the first descendant element that matches the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.select](d3-selection#selection_select), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .select(selector)
      .transition(transition)
    ```
- name: transition.selectAll()
  id: d3-transition#transition_selectall
  summary: For each selected element, selects all descendant elements that match the specified selector string, if any, and returns a transition on the resulting selection
  belongs_to: transition
  description: |-
    ###### *transition*.**selectAll**(*selector*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selectAll.js)

    For each selected element, selects all descendant elements that match the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectAll](d3-selection#selection_selectAll), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .selectAll(selector)
      .transition(transition)
    ```
- name: transition.selectChild()
  id: d3-transition#transition_selectchild
  summary: For each selected element, selects the first child element that matches the specified selector string, if any, and returns a transition on the resulting selection
  belongs_to: transition
  description: |-
    ###### *transition*.**selectChild**(\[*selector*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/select.js)

    For each selected element, selects the first child element that matches the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectChild](d3-selection#selection_selectChild), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .selectChild(selector)
      .transition(transition)
    ```
- name: transition.selectChildren()
  id: d3-transition#transition_selectchildren
  summary: For each selected element, selects all children that match the specified selector string, if any, and returns a transition on the resulting selection
  belongs_to: transition
  description: |-
    ###### *transition*.**selectChildren**(\[*selector*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selectAll.js)

    For each selected element, selects all children that match the specified *selector* string, if any, and returns a transition on the resulting selection. The *selector* may be specified either as a selector string or a function. If a function, it is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The new transition has the same id, name and timing as this transition; however, if a transition with the same id already exists on a selected element, the existing transition is returned for that element.

    This method is equivalent to deriving the selection for this transition via [*transition*.selection](#transition_selection), creating a subselection via [*selection*.selectChildren](d3-selection#selection_selectChildren), and then creating a new transition via [*selection*.transition](#selection_transition):

    ``` javascript
    transition
      .selection()
      .selectChildren(selector)
      .transition(transition)
    ```
- name: transition.selection()
  id: d3-transition#transition_selection
  summary: Returns the selection corresponding to this transition
  belongs_to: transition
  description: |-
    ###### *transition*.**selection**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/selection.js)

    Returns the [selection](d3-selection#selection) corresponding to this transition.
- name: transition.size()
  id: d3-transition#transition_size
  summary: Returns the total number of elements in this transition
  belongs_to: transition
  description: "###### *transition*.**size**() · [Source](https://github.com/d3/d3-selection/blob/master/src/selection/size.js)\n\nReturns the total number of elements in this transition. Equivalent to [*selection*.size](d3-selection#selection_size).\n\n### The Life of a Transition\n\nImmediately after creating a transition, such as by [*selection*.transition](#selection_transition) or [*transition*.transition](#transition_transition), you may configure the transition using methods such as [*transition*.delay](#transition_delay), [*transition*.duration](#transition_duration), [*transition*.attr](#transition_attr) and [*transition*.style](#transition_style). Methods that specify target values (such as *transition*.attr) are evaluated synchronously; however, methods that require the starting value for interpolation, such as [*transition*.attrTween](#transition_attrTween) and [*transition*.styleTween](#transition_styleTween), must be deferred until the transition starts.\n\nShortly after creation, either at the end of the current frame or during the next frame, the transition is scheduled. At this point, the delay and `start` event listeners may no longer be changed; attempting to do so throws an error with the message “too late: already scheduled” (or if the transition has ended, “transition not found”).\n\nWhen the transition subsequently starts, it interrupts the active transition of the same name on the same element, if any, dispatching an `interrupt` event to registered listeners. (Note that interrupts happen on start, not creation, and thus even a zero-delay transition will not immediately interrupt the active transition: the old transition is given a final frame. Use [*selection*.interrupt](#selection_interrupt) to interrupt immediately.) The starting transition also cancels any pending transitions of the same name on the same element that were created before the starting transition. The transition then dispatches a `start` event to registered listeners. This is the last moment at which the transition may be modified: the transition’s timing, tweens, and listeners may not be changed when it is running; attempting to do so throws an error with the message “too late: already running” (or if the transition has ended, “transition not found”). The transition initializes its tweens immediately after starting.\n\nDuring the frame the transition starts, but *after* all transitions starting this frame have been started, the transition invokes its tweens for the first time. Batching tween initialization, which typically involves reading from the DOM, improves performance by avoiding interleaved DOM reads and writes.\n\nFor each frame that a transition is active, it invokes its tweens with an [eased](#transition_ease) *t*-value ranging from 0 to 1. Within each frame, the transition invokes its tweens in the order they were registered.\n\nWhen a transition ends, it invokes its tweens a final time with a (non-eased) *t*-value of 1. It then dispatches an `end` event to registered listeners. This is the last moment at which the transition may be inspected: after ending, the transition is deleted from the element, and its configuration is destroyed. (A transition’s configuration is also destroyed on interrupt or cancel.) Attempting to inspect a transition after it is destroyed throws an error with the message “transition not found”.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-transition](https://github.com/d3/d3-transition)"
- name: transition.style()
  id: d3-transition#transition_style
  summary: For each selected element, assigns the style tween for the style with the specified name to the specified target value with the specified priority
  belongs_to: transition
  description: |-
    ###### *transition*.**style**(*name*, *value*\[, *priority*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/style.js)

    For each selected element, assigns the [style tween](#transition_styleTween) for the style with the specified *name* to the specified target *value* with the specified *priority*. The starting value of the tween is the style’s inline value if present, and otherwise its computed value, when the transition starts. The target *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element.

    If the target value is null, the style is removed when the transition starts. Otherwise, an interpolator is chosen based on the type of the target value, using the following algorithm:

    1.  If *value* is a number, use [interpolateNumber](d3-interpolate#interpolateNumber).
    2.  If *value* is a [color](d3-color#color) or a string coercible to a color, use [interpolateRgb](d3-interpolate#interpolateRgb).
    3.  Use [interpolateString](d3-interpolate#interpolateString).

    To apply a different interpolator, use [*transition*.styleTween](#transition_styleTween).
- name: transition.styles()
  id: d3-selection-multi#transition_styles
  summary: Like selection.styles, but for transition.style
  belongs_to: selection-multi
  description: "###### *transition*.**styles**(*values*\\[, *priority*\\])\n\nLike [*selection*.styles](#selection_styles), but for [*transition*.style](d3-transition#transition_style).\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-selection-multi](https://github.com/d3/d3-selection-multi)"
- name: transition.styleTween()
  id: d3-transition#transition_styletween
  summary: If factory is specified and not null, assigns the style tween for the style with the specified name to the specified interpolator factory
  belongs_to: transition
  description: |-
    ###### *transition*.**styleTween**(*name*\[, *factory*\[, *priority*\]\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/styleTween.js)

    If *factory* is specified and not null, assigns the style [tween](#transition_tween) for the style with the specified *name* to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \[0, 1\]. Lastly, the return value of the interpolator will be used to set the style value with the specified *priority*. The interpolator must return a string. (To remove an style at the start of a transition, use [*transition*.style](#transition_style); to remove an style at the end of a transition, use [*transition*.on](#transition_on) to listen for the *end* event.)

    If the specified *factory* is null, removes the previously-assigned style tween of the specified *name*, if any. If *factory* is not specified, returns the current interpolator factory for style with the specified *name*, or undefined if no such tween exists.

    For example, to interpolate the fill style from red to blue:

    ``` javascript
    transition.styleTween("fill", function() {
      return d3.interpolateRgb("red", "blue");
    });
    ```

    Or to interpolate from the current fill to blue, like [*transition*.style](#transition_style):

    ``` javascript
    transition.styleTween("fill", function() {
      return d3.interpolateRgb(this.style.fill, "blue");
    });
    ```

    Or to apply a custom rainbow interpolator:

    ``` javascript
    transition.styleTween("fill", function() {
      return function(t) {
        return "hsl(" + t * 360 + ",100%,50%)";
      };
    });
    ```

    This method is useful to specify a custom interpolator, such as with *data interpolation*, where [d3.interpolateObject](d3-interpolate#interpolateObject) is used to interpolate two data values, and the resulting value is then used to compute the new style value.
- name: transition.text()
  id: d3-transition#transition_text
  summary: For each selected element, sets the text content to the specified target value when the transition starts
  belongs_to: transition
  description: |-
    ###### *transition*.**text**(*value*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/text.js)

    For each selected element, sets the [text content](http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent) to the specified target *value* when the transition starts. The *value* may be specified either as a constant or a function. If a function, it is immediately evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s text content. A null value will clear the content.

    To interpolate text rather than to set it on start, use [*transition*.textTween](#transition_textTween) or append a replacement element and cross-fade opacity. Text is not interpolated by default because it is usually undesirable.
- name: transition.textTween()
  id: d3-transition#transition_texttween
  summary: If factory is specified and not null, assigns the text tween to the specified interpolator factory
  belongs_to: transition
  description: |-
    ###### *transition*.**textTween**(*factory*) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/textTween.js), [Examples](https://observablehq.com/@d3/transition-texttween)

    If *factory* is specified and not null, assigns the text [tween](#transition_tween) to the specified interpolator *factory*. An interpolator factory is a function that returns an [interpolator](d3-interpolate); when the transition starts, the *factory* is evaluated for each selected element, in order, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element. The returned interpolator will then be invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \[0, 1\]. Lastly, the return value of the interpolator will be used to set the text. The interpolator must return a string.

    For example, to interpolate the text with integers from 0 to 100:

    ``` javascript
    transition.textTween(function() {
      return d3.interpolateRound(0, 100);
    });
    ```

    If the specified *factory* is null, removes the previously-assigned text tween, if any. If *factory* is not specified, returns the current interpolator factory for text, or undefined if no such tween exists.
- name: transition.transition()
  id: d3-transition#transition_transition
  summary: Returns a new transition on the same selected elements as this transition, scheduled to start when this transition ends
  belongs_to: transition
  description: |-
    ###### *transition*.**transition**() · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/transition.js)

    Returns a new transition on the same selected elements as this transition, scheduled to start when this transition ends. The new transition inherits a reference time equal to this transition’s time plus its [delay](#transition_delay) and [duration](#transition_duration). The new transition also inherits this transition’s name, duration, and [easing](#transition_ease). This method can be used to schedule a sequence of chained transitions. For example:

    ``` javascript
    d3.selectAll(".apple")
      .transition() // First fade to green.
        .style("fill", "green")
      .transition() // Then red.
        .style("fill", "red")
      .transition() // Wait one second. Then brown, and remove.
        .delay(1000)
        .style("fill", "brown")
        .remove();
    ```

    The delay for each transition is relative to its previous transition. Thus, in the above example, apples will stay red for one second before the last transition to brown starts.
- name: transition.tween()
  id: d3-transition#transition_tween
  summary: For each selected element, assigns the tween with the specified name with the specified value function
  belongs_to: transition
  description: |-
    ###### *transition*.**tween**(*name*\[, *value*\]) · [Source](https://github.com/d3/d3-transition/blob/master/src/transition/tween.js)

    For each selected element, assigns the tween with the specified *name* with the specified *value* function. The *value* must be specified as a function that returns a function. When the transition starts, the *value* function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The returned function is then invoked for each frame of the transition, in order, being passed the [eased](#transition_ease) time *t*, typically in the range \[0, 1\]. If the specified *value* is null, removes the previously-assigned tween of the specified *name*, if any.

    For example, to interpolate the fill attribute to blue, like [*transition*.attr](#transition_attr):

    ``` javascript
    transition.tween("attr.fill", function() {
      const i = d3.interpolateRgb(this.getAttribute("fill"), "blue");
      return function(t) {
        this.setAttribute("fill", i(t));
      };
    });
    ```

    This method is useful to specify a custom interpolator, or to perform side-effects, say to animate the [scroll offset](https://bl.ocks.org/mbostock/1649463).

    ### Timing

    The [easing](#transition_ease), [delay](#transition_delay) and [duration](#transition_duration) of a transition is configurable. For example, a per-element delay can be used to [stagger the reordering](https://observablehq.com/@d3/sortable-bar-chart) of elements, improving perception. See [Animated Transitions in Statistical Data Graphics](http://vis.berkeley.edu/papers/animated_transitions/) for recommendations.
- name: tree()
  id: d3-hierarchy#_tree
  summary: The coordinates x and y represent an arbitrary coordinate system; for example, you can treat x as an angle and y as a radius to produce a radial layout
  belongs_to: hierarchy
  description: |-
    ###### *tree*(*root*)

    Lays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:

    - *node*.x - the *x*-coordinate of the node
    - *node*.y - the *y*-coordinate of the node

    The coordinates *x* and *y* represent an arbitrary coordinate system; for example, you can treat *x* as an angle and *y* as a radius to produce a [radial layout](https://observablehq.com/@d3/radial-tidy-tree). You may want to call [*root*.sort](#node_sort) before passing the hierarchy to the tree layout.
- name: tree.nodeSize()
  id: d3-hierarchy#tree_nodesize
  summary: If size is specified, sets this tree layout’s node size to the specified two-element array of numbers [width, height] and returns this tree layout
  belongs_to: hierarchy
  description: |-
    ###### *tree*.**nodeSize**(\[*size*\])

    If *size* is specified, sets this tree layout’s node size to the specified two-element array of numbers \[*width*, *height*\] and returns this tree layout. If *size* is not specified, returns the current node size, which defaults to null. A node size of null indicates that a [layout size](#tree_size) will be used instead. When a node size is specified, the root node is always positioned at ⟨0, 0⟩.
- name: tree.separation()
  id: d3-hierarchy#tree_separation
  summary: If separation is specified, sets the separation accessor to the specified function and returns this tree layout
  belongs_to: hierarchy
  description: |-
    ###### *tree*.**separation**(\[*separation*\])

    If *separation* is specified, sets the separation accessor to the specified function and returns this tree layout. If *separation* is not specified, returns the current separation accessor, which defaults to:

    ``` javascript
    function separation(a, b) {
      return a.parent == b.parent ? 1 : 2;
    }
    ```

    A variation that is more appropriate for radial layouts reduces the separation gap proportionally to the radius:

    ``` javascript
    function separation(a, b) {
      return (a.parent == b.parent ? 1 : 2) / a.depth;
    }
    ```

    The separation accessor is used to separate neighboring nodes. The separation function is passed two nodes *a* and *b*, and must return the desired separation. The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.
- name: tree.size()
  id: d3-hierarchy#tree_size
  summary: If size is specified, sets this tree layout’s size to the specified two-element array of numbers [width, height] and returns this tree layout
  belongs_to: hierarchy
  description: |-
    ###### *tree*.**size**(\[*size*\])

    If *size* is specified, sets this tree layout’s size to the specified two-element array of numbers \[*width*, *height*\] and returns this tree layout. If *size* is not specified, returns the current layout size, which defaults to \[1, 1\]. A layout size of null indicates that a [node size](#tree_nodeSize) will be used instead. The coordinates *x* and *y* represent an arbitrary coordinate system; for example, to produce a [radial layout](https://observablehq.com/@d3/radial-tidy-tree), a size of \[360, *radius*\] corresponds to a breadth of 360° and a depth of *radius*.
- name: treemap()
  id: d3-hierarchy#_treemap
  summary: You must call root.sum before passing the hierarchy to the treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*(*root*)

    Lays out the specified *root* [hierarchy](#hierarchy), assigning the following properties on *root* and its descendants:

    - *node*.x0 - the left edge of the rectangle
    - *node*.y0 - the top edge of the rectangle
    - *node*.x1 - the right edge of the rectangle
    - *node*.y1 - the bottom edge of the rectangle

    You must call [*root*.sum](#node_sum) before passing the hierarchy to the treemap layout. You probably also want to call [*root*.sort](#node_sort) to order the hierarchy before computing the layout.
- name: treemap.padding()
  id: d3-hierarchy#treemap_padding
  summary: If padding is specified, sets the inner and outer padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**padding**(\[*padding*\])

    If *padding* is specified, sets the [inner](#treemap_paddingInner) and [outer](#treemap_paddingOuter) padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current inner padding function.
- name: treemap.paddingBottom()
  id: d3-hierarchy#treemap_paddingbottom
  summary: If padding is specified, sets the bottom padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingBottom**(\[*padding*\])

    If *padding* is specified, sets the bottom padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current bottom padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The bottom padding is used to separate the bottom edge of a node from its children.
- name: treemap.paddingInner()
  id: d3-hierarchy#treemap_paddinginner
  summary: If padding is specified, sets the inner padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingInner**(\[*padding*\])

    If *padding* is specified, sets the inner padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current inner padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The inner padding is used to separate a node’s adjacent children.
- name: treemap.paddingLeft()
  id: d3-hierarchy#treemap_paddingleft
  summary: If padding is specified, sets the left padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingLeft**(\[*padding*\])

    If *padding* is specified, sets the left padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current left padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The left padding is used to separate the left edge of a node from its children.

    #### Treemap Tiling

    Several built-in tiling methods are provided for use with [*treemap*.tile](#treemap_tile).
- name: treemap.paddingOuter()
  id: d3-hierarchy#treemap_paddingouter
  summary: If padding is specified, sets the top, right, bottom and left padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingOuter**(\[*padding*\])

    If *padding* is specified, sets the [top](#treemap_paddingTop), [right](#treemap_paddingRight), [bottom](#treemap_paddingBottom) and [left](#treemap_paddingLeft) padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current top padding function.
- name: treemap.paddingRight()
  id: d3-hierarchy#treemap_paddingright
  summary: If padding is specified, sets the right padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingRight**(\[*padding*\])

    If *padding* is specified, sets the right padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current right padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The right padding is used to separate the right edge of a node from its children.
- name: treemap.paddingTop()
  id: d3-hierarchy#treemap_paddingtop
  summary: If padding is specified, sets the top padding to the specified number or function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**paddingTop**(\[*padding*\])

    If *padding* is specified, sets the top padding to the specified number or function and returns this treemap layout. If *padding* is not specified, returns the current top padding function, which defaults to the constant zero. If *padding* is a function, it is invoked for each node with children, being passed the current node. The top padding is used to separate the top edge of a node from its children.
- name: treemap.round()
  id: d3-hierarchy#treemap_round
  summary: If round is specified, enables or disables rounding according to the given boolean and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**round**(\[*round*\])

    If *round* is specified, enables or disables rounding according to the given boolean and returns this treemap layout. If *round* is not specified, returns the current rounding state, which defaults to false.
- name: treemap.size()
  id: d3-hierarchy#treemap_size
  summary: If size is specified, sets this treemap layout’s size to the specified two-element array of numbers [width, height] and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**size**(\[*size*\])

    If *size* is specified, sets this treemap layout’s size to the specified two-element array of numbers \[*width*, *height*\] and returns this treemap layout. If *size* is not specified, returns the current size, which defaults to \[1, 1\].
- name: treemap.tile()
  id: d3-hierarchy#treemap_tile
  summary: If tile is specified, sets the tiling method to the specified function and returns this treemap layout
  belongs_to: hierarchy
  description: |-
    ###### *treemap*.**tile**(\[*tile*\])

    If *tile* is specified, sets the [tiling method](#treemap-tiling) to the specified function and returns this treemap layout. If *tile* is not specified, returns the current tiling method, which defaults to [d3.treemapSquarify](#treemapSquarify) with the golden ratio.
- name: tsv2csv
  id: d3-dsv#tsv2csv
  summary: Equivalent to dsv2dsv, but the input delimiter defaults to the tab character (\t)
  belongs_to: dsv
  description: |-
    ###### **tsv2csv** \[*options…*\] \[*file*\]

    Equivalent to [dsv2dsv](#dsv2dsv), but the [input delimiter](#dsv2dsv_output_delimiter) defaults to the tab character (\t).
- name: tsv2json
  id: d3-dsv#tsv2json
  summary: Equivalent to dsv2json, but the input delimiter defaults to the tab character (\t)
  belongs_to: dsv
  description: |-
    ###### **tsv2json** \[*options…*\] \[*file*\]

    Equivalent to [dsv2json](#dsv2json), but the [input delimiter](#dsv2json_input_delimiter) defaults to the tab character (\t).
- name: voronoi
  id: d3-voronoi
  summary: 'Deprecation notice: Consider using the newer d3-delaunay instead of d3-voronoi'
  description: "# d3-voronoi\n\n**Deprecation notice**: Consider using the newer [d3-delaunay](d3-delaunay) instead of d3-voronoi. Based on [Delaunator](https://github.com/mapbox/delaunator), d3-delaunay is 5-10× faster than d3-voronoi to construct the Delaunay triangulation or the Voronoi diagram, is more robust numerically, has Canvas rendering built-in, allows traversal of the Delaunay graph, and a variety of other improvements.\n\n------------------------------------------------------------------------\n\nThis module implements [Steven J. Fortune’s algorithm](https://en.wikipedia.org/wiki/Fortune's_algorithm) for computing the [Voronoi diagram](https://en.wikipedia.org/wiki/Voronoi_diagram) or [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation) of a set of two-dimensional points. This implementation is largely based on [work by Raymond Hill](http://www.raymondhill.net/voronoi/rhill-voronoi.html).\n\nVoronoi diagrams are not only [visually](http://bl.ocks.org/mbostock/4360892) [attractive](http://bl.ocks.org/mbostock/4636377) but practical tools for interaction, such as to increase the target area of points in a scatterplot. See [“Strikeouts on the Rise”](http://www.nytimes.com/interactive/2013/03/29/sports/baseball/Strikeouts-Are-Still-Soaring.html) in *The New York Times* and this [multi-line chart](http://bl.ocks.org/mbostock/8033015) for examples; also see Tovi Grossman’s paper on [bubble cursors](http://www.tovigrossman.com/BubbleCursor) for a related technique. Voronoi diagrams can also be used to [automate label positioning](http://bl.ocks.org/mbostock/6909318), and Delaunay meshes are useful in computing adjacency or grouping of visual elements.\n\n## Installing\n\nIf you use NPM, `npm install d3-voronoi`. Otherwise, download the [latest release](https://github.com/d3/d3-voronoi/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-voronoi.v1.min.js) or as part of [D3 4.0](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n``` markup\n<script src=\"https://d3js.org/d3-voronoi.v1.min.js\"></script>\n<script>\n\nvar voronoi = d3.voronoi();\n\n</script>\n```\n\n[Try d3-voronoi in your browser.](https://tonicdev.com/npm/d3-voronoi)\n\n## API Reference\n\n###### d3.**voronoi**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js \"Source\")\n\nCreates a new Voronoi layout with default [*x*-](#voronoi_x) and [*y*-](#voronoi_y) accessors and a null [extent](#voronoi_extent).\n\n###### *voronoi*(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L10 \"Source\")\n\nComputes the [Voronoi diagram](#voronoi-diagrams) for the specified *data* points.\n\n###### *voronoi*.**x**(\\[*x*\\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L31 \"Source\")\n\nIf *x* is specified, sets the *x*-coordinate accessor. If *x* is not specified, returns the current *x*-coordinate accessor, which defaults to:\n\n``` javascript\nfunction x(d) {\n  return d[0];\n}\n```\n\n###### *voronoi*.**y**(\\[*y*\\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L35 \"Source\")\n\nIf *y* is specified, sets the *y*-coordinate accessor. If *y* is not specified, returns the current *y*-coordinate accessor, which defaults to:\n\n``` javascript\nfunction y(d) {\n  return d[1];\n}\n```\n\n###### *voronoi*.**extent**(\\[*extent*\\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L39 \"Source\")\n\nIf *extent* is specified, sets the clip extent of the Voronoi layout to the specified bounds and returns the layout. The *extent* bounds are specified as an array \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where *x0* is the left side of the extent, *y0* is the top, *x1* is the right and *y1* is the bottom. If *extent* is not specified, returns the current clip extent which defaults to null. A clip extent is required when using [*voronoi*.polygons](#voronoi_polygons).\n\n###### *voronoi*.**size**(\\[*size*\\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L43 \"Source\")\n\nAn alias for [*voronoi*.extent](#voronoi_extent) where the minimum *x* and *y* of the extent are ⟨0,0⟩. Equivalent to:\n\n``` javascript\nvoronoi.extent([[0, 0], size]);\n```\n\n###### *voronoi*.**polygons**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L19 \"Source\")\n\nReturns a sparse array of polygons, one for each unique input point in the specified *data* points, corresponding to the cells in the computed Voronoi diagram. Equivalent to:\n\n``` javascript\nvoronoi(data).polygons();\n```\n\nSee [*diagram*.polygons](#diagram_polygons) for more detail. Note: an [extent](#voronoi_extent) is required.\n\n###### *voronoi*.**triangles**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L27 \"Source\")\n\nReturns the Delaunay triangulation of the specified *data* array as an array of triangles. Each triangle is a three-element array of elements from *data*. Equivalent to:\n\n``` javascript\nvoronoi(data).triangles();\n```\n\nSee [*diagram*.triangles](#diagram_triangles) for more detail.\n\n###### *voronoi*.**links**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L23 \"Source\")\n\nReturns the Delaunay triangulation of the specified *data* array as an array of links. Each link has `source` and `target` attributes referring to elements in *data*. Equivalent to:\n\n``` javascript\nvoronoi(data).links();\n```\n\nSee [*diagram*.links](#diagram_links) for more detail.\n\n### Voronoi Diagrams\n\n###### *diagram* [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js \"Source\")\n\nThe computed Voronoi diagram returned by [*voronoi*](#_voronoi) has the following properties:\n\n- `edges` - an array of [edges](#diagram_edge).\n- `cells` - a sparse array of [cells](#diagram_cell), one for each unique input point.\n\nFor each set of coincident input points, one of the points is chosen arbitrarily and assigned the associated cell; the other coincident input points’ entries are missing from the returned sparse array.\n\n###### *diagram*.**polygons**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L72 \"Source\")\n\nReturns a sparse array of polygons clipped to the [*extent*](#voronoi_extent), one for each cell (each unique input point) in the diagram. Each polygon is represented as an array of points \\[*x*, *y*\\] where *x* and *y* are the point coordinates, and a `data` field that refers to the corresponding element in *data*. Polygons are open: they do not contain a closing point that duplicates the first point; a triangle, for example, is an array of three points. Polygons are also counterclockwise, assuming the origin ⟨0,0⟩ is in the top-left corner.\n\nFor each set of coincident input points, one of the points is chosen arbitrarily and assigned the associated polygon; the other coincident input points’ entries are missing from the returned sparse array.\n\n###### *diagram*.**triangles**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L82 \"Source\")\n\nReturns the Delaunay triangulation of the specified *data* array as an array of triangles. Each triangle is a three-element array of elements from *data*. Since the triangulation is computed as the dual of the Voronoi diagram, and the Voronoi diagram is clipped by the [extent](#voronoi_extent), a subset of the Delaunay triangulation is returned.\n\n###### *diagram*.**links**() [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L108 \"Source\")\n\nReturns the Delaunay triangulation of the specified *data* array as an array of links, one for each edge in the mesh. Each link has the following attributes:\n\n- `source` - the source node, an element in *data*.\n- `target` - the target node, an element in *data*.\n\nSince the triangulation is computed as the dual of the Voronoi diagram, and the Voronoi diagram is clipped by the [extent](#voronoi_extent), a subset of the Delaunay links is returned.\n\n###### *diagram*.**find**(*x*, *y*\\[, *radius*\\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/Diagram.js#L119 \"Source\")\n\nReturns the nearest site to point \\[*x*, *y*\\]. If *radius* is specified, only sites within *radius* distance are considered.\n\nSee Philippe Rivière’s [bl.ocks.org/1b7ddbcd71454d685d1259781968aefc](http://bl.ocks.org/Fil/1b7ddbcd71454d685d1259781968aefc) for an example.\n\n###### *cell*\n\nEach cell in the diagram is an object with the following properties:\n\n- `site` - the [site](#site) of the cell’s associated input point.\n- `halfedges` - an array of indexes into [*diagram*.edges](#diagram) representing the cell’s polygon.\n\n###### *site*\n\nEach site in the diagram is an array \\[*x*, *y*\\] with two additional properties:\n\n- `index` - the site’s index, corresponding to the associated input point.\n- `data` - the input data corresponding to this site.\n\n###### *edge*\n\nEach edge in the diagram is an array \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\] with two additional properties:\n\n- `left` - the [site](#site) on the left side of the edge.\n- `right` - the [site](#site) on the right side of the edge; null for a clipped border edge.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-voronoi](https://github.com/d3/d3-voronoi)"
- name: voronoi()
  id: d3-voronoi#_voronoi
  summary: Computes the Voronoi diagram for the specified data points
  belongs_to: voronoi
  description: |-
    ###### *voronoi*(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L10 "Source")

    Computes the [Voronoi diagram](#voronoi-diagrams) for the specified *data* points.
- name: voronoi.cellPolygon()
  id: d3-delaunay#voronoi_cellpolygon
  summary: Returns the convex, closed polygon [[x0, y0], [x1, y1], …, [x0, y0]] representing the cell for the specified point i
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**cellPolygon**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Returns the convex, closed polygon \[\[*x0*, *y0*\], \[*x1*, *y1*\], …, \[*x0*, *y0*\]\] representing the cell for the specified point *i*.
- name: voronoi.cellPolygons()
  id: d3-delaunay#voronoi_cellpolygons
  summary: Returns an iterable over the non-empty polygons for each cell, with the cell index as property
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**cellPolygons**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Returns an iterable over the non-empty [polygons for each cell](#voronoi_cellPolygon), with the cell index as property.
- name: voronoi.circumcenters
  id: d3-delaunay#voronoi_circumcenters
  summary: The circumcenters of the Delaunay triangles as a Float64Array [cx0, cy0, cx1, cy1, …]
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**circumcenters**

    The [circumcenters](http://mathworld.wolfram.com/Circumcenter.html) of the Delaunay triangles as a Float64Array \[*cx0*, *cy0*, *cx1*, *cy1*, …\]. Each contiguous pair of coordinates *cx*, *cy* is the circumcenter for the corresponding triangle. These circumcenters form the coordinates of the Voronoi cell polygons.
- name: voronoi.contains()
  id: d3-delaunay#voronoi_contains
  summary: null
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**contains**(*i*, *x*, *y*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/cell.js "Source")

    Returns true if the cell with the specified index *i* contains the specified point ⟨*x*, *y*⟩. (This method is not affected by the associated Voronoi diagram’s viewport [bounds](#voronoi_xmin).)
- name: voronoi.delaunay
  id: d3-delaunay#voronoi_delaunay
  summary: The Voronoi diagram’s associated Delaunay triangulation
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**delaunay**

    The Voronoi diagram’s associated [Delaunay triangulation](#delaunay).
- name: voronoi.extent()
  id: d3-voronoi#voronoi_extent
  summary: If extent is specified, sets the clip extent of the Voronoi layout to the specified bounds and returns the layout
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**extent**(\[*extent*\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L39 "Source")

    If *extent* is specified, sets the clip extent of the Voronoi layout to the specified bounds and returns the layout. The *extent* bounds are specified as an array \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where *x0* is the left side of the extent, *y0* is the top, *x1* is the right and *y1* is the bottom. If *extent* is not specified, returns the current clip extent which defaults to null. A clip extent is required when using [*voronoi*.polygons](#voronoi_polygons).
- name: voronoi.links()
  id: d3-voronoi#voronoi_links
  summary: Returns the Delaunay triangulation of the specified data array as an array of links
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**links**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L23 "Source")

    Returns the Delaunay triangulation of the specified *data* array as an array of links. Each link has `source` and `target` attributes referring to elements in *data*. Equivalent to:

    ``` javascript
    voronoi(data).links();
    ```

    See [*diagram*.links](#diagram_links) for more detail.

    ### Voronoi Diagrams
- name: voronoi.neighbors()
  id: d3-delaunay#voronoi_neighbors
  summary: Returns an iterable over the indexes of the cells that share a common edge with the specified cell i
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**neighbors**(*i*) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Returns an iterable over the indexes of the cells that share a common edge with the specified cell *i*. Voronoi neighbors are always neighbors on the Delaunay graph, but the converse is false when the common edge has been clipped out by the Voronoi diagram’s viewport.
- name: voronoi.polygons()
  id: d3-voronoi#voronoi_polygons
  summary: Returns a sparse array of polygons, one for each unique input point in the specified data points, corresponding to the cells in the computed Voronoi diagram
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**polygons**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L19 "Source")

    Returns a sparse array of polygons, one for each unique input point in the specified *data* points, corresponding to the cells in the computed Voronoi diagram. Equivalent to:

    ``` javascript
    voronoi(data).polygons();
    ```

    See [*diagram*.polygons](#diagram_polygons) for more detail. Note: an [extent](#voronoi_extent) is required.
- name: voronoi.render()
  id: d3-delaunay#voronoi_render
  summary: Renders the mesh of Voronoi cells to the specified context
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**render**(\[*context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Renders the mesh of Voronoi cells to the specified *context*. The specified *context* must implement the *context*.moveTo and *context*.lineTo methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: voronoi.renderBounds()
  id: d3-delaunay#voronoi_renderbounds
  summary: Renders the viewport extent to the specified context
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**renderBounds**(\[*context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Renders the viewport extent to the specified *context*. The specified *context* must implement the *context*.rect method from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). Equivalent to *context*.rect(*voronoi*.xmin, *voronoi*.ymin, *voronoi*.xmax - *voronoi*.xmin, *voronoi*.ymax - *voronoi*.ymin). If a *context* is not specified, an SVG path string is returned instead.
- name: voronoi.renderCell()
  id: d3-delaunay#voronoi_rendercell
  summary: Renders the cell with the specified index i to the specified context
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**renderCell**(*i*\[, *context*\]) [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js "Source")

    Renders the cell with the specified index *i* to the specified *context*. The specified *context* must implement the *context*.moveTo , *context*.lineTo and *context*.closePath methods from the [CanvasPathMethods API](https://www.w3.org/TR/2dcontext/#canvaspathmethods). If a *context* is not specified, an SVG path string is returned instead.
- name: voronoi.size()
  id: d3-voronoi#voronoi_size
  summary: null
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**size**(\[*size*\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L43 "Source")

    An alias for [*voronoi*.extent](#voronoi_extent) where the minimum *x* and *y* of the extent are ⟨0,0⟩. Equivalent to:

    ``` javascript
    voronoi.extent([[0, 0], size]);
    ```
- name: voronoi.triangles()
  id: d3-voronoi#voronoi_triangles
  summary: Returns the Delaunay triangulation of the specified data array as an array of triangles
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**triangles**(*data*) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L27 "Source")

    Returns the Delaunay triangulation of the specified *data* array as an array of triangles. Each triangle is a three-element array of elements from *data*. Equivalent to:

    ``` javascript
    voronoi(data).triangles();
    ```

    See [*diagram*.triangles](#diagram_triangles) for more detail.
- name: voronoi.update()
  id: d3-delaunay#voronoi_update
  summary: Updates the Voronoi diagram and underlying triangulation after the points have been modified in-place — useful for Lloyd’s relaxation
  belongs_to: delaunay
  description: "###### *voronoi*.**update**() [Source](https://github.com/d3/d3-delaunay/blob/master/src/voronoi.js \"Source\")\n\nUpdates the Voronoi diagram and underlying triangulation after the points have been modified in-place — useful for Lloyd’s relaxation.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-delaunay](https://github.com/d3/d3-delaunay)"
- name: voronoi.vectors
  id: d3-delaunay#voronoi_vectors
  summary: A Float64Array [vx0, vy0, wx0, wy0, …] where each non-zero quadruple describes an open (infinite) cell on the outer hull, giving the directions of two open half-lines
  belongs_to: delaunay
  description: |-
    ###### *voronoi*.**vectors**

    A Float64Array \[*vx0*, *vy0*, *wx0*, *wy0*, …\] where each non-zero quadruple describes an open (infinite) cell on the outer hull, giving the directions of two open half-lines.
- name: voronoi.x()
  id: d3-voronoi#voronoi_x
  summary: If x is specified, sets the x-coordinate accessor
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**x**(\[*x*\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L31 "Source")

    If *x* is specified, sets the *x*-coordinate accessor. If *x* is not specified, returns the current *x*-coordinate accessor, which defaults to:

    ``` javascript
    function x(d) {
      return d[0];
    }
    ```
- name: voronoi.y()
  id: d3-voronoi#voronoi_y
  summary: If y is specified, sets the y-coordinate accessor
  belongs_to: voronoi
  description: |-
    ###### *voronoi*.**y**(\[*y*\]) [Source](https://github.com/d3/d3-voronoi/blob/master/src/voronoi.js#L35 "Source")

    If *y* is specified, sets the *y*-coordinate accessor. If *y* is not specified, returns the current *y*-coordinate accessor, which defaults to:

    ``` javascript
    function y(d) {
      return d[1];
    }
    ```
- name: wagner.inflation()
  id: d3-geo-projection#wagner_inflation
  summary: Defaults to 20
  belongs_to: geo-projection
  description: |-
    ###### *wagner*.**inflation**(\[*inflation*\])

    Defaults to 20.
- name: wagner.parallels()
  id: d3-geo-projection#wagner_parallels
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *wagner*.**parallels**(\[*parallels*\])

    Defaults to 60°.
- name: wagner.poleline()
  id: d3-geo-projection#wagner_poleline
  summary: null
  belongs_to: geo-projection
  description: |-
    ###### *wagner*.**poleline**(\[*poleline*\])

    Defaults to 65°.
- name: wagner.ratio()
  id: d3-geo-projection#wagner_ratio
  summary: Defaults to 200
  belongs_to: geo-projection
  description: |-
    ###### *wagner*.**ratio**(\[*ratio*\])

    Defaults to 200.
- name: x.strength()
  id: d3-force#x_strength
  summary: If strength is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *x*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)

    If *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *x*-velocity: ([*x*](#x_x) - *node*.x) × *strength*. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current *x*-position to the target *x*-position with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \[0,1\] is not recommended.

    If *strength* is not specified, returns the current strength accessor, which defaults to:

    ``` javascript
    function strength() {
      return 0.1;
    }
    ```

    The strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.
- name: x.x()
  id: d3-force#x_x
  summary: If x is specified, sets the x-coordinate accessor to the specified number or function, re-evaluates the x-accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *x*.**x**(\[*x*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/x.js)

    If *x* is specified, sets the *x*-coordinate accessor to the specified number or function, re-evaluates the *x*-accessor for each node, and returns this force. If *x* is not specified, returns the current *x*-accessor, which defaults to:

    ``` javascript
    function x() {
      return 0;
    }
    ```

    The *x*-accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target *x*-coordinate of each node is only recomputed when the force is initialized or when this method is called with a new *x*, and not on every application of the force.
- name: y.strength()
  id: d3-force#y_strength
  summary: If strength is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *y*.**strength**(\[*strength*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)

    If *strength* is specified, sets the strength accessor to the specified number or function, re-evaluates the strength accessor for each node, and returns this force. The *strength* determines how much to increment the node’s *y*-velocity: ([*y*](#y_y) - *node*.y) × *strength*. For example, a value of 0.1 indicates that the node should move a tenth of the way from its current *y*-position to the target *y*-position with each application. Higher values moves nodes more quickly to the target position, often at the expense of other forces or constraints. A value outside the range \[0,1\] is not recommended.

    If *strength* is not specified, returns the current strength accessor, which defaults to:

    ``` javascript
    function strength() {
      return 0.1;
    }
    ```

    The strength accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the strength of each node is only recomputed when the force is initialized or when this method is called with a new *strength*, and not on every application of the force.
- name: y.y()
  id: d3-force#y_y
  summary: If y is specified, sets the y-coordinate accessor to the specified number or function, re-evaluates the y-accessor for each node, and returns this force
  belongs_to: force
  description: |-
    ###### *y*.**y**(\[*y*\]) · [Source](https://github.com/d3/d3-force/blob/master/src/y.js)

    If *y* is specified, sets the *y*-coordinate accessor to the specified number or function, re-evaluates the *y*-accessor for each node, and returns this force. If *y* is not specified, returns the current *y*-accessor, which defaults to:

    ``` javascript
    function y() {
      return 0;
    }
    ```

    The *y*-accessor is invoked for each [node](#simulation_nodes) in the simulation, being passed the *node* and its zero-based *index*. The resulting number is then stored internally, such that the target *y*-coordinate of each node is only recomputed when the force is initialized or when this method is called with a new *y*, and not on every application of the force.
- name: zoom
  id: d3-zoom
  summary: Panning and zooming are popular interaction techniques which let the user focus on a region of interest by restricting the view
  description: "# d3-zoom\n\nPanning and zooming are popular interaction techniques which let the user focus on a region of interest by restricting the view. It is easy to learn due to direct manipulation: click-and-drag to pan (translate), spin the wheel to zoom (scale), or use touch. Panning and zooming are widely used in web-based mapping, but can also be used with visualizations such as time-series and scatterplots.\n\nThe zoom behavior implemented by d3-zoom is a convenient but flexible abstraction for enabling pan-and-zoom on [selections](d3-selection). It handles a surprising variety of [input events](#api-reference) and browser quirks. The zoom behavior is agnostic about the DOM, so you can use it with SVG, HTML or Canvas.\n\nThe zoom behavior is also designed to work with [d3-scale](d3-scale) and [d3-axis](d3-axis); see [*transform*.rescaleX](#transform_rescaleX) and [*transform*.rescaleY](#transform_rescaleY). You can also restrict zooming using [*zoom*.scaleExtent](#zoom_scaleExtent) and panning using [*zoom*.translateExtent](#zoom_translateExtent).\n\nThe zoom behavior can be combined with other behaviors, such as [d3-drag](d3-drag) for dragging, and [d3-brush](d3-brush) for focus + context.\n\nThe zoom behavior can be controlled programmatically using [*zoom*.transform](#zoom_transform), allowing you to implement user interface controls which drive the display or to stage animated tours through your data. Smooth zoom transitions are based on [“Smooth and efficient zooming and panning”](http://www.win.tue.nl/~vanwijk/zoompan.pdf) by Jarke J. van Wijk and Wim A.A. Nuij.\n\nSee also [d3-tile](d3-tile) for examples panning and zooming maps.\n\n## Installing\n\nIf you use npm, `npm install d3-zoom`. You can also download the [latest release on GitHub](https://github.com/d3/d3-zoom/releases/latest). For vanilla HTML in modern browsers, import d3-zoom from Skypack:\n\n``` markup\n<script type=\"module\">\n\nimport {zoom} from \"https://cdn.skypack.dev/d3-zoom@3\";\n\nconst handler = zoom();\n\n</script>\n```\n\nFor legacy environments, you can load d3-zoom’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:\n\n``` markup\n<script src=\"https://cdn.jsdelivr.net/npm/d3-color@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-ease@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-interpolate@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-selection@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-transition@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-drag@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-zoom@3\"></script>\n<script>\n\nconst zoom = d3.zoom();\n\n</script>\n```\n\n[Try d3-zoom in your browser.](https://observablehq.com/collection/@d3/d3-zoom)\n\n## API Reference\n\nThis table describes how the zoom behavior interprets native events:\n\n| Event        | Listening Element | Zoom Event  | Default Prevented? |\n|--------------|-------------------|-------------|--------------------|\n| mousedown⁵   | selection         | start       | no¹                |\n| mousemove²   | window¹           | zoom        | yes                |\n| mouseup²     | window¹           | end         | yes                |\n| dragstart²   | window            | \\-          | yes                |\n| selectstart² | window            | \\-          | yes                |\n| click³       | window            | \\-          | yes                |\n| dblclick     | selection         | *multiple*⁶ | yes                |\n| wheel⁸       | selection         | zoom⁷       | yes                |\n| touchstart   | selection         | *multiple*⁶ | no⁴                |\n| touchmove    | selection         | zoom        | yes                |\n| touchend     | selection         | end         | no⁴                |\n| touchcancel  | selection         | end         | no⁴                |\n\nThe propagation of all consumed events is [immediately stopped](https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation).\n\n¹ Necessary to capture events outside an iframe; see [d3-drag#9](https://github.com/d3/d3-drag/issues/9).  \n² Only applies during an active, mouse-based gesture; see [d3-drag#9](https://github.com/d3/d3-drag/issues/9).  \n³ Only applies immediately after some mouse-based gestures; see [*zoom*.clickDistance](#zoom_clickDistance).  \n⁴ Necessary to allow [click emulation](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW7) on touch input; see [d3-drag#9](https://github.com/d3/d3-drag/issues/9).  \n⁵ Ignored if within 500ms of a touch gesture ending; assumes [click emulation](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW7).  \n⁶ Double-click and double-tap initiate a transition that emits start, zoom and end events; see [*zoom*.tapDistance](#zoom_tapDistance)..  \n⁷ The first wheel event emits a start event; an end event is emitted when no wheel events are received for 150ms.  \n⁸ Ignored if already at the corresponding limit of the [scale extent](#zoom_scaleExtent).\n\n###### d3.**zoom**() · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)\n\nCreates a new zoom behavior. The returned behavior, [*zoom*](#_drag), is both an object and a function, and is typically applied to selected elements via [*selection*.call](d3-selection#selection_call).\n\n###### *zoom*(*selection*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)\n\nApplies this zoom behavior to the specified [*selection*](d3-selection), binding the necessary event listeners to allow panning and zooming, and initializing the [zoom transform](#zoom-transforms) on each selected element to the identity transform if not already defined. This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to instantiate a zoom behavior and apply it to a selection:\n\n``` javascript\nselection.call(d3.zoom().on(\"zoom\", zoomed));\n```\n\nInternally, the zoom behavior uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for zooming. The listeners use the name `.zoom`, so you can subsequently unbind the zoom behavior as follows:\n\n``` javascript\nselection.on(\".zoom\", null);\n```\n\nTo disable just wheel-driven zooming (say to not interfere with native scrolling), you can remove the zoom behavior’s wheel event listener after applying the zoom behavior to the selection:\n\n``` javascript\nselection\n    .call(zoom)\n    .on(\"wheel.zoom\", null);\n```\n\nAlternatively, use [*zoom*.filter](#zoom_filter) for greater control over which events can initiate zoom gestures.\n\nApplying the zoom behavior also sets the [-webkit-tap-highlight-color](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html#//apple_ref/doc/uid/TP40006510-SW5) style to transparent, disabling the tap highlight on iOS. If you want a different tap highlight color, remove or re-apply this style after applying the drag behavior.\n\n###### *zoom*.**transform**(*selection*, *transform*\\[, *point*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)\n\nIf *selection* is a selection, sets the [current zoom transform](#zoomTransform) of the selected elements to the specified *transform*, instantaneously emitting start, zoom and end [events](#zoom-events). If *selection* is a transition, defines a “zoom” tween to the specified *transform* using [d3.interpolateZoom](https://github.com/d3/d3-interpolate/blob/main/README.md#interpolateZoom), emitting a start event when the transition starts, zoom events for each tick of the transition, and then an end event when the transition ends (or is interrupted). The transition will attempt to minimize the visual movement around the specified *point*; if the *point* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). The *transform* may be specified either as a [zoom transform](#zoom-transforms) or as a function that returns a zoom transform; similarly, the *point* may be specified either as a two-element array \\[*x*, *y*\\] or a function that returns such an array. If a function, it is invoked for each selected element, being passed the current event (`event`) and datum `d`, with the `this` context as the current DOM element.\n\nThis function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call) or [*transition*.call](d3-transition#transition_call). For example, to reset the zoom transform to the [identity transform](#zoomIdentity) instantaneously:\n\n``` javascript\nselection.call(zoom.transform, d3.zoomIdentity);\n```\n\nTo smoothly reset the zoom transform to the identity transform over 750 milliseconds:\n\n``` javascript\nselection.transition().duration(750).call(zoom.transform, d3.zoomIdentity);\n```\n\nThis method requires that you specify the new zoom transform completely, and does not enforce the defined [scale extent](#zoom_scaleExtent) and [translate extent](#zoom_translateExtent), if any. To derive a new transform from the existing transform, and to enforce the scale and translate extents, see the convenience methods [*zoom*.translateBy](#zoom_translateBy), [*zoom*.scaleBy](#zoom_scaleBy) and [*zoom*.scaleTo](#zoom_scaleTo).\n\n###### *zoom*.**translateBy**(*selection*, *x*, *y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *selection* is a selection, [translates](#transform_translate) the [current zoom transform](#zoomTransform) of the selected elements by *x* and *y*, such that the new *t_(x1)* = *t_(x0)* + *kx* and *t_(y1)* = *t_(y0)* + *ky*. If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *x* and *y* translation amounts may be specified either as numbers or as functions that return numbers. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.\n\n###### *zoom*.**translateTo**(*selection*, *x*, *y*\\[, *p*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *selection* is a selection, [translates](#transform_translate) the [current zoom transform](#zoomTransform) of the selected elements such that the given position ⟨*x*,*y*⟩ appears at given point *p*. The new *t_(x)* = *p_(x)* - *kx* and *t_(y)* = *p_(y)* - *ky*. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *x* and *y* coordinates may be specified either as numbers or as functions that returns numbers; similarly the *p* point may be specified either as a two-element array \\[*p_(x)*,*p_(y)*\\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.\n\n###### *zoom*.**scaleBy**(*selection*, *k*\\[, *p*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *selection* is a selection, [scales](#transform_scale) the [current zoom transform](#zoomTransform) of the selected elements by *k*, such that the new *k₁* = *k₀k*. The reference point *p* does move. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *k* scale factor may be specified either as a number or a function that returns a number; similarly the *p* point may be specified either as a two-element array \\[*p_(x)*,*p_(y)*\\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.\n\n###### *zoom*.**scaleTo**(*selection*, *k*\\[, *p*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *selection* is a selection, [scales](#transform_scale) the [current zoom transform](#zoomTransform) of the selected elements to *k*, such that the new *k₁* = *k*. The reference point *p* does move. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *k* scale factor may be specified either as a number or a function that returns a number; similarly the *p* point may be specified either as a two-element array \\[*p_(x)*,*p_(y)*\\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.\n\n###### *zoom*.**constrain**(\\[*constrain*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *constrain* is specified, sets the transform constraint function to the specified function and returns the zoom behavior. If *constrain* is not specified, returns the current constraint function, which defaults to:\n\n``` javascript\nfunction constrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n```\n\nThe constraint function must return a [*transform*](#zoom-transforms) given the current *transform*, [viewport extent](#zoom_extent) and [translate extent](#zoom_translateExtent). The default implementation attempts to ensure that the viewport extent does not go outside the translate extent.\n\n###### *zoom*.**filter**(\\[*filter*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *filter* is specified, sets the filter to the specified function and returns the zoom behavior. If *filter* is not specified, returns the current filter, which defaults to:\n\n``` javascript\nfunction filter(event) {\n  return (!event.ctrlKey || event.type === 'wheel') && !event.button;\n}\n```\n\nThe filter is passed the current event (`event`) and datum `d`, with the `this` context as the current DOM element. If the filter returns falsey, the initiating event is ignored and no zoom gestures are started. Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.\n\n###### *zoom*.**touchable**(\\[*touchable*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *touchable* is specified, sets the touch support detector to the specified function and returns the zoom behavior. If *touchable* is not specified, returns the current touch support detector, which defaults to:\n\n``` javascript\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\nTouch event listeners are only registered if the detector returns truthy for the corresponding element when the zoom behavior is [applied](#_zoom). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.\n\n###### *zoom*.**wheelDelta**(\\[*delta*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *delta* is specified, sets the wheel delta function to the specified function and returns the zoom behavior. If *delta* is not specified, returns the current wheel delta function, which defaults to:\n\n``` javascript\nfunction wheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002);\n}\n```\n\nThe value *Δ* returned by the wheel delta function determines the amount of scaling applied in response to a [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent). The scale factor [*transform*.k](#zoomTransform) is multiplied by 2^(*Δ*); for example, a *Δ* of +1 doubles the scale factor, *Δ* of -1 halves the scale factor.\n\n###### *zoom*.**extent**(\\[*extent*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *extent* is specified, sets the viewport extent to the specified array of points \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where \\[*x0*, *y0*\\] is the top-left corner of the viewport and \\[*x1*, *y1*\\] is the bottom-right corner of the viewport, and returns this zoom behavior. The *extent* may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d`, with the `this` context as the current DOM element.\n\nIf *extent* is not specified, returns the current extent accessor, which defaults to \\[\\[0, 0\\], \\[*width*, *height*\\]\\] where *width* is the [client width](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth) of the element and *height* is its [client height](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight); for SVG elements, the nearest ancestor SVG element’s viewBox, or [width](https://www.w3.org/TR/SVG/struct.html#SVGElementWidthAttribute) and [height](https://www.w3.org/TR/SVG/struct.html#SVGElementHeightAttribute) attributes, are used. Alternatively, consider using [*element*.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).\n\nThe viewport extent affects several functions: the center of the viewport remains fixed during changes by [*zoom*.scaleBy](#zoom_scaleBy) and [*zoom*.scaleTo](#zoom_scaleTo); the viewport center and dimensions affect the path chosen by [d3.interpolateZoom](d3-interpolate#interpolateZoom); and the viewport extent is needed to enforce the optional [translate extent](#zoom_translateExtent).\n\n###### *zoom*.**scaleExtent**(\\[*extent*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *extent* is specified, sets the scale extent to the specified array of numbers \\[*k0*, *k1*\\] where *k0* is the minimum allowed scale factor and *k1* is the maximum allowed scale factor, and returns this zoom behavior. If *extent* is not specified, returns the current scale extent, which defaults to \\[0, ∞\\]. The scale extent restricts zooming in and out. It is enforced on interaction and when using [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy); however, it is not enforced when using [*zoom*.transform](#zoom_transform) to set the transform explicitly.\n\nIf the user tries to zoom by wheeling when already at the corresponding limit of the scale extent, the wheel events will be ignored and not initiate a zoom gesture. This allows the user to scroll down past a zoomable area after zooming in, or to scroll up after zooming out. If you would prefer to always prevent scrolling on wheel input regardless of the scale extent, register a wheel event listener to prevent the browser default behavior:\n\n``` javascript\nselection\n    .call(zoom)\n    .on(\"wheel\", event => event.preventDefault());\n```\n\n###### *zoom*.**translateExtent**(\\[*extent*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *extent* is specified, sets the translate extent to the specified array of points \\[\\[*x0*, *y0*\\], \\[*x1*, *y1*\\]\\], where \\[*x0*, *y0*\\] is the top-left corner of the world and \\[*x1*, *y1*\\] is the bottom-right corner of the world, and returns this zoom behavior. If *extent* is not specified, returns the current translate extent, which defaults to \\[\\[-∞, -∞\\], \\[+∞, +∞\\]\\]. The translate extent restricts panning, and may cause translation on zoom out. It is enforced on interaction and when using [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy); however, it is not enforced when using [*zoom*.transform](#zoom_transform) to set the transform explicitly.\n\n###### *zoom*.**clickDistance**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *distance* is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to *distance* from its position on mousedown, the click event following mouseup will be suppressed. If *distance* is not specified, returns the current distance threshold, which defaults to zero. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).\n\n###### *zoom*.**tapDistance**(\\[*distance*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *distance* is specified, sets the maximum distance that a double-tap gesture can move between first touchstart and second touchend that will trigger a subsequent double-click event. If *distance* is not specified, returns the current distance threshold, which defaults to 10. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).\n\n###### *zoom*.**duration**(\\[*duration*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *duration* is specified, sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior. If *duration* is not specified, returns the current duration, which defaults to 250 milliseconds. If the duration is not greater than zero, double-click and -tap trigger instantaneous changes to the zoom transform rather than initiating smooth transitions.\n\nTo disable double-click and double-tap transitions, you can remove the zoom behavior’s dblclick event listener after applying the zoom behavior to the selection:\n\n``` javascript\nselection\n    .call(zoom)\n    .on(\"dblclick.zoom\", null);\n```\n\n###### *zoom*.**interpolate**(\\[*interpolate*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *interpolate* is specified, sets the interpolation factory for zoom transitions to the specified function. If *interpolate* is not specified, returns the current interpolation factory, which defaults to [d3.interpolateZoom](d3-interpolate#interpolateZoom) to implement smooth zooming. To apply direct interpolation between two views, try [d3.interpolate](d3-interpolate#interpolate) instead.\n\n###### *zoom*.**on**(*typenames*\\[, *listener*\\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)\n\nIf *listener* is specified, sets the event *listener* for the specified *typenames* and returns the zoom behavior. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element.\n\nThe *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `zoom.foo` and `zoom.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:\n\n- `start` - after zooming begins (such as on mousedown).\n- `zoom` - after a change to the zoom transform (such as on mousemove).\n- `end` - after zooming ends (such as on mouseup ).\n\nSee [*dispatch*.on](d3-dispatch#dispatch_on) for more.\n\n### Zoom Events\n\nWhen a [zoom event listener](#zoom_on) is invoked, it receives the current zoom event as a first argument. The *event* object exposes several fields:\n\n- *event*.target - the associated [zoom behavior](#zoom).\n- *event*.type - the string “start”, “zoom” or “end”; see [*zoom*.on](#zoom_on).\n- *event*.transform - the current [zoom transform](#zoom-transforms).\n- *event*.sourceEvent - the underlying input event, such as mousemove or touchmove.\n\n### Zoom Transforms\n\nThe zoom behavior stores the zoom state on the element to which the zoom behavior was [applied](#_zoom), not on the zoom behavior itself. This is because the zoom behavior can be applied to many elements simultaneously, and each element can be zoomed independently. The zoom state can change either on user interaction or programmatically via [*zoom*.transform](#zoom_transform).\n\nTo retrieve the zoom state, use *event*.transform on the current [zoom event](#zoom-events) within a zoom event listener (see [*zoom*.on](#zoom_on)), or use [d3.zoomTransform](#zoomTransform) for a given node. The latter is particularly useful for modifying the zoom state programmatically, say to implement buttons for zooming in and out.\n\n###### d3.**zoomTransform**(*node*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the current transform for the specified *node*. Note that *node* should typically be a DOM element, not a *selection*. (A selection may consist of multiple nodes, in different states, and this function only returns a single transform.) If you have a selection, call [*selection*.node](d3-selection#selection_node) first:\n\n``` javascript\nvar transform = d3.zoomTransform(selection.node());\n```\n\nIn the context of an [event listener](d3-selection#selection_on), the *node* is typically the element that received the input event (which should be equal to [*event*.transform](#zoom-events)), *this*:\n\n``` javascript\nvar transform = d3.zoomTransform(this);\n```\n\nInternally, an element’s transform is stored as *element*.\\_\\_zoom; however, you should use this method rather than accessing it directly. If the given *node* has no defined transform, returns the transform of the closest ancestor, or if none exists, the [identity transformation](#zoomIdentity). The returned transform represents a two-dimensional [transformation matrix](https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations) of the form:\n\n*k* 0 *t_(x)*  \n0 *k* *t_(y)*  \n0 0 1\n\n(This matrix is capable of representing only scale and translation; a future release may also allow rotation, though this would probably not be a backwards-compatible change.) The position ⟨*x*,*y*⟩ is transformed to ⟨*xk* + *t_(x)*,*yk* + *t_(y)*⟩. The transform object exposes the following properties:\n\n- *transform*.x - the translation amount *t_(x)* along the *x*-axis.\n- *transform*.y - the translation amount *t_(y)* along the *y*-axis.\n- *transform*.k - the scale factor *k*.\n\nThese properties should be considered read-only; instead of mutating a transform, use [*transform*.scale](#transform_scale) and [*transform*.translate](#transform_translate) to derive a new transform. Also see [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy) for convenience methods on the zoom behavior. To create a transform with a given *k*, *t_(x)*, and *t_(y)*:\n\n``` javascript\nvar t = d3.zoomIdentity.translate(x, y).scale(k);\n```\n\nTo apply the transformation to a [Canvas 2D context](https://www.w3.org/TR/2dcontext/), use [*context*.translate](https://www.w3.org/TR/2dcontext/#dom-context-2d-translate) followed by [*context*.scale](https://www.w3.org/TR/2dcontext/#dom-context-2d-scale):\n\n``` javascript\ncontext.translate(transform.x, transform.y);\ncontext.scale(transform.k, transform.k);\n```\n\nSimilarly, to apply the transformation to HTML elements via [CSS](https://www.w3.org/TR/css-transforms-1/):\n\n``` javascript\ndiv.style(\"transform\", \"translate(\" + transform.x + \"px,\" + transform.y + \"px) scale(\" + transform.k + \")\");\ndiv.style(\"transform-origin\", \"0 0\");\n```\n\nTo apply the transformation to [SVG](https://www.w3.org/TR/SVG/coords.html#TransformAttribute):\n\n``` javascript\ng.attr(\"transform\", \"translate(\" + transform.x + \",\" + transform.y + \") scale(\" + transform.k + \")\");\n```\n\nOr more simply, taking advantage of [*transform*.toString](#transform_toString):\n\n``` javascript\ng.attr(\"transform\", transform);\n```\n\nNote that the order of transformations matters! The translate must be applied before the scale.\n\n###### *transform*.**scale**(*k*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a transform whose scale *k₁* is equal to *k₀k*, where *k₀* is this transform’s scale.\n\n###### *transform*.**translate**(*x*, *y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a transform whose translation *t_(x1)* and *t_(y1)* is equal to *t_(x0)* + *t_(k) x* and *t_(y0)* + *t_(k) y*, where *t_(x0)* and *t_(y0)* is this transform’s translation and *t_(k)* is this transform’s scale.\n\n###### *transform*.**apply**(*point*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the transformation of the specified *point* which is a two-element array of numbers \\[*x*, *y*\\]. The returned point is equal to \\[*xk* + *t_(x)*, *yk* + *t_(y)*\\].\n\n###### *transform*.**applyX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the transformation of the specified *x*-coordinate, *xk* + *t_(x)*.\n\n###### *transform*.**applyY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the transformation of the specified *y*-coordinate, *yk* + *t_(y)*.\n\n###### *transform*.**invert**(*point*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the inverse transformation of the specified *point* which is a two-element array of numbers \\[*x*, *y*\\]. The returned point is equal to \\[(*x* - *t_(x)*) / *k*, (*y* - *t_(y)*) / *k*\\].\n\n###### *transform*.**invertX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the inverse transformation of the specified *x*-coordinate, (*x* - *t_(x)*) / *k*.\n\n###### *transform*.**invertY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns the inverse transformation of the specified *y*-coordinate, (*y* - *t_(y)*) / *k*.\n\n###### *transform*.**rescaleX**(*x*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a [copy](d3-scale#continuous_copy) of the [continuous scale](d3-scale#continuous-scales) *x* whose [domain](d3-scale#continuous_domain) is transformed. This is implemented by first applying the [inverse *x*-transform](#transform_invertX) on the scale’s [range](d3-scale#continuous_range), and then applying the [inverse scale](d3-scale#continuous_invert) to compute the corresponding domain:\n\n``` javascript\nfunction rescaleX(x) {\n  var range = x.range().map(transform.invertX, transform),\n      domain = range.map(x.invert, x);\n  return x.copy().domain(domain);\n}\n```\n\nThe scale *x* must use [d3.interpolateNumber](d3-interpolate#interpolateNumber); do not use [*continuous*.rangeRound](d3-scale#continuous_rangeRound) as this reduces the accuracy of [*continuous*.invert](d3-scale#continuous_invert) and can lead to an inaccurate rescaled domain. This method does not modify the input scale *x*; *x* thus represents the untransformed scale, while the returned scale represents its transformed view.\n\n###### *transform*.**rescaleY**(*y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a [copy](d3-scale#continuous_copy) of the [continuous scale](d3-scale#continuous-scales) *y* whose [domain](d3-scale#continuous_domain) is transformed. This is implemented by first applying the [inverse *y*-transform](#transform_invertY) on the scale’s [range](d3-scale#continuous_range), and then applying the [inverse scale](d3-scale#continuous_invert) to compute the corresponding domain:\n\n``` javascript\nfunction rescaleY(y) {\n  var range = y.range().map(transform.invertY, transform),\n      domain = range.map(y.invert, y);\n  return y.copy().domain(domain);\n}\n```\n\nThe scale *y* must use [d3.interpolateNumber](d3-interpolate#interpolateNumber); do not use [*continuous*.rangeRound](d3-scale#continuous_rangeRound) as this reduces the accuracy of [*continuous*.invert](d3-scale#continuous_invert) and can lead to an inaccurate rescaled domain. This method does not modify the input scale *y*; *y* thus represents the untransformed scale, while the returned scale represents its transformed view.\n\n###### new d3.**ZoomTransform**(*k*, *x*, *y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a transform with scale *k* and translation (*x*, *y*).\n\n###### *transform*.**toString**() · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nReturns a string representing the [SVG transform](https://www.w3.org/TR/SVG/coords.html#TransformAttribute) corresponding to this transform. Implemented as:\n\n``` javascript\nfunction toString() {\n  return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n}\n```\n\n###### d3.**zoomIdentity** · [Source](https://github.com/d3/d3-zoom/blob/main/src/transform.js)\n\nThe identity transform, where *k* = 1, *t_(x)* = *t_(y)* = 0.\n\n© 2010–2023 Michael Bostock  \nLicensed under the BSD License.  \n[https://github.com/d3/d3-zoom](https://github.com/d3/d3-zoom)"
- name: zoom()
  id: d3-zoom#_zoom
  summary: Applies this zoom behavior to the specified selection, binding the necessary event listeners to allow panning and zooming, and initializing the zoom transform on each selected element to the identity transform if not already defined
  belongs_to: zoom
  description: |-
    ###### *zoom*(*selection*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)

    Applies this zoom behavior to the specified [*selection*](d3-selection), binding the necessary event listeners to allow panning and zooming, and initializing the [zoom transform](#zoom-transforms) on each selected element to the identity transform if not already defined. This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call). For example, to instantiate a zoom behavior and apply it to a selection:

    ``` javascript
    selection.call(d3.zoom().on("zoom", zoomed));
    ```

    Internally, the zoom behavior uses [*selection*.on](d3-selection#selection_on) to bind the necessary event listeners for zooming. The listeners use the name `.zoom`, so you can subsequently unbind the zoom behavior as follows:

    ``` javascript
    selection.on(".zoom", null);
    ```

    To disable just wheel-driven zooming (say to not interfere with native scrolling), you can remove the zoom behavior’s wheel event listener after applying the zoom behavior to the selection:

    ``` javascript
    selection
        .call(zoom)
        .on("wheel.zoom", null);
    ```

    Alternatively, use [*zoom*.filter](#zoom_filter) for greater control over which events can initiate zoom gestures.

    Applying the zoom behavior also sets the [-webkit-tap-highlight-color](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html#//apple_ref/doc/uid/TP40006510-SW5) style to transparent, disabling the tap highlight on iOS. If you want a different tap highlight color, remove or re-apply this style after applying the drag behavior.
- name: zoom.clickDistance()
  id: d3-zoom#zoom_clickdistance
  summary: If distance is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event
  belongs_to: zoom
  description: |-
    ###### *zoom*.**clickDistance**(\[*distance*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *distance* is specified, sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to *distance* from its position on mousedown, the click event following mouseup will be suppressed. If *distance* is not specified, returns the current distance threshold, which defaults to zero. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).
- name: zoom.constrain()
  id: d3-zoom#zoom_constrain
  summary: If constrain is specified, sets the transform constraint function to the specified function and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**constrain**(\[*constrain*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *constrain* is specified, sets the transform constraint function to the specified function and returns the zoom behavior. If *constrain* is not specified, returns the current constraint function, which defaults to:

    ``` javascript
    function constrain(transform, extent, translateExtent) {
      var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
          dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
          dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
          dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
      return transform.translate(
        dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
        dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
      );
    }
    ```

    The constraint function must return a [*transform*](#zoom-transforms) given the current *transform*, [viewport extent](#zoom_extent) and [translate extent](#zoom_translateExtent). The default implementation attempts to ensure that the viewport extent does not go outside the translate extent.
- name: zoom.duration()
  id: d3-zoom#zoom_duration
  summary: If duration is specified, sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**duration**(\[*duration*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *duration* is specified, sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior. If *duration* is not specified, returns the current duration, which defaults to 250 milliseconds. If the duration is not greater than zero, double-click and -tap trigger instantaneous changes to the zoom transform rather than initiating smooth transitions.

    To disable double-click and double-tap transitions, you can remove the zoom behavior’s dblclick event listener after applying the zoom behavior to the selection:

    ``` javascript
    selection
        .call(zoom)
        .on("dblclick.zoom", null);
    ```
- name: zoom.extent()
  id: d3-zoom#zoom_extent
  summary: If extent is specified, sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport, and returns this zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**extent**(\[*extent*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *extent* is specified, sets the viewport extent to the specified array of points \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where \[*x0*, *y0*\] is the top-left corner of the viewport and \[*x1*, *y1*\] is the bottom-right corner of the viewport, and returns this zoom behavior. The *extent* may also be specified as a function which returns such an array; if a function, it is invoked for each selected element, being passed the current datum `d`, with the `this` context as the current DOM element.

    If *extent* is not specified, returns the current extent accessor, which defaults to \[\[0, 0\], \[*width*, *height*\]\] where *width* is the [client width](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth) of the element and *height* is its [client height](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight); for SVG elements, the nearest ancestor SVG element’s viewBox, or [width](https://www.w3.org/TR/SVG/struct.html#SVGElementWidthAttribute) and [height](https://www.w3.org/TR/SVG/struct.html#SVGElementHeightAttribute) attributes, are used. Alternatively, consider using [*element*.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

    The viewport extent affects several functions: the center of the viewport remains fixed during changes by [*zoom*.scaleBy](#zoom_scaleBy) and [*zoom*.scaleTo](#zoom_scaleTo); the viewport center and dimensions affect the path chosen by [d3.interpolateZoom](d3-interpolate#interpolateZoom); and the viewport extent is needed to enforce the optional [translate extent](#zoom_translateExtent).
- name: zoom.filter()
  id: d3-zoom#zoom_filter
  summary: If filter is specified, sets the filter to the specified function and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**filter**(\[*filter*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *filter* is specified, sets the filter to the specified function and returns the zoom behavior. If *filter* is not specified, returns the current filter, which defaults to:

    ``` javascript
    function filter(event) {
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }
    ```

    The filter is passed the current event (`event`) and datum `d`, with the `this` context as the current DOM element. If the filter returns falsey, the initiating event is ignored and no zoom gestures are started. Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons, since those buttons are typically intended for other purposes, such as the context menu.
- name: zoom.interpolate()
  id: d3-zoom#zoom_interpolate
  summary: If interpolate is specified, sets the interpolation factory for zoom transitions to the specified function
  belongs_to: zoom
  description: |-
    ###### *zoom*.**interpolate**(\[*interpolate*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *interpolate* is specified, sets the interpolation factory for zoom transitions to the specified function. If *interpolate* is not specified, returns the current interpolation factory, which defaults to [d3.interpolateZoom](d3-interpolate#interpolateZoom) to implement smooth zooming. To apply direct interpolation between two views, try [d3.interpolate](d3-interpolate#interpolate) instead.
- name: zoom.on()
  id: d3-zoom#zoom_on
  summary: If listener is specified, sets the event listener for the specified typenames and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**on**(*typenames*\[, *listener*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *listener* is specified, sets the event *listener* for the specified *typenames* and returns the zoom behavior. If an event listener was already registered for the same type and name, the existing listener is removed before the new listener is added. If *listener* is null, removes the current event listeners for the specified *typenames*, if any. If *listener* is not specified, returns the first currently-assigned listener matching the specified *typenames*, if any. When a specified event is dispatched, each *listener* will be invoked with the same context and arguments as [*selection*.on](d3-selection#selection_on) listeners: the current event (`event`) and datum `d`, with the `this` context as the current DOM element.

    The *typenames* is a string containing one or more *typename* separated by whitespace. Each *typename* is a *type*, optionally followed by a period (`.`) and a *name*, such as `zoom.foo` and `zoom.bar`; the name allows multiple listeners to be registered for the same *type*. The *type* must be one of the following:

    - `start` - after zooming begins (such as on mousedown).
    - `zoom` - after a change to the zoom transform (such as on mousemove).
    - `end` - after zooming ends (such as on mouseup ).

    See [*dispatch*.on](d3-dispatch#dispatch_on) for more.

    ### Zoom Events

    When a [zoom event listener](#zoom_on) is invoked, it receives the current zoom event as a first argument. The *event* object exposes several fields:

    - *event*.target - the associated [zoom behavior](#zoom).
    - *event*.type - the string “start”, “zoom” or “end”; see [*zoom*.on](#zoom_on).
    - *event*.transform - the current [zoom transform](#zoom-transforms).
    - *event*.sourceEvent - the underlying input event, such as mousemove or touchmove.

    ### Zoom Transforms

    The zoom behavior stores the zoom state on the element to which the zoom behavior was [applied](#_zoom), not on the zoom behavior itself. This is because the zoom behavior can be applied to many elements simultaneously, and each element can be zoomed independently. The zoom state can change either on user interaction or programmatically via [*zoom*.transform](#zoom_transform).

    To retrieve the zoom state, use *event*.transform on the current [zoom event](#zoom-events) within a zoom event listener (see [*zoom*.on](#zoom_on)), or use [d3.zoomTransform](#zoomTransform) for a given node. The latter is particularly useful for modifying the zoom state programmatically, say to implement buttons for zooming in and out.
- name: zoom.scaleBy()
  id: d3-zoom#zoom_scaleby
  summary: If selection is a selection, scales the current zoom transform of the selected elements by k, such that the new k₁ = k₀k
  belongs_to: zoom
  description: |-
    ###### *zoom*.**scaleBy**(*selection*, *k*\[, *p*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *selection* is a selection, [scales](#transform_scale) the [current zoom transform](#zoomTransform) of the selected elements by *k*, such that the new *k₁* = *k₀k*. The reference point *p* does move. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *k* scale factor may be specified either as a number or a function that returns a number; similarly the *p* point may be specified either as a two-element array \[*p_(x)*,*p_(y)*\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.
- name: zoom.scaleExtent()
  id: d3-zoom#zoom_scaleextent
  summary: If extent is specified, sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**scaleExtent**(\[*extent*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *extent* is specified, sets the scale extent to the specified array of numbers \[*k0*, *k1*\] where *k0* is the minimum allowed scale factor and *k1* is the maximum allowed scale factor, and returns this zoom behavior. If *extent* is not specified, returns the current scale extent, which defaults to \[0, ∞\]. The scale extent restricts zooming in and out. It is enforced on interaction and when using [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy); however, it is not enforced when using [*zoom*.transform](#zoom_transform) to set the transform explicitly.

    If the user tries to zoom by wheeling when already at the corresponding limit of the scale extent, the wheel events will be ignored and not initiate a zoom gesture. This allows the user to scroll down past a zoomable area after zooming in, or to scroll up after zooming out. If you would prefer to always prevent scrolling on wheel input regardless of the scale extent, register a wheel event listener to prevent the browser default behavior:

    ``` javascript
    selection
        .call(zoom)
        .on("wheel", event => event.preventDefault());
    ```
- name: zoom.scaleTo()
  id: d3-zoom#zoom_scaleto
  summary: If selection is a selection, scales the current zoom transform of the selected elements to k, such that the new k₁ = k
  belongs_to: zoom
  description: |-
    ###### *zoom*.**scaleTo**(*selection*, *k*\[, *p*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *selection* is a selection, [scales](#transform_scale) the [current zoom transform](#zoomTransform) of the selected elements to *k*, such that the new *k₁* = *k*. The reference point *p* does move. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *k* scale factor may be specified either as a number or a function that returns a number; similarly the *p* point may be specified either as a two-element array \[*p_(x)*,*p_(y)*\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.
- name: zoom.tapDistance()
  id: d3-zoom#zoom_tapdistance
  summary: If distance is specified, sets the maximum distance that a double-tap gesture can move between first touchstart and second touchend that will trigger a subsequent double-click event
  belongs_to: zoom
  description: |-
    ###### *zoom*.**tapDistance**(\[*distance*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *distance* is specified, sets the maximum distance that a double-tap gesture can move between first touchstart and second touchend that will trigger a subsequent double-click event. If *distance* is not specified, returns the current distance threshold, which defaults to 10. The distance threshold is measured in client coordinates ([*event*.clientX](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX) and [*event*.clientY](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)).
- name: zoom.touchable()
  id: d3-zoom#zoom_touchable
  summary: If touchable is specified, sets the touch support detector to the specified function and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**touchable**(\[*touchable*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *touchable* is specified, sets the touch support detector to the specified function and returns the zoom behavior. If *touchable* is not specified, returns the current touch support detector, which defaults to:

    ``` javascript
    function touchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }
    ```

    Touch event listeners are only registered if the detector returns truthy for the corresponding element when the zoom behavior is [applied](#_zoom). The default detector works well for most browsers that are capable of touch input, but not all; Chrome’s mobile device emulator, for example, fails detection.
- name: zoom.transform()
  id: d3-zoom#zoom_transform
  summary: If selection is a selection, sets the current zoom transform of the selected elements to the specified transform, instantaneously emitting start, zoom and end events
  belongs_to: zoom
  description: |-
    ###### *zoom*.**transform**(*selection*, *transform*\[, *point*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js), [Examples](https://observablehq.com/collection/@d3/d3-zoom)

    If *selection* is a selection, sets the [current zoom transform](#zoomTransform) of the selected elements to the specified *transform*, instantaneously emitting start, zoom and end [events](#zoom-events). If *selection* is a transition, defines a “zoom” tween to the specified *transform* using [d3.interpolateZoom](https://github.com/d3/d3-interpolate/blob/main/README.md#interpolateZoom), emitting a start event when the transition starts, zoom events for each tick of the transition, and then an end event when the transition ends (or is interrupted). The transition will attempt to minimize the visual movement around the specified *point*; if the *point* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). The *transform* may be specified either as a [zoom transform](#zoom-transforms) or as a function that returns a zoom transform; similarly, the *point* may be specified either as a two-element array \[*x*, *y*\] or a function that returns such an array. If a function, it is invoked for each selected element, being passed the current event (`event`) and datum `d`, with the `this` context as the current DOM element.

    This function is typically not invoked directly, and is instead invoked via [*selection*.call](d3-selection#selection_call) or [*transition*.call](d3-transition#transition_call). For example, to reset the zoom transform to the [identity transform](#zoomIdentity) instantaneously:

    ``` javascript
    selection.call(zoom.transform, d3.zoomIdentity);
    ```

    To smoothly reset the zoom transform to the identity transform over 750 milliseconds:

    ``` javascript
    selection.transition().duration(750).call(zoom.transform, d3.zoomIdentity);
    ```

    This method requires that you specify the new zoom transform completely, and does not enforce the defined [scale extent](#zoom_scaleExtent) and [translate extent](#zoom_translateExtent), if any. To derive a new transform from the existing transform, and to enforce the scale and translate extents, see the convenience methods [*zoom*.translateBy](#zoom_translateBy), [*zoom*.scaleBy](#zoom_scaleBy) and [*zoom*.scaleTo](#zoom_scaleTo).
- name: zoom.translateBy()
  id: d3-zoom#zoom_translateby
  summary: If selection is a selection, translates the current zoom transform of the selected elements by x and y, such that the new t_(x1) = t_(x0) + kx and t_(y1) = t_(y0) + ky
  belongs_to: zoom
  description: |-
    ###### *zoom*.**translateBy**(*selection*, *x*, *y*) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *selection* is a selection, [translates](#transform_translate) the [current zoom transform](#zoomTransform) of the selected elements by *x* and *y*, such that the new *t_(x1)* = *t_(x0)* + *kx* and *t_(y1)* = *t_(y0)* + *ky*. If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *x* and *y* translation amounts may be specified either as numbers or as functions that return numbers. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.
- name: zoom.translateExtent()
  id: d3-zoom#zoom_translateextent
  summary: If extent is specified, sets the translate extent to the specified array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner of the world and [x1, y1] is the bottom-right corner of the world, and returns this zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**translateExtent**(\[*extent*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *extent* is specified, sets the translate extent to the specified array of points \[\[*x0*, *y0*\], \[*x1*, *y1*\]\], where \[*x0*, *y0*\] is the top-left corner of the world and \[*x1*, *y1*\] is the bottom-right corner of the world, and returns this zoom behavior. If *extent* is not specified, returns the current translate extent, which defaults to \[\[-∞, -∞\], \[+∞, +∞\]\]. The translate extent restricts panning, and may cause translation on zoom out. It is enforced on interaction and when using [*zoom*.scaleBy](#zoom_scaleBy), [*zoom*.scaleTo](#zoom_scaleTo) and [*zoom*.translateBy](#zoom_translateBy); however, it is not enforced when using [*zoom*.transform](#zoom_transform) to set the transform explicitly.
- name: zoom.translateTo()
  id: d3-zoom#zoom_translateto
  summary: If selection is a selection, translates the current zoom transform of the selected elements such that the given position ⟨x,y⟩ appears at given point p
  belongs_to: zoom
  description: |-
    ###### *zoom*.**translateTo**(*selection*, *x*, *y*\[, *p*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *selection* is a selection, [translates](#transform_translate) the [current zoom transform](#zoomTransform) of the selected elements such that the given position ⟨*x*,*y*⟩ appears at given point *p*. The new *t_(x)* = *p_(x)* - *kx* and *t_(y)* = *p_(y)* - *ky*. If *p* is not specified, it defaults to the center of the viewport [extent](#zoom_extent). If *selection* is a transition, defines a “zoom” tween translating the current transform. This method is a convenience method for [*zoom*.transform](#zoom_transform). The *x* and *y* coordinates may be specified either as numbers or as functions that returns numbers; similarly the *p* point may be specified either as a two-element array \[*p_(x)*,*p_(y)*\] or a function. If a function, it is invoked for each selected element, being passed the current datum `d` and index `i`, with the `this` context as the current DOM element.
- name: zoom.wheelDelta()
  id: d3-zoom#zoom_wheeldelta
  summary: If delta is specified, sets the wheel delta function to the specified function and returns the zoom behavior
  belongs_to: zoom
  description: |-
    ###### *zoom*.**wheelDelta**(\[*delta*\]) · [Source](https://github.com/d3/d3-zoom/blob/main/src/zoom.js)

    If *delta* is specified, sets the wheel delta function to the specified function and returns the zoom behavior. If *delta* is not specified, returns the current wheel delta function, which defaults to:

    ``` javascript
    function wheelDelta(event) {
      return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002);
    }
    ```

    The value *Δ* returned by the wheel delta function determines the amount of scaling applied in response to a [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent). The scale factor [*transform*.k](#zoomTransform) is multiplied by 2^(*Δ*); for example, a *Δ* of +1 doubles the scale factor, *Δ* of -1 halves the scale factor.
