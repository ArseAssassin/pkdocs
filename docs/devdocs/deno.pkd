---
name: Deno
slug: deno
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2018–2022 the Deno authors
  https://doc.deno.land/deno/stable/
homepage: https://deno.land/

---
- name: AbortController
  id: ~/abortcontroller
  summary: A controller object that allows you to abort one or more DOM requests as and when desired
  description: "# AbortController\n\nA controller object that allows you to abort one or more DOM requests as and when desired.\n\n``` typescript\nclass AbortController {\n```\n\nreadonly signal: [AbortSignal](abortsignal);\n\nabort(reason?: any): void;\n\n}\n\n## Properties\n\n`signal``: `[`AbortSignal`](abortsignal)\n\nReturns the AbortSignal object associated with this object.\n\n## Methods\n\n`abort(``reason?``: ``any``)``: ``void`\n\nInvoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AbortController](https://doc.deno.land/deno/stable/~/AbortController)"
- name: AbortSignal
  id: ~/abortsignal
  summary: A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object
  description: "# AbortSignal\n\nA signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.\n\n``` typescript\ninterface AbortSignal  extends EventTarget {\n```\n\nreadonly aborted: boolean;\n\nonabort: ((this: [AbortSignal](abortsignal), ev: [Event](event)) =\\> any) \\| null;\n\nreadonly reason: any;\n\naddEventListener\\<K extends keyof [AbortSignalEventMap](abortsignaleventmap)\\>(\n\ntype: K,\n\nlistener: (this: [AbortSignal](abortsignal), ev: [AbortSignalEventMap](abortsignaleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nremoveEventListener\\<K extends keyof [AbortSignalEventMap](abortsignaleventmap)\\>(\n\ntype: K,\n\nlistener: (this: [AbortSignal](abortsignal), ev: [AbortSignalEventMap](abortsignaleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nthrowIfAborted(): void;\n\n}\n\n``` typescript\nvar AbortSignal: {\n```\n\nprototype: [AbortSignal](abortsignal);\n\nnew (): [AbortSignal](abortsignal);\n\nabort(reason?: any): [AbortSignal](abortsignal);\n\ntimeout(milliseconds: number): [AbortSignal](abortsignal);\n\n};\n\n## Extends\n\n[`EventTarget`](eventtarget)\n\n## Properties\n\n`readonly ``aborted``: ``boolean`\n\nReturns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n\n`onabort``: ``(``(``this``: `[`AbortSignal`](abortsignal)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`readonly ``reason``: ``any`\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`AbortSignalEventMap`](abortsignaleventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [AbortSignal](abortsignal), ev: [AbortSignalEventMap](abortsignaleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`addEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`removeEventListener``<``K`` extends ``keyof`` `[`AbortSignalEventMap`](abortsignaleventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [AbortSignal](abortsignal), ev: [AbortSignalEventMap](abortsignaleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n`removeEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n`throwIfAborted()``: ``void`\n\nThrows this AbortSignal's abort reason, if its AbortController has signaled to abort; otherwise, does nothing.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AbortSignal](https://doc.deno.land/deno/stable/~/AbortSignal)"
- name: AbortSignalEventMap
  id: ~/abortsignaleventmap
  summary: null
  description: "# AbortSignalEventMap\n\n``` typescript\ninterface AbortSignalEventMap {\n```\n\nabort: [Event](event);\n\n}\n\n## Properties\n\n`abort``: `[`Event`](event)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AbortSignalEventMap](https://doc.deno.land/deno/stable/~/AbortSignalEventMap)"
- name: AbstractWorkerEventMap
  id: ~/abstractworkereventmap
  summary: null
  description: "# AbstractWorkerEventMap\n\n``` typescript\ninterface AbstractWorkerEventMap {\n```\n\nerror: [ErrorEvent](errorevent);\n\n}\n\n## Properties\n\n`error``: `[`ErrorEvent`](errorevent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AbstractWorkerEventMap](https://doc.deno.land/deno/stable/~/AbstractWorkerEventMap)"
- name: addEventListener
  id: ~/addeventlistener
  summary: Registers an event listener in the global scope, which will be called synchronously whenever the event type is dispatched
  description: "# addEventListener\n\nRegisters an event listener in the global scope, which will be called synchronously whenever the event `type` is dispatched.\n\n``` typescript\naddEventListener('unload', () => { console.log('All finished!'); });\n...\ndispatchEvent(new Event('unload'));\n```\n\n``` typescript\n```\n\nfunction addEventListener\\<K extends keyof [WindowEventMap](windoweventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Window](window), ev: [WindowEventMap](windoweventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nfunction addEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\n`addEventListener``<``K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\nRegisters an event listener in the global scope, which will be called synchronously whenever the event `type` is dispatched.\n\n``` typescript\naddEventListener('unload', () => { console.log('All finished!'); });\n...\ndispatchEvent(new Event('unload'));\n```\n\n### Type Parameters\n\n`K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)\n\n### Parameters\n\n`type``: ``K`\n\n`listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any`\n\n`options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)` ``optional`\n\n### Return Type\n\n`void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n### Parameters\n\n`type``: ``string`\n\n`listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)\n\n`options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/addEventListener](https://doc.deno.land/deno/stable/~/addEventListener)"
- name: AddEventListenerOptions
  id: ~/addeventlisteneroptions
  summary: null
  description: "# AddEventListenerOptions\n\n``` typescript\ninterface AddEventListenerOptions  extends EventListenerOptions {\n```\n\nonce?: boolean;\n\npassive?: boolean;\n\nsignal?: [AbortSignal](abortsignal);\n\n}\n\n## Extends\n\n[`EventListenerOptions`](eventlisteneroptions)\n\n## Properties\n\n`once?``: ``boolean`\n\n`passive?``: ``boolean`\n\n`signal?``: `[`AbortSignal`](abortsignal)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AddEventListenerOptions](https://doc.deno.land/deno/stable/~/AddEventListenerOptions)"
- name: AesCbcParams
  id: ~/aescbcparams
  summary: null
  description: "# AesCbcParams\n\n``` typescript\ninterface AesCbcParams  extends Algorithm {\n```\n\niv: [BufferSource](buffersource);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`iv``: `[`BufferSource`](buffersource)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesCbcParams](https://doc.deno.land/deno/stable/~/AesCbcParams)"
- name: AesCtrParams
  id: ~/aesctrparams
  summary: null
  description: "# AesCtrParams\n\n``` typescript\ninterface AesCtrParams  extends Algorithm {\n```\n\ncounter: [BufferSource](buffersource);\n\nlength: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`counter``: `[`BufferSource`](buffersource)\n\n`length``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesCtrParams](https://doc.deno.land/deno/stable/~/AesCtrParams)"
- name: AesDerivedKeyParams
  id: ~/aesderivedkeyparams
  summary: null
  description: "# AesDerivedKeyParams\n\n``` typescript\ninterface AesDerivedKeyParams  extends Algorithm {\n```\n\nlength: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`length``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesDerivedKeyParams](https://doc.deno.land/deno/stable/~/AesDerivedKeyParams)"
- name: AesGcmParams
  id: ~/aesgcmparams
  summary: null
  description: "# AesGcmParams\n\n``` typescript\ninterface AesGcmParams  extends Algorithm {\n```\n\nadditionalData?: [BufferSource](buffersource);\n\niv: [BufferSource](buffersource);\n\ntagLength?: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`additionalData?``: `[`BufferSource`](buffersource)\n\n`iv``: `[`BufferSource`](buffersource)\n\n`tagLength?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesGcmParams](https://doc.deno.land/deno/stable/~/AesGcmParams)"
- name: AesKeyAlgorithm
  id: ~/aeskeyalgorithm
  summary: null
  description: "# AesKeyAlgorithm\n\n``` typescript\ninterface AesKeyAlgorithm  extends KeyAlgorithm {\n```\n\nlength: number;\n\n}\n\n## Extends\n\n[`KeyAlgorithm`](keyalgorithm)\n\n## Properties\n\n`length``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesKeyAlgorithm](https://doc.deno.land/deno/stable/~/AesKeyAlgorithm)"
- name: AesKeyGenParams
  id: ~/aeskeygenparams
  summary: null
  description: "# AesKeyGenParams\n\n``` typescript\ninterface AesKeyGenParams  extends Algorithm {\n```\n\nlength: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`length``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AesKeyGenParams](https://doc.deno.land/deno/stable/~/AesKeyGenParams)"
- name: alert
  id: ~/alert
  summary: Shows the given message and waits for the enter key pressed
  description: "# alert\n\nShows the given message and waits for the enter key pressed.\n\nIf the stdin is not interactive, it does nothing.\n\n``` typescript\n```\n\nfunction alert(message?: string): void;\n\n`alert(``message?``: ``string``)``: ``void`\n\n### Parameters\n\n`message?``: ``string`` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/alert](https://doc.deno.land/deno/stable/~/alert)"
- name: Algorithm
  id: ~/algorithm
  summary: null
  description: "# Algorithm\n\n``` typescript\ninterface Algorithm {\n```\n\nname: string;\n\n}\n\n## Properties\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Algorithm](https://doc.deno.land/deno/stable/~/Algorithm)"
- name: AlgorithmIdentifier
  id: ~/algorithmidentifier
  summary: null
  description: "# AlgorithmIdentifier\n\n``` typescript\ntype AlgorithmIdentifier = string | Algorithm;\n```\n\n## Type\n\n`string`` | `[`Algorithm`](algorithm)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/AlgorithmIdentifier](https://doc.deno.land/deno/stable/~/AlgorithmIdentifier)"
- name: atob
  id: ~/atob
  summary: Decodes a string of data which has been encoded using base-64 encoding
  description: "# atob\n\nDecodes a string of data which has been encoded using base-64 encoding.\n\n``` typescript\nconsole.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'\n```\n\n``` typescript\n```\n\nfunction atob(s: string): string;\n\n`atob(``s``: ``string``)``: ``string`\n\n### Parameters\n\n`s``: ``string`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/atob](https://doc.deno.land/deno/stable/~/atob)"
- name: BinaryType
  id: ~/binarytype
  summary: null
  description: "# BinaryType\n\n``` typescript\ntype BinaryType = \"arraybuffer\" | \"blob\";\n```\n\n## Type\n\n`\"arraybuffer\"`` | ``\"blob\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BinaryType](https://doc.deno.land/deno/stable/~/BinaryType)"
- name: Blob
  id: ~/blob
  summary: A file-like object of immutable, raw data
  description: "# Blob\n\nA file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n``` typescript\nclass Blob {\n```\n\nconstructor(blobParts?: [BlobPart](blobpart)\\[\\], options?: [BlobPropertyBag](blobpropertybag));\n\nreadonly size: number;\n\nreadonly type: string;\n\narrayBuffer(): Promise\\<ArrayBuffer\\>;\n\nslice(\n\nstart?: number,\n\nend?: number,\n\ncontentType?: string,\n\n): [Blob](blob);\n\nstream(): [ReadableStream](readablestream)\\<Uint8Array\\>;\n\ntext(): Promise\\<string\\>;\n\n}\n\n## Constructors\n\n`new ``Blob(``blobParts?``: `[`BlobPart`](blobpart)`[]``, ``options?``: `[`BlobPropertyBag`](blobpropertybag)`)`\n\n## Properties\n\n`size``: ``number`\n\n`type``: ``string`\n\n## Methods\n\n`arrayBuffer()``: ``Promise``<``ArrayBuffer``>`\n\n`slice(``start?``: ``number``, ``end?``: ``number``, ``contentType?``: ``string``)``: `[`Blob`](blob)\n\n`stream()``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\n`text()``: ``Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Blob](https://doc.deno.land/deno/stable/~/Blob)"
- name: BlobPart
  id: ~/blobpart
  summary: null
  description: "# BlobPart\n\n``` typescript\ntype BlobPart = BufferSource | Blob | string;\n```\n\n## Type\n\n[`BufferSource`](buffersource)` | `[`Blob`](blob)` | ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BlobPart](https://doc.deno.land/deno/stable/~/BlobPart)"
- name: BlobPropertyBag
  id: ~/blobpropertybag
  summary: null
  description: "# BlobPropertyBag\n\n``` typescript\ninterface BlobPropertyBag {\n```\n\nendings?: \"transparent\" \\| \"native\";\n\ntype?: string;\n\n}\n\n## Properties\n\n`endings?``: ``\"transparent\"`` | ``\"native\"`\n\n`type?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BlobPropertyBag](https://doc.deno.land/deno/stable/~/BlobPropertyBag)"
- name: Body
  id: ~/body
  summary: A simple getter used to expose a ReadableStream of the body contents
  description: "# Body\n\n``` typescript\ninterface Body {\n```\n\nreadonly body: [ReadableStream](readablestream)\\<Uint8Array\\> \\| null;\n\nreadonly bodyUsed: boolean;\n\narrayBuffer(): Promise\\<ArrayBuffer\\>;\n\nblob(): Promise\\<[Blob](blob)\\>;\n\nformData(): Promise\\<[FormData](formdata)\\>;\n\njson(): Promise\\<any\\>;\n\ntext(): Promise\\<string\\>;\n\n}\n\n## Properties\n\n`readonly ``body``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`` | ``null`\n\nA simple getter used to expose a `ReadableStream` of the body contents.\n\n`readonly ``bodyUsed``: ``boolean`\n\nStores a `Boolean` that declares whether the body has been used in a response yet.\n\n## Methods\n\n`arrayBuffer()``: ``Promise``<``ArrayBuffer``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with an `ArrayBuffer`.\n\n`blob()``: ``Promise``<`[`Blob`](blob)`>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `Blob`.\n\n`formData()``: ``Promise``<`[`FormData`](formdata)`>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `FormData` object.\n\n`json()``: ``Promise``<``any``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.\n\n`text()``: ``Promise``<``string``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `USVString` (text).\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Body](https://doc.deno.land/deno/stable/~/Body)"
- name: BodyInit
  id: ~/bodyinit
  summary: null
  description: "# BodyInit\n\n``` typescript\ntype BodyInit = \n```\n\n\\| [Blob](blob)\n\n\\| [BufferSource](buffersource)\n\n\\| [FormData](formdata)\n\n\\| [URLSearchParams](urlsearchparams)\n\n\\| [ReadableStream](readablestream)\\<Uint8Array\\>\n\n\\| string;\n\n## Type\n\n[`Blob`](blob)` | `[`BufferSource`](buffersource)` | `[`FormData`](formdata)` | `[`URLSearchParams`](urlsearchparams)` | `[`ReadableStream`](readablestream)`<``Uint8Array``>`` | ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BodyInit](https://doc.deno.land/deno/stable/~/BodyInit)"
- name: BroadcastChannel
  id: ~/broadcastchannel
  summary: Returns the channel name (as passed to the constructor)
  description: "# BroadcastChannel\n\n``` typescript\ninterface BroadcastChannel  extends EventTarget {\n```\n\nreadonly name: string;\n\nonmessage: ((this: [BroadcastChannel](broadcastchannel), ev: [MessageEvent](messageevent)) =\\> any) \\| null;\n\nonmessageerror: ((this: [BroadcastChannel](broadcastchannel), ev: [MessageEvent](messageevent)) =\\> any) \\| null;\n\naddEventListener\\<K extends keyof [BroadcastChannelEventMap](broadcastchanneleventmap)\\>(\n\ntype: K,\n\nlistener: (this: [BroadcastChannel](broadcastchannel), ev: [BroadcastChannelEventMap](broadcastchanneleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nclose(): void;\n\npostMessage(message: any): void;\n\nremoveEventListener\\<K extends keyof [BroadcastChannelEventMap](broadcastchanneleventmap)\\>(\n\ntype: K,\n\nlistener: (this: [BroadcastChannel](broadcastchannel), ev: [BroadcastChannelEventMap](broadcastchanneleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\n}\n\n``` typescript\nvar BroadcastChannel: {\n```\n\nprototype: [BroadcastChannel](broadcastchannel);\n\nnew (name: string): [BroadcastChannel](broadcastchannel);\n\n};\n\n## Extends\n\n[`EventTarget`](eventtarget)\n\n## Properties\n\n`readonly ``name``: ``string`\n\nReturns the channel name (as passed to the constructor).\n\n`onmessage``: ``(``(``this``: `[`BroadcastChannel`](broadcastchannel)`, ``ev``: `[`MessageEvent`](messageevent)`) => ``any``)`` | ``null`\n\n`onmessageerror``: ``(``(``this``: `[`BroadcastChannel`](broadcastchannel)`, ``ev``: `[`MessageEvent`](messageevent)`) => ``any``)`` | ``null`\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`BroadcastChannelEventMap`](broadcastchanneleventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [BroadcastChannel](broadcastchannel), ev: [BroadcastChannelEventMap](broadcastchanneleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`addEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`close()``: ``void`\n\nCloses the BroadcastChannel object, opening it up to garbage collection.\n\n`postMessage(``message``: ``any``)``: ``void`\n\nSends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.\n\n`removeEventListener``<``K`` extends ``keyof`` `[`BroadcastChannelEventMap`](broadcastchanneleventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [BroadcastChannel](broadcastchannel), ev: [BroadcastChannelEventMap](broadcastchanneleventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n`removeEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BroadcastChannel](https://doc.deno.land/deno/stable/~/BroadcastChannel)"
- name: BroadcastChannelEventMap
  id: ~/broadcastchanneleventmap
  summary: null
  description: "# BroadcastChannelEventMap\n\n``` typescript\ninterface BroadcastChannelEventMap {\n```\n\nmessage: [MessageEvent](messageevent);\n\nmessageerror: [MessageEvent](messageevent);\n\n}\n\n## Properties\n\n`message``: `[`MessageEvent`](messageevent)\n\n`messageerror``: `[`MessageEvent`](messageevent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BroadcastChannelEventMap](https://doc.deno.land/deno/stable/~/BroadcastChannelEventMap)"
- name: btoa
  id: ~/btoa
  summary: Creates a base-64 ASCII encoded string from the input string
  description: "# btoa\n\nCreates a base-64 ASCII encoded string from the input string.\n\n``` typescript\nconsole.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"\n```\n\n``` typescript\n```\n\nfunction btoa(s: string): string;\n\n`btoa(``s``: ``string``)``: ``string`\n\n### Parameters\n\n`s``: ``string`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/btoa](https://doc.deno.land/deno/stable/~/btoa)"
- name: BufferSource
  id: ~/buffersource
  summary: null
  description: "# BufferSource\n\n``` typescript\ntype BufferSource = ArrayBufferView | ArrayBuffer;\n```\n\n## Type\n\n`ArrayBufferView`` | ``ArrayBuffer`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/BufferSource](https://doc.deno.land/deno/stable/~/BufferSource)"
- name: ByteLengthQueuingStrategy
  id: ~/bytelengthqueuingstrategy
  summary: null
  description: "# ByteLengthQueuingStrategy\n\n``` typescript\ninterface ByteLengthQueuingStrategy  extends QueuingStrategy<ArrayBufferView> {\n```\n\nhighWaterMark: number;\n\nsize(chunk: ArrayBufferView): number;\n\n}\n\n``` typescript\nvar ByteLengthQueuingStrategy: {\n```\n\nprototype: [ByteLengthQueuingStrategy](bytelengthqueuingstrategy);\n\nnew (options: {\n\nhighWaterMark: number;\n\n}): [ByteLengthQueuingStrategy](bytelengthqueuingstrategy);\n\n};\n\n## Extends\n\n[`QueuingStrategy`](queuingstrategy)`<``ArrayBufferView``>`\n\n## Properties\n\n`highWaterMark``: ``number`\n\n## Methods\n\n`size(``chunk``: ``ArrayBufferView``)``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ByteLengthQueuingStrategy](https://doc.deno.land/deno/stable/~/ByteLengthQueuingStrategy)"
- name: Cache
  id: ~/cache
  summary: Delete cache object matching the provided request
  description: "# Cache\n\n``` typescript\ninterface Cache {\n```\n\ndelete(request: [RequestInfo](requestinfo) \\| [URL](url), options?: [CacheQueryOptions](cachequeryoptions)): Promise\\<boolean\\>;\n\nmatch(request: [RequestInfo](requestinfo) \\| [URL](url), options?: [CacheQueryOptions](cachequeryoptions)): Promise\\<[Response](response) \\| undefined\\>;\n\nput(request: [RequestInfo](requestinfo) \\| [URL](url), response: [Response](response)): Promise\\<void\\>;\n\n}\n\n``` typescript\nvar Cache: {\n```\n\nprototype: [Cache](cache);\n\nnew (name: string): [Cache](cache);\n\n};\n\n## Methods\n\n`delete(``request``: `[`RequestInfo`](requestinfo)` | `[`URL`](url)`, ``options?``: `[`CacheQueryOptions`](cachequeryoptions)`)``: ``Promise``<``boolean``>`\n\nDelete cache object matching the provided request.\n\nHow is the API different from browsers?\n\n1.  You cannot delete cache objects using by relative paths.\n2.  You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n\n`match(``request``: `[`RequestInfo`](requestinfo)` | `[`URL`](url)`, ``options?``: `[`CacheQueryOptions`](cachequeryoptions)`)``: ``Promise``<`[`Response`](response)` | ``undefined``>`\n\nReturn cache object matching the provided request.\n\nHow is the API different from browsers?\n\n1.  You cannot match cache objects using by relative paths.\n2.  You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n\n`put(``request``: `[`RequestInfo`](requestinfo)` | `[`URL`](url)`, ``response``: `[`Response`](response)`)``: ``Promise``<``void``>`\n\nPut the provided request/response into the cache.\n\nHow is the API different from browsers?\n\n1.  You cannot match cache objects using by relative paths.\n2.  You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Cache](https://doc.deno.land/deno/stable/~/Cache)"
- name: CacheQueryOptions
  id: ~/cachequeryoptions
  summary: null
  description: "# CacheQueryOptions\n\n``` typescript\ninterface CacheQueryOptions {\n```\n\nignoreMethod?: boolean;\n\nignoreSearch?: boolean;\n\nignoreVary?: boolean;\n\n}\n\n## Properties\n\n`ignoreMethod?``: ``boolean`\n\n`ignoreSearch?``: ``boolean`\n\n`ignoreVary?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CacheQueryOptions](https://doc.deno.land/deno/stable/~/CacheQueryOptions)"
- name: caches
  id: ~/caches
  summary: null
  description: "# caches\n\n``` typescript\nvar caches: CacheStorage;\n```\n\n``` typescript\nvar caches: CacheStorage;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/caches](https://doc.deno.land/deno/stable/~/caches)"
- name: CacheStorage
  id: ~/cachestorage
  summary: Delete cache storage for the provided name
  description: "# CacheStorage\n\n``` typescript\ninterface CacheStorage {\n```\n\ndelete(cacheName: string): Promise\\<boolean\\>;\n\nhas(cacheName: string): Promise\\<boolean\\>;\n\nopen(cacheName: string): Promise\\<[Cache](cache)\\>;\n\n}\n\n``` typescript\nvar CacheStorage: {\n```\n\nprototype: [CacheStorage](cachestorage);\n\nnew (): [CacheStorage](cachestorage);\n\n};\n\n## Methods\n\n`delete(``cacheName``: ``string``)``: ``Promise``<``boolean``>`\n\nDelete cache storage for the provided name.\n\n`has(``cacheName``: ``string``)``: ``Promise``<``boolean``>`\n\nCheck if cache already exists for the provided name.\n\n`open(``cacheName``: ``string``)``: ``Promise``<`[`Cache`](cache)`>`\n\nOpen a cache storage for the provided name.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CacheStorage](https://doc.deno.land/deno/stable/~/CacheStorage)"
- name: clearInterval
  id: ~/clearinterval
  summary: null
  description: "# clearInterval\n\nCancels a timed, repeating action which was previously started by a call to `setInterval()`\n\n``` typescript\nconst id = setInterval(() => {console.log('hello');}, 500);\n// ...\nclearInterval(id);\n```\n\n``` typescript\n```\n\nfunction clearInterval(id?: number): void;\n\n`clearInterval(``id?``: ``number``)``: ``void`\n\n### Parameters\n\n`id?``: ``number`` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/clearInterval](https://doc.deno.land/deno/stable/~/clearInterval)"
- name: clearTimeout
  id: ~/cleartimeout
  summary: null
  description: "# clearTimeout\n\nCancels a scheduled action initiated by `setTimeout()`\n\n``` typescript\nconst id = setTimeout(() => {console.log('hello');}, 500);\n// ...\nclearTimeout(id);\n```\n\n``` typescript\n```\n\nfunction clearTimeout(id?: number): void;\n\n`clearTimeout(``id?``: ``number``)``: ``void`\n\n### Parameters\n\n`id?``: ``number`` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/clearTimeout](https://doc.deno.land/deno/stable/~/clearTimeout)"
- name: CloseEvent
  id: ~/closeevent
  summary: Returns the WebSocket connection close code provided by the server
  description: "# CloseEvent\n\n``` typescript\nclass CloseEvent extends Event {\n```\n\nconstructor(type: string, eventInitDict?: [CloseEventInit](closeeventinit));\n\nreadonly code: number;\n\nreadonly reason: string;\n\nreadonly wasClean: boolean;\n\n}\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``CloseEvent(``type``: ``string``, ``eventInitDict?``: `[`CloseEventInit`](closeeventinit)`)`\n\n## Properties\n\n`code``: ``number`\n\nReturns the WebSocket connection close code provided by the server.\n\n`reason``: ``string`\n\nReturns the WebSocket connection close reason provided by the server.\n\n`wasClean``: ``boolean`\n\nReturns true if the connection closed cleanly; false otherwise.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CloseEvent](https://doc.deno.land/deno/stable/~/CloseEvent)"
- name: CloseEventInit
  id: ~/closeeventinit
  summary: null
  description: "# CloseEventInit\n\n``` typescript\ninterface CloseEventInit  extends EventInit {\n```\n\ncode?: number;\n\nreason?: string;\n\nwasClean?: boolean;\n\n}\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`code?``: ``number`\n\n`reason?``: ``string`\n\n`wasClean?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CloseEventInit](https://doc.deno.land/deno/stable/~/CloseEventInit)"
- name: CompressionStream
  id: ~/compressionstream
  summary: An API for compressing a stream of data
  description: "# CompressionStream\n\nAn API for compressing a stream of data.\n\n@example\n\n``` typescript\nawait Deno.stdin.readable\n  .pipeThrough(new CompressionStream(\"gzip\"))\n  .pipeTo(Deno.stdout.writable);\n```\n\n``` typescript\nclass CompressionStream {\n```\n\nconstructor(format: string);\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n}\n\n## Constructors\n\n`new ``CompressionStream(``format``: ``string``)`\n\nCreates a new `CompressionStream` object which compresses a stream of data.\n\nThrows a `TypeError` if the format passed to the constructor is not supported.\n\n## Properties\n\n`readable``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\n`writable``: `[`WritableStream`](writablestream)`<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CompressionStream](https://doc.deno.land/deno/stable/~/CompressionStream)"
- name: confirm
  id: ~/confirm
  summary: Shows the given message and waits for the answer
  description: "# confirm\n\nShows the given message and waits for the answer. Returns the user's answer as boolean.\n\nOnly `y` and `Y` are considered as true.\n\nIf the stdin is not interactive, it returns false.\n\n``` typescript\n```\n\nfunction confirm(message?: string): boolean;\n\n`confirm(``message?``: ``string``)``: ``boolean`\n\n### Parameters\n\n`message?``: ``string`` ``optional`\n\n### Return Type\n\n`boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/confirm](https://doc.deno.land/deno/stable/~/confirm)"
- name: console
  id: ~/console
  summary: null
  description: "# console\n\n``` typescript\nvar console: Console;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/console](https://doc.deno.land/deno/stable/~/console)"
- name: CountQueuingStrategy
  id: ~/countqueuingstrategy
  summary: This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams
  description: "# CountQueuingStrategy\n\nThis Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.\n\n``` typescript\ninterface CountQueuingStrategy  extends QueuingStrategy {\n```\n\nhighWaterMark: number;\n\nsize(chunk: any): 1;\n\n}\n\n``` typescript\nvar CountQueuingStrategy: {\n```\n\nprototype: [CountQueuingStrategy](countqueuingstrategy);\n\nnew (options: {\n\nhighWaterMark: number;\n\n}): [CountQueuingStrategy](countqueuingstrategy);\n\n};\n\n## Extends\n\n[`QueuingStrategy`](queuingstrategy)\n\n## Properties\n\n`highWaterMark``: ``number`\n\n## Methods\n\n`size(``chunk``: ``any``)``: ``1`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CountQueuingStrategy](https://doc.deno.land/deno/stable/~/CountQueuingStrategy)"
- name: crypto
  id: ~/crypto
  summary: null
  description: "# crypto\n\n``` typescript\nvar crypto: Crypto;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/crypto](https://doc.deno.land/deno/stable/~/crypto)"
- name: CryptoKey
  id: ~/cryptokey
  summary: The CryptoKey dictionary of the Web Crypto API represents a cryptographic key
  description: "# CryptoKey\n\nThe CryptoKey dictionary of the Web Crypto API represents a cryptographic key.\n\n``` typescript\ninterface CryptoKey {\n```\n\nreadonly algorithm: [KeyAlgorithm](keyalgorithm);\n\nreadonly extractable: boolean;\n\nreadonly type: [KeyType](keytype);\n\nreadonly usages: [KeyUsage](keyusage)\\[\\];\n\n}\n\n``` typescript\nvar CryptoKey: {\n```\n\nprototype: [CryptoKey](cryptokey);\n\nnew (): [CryptoKey](cryptokey);\n\n};\n\n## Properties\n\n`readonly ``algorithm``: `[`KeyAlgorithm`](keyalgorithm)\n\n`readonly ``extractable``: ``boolean`\n\n`readonly ``type``: `[`KeyType`](keytype)\n\n`readonly ``usages``: `[`KeyUsage`](keyusage)`[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CryptoKey](https://doc.deno.land/deno/stable/~/CryptoKey)"
- name: CryptoKeyPair
  id: ~/cryptokeypair
  summary: The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm
  description: "# CryptoKeyPair\n\nThe CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.\n\n``` typescript\ninterface CryptoKeyPair {\n```\n\nprivateKey: [CryptoKey](cryptokey);\n\npublicKey: [CryptoKey](cryptokey);\n\n}\n\n``` typescript\nvar CryptoKeyPair: {\n```\n\nprototype: [CryptoKeyPair](cryptokeypair);\n\nnew (): [CryptoKeyPair](cryptokeypair);\n\n};\n\n## Properties\n\n`privateKey``: `[`CryptoKey`](cryptokey)\n\n`publicKey``: `[`CryptoKey`](cryptokey)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CryptoKeyPair](https://doc.deno.land/deno/stable/~/CryptoKeyPair)"
- name: CustomEvent
  id: ~/customevent
  summary: Returns any custom data event was created with
  description: "# CustomEvent\n\n``` typescript\nclass CustomEvent<T = any> extends Event {\n```\n\nconstructor(typeArg: string, eventInitDict?: [CustomEventInit](customeventinit)\\<T\\>);\n\nreadonly detail: T;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``CustomEvent(``typeArg``: ``string``, ``eventInitDict?``: `[`CustomEventInit`](customeventinit)`<``T``>``)`\n\n## Properties\n\n`detail``: ``T`\n\nReturns any custom data event was created with. Typically used for synthetic events.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CustomEvent](https://doc.deno.land/deno/stable/~/CustomEvent)"
- name: CustomEventInit
  id: ~/customeventinit
  summary: null
  description: "# CustomEventInit\n\n``` typescript\ninterface CustomEventInit <T = any> extends EventInit {\n```\n\ndetail?: T;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`detail?``: ``T`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/CustomEventInit](https://doc.deno.land/deno/stable/~/CustomEventInit)"
- name: DecompressionStream
  id: ~/decompressionstream
  summary: An API for decompressing a stream of data
  description: "# DecompressionStream\n\nAn API for decompressing a stream of data.\n\n@example\n\n``` typescript\nconst input = await Deno.open(\"./file.txt.gz\");\nconst output = await Deno.create(\"./file.txt\");\n\nawait input.readable\n  .pipeThrough(new DecompressionStream(\"gzip\"))\n  .pipeTo(output.writable);\n```\n\n``` typescript\nclass DecompressionStream {\n```\n\nconstructor(format: string);\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n}\n\n## Constructors\n\n`new ``DecompressionStream(``format``: ``string``)`\n\nCreates a new `DecompressionStream` object which decompresses a stream of data.\n\nThrows a `TypeError` if the format passed to the constructor is not supported.\n\n## Properties\n\n`readable``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\n`writable``: `[`WritableStream`](writablestream)`<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/DecompressionStream](https://doc.deno.land/deno/stable/~/DecompressionStream)"
- name: Deno
  id: ~/deno
  summary: The global namespace where Deno specific, non-standard APIs are located
  description: "# Deno\n\nThe global namespace where Deno specific, non-standard APIs are located.\n\n## Namespace\n\n[TABLE]\n\n## Classes\n\n[TABLE]\n\n## Enums\n\n[TABLE]\n\n## Variables\n\n[TABLE]\n\n## Functions\n\n[TABLE]\n\n## Interfaces\n\n[TABLE]\n\n## Type Aliases\n\n[TABLE]\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno](https://doc.deno.land/deno/stable/~/Deno)"
- name: Deno.Addr
  id: ~/deno.addr
  summary: null
  description: "# Deno.Addr\n\n``` typescript\ntype Addr = NetAddr | UnixAddr;\n```\n\n## Type\n\n[`NetAddr`](deno.netaddr)` | `[`UnixAddr`](deno.unixaddr)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Addr](https://doc.deno.land/deno/stable/~/Deno.Addr)"
- name: Deno.addSignalListener
  id: ~/deno.addsignallistener
  summary: Registers the given function as a listener of the given signal event
  description: "# Deno.addSignalListener\n\nRegisters the given function as a listener of the given signal event.\n\n``` typescript\nDeno.addSignalListener(\n  \"SIGTERM\",\n  () => {\n    console.log(\"SIGTERM!\")\n  }\n);\n```\n\n*Note*: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break) are supported.\n\n``` typescript\n```\n\nfunction addSignalListener(signal: [Signal](deno.signal), handler: () =\\> void): void;\n\n`addSignalListener(``signal``: `[`Signal`](deno.signal)`, ``handler``: ``() => ``void``)``: ``void`\n\n### Parameters\n\n`signal``: `[`Signal`](deno.signal)\n\n`handler``: ``() => ``void`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.addSignalListener](https://doc.deno.land/deno/stable/~/Deno.addSignalListener)"
- name: Deno.args
  id: ~/deno.args
  summary: Returns the script arguments to the program
  description: "# Deno.args\n\nReturns the script arguments to the program. If for example we run a program:\n\ndeno run --allow-read <https://deno.land/std/examples/cat.ts> /etc/passwd\n\nThen `Deno.args` will contain:\n\n\\[ \"/etc/passwd\" \\]\n\n``` typescript\nconst args: string[];\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.args](https://doc.deno.land/deno/stable/~/Deno.args)"
- name: Deno.Buffer
  id: ~/deno.buffer
  summary: A variable-sized buffer of bytes with read() and write() methods
  description: "# Deno.Buffer\n\ndeprecated\n\nA variable-sized buffer of bytes with `read()` and `write()` methods.\n\n@deprecated\n\nUse [`Buffer`](https://deno.land/std/io/buffer.ts?s=Buffer) from [`std/io/buffer.ts`](https://deno.land/std/io/buffer.ts) instead. `Deno.Buffer` will be removed in the future.\n\n``` typescript\nclass Buffer implements Reader, ReaderSync, Writer, WriterSync {\n```\n\nconstructor(ab?: ArrayBuffer);\n\nreadonly capacity: number;\n\nreadonly length: number;\n\nbytes(options?: {\n\ncopy?: boolean;\n\n}): Uint8Array;\n\nempty(): boolean;\n\ngrow(n: number): void;\n\nread(p: Uint8Array): Promise\\<number \\| null\\>;\n\nreadFrom(r: [Reader](deno.reader)): Promise\\<number\\>;\n\nreadFromSync(r: [ReaderSync](deno.readersync)): number;\n\nreadSync(p: Uint8Array): number \\| null;\n\nreset(): void;\n\ntruncate(n: number): void;\n\nwrite(p: Uint8Array): Promise\\<number\\>;\n\nwriteSync(p: Uint8Array): number;\n\n}\n\n## Implements\n\n[`Reader`](deno.reader)\n\n[`ReaderSync`](deno.readersync)\n\n[`Writer`](deno.writer)\n\n[`WriterSync`](deno.writersync)\n\n## Constructors\n\n`new ``Buffer(``ab?``: ``ArrayBuffer``)`\n\n## Properties\n\n`capacity``: ``number`\n\nThe read only capacity of the buffer's underlying byte slice, that is, the total space allocated for the buffer's data.\n\n`length``: ``number`\n\nA read only number of bytes of the unread portion of the buffer.\n\n## Methods\n\n`bytes(``options?``: ``{`\n\ncopy?: boolean;\n\n}): Uint8Array\n\nReturns a slice holding the unread portion of the buffer.\n\nThe slice is valid for use only until the next buffer modification (that is, only until the next call to a method like `read()`, `write()`, `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at least until the next buffer modification, so immediate changes to the slice will affect the result of future reads.\n\n@param options\n\nDefaults to `{ copy: true }`\n\n`empty()``: ``boolean`\n\nReturns whether the unread portion of the buffer is empty.\n\n`grow(``n``: ``number``)``: ``void`\n\nGrows the buffer's capacity, if necessary, to guarantee space for another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to the buffer without another allocation. If `n` is negative, `.grow()` will throw. If the buffer can't grow it will throw an error.\n\nBased on Go Lang's [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow).\n\n`read(``p``: ``Uint8Array``)``: ``Promise``<``number`` | ``null``>`\n\nReads the next `p.length` bytes from the buffer or until the buffer is drained. Resolves to the number of bytes read. If the buffer has no data to return, resolves to EOF (`null`).\n\nNOTE: This methods reads bytes synchronously; it's provided for compatibility with `Reader` interfaces.\n\n`readFrom(``r``: `[`Reader`](deno.reader)`)``: ``Promise``<``number``>`\n\nReads data from `r` until EOF (`null`) and appends it to the buffer, growing the buffer as needed. It resolves to the number of bytes read. If the buffer becomes too large, `.readFrom()` will reject with an error.\n\nBased on Go Lang's [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).\n\n`readFromSync(``r``: `[`ReaderSync`](deno.readersync)`)``: ``number`\n\nReads data from `r` until EOF (`null`) and appends it to the buffer, growing the buffer as needed. It returns the number of bytes read. If the buffer becomes too large, `.readFromSync()` will throw an error.\n\nBased on Go Lang's [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).\n\n`readSync(``p``: ``Uint8Array``)``: ``number`` | ``null`\n\nReads the next `p.length` bytes from the buffer or until the buffer is drained. Returns the number of bytes read. If the buffer has no data to return, the return is EOF (`null`).\n\n`reset()``: ``void`\n\nResets the buffer to be empty, but it retains the underlying storage for use by future writes. `.reset()` is the same as `.truncate(0)`.\n\n`truncate(``n``: ``number``)``: ``void`\n\nDiscards all but the first `n` unread bytes from the buffer but continues to use the same allocated storage. It throws if `n` is negative or greater than the length of the buffer.\n\n`write(``p``: ``Uint8Array``)``: ``Promise``<``number``>`\n\nNOTE: This methods writes bytes synchronously; it's provided for compatibility with `Writer` interface.\n\n`writeSync(``p``: ``Uint8Array``)``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Buffer](https://doc.deno.land/deno/stable/~/Deno.Buffer)"
- name: Deno.build
  id: ~/deno.build
  summary: Build related information
  description: "# Deno.build\n\nBuild related information.\n\n``` typescript\nconst build: {\n```\n\ntarget: string;\n\narch: \"x86_64\" \\| \"aarch64\";\n\nos: \"darwin\" \\| \"linux\" \\| \"windows\";\n\nvendor: string;\n\nenv?: string;\n\n};\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.build](https://doc.deno.land/deno/stable/~/Deno.build)"
- name: Deno.CAARecord
  id: ~/deno.caarecord
  summary: If resolveDns is called with "CAA" record type specified, it will return an array of this interface
  description: "# Deno.CAARecord\n\nIf `resolveDns` is called with \"CAA\" record type specified, it will return an array of this interface.\n\n``` typescript\ninterface CAARecord {\n```\n\ncritical: boolean;\n\ntag: string;\n\nvalue: string;\n\n}\n\n## Properties\n\n`critical``: ``boolean`\n\n`tag``: ``string`\n\n`value``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.CAARecord](https://doc.deno.land/deno/stable/~/Deno.CAARecord)"
- name: Deno.chdir
  id: ~/deno.chdir
  summary: Change the current working directory to the specified path
  description: "# Deno.chdir\n\nChange the current working directory to the specified path.\n\n``` typescript\nDeno.chdir(\"/home/userA\");\nDeno.chdir(\"../userB\");\nDeno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n```\n\nThrows [`Deno.errors.NotFound`](deno#errors_NotFound) if directory not found.\n\nThrows [`Deno.errors.PermissionDenied`](deno#errors_PermissionDenied) if the user does not have operating system file access rights.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction chdir(directory: string \\| [URL](url)): void;\n\n`chdir(``directory``: ``string`` | `[`URL`](url)`)``: ``void`\n\n### Parameters\n\n`directory``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.chdir](https://doc.deno.land/deno/stable/~/Deno.chdir)"
- name: Deno.chmod
  id: ~/deno.chmod
  summary: Changes the permission of a specific file/directory of specified path
  description: "# Deno.chmod\n\nChanges the permission of a specific file/directory of specified path. Ignores the process's umask.\n\n``` typescript\nawait Deno.chmod(\"/path/to/file\", 0o666);\n```\n\nThe mode is a sequence of 3 octal numbers. The first/left-most number specifies the permissions for the owner. The second number specifies the permissions for the group. The last/right-most number specifies the permissions for others. For example, with a mode of 0o764, the owner (7) can read/write/execute, the group (6) can read/write and everyone else (4) can read only.\n\n| Number | Description              |\n|--------|--------------------------|\n| 7      | read, write, and execute |\n| 6      | read and write           |\n| 5      | read and execute         |\n| 4      | read only                |\n| 3      | write and execute        |\n| 2      | write only               |\n| 1      | execute only             |\n| 0      | no permission            |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction chmod(path: string \\| [URL](url), mode: number): Promise\\<void\\>;\n\n`chmod(``path``: ``string`` | `[`URL`](url)`, ``mode``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`mode``: ``number`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.chmod](https://doc.deno.land/deno/stable/~/Deno.chmod)"
- name: Deno.chmodSync
  id: ~/deno.chmodsync
  summary: Synchronously changes the permission of a specific file/directory of specified path
  description: "# Deno.chmodSync\n\nSynchronously changes the permission of a specific file/directory of specified path. Ignores the process's umask.\n\n``` typescript\nDeno.chmodSync(\"/path/to/file\", 0o666);\n```\n\nFor a full description, see [`Deno.chmod`](deno#chmod).\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction chmodSync(path: string \\| [URL](url), mode: number): void;\n\n`chmodSync(``path``: ``string`` | `[`URL`](url)`, ``mode``: ``number``)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`mode``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.chmodSync](https://doc.deno.land/deno/stable/~/Deno.chmodSync)"
- name: Deno.chown
  id: ~/deno.chown
  summary: Change owner of a regular file or directory
  description: "# Deno.chown\n\nChange owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n``` typescript\nawait Deno.chown(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n\n``` typescript\n```\n\nfunction chown(\n\npath: string \\| [URL](url),\n\nuid: number \\| null,\n\ngid: number \\| null,\n\n): Promise\\<void\\>;\n\n`chown(``path``: ``string`` | `[`URL`](url)`, ``uid``: ``number`` | ``null``, ``gid``: ``number`` | ``null``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\npath to the file\n\n`uid``: ``number`` | ``null`\n\nuser id (UID) of the new owner, or `null` for no change\n\n`gid``: ``number`` | ``null`\n\ngroup id (GID) of the new owner, or `null` for no change\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.chown](https://doc.deno.land/deno/stable/~/Deno.chown)"
- name: Deno.chownSync
  id: ~/deno.chownsync
  summary: Synchronously change owner of a regular file or directory
  description: "# Deno.chownSync\n\nSynchronously change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n``` typescript\nDeno.chownSync(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n\n``` typescript\n```\n\nfunction chownSync(\n\npath: string \\| [URL](url),\n\nuid: number \\| null,\n\ngid: number \\| null,\n\n): void;\n\n`chownSync(``path``: ``string`` | `[`URL`](url)`, ``uid``: ``number`` | ``null``, ``gid``: ``number`` | ``null``)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\npath to the file\n\n`uid``: ``number`` | ``null`\n\nuser id (UID) of the new owner, or `null` for no change\n\n`gid``: ``number`` | ``null`\n\ngroup id (GID) of the new owner, or `null` for no change\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.chownSync](https://doc.deno.land/deno/stable/~/Deno.chownSync)"
- name: Deno.close
  id: ~/deno.close
  summary: Close the given resource ID (rid) which has been previously opened, such as via opening or creating a file
  description: "# Deno.close\n\nClose the given resource ID (`rid`) which has been previously opened, such as via opening or creating a file. Closing a file when you are finished with it is important to avoid leaking resources.\n\n``` typescript\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nDeno.close(file.rid);\n```\n\n``` typescript\n```\n\nfunction close(rid: number): void;\n\n`close(``rid``: ``number``)``: ``void`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.close](https://doc.deno.land/deno/stable/~/Deno.close)"
- name: Deno.Closer
  id: ~/deno.closer
  summary: An abstract interface which when implemented provides an interface to close files/resources that were previously opened
  description: "# Deno.Closer\n\nAn abstract interface which when implemented provides an interface to close files/resources that were previously opened.\n\n``` typescript\ninterface Closer {\n```\n\nclose(): void;\n\n}\n\n## Methods\n\n`close()``: ``void`\n\nCloses the resource, \"freeing\" the backing file/resource.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Closer](https://doc.deno.land/deno/stable/~/Deno.Closer)"
- name: Deno.Conn
  id: ~/deno.conn
  summary: The local address of the connection
  description: "# Deno.Conn\n\n``` typescript\ninterface Conn  extends Reader, Writer, Closer {\n```\n\nreadonly localAddr: [Addr](deno.addr);\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nreadonly remoteAddr: [Addr](deno.addr);\n\nreadonly rid: number;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\ncloseWrite(): Promise\\<void\\>;\n\n}\n\n## Extends\n\n[`Reader`](deno.reader)\n\n[`Writer`](deno.writer)\n\n[`Closer`](deno.closer)\n\n## Properties\n\n`readonly ``localAddr``: `[`Addr`](deno.addr)\n\nThe local address of the connection.\n\n`readonly ``readable``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\n`readonly ``remoteAddr``: `[`Addr`](deno.addr)\n\nThe remote address of the connection.\n\n`readonly ``rid``: ``number`\n\nThe resource ID of the connection.\n\n`readonly ``writable``: `[`WritableStream`](writablestream)`<``Uint8Array``>`\n\n## Methods\n\n`closeWrite()``: ``Promise``<``void``>`\n\nShuts down (`shutdown(2)`) the write side of the connection. Most callers should just use `close()`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Conn](https://doc.deno.land/deno/stable/~/Deno.Conn)"
- name: Deno.connect
  id: ~/deno.connect
  summary: Connects to the hostname (default is "127.0.0.1") and port on the named transport (default is "tcp"), and resolves to the connection (Conn)
  description: "# Deno.connect\n\nConnects to the hostname (default is \"127.0.0.1\") and port on the named transport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n``` typescript\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission for \"tcp\".\n\n``` typescript\n```\n\nfunction connect(options: [ConnectOptions](deno.connectoptions)): Promise\\<[TcpConn](deno.tcpconn)\\>;\n\n`connect(``options``: `[`ConnectOptions`](deno.connectoptions)`)``: ``Promise``<`[`TcpConn`](deno.tcpconn)`>`\n\n### Parameters\n\n`options``: `[`ConnectOptions`](deno.connectoptions)\n\n### Return Type\n\n`Promise``<`[`TcpConn`](deno.tcpconn)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.connect](https://doc.deno.land/deno/stable/~/Deno.connect)"
- name: Deno.ConnectOptions
  id: ~/deno.connectoptions
  summary: A literal IP address or host name that can be resolved to an IP address
  description: "# Deno.ConnectOptions\n\n``` typescript\ninterface ConnectOptions {\n```\n\nhostname?: string;\n\nport: number;\n\ntransport?: \"tcp\";\n\n}\n\n## Properties\n\n`hostname?``: ``string`\n\nA literal IP address or host name that can be resolved to an IP address. If not specified, defaults to `127.0.0.1`.\n\n`port``: ``number`\n\nThe port to connect to.\n\n`transport?``: ``\"tcp\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ConnectOptions](https://doc.deno.land/deno/stable/~/Deno.ConnectOptions)"
- name: Deno.connectTls
  id: ~/deno.connecttls
  summary: Establishes a secure connection over TLS (transport layer security) using an optional cert file, hostname (default is "127.0.0.1") and port
  description: "# Deno.connectTls\n\nEstablishes a secure connection over TLS (transport layer security) using an optional cert file, hostname (default is \"127.0.0.1\") and port. The cert file is optional and if not included Mozilla's root certificates will be used (see also <https://github.com/ctz/webpki-roots> for specifics)\n\n``` typescript\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\nconst conn1 = await Deno.connectTls({ port: 80 });\nconst conn2 = await Deno.connectTls({ caCerts: [caCert], hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connectTls({ caCerts: [caCert], hostname: \"golang.org\", port: 80});\n```\n\nRequires `allow-net` permission.\n\n``` typescript\n```\n\nfunction connectTls(options: [ConnectTlsOptions](deno.connecttlsoptions)): Promise\\<[TlsConn](deno.tlsconn)\\>;\n\n`connectTls(``options``: `[`ConnectTlsOptions`](deno.connecttlsoptions)`)``: ``Promise``<`[`TlsConn`](deno.tlsconn)`>`\n\n### Parameters\n\n`options``: `[`ConnectTlsOptions`](deno.connecttlsoptions)\n\n### Return Type\n\n`Promise``<`[`TlsConn`](deno.tlsconn)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.connectTls](https://doc.deno.land/deno/stable/~/Deno.connectTls)"
- name: Deno.ConnectTlsOptions
  id: ~/deno.connecttlsoptions
  summary: A list of root certificates that will be used in addition to the default root certificates to verify the peer's certificate
  description: "# Deno.ConnectTlsOptions\n\n``` typescript\ninterface ConnectTlsOptions {\n```\n\ncaCerts?: string\\[\\];\n\ncertFile?: string;\n\nhostname?: string;\n\nport: number;\n\n}\n\n## Properties\n\n`caCerts?``: ``string``[]`\n\nA list of root certificates that will be used in addition to the default root certificates to verify the peer's certificate.\n\nMust be in PEM format.\n\n`certFile?``: ``string`\n\nServer certificate file.\n\n`hostname?``: ``string`\n\nA literal IP address or host name that can be resolved to an IP address. If not specified, defaults to `127.0.0.1`.\n\n`port``: ``number`\n\nThe port to connect to.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ConnectTlsOptions](https://doc.deno.land/deno/stable/~/Deno.ConnectTlsOptions)"
- name: Deno.copy
  id: ~/deno.copy
  summary: Copies from src to dst until either EOF (null) is read from src or an error occurs
  description: "# Deno.copy\n\ndeprecated\n\nCopies from `src` to `dst` until either EOF (`null`) is read from `src` or an error occurs. It resolves to the number of bytes copied or rejects with the first error encountered while copying.\n\n@deprecated\n\nUse [`copy`](https://deno.land/std/streams/conversion.ts?s=copy) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.copy` will be removed in the future.\n\n``` typescript\n```\n\nfunction copy(\n\nsrc: [Reader](deno.reader),\n\ndst: [Writer](deno.writer),\n\noptions?: {\n\nbufSize?: number;\n\n},\n\n): Promise\\<number\\>;\n\n`copy(``src``: `[`Reader`](deno.reader)`, ``dst``: `[`Writer`](deno.writer)`, ``options?``: ``{`\n\nbufSize?: number;\n\n}): Promise\\<number\\>\n\n### Parameters\n\n`src``: `[`Reader`](deno.reader)\n\nThe source to copy from\n\n`dst``: `[`Writer`](deno.writer)\n\nThe destination to copy to\n\n`options?``: ``{`\n\nbufSize?: number;\n\n} optional\n\nCan be used to tune size of the buffer. Default size is 32kB\n\n### Return Type\n\n`Promise``<``number``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.copy](https://doc.deno.land/deno/stable/~/Deno.copy)"
- name: Deno.copyFile
  id: ~/deno.copyfile
  summary: Copies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting
  description: "# Deno.copyFile\n\nCopies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting. Fails if target path is a directory or is unwritable.\n\n``` typescript\nawait Deno.copyFile(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n\n``` typescript\n```\n\nfunction copyFile(fromPath: string \\| [URL](url), toPath: string \\| [URL](url)): Promise\\<void\\>;\n\n`copyFile(``fromPath``: ``string`` | `[`URL`](url)`, ``toPath``: ``string`` | `[`URL`](url)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`fromPath``: ``string`` | `[`URL`](url)\n\n`toPath``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.copyFile](https://doc.deno.land/deno/stable/~/Deno.copyFile)"
- name: Deno.copyFileSync
  id: ~/deno.copyfilesync
  summary: Synchronously copies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting
  description: "# Deno.copyFileSync\n\nSynchronously copies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting. Fails if target path is a directory or is unwritable.\n\n``` typescript\nDeno.copyFileSync(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n\n``` typescript\n```\n\nfunction copyFileSync(fromPath: string \\| [URL](url), toPath: string \\| [URL](url)): void;\n\n`copyFileSync(``fromPath``: ``string`` | `[`URL`](url)`, ``toPath``: ``string`` | `[`URL`](url)`)``: ``void`\n\n### Parameters\n\n`fromPath``: ``string`` | `[`URL`](url)\n\n`toPath``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.copyFileSync](https://doc.deno.land/deno/stable/~/Deno.copyFileSync)"
- name: Deno.create
  id: ~/deno.create
  summary: Creates a file if none exists or truncates an existing file and resolves to an instance of Deno.FsFile
  description: "# Deno.create\n\nCreates a file if none exists or truncates an existing file and resolves to an instance of [`Deno.FsFile`](deno#FsFile).\n\n``` typescript\nconst file = await Deno.create(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction create(path: string \\| [URL](url)): Promise\\<[FsFile](deno.fsfile)\\>;\n\n`create(``path``: ``string`` | `[`URL`](url)`)``: ``Promise``<`[`FsFile`](deno.fsfile)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<`[`FsFile`](deno.fsfile)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.create](https://doc.deno.land/deno/stable/~/Deno.create)"
- name: Deno.createSync
  id: ~/deno.createsync
  summary: Creates a file if none exists or truncates an existing file and returns an instance of Deno.FsFile
  description: "# Deno.createSync\n\nCreates a file if none exists or truncates an existing file and returns an instance of [`Deno.FsFile`](deno#FsFile).\n\n``` typescript\nconst file = Deno.createSync(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction createSync(path: string \\| [URL](url)): [FsFile](deno.fsfile);\n\n`createSync(``path``: ``string`` | `[`URL`](url)`)``: `[`FsFile`](deno.fsfile)\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n[`FsFile`](deno.fsfile)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.createSync](https://doc.deno.land/deno/stable/~/Deno.createSync)"
- name: Deno.customInspect
  id: ~/deno.custominspect
  summary: A symbol which can be used as a key for a custom method which will be called when Deno.inspect() is called, or when the object is logged to the console
  description: "# Deno.customInspect\n\ndeprecated\n\nA symbol which can be used as a key for a custom method which will be called when `Deno.inspect()` is called, or when the object is logged to the console.\n\n@deprecated\n\nThis symbol is deprecated since 1.9. Use `Symbol.for(\"Deno.customInspect\")` instead.\n\n``` typescript\nconst customInspect: unique symbol;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.customInspect](https://doc.deno.land/deno/stable/~/Deno.customInspect)"
- name: Deno.cwd
  id: ~/deno.cwd
  summary: Return a string representing the current working directory
  description: "# Deno.cwd\n\nReturn a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic links), `cwd()` may return any one of them.\n\n``` typescript\nconst currentWorkingDirectory = Deno.cwd();\n```\n\nThrows [`Deno.errors.NotFound`](deno#errors_NotFound) if directory not available.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction cwd(): string;\n\n`cwd()``: ``string`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.cwd](https://doc.deno.land/deno/stable/~/Deno.cwd)"
- name: Deno.DirEntry
  id: ~/deno.direntry
  summary: Information about a directory entry returned from Deno.readDir and Deno.readDirSync
  description: "# Deno.DirEntry\n\nInformation about a directory entry returned from [`Deno.readDir`](deno#readDir) and [`Deno.readDirSync`](deno#readDirSync).\n\n``` typescript\ninterface DirEntry {\n```\n\nisDirectory: boolean;\n\nisFile: boolean;\n\nisSymlink: boolean;\n\nname: string;\n\n}\n\n## Properties\n\n`isDirectory``: ``boolean`\n\nTrue if this is info for a regular directory. Mutually exclusive to `DirEntry.isFile` and `DirEntry.isSymlink`.\n\n`isFile``: ``boolean`\n\nTrue if this is info for a regular file. Mutually exclusive to `DirEntry.isDirectory` and `DirEntry.isSymlink`.\n\n`isSymlink``: ``boolean`\n\nTrue if this is info for a symlink. Mutually exclusive to `DirEntry.isFile` and `DirEntry.isDirectory`.\n\n`name``: ``string`\n\nThe file name of the entry. It is just the entity name and does not include the full path.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.DirEntry](https://doc.deno.land/deno/stable/~/Deno.DirEntry)"
- name: Deno.env
  id: ~/deno.env
  summary: An interface containing methods to interact with the process environment variables
  description: "# Deno.env\n\nAn interface containing methods to interact with the process environment variables.\n\n``` typescript\nconst env: Env;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.env](https://doc.deno.land/deno/stable/~/Deno.env)"
- name: Deno.EnvPermissionDescriptor
  id: ~/deno.envpermissiondescriptor
  summary: null
  description: "# Deno.EnvPermissionDescriptor\n\n``` typescript\ninterface EnvPermissionDescriptor {\n```\n\nname: \"env\";\n\nvariable?: string;\n\n}\n\n## Properties\n\n`name``: ``\"env\"`\n\n`variable?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.EnvPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.EnvPermissionDescriptor)"
- name: Deno.errors
  id: ~/deno.errors
  summary: A set of error constructors that are raised by Deno APIs
  description: "# Deno.errors\n\nA set of error constructors that are raised by Deno APIs.\n\nCan be used to provide more specific handling of failures within code which is using Deno APIs. For example, handling attempting to open a file which does not exist:\n\n``` typescript\ntry {\n  const file = await Deno.open(\"./some/file.txt\");\n} catch (error) {\n  if (error instanceof Deno.errors.NotFound) {\n    console.error(\"the file was not found\");\n  } else {\n    // otherwise re-throw\n    throw error;\n  }\n}\n```\n\n## Classes\n\n[TABLE]\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors](https://doc.deno.land/deno/stable/~/Deno.errors)"
- name: Deno.errors.AddrInUse
  id: ~/deno.errors.addrinuse
  summary: Raised when attempting to open a server listener on an address and port that already has a listener
  description: "# Deno.errors.AddrInUse\n\nRaised when attempting to open a server listener on an address and port that already has a listener.\n\n``` typescript\nclass AddrInUse extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.AddrInUse](https://doc.deno.land/deno/stable/~/Deno.errors.AddrInUse)"
- name: Deno.errors.AddrNotAvailable
  id: ~/deno.errors.addrnotavailable
  summary: Raised when the underlying operating system reports an EADDRNOTAVAIL error
  description: "# Deno.errors.AddrNotAvailable\n\nRaised when the underlying operating system reports an `EADDRNOTAVAIL` error.\n\n``` typescript\nclass AddrNotAvailable extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.AddrNotAvailable](https://doc.deno.land/deno/stable/~/Deno.errors.AddrNotAvailable)"
- name: Deno.errors.AlreadyExists
  id: ~/deno.errors.alreadyexists
  summary: Raised when trying to create a resource, like a file, that already exits
  description: "# Deno.errors.AlreadyExists\n\nRaised when trying to create a resource, like a file, that already exits.\n\n``` typescript\nclass AlreadyExists extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.AlreadyExists](https://doc.deno.land/deno/stable/~/Deno.errors.AlreadyExists)"
- name: Deno.errors.BadResource
  id: ~/deno.errors.badresource
  summary: The underlying IO resource is invalid or closed, and so the operation could not be performed
  description: "# Deno.errors.BadResource\n\nThe underlying IO resource is invalid or closed, and so the operation could not be performed.\n\n``` typescript\nclass BadResource extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.BadResource](https://doc.deno.land/deno/stable/~/Deno.errors.BadResource)"
- name: Deno.errors.BrokenPipe
  id: ~/deno.errors.brokenpipe
  summary: Raised when trying to write to a resource and a broken pipe error occurs
  description: "# Deno.errors.BrokenPipe\n\nRaised when trying to write to a resource and a broken pipe error occurs. This can happen when trying to write directly to `stdout` or `stderr` and the operating system is unable to pipe the output for a reason external to the Deno runtime.\n\n``` typescript\nclass BrokenPipe extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.BrokenPipe](https://doc.deno.land/deno/stable/~/Deno.errors.BrokenPipe)"
- name: Deno.errors.Busy
  id: ~/deno.errors.busy
  summary: Raised when the underlying IO resource is not available because it is being awaited on in another block of code
  description: "# Deno.errors.Busy\n\nRaised when the underlying IO resource is not available because it is being awaited on in another block of code.\n\n``` typescript\nclass Busy extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.Busy](https://doc.deno.land/deno/stable/~/Deno.errors.Busy)"
- name: Deno.errors.ConnectionAborted
  id: ~/deno.errors.connectionaborted
  summary: Raised when the underlying operating system reports an ECONNABORTED error
  description: "# Deno.errors.ConnectionAborted\n\nRaised when the underlying operating system reports an `ECONNABORTED` error.\n\n``` typescript\nclass ConnectionAborted extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionAborted](https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionAborted)"
- name: Deno.errors.ConnectionRefused
  id: ~/deno.errors.connectionrefused
  summary: Raised when the underlying operating system reports that a connection to a resource is refused
  description: "# Deno.errors.ConnectionRefused\n\nRaised when the underlying operating system reports that a connection to a resource is refused.\n\n``` typescript\nclass ConnectionRefused extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionRefused](https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionRefused)"
- name: Deno.errors.ConnectionReset
  id: ~/deno.errors.connectionreset
  summary: Raised when the underlying operating system reports that a connection has been reset
  description: "# Deno.errors.ConnectionReset\n\nRaised when the underlying operating system reports that a connection has been reset. With network servers, it can be a *normal* occurrence where a client will abort a connection instead of properly shutting it down.\n\n``` typescript\nclass ConnectionReset extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionReset](https://doc.deno.land/deno/stable/~/Deno.errors.ConnectionReset)"
- name: Deno.errors.Http
  id: ~/deno.errors.http
  summary: Raised in situations where when attempting to load a dynamic import, too many redirects were encountered
  description: "# Deno.errors.Http\n\nRaised in situations where when attempting to load a dynamic import, too many redirects were encountered.\n\n``` typescript\nclass Http extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.Http](https://doc.deno.land/deno/stable/~/Deno.errors.Http)"
- name: Deno.errors.Interrupted
  id: ~/deno.errors.interrupted
  summary: Raised when the underlying operating system reports an EINTR error
  description: "# Deno.errors.Interrupted\n\nRaised when the underlying operating system reports an `EINTR` error. In many cases, this underlying IO error will be handled internally within Deno, or result in an @{link BadResource} error instead.\n\n``` typescript\nclass Interrupted extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.Interrupted](https://doc.deno.land/deno/stable/~/Deno.errors.Interrupted)"
- name: Deno.errors.InvalidData
  id: ~/deno.errors.invaliddata
  summary: Raised when an operation to returns data that is invalid for the operation being performed
  description: "# Deno.errors.InvalidData\n\nRaised when an operation to returns data that is invalid for the operation being performed.\n\n``` typescript\nclass InvalidData extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.InvalidData](https://doc.deno.land/deno/stable/~/Deno.errors.InvalidData)"
- name: Deno.errors.NotConnected
  id: ~/deno.errors.notconnected
  summary: Raised when the underlying operating system reports an ENOTCONN error
  description: "# Deno.errors.NotConnected\n\nRaised when the underlying operating system reports an `ENOTCONN` error.\n\n``` typescript\nclass NotConnected extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.NotConnected](https://doc.deno.land/deno/stable/~/Deno.errors.NotConnected)"
- name: Deno.errors.NotFound
  id: ~/deno.errors.notfound
  summary: Raised when the underlying operating system indicates that the file was not found
  description: "# Deno.errors.NotFound\n\nRaised when the underlying operating system indicates that the file was not found.\n\n``` typescript\nclass NotFound extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.NotFound](https://doc.deno.land/deno/stable/~/Deno.errors.NotFound)"
- name: Deno.errors.NotSupported
  id: ~/deno.errors.notsupported
  summary: Raised when the underlying Deno API is asked to perform a function that is not currently supported
  description: "# Deno.errors.NotSupported\n\nRaised when the underlying Deno API is asked to perform a function that is not currently supported.\n\n``` typescript\nclass NotSupported extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.NotSupported](https://doc.deno.land/deno/stable/~/Deno.errors.NotSupported)"
- name: Deno.errors.PermissionDenied
  id: ~/deno.errors.permissiondenied
  summary: Raised when the underlying operating system indicates the current user which the Deno process is running under does not have the appropriate permissions to a file or resource, or the user did not provide required --allow-* flag
  description: "# Deno.errors.PermissionDenied\n\nRaised when the underlying operating system indicates the current user which the Deno process is running under does not have the appropriate permissions to a file or resource, or the user *did not* provide required `--allow-*` flag.\n\n``` typescript\nclass PermissionDenied extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.PermissionDenied](https://doc.deno.land/deno/stable/~/Deno.errors.PermissionDenied)"
- name: Deno.errors.TimedOut
  id: ~/deno.errors.timedout
  summary: Raised when the underlying operating system reports that an I/O operation has timed out (ETIMEDOUT)
  description: "# Deno.errors.TimedOut\n\nRaised when the underlying operating system reports that an I/O operation has timed out (`ETIMEDOUT`).\n\n``` typescript\nclass TimedOut extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.TimedOut](https://doc.deno.land/deno/stable/~/Deno.errors.TimedOut)"
- name: Deno.errors.UnexpectedEof
  id: ~/deno.errors.unexpectedeof
  summary: Raised when attempting to read bytes from a resource, but the EOF was unexpectedly encountered
  description: "# Deno.errors.UnexpectedEof\n\nRaised when attempting to read bytes from a resource, but the EOF was unexpectedly encountered.\n\n``` typescript\nclass UnexpectedEof extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.UnexpectedEof](https://doc.deno.land/deno/stable/~/Deno.errors.UnexpectedEof)"
- name: Deno.errors.WriteZero
  id: ~/deno.errors.writezero
  summary: Raised when expecting to write to a IO buffer resulted in zero bytes being written
  description: "# Deno.errors.WriteZero\n\nRaised when expecting to write to a IO buffer resulted in zero bytes being written.\n\n``` typescript\nclass WriteZero extends Error { }\n```\n\n## Extends\n\n`Error`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.errors.WriteZero](https://doc.deno.land/deno/stable/~/Deno.errors.WriteZero)"
- name: Deno.execPath
  id: ~/deno.execpath
  summary: Returns the path to the current deno executable
  description: "# Deno.execPath\n\nReturns the path to the current deno executable.\n\n``` typescript\nconsole.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction execPath(): string;\n\n`execPath()``: ``string`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.execPath](https://doc.deno.land/deno/stable/~/Deno.execPath)"
- name: Deno.exit
  id: ~/deno.exit
  summary: Exit the Deno process with optional exit code
  description: "# Deno.exit\n\nExit the Deno process with optional exit code.\n\nIf no exit code is supplied then Deno will exit with return code of `0`.\n\nIn worker contexts this is an alias to `self.close();`.\n\n``` typescript\nDeno.exit(5);\n```\n\n``` typescript\n```\n\nfunction exit(code?: number): never;\n\n`exit(``code?``: ``number``)``: ``never`\n\n### Parameters\n\n`code?``: ``number`` ``optional`\n\n### Return Type\n\n`never`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.exit](https://doc.deno.land/deno/stable/~/Deno.exit)"
- name: Deno.fdatasync
  id: ~/deno.fdatasync
  summary: Flushes any pending data operations of the given file stream to disk
  description: "# Deno.fdatasync\n\nFlushes any pending data operations of the given file stream to disk.\n\n``` typescript\nconst file = await Deno.open(\n \"my_file.txt\",\n { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.fdatasync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n```\n\n``` typescript\n```\n\nfunction fdatasync(rid: number): Promise\\<void\\>;\n\n`fdatasync(``rid``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fdatasync](https://doc.deno.land/deno/stable/~/Deno.fdatasync)"
- name: Deno.fdatasyncSync
  id: ~/deno.fdatasyncsync
  summary: Synchronously flushes any pending data operations of the given file stream to disk
  description: "# Deno.fdatasyncSync\n\nSynchronously flushes any pending data operations of the given file stream to disk.\n\n``` typescript\nconst file = Deno.openSync(\n \"my_file.txt\",\n { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.fdatasyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // Hello World\n```\n\n``` typescript\n```\n\nfunction fdatasyncSync(rid: number): void;\n\n`fdatasyncSync(``rid``: ``number``)``: ``void`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fdatasyncSync](https://doc.deno.land/deno/stable/~/Deno.fdatasyncSync)"
- name: Deno.FfiPermissionDescriptor
  id: ~/deno.ffipermissiondescriptor
  summary: null
  description: "# Deno.FfiPermissionDescriptor\n\n``` typescript\ninterface FfiPermissionDescriptor {\n```\n\nname: \"ffi\";\n\npath?: string \\| [URL](url);\n\n}\n\n## Properties\n\n`name``: ``\"ffi\"`\n\n`path?``: ``string`` | `[`URL`](url)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FfiPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.FfiPermissionDescriptor)"
- name: Deno.File
  id: ~/deno.file
  summary: The Deno abstraction for reading and writing files
  description: "# Deno.File\n\ndeprecated\n\nThe Deno abstraction for reading and writing files.\n\n@deprecated\n\nUse [`Deno.FsFile`](deno#FsFile) instead. `Deno.File` will be removed in the future.\n\n``` typescript\nconst File: FsFile;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.File](https://doc.deno.land/deno/stable/~/Deno.File)"
- name: Deno.FileInfo
  id: ~/deno.fileinfo
  summary: Provides information about a file and is returned by Deno.stat, Deno.lstat, Deno.statSync, and Deno.lstatSync or from calling stat() and statSync() on an Deno.FsFile instance
  description: "# Deno.FileInfo\n\nProvides information about a file and is returned by [`Deno.stat`](deno#stat), [`Deno.lstat`](deno#lstat), [`Deno.statSync`](deno#statSync), and [`Deno.lstatSync`](deno#lstatSync) or from calling `stat()` and `statSync()` on an [`Deno.FsFile`](deno#FsFile) instance.\n\n``` typescript\ninterface FileInfo {\n```\n\natime: Date \\| null;\n\nbirthtime: Date \\| null;\n\nblksize: number \\| null;\n\nblocks: number \\| null;\n\ndev: number \\| null;\n\ngid: number \\| null;\n\nino: number \\| null;\n\nisDirectory: boolean;\n\nisFile: boolean;\n\nisSymlink: boolean;\n\nmode: number \\| null;\n\nmtime: Date \\| null;\n\nnlink: number \\| null;\n\nrdev: number \\| null;\n\nsize: number;\n\nuid: number \\| null;\n\n}\n\n## Properties\n\n`atime``: ``Date`` | ``null`\n\nThe last access time of the file. This corresponds to the `atime` field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not be available on all platforms.\n\n`birthtime``: ``Date`` | ``null`\n\nThe creation time of the file. This corresponds to the `birthtime` field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may not be available on all platforms.\n\n`blksize``: ``number`` | ``null`\n\nBlocksize for filesystem I/O.\n\n*Linux/Mac OS only.*\n\n`blocks``: ``number`` | ``null`\n\nNumber of blocks allocated to the file, in 512-byte units.\n\n*Linux/Mac OS only.*\n\n`dev``: ``number`` | ``null`\n\nID of the device containing the file.\n\n*Linux/Mac OS only.*\n\n`gid``: ``number`` | ``null`\n\nGroup ID of the owner of this file.\n\n*Linux/Mac OS only.*\n\n`ino``: ``number`` | ``null`\n\nInode number.\n\n*Linux/Mac OS only.*\n\n`isDirectory``: ``boolean`\n\nTrue if this is info for a regular directory. Mutually exclusive to `FileInfo.isFile` and `FileInfo.isSymlink`.\n\n`isFile``: ``boolean`\n\nTrue if this is info for a regular file. Mutually exclusive to `FileInfo.isDirectory` and `FileInfo.isSymlink`.\n\n`isSymlink``: ``boolean`\n\nTrue if this is info for a symlink. Mutually exclusive to `FileInfo.isFile` and `FileInfo.isDirectory`.\n\n`mode``: ``number`` | ``null`\n\n**UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\nThe underlying raw `st_mode` bits that contain the standard Unix permissions for this file/directory.\n\n`mtime``: ``Date`` | ``null`\n\nThe last modification time of the file. This corresponds to the `mtime` field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This may not be available on all platforms.\n\n`nlink``: ``number`` | ``null`\n\nNumber of hard links pointing to this file.\n\n*Linux/Mac OS only.*\n\n`rdev``: ``number`` | ``null`\n\nDevice ID of this file.\n\n*Linux/Mac OS only.*\n\n`size``: ``number`\n\nThe size of the file, in bytes.\n\n`uid``: ``number`` | ``null`\n\nUser ID of the owner of this file.\n\n*Linux/Mac OS only.*\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FileInfo](https://doc.deno.land/deno/stable/~/Deno.FileInfo)"
- name: Deno.FsEvent
  id: ~/deno.fsevent
  summary: Represents a unique file system event yielded by a Deno.FsWatcher
  description: "# Deno.FsEvent\n\nRepresents a unique file system event yielded by a [`Deno.FsWatcher`](deno#FsWatcher).\n\n``` typescript\ninterface FsEvent {\n```\n\nflag?: [FsEventFlag](deno.fseventflag);\n\nkind:\n\n\\| \"any\"\n\n\\| \"access\"\n\n\\| \"create\"\n\n\\| \"modify\"\n\n\\| \"remove\"\n\n\\| \"other\";\n\npaths: string\\[\\];\n\n}\n\n## Properties\n\n`flag?``: `[`FsEventFlag`](deno.fseventflag)\n\nAny additional flags associated with the event.\n\n`kind``: ``\"any\"`` | ``\"access\"`` | ``\"create\"`` | ``\"modify\"`` | ``\"remove\"`` | ``\"other\"`\n\nThe kind/type of the file system event.\n\n`paths``: ``string``[]`\n\nAn array of paths that are associated with the file system event.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FsEvent](https://doc.deno.land/deno/stable/~/Deno.FsEvent)"
- name: Deno.FsEventFlag
  id: ~/deno.fseventflag
  summary: Additional information for FsEvent objects with the "other" kind
  description: "# Deno.FsEventFlag\n\nAdditional information for FsEvent objects with the \"other\" kind.\n\n- `\"rescan\"`: rescan notices indicate either a lapse in the events or a change in the filesystem such that events received so far can no longer be relied on to represent the state of the filesystem now. An application that simply reacts to file changes may not care about this. An application that keeps an in-memory representation of the filesystem will need to care, and will need to refresh that representation directly from the filesystem.\n\n``` typescript\ntype FsEventFlag = \"rescan\";\n```\n\n## Type\n\n`\"rescan\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FsEventFlag](https://doc.deno.land/deno/stable/~/Deno.FsEventFlag)"
- name: Deno.FsFile
  id: ~/deno.fsfile
  summary: The Deno abstraction for reading and writing files
  description: "# Deno.FsFile\n\nThe Deno abstraction for reading and writing files.\n\nThis is the most straight forward way of handling files within Deno and is recommended over using the discreet functions within the `Deno` namespace.\n\n``` typescript\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true });\nconst fileInfo = await file.stat();\nif (fileInfo.isFile) {\n  const buf = new Uint8Array(100);\n  const numberOfBytesRead = await file.read(buf); // 11 bytes\n  const text = new TextDecoder().decode(buf);  // \"hello world\"\n}\nfile.close();\n```\n\n``` typescript\nclass FsFile implements Reader, ReaderSync, Writer, WriterSync, Seeker, SeekerSync, Closer {\n```\n\nconstructor(rid: number);\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nreadonly rid: number;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\nclose(): void;\n\nread(p: Uint8Array): Promise\\<number \\| null\\>;\n\nreadSync(p: Uint8Array): number \\| null;\n\nseek(offset: number, whence: [SeekMode](deno.seekmode)): Promise\\<number\\>;\n\nseekSync(offset: number, whence: [SeekMode](deno.seekmode)): number;\n\nstat(): Promise\\<[FileInfo](deno.fileinfo)\\>;\n\nstatSync(): [FileInfo](deno.fileinfo);\n\ntruncate(len?: number): Promise\\<void\\>;\n\ntruncateSync(len?: number): void;\n\nwrite(p: Uint8Array): Promise\\<number\\>;\n\nwriteSync(p: Uint8Array): number;\n\n}\n\n## Implements\n\n[`Reader`](deno.reader)\n\n[`ReaderSync`](deno.readersync)\n\n[`Writer`](deno.writer)\n\n[`WriterSync`](deno.writersync)\n\n[`Seeker`](deno.seeker)\n\n[`SeekerSync`](deno.seekersync)\n\n[`Closer`](deno.closer)\n\n## Constructors\n\n`new ``FsFile(``rid``: ``number``)`\n\nThe constructor which takes a resource ID. Generally `FsFile` should not be constructed directly. Instead use [`Deno.open`](deno#open) or [`Deno.openSync`](deno#openSync) to create a new instance of `FsFile`.\n\n## Properties\n\n`readable``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\nA [`ReadableStream`](readablestream) instance representing to the byte contents of the file. This makes it easy to interoperate with other web streams based APIs.\n\n``` typescript\nconst file = await Deno.open(\"my_file.txt\", { read: true });\nconst decoder = new TextDecoder();\nfor await (const chunk of file.readable) {\n  console.log(decoder.decode(chunk));\n}\nfile.close();\n```\n\n`rid``: ``number`\n\nThe resource ID associated with the file instance. The resource ID should be considered an opaque reference to resource.\n\n`writable``: `[`WritableStream`](writablestream)`<``Uint8Array``>`\n\nA [`WritableStream`](writablestream) instance to write the contents of the file. This makes it easy to interoperate with other web streams based APIs.\n\n``` typescript\nconst items = [\"hello\", \"world\"];\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nconst encoder = new TextEncoder();\nconst writer = file.writable.getWriter();\nfor (const item of items) {\n  await writer.write(encoder.encode(item));\n}\nfile.close();\n```\n\n## Methods\n\n`close()``: ``void`\n\nClose the file. Closing a file when you are finished with it is important to avoid leaking resources.\n\n``` typescript\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nfile.close();\n```\n\n`read(``p``: ``Uint8Array``)``: ``Promise``<``number`` | ``null``>`\n\nRead the file into an array buffer (`p`).\n\nResolves to either the number of bytes read during the operation or EOF (`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n``` typescript\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await file.read(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nfile.close();\n```\n\n`readSync(``p``: ``Uint8Array``)``: ``number`` | ``null`\n\nSynchronously read from the file into an array buffer (`p`).\n\nReturns either the number of bytes read during the operation or EOF (`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n``` typescript\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = file.readSync(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nfile.close();\n```\n\n`seek(``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``Promise``<``number``>`\n\nSeek to the given `offset` under mode given by `whence`. The call resolves to the new position within the resource (bytes from the start).\n\n``` typescript\n// Given file pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await file.seek(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n``` typescript\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n```\n\n`seekSync(``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``number`\n\nSynchronously seek to the given `offset` under mode given by `whence`. The new position within the resource (bytes from the start) is returned.\n\n``` typescript\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n``` typescript\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\nfile.close();\n```\n\n`stat()``: ``Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\nResolves to a [`Deno.FileInfo`](deno#FileInfo) for the file.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = await Deno.open(\"hello.txt\");\nconst fileInfo = await file.stat();\nassert(fileInfo.isFile);\nfile.close();\n```\n\n`statSync()``: `[`FileInfo`](deno.fileinfo)\n\nSynchronously returns a [`Deno.FileInfo`](deno#FileInfo) for the file.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = Deno.openSync(\"hello.txt\")\nconst fileInfo = file.statSync();\nassert(fileInfo.isFile);\nfile.close();\n```\n\n`truncate(``len?``: ``number``)``: ``Promise``<``void``>`\n\nTruncates (or extends) the file to reach the specified `len`. If `len` is not specified, then the entire file contents are truncated.\n\n### Truncate the entire file\n\n``` typescript\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate();\nfile.close();\n```\n\n### Truncate part of the file\n\n``` typescript\n// if \"my_file.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate(7);\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\nfile.close();\n```\n\n`truncateSync(``len?``: ``number``)``: ``void`\n\nSynchronously truncates (or extends) the file to reach the specified `len`. If `len` is not specified, then the entire file contents are truncated.\n\n### Truncate the entire file\n\n``` typescript\nconst file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync();\nfile.close();\n```\n\n### Truncate part of the file\n\n``` typescript\n// if \"my_file.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync(7);\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\nfile.close();\n```\n\n`write(``p``: ``Uint8Array``)``: ``Promise``<``number``>`\n\nWrite the contents of the array buffer (`p`) to the file.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single call.**\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await file.write(data); // 11\nfile.close();\n```\n\n`writeSync(``p``: ``Uint8Array``)``: ``number`\n\nSynchronously write the contents of the array buffer (`p`) to the file.\n\nReturns the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single call.**\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = file.writeSync(data); // 11\nfile.close();\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FsFile](https://doc.deno.land/deno/stable/~/Deno.FsFile)"
- name: Deno.fstat
  id: ~/deno.fstat
  summary: Returns a Deno.FileInfo for the given file stream
  description: "# Deno.fstat\n\nReturns a `Deno.FileInfo` for the given file stream.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst file = await Deno.open(\"file.txt\", { read: true });\nconst fileInfo = await Deno.fstat(file.rid);\nassert(fileInfo.isFile);\n```\n\n``` typescript\n```\n\nfunction fstat(rid: number): Promise\\<[FileInfo](deno.fileinfo)\\>;\n\n`fstat(``rid``: ``number``)``: ``Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fstat](https://doc.deno.land/deno/stable/~/Deno.fstat)"
- name: Deno.fstatSync
  id: ~/deno.fstatsync
  summary: Synchronously returns a Deno.FileInfo for the given file stream
  description: "# Deno.fstatSync\n\nSynchronously returns a `Deno.FileInfo` for the given file stream.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst file = Deno.openSync(\"file.txt\", { read: true });\nconst fileInfo = Deno.fstatSync(file.rid);\nassert(fileInfo.isFile);\n```\n\n``` typescript\n```\n\nfunction fstatSync(rid: number): [FileInfo](deno.fileinfo);\n\n`fstatSync(``rid``: ``number``)``: `[`FileInfo`](deno.fileinfo)\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n[`FileInfo`](deno.fileinfo)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fstatSync](https://doc.deno.land/deno/stable/~/Deno.fstatSync)"
- name: Deno.FsWatcher
  id: ~/deno.fswatcher
  summary: Returned by Deno.watchFs
  description: "# Deno.FsWatcher\n\nReturned by [`Deno.watchFs`](deno#watchFs). It is an async iterator yielding up system events. To stop watching the file system by calling `.close()` method.\n\n``` typescript\ninterface FsWatcher  extends AsyncIterable<FsEvent> {\n```\n\nreadonly rid: number;\n\n\\[\\[Symbol.asyncIterator\\]\\](): AsyncIterableIterator\\<[FsEvent](deno.fsevent)\\>;\n\nclose(): void;\n\nreturn?(value?: any): Promise\\<IteratorResult\\<[FsEvent](deno.fsevent)\\>\\>;\n\n}\n\n## Extends\n\n`AsyncIterable``<`[`FsEvent`](deno.fsevent)`>`\n\n## Properties\n\n`readonly ``rid``: ``number`\n\nThe resource id.\n\n## Methods\n\n`[[Symbol.asyncIterator]]()``: ``AsyncIterableIterator``<`[`FsEvent`](deno.fsevent)`>`\n\n`close()``: ``void`\n\nStops watching the file system and closes the watcher resource.\n\n`return?(``value?``: ``any``)``: ``Promise``<``IteratorResult``<`[`FsEvent`](deno.fsevent)`>``>`\n\nStops watching the file system and closes the watcher resource.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.FsWatcher](https://doc.deno.land/deno/stable/~/Deno.FsWatcher)"
- name: Deno.fsync
  id: ~/deno.fsync
  summary: Flushes any pending data and metadata operations of the given file stream to disk
  description: "# Deno.fsync\n\nFlushes any pending data and metadata operations of the given file stream to disk.\n\n``` typescript\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 1);\nawait Deno.fsync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n```\n\n``` typescript\n```\n\nfunction fsync(rid: number): Promise\\<void\\>;\n\n`fsync(``rid``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fsync](https://doc.deno.land/deno/stable/~/Deno.fsync)"
- name: Deno.fsyncSync
  id: ~/deno.fsyncsync
  summary: Synchronously flushes any pending data and metadata operations of the given file stream to disk
  description: "# Deno.fsyncSync\n\nSynchronously flushes any pending data and metadata operations of the given file stream to disk.\n\n``` typescript\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 1);\nDeno.fsyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n```\n\n``` typescript\n```\n\nfunction fsyncSync(rid: number): void;\n\n`fsyncSync(``rid``: ``number``)``: ``void`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.fsyncSync](https://doc.deno.land/deno/stable/~/Deno.fsyncSync)"
- name: Deno.ftruncate
  id: ~/deno.ftruncate
  summary: Truncates or extends the specified file stream, to reach the specified len
  description: "# Deno.ftruncate\n\nTruncates or extends the specified file stream, to reach the specified `len`.\n\nIf `len` is not specified then the entire file contents are truncated as if len was set to 0.\n\nIf the file previously was larger than this new length, the extra data is lost.\n\nIf the file previously was shorter, it is extended, and the extended part reads as null bytes ('\\0').\n\n``` typescript\n// truncate the entire file\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.ftruncate(file.rid);\n```\n\n``` typescript\n// truncate part of the file\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 7);\nconst data = new Uint8Array(32);\nawait Deno.read(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```\n\n``` typescript\n```\n\nfunction ftruncate(rid: number, len?: number): Promise\\<void\\>;\n\n`ftruncate(``rid``: ``number``, ``len?``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`rid``: ``number`\n\n`len?``: ``number`` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ftruncate](https://doc.deno.land/deno/stable/~/Deno.ftruncate)"
- name: Deno.ftruncateSync
  id: ~/deno.ftruncatesync
  summary: Synchronously truncates or extends the specified file stream, to reach the specified len
  description: "# Deno.ftruncateSync\n\nSynchronously truncates or extends the specified file stream, to reach the specified `len`.\n\nIf `len` is not specified then the entire file contents are truncated as if len was set to 0.\n\nif the file previously was larger than this new length, the extra data is lost.\n\nif the file previously was shorter, it is extended, and the extended part reads as null bytes ('\\0').\n\n``` typescript\n// truncate the entire file\nconst file = Deno.openSync(\"my_file.txt\", { read: true, write: true, truncate: true, create: true });\nDeno.ftruncateSync(file.rid);\n```\n\n``` typescript\n// truncate part of the file\nconst file = Deno.openSync(\"my_file.txt\", { read: true, write: true, create: true });\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 7);\nDeno.seekSync(file.rid, 0, Deno.SeekMode.Start);\nconst data = new Uint8Array(32);\nDeno.readSync(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```\n\n``` typescript\n```\n\nfunction ftruncateSync(rid: number, len?: number): void;\n\n`ftruncateSync(``rid``: ``number``, ``len?``: ``number``)``: ``void`\n\n### Parameters\n\n`rid``: ``number`\n\n`len?``: ``number`` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ftruncateSync](https://doc.deno.land/deno/stable/~/Deno.ftruncateSync)"
- name: Deno.hostname
  id: ~/deno.hostname
  summary: Get the hostname of the machine the Deno process is running on
  description: "# Deno.hostname\n\nGet the `hostname` of the machine the Deno process is running on.\n\n``` typescript\nconsole.log(Deno.hostname());\n```\n\nRequires `allow-sys` permission.\n\n``` typescript\n```\n\nfunction hostname(): string;\n\n`hostname()``: ``string`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.hostname](https://doc.deno.land/deno/stable/~/Deno.hostname)"
- name: Deno.HrtimePermissionDescriptor
  id: ~/deno.hrtimepermissiondescriptor
  summary: null
  description: "# Deno.HrtimePermissionDescriptor\n\n``` typescript\ninterface HrtimePermissionDescriptor {\n```\n\nname: \"hrtime\";\n\n}\n\n## Properties\n\n`name``: ``\"hrtime\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.HrtimePermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.HrtimePermissionDescriptor)"
- name: Deno.HttpConn
  id: ~/deno.httpconn
  summary: null
  description: "# Deno.HttpConn\n\n``` typescript\ninterface HttpConn  extends AsyncIterable<RequestEvent> {\n```\n\nreadonly rid: number;\n\nclose(): void;\n\nnextRequest(): Promise\\<[RequestEvent](deno.requestevent) \\| null\\>;\n\n}\n\n## Extends\n\n`AsyncIterable``<`[`RequestEvent`](deno.requestevent)`>`\n\n## Properties\n\n`readonly ``rid``: ``number`\n\n## Methods\n\n`close()``: ``void`\n\n`nextRequest()``: ``Promise``<`[`RequestEvent`](deno.requestevent)` | ``null``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.HttpConn](https://doc.deno.land/deno/stable/~/Deno.HttpConn)"
- name: Deno.inspect
  id: ~/deno.inspect
  summary: Converts the input into a string that has the same format as printed by console.log()
  description: "# Deno.inspect\n\nConverts the input into a string that has the same format as printed by `console.log()`.\n\n``` typescript\nconst obj = {\n  a: 10,\n  b: \"hello\",\n};\nconst objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\nconsole.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n```\n\nA custom inspect functions can be registered on objects, via the symbol `Symbol.for(\"Deno.customInspect\")`, to control and customize the output of `inspect()` or when using `console` logging:\n\n``` typescript\nclass A {\n  x = 10;\n  y = \"hello\";\n  [Symbol.for(\"Deno.customInspect\")]() {\n    return `x=${this.x}, y=${this.y}`;\n  }\n}\n\nconst inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\nconsole.log(inStringFormat);  // prints \"x=10, y=hello\"\n```\n\nA depth can be specified by using the `depth` option:\n\n``` typescript\nDeno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n```\n\n``` typescript\n```\n\nfunction inspect(value: unknown, options?: [InspectOptions](deno.inspectoptions)): string;\n\n`inspect(``value``: ``unknown``, ``options?``: `[`InspectOptions`](deno.inspectoptions)`)``: ``string`\n\n### Parameters\n\n`value``: ``unknown`\n\n`options?``: `[`InspectOptions`](deno.inspectoptions)` ``optional`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.inspect](https://doc.deno.land/deno/stable/~/Deno.inspect)"
- name: Deno.InspectOptions
  id: ~/deno.inspectoptions
  summary: Option which can be specified when performing Deno.inspect
  description: "# Deno.InspectOptions\n\nOption which can be specified when performing [`Deno.inspect`](deno#inspect).\n\n``` typescript\ninterface InspectOptions {\n```\n\ncolors?: boolean;\n\ncompact?: boolean;\n\ndepth?: number;\n\ngetters?: boolean;\n\niterableLimit?: number;\n\nshowHidden?: boolean;\n\nshowProxy?: boolean;\n\nsorted?: boolean;\n\nstrAbbreviateSize?: number;\n\ntrailingComma?: boolean;\n\n}\n\n## Properties\n\n`colors?``: ``boolean`\n\nStylize output with ANSI colors. Defaults to `false`.\n\n`compact?``: ``boolean`\n\nTry to fit more than one entry of a collection on the same line. Defaults to `true`.\n\n`depth?``: ``number`\n\nTraversal depth for nested objects. Defaults to `4`.\n\n`getters?``: ``boolean`\n\n- Evaluate the result of calling getters. Defaults to `false`.\n\n`iterableLimit?``: ``number`\n\nThe maximum number of iterable entries to print. Defaults to `100`.\n\n`showHidden?``: ``boolean`\n\nShow an object's non-enumerable properties. Defaults to `false`.\n\n`showProxy?``: ``boolean`\n\nShow a Proxy's target and handler. Defaults to `false`.\n\n`sorted?``: ``boolean`\n\nSort Object, Set and Map entries by key. Defaults to `false`.\n\n`strAbbreviateSize?``: ``number`\n\nThe maximum length of a string before it is truncated with an ellipsis.\n\n`trailingComma?``: ``boolean`\n\nAdd a trailing comma for multiline collections. Defaults to `false`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.InspectOptions](https://doc.deno.land/deno/stable/~/Deno.InspectOptions)"
- name: Deno.isatty
  id: ~/deno.isatty
  summary: Check if a given resource id (rid) is a TTY (a terminal)
  description: "# Deno.isatty\n\nCheck if a given resource id (`rid`) is a TTY (a terminal).\n\n``` typescript\n// This example is system and context specific\nconst nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\nconst ttyRid = Deno.openSync(\"/dev/tty6\").rid;\nconsole.log(Deno.isatty(nonTTYRid)); // false\nconsole.log(Deno.isatty(ttyRid)); // true\nDeno.close(nonTTYRid);\nDeno.close(ttyRid);\n```\n\n``` typescript\n```\n\nfunction isatty(rid: number): boolean;\n\n`isatty(``rid``: ``number``)``: ``boolean`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.isatty](https://doc.deno.land/deno/stable/~/Deno.isatty)"
- name: Deno.iter
  id: ~/deno.iter
  summary: Turns a Reader, r, into an async iterator
  description: "# Deno.iter\n\ndeprecated\n\nTurns a Reader, `r`, into an async iterator.\n\n@deprecated\n\nUse [`iterateReader`](https://deno.land/std/streams/conversion.ts?s=iterateReader) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.iter` will be removed in the future.\n\n``` typescript\n```\n\nfunction iter(r: [Reader](deno.reader), options?: {\n\nbufSize?: number;\n\n}): AsyncIterableIterator\\<Uint8Array\\>;\n\n`iter(``r``: `[`Reader`](deno.reader)`, ``options?``: ``{`\n\nbufSize?: number;\n\n}): AsyncIterableIterator\\<Uint8Array\\>\n\n### Parameters\n\n`r``: `[`Reader`](deno.reader)\n\n`options?``: ``{`\n\nbufSize?: number;\n\n} optional\n\n### Return Type\n\n`AsyncIterableIterator``<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.iter](https://doc.deno.land/deno/stable/~/Deno.iter)"
- name: Deno.iterSync
  id: ~/deno.itersync
  summary: Turns a ReaderSync, r, into an iterator
  description: "# Deno.iterSync\n\ndeprecated\n\nTurns a ReaderSync, `r`, into an iterator.\n\n@deprecated\n\nUse [`iterateReaderSync`](https://deno.land/std/streams/conversion.ts?s=iterateReaderSync) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.iterSync` will be removed in the future.\n\n``` typescript\n```\n\nfunction iterSync(r: [ReaderSync](deno.readersync), options?: {\n\nbufSize?: number;\n\n}): IterableIterator\\<Uint8Array\\>;\n\n`iterSync(``r``: `[`ReaderSync`](deno.readersync)`, ``options?``: ``{`\n\nbufSize?: number;\n\n}): IterableIterator\\<Uint8Array\\>\n\n### Parameters\n\n`r``: `[`ReaderSync`](deno.readersync)\n\n`options?``: ``{`\n\nbufSize?: number;\n\n} optional\n\n### Return Type\n\n`IterableIterator``<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.iterSync](https://doc.deno.land/deno/stable/~/Deno.iterSync)"
- name: Deno.kill
  id: ~/deno.kill
  summary: Send a signal to process under given pid
  description: "# Deno.kill\n\nSend a signal to process under given `pid`.\n\nIf `pid` is negative, the signal will be sent to the process group identified by `pid`. An error will be thrown if a negative `pid` is used on Windows.\n\n``` typescript\nconst p = Deno.run({\n  cmd: [\"sleep\", \"10000\"]\n});\n\nDeno.kill(p.pid, \"SIGINT\");\n```\n\nRequires `allow-run` permission.\n\n``` typescript\n```\n\nfunction kill(pid: number, signo: [Signal](deno.signal)): void;\n\n`kill(``pid``: ``number``, ``signo``: `[`Signal`](deno.signal)`)``: ``void`\n\n### Parameters\n\n`pid``: ``number`\n\n`signo``: `[`Signal`](deno.signal)\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.kill](https://doc.deno.land/deno/stable/~/Deno.kill)"
- name: Deno.link
  id: ~/deno.link
  summary: Creates newpath as a hard link to oldpath
  description: "# Deno.link\n\nCreates `newpath` as a hard link to `oldpath`.\n\n``` typescript\nawait Deno.link(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction link(oldpath: string, newpath: string): Promise\\<void\\>;\n\n`link(``oldpath``: ``string``, ``newpath``: ``string``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`oldpath``: ``string`\n\n`newpath``: ``string`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.link](https://doc.deno.land/deno/stable/~/Deno.link)"
- name: Deno.linkSync
  id: ~/deno.linksync
  summary: Synchronously creates newpath as a hard link to oldpath
  description: "# Deno.linkSync\n\nSynchronously creates `newpath` as a hard link to `oldpath`.\n\n``` typescript\nDeno.linkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction linkSync(oldpath: string, newpath: string): void;\n\n`linkSync(``oldpath``: ``string``, ``newpath``: ``string``)``: ``void`\n\n### Parameters\n\n`oldpath``: ``string`\n\n`newpath``: ``string`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.linkSync](https://doc.deno.land/deno/stable/~/Deno.linkSync)"
- name: Deno.listen
  id: ~/deno.listen
  summary: Listen announces on the local transport address
  description: "# Deno.listen\n\nListen announces on the local transport address.\n\n``` typescript\nconst listener1 = Deno.listen({ port: 80 })\nconst listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\nconst listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\nconst listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission.\n\n``` typescript\n```\n\nfunction listen(options: [ListenOptions](deno.listenoptions) & {\n\ntransport?: \"tcp\";\n\n}): [Listener](deno.listener);\n\n`listen(``options``: `[`ListenOptions`](deno.listenoptions)` & ``{`\n\ntransport?: \"tcp\";\n\n}): [Listener](deno.listener)\n\n### Parameters\n\n`options``: `[`ListenOptions`](deno.listenoptions)` & ``{`\n\ntransport?: \"tcp\";\n\n}\n\n### Return Type\n\n[`Listener`](deno.listener)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.listen](https://doc.deno.land/deno/stable/~/Deno.listen)"
- name: Deno.Listener
  id: ~/deno.listener
  summary: A generic network listener for stream-oriented protocols
  description: "# Deno.Listener\n\nA generic network listener for stream-oriented protocols.\n\n``` typescript\ninterface Listener  extends AsyncIterable<Conn> {\n```\n\nreadonly addr: [Addr](deno.addr);\n\nreadonly rid: number;\n\n\\[\\[Symbol.asyncIterator\\]\\](): AsyncIterableIterator\\<[Conn](deno.conn)\\>;\n\naccept(): Promise\\<[Conn](deno.conn)\\>;\n\nclose(): void;\n\n}\n\n## Extends\n\n`AsyncIterable``<`[`Conn`](deno.conn)`>`\n\n## Properties\n\n`readonly ``addr``: `[`Addr`](deno.addr)\n\nReturn the address of the `Listener`.\n\n`readonly ``rid``: ``number`\n\nReturn the rid of the `Listener`.\n\n## Methods\n\n`[[Symbol.asyncIterator]]()``: ``AsyncIterableIterator``<`[`Conn`](deno.conn)`>`\n\n`accept()``: ``Promise``<`[`Conn`](deno.conn)`>`\n\nWaits for and resolves to the next connection to the `Listener`.\n\n`close()``: ``void`\n\nClose closes the listener. Any pending accept promises will be rejected with errors.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Listener](https://doc.deno.land/deno/stable/~/Deno.Listener)"
- name: Deno.ListenOptions
  id: ~/deno.listenoptions
  summary: A literal IP address or host name that can be resolved to an IP address
  description: "# Deno.ListenOptions\n\n``` typescript\ninterface ListenOptions {\n```\n\nhostname?: string;\n\nport: number;\n\n}\n\n## Properties\n\n`hostname?``: ``string`\n\nA literal IP address or host name that can be resolved to an IP address. If not specified, defaults to `0.0.0.0`.\n\n**Note about `0.0.0.0`** While listening `0.0.0.0` works on all platforms, the browsers on Windows don't work with the address `0.0.0.0`. You should show the message like `server running on localhost:8080` instead of `server running on 0.0.0.0:8080` if your program supports Windows.\n\n`port``: ``number`\n\nThe port to listen on.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ListenOptions](https://doc.deno.land/deno/stable/~/Deno.ListenOptions)"
- name: Deno.listenTls
  id: ~/deno.listentls
  summary: Listen announces on the local transport address over TLS (transport layer security)
  description: "# Deno.listenTls\n\nListen announces on the local transport address over TLS (transport layer security).\n\n``` typescript\nconst lstnr = Deno.listenTls({ port: 443, certFile: \"./server.crt\", keyFile: \"./server.key\" });\n```\n\nRequires `allow-net` permission.\n\n``` typescript\n```\n\nfunction listenTls(options: [ListenTlsOptions](deno.listentlsoptions)): [TlsListener](deno.tlslistener);\n\n`listenTls(``options``: `[`ListenTlsOptions`](deno.listentlsoptions)`)``: `[`TlsListener`](deno.tlslistener)\n\n### Parameters\n\n`options``: `[`ListenTlsOptions`](deno.listentlsoptions)\n\n### Return Type\n\n[`TlsListener`](deno.tlslistener)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.listenTls](https://doc.deno.land/deno/stable/~/Deno.listenTls)"
- name: Deno.ListenTlsOptions
  id: ~/deno.listentlsoptions
  summary: Path to a file containing a PEM formatted CA certificate
  description: "# Deno.ListenTlsOptions\n\n``` typescript\ninterface ListenTlsOptions  extends ListenOptions {\n```\n\ncert?: string;\n\ncertFile?: string;\n\nkey?: string;\n\nkeyFile?: string;\n\ntransport?: \"tcp\";\n\n}\n\n## Extends\n\n[`ListenOptions`](deno.listenoptions)\n\n## Properties\n\n`cert?``: ``string`\n\nCert chain in PEM format\n\n`certFile?``: ``string`\n\nPath to a file containing a PEM formatted CA certificate. Requires `--allow-read`.\n\n`key?``: ``string`\n\nServer private key in PEM format\n\n`keyFile?``: ``string`\n\nServer private key file. Requires `--allow-read`.\n\n`transport?``: ``\"tcp\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ListenTlsOptions](https://doc.deno.land/deno/stable/~/Deno.ListenTlsOptions)"
- name: Deno.lstat
  id: ~/deno.lstat
  summary: Resolves to a Deno.FileInfo for the specified path
  description: "# Deno.lstat\n\nResolves to a [`Deno.FileInfo`](deno#FileInfo) for the specified `path`. If `path` is a symlink, information for the symlink will be returned instead of what it points to.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.lstat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction lstat(path: string \\| [URL](url)): Promise\\<[FileInfo](deno.fileinfo)\\>;\n\n`lstat(``path``: ``string`` | `[`URL`](url)`)``: ``Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.lstat](https://doc.deno.land/deno/stable/~/Deno.lstat)"
- name: Deno.lstatSync
  id: ~/deno.lstatsync
  summary: Synchronously returns a Deno.FileInfo for the specified path
  description: "# Deno.lstatSync\n\nSynchronously returns a [`Deno.FileInfo`](deno#FileInfo) for the specified `path`. If `path` is a symlink, information for the symlink will be returned instead of what it points to.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.lstatSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction lstatSync(path: string \\| [URL](url)): [FileInfo](deno.fileinfo);\n\n`lstatSync(``path``: ``string`` | `[`URL`](url)`)``: `[`FileInfo`](deno.fileinfo)\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n[`FileInfo`](deno.fileinfo)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.lstatSync](https://doc.deno.land/deno/stable/~/Deno.lstatSync)"
- name: Deno.mainModule
  id: ~/deno.mainmodule
  summary: The URL of the entrypoint module entered from the command-line
  description: "# Deno.mainModule\n\nThe URL of the entrypoint module entered from the command-line.\n\n``` typescript\nconst mainModule: string;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.mainModule](https://doc.deno.land/deno/stable/~/Deno.mainModule)"
- name: Deno.makeTempDir
  id: ~/deno.maketempdir
  summary: Creates a new temporary directory in the default directory for temporary files, unless dir is specified
  description: "# Deno.makeTempDir\n\nCreates a new temporary directory in the default directory for temporary files, unless `dir` is specified. Other optional options include prefixing and suffixing the directory name with `prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created directory.\n\nMultiple programs calling this function simultaneously will create different directories. It is the caller's responsibility to remove the directory when no longer needed.\n\n``` typescript\nconst tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\nconst tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction makeTempDir(options?: [MakeTempOptions](deno.maketempoptions)): Promise\\<string\\>;\n\n`makeTempDir(``options?``: `[`MakeTempOptions`](deno.maketempoptions)`)``: ``Promise``<``string``>`\n\n### Parameters\n\n`options?``: `[`MakeTempOptions`](deno.maketempoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.makeTempDir](https://doc.deno.land/deno/stable/~/Deno.makeTempDir)"
- name: Deno.makeTempDirSync
  id: ~/deno.maketempdirsync
  summary: Synchronously creates a new temporary directory in the default directory for temporary files, unless dir is specified
  description: "# Deno.makeTempDirSync\n\nSynchronously creates a new temporary directory in the default directory for temporary files, unless `dir` is specified. Other optional options include prefixing and suffixing the directory name with `prefix` and `suffix` respectively.\n\nThe full path to the newly created directory is returned.\n\nMultiple programs calling this function simultaneously will create different directories. It is the caller's responsibility to remove the directory when no longer needed.\n\n``` typescript\nconst tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\nconst tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction makeTempDirSync(options?: [MakeTempOptions](deno.maketempoptions)): string;\n\n`makeTempDirSync(``options?``: `[`MakeTempOptions`](deno.maketempoptions)`)``: ``string`\n\n### Parameters\n\n`options?``: `[`MakeTempOptions`](deno.maketempoptions)` ``optional`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.makeTempDirSync](https://doc.deno.land/deno/stable/~/Deno.makeTempDirSync)"
- name: Deno.makeTempFile
  id: ~/deno.maketempfile
  summary: Creates a new temporary file in the default directory for temporary files, unless dir is specified
  description: "# Deno.makeTempFile\n\nCreates a new temporary file in the default directory for temporary files, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with `prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created file.\n\nMultiple programs calling this function simultaneously will create different files. It is the caller's responsibility to remove the file when no longer needed.\n\n``` typescript\nconst tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\nconst tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction makeTempFile(options?: [MakeTempOptions](deno.maketempoptions)): Promise\\<string\\>;\n\n`makeTempFile(``options?``: `[`MakeTempOptions`](deno.maketempoptions)`)``: ``Promise``<``string``>`\n\n### Parameters\n\n`options?``: `[`MakeTempOptions`](deno.maketempoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.makeTempFile](https://doc.deno.land/deno/stable/~/Deno.makeTempFile)"
- name: Deno.makeTempFileSync
  id: ~/deno.maketempfilesync
  summary: Synchronously creates a new temporary file in the default directory for temporary files, unless dir is specified
  description: "# Deno.makeTempFileSync\n\nSynchronously creates a new temporary file in the default directory for temporary files, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with `prefix` and `suffix` respectively.\n\nThe full path to the newly created file is returned.\n\nMultiple programs calling this function simultaneously will create different files. It is the caller's responsibility to remove the file when no longer needed.\n\n``` typescript\nconst tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\nconst tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction makeTempFileSync(options?: [MakeTempOptions](deno.maketempoptions)): string;\n\n`makeTempFileSync(``options?``: `[`MakeTempOptions`](deno.maketempoptions)`)``: ``string`\n\n### Parameters\n\n`options?``: `[`MakeTempOptions`](deno.maketempoptions)` ``optional`\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.makeTempFileSync](https://doc.deno.land/deno/stable/~/Deno.makeTempFileSync)"
- name: Deno.MakeTempOptions
  id: ~/deno.maketempoptions
  summary: Options which can be set when using Deno.makeTempDir, Deno.makeTempDirSync, Deno.makeTempFile, and Deno.makeTempFileSync
  description: "# Deno.MakeTempOptions\n\nOptions which can be set when using [`Deno.makeTempDir`](deno#makeTempDir), [`Deno.makeTempDirSync`](deno#makeTempDirSync), [`Deno.makeTempFile`](deno#makeTempFile), and [`Deno.makeTempFileSync`](deno#makeTempFileSync).\n\n``` typescript\ninterface MakeTempOptions {\n```\n\ndir?: string;\n\nprefix?: string;\n\nsuffix?: string;\n\n}\n\n## Properties\n\n`dir?``: ``string`\n\nDirectory where the temporary directory should be created (defaults to the env variable `TMPDIR`, or the system's default, usually `/tmp`).\n\nNote that if the passed `dir` is relative, the path returned by `makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of this when changing working directory.\n\n`prefix?``: ``string`\n\nString that should precede the random portion of the temporary directory's name.\n\n`suffix?``: ``string`\n\nString that should follow the random portion of the temporary directory's name.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.MakeTempOptions](https://doc.deno.land/deno/stable/~/Deno.MakeTempOptions)"
- name: Deno.memoryUsage
  id: ~/deno.memoryusage
  summary: Returns an object describing the memory usage of the Deno process and the V8 subsystem measured in bytes
  description: "# Deno.memoryUsage\n\nReturns an object describing the memory usage of the Deno process and the V8 subsystem measured in bytes.\n\n``` typescript\n```\n\nfunction memoryUsage(): [MemoryUsage](deno.memoryusage);\n\n`memoryUsage()``: `[`MemoryUsage`](deno.memoryusage)\n\n### Return Type\n\n[`MemoryUsage`](deno.memoryusage)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.memoryUsage](https://doc.deno.land/deno/stable/~/Deno.memoryUsage)"
- name: Deno.metrics
  id: ~/deno.metrics
  summary: Receive metrics from the privileged side of Deno
  description: "# Deno.metrics\n\nReceive metrics from the privileged side of Deno. This is primarily used in the development of Deno. *Ops*, also called *bindings*, are the go-between between Deno JavaScript sandbox and the rest of Deno.\n\n``` typescript\n> console.table(Deno.metrics())\n┌─────────────────────────┬────────┐\n│         (index)         │ Values │\n├─────────────────────────┼────────┤\n│      opsDispatched      │   3    │\n│    opsDispatchedSync    │   2    │\n│   opsDispatchedAsync    │   1    │\n│ opsDispatchedAsyncUnref │   0    │\n│      opsCompleted       │   3    │\n│    opsCompletedSync     │   2    │\n│    opsCompletedAsync    │   1    │\n│ opsCompletedAsyncUnref  │   0    │\n│    bytesSentControl     │   73   │\n│      bytesSentData      │   0    │\n│      bytesReceived      │  375   │\n└─────────────────────────┴────────┘\n```\n\n``` typescript\n```\n\nfunction metrics(): [Metrics](deno.metrics);\n\n`metrics()``: `[`Metrics`](deno.metrics)\n\n### Return Type\n\n[`Metrics`](deno.metrics)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.metrics](https://doc.deno.land/deno/stable/~/Deno.metrics)"
- name: Deno.mkdir
  id: ~/deno.mkdir
  summary: Creates a new directory with the specified path
  description: "# Deno.mkdir\n\nCreates a new directory with the specified path.\n\n``` typescript\nawait Deno.mkdir(\"new_dir\");\nawait Deno.mkdir(\"nested/directories\", { recursive: true });\nawait Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction mkdir(path: string \\| [URL](url), options?: [MkdirOptions](deno.mkdiroptions)): Promise\\<void\\>;\n\n`mkdir(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`MkdirOptions`](deno.mkdiroptions)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`MkdirOptions`](deno.mkdiroptions)` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.mkdir](https://doc.deno.land/deno/stable/~/Deno.mkdir)"
- name: Deno.MkdirOptions
  id: ~/deno.mkdiroptions
  summary: Options which can be set when using Deno.mkdir and Deno.mkdirSync
  description: "# Deno.MkdirOptions\n\nOptions which can be set when using [`Deno.mkdir`](deno#mkdir) and [`Deno.mkdirSync`](deno#mkdirSync).\n\n``` typescript\ninterface MkdirOptions {\n```\n\nmode?: number;\n\nrecursive?: boolean;\n\n}\n\n## Properties\n\n`mode?``: ``number`\n\nPermissions to use when creating the directory (defaults to `0o777`, before the process's umask).\n\nIgnored on Windows.\n\n`recursive?``: ``boolean`\n\nDefaults to `false`. If set to `true`, means that any intermediate directories will also be created (as with the shell command `mkdir -p`).\n\nIntermediate directories are created with the same permissions.\n\nWhen recursive is set to `true`, succeeds silently (without changing any permissions) if a directory already exists at the path, or if the path is a symlink to an existing directory.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.MkdirOptions](https://doc.deno.land/deno/stable/~/Deno.MkdirOptions)"
- name: Deno.mkdirSync
  id: ~/deno.mkdirsync
  summary: Synchronously creates a new directory with the specified path
  description: "# Deno.mkdirSync\n\nSynchronously creates a new directory with the specified path.\n\n``` typescript\nDeno.mkdirSync(\"new_dir\");\nDeno.mkdirSync(\"nested/directories\", { recursive: true });\nDeno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction mkdirSync(path: string \\| [URL](url), options?: [MkdirOptions](deno.mkdiroptions)): void;\n\n`mkdirSync(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`MkdirOptions`](deno.mkdiroptions)`)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`MkdirOptions`](deno.mkdiroptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.mkdirSync](https://doc.deno.land/deno/stable/~/Deno.mkdirSync)"
- name: Deno.MXRecord
  id: ~/deno.mxrecord
  summary: If resolveDns is called with "MX" record type specified, it will return an array of this interface
  description: "# Deno.MXRecord\n\nIf `resolveDns` is called with \"MX\" record type specified, it will return an array of this interface.\n\n``` typescript\ninterface MXRecord {\n```\n\nexchange: string;\n\npreference: number;\n\n}\n\n## Properties\n\n`exchange``: ``string`\n\n`preference``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.MXRecord](https://doc.deno.land/deno/stable/~/Deno.MXRecord)"
- name: Deno.NAPTRRecord
  id: ~/deno.naptrrecord
  summary: If resolveDns is called with "NAPTR" record type specified, it will return an array of this interface
  description: "# Deno.NAPTRRecord\n\nIf `resolveDns` is called with \"NAPTR\" record type specified, it will return an array of this interface.\n\n``` typescript\ninterface NAPTRRecord {\n```\n\nflags: string;\n\norder: number;\n\npreference: number;\n\nregexp: string;\n\nreplacement: string;\n\nservices: string;\n\n}\n\n## Properties\n\n`flags``: ``string`\n\n`order``: ``number`\n\n`preference``: ``number`\n\n`regexp``: ``string`\n\n`replacement``: ``string`\n\n`services``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.NAPTRRecord](https://doc.deno.land/deno/stable/~/Deno.NAPTRRecord)"
- name: Deno.NetAddr
  id: ~/deno.netaddr
  summary: null
  description: "# Deno.NetAddr\n\n``` typescript\ninterface NetAddr {\n```\n\nhostname: string;\n\nport: number;\n\ntransport: \"tcp\" \\| \"udp\";\n\n}\n\n## Properties\n\n`hostname``: ``string`\n\n`port``: ``number`\n\n`transport``: ``\"tcp\"`` | ``\"udp\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.NetAddr](https://doc.deno.land/deno/stable/~/Deno.NetAddr)"
- name: Deno.NetPermissionDescriptor
  id: ~/deno.netpermissiondescriptor
  summary: null
  description: "# Deno.NetPermissionDescriptor\n\n``` typescript\ninterface NetPermissionDescriptor {\n```\n\nhost?: string;\n\nname: \"net\";\n\n}\n\n## Properties\n\n`host?``: ``string`\n\nOptional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n\n``` typescript\n \"github.com\"\n \"deno.land:8080\"\n```\n\n`name``: ``\"net\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.NetPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.NetPermissionDescriptor)"
- name: Deno.noColor
  id: ~/deno.nocolor
  summary: Reflects the NO_COLOR environment variable at program start
  description: "# Deno.noColor\n\nReflects the `NO_COLOR` environment variable at program start.\n\nWhen the value is `true`, the Deno CLI will attempt to not send color codes to `stderr` or `stdout` and other command line programs should also attempt to respect this value.\n\nSee: <https://no-color.org/>\n\n``` typescript\nconst noColor: boolean;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.noColor](https://doc.deno.land/deno/stable/~/Deno.noColor)"
- name: Deno.open
  id: ~/deno.open
  summary: Open a file and resolve to an instance of Deno.FsFile
  description: "# Deno.open\n\nOpen a file and resolve to an instance of [`Deno.FsFile`](deno#FsFile). The file does not need to previously exist if using the `create` or `createNew` open options. It is the caller's responsibility to close the file when finished with it.\n\n``` typescript\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nDeno.close(file.rid);\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on options.\n\n``` typescript\n```\n\nfunction open(path: string \\| [URL](url), options?: [OpenOptions](deno.openoptions)): Promise\\<[FsFile](deno.fsfile)\\>;\n\n`open(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`OpenOptions`](deno.openoptions)`)``: ``Promise``<`[`FsFile`](deno.fsfile)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`OpenOptions`](deno.openoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`FsFile`](deno.fsfile)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.open](https://doc.deno.land/deno/stable/~/Deno.open)"
- name: Deno.OpenOptions
  id: ~/deno.openoptions
  summary: Options which can be set when doing Deno.open and Deno.openSync
  description: "# Deno.OpenOptions\n\nOptions which can be set when doing [`Deno.open`](deno#open) and [`Deno.openSync`](deno#openSync).\n\n``` typescript\ninterface OpenOptions {\n```\n\nappend?: boolean;\n\ncreate?: boolean;\n\ncreateNew?: boolean;\n\nmode?: number;\n\nread?: boolean;\n\ntruncate?: boolean;\n\nwrite?: boolean;\n\n}\n\n## Properties\n\n`append?``: ``boolean`\n\nDefaults to `false`. Sets the option for the append mode. This option, when `true`, means that writes will append to a file instead of overwriting previous contents.\n\nNote that setting `{ write: true, append: true }` has the same effect as setting only `{ append: true }`.\n\n`create?``: ``boolean`\n\nDefaults to `false`. Sets the option to allow creating a new file, if one doesn't already exist at the specified path. Requires write or append access to be used.\n\n`createNew?``: ``boolean`\n\nDefaults to `false`. If set to `true`, no file, directory, or symlink is allowed to exist at the target location. Requires write or append access to be used. When createNew is set to `true`, create and truncate are ignored.\n\n`mode?``: ``number`\n\nPermissions to use if creating the file (defaults to `0o666`, before the process's umask).\n\nIgnored on Windows.\n\n`read?``: ``boolean`\n\nDefaults to `true`. Sets the option for read access. This option, when `true`, means that the file should be read-able if opened.\n\n`truncate?``: ``boolean`\n\nDefaults to `false`. Sets the option for truncating a previous file. If a file is successfully opened with this option set it will truncate the file to `0` size if it already exists. The file must be opened with write access for truncate to work.\n\n`write?``: ``boolean`\n\nDefaults to `false`. Sets the option for write access. This option, when `true`, means that the file should be write-able if opened. If the file already exists, any write calls on it will overwrite its contents, by default without truncating it.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.OpenOptions](https://doc.deno.land/deno/stable/~/Deno.OpenOptions)"
- name: Deno.openSync
  id: ~/deno.opensync
  summary: Synchronously open a file and return an instance of Deno.FsFile
  description: "# Deno.openSync\n\nSynchronously open a file and return an instance of [`Deno.FsFile`](deno#FsFile). The file does not need to previously exist if using the `create` or `createNew` open options. It is the caller's responsibility to close the file when finished with it.\n\n``` typescript\nconst file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nDeno.close(file.rid);\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on options.\n\n``` typescript\n```\n\nfunction openSync(path: string \\| [URL](url), options?: [OpenOptions](deno.openoptions)): [FsFile](deno.fsfile);\n\n`openSync(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`OpenOptions`](deno.openoptions)`)``: `[`FsFile`](deno.fsfile)\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`OpenOptions`](deno.openoptions)` ``optional`\n\n### Return Type\n\n[`FsFile`](deno.fsfile)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.openSync](https://doc.deno.land/deno/stable/~/Deno.openSync)"
- name: Deno.OpMetrics
  id: ~/deno.opmetrics
  summary: null
  description: "# Deno.OpMetrics\n\n``` typescript\ninterface OpMetrics {\n```\n\nbytesReceived: number;\n\nbytesSentControl: number;\n\nbytesSentData: number;\n\nopsCompleted: number;\n\nopsCompletedAsync: number;\n\nopsCompletedAsyncUnref: number;\n\nopsCompletedSync: number;\n\nopsDispatched: number;\n\nopsDispatchedAsync: number;\n\nopsDispatchedAsyncUnref: number;\n\nopsDispatchedSync: number;\n\n}\n\n## Properties\n\n`bytesReceived``: ``number`\n\n`bytesSentControl``: ``number`\n\n`bytesSentData``: ``number`\n\n`opsCompleted``: ``number`\n\n`opsCompletedAsync``: ``number`\n\n`opsCompletedAsyncUnref``: ``number`\n\n`opsCompletedSync``: ``number`\n\n`opsDispatched``: ``number`\n\n`opsDispatchedAsync``: ``number`\n\n`opsDispatchedAsyncUnref``: ``number`\n\n`opsDispatchedSync``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.OpMetrics](https://doc.deno.land/deno/stable/~/Deno.OpMetrics)"
- name: Deno.PermissionDescriptor
  id: ~/deno.permissiondescriptor
  summary: Permission descriptors which define a permission and can be queried, requested, or revoked
  description: "# Deno.PermissionDescriptor\n\nPermission descriptors which define a permission and can be queried, requested, or revoked.\n\n``` typescript\ntype PermissionDescriptor = \n```\n\n\\| [RunPermissionDescriptor](deno.runpermissiondescriptor)\n\n\\| [ReadPermissionDescriptor](deno.readpermissiondescriptor)\n\n\\| [WritePermissionDescriptor](deno.writepermissiondescriptor)\n\n\\| [NetPermissionDescriptor](deno.netpermissiondescriptor)\n\n\\| [EnvPermissionDescriptor](deno.envpermissiondescriptor)\n\n\\| [SysPermissionDescriptor](deno.syspermissiondescriptor)\n\n\\| [FfiPermissionDescriptor](deno.ffipermissiondescriptor)\n\n\\| [HrtimePermissionDescriptor](deno.hrtimepermissiondescriptor);\n\n## Type\n\n[`RunPermissionDescriptor`](deno.runpermissiondescriptor)` | `[`ReadPermissionDescriptor`](deno.readpermissiondescriptor)` | `[`WritePermissionDescriptor`](deno.writepermissiondescriptor)` | `[`NetPermissionDescriptor`](deno.netpermissiondescriptor)` | `[`EnvPermissionDescriptor`](deno.envpermissiondescriptor)` | `[`SysPermissionDescriptor`](deno.syspermissiondescriptor)` | `[`FfiPermissionDescriptor`](deno.ffipermissiondescriptor)` | `[`HrtimePermissionDescriptor`](deno.hrtimepermissiondescriptor)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.PermissionDescriptor)"
- name: Deno.PermissionName
  id: ~/deno.permissionname
  summary: The name of a privileged feature which needs permission
  description: "# Deno.PermissionName\n\nThe name of a privileged feature which needs permission.\n\n``` typescript\ntype PermissionName = \n```\n\n\\| \"run\"\n\n\\| \"read\"\n\n\\| \"write\"\n\n\\| \"net\"\n\n\\| \"env\"\n\n\\| \"sys\"\n\n\\| \"ffi\"\n\n\\| \"hrtime\";\n\n## Type\n\n`\"run\"`` | ``\"read\"`` | ``\"write\"`` | ``\"net\"`` | ``\"env\"`` | ``\"sys\"`` | ``\"ffi\"`` | ``\"hrtime\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionName](https://doc.deno.land/deno/stable/~/Deno.PermissionName)"
- name: Deno.PermissionOptions
  id: ~/deno.permissionoptions
  summary: Options which define the permissions within a test or worker context
  description: "# Deno.PermissionOptions\n\nOptions which define the permissions within a test or worker context.\n\n`\"inherit\"` ensures that all permissions of the parent process will be applied to the test context. `\"none\"` ensures the test context has no permissions. A `PermissionOptionsObject` provides a more specific set of permissions to the test context.\n\n``` typescript\ntype PermissionOptions = \"inherit\" | \"none\" | PermissionOptionsObject;\n```\n\n## Type\n\n`\"inherit\"`` | ``\"none\"`` | `[`PermissionOptionsObject`](deno.permissionoptionsobject)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionOptions](https://doc.deno.land/deno/stable/~/Deno.PermissionOptions)"
- name: Deno.PermissionOptionsObject
  id: ~/deno.permissionoptionsobject
  summary: A set of options which can define the permissions within a test or worker context at a highly specific level
  description: "# Deno.PermissionOptionsObject\n\nA set of options which can define the permissions within a test or worker context at a highly specific level.\n\n``` typescript\ninterface PermissionOptionsObject {\n```\n\nenv?: \"inherit\" \\| boolean \\| string\\[\\];\n\nffi?: \"inherit\" \\| boolean \\| Array\\<string \\| [URL](url)\\>;\n\nhrtime?: \"inherit\" \\| boolean;\n\nnet?: \"inherit\" \\| boolean \\| string\\[\\];\n\nread?: \"inherit\" \\| boolean \\| Array\\<string \\| [URL](url)\\>;\n\nrun?: \"inherit\" \\| boolean \\| Array\\<string \\| [URL](url)\\>;\n\nsys?: \"inherit\" \\| boolean \\| string\\[\\];\n\nwrite?: \"inherit\" \\| boolean \\| Array\\<string \\| [URL](url)\\>;\n\n}\n\n## Properties\n\n`env?``: ``\"inherit\"`` | ``boolean`` | ``string``[]`\n\nSpecifies if the `env` permission should be requested or revoked. If set to `\"inherit\"`, the current `env` permission will be inherited. If set to `true`, the global `env` permission will be requested. If set to `false`, the global `env` permission will be revoked.\n\nDefaults to `false`.\n\n`ffi?``: ``\"inherit\"`` | ``boolean`` | ``Array``<``string`` | `[`URL`](url)`>`\n\nSpecifies if the `ffi` permission should be requested or revoked. If set to `\"inherit\"`, the current `ffi` permission will be inherited. If set to `true`, the global `ffi` permission will be requested. If set to `false`, the global `ffi` permission will be revoked.\n\nDefaults to `false`.\n\n`hrtime?``: ``\"inherit\"`` | ``boolean`\n\nSpecifies if the `hrtime` permission should be requested or revoked. If set to `\"inherit\"`, the current `hrtime` permission will be inherited. If set to `true`, the global `hrtime` permission will be requested. If set to `false`, the global `hrtime` permission will be revoked.\n\nDefaults to `false`.\n\n`net?``: ``\"inherit\"`` | ``boolean`` | ``string``[]`\n\nSpecifies if the `net` permission should be requested or revoked. if set to `\"inherit\"`, the current `net` permission will be inherited. if set to `true`, the global `net` permission will be requested. if set to `false`, the global `net` permission will be revoked. if set to `string[]`, the `net` permission will be requested with the specified host strings with the format `\"<host>[:<port>]`.\n\nDefaults to `false`.\n\nExamples:\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"inherit\",\n  permissions: {\n    net: \"inherit\",\n  },\n  async fn() {\n    const status = await Deno.permissions.query({ name: \"net\" })\n    assertEquals(status.state, \"granted\");\n  },\n});\n```\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"true\",\n  permissions: {\n    net: true,\n  },\n  async fn() {\n    const status = await Deno.permissions.query({ name: \"net\" });\n    assertEquals(status.state, \"granted\");\n  },\n});\n```\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"false\",\n  permissions: {\n    net: false,\n  },\n  async fn() {\n    const status = await Deno.permissions.query({ name: \"net\" });\n    assertEquals(status.state, \"denied\");\n  },\n});\n```\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"localhost:8080\",\n  permissions: {\n    net: [\"localhost:8080\"],\n  },\n  async fn() {\n    const status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\n    assertEquals(status.state, \"granted\");\n  },\n});\n```\n\n`read?``: ``\"inherit\"`` | ``boolean`` | ``Array``<``string`` | `[`URL`](url)`>`\n\nSpecifies if the `read` permission should be requested or revoked. If set to `\"inherit\"`, the current `read` permission will be inherited. If set to `true`, the global `read` permission will be requested. If set to `false`, the global `read` permission will be revoked. If set to `Array<string | URL>`, the `read` permission will be requested with the specified file paths.\n\nDefaults to `false`.\n\n`run?``: ``\"inherit\"`` | ``boolean`` | ``Array``<``string`` | `[`URL`](url)`>`\n\nSpecifies if the `run` permission should be requested or revoked. If set to `\"inherit\"`, the current `run` permission will be inherited. If set to `true`, the global `run` permission will be requested. If set to `false`, the global `run` permission will be revoked.\n\nDefaults to `false`.\n\n`sys?``: ``\"inherit\"`` | ``boolean`` | ``string``[]`\n\nSpecifies if the `sys` permission should be requested or revoked. If set to `\"inherit\"`, the current `sys` permission will be inherited. If set to `true`, the global `sys` permission will be requested. If set to `false`, the global `sys` permission will be revoked.\n\nDefaults to `false`.\n\n`write?``: ``\"inherit\"`` | ``boolean`` | ``Array``<``string`` | `[`URL`](url)`>`\n\nSpecifies if the `write` permission should be requested or revoked. If set to `\"inherit\"`, the current `write` permission will be inherited. If set to `true`, the global `write` permission will be requested. If set to `false`, the global `write` permission will be revoked. If set to `Array<string | URL>`, the `write` permission will be requested with the specified file paths.\n\nDefaults to `false`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionOptionsObject](https://doc.deno.land/deno/stable/~/Deno.PermissionOptionsObject)"
- name: Deno.Permissions
  id: ~/deno.permissions
  summary: Resolves to the current status of a permission
  description: "# Deno.Permissions\n\n``` typescript\nclass Permissions {\n```\n\nquery(desc: [PermissionDescriptor](deno.permissiondescriptor)): Promise\\<[PermissionStatus](deno.permissionstatus)\\>;\n\nrequest(desc: [PermissionDescriptor](deno.permissiondescriptor)): Promise\\<[PermissionStatus](deno.permissionstatus)\\>;\n\nrevoke(desc: [PermissionDescriptor](deno.permissiondescriptor)): Promise\\<[PermissionStatus](deno.permissionstatus)\\>;\n\n}\n\n## Methods\n\n`query(``desc``: `[`PermissionDescriptor`](deno.permissiondescriptor)`)``: ``Promise``<`[`PermissionStatus`](deno.permissionstatus)`>`\n\nResolves to the current status of a permission.\n\n``` typescript\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n`request(``desc``: `[`PermissionDescriptor`](deno.permissiondescriptor)`)``: ``Promise``<`[`PermissionStatus`](deno.permissionstatus)`>`\n\nRequests the permission, and resolves to the state of the permission.\n\n``` typescript\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n\n`revoke(``desc``: `[`PermissionDescriptor`](deno.permissiondescriptor)`)``: ``Promise``<`[`PermissionStatus`](deno.permissionstatus)`>`\n\nRevokes a permission, and resolves to the state of the permission.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Permissions](https://doc.deno.land/deno/stable/~/Deno.Permissions)"
- name: Deno.PermissionState
  id: ~/deno.permissionstate
  summary: null
  description: "# Deno.PermissionState\n\nThe current status of the permission:\n\n- `\"granted\"` - the permission has been granted.\n- `\"denied\"` - the permission has been explicitly denied.\n- `\"prompt\"` - the permission has not explicitly granted nor denied.\n\n``` typescript\ntype PermissionState = \"granted\" | \"denied\" | \"prompt\";\n```\n\n## Type\n\n`\"granted\"`` | ``\"denied\"`` | ``\"prompt\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionState](https://doc.deno.land/deno/stable/~/Deno.PermissionState)"
- name: Deno.PermissionStatus
  id: ~/deno.permissionstatus
  summary: null
  description: "# Deno.PermissionStatus\n\n``` typescript\nclass PermissionStatus extends EventTarget {\n```\n\nonchange: ((this: [PermissionStatus](deno.permissionstatus), ev: [Event](event)) =\\> any) \\| null;\n\nreadonly state: [PermissionState](deno.permissionstate);\n\naddEventListener\\<K extends keyof [PermissionStatusEventMap](deno.permissionstatuseventmap)\\>(\n\ntype: K,\n\nlistener: (this: [PermissionStatus](deno.permissionstatus), ev: [PermissionStatusEventMap](deno.permissionstatuseventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nremoveEventListener\\<K extends keyof [PermissionStatusEventMap](deno.permissionstatuseventmap)\\>(\n\ntype: K,\n\nlistener: (this: [PermissionStatus](deno.permissionstatus), ev: [PermissionStatusEventMap](deno.permissionstatuseventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Properties\n\n`onchange``: ``(``(``this``: `[`PermissionStatus`](deno.permissionstatus)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`state``: `[`PermissionState`](deno.permissionstate)\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`PermissionStatusEventMap`](deno.permissionstatuseventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`PermissionStatus`](deno.permissionstatus)`, ``ev``: `[`PermissionStatusEventMap`](deno.permissionstatuseventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`removeEventListener``<``K`` extends ``keyof`` `[`PermissionStatusEventMap`](deno.permissionstatuseventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`PermissionStatus`](deno.permissionstatus)`, ``ev``: `[`PermissionStatusEventMap`](deno.permissionstatuseventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionStatus](https://doc.deno.land/deno/stable/~/Deno.PermissionStatus)"
- name: Deno.PermissionStatusEventMap
  id: ~/deno.permissionstatuseventmap
  summary: null
  description: "# Deno.PermissionStatusEventMap\n\n``` typescript\ninterface PermissionStatusEventMap {\n```\n\nchange: [Event](event);\n\n}\n\n## Properties\n\n`change``: `[`Event`](event)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.PermissionStatusEventMap](https://doc.deno.land/deno/stable/~/Deno.PermissionStatusEventMap)"
- name: Deno.pid
  id: ~/deno.pid
  summary: The current process ID of this instance of the Deno CLI
  description: "# Deno.pid\n\nThe current process ID of this instance of the Deno CLI.\n\n``` typescript\nconsole.log(Deno.pid);\n```\n\n``` typescript\nconst pid: number;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.pid](https://doc.deno.land/deno/stable/~/Deno.pid)"
- name: Deno.ppid
  id: ~/deno.ppid
  summary: The process ID of parent process of this instance of the Deno CLI
  description: "# Deno.ppid\n\nThe process ID of parent process of this instance of the Deno CLI.\n\n``` typescript\nconsole.log(Deno.ppid);\n```\n\n``` typescript\nconst ppid: number;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ppid](https://doc.deno.land/deno/stable/~/Deno.ppid)"
- name: Deno.Process
  id: ~/deno.process
  summary: Represents an instance of a sub process that is returned from Deno.run which can be used to manage the sub-process
  description: "# Deno.Process\n\nRepresents an instance of a sub process that is returned from [`Deno.run`](deno#run) which can be used to manage the sub-process.\n\n``` typescript\nclass Process<T extends RunOptions = RunOptions> {\n```\n\nreadonly pid: number;\n\nreadonly rid: number;\n\nreadonly stderr: T\\[\"stderr\"\\] extends \"piped\" ? [Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n} : ([Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n}) \\| null;\n\nreadonly stdin: T\\[\"stdin\"\\] extends \"piped\" ? [Writer](deno.writer) & [Closer](deno.closer) & {\n\nwritable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n} : ([Writer](deno.writer) & [Closer](deno.closer) & {\n\nwritable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n}) \\| null;\n\nreadonly stdout: T\\[\"stdout\"\\] extends \"piped\" ? [Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n} : ([Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n}) \\| null;\n\nclose(): void;\n\nkill(signo: [Signal](deno.signal)): void;\n\noutput(): Promise\\<Uint8Array\\>;\n\nstatus(): Promise\\<[ProcessStatus](deno.processstatus)\\>;\n\nstderrOutput(): Promise\\<Uint8Array\\>;\n\n}\n\n## Type Parameters\n\n`T`` extends `[`RunOptions`](deno.runoptions)` = `[`RunOptions`](deno.runoptions)\n\n## Properties\n\n`pid``: ``number`\n\nThe operating system's process ID for the sub-process.\n\n`rid``: ``number`\n\nThe resource ID of the sub-process.\n\n`stderr``: ``T``[``\"stderr\"``]`` ``extends`` ``\"piped\"`` ? `[`Reader`](deno.reader)` & `[`Closer`](deno.closer)` & ``{`\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n} : ([Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n}) \\| null\n\nA reference to the sub-processes `stderr`, which allows interacting with the sub-process at a low level.\n\n`stdin``: ``T``[``\"stdin\"``]`` ``extends`` ``\"piped\"`` ? `[`Writer`](deno.writer)` & `[`Closer`](deno.closer)` & ``{`\n\nwritable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n} : ([Writer](deno.writer) & [Closer](deno.closer) & {\n\nwritable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n}) \\| null\n\nA reference to the sub-processes `stdin`, which allows interacting with the sub-process at a low level.\n\n`stdout``: ``T``[``\"stdout\"``]`` ``extends`` ``\"piped\"`` ? `[`Reader`](deno.reader)` & `[`Closer`](deno.closer)` & ``{`\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n} : ([Reader](deno.reader) & [Closer](deno.closer) & {\n\nreadable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\n}) \\| null\n\nA reference to the sub-processes `stdout`, which allows interacting with the sub-process at a low level.\n\n## Methods\n\n`close()``: ``void`\n\nClean up resources associated with the sub-process instance.\n\n`kill(``signo``: `[`Signal`](deno.signal)`)``: ``void`\n\nSend a signal to process.\n\n``` typescript\nconst p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\np.kill(\"SIGTERM\");\np.close();\n```\n\n`output()``: ``Promise``<``Uint8Array``>`\n\nBuffer the stdout until EOF and return it as `Uint8Array`.\n\nYou must set `stdout` to `\"piped\"` when creating the process.\n\nThis calls `close()` on stdout after its done.\n\n`status()``: ``Promise``<`[`ProcessStatus`](deno.processstatus)`>`\n\nWait for the process to exit and return its exit status.\n\nCalling this function multiple times will return the same status.\n\nThe `stdin` reference to the process will be closed before waiting to avoid a deadlock.\n\nIf `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed manually before the process can exit.\n\nTo run process to completion and collect output from both `stdout` and `stderr` use:\n\n``` typescript\nconst p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\nconst [status, stdout, stderr] = await Promise.all([\n  p.status(),\n  p.output(),\n  p.stderrOutput()\n]);\np.close();\n```\n\n`stderrOutput()``: ``Promise``<``Uint8Array``>`\n\nBuffer the stderr until EOF and return it as `Uint8Array`.\n\nYou must set `stderr` to `\"piped\"` when creating the process.\n\nThis calls `close()` on stderr after its done.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Process](https://doc.deno.land/deno/stable/~/Deno.Process)"
- name: Deno.ProcessStatus
  id: ~/deno.processstatus
  summary: The status resolved from the .status() method of a Deno.Process instance
  description: "# Deno.ProcessStatus\n\nThe status resolved from the `.status()` method of a [`Deno.Process`](deno#Process) instance.\n\nIf `success` is `true`, then `code` will be `0`, but if `success` is `false`, the sub-process exit code will be set in `code`.\n\n``` typescript\ntype ProcessStatus = {\n```\n\nsuccess: true;\n\ncode: 0;\n\nsignal?: undefined;\n\n} \\| {\n\nsuccess: false;\n\ncode: number;\n\nsignal?: number;\n\n};\n\n## Type\n\n`{`\n\nsuccess: true;\n\ncode: 0;\n\nsignal?: undefined;\n\n} \\| {\n\nsuccess: false;\n\ncode: number;\n\nsignal?: number;\n\n}\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ProcessStatus](https://doc.deno.land/deno/stable/~/Deno.ProcessStatus)"
- name: Deno.read
  id: ~/deno.read
  summary: Read from a resource ID (rid) into an array buffer (buffer)
  description: "# Deno.read\n\nRead from a resource ID (`rid`) into an array buffer (`buffer`).\n\nResolves to either the number of bytes read during the operation or EOF (`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does not indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not work with this directly, but rather use [`readAll()`](https://deno.land/std/streams/conversion.ts?s=readAll) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n``` typescript\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```\n\n``` typescript\n```\n\nfunction read(rid: number, buffer: Uint8Array): Promise\\<number \\| null\\>;\n\n`read(``rid``: ``number``, ``buffer``: ``Uint8Array``)``: ``Promise``<``number`` | ``null``>`\n\n### Parameters\n\n`rid``: ``number`\n\n`buffer``: ``Uint8Array`\n\n### Return Type\n\n`Promise``<``number`` | ``null``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.read](https://doc.deno.land/deno/stable/~/Deno.read)"
- name: Deno.readAll
  id: ~/deno.readall
  summary: Use readAll from std/streams/conversion.ts instead
  description: "# Deno.readAll\n\ndeprecated\n\nRead Reader `r` until EOF (`null`) and resolve to the content as Uint8Array\\`.\n\n@deprecated\n\nUse [`readAll`](https://deno.land/std/streams/conversion.ts?s=readAll) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.readAll` will be removed in the future.\n\n``` typescript\n```\n\nfunction readAll(r: [Reader](deno.reader)): Promise\\<Uint8Array\\>;\n\n`readAll(``r``: `[`Reader`](deno.reader)`)``: ``Promise``<``Uint8Array``>`\n\n### Parameters\n\n`r``: `[`Reader`](deno.reader)\n\n### Return Type\n\n`Promise``<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readAll](https://doc.deno.land/deno/stable/~/Deno.readAll)"
- name: Deno.readAllSync
  id: ~/deno.readallsync
  summary: Synchronously reads Reader r until EOF (null) and returns the content as Uint8Array
  description: "# Deno.readAllSync\n\ndeprecated\n\nSynchronously reads Reader `r` until EOF (`null`) and returns the content as `Uint8Array`.\n\n@deprecated\n\nUse [`readAllSync`](https://deno.land/std/streams/conversion.ts?s=readAllSync) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.readAllSync` will be removed in the future.\n\n``` typescript\n```\n\nfunction readAllSync(r: [ReaderSync](deno.readersync)): Uint8Array;\n\n`readAllSync(``r``: `[`ReaderSync`](deno.readersync)`)``: ``Uint8Array`\n\n### Parameters\n\n`r``: `[`ReaderSync`](deno.readersync)\n\n### Return Type\n\n`Uint8Array`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readAllSync](https://doc.deno.land/deno/stable/~/Deno.readAllSync)"
- name: Deno.readDir
  id: ~/deno.readdir
  summary: Reads the directory given by path and returns an async iterable of Deno.DirEntry
  description: "# Deno.readDir\n\nReads the directory given by `path` and returns an async iterable of [`Deno.DirEntry`](deno#DirEntry).\n\n``` typescript\nfor await (const dirEntry of Deno.readDir(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readDir(path: string \\| [URL](url)): AsyncIterable\\<[DirEntry](deno.direntry)\\>;\n\n`readDir(``path``: ``string`` | `[`URL`](url)`)``: ``AsyncIterable``<`[`DirEntry`](deno.direntry)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`AsyncIterable``<`[`DirEntry`](deno.direntry)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readDir](https://doc.deno.land/deno/stable/~/Deno.readDir)"
- name: Deno.readDirSync
  id: ~/deno.readdirsync
  summary: Synchronously reads the directory given by path and returns an iterable of Deno.DirEntry
  description: "# Deno.readDirSync\n\nSynchronously reads the directory given by `path` and returns an iterable of `Deno.DirEntry`.\n\n``` typescript\nfor (const dirEntry of Deno.readDirSync(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readDirSync(path: string \\| [URL](url)): Iterable\\<[DirEntry](deno.direntry)\\>;\n\n`readDirSync(``path``: ``string`` | `[`URL`](url)`)``: ``Iterable``<`[`DirEntry`](deno.direntry)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Iterable``<`[`DirEntry`](deno.direntry)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readDirSync](https://doc.deno.land/deno/stable/~/Deno.readDirSync)"
- name: Deno.Reader
  id: ~/deno.reader
  summary: An abstract interface which when implemented provides an interface to read bytes into an array buffer asynchronously
  description: "# Deno.Reader\n\nAn abstract interface which when implemented provides an interface to read bytes into an array buffer asynchronously.\n\n``` typescript\ninterface Reader {\n```\n\nread(p: Uint8Array): Promise\\<number \\| null\\>;\n\n}\n\n## Methods\n\n`read(``p``: ``Uint8Array``)``: ``Promise``<``number`` | ``null``>`\n\nReads up to `p.byteLength` bytes into `p`. It resolves to the number of bytes read (`0` \\< `n` \\<= `p.byteLength`) and rejects if any error encountered. Even if `read()` resolves to `n` \\< `p.byteLength`, it may use all of `p` as scratch space during the call. If some data is available but not `p.byteLength` bytes, `read()` conventionally resolves to what is available instead of waiting for more.\n\nWhen `read()` encounters end-of-file condition, it resolves to EOF (`null`).\n\nWhen `read()` encounters an error, it rejects with an error.\n\nCallers should always process the `n` \\> `0` bytes returned before considering the EOF (`null`). Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse [`itereateReader`](https://deno.land/std/streams/conversion.ts?s=iterateReader) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) to turn a `Reader` into an {*@link* `AsyncIterator`}.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Reader](https://doc.deno.land/deno/stable/~/Deno.Reader)"
- name: Deno.ReaderSync
  id: ~/deno.readersync
  summary: An abstract interface which when implemented provides an interface to read bytes into an array buffer synchronously
  description: "# Deno.ReaderSync\n\nAn abstract interface which when implemented provides an interface to read bytes into an array buffer synchronously.\n\n``` typescript\ninterface ReaderSync {\n```\n\nreadSync(p: Uint8Array): number \\| null;\n\n}\n\n## Methods\n\n`readSync(``p``: ``Uint8Array``)``: ``number`` | ``null`\n\nReads up to `p.byteLength` bytes into `p`. It resolves to the number of bytes read (`0` \\< `n` \\<= `p.byteLength`) and rejects if any error encountered. Even if `readSync()` returns `n` \\< `p.byteLength`, it may use all of `p` as scratch space during the call. If some data is available but not `p.byteLength` bytes, `readSync()` conventionally returns what is available instead of waiting for more.\n\nWhen `readSync()` encounters end-of-file condition, it returns EOF (`null`).\n\nWhen `readSync()` encounters an error, it throws with an error.\n\nCallers should always process the `n` \\> `0` bytes returned before considering the EOF (`null`). Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse [`itereateReaderSync`](https://deno.land/std/streams/conversion.ts?s=iterateReaderSync) from from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) to turn a `ReaderSync` into an {*@link* `Iterator`}.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ReaderSync](https://doc.deno.land/deno/stable/~/Deno.ReaderSync)"
- name: Deno.readFile
  id: ~/deno.readfile
  summary: Reads and resolves to the entire contents of a file as an array of bytes
  description: "# Deno.readFile\n\nReads and resolves to the entire contents of a file as an array of bytes. `TextDecoder` can be used to transform the bytes to string if required. Reading a directory returns an empty data array.\n\n``` typescript\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = await Deno.readFile(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readFile(path: string \\| [URL](url), options?: [ReadFileOptions](deno.readfileoptions)): Promise\\<Uint8Array\\>;\n\n`readFile(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`ReadFileOptions`](deno.readfileoptions)`)``: ``Promise``<``Uint8Array``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`ReadFileOptions`](deno.readfileoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``Uint8Array``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readFile](https://doc.deno.land/deno/stable/~/Deno.readFile)"
- name: Deno.ReadFileOptions
  id: ~/deno.readfileoptions
  summary: Options which can be set when using Deno.readFile or Deno.readFileSync
  description: "# Deno.ReadFileOptions\n\nOptions which can be set when using [`Deno.readFile`](deno#readFile) or [`Deno.readFileSync`](deno#readFileSync).\n\n``` typescript\ninterface ReadFileOptions {\n```\n\nsignal?: [AbortSignal](abortsignal);\n\n}\n\n## Properties\n\n`signal?``: `[`AbortSignal`](abortsignal)\n\nAn abort signal to allow cancellation of the file read operation. If the signal becomes aborted the readFile operation will be stopped and the promise returned will be rejected with an AbortError.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ReadFileOptions](https://doc.deno.land/deno/stable/~/Deno.ReadFileOptions)"
- name: Deno.readFileSync
  id: ~/deno.readfilesync
  summary: Synchronously reads and returns the entire contents of a file as an array of bytes
  description: "# Deno.readFileSync\n\nSynchronously reads and returns the entire contents of a file as an array of bytes. `TextDecoder` can be used to transform the bytes to string if required. Reading a directory returns an empty data array.\n\n``` typescript\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = Deno.readFileSync(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readFileSync(path: string \\| [URL](url)): Uint8Array;\n\n`readFileSync(``path``: ``string`` | `[`URL`](url)`)``: ``Uint8Array`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Uint8Array`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readFileSync](https://doc.deno.land/deno/stable/~/Deno.readFileSync)"
- name: Deno.readLink
  id: ~/deno.readlink
  summary: Resolves to the full path destination of the named symbolic link
  description: "# Deno.readLink\n\nResolves to the full path destination of the named symbolic link.\n\n``` typescript\nawait Deno.symlink(\"./test.txt\", \"./test_link.txt\");\nconst target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readLink(path: string \\| [URL](url)): Promise\\<string\\>;\n\n`readLink(``path``: ``string`` | `[`URL`](url)`)``: ``Promise``<``string``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readLink](https://doc.deno.land/deno/stable/~/Deno.readLink)"
- name: Deno.readLinkSync
  id: ~/deno.readlinksync
  summary: Synchronously returns the full path destination of the named symbolic link
  description: "# Deno.readLinkSync\n\nSynchronously returns the full path destination of the named symbolic link.\n\n``` typescript\nDeno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\nconst target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readLinkSync(path: string \\| [URL](url)): string;\n\n`readLinkSync(``path``: ``string`` | `[`URL`](url)`)``: ``string`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readLinkSync](https://doc.deno.land/deno/stable/~/Deno.readLinkSync)"
- name: Deno.ReadPermissionDescriptor
  id: ~/deno.readpermissiondescriptor
  summary: null
  description: "# Deno.ReadPermissionDescriptor\n\n``` typescript\ninterface ReadPermissionDescriptor {\n```\n\nname: \"read\";\n\npath?: string \\| [URL](url);\n\n}\n\n## Properties\n\n`name``: ``\"read\"`\n\n`path?``: ``string`` | `[`URL`](url)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ReadPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.ReadPermissionDescriptor)"
- name: Deno.readSync
  id: ~/deno.readsync
  summary: Synchronously read from a resource ID (rid) into an array buffer (buffer)
  description: "# Deno.readSync\n\nSynchronously read from a resource ID (`rid`) into an array buffer (`buffer`).\n\nReturns either the number of bytes read during the operation or EOF (`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does not indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not work with this directly, but rather use [`readAllSync()`](https://deno.land/std/streams/conversion.ts?s=readAllSync) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n``` typescript\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```\n\n``` typescript\n```\n\nfunction readSync(rid: number, buffer: Uint8Array): number \\| null;\n\n`readSync(``rid``: ``number``, ``buffer``: ``Uint8Array``)``: ``number`` | ``null`\n\n### Parameters\n\n`rid``: ``number`\n\n`buffer``: ``Uint8Array`\n\n### Return Type\n\n`number`` | ``null`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readSync](https://doc.deno.land/deno/stable/~/Deno.readSync)"
- name: Deno.readTextFile
  id: ~/deno.readtextfile
  summary: Asynchronously reads and returns the entire contents of a file as an UTF-8 decoded string
  description: "# Deno.readTextFile\n\nAsynchronously reads and returns the entire contents of a file as an UTF-8 decoded string. Reading a directory throws an error.\n\n``` typescript\nconst data = await Deno.readTextFile(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readTextFile(path: string \\| [URL](url), options?: [ReadFileOptions](deno.readfileoptions)): Promise\\<string\\>;\n\n`readTextFile(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`ReadFileOptions`](deno.readfileoptions)`)``: ``Promise``<``string``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`ReadFileOptions`](deno.readfileoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readTextFile](https://doc.deno.land/deno/stable/~/Deno.readTextFile)"
- name: Deno.readTextFileSync
  id: ~/deno.readtextfilesync
  summary: Synchronously reads and returns the entire contents of a file as an UTF-8 decoded string
  description: "# Deno.readTextFileSync\n\nSynchronously reads and returns the entire contents of a file as an UTF-8 decoded string. Reading a directory throws an error.\n\n``` typescript\nconst data = Deno.readTextFileSync(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction readTextFileSync(path: string \\| [URL](url)): string;\n\n`readTextFileSync(``path``: ``string`` | `[`URL`](url)`)``: ``string`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.readTextFileSync](https://doc.deno.land/deno/stable/~/Deno.readTextFileSync)"
- name: Deno.realPath
  id: ~/deno.realpath
  summary: Resolves to the absolute normalized path, with symbolic links resolved
  description: "# Deno.realPath\n\nResolves to the absolute normalized path, with symbolic links resolved.\n\n``` typescript\n// e.g. given /home/alice/file.txt and current directory /home/alice\nawait Deno.symlink(\"file.txt\", \"symlink_file.txt\");\nconst realPath = await Deno.realPath(\"./file.txt\");\nconst realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is relative.\n\n``` typescript\n```\n\nfunction realPath(path: string \\| [URL](url)): Promise\\<string\\>;\n\n`realPath(``path``: ``string`` | `[`URL`](url)`)``: ``Promise``<``string``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.realPath](https://doc.deno.land/deno/stable/~/Deno.realPath)"
- name: Deno.realPathSync
  id: ~/deno.realpathsync
  summary: Synchronously returns absolute normalized path, with symbolic links resolved
  description: "# Deno.realPathSync\n\nSynchronously returns absolute normalized path, with symbolic links resolved.\n\n``` typescript\n// e.g. given /home/alice/file.txt and current directory /home/alice\nDeno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\nconst realPath = Deno.realPathSync(\"./file.txt\");\nconst realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is relative.\n\n``` typescript\n```\n\nfunction realPathSync(path: string \\| [URL](url)): string;\n\n`realPathSync(``path``: ``string`` | `[`URL`](url)`)``: ``string`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.realPathSync](https://doc.deno.land/deno/stable/~/Deno.realPathSync)"
- name: Deno.RecordType
  id: ~/deno.recordtype
  summary: The type of the resource record
  description: "# Deno.RecordType\n\nThe type of the resource record. Only the listed types are supported currently.\n\n``` typescript\ntype RecordType = \n```\n\n\\| \"A\"\n\n\\| \"AAAA\"\n\n\\| \"ANAME\"\n\n\\| \"CAA\"\n\n\\| \"CNAME\"\n\n\\| \"MX\"\n\n\\| \"NAPTR\"\n\n\\| \"NS\"\n\n\\| \"PTR\"\n\n\\| \"SOA\"\n\n\\| \"SRV\"\n\n\\| \"TXT\";\n\n## Type\n\n`\"A\"`` | ``\"AAAA\"`` | ``\"ANAME\"`` | ``\"CAA\"`` | ``\"CNAME\"`` | ``\"MX\"`` | ``\"NAPTR\"`` | ``\"NS\"`` | ``\"PTR\"`` | ``\"SOA\"`` | ``\"SRV\"`` | ``\"TXT\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.RecordType](https://doc.deno.land/deno/stable/~/Deno.RecordType)"
- name: Deno.refTimer
  id: ~/deno.reftimer
  summary: Make the timer of the given id block the event loop from finishing
  description: "# Deno.refTimer\n\nMake the timer of the given `id` block the event loop from finishing.\n\n``` typescript\n```\n\nfunction refTimer(id: number): void;\n\n`refTimer(``id``: ``number``)``: ``void`\n\n### Parameters\n\n`id``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.refTimer](https://doc.deno.land/deno/stable/~/Deno.refTimer)"
- name: Deno.remove
  id: ~/deno.remove
  summary: Removes the named file or directory
  description: "# Deno.remove\n\nRemoves the named file or directory.\n\n``` typescript\nawait Deno.remove(\"/path/to/empty_dir/or/file\");\nawait Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty directory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction remove(path: string \\| [URL](url), options?: [RemoveOptions](deno.removeoptions)): Promise\\<void\\>;\n\n`remove(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`RemoveOptions`](deno.removeoptions)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`RemoveOptions`](deno.removeoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.remove](https://doc.deno.land/deno/stable/~/Deno.remove)"
- name: Deno.RemoveOptions
  id: ~/deno.removeoptions
  summary: Options which can be set when using Deno.remove and Deno.removeSync
  description: "# Deno.RemoveOptions\n\nOptions which can be set when using [`Deno.remove`](deno#remove) and [`Deno.removeSync`](deno#removeSync).\n\n``` typescript\ninterface RemoveOptions {\n```\n\nrecursive?: boolean;\n\n}\n\n## Properties\n\n`recursive?``: ``boolean`\n\nDefaults to `false`. If set to `true`, path will be removed even if it's a non-empty directory.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.RemoveOptions](https://doc.deno.land/deno/stable/~/Deno.RemoveOptions)"
- name: Deno.removeSignalListener
  id: ~/deno.removesignallistener
  summary: Removes the given signal listener that has been registered with Deno.addSignalListener
  description: "# Deno.removeSignalListener\n\nRemoves the given signal listener that has been registered with [`Deno.addSignalListener`](deno#addSignalListener).\n\n``` typescript\nconst listener = () => {\n  console.log(\"SIGTERM!\")\n};\nDeno.addSignalListener(\"SIGTERM\", listener);\nDeno.removeSignalListener(\"SIGTERM\", listener);\n```\n\n*Note*: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break) are supported.\n\n``` typescript\n```\n\nfunction removeSignalListener(signal: [Signal](deno.signal), handler: () =\\> void): void;\n\n`removeSignalListener(``signal``: `[`Signal`](deno.signal)`, ``handler``: ``() => ``void``)``: ``void`\n\n### Parameters\n\n`signal``: `[`Signal`](deno.signal)\n\n`handler``: ``() => ``void`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.removeSignalListener](https://doc.deno.land/deno/stable/~/Deno.removeSignalListener)"
- name: Deno.removeSync
  id: ~/deno.removesync
  summary: Synchronously removes the named file or directory
  description: "# Deno.removeSync\n\nSynchronously removes the named file or directory.\n\n``` typescript\nDeno.removeSync(\"/path/to/empty_dir/or/file\");\nDeno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty directory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction removeSync(path: string \\| [URL](url), options?: [RemoveOptions](deno.removeoptions)): void;\n\n`removeSync(``path``: ``string`` | `[`URL`](url)`, ``options?``: `[`RemoveOptions`](deno.removeoptions)`)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`options?``: `[`RemoveOptions`](deno.removeoptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.removeSync](https://doc.deno.land/deno/stable/~/Deno.removeSync)"
- name: Deno.rename
  id: ~/deno.rename
  summary: Renames (moves) oldpath to newpath
  description: "# Deno.rename\n\nRenames (moves) `oldpath` to `newpath`. Paths may be files or directories. If `newpath` already exists and is not a directory, `rename()` replaces it. OS-specific restrictions may apply when `oldpath` and `newpath` are in different directories.\n\n``` typescript\nawait Deno.rename(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what they are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction rename(oldpath: string \\| [URL](url), newpath: string \\| [URL](url)): Promise\\<void\\>;\n\n`rename(``oldpath``: ``string`` | `[`URL`](url)`, ``newpath``: ``string`` | `[`URL`](url)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`oldpath``: ``string`` | `[`URL`](url)\n\n`newpath``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.rename](https://doc.deno.land/deno/stable/~/Deno.rename)"
- name: Deno.renameSync
  id: ~/deno.renamesync
  summary: Synchronously renames (moves) oldpath to newpath
  description: "# Deno.renameSync\n\nSynchronously renames (moves) `oldpath` to `newpath`. Paths may be files or directories. If `newpath` already exists and is not a directory, `renameSync()` replaces it. OS-specific restrictions may apply when `oldpath` and `newpath` are in different directories.\n\n``` typescript\nDeno.renameSync(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what they are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction renameSync(oldpath: string \\| [URL](url), newpath: string \\| [URL](url)): void;\n\n`renameSync(``oldpath``: ``string`` | `[`URL`](url)`, ``newpath``: ``string`` | `[`URL`](url)`)``: ``void`\n\n### Parameters\n\n`oldpath``: ``string`` | `[`URL`](url)\n\n`newpath``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.renameSync](https://doc.deno.land/deno/stable/~/Deno.renameSync)"
- name: Deno.RequestEvent
  id: ~/deno.requestevent
  summary: null
  description: "# Deno.RequestEvent\n\n``` typescript\ninterface RequestEvent {\n```\n\nreadonly request: [Request](request);\n\nrespondWith(r: [Response](response) \\| Promise\\<[Response](response)\\>): Promise\\<void\\>;\n\n}\n\n## Properties\n\n`readonly ``request``: `[`Request`](request)\n\n## Methods\n\n`respondWith(``r``: `[`Response`](response)` | ``Promise``<`[`Response`](response)`>``)``: ``Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.RequestEvent](https://doc.deno.land/deno/stable/~/Deno.RequestEvent)"
- name: Deno.resolveDns
  id: ~/deno.resolvedns
  summary: Performs DNS resolution against the given query, returning resolved records
  description: "# Deno.resolveDns\n\n``` typescript\n```\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType:\n\n\\| \"A\"\n\n\\| \"AAAA\"\n\n\\| \"ANAME\"\n\n\\| \"CNAME\"\n\n\\| \"NS\"\n\n\\| \"PTR\"\n\n,\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<string\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"CAA\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<[CAARecord](deno.caarecord)\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"MX\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<[MXRecord](deno.mxrecord)\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"NAPTR\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<[NAPTRRecord](deno.naptrrecord)\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"SOA\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<[SOARecord](deno.soarecord)\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"SRV\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<[SRVRecord](deno.srvrecord)\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: \"TXT\",\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<string\\[\\]\\[\\]\\>;\n\nfunction resolveDns(\n\nquery: string,\n\nrecordType: [RecordType](deno.recordtype),\n\noptions?: [ResolveDnsOptions](deno.resolvednsoptions),\n\n): Promise\\<string\\[\\] \\| [CAARecord](deno.caarecord)\\[\\] \\| [MXRecord](deno.mxrecord)\\[\\] \\| [NAPTRRecord](deno.naptrrecord)\\[\\] \\| [SOARecord](deno.soarecord)\\[\\] \\| [SRVRecord](deno.srvrecord)\\[\\] \\| string\\[\\]\\[\\]\\>;\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"A\"`` | ``\"AAAA\"`` | ``\"ANAME\"`` | ``\"CNAME\"`` | ``\"NS\"`` | ``\"PTR\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<``string``[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"A\"`` | ``\"AAAA\"`` | ``\"ANAME\"`` | ``\"CNAME\"`` | ``\"NS\"`` | ``\"PTR\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"CAA\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<`[`CAARecord`](deno.caarecord)`[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"CAA\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`CAARecord`](deno.caarecord)`[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"MX\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<`[`MXRecord`](deno.mxrecord)`[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"MX\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`MXRecord`](deno.mxrecord)`[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"NAPTR\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<`[`NAPTRRecord`](deno.naptrrecord)`[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"NAPTR\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`NAPTRRecord`](deno.naptrrecord)`[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"SOA\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<`[`SOARecord`](deno.soarecord)`[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"SOA\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`SOARecord`](deno.soarecord)`[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"SRV\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<`[`SRVRecord`](deno.srvrecord)`[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"SRV\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`SRVRecord`](deno.srvrecord)`[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: ``\"TXT\"``, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<``string``[]``[]``>`\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: ``\"TXT\"`\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``[]``[]``>`\n\n`resolveDns(``query``: ``string``, ``recordType``: `[`RecordType`](deno.recordtype)`, ``options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)`)``: ``Promise``<``string``[]`` | `[`CAARecord`](deno.caarecord)`[]`` | `[`MXRecord`](deno.mxrecord)`[]`` | `[`NAPTRRecord`](deno.naptrrecord)`[]`` | `[`SOARecord`](deno.soarecord)`[]`` | `[`SRVRecord`](deno.srvrecord)`[]`` | ``string``[]``[]``>`\n\nPerforms DNS resolution against the given query, returning resolved records. Fails in the cases such as:\n\n- the query is in invalid format\n- the options have an invalid parameter, e.g. `nameServer.port` is beyond the range of 16-bit unsigned integer\n- timed out\n\n``` typescript\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n\n### Parameters\n\n`query``: ``string`\n\n`recordType``: `[`RecordType`](deno.recordtype)\n\n`options?``: `[`ResolveDnsOptions`](deno.resolvednsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``string``[]`` | `[`CAARecord`](deno.caarecord)`[]`` | `[`MXRecord`](deno.mxrecord)`[]`` | `[`NAPTRRecord`](deno.naptrrecord)`[]`` | `[`SOARecord`](deno.soarecord)`[]`` | `[`SRVRecord`](deno.srvrecord)`[]`` | ``string``[]``[]``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.resolveDns](https://doc.deno.land/deno/stable/~/Deno.resolveDns)"
- name: Deno.ResolveDnsOptions
  id: ~/deno.resolvednsoptions
  summary: The name server to be used for lookups
  description: "# Deno.ResolveDnsOptions\n\n``` typescript\ninterface ResolveDnsOptions {\n```\n\nnameServer?: {\n\nipAddr: string;\n\nport?: number;\n\n};\n\n}\n\n## Properties\n\n`nameServer?``: ``{`\n\nipAddr: string;\n\nport?: number;\n\n}\n\nThe name server to be used for lookups. If not specified, defaults to the system configuration e.g. `/etc/resolv.conf` on Unix.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ResolveDnsOptions](https://doc.deno.land/deno/stable/~/Deno.ResolveDnsOptions)"
- name: Deno.ResourceMap
  id: ~/deno.resourcemap
  summary: A map of open resources that Deno is tracking
  description: "# Deno.ResourceMap\n\nA map of open resources that Deno is tracking. The key is the resource ID (*rid*) and the value is its representation.\n\n``` typescript\ninterface ResourceMap {\n```\n\n\\[rid: number\\]: unknown;\n\n}\n\n## Index Signatures\n\n\\[rid: number\\]: unknown\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.ResourceMap](https://doc.deno.land/deno/stable/~/Deno.ResourceMap)"
- name: Deno.resources
  id: ~/deno.resources
  summary: Returns a map of open resource IDs (rid) along with their string representations
  description: "# Deno.resources\n\nReturns a map of open resource IDs (*rid*) along with their string representations. This is an internal API and as such resource representation has `unknown` type; that means it can change any time and should not be depended upon.\n\n``` typescript\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\nDeno.openSync('../test.file');\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n```\n\n``` typescript\n```\n\nfunction resources(): [ResourceMap](deno.resourcemap);\n\n`resources()``: `[`ResourceMap`](deno.resourcemap)\n\n### Return Type\n\n[`ResourceMap`](deno.resourcemap)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.resources](https://doc.deno.land/deno/stable/~/Deno.resources)"
- name: Deno.run
  id: ~/deno.run
  summary: Spawns new subprocess
  description: "# Deno.run\n\nSpawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`, an array of program arguments, the first of which is the binary.\n\n``` typescript\nconst p = Deno.run({\n  cmd: [\"curl\", \"https://example.com\"],\n});\nconst status = await p.status();\n```\n\nSubprocess uses same working directory as parent process unless `opt.cwd` is specified.\n\nEnvironmental variables from parent process can be cleared using `opt.clearEnv`. Doesn't guarantee that only `opt.env` variables are present, as the OS may set environmental variables for processes.\n\nEnvironmental variables for subprocess can be specified using `opt.env` mapping.\n\n`opt.uid` sets the child process’s user ID. This translates to a setuid call in the child process. Failure in the setuid call will cause the spawn to fail.\n\n`opt.gid` is similar to `opt.uid`, but sets the group ID of the child process. This has the same semantics as the uid field.\n\nBy default subprocess inherits stdio of parent process. To change this this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set independently to a resource ID (*rid*) of an open file, `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- *number*: the resource ID of an open file/resource. This allows you to read or write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`.\n\nDetails of the spawned process are returned as an instance of [`Deno.Process`](deno#Process).\n\nRequires `allow-run` permission.\n\n``` typescript\n```\n\nfunction run\\<T extends [RunOptions](deno.runoptions) = [RunOptions](deno.runoptions)\\>(opt: T): [Process](deno.process)\\<T\\>;\n\n`run``<``T`` extends `[`RunOptions`](deno.runoptions)` = `[`RunOptions`](deno.runoptions)`>``(``opt``: ``T``)``: `[`Process`](deno.process)`<``T``>`\n\n### Type Parameters\n\n`T`` extends `[`RunOptions`](deno.runoptions)` = `[`RunOptions`](deno.runoptions)\n\n### Parameters\n\n`opt``: ``T`\n\n### Return Type\n\n[`Process`](deno.process)`<``T``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.run](https://doc.deno.land/deno/stable/~/Deno.run)"
- name: Deno.RunOptions
  id: ~/deno.runoptions
  summary: Options which can be used with Deno.run
  description: "# Deno.RunOptions\n\nOptions which can be used with [`Deno.run`](deno#run).\n\n``` typescript\ninterface RunOptions {\n```\n\ncmd: readonly string\\[\\] \\| \\[string \\| [URL](url), ...string\\[\\]\\];\n\ncwd?: string;\n\nenv?: Record\\<string, string\\>;\n\nstderr?:\n\n\\| \"inherit\"\n\n\\| \"piped\"\n\n\\| \"null\"\n\n\\| number;\n\nstdin?:\n\n\\| \"inherit\"\n\n\\| \"piped\"\n\n\\| \"null\"\n\n\\| number;\n\nstdout?:\n\n\\| \"inherit\"\n\n\\| \"piped\"\n\n\\| \"null\"\n\n\\| number;\n\n}\n\n## Properties\n\n`cmd``: ``readonly`` ``string``[]`` | ``[``string`` | `[`URL`](url)`, ``...``string``[]``]`\n\nArguments to pass.\n\n*Note*: the first element needs to be a path to the executable that is being run.\n\n`cwd?``: ``string`\n\nThe current working directory that should be used when running the sub-process.\n\n`env?``: ``Record``<``string``, ``string``>`\n\nAny environment variables to be set when running the sub-process.\n\n`stderr?``: ``\"inherit\"`` | ``\"piped\"`` | ``\"null\"`` | ``number`\n\nBy default subprocess inherits `stderr` of parent process. To change this this option can be set to a resource ID (*rid*) of an open file, `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- *number*: the resource ID of an open file/resource. This allows you to write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`.\n\n`stdin?``: ``\"inherit\"`` | ``\"piped\"`` | ``\"null\"`` | ``number`\n\nBy default subprocess inherits `stdin` of parent process. To change this this option can be set to a resource ID (*rid*) of an open file, `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- *number*: the resource ID of an open file/resource. This allows you to read from a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`.\n\n`stdout?``: ``\"inherit\"`` | ``\"piped\"`` | ``\"null\"`` | ``number`\n\nBy default subprocess inherits `stdout` of parent process. To change this this option can be set to a resource ID (*rid*) of an open file, `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- *number*: the resource ID of an open file/resource. This allows you to write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.RunOptions](https://doc.deno.land/deno/stable/~/Deno.RunOptions)"
- name: Deno.RunPermissionDescriptor
  id: ~/deno.runpermissiondescriptor
  summary: null
  description: "# Deno.RunPermissionDescriptor\n\n``` typescript\ninterface RunPermissionDescriptor {\n```\n\ncommand?: string \\| [URL](url);\n\nname: \"run\";\n\n}\n\n## Properties\n\n`command?``: ``string`` | `[`URL`](url)\n\n`name``: ``\"run\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.RunPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.RunPermissionDescriptor)"
- name: Deno.seek
  id: ~/deno.seek
  summary: Seek a resource ID (rid) to the given offset under mode given by whence
  description: "# Deno.seek\n\nSeek a resource ID (`rid`) to the given `offset` under mode given by `whence`. The call resolves to the new position within the resource (bytes from the start).\n\n``` typescript\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n``` typescript\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\nfile.close();\n```\n\n``` typescript\n```\n\nfunction seek(\n\nrid: number,\n\noffset: number,\n\nwhence: [SeekMode](deno.seekmode),\n\n): Promise\\<number\\>;\n\n`seek(``rid``: ``number``, ``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``Promise``<``number``>`\n\n### Parameters\n\n`rid``: ``number`\n\n`offset``: ``number`\n\n`whence``: `[`SeekMode`](deno.seekmode)\n\n### Return Type\n\n`Promise``<``number``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.seek](https://doc.deno.land/deno/stable/~/Deno.seek)"
- name: Deno.Seeker
  id: ~/deno.seeker
  summary: An abstract interface which when implemented provides an interface to seek within an open file/resource asynchronously
  description: "# Deno.Seeker\n\nAn abstract interface which when implemented provides an interface to seek within an open file/resource asynchronously.\n\n``` typescript\ninterface Seeker {\n```\n\nseek(offset: number, whence: [SeekMode](deno.seekmode)): Promise\\<number\\>;\n\n}\n\n## Methods\n\n`seek(``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``Promise``<``number``>`\n\nSeek sets the offset for the next `read()` or `write()` to offset, interpreted according to `whence`: `Start` means relative to the start of the file, `Current` means relative to the current offset, and `End` means relative to the end. Seek resolves to the new offset relative to the start of the file.\n\nSeeking to an offset before the start of the file is an error. Seeking to any positive offset is legal, but the behavior of subsequent I/O operations on the underlying object is implementation-dependent.\n\nIt resolves with the updated offset.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Seeker](https://doc.deno.land/deno/stable/~/Deno.Seeker)"
- name: Deno.SeekerSync
  id: ~/deno.seekersync
  summary: An abstract interface which when implemented provides an interface to seek within an open file/resource synchronously
  description: "# Deno.SeekerSync\n\nAn abstract interface which when implemented provides an interface to seek within an open file/resource synchronously.\n\n``` typescript\ninterface SeekerSync {\n```\n\nseekSync(offset: number, whence: [SeekMode](deno.seekmode)): number;\n\n}\n\n## Methods\n\n`seekSync(``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``number`\n\nSeek sets the offset for the next `readSync()` or `writeSync()` to offset, interpreted according to `whence`: `Start` means relative to the start of the file, `Current` means relative to the current offset, and `End` means relative to the end.\n\nSeeking to an offset before the start of the file is an error. Seeking to any positive offset is legal, but the behavior of subsequent I/O operations on the underlying object is implementation-dependent.\n\nIt returns the updated offset.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SeekerSync](https://doc.deno.land/deno/stable/~/Deno.SeekerSync)"
- name: Deno.SeekMode
  id: ~/deno.seekmode
  summary: A enum which defines the seek mode for IO related APIs that support seeking
  description: "# Deno.SeekMode\n\nA enum which defines the seek mode for IO related APIs that support seeking.\n\n``` typescript\nenum SeekMode { \n```\n\nStart = 0,\n\nCurrent = 1,\n\nEnd = 2,\n\n}\n\n## Members\n\n`SeekMode.Current`` = ``1`\n\n`SeekMode.End`` = ``2`\n\n`SeekMode.Start`` = ``0`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SeekMode](https://doc.deno.land/deno/stable/~/Deno.SeekMode)"
- name: Deno.seekSync
  id: ~/deno.seeksync
  summary: Synchronously seek a resource ID (rid) to the given offset under mode given by whence
  description: "# Deno.seekSync\n\nSynchronously seek a resource ID (`rid`) to the given `offset` under mode given by `whence`. The new position within the resource (bytes from the start) is returned.\n\n``` typescript\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n``` typescript\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\nfile.close();\n```\n\n``` typescript\n```\n\nfunction seekSync(\n\nrid: number,\n\noffset: number,\n\nwhence: [SeekMode](deno.seekmode),\n\n): number;\n\n`seekSync(``rid``: ``number``, ``offset``: ``number``, ``whence``: `[`SeekMode`](deno.seekmode)`)``: ``number`\n\n### Parameters\n\n`rid``: ``number`\n\n`offset``: ``number`\n\n`whence``: `[`SeekMode`](deno.seekmode)\n\n### Return Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.seekSync](https://doc.deno.land/deno/stable/~/Deno.seekSync)"
- name: Deno.serveHttp
  id: ~/deno.servehttp
  summary: Services HTTP requests given a TCP or TLS socket
  description: "# Deno.serveHttp\n\nServices HTTP requests given a TCP or TLS socket.\n\n``` typescript\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  e.respondWith(new Response(\"Hello World\"));\n}\n```\n\nIf `httpConn.nextRequest()` encounters an error or returns `null` then the underlying HttpConn resource is closed automatically.\n\nAlternatively, you can also use the Async Iterator approach:\n\n``` typescript\nasync function handleHttp(conn: Deno.Conn) {\n  for await (const e of Deno.serveHttp(conn)) {\n    e.respondWith(new Response(\"Hello World\"));\n  }\n}\n\nfor await (const conn of Deno.listen({ port: 80 })) {\n  handleHttp(conn);\n}\n```\n\n``` typescript\n```\n\nfunction serveHttp(conn: [Conn](deno.conn)): [HttpConn](deno.httpconn);\n\n`serveHttp(``conn``: `[`Conn`](deno.conn)`)``: `[`HttpConn`](deno.httpconn)\n\n### Parameters\n\n`conn``: `[`Conn`](deno.conn)\n\n### Return Type\n\n[`HttpConn`](deno.httpconn)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.serveHttp](https://doc.deno.land/deno/stable/~/Deno.serveHttp)"
- name: Deno.SetRawOptions
  id: ~/deno.setrawoptions
  summary: 'UNSTABLE: new API, yet to be vetted'
  description: "# Deno.SetRawOptions\n\n**UNSTABLE**: new API, yet to be vetted.\n\n``` typescript\ninterface SetRawOptions {\n```\n\ncbreak: boolean;\n\n}\n\n## Properties\n\n`cbreak``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SetRawOptions](https://doc.deno.land/deno/stable/~/Deno.SetRawOptions)"
- name: Deno.shutdown
  id: ~/deno.shutdown
  summary: Shutdown socket send operations
  description: "# Deno.shutdown\n\nShutdown socket send operations.\n\nMatches behavior of POSIX shutdown(3).\n\n``` typescript\nconst listener = Deno.listen({ port: 80 });\nconst conn = await listener.accept();\nDeno.shutdown(conn.rid);\n```\n\n``` typescript\n```\n\nfunction shutdown(rid: number): Promise\\<void\\>;\n\n`shutdown(``rid``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`rid``: ``number`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.shutdown](https://doc.deno.land/deno/stable/~/Deno.shutdown)"
- name: Deno.Signal
  id: ~/deno.signal
  summary: Operating signals which can be listened for or sent to sub-processes
  description: "# Deno.Signal\n\nOperating signals which can be listened for or sent to sub-processes. What signals and what their standard behaviors are are OS dependent.\n\n``` typescript\ntype Signal = \n```\n\n\\| \"SIGABRT\"\n\n\\| \"SIGALRM\"\n\n\\| \"SIGBREAK\"\n\n\\| \"SIGBUS\"\n\n\\| \"SIGCHLD\"\n\n\\| \"SIGCONT\"\n\n\\| \"SIGEMT\"\n\n\\| \"SIGFPE\"\n\n\\| \"SIGHUP\"\n\n\\| \"SIGILL\"\n\n\\| \"SIGINFO\"\n\n\\| \"SIGINT\"\n\n\\| \"SIGIO\"\n\n\\| \"SIGKILL\"\n\n\\| \"SIGPIPE\"\n\n\\| \"SIGPROF\"\n\n\\| \"SIGPWR\"\n\n\\| \"SIGQUIT\"\n\n\\| \"SIGSEGV\"\n\n\\| \"SIGSTKFLT\"\n\n\\| \"SIGSTOP\"\n\n\\| \"SIGSYS\"\n\n\\| \"SIGTERM\"\n\n\\| \"SIGTRAP\"\n\n\\| \"SIGTSTP\"\n\n\\| \"SIGTTIN\"\n\n\\| \"SIGTTOU\"\n\n\\| \"SIGURG\"\n\n\\| \"SIGUSR1\"\n\n\\| \"SIGUSR2\"\n\n\\| \"SIGVTALRM\"\n\n\\| \"SIGWINCH\"\n\n\\| \"SIGXCPU\"\n\n\\| \"SIGXFSZ\";\n\n## Type\n\n`\"SIGABRT\"`` | ``\"SIGALRM\"`` | ``\"SIGBREAK\"`` | ``\"SIGBUS\"`` | ``\"SIGCHLD\"`` | ``\"SIGCONT\"`` | ``\"SIGEMT\"`` | ``\"SIGFPE\"`` | ``\"SIGHUP\"`` | ``\"SIGILL\"`` | ``\"SIGINFO\"`` | ``\"SIGINT\"`` | ``\"SIGIO\"`` | ``\"SIGKILL\"`` | ``\"SIGPIPE\"`` | ``\"SIGPROF\"`` | ``\"SIGPWR\"`` | ``\"SIGQUIT\"`` | ``\"SIGSEGV\"`` | ``\"SIGSTKFLT\"`` | ``\"SIGSTOP\"`` | ``\"SIGSYS\"`` | ``\"SIGTERM\"`` | ``\"SIGTRAP\"`` | ``\"SIGTSTP\"`` | ``\"SIGTTIN\"`` | ``\"SIGTTOU\"`` | ``\"SIGURG\"`` | ``\"SIGUSR1\"`` | ``\"SIGUSR2\"`` | ``\"SIGVTALRM\"`` | ``\"SIGWINCH\"`` | ``\"SIGXCPU\"`` | ``\"SIGXFSZ\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Signal](https://doc.deno.land/deno/stable/~/Deno.Signal)"
- name: Deno.SOARecord
  id: ~/deno.soarecord
  summary: If resolveDns is called with "SOA" record type specified, it will return an array of this interface
  description: "# Deno.SOARecord\n\nIf `resolveDns` is called with \"SOA\" record type specified, it will return an array of this interface.\n\n``` typescript\ninterface SOARecord {\n```\n\nexpire: number;\n\nminimum: number;\n\nmname: string;\n\nrefresh: number;\n\nretry: number;\n\nrname: string;\n\nserial: number;\n\n}\n\n## Properties\n\n`expire``: ``number`\n\n`minimum``: ``number`\n\n`mname``: ``string`\n\n`refresh``: ``number`\n\n`retry``: ``number`\n\n`rname``: ``string`\n\n`serial``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SOARecord](https://doc.deno.land/deno/stable/~/Deno.SOARecord)"
- name: Deno.SRVRecord
  id: ~/deno.srvrecord
  summary: If resolveDns is called with "SRV" record type specified, it will return an array of this interface
  description: "# Deno.SRVRecord\n\nIf `resolveDns` is called with \"SRV\" record type specified, it will return an array of this interface.\n\n``` typescript\ninterface SRVRecord {\n```\n\nport: number;\n\npriority: number;\n\ntarget: string;\n\nweight: number;\n\n}\n\n## Properties\n\n`port``: ``number`\n\n`priority``: ``number`\n\n`target``: ``string`\n\n`weight``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SRVRecord](https://doc.deno.land/deno/stable/~/Deno.SRVRecord)"
- name: Deno.startTls
  id: ~/deno.starttls
  summary: Start TLS handshake from an existing connection using an optional list of CA certificates, and hostname (default is "127.0.0.1")
  description: "# Deno.startTls\n\nStart TLS handshake from an existing connection using an optional list of CA certificates, and hostname (default is \"127.0.0.1\"). Specifying CA certs is optional. By default the configured root certificates are used. Using this function requires that the other end of the connection is prepared for a TLS handshake.\n\n``` typescript\nconst conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\nconst tlsConn = await Deno.startTls(conn, { caCerts: [caCert], hostname: \"localhost\" });\n```\n\nRequires `allow-net` permission.\n\n``` typescript\n```\n\nfunction startTls(conn: [Conn](deno.conn), options?: [StartTlsOptions](deno.starttlsoptions)): Promise\\<[TlsConn](deno.tlsconn)\\>;\n\n`startTls(``conn``: `[`Conn`](deno.conn)`, ``options?``: `[`StartTlsOptions`](deno.starttlsoptions)`)``: ``Promise``<`[`TlsConn`](deno.tlsconn)`>`\n\n### Parameters\n\n`conn``: `[`Conn`](deno.conn)\n\n`options?``: `[`StartTlsOptions`](deno.starttlsoptions)` ``optional`\n\n### Return Type\n\n`Promise``<`[`TlsConn`](deno.tlsconn)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.startTls](https://doc.deno.land/deno/stable/~/Deno.startTls)"
- name: Deno.StartTlsOptions
  id: ~/deno.starttlsoptions
  summary: A list of root certificates that will be used in addition to the default root certificates to verify the peer's certificate
  description: "# Deno.StartTlsOptions\n\n``` typescript\ninterface StartTlsOptions {\n```\n\ncaCerts?: string\\[\\];\n\nhostname?: string;\n\n}\n\n## Properties\n\n`caCerts?``: ``string``[]`\n\nA list of root certificates that will be used in addition to the default root certificates to verify the peer's certificate.\n\nMust be in PEM format.\n\n`hostname?``: ``string`\n\nA literal IP address or host name that can be resolved to an IP address. If not specified, defaults to `127.0.0.1`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.StartTlsOptions](https://doc.deno.land/deno/stable/~/Deno.StartTlsOptions)"
- name: Deno.stat
  id: ~/deno.stat
  summary: Resolves to a Deno.FileInfo for the specified path
  description: "# Deno.stat\n\nResolves to a [`Deno.FileInfo`](deno#FileInfo) for the specified `path`. Will always follow symlinks.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.stat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction stat(path: string \\| [URL](url)): Promise\\<[FileInfo](deno.fileinfo)\\>;\n\n`stat(``path``: ``string`` | `[`URL`](url)`)``: ``Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n`Promise``<`[`FileInfo`](deno.fileinfo)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.stat](https://doc.deno.land/deno/stable/~/Deno.stat)"
- name: Deno.statSync
  id: ~/deno.statsync
  summary: Synchronously returns a Deno.FileInfo for the specified path
  description: "# Deno.statSync\n\nSynchronously returns a [`Deno.FileInfo`](deno#FileInfo) for the specified `path`. Will always follow symlinks.\n\n``` typescript\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.statSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction statSync(path: string \\| [URL](url)): [FileInfo](deno.fileinfo);\n\n`statSync(``path``: ``string`` | `[`URL`](url)`)``: `[`FileInfo`](deno.fileinfo)\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n### Return Type\n\n[`FileInfo`](deno.fileinfo)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.statSync](https://doc.deno.land/deno/stable/~/Deno.statSync)"
- name: Deno.stderr
  id: ~/deno.stderr
  summary: A reference to stderr which can be used to write directly to stderr
  description: "# Deno.stderr\n\nA reference to `stderr` which can be used to write directly to `stderr`. It implements the Deno specific [`Writer`](deno.writer), [`WriterSync`](deno.writersync), and [`Closer`](deno.closer) interfaces as well as provides a [`WritableStream`](writablestream) interface.\n\nThese are low level constructs, and the [`console`](console) interface is a more straight forward way to interact with `stdout` and `stderr`.\n\n``` typescript\nconst stderr: \n```\n\n& [Writer](deno.writer)\n\n& [WriterSync](deno.writersync)\n\n& [Closer](deno.closer)\n\n& {\n\nreadonly rid: number;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n};\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.stderr](https://doc.deno.land/deno/stable/~/Deno.stderr)"
- name: Deno.stdin
  id: ~/deno.stdin
  summary: A reference to stdin which can be used to read directly from stdin
  description: "# Deno.stdin\n\nA reference to `stdin` which can be used to read directly from `stdin`. It implements the Deno specific [`Reader`](deno.reader), [`ReaderSync`](deno.readersync), and [`Closer`](deno.closer) interfaces as well as provides a [`ReadableStream`](readablestream) interface.\n\n### Reading chunks from the readable stream\n\n``` typescript\nconst decoder = new TextDecoder();\nfor await (const chunk of Deno.stdin.readable) {\n  const text = decoder.decode(chunk);\n  // do something with the text\n}\n```\n\n``` typescript\nconst stdin: \n```\n\n& [Reader](deno.reader)\n\n& [ReaderSync](deno.readersync)\n\n& [Closer](deno.closer)\n\n& {\n\nreadonly rid: number;\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nsetRaw(mode: boolean, options?: [SetRawOptions](deno.setrawoptions)): void;\n\n};\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.stdin](https://doc.deno.land/deno/stable/~/Deno.stdin)"
- name: Deno.stdout
  id: ~/deno.stdout
  summary: A reference to stdout which can be used to write directly to stdout
  description: "# Deno.stdout\n\nA reference to `stdout` which can be used to write directly to `stdout`. It implements the Deno specific [`Writer`](deno.writer), [`WriterSync`](deno.writersync), and [`Closer`](deno.closer) interfaces as well as provides a [`WritableStream`](writablestream) interface.\n\nThese are low level constructs, and the [`console`](console) interface is a more straight forward way to interact with `stdout` and `stderr`.\n\n``` typescript\nconst stdout: \n```\n\n& [Writer](deno.writer)\n\n& [WriterSync](deno.writersync)\n\n& [Closer](deno.closer)\n\n& {\n\nreadonly rid: number;\n\nreadonly writable: [WritableStream](writablestream)\\<Uint8Array\\>;\n\n};\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.stdout](https://doc.deno.land/deno/stable/~/Deno.stdout)"
- name: Deno.symlink
  id: ~/deno.symlink
  summary: Creates newpath as a symbolic link to oldpath
  description: "# Deno.symlink\n\nCreates `newpath` as a symbolic link to `oldpath`.\n\nThe options.type parameter can be set to `file` or `dir`. This argument is only available on Windows and ignored on other platforms.\n\n``` typescript\nawait Deno.symlink(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction symlink(\n\noldpath: string \\| [URL](url),\n\nnewpath: string \\| [URL](url),\n\noptions?: [SymlinkOptions](deno.symlinkoptions),\n\n): Promise\\<void\\>;\n\n`symlink(``oldpath``: ``string`` | `[`URL`](url)`, ``newpath``: ``string`` | `[`URL`](url)`, ``options?``: `[`SymlinkOptions`](deno.symlinkoptions)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`oldpath``: ``string`` | `[`URL`](url)\n\n`newpath``: ``string`` | `[`URL`](url)\n\n`options?``: `[`SymlinkOptions`](deno.symlinkoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.symlink](https://doc.deno.land/deno/stable/~/Deno.symlink)"
- name: Deno.SymlinkOptions
  id: ~/deno.symlinkoptions
  summary: null
  description: "# Deno.SymlinkOptions\n\n``` typescript\ntype SymlinkOptions = {\n```\n\ntype: \"file\" \\| \"dir\";\n\n};\n\n## Type\n\n`{`\n\ntype: \"file\" \\| \"dir\";\n\n}\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SymlinkOptions](https://doc.deno.land/deno/stable/~/Deno.SymlinkOptions)"
- name: Deno.symlinkSync
  id: ~/deno.symlinksync
  summary: Creates newpath as a symbolic link to oldpath
  description: "# Deno.symlinkSync\n\nCreates `newpath` as a symbolic link to `oldpath`.\n\nThe options.type parameter can be set to `file` or `dir`. This argument is only available on Windows and ignored on other platforms.\n\n``` typescript\nDeno.symlinkSync(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n\n``` typescript\n```\n\nfunction symlinkSync(\n\noldpath: string \\| [URL](url),\n\nnewpath: string \\| [URL](url),\n\noptions?: [SymlinkOptions](deno.symlinkoptions),\n\n): void;\n\n`symlinkSync(``oldpath``: ``string`` | `[`URL`](url)`, ``newpath``: ``string`` | `[`URL`](url)`, ``options?``: `[`SymlinkOptions`](deno.symlinkoptions)`)``: ``void`\n\n### Parameters\n\n`oldpath``: ``string`` | `[`URL`](url)\n\n`newpath``: ``string`` | `[`URL`](url)\n\n`options?``: `[`SymlinkOptions`](deno.symlinkoptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.symlinkSync](https://doc.deno.land/deno/stable/~/Deno.symlinkSync)"
- name: Deno.SysPermissionDescriptor
  id: ~/deno.syspermissiondescriptor
  summary: null
  description: "# Deno.SysPermissionDescriptor\n\n``` typescript\ninterface SysPermissionDescriptor {\n```\n\nkind?:\n\n\\| \"loadavg\"\n\n\\| \"hostname\"\n\n\\| \"systemMemoryInfo\"\n\n\\| \"networkInterfaces\"\n\n\\| \"osRelease\"\n\n\\| \"getUid\"\n\n\\| \"getGid\";\n\nname: \"sys\";\n\n}\n\n## Properties\n\n`kind?``: ``\"loadavg\"`` | ``\"hostname\"`` | ``\"systemMemoryInfo\"`` | ``\"networkInterfaces\"`` | ``\"osRelease\"`` | ``\"getUid\"`` | ``\"getGid\"`\n\n`name``: ``\"sys\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.SysPermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.SysPermissionDescriptor)"
- name: Deno.TcpConn
  id: ~/deno.tcpconn
  summary: 'UNSTABLE: new API, see https://github.com/denoland/deno/issues/13617'
  description: "# Deno.TcpConn\n\n``` typescript\ninterface TcpConn  extends Conn {\n```\n\nsetKeepAlive(keepalive?: boolean): void;\n\nsetNoDelay(nodelay?: boolean): void;\n\n}\n\n## Extends\n\n[`Conn`](deno.conn)\n\n## Methods\n\n`setKeepAlive(``keepalive?``: ``boolean``)``: ``void`\n\n**UNSTABLE**: new API, see <https://github.com/denoland/deno/issues/13617>.\n\nEnable/disable keep-alive functionality.\n\n`setNoDelay(``nodelay?``: ``boolean``)``: ``void`\n\n**UNSTABLE**: new API, see <https://github.com/denoland/deno/issues/13617>.\n\nEnable/disable the use of Nagle's algorithm. Defaults to true.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TcpConn](https://doc.deno.land/deno/stable/~/Deno.TcpConn)"
- name: Deno.test
  id: ~/deno.test
  summary: Register a test which will be run when deno test is used on the command line and the containing module looks like a test module
  description: "# Deno.test\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n\n``` typescript\n```\n\nfunction test(t: [TestDefinition](deno.testdefinition)): void;\n\nfunction test(name: string, fn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>): void;\n\nfunction test(fn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>): void;\n\nfunction test(\n\nname: string,\n\noptions: Omit\\<[TestDefinition](deno.testdefinition), \"fn\" \\| \"name\"\\>,\n\nfn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>,\n\n): void;\n\nfunction test(options: Omit\\<[TestDefinition](deno.testdefinition), \"fn\"\\>, fn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>): void;\n\nfunction test(options: Omit\\<[TestDefinition](deno.testdefinition), \"fn\" \\| \"name\"\\>, fn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>): void;\n\n`test(``t``: `[`TestDefinition`](deno.testdefinition)`)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n\n### Parameters\n\n`t``: `[`TestDefinition`](deno.testdefinition)\n\n### Return Type\n\n`void`\n\n`test(``name``: ``string``, ``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n\n### Parameters\n\n`name``: ``string`\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n### Return Type\n\n`void`\n\n`test(``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n\n### Parameters\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n### Return Type\n\n`void`\n\n`test(``name``: ``string``, ``options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"`` | ``\"name\"``>``, ``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n``` typescript\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n\n### Parameters\n\n`name``: ``string`\n\n`options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"`` | ``\"name\"``>`\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n### Return Type\n\n`void`\n\n`test(``options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"``>``, ``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n  {\n    name: \"My test description\",\n    permissions: { read: true },\n  },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  {\n    name: \"My async test description\",\n    permissions: { read: false },\n  },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n\n### Parameters\n\n`options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"``>`\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n### Return Type\n\n`void`\n\n`test(``options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"`` | ``\"name\"``>``, ``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``void`\n\nRegister a test which will be run when `deno test` is used on the command line and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n``` typescript\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n\n### Parameters\n\n`options``: ``Omit``<`[`TestDefinition`](deno.testdefinition)`, ``\"fn\"`` | ``\"name\"``>`\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.test](https://doc.deno.land/deno/stable/~/Deno.test)"
- name: Deno.TestContext
  id: ~/deno.testcontext
  summary: Context that is passed to a testing function, which can be used to either gain information about the current test, or register additional test steps within the current test
  description: "# Deno.TestContext\n\nContext that is passed to a testing function, which can be used to either gain information about the current test, or register additional test steps within the current test.\n\n``` typescript\ninterface TestContext {\n```\n\nname: string;\n\norigin: string;\n\nparent?: [TestContext](deno.testcontext);\n\nstep(definition: [TestStepDefinition](deno.teststepdefinition)): Promise\\<boolean\\>;\n\nstep(name: string, fn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>): Promise\\<boolean\\>;\n\n}\n\n## Properties\n\n`name``: ``string`\n\nThe current test name.\n\n`origin``: ``string`\n\nThe string URL of the current test.\n\n`parent?``: `[`TestContext`](deno.testcontext)\n\nIf the current test is a step of another test, the parent test context will be set here.\n\n## Methods\n\n`step(``definition``: `[`TestStepDefinition`](deno.teststepdefinition)`)``: ``Promise``<``boolean``>`\n\nRun a sub step of the parent test or step. Returns a promise that resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n``` typescript\nDeno.test({\n  name: \"a parent test\",\n  async fn(t) {\n    console.log(\"before the step\");\n    await t.step({\n      name: \"step 1\",\n      fn(t) {\n        console.log(\"current step:\", t.name);\n      }\n    });\n    console.log(\"after the step\");\n  }\n});\n```\n\n`step(``name``: ``string``, ``fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>``)``: ``Promise``<``boolean``>`\n\nRun a sub step of the parent test or step. Returns a promise that resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n``` typescript\nDeno.test(\n  \"a parent test\",\n  async (t) => {\n    console.log(\"before the step\");\n    await t.step(\n      \"step 1\",\n      (t) => {\n        console.log(\"current step:\", t.name);\n      }\n    );\n    console.log(\"after the step\");\n  }\n);\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TestContext](https://doc.deno.land/deno/stable/~/Deno.TestContext)"
- name: Deno.TestDefinition
  id: ~/deno.testdefinition
  summary: If truthy the current test step will be ignored
  description: "# Deno.TestDefinition\n\n``` typescript\ninterface TestDefinition {\n```\n\nfn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>;\n\nignore?: boolean;\n\nname: string;\n\nonly?: boolean;\n\npermissions?: [PermissionOptions](deno.permissionoptions);\n\nsanitizeExit?: boolean;\n\nsanitizeOps?: boolean;\n\nsanitizeResources?: boolean;\n\n}\n\n## Properties\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\n`ignore?``: ``boolean`\n\nIf truthy the current test step will be ignored.\n\nIt is a quick way to skip over a step, but also can be used for conditional logic, like determining if an environment feature is present.\n\n`name``: ``string`\n\nThe name of the test.\n\n`only?``: ``boolean`\n\nIf at least one test has `only` set to `true`, only run tests that have `only` set to `true` and fail the test suite.\n\n`permissions?``: `[`PermissionOptions`](deno.permissionoptions)\n\nSpecifies the permissions that should be used to run the test.\n\nSet this to \"inherit\" to keep the calling runtime permissions, set this to \"none\" to revoke all permissions, or set a more specific set of permissions using a [`PermissionOptionsObject`](deno.permissionoptionsobject).\n\nDefaults to `\"inherit\"`.\n\n`sanitizeExit?``: ``boolean`\n\nEnsure the test case does not prematurely cause the process to exit, for example via a call to [`Deno.exit`](deno#exit).\n\nDefaults to `true`.\n\n`sanitizeOps?``: ``boolean`\n\nCheck that the number of async completed operations after the test step is the same as number of dispatched operations. This ensures that the code tested does not start async operations which it then does not await. This helps in preventing logic errors and memory leaks in the application code.\n\nDefaults to `true`.\n\n`sanitizeResources?``: ``boolean`\n\nEnsure the test step does not \"leak\" resources - like open files or network connections - by ensuring the open resources at the start of the test match the open resources at the end of the test.\n\nDefaults to `true`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TestDefinition](https://doc.deno.land/deno/stable/~/Deno.TestDefinition)"
- name: Deno.TestStepDefinition
  id: ~/deno.teststepdefinition
  summary: The test function that will be tested when this step is executed
  description: "# Deno.TestStepDefinition\n\n``` typescript\ninterface TestStepDefinition {\n```\n\nfn: (t: [TestContext](deno.testcontext)) =\\> void \\| Promise\\<void\\>;\n\nignore?: boolean;\n\nname: string;\n\nsanitizeExit?: boolean;\n\nsanitizeOps?: boolean;\n\nsanitizeResources?: boolean;\n\n}\n\n## Properties\n\n`fn``: ``(``t``: `[`TestContext`](deno.testcontext)`) => ``void`` | ``Promise``<``void``>`\n\nThe test function that will be tested when this step is executed. The function can take an argument which will provide information about the current step's context.\n\n`ignore?``: ``boolean`\n\nIf truthy the current test step will be ignored.\n\nThis is a quick way to skip over a step, but also can be used for conditional logic, like determining if an environment feature is present.\n\n`name``: ``string`\n\nThe name of the step.\n\n`sanitizeExit?``: ``boolean`\n\nEnsure the test step does not prematurely cause the process to exit, for example via a call to [`Deno.exit`](deno#exit).\n\nDefaults to the parent test or step's value.\n\n`sanitizeOps?``: ``boolean`\n\nCheck that the number of async completed operations after the test step is the same as number of dispatched operations. This ensures that the code tested does not start async operations which it then does not await. This helps in preventing logic errors and memory leaks in the application code.\n\nDefaults to the parent test or step's value.\n\n`sanitizeResources?``: ``boolean`\n\nEnsure the test step does not \"leak\" resources - like open files or network connections - by ensuring the open resources at the start of the step match the open resources at the end of the step.\n\nDefaults to the parent test or step's value.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TestStepDefinition](https://doc.deno.land/deno/stable/~/Deno.TestStepDefinition)"
- name: Deno.TlsConn
  id: ~/deno.tlsconn
  summary: Runs the client or server handshake protocol to completion if that has not happened yet
  description: "# Deno.TlsConn\n\n``` typescript\ninterface TlsConn  extends Conn {\n```\n\nhandshake(): Promise\\<[TlsHandshakeInfo](deno.tlshandshakeinfo)\\>;\n\n}\n\n## Extends\n\n[`Conn`](deno.conn)\n\n## Methods\n\n`handshake()``: ``Promise``<`[`TlsHandshakeInfo`](deno.tlshandshakeinfo)`>`\n\nRuns the client or server handshake protocol to completion if that has not happened yet. Calling this method is optional; the TLS handshake will be completed automatically as soon as data is sent or received.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TlsConn](https://doc.deno.land/deno/stable/~/Deno.TlsConn)"
- name: Deno.TlsHandshakeInfo
  id: ~/deno.tlshandshakeinfo
  summary: null
  description: "# Deno.TlsHandshakeInfo\n\n``` typescript\ninterface TlsHandshakeInfo {}\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TlsHandshakeInfo](https://doc.deno.land/deno/stable/~/Deno.TlsHandshakeInfo)"
- name: Deno.TlsListener
  id: ~/deno.tlslistener
  summary: Specialized listener that accepts TLS connections
  description: "# Deno.TlsListener\n\nSpecialized listener that accepts TLS connections.\n\n``` typescript\ninterface TlsListener  extends Listener, AsyncIterable<TlsConn> {\n```\n\n\\[\\[Symbol.asyncIterator\\]\\](): AsyncIterableIterator\\<[TlsConn](deno.tlsconn)\\>;\n\naccept(): Promise\\<[TlsConn](deno.tlsconn)\\>;\n\n}\n\n## Extends\n\n[`Listener`](deno.listener)\n\n`AsyncIterable``<`[`TlsConn`](deno.tlsconn)`>`\n\n## Methods\n\n`[[Symbol.asyncIterator]]()``: ``AsyncIterableIterator``<`[`TlsConn`](deno.tlsconn)`>`\n\n`accept()``: ``Promise``<`[`TlsConn`](deno.tlsconn)`>`\n\nWaits for a TLS client to connect and accepts the connection.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.TlsListener](https://doc.deno.land/deno/stable/~/Deno.TlsListener)"
- name: Deno.truncate
  id: ~/deno.truncate
  summary: Truncates (or extends) the specified file, to reach the specified len
  description: "# Deno.truncate\n\nTruncates (or extends) the specified file, to reach the specified `len`. If `len` is not specified then the entire file contents are truncated.\n\n### Truncate the entire file\n\n``` typescript\nawait Deno.truncate(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n``` typescript\nconst file = await Deno.makeTempFile();\nawait Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\nawait Deno.truncate(file, 7);\nconst data = await Deno.readFile(file);\nconsole.log(new TextDecoder().decode(data));  // \"Hello W\"\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction truncate(name: string, len?: number): Promise\\<void\\>;\n\n`truncate(``name``: ``string``, ``len?``: ``number``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`name``: ``string`\n\n`len?``: ``number`` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.truncate](https://doc.deno.land/deno/stable/~/Deno.truncate)"
- name: Deno.truncateSync
  id: ~/deno.truncatesync
  summary: Synchronously truncates (or extends) the specified file, to reach the specified len
  description: "# Deno.truncateSync\n\nSynchronously truncates (or extends) the specified file, to reach the specified `len`. If `len` is not specified then the entire file contents are truncated.\n\n### Truncate the entire file\n\n``` typescript\nDeno.truncateSync(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n``` typescript\nconst file = Deno.makeTempFileSync();\nDeno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\nDeno.truncateSync(file, 7);\nconst data = Deno.readFileSync(file);\nconsole.log(new TextDecoder().decode(data));\n```\n\nRequires `allow-write` permission.\n\n``` typescript\n```\n\nfunction truncateSync(name: string, len?: number): void;\n\n`truncateSync(``name``: ``string``, ``len?``: ``number``)``: ``void`\n\n### Parameters\n\n`name``: ``string`\n\n`len?``: ``number`` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.truncateSync](https://doc.deno.land/deno/stable/~/Deno.truncateSync)"
- name: Deno.UnixAddr
  id: ~/deno.unixaddr
  summary: null
  description: "# Deno.UnixAddr\n\n``` typescript\ninterface UnixAddr {\n```\n\npath: string;\n\ntransport: \"unix\" \\| \"unixpacket\";\n\n}\n\n## Properties\n\n`path``: ``string`\n\n`transport``: ``\"unix\"`` | ``\"unixpacket\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.UnixAddr](https://doc.deno.land/deno/stable/~/Deno.UnixAddr)"
- name: Deno.UnixConn
  id: ~/deno.unixconn
  summary: null
  description: "# Deno.UnixConn\n\n``` typescript\ninterface UnixConn  extends Conn {}\n```\n\n## Extends\n\n[`Conn`](deno.conn)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.UnixConn](https://doc.deno.land/deno/stable/~/Deno.UnixConn)"
- name: Deno.unrefTimer
  id: ~/deno.unreftimer
  summary: Make the timer of the given id not block the event loop from finishing
  description: "# Deno.unrefTimer\n\nMake the timer of the given `id` not block the event loop from finishing.\n\n``` typescript\n```\n\nfunction unrefTimer(id: number): void;\n\n`unrefTimer(``id``: ``number``)``: ``void`\n\n### Parameters\n\n`id``: ``number`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.unrefTimer](https://doc.deno.land/deno/stable/~/Deno.unrefTimer)"
- name: Deno.upgradeWebSocket
  id: ~/deno.upgradewebsocket
  summary: Used to upgrade an incoming HTTP request to a WebSocket
  description: "# Deno.upgradeWebSocket\n\nUsed to upgrade an incoming HTTP request to a WebSocket.\n\nGiven a request, returns a pair of WebSocket and Response. The original request must be responded to with the returned response for the websocket upgrade to be successful.\n\n``` typescript\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  const { socket, response } = Deno.upgradeWebSocket(e.request);\n  socket.onopen = () => {\n    socket.send(\"Hello World!\");\n  };\n  socket.onmessage = (e) => {\n    console.log(e.data);\n    socket.close();\n  };\n  socket.onclose = () => console.log(\"WebSocket has been closed.\");\n  socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n  e.respondWith(response);\n}\n```\n\nIf the request body is disturbed (read from) before the upgrade is completed, upgrading fails.\n\nThis operation does not yet consume the request or open the websocket. This only happens once the returned response has been passed to `respondWith`.\n\n``` typescript\n```\n\nfunction upgradeWebSocket(request: [Request](request), options?: [UpgradeWebSocketOptions](deno.upgradewebsocketoptions)): [WebSocketUpgrade](deno.websocketupgrade);\n\n`upgradeWebSocket(``request``: `[`Request`](request)`, ``options?``: `[`UpgradeWebSocketOptions`](deno.upgradewebsocketoptions)`)``: `[`WebSocketUpgrade`](deno.websocketupgrade)\n\n### Parameters\n\n`request``: `[`Request`](request)\n\n`options?``: `[`UpgradeWebSocketOptions`](deno.upgradewebsocketoptions)` ``optional`\n\n### Return Type\n\n[`WebSocketUpgrade`](deno.websocketupgrade)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.upgradeWebSocket](https://doc.deno.land/deno/stable/~/Deno.upgradeWebSocket)"
- name: Deno.UpgradeWebSocketOptions
  id: ~/deno.upgradewebsocketoptions
  summary: If the client does not respond to this frame with a pong within the timeout specified, the connection is deemed unhealthy and is closed
  description: "# Deno.UpgradeWebSocketOptions\n\n``` typescript\ninterface UpgradeWebSocketOptions {\n```\n\nidleTimeout?: number;\n\nprotocol?: string;\n\n}\n\n## Properties\n\n`idleTimeout?``: ``number`\n\nIf the client does not respond to this frame with a `pong` within the timeout specified, the connection is deemed unhealthy and is closed. The `close` and `error` event will be emitted.\n\nThe default is 120 seconds. Set to 0 to disable timeouts.\n\n`protocol?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.UpgradeWebSocketOptions](https://doc.deno.land/deno/stable/~/Deno.UpgradeWebSocketOptions)"
- name: Deno.version
  id: ~/deno.version
  summary: Version related information
  description: "# Deno.version\n\nVersion related information.\n\n``` typescript\nconst version: {\n```\n\ndeno: string;\n\nv8: string;\n\ntypescript: string;\n\n};\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.version](https://doc.deno.land/deno/stable/~/Deno.version)"
- name: Deno.watchFs
  id: ~/deno.watchfs
  summary: Watch for file system events against one or more paths, which can be files or directories
  description: "# Deno.watchFs\n\nWatch for file system events against one or more `paths`, which can be files or directories. These paths must exist already. One user action (e.g. `touch test.file`) can generate multiple file system events. Likewise, one user action can result in multiple file paths in one event (e.g. `mv old_name.txt new_name.txt`).\n\nThe recursive option is `true` by default and, for directories, will watch the specified directory and all sub directories.\n\nNote that the exact ordering of the events can vary between operating systems.\n\n``` typescript\nconst watcher = Deno.watchFs(\"/\");\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n   // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n}\n```\n\nCall `watcher.close()` to stop watching.\n\n``` typescript\nconst watcher = Deno.watchFs(\"/\");\n\nsetTimeout(() => {\n  watcher.close();\n}, 5000);\n\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n}\n```\n\nRequires `allow-read` permission.\n\n``` typescript\n```\n\nfunction watchFs(paths: string \\| string\\[\\], options?: {\n\nrecursive: boolean;\n\n}): [FsWatcher](deno.fswatcher);\n\n`watchFs(``paths``: ``string`` | ``string``[]``, ``options?``: ``{`\n\nrecursive: boolean;\n\n}): [FsWatcher](deno.fswatcher)\n\n### Parameters\n\n`paths``: ``string`` | ``string``[]`\n\n`options?``: ``{`\n\nrecursive: boolean;\n\n} optional\n\n### Return Type\n\n[`FsWatcher`](deno.fswatcher)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.watchFs](https://doc.deno.land/deno/stable/~/Deno.watchFs)"
- name: Deno.WebSocketUpgrade
  id: ~/deno.websocketupgrade
  summary: null
  description: "# Deno.WebSocketUpgrade\n\n``` typescript\ninterface WebSocketUpgrade {\n```\n\nresponse: [Response](response);\n\nsocket: [WebSocket](websocket);\n\n}\n\n## Properties\n\n`response``: `[`Response`](response)\n\n`socket``: `[`WebSocket`](websocket)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.WebSocketUpgrade](https://doc.deno.land/deno/stable/~/Deno.WebSocketUpgrade)"
- name: Deno.write
  id: ~/deno.write
  summary: Write to the resource ID (rid) the contents of the array buffer (data)
  description: "# Deno.write\n\nWrite to the resource ID (`rid`) the contents of the array buffer (`data`).\n\nResolves to the number of bytes written. This function is one of the lowest level APIs and most users should not work with this directly, but rather use [`writeAll()`](https://deno.land/std/streams/conversion.ts?s=writeAll) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead.\n\n**It is not guaranteed that the full buffer will be written in a single call.**\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await Deno.write(file.rid, data); // 11\nDeno.close(file.rid);\n```\n\n``` typescript\n```\n\nfunction write(rid: number, data: Uint8Array): Promise\\<number\\>;\n\n`write(``rid``: ``number``, ``data``: ``Uint8Array``)``: ``Promise``<``number``>`\n\n### Parameters\n\n`rid``: ``number`\n\n`data``: ``Uint8Array`\n\n### Return Type\n\n`Promise``<``number``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.write](https://doc.deno.land/deno/stable/~/Deno.write)"
- name: Deno.writeAll
  id: ~/deno.writeall
  summary: Write all the content of the array buffer (arr) to the writer (w)
  description: "# Deno.writeAll\n\ndeprecated\n\nWrite all the content of the array buffer (`arr`) to the writer (`w`).\n\n@deprecated\n\nUse [`writeAll`](https://deno.land/std/streams/conversion.ts?s=writeAll) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.writeAll` will be removed in the future.\n\n``` typescript\n```\n\nfunction writeAll(w: [Writer](deno.writer), arr: Uint8Array): Promise\\<void\\>;\n\n`writeAll(``w``: `[`Writer`](deno.writer)`, ``arr``: ``Uint8Array``)``: ``Promise``<``void``>`\n\n### Parameters\n\n`w``: `[`Writer`](deno.writer)\n\n`arr``: ``Uint8Array`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeAll](https://doc.deno.land/deno/stable/~/Deno.writeAll)"
- name: Deno.writeAllSync
  id: ~/deno.writeallsync
  summary: Synchronously write all the content of the array buffer (arr) to the writer (w)
  description: "# Deno.writeAllSync\n\ndeprecated\n\nSynchronously write all the content of the array buffer (`arr`) to the writer (`w`).\n\n@deprecated\n\nUse [`writeAllSync`](https://deno.land/std/streams/conversion.ts?s=writeAllSync) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead. `Deno.writeAllSync` will be removed in the future.\n\n``` typescript\n```\n\nfunction writeAllSync(w: [WriterSync](deno.writersync), arr: Uint8Array): void;\n\n`writeAllSync(``w``: `[`WriterSync`](deno.writersync)`, ``arr``: ``Uint8Array``)``: ``void`\n\n### Parameters\n\n`w``: `[`WriterSync`](deno.writersync)\n\n`arr``: ``Uint8Array`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeAllSync](https://doc.deno.land/deno/stable/~/Deno.writeAllSync)"
- name: Deno.writeFile
  id: ~/deno.writefile
  summary: Write data to the given path, by default creating a new file if needed, else overwriting
  description: "# Deno.writeFile\n\nWrite `data` to the given `path`, by default creating a new file if needed, else overwriting.\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nawait Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nawait Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nawait Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nawait Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.\n\n``` typescript\n```\n\nfunction writeFile(\n\npath: string \\| [URL](url),\n\ndata: Uint8Array,\n\noptions?: [WriteFileOptions](deno.writefileoptions),\n\n): Promise\\<void\\>;\n\n`writeFile(``path``: ``string`` | `[`URL`](url)`, ``data``: ``Uint8Array``, ``options?``: `[`WriteFileOptions`](deno.writefileoptions)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`data``: ``Uint8Array`\n\n`options?``: `[`WriteFileOptions`](deno.writefileoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeFile](https://doc.deno.land/deno/stable/~/Deno.writeFile)"
- name: Deno.WriteFileOptions
  id: ~/deno.writefileoptions
  summary: Options for writing to a file
  description: "# Deno.WriteFileOptions\n\nOptions for writing to a file.\n\n``` typescript\ninterface WriteFileOptions {\n```\n\nappend?: boolean;\n\ncreate?: boolean;\n\nmode?: number;\n\nsignal?: [AbortSignal](abortsignal);\n\n}\n\n## Properties\n\n`append?``: ``boolean`\n\nDefaults to `false`. If set to `true`, will append to a file instead of overwriting previous contents.\n\n`create?``: ``boolean`\n\nSets the option to allow creating a new file, if one doesn't already exist at the specified path (defaults to `true`).\n\n`mode?``: ``number`\n\nPermissions always applied to file.\n\n`signal?``: `[`AbortSignal`](abortsignal)\n\nAn abort signal to allow cancellation of the file write operation.\n\nIf the signal becomes aborted the write file operation will be stopped and the promise returned will be rejected with an {*@link* `AbortError`}.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.WriteFileOptions](https://doc.deno.land/deno/stable/~/Deno.WriteFileOptions)"
- name: Deno.writeFileSync
  id: ~/deno.writefilesync
  summary: Synchronously write data to the given path, by default creating a new file if needed, else overwriting
  description: "# Deno.writeFileSync\n\nSynchronously write `data` to the given `path`, by default creating a new file if needed, else overwriting.\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nDeno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nDeno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nDeno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nDeno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.\n\n``` typescript\n```\n\nfunction writeFileSync(\n\npath: string \\| [URL](url),\n\ndata: Uint8Array,\n\noptions?: [WriteFileOptions](deno.writefileoptions),\n\n): void;\n\n`writeFileSync(``path``: ``string`` | `[`URL`](url)`, ``data``: ``Uint8Array``, ``options?``: `[`WriteFileOptions`](deno.writefileoptions)`)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`data``: ``Uint8Array`\n\n`options?``: `[`WriteFileOptions`](deno.writefileoptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeFileSync](https://doc.deno.land/deno/stable/~/Deno.writeFileSync)"
- name: Deno.WritePermissionDescriptor
  id: ~/deno.writepermissiondescriptor
  summary: null
  description: "# Deno.WritePermissionDescriptor\n\n``` typescript\ninterface WritePermissionDescriptor {\n```\n\nname: \"write\";\n\npath?: string \\| [URL](url);\n\n}\n\n## Properties\n\n`name``: ``\"write\"`\n\n`path?``: ``string`` | `[`URL`](url)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.WritePermissionDescriptor](https://doc.deno.land/deno/stable/~/Deno.WritePermissionDescriptor)"
- name: Deno.Writer
  id: ~/deno.writer
  summary: An abstract interface which when implemented provides an interface to write bytes from an array buffer to a file/resource asynchronously
  description: "# Deno.Writer\n\nAn abstract interface which when implemented provides an interface to write bytes from an array buffer to a file/resource asynchronously.\n\n``` typescript\ninterface Writer {\n```\n\nwrite(p: Uint8Array): Promise\\<number\\>;\n\n}\n\n## Methods\n\n`write(``p``: ``Uint8Array``)``: ``Promise``<``number``>`\n\nWrites `p.byteLength` bytes from `p` to the underlying data stream. It resolves to the number of bytes written from `p` (`0` \\<= `n` \\<= `p.byteLength`) or reject with the error encountered that caused the write to stop early. `write()` must reject with a non-null error if would resolve to `n` \\< `p.byteLength`. `write()` must not modify the slice data, even temporarily.\n\nImplementations should not retain a reference to `p`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.Writer](https://doc.deno.land/deno/stable/~/Deno.Writer)"
- name: Deno.WriterSync
  id: ~/deno.writersync
  summary: An abstract interface which when implemented provides an interface to write bytes from an array buffer to a file/resource synchronously
  description: "# Deno.WriterSync\n\nAn abstract interface which when implemented provides an interface to write bytes from an array buffer to a file/resource synchronously.\n\n``` typescript\ninterface WriterSync {\n```\n\nwriteSync(p: Uint8Array): number;\n\n}\n\n## Methods\n\n`writeSync(``p``: ``Uint8Array``)``: ``number`\n\nWrites `p.byteLength` bytes from `p` to the underlying data stream. It returns the number of bytes written from `p` (`0` \\<= `n` \\<= `p.byteLength`) and any error encountered that caused the write to stop early. `writeSync()` must throw a non-null error if it returns `n` \\< `p.byteLength`. `writeSync()` must not modify the slice data, even temporarily.\n\nImplementations should not retain a reference to `p`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.WriterSync](https://doc.deno.land/deno/stable/~/Deno.WriterSync)"
- name: Deno.writeSync
  id: ~/deno.writesync
  summary: Synchronously write to the resource ID (rid) the contents of the array buffer (data)
  description: "# Deno.writeSync\n\nSynchronously write to the resource ID (`rid`) the contents of the array buffer (`data`).\n\nReturns the number of bytes written. This function is one of the lowest level APIs and most users should not work with this directly, but rather use [`writeAllSync()`](https://deno.land/std/streams/conversion.ts?s=writeAllSync) from [`std/streams/conversion.ts`](https://deno.land/std/streams/conversion.ts) instead.\n\n**It is not guaranteed that the full buffer will be written in a single call.**\n\n``` typescript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = Deno.writeSync(file.rid, data); // 11\nDeno.close(file.rid);\n```\n\n``` typescript\n```\n\nfunction writeSync(rid: number, data: Uint8Array): number;\n\n`writeSync(``rid``: ``number``, ``data``: ``Uint8Array``)``: ``number`\n\n### Parameters\n\n`rid``: ``number`\n\n`data``: ``Uint8Array`\n\n### Return Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeSync](https://doc.deno.land/deno/stable/~/Deno.writeSync)"
- name: Deno.writeTextFile
  id: ~/deno.writetextfile
  summary: Write string data to the given path, by default creating a new file if needed, else overwriting
  description: "# Deno.writeTextFile\n\nWrite string `data` to the given `path`, by default creating a new file if needed, else overwriting.\n\n``` typescript\nawait Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.\n\n``` typescript\n```\n\nfunction writeTextFile(\n\npath: string \\| [URL](url),\n\ndata: string,\n\noptions?: [WriteFileOptions](deno.writefileoptions),\n\n): Promise\\<void\\>;\n\n`writeTextFile(``path``: ``string`` | `[`URL`](url)`, ``data``: ``string``, ``options?``: `[`WriteFileOptions`](deno.writefileoptions)`)``: ``Promise``<``void``>`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`data``: ``string`\n\n`options?``: `[`WriteFileOptions`](deno.writefileoptions)` ``optional`\n\n### Return Type\n\n`Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeTextFile](https://doc.deno.land/deno/stable/~/Deno.writeTextFile)"
- name: Deno.writeTextFileSync
  id: ~/deno.writetextfilesync
  summary: Synchronously write string data to the given path, by default creating a new file if needed, else overwriting
  description: "# Deno.writeTextFileSync\n\nSynchronously write string `data` to the given `path`, by default creating a new file if needed, else overwriting.\n\n``` typescript\nDeno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.\n\n``` typescript\n```\n\nfunction writeTextFileSync(\n\npath: string \\| [URL](url),\n\ndata: string,\n\noptions?: [WriteFileOptions](deno.writefileoptions),\n\n): void;\n\n`writeTextFileSync(``path``: ``string`` | `[`URL`](url)`, ``data``: ``string``, ``options?``: `[`WriteFileOptions`](deno.writefileoptions)`)``: ``void`\n\n### Parameters\n\n`path``: ``string`` | `[`URL`](url)\n\n`data``: ``string`\n\n`options?``: `[`WriteFileOptions`](deno.writefileoptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Deno.writeTextFileSync](https://doc.deno.land/deno/stable/~/Deno.writeTextFileSync)"
- name: dispatchEvent
  id: ~/dispatchevent
  summary: Dispatches an event in the global scope, synchronously invoking any registered event listeners for this event in the appropriate order
  description: "# dispatchEvent\n\nDispatches an event in the global scope, synchronously invoking any registered event listeners for this event in the appropriate order. Returns false if event is cancelable and at least one of the event handlers which handled this event called Event.preventDefault(). Otherwise it returns true.\n\n``` typescript\ndispatchEvent(new Event('unload'));\n```\n\n``` typescript\n```\n\nfunction dispatchEvent(event: [Event](event)): boolean;\n\n`dispatchEvent(``event``: `[`Event`](event)`)``: ``boolean`\n\n### Parameters\n\n`event``: `[`Event`](event)\n\n### Return Type\n\n`boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/dispatchEvent](https://doc.deno.land/deno/stable/~/dispatchEvent)"
- name: DOMException
  id: ~/domexception
  summary: null
  description: "# DOMException\n\n``` typescript\nclass DOMException extends Error {\n```\n\nconstructor(message?: string, name?: string);\n\nreadonly code: number;\n\nreadonly message: string;\n\nreadonly name: string;\n\n}\n\n## Extends\n\n`Error`\n\n## Constructors\n\n`new ``DOMException(``message?``: ``string``, ``name?``: ``string``)`\n\n## Properties\n\n`code``: ``number`\n\n`message``: ``string`\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/DOMException](https://doc.deno.land/deno/stable/~/DOMException)"
- name: DomIterable
  id: ~/domiterable
  summary: null
  description: "# DomIterable\n\n``` typescript\ninterface DomIterable <K, V> {\n```\n\n\\[\\[Symbol.iterator\\]\\](): IterableIterator\\<\\[K, V\\]\\>;\n\nentries(): IterableIterator\\<\\[K, V\\]\\>;\n\nforEach(callback: (\n\nvalue: V,\n\nkey: K,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void;\n\nkeys(): IterableIterator\\<K\\>;\n\nvalues(): IterableIterator\\<V\\>;\n\n}\n\n## Type Parameters\n\n`K`\n\n`V`\n\n## Methods\n\n`[[Symbol.iterator]]()``: ``IterableIterator``<``[``K``, ``V``]``>`\n\n`entries()``: ``IterableIterator``<``[``K``, ``V``]``>`\n\n`forEach(``callback``: ``(`\n\nvalue: V,\n\nkey: K,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void\n\n`keys()``: ``IterableIterator``<``K``>`\n\n`values()``: ``IterableIterator``<``V``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/DomIterable](https://doc.deno.land/deno/stable/~/DomIterable)"
- name: DOMStringList
  id: ~/domstringlist
  summary: Returns the number of strings in strings
  description: "# DOMStringList\n\n``` typescript\ninterface DOMStringList {\n```\n\n\\[index: number\\]: string;\n\nreadonly length: number;\n\ncontains(string: string): boolean;\n\nitem(index: number): string \\| null;\n\n}\n\n## Index Signatures\n\n\\[index: number\\]: string\n\n## Properties\n\n`readonly ``length``: ``number`\n\nReturns the number of strings in strings.\n\n## Methods\n\n`contains(``string``: ``string``)``: ``boolean`\n\nReturns true if strings contains string, and false otherwise.\n\n`item(``index``: ``number``)``: ``string`` | ``null`\n\nReturns the string with index index from strings.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/DOMStringList](https://doc.deno.land/deno/stable/~/DOMStringList)"
- name: EcdhKeyDeriveParams
  id: ~/ecdhkeyderiveparams
  summary: null
  description: "# EcdhKeyDeriveParams\n\n``` typescript\ninterface EcdhKeyDeriveParams  extends Algorithm {\n```\n\npublic: [CryptoKey](cryptokey);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`public``: `[`CryptoKey`](cryptokey)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EcdhKeyDeriveParams](https://doc.deno.land/deno/stable/~/EcdhKeyDeriveParams)"
- name: EcdsaParams
  id: ~/ecdsaparams
  summary: null
  description: "# EcdsaParams\n\n``` typescript\ninterface EcdsaParams  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EcdsaParams](https://doc.deno.land/deno/stable/~/EcdsaParams)"
- name: EcKeyAlgorithm
  id: ~/eckeyalgorithm
  summary: null
  description: "# EcKeyAlgorithm\n\n``` typescript\ninterface EcKeyAlgorithm  extends KeyAlgorithm {\n```\n\nnamedCurve: [NamedCurve](namedcurve);\n\n}\n\n## Extends\n\n[`KeyAlgorithm`](keyalgorithm)\n\n## Properties\n\n`namedCurve``: `[`NamedCurve`](namedcurve)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EcKeyAlgorithm](https://doc.deno.land/deno/stable/~/EcKeyAlgorithm)"
- name: EcKeyGenParams
  id: ~/eckeygenparams
  summary: null
  description: "# EcKeyGenParams\n\n``` typescript\ninterface EcKeyGenParams  extends Algorithm {\n```\n\nnamedCurve: [NamedCurve](namedcurve);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`namedCurve``: `[`NamedCurve`](namedcurve)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EcKeyGenParams](https://doc.deno.land/deno/stable/~/EcKeyGenParams)"
- name: EcKeyImportParams
  id: ~/eckeyimportparams
  summary: null
  description: "# EcKeyImportParams\n\n``` typescript\ninterface EcKeyImportParams  extends Algorithm {\n```\n\nnamedCurve: [NamedCurve](namedcurve);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`namedCurve``: `[`NamedCurve`](namedcurve)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EcKeyImportParams](https://doc.deno.land/deno/stable/~/EcKeyImportParams)"
- name: ErrorConstructor
  id: ~/errorconstructor
  summary: See https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions
  description: "# ErrorConstructor\n\n``` typescript\ninterface ErrorConstructor {\n```\n\ncaptureStackTrace(error: Object, constructor?: Function): void;\n\n}\n\n## Methods\n\n`captureStackTrace(``error``: ``Object``, ``constructor?``: ``Function``)``: ``void`\n\nSee <https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions>.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ErrorConstructor](https://doc.deno.land/deno/stable/~/ErrorConstructor)"
- name: ErrorEvent
  id: ~/errorevent
  summary: null
  description: "# ErrorEvent\n\n``` typescript\nclass ErrorEvent extends Event {\n```\n\nconstructor(type: string, eventInitDict?: [ErrorEventInit](erroreventinit));\n\nreadonly colno: number;\n\nreadonly error: any;\n\nreadonly filename: string;\n\nreadonly lineno: number;\n\nreadonly message: string;\n\n}\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``ErrorEvent(``type``: ``string``, ``eventInitDict?``: `[`ErrorEventInit`](erroreventinit)`)`\n\n## Properties\n\n`colno``: ``number`\n\n`error``: ``any`\n\n`filename``: ``string`\n\n`lineno``: ``number`\n\n`message``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ErrorEvent](https://doc.deno.land/deno/stable/~/ErrorEvent)"
- name: ErrorEventInit
  id: ~/erroreventinit
  summary: null
  description: "# ErrorEventInit\n\n``` typescript\ninterface ErrorEventInit  extends EventInit {\n```\n\ncolno?: number;\n\nerror?: any;\n\nfilename?: string;\n\nlineno?: number;\n\nmessage?: string;\n\n}\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`colno?``: ``number`\n\n`error?``: ``any`\n\n`filename?``: ``string`\n\n`lineno?``: ``number`\n\n`message?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ErrorEventInit](https://doc.deno.land/deno/stable/~/ErrorEventInit)"
- name: Event
  id: ~/event
  summary: An event which takes place in the DOM
  description: "# Event\n\nAn event which takes place in the DOM.\n\n``` typescript\nclass Event {\n```\n\nconstructor(type: string, eventInitDict?: [EventInit](eventinit));\n\nreadonly AT_TARGET: number;\n\nreadonly bubbles: boolean;\n\nreadonly BUBBLING_PHASE: number;\n\nreadonly cancelable: boolean;\n\ncancelBubble: boolean;\n\nreadonly CAPTURING_PHASE: number;\n\nreadonly composed: boolean;\n\nreadonly currentTarget: [EventTarget](eventtarget) \\| null;\n\nreadonly defaultPrevented: boolean;\n\nreadonly eventPhase: number;\n\nreadonly isTrusted: boolean;\n\nreadonly NONE: number;\n\nreadonly target: [EventTarget](eventtarget) \\| null;\n\nreadonly timeStamp: number;\n\nreadonly type: string;\n\ncomposedPath(): [EventTarget](eventtarget)\\[\\];\n\npreventDefault(): void;\n\nstopImmediatePropagation(): void;\n\nstopPropagation(): void;\n\nstatic readonly AT_TARGET: number;\n\nstatic readonly BUBBLING_PHASE: number;\n\nstatic readonly CAPTURING_PHASE: number;\n\nstatic readonly NONE: number;\n\n}\n\n## Constructors\n\n`new ``Event(``type``: ``string``, ``eventInitDict?``: `[`EventInit`](eventinit)`)`\n\n## Properties\n\n`AT_TARGET``: ``number`\n\n`bubbles``: ``boolean`\n\nReturns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.\n\n`BUBBLING_PHASE``: ``number`\n\n`cancelable``: ``boolean`\n\nReturns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.\n\n`cancelBubble``: ``boolean`\n\n`CAPTURING_PHASE``: ``number`\n\n`composed``: ``boolean`\n\nReturns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.\n\n`currentTarget``: `[`EventTarget`](eventtarget)` | ``null`\n\nReturns the object whose event listener's callback is currently being invoked.\n\n`defaultPrevented``: ``boolean`\n\nReturns true if preventDefault() was invoked successfully to indicate cancellation, and false otherwise.\n\n`eventPhase``: ``number`\n\nReturns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.\n\n`isTrusted``: ``boolean`\n\nReturns true if event was dispatched by the user agent, and false otherwise.\n\n`NONE``: ``number`\n\n`target``: `[`EventTarget`](eventtarget)` | ``null`\n\nReturns the object to which event is dispatched (its target).\n\n`timeStamp``: ``number`\n\nReturns the event's timestamp as the number of milliseconds measured relative to the time origin.\n\n`type``: ``string`\n\nReturns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".\n\n## Methods\n\n`composedPath()``: `[`EventTarget`](eventtarget)`[]`\n\nReturns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget.\n\n`preventDefault()``: ``void`\n\nIf invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.\n\n`stopImmediatePropagation()``: ``void`\n\nInvoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.\n\n`stopPropagation()``: ``void`\n\nWhen dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.\n\n## Static Properties\n\n`AT_TARGET``: ``number`\n\n`BUBBLING_PHASE``: ``number`\n\n`CAPTURING_PHASE``: ``number`\n\n`NONE``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Event](https://doc.deno.land/deno/stable/~/Event)"
- name: EventInit
  id: ~/eventinit
  summary: null
  description: "# EventInit\n\n``` typescript\ninterface EventInit {\n```\n\nbubbles?: boolean;\n\ncancelable?: boolean;\n\ncomposed?: boolean;\n\n}\n\n## Properties\n\n`bubbles?``: ``boolean`\n\n`cancelable?``: ``boolean`\n\n`composed?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventInit](https://doc.deno.land/deno/stable/~/EventInit)"
- name: EventListener
  id: ~/eventlistener
  summary: null
  description: "# EventListener\n\n``` typescript\ninterface EventListener {\n```\n\n(evt: [Event](event)): void \\| Promise\\<void\\>;\n\n}\n\n## Call Signatures\n\n`(``evt``: `[`Event`](event)`)``: ``void`` | ``Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventListener](https://doc.deno.land/deno/stable/~/EventListener)"
- name: EventListenerObject
  id: ~/eventlistenerobject
  summary: null
  description: "# EventListenerObject\n\n``` typescript\ninterface EventListenerObject {\n```\n\nhandleEvent(evt: [Event](event)): void \\| Promise\\<void\\>;\n\n}\n\n## Methods\n\n`handleEvent(``evt``: `[`Event`](event)`)``: ``void`` | ``Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventListenerObject](https://doc.deno.land/deno/stable/~/EventListenerObject)"
- name: EventListenerOptions
  id: ~/eventlisteneroptions
  summary: null
  description: "# EventListenerOptions\n\n``` typescript\ninterface EventListenerOptions {\n```\n\ncapture?: boolean;\n\n}\n\n## Properties\n\n`capture?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventListenerOptions](https://doc.deno.land/deno/stable/~/EventListenerOptions)"
- name: EventListenerOrEventListenerObject
  id: ~/eventlisteneroreventlistenerobject
  summary: null
  description: "# EventListenerOrEventListenerObject\n\n``` typescript\ntype EventListenerOrEventListenerObject = EventListener | EventListenerObject;\n```\n\n## Type\n\n[`EventListener`](eventlistener)` | `[`EventListenerObject`](eventlistenerobject)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventListenerOrEventListenerObject](https://doc.deno.land/deno/stable/~/EventListenerOrEventListenerObject)"
- name: EventTarget
  id: ~/eventtarget
  summary: EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them
  description: "# EventTarget\n\nEventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.\n\n``` typescript\nclass EventTarget {\n```\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject) \\| null,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\ndispatchEvent(event: [Event](event)): boolean;\n\nremoveEventListener(\n\ntype: string,\n\ncallback: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject) \\| null,\n\noptions?: [EventListenerOptions](eventlisteneroptions) \\| boolean,\n\n): void;\n\n}\n\n## Methods\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)` | ``null``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\nAppends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n`dispatchEvent(``event``: `[`Event`](event)`)``: ``boolean`\n\nDispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n\n`removeEventListener(``type``: ``string``, ``callback``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)` | ``null``, ``options?``: `[`EventListenerOptions`](eventlisteneroptions)` | ``boolean``)``: ``void`\n\nRemoves the event listener in target's event listener list with the same type, callback, and options.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/EventTarget](https://doc.deno.land/deno/stable/~/EventTarget)"
- name: fetch
  id: ~/fetch
  summary: Fetch a resource from the network
  description: "# fetch\n\nFetch a resource from the network. It returns a `Promise` that resolves to the `Response` to that `Request`, whether it is successful or not.\n\n``` typescript\nconst response = await fetch(\"http://my.json.host/data.json\");\nconsole.log(response.status);  // e.g. 200\nconsole.log(response.statusText); // e.g. \"OK\"\nconst jsonData = await response.json();\n```\n\n``` typescript\n```\n\nfunction fetch(input: [URL](url) \\| [Request](request) \\| string, init?: [RequestInit](requestinit)): Promise\\<[Response](response)\\>;\n\n`fetch(``input``: `[`URL`](url)` | `[`Request`](request)` | ``string``, ``init?``: `[`RequestInit`](requestinit)`)``: ``Promise``<`[`Response`](response)`>`\n\n### Parameters\n\n`input``: `[`URL`](url)` | `[`Request`](request)` | ``string`\n\n`init?``: `[`RequestInit`](requestinit)` ``optional`\n\n### Return Type\n\n`Promise``<`[`Response`](response)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/fetch](https://doc.deno.land/deno/stable/~/fetch)"
- name: File
  id: ~/file
  summary: Provides information about files and allows JavaScript in a web page to access their content
  description: "# File\n\nProvides information about files and allows JavaScript in a web page to access their content.\n\n``` typescript\nclass File extends Blob {\n```\n\nconstructor(\n\nfileBits: [BlobPart](blobpart)\\[\\],\n\nfileName: string,\n\noptions?: [FilePropertyBag](filepropertybag),\n\n);\n\nreadonly lastModified: number;\n\nreadonly name: string;\n\n}\n\n## Extends\n\n`Blob`\n\n## Constructors\n\n`new ``File(``fileBits``: `[`BlobPart`](blobpart)`[]``, ``fileName``: ``string``, ``options?``: `[`FilePropertyBag`](filepropertybag)`)`\n\n## Properties\n\n`lastModified``: ``number`\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/File](https://doc.deno.land/deno/stable/~/File)"
- name: FilePropertyBag
  id: ~/filepropertybag
  summary: null
  description: "# FilePropertyBag\n\n``` typescript\ninterface FilePropertyBag  extends BlobPropertyBag {\n```\n\nlastModified?: number;\n\n}\n\n## Extends\n\n[`BlobPropertyBag`](blobpropertybag)\n\n## Properties\n\n`lastModified?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/FilePropertyBag](https://doc.deno.land/deno/stable/~/FilePropertyBag)"
- name: FileReader
  id: ~/filereader
  summary: Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read
  description: "# FileReader\n\nLets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.\n\n``` typescript\ninterface FileReader  extends EventTarget {\n```\n\nreadonly DONE: number;\n\nreadonly EMPTY: number;\n\nreadonly error: [DOMException](domexception) \\| null;\n\nreadonly LOADING: number;\n\nonabort: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nonerror: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nonload: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nonloadend: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nonloadstart: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nonprogress: ((this: [FileReader](filereader), ev: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>) =\\> any) \\| null;\n\nreadonly readyState: number;\n\nreadonly result: string \\| ArrayBuffer \\| null;\n\nabort(): void;\n\naddEventListener\\<K extends keyof [FileReaderEventMap](filereadereventmap)\\>(\n\ntype: K,\n\nlistener: (this: [FileReader](filereader), ev: [FileReaderEventMap](filereadereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nreadAsArrayBuffer(blob: [Blob](blob)): void;\n\nreadAsBinaryString(blob: [Blob](blob)): void;\n\nreadAsDataURL(blob: [Blob](blob)): void;\n\nreadAsText(blob: [Blob](blob), encoding?: string): void;\n\nremoveEventListener\\<K extends keyof [FileReaderEventMap](filereadereventmap)\\>(\n\ntype: K,\n\nlistener: (this: [FileReader](filereader), ev: [FileReaderEventMap](filereadereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\n}\n\n``` typescript\nvar FileReader: {\n```\n\nprototype: [FileReader](filereader);\n\nreadonly DONE: number;\n\nreadonly EMPTY: number;\n\nreadonly LOADING: number;\n\nnew (): [FileReader](filereader);\n\n};\n\n## Extends\n\n[`EventTarget`](eventtarget)\n\n## Properties\n\n`readonly ``DONE``: ``number`\n\n`readonly ``EMPTY``: ``number`\n\n`readonly ``error``: `[`DOMException`](domexception)` | ``null`\n\n`readonly ``LOADING``: ``number`\n\n`onabort``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`onerror``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`onload``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`onloadend``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`onloadstart``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`onprogress``: ``(``(``this``: `[`FileReader`](filereader)`, ``ev``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>``) => ``any``)`` | ``null`\n\n`readonly ``readyState``: ``number`\n\n`readonly ``result``: ``string`` | ``ArrayBuffer`` | ``null`\n\n## Methods\n\n`abort()``: ``void`\n\n`addEventListener``<``K`` extends ``keyof`` `[`FileReaderEventMap`](filereadereventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [FileReader](filereader), ev: [FileReaderEventMap](filereadereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`addEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void\n\n`readAsArrayBuffer(``blob``: `[`Blob`](blob)`)``: ``void`\n\n`readAsBinaryString(``blob``: `[`Blob`](blob)`)``: ``void`\n\n`readAsDataURL(``blob``: `[`Blob`](blob)`)``: ``void`\n\n`readAsText(``blob``: `[`Blob`](blob)`, ``encoding?``: ``string``)``: ``void`\n\n`removeEventListener``<``K`` extends ``keyof`` `[`FileReaderEventMap`](filereadereventmap)`>``(`\n\ntype: K,\n\nlistener: (this: [FileReader](filereader), ev: [FileReaderEventMap](filereadereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n`removeEventListener(`\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/FileReader](https://doc.deno.land/deno/stable/~/FileReader)"
- name: FileReaderEventMap
  id: ~/filereadereventmap
  summary: null
  description: "# FileReaderEventMap\n\n``` typescript\ninterface FileReaderEventMap {\n```\n\nabort: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\nerror: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\nload: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\nloadend: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\nloadstart: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\nprogress: [ProgressEvent](progressevent)\\<[FileReader](filereader)\\>;\n\n}\n\n## Properties\n\n`abort``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n`error``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n`load``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n`loadend``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n`loadstart``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n`progress``: `[`ProgressEvent`](progressevent)`<`[`FileReader`](filereader)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/FileReaderEventMap](https://doc.deno.land/deno/stable/~/FileReaderEventMap)"
- name: FormData
  id: ~/formdata
  summary: Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method
  description: "# FormData\n\nProvides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\".\n\n``` typescript\ninterface FormData {\n```\n\n\\[\\[Symbol.iterator\\]\\](): IterableIterator\\<\\[string, [FormDataEntryValue](formdataentryvalue)\\]\\>;\n\nappend(\n\nname: string,\n\nvalue: string \\| [Blob](blob),\n\nfileName?: string,\n\n): void;\n\ndelete(name: string): void;\n\nentries(): IterableIterator\\<\\[string, [FormDataEntryValue](formdataentryvalue)\\]\\>;\n\nforEach(callback: (\n\nvalue: [FormDataEntryValue](formdataentryvalue),\n\nkey: string,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void;\n\nget(name: string): [FormDataEntryValue](formdataentryvalue) \\| null;\n\ngetAll(name: string): [FormDataEntryValue](formdataentryvalue)\\[\\];\n\nhas(name: string): boolean;\n\nkeys(): IterableIterator\\<string\\>;\n\nset(\n\nname: string,\n\nvalue: string \\| [Blob](blob),\n\nfileName?: string,\n\n): void;\n\nvalues(): IterableIterator\\<string\\>;\n\n}\n\n``` typescript\nvar FormData: {\n```\n\nprototype: [FormData](formdata);\n\nnew (): [FormData](formdata);\n\n};\n\n## Methods\n\n`[[Symbol.iterator]]()``: ``IterableIterator``<``[``string``, `[`FormDataEntryValue`](formdataentryvalue)`]``>`\n\n`append(`\n\nname: string,\n\nvalue: string \\| [Blob](blob),\n\nfileName?: string,\n\n): void\n\n`delete(``name``: ``string``)``: ``void`\n\n`entries()``: ``IterableIterator``<``[``string``, `[`FormDataEntryValue`](formdataentryvalue)`]``>`\n\n`forEach(``callback``: ``(`\n\nvalue: [FormDataEntryValue](formdataentryvalue),\n\nkey: string,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void\n\n`get(``name``: ``string``)``: `[`FormDataEntryValue`](formdataentryvalue)` | ``null`\n\n`getAll(``name``: ``string``)``: `[`FormDataEntryValue`](formdataentryvalue)`[]`\n\n`has(``name``: ``string``)``: ``boolean`\n\n`keys()``: ``IterableIterator``<``string``>`\n\n`set(`\n\nname: string,\n\nvalue: string \\| [Blob](blob),\n\nfileName?: string,\n\n): void\n\n`values()``: ``IterableIterator``<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/FormData](https://doc.deno.land/deno/stable/~/FormData)"
- name: FormDataEntryValue
  id: ~/formdataentryvalue
  summary: null
  description: "# FormDataEntryValue\n\n``` typescript\ntype FormDataEntryValue = File | string;\n```\n\n## Type\n\n[`File`](file)` | ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/FormDataEntryValue](https://doc.deno.land/deno/stable/~/FormDataEntryValue)"
- name: GPU
  id: ~/gpu
  summary: null
  description: "# GPU\n\n``` typescript\nclass GPU {\n```\n\nrequestAdapter(options?: [GPURequestAdapterOptions](gpurequestadapteroptions)): Promise\\<[GPUAdapter](gpuadapter) \\| null\\>;\n\n}\n\n## Methods\n\n`requestAdapter(``options?``: `[`GPURequestAdapterOptions`](gpurequestadapteroptions)`)``: ``Promise``<`[`GPUAdapter`](gpuadapter)` | ``null``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPU](https://doc.deno.land/deno/stable/~/GPU)"
- name: GPUAdapter
  id: ~/gpuadapter
  summary: null
  description: "# GPUAdapter\n\n``` typescript\nclass GPUAdapter {\n```\n\nreadonly features: [GPUSupportedFeatures](gpusupportedfeatures);\n\nreadonly isFallbackAdapter: boolean;\n\nreadonly limits: [GPUSupportedLimits](gpusupportedlimits);\n\nrequestAdapterInfo(unmaskHints?: string\\[\\]): Promise\\<[GPUAdapterInfo](gpuadapterinfo)\\>;\n\nrequestDevice(descriptor?: [GPUDeviceDescriptor](gpudevicedescriptor)): Promise\\<[GPUDevice](gpudevice)\\>;\n\n}\n\n## Properties\n\n`features``: `[`GPUSupportedFeatures`](gpusupportedfeatures)\n\n`isFallbackAdapter``: ``boolean`\n\n`limits``: `[`GPUSupportedLimits`](gpusupportedlimits)\n\n## Methods\n\n`requestAdapterInfo(``unmaskHints?``: ``string``[]``)``: ``Promise``<`[`GPUAdapterInfo`](gpuadapterinfo)`>`\n\n`requestDevice(``descriptor?``: `[`GPUDeviceDescriptor`](gpudevicedescriptor)`)``: ``Promise``<`[`GPUDevice`](gpudevice)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUAdapter](https://doc.deno.land/deno/stable/~/GPUAdapter)"
- name: GPUAdapterInfo
  id: ~/gpuadapterinfo
  summary: null
  description: "# GPUAdapterInfo\n\n``` typescript\nclass GPUAdapterInfo {\n```\n\nreadonly architecture: string;\n\nreadonly description: string;\n\nreadonly device: string;\n\nreadonly vendor: string;\n\n}\n\n## Properties\n\n`architecture``: ``string`\n\n`description``: ``string`\n\n`device``: ``string`\n\n`vendor``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUAdapterInfo](https://doc.deno.land/deno/stable/~/GPUAdapterInfo)"
- name: GPUAddressMode
  id: ~/gpuaddressmode
  summary: null
  description: "# GPUAddressMode\n\n``` typescript\ntype GPUAddressMode = \"clamp-to-edge\" | \"repeat\" | \"mirror-repeat\";\n```\n\n## Type\n\n`\"clamp-to-edge\"`` | ``\"repeat\"`` | ``\"mirror-repeat\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUAddressMode](https://doc.deno.land/deno/stable/~/GPUAddressMode)"
- name: GPUAutoLayoutMode
  id: ~/gpuautolayoutmode
  summary: null
  description: "# GPUAutoLayoutMode\n\n``` typescript\ntype GPUAutoLayoutMode = \"auto\";\n```\n\n## Type\n\n`\"auto\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUAutoLayoutMode](https://doc.deno.land/deno/stable/~/GPUAutoLayoutMode)"
- name: GPUBindGroup
  id: ~/gpubindgroup
  summary: null
  description: "# GPUBindGroup\n\n``` typescript\nclass GPUBindGroup implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroup](https://doc.deno.land/deno/stable/~/GPUBindGroup)"
- name: GPUBindGroupDescriptor
  id: ~/gpubindgroupdescriptor
  summary: null
  description: "# GPUBindGroupDescriptor\n\n``` typescript\ninterface GPUBindGroupDescriptor  extends GPUObjectDescriptorBase {\n```\n\nentries: [GPUBindGroupEntry](gpubindgroupentry)\\[\\];\n\nlayout: [GPUBindGroupLayout](gpubindgrouplayout);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`entries``: `[`GPUBindGroupEntry`](gpubindgroupentry)`[]`\n\n`layout``: `[`GPUBindGroupLayout`](gpubindgrouplayout)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroupDescriptor](https://doc.deno.land/deno/stable/~/GPUBindGroupDescriptor)"
- name: GPUBindGroupEntry
  id: ~/gpubindgroupentry
  summary: null
  description: "# GPUBindGroupEntry\n\n``` typescript\ninterface GPUBindGroupEntry {\n```\n\nbinding: number;\n\nresource: [GPUBindingResource](gpubindingresource);\n\n}\n\n## Properties\n\n`binding``: ``number`\n\n`resource``: `[`GPUBindingResource`](gpubindingresource)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroupEntry](https://doc.deno.land/deno/stable/~/GPUBindGroupEntry)"
- name: GPUBindGroupLayout
  id: ~/gpubindgrouplayout
  summary: null
  description: "# GPUBindGroupLayout\n\n``` typescript\nclass GPUBindGroupLayout implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroupLayout](https://doc.deno.land/deno/stable/~/GPUBindGroupLayout)"
- name: GPUBindGroupLayoutDescriptor
  id: ~/gpubindgrouplayoutdescriptor
  summary: null
  description: "# GPUBindGroupLayoutDescriptor\n\n``` typescript\ninterface GPUBindGroupLayoutDescriptor  extends GPUObjectDescriptorBase {\n```\n\nentries: [GPUBindGroupLayoutEntry](gpubindgrouplayoutentry)\\[\\];\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`entries``: `[`GPUBindGroupLayoutEntry`](gpubindgrouplayoutentry)`[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroupLayoutDescriptor](https://doc.deno.land/deno/stable/~/GPUBindGroupLayoutDescriptor)"
- name: GPUBindGroupLayoutEntry
  id: ~/gpubindgrouplayoutentry
  summary: null
  description: "# GPUBindGroupLayoutEntry\n\n``` typescript\ninterface GPUBindGroupLayoutEntry {\n```\n\nbinding: number;\n\nbuffer?: [GPUBufferBindingLayout](gpubufferbindinglayout);\n\nsampler?: [GPUSamplerBindingLayout](gpusamplerbindinglayout);\n\nstorageTexture?: [GPUStorageTextureBindingLayout](gpustoragetexturebindinglayout);\n\ntexture?: [GPUTextureBindingLayout](gputexturebindinglayout);\n\nvisibility: [GPUShaderStageFlags](gpushaderstageflags);\n\n}\n\n## Properties\n\n`binding``: ``number`\n\n`buffer?``: `[`GPUBufferBindingLayout`](gpubufferbindinglayout)\n\n`sampler?``: `[`GPUSamplerBindingLayout`](gpusamplerbindinglayout)\n\n`storageTexture?``: `[`GPUStorageTextureBindingLayout`](gpustoragetexturebindinglayout)\n\n`texture?``: `[`GPUTextureBindingLayout`](gputexturebindinglayout)\n\n`visibility``: `[`GPUShaderStageFlags`](gpushaderstageflags)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindGroupLayoutEntry](https://doc.deno.land/deno/stable/~/GPUBindGroupLayoutEntry)"
- name: GPUBindingResource
  id: ~/gpubindingresource
  summary: null
  description: "# GPUBindingResource\n\n``` typescript\ntype GPUBindingResource = GPUSampler | GPUTextureView | GPUBufferBinding;\n```\n\n## Type\n\n[`GPUSampler`](gpusampler)` | `[`GPUTextureView`](gputextureview)` | `[`GPUBufferBinding`](gpubufferbinding)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBindingResource](https://doc.deno.land/deno/stable/~/GPUBindingResource)"
- name: GPUBlendComponent
  id: ~/gpublendcomponent
  summary: null
  description: "# GPUBlendComponent\n\n``` typescript\ninterface GPUBlendComponent {\n```\n\ndstFactor?: [GPUBlendFactor](gpublendfactor);\n\noperation?: [GPUBlendOperation](gpublendoperation);\n\nsrcFactor?: [GPUBlendFactor](gpublendfactor);\n\n}\n\n## Properties\n\n`dstFactor?``: `[`GPUBlendFactor`](gpublendfactor)\n\n`operation?``: `[`GPUBlendOperation`](gpublendoperation)\n\n`srcFactor?``: `[`GPUBlendFactor`](gpublendfactor)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBlendComponent](https://doc.deno.land/deno/stable/~/GPUBlendComponent)"
- name: GPUBlendFactor
  id: ~/gpublendfactor
  summary: null
  description: "# GPUBlendFactor\n\n``` typescript\ntype GPUBlendFactor = \n```\n\n\\| \"zero\"\n\n\\| \"one\"\n\n\\| \"src\"\n\n\\| \"one-minus-src\"\n\n\\| \"src-alpha\"\n\n\\| \"one-minus-src-alpha\"\n\n\\| \"dst\"\n\n\\| \"one-minus-dst\"\n\n\\| \"dst-alpha\"\n\n\\| \"one-minus-dst-alpha\"\n\n\\| \"src-alpha-saturated\"\n\n\\| \"constant\"\n\n\\| \"one-minus-constant\";\n\n## Type\n\n`\"zero\"`` | ``\"one\"`` | ``\"src\"`` | ``\"one-minus-src\"`` | ``\"src-alpha\"`` | ``\"one-minus-src-alpha\"`` | ``\"dst\"`` | ``\"one-minus-dst\"`` | ``\"dst-alpha\"`` | ``\"one-minus-dst-alpha\"`` | ``\"src-alpha-saturated\"`` | ``\"constant\"`` | ``\"one-minus-constant\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBlendFactor](https://doc.deno.land/deno/stable/~/GPUBlendFactor)"
- name: GPUBlendOperation
  id: ~/gpublendoperation
  summary: null
  description: "# GPUBlendOperation\n\n``` typescript\ntype GPUBlendOperation = \n```\n\n\\| \"add\"\n\n\\| \"subtract\"\n\n\\| \"reverse-subtract\"\n\n\\| \"min\"\n\n\\| \"max\";\n\n## Type\n\n`\"add\"`` | ``\"subtract\"`` | ``\"reverse-subtract\"`` | ``\"min\"`` | ``\"max\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBlendOperation](https://doc.deno.land/deno/stable/~/GPUBlendOperation)"
- name: GPUBlendState
  id: ~/gpublendstate
  summary: null
  description: "# GPUBlendState\n\n``` typescript\ninterface GPUBlendState {\n```\n\nalpha: [GPUBlendComponent](gpublendcomponent);\n\ncolor: [GPUBlendComponent](gpublendcomponent);\n\n}\n\n## Properties\n\n`alpha``: `[`GPUBlendComponent`](gpublendcomponent)\n\n`color``: `[`GPUBlendComponent`](gpublendcomponent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBlendState](https://doc.deno.land/deno/stable/~/GPUBlendState)"
- name: GPUBuffer
  id: ~/gpubuffer
  summary: null
  description: "# GPUBuffer\n\n``` typescript\nclass GPUBuffer implements GPUObjectBase {\n```\n\nlabel: string;\n\ndestroy(): undefined;\n\ngetMappedRange(offset?: number, size?: number): ArrayBuffer;\n\nmapAsync(\n\nmode: [GPUMapModeFlags](gpumapmodeflags),\n\noffset?: number,\n\nsize?: number,\n\n): Promise\\<undefined\\>;\n\nunmap(): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`destroy()``: ``undefined`\n\n`getMappedRange(``offset?``: ``number``, ``size?``: ``number``)``: ``ArrayBuffer`\n\n`mapAsync(``mode``: `[`GPUMapModeFlags`](gpumapmodeflags)`, ``offset?``: ``number``, ``size?``: ``number``)``: ``Promise``<``undefined``>`\n\n`unmap()``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBuffer](https://doc.deno.land/deno/stable/~/GPUBuffer)"
- name: GPUBufferBinding
  id: ~/gpubufferbinding
  summary: null
  description: "# GPUBufferBinding\n\n``` typescript\ninterface GPUBufferBinding {\n```\n\nbuffer: [GPUBuffer](gpubuffer);\n\noffset?: number;\n\nsize?: number;\n\n}\n\n## Properties\n\n`buffer``: `[`GPUBuffer`](gpubuffer)\n\n`offset?``: ``number`\n\n`size?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferBinding](https://doc.deno.land/deno/stable/~/GPUBufferBinding)"
- name: GPUBufferBindingLayout
  id: ~/gpubufferbindinglayout
  summary: null
  description: "# GPUBufferBindingLayout\n\n``` typescript\ninterface GPUBufferBindingLayout {\n```\n\nhasDynamicOffset?: boolean;\n\nminBindingSize?: number;\n\ntype?: [GPUBufferBindingType](gpubufferbindingtype);\n\n}\n\n## Properties\n\n`hasDynamicOffset?``: ``boolean`\n\n`minBindingSize?``: ``number`\n\n`type?``: `[`GPUBufferBindingType`](gpubufferbindingtype)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferBindingLayout](https://doc.deno.land/deno/stable/~/GPUBufferBindingLayout)"
- name: GPUBufferBindingType
  id: ~/gpubufferbindingtype
  summary: null
  description: "# GPUBufferBindingType\n\n``` typescript\ntype GPUBufferBindingType = \"uniform\" | \"storage\" | \"read-only-storage\";\n```\n\n## Type\n\n`\"uniform\"`` | ``\"storage\"`` | ``\"read-only-storage\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferBindingType](https://doc.deno.land/deno/stable/~/GPUBufferBindingType)"
- name: GPUBufferDescriptor
  id: ~/gpubufferdescriptor
  summary: null
  description: "# GPUBufferDescriptor\n\n``` typescript\ninterface GPUBufferDescriptor  extends GPUObjectDescriptorBase {\n```\n\nmappedAtCreation?: boolean;\n\nsize: number;\n\nusage: [GPUBufferUsageFlags](gpubufferusageflags);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`mappedAtCreation?``: ``boolean`\n\n`size``: ``number`\n\n`usage``: `[`GPUBufferUsageFlags`](gpubufferusageflags)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferDescriptor](https://doc.deno.land/deno/stable/~/GPUBufferDescriptor)"
- name: GPUBufferUsage
  id: ~/gpubufferusage
  summary: null
  description: "# GPUBufferUsage\n\n``` typescript\nclass GPUBufferUsage {\n```\n\nstatic COPY_DST: 8;\n\nstatic COPY_SRC: 4;\n\nstatic INDEX: 16;\n\nstatic INDIRECT: 256;\n\nstatic MAP_READ: 1;\n\nstatic MAP_WRITE: 2;\n\nstatic QUERY_RESOLVE: 512;\n\nstatic STORAGE: 128;\n\nstatic UNIFORM: 64;\n\nstatic VERTEX: 32;\n\n}\n\n## Static Properties\n\n`COPY_DST``: ``8`\n\n`COPY_SRC``: ``4`\n\n`INDEX``: ``16`\n\n`INDIRECT``: ``256`\n\n`MAP_READ``: ``1`\n\n`MAP_WRITE``: ``2`\n\n`QUERY_RESOLVE``: ``512`\n\n`STORAGE``: ``128`\n\n`UNIFORM``: ``64`\n\n`VERTEX``: ``32`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferUsage](https://doc.deno.land/deno/stable/~/GPUBufferUsage)"
- name: GPUBufferUsageFlags
  id: ~/gpubufferusageflags
  summary: null
  description: "# GPUBufferUsageFlags\n\n``` typescript\ntype GPUBufferUsageFlags = number;\n```\n\n## Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUBufferUsageFlags](https://doc.deno.land/deno/stable/~/GPUBufferUsageFlags)"
- name: GPUColor
  id: ~/gpucolor
  summary: null
  description: "# GPUColor\n\n``` typescript\ntype GPUColor = number[] | GPUColorDict;\n```\n\n## Type\n\n`number``[]`` | `[`GPUColorDict`](gpucolordict)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUColor](https://doc.deno.land/deno/stable/~/GPUColor)"
- name: GPUColorDict
  id: ~/gpucolordict
  summary: null
  description: "# GPUColorDict\n\n``` typescript\ninterface GPUColorDict {\n```\n\na: number;\n\nb: number;\n\ng: number;\n\nr: number;\n\n}\n\n## Properties\n\n`a``: ``number`\n\n`b``: ``number`\n\n`g``: ``number`\n\n`r``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUColorDict](https://doc.deno.land/deno/stable/~/GPUColorDict)"
- name: GPUColorTargetState
  id: ~/gpucolortargetstate
  summary: null
  description: "# GPUColorTargetState\n\n``` typescript\ninterface GPUColorTargetState {\n```\n\nblend?: [GPUBlendState](gpublendstate);\n\nformat: [GPUTextureFormat](gputextureformat);\n\nwriteMask?: [GPUColorWriteFlags](gpucolorwriteflags);\n\n}\n\n## Properties\n\n`blend?``: `[`GPUBlendState`](gpublendstate)\n\n`format``: `[`GPUTextureFormat`](gputextureformat)\n\n`writeMask?``: `[`GPUColorWriteFlags`](gpucolorwriteflags)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUColorTargetState](https://doc.deno.land/deno/stable/~/GPUColorTargetState)"
- name: GPUColorWrite
  id: ~/gpucolorwrite
  summary: null
  description: "# GPUColorWrite\n\n``` typescript\nclass GPUColorWrite {\n```\n\nstatic ALL: 15;\n\nstatic ALPHA: 8;\n\nstatic BLUE: 4;\n\nstatic GREEN: 2;\n\nstatic RED: 1;\n\n}\n\n## Static Properties\n\n`ALL``: ``15`\n\n`ALPHA``: ``8`\n\n`BLUE``: ``4`\n\n`GREEN``: ``2`\n\n`RED``: ``1`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUColorWrite](https://doc.deno.land/deno/stable/~/GPUColorWrite)"
- name: GPUColorWriteFlags
  id: ~/gpucolorwriteflags
  summary: null
  description: "# GPUColorWriteFlags\n\n``` typescript\ntype GPUColorWriteFlags = number;\n```\n\n## Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUColorWriteFlags](https://doc.deno.land/deno/stable/~/GPUColorWriteFlags)"
- name: GPUCommandBuffer
  id: ~/gpucommandbuffer
  summary: null
  description: "# GPUCommandBuffer\n\n``` typescript\nclass GPUCommandBuffer implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCommandBuffer](https://doc.deno.land/deno/stable/~/GPUCommandBuffer)"
- name: GPUCommandBufferDescriptor
  id: ~/gpucommandbufferdescriptor
  summary: null
  description: "# GPUCommandBufferDescriptor\n\n``` typescript\ninterface GPUCommandBufferDescriptor  extends GPUObjectDescriptorBase {}\n```\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCommandBufferDescriptor](https://doc.deno.land/deno/stable/~/GPUCommandBufferDescriptor)"
- name: GPUCommandEncoder
  id: ~/gpucommandencoder
  summary: null
  description: "# GPUCommandEncoder\n\n``` typescript\nclass GPUCommandEncoder implements GPUObjectBase {\n```\n\nlabel: string;\n\nbeginComputePass(descriptor?: [GPUComputePassDescriptor](gpucomputepassdescriptor)): [GPUComputePassEncoder](gpucomputepassencoder);\n\nbeginRenderPass(descriptor: [GPURenderPassDescriptor](gpurenderpassdescriptor)): [GPURenderPassEncoder](gpurenderpassencoder);\n\nclearBuffer(\n\ndestination: [GPUBuffer](gpubuffer),\n\ndestinationOffset?: number,\n\nsize?: number,\n\n): undefined;\n\ncopyBufferToBuffer(\n\nsource: [GPUBuffer](gpubuffer),\n\nsourceOffset: number,\n\ndestination: [GPUBuffer](gpubuffer),\n\ndestinationOffset: number,\n\nsize: number,\n\n): undefined;\n\ncopyBufferToTexture(\n\nsource: [GPUImageCopyBuffer](gpuimagecopybuffer),\n\ndestination: [GPUImageCopyTexture](gpuimagecopytexture),\n\ncopySize: [GPUExtent3D](gpuextent3d),\n\n): undefined;\n\ncopyTextureToBuffer(\n\nsource: [GPUImageCopyTexture](gpuimagecopytexture),\n\ndestination: [GPUImageCopyBuffer](gpuimagecopybuffer),\n\ncopySize: [GPUExtent3D](gpuextent3d),\n\n): undefined;\n\ncopyTextureToTexture(\n\nsource: [GPUImageCopyTexture](gpuimagecopytexture),\n\ndestination: [GPUImageCopyTexture](gpuimagecopytexture),\n\ncopySize: [GPUExtent3D](gpuextent3d),\n\n): undefined;\n\nfinish(descriptor?: [GPUCommandBufferDescriptor](gpucommandbufferdescriptor)): [GPUCommandBuffer](gpucommandbuffer);\n\ninsertDebugMarker(markerLabel: string): undefined;\n\npopDebugGroup(): undefined;\n\npushDebugGroup(groupLabel: string): undefined;\n\nresolveQuerySet(\n\nquerySet: [GPUQuerySet](gpuqueryset),\n\nfirstQuery: number,\n\nqueryCount: number,\n\ndestination: [GPUBuffer](gpubuffer),\n\ndestinationOffset: number,\n\n): undefined;\n\nwriteTimestamp(querySet: [GPUQuerySet](gpuqueryset), queryIndex: number): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`beginComputePass(``descriptor?``: `[`GPUComputePassDescriptor`](gpucomputepassdescriptor)`)``: `[`GPUComputePassEncoder`](gpucomputepassencoder)\n\n`beginRenderPass(``descriptor``: `[`GPURenderPassDescriptor`](gpurenderpassdescriptor)`)``: `[`GPURenderPassEncoder`](gpurenderpassencoder)\n\n`clearBuffer(``destination``: `[`GPUBuffer`](gpubuffer)`, ``destinationOffset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n`copyBufferToBuffer(``source``: `[`GPUBuffer`](gpubuffer)`, ``sourceOffset``: ``number``, ``destination``: `[`GPUBuffer`](gpubuffer)`, ``destinationOffset``: ``number``, ``size``: ``number``)``: ``undefined`\n\n`copyBufferToTexture(``source``: `[`GPUImageCopyBuffer`](gpuimagecopybuffer)`, ``destination``: `[`GPUImageCopyTexture`](gpuimagecopytexture)`, ``copySize``: `[`GPUExtent3D`](gpuextent3d)`)``: ``undefined`\n\n`copyTextureToBuffer(``source``: `[`GPUImageCopyTexture`](gpuimagecopytexture)`, ``destination``: `[`GPUImageCopyBuffer`](gpuimagecopybuffer)`, ``copySize``: `[`GPUExtent3D`](gpuextent3d)`)``: ``undefined`\n\n`copyTextureToTexture(``source``: `[`GPUImageCopyTexture`](gpuimagecopytexture)`, ``destination``: `[`GPUImageCopyTexture`](gpuimagecopytexture)`, ``copySize``: `[`GPUExtent3D`](gpuextent3d)`)``: ``undefined`\n\n`finish(``descriptor?``: `[`GPUCommandBufferDescriptor`](gpucommandbufferdescriptor)`)``: `[`GPUCommandBuffer`](gpucommandbuffer)\n\n`insertDebugMarker(``markerLabel``: ``string``)``: ``undefined`\n\n`popDebugGroup()``: ``undefined`\n\n`pushDebugGroup(``groupLabel``: ``string``)``: ``undefined`\n\n`resolveQuerySet(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``firstQuery``: ``number``, ``queryCount``: ``number``, ``destination``: `[`GPUBuffer`](gpubuffer)`, ``destinationOffset``: ``number``)``: ``undefined`\n\n`writeTimestamp(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``queryIndex``: ``number``)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCommandEncoder](https://doc.deno.land/deno/stable/~/GPUCommandEncoder)"
- name: GPUCommandEncoderDescriptor
  id: ~/gpucommandencoderdescriptor
  summary: null
  description: "# GPUCommandEncoderDescriptor\n\n``` typescript\ninterface GPUCommandEncoderDescriptor  extends GPUObjectDescriptorBase {}\n```\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCommandEncoderDescriptor](https://doc.deno.land/deno/stable/~/GPUCommandEncoderDescriptor)"
- name: GPUCompareFunction
  id: ~/gpucomparefunction
  summary: null
  description: "# GPUCompareFunction\n\n``` typescript\ntype GPUCompareFunction = \n```\n\n\\| \"never\"\n\n\\| \"less\"\n\n\\| \"equal\"\n\n\\| \"less-equal\"\n\n\\| \"greater\"\n\n\\| \"not-equal\"\n\n\\| \"greater-equal\"\n\n\\| \"always\";\n\n## Type\n\n`\"never\"`` | ``\"less\"`` | ``\"equal\"`` | ``\"less-equal\"`` | ``\"greater\"`` | ``\"not-equal\"`` | ``\"greater-equal\"`` | ``\"always\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCompareFunction](https://doc.deno.land/deno/stable/~/GPUCompareFunction)"
- name: GPUCompilationInfo
  id: ~/gpucompilationinfo
  summary: null
  description: "# GPUCompilationInfo\n\n``` typescript\ninterface GPUCompilationInfo {\n```\n\nreadonly messages: ReadonlyArray\\<[GPUCompilationMessage](gpucompilationmessage)\\>;\n\n}\n\n## Properties\n\n`readonly ``messages``: ``ReadonlyArray``<`[`GPUCompilationMessage`](gpucompilationmessage)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCompilationInfo](https://doc.deno.land/deno/stable/~/GPUCompilationInfo)"
- name: GPUCompilationMessage
  id: ~/gpucompilationmessage
  summary: null
  description: "# GPUCompilationMessage\n\n``` typescript\ninterface GPUCompilationMessage {\n```\n\nreadonly lineNum: number;\n\nreadonly linePos: number;\n\nreadonly message: string;\n\nreadonly type: [GPUCompilationMessageType](gpucompilationmessagetype);\n\n}\n\n## Properties\n\n`readonly ``lineNum``: ``number`\n\n`readonly ``linePos``: ``number`\n\n`readonly ``message``: ``string`\n\n`readonly ``type``: `[`GPUCompilationMessageType`](gpucompilationmessagetype)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCompilationMessage](https://doc.deno.land/deno/stable/~/GPUCompilationMessage)"
- name: GPUCompilationMessageType
  id: ~/gpucompilationmessagetype
  summary: null
  description: "# GPUCompilationMessageType\n\n``` typescript\ntype GPUCompilationMessageType = \"error\" | \"warning\" | \"info\";\n```\n\n## Type\n\n`\"error\"`` | ``\"warning\"`` | ``\"info\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCompilationMessageType](https://doc.deno.land/deno/stable/~/GPUCompilationMessageType)"
- name: GPUComputePassDescriptor
  id: ~/gpucomputepassdescriptor
  summary: null
  description: "# GPUComputePassDescriptor\n\n``` typescript\ninterface GPUComputePassDescriptor  extends GPUObjectDescriptorBase {}\n```\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUComputePassDescriptor](https://doc.deno.land/deno/stable/~/GPUComputePassDescriptor)"
- name: GPUComputePassEncoder
  id: ~/gpucomputepassencoder
  summary: null
  description: "# GPUComputePassEncoder\n\n``` typescript\nclass GPUComputePassEncoder implements GPUObjectBase, GPUProgrammablePassEncoder {\n```\n\nlabel: string;\n\nbeginPipelineStatisticsQuery(querySet: [GPUQuerySet](gpuqueryset), queryIndex: number): undefined;\n\ndispatchWorkgroups(\n\nx: number,\n\ny?: number,\n\nz?: number,\n\n): undefined;\n\ndispatchWorkgroupsIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\nend(): undefined;\n\nendPipelineStatisticsQuery(): undefined;\n\ninsertDebugMarker(markerLabel: string): undefined;\n\npopDebugGroup(): undefined;\n\npushDebugGroup(groupLabel: string): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsets?: number\\[\\],\n\n): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsetsData: Uint32Array,\n\ndynamicOffsetsDataStart: number,\n\ndynamicOffsetsDataLength: number,\n\n): undefined;\n\nsetPipeline(pipeline: [GPUComputePipeline](gpucomputepipeline)): undefined;\n\nwriteTimestamp(querySet: [GPUQuerySet](gpuqueryset), queryIndex: number): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n[`GPUProgrammablePassEncoder`](gpuprogrammablepassencoder)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`beginPipelineStatisticsQuery(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``queryIndex``: ``number``)``: ``undefined`\n\n`dispatchWorkgroups(``x``: ``number``, ``y?``: ``number``, ``z?``: ``number``)``: ``undefined`\n\n`dispatchWorkgroupsIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`end()``: ``undefined`\n\n`endPipelineStatisticsQuery()``: ``undefined`\n\n`insertDebugMarker(``markerLabel``: ``string``)``: ``undefined`\n\n`popDebugGroup()``: ``undefined`\n\n`pushDebugGroup(``groupLabel``: ``string``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsets?``: ``number``[]``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsetsData``: ``Uint32Array``, ``dynamicOffsetsDataStart``: ``number``, ``dynamicOffsetsDataLength``: ``number``)``: ``undefined`\n\n`setPipeline(``pipeline``: `[`GPUComputePipeline`](gpucomputepipeline)`)``: ``undefined`\n\n`writeTimestamp(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``queryIndex``: ``number``)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUComputePassEncoder](https://doc.deno.land/deno/stable/~/GPUComputePassEncoder)"
- name: GPUComputePipeline
  id: ~/gpucomputepipeline
  summary: null
  description: "# GPUComputePipeline\n\n``` typescript\nclass GPUComputePipeline implements GPUObjectBase, GPUPipelineBase {\n```\n\nlabel: string;\n\ngetBindGroupLayout(index: number): [GPUBindGroupLayout](gpubindgrouplayout);\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n[`GPUPipelineBase`](gpupipelinebase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`getBindGroupLayout(``index``: ``number``)``: `[`GPUBindGroupLayout`](gpubindgrouplayout)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUComputePipeline](https://doc.deno.land/deno/stable/~/GPUComputePipeline)"
- name: GPUComputePipelineDescriptor
  id: ~/gpucomputepipelinedescriptor
  summary: null
  description: "# GPUComputePipelineDescriptor\n\n``` typescript\ninterface GPUComputePipelineDescriptor  extends GPUPipelineDescriptorBase {\n```\n\ncompute: [GPUProgrammableStage](gpuprogrammablestage);\n\n}\n\n## Extends\n\n[`GPUPipelineDescriptorBase`](gpupipelinedescriptorbase)\n\n## Properties\n\n`compute``: `[`GPUProgrammableStage`](gpuprogrammablestage)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUComputePipelineDescriptor](https://doc.deno.land/deno/stable/~/GPUComputePipelineDescriptor)"
- name: GPUCullMode
  id: ~/gpucullmode
  summary: null
  description: "# GPUCullMode\n\n``` typescript\ntype GPUCullMode = \"none\" | \"front\" | \"back\";\n```\n\n## Type\n\n`\"none\"`` | ``\"front\"`` | ``\"back\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUCullMode](https://doc.deno.land/deno/stable/~/GPUCullMode)"
- name: GPUDepthStencilState
  id: ~/gpudepthstencilstate
  summary: null
  description: "# GPUDepthStencilState\n\n``` typescript\ninterface GPUDepthStencilState {\n```\n\ndepthBias?: number;\n\ndepthBiasClamp?: number;\n\ndepthBiasSlopeScale?: number;\n\ndepthCompare?: [GPUCompareFunction](gpucomparefunction);\n\ndepthWriteEnabled?: boolean;\n\nformat: [GPUTextureFormat](gputextureformat);\n\nstencilBack?: [GPUStencilFaceState](gpustencilfacestate);\n\nstencilFront?: [GPUStencilFaceState](gpustencilfacestate);\n\nstencilReadMask?: number;\n\nstencilWriteMask?: number;\n\n}\n\n## Properties\n\n`depthBias?``: ``number`\n\n`depthBiasClamp?``: ``number`\n\n`depthBiasSlopeScale?``: ``number`\n\n`depthCompare?``: `[`GPUCompareFunction`](gpucomparefunction)\n\n`depthWriteEnabled?``: ``boolean`\n\n`format``: `[`GPUTextureFormat`](gputextureformat)\n\n`stencilBack?``: `[`GPUStencilFaceState`](gpustencilfacestate)\n\n`stencilFront?``: `[`GPUStencilFaceState`](gpustencilfacestate)\n\n`stencilReadMask?``: ``number`\n\n`stencilWriteMask?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUDepthStencilState](https://doc.deno.land/deno/stable/~/GPUDepthStencilState)"
- name: GPUDevice
  id: ~/gpudevice
  summary: null
  description: "# GPUDevice\n\n``` typescript\nclass GPUDevice extends EventTarget implements GPUObjectBase {\n```\n\nreadonly features: [GPUSupportedFeatures](gpusupportedfeatures);\n\nlabel: string;\n\nreadonly limits: [GPUSupportedLimits](gpusupportedlimits);\n\nreadonly lost: Promise\\<[GPUDeviceLostInfo](gpudevicelostinfo)\\>;\n\nonuncapturederror: ((this: [GPUDevice](gpudevice), ev: [GPUUncapturedErrorEvent](gpuuncapturederrorevent)) =\\> any) \\| null;\n\nreadonly queue: [GPUQueue](gpuqueue);\n\ncreateBindGroup(descriptor: [GPUBindGroupDescriptor](gpubindgroupdescriptor)): [GPUBindGroup](gpubindgroup);\n\ncreateBindGroupLayout(descriptor: [GPUBindGroupLayoutDescriptor](gpubindgrouplayoutdescriptor)): [GPUBindGroupLayout](gpubindgrouplayout);\n\ncreateBuffer(descriptor: [GPUBufferDescriptor](gpubufferdescriptor)): [GPUBuffer](gpubuffer);\n\ncreateCommandEncoder(descriptor?: [GPUCommandEncoderDescriptor](gpucommandencoderdescriptor)): [GPUCommandEncoder](gpucommandencoder);\n\ncreateComputePipeline(descriptor: [GPUComputePipelineDescriptor](gpucomputepipelinedescriptor)): [GPUComputePipeline](gpucomputepipeline);\n\ncreateComputePipelineAsync(descriptor: [GPUComputePipelineDescriptor](gpucomputepipelinedescriptor)): Promise\\<[GPUComputePipeline](gpucomputepipeline)\\>;\n\ncreatePipelineLayout(descriptor: [GPUPipelineLayoutDescriptor](gpupipelinelayoutdescriptor)): [GPUPipelineLayout](gpupipelinelayout);\n\ncreateQuerySet(descriptor: [GPUQuerySetDescriptor](gpuquerysetdescriptor)): [GPUQuerySet](gpuqueryset);\n\ncreateRenderBundleEncoder(descriptor: [GPURenderBundleEncoderDescriptor](gpurenderbundleencoderdescriptor)): [GPURenderBundleEncoder](gpurenderbundleencoder);\n\ncreateRenderPipeline(descriptor: [GPURenderPipelineDescriptor](gpurenderpipelinedescriptor)): [GPURenderPipeline](gpurenderpipeline);\n\ncreateRenderPipelineAsync(descriptor: [GPURenderPipelineDescriptor](gpurenderpipelinedescriptor)): Promise\\<[GPURenderPipeline](gpurenderpipeline)\\>;\n\ncreateSampler(descriptor?: [GPUSamplerDescriptor](gpusamplerdescriptor)): [GPUSampler](gpusampler);\n\ncreateShaderModule(descriptor: [GPUShaderModuleDescriptor](gpushadermoduledescriptor)): [GPUShaderModule](gpushadermodule);\n\ncreateTexture(descriptor: [GPUTextureDescriptor](gputexturedescriptor)): [GPUTexture](gputexture);\n\ndestroy(): undefined;\n\npopErrorScope(): Promise\\<[GPUError](gpuerror) \\| null\\>;\n\npushErrorScope(filter: [GPUErrorFilter](gpuerrorfilter)): undefined;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`features``: `[`GPUSupportedFeatures`](gpusupportedfeatures)\n\n`label``: ``string`\n\n`limits``: `[`GPUSupportedLimits`](gpusupportedlimits)\n\n`lost``: ``Promise``<`[`GPUDeviceLostInfo`](gpudevicelostinfo)`>`\n\n`onuncapturederror``: ``(``(``this``: `[`GPUDevice`](gpudevice)`, ``ev``: `[`GPUUncapturedErrorEvent`](gpuuncapturederrorevent)`) => ``any``)`` | ``null`\n\n`queue``: `[`GPUQueue`](gpuqueue)\n\n## Methods\n\n`createBindGroup(``descriptor``: `[`GPUBindGroupDescriptor`](gpubindgroupdescriptor)`)``: `[`GPUBindGroup`](gpubindgroup)\n\n`createBindGroupLayout(``descriptor``: `[`GPUBindGroupLayoutDescriptor`](gpubindgrouplayoutdescriptor)`)``: `[`GPUBindGroupLayout`](gpubindgrouplayout)\n\n`createBuffer(``descriptor``: `[`GPUBufferDescriptor`](gpubufferdescriptor)`)``: `[`GPUBuffer`](gpubuffer)\n\n`createCommandEncoder(``descriptor?``: `[`GPUCommandEncoderDescriptor`](gpucommandencoderdescriptor)`)``: `[`GPUCommandEncoder`](gpucommandencoder)\n\n`createComputePipeline(``descriptor``: `[`GPUComputePipelineDescriptor`](gpucomputepipelinedescriptor)`)``: `[`GPUComputePipeline`](gpucomputepipeline)\n\n`createComputePipelineAsync(``descriptor``: `[`GPUComputePipelineDescriptor`](gpucomputepipelinedescriptor)`)``: ``Promise``<`[`GPUComputePipeline`](gpucomputepipeline)`>`\n\n`createPipelineLayout(``descriptor``: `[`GPUPipelineLayoutDescriptor`](gpupipelinelayoutdescriptor)`)``: `[`GPUPipelineLayout`](gpupipelinelayout)\n\n`createQuerySet(``descriptor``: `[`GPUQuerySetDescriptor`](gpuquerysetdescriptor)`)``: `[`GPUQuerySet`](gpuqueryset)\n\n`createRenderBundleEncoder(``descriptor``: `[`GPURenderBundleEncoderDescriptor`](gpurenderbundleencoderdescriptor)`)``: `[`GPURenderBundleEncoder`](gpurenderbundleencoder)\n\n`createRenderPipeline(``descriptor``: `[`GPURenderPipelineDescriptor`](gpurenderpipelinedescriptor)`)``: `[`GPURenderPipeline`](gpurenderpipeline)\n\n`createRenderPipelineAsync(``descriptor``: `[`GPURenderPipelineDescriptor`](gpurenderpipelinedescriptor)`)``: ``Promise``<`[`GPURenderPipeline`](gpurenderpipeline)`>`\n\n`createSampler(``descriptor?``: `[`GPUSamplerDescriptor`](gpusamplerdescriptor)`)``: `[`GPUSampler`](gpusampler)\n\n`createShaderModule(``descriptor``: `[`GPUShaderModuleDescriptor`](gpushadermoduledescriptor)`)``: `[`GPUShaderModule`](gpushadermodule)\n\n`createTexture(``descriptor``: `[`GPUTextureDescriptor`](gputexturedescriptor)`)``: `[`GPUTexture`](gputexture)\n\n`destroy()``: ``undefined`\n\n`popErrorScope()``: ``Promise``<`[`GPUError`](gpuerror)` | ``null``>`\n\n`pushErrorScope(``filter``: `[`GPUErrorFilter`](gpuerrorfilter)`)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUDevice](https://doc.deno.land/deno/stable/~/GPUDevice)"
- name: GPUDeviceDescriptor
  id: ~/gpudevicedescriptor
  summary: null
  description: "# GPUDeviceDescriptor\n\n``` typescript\ninterface GPUDeviceDescriptor  extends GPUObjectDescriptorBase {\n```\n\nrequiredFeatures?: [GPUFeatureName](gpufeaturename)\\[\\];\n\nrequiredLimits?: Record\\<string, number\\>;\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`requiredFeatures?``: `[`GPUFeatureName`](gpufeaturename)`[]`\n\n`requiredLimits?``: ``Record``<``string``, ``number``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUDeviceDescriptor](https://doc.deno.land/deno/stable/~/GPUDeviceDescriptor)"
- name: GPUDeviceLostInfo
  id: ~/gpudevicelostinfo
  summary: null
  description: "# GPUDeviceLostInfo\n\n``` typescript\ninterface GPUDeviceLostInfo {\n```\n\nreadonly message: string;\n\nreadonly reason: [GPUDeviceLostReason](gpudevicelostreason) \\| undefined;\n\n}\n\n## Properties\n\n`readonly ``message``: ``string`\n\n`readonly ``reason``: `[`GPUDeviceLostReason`](gpudevicelostreason)` | ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUDeviceLostInfo](https://doc.deno.land/deno/stable/~/GPUDeviceLostInfo)"
- name: GPUDeviceLostReason
  id: ~/gpudevicelostreason
  summary: null
  description: "# GPUDeviceLostReason\n\n``` typescript\ntype GPUDeviceLostReason = \"destroyed\";\n```\n\n## Type\n\n`\"destroyed\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUDeviceLostReason](https://doc.deno.land/deno/stable/~/GPUDeviceLostReason)"
- name: GPUError
  id: ~/gpuerror
  summary: null
  description: "# GPUError\n\n``` typescript\nclass GPUError {\n```\n\nreadonly message: string;\n\n}\n\n## Properties\n\n`message``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUError](https://doc.deno.land/deno/stable/~/GPUError)"
- name: GPUErrorFilter
  id: ~/gpuerrorfilter
  summary: null
  description: "# GPUErrorFilter\n\n``` typescript\ntype GPUErrorFilter = \"out-of-memory\" | \"validation\";\n```\n\n## Type\n\n`\"out-of-memory\"`` | ``\"validation\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUErrorFilter](https://doc.deno.land/deno/stable/~/GPUErrorFilter)"
- name: GPUExtent3D
  id: ~/gpuextent3d
  summary: null
  description: "# GPUExtent3D\n\n``` typescript\ntype GPUExtent3D = number[] | GPUExtent3DDict;\n```\n\n## Type\n\n`number``[]`` | `[`GPUExtent3DDict`](gpuextent3ddict)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUExtent3D](https://doc.deno.land/deno/stable/~/GPUExtent3D)"
- name: GPUExtent3DDict
  id: ~/gpuextent3ddict
  summary: null
  description: "# GPUExtent3DDict\n\n``` typescript\ninterface GPUExtent3DDict {\n```\n\ndepthOrArrayLayers?: number;\n\nheight?: number;\n\nwidth: number;\n\n}\n\n## Properties\n\n`depthOrArrayLayers?``: ``number`\n\n`height?``: ``number`\n\n`width``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUExtent3DDict](https://doc.deno.land/deno/stable/~/GPUExtent3DDict)"
- name: GPUFeatureName
  id: ~/gpufeaturename
  summary: null
  description: "# GPUFeatureName\n\n``` typescript\ntype GPUFeatureName = \n```\n\n\\| \"depth-clip-control\"\n\n\\| \"depth24unorm-stencil8\"\n\n\\| \"depth32float-stencil8\"\n\n\\| \"pipeline-statistics-query\"\n\n\\| \"texture-compression-bc\"\n\n\\| \"texture-compression-etc2\"\n\n\\| \"texture-compression-astc\"\n\n\\| \"timestamp-query\"\n\n\\| \"indirect-first-instance\"\n\n\\| \"shader-f16\"\n\n\\| \"mappable-primary-buffers\"\n\n\\| \"sampled-texture-binding-array\"\n\n\\| \"sampled-texture-array-dynamic-indexing\"\n\n\\| \"sampled-texture-array-non-uniform-indexing\"\n\n\\| \"unsized-binding-array\"\n\n\\| \"multi-draw-indirect\"\n\n\\| \"multi-draw-indirect-count\"\n\n\\| \"push-constants\"\n\n\\| \"address-mode-clamp-to-border\"\n\n\\| \"texture-adapter-specific-format-features\"\n\n\\| \"shader-float64\"\n\n\\| \"vertex-attribute-64bit\";\n\n## Type\n\n`\"depth-clip-control\"`` | ``\"depth24unorm-stencil8\"`` | ``\"depth32float-stencil8\"`` | ``\"pipeline-statistics-query\"`` | ``\"texture-compression-bc\"`` | ``\"texture-compression-etc2\"`` | ``\"texture-compression-astc\"`` | ``\"timestamp-query\"`` | ``\"indirect-first-instance\"`` | ``\"shader-f16\"`` | ``\"mappable-primary-buffers\"`` | ``\"sampled-texture-binding-array\"`` | ``\"sampled-texture-array-dynamic-indexing\"`` | ``\"sampled-texture-array-non-uniform-indexing\"`` | ``\"unsized-binding-array\"`` | ``\"multi-draw-indirect\"`` | ``\"multi-draw-indirect-count\"`` | ``\"push-constants\"`` | ``\"address-mode-clamp-to-border\"`` | ``\"texture-adapter-specific-format-features\"`` | ``\"shader-float64\"`` | ``\"vertex-attribute-64bit\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUFeatureName](https://doc.deno.land/deno/stable/~/GPUFeatureName)"
- name: GPUFilterMode
  id: ~/gpufiltermode
  summary: null
  description: "# GPUFilterMode\n\n``` typescript\ntype GPUFilterMode = \"nearest\" | \"linear\";\n```\n\n## Type\n\n`\"nearest\"`` | ``\"linear\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUFilterMode](https://doc.deno.land/deno/stable/~/GPUFilterMode)"
- name: GPUFragmentState
  id: ~/gpufragmentstate
  summary: null
  description: "# GPUFragmentState\n\n``` typescript\ninterface GPUFragmentState  extends GPUProgrammableStage {\n```\n\ntargets: ([GPUColorTargetState](gpucolortargetstate) \\| null)\\[\\];\n\n}\n\n## Extends\n\n[`GPUProgrammableStage`](gpuprogrammablestage)\n\n## Properties\n\n`targets``: ``(`[`GPUColorTargetState`](gpucolortargetstate)` | ``null``)``[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUFragmentState](https://doc.deno.land/deno/stable/~/GPUFragmentState)"
- name: GPUFrontFace
  id: ~/gpufrontface
  summary: null
  description: "# GPUFrontFace\n\n``` typescript\ntype GPUFrontFace = \"ccw\" | \"cw\";\n```\n\n## Type\n\n`\"ccw\"`` | ``\"cw\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUFrontFace](https://doc.deno.land/deno/stable/~/GPUFrontFace)"
- name: GPUImageCopyBuffer
  id: ~/gpuimagecopybuffer
  summary: null
  description: "# GPUImageCopyBuffer\n\n``` typescript\ninterface GPUImageCopyBuffer  extends GPUImageDataLayout {\n```\n\nbuffer: [GPUBuffer](gpubuffer);\n\n}\n\n## Extends\n\n[`GPUImageDataLayout`](gpuimagedatalayout)\n\n## Properties\n\n`buffer``: `[`GPUBuffer`](gpubuffer)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUImageCopyBuffer](https://doc.deno.land/deno/stable/~/GPUImageCopyBuffer)"
- name: GPUImageCopyTexture
  id: ~/gpuimagecopytexture
  summary: null
  description: "# GPUImageCopyTexture\n\n``` typescript\ninterface GPUImageCopyTexture {\n```\n\naspect?: [GPUTextureAspect](gputextureaspect);\n\nmipLevel?: number;\n\norigin?: [GPUOrigin3D](gpuorigin3d);\n\ntexture: [GPUTexture](gputexture);\n\n}\n\n## Properties\n\n`aspect?``: `[`GPUTextureAspect`](gputextureaspect)\n\n`mipLevel?``: ``number`\n\n`origin?``: `[`GPUOrigin3D`](gpuorigin3d)\n\n`texture``: `[`GPUTexture`](gputexture)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUImageCopyTexture](https://doc.deno.land/deno/stable/~/GPUImageCopyTexture)"
- name: GPUImageDataLayout
  id: ~/gpuimagedatalayout
  summary: null
  description: "# GPUImageDataLayout\n\n``` typescript\ninterface GPUImageDataLayout {\n```\n\nbytesPerRow?: number;\n\noffset?: number;\n\nrowsPerImage?: number;\n\n}\n\n## Properties\n\n`bytesPerRow?``: ``number`\n\n`offset?``: ``number`\n\n`rowsPerImage?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUImageDataLayout](https://doc.deno.land/deno/stable/~/GPUImageDataLayout)"
- name: GPUIndexFormat
  id: ~/gpuindexformat
  summary: null
  description: "# GPUIndexFormat\n\n``` typescript\ntype GPUIndexFormat = \"uint16\" | \"uint32\";\n```\n\n## Type\n\n`\"uint16\"`` | ``\"uint32\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUIndexFormat](https://doc.deno.land/deno/stable/~/GPUIndexFormat)"
- name: GPULoadOp
  id: ~/gpuloadop
  summary: null
  description: "# GPULoadOp\n\n``` typescript\ntype GPULoadOp = \"load\" | \"clear\";\n```\n\n## Type\n\n`\"load\"`` | ``\"clear\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPULoadOp](https://doc.deno.land/deno/stable/~/GPULoadOp)"
- name: GPUMapMode
  id: ~/gpumapmode
  summary: null
  description: "# GPUMapMode\n\n``` typescript\nclass GPUMapMode {\n```\n\nstatic READ: 1;\n\nstatic WRITE: 2;\n\n}\n\n## Static Properties\n\n`READ``: ``1`\n\n`WRITE``: ``2`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUMapMode](https://doc.deno.land/deno/stable/~/GPUMapMode)"
- name: GPUMapModeFlags
  id: ~/gpumapmodeflags
  summary: null
  description: "# GPUMapModeFlags\n\n``` typescript\ntype GPUMapModeFlags = number;\n```\n\n## Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUMapModeFlags](https://doc.deno.land/deno/stable/~/GPUMapModeFlags)"
- name: GPUMipmapFilterMode
  id: ~/gpumipmapfiltermode
  summary: null
  description: "# GPUMipmapFilterMode\n\n``` typescript\ntype GPUMipmapFilterMode = \"nearest\" | \"linear\";\n```\n\n## Type\n\n`\"nearest\"`` | ``\"linear\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUMipmapFilterMode](https://doc.deno.land/deno/stable/~/GPUMipmapFilterMode)"
- name: GPUMultisampleState
  id: ~/gpumultisamplestate
  summary: null
  description: "# GPUMultisampleState\n\n``` typescript\ninterface GPUMultisampleState {\n```\n\nalphaToCoverageEnabled?: boolean;\n\ncount?: number;\n\nmask?: number;\n\n}\n\n## Properties\n\n`alphaToCoverageEnabled?``: ``boolean`\n\n`count?``: ``number`\n\n`mask?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUMultisampleState](https://doc.deno.land/deno/stable/~/GPUMultisampleState)"
- name: GPUObjectBase
  id: ~/gpuobjectbase
  summary: null
  description: "# GPUObjectBase\n\n``` typescript\ninterface GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUObjectBase](https://doc.deno.land/deno/stable/~/GPUObjectBase)"
- name: GPUObjectDescriptorBase
  id: ~/gpuobjectdescriptorbase
  summary: null
  description: "# GPUObjectDescriptorBase\n\n``` typescript\ninterface GPUObjectDescriptorBase {\n```\n\nlabel?: string;\n\n}\n\n## Properties\n\n`label?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUObjectDescriptorBase](https://doc.deno.land/deno/stable/~/GPUObjectDescriptorBase)"
- name: GPUOrigin3D
  id: ~/gpuorigin3d
  summary: null
  description: "# GPUOrigin3D\n\n``` typescript\ntype GPUOrigin3D = number[] | GPUOrigin3DDict;\n```\n\n## Type\n\n`number``[]`` | `[`GPUOrigin3DDict`](gpuorigin3ddict)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUOrigin3D](https://doc.deno.land/deno/stable/~/GPUOrigin3D)"
- name: GPUOrigin3DDict
  id: ~/gpuorigin3ddict
  summary: null
  description: "# GPUOrigin3DDict\n\n``` typescript\ninterface GPUOrigin3DDict {\n```\n\nx?: number;\n\ny?: number;\n\nz?: number;\n\n}\n\n## Properties\n\n`x?``: ``number`\n\n`y?``: ``number`\n\n`z?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUOrigin3DDict](https://doc.deno.land/deno/stable/~/GPUOrigin3DDict)"
- name: GPUOutOfMemoryError
  id: ~/gpuoutofmemoryerror
  summary: null
  description: "# GPUOutOfMemoryError\n\n``` typescript\nclass GPUOutOfMemoryError extends GPUError {\n```\n\nconstructor(message: string);\n\n}\n\n## Extends\n\n`GPUError`\n\n## Constructors\n\n`new ``GPUOutOfMemoryError(``message``: ``string``)`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUOutOfMemoryError](https://doc.deno.land/deno/stable/~/GPUOutOfMemoryError)"
- name: GPUPipelineBase
  id: ~/gpupipelinebase
  summary: null
  description: "# GPUPipelineBase\n\n``` typescript\ninterface GPUPipelineBase {\n```\n\ngetBindGroupLayout(index: number): [GPUBindGroupLayout](gpubindgrouplayout);\n\n}\n\n## Methods\n\n`getBindGroupLayout(``index``: ``number``)``: `[`GPUBindGroupLayout`](gpubindgrouplayout)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPipelineBase](https://doc.deno.land/deno/stable/~/GPUPipelineBase)"
- name: GPUPipelineDescriptorBase
  id: ~/gpupipelinedescriptorbase
  summary: null
  description: "# GPUPipelineDescriptorBase\n\n``` typescript\ninterface GPUPipelineDescriptorBase  extends GPUObjectDescriptorBase {\n```\n\nlayout: [GPUPipelineLayout](gpupipelinelayout) \\| [GPUAutoLayoutMode](gpuautolayoutmode);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`layout``: `[`GPUPipelineLayout`](gpupipelinelayout)` | `[`GPUAutoLayoutMode`](gpuautolayoutmode)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPipelineDescriptorBase](https://doc.deno.land/deno/stable/~/GPUPipelineDescriptorBase)"
- name: GPUPipelineLayout
  id: ~/gpupipelinelayout
  summary: null
  description: "# GPUPipelineLayout\n\n``` typescript\nclass GPUPipelineLayout implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPipelineLayout](https://doc.deno.land/deno/stable/~/GPUPipelineLayout)"
- name: GPUPipelineLayoutDescriptor
  id: ~/gpupipelinelayoutdescriptor
  summary: null
  description: "# GPUPipelineLayoutDescriptor\n\n``` typescript\ninterface GPUPipelineLayoutDescriptor  extends GPUObjectDescriptorBase {\n```\n\nbindGroupLayouts: [GPUBindGroupLayout](gpubindgrouplayout)\\[\\];\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`bindGroupLayouts``: `[`GPUBindGroupLayout`](gpubindgrouplayout)`[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPipelineLayoutDescriptor](https://doc.deno.land/deno/stable/~/GPUPipelineLayoutDescriptor)"
- name: GPUPipelineStatisticName
  id: ~/gpupipelinestatisticname
  summary: null
  description: "# GPUPipelineStatisticName\n\n``` typescript\ntype GPUPipelineStatisticName = \n```\n\n\\| \"vertex-shader-invocations\"\n\n\\| \"clipper-invocations\"\n\n\\| \"clipper-primitives-out\"\n\n\\| \"fragment-shader-invocations\"\n\n\\| \"compute-shader-invocations\";\n\n## Type\n\n`\"vertex-shader-invocations\"`` | ``\"clipper-invocations\"`` | ``\"clipper-primitives-out\"`` | ``\"fragment-shader-invocations\"`` | ``\"compute-shader-invocations\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPipelineStatisticName](https://doc.deno.land/deno/stable/~/GPUPipelineStatisticName)"
- name: GPUPowerPreference
  id: ~/gpupowerpreference
  summary: null
  description: "# GPUPowerPreference\n\n``` typescript\ntype GPUPowerPreference = \"low-power\" | \"high-performance\";\n```\n\n## Type\n\n`\"low-power\"`` | ``\"high-performance\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPowerPreference](https://doc.deno.land/deno/stable/~/GPUPowerPreference)"
- name: GPUPrimitiveState
  id: ~/gpuprimitivestate
  summary: null
  description: "# GPUPrimitiveState\n\n``` typescript\ninterface GPUPrimitiveState {\n```\n\ncullMode?: [GPUCullMode](gpucullmode);\n\nfrontFace?: [GPUFrontFace](gpufrontface);\n\nstripIndexFormat?: [GPUIndexFormat](gpuindexformat);\n\ntopology?: [GPUPrimitiveTopology](gpuprimitivetopology);\n\nunclippedDepth?: boolean;\n\n}\n\n## Properties\n\n`cullMode?``: `[`GPUCullMode`](gpucullmode)\n\n`frontFace?``: `[`GPUFrontFace`](gpufrontface)\n\n`stripIndexFormat?``: `[`GPUIndexFormat`](gpuindexformat)\n\n`topology?``: `[`GPUPrimitiveTopology`](gpuprimitivetopology)\n\n`unclippedDepth?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPrimitiveState](https://doc.deno.land/deno/stable/~/GPUPrimitiveState)"
- name: GPUPrimitiveTopology
  id: ~/gpuprimitivetopology
  summary: null
  description: "# GPUPrimitiveTopology\n\n``` typescript\ntype GPUPrimitiveTopology = \n```\n\n\\| \"point-list\"\n\n\\| \"line-list\"\n\n\\| \"line-strip\"\n\n\\| \"triangle-list\"\n\n\\| \"triangle-strip\";\n\n## Type\n\n`\"point-list\"`` | ``\"line-list\"`` | ``\"line-strip\"`` | ``\"triangle-list\"`` | ``\"triangle-strip\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUPrimitiveTopology](https://doc.deno.land/deno/stable/~/GPUPrimitiveTopology)"
- name: GPUProgrammablePassEncoder
  id: ~/gpuprogrammablepassencoder
  summary: null
  description: "# GPUProgrammablePassEncoder\n\n``` typescript\ninterface GPUProgrammablePassEncoder {\n```\n\ninsertDebugMarker(markerLabel: string): undefined;\n\npopDebugGroup(): undefined;\n\npushDebugGroup(groupLabel: string): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsets?: number\\[\\],\n\n): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsetsData: Uint32Array,\n\ndynamicOffsetsDataStart: number,\n\ndynamicOffsetsDataLength: number,\n\n): undefined;\n\n}\n\n## Methods\n\n`insertDebugMarker(``markerLabel``: ``string``)``: ``undefined`\n\n`popDebugGroup()``: ``undefined`\n\n`pushDebugGroup(``groupLabel``: ``string``)``: ``undefined`\n\n`setBindGroup(`\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsets?: number\\[\\],\n\n): undefined\n\n`setBindGroup(`\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsetsData: Uint32Array,\n\ndynamicOffsetsDataStart: number,\n\ndynamicOffsetsDataLength: number,\n\n): undefined\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUProgrammablePassEncoder](https://doc.deno.land/deno/stable/~/GPUProgrammablePassEncoder)"
- name: GPUProgrammableStage
  id: ~/gpuprogrammablestage
  summary: null
  description: "# GPUProgrammableStage\n\n``` typescript\ninterface GPUProgrammableStage {\n```\n\nentryPoint: string;\n\nmodule: [GPUShaderModule](gpushadermodule);\n\n}\n\n## Properties\n\n`entryPoint``: ``string`\n\n`module``: `[`GPUShaderModule`](gpushadermodule)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUProgrammableStage](https://doc.deno.land/deno/stable/~/GPUProgrammableStage)"
- name: GPUQuerySet
  id: ~/gpuqueryset
  summary: null
  description: "# GPUQuerySet\n\n``` typescript\nclass GPUQuerySet implements GPUObjectBase {\n```\n\nlabel: string;\n\ndestroy(): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`destroy()``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUQuerySet](https://doc.deno.land/deno/stable/~/GPUQuerySet)"
- name: GPUQuerySetDescriptor
  id: ~/gpuquerysetdescriptor
  summary: null
  description: "# GPUQuerySetDescriptor\n\n``` typescript\ninterface GPUQuerySetDescriptor  extends GPUObjectDescriptorBase {\n```\n\ncount: number;\n\npipelineStatistics?: [GPUPipelineStatisticName](gpupipelinestatisticname)\\[\\];\n\ntype: [GPUQueryType](gpuquerytype);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`count``: ``number`\n\n`pipelineStatistics?``: `[`GPUPipelineStatisticName`](gpupipelinestatisticname)`[]`\n\n`type``: `[`GPUQueryType`](gpuquerytype)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUQuerySetDescriptor](https://doc.deno.land/deno/stable/~/GPUQuerySetDescriptor)"
- name: GPUQueryType
  id: ~/gpuquerytype
  summary: null
  description: "# GPUQueryType\n\n``` typescript\ntype GPUQueryType = \"occlusion\" | \"pipeline-statistics\" | \"timestamp\";\n```\n\n## Type\n\n`\"occlusion\"`` | ``\"pipeline-statistics\"`` | ``\"timestamp\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUQueryType](https://doc.deno.land/deno/stable/~/GPUQueryType)"
- name: GPUQueue
  id: ~/gpuqueue
  summary: null
  description: "# GPUQueue\n\n``` typescript\nclass GPUQueue implements GPUObjectBase {\n```\n\nlabel: string;\n\nonSubmittedWorkDone(): Promise\\<undefined\\>;\n\nsubmit(commandBuffers: [GPUCommandBuffer](gpucommandbuffer)\\[\\]): undefined;\n\nwriteBuffer(\n\nbuffer: [GPUBuffer](gpubuffer),\n\nbufferOffset: number,\n\ndata: [BufferSource](buffersource),\n\ndataOffset?: number,\n\nsize?: number,\n\n): undefined;\n\nwriteTexture(\n\ndestination: [GPUImageCopyTexture](gpuimagecopytexture),\n\ndata: [BufferSource](buffersource),\n\ndataLayout: [GPUImageDataLayout](gpuimagedatalayout),\n\nsize: [GPUExtent3D](gpuextent3d),\n\n): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`onSubmittedWorkDone()``: ``Promise``<``undefined``>`\n\n`submit(``commandBuffers``: `[`GPUCommandBuffer`](gpucommandbuffer)`[]``)``: ``undefined`\n\n`writeBuffer(``buffer``: `[`GPUBuffer`](gpubuffer)`, ``bufferOffset``: ``number``, ``data``: `[`BufferSource`](buffersource)`, ``dataOffset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n`writeTexture(``destination``: `[`GPUImageCopyTexture`](gpuimagecopytexture)`, ``data``: `[`BufferSource`](buffersource)`, ``dataLayout``: `[`GPUImageDataLayout`](gpuimagedatalayout)`, ``size``: `[`GPUExtent3D`](gpuextent3d)`)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUQueue](https://doc.deno.land/deno/stable/~/GPUQueue)"
- name: GPURenderBundle
  id: ~/gpurenderbundle
  summary: null
  description: "# GPURenderBundle\n\n``` typescript\nclass GPURenderBundle implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderBundle](https://doc.deno.land/deno/stable/~/GPURenderBundle)"
- name: GPURenderBundleDescriptor
  id: ~/gpurenderbundledescriptor
  summary: null
  description: "# GPURenderBundleDescriptor\n\n``` typescript\ninterface GPURenderBundleDescriptor  extends GPUObjectDescriptorBase {}\n```\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderBundleDescriptor](https://doc.deno.land/deno/stable/~/GPURenderBundleDescriptor)"
- name: GPURenderBundleEncoder
  id: ~/gpurenderbundleencoder
  summary: null
  description: "# GPURenderBundleEncoder\n\n``` typescript\nclass GPURenderBundleEncoder implements GPUObjectBase, GPUProgrammablePassEncoder, GPURenderEncoderBase {\n```\n\nlabel: string;\n\ndraw(\n\nvertexCount: number,\n\ninstanceCount?: number,\n\nfirstVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexed(\n\nindexCount: number,\n\ninstanceCount?: number,\n\nfirstIndex?: number,\n\nbaseVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexedIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\ndrawIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\nfinish(descriptor?: [GPURenderBundleDescriptor](gpurenderbundledescriptor)): [GPURenderBundle](gpurenderbundle);\n\ninsertDebugMarker(markerLabel: string): undefined;\n\npopDebugGroup(): undefined;\n\npushDebugGroup(groupLabel: string): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsets?: number\\[\\],\n\n): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsetsData: Uint32Array,\n\ndynamicOffsetsDataStart: number,\n\ndynamicOffsetsDataLength: number,\n\n): undefined;\n\nsetIndexBuffer(\n\nbuffer: [GPUBuffer](gpubuffer),\n\nindexFormat: [GPUIndexFormat](gpuindexformat),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\nsetPipeline(pipeline: [GPURenderPipeline](gpurenderpipeline)): undefined;\n\nsetVertexBuffer(\n\nslot: number,\n\nbuffer: [GPUBuffer](gpubuffer),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n[`GPUProgrammablePassEncoder`](gpuprogrammablepassencoder)\n\n[`GPURenderEncoderBase`](gpurenderencoderbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`draw(``vertexCount``: ``number``, ``instanceCount?``: ``number``, ``firstVertex?``: ``number``, ``firstInstance?``: ``number``)``: ``undefined`\n\n`drawIndexed(``indexCount``: ``number``, ``instanceCount?``: ``number``, ``firstIndex?``: ``number``, ``baseVertex?``: ``number``, ``firstInstance?``: ``number``)``: ``undefined`\n\n`drawIndexedIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`drawIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`finish(``descriptor?``: `[`GPURenderBundleDescriptor`](gpurenderbundledescriptor)`)``: `[`GPURenderBundle`](gpurenderbundle)\n\n`insertDebugMarker(``markerLabel``: ``string``)``: ``undefined`\n\n`popDebugGroup()``: ``undefined`\n\n`pushDebugGroup(``groupLabel``: ``string``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsets?``: ``number``[]``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsetsData``: ``Uint32Array``, ``dynamicOffsetsDataStart``: ``number``, ``dynamicOffsetsDataLength``: ``number``)``: ``undefined`\n\n`setIndexBuffer(``buffer``: `[`GPUBuffer`](gpubuffer)`, ``indexFormat``: `[`GPUIndexFormat`](gpuindexformat)`, ``offset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n`setPipeline(``pipeline``: `[`GPURenderPipeline`](gpurenderpipeline)`)``: ``undefined`\n\n`setVertexBuffer(``slot``: ``number``, ``buffer``: `[`GPUBuffer`](gpubuffer)`, ``offset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderBundleEncoder](https://doc.deno.land/deno/stable/~/GPURenderBundleEncoder)"
- name: GPURenderBundleEncoderDescriptor
  id: ~/gpurenderbundleencoderdescriptor
  summary: null
  description: "# GPURenderBundleEncoderDescriptor\n\n``` typescript\ninterface GPURenderBundleEncoderDescriptor  extends GPURenderPassLayout {\n```\n\ndepthReadOnly?: boolean;\n\nstencilReadOnly?: boolean;\n\n}\n\n## Extends\n\n[`GPURenderPassLayout`](gpurenderpasslayout)\n\n## Properties\n\n`depthReadOnly?``: ``boolean`\n\n`stencilReadOnly?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderBundleEncoderDescriptor](https://doc.deno.land/deno/stable/~/GPURenderBundleEncoderDescriptor)"
- name: GPURenderEncoderBase
  id: ~/gpurenderencoderbase
  summary: null
  description: "# GPURenderEncoderBase\n\n``` typescript\ninterface GPURenderEncoderBase {\n```\n\ndraw(\n\nvertexCount: number,\n\ninstanceCount?: number,\n\nfirstVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexed(\n\nindexCount: number,\n\ninstanceCount?: number,\n\nfirstIndex?: number,\n\nbaseVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexedIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\ndrawIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\nsetIndexBuffer(\n\nbuffer: [GPUBuffer](gpubuffer),\n\nindexFormat: [GPUIndexFormat](gpuindexformat),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\nsetPipeline(pipeline: [GPURenderPipeline](gpurenderpipeline)): undefined;\n\nsetVertexBuffer(\n\nslot: number,\n\nbuffer: [GPUBuffer](gpubuffer),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\n}\n\n## Methods\n\n`draw(`\n\nvertexCount: number,\n\ninstanceCount?: number,\n\nfirstVertex?: number,\n\nfirstInstance?: number,\n\n): undefined\n\n`drawIndexed(`\n\nindexCount: number,\n\ninstanceCount?: number,\n\nfirstIndex?: number,\n\nbaseVertex?: number,\n\nfirstInstance?: number,\n\n): undefined\n\n`drawIndexedIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`drawIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`setIndexBuffer(`\n\nbuffer: [GPUBuffer](gpubuffer),\n\nindexFormat: [GPUIndexFormat](gpuindexformat),\n\noffset?: number,\n\nsize?: number,\n\n): undefined\n\n`setPipeline(``pipeline``: `[`GPURenderPipeline`](gpurenderpipeline)`)``: ``undefined`\n\n`setVertexBuffer(`\n\nslot: number,\n\nbuffer: [GPUBuffer](gpubuffer),\n\noffset?: number,\n\nsize?: number,\n\n): undefined\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderEncoderBase](https://doc.deno.land/deno/stable/~/GPURenderEncoderBase)"
- name: GPURenderPassColorAttachment
  id: ~/gpurenderpasscolorattachment
  summary: null
  description: "# GPURenderPassColorAttachment\n\n``` typescript\ninterface GPURenderPassColorAttachment {\n```\n\nclearValue?: [GPUColor](gpucolor);\n\nloadOp: [GPULoadOp](gpuloadop);\n\nresolveTarget?: [GPUTextureView](gputextureview);\n\nstoreOp: [GPUStoreOp](gpustoreop);\n\nview: [GPUTextureView](gputextureview);\n\n}\n\n## Properties\n\n`clearValue?``: `[`GPUColor`](gpucolor)\n\n`loadOp``: `[`GPULoadOp`](gpuloadop)\n\n`resolveTarget?``: `[`GPUTextureView`](gputextureview)\n\n`storeOp``: `[`GPUStoreOp`](gpustoreop)\n\n`view``: `[`GPUTextureView`](gputextureview)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPassColorAttachment](https://doc.deno.land/deno/stable/~/GPURenderPassColorAttachment)"
- name: GPURenderPassDepthStencilAttachment
  id: ~/gpurenderpassdepthstencilattachment
  summary: null
  description: "# GPURenderPassDepthStencilAttachment\n\n``` typescript\ninterface GPURenderPassDepthStencilAttachment {\n```\n\ndepthClearValue?: number;\n\ndepthLoadOp?: [GPULoadOp](gpuloadop);\n\ndepthReadOnly?: boolean;\n\ndepthStoreOp?: [GPUStoreOp](gpustoreop);\n\nstencilClearValue?: number;\n\nstencilLoadOp?: [GPULoadOp](gpuloadop);\n\nstencilReadOnly?: boolean;\n\nstencilStoreOp?: [GPUStoreOp](gpustoreop);\n\nview: [GPUTextureView](gputextureview);\n\n}\n\n## Properties\n\n`depthClearValue?``: ``number`\n\n`depthLoadOp?``: `[`GPULoadOp`](gpuloadop)\n\n`depthReadOnly?``: ``boolean`\n\n`depthStoreOp?``: `[`GPUStoreOp`](gpustoreop)\n\n`stencilClearValue?``: ``number`\n\n`stencilLoadOp?``: `[`GPULoadOp`](gpuloadop)\n\n`stencilReadOnly?``: ``boolean`\n\n`stencilStoreOp?``: `[`GPUStoreOp`](gpustoreop)\n\n`view``: `[`GPUTextureView`](gputextureview)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPassDepthStencilAttachment](https://doc.deno.land/deno/stable/~/GPURenderPassDepthStencilAttachment)"
- name: GPURenderPassDescriptor
  id: ~/gpurenderpassdescriptor
  summary: null
  description: "# GPURenderPassDescriptor\n\n``` typescript\ninterface GPURenderPassDescriptor  extends GPUObjectDescriptorBase {\n```\n\ncolorAttachments: ([GPURenderPassColorAttachment](gpurenderpasscolorattachment) \\| null)\\[\\];\n\ndepthStencilAttachment?: [GPURenderPassDepthStencilAttachment](gpurenderpassdepthstencilattachment);\n\nocclusionQuerySet?: [GPUQuerySet](gpuqueryset);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`colorAttachments``: ``(`[`GPURenderPassColorAttachment`](gpurenderpasscolorattachment)` | ``null``)``[]`\n\n`depthStencilAttachment?``: `[`GPURenderPassDepthStencilAttachment`](gpurenderpassdepthstencilattachment)\n\n`occlusionQuerySet?``: `[`GPUQuerySet`](gpuqueryset)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPassDescriptor](https://doc.deno.land/deno/stable/~/GPURenderPassDescriptor)"
- name: GPURenderPassEncoder
  id: ~/gpurenderpassencoder
  summary: null
  description: "# GPURenderPassEncoder\n\n``` typescript\nclass GPURenderPassEncoder implements GPUObjectBase, GPUProgrammablePassEncoder, GPURenderEncoderBase {\n```\n\nlabel: string;\n\nbeginOcclusionQuery(queryIndex: number): undefined;\n\nbeginPipelineStatisticsQuery(querySet: [GPUQuerySet](gpuqueryset), queryIndex: number): undefined;\n\ndraw(\n\nvertexCount: number,\n\ninstanceCount?: number,\n\nfirstVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexed(\n\nindexCount: number,\n\ninstanceCount?: number,\n\nfirstIndex?: number,\n\nbaseVertex?: number,\n\nfirstInstance?: number,\n\n): undefined;\n\ndrawIndexedIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\ndrawIndirect(indirectBuffer: [GPUBuffer](gpubuffer), indirectOffset: number): undefined;\n\nend(): undefined;\n\nendOcclusionQuery(): undefined;\n\nendPipelineStatisticsQuery(): undefined;\n\nexecuteBundles(bundles: [GPURenderBundle](gpurenderbundle)\\[\\]): undefined;\n\ninsertDebugMarker(markerLabel: string): undefined;\n\npopDebugGroup(): undefined;\n\npushDebugGroup(groupLabel: string): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsets?: number\\[\\],\n\n): undefined;\n\nsetBindGroup(\n\nindex: number,\n\nbindGroup: [GPUBindGroup](gpubindgroup),\n\ndynamicOffsetsData: Uint32Array,\n\ndynamicOffsetsDataStart: number,\n\ndynamicOffsetsDataLength: number,\n\n): undefined;\n\nsetBlendConstant(color: [GPUColor](gpucolor)): undefined;\n\nsetIndexBuffer(\n\nbuffer: [GPUBuffer](gpubuffer),\n\nindexFormat: [GPUIndexFormat](gpuindexformat),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\nsetPipeline(pipeline: [GPURenderPipeline](gpurenderpipeline)): undefined;\n\nsetScissorRect(\n\nx: number,\n\ny: number,\n\nwidth: number,\n\nheight: number,\n\n): undefined;\n\nsetStencilReference(reference: number): undefined;\n\nsetVertexBuffer(\n\nslot: number,\n\nbuffer: [GPUBuffer](gpubuffer),\n\noffset?: number,\n\nsize?: number,\n\n): undefined;\n\nsetViewport(\n\nx: number,\n\ny: number,\n\nwidth: number,\n\nheight: number,\n\nminDepth: number,\n\nmaxDepth: number,\n\n): undefined;\n\nwriteTimestamp(querySet: [GPUQuerySet](gpuqueryset), queryIndex: number): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n[`GPUProgrammablePassEncoder`](gpuprogrammablepassencoder)\n\n[`GPURenderEncoderBase`](gpurenderencoderbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`beginOcclusionQuery(``queryIndex``: ``number``)``: ``undefined`\n\n`beginPipelineStatisticsQuery(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``queryIndex``: ``number``)``: ``undefined`\n\n`draw(``vertexCount``: ``number``, ``instanceCount?``: ``number``, ``firstVertex?``: ``number``, ``firstInstance?``: ``number``)``: ``undefined`\n\n`drawIndexed(``indexCount``: ``number``, ``instanceCount?``: ``number``, ``firstIndex?``: ``number``, ``baseVertex?``: ``number``, ``firstInstance?``: ``number``)``: ``undefined`\n\n`drawIndexedIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`drawIndirect(``indirectBuffer``: `[`GPUBuffer`](gpubuffer)`, ``indirectOffset``: ``number``)``: ``undefined`\n\n`end()``: ``undefined`\n\n`endOcclusionQuery()``: ``undefined`\n\n`endPipelineStatisticsQuery()``: ``undefined`\n\n`executeBundles(``bundles``: `[`GPURenderBundle`](gpurenderbundle)`[]``)``: ``undefined`\n\n`insertDebugMarker(``markerLabel``: ``string``)``: ``undefined`\n\n`popDebugGroup()``: ``undefined`\n\n`pushDebugGroup(``groupLabel``: ``string``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsets?``: ``number``[]``)``: ``undefined`\n\n`setBindGroup(``index``: ``number``, ``bindGroup``: `[`GPUBindGroup`](gpubindgroup)`, ``dynamicOffsetsData``: ``Uint32Array``, ``dynamicOffsetsDataStart``: ``number``, ``dynamicOffsetsDataLength``: ``number``)``: ``undefined`\n\n`setBlendConstant(``color``: `[`GPUColor`](gpucolor)`)``: ``undefined`\n\n`setIndexBuffer(``buffer``: `[`GPUBuffer`](gpubuffer)`, ``indexFormat``: `[`GPUIndexFormat`](gpuindexformat)`, ``offset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n`setPipeline(``pipeline``: `[`GPURenderPipeline`](gpurenderpipeline)`)``: ``undefined`\n\n`setScissorRect(``x``: ``number``, ``y``: ``number``, ``width``: ``number``, ``height``: ``number``)``: ``undefined`\n\n`setStencilReference(``reference``: ``number``)``: ``undefined`\n\n`setVertexBuffer(``slot``: ``number``, ``buffer``: `[`GPUBuffer`](gpubuffer)`, ``offset?``: ``number``, ``size?``: ``number``)``: ``undefined`\n\n`setViewport(``x``: ``number``, ``y``: ``number``, ``width``: ``number``, ``height``: ``number``, ``minDepth``: ``number``, ``maxDepth``: ``number``)``: ``undefined`\n\n`writeTimestamp(``querySet``: `[`GPUQuerySet`](gpuqueryset)`, ``queryIndex``: ``number``)``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPassEncoder](https://doc.deno.land/deno/stable/~/GPURenderPassEncoder)"
- name: GPURenderPassLayout
  id: ~/gpurenderpasslayout
  summary: null
  description: "# GPURenderPassLayout\n\n``` typescript\ninterface GPURenderPassLayout  extends GPUObjectDescriptorBase {\n```\n\ncolorFormats: ([GPUTextureFormat](gputextureformat) \\| null)\\[\\];\n\ndepthStencilFormat?: [GPUTextureFormat](gputextureformat);\n\nsampleCount?: number;\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`colorFormats``: ``(`[`GPUTextureFormat`](gputextureformat)` | ``null``)``[]`\n\n`depthStencilFormat?``: `[`GPUTextureFormat`](gputextureformat)\n\n`sampleCount?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPassLayout](https://doc.deno.land/deno/stable/~/GPURenderPassLayout)"
- name: GPURenderPipeline
  id: ~/gpurenderpipeline
  summary: null
  description: "# GPURenderPipeline\n\n``` typescript\nclass GPURenderPipeline implements GPUObjectBase, GPUPipelineBase {\n```\n\nlabel: string;\n\ngetBindGroupLayout(index: number): [GPUBindGroupLayout](gpubindgrouplayout);\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n[`GPUPipelineBase`](gpupipelinebase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`getBindGroupLayout(``index``: ``number``)``: `[`GPUBindGroupLayout`](gpubindgrouplayout)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPipeline](https://doc.deno.land/deno/stable/~/GPURenderPipeline)"
- name: GPURenderPipelineDescriptor
  id: ~/gpurenderpipelinedescriptor
  summary: null
  description: "# GPURenderPipelineDescriptor\n\n``` typescript\ninterface GPURenderPipelineDescriptor  extends GPUPipelineDescriptorBase {\n```\n\ndepthStencil?: [GPUDepthStencilState](gpudepthstencilstate);\n\nfragment?: [GPUFragmentState](gpufragmentstate);\n\nmultisample?: [GPUMultisampleState](gpumultisamplestate);\n\nprimitive?: [GPUPrimitiveState](gpuprimitivestate);\n\nvertex: [GPUVertexState](gpuvertexstate);\n\n}\n\n## Extends\n\n[`GPUPipelineDescriptorBase`](gpupipelinedescriptorbase)\n\n## Properties\n\n`depthStencil?``: `[`GPUDepthStencilState`](gpudepthstencilstate)\n\n`fragment?``: `[`GPUFragmentState`](gpufragmentstate)\n\n`multisample?``: `[`GPUMultisampleState`](gpumultisamplestate)\n\n`primitive?``: `[`GPUPrimitiveState`](gpuprimitivestate)\n\n`vertex``: `[`GPUVertexState`](gpuvertexstate)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURenderPipelineDescriptor](https://doc.deno.land/deno/stable/~/GPURenderPipelineDescriptor)"
- name: GPURequestAdapterOptions
  id: ~/gpurequestadapteroptions
  summary: null
  description: "# GPURequestAdapterOptions\n\n``` typescript\ninterface GPURequestAdapterOptions {\n```\n\nforceFallbackAdapter?: boolean;\n\npowerPreference?: [GPUPowerPreference](gpupowerpreference);\n\n}\n\n## Properties\n\n`forceFallbackAdapter?``: ``boolean`\n\n`powerPreference?``: `[`GPUPowerPreference`](gpupowerpreference)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPURequestAdapterOptions](https://doc.deno.land/deno/stable/~/GPURequestAdapterOptions)"
- name: GPUSampler
  id: ~/gpusampler
  summary: null
  description: "# GPUSampler\n\n``` typescript\nclass GPUSampler implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSampler](https://doc.deno.land/deno/stable/~/GPUSampler)"
- name: GPUSamplerBindingLayout
  id: ~/gpusamplerbindinglayout
  summary: null
  description: "# GPUSamplerBindingLayout\n\n``` typescript\ninterface GPUSamplerBindingLayout {\n```\n\ntype?: [GPUSamplerBindingType](gpusamplerbindingtype);\n\n}\n\n## Properties\n\n`type?``: `[`GPUSamplerBindingType`](gpusamplerbindingtype)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSamplerBindingLayout](https://doc.deno.land/deno/stable/~/GPUSamplerBindingLayout)"
- name: GPUSamplerBindingType
  id: ~/gpusamplerbindingtype
  summary: null
  description: "# GPUSamplerBindingType\n\n``` typescript\ntype GPUSamplerBindingType = \"filtering\" | \"non-filtering\" | \"comparison\";\n```\n\n## Type\n\n`\"filtering\"`` | ``\"non-filtering\"`` | ``\"comparison\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSamplerBindingType](https://doc.deno.land/deno/stable/~/GPUSamplerBindingType)"
- name: GPUSamplerDescriptor
  id: ~/gpusamplerdescriptor
  summary: null
  description: "# GPUSamplerDescriptor\n\n``` typescript\ninterface GPUSamplerDescriptor  extends GPUObjectDescriptorBase {\n```\n\naddressModeU?: [GPUAddressMode](gpuaddressmode);\n\naddressModeV?: [GPUAddressMode](gpuaddressmode);\n\naddressModeW?: [GPUAddressMode](gpuaddressmode);\n\ncompare?: [GPUCompareFunction](gpucomparefunction);\n\nlodMaxClamp?: number;\n\nlodMinClamp?: number;\n\nmagFilter?: [GPUFilterMode](gpufiltermode);\n\nmaxAnisotropy?: number;\n\nminFilter?: [GPUFilterMode](gpufiltermode);\n\nmipmapFilter?: [GPUMipmapFilterMode](gpumipmapfiltermode);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`addressModeU?``: `[`GPUAddressMode`](gpuaddressmode)\n\n`addressModeV?``: `[`GPUAddressMode`](gpuaddressmode)\n\n`addressModeW?``: `[`GPUAddressMode`](gpuaddressmode)\n\n`compare?``: `[`GPUCompareFunction`](gpucomparefunction)\n\n`lodMaxClamp?``: ``number`\n\n`lodMinClamp?``: ``number`\n\n`magFilter?``: `[`GPUFilterMode`](gpufiltermode)\n\n`maxAnisotropy?``: ``number`\n\n`minFilter?``: `[`GPUFilterMode`](gpufiltermode)\n\n`mipmapFilter?``: `[`GPUMipmapFilterMode`](gpumipmapfiltermode)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSamplerDescriptor](https://doc.deno.land/deno/stable/~/GPUSamplerDescriptor)"
- name: GPUShaderModule
  id: ~/gpushadermodule
  summary: null
  description: "# GPUShaderModule\n\n``` typescript\nclass GPUShaderModule implements GPUObjectBase {\n```\n\nlabel: string;\n\ncompilationInfo(): Promise\\<[GPUCompilationInfo](gpucompilationinfo)\\>;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`compilationInfo()``: ``Promise``<`[`GPUCompilationInfo`](gpucompilationinfo)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUShaderModule](https://doc.deno.land/deno/stable/~/GPUShaderModule)"
- name: GPUShaderModuleDescriptor
  id: ~/gpushadermoduledescriptor
  summary: null
  description: "# GPUShaderModuleDescriptor\n\n``` typescript\ninterface GPUShaderModuleDescriptor  extends GPUObjectDescriptorBase {\n```\n\ncode: string;\n\nsourceMap?: any;\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`code``: ``string`\n\n`sourceMap?``: ``any`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUShaderModuleDescriptor](https://doc.deno.land/deno/stable/~/GPUShaderModuleDescriptor)"
- name: GPUShaderStage
  id: ~/gpushaderstage
  summary: null
  description: "# GPUShaderStage\n\n``` typescript\nclass GPUShaderStage {\n```\n\nstatic COMPUTE: 4;\n\nstatic FRAGMENT: 2;\n\nstatic VERTEX: 1;\n\n}\n\n## Static Properties\n\n`COMPUTE``: ``4`\n\n`FRAGMENT``: ``2`\n\n`VERTEX``: ``1`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUShaderStage](https://doc.deno.land/deno/stable/~/GPUShaderStage)"
- name: GPUShaderStageFlags
  id: ~/gpushaderstageflags
  summary: null
  description: "# GPUShaderStageFlags\n\n``` typescript\ntype GPUShaderStageFlags = number;\n```\n\n## Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUShaderStageFlags](https://doc.deno.land/deno/stable/~/GPUShaderStageFlags)"
- name: GPUStencilFaceState
  id: ~/gpustencilfacestate
  summary: null
  description: "# GPUStencilFaceState\n\n``` typescript\ninterface GPUStencilFaceState {\n```\n\ncompare?: [GPUCompareFunction](gpucomparefunction);\n\ndepthFailOp?: [GPUStencilOperation](gpustenciloperation);\n\nfailOp?: [GPUStencilOperation](gpustenciloperation);\n\npassOp?: [GPUStencilOperation](gpustenciloperation);\n\n}\n\n## Properties\n\n`compare?``: `[`GPUCompareFunction`](gpucomparefunction)\n\n`depthFailOp?``: `[`GPUStencilOperation`](gpustenciloperation)\n\n`failOp?``: `[`GPUStencilOperation`](gpustenciloperation)\n\n`passOp?``: `[`GPUStencilOperation`](gpustenciloperation)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUStencilFaceState](https://doc.deno.land/deno/stable/~/GPUStencilFaceState)"
- name: GPUStencilOperation
  id: ~/gpustenciloperation
  summary: null
  description: "# GPUStencilOperation\n\n``` typescript\ntype GPUStencilOperation = \n```\n\n\\| \"keep\"\n\n\\| \"zero\"\n\n\\| \"replace\"\n\n\\| \"invert\"\n\n\\| \"increment-clamp\"\n\n\\| \"decrement-clamp\"\n\n\\| \"increment-wrap\"\n\n\\| \"decrement-wrap\";\n\n## Type\n\n`\"keep\"`` | ``\"zero\"`` | ``\"replace\"`` | ``\"invert\"`` | ``\"increment-clamp\"`` | ``\"decrement-clamp\"`` | ``\"increment-wrap\"`` | ``\"decrement-wrap\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUStencilOperation](https://doc.deno.land/deno/stable/~/GPUStencilOperation)"
- name: GPUStorageTextureAccess
  id: ~/gpustoragetextureaccess
  summary: null
  description: "# GPUStorageTextureAccess\n\n``` typescript\ntype GPUStorageTextureAccess = \"write-only\";\n```\n\n## Type\n\n`\"write-only\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUStorageTextureAccess](https://doc.deno.land/deno/stable/~/GPUStorageTextureAccess)"
- name: GPUStorageTextureBindingLayout
  id: ~/gpustoragetexturebindinglayout
  summary: null
  description: "# GPUStorageTextureBindingLayout\n\n``` typescript\ninterface GPUStorageTextureBindingLayout {\n```\n\naccess: [GPUStorageTextureAccess](gpustoragetextureaccess);\n\nformat: [GPUTextureFormat](gputextureformat);\n\nviewDimension?: [GPUTextureViewDimension](gputextureviewdimension);\n\n}\n\n## Properties\n\n`access``: `[`GPUStorageTextureAccess`](gpustoragetextureaccess)\n\n`format``: `[`GPUTextureFormat`](gputextureformat)\n\n`viewDimension?``: `[`GPUTextureViewDimension`](gputextureviewdimension)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUStorageTextureBindingLayout](https://doc.deno.land/deno/stable/~/GPUStorageTextureBindingLayout)"
- name: GPUStoreOp
  id: ~/gpustoreop
  summary: null
  description: "# GPUStoreOp\n\n``` typescript\ntype GPUStoreOp = \"store\" | \"discard\";\n```\n\n## Type\n\n`\"store\"`` | ``\"discard\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUStoreOp](https://doc.deno.land/deno/stable/~/GPUStoreOp)"
- name: GPUSupportedFeatures
  id: ~/gpusupportedfeatures
  summary: null
  description: "# GPUSupportedFeatures\n\n``` typescript\nclass GPUSupportedFeatures {\n```\n\nsize: number;\n\nentries(): IterableIterator\\<\\[[GPUFeatureName](gpufeaturename), [GPUFeatureName](gpufeaturename)\\]\\>;\n\nforEach(callbackfn: (\n\nvalue: [GPUFeatureName](gpufeaturename),\n\nvalue2: [GPUFeatureName](gpufeaturename),\n\nset: Set\\<[GPUFeatureName](gpufeaturename)\\>,\n\n) =\\> void, thisArg?: any): void;\n\nhas(value: [GPUFeatureName](gpufeaturename)): boolean;\n\nkeys(): IterableIterator\\<[GPUFeatureName](gpufeaturename)\\>;\n\nvalues(): IterableIterator\\<[GPUFeatureName](gpufeaturename)\\>;\n\n\\[ Symbol .iterator \\](): IterableIterator\\<[GPUFeatureName](gpufeaturename)\\>;\n\n}\n\n## Properties\n\n`size``: ``number`\n\n## Methods\n\n`entries()``: ``IterableIterator``<``[`[`GPUFeatureName`](gpufeaturename)`, `[`GPUFeatureName`](gpufeaturename)`]``>`\n\n`forEach(``callbackfn``: ``(``value``: `[`GPUFeatureName`](gpufeaturename)`, ``value2``: `[`GPUFeatureName`](gpufeaturename)`, ``set``: ``Set``<`[`GPUFeatureName`](gpufeaturename)`>``) => ``void``, ``thisArg?``: ``any``)``: ``void`\n\n`has(``value``: `[`GPUFeatureName`](gpufeaturename)`)``: ``boolean`\n\n`keys()``: ``IterableIterator``<`[`GPUFeatureName`](gpufeaturename)`>`\n\n`values()``: ``IterableIterator``<`[`GPUFeatureName`](gpufeaturename)`>`\n\n`[ Symbol .iterator ]()``: ``IterableIterator``<`[`GPUFeatureName`](gpufeaturename)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSupportedFeatures](https://doc.deno.land/deno/stable/~/GPUSupportedFeatures)"
- name: GPUSupportedLimits
  id: ~/gpusupportedlimits
  summary: null
  description: "# GPUSupportedLimits\n\n``` typescript\nclass GPUSupportedLimits {\n```\n\nmaxBindGroups?: number;\n\nmaxComputeInvocationsPerWorkgroup?: number;\n\nmaxComputeWorkgroupSizeX?: number;\n\nmaxComputeWorkgroupSizeY?: number;\n\nmaxComputeWorkgroupSizeZ?: number;\n\nmaxComputeWorkgroupsPerDimension?: number;\n\nmaxComputeWorkgroupStorageSize?: number;\n\nmaxDynamicStorageBuffersPerPipelineLayout?: number;\n\nmaxDynamicUniformBuffersPerPipelineLayout?: number;\n\nmaxInterStageShaderComponents?: number;\n\nmaxSampledTexturesPerShaderStage?: number;\n\nmaxSamplersPerShaderStage?: number;\n\nmaxStorageBufferBindingSize?: number;\n\nmaxStorageBuffersPerShaderStage?: number;\n\nmaxStorageTexturesPerShaderStage?: number;\n\nmaxTextureArrayLayers?: number;\n\nmaxTextureDimension1D?: number;\n\nmaxTextureDimension2D?: number;\n\nmaxTextureDimension3D?: number;\n\nmaxUniformBufferBindingSize?: number;\n\nmaxUniformBuffersPerShaderStage?: number;\n\nmaxVertexAttributes?: number;\n\nmaxVertexBufferArrayStride?: number;\n\nmaxVertexBuffers?: number;\n\nminStorageBufferOffsetAlignment?: number;\n\nminUniformBufferOffsetAlignment?: number;\n\n}\n\n## Properties\n\n`maxBindGroups``: ``number`\n\n`maxComputeInvocationsPerWorkgroup``: ``number`\n\n`maxComputeWorkgroupSizeX``: ``number`\n\n`maxComputeWorkgroupSizeY``: ``number`\n\n`maxComputeWorkgroupSizeZ``: ``number`\n\n`maxComputeWorkgroupsPerDimension``: ``number`\n\n`maxComputeWorkgroupStorageSize``: ``number`\n\n`maxDynamicStorageBuffersPerPipelineLayout``: ``number`\n\n`maxDynamicUniformBuffersPerPipelineLayout``: ``number`\n\n`maxInterStageShaderComponents``: ``number`\n\n`maxSampledTexturesPerShaderStage``: ``number`\n\n`maxSamplersPerShaderStage``: ``number`\n\n`maxStorageBufferBindingSize``: ``number`\n\n`maxStorageBuffersPerShaderStage``: ``number`\n\n`maxStorageTexturesPerShaderStage``: ``number`\n\n`maxTextureArrayLayers``: ``number`\n\n`maxTextureDimension1D``: ``number`\n\n`maxTextureDimension2D``: ``number`\n\n`maxTextureDimension3D``: ``number`\n\n`maxUniformBufferBindingSize``: ``number`\n\n`maxUniformBuffersPerShaderStage``: ``number`\n\n`maxVertexAttributes``: ``number`\n\n`maxVertexBufferArrayStride``: ``number`\n\n`maxVertexBuffers``: ``number`\n\n`minStorageBufferOffsetAlignment``: ``number`\n\n`minUniformBufferOffsetAlignment``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUSupportedLimits](https://doc.deno.land/deno/stable/~/GPUSupportedLimits)"
- name: GPUTexture
  id: ~/gputexture
  summary: null
  description: "# GPUTexture\n\n``` typescript\nclass GPUTexture implements GPUObjectBase {\n```\n\nlabel: string;\n\ncreateView(descriptor?: [GPUTextureViewDescriptor](gputextureviewdescriptor)): [GPUTextureView](gputextureview);\n\ndestroy(): undefined;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n## Methods\n\n`createView(``descriptor?``: `[`GPUTextureViewDescriptor`](gputextureviewdescriptor)`)``: `[`GPUTextureView`](gputextureview)\n\n`destroy()``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTexture](https://doc.deno.land/deno/stable/~/GPUTexture)"
- name: GPUTextureAspect
  id: ~/gputextureaspect
  summary: null
  description: "# GPUTextureAspect\n\n``` typescript\ntype GPUTextureAspect = \"all\" | \"stencil-only\" | \"depth-only\";\n```\n\n## Type\n\n`\"all\"`` | ``\"stencil-only\"`` | ``\"depth-only\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureAspect](https://doc.deno.land/deno/stable/~/GPUTextureAspect)"
- name: GPUTextureBindingLayout
  id: ~/gputexturebindinglayout
  summary: null
  description: "# GPUTextureBindingLayout\n\n``` typescript\ninterface GPUTextureBindingLayout {\n```\n\nmultisampled?: boolean;\n\nsampleType?: [GPUTextureSampleType](gputexturesampletype);\n\nviewDimension?: [GPUTextureViewDimension](gputextureviewdimension);\n\n}\n\n## Properties\n\n`multisampled?``: ``boolean`\n\n`sampleType?``: `[`GPUTextureSampleType`](gputexturesampletype)\n\n`viewDimension?``: `[`GPUTextureViewDimension`](gputextureviewdimension)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureBindingLayout](https://doc.deno.land/deno/stable/~/GPUTextureBindingLayout)"
- name: GPUTextureDescriptor
  id: ~/gputexturedescriptor
  summary: null
  description: "# GPUTextureDescriptor\n\n``` typescript\ninterface GPUTextureDescriptor  extends GPUObjectDescriptorBase {\n```\n\ndimension?: [GPUTextureDimension](gputexturedimension);\n\nformat: [GPUTextureFormat](gputextureformat);\n\nmipLevelCount?: number;\n\nsampleCount?: number;\n\nsize: [GPUExtent3D](gpuextent3d);\n\nusage: [GPUTextureUsageFlags](gputextureusageflags);\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`dimension?``: `[`GPUTextureDimension`](gputexturedimension)\n\n`format``: `[`GPUTextureFormat`](gputextureformat)\n\n`mipLevelCount?``: ``number`\n\n`sampleCount?``: ``number`\n\n`size``: `[`GPUExtent3D`](gpuextent3d)\n\n`usage``: `[`GPUTextureUsageFlags`](gputextureusageflags)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureDescriptor](https://doc.deno.land/deno/stable/~/GPUTextureDescriptor)"
- name: GPUTextureDimension
  id: ~/gputexturedimension
  summary: null
  description: "# GPUTextureDimension\n\n``` typescript\ntype GPUTextureDimension = \"1d\" | \"2d\" | \"3d\";\n```\n\n## Type\n\n`\"1d\"`` | ``\"2d\"`` | ``\"3d\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureDimension](https://doc.deno.land/deno/stable/~/GPUTextureDimension)"
- name: GPUTextureFormat
  id: ~/gputextureformat
  summary: null
  description: "# GPUTextureFormat\n\n``` typescript\ntype GPUTextureFormat = \n```\n\n\\| \"r8unorm\"\n\n\\| \"r8snorm\"\n\n\\| \"r8uint\"\n\n\\| \"r8sint\"\n\n\\| \"r16uint\"\n\n\\| \"r16sint\"\n\n\\| \"r16float\"\n\n\\| \"rg8unorm\"\n\n\\| \"rg8snorm\"\n\n\\| \"rg8uint\"\n\n\\| \"rg8sint\"\n\n\\| \"r32uint\"\n\n\\| \"r32sint\"\n\n\\| \"r32float\"\n\n\\| \"rg16uint\"\n\n\\| \"rg16sint\"\n\n\\| \"rg16float\"\n\n\\| \"rgba8unorm\"\n\n\\| \"rgba8unorm-srgb\"\n\n\\| \"rgba8snorm\"\n\n\\| \"rgba8uint\"\n\n\\| \"rgba8sint\"\n\n\\| \"bgra8unorm\"\n\n\\| \"bgra8unorm-srgb\"\n\n\\| \"rgb9e5ufloat\"\n\n\\| \"rgb10a2unorm\"\n\n\\| \"rg11b10ufloat\"\n\n\\| \"rg32uint\"\n\n\\| \"rg32sint\"\n\n\\| \"rg32float\"\n\n\\| \"rgba16uint\"\n\n\\| \"rgba16sint\"\n\n\\| \"rgba16float\"\n\n\\| \"rgba32uint\"\n\n\\| \"rgba32sint\"\n\n\\| \"rgba32float\"\n\n\\| \"stencil8\"\n\n\\| \"depth16unorm\"\n\n\\| \"depth24plus\"\n\n\\| \"depth24plus-stencil8\"\n\n\\| \"depth32float\"\n\n\\| \"depth24unorm-stencil8\"\n\n\\| \"depth32float-stencil8\"\n\n\\| \"bc1-rgba-unorm\"\n\n\\| \"bc1-rgba-unorm-srgb\"\n\n\\| \"bc2-rgba-unorm\"\n\n\\| \"bc2-rgba-unorm-srgb\"\n\n\\| \"bc3-rgba-unorm\"\n\n\\| \"bc3-rgba-unorm-srgb\"\n\n\\| \"bc4-r-unorm\"\n\n\\| \"bc4-r-snorm\"\n\n\\| \"bc5-rg-unorm\"\n\n\\| \"bc5-rg-snorm\"\n\n\\| \"bc6h-rgb-ufloat\"\n\n\\| \"bc6h-rgb-float\"\n\n\\| \"bc7-rgba-unorm\"\n\n\\| \"bc7-rgba-unorm-srgb\"\n\n\\| \"etc2-rgb8unorm\"\n\n\\| \"etc2-rgb8unorm-srgb\"\n\n\\| \"etc2-rgb8a1unorm\"\n\n\\| \"etc2-rgb8a1unorm-srgb\"\n\n\\| \"etc2-rgba8unorm\"\n\n\\| \"etc2-rgba8unorm-srgb\"\n\n\\| \"eac-r11unorm\"\n\n\\| \"eac-r11snorm\"\n\n\\| \"eac-rg11unorm\"\n\n\\| \"eac-rg11snorm\"\n\n\\| \"astc-4x4-unorm\"\n\n\\| \"astc-4x4-unorm-srgb\"\n\n\\| \"astc-5x4-unorm\"\n\n\\| \"astc-5x4-unorm-srgb\"\n\n\\| \"astc-5x5-unorm\"\n\n\\| \"astc-5x5-unorm-srgb\"\n\n\\| \"astc-6x5-unorm\"\n\n\\| \"astc-6x5-unorm-srgb\"\n\n\\| \"astc-6x6-unorm\"\n\n\\| \"astc-6x6-unorm-srgb\"\n\n\\| \"astc-8x5-unorm\"\n\n\\| \"astc-8x5-unorm-srgb\"\n\n\\| \"astc-8x6-unorm\"\n\n\\| \"astc-8x6-unorm-srgb\"\n\n\\| \"astc-8x8-unorm\"\n\n\\| \"astc-8x8-unorm-srgb\"\n\n\\| \"astc-10x5-unorm\"\n\n\\| \"astc-10x5-unorm-srgb\"\n\n\\| \"astc-10x6-unorm\"\n\n\\| \"astc-10x6-unorm-srgb\"\n\n\\| \"astc-10x8-unorm\"\n\n\\| \"astc-10x8-unorm-srgb\"\n\n\\| \"astc-10x10-unorm\"\n\n\\| \"astc-10x10-unorm-srgb\"\n\n\\| \"astc-12x10-unorm\"\n\n\\| \"astc-12x10-unorm-srgb\"\n\n\\| \"astc-12x12-unorm\"\n\n\\| \"astc-12x12-unorm-srgb\";\n\n## Type\n\n`\"r8unorm\"`` | ``\"r8snorm\"`` | ``\"r8uint\"`` | ``\"r8sint\"`` | ``\"r16uint\"`` | ``\"r16sint\"`` | ``\"r16float\"`` | ``\"rg8unorm\"`` | ``\"rg8snorm\"`` | ``\"rg8uint\"`` | ``\"rg8sint\"`` | ``\"r32uint\"`` | ``\"r32sint\"`` | ``\"r32float\"`` | ``\"rg16uint\"`` | ``\"rg16sint\"`` | ``\"rg16float\"`` | ``\"rgba8unorm\"`` | ``\"rgba8unorm-srgb\"`` | ``\"rgba8snorm\"`` | ``\"rgba8uint\"`` | ``\"rgba8sint\"`` | ``\"bgra8unorm\"`` | ``\"bgra8unorm-srgb\"`` | ``\"rgb9e5ufloat\"`` | ``\"rgb10a2unorm\"`` | ``\"rg11b10ufloat\"`` | ``\"rg32uint\"`` | ``\"rg32sint\"`` | ``\"rg32float\"`` | ``\"rgba16uint\"`` | ``\"rgba16sint\"`` | ``\"rgba16float\"`` | ``\"rgba32uint\"`` | ``\"rgba32sint\"`` | ``\"rgba32float\"`` | ``\"stencil8\"`` | ``\"depth16unorm\"`` | ``\"depth24plus\"`` | ``\"depth24plus-stencil8\"`` | ``\"depth32float\"`` | ``\"depth24unorm-stencil8\"`` | ``\"depth32float-stencil8\"`` | ``\"bc1-rgba-unorm\"`` | ``\"bc1-rgba-unorm-srgb\"`` | ``\"bc2-rgba-unorm\"`` | ``\"bc2-rgba-unorm-srgb\"`` | ``\"bc3-rgba-unorm\"`` | ``\"bc3-rgba-unorm-srgb\"`` | ``\"bc4-r-unorm\"`` | ``\"bc4-r-snorm\"`` | ``\"bc5-rg-unorm\"`` | ``\"bc5-rg-snorm\"`` | ``\"bc6h-rgb-ufloat\"`` | ``\"bc6h-rgb-float\"`` | ``\"bc7-rgba-unorm\"`` | ``\"bc7-rgba-unorm-srgb\"`` | ``\"etc2-rgb8unorm\"`` | ``\"etc2-rgb8unorm-srgb\"`` | ``\"etc2-rgb8a1unorm\"`` | ``\"etc2-rgb8a1unorm-srgb\"`` | ``\"etc2-rgba8unorm\"`` | ``\"etc2-rgba8unorm-srgb\"`` | ``\"eac-r11unorm\"`` | ``\"eac-r11snorm\"`` | ``\"eac-rg11unorm\"`` | ``\"eac-rg11snorm\"`` | ``\"astc-4x4-unorm\"`` | ``\"astc-4x4-unorm-srgb\"`` | ``\"astc-5x4-unorm\"`` | ``\"astc-5x4-unorm-srgb\"`` | ``\"astc-5x5-unorm\"`` | ``\"astc-5x5-unorm-srgb\"`` | ``\"astc-6x5-unorm\"`` | ``\"astc-6x5-unorm-srgb\"`` | ``\"astc-6x6-unorm\"`` | ``\"astc-6x6-unorm-srgb\"`` | ``\"astc-8x5-unorm\"`` | ``\"astc-8x5-unorm-srgb\"`` | ``\"astc-8x6-unorm\"`` | ``\"astc-8x6-unorm-srgb\"`` | ``\"astc-8x8-unorm\"`` | ``\"astc-8x8-unorm-srgb\"`` | ``\"astc-10x5-unorm\"`` | ``\"astc-10x5-unorm-srgb\"`` | ``\"astc-10x6-unorm\"`` | ``\"astc-10x6-unorm-srgb\"`` | ``\"astc-10x8-unorm\"`` | ``\"astc-10x8-unorm-srgb\"`` | ``\"astc-10x10-unorm\"`` | ``\"astc-10x10-unorm-srgb\"`` | ``\"astc-12x10-unorm\"`` | ``\"astc-12x10-unorm-srgb\"`` | ``\"astc-12x12-unorm\"`` | ``\"astc-12x12-unorm-srgb\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureFormat](https://doc.deno.land/deno/stable/~/GPUTextureFormat)"
- name: GPUTextureSampleType
  id: ~/gputexturesampletype
  summary: null
  description: "# GPUTextureSampleType\n\n``` typescript\ntype GPUTextureSampleType = \n```\n\n\\| \"float\"\n\n\\| \"unfilterable-float\"\n\n\\| \"depth\"\n\n\\| \"sint\"\n\n\\| \"uint\";\n\n## Type\n\n`\"float\"`` | ``\"unfilterable-float\"`` | ``\"depth\"`` | ``\"sint\"`` | ``\"uint\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureSampleType](https://doc.deno.land/deno/stable/~/GPUTextureSampleType)"
- name: GPUTextureUsage
  id: ~/gputextureusage
  summary: null
  description: "# GPUTextureUsage\n\n``` typescript\nclass GPUTextureUsage {\n```\n\nstatic COPY_DST: 2;\n\nstatic COPY_SRC: 1;\n\nstatic RENDER_ATTACHMENT: 16;\n\nstatic STORAGE_BINDING: 8;\n\nstatic TEXTURE_BINDING: 4;\n\n}\n\n## Static Properties\n\n`COPY_DST``: ``2`\n\n`COPY_SRC``: ``1`\n\n`RENDER_ATTACHMENT``: ``16`\n\n`STORAGE_BINDING``: ``8`\n\n`TEXTURE_BINDING``: ``4`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureUsage](https://doc.deno.land/deno/stable/~/GPUTextureUsage)"
- name: GPUTextureUsageFlags
  id: ~/gputextureusageflags
  summary: null
  description: "# GPUTextureUsageFlags\n\n``` typescript\ntype GPUTextureUsageFlags = number;\n```\n\n## Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureUsageFlags](https://doc.deno.land/deno/stable/~/GPUTextureUsageFlags)"
- name: GPUTextureView
  id: ~/gputextureview
  summary: null
  description: "# GPUTextureView\n\n``` typescript\nclass GPUTextureView implements GPUObjectBase {\n```\n\nlabel: string;\n\n}\n\n## Implements\n\n[`GPUObjectBase`](gpuobjectbase)\n\n## Properties\n\n`label``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureView](https://doc.deno.land/deno/stable/~/GPUTextureView)"
- name: GPUTextureViewDescriptor
  id: ~/gputextureviewdescriptor
  summary: null
  description: "# GPUTextureViewDescriptor\n\n``` typescript\ninterface GPUTextureViewDescriptor  extends GPUObjectDescriptorBase {\n```\n\narrayLayerCount?: number;\n\naspect?: [GPUTextureAspect](gputextureaspect);\n\nbaseArrayLayer?: number;\n\nbaseMipLevel?: number;\n\ndimension?: [GPUTextureViewDimension](gputextureviewdimension);\n\nformat?: [GPUTextureFormat](gputextureformat);\n\nmipLevelCount?: number;\n\n}\n\n## Extends\n\n[`GPUObjectDescriptorBase`](gpuobjectdescriptorbase)\n\n## Properties\n\n`arrayLayerCount?``: ``number`\n\n`aspect?``: `[`GPUTextureAspect`](gputextureaspect)\n\n`baseArrayLayer?``: ``number`\n\n`baseMipLevel?``: ``number`\n\n`dimension?``: `[`GPUTextureViewDimension`](gputextureviewdimension)\n\n`format?``: `[`GPUTextureFormat`](gputextureformat)\n\n`mipLevelCount?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureViewDescriptor](https://doc.deno.land/deno/stable/~/GPUTextureViewDescriptor)"
- name: GPUTextureViewDimension
  id: ~/gputextureviewdimension
  summary: null
  description: "# GPUTextureViewDimension\n\n``` typescript\ntype GPUTextureViewDimension = \n```\n\n\\| \"1d\"\n\n\\| \"2d\"\n\n\\| \"2d-array\"\n\n\\| \"cube\"\n\n\\| \"cube-array\"\n\n\\| \"3d\";\n\n## Type\n\n`\"1d\"`` | ``\"2d\"`` | ``\"2d-array\"`` | ``\"cube\"`` | ``\"cube-array\"`` | ``\"3d\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUTextureViewDimension](https://doc.deno.land/deno/stable/~/GPUTextureViewDimension)"
- name: GPUUncapturedErrorEvent
  id: ~/gpuuncapturederrorevent
  summary: null
  description: "# GPUUncapturedErrorEvent\n\n``` typescript\nclass GPUUncapturedErrorEvent extends Event {\n```\n\nconstructor(type: string, gpuUncapturedErrorEventInitDict: [GPUUncapturedErrorEventInit](gpuuncapturederroreventinit));\n\nreadonly error: [GPUError](gpuerror);\n\n}\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``GPUUncapturedErrorEvent(``type``: ``string``, ``gpuUncapturedErrorEventInitDict``: `[`GPUUncapturedErrorEventInit`](gpuuncapturederroreventinit)`)`\n\n## Properties\n\n`error``: `[`GPUError`](gpuerror)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUUncapturedErrorEvent](https://doc.deno.land/deno/stable/~/GPUUncapturedErrorEvent)"
- name: GPUUncapturedErrorEventInit
  id: ~/gpuuncapturederroreventinit
  summary: null
  description: "# GPUUncapturedErrorEventInit\n\n``` typescript\ninterface GPUUncapturedErrorEventInit  extends EventInit {\n```\n\nerror?: [GPUError](gpuerror);\n\n}\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`error?``: `[`GPUError`](gpuerror)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUUncapturedErrorEventInit](https://doc.deno.land/deno/stable/~/GPUUncapturedErrorEventInit)"
- name: GPUValidationError
  id: ~/gpuvalidationerror
  summary: null
  description: "# GPUValidationError\n\n``` typescript\nclass GPUValidationError extends GPUError {\n```\n\nconstructor(message: string);\n\n}\n\n## Extends\n\n`GPUError`\n\n## Constructors\n\n`new ``GPUValidationError(``message``: ``string``)`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUValidationError](https://doc.deno.land/deno/stable/~/GPUValidationError)"
- name: GPUVertexAttribute
  id: ~/gpuvertexattribute
  summary: null
  description: "# GPUVertexAttribute\n\n``` typescript\ninterface GPUVertexAttribute {\n```\n\nformat: [GPUVertexFormat](gpuvertexformat);\n\noffset: number;\n\nshaderLocation: number;\n\n}\n\n## Properties\n\n`format``: `[`GPUVertexFormat`](gpuvertexformat)\n\n`offset``: ``number`\n\n`shaderLocation``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUVertexAttribute](https://doc.deno.land/deno/stable/~/GPUVertexAttribute)"
- name: GPUVertexBufferLayout
  id: ~/gpuvertexbufferlayout
  summary: null
  description: "# GPUVertexBufferLayout\n\n``` typescript\ninterface GPUVertexBufferLayout {\n```\n\narrayStride: number;\n\nattributes: [GPUVertexAttribute](gpuvertexattribute)\\[\\];\n\nstepMode?: [GPUVertexStepMode](gpuvertexstepmode);\n\n}\n\n## Properties\n\n`arrayStride``: ``number`\n\n`attributes``: `[`GPUVertexAttribute`](gpuvertexattribute)`[]`\n\n`stepMode?``: `[`GPUVertexStepMode`](gpuvertexstepmode)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUVertexBufferLayout](https://doc.deno.land/deno/stable/~/GPUVertexBufferLayout)"
- name: GPUVertexFormat
  id: ~/gpuvertexformat
  summary: null
  description: "# GPUVertexFormat\n\n``` typescript\ntype GPUVertexFormat = \n```\n\n\\| \"uint8x2\"\n\n\\| \"uint8x4\"\n\n\\| \"sint8x2\"\n\n\\| \"sint8x4\"\n\n\\| \"unorm8x2\"\n\n\\| \"unorm8x4\"\n\n\\| \"snorm8x2\"\n\n\\| \"snorm8x4\"\n\n\\| \"uint16x2\"\n\n\\| \"uint16x4\"\n\n\\| \"sint16x2\"\n\n\\| \"sint16x4\"\n\n\\| \"unorm16x2\"\n\n\\| \"unorm16x4\"\n\n\\| \"snorm16x2\"\n\n\\| \"snorm16x4\"\n\n\\| \"float16x2\"\n\n\\| \"float16x4\"\n\n\\| \"float32\"\n\n\\| \"float32x2\"\n\n\\| \"float32x3\"\n\n\\| \"float32x4\"\n\n\\| \"uint32\"\n\n\\| \"uint32x2\"\n\n\\| \"uint32x3\"\n\n\\| \"uint32x4\"\n\n\\| \"sint32\"\n\n\\| \"sint32x2\"\n\n\\| \"sint32x3\"\n\n\\| \"sint32x4\";\n\n## Type\n\n`\"uint8x2\"`` | ``\"uint8x4\"`` | ``\"sint8x2\"`` | ``\"sint8x4\"`` | ``\"unorm8x2\"`` | ``\"unorm8x4\"`` | ``\"snorm8x2\"`` | ``\"snorm8x4\"`` | ``\"uint16x2\"`` | ``\"uint16x4\"`` | ``\"sint16x2\"`` | ``\"sint16x4\"`` | ``\"unorm16x2\"`` | ``\"unorm16x4\"`` | ``\"snorm16x2\"`` | ``\"snorm16x4\"`` | ``\"float16x2\"`` | ``\"float16x4\"`` | ``\"float32\"`` | ``\"float32x2\"`` | ``\"float32x3\"`` | ``\"float32x4\"`` | ``\"uint32\"`` | ``\"uint32x2\"`` | ``\"uint32x3\"`` | ``\"uint32x4\"`` | ``\"sint32\"`` | ``\"sint32x2\"`` | ``\"sint32x3\"`` | ``\"sint32x4\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUVertexFormat](https://doc.deno.land/deno/stable/~/GPUVertexFormat)"
- name: GPUVertexState
  id: ~/gpuvertexstate
  summary: null
  description: "# GPUVertexState\n\n``` typescript\ninterface GPUVertexState  extends GPUProgrammableStage {\n```\n\nbuffers?: ([GPUVertexBufferLayout](gpuvertexbufferlayout) \\| null)\\[\\];\n\n}\n\n## Extends\n\n[`GPUProgrammableStage`](gpuprogrammablestage)\n\n## Properties\n\n`buffers?``: ``(`[`GPUVertexBufferLayout`](gpuvertexbufferlayout)` | ``null``)``[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUVertexState](https://doc.deno.land/deno/stable/~/GPUVertexState)"
- name: GPUVertexStepMode
  id: ~/gpuvertexstepmode
  summary: null
  description: "# GPUVertexStepMode\n\n``` typescript\ntype GPUVertexStepMode = \"vertex\" | \"instance\";\n```\n\n## Type\n\n`\"vertex\"`` | ``\"instance\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/GPUVertexStepMode](https://doc.deno.land/deno/stable/~/GPUVertexStepMode)"
- name: HashAlgorithmIdentifier
  id: ~/hashalgorithmidentifier
  summary: null
  description: "# HashAlgorithmIdentifier\n\n``` typescript\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;\n```\n\n## Type\n\n[`AlgorithmIdentifier`](algorithmidentifier)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HashAlgorithmIdentifier](https://doc.deno.land/deno/stable/~/HashAlgorithmIdentifier)"
- name: Headers
  id: ~/headers
  summary: This Fetch API interface allows you to perform various actions on HTTP request and response headers
  description: "# Headers\n\nThis Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like append() (see Examples). In all methods of this interface, header names are matched by case-insensitive byte sequence.\n\n``` typescript\ninterface Headers {\n```\n\nappend(name: string, value: string): void;\n\ndelete(name: string): void;\n\nforEach(callbackfn: (\n\nvalue: string,\n\nkey: string,\n\nparent: [Headers](headers),\n\n) =\\> void, thisArg?: any): void;\n\nget(name: string): string \\| null;\n\nhas(name: string): boolean;\n\nset(name: string, value: string): void;\n\n}\n\n``` typescript\nclass Headers implements DomIterable<string, string> {\n```\n\nconstructor(init?: [HeadersInit](headersinit));\n\nappend(name: string, value: string): void;\n\ndelete(name: string): void;\n\nentries(): IterableIterator\\<\\[string, string\\]\\>;\n\nforEach(callbackfn: (\n\nvalue: string,\n\nkey: string,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void;\n\nget(name: string): string \\| null;\n\nhas(name: string): boolean;\n\nkeys(): IterableIterator\\<string\\>;\n\nset(name: string, value: string): void;\n\nvalues(): IterableIterator\\<string\\>;\n\n\\[Symbol.iterator\\](): IterableIterator\\<\\[string, string\\]\\>;\n\n}\n\n## Methods\n\n`append(``name``: ``string``, ``value``: ``string``)``: ``void`\n\n`delete(``name``: ``string``)``: ``void`\n\n`forEach(``callbackfn``: ``(`\n\nvalue: string,\n\nkey: string,\n\nparent: [Headers](headers),\n\n) =\\> void, thisArg?: any): void\n\n`get(``name``: ``string``)``: ``string`` | ``null`\n\n`has(``name``: ``string``)``: ``boolean`\n\n`set(``name``: ``string``, ``value``: ``string``)``: ``void`\n\n## Implements\n\n[`DomIterable`](domiterable)`<``string``, ``string``>`\n\n## Constructors\n\n`new ``Headers(``init?``: `[`HeadersInit`](headersinit)`)`\n\n## Methods\n\n`append(``name``: ``string``, ``value``: ``string``)``: ``void`\n\nAppends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n\n`delete(``name``: ``string``)``: ``void`\n\nDeletes a header from a `Headers` object.\n\n`entries()``: ``IterableIterator``<``[``string``, ``string``]``>`\n\nReturns an iterator allowing to go through all key/value pairs contained in this Headers object. The both the key and value of each pairs are ByteString objects.\n\n`forEach(``callbackfn``: ``(``value``: ``string``, ``key``: ``string``, ``parent``: ``this``) => ``void``, ``thisArg?``: ``any``)``: ``void`\n\n`get(``name``: ``string``)``: ``string`` | ``null`\n\nReturns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.\n\n`has(``name``: ``string``)``: ``boolean`\n\nReturns a boolean stating whether a `Headers` object contains a certain header.\n\n`keys()``: ``IterableIterator``<``string``>`\n\nReturns an iterator allowing to go through all keys contained in this Headers object. The keys are ByteString objects.\n\n`set(``name``: ``string``, ``value``: ``string``)``: ``void`\n\nSets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.\n\n`values()``: ``IterableIterator``<``string``>`\n\nReturns an iterator allowing to go through all values contained in this Headers object. The values are ByteString objects.\n\n`[Symbol.iterator]()``: ``IterableIterator``<``[``string``, ``string``]``>`\n\nThe Symbol.iterator well-known symbol specifies the default iterator for this Headers object\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Headers](https://doc.deno.land/deno/stable/~/Headers)"
- name: HeadersInit
  id: ~/headersinit
  summary: null
  description: "# HeadersInit\n\n``` typescript\ntype HeadersInit = Headers | string[][] | Record<string, string>;\n```\n\n## Type\n\n[`Headers`](headers)` | ``string``[]``[]`` | ``Record``<``string``, ``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HeadersInit](https://doc.deno.land/deno/stable/~/HeadersInit)"
- name: HkdfParams
  id: ~/hkdfparams
  summary: null
  description: "# HkdfParams\n\n``` typescript\ninterface HkdfParams  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\ninfo: [BufferSource](buffersource);\n\nsalt: [BufferSource](buffersource);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n`info``: `[`BufferSource`](buffersource)\n\n`salt``: `[`BufferSource`](buffersource)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HkdfParams](https://doc.deno.land/deno/stable/~/HkdfParams)"
- name: HmacImportParams
  id: ~/hmacimportparams
  summary: null
  description: "# HmacImportParams\n\n``` typescript\ninterface HmacImportParams  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\nlength?: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n`length?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HmacImportParams](https://doc.deno.land/deno/stable/~/HmacImportParams)"
- name: HmacKeyAlgorithm
  id: ~/hmackeyalgorithm
  summary: null
  description: "# HmacKeyAlgorithm\n\n``` typescript\ninterface HmacKeyAlgorithm  extends KeyAlgorithm {\n```\n\nhash: [KeyAlgorithm](keyalgorithm);\n\nlength: number;\n\n}\n\n## Extends\n\n[`KeyAlgorithm`](keyalgorithm)\n\n## Properties\n\n`hash``: `[`KeyAlgorithm`](keyalgorithm)\n\n`length``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HmacKeyAlgorithm](https://doc.deno.land/deno/stable/~/HmacKeyAlgorithm)"
- name: HmacKeyGenParams
  id: ~/hmackeygenparams
  summary: null
  description: "# HmacKeyGenParams\n\n``` typescript\ninterface HmacKeyGenParams  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\nlength?: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n`length?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/HmacKeyGenParams](https://doc.deno.land/deno/stable/~/HmacKeyGenParams)"
- name: ImportMeta
  id: ~/importmeta
  summary: Deno provides extra properties on import.meta
  description: "# ImportMeta\n\nDeno provides extra properties on `import.meta`. These are included here to ensure that these are still available when using the Deno namespace in conjunction with other type libs, like `dom`.\n\n``` typescript\ninterface ImportMeta {\n```\n\nmain: boolean;\n\nurl: string;\n\nresolve(specifier: string): string;\n\n}\n\n## Properties\n\n`main``: ``boolean`\n\nA flag that indicates if the current module is the main module that was called when starting the program under Deno.\n\n``` typescript\nif (import.meta.main) {\n  // this was loaded as the main module, maybe do some bootstrapping\n}\n```\n\n`url``: ``string`\n\nA string representation of the fully qualified module URL. When the module is loaded locally, the value will be a file URL (e.g. `file:///path/module.ts`).\n\nYou can also parse the string as a URL to determine more information about how the current module was loaded. For example to determine if a module was local or not:\n\n``` typescript\nconst url = new URL(import.meta.url);\nif (url.protocol === \"file:\") {\n  console.log(\"this module was loaded locally\");\n}\n```\n\n## Methods\n\n`resolve(``specifier``: ``string``)``: ``string`\n\nA function that returns resolved specifier as if it would be imported using `import(specifier)`.\n\n``` typescript\nconsole.log(import.meta.resolve(\"./foo.js\"));\n// file:///dev/foo.js\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ImportMeta](https://doc.deno.land/deno/stable/~/ImportMeta)"
- name: JsonWebKey
  id: ~/jsonwebkey
  summary: null
  description: "# JsonWebKey\n\n``` typescript\ninterface JsonWebKey {\n```\n\nalg?: string;\n\ncrv?: string;\n\nd?: string;\n\ndp?: string;\n\ndq?: string;\n\ne?: string;\n\next?: boolean;\n\nk?: string;\n\nkey_ops?: string\\[\\];\n\nkty?: string;\n\nn?: string;\n\noth?: [RsaOtherPrimesInfo](rsaotherprimesinfo)\\[\\];\n\np?: string;\n\nq?: string;\n\nqi?: string;\n\nuse?: string;\n\nx?: string;\n\ny?: string;\n\n}\n\n## Properties\n\n`alg?``: ``string`\n\n`crv?``: ``string`\n\n`d?``: ``string`\n\n`dp?``: ``string`\n\n`dq?``: ``string`\n\n`e?``: ``string`\n\n`ext?``: ``boolean`\n\n`k?``: ``string`\n\n`key_ops?``: ``string``[]`\n\n`kty?``: ``string`\n\n`n?``: ``string`\n\n`oth?``: `[`RsaOtherPrimesInfo`](rsaotherprimesinfo)`[]`\n\n`p?``: ``string`\n\n`q?``: ``string`\n\n`qi?``: ``string`\n\n`use?``: ``string`\n\n`x?``: ``string`\n\n`y?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/JsonWebKey](https://doc.deno.land/deno/stable/~/JsonWebKey)"
- name: KeyAlgorithm
  id: ~/keyalgorithm
  summary: null
  description: "# KeyAlgorithm\n\n``` typescript\ninterface KeyAlgorithm {\n```\n\nname: string;\n\n}\n\n## Properties\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/KeyAlgorithm](https://doc.deno.land/deno/stable/~/KeyAlgorithm)"
- name: KeyFormat
  id: ~/keyformat
  summary: null
  description: "# KeyFormat\n\n``` typescript\ntype KeyFormat = \n```\n\n\\| \"jwk\"\n\n\\| \"pkcs8\"\n\n\\| \"raw\"\n\n\\| \"spki\";\n\n## Type\n\n`\"jwk\"`` | ``\"pkcs8\"`` | ``\"raw\"`` | ``\"spki\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/KeyFormat](https://doc.deno.land/deno/stable/~/KeyFormat)"
- name: KeyType
  id: ~/keytype
  summary: null
  description: "# KeyType\n\n``` typescript\ntype KeyType = \"private\" | \"public\" | \"secret\";\n```\n\n## Type\n\n`\"private\"`` | ``\"public\"`` | ``\"secret\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/KeyType](https://doc.deno.land/deno/stable/~/KeyType)"
- name: KeyUsage
  id: ~/keyusage
  summary: null
  description: "# KeyUsage\n\n``` typescript\ntype KeyUsage = \n```\n\n\\| \"decrypt\"\n\n\\| \"deriveBits\"\n\n\\| \"deriveKey\"\n\n\\| \"encrypt\"\n\n\\| \"sign\"\n\n\\| \"unwrapKey\"\n\n\\| \"verify\"\n\n\\| \"wrapKey\";\n\n## Type\n\n`\"decrypt\"`` | ``\"deriveBits\"`` | ``\"deriveKey\"`` | ``\"encrypt\"`` | ``\"sign\"`` | ``\"unwrapKey\"`` | ``\"verify\"`` | ``\"wrapKey\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/KeyUsage](https://doc.deno.land/deno/stable/~/KeyUsage)"
- name: localStorage
  id: ~/localstorage
  summary: null
  description: "# localStorage\n\n``` typescript\nvar localStorage: Storage;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/localStorage](https://doc.deno.land/deno/stable/~/localStorage)"
- name: Location
  id: ~/location
  summary: The location (URL) of the object it is linked to
  description: "# Location\n\nThe location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Accessible via `globalThis.location`.\n\n``` typescript\nclass Location {\n```\n\nconstructor();\n\nreadonly ancestorOrigins: [DOMStringList](domstringlist);\n\nhash: string;\n\nhost: string;\n\nhostname: string;\n\nhref: string;\n\nreadonly origin: string;\n\npathname: string;\n\nport: string;\n\nprotocol: string;\n\nsearch: string;\n\nassign(url: string): void;\n\nreload(): void;\n\nreload(forcedReload: boolean): void;\n\nreplace(url: string): void;\n\ntoString(): string;\n\n}\n\n## Constructors\n\n`new ``Location()`\n\n## Properties\n\n`ancestorOrigins``: `[`DOMStringList`](domstringlist)\n\nReturns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.\n\nAlways empty in Deno.\n\n`hash``: ``string`\n\nReturns the Location object's URL's fragment (includes leading \"#\" if non-empty).\n\nCannot be set in Deno.\n\n`host``: ``string`\n\nReturns the Location object's URL's host and port (if different from the default port for the scheme).\n\nCannot be set in Deno.\n\n`hostname``: ``string`\n\nReturns the Location object's URL's host.\n\nCannot be set in Deno.\n\n`href``: ``string`\n\nReturns the Location object's URL.\n\nCannot be set in Deno.\n\n`origin``: ``string`\n\nReturns the Location object's URL's origin.\n\n`pathname``: ``string`\n\nReturns the Location object's URL's path.\n\nCannot be set in Deno.\n\n`port``: ``string`\n\nReturns the Location object's URL's port.\n\nCannot be set in Deno.\n\n`protocol``: ``string`\n\nReturns the Location object's URL's scheme.\n\nCannot be set in Deno.\n\n`search``: ``string`\n\nReturns the Location object's URL's query (includes leading \"?\" if non-empty).\n\nCannot be set in Deno.\n\n## Methods\n\n`assign(``url``: ``string``)``: ``void`\n\nNavigates to the given URL.\n\nCannot be set in Deno.\n\n`reload()``: ``void`\n\nReloads the current page.\n\nDisabled in Deno.\n\n`reload(``forcedReload``: ``boolean``)``: ``void`` ``deprecated`\n\n@deprecated\n\n`replace(``url``: ``string``)``: ``void`\n\nRemoves the current page from the session history and navigates to the given URL.\n\nDisabled in Deno.\n\n`toString()``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Location](https://doc.deno.land/deno/stable/~/Location)"
- name: MessageChannel
  id: ~/messagechannel
  summary: The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties
  description: "# MessageChannel\n\nThe MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.\n\n``` typescript\nclass MessageChannel {\n```\n\nconstructor();\n\nreadonly port1: [MessagePort](messageport);\n\nreadonly port2: [MessagePort](messageport);\n\n}\n\n## Constructors\n\n`new ``MessageChannel()`\n\n## Properties\n\n`port1``: `[`MessagePort`](messageport)\n\n`port2``: `[`MessagePort`](messageport)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/MessageChannel](https://doc.deno.land/deno/stable/~/MessageChannel)"
- name: MessageEvent
  id: ~/messageevent
  summary: Returns the data of the message
  description: "# MessageEvent\n\n``` typescript\nclass MessageEvent<T = any> extends Event {\n```\n\nconstructor(type: string, eventInitDict?: [MessageEventInit](messageeventinit));\n\nreadonly data: T;\n\nreadonly lastEventId: string;\n\nreadonly ports: ReadonlyArray\\<[MessagePort](messageport)\\>;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``MessageEvent(``type``: ``string``, ``eventInitDict?``: `[`MessageEventInit`](messageeventinit)`)`\n\n## Properties\n\n`data``: ``T`\n\nReturns the data of the message.\n\n`lastEventId``: ``string`\n\nReturns the last event ID string, for server-sent events.\n\n`ports``: ``ReadonlyArray``<`[`MessagePort`](messageport)`>`\n\nReturns transferred ports.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/MessageEvent](https://doc.deno.land/deno/stable/~/MessageEvent)"
- name: MessageEventInit
  id: ~/messageeventinit
  summary: null
  description: "# MessageEventInit\n\n``` typescript\ninterface MessageEventInit <T = any> extends EventInit {\n```\n\ndata?: T;\n\nlastEventId?: string;\n\norigin?: string;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`data?``: ``T`\n\n`lastEventId?``: ``string`\n\n`origin?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/MessageEventInit](https://doc.deno.land/deno/stable/~/MessageEventInit)"
- name: MessagePort
  id: ~/messageport
  summary: The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other
  description: "# MessagePort\n\nThe MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.\n\n``` typescript\nclass MessagePort extends EventTarget {\n```\n\nonmessage: ((this: [MessagePort](messageport), ev: [MessageEvent](messageevent)) =\\> any) \\| null;\n\nonmessageerror: ((this: [MessagePort](messageport), ev: [MessageEvent](messageevent)) =\\> any) \\| null;\n\naddEventListener\\<K extends keyof [MessagePortEventMap](messageporteventmap)\\>(\n\ntype: K,\n\nlistener: (this: [MessagePort](messageport), ev: [MessagePortEventMap](messageporteventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nclose(): void;\n\npostMessage(message: any, transfer: [Transferable](transferable)\\[\\]): void;\n\npostMessage(message: any, options?: [StructuredSerializeOptions](structuredserializeoptions)): void;\n\nremoveEventListener\\<K extends keyof [MessagePortEventMap](messageporteventmap)\\>(\n\ntype: K,\n\nlistener: (this: [MessagePort](messageport), ev: [MessagePortEventMap](messageporteventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nstart(): void;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Properties\n\n`onmessage``: ``(``(``this``: `[`MessagePort`](messageport)`, ``ev``: `[`MessageEvent`](messageevent)`) => ``any``)`` | ``null`\n\n`onmessageerror``: ``(``(``this``: `[`MessagePort`](messageport)`, ``ev``: `[`MessageEvent`](messageevent)`) => ``any``)`` | ``null`\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`MessagePortEventMap`](messageporteventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`MessagePort`](messageport)`, ``ev``: `[`MessagePortEventMap`](messageporteventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`close()``: ``void`\n\nDisconnects the port, so that it is no longer active.\n\n`postMessage(``message``: ``any``, ``transfer``: `[`Transferable`](transferable)`[]``)``: ``void`\n\nPosts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n\nThrows a \"DataCloneError\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\n\n`postMessage(``message``: ``any``, ``options?``: `[`StructuredSerializeOptions`](structuredserializeoptions)`)``: ``void`\n\n`removeEventListener``<``K`` extends ``keyof`` `[`MessagePortEventMap`](messageporteventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`MessagePort`](messageport)`, ``ev``: `[`MessagePortEventMap`](messageporteventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`start()``: ``void`\n\nBegins dispatching messages received on the port. This is implicitly called when assigning a value to `this.onmessage`.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/MessagePort](https://doc.deno.land/deno/stable/~/MessagePort)"
- name: MessagePortEventMap
  id: ~/messageporteventmap
  summary: null
  description: "# MessagePortEventMap\n\n``` typescript\ninterface MessagePortEventMap {\n```\n\nmessage: [MessageEvent](messageevent);\n\nmessageerror: [MessageEvent](messageevent);\n\n}\n\n## Properties\n\n`message``: `[`MessageEvent`](messageevent)\n\n`messageerror``: `[`MessageEvent`](messageevent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/MessagePortEventMap](https://doc.deno.land/deno/stable/~/MessagePortEventMap)"
- name: NamedCurve
  id: ~/namedcurve
  summary: null
  description: "# NamedCurve\n\n``` typescript\ntype NamedCurve = string;\n```\n\n## Type\n\n`string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/NamedCurve](https://doc.deno.land/deno/stable/~/NamedCurve)"
- name: Navigator
  id: ~/navigator
  summary: null
  description: "# Navigator\n\n``` typescript\nclass Navigator {\n```\n\nconstructor();\n\nreadonly gpu: [GPU](gpu);\n\nreadonly hardwareConcurrency: number;\n\nreadonly userAgent: string;\n\n}\n\n## Constructors\n\n`new ``Navigator()`\n\n## Properties\n\n`gpu``: `[`GPU`](gpu)\n\n`hardwareConcurrency``: ``number`\n\n`userAgent``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Navigator](https://doc.deno.land/deno/stable/~/Navigator)"
- name: onbeforeunload
  id: ~/onbeforeunload
  summary: null
  description: "# onbeforeunload\n\n``` typescript\nvar onbeforeunload: ((this: Window, ev: Event) => any) | null;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/onbeforeunload](https://doc.deno.land/deno/stable/~/onbeforeunload)"
- name: onerror
  id: ~/onerror
  summary: null
  description: "# onerror\n\n``` typescript\nvar onerror: ((this: Window, ev: ErrorEvent) => any) | null;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/onerror](https://doc.deno.land/deno/stable/~/onerror)"
- name: onload
  id: ~/onload
  summary: null
  description: "# onload\n\n``` typescript\nvar onload: ((this: Window, ev: Event) => any) | null;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/onload](https://doc.deno.land/deno/stable/~/onload)"
- name: onunhandledrejection
  id: ~/onunhandledrejection
  summary: null
  description: "# onunhandledrejection\n\n``` typescript\nvar onunhandledrejection: ((this: Window, ev: PromiseRejectionEvent) => any) | null;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/onunhandledrejection](https://doc.deno.land/deno/stable/~/onunhandledrejection)"
- name: onunload
  id: ~/onunload
  summary: null
  description: "# onunload\n\n``` typescript\nvar onunload: ((this: Window, ev: Event) => any) | null;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/onunload](https://doc.deno.land/deno/stable/~/onunload)"
- name: Pbkdf2Params
  id: ~/pbkdf2params
  summary: null
  description: "# Pbkdf2Params\n\n``` typescript\ninterface Pbkdf2Params  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\niterations: number;\n\nsalt: [BufferSource](buffersource);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n`iterations``: ``number`\n\n`salt``: `[`BufferSource`](buffersource)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Pbkdf2Params](https://doc.deno.land/deno/stable/~/Pbkdf2Params)"
- name: Performance
  id: ~/performance
  summary: Deno supports User Timing Level 3 which is not widely supported yet in other runtimes
  description: "# Performance\n\nDeno supports [User Timing Level 3](https://w3c.github.io/user-timing) which is not widely supported yet in other runtimes.\n\nCheck out the [Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance) documentation on MDN for further information about how to use the API.\n\n``` typescript\ninterface Performance {\n```\n\nmark(markName: string, options?: [PerformanceMarkOptions](performancemarkoptions)): [PerformanceMark](performancemark);\n\nmeasure(measureName: string, options?: [PerformanceMeasureOptions](performancemeasureoptions)): [PerformanceMeasure](performancemeasure);\n\n}\n\n``` typescript\nclass Performance extends EventTarget {\n```\n\nconstructor();\n\nreadonly timeOrigin: number;\n\nclearMarks(markName?: string): void;\n\nclearMeasures(measureName?: string): void;\n\ngetEntries(): [PerformanceEntryList](performanceentrylist);\n\ngetEntriesByName(name: string, type?: string): [PerformanceEntryList](performanceentrylist);\n\ngetEntriesByType(type: string): [PerformanceEntryList](performanceentrylist);\n\nmark(markName: string, options?: [PerformanceMarkOptions](performancemarkoptions)): [PerformanceMark](performancemark);\n\nmeasure(measureName: string, options?: [PerformanceMeasureOptions](performancemeasureoptions)): [PerformanceMeasure](performancemeasure);\n\nmeasure(\n\nmeasureName: string,\n\nstartMark?: string,\n\nendMark?: string,\n\n): [PerformanceMeasure](performancemeasure);\n\nnow(): number;\n\ntoJSON(): any;\n\n}\n\n## Methods\n\n`mark(``markName``: ``string``, ``options?``: `[`PerformanceMarkOptions`](performancemarkoptions)`)``: `[`PerformanceMark`](performancemark)\n\nStores a timestamp with the associated name (a \"mark\").\n\n`measure(``measureName``: ``string``, ``options?``: `[`PerformanceMeasureOptions`](performancemeasureoptions)`)``: `[`PerformanceMeasure`](performancemeasure)\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n## Extends\n\n`EventTarget`\n\n## Constructors\n\n`new ``Performance()`\n\n## Properties\n\n`timeOrigin``: ``number`\n\nReturns a timestamp representing the start of the performance measurement.\n\n## Methods\n\n`clearMarks(``markName?``: ``string``)``: ``void`\n\nRemoves the stored timestamp with the associated name.\n\n`clearMeasures(``measureName?``: ``string``)``: ``void`\n\nRemoves stored timestamp with the associated name.\n\n`getEntries()``: `[`PerformanceEntryList`](performanceentrylist)\n\n`getEntriesByName(``name``: ``string``, ``type?``: ``string``)``: `[`PerformanceEntryList`](performanceentrylist)\n\n`getEntriesByType(``type``: ``string``)``: `[`PerformanceEntryList`](performanceentrylist)\n\n`mark(``markName``: ``string``, ``options?``: `[`PerformanceMarkOptions`](performancemarkoptions)`)``: `[`PerformanceMark`](performancemark)\n\nStores a timestamp with the associated name (a \"mark\").\n\n`measure(``measureName``: ``string``, ``options?``: `[`PerformanceMeasureOptions`](performancemeasureoptions)`)``: `[`PerformanceMeasure`](performancemeasure)\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n`measure(``measureName``: ``string``, ``startMark?``: ``string``, ``endMark?``: ``string``)``: `[`PerformanceMeasure`](performancemeasure)\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n`now()``: ``number`\n\nReturns a current time from Deno's start in milliseconds.\n\nUse the permission flag `--allow-hrtime` return a precise value.\n\n``` typescript\nconst t = performance.now();\nconsole.log(`${t} ms since start!`);\n```\n\n`toJSON()``: ``any`\n\nReturns a JSON representation of the performance object.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Performance](https://doc.deno.land/deno/stable/~/Performance)"
- name: PerformanceEntry
  id: ~/performanceentry
  summary: Encapsulates a single performance metric that is part of the performance timeline
  description: "# PerformanceEntry\n\nEncapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the `.mark()` method) at an explicit point in an application.\n\n``` typescript\nclass PerformanceEntry {\n```\n\nreadonly duration: number;\n\nreadonly entryType: string;\n\nreadonly name: string;\n\nreadonly startTime: number;\n\ntoJSON(): any;\n\n}\n\n## Properties\n\n`duration``: ``number`\n\n`entryType``: ``string`\n\n`name``: ``string`\n\n`startTime``: ``number`\n\n## Methods\n\n`toJSON()``: ``any`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceEntry](https://doc.deno.land/deno/stable/~/PerformanceEntry)"
- name: PerformanceEntryList
  id: ~/performanceentrylist
  summary: null
  description: "# PerformanceEntryList\n\n``` typescript\ntype PerformanceEntryList = PerformanceEntry[];\n```\n\n## Type\n\n[`PerformanceEntry`](performanceentry)`[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceEntryList](https://doc.deno.land/deno/stable/~/PerformanceEntryList)"
- name: PerformanceMark
  id: ~/performancemark
  summary: PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the performance timeline
  description: "# PerformanceMark\n\n`PerformanceMark` is an abstract interface for `PerformanceEntry` objects with an entryType of `\"mark\"`. Entries of this type are created by calling `performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the performance timeline.\n\n``` typescript\nclass PerformanceMark extends PerformanceEntry {\n```\n\nconstructor(name: string, options?: [PerformanceMarkOptions](performancemarkoptions));\n\nreadonly detail: any;\n\nreadonly entryType: \"mark\";\n\n}\n\n## Extends\n\n`PerformanceEntry`\n\n## Constructors\n\n`new ``PerformanceMark(``name``: ``string``, ``options?``: `[`PerformanceMarkOptions`](performancemarkoptions)`)`\n\n## Properties\n\n`detail``: ``any`\n\n`entryType``: ``\"mark\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceMark](https://doc.deno.land/deno/stable/~/PerformanceMark)"
- name: PerformanceMarkOptions
  id: ~/performancemarkoptions
  summary: Options which are used in conjunction with performance.mark
  description: "# PerformanceMarkOptions\n\nOptions which are used in conjunction with `performance.mark`. Check out the MDN [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark#markoptions) documentation for more details.\n\n``` typescript\ninterface PerformanceMarkOptions {\n```\n\ndetail?: any;\n\ndetail?: any;\n\nstartTime?: number;\n\nstartTime?: number;\n\n}\n\n## Properties\n\n`detail?``: ``any`\n\nMetadata to be included in the mark.\n\n`detail?``: ``any`\n\nMetadata to be included in the mark.\n\n`startTime?``: ``number`\n\nTimestamp to be used as the mark time.\n\n`startTime?``: ``number`\n\nTimestamp to be used as the mark time.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceMarkOptions](https://doc.deno.land/deno/stable/~/PerformanceMarkOptions)"
- name: PerformanceMeasure
  id: ~/performancemeasure
  summary: PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the performance timeline
  description: "# PerformanceMeasure\n\n`PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects with an entryType of `\"measure\"`. Entries of this type are created by calling `performance.measure()` to add a named `DOMHighResTimeStamp` (the measure) between two marks to the performance timeline.\n\n``` typescript\nclass PerformanceMeasure extends PerformanceEntry {\n```\n\nreadonly detail: any;\n\nreadonly entryType: \"measure\";\n\n}\n\n## Extends\n\n`PerformanceEntry`\n\n## Properties\n\n`detail``: ``any`\n\n`entryType``: ``\"measure\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceMeasure](https://doc.deno.land/deno/stable/~/PerformanceMeasure)"
- name: PerformanceMeasureOptions
  id: ~/performancemeasureoptions
  summary: Options which are used in conjunction with performance.measure
  description: "# PerformanceMeasureOptions\n\nOptions which are used in conjunction with `performance.measure`. Check out the MDN [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure#measureoptions) documentation for more details.\n\n``` typescript\ninterface PerformanceMeasureOptions {\n```\n\ndetail?: any;\n\ndetail?: any;\n\nduration?: number;\n\nduration?: number;\n\nend?: string \\| number;\n\nend?: string \\| number;\n\nstart?: string \\| number;\n\nstart?: string \\| number;\n\n}\n\n## Properties\n\n`detail?``: ``any`\n\nMetadata to be included in the measure.\n\n`detail?``: ``any`\n\nMetadata to be included in the measure.\n\n`duration?``: ``number`\n\nDuration between the start and end times.\n\n`duration?``: ``number`\n\nDuration between the start and end times.\n\n`end?``: ``string`` | ``number`\n\nTimestamp to be used as the end time or string to be used as end mark.\n\n`end?``: ``string`` | ``number`\n\nTimestamp to be used as the end time or string to be used as end mark.\n\n`start?``: ``string`` | ``number`\n\nTimestamp to be used as the start time or string to be used as start mark.\n\n`start?``: ``string`` | ``number`\n\nTimestamp to be used as the start time or string to be used as start mark.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PerformanceMeasureOptions](https://doc.deno.land/deno/stable/~/PerformanceMeasureOptions)"
- name: PipeOptions
  id: ~/pipeoptions
  summary: null
  description: "# PipeOptions\n\n``` typescript\ninterface PipeOptions {\n```\n\npreventAbort?: boolean;\n\npreventCancel?: boolean;\n\npreventClose?: boolean;\n\nsignal?: [AbortSignal](abortsignal);\n\n}\n\n## Properties\n\n`preventAbort?``: ``boolean`\n\n`preventCancel?``: ``boolean`\n\n`preventClose?``: ``boolean`\n\n`signal?``: `[`AbortSignal`](abortsignal)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PipeOptions](https://doc.deno.land/deno/stable/~/PipeOptions)"
- name: PostMessageOptions
  id: ~/postmessageoptions
  summary: This type has been renamed to StructuredSerializeOptions
  description: "# PostMessageOptions\n\ndeprecated\n\nThis type has been renamed to StructuredSerializeOptions. Use that type for new code.\n\n@deprecated\n\nuse `StructuredSerializeOptions` instead.\n\n``` typescript\ntype PostMessageOptions = StructuredSerializeOptions;\n```\n\n## Type\n\n[`StructuredSerializeOptions`](structuredserializeoptions)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PostMessageOptions](https://doc.deno.land/deno/stable/~/PostMessageOptions)"
- name: ProgressEvent
  id: ~/progressevent
  summary: Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an , , , or )
  description: "# ProgressEvent\n\nEvents measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an , , , or ).\n\n``` typescript\nclass ProgressEvent<T extends EventTarget = EventTarget> extends Event {\n```\n\nconstructor(type: string, eventInitDict?: [ProgressEventInit](progresseventinit));\n\nreadonly lengthComputable: boolean;\n\nreadonly loaded: number;\n\nreadonly target: T \\| null;\n\nreadonly total: number;\n\n}\n\n## Type Parameters\n\n`T`` extends `[`EventTarget`](eventtarget)` = `[`EventTarget`](eventtarget)\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``ProgressEvent(``type``: ``string``, ``eventInitDict?``: `[`ProgressEventInit`](progresseventinit)`)`\n\n## Properties\n\n`lengthComputable``: ``boolean`\n\n`loaded``: ``number`\n\n`target``: ``T`` | ``null`\n\n`total``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ProgressEvent](https://doc.deno.land/deno/stable/~/ProgressEvent)"
- name: ProgressEventInit
  id: ~/progresseventinit
  summary: null
  description: "# ProgressEventInit\n\n``` typescript\ninterface ProgressEventInit  extends EventInit {\n```\n\nlengthComputable?: boolean;\n\nloaded?: number;\n\ntotal?: number;\n\n}\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`lengthComputable?``: ``boolean`\n\n`loaded?``: ``number`\n\n`total?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ProgressEventInit](https://doc.deno.land/deno/stable/~/ProgressEventInit)"
- name: PromiseRejectionEvent
  id: ~/promiserejectionevent
  summary: null
  description: "# PromiseRejectionEvent\n\n``` typescript\nclass PromiseRejectionEvent extends Event {\n```\n\nconstructor(type: string, eventInitDict?: [PromiseRejectionEventInit](promiserejectioneventinit));\n\nreadonly promise: Promise\\<any\\>;\n\nreadonly reason: any;\n\n}\n\n## Extends\n\n`Event`\n\n## Constructors\n\n`new ``PromiseRejectionEvent(``type``: ``string``, ``eventInitDict?``: `[`PromiseRejectionEventInit`](promiserejectioneventinit)`)`\n\n## Properties\n\n`promise``: ``Promise``<``any``>`\n\n`reason``: ``any`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PromiseRejectionEvent](https://doc.deno.land/deno/stable/~/PromiseRejectionEvent)"
- name: PromiseRejectionEventInit
  id: ~/promiserejectioneventinit
  summary: null
  description: "# PromiseRejectionEventInit\n\n``` typescript\ninterface PromiseRejectionEventInit  extends EventInit {\n```\n\npromise: Promise\\<any\\>;\n\nreason?: any;\n\n}\n\n## Extends\n\n[`EventInit`](eventinit)\n\n## Properties\n\n`promise``: ``Promise``<``any``>`\n\n`reason?``: ``any`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/PromiseRejectionEventInit](https://doc.deno.land/deno/stable/~/PromiseRejectionEventInit)"
- name: prompt
  id: ~/prompt
  summary: Shows the given message and waits for the user's input
  description: "# prompt\n\nShows the given message and waits for the user's input. Returns the user's input as string.\n\nIf the default value is given and the user inputs the empty string, then it returns the given default value.\n\nIf the default value is not given and the user inputs the empty string, it returns null.\n\nIf the stdin is not interactive, it returns null.\n\n``` typescript\n```\n\nfunction prompt(message?: string, defaultValue?: string): string \\| null;\n\n`prompt(``message?``: ``string``, ``defaultValue?``: ``string``)``: ``string`` | ``null`\n\n### Parameters\n\n`message?``: ``string`` ``optional`\n\n`defaultValue?``: ``string`` ``optional`\n\n### Return Type\n\n`string`` | ``null`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/prompt](https://doc.deno.land/deno/stable/~/prompt)"
- name: queueMicrotask
  id: ~/queuemicrotask
  summary: A microtask is a short function which is executed after the function or module which created it exits and only if the JavaScript execution stack is empty, but before returning control to the event loop being used to drive the script's execution environment
  description: "# queueMicrotask\n\nA microtask is a short function which is executed after the function or module which created it exits and only if the JavaScript execution stack is empty, but before returning control to the event loop being used to drive the script's execution environment. This event loop may be either the main event loop or the event loop driving a web worker.\n\n``` typescript\nqueueMicrotask(() => { console.log('This event loop stack is complete'); });\n```\n\n``` typescript\n```\n\nfunction queueMicrotask(func: [VoidFunction](voidfunction)): void;\n\n`queueMicrotask(``func``: `[`VoidFunction`](voidfunction)`)``: ``void`\n\n### Parameters\n\n`func``: `[`VoidFunction`](voidfunction)\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/queueMicrotask](https://doc.deno.land/deno/stable/~/queueMicrotask)"
- name: QueuingStrategy
  id: ~/queuingstrategy
  summary: null
  description: "# QueuingStrategy\n\n``` typescript\ninterface QueuingStrategy <T = any> {\n```\n\nhighWaterMark?: number;\n\nsize?: [QueuingStrategySizeCallback](queuingstrategysizecallback)\\<T\\>;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Properties\n\n`highWaterMark?``: ``number`\n\n`size?``: `[`QueuingStrategySizeCallback`](queuingstrategysizecallback)`<``T``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/QueuingStrategy](https://doc.deno.land/deno/stable/~/QueuingStrategy)"
- name: QueuingStrategySizeCallback
  id: ~/queuingstrategysizecallback
  summary: null
  description: "# QueuingStrategySizeCallback\n\n``` typescript\ninterface QueuingStrategySizeCallback <T = any> {\n```\n\n(chunk: T): number;\n\n}\n\n## Type Parameters\n\n`T`` = ``any`\n\n## Call Signatures\n\n`(``chunk``: ``T``)``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/QueuingStrategySizeCallback](https://doc.deno.land/deno/stable/~/QueuingStrategySizeCallback)"
- name: ReadableByteStreamController
  id: ~/readablebytestreamcontroller
  summary: null
  description: "# ReadableByteStreamController\n\n``` typescript\ninterface ReadableByteStreamController {\n```\n\nreadonly byobRequest: [ReadableStreamBYOBRequest](readablestreambyobrequest) \\| null;\n\nreadonly desiredSize: number \\| null;\n\nclose(): void;\n\nenqueue(chunk: ArrayBufferView): void;\n\nerror(error?: any): void;\n\n}\n\n``` typescript\nvar ReadableByteStreamController: {\n```\n\nprototype: [ReadableByteStreamController](readablebytestreamcontroller);\n\nnew (): [ReadableByteStreamController](readablebytestreamcontroller);\n\n};\n\n## Properties\n\n`readonly ``byobRequest``: `[`ReadableStreamBYOBRequest`](readablestreambyobrequest)` | ``null`\n\n`readonly ``desiredSize``: ``number`` | ``null`\n\n## Methods\n\n`close()``: ``void`\n\n`enqueue(``chunk``: ``ArrayBufferView``)``: ``void`\n\n`error(``error?``: ``any``)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableByteStreamController](https://doc.deno.land/deno/stable/~/ReadableByteStreamController)"
- name: ReadableByteStreamControllerCallback
  id: ~/readablebytestreamcontrollercallback
  summary: null
  description: "# ReadableByteStreamControllerCallback\n\n``` typescript\ninterface ReadableByteStreamControllerCallback {\n```\n\n(controller: [ReadableByteStreamController](readablebytestreamcontroller)): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Call Signatures\n\n`(``controller``: `[`ReadableByteStreamController`](readablebytestreamcontroller)`)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableByteStreamControllerCallback](https://doc.deno.land/deno/stable/~/ReadableByteStreamControllerCallback)"
- name: ReadableStream
  id: ~/readablestream
  summary: This Streams API interface represents a readable stream of byte data
  description: "# ReadableStream\n\nThis Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n``` typescript\ninterface ReadableStream <R = any> {\n```\n\nreadonly locked: boolean;\n\n\\[\\[Symbol.asyncIterator\\]\\](options?: {\n\npreventCancel?: boolean;\n\n}): AsyncIterableIterator\\<R\\>;\n\ncancel(reason?: any): Promise\\<void\\>;\n\ngetReader(options: {\n\nmode: \"byob\";\n\n}): [ReadableStreamBYOBReader](readablestreambyobreader);\n\ngetReader(options?: {\n\nmode?: undefined;\n\n}): [ReadableStreamDefaultReader](readablestreamdefaultreader)\\<R\\>;\n\npipeThrough\\<T\\>({ writable, readable }: {\n\nwritable: [WritableStream](writablestream)\\<R\\>;\n\nreadable: [ReadableStream](readablestream)\\<T\\>;\n\n}, options?: [PipeOptions](pipeoptions)): [ReadableStream](readablestream)\\<T\\>;\n\npipeTo(dest: [WritableStream](writablestream)\\<R\\>, options?: [PipeOptions](pipeoptions)): Promise\\<void\\>;\n\ntee(): \\[[ReadableStream](readablestream)\\<R\\>, [ReadableStream](readablestream)\\<R\\>\\];\n\n}\n\n``` typescript\nvar ReadableStream: {\n```\n\nprototype: [ReadableStream](readablestream);\n\nnew (underlyingSource: [UnderlyingByteSource](underlyingbytesource), strategy?: {\n\nhighWaterMark?: number;\n\nsize?: undefined;\n\n}): [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nnew \\<R = any\\>(underlyingSource?: [UnderlyingSource](underlyingsource)\\<R\\>, strategy?: [QueuingStrategy](queuingstrategy)\\<R\\>): [ReadableStream](readablestream)\\<R\\>;\n\n};\n\n## Type Parameters\n\n`R`` = ``any`\n\n## Properties\n\n`readonly ``locked``: ``boolean`\n\n## Methods\n\n`[[Symbol.asyncIterator]](``options?``: ``{`\n\npreventCancel?: boolean;\n\n}): AsyncIterableIterator\\<R\\>\n\n`cancel(``reason?``: ``any``)``: ``Promise``<``void``>`\n\n`getReader(``options``: ``{`\n\nmode: \"byob\";\n\n}): [ReadableStreamBYOBReader](readablestreambyobreader)\n\n`getReader(``options?``: ``{`\n\nmode?: undefined;\n\n}): [ReadableStreamDefaultReader](readablestreamdefaultreader)\\<R\\>\n\n`pipeThrough``<``T``>``(``{ ``writable``, ``readable`` }``: ``{`\n\nwritable: [WritableStream](writablestream)\\<R\\>;\n\nreadable: [ReadableStream](readablestream)\\<T\\>;\n\n}, options?: [PipeOptions](pipeoptions)): [ReadableStream](readablestream)\\<T\\>\n\n`pipeTo(``dest``: `[`WritableStream`](writablestream)`<``R``>``, ``options?``: `[`PipeOptions`](pipeoptions)`)``: ``Promise``<``void``>`\n\n`tee()``: ``[`[`ReadableStream`](readablestream)`<``R``>``, `[`ReadableStream`](readablestream)`<``R``>``]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStream](https://doc.deno.land/deno/stable/~/ReadableStream)"
- name: ReadableStreamBYOBReadDoneResult
  id: ~/readablestreambyobreaddoneresult
  summary: null
  description: "# ReadableStreamBYOBReadDoneResult\n\n``` typescript\ninterface ReadableStreamBYOBReadDoneResult <V extends ArrayBufferView> {\n```\n\ndone: true;\n\nvalue?: V;\n\n}\n\n## Type Parameters\n\n`V`` extends ``ArrayBufferView`\n\n## Properties\n\n`done``: ``true`\n\n`value?``: ``V`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadDoneResult](https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadDoneResult)"
- name: ReadableStreamBYOBReader
  id: ~/readablestreambyobreader
  summary: null
  description: "# ReadableStreamBYOBReader\n\n``` typescript\ninterface ReadableStreamBYOBReader {\n```\n\nreadonly closed: Promise\\<void\\>;\n\ncancel(reason?: any): Promise\\<void\\>;\n\nread\\<V extends ArrayBufferView\\>(view: V): Promise\\<[ReadableStreamBYOBReadResult](readablestreambyobreadresult)\\<V\\>\\>;\n\nreleaseLock(): void;\n\n}\n\n## Properties\n\n`readonly ``closed``: ``Promise``<``void``>`\n\n## Methods\n\n`cancel(``reason?``: ``any``)``: ``Promise``<``void``>`\n\n`read``<``V`` extends ``ArrayBufferView``>``(``view``: ``V``)``: ``Promise``<`[`ReadableStreamBYOBReadResult`](readablestreambyobreadresult)`<``V``>``>`\n\n`releaseLock()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReader](https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReader)"
- name: ReadableStreamBYOBReadResult
  id: ~/readablestreambyobreadresult
  summary: null
  description: "# ReadableStreamBYOBReadResult\n\n``` typescript\ntype ReadableStreamBYOBReadResult<V extends ArrayBufferView> = ReadableStreamBYOBReadDoneResult<V> | ReadableStreamBYOBReadValueResult<V>;\n```\n\n## Type Parameters\n\n`V`` extends ``ArrayBufferView`\n\n## Type\n\n[`ReadableStreamBYOBReadDoneResult`](readablestreambyobreaddoneresult)`<``V``>`` | `[`ReadableStreamBYOBReadValueResult`](readablestreambyobreadvalueresult)`<``V``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadResult](https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadResult)"
- name: ReadableStreamBYOBReadValueResult
  id: ~/readablestreambyobreadvalueresult
  summary: null
  description: "# ReadableStreamBYOBReadValueResult\n\n``` typescript\ninterface ReadableStreamBYOBReadValueResult <V extends ArrayBufferView> {\n```\n\ndone: false;\n\nvalue: V;\n\n}\n\n## Type Parameters\n\n`V`` extends ``ArrayBufferView`\n\n## Properties\n\n`done``: ``false`\n\n`value``: ``V`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadValueResult](https://doc.deno.land/deno/stable/~/ReadableStreamBYOBReadValueResult)"
- name: ReadableStreamBYOBRequest
  id: ~/readablestreambyobrequest
  summary: null
  description: "# ReadableStreamBYOBRequest\n\n``` typescript\ninterface ReadableStreamBYOBRequest {\n```\n\nreadonly view: ArrayBufferView \\| null;\n\nrespond(bytesWritten: number): void;\n\nrespondWithNewView(view: ArrayBufferView): void;\n\n}\n\n## Properties\n\n`readonly ``view``: ``ArrayBufferView`` | ``null`\n\n## Methods\n\n`respond(``bytesWritten``: ``number``)``: ``void`\n\n`respondWithNewView(``view``: ``ArrayBufferView``)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamBYOBRequest](https://doc.deno.land/deno/stable/~/ReadableStreamBYOBRequest)"
- name: ReadableStreamDefaultController
  id: ~/readablestreamdefaultcontroller
  summary: null
  description: "# ReadableStreamDefaultController\n\n``` typescript\ninterface ReadableStreamDefaultController <R = any> {\n```\n\nreadonly desiredSize: number \\| null;\n\nclose(): void;\n\nenqueue(chunk: R): void;\n\nerror(error?: any): void;\n\n}\n\n``` typescript\nvar ReadableStreamDefaultController: {\n```\n\nprototype: [ReadableStreamDefaultController](readablestreamdefaultcontroller);\n\nnew (): [ReadableStreamDefaultController](readablestreamdefaultcontroller);\n\n};\n\n## Type Parameters\n\n`R`` = ``any`\n\n## Properties\n\n`readonly ``desiredSize``: ``number`` | ``null`\n\n## Methods\n\n`close()``: ``void`\n\n`enqueue(``chunk``: ``R``)``: ``void`\n\n`error(``error?``: ``any``)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamDefaultController](https://doc.deno.land/deno/stable/~/ReadableStreamDefaultController)"
- name: ReadableStreamDefaultControllerCallback
  id: ~/readablestreamdefaultcontrollercallback
  summary: null
  description: "# ReadableStreamDefaultControllerCallback\n\n``` typescript\ninterface ReadableStreamDefaultControllerCallback <R> {\n```\n\n(controller: [ReadableStreamDefaultController](readablestreamdefaultcontroller)\\<R\\>): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Type Parameters\n\n`R`\n\n## Call Signatures\n\n`(``controller``: `[`ReadableStreamDefaultController`](readablestreamdefaultcontroller)`<``R``>``)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamDefaultControllerCallback](https://doc.deno.land/deno/stable/~/ReadableStreamDefaultControllerCallback)"
- name: ReadableStreamDefaultReader
  id: ~/readablestreamdefaultreader
  summary: null
  description: "# ReadableStreamDefaultReader\n\n``` typescript\ninterface ReadableStreamDefaultReader <R = any> {\n```\n\nreadonly closed: Promise\\<void\\>;\n\ncancel(reason?: any): Promise\\<void\\>;\n\nread(): Promise\\<[ReadableStreamReadResult](readablestreamreadresult)\\<R\\>\\>;\n\nreleaseLock(): void;\n\n}\n\n``` typescript\nvar ReadableStreamDefaultReader: {\n```\n\nprototype: [ReadableStreamDefaultReader](readablestreamdefaultreader);\n\nnew \\<R\\>(stream: [ReadableStream](readablestream)\\<R\\>): [ReadableStreamDefaultReader](readablestreamdefaultreader)\\<R\\>;\n\n};\n\n## Type Parameters\n\n`R`` = ``any`\n\n## Properties\n\n`readonly ``closed``: ``Promise``<``void``>`\n\n## Methods\n\n`cancel(``reason?``: ``any``)``: ``Promise``<``void``>`\n\n`read()``: ``Promise``<`[`ReadableStreamReadResult`](readablestreamreadresult)`<``R``>``>`\n\n`releaseLock()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamDefaultReader](https://doc.deno.land/deno/stable/~/ReadableStreamDefaultReader)"
- name: ReadableStreamErrorCallback
  id: ~/readablestreamerrorcallback
  summary: null
  description: "# ReadableStreamErrorCallback\n\n``` typescript\ninterface ReadableStreamErrorCallback {\n```\n\n(reason: any): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Call Signatures\n\n`(``reason``: ``any``)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamErrorCallback](https://doc.deno.land/deno/stable/~/ReadableStreamErrorCallback)"
- name: ReadableStreamReadDoneResult
  id: ~/readablestreamreaddoneresult
  summary: null
  description: "# ReadableStreamReadDoneResult\n\n``` typescript\ninterface ReadableStreamReadDoneResult <T> {\n```\n\ndone: true;\n\nvalue?: T;\n\n}\n\n## Type Parameters\n\n`T`\n\n## Properties\n\n`done``: ``true`\n\n`value?``: ``T`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamReadDoneResult](https://doc.deno.land/deno/stable/~/ReadableStreamReadDoneResult)"
- name: ReadableStreamReader
  id: ~/readablestreamreader
  summary: null
  description: "# ReadableStreamReader\n\n``` typescript\ninterface ReadableStreamReader <R = any> {\n```\n\ncancel(): Promise\\<void\\>;\n\nread(): Promise\\<[ReadableStreamReadResult](readablestreamreadresult)\\<R\\>\\>;\n\nreleaseLock(): void;\n\n}\n\n``` typescript\nvar ReadableStreamReader: {\n```\n\nprototype: [ReadableStreamReader](readablestreamreader);\n\nnew (): [ReadableStreamReader](readablestreamreader);\n\n};\n\n## Type Parameters\n\n`R`` = ``any`\n\n## Methods\n\n`cancel()``: ``Promise``<``void``>`\n\n`read()``: ``Promise``<`[`ReadableStreamReadResult`](readablestreamreadresult)`<``R``>``>`\n\n`releaseLock()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamReader](https://doc.deno.land/deno/stable/~/ReadableStreamReader)"
- name: ReadableStreamReadResult
  id: ~/readablestreamreadresult
  summary: null
  description: "# ReadableStreamReadResult\n\n``` typescript\ntype ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>;\n```\n\n## Type Parameters\n\n`T`\n\n## Type\n\n[`ReadableStreamReadValueResult`](readablestreamreadvalueresult)`<``T``>`` | `[`ReadableStreamReadDoneResult`](readablestreamreaddoneresult)`<``T``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamReadResult](https://doc.deno.land/deno/stable/~/ReadableStreamReadResult)"
- name: ReadableStreamReadValueResult
  id: ~/readablestreamreadvalueresult
  summary: null
  description: "# ReadableStreamReadValueResult\n\n``` typescript\ninterface ReadableStreamReadValueResult <T> {\n```\n\ndone: false;\n\nvalue: T;\n\n}\n\n## Type Parameters\n\n`T`\n\n## Properties\n\n`done``: ``false`\n\n`value``: ``T`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReadableStreamReadValueResult](https://doc.deno.land/deno/stable/~/ReadableStreamReadValueResult)"
- name: ReferrerPolicy
  id: ~/referrerpolicy
  summary: null
  description: "# ReferrerPolicy\n\n``` typescript\ntype ReferrerPolicy = \n```\n\n\\| \"\"\n\n\\| \"no-referrer\"\n\n\\| \"no-referrer-when-downgrade\"\n\n\\| \"origin\"\n\n\\| \"origin-when-cross-origin\"\n\n\\| \"same-origin\"\n\n\\| \"strict-origin\"\n\n\\| \"strict-origin-when-cross-origin\"\n\n\\| \"unsafe-url\";\n\n## Type\n\n`\"\"`` | ``\"no-referrer\"`` | ``\"no-referrer-when-downgrade\"`` | ``\"origin\"`` | ``\"origin-when-cross-origin\"`` | ``\"same-origin\"`` | ``\"strict-origin\"`` | ``\"strict-origin-when-cross-origin\"`` | ``\"unsafe-url\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ReferrerPolicy](https://doc.deno.land/deno/stable/~/ReferrerPolicy)"
- name: removeEventListener
  id: ~/removeeventlistener
  summary: null
  description: "# removeEventListener\n\nRemove a previously registered event listener from the global scope\n\n``` typescript\nconst listener = () => { console.log('hello'); };\naddEventListener('load', listener);\nremoveEventListener('load', listener);\n```\n\n``` typescript\n```\n\nfunction removeEventListener\\<K extends keyof [WindowEventMap](windoweventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Window](window), ev: [WindowEventMap](windoweventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nfunction removeEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\n`removeEventListener``<``K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\nRemove a previously registered event listener from the global scope\n\n``` typescript\nconst listener = () => { console.log('hello'); };\naddEventListener('load', listener);\nremoveEventListener('load', listener);\n```\n\n### Type Parameters\n\n`K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)\n\n### Parameters\n\n`type``: ``K`\n\n`listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any`\n\n`options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)` ``optional`\n\n### Return Type\n\n`void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n### Parameters\n\n`type``: ``string`\n\n`listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)\n\n`options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)` ``optional`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/removeEventListener](https://doc.deno.land/deno/stable/~/removeEventListener)"
- name: reportError
  id: ~/reporterror
  summary: Dispatch an uncaught exception
  description: "# reportError\n\nDispatch an uncaught exception. Similar to a synchronous version of:\n\n``` typescript\nsetTimeout(() => { throw error; }, 0);\n```\n\nThe error can not be caught with a `try/catch` block. An error event will be dispatched to the global scope. You can prevent the error from being reported to the console with `Event.prototype.preventDefault()`:\n\n``` typescript\naddEventListener(\"error\", (event) => {\n  event.preventDefault();\n});\nreportError(new Error(\"foo\")); // Will not be reported.\n```\n\nIn Deno, this error will terminate the process if not intercepted like above.\n\n``` typescript\n```\n\nfunction reportError(error: any): void;\n\n`reportError(``error``: ``any``)``: ``void`\n\n### Parameters\n\n`error``: ``any`\n\n### Return Type\n\n`void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/reportError](https://doc.deno.land/deno/stable/~/reportError)"
- name: Request
  id: ~/request
  summary: This Fetch API interface represents a resource request
  description: "# Request\n\nThis Fetch API interface represents a resource request.\n\n``` typescript\nclass Request implements Body {\n```\n\nconstructor(input: [RequestInfo](requestinfo) \\| [URL](url), init?: [RequestInit](requestinit));\n\nreadonly body: [ReadableStream](readablestream)\\<Uint8Array\\> \\| null;\n\nreadonly bodyUsed: boolean;\n\nreadonly cache: [RequestCache](requestcache);\n\nreadonly credentials: [RequestCredentials](requestcredentials);\n\nreadonly destination: [RequestDestination](requestdestination);\n\nreadonly headers: [Headers](headers);\n\nreadonly integrity: string;\n\nreadonly isHistoryNavigation: boolean;\n\nreadonly isReloadNavigation: boolean;\n\nreadonly keepalive: boolean;\n\nreadonly method: string;\n\nreadonly mode: [RequestMode](requestmode);\n\nreadonly redirect: [RequestRedirect](requestredirect);\n\nreadonly referrer: string;\n\nreadonly referrerPolicy: [ReferrerPolicy](referrerpolicy);\n\nreadonly signal: [AbortSignal](abortsignal);\n\nreadonly url: string;\n\narrayBuffer(): Promise\\<ArrayBuffer\\>;\n\nblob(): Promise\\<[Blob](blob)\\>;\n\nclone(): [Request](request);\n\nformData(): Promise\\<[FormData](formdata)\\>;\n\njson(): Promise\\<any\\>;\n\ntext(): Promise\\<string\\>;\n\n}\n\n## Implements\n\n[`Body`](body)\n\n## Constructors\n\n`new ``Request(``input``: `[`RequestInfo`](requestinfo)` | `[`URL`](url)`, ``init?``: `[`RequestInit`](requestinit)`)`\n\n## Properties\n\n`body``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`` | ``null`\n\nA simple getter used to expose a `ReadableStream` of the body contents.\n\n`bodyUsed``: ``boolean`\n\nStores a `Boolean` that declares whether the body has been used in a request yet.\n\n`cache``: `[`RequestCache`](requestcache)\n\nReturns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n`credentials``: `[`RequestCredentials`](requestcredentials)\n\nReturns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n`destination``: `[`RequestDestination`](requestdestination)\n\nReturns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n`headers``: `[`Headers`](headers)\n\nReturns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n`integrity``: ``string`\n\nReturns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. \\[SRI\\]\n\n`isHistoryNavigation``: ``boolean`\n\nReturns a boolean indicating whether or not request is for a history navigation (a.k.a. back-forward navigation).\n\n`isReloadNavigation``: ``boolean`\n\nReturns a boolean indicating whether or not request is for a reload navigation.\n\n`keepalive``: ``boolean`\n\nReturns a boolean indicating whether or not request can outlive the global in which it was created.\n\n`method``: ``string`\n\nReturns request's HTTP method, which is \"GET\" by default.\n\n`mode``: `[`RequestMode`](requestmode)\n\nReturns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n`redirect``: `[`RequestRedirect`](requestredirect)\n\nReturns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n`referrer``: ``string`\n\nReturns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n`referrerPolicy``: `[`ReferrerPolicy`](referrerpolicy)\n\nReturns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n`signal``: `[`AbortSignal`](abortsignal)\n\nReturns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n`url``: ``string`\n\nReturns the URL of request as a string.\n\n## Methods\n\n`arrayBuffer()``: ``Promise``<``ArrayBuffer``>`\n\nTakes a `Request` stream and reads it to completion. It returns a promise that resolves with an `ArrayBuffer`.\n\n`blob()``: ``Promise``<`[`Blob`](blob)`>`\n\nTakes a `Request` stream and reads it to completion. It returns a promise that resolves with a `Blob`.\n\n`clone()``: `[`Request`](request)\n\n`formData()``: ``Promise``<`[`FormData`](formdata)`>`\n\nTakes a `Request` stream and reads it to completion. It returns a promise that resolves with a `FormData` object.\n\n`json()``: ``Promise``<``any``>`\n\nTakes a `Request` stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.\n\n`text()``: ``Promise``<``string``>`\n\nTakes a `Request` stream and reads it to completion. It returns a promise that resolves with a `USVString` (text).\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Request](https://doc.deno.land/deno/stable/~/Request)"
- name: RequestCache
  id: ~/requestcache
  summary: null
  description: "# RequestCache\n\n``` typescript\ntype RequestCache = \n```\n\n\\| \"default\"\n\n\\| \"force-cache\"\n\n\\| \"no-cache\"\n\n\\| \"no-store\"\n\n\\| \"only-if-cached\"\n\n\\| \"reload\";\n\n## Type\n\n`\"default\"`` | ``\"force-cache\"`` | ``\"no-cache\"`` | ``\"no-store\"`` | ``\"only-if-cached\"`` | ``\"reload\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestCache](https://doc.deno.land/deno/stable/~/RequestCache)"
- name: RequestCredentials
  id: ~/requestcredentials
  summary: null
  description: "# RequestCredentials\n\n``` typescript\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\";\n```\n\n## Type\n\n`\"include\"`` | ``\"omit\"`` | ``\"same-origin\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestCredentials](https://doc.deno.land/deno/stable/~/RequestCredentials)"
- name: RequestDestination
  id: ~/requestdestination
  summary: null
  description: "# RequestDestination\n\n``` typescript\ntype RequestDestination = \n```\n\n\\| \"\"\n\n\\| \"audio\"\n\n\\| \"audioworklet\"\n\n\\| \"document\"\n\n\\| \"embed\"\n\n\\| \"font\"\n\n\\| \"image\"\n\n\\| \"manifest\"\n\n\\| \"object\"\n\n\\| \"paintworklet\"\n\n\\| \"report\"\n\n\\| \"script\"\n\n\\| \"sharedworker\"\n\n\\| \"style\"\n\n\\| \"track\"\n\n\\| \"video\"\n\n\\| \"worker\"\n\n\\| \"xslt\";\n\n## Type\n\n`\"\"`` | ``\"audio\"`` | ``\"audioworklet\"`` | ``\"document\"`` | ``\"embed\"`` | ``\"font\"`` | ``\"image\"`` | ``\"manifest\"`` | ``\"object\"`` | ``\"paintworklet\"`` | ``\"report\"`` | ``\"script\"`` | ``\"sharedworker\"`` | ``\"style\"`` | ``\"track\"`` | ``\"video\"`` | ``\"worker\"`` | ``\"xslt\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestDestination](https://doc.deno.land/deno/stable/~/RequestDestination)"
- name: RequestInfo
  id: ~/requestinfo
  summary: null
  description: "# RequestInfo\n\n``` typescript\ntype RequestInfo = Request | string;\n```\n\n## Type\n\n[`Request`](request)` | ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestInfo](https://doc.deno.land/deno/stable/~/RequestInfo)"
- name: RequestInit
  id: ~/requestinit
  summary: A BodyInit object or null to set request's body
  description: "# RequestInit\n\n``` typescript\ninterface RequestInit {\n```\n\nbody?: [BodyInit](bodyinit) \\| null;\n\ncache?: [RequestCache](requestcache);\n\ncredentials?: [RequestCredentials](requestcredentials);\n\nheaders?: [HeadersInit](headersinit);\n\nintegrity?: string;\n\nkeepalive?: boolean;\n\nmethod?: string;\n\nmode?: [RequestMode](requestmode);\n\nredirect?: [RequestRedirect](requestredirect);\n\nreferrer?: string;\n\nreferrerPolicy?: [ReferrerPolicy](referrerpolicy);\n\nsignal?: [AbortSignal](abortsignal) \\| null;\n\nwindow?: any;\n\n}\n\n## Properties\n\n`body?``: `[`BodyInit`](bodyinit)` | ``null`\n\nA BodyInit object or null to set request's body.\n\n`cache?``: `[`RequestCache`](requestcache)\n\nA string indicating how the request will interact with the browser's cache to set request's cache.\n\n`credentials?``: `[`RequestCredentials`](requestcredentials)\n\nA string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\n\n`headers?``: `[`HeadersInit`](headersinit)\n\nA Headers object, an object literal, or an array of two-item arrays to set request's headers.\n\n`integrity?``: ``string`\n\nA cryptographic hash of the resource to be fetched by request. Sets request's integrity.\n\n`keepalive?``: ``boolean`\n\nA boolean to set request's keepalive.\n\n`method?``: ``string`\n\nA string to set request's method.\n\n`mode?``: `[`RequestMode`](requestmode)\n\nA string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n\n`redirect?``: `[`RequestRedirect`](requestredirect)\n\nA string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n\n`referrer?``: ``string`\n\nA string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.\n\n`referrerPolicy?``: `[`ReferrerPolicy`](referrerpolicy)\n\nA referrer policy to set request's referrerPolicy.\n\n`signal?``: `[`AbortSignal`](abortsignal)` | ``null`\n\nAn AbortSignal to set request's signal.\n\n`window?``: ``any`\n\nCan only be null. Used to disassociate request from any Window.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestInit](https://doc.deno.land/deno/stable/~/RequestInit)"
- name: RequestMode
  id: ~/requestmode
  summary: null
  description: "# RequestMode\n\n``` typescript\ntype RequestMode = \n```\n\n\\| \"cors\"\n\n\\| \"navigate\"\n\n\\| \"no-cors\"\n\n\\| \"same-origin\";\n\n## Type\n\n`\"cors\"`` | ``\"navigate\"`` | ``\"no-cors\"`` | ``\"same-origin\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestMode](https://doc.deno.land/deno/stable/~/RequestMode)"
- name: RequestRedirect
  id: ~/requestredirect
  summary: null
  description: "# RequestRedirect\n\n``` typescript\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\";\n```\n\n## Type\n\n`\"error\"`` | ``\"follow\"`` | ``\"manual\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RequestRedirect](https://doc.deno.land/deno/stable/~/RequestRedirect)"
- name: Response
  id: ~/response
  summary: This Fetch API interface represents the response to a request
  description: "# Response\n\nThis Fetch API interface represents the response to a request.\n\n``` typescript\nclass Response implements Body {\n```\n\nconstructor(body?: [BodyInit](bodyinit) \\| null, init?: [ResponseInit](responseinit));\n\nreadonly body: [ReadableStream](readablestream)\\<Uint8Array\\> \\| null;\n\nreadonly bodyUsed: boolean;\n\nreadonly headers: [Headers](headers);\n\nreadonly ok: boolean;\n\nreadonly redirected: boolean;\n\nreadonly status: number;\n\nreadonly statusText: string;\n\nreadonly trailer: Promise\\<[Headers](headers)\\>;\n\nreadonly type: [ResponseType](responsetype);\n\nreadonly url: string;\n\narrayBuffer(): Promise\\<ArrayBuffer\\>;\n\nblob(): Promise\\<[Blob](blob)\\>;\n\nclone(): [Response](response);\n\nformData(): Promise\\<[FormData](formdata)\\>;\n\njson(): Promise\\<any\\>;\n\ntext(): Promise\\<string\\>;\n\nstatic error(): [Response](response);\n\nstatic json(data: unknown, init?: [ResponseInit](responseinit)): [Response](response);\n\nstatic redirect(url: string \\| [URL](url), status?: number): [Response](response);\n\n}\n\n## Implements\n\n[`Body`](body)\n\n## Constructors\n\n`new ``Response(``body?``: `[`BodyInit`](bodyinit)` | ``null``, ``init?``: `[`ResponseInit`](responseinit)`)`\n\n## Properties\n\n`body``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`` | ``null`\n\nA simple getter used to expose a `ReadableStream` of the body contents.\n\n`bodyUsed``: ``boolean`\n\nStores a `Boolean` that declares whether the body has been used in a response yet.\n\n`headers``: `[`Headers`](headers)\n\n`ok``: ``boolean`\n\n`redirected``: ``boolean`\n\n`status``: ``number`\n\n`statusText``: ``string`\n\n`trailer``: ``Promise``<`[`Headers`](headers)`>`\n\n`type``: `[`ResponseType`](responsetype)\n\n`url``: ``string`\n\n## Methods\n\n`arrayBuffer()``: ``Promise``<``ArrayBuffer``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with an `ArrayBuffer`.\n\n`blob()``: ``Promise``<`[`Blob`](blob)`>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `Blob`.\n\n`clone()``: `[`Response`](response)\n\n`formData()``: ``Promise``<`[`FormData`](formdata)`>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `FormData` object.\n\n`json()``: ``Promise``<``any``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.\n\n`text()``: ``Promise``<``string``>`\n\nTakes a `Response` stream and reads it to completion. It returns a promise that resolves with a `USVString` (text).\n\n## Static Methods\n\n`error()``: `[`Response`](response)\n\n`json(``data``: ``unknown``, ``init?``: `[`ResponseInit`](responseinit)`)``: `[`Response`](response)\n\n`redirect(``url``: ``string`` | `[`URL`](url)`, ``status?``: ``number``)``: `[`Response`](response)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Response](https://doc.deno.land/deno/stable/~/Response)"
- name: ResponseInit
  id: ~/responseinit
  summary: null
  description: "# ResponseInit\n\n``` typescript\ninterface ResponseInit {\n```\n\nheaders?: [HeadersInit](headersinit);\n\nstatus?: number;\n\nstatusText?: string;\n\n}\n\n## Properties\n\n`headers?``: `[`HeadersInit`](headersinit)\n\n`status?``: ``number`\n\n`statusText?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ResponseInit](https://doc.deno.land/deno/stable/~/ResponseInit)"
- name: ResponseType
  id: ~/responsetype
  summary: null
  description: "# ResponseType\n\n``` typescript\ntype ResponseType = \n```\n\n\\| \"basic\"\n\n\\| \"cors\"\n\n\\| \"default\"\n\n\\| \"error\"\n\n\\| \"opaque\"\n\n\\| \"opaqueredirect\";\n\n## Type\n\n`\"basic\"`` | ``\"cors\"`` | ``\"default\"`` | ``\"error\"`` | ``\"opaque\"`` | ``\"opaqueredirect\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/ResponseType](https://doc.deno.land/deno/stable/~/ResponseType)"
- name: RsaHashedImportParams
  id: ~/rsahashedimportparams
  summary: null
  description: "# RsaHashedImportParams\n\n``` typescript\ninterface RsaHashedImportParams  extends Algorithm {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaHashedImportParams](https://doc.deno.land/deno/stable/~/RsaHashedImportParams)"
- name: RsaHashedKeyAlgorithm
  id: ~/rsahashedkeyalgorithm
  summary: null
  description: "# RsaHashedKeyAlgorithm\n\n``` typescript\ninterface RsaHashedKeyAlgorithm  extends RsaKeyAlgorithm {\n```\n\nhash: [KeyAlgorithm](keyalgorithm);\n\n}\n\n## Extends\n\n[`RsaKeyAlgorithm`](rsakeyalgorithm)\n\n## Properties\n\n`hash``: `[`KeyAlgorithm`](keyalgorithm)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaHashedKeyAlgorithm](https://doc.deno.land/deno/stable/~/RsaHashedKeyAlgorithm)"
- name: RsaHashedKeyGenParams
  id: ~/rsahashedkeygenparams
  summary: null
  description: "# RsaHashedKeyGenParams\n\n``` typescript\ninterface RsaHashedKeyGenParams  extends RsaKeyGenParams {\n```\n\nhash: [HashAlgorithmIdentifier](hashalgorithmidentifier);\n\n}\n\n## Extends\n\n[`RsaKeyGenParams`](rsakeygenparams)\n\n## Properties\n\n`hash``: `[`HashAlgorithmIdentifier`](hashalgorithmidentifier)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaHashedKeyGenParams](https://doc.deno.land/deno/stable/~/RsaHashedKeyGenParams)"
- name: RsaKeyAlgorithm
  id: ~/rsakeyalgorithm
  summary: null
  description: "# RsaKeyAlgorithm\n\n``` typescript\ninterface RsaKeyAlgorithm  extends KeyAlgorithm {\n```\n\nmodulusLength: number;\n\npublicExponent: Uint8Array;\n\n}\n\n## Extends\n\n[`KeyAlgorithm`](keyalgorithm)\n\n## Properties\n\n`modulusLength``: ``number`\n\n`publicExponent``: ``Uint8Array`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaKeyAlgorithm](https://doc.deno.land/deno/stable/~/RsaKeyAlgorithm)"
- name: RsaKeyGenParams
  id: ~/rsakeygenparams
  summary: null
  description: "# RsaKeyGenParams\n\n``` typescript\ninterface RsaKeyGenParams  extends Algorithm {\n```\n\nmodulusLength: number;\n\npublicExponent: Uint8Array;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`modulusLength``: ``number`\n\n`publicExponent``: ``Uint8Array`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaKeyGenParams](https://doc.deno.land/deno/stable/~/RsaKeyGenParams)"
- name: RsaOaepParams
  id: ~/rsaoaepparams
  summary: null
  description: "# RsaOaepParams\n\n``` typescript\ninterface RsaOaepParams  extends Algorithm {\n```\n\nlabel?: Uint8Array;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`label?``: ``Uint8Array`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaOaepParams](https://doc.deno.land/deno/stable/~/RsaOaepParams)"
- name: RsaOtherPrimesInfo
  id: ~/rsaotherprimesinfo
  summary: null
  description: "# RsaOtherPrimesInfo\n\n``` typescript\ninterface RsaOtherPrimesInfo {\n```\n\nd?: string;\n\nr?: string;\n\nt?: string;\n\n}\n\n## Properties\n\n`d?``: ``string`\n\n`r?``: ``string`\n\n`t?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaOtherPrimesInfo](https://doc.deno.land/deno/stable/~/RsaOtherPrimesInfo)"
- name: RsaPssParams
  id: ~/rsapssparams
  summary: null
  description: "# RsaPssParams\n\n``` typescript\ninterface RsaPssParams  extends Algorithm {\n```\n\nsaltLength: number;\n\n}\n\n## Extends\n\n[`Algorithm`](algorithm)\n\n## Properties\n\n`saltLength``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/RsaPssParams](https://doc.deno.land/deno/stable/~/RsaPssParams)"
- name: self
  id: ~/self
  summary: null
  description: "# self\n\n``` typescript\nvar self: Window & globalThis;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/self](https://doc.deno.land/deno/stable/~/self)"
- name: sessionStorage
  id: ~/sessionstorage
  summary: null
  description: "# sessionStorage\n\n``` typescript\nvar sessionStorage: Storage;\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/sessionStorage](https://doc.deno.land/deno/stable/~/sessionStorage)"
- name: setInterval
  id: ~/setinterval
  summary: Repeatedly calls a function , with a fixed time delay between each call
  description: "# setInterval\n\nRepeatedly calls a function , with a fixed time delay between each call.\n\n``` typescript\n// Outputs 'hello' to the console every 500ms\nsetInterval(() => { console.log('hello'); }, 500);\n```\n\n``` typescript\n```\n\nfunction setInterval(\n\ncb: (...args: any\\[\\]) =\\> void,\n\ndelay?: number,\n\n...args: any\\[\\],\n\n): number;\n\n`setInterval(``cb``: ``(``...``args``: ``any``[]``) => ``void``, ``delay?``: ``number``, ``...``args``: ``any``[]``)``: ``number`\n\n### Parameters\n\n`cb``: ``(``...``args``: ``any``[]``) => ``void`\n\n`delay?``: ``number`` ``optional`\n\n`...``args``: ``any``[]`` ``optional`\n\n### Return Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/setInterval](https://doc.deno.land/deno/stable/~/setInterval)"
- name: setTimeout
  id: ~/settimeout
  summary: Sets a timer which executes a function once after the timer expires
  description: "# setTimeout\n\nSets a timer which executes a function once after the timer expires. Returns an id which may be used to cancel the timeout.\n\n``` typescript\nsetTimeout(() => { console.log('hello'); }, 500);\n```\n\n``` typescript\n```\n\nfunction setTimeout(\n\ncb: (...args: any\\[\\]) =\\> void,\n\ndelay?: number,\n\n...args: any\\[\\],\n\n): number;\n\n`setTimeout(``cb``: ``(``...``args``: ``any``[]``) => ``void``, ``delay?``: ``number``, ``...``args``: ``any``[]``)``: ``number`\n\n### Parameters\n\n`cb``: ``(``...``args``: ``any``[]``) => ``void`\n\n`delay?``: ``number`` ``optional`\n\n`...``args``: ``any``[]`` ``optional`\n\n### Return Type\n\n`number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/setTimeout](https://doc.deno.land/deno/stable/~/setTimeout)"
- name: Storage
  id: ~/storage
  summary: This Web Storage API interface provides access to a particular domain's session or local storage
  description: "# Storage\n\nThis Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.\n\n``` typescript\ninterface Storage {\n```\n\n\\[name: string\\]: any;\n\nreadonly length: number;\n\nclear(): void;\n\ngetItem(key: string): string \\| null;\n\nkey(index: number): string \\| null;\n\nremoveItem(key: string): void;\n\nsetItem(key: string, value: string): void;\n\n}\n\n``` typescript\nvar Storage: {\n```\n\nprototype: [Storage](storage);\n\nnew (): [Storage](storage);\n\n};\n\n## Index Signatures\n\n\\[name: string\\]: any\n\n## Properties\n\n`readonly ``length``: ``number`\n\nReturns the number of key/value pairs currently present in the list associated with the object.\n\n## Methods\n\n`clear()``: ``void`\n\nEmpties the list associated with the object of all key/value pairs, if there are any.\n\n`getItem(``key``: ``string``)``: ``string`` | ``null`\n\nReturns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n\n`key(``index``: ``number``)``: ``string`` | ``null`\n\nReturns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.\n\n`removeItem(``key``: ``string``)``: ``void`\n\nRemoves the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n\n`setItem(``key``: ``string``, ``value``: ``string``)``: ``void`\n\nSets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n\nThrows a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Storage](https://doc.deno.land/deno/stable/~/Storage)"
- name: structuredClone
  id: ~/structuredclone
  summary: Creates a deep copy of a given value using the structured clone algorithm
  description: "# structuredClone\n\nCreates a deep copy of a given value using the structured clone algorithm.\n\nUnlike a shallow copy, a deep copy does not hold the same references as the source object, meaning its properties can be changed without affecting the source. For more details, see [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy).\n\nThrows a `DataCloneError` if any part of the input value is not serializable.\n\n@example\n\n``` typescript\nconst object = { x: 0, y: 1 };\n\nconst deepCopy = structuredClone(object);\ndeepCopy.x = 1;\nconsole.log(deepCopy.x, object.x); // 1 0\n\nconst shallowCopy = object;\nshallowCopy.x = 1;\n// shallowCopy.x is pointing to the same location in memory as object.x\nconsole.log(shallowCopy.x, object.x); // 1 1\n```\n\n``` typescript\n```\n\nfunction structuredClone(value: any, options?: [StructuredSerializeOptions](structuredserializeoptions)): any;\n\n`structuredClone(``value``: ``any``, ``options?``: `[`StructuredSerializeOptions`](structuredserializeoptions)`)``: ``any`\n\n### Parameters\n\n`value``: ``any`\n\n`options?``: `[`StructuredSerializeOptions`](structuredserializeoptions)` ``optional`\n\n### Return Type\n\n`any`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/structuredClone](https://doc.deno.land/deno/stable/~/structuredClone)"
- name: StructuredSerializeOptions
  id: ~/structuredserializeoptions
  summary: null
  description: "# StructuredSerializeOptions\n\n``` typescript\ninterface StructuredSerializeOptions {\n```\n\ntransfer?: [Transferable](transferable)\\[\\];\n\n}\n\n## Properties\n\n`transfer?``: `[`Transferable`](transferable)`[]`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/StructuredSerializeOptions](https://doc.deno.land/deno/stable/~/StructuredSerializeOptions)"
- name: SubtleCrypto
  id: ~/subtlecrypto
  summary: This Web Crypto API interface provides a number of low-level cryptographic functions
  description: "# SubtleCrypto\n\nThis Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).\n\n``` typescript\ninterface SubtleCrypto {\n```\n\ndecrypt(\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesGcmParams](aesgcmparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>;\n\nderiveBits(\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n\\| [EcdhKeyDeriveParams](ecdhkeyderiveparams)\n\n,\n\nbaseKey: [CryptoKey](cryptokey),\n\nlength: number,\n\n): Promise\\<ArrayBuffer\\>;\n\nderiveKey(\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n\\| [EcdhKeyDeriveParams](ecdhkeyderiveparams)\n\n,\n\nbaseKey: [CryptoKey](cryptokey),\n\nderivedKeyType:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [AesDerivedKeyParams](aesderivedkeyparams)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>;\n\ndigest(algorithm: [AlgorithmIdentifier](algorithmidentifier), data: [BufferSource](buffersource)): Promise\\<ArrayBuffer\\>;\n\nencrypt(\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesGcmParams](aesgcmparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>;\n\nexportKey(format: \"jwk\", key: [CryptoKey](cryptokey)): Promise\\<[JsonWebKey](jsonwebkey)\\>;\n\nexportKey(format: Exclude\\<[KeyFormat](keyformat), \"jwk\"\\>, key: [CryptoKey](cryptokey)): Promise\\<ArrayBuffer\\>;\n\ngenerateKey(\n\nalgorithm: [RsaHashedKeyGenParams](rsahashedkeygenparams) \\| [EcKeyGenParams](eckeygenparams),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKeyPair](cryptokeypair)\\>;\n\ngenerateKey(\n\nalgorithm: [AesKeyGenParams](aeskeygenparams) \\| [HmacKeyGenParams](hmackeygenparams),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>;\n\ngenerateKey(\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKeyPair](cryptokeypair) \\| [CryptoKey](cryptokey)\\>;\n\nimportKey(\n\nformat: \"jwk\",\n\nkeyData: [JsonWebKey](jsonwebkey),\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>;\n\nimportKey(\n\nformat: Exclude\\<[KeyFormat](keyformat), \"jwk\"\\>,\n\nkeyData: [BufferSource](buffersource),\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>;\n\nsign(\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier) \\| [RsaPssParams](rsapssparams) \\| [EcdsaParams](ecdsaparams),\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>;\n\nunwrapKey(\n\nformat: [KeyFormat](keyformat),\n\nwrappedKey: [BufferSource](buffersource),\n\nunwrappingKey: [CryptoKey](cryptokey),\n\nunwrapAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nunwrappedKeyAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>;\n\nverify(\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier) \\| [RsaPssParams](rsapssparams) \\| [EcdsaParams](ecdsaparams),\n\nkey: [CryptoKey](cryptokey),\n\nsignature: [BufferSource](buffersource),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<boolean\\>;\n\nwrapKey(\n\nformat: [KeyFormat](keyformat),\n\nkey: [CryptoKey](cryptokey),\n\nwrappingKey: [CryptoKey](cryptokey),\n\nwrapAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\n): Promise\\<ArrayBuffer\\>;\n\n}\n\n``` typescript\nvar SubtleCrypto: {\n```\n\nprototype: [SubtleCrypto](subtlecrypto);\n\nnew (): [SubtleCrypto](subtlecrypto);\n\n};\n\n## Methods\n\n`decrypt(`\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesGcmParams](aesgcmparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>\n\n`deriveBits(`\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n\\| [EcdhKeyDeriveParams](ecdhkeyderiveparams)\n\n,\n\nbaseKey: [CryptoKey](cryptokey),\n\nlength: number,\n\n): Promise\\<ArrayBuffer\\>\n\n`deriveKey(`\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n\\| [EcdhKeyDeriveParams](ecdhkeyderiveparams)\n\n,\n\nbaseKey: [CryptoKey](cryptokey),\n\nderivedKeyType:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [AesDerivedKeyParams](aesderivedkeyparams)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [HkdfParams](hkdfparams)\n\n\\| [Pbkdf2Params](pbkdf2params)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>\n\n`digest(``algorithm``: `[`AlgorithmIdentifier`](algorithmidentifier)`, ``data``: `[`BufferSource`](buffersource)`)``: ``Promise``<``ArrayBuffer``>`\n\n`encrypt(`\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesGcmParams](aesgcmparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>\n\n`exportKey(``format``: ``\"jwk\"``, ``key``: `[`CryptoKey`](cryptokey)`)``: ``Promise``<`[`JsonWebKey`](jsonwebkey)`>`\n\n`exportKey(``format``: ``Exclude``<`[`KeyFormat`](keyformat)`, ``\"jwk\"``>``, ``key``: `[`CryptoKey`](cryptokey)`)``: ``Promise``<``ArrayBuffer``>`\n\n`generateKey(`\n\nalgorithm: [RsaHashedKeyGenParams](rsahashedkeygenparams) \\| [EcKeyGenParams](eckeygenparams),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKeyPair](cryptokeypair)\\>\n\n`generateKey(`\n\nalgorithm: [AesKeyGenParams](aeskeygenparams) \\| [HmacKeyGenParams](hmackeygenparams),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>\n\n`generateKey(`\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier),\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKeyPair](cryptokeypair) \\| [CryptoKey](cryptokey)\\>\n\n`importKey(`\n\nformat: \"jwk\",\n\nkeyData: [JsonWebKey](jsonwebkey),\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>\n\n`importKey(`\n\nformat: Exclude\\<[KeyFormat](keyformat), \"jwk\"\\>,\n\nkeyData: [BufferSource](buffersource),\n\nalgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>\n\n`sign(`\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier) \\| [RsaPssParams](rsapssparams) \\| [EcdsaParams](ecdsaparams),\n\nkey: [CryptoKey](cryptokey),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<ArrayBuffer\\>\n\n`unwrapKey(`\n\nformat: [KeyFormat](keyformat),\n\nwrappedKey: [BufferSource](buffersource),\n\nunwrappingKey: [CryptoKey](cryptokey),\n\nunwrapAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\nunwrappedKeyAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [HmacImportParams](hmacimportparams)\n\n\\| [RsaHashedImportParams](rsahashedimportparams)\n\n\\| [EcKeyImportParams](eckeyimportparams)\n\n,\n\nextractable: boolean,\n\nkeyUsages: [KeyUsage](keyusage)\\[\\],\n\n): Promise\\<[CryptoKey](cryptokey)\\>\n\n`verify(`\n\nalgorithm: [AlgorithmIdentifier](algorithmidentifier) \\| [RsaPssParams](rsapssparams) \\| [EcdsaParams](ecdsaparams),\n\nkey: [CryptoKey](cryptokey),\n\nsignature: [BufferSource](buffersource),\n\ndata: [BufferSource](buffersource),\n\n): Promise\\<boolean\\>\n\n`wrapKey(`\n\nformat: [KeyFormat](keyformat),\n\nkey: [CryptoKey](cryptokey),\n\nwrappingKey: [CryptoKey](cryptokey),\n\nwrapAlgorithm:\n\n\\| [AlgorithmIdentifier](algorithmidentifier)\n\n\\| [RsaOaepParams](rsaoaepparams)\n\n\\| [AesCbcParams](aescbcparams)\n\n\\| [AesCtrParams](aesctrparams)\n\n,\n\n): Promise\\<ArrayBuffer\\>\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/SubtleCrypto](https://doc.deno.land/deno/stable/~/SubtleCrypto)"
- name: TextDecodeOptions
  id: ~/textdecodeoptions
  summary: null
  description: "# TextDecodeOptions\n\n``` typescript\ninterface TextDecodeOptions {\n```\n\nstream?: boolean;\n\n}\n\n## Properties\n\n`stream?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextDecodeOptions](https://doc.deno.land/deno/stable/~/TextDecodeOptions)"
- name: TextDecoder
  id: ~/textdecoder
  summary: Returns encoding's name, lowercased
  description: "# TextDecoder\n\n``` typescript\ninterface TextDecoder {\n```\n\nreadonly encoding: string;\n\nreadonly fatal: boolean;\n\nreadonly ignoreBOM: boolean;\n\ndecode(input?: [BufferSource](buffersource), options?: [TextDecodeOptions](textdecodeoptions)): string;\n\n}\n\n``` typescript\nvar TextDecoder: {\n```\n\nprototype: [TextDecoder](textdecoder);\n\nnew (label?: string, options?: [TextDecoderOptions](textdecoderoptions)): [TextDecoder](textdecoder);\n\n};\n\n## Properties\n\n`readonly ``encoding``: ``string`\n\nReturns encoding's name, lowercased.\n\n`readonly ``fatal``: ``boolean`\n\nReturns `true` if error mode is \"fatal\", and `false` otherwise.\n\n`readonly ``ignoreBOM``: ``boolean`\n\nReturns `true` if ignore BOM flag is set, and `false` otherwise.\n\n## Methods\n\n`decode(``input?``: `[`BufferSource`](buffersource)`, ``options?``: `[`TextDecodeOptions`](textdecodeoptions)`)``: ``string`\n\nReturns the result of running encoding's decoder.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextDecoder](https://doc.deno.land/deno/stable/~/TextDecoder)"
- name: TextDecoderOptions
  id: ~/textdecoderoptions
  summary: null
  description: "# TextDecoderOptions\n\n``` typescript\ninterface TextDecoderOptions {\n```\n\nfatal?: boolean;\n\nignoreBOM?: boolean;\n\n}\n\n## Properties\n\n`fatal?``: ``boolean`\n\n`ignoreBOM?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextDecoderOptions](https://doc.deno.land/deno/stable/~/TextDecoderOptions)"
- name: TextDecoderStream
  id: ~/textdecoderstream
  summary: Returns encoding's name, lowercased
  description: "# TextDecoderStream\n\n``` typescript\ninterface TextDecoderStream {\n```\n\nreadonly \\[\\[Symbol.toStringTag\\]\\]: string;\n\nreadonly encoding: string;\n\nreadonly fatal: boolean;\n\nreadonly ignoreBOM: boolean;\n\nreadonly readable: [ReadableStream](readablestream)\\<string\\>;\n\nreadonly writable: [WritableStream](writablestream)\\<[BufferSource](buffersource)\\>;\n\n}\n\n``` typescript\nvar TextDecoderStream: {\n```\n\nprototype: [TextDecoderStream](textdecoderstream);\n\nnew (label?: string, options?: [TextDecoderOptions](textdecoderoptions)): [TextDecoderStream](textdecoderstream);\n\n};\n\n## Properties\n\n`readonly ``[[Symbol.toStringTag]]``: ``string`\n\n`readonly ``encoding``: ``string`\n\nReturns encoding's name, lowercased.\n\n`readonly ``fatal``: ``boolean`\n\nReturns `true` if error mode is \"fatal\", and `false` otherwise.\n\n`readonly ``ignoreBOM``: ``boolean`\n\nReturns `true` if ignore BOM flag is set, and `false` otherwise.\n\n`readonly ``readable``: `[`ReadableStream`](readablestream)`<``string``>`\n\n`readonly ``writable``: `[`WritableStream`](writablestream)`<`[`BufferSource`](buffersource)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextDecoderStream](https://doc.deno.land/deno/stable/~/TextDecoderStream)"
- name: TextEncoder
  id: ~/textencoder
  summary: Returns the result of running UTF-8's encoder
  description: "# TextEncoder\n\n``` typescript\ninterface TextEncoder {\n```\n\nreadonly encoding: \"utf-8\";\n\nencode(input?: string): Uint8Array;\n\nencodeInto(input: string, dest: Uint8Array): [TextEncoderEncodeIntoResult](textencoderencodeintoresult);\n\n}\n\n``` typescript\nvar TextEncoder: {\n```\n\nprototype: [TextEncoder](textencoder);\n\nnew (): [TextEncoder](textencoder);\n\n};\n\n## Properties\n\n`readonly ``encoding``: ``\"utf-8\"`\n\nReturns \"utf-8\".\n\n## Methods\n\n`encode(``input?``: ``string``)``: ``Uint8Array`\n\nReturns the result of running UTF-8's encoder.\n\n`encodeInto(``input``: ``string``, ``dest``: ``Uint8Array``)``: `[`TextEncoderEncodeIntoResult`](textencoderencodeintoresult)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextEncoder](https://doc.deno.land/deno/stable/~/TextEncoder)"
- name: TextEncoderEncodeIntoResult
  id: ~/textencoderencodeintoresult
  summary: null
  description: "# TextEncoderEncodeIntoResult\n\n``` typescript\ninterface TextEncoderEncodeIntoResult {\n```\n\nread: number;\n\nwritten: number;\n\n}\n\n## Properties\n\n`read``: ``number`\n\n`written``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextEncoderEncodeIntoResult](https://doc.deno.land/deno/stable/~/TextEncoderEncodeIntoResult)"
- name: TextEncoderStream
  id: ~/textencoderstream
  summary: null
  description: "# TextEncoderStream\n\n``` typescript\ninterface TextEncoderStream {\n```\n\nreadonly \\[\\[Symbol.toStringTag\\]\\]: string;\n\nreadonly encoding: \"utf-8\";\n\nreadonly readable: [ReadableStream](readablestream)\\<Uint8Array\\>;\n\nreadonly writable: [WritableStream](writablestream)\\<string\\>;\n\n}\n\n``` typescript\nvar TextEncoderStream: {\n```\n\nprototype: [TextEncoderStream](textencoderstream);\n\nnew (): [TextEncoderStream](textencoderstream);\n\n};\n\n## Properties\n\n`readonly ``[[Symbol.toStringTag]]``: ``string`\n\n`readonly ``encoding``: ``\"utf-8\"`\n\nReturns \"utf-8\".\n\n`readonly ``readable``: `[`ReadableStream`](readablestream)`<``Uint8Array``>`\n\n`readonly ``writable``: `[`WritableStream`](writablestream)`<``string``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TextEncoderStream](https://doc.deno.land/deno/stable/~/TextEncoderStream)"
- name: Transferable
  id: ~/transferable
  summary: null
  description: "# Transferable\n\n``` typescript\ntype Transferable = ArrayBuffer | MessagePort;\n```\n\n## Type\n\n`ArrayBuffer`` | `[`MessagePort`](messageport)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Transferable](https://doc.deno.land/deno/stable/~/Transferable)"
- name: Transformer
  id: ~/transformer
  summary: null
  description: "# Transformer\n\n``` typescript\ninterface Transformer <I = any, O = any> {\n```\n\nflush?: [TransformStreamDefaultControllerCallback](transformstreamdefaultcontrollercallback)\\<O\\>;\n\nreadableType?: undefined;\n\nstart?: [TransformStreamDefaultControllerCallback](transformstreamdefaultcontrollercallback)\\<O\\>;\n\ntransform?: [TransformStreamDefaultControllerTransformCallback](transformstreamdefaultcontrollertransformcallback)\\<I, O\\>;\n\nwritableType?: undefined;\n\n}\n\n## Type Parameters\n\n`I`` = ``any`\n\n`O`` = ``any`\n\n## Properties\n\n`flush?``: `[`TransformStreamDefaultControllerCallback`](transformstreamdefaultcontrollercallback)`<``O``>`\n\n`readableType?``: ``undefined`\n\n`start?``: `[`TransformStreamDefaultControllerCallback`](transformstreamdefaultcontrollercallback)`<``O``>`\n\n`transform?``: `[`TransformStreamDefaultControllerTransformCallback`](transformstreamdefaultcontrollertransformcallback)`<``I``, ``O``>`\n\n`writableType?``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Transformer](https://doc.deno.land/deno/stable/~/Transformer)"
- name: TransformStream
  id: ~/transformstream
  summary: null
  description: "# TransformStream\n\n``` typescript\ninterface TransformStream <I = any, O = any> {\n```\n\nreadonly readable: [ReadableStream](readablestream)\\<O\\>;\n\nreadonly writable: [WritableStream](writablestream)\\<I\\>;\n\n}\n\n``` typescript\nvar TransformStream: {\n```\n\nprototype: [TransformStream](transformstream);\n\nnew \\<I = any, O = any\\>(\n\ntransformer?: [Transformer](transformer)\\<I, O\\>,\n\nwritableStrategy?: [QueuingStrategy](queuingstrategy)\\<I\\>,\n\nreadableStrategy?: [QueuingStrategy](queuingstrategy)\\<O\\>,\n\n): [TransformStream](transformstream)\\<I, O\\>;\n\n};\n\n## Type Parameters\n\n`I`` = ``any`\n\n`O`` = ``any`\n\n## Properties\n\n`readonly ``readable``: `[`ReadableStream`](readablestream)`<``O``>`\n\n`readonly ``writable``: `[`WritableStream`](writablestream)`<``I``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TransformStream](https://doc.deno.land/deno/stable/~/TransformStream)"
- name: TransformStreamDefaultController
  id: ~/transformstreamdefaultcontroller
  summary: null
  description: "# TransformStreamDefaultController\n\n``` typescript\ninterface TransformStreamDefaultController <O = any> {\n```\n\nreadonly desiredSize: number \\| null;\n\nenqueue(chunk: O): void;\n\nerror(reason?: any): void;\n\nterminate(): void;\n\n}\n\n``` typescript\nvar TransformStreamDefaultController: TransformStreamDefaultController;\n```\n\n## Type Parameters\n\n`O`` = ``any`\n\n## Properties\n\n`readonly ``desiredSize``: ``number`` | ``null`\n\n## Methods\n\n`enqueue(``chunk``: ``O``)``: ``void`\n\n`error(``reason?``: ``any``)``: ``void`\n\n`terminate()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TransformStreamDefaultController](https://doc.deno.land/deno/stable/~/TransformStreamDefaultController)"
- name: TransformStreamDefaultControllerCallback
  id: ~/transformstreamdefaultcontrollercallback
  summary: null
  description: "# TransformStreamDefaultControllerCallback\n\n``` typescript\ninterface TransformStreamDefaultControllerCallback <O> {\n```\n\n(controller: [TransformStreamDefaultController](transformstreamdefaultcontroller)\\<O\\>): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Type Parameters\n\n`O`\n\n## Call Signatures\n\n`(``controller``: `[`TransformStreamDefaultController`](transformstreamdefaultcontroller)`<``O``>``)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TransformStreamDefaultControllerCallback](https://doc.deno.land/deno/stable/~/TransformStreamDefaultControllerCallback)"
- name: TransformStreamDefaultControllerTransformCallback
  id: ~/transformstreamdefaultcontrollertransformcallback
  summary: null
  description: "# TransformStreamDefaultControllerTransformCallback\n\n``` typescript\ninterface TransformStreamDefaultControllerTransformCallback <I, O> {\n```\n\n(chunk: I, controller: [TransformStreamDefaultController](transformstreamdefaultcontroller)\\<O\\>): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Type Parameters\n\n`I`\n\n`O`\n\n## Call Signatures\n\n`(``chunk``: ``I``, ``controller``: `[`TransformStreamDefaultController`](transformstreamdefaultcontroller)`<``O``>``)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/TransformStreamDefaultControllerTransformCallback](https://doc.deno.land/deno/stable/~/TransformStreamDefaultControllerTransformCallback)"
- name: UnderlyingByteSource
  id: ~/underlyingbytesource
  summary: null
  description: "# UnderlyingByteSource\n\n``` typescript\ninterface UnderlyingByteSource {\n```\n\nautoAllocateChunkSize?: number;\n\ncancel?: [ReadableStreamErrorCallback](readablestreamerrorcallback);\n\npull?: [ReadableByteStreamControllerCallback](readablebytestreamcontrollercallback);\n\nstart?: [ReadableByteStreamControllerCallback](readablebytestreamcontrollercallback);\n\ntype: \"bytes\";\n\n}\n\n## Properties\n\n`autoAllocateChunkSize?``: ``number`\n\n`cancel?``: `[`ReadableStreamErrorCallback`](readablestreamerrorcallback)\n\n`pull?``: `[`ReadableByteStreamControllerCallback`](readablebytestreamcontrollercallback)\n\n`start?``: `[`ReadableByteStreamControllerCallback`](readablebytestreamcontrollercallback)\n\n`type``: ``\"bytes\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/UnderlyingByteSource](https://doc.deno.land/deno/stable/~/UnderlyingByteSource)"
- name: UnderlyingSink
  id: ~/underlyingsink
  summary: null
  description: "# UnderlyingSink\n\n``` typescript\ninterface UnderlyingSink <W = any> {\n```\n\nabort?: [WritableStreamErrorCallback](writablestreamerrorcallback);\n\nclose?: [WritableStreamDefaultControllerCloseCallback](writablestreamdefaultcontrollerclosecallback);\n\nstart?: [WritableStreamDefaultControllerStartCallback](writablestreamdefaultcontrollerstartcallback);\n\ntype?: undefined;\n\nwrite?: [WritableStreamDefaultControllerWriteCallback](writablestreamdefaultcontrollerwritecallback)\\<W\\>;\n\n}\n\n## Type Parameters\n\n`W`` = ``any`\n\n## Properties\n\n`abort?``: `[`WritableStreamErrorCallback`](writablestreamerrorcallback)\n\n`close?``: `[`WritableStreamDefaultControllerCloseCallback`](writablestreamdefaultcontrollerclosecallback)\n\n`start?``: `[`WritableStreamDefaultControllerStartCallback`](writablestreamdefaultcontrollerstartcallback)\n\n`type?``: ``undefined`\n\n`write?``: `[`WritableStreamDefaultControllerWriteCallback`](writablestreamdefaultcontrollerwritecallback)`<``W``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/UnderlyingSink](https://doc.deno.land/deno/stable/~/UnderlyingSink)"
- name: UnderlyingSource
  id: ~/underlyingsource
  summary: null
  description: "# UnderlyingSource\n\n``` typescript\ninterface UnderlyingSource <R = any> {\n```\n\ncancel?: [ReadableStreamErrorCallback](readablestreamerrorcallback);\n\npull?: [ReadableStreamDefaultControllerCallback](readablestreamdefaultcontrollercallback)\\<R\\>;\n\nstart?: [ReadableStreamDefaultControllerCallback](readablestreamdefaultcontrollercallback)\\<R\\>;\n\ntype?: undefined;\n\n}\n\n## Type Parameters\n\n`R`` = ``any`\n\n## Properties\n\n`cancel?``: `[`ReadableStreamErrorCallback`](readablestreamerrorcallback)\n\n`pull?``: `[`ReadableStreamDefaultControllerCallback`](readablestreamdefaultcontrollercallback)`<``R``>`\n\n`start?``: `[`ReadableStreamDefaultControllerCallback`](readablestreamdefaultcontrollercallback)`<``R``>`\n\n`type?``: ``undefined`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/UnderlyingSource](https://doc.deno.land/deno/stable/~/UnderlyingSource)"
- name: URL
  id: ~/url
  summary: The URL interface represents an object providing static methods used for creating object URLs
  description: "# URL\n\nThe URL interface represents an object providing static methods used for creating object URLs.\n\n``` typescript\nclass URL {\n```\n\nconstructor(url: string \\| [URL](url), base?: string \\| [URL](url));\n\nhash: string;\n\nhost: string;\n\nhostname: string;\n\nhref: string;\n\nreadonly origin: string;\n\npassword: string;\n\npathname: string;\n\nport: string;\n\nprotocol: string;\n\nsearch: string;\n\nreadonly searchParams: [URLSearchParams](urlsearchparams);\n\nusername: string;\n\ntoJSON(): string;\n\ntoString(): string;\n\nstatic createObjectURL(blob: [Blob](blob)): string;\n\nstatic revokeObjectURL(url: string): void;\n\n}\n\n## Constructors\n\n`new ``URL(``url``: ``string`` | `[`URL`](url)`, ``base?``: ``string`` | `[`URL`](url)`)`\n\n## Properties\n\n`hash``: ``string`\n\n`host``: ``string`\n\n`hostname``: ``string`\n\n`href``: ``string`\n\n`origin``: ``string`\n\n`password``: ``string`\n\n`pathname``: ``string`\n\n`port``: ``string`\n\n`protocol``: ``string`\n\n`search``: ``string`\n\n`searchParams``: `[`URLSearchParams`](urlsearchparams)\n\n`username``: ``string`\n\n## Methods\n\n`toJSON()``: ``string`\n\n`toString()``: ``string`\n\n## Static Methods\n\n`createObjectURL(``blob``: `[`Blob`](blob)`)``: ``string`\n\n`revokeObjectURL(``url``: ``string``)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URL](https://doc.deno.land/deno/stable/~/URL)"
- name: URLPattern
  id: ~/urlpattern
  summary: The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax
  description: "# URLPattern\n\nThe URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.\n\nThe syntax is based on path-to-regexp. Wildcards, named capture groups, regular groups, and group modifiers are all supported.\n\n``` typescript\n// Specify the pattern as structured data.\nconst pattern = new URLPattern({ pathname: \"/users/:user\" });\nconst match = pattern.exec(\"/users/joe\");\nconsole.log(match.pathname.groups.user); // joe\n```\n\n``` typescript\n// Specify a fully qualified string pattern.\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"https://deno.land/books/123\")); // false\n```\n\n``` typescript\n// Specify a relative string pattern with a base URL.\nconst pattern = new URLPattern(\"/:article\", \"https://blog.example.com\");\nconsole.log(pattern.test(\"https://blog.example.com/article\")); // true\nconsole.log(pattern.test(\"https://blog.example.com/article/123\")); // false\n```\n\n``` typescript\nclass URLPattern {\n```\n\nconstructor(input: [URLPatternInput](urlpatterninput), baseURL?: string);\n\nreadonly hash: string;\n\nreadonly hostname: string;\n\nreadonly password: string;\n\nreadonly pathname: string;\n\nreadonly port: string;\n\nreadonly protocol: string;\n\nreadonly search: string;\n\nreadonly username: string;\n\nexec(input: [URLPatternInput](urlpatterninput), baseURL?: string): [URLPatternResult](urlpatternresult) \\| null;\n\ntest(input: [URLPatternInput](urlpatterninput), baseURL?: string): boolean;\n\n}\n\n## Constructors\n\n`new ``URLPattern(``input``: `[`URLPatternInput`](urlpatterninput)`, ``baseURL?``: ``string``)`\n\n## Properties\n\n`hash``: ``string`\n\nThe pattern string for the `hash`.\n\n`hostname``: ``string`\n\nThe pattern string for the `hostname`.\n\n`password``: ``string`\n\nThe pattern string for the `password`.\n\n`pathname``: ``string`\n\nThe pattern string for the `pathname`.\n\n`port``: ``string`\n\nThe pattern string for the `port`.\n\n`protocol``: ``string`\n\nThe pattern string for the `protocol`.\n\n`search``: ``string`\n\nThe pattern string for the `search`.\n\n`username``: ``string`\n\nThe pattern string for the `username`.\n\n## Methods\n\n`exec(``input``: `[`URLPatternInput`](urlpatterninput)`, ``baseURL?``: ``string``)``: `[`URLPatternResult`](urlpatternresult)` | ``null`\n\nMatch the given input against the stored pattern.\n\nThe input can either be provided as a url string (with an optional base), or as individual components in the form of an object.\n\n``` typescript\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Match a url string.\nlet match = pattern.exec(\"https://example.com/books/123\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match a relative url with a base.\nmatch = pattern.exec(\"/books/123\", \"https://example.com\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match an object of url components.\nmatch = pattern.exec({ pathname: \"/books/123\" });\nconsole.log(match.pathname.groups.id); // 123\n```\n\n`test(``input``: `[`URLPatternInput`](urlpatterninput)`, ``baseURL?``: ``string``)``: ``boolean`\n\nTest if the given input matches the stored pattern.\n\nThe input can either be provided as a url string (with an optional base), or as individual components in the form of an object.\n\n``` typescript\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Test a url string.\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\n\n// Test a relative url with a base.\nconsole.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n\n// Test an object of url components.\nconsole.log(pattern.test({ pathname: \"/books/123\" })); // true\n```\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLPattern](https://doc.deno.land/deno/stable/~/URLPattern)"
- name: URLPatternComponentResult
  id: ~/urlpatterncomponentresult
  summary: null
  description: "# URLPatternComponentResult\n\n``` typescript\ninterface URLPatternComponentResult {\n```\n\ngroups: Record\\<string, string\\>;\n\ninput: string;\n\n}\n\n## Properties\n\n`groups``: ``Record``<``string``, ``string``>`\n\n`input``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLPatternComponentResult](https://doc.deno.land/deno/stable/~/URLPatternComponentResult)"
- name: URLPatternInit
  id: ~/urlpatterninit
  summary: null
  description: "# URLPatternInit\n\n``` typescript\ninterface URLPatternInit {\n```\n\nbaseURL?: string;\n\nhash?: string;\n\nhostname?: string;\n\npassword?: string;\n\npathname?: string;\n\nport?: string;\n\nprotocol?: string;\n\nsearch?: string;\n\nusername?: string;\n\n}\n\n## Properties\n\n`baseURL?``: ``string`\n\n`hash?``: ``string`\n\n`hostname?``: ``string`\n\n`password?``: ``string`\n\n`pathname?``: ``string`\n\n`port?``: ``string`\n\n`protocol?``: ``string`\n\n`search?``: ``string`\n\n`username?``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLPatternInit](https://doc.deno.land/deno/stable/~/URLPatternInit)"
- name: URLPatternInput
  id: ~/urlpatterninput
  summary: null
  description: "# URLPatternInput\n\n``` typescript\ntype URLPatternInput = string | URLPatternInit;\n```\n\n## Type\n\n`string`` | `[`URLPatternInit`](urlpatterninit)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLPatternInput](https://doc.deno.land/deno/stable/~/URLPatternInput)"
- name: URLPatternResult
  id: ~/urlpatternresult
  summary: URLPatternResult is the object returned from URLPattern.exec
  description: "# URLPatternResult\n\n`URLPatternResult` is the object returned from `URLPattern.exec`.\n\n``` typescript\ninterface URLPatternResult {\n```\n\nhash: [URLPatternComponentResult](urlpatterncomponentresult);\n\nhostname: [URLPatternComponentResult](urlpatterncomponentresult);\n\ninputs: \\[[URLPatternInit](urlpatterninit)\\] \\| \\[[URLPatternInit](urlpatterninit), string\\];\n\npassword: [URLPatternComponentResult](urlpatterncomponentresult);\n\npathname: [URLPatternComponentResult](urlpatterncomponentresult);\n\nport: [URLPatternComponentResult](urlpatterncomponentresult);\n\nprotocol: [URLPatternComponentResult](urlpatterncomponentresult);\n\nsearch: [URLPatternComponentResult](urlpatterncomponentresult);\n\nusername: [URLPatternComponentResult](urlpatterncomponentresult);\n\n}\n\n## Properties\n\n`hash``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `hash` matcher.\n\n`hostname``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `hostname` matcher.\n\n`inputs``: ``[`[`URLPatternInit`](urlpatterninit)`]`` | ``[`[`URLPatternInit`](urlpatterninit)`, ``string``]`\n\nThe inputs provided when matching.\n\n`password``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `password` matcher.\n\n`pathname``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `pathname` matcher.\n\n`port``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `port` matcher.\n\n`protocol``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `protocol` matcher.\n\n`search``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `search` matcher.\n\n`username``: `[`URLPatternComponentResult`](urlpatterncomponentresult)\n\nThe matched result for the `username` matcher.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLPatternResult](https://doc.deno.land/deno/stable/~/URLPatternResult)"
- name: URLSearchParams
  id: ~/urlsearchparams
  summary: Appends a specified key/value pair as a new search parameter
  description: "# URLSearchParams\n\n``` typescript\nclass URLSearchParams {\n```\n\nconstructor(init?:\n\n\\| string\\[\\]\\[\\]\n\n\\| Record\\<string, string\\>\n\n\\| string\n\n\\| [URLSearchParams](urlsearchparams)\n\n);\n\nappend(name: string, value: string): void;\n\ndelete(name: string): void;\n\nentries(): IterableIterator\\<\\[string, string\\]\\>;\n\nforEach(callbackfn: (\n\nvalue: string,\n\nkey: string,\n\nparent: this,\n\n) =\\> void, thisArg?: any): void;\n\nget(name: string): string \\| null;\n\ngetAll(name: string): string\\[\\];\n\nhas(name: string): boolean;\n\nkeys(): IterableIterator\\<string\\>;\n\nset(name: string, value: string): void;\n\nsort(): void;\n\ntoString(): string;\n\nvalues(): IterableIterator\\<string\\>;\n\n\\[Symbol.iterator\\](): IterableIterator\\<\\[string, string\\]\\>;\n\nstatic toString(): string;\n\n}\n\n## Constructors\n\n`new ``URLSearchParams(``init?``: ``string``[]``[]`` | ``Record``<``string``, ``string``>`` | ``string`` | `[`URLSearchParams`](urlsearchparams)`)`\n\n## Methods\n\n`append(``name``: ``string``, ``value``: ``string``)``: ``void`\n\nAppends a specified key/value pair as a new search parameter.\n\n``` typescript\nlet searchParams = new URLSearchParams();\nsearchParams.append('name', 'first');\nsearchParams.append('name', 'second');\n```\n\n`delete(``name``: ``string``)``: ``void`\n\nDeletes the given search parameter and its associated value, from the list of all search parameters.\n\n``` typescript\nlet searchParams = new URLSearchParams([['name', 'value']]);\nsearchParams.delete('name');\n```\n\n`entries()``: ``IterableIterator``<``[``string``, ``string``]``>`\n\nReturns an iterator allowing to go through all key/value pairs contained in this object.\n\n``` typescript\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params.entries()) {\n  console.log(key, value);\n}\n```\n\n`forEach(``callbackfn``: ``(``value``: ``string``, ``key``: ``string``, ``parent``: ``this``) => ``void``, ``thisArg?``: ``any``)``: ``void`\n\nCalls a function for each element contained in this object in place and return undefined. Optionally accepts an object to use as this when executing callback as second argument.\n\n``` typescript\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nparams.forEach((value, key, parent) => {\n  console.log(value, key, parent);\n});\n```\n\n`get(``name``: ``string``)``: ``string`` | ``null`\n\nReturns the first value associated to the given search parameter.\n\n``` typescript\nsearchParams.get('name');\n```\n\n`getAll(``name``: ``string``)``: ``string``[]`\n\nReturns all the values associated with a given search parameter as an array.\n\n``` typescript\nsearchParams.getAll('name');\n```\n\n`has(``name``: ``string``)``: ``boolean`\n\nReturns a Boolean that indicates whether a parameter with the specified name exists.\n\n``` typescript\nsearchParams.has('name');\n```\n\n`keys()``: ``IterableIterator``<``string``>`\n\nReturns an iterator allowing to go through all keys contained in this object.\n\n``` typescript\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const key of params.keys()) {\n  console.log(key);\n}\n```\n\n`set(``name``: ``string``, ``value``: ``string``)``: ``void`\n\nSets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it.\n\n``` typescript\nsearchParams.set('name', 'value');\n```\n\n`sort()``: ``void`\n\nSort all key/value pairs contained in this object in place and return undefined. The sort order is according to Unicode code points of the keys.\n\n``` typescript\nsearchParams.sort();\n```\n\n`toString()``: ``string`\n\nReturns a query string suitable for use in a URL.\n\n``` typescript\nsearchParams.toString();\n```\n\n`values()``: ``IterableIterator``<``string``>`\n\nReturns an iterator allowing to go through all values contained in this object.\n\n``` typescript\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const value of params.values()) {\n  console.log(value);\n}\n```\n\n`[Symbol.iterator]()``: ``IterableIterator``<``[``string``, ``string``]``>`\n\nReturns an iterator allowing to go through all key/value pairs contained in this object.\n\n``` typescript\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params) {\n  console.log(key, value);\n}\n```\n\n## Static Methods\n\n`toString()``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/URLSearchParams](https://doc.deno.land/deno/stable/~/URLSearchParams)"
- name: VoidFunction
  id: ~/voidfunction
  summary: null
  description: "# VoidFunction\n\n``` typescript\ninterface VoidFunction {\n```\n\n(): void;\n\n}\n\n## Call Signatures\n\n`()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/VoidFunction](https://doc.deno.land/deno/stable/~/VoidFunction)"
- name: WebAssembly
  id: ~/webassembly
  summary: null
  description: "# WebAssembly\n\n## Classes\n\n[TABLE]\n\n## Functions\n\n[TABLE]\n\n## Interfaces\n\n[TABLE]\n\n## Type Aliases\n\n|                                                              |     |\n|--------------------------------------------------------------|-----|\n| [WebAssembly.Exports](webassembly.exports)                   |     |\n| [WebAssembly.ExportValue](webassembly.exportvalue)           |     |\n| [WebAssembly.ImportExportKind](webassembly.importexportkind) |     |\n| [WebAssembly.Imports](webassembly.imports)                   |     |\n| [WebAssembly.ImportValue](webassembly.importvalue)           |     |\n| [WebAssembly.ModuleImports](webassembly.moduleimports)       |     |\n| [WebAssembly.TableKind](webassembly.tablekind)               |     |\n| [WebAssembly.ValueType](webassembly.valuetype)               |     |\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly](https://doc.deno.land/deno/stable/~/WebAssembly)"
- name: WebAssembly.compile
  id: ~/webassembly.compile
  summary: The WebAssembly.compile() function compiles WebAssembly binary code into a WebAssembly.Module object
  description: "# WebAssembly.compile\n\nThe `WebAssembly.compile()` function compiles WebAssembly binary code into a `WebAssembly.Module` object. This function is useful if it is necessary to compile a module before it can be instantiated (otherwise, the `WebAssembly.instantiate()` function should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)\n\n``` typescript\n```\n\nfunction compile(bytes: [BufferSource](buffersource)): Promise\\<[Module](webassembly.module)\\>;\n\n`compile(``bytes``: `[`BufferSource`](buffersource)`)``: ``Promise``<`[`Module`](webassembly.module)`>`\n\n### Parameters\n\n`bytes``: `[`BufferSource`](buffersource)\n\n### Return Type\n\n`Promise``<`[`Module`](webassembly.module)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.compile](https://doc.deno.land/deno/stable/~/WebAssembly.compile)"
- name: WebAssembly.CompileError
  id: ~/webassembly.compileerror
  summary: The WebAssembly.CompileError object indicates an error during WebAssembly decoding or validation
  description: "# WebAssembly.CompileError\n\nThe `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError)\n\n``` typescript\nclass CompileError extends Error {\n```\n\nconstructor(message?: string, options?: ErrorOptions);\n\n}\n\n## Extends\n\n`Error`\n\n## Constructors\n\n`new ``CompileError(``message?``: ``string``, ``options?``: ``ErrorOptions``)`\n\nCreates a new `WebAssembly.CompileError` object.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.CompileError](https://doc.deno.land/deno/stable/~/WebAssembly.CompileError)"
- name: WebAssembly.compileStreaming
  id: ~/webassembly.compilestreaming
  summary: The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source
  description: "# WebAssembly.compileStreaming\n\nThe `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module` directly from a streamed underlying source. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the `WebAssembly.instantiateStreaming()` function should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)\n\n``` typescript\n```\n\nfunction compileStreaming(source: [Response](response) \\| Promise\\<[Response](response)\\>): Promise\\<[Module](webassembly.module)\\>;\n\n`compileStreaming(``source``: `[`Response`](response)` | ``Promise``<`[`Response`](response)`>``)``: ``Promise``<`[`Module`](webassembly.module)`>`\n\n### Parameters\n\n`source``: `[`Response`](response)` | ``Promise``<`[`Response`](response)`>`\n\n### Return Type\n\n`Promise``<`[`Module`](webassembly.module)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.compileStreaming](https://doc.deno.land/deno/stable/~/WebAssembly.compileStreaming)"
- name: WebAssembly.Exports
  id: ~/webassembly.exports
  summary: null
  description: "# WebAssembly.Exports\n\n``` typescript\ntype Exports = Record<string, ExportValue>;\n```\n\n## Type\n\n`Record``<``string``, `[`ExportValue`](webassembly.exportvalue)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Exports](https://doc.deno.land/deno/stable/~/WebAssembly.Exports)"
- name: WebAssembly.ExportValue
  id: ~/webassembly.exportvalue
  summary: null
  description: "# WebAssembly.ExportValue\n\n``` typescript\ntype ExportValue = \n```\n\n\\| Function\n\n\\| [Global](webassembly.global)\n\n\\| [Memory](webassembly.memory)\n\n\\| [Table](webassembly.table);\n\n## Type\n\n`Function`` | `[`Global`](webassembly.global)` | `[`Memory`](webassembly.memory)` | `[`Table`](webassembly.table)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ExportValue](https://doc.deno.land/deno/stable/~/WebAssembly.ExportValue)"
- name: WebAssembly.Global
  id: ~/webassembly.global
  summary: A WebAssembly.Global object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more WebAssembly.Module instances
  description: "# WebAssembly.Global\n\nA `WebAssembly.Global` object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more `WebAssembly.Module` instances. This allows dynamic linking of multiple modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global)\n\n``` typescript\nclass Global {\n```\n\nconstructor(descriptor: [GlobalDescriptor](webassembly.globaldescriptor), v?: any);\n\nvalue: any;\n\nvalueOf(): any;\n\n}\n\n## Constructors\n\n`new ``Global(``descriptor``: `[`GlobalDescriptor`](webassembly.globaldescriptor)`, ``v?``: ``any``)`\n\nCreates a new `Global` object.\n\n## Properties\n\n`value``: ``any`\n\nThe value contained inside the global variable — this can be used to directly set and get the global's value.\n\n## Methods\n\n`valueOf()``: ``any`\n\nOld-style method that returns the value contained inside the global variable.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Global](https://doc.deno.land/deno/stable/~/WebAssembly.Global)"
- name: WebAssembly.GlobalDescriptor
  id: ~/webassembly.globaldescriptor
  summary: The GlobalDescriptor describes the options you can pass to new WebAssembly.Global()
  description: "# WebAssembly.GlobalDescriptor\n\nThe `GlobalDescriptor` describes the options you can pass to `new WebAssembly.Global()`.\n\n``` typescript\ninterface GlobalDescriptor {\n```\n\nmutable?: boolean;\n\nvalue: [ValueType](webassembly.valuetype);\n\n}\n\n## Properties\n\n`mutable?``: ``boolean`\n\n`value``: `[`ValueType`](webassembly.valuetype)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.GlobalDescriptor](https://doc.deno.land/deno/stable/~/WebAssembly.GlobalDescriptor)"
- name: WebAssembly.ImportExportKind
  id: ~/webassembly.importexportkind
  summary: null
  description: "# WebAssembly.ImportExportKind\n\n``` typescript\ntype ImportExportKind = \n```\n\n\\| \"function\"\n\n\\| \"global\"\n\n\\| \"memory\"\n\n\\| \"table\";\n\n## Type\n\n`\"function\"`` | ``\"global\"`` | ``\"memory\"`` | ``\"table\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ImportExportKind](https://doc.deno.land/deno/stable/~/WebAssembly.ImportExportKind)"
- name: WebAssembly.Imports
  id: ~/webassembly.imports
  summary: null
  description: "# WebAssembly.Imports\n\n``` typescript\ntype Imports = Record<string, ModuleImports>;\n```\n\n## Type\n\n`Record``<``string``, `[`ModuleImports`](webassembly.moduleimports)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Imports](https://doc.deno.land/deno/stable/~/WebAssembly.Imports)"
- name: WebAssembly.ImportValue
  id: ~/webassembly.importvalue
  summary: null
  description: "# WebAssembly.ImportValue\n\n``` typescript\ntype ImportValue = ExportValue | number;\n```\n\n## Type\n\n[`ExportValue`](webassembly.exportvalue)` | ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ImportValue](https://doc.deno.land/deno/stable/~/WebAssembly.ImportValue)"
- name: WebAssembly.Instance
  id: ~/webassembly.instance
  summary: A WebAssembly.Instance object is a stateful, executable instance of a WebAssembly.Module
  description: "# WebAssembly.Instance\n\nA `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance)\n\n``` typescript\nclass Instance {\n```\n\nconstructor(module: [Module](webassembly.module), importObject?: [Imports](webassembly.imports));\n\nreadonly exports: [Exports](webassembly.exports);\n\n}\n\n## Constructors\n\n`new ``Instance(``module``: `[`Module`](webassembly.module)`, ``importObject?``: `[`Imports`](webassembly.imports)`)`\n\nCreates a new Instance object.\n\n## Properties\n\n`exports``: `[`Exports`](webassembly.exports)\n\nReturns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript. Read-only.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Instance](https://doc.deno.land/deno/stable/~/WebAssembly.Instance)"
- name: WebAssembly.instantiate
  id: ~/webassembly.instantiate
  summary: The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code
  description: "# WebAssembly.instantiate\n\nThe WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed array or ArrayBuffer, and performs both compilation and instantiation in one step. The returned Promise resolves to both a compiled WebAssembly.Module and its first WebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n\n``` typescript\n```\n\nfunction instantiate(bytes: [BufferSource](buffersource), importObject?: [Imports](webassembly.imports)): Promise\\<[WebAssemblyInstantiatedSource](webassembly.webassemblyinstantiatedsource)\\>;\n\nfunction instantiate(moduleObject: [Module](webassembly.module), importObject?: [Imports](webassembly.imports)): Promise\\<[Instance](webassembly.instance)\\>;\n\n`instantiate(``bytes``: `[`BufferSource`](buffersource)`, ``importObject?``: `[`Imports`](webassembly.imports)`)``: ``Promise``<`[`WebAssemblyInstantiatedSource`](webassembly.webassemblyinstantiatedsource)`>`\n\nThe WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed array or ArrayBuffer, and performs both compilation and instantiation in one step. The returned Promise resolves to both a compiled WebAssembly.Module and its first WebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n\n### Parameters\n\n`bytes``: `[`BufferSource`](buffersource)\n\n`importObject?``: `[`Imports`](webassembly.imports)` ``optional`\n\n### Return Type\n\n`Promise``<`[`WebAssemblyInstantiatedSource`](webassembly.webassemblyinstantiatedsource)`>`\n\n`instantiate(``moduleObject``: `[`Module`](webassembly.module)`, ``importObject?``: `[`Imports`](webassembly.imports)`)``: ``Promise``<`[`Instance`](webassembly.instance)`>`\n\nThe WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code.\n\nThis overload takes an already-compiled WebAssembly.Module and returns a Promise that resolves to an Instance of that Module. This overload is useful if the Module has already been compiled.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n\n### Parameters\n\n`moduleObject``: `[`Module`](webassembly.module)\n\n`importObject?``: `[`Imports`](webassembly.imports)` ``optional`\n\n### Return Type\n\n`Promise``<`[`Instance`](webassembly.instance)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.instantiate](https://doc.deno.land/deno/stable/~/WebAssembly.instantiate)"
- name: WebAssembly.instantiateStreaming
  id: ~/webassembly.instantiatestreaming
  summary: The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source
  description: "# WebAssembly.instantiateStreaming\n\nThe `WebAssembly.instantiateStreaming()` function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)\n\n``` typescript\n```\n\nfunction instantiateStreaming(response: [Response](response) \\| PromiseLike\\<[Response](response)\\>, importObject?: [Imports](webassembly.imports)): Promise\\<[WebAssemblyInstantiatedSource](webassembly.webassemblyinstantiatedsource)\\>;\n\n`instantiateStreaming(``response``: `[`Response`](response)` | ``PromiseLike``<`[`Response`](response)`>``, ``importObject?``: `[`Imports`](webassembly.imports)`)``: ``Promise``<`[`WebAssemblyInstantiatedSource`](webassembly.webassemblyinstantiatedsource)`>`\n\n### Parameters\n\n`response``: `[`Response`](response)` | ``PromiseLike``<`[`Response`](response)`>`\n\n`importObject?``: `[`Imports`](webassembly.imports)` ``optional`\n\n### Return Type\n\n`Promise``<`[`WebAssemblyInstantiatedSource`](webassembly.webassemblyinstantiatedsource)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.instantiateStreaming](https://doc.deno.land/deno/stable/~/WebAssembly.instantiateStreaming)"
- name: WebAssembly.LinkError
  id: ~/webassembly.linkerror
  summary: The WebAssembly.LinkError object indicates an error during module instantiation (besides traps from the start function)
  description: "# WebAssembly.LinkError\n\nThe `WebAssembly.LinkError` object indicates an error during module instantiation (besides traps from the start function).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError)\n\n``` typescript\nclass LinkError extends Error {\n```\n\nconstructor(message?: string, options?: ErrorOptions);\n\n}\n\n## Extends\n\n`Error`\n\n## Constructors\n\n`new ``LinkError(``message?``: ``string``, ``options?``: ``ErrorOptions``)`\n\nCreates a new WebAssembly.LinkError object.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.LinkError](https://doc.deno.land/deno/stable/~/WebAssembly.LinkError)"
- name: WebAssembly.Memory
  id: ~/webassembly.memory
  summary: The WebAssembly.Memory object is a resizable ArrayBuffer or SharedArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance
  description: "# WebAssembly.Memory\n\nThe `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that holds the raw bytes of memory accessed by a WebAssembly Instance.\n\nA memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)\n\n``` typescript\nclass Memory {\n```\n\nconstructor(descriptor: [MemoryDescriptor](webassembly.memorydescriptor));\n\nreadonly buffer: ArrayBuffer \\| SharedArrayBuffer;\n\ngrow(delta: number): number;\n\n}\n\n## Constructors\n\n`new ``Memory(``descriptor``: `[`MemoryDescriptor`](webassembly.memorydescriptor)`)`\n\nCreates a new `Memory` object.\n\n## Properties\n\n`buffer``: ``ArrayBuffer`` | ``SharedArrayBuffer`\n\nAn accessor property that returns the buffer contained in the memory.\n\n## Methods\n\n`grow(``delta``: ``number``)``: ``number`\n\nIncreases the size of the memory instance by a specified number of WebAssembly pages (each one is 64KB in size).\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Memory](https://doc.deno.land/deno/stable/~/WebAssembly.Memory)"
- name: WebAssembly.MemoryDescriptor
  id: ~/webassembly.memorydescriptor
  summary: The MemoryDescriptor describes the options you can pass to new WebAssembly.Memory()
  description: "# WebAssembly.MemoryDescriptor\n\nThe `MemoryDescriptor` describes the options you can pass to `new WebAssembly.Memory()`.\n\n``` typescript\ninterface MemoryDescriptor {\n```\n\ninitial: number;\n\nmaximum?: number;\n\nshared?: boolean;\n\n}\n\n## Properties\n\n`initial``: ``number`\n\n`maximum?``: ``number`\n\n`shared?``: ``boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.MemoryDescriptor](https://doc.deno.land/deno/stable/~/WebAssembly.MemoryDescriptor)"
- name: WebAssembly.Module
  id: ~/webassembly.module
  summary: A WebAssembly.Module object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times
  description: "# WebAssembly.Module\n\nA `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module)\n\n``` typescript\nclass Module {\n```\n\nconstructor(bytes: [BufferSource](buffersource));\n\nstatic customSections(moduleObject: [Module](webassembly.module), sectionName: string): ArrayBuffer\\[\\];\n\nstatic exports(moduleObject: [Module](webassembly.module)): [ModuleExportDescriptor](webassembly.moduleexportdescriptor)\\[\\];\n\nstatic imports(moduleObject: [Module](webassembly.module)): [ModuleImportDescriptor](webassembly.moduleimportdescriptor)\\[\\];\n\n}\n\n## Constructors\n\n`new ``Module(``bytes``: `[`BufferSource`](buffersource)`)`\n\nCreates a new `Module` object.\n\n## Static Methods\n\n`customSections(``moduleObject``: `[`Module`](webassembly.module)`, ``sectionName``: ``string``)``: ``ArrayBuffer``[]`\n\nGiven a `Module` and string, returns a copy of the contents of all custom sections in the module with the given string name.\n\n`exports(``moduleObject``: `[`Module`](webassembly.module)`)``: `[`ModuleExportDescriptor`](webassembly.moduleexportdescriptor)`[]`\n\nGiven a `Module`, returns an array containing descriptions of all the declared exports.\n\n`imports(``moduleObject``: `[`Module`](webassembly.module)`)``: `[`ModuleImportDescriptor`](webassembly.moduleimportdescriptor)`[]`\n\nGiven a `Module`, returns an array containing descriptions of all the declared imports.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Module](https://doc.deno.land/deno/stable/~/WebAssembly.Module)"
- name: WebAssembly.ModuleExportDescriptor
  id: ~/webassembly.moduleexportdescriptor
  summary: A ModuleExportDescriptor is the description of a declared export in a WebAssembly.Module
  description: "# WebAssembly.ModuleExportDescriptor\n\nA `ModuleExportDescriptor` is the description of a declared export in a `WebAssembly.Module`.\n\n``` typescript\ninterface ModuleExportDescriptor {\n```\n\nkind: [ImportExportKind](webassembly.importexportkind);\n\nname: string;\n\n}\n\n## Properties\n\n`kind``: `[`ImportExportKind`](webassembly.importexportkind)\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ModuleExportDescriptor](https://doc.deno.land/deno/stable/~/WebAssembly.ModuleExportDescriptor)"
- name: WebAssembly.ModuleImportDescriptor
  id: ~/webassembly.moduleimportdescriptor
  summary: A ModuleImportDescriptor is the description of a declared import in a WebAssembly.Module
  description: "# WebAssembly.ModuleImportDescriptor\n\nA `ModuleImportDescriptor` is the description of a declared import in a `WebAssembly.Module`.\n\n``` typescript\ninterface ModuleImportDescriptor {\n```\n\nkind: [ImportExportKind](webassembly.importexportkind);\n\nmodule: string;\n\nname: string;\n\n}\n\n## Properties\n\n`kind``: `[`ImportExportKind`](webassembly.importexportkind)\n\n`module``: ``string`\n\n`name``: ``string`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ModuleImportDescriptor](https://doc.deno.land/deno/stable/~/WebAssembly.ModuleImportDescriptor)"
- name: WebAssembly.ModuleImports
  id: ~/webassembly.moduleimports
  summary: null
  description: "# WebAssembly.ModuleImports\n\n``` typescript\ntype ModuleImports = Record<string, ImportValue>;\n```\n\n## Type\n\n`Record``<``string``, `[`ImportValue`](webassembly.importvalue)`>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ModuleImports](https://doc.deno.land/deno/stable/~/WebAssembly.ModuleImports)"
- name: WebAssembly.RuntimeError
  id: ~/webassembly.runtimeerror
  summary: The WebAssembly.RuntimeError object is the error type that is thrown whenever WebAssembly specifies a trap
  description: "# WebAssembly.RuntimeError\n\nThe `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly specifies a trap.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError)\n\n``` typescript\nclass RuntimeError extends Error {\n```\n\nconstructor(message?: string, options?: ErrorOptions);\n\n}\n\n## Extends\n\n`Error`\n\n## Constructors\n\n`new ``RuntimeError(``message?``: ``string``, ``options?``: ``ErrorOptions``)`\n\nCreates a new `WebAssembly.RuntimeError` object.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.RuntimeError](https://doc.deno.land/deno/stable/~/WebAssembly.RuntimeError)"
- name: WebAssembly.Table
  id: ~/webassembly.table
  summary: The WebAssembly.Table() object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references
  description: "# WebAssembly.Table\n\nThe `WebAssembly.Table()` object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table)\n\n``` typescript\nclass Table {\n```\n\nconstructor(descriptor: [TableDescriptor](webassembly.tabledescriptor));\n\nreadonly length: number;\n\nget(index: number): Function \\| null;\n\ngrow(delta: number): number;\n\nset(index: number, value: Function \\| null): void;\n\n}\n\n## Constructors\n\n`new ``Table(``descriptor``: `[`TableDescriptor`](webassembly.tabledescriptor)`)`\n\nCreates a new `Table` object.\n\n## Properties\n\n`length``: ``number`\n\nReturns the length of the table, i.e. the number of elements.\n\n## Methods\n\n`get(``index``: ``number``)``: ``Function`` | ``null`\n\nAccessor function — gets the element stored at a given index.\n\n`grow(``delta``: ``number``)``: ``number`\n\nIncreases the size of the `Table` instance by a specified number of elements.\n\n`set(``index``: ``number``, ``value``: ``Function`` | ``null``)``: ``void`\n\nSets an element stored at a given index to a given value.\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.Table](https://doc.deno.land/deno/stable/~/WebAssembly.Table)"
- name: WebAssembly.TableDescriptor
  id: ~/webassembly.tabledescriptor
  summary: The TableDescriptor describes the options you can pass to new WebAssembly.Table()
  description: "# WebAssembly.TableDescriptor\n\nThe `TableDescriptor` describes the options you can pass to `new WebAssembly.Table()`.\n\n``` typescript\ninterface TableDescriptor {\n```\n\nelement: [TableKind](webassembly.tablekind);\n\ninitial: number;\n\nmaximum?: number;\n\n}\n\n## Properties\n\n`element``: `[`TableKind`](webassembly.tablekind)\n\n`initial``: ``number`\n\n`maximum?``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.TableDescriptor](https://doc.deno.land/deno/stable/~/WebAssembly.TableDescriptor)"
- name: WebAssembly.TableKind
  id: ~/webassembly.tablekind
  summary: null
  description: "# WebAssembly.TableKind\n\n``` typescript\ntype TableKind = \"anyfunc\";\n```\n\n## Type\n\n`\"anyfunc\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.TableKind](https://doc.deno.land/deno/stable/~/WebAssembly.TableKind)"
- name: WebAssembly.validate
  id: ~/webassembly.validate
  summary: The WebAssembly.validate() function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (true) or not (false)
  description: "# WebAssembly.validate\n\nThe `WebAssembly.validate()` function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (`true`) or not (`false`).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)\n\n``` typescript\n```\n\nfunction validate(bytes: [BufferSource](buffersource)): boolean;\n\n`validate(``bytes``: `[`BufferSource`](buffersource)`)``: ``boolean`\n\n### Parameters\n\n`bytes``: `[`BufferSource`](buffersource)\n\n### Return Type\n\n`boolean`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.validate](https://doc.deno.land/deno/stable/~/WebAssembly.validate)"
- name: WebAssembly.ValueType
  id: ~/webassembly.valuetype
  summary: null
  description: "# WebAssembly.ValueType\n\n``` typescript\ntype ValueType = \n```\n\n\\| \"f32\"\n\n\\| \"f64\"\n\n\\| \"i32\"\n\n\\| \"i64\";\n\n## Type\n\n`\"f32\"`` | ``\"f64\"`` | ``\"i32\"`` | ``\"i64\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.ValueType](https://doc.deno.land/deno/stable/~/WebAssembly.ValueType)"
- name: WebAssembly.WebAssemblyInstantiatedSource
  id: ~/webassembly.webassemblyinstantiatedsource
  summary: The value returned from WebAssembly.instantiate
  description: "# WebAssembly.WebAssemblyInstantiatedSource\n\nThe value returned from `WebAssembly.instantiate`.\n\n``` typescript\ninterface WebAssemblyInstantiatedSource {\n```\n\ninstance: [Instance](webassembly.instance);\n\nmodule: [Module](webassembly.module);\n\n}\n\n## Properties\n\n`instance``: `[`Instance`](webassembly.instance)\n\n`module``: `[`Module`](webassembly.module)\n\nA `WebAssembly.Module` object representing the compiled WebAssembly module. This `Module` can be instantiated again, or shared via postMessage().\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebAssembly.WebAssemblyInstantiatedSource](https://doc.deno.land/deno/stable/~/WebAssembly.WebAssemblyInstantiatedSource)"
- name: WebSocket
  id: ~/websocket
  summary: Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection
  description: "# WebSocket\n\nProvides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n\nIf you are looking to create a WebSocket server, please take a look at `Deno.upgradeWebSocket()`.\n\n``` typescript\nclass WebSocket extends EventTarget {\n```\n\nconstructor(url: string \\| [URL](url), protocols?: string \\| string\\[\\]);\n\nbinaryType: [BinaryType](binarytype);\n\nreadonly bufferedAmount: number;\n\nreadonly CLOSED: number;\n\nreadonly CLOSING: number;\n\nreadonly CONNECTING: number;\n\nreadonly extensions: string;\n\nonclose: ((this: [WebSocket](websocket), ev: [CloseEvent](closeevent)) =\\> any) \\| null;\n\nonerror: ((this: [WebSocket](websocket), ev: [Event](event) \\| [ErrorEvent](errorevent)) =\\> any) \\| null;\n\nonmessage: ((this: [WebSocket](websocket), ev: [MessageEvent](messageevent)) =\\> any) \\| null;\n\nonopen: ((this: [WebSocket](websocket), ev: [Event](event)) =\\> any) \\| null;\n\nreadonly OPEN: number;\n\nreadonly protocol: string;\n\nreadonly readyState: number;\n\nreadonly url: string;\n\naddEventListener\\<K extends keyof [WebSocketEventMap](websocketeventmap)\\>(\n\ntype: K,\n\nlistener: (this: [WebSocket](websocket), ev: [WebSocketEventMap](websocketeventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nclose(code?: number, reason?: string): void;\n\nremoveEventListener\\<K extends keyof [WebSocketEventMap](websocketeventmap)\\>(\n\ntype: K,\n\nlistener: (this: [WebSocket](websocket), ev: [WebSocketEventMap](websocketeventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nsend(data:\n\n\\| string\n\n\\| ArrayBufferLike\n\n\\| [Blob](blob)\n\n\\| ArrayBufferView\n\n): void;\n\nstatic readonly CLOSED: number;\n\nstatic readonly CLOSING: number;\n\nstatic readonly CONNECTING: number;\n\nstatic readonly OPEN: number;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Constructors\n\n`new ``WebSocket(``url``: ``string`` | `[`URL`](url)`, ``protocols?``: ``string`` | ``string``[]``)`\n\n## Properties\n\n`binaryType``: `[`BinaryType`](binarytype)\n\nReturns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\nCan be set, to change how binary data is returned. The default is \"blob\".\n\n`bufferedAmount``: ``number`\n\nReturns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n\n`CLOSED``: ``number`\n\n`CLOSING``: ``number`\n\n`CONNECTING``: ``number`\n\n`extensions``: ``string`\n\nReturns the extensions selected by the server, if any.\n\n`onclose``: ``(``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`CloseEvent`](closeevent)`) => ``any``)`` | ``null`\n\n`onerror``: ``(``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`Event`](event)` | `[`ErrorEvent`](errorevent)`) => ``any``)`` | ``null`\n\n`onmessage``: ``(``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`MessageEvent`](messageevent)`) => ``any``)`` | ``null`\n\n`onopen``: ``(``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`OPEN``: ``number`\n\n`protocol``: ``string`\n\nReturns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.\n\n`readyState``: ``number`\n\nReturns the state of the WebSocket object's connection. It can have the values described below.\n\n`url``: ``string`\n\nReturns the URL that was used to establish the WebSocket connection.\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`WebSocketEventMap`](websocketeventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`WebSocketEventMap`](websocketeventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`close(``code?``: ``number``, ``reason?``: ``string``)``: ``void`\n\nCloses the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.\n\n`removeEventListener``<``K`` extends ``keyof`` `[`WebSocketEventMap`](websocketeventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`WebSocket`](websocket)`, ``ev``: `[`WebSocketEventMap`](websocketeventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`send(``data``: ``string`` | ``ArrayBufferLike`` | `[`Blob`](blob)` | ``ArrayBufferView``)``: ``void`\n\nTransmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.\n\n## Static Properties\n\n`CLOSED``: ``number`\n\n`CLOSING``: ``number`\n\n`CONNECTING``: ``number`\n\n`OPEN``: ``number`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebSocket](https://doc.deno.land/deno/stable/~/WebSocket)"
- name: WebSocketEventMap
  id: ~/websocketeventmap
  summary: null
  description: "# WebSocketEventMap\n\n``` typescript\ninterface WebSocketEventMap {\n```\n\nclose: [CloseEvent](closeevent);\n\nerror: [Event](event);\n\nmessage: [MessageEvent](messageevent);\n\nopen: [Event](event);\n\n}\n\n## Properties\n\n`close``: `[`CloseEvent`](closeevent)\n\n`error``: `[`Event`](event)\n\n`message``: `[`MessageEvent`](messageevent)\n\n`open``: `[`Event`](event)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WebSocketEventMap](https://doc.deno.land/deno/stable/~/WebSocketEventMap)"
- name: Window
  id: ~/window
  summary: null
  description: "# Window\n\n``` typescript\nclass Window extends EventTarget {\n```\n\nalert: (message?: string) =\\> void;\n\ncaches: [CacheStorage](cachestorage);\n\nclose: () =\\> void;\n\nreadonly closed: boolean;\n\nconfirm: (message?: string) =\\> boolean;\n\nDeno: Deno;\n\nlocalStorage: [Storage](storage);\n\nlocation: [Location](location);\n\nLocation: Location;\n\nnavigator: [Navigator](navigator);\n\nNavigator: Navigator;\n\nonbeforeunload: ((this: [Window](window), ev: [Event](event)) =\\> any) \\| null;\n\nonerror: ((this: [Window](window), ev: [ErrorEvent](errorevent)) =\\> any) \\| null;\n\nonload: ((this: [Window](window), ev: [Event](event)) =\\> any) \\| null;\n\nonunhandledrejection: ((this: [Window](window), ev: [PromiseRejectionEvent](promiserejectionevent)) =\\> any) \\| null;\n\nonunload: ((this: [Window](window), ev: [Event](event)) =\\> any) \\| null;\n\nprompt: (message?: string, defaultValue?: string) =\\> string \\| null;\n\nreadonly self: [Window](window) & globalThis;\n\nsessionStorage: [Storage](storage);\n\nreadonly window: [Window](window) & globalThis;\n\naddEventListener\\<K extends keyof [WindowEventMap](windoweventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Window](window), ev: [WindowEventMap](windoweventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\nnew(): [Window](window);\n\nremoveEventListener\\<K extends keyof [WindowEventMap](windoweventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Window](window), ev: [WindowEventMap](windoweventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Properties\n\n`alert``: ``(``message?``: ``string``) => ``void`\n\n`caches``: `[`CacheStorage`](cachestorage)\n\n`close``: ``() => ``void`\n\n`closed``: ``boolean`\n\n`confirm``: ``(``message?``: ``string``) => ``boolean`\n\n`Deno``: ``Deno`\n\n`localStorage``: `[`Storage`](storage)\n\n`location``: `[`Location`](location)\n\n`Location``: ``Location`\n\n`navigator``: `[`Navigator`](navigator)\n\n`Navigator``: ``Navigator`\n\n`onbeforeunload``: ``(``(``this``: `[`Window`](window)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`onerror``: ``(``(``this``: `[`Window`](window)`, ``ev``: `[`ErrorEvent`](errorevent)`) => ``any``)`` | ``null`\n\n`onload``: ``(``(``this``: `[`Window`](window)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`onunhandledrejection``: ``(``(``this``: `[`Window`](window)`, ``ev``: `[`PromiseRejectionEvent`](promiserejectionevent)`) => ``any``)`` | ``null`\n\n`onunload``: ``(``(``this``: `[`Window`](window)`, ``ev``: `[`Event`](event)`) => ``any``)`` | ``null`\n\n`prompt``: ``(``message?``: ``string``, ``defaultValue?``: ``string``) => ``string`` | ``null`\n\n`self``: `[`Window`](window)` & ``globalThis`\n\n`sessionStorage``: `[`Storage`](storage)\n\n`window``: `[`Window`](window)` & ``globalThis`\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`new()``: `[`Window`](window)\n\n`removeEventListener``<``K`` extends ``keyof`` `[`WindowEventMap`](windoweventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Window`](window)`, ``ev``: `[`WindowEventMap`](windoweventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Window](https://doc.deno.land/deno/stable/~/Window)"
- name: WindowEventMap
  id: ~/windoweventmap
  summary: null
  description: "# WindowEventMap\n\n``` typescript\ninterface WindowEventMap {\n```\n\nerror: [ErrorEvent](errorevent);\n\nunhandledrejection: [PromiseRejectionEvent](promiserejectionevent);\n\n}\n\n## Properties\n\n`error``: `[`ErrorEvent`](errorevent)\n\n`unhandledrejection``: `[`PromiseRejectionEvent`](promiserejectionevent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WindowEventMap](https://doc.deno.land/deno/stable/~/WindowEventMap)"
- name: Worker
  id: ~/worker
  summary: null
  description: "# Worker\n\n``` typescript\nclass Worker extends EventTarget {\n```\n\nconstructor(specifier: string \\| [URL](url), options?: [WorkerOptions](workeroptions));\n\nonerror?: (e: [ErrorEvent](errorevent)) =\\> void;\n\nonmessage?: (e: [MessageEvent](messageevent)) =\\> void;\n\nonmessageerror?: (e: [MessageEvent](messageevent)) =\\> void;\n\naddEventListener\\<K extends keyof [WorkerEventMap](workereventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Worker](worker), ev: [WorkerEventMap](workereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\naddEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [AddEventListenerOptions](addeventlisteneroptions),\n\n): void;\n\npostMessage(message: any, transfer: [Transferable](transferable)\\[\\]): void;\n\npostMessage(message: any, options?: [StructuredSerializeOptions](structuredserializeoptions)): void;\n\nremoveEventListener\\<K extends keyof [WorkerEventMap](workereventmap)\\>(\n\ntype: K,\n\nlistener: (this: [Worker](worker), ev: [WorkerEventMap](workereventmap)\\[K\\]) =\\> any,\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nremoveEventListener(\n\ntype: string,\n\nlistener: [EventListenerOrEventListenerObject](eventlisteneroreventlistenerobject),\n\noptions?: boolean \\| [EventListenerOptions](eventlisteneroptions),\n\n): void;\n\nterminate(): void;\n\n}\n\n## Extends\n\n`EventTarget`\n\n## Constructors\n\n`new ``Worker(``specifier``: ``string`` | `[`URL`](url)`, ``options?``: `[`WorkerOptions`](workeroptions)`)`\n\n## Properties\n\n`onerror``: ``(``e``: `[`ErrorEvent`](errorevent)`) => ``void`\n\n`onmessage``: ``(``e``: `[`MessageEvent`](messageevent)`) => ``void`\n\n`onmessageerror``: ``(``e``: `[`MessageEvent`](messageevent)`) => ``void`\n\n## Methods\n\n`addEventListener``<``K`` extends ``keyof`` `[`WorkerEventMap`](workereventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Worker`](worker)`, ``ev``: `[`WorkerEventMap`](workereventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`addEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`AddEventListenerOptions`](addeventlisteneroptions)`)``: ``void`\n\n`postMessage(``message``: ``any``, ``transfer``: `[`Transferable`](transferable)`[]``)``: ``void`\n\n`postMessage(``message``: ``any``, ``options?``: `[`StructuredSerializeOptions`](structuredserializeoptions)`)``: ``void`\n\n`removeEventListener``<``K`` extends ``keyof`` `[`WorkerEventMap`](workereventmap)`>``(``type``: ``K``, ``listener``: ``(``this``: `[`Worker`](worker)`, ``ev``: `[`WorkerEventMap`](workereventmap)`[``K``]``) => ``any``, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`removeEventListener(``type``: ``string``, ``listener``: `[`EventListenerOrEventListenerObject`](eventlisteneroreventlistenerobject)`, ``options?``: ``boolean`` | `[`EventListenerOptions`](eventlisteneroptions)`)``: ``void`\n\n`terminate()``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/Worker](https://doc.deno.land/deno/stable/~/Worker)"
- name: WorkerEventMap
  id: ~/workereventmap
  summary: null
  description: "# WorkerEventMap\n\n``` typescript\ninterface WorkerEventMap  extends AbstractWorkerEventMap {\n```\n\nmessage: [MessageEvent](messageevent);\n\nmessageerror: [MessageEvent](messageevent);\n\n}\n\n## Extends\n\n[`AbstractWorkerEventMap`](abstractworkereventmap)\n\n## Properties\n\n`message``: `[`MessageEvent`](messageevent)\n\n`messageerror``: `[`MessageEvent`](messageevent)\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WorkerEventMap](https://doc.deno.land/deno/stable/~/WorkerEventMap)"
- name: WorkerOptions
  id: ~/workeroptions
  summary: null
  description: "# WorkerOptions\n\n``` typescript\ninterface WorkerOptions {\n```\n\nname?: string;\n\ntype?: \"classic\" \\| \"module\";\n\n}\n\n## Properties\n\n`name?``: ``string`\n\n`type?``: ``\"classic\"`` | ``\"module\"`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WorkerOptions](https://doc.deno.land/deno/stable/~/WorkerOptions)"
- name: WritableStream
  id: ~/writablestream
  summary: This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink
  description: "# WritableStream\n\nThis Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.\n\n``` typescript\ninterface WritableStream <W = any> {\n```\n\nreadonly locked: boolean;\n\nabort(reason?: any): Promise\\<void\\>;\n\nclose(): Promise\\<void\\>;\n\ngetWriter(): [WritableStreamDefaultWriter](writablestreamdefaultwriter)\\<W\\>;\n\n}\n\n``` typescript\nvar WritableStream: {\n```\n\nprototype: [WritableStream](writablestream);\n\nnew \\<W = any\\>(underlyingSink?: [UnderlyingSink](underlyingsink)\\<W\\>, strategy?: [QueuingStrategy](queuingstrategy)\\<W\\>): [WritableStream](writablestream)\\<W\\>;\n\n};\n\n## Type Parameters\n\n`W`` = ``any`\n\n## Properties\n\n`readonly ``locked``: ``boolean`\n\n## Methods\n\n`abort(``reason?``: ``any``)``: ``Promise``<``void``>`\n\n`close()``: ``Promise``<``void``>`\n\n`getWriter()``: `[`WritableStreamDefaultWriter`](writablestreamdefaultwriter)`<``W``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStream](https://doc.deno.land/deno/stable/~/WritableStream)"
- name: WritableStreamDefaultController
  id: ~/writablestreamdefaultcontroller
  summary: This Streams API interface represents a controller allowing control of a WritableStream's state
  description: "# WritableStreamDefaultController\n\nThis Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.\n\n``` typescript\ninterface WritableStreamDefaultController {\n```\n\nsignal: [AbortSignal](abortsignal);\n\nerror(error?: any): void;\n\n}\n\n``` typescript\nvar WritableStreamDefaultController: WritableStreamDefaultController;\n```\n\n## Properties\n\n`signal``: `[`AbortSignal`](abortsignal)\n\n## Methods\n\n`error(``error?``: ``any``)``: ``void`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamDefaultController](https://doc.deno.land/deno/stable/~/WritableStreamDefaultController)"
- name: WritableStreamDefaultControllerCloseCallback
  id: ~/writablestreamdefaultcontrollerclosecallback
  summary: null
  description: "# WritableStreamDefaultControllerCloseCallback\n\n``` typescript\ninterface WritableStreamDefaultControllerCloseCallback {\n```\n\n(): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Call Signatures\n\n`()``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerCloseCallback](https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerCloseCallback)"
- name: WritableStreamDefaultControllerStartCallback
  id: ~/writablestreamdefaultcontrollerstartcallback
  summary: null
  description: "# WritableStreamDefaultControllerStartCallback\n\n``` typescript\ninterface WritableStreamDefaultControllerStartCallback {\n```\n\n(controller: [WritableStreamDefaultController](writablestreamdefaultcontroller)): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Call Signatures\n\n`(``controller``: `[`WritableStreamDefaultController`](writablestreamdefaultcontroller)`)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerStartCallback](https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerStartCallback)"
- name: WritableStreamDefaultControllerWriteCallback
  id: ~/writablestreamdefaultcontrollerwritecallback
  summary: null
  description: "# WritableStreamDefaultControllerWriteCallback\n\n``` typescript\ninterface WritableStreamDefaultControllerWriteCallback <W> {\n```\n\n(chunk: W, controller: [WritableStreamDefaultController](writablestreamdefaultcontroller)): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Type Parameters\n\n`W`\n\n## Call Signatures\n\n`(``chunk``: ``W``, ``controller``: `[`WritableStreamDefaultController`](writablestreamdefaultcontroller)`)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerWriteCallback](https://doc.deno.land/deno/stable/~/WritableStreamDefaultControllerWriteCallback)"
- name: WritableStreamDefaultWriter
  id: ~/writablestreamdefaultwriter
  summary: This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink
  description: "# WritableStreamDefaultWriter\n\nThis Streams API interface is the object returned by WritableStream.getWriter() and once created locks the \\< writer to the WritableStream ensuring that no other streams can write to the underlying sink.\n\n``` typescript\ninterface WritableStreamDefaultWriter <W = any> {\n```\n\nreadonly closed: Promise\\<void\\>;\n\nreadonly desiredSize: number \\| null;\n\nreadonly ready: Promise\\<void\\>;\n\nabort(reason?: any): Promise\\<void\\>;\n\nclose(): Promise\\<void\\>;\n\nreleaseLock(): void;\n\nwrite(chunk: W): Promise\\<void\\>;\n\n}\n\n``` typescript\nvar WritableStreamDefaultWriter: {\n```\n\nprototype: [WritableStreamDefaultWriter](writablestreamdefaultwriter);\n\nnew (): [WritableStreamDefaultWriter](writablestreamdefaultwriter);\n\n};\n\n## Type Parameters\n\n`W`` = ``any`\n\n## Properties\n\n`readonly ``closed``: ``Promise``<``void``>`\n\n`readonly ``desiredSize``: ``number`` | ``null`\n\n`readonly ``ready``: ``Promise``<``void``>`\n\n## Methods\n\n`abort(``reason?``: ``any``)``: ``Promise``<``void``>`\n\n`close()``: ``Promise``<``void``>`\n\n`releaseLock()``: ``void`\n\n`write(``chunk``: ``W``)``: ``Promise``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamDefaultWriter](https://doc.deno.land/deno/stable/~/WritableStreamDefaultWriter)"
- name: WritableStreamErrorCallback
  id: ~/writablestreamerrorcallback
  summary: null
  description: "# WritableStreamErrorCallback\n\n``` typescript\ninterface WritableStreamErrorCallback {\n```\n\n(reason: any): void \\| PromiseLike\\<void\\>;\n\n}\n\n## Call Signatures\n\n`(``reason``: ``any``)``: ``void`` | ``PromiseLike``<``void``>`\n\n© 2018–2022 the Deno authors  \n[https://doc.deno.land/deno/stable/~/WritableStreamErrorCallback](https://doc.deno.land/deno/stable/~/WritableStreamErrorCallback)"
