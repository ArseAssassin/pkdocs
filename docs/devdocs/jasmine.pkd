---
name: Jasmine
slug: jasmine
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2008–2019 Pivotal Labs
  Licensed under the MIT License.
  https://jasmine.github.io/api/4.0/index.html
homepage: https://jasmine.github.io/

---
- name: addAsyncMatchers
  id: jasmine#.addAsyncMatchers
  summary: Add custom async matchers for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) addAsyncMatchers(matchers)

    Add custom async matchers for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name       | Type   | Description                                                |
    |------------|--------|------------------------------------------------------------|
    | `matchers` | Object | Keys from this object will be the new async matcher names. |

    Since:

    - 3.5.0

    See:

    - [custom matcher](https://jasmine.github.io/tutorials/custom_matcher)
- name: addCustomEqualityTester
  id: jasmine#.addCustomEqualityTester
  summary: Add a custom equality tester for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) addCustomEqualityTester(tester)

    Add a custom equality tester for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name     | Type     | Description                                                                                                                                                   |
    |----------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `tester` | function | A function which takes two arguments to compare and returns a `true` or `false` comparison result if it knows how to compare them, and `undefined` otherwise. |

    Since:

    - 2.0.0

    See:

    - [custom equality](https://jasmine.github.io/tutorials/custom_equality)
- name: addCustomObjectFormatter
  id: jasmine#.addCustomObjectFormatter
  summary: Add a custom object formatter for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) addCustomObjectFormatter(formatter)

    Add a custom object formatter for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name        | Type     | Description                                                                                                            |
    |-------------|----------|------------------------------------------------------------------------------------------------------------------------|
    | `formatter` | function | A function which takes a value to format and returns a string if it knows how to format it, and `undefined` otherwise. |

    Since:

    - 3.6.0

    See:

    - [custom object_formatters](https://jasmine.github.io/tutorials/custom_object_formatters)
- name: addMatchers
  id: jasmine#.addMatchers
  summary: Add custom matchers for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) addMatchers(matchers)

    Add custom matchers for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name       | Type   | Description                                          |
    |------------|--------|------------------------------------------------------|
    | `matchers` | Object | Keys from this object will be the new matcher names. |

    Since:

    - 2.0.0

    See:

    - [custom matcher](https://jasmine.github.io/tutorials/custom_matcher)
- name: addReporter
  id: env#addReporter
  summary: Add a custom reporter to the Jasmine environment
  belongs_to: 'Class: Env'
  description: |-
    #### addReporter(reporterToAdd)

    Add a custom reporter to the Jasmine environment.

    ##### Parameters:

    | Name            | Type                   | Description               |
    |-----------------|------------------------|---------------------------|
    | `reporterToAdd` |  [Reporter](reporter)  | The reporter to be added. |

    Since:

    - 2.0.0

    See:

    - [custom reporter](https://jasmine.github.io/tutorials/custom_reporter)
- name: addSpyStrategy
  id: jasmine#.addSpyStrategy
  summary: Add a custom spy strategy for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) addSpyStrategy(name, factory)

    Add a custom spy strategy for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name      | Type     | Description                                              |
    |-----------|----------|----------------------------------------------------------|
    | `name`    | String   | The name of the strategy (i.e. what you call from `and`) |
    | `factory` | function | Factory function that returns the plan to be executed.   |

    Since:

    - 3.5.0
- name: afterAll
  id: global#afterAll
  summary: Run some shared teardown once after all of the specs in the describe are run
  belongs_to: Global
  description: |-
    #### afterAll(functionopt, timeoutopt)

    Run some shared teardown once after all of the specs in the [`describe`](global#describe) are run.

    *Note:* Be careful, sharing the teardown from a afterAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.

    ##### Parameters:

    | Name       | Type                                                      | Attributes   | Default                                                                 | Description                                             |
    |------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|---------------------------------------------------------|
    | `function` |  [implementationCallback](global#implementationCallback)  | \<optional\> |                                                                         | Function that contains the code to teardown your specs. |
    | `timeout`  | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async afterAll.                   |

    Since:

    - 2.1.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: afterEach
  id: global#afterEach
  summary: Run some shared teardown after each of the specs in the describe in which it is called
  belongs_to: Global
  description: |-
    #### afterEach(functionopt, timeoutopt)

    Run some shared teardown after each of the specs in the [`describe`](global#describe) in which it is called.

    ##### Parameters:

    | Name       | Type                                                      | Attributes   | Default                                                                 | Description                                             |
    |------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|---------------------------------------------------------|
    | `function` |  [implementationCallback](global#implementationCallback)  | \<optional\> |                                                                         | Function that contains the code to teardown your specs. |
    | `timeout`  | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async afterEach.                  |

    Since:

    - 1.3.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: all
  id: spy_calls#all
  summary: Get the raw calls array for this spy
  belongs_to: 'Namespace: calls'
  description: |-
    #### all() → {Array.\<[Spy.callData](spy#.callData)\>}

    Get the raw calls array for this spy.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Array.\<[Spy.callData](spy#.callData)\>
- name: allArgs
  id: spy_calls#allArgs
  summary: Get all of the arguments for each invocation of this spy in the order they were received
  belongs_to: 'Namespace: calls'
  description: |-
    #### allArgs() → {Array}

    Get all of the arguments for each invocation of this spy in the order they were received.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Array
- name: allowRespy
  id: env#allowRespy
  summary: Configures whether Jasmine should allow the same function to be spied on more than once during the execution of a spec
  belongs_to: 'Class: Env'
  description: |-
    #### allowRespy(allow)

    Configures whether Jasmine should allow the same function to be spied on more than once during the execution of a spec. By default, spying on a function that is already a spy will cause an error.

    ##### Parameters:

    | Name    | Type    | Description               |
    |---------|---------|---------------------------|
    | `allow` | boolean | Whether to allow respying |

    Since:

    - 2.5.0
- name: already
  id: async-matchers#already
  summary: Fail as soon as possible if the actual is pending
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### already :[async-matchers](async-matchers)

    Fail as soon as possible if the actual is pending. Otherwise evaluate the matcher.

    ##### Type:

    -  [async-matchers](async-matchers)

    Since:

    - 3.8.0

    ##### Examples

    ``` javascript
    await expectAsync(myPromise).already.toBeResolved();
    ```

    ``` javascript
    return expectAsync(myPromise).already.toBeResolved();
    ```
- name: and
  id: spy#and
  summary: Accesses the default strategy for the spy
  belongs_to: 'Class: Spy'
  description: |-
    #### and :[SpyStrategy](spystrategy)

    Accesses the default strategy for the spy. This strategy will be used whenever the spy is called with arguments that don't match any strategy created with [`Spy#withArgs`](spy#withArgs).

    ##### Type:

    -  [SpyStrategy](spystrategy)

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    spyOn(someObj, 'func').and.returnValue(42);
    ```

    ### Methods
- name: any
  id: spy_calls#any
  summary: Check whether this spy has been invoked
  belongs_to: 'Namespace: calls'
  description: |-
    #### any() → {Boolean}

    Check whether this spy has been invoked.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Boolean
- name: any
  id: jasmine#.any
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) any(clazz)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is an instance of the specified class/constructor.

    ##### Parameters:

    | Name    | Type        | Description                       |
    |---------|-------------|-----------------------------------|
    | `clazz` | Constructor | The constructor to check against. |

    Since:

    - 1.3.0
- name: anything
  id: jasmine#.anything
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) anything()

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is not `null` and not `undefined`.

    Since:

    - 2.2.0
- name: argsFor
  id: spy_calls#argsFor
  summary: Get the arguments that were passed to a specific invocation of this spy
  belongs_to: 'Namespace: calls'
  description: |-
    #### argsFor(index) → {Array}

    Get the arguments that were passed to a specific invocation of this spy.

    ##### Parameters:

    | Name    | Type    | Description                   |
    |---------|---------|-------------------------------|
    | `index` | Integer | The 0-based invocation index. |

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Array
- name: arrayContaining
  id: jasmine#.arrayContaining
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) arrayContaining(sample)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is an `Array` that contains at least the elements in the sample.

    ##### Parameters:

    | Name     | Type  | Description |
    |----------|-------|-------------|
    | `sample` | Array |             |

    Since:

    - 2.2.0
- name: arrayWithExactContents
  id: jasmine#.arrayWithExactContents
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) arrayWithExactContents(sample)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is an `Array` that contains all of the elements in the sample in any order.

    ##### Parameters:

    | Name     | Type  | Description |
    |----------|-------|-------------|
    | `sample` | Array |             |

    Since:

    - 2.8.0
- name: asymmetricMatch
  id: asymmetricequalitytester#asymmetricMatch
  summary: null
  belongs_to: 'Interface: AsymmetricEqualityTester'
  description: |-
    #### asymmetricMatch(value, matchersUtil) → {Boolean}

    Determines whether a value matches this tester

    ##### Parameters:

    | Name           | Type                           | Description                         |
    |----------------|--------------------------------|-------------------------------------|
    | `value`        | any                            | The value to test                   |
    | `matchersUtil` |  [MatchersUtil](matchersutil)  | utilities for testing equality, etc |

    ##### Returns:

    Type

    Boolean
- name: autoCleanClosures
  id: configuration#autoCleanClosures
  summary: Clean closures when a suite is done running (done by clearing the stored function reference)
  belongs_to: 'Interface: Configuration'
  description: |-
    #### autoCleanClosures :boolean

    Clean closures when a suite is done running (done by clearing the stored function reference). This prevents memory leaks, but you won't be able to run jasmine multiple times.

    ##### Type:

    - boolean

    Since:

    - 3.10.0

    Default Value:

    - true
- name: beforeAll
  id: global#beforeAll
  summary: Run some shared setup once before all of the specs in the describe are run
  belongs_to: Global
  description: |-
    #### beforeAll(functionopt, timeoutopt)

    Run some shared setup once before all of the specs in the [`describe`](global#describe) are run.

    *Note:* Be careful, sharing the setup from a beforeAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.

    ##### Parameters:

    | Name       | Type                                                      | Attributes   | Default                                                                 | Description                                          |
    |------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|------------------------------------------------------|
    | `function` |  [implementationCallback](global#implementationCallback)  | \<optional\> |                                                                         | Function that contains the code to setup your specs. |
    | `timeout`  | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async beforeAll.               |

    Since:

    - 2.1.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: beforeEach
  id: global#beforeEach
  summary: Run some shared setup before each of the specs in the describe in which it is called
  belongs_to: Global
  description: |-
    #### beforeEach(functionopt, timeoutopt)

    Run some shared setup before each of the specs in the [`describe`](global#describe) in which it is called.

    ##### Parameters:

    | Name       | Type                                                      | Attributes   | Default                                                                 | Description                                          |
    |------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|------------------------------------------------------|
    | `function` |  [implementationCallback](global#implementationCallback)  | \<optional\> |                                                                         | Function that contains the code to setup your specs. |
    | `timeout`  | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async beforeEach.              |

    Since:

    - 1.3.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: boot
  id: module-jasmine-core#.boot
  summary: Boots a copy of Jasmine and returns an object as described in jasmine
  belongs_to: 'Module: jasmine-core'
  description: |-
    #### (static) boot :function

    Boots a copy of Jasmine and returns an object as described in [`jasmine`](jasmine).

    ##### Type:

    - function
- name: callData
  id: spy#.callData
  summary: null
  belongs_to: 'Class: Spy'
  description: |-
    #### (static) callData

    ##### Properties:

    | Name              | Type   | Description                                       |
    |-------------------|--------|---------------------------------------------------|
    | `object`          | object | `this` context for the invocation.                |
    | `invocationOrder` | number | Order of the invocation.                          |
    | `args`            | Array  | The arguments passed for this invocation.         |
    | `returnValue`     |        | The value that was returned from this invocation. |
- name: callFake
  id: spystrategy#callFake
  summary: Tell the spy to call a fake implementation when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### callFake(fn)

    Tell the spy to call a fake implementation when invoked.

    ##### Parameters:

    | Name | Type     | Description                                        |
    |------|----------|----------------------------------------------------|
    | `fn` | function | The function to invoke with the passed parameters. |

    Since:

    - 2.0.0
- name: callThrough
  id: spystrategy#callThrough
  summary: Tell the spy to call through to the real implementation when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### callThrough()

    Tell the spy to call through to the real implementation when invoked.

    Since:

    - 2.0.0
- name: children
  id: suite#children
  summary: The suite's children
  belongs_to: 'Interface: Suite'
  description: |-
    #### children :Array.\<([Spec](spec)\|[Suite](suite))\>

    The suite's children.

    ##### Type:

    - Array.\<([Spec](spec)\|[Suite](suite))\>

    Since:

    - 2.0.0

    #### children :Array.\<([Spec](spec)\|[Suite](suite))\>

    The suite's children.

    ##### Type:

    - Array.\<([Spec](spec)\|[Suite](suite))\>
- name: 'Class: Clock'
  id: clock
  summary: Jasmine's mock clock is used when testing time dependent code
  description: "# Class: Clock\n\n## Clock\n\nJasmine's mock clock is used when testing time dependent code.  \n*Note:* Do not construct this directly. You can get the current clock with [`jasmine.clock`](jasmine#.clock).\n\nSince:  \n- 1.3.0\n\n### Methods\n\n#### install() → {[Clock](clock)}\n\nInstall the mock clock over the built-in methods.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \n[Clock](clock)\n\n#### mockDate(initialDateopt)\n\nInstruct the installed Clock to also mock the date returned by `new Date()`\n\n##### Parameters:\n\n| Name          | Type | Attributes   | Default | Description            |\n|---------------|------|--------------|---------|------------------------|\n| `initialDate` | Date | \\<optional\\> | now     | The `Date` to provide. |\n\nSince:  \n- 2.1.0\n\n#### tick(millis)\n\nTick the Clock forward, running any enqueued timeouts along the way\n\n##### Parameters:\n\n| Name     | Type | Description                         |\n|----------|------|-------------------------------------|\n| `millis` | int  | The number of milliseconds to tick. |\n\nSince:  \n- 1.3.0\n\n#### uninstall()\n\nUninstall the mock clock, returning the built-in methods to their places.\n\nSince:  \n- 2.0.0\n\n#### withMock(closure)\n\nExecute a function with a mocked Clock\n\nThe clock will be [`install`](clock#install)ed before the function is called and [`uninstall`](clock#uninstall)ed in a `finally` after the function completes.\n\n##### Parameters:\n\n| Name      | Type     | Description                |\n|-----------|----------|----------------------------|\n| `closure` | function | The function to be called. |\n\nSince:  \n- 2.3.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Clock.html](https://jasmine.github.io/api/4.0/Clock.html)"
- name: 'Class: Env'
  id: env
  summary: The Jasmine environment
  description: "# Class: Env\n\n## Env\n\nThe Jasmine environment.  \n*Note:* Do not construct this directly. You can obtain the Env instance by calling [`jasmine.getEnv`](jasmine#.getEnv).\n\nSince:  \n- 2.0.0\n\n### Methods\n\n#### addReporter(reporterToAdd)\n\nAdd a custom reporter to the Jasmine environment.\n\n##### Parameters:\n\n| Name            | Type                 | Description               |\n|-----------------|----------------------|---------------------------|\n| `reporterToAdd` | [Reporter](reporter) | The reporter to be added. |\n\nSince:  \n- 2.0.0\n\nSee:  \n- [custom reporter](https://jasmine.github.io/tutorials/custom_reporter)\n\n#### allowRespy(allow)\n\nConfigures whether Jasmine should allow the same function to be spied on more than once during the execution of a spec. By default, spying on a function that is already a spy will cause an error.\n\n##### Parameters:\n\n| Name    | Type    | Description               |\n|---------|---------|---------------------------|\n| `allow` | boolean | Whether to allow respying |\n\nSince:  \n- 2.5.0\n\n#### clearReporters()\n\nClear all registered reporters\n\nSince:  \n- 2.5.2\n\n#### configuration() → {[Configuration](configuration)}\n\nGet the current configuration for your jasmine environment\n\nSince:  \n- 3.3.0\n\n##### Returns:\n\nType  \n[Configuration](configuration)\n\n#### configure(configuration)\n\nConfigure your jasmine environment\n\n##### Parameters:\n\n| Name            | Type                           | Description |\n|-----------------|--------------------------------|-------------|\n| `configuration` | [Configuration](configuration) |             |\n\nSince:  \n- 3.3.0\n\n#### deprecated(deprecation, optionsopt)\n\nCauses a deprecation warning to be logged to the console and reported to reporters.\n\nThe optional second parameter is an object that can have either of the following properties:\n\nomitStackTrace: Whether to omit the stack trace. Optional. Defaults to false. This option is ignored if the deprecation is an Error. Set this when the stack trace will not contain anything that helps the user find the source of the deprecation.\n\nignoreRunnable: Whether to log the deprecation on the root suite, ignoring the spec or suite that's running when it happens. Optional. Defaults to false.\n\n##### Parameters:\n\n| Name          | Type            | Attributes   | Description                                |\n|---------------|-----------------|--------------|--------------------------------------------|\n| `deprecation` | String \\| Error |              | The deprecation message                    |\n| `options`     | Object          | \\<optional\\> | Optional extra options, as described above |\n\nSince:  \n- 2.99\n\n#### execute(runnablesToRunopt, onCompleteopt) → {Promise.\\<[JasmineDoneInfo](global#JasmineDoneInfo)\\>}\n\nExecutes the specs.\n\nIf called with no parameters or with a falsy value as the first parameter, all specs will be executed except those that are excluded by a [`spec filter`](configuration#specFilter) or other mechanism. If the first parameter is a list of spec/suite IDs, only those specs/suites will be run.\n\nBoth parameters are optional, but a completion callback is only valid as the second parameter. To specify a completion callback but not a list of specs/suites to run, pass null or undefined as the first parameter. The completion callback is supported for backward compatibility. In most cases it will be more convenient to use the returned promise instead.\n\nexecute should not be called more than once unless the env has been configured with `{autoCleanClosures: false}`.\n\nexecute returns a promise. The promise will be resolved to the same [`overall result`](global#JasmineDoneInfo) that's passed to a reporter's `jasmineDone` method, even if the suite did not pass. To determine whether the suite passed, check the value that the promise resolves to or use a [`Reporter`](reporter).\n\n##### Parameters:\n\n| Name             | Type             | Attributes   | Description                                           |\n|------------------|------------------|--------------|-------------------------------------------------------|\n| `runnablesToRun` | Array.\\<string\\> | \\<optional\\> | IDs of suites and/or specs to run                     |\n| `onComplete`     | function         | \\<optional\\> | Function that will be called after all specs have run |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nPromise.\\<[JasmineDoneInfo](global#JasmineDoneInfo)\\>\n\n#### provideFallbackReporter(reporterToAdd)\n\nProvide a fallback reporter if no other reporters have been specified.\n\n##### Parameters:\n\n| Name            | Type                 | Description  |\n|-----------------|----------------------|--------------|\n| `reporterToAdd` | [Reporter](reporter) | The reporter |\n\nSince:  \n- 2.5.0\n\nSee:  \n- [custom reporter](https://jasmine.github.io/tutorials/custom_reporter)\n\n#### setSpecProperty(key, value)\n\nSets a user-defined property that will be provided to reporters as part of the properties field of [`SpecResult`](global#SpecResult)\n\n##### Parameters:\n\n| Name    | Type   | Description               |\n|---------|--------|---------------------------|\n| `key`   | String | The name of the property  |\n| `value` | \\*     | The value of the property |\n\nSince:  \n- 3.6.0\n\n#### setSuiteProperty(key, value)\n\nSets a user-defined property that will be provided to reporters as part of the properties field of [`SuiteResult`](global#SuiteResult)\n\n##### Parameters:\n\n| Name    | Type   | Description               |\n|---------|--------|---------------------------|\n| `key`   | String | The name of the property  |\n| `value` | \\*     | The value of the property |\n\nSince:  \n- 3.6.0\n\n#### topSuite() → {[Suite](suite)}\n\nProvides the root suite, through which all suites and specs can be accessed.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nthe root suite\n\nType  \n[Suite](suite)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Env.html](https://jasmine.github.io/api/4.0/Env.html)"
- name: 'Class: jsApiReporter'
  id: jsapireporter
  summary: Reporter added by default in boot.js to record results for retrieval in javascript code
  description: "# Class: jsApiReporter\n\n## jsApiReporter\n\n[`Reporter`](reporter) added by default in `boot.js` to record results for retrieval in javascript code. An instance is made available as `jsApiReporter` on the global object.\n\n### Methods\n\n#### executionTime() → {Number}\n\nGet the number of milliseconds it took for the full Jasmine suite to run.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nNumber\n\n#### specResults(index, length) → {Array.\\<[SpecResult](global#SpecResult)\\>}\n\nGet the results for a set of specs.\n\nRetrievable in slices for easier serialization.\n\n##### Parameters:\n\n| Name     | Type   | Description                                   |\n|----------|--------|-----------------------------------------------|\n| `index`  | Number | The position in the specs list to start from. |\n| `length` | Number | Maximum number of specs results to return.    |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nArray.\\<[SpecResult](global#SpecResult)\\>\n\n#### specs() → {Array.\\<[SpecResult](global#SpecResult)\\>}\n\nGet all spec results.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nArray.\\<[SpecResult](global#SpecResult)\\>\n\n#### status() → {String}\n\nGet the current status for the Jasmine environment.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\n- One of `loaded`, `started`, or `done`\n\nType  \nString\n\n#### suiteResults(index, length) → {Array.\\<[SuiteResult](global#SuiteResult)\\>}\n\nGet the results for a set of suites.\n\nRetrievable in slices for easier serialization.\n\n##### Parameters:\n\n| Name     | Type   | Description                                    |\n|----------|--------|------------------------------------------------|\n| `index`  | Number | The position in the suites list to start from. |\n| `length` | Number | Maximum number of suite results to return.     |\n\nSince:  \n- 2.1.0\n\n##### Returns:\n\nType  \nArray.\\<[SuiteResult](global#SuiteResult)\\>\n\n#### suites() → {Object}\n\nGet all of the suites in a single object, with their `id` as the key.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\n- Map of suite id to [`SuiteResult`](global#SuiteResult)\n\nType  \nObject\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/jsApiReporter.html](https://jasmine.github.io/api/4.0/jsApiReporter.html)"
- name: 'Class: MatchersUtil'
  id: matchersutil
  summary: Utilities for use in implementing matchers
  description: "# Class: MatchersUtil\n\n## MatchersUtil\n\nUtilities for use in implementing matchers.  \n*Note:* Do not construct this directly. Jasmine will construct one and pass it to matchers and asymmetric equality testers.\n\n### Methods\n\n#### contains(haystack, needle) → {boolean}\n\nDetermines whether `haystack` contains `needle`, using the same comparison logic as [`MatchersUtil#equals`](matchersutil#equals).\n\n##### Parameters:\n\n| Name       | Type | Description              |\n|------------|------|--------------------------|\n| `haystack` | \\*   | The collection to search |\n| `needle`   | \\*   | The value to search for  |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nTrue if `needle` was found in `haystack`\n\nType  \nboolean\n\n#### equals(a, b) → {boolean}\n\nDetermines whether two values are deeply equal to each other.\n\n##### Parameters:\n\n| Name | Type | Description                 |\n|------|------|-----------------------------|\n| `a`  | \\*   | The first value to compare  |\n| `b`  | \\*   | The second value to compare |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nTrue if the values are equal\n\nType  \nboolean\n\n#### pp(value) → {string}\n\nFormats a value for use in matcher failure messages and similar contexts, taking into account the current set of custom value formatters.\n\n##### Parameters:\n\n| Name    | Type | Description               |\n|---------|------|---------------------------|\n| `value` | \\*   | The value to pretty-print |\n\nSince:  \n- 3.6.0\n\n##### Returns:\n\nThe pretty-printed value\n\nType  \nstring\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/MatchersUtil.html](https://jasmine.github.io/api/4.0/MatchersUtil.html)"
- name: 'Class: Spy'
  id: spy
  summary: 'Note: Do not construct this directly'
  description: "# Class: Spy\n\n## Spy\n\n*Note:* Do not construct this directly. Use [`spyOn`](global#spyOn), [`spyOnProperty`](global#spyOnProperty), [`jasmine.createSpy`](jasmine#.createSpy), or [`jasmine.createSpyObj`](jasmine#.createSpyObj) instead.\n\n### Namespaces\n\n[calls](spy_calls)\n\n### Members\n\n#### (static) callData\n\n##### Properties:\n\n| Name              | Type   | Description                                       |\n|-------------------|--------|---------------------------------------------------|\n| `object`          | object | `this` context for the invocation.                |\n| `invocationOrder` | number | Order of the invocation.                          |\n| `args`            | Array  | The arguments passed for this invocation.         |\n| `returnValue`     |        | The value that was returned from this invocation. |\n\n#### and :[SpyStrategy](spystrategy)\n\nAccesses the default strategy for the spy. This strategy will be used whenever the spy is called with arguments that don't match any strategy created with [`Spy#withArgs`](spy#withArgs).\n\n##### Type:\n\n- [SpyStrategy](spystrategy)\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nspyOn(someObj, 'func').and.returnValue(42);\n```\n\n### Methods\n\n#### withArgs(…args) → {[SpyStrategy](spystrategy)}\n\nSpecifies a strategy to be used for calls to the spy that have the specified arguments.\n\n##### Parameters:\n\n| Name   | Type | Attributes     | Description            |\n|--------|------|----------------|------------------------|\n| `args` | \\*   | \\<repeatable\\> | The arguments to match |\n\nSince:  \n- 3.0.0\n\n##### Returns:\n\nType  \n[SpyStrategy](spystrategy)\n\n##### Example\n\n``` javascript\nspyOn(someObj, 'func').withArgs(1, 2, 3).and.returnValue(42);\nsomeObj.func(1, 2, 3); // returns 42\n```\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Spy.html](https://jasmine.github.io/api/4.0/Spy.html)"
- name: clearReporters
  id: env#clearReporters
  summary: null
  belongs_to: 'Class: Env'
  description: |-
    #### clearReporters()

    Clear all registered reporters

    Since:

    - 2.5.2
- name: clock
  id: jasmine#.clock
  summary: Get the currently booted mock {Clock} for this Jasmine environment
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) clock() → {[Clock](clock)}

    Get the currently booted mock {Clock} for this Jasmine environment.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    [Clock](clock)
- name: configuration
  id: env#configuration
  summary: null
  belongs_to: 'Class: Env'
  description: |-
    #### configuration() → {[Configuration](configuration)}

    Get the current configuration for your jasmine environment

    Since:

    - 3.3.0

    ##### Returns:

    Type

    [Configuration](configuration)
- name: configure
  id: env#configure
  summary: null
  belongs_to: 'Class: Env'
  description: |-
    #### configure(configuration)

    Configure your jasmine environment

    ##### Parameters:

    | Name            | Type                             | Description |
    |-----------------|----------------------------------|-------------|
    | `configuration` |  [Configuration](configuration)  |             |

    Since:

    - 3.3.0
- name: contains
  id: matchersutil#contains
  summary: Determines whether haystack contains needle, using the same comparison logic as MatchersUtil#equals
  belongs_to: 'Class: MatchersUtil'
  description: |-
    #### contains(haystack, needle) → {boolean}

    Determines whether `haystack` contains `needle`, using the same comparison logic as [`MatchersUtil#equals`](matchersutil#equals).

    ##### Parameters:

    | Name       | Type | Description              |
    |------------|------|--------------------------|
    | `haystack` | \*   | The collection to search |
    | `needle`   | \*   | The value to search for  |

    Since:

    - 2.0.0

    ##### Returns:

    True if `needle` was found in `haystack`

    Type

    boolean
- name: count
  id: spy_calls#count
  summary: Get the number of invocations of this spy
  belongs_to: 'Namespace: calls'
  description: |-
    #### count() → {Integer}

    Get the number of invocations of this spy.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Integer
- name: createSpy
  id: jasmine#.createSpy
  summary: Create a bare Spy object
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) createSpy(nameopt, originalFnopt) → {[Spy](spy)}

    Create a bare [`Spy`](spy) object. This won't be installed anywhere and will not have any implementation behind it.

    ##### Parameters:

    | Name         | Type     | Attributes   | Description                                                       |
    |--------------|----------|--------------|-------------------------------------------------------------------|
    | `name`       | String   | \<optional\> | Name to give the spy. This will be displayed in failure messages. |
    | `originalFn` | function | \<optional\> | Function to act as the real implementation.                       |

    Since:

    - 1.3.0

    ##### Returns:

    Type

    [Spy](spy)
- name: createSpyObj
  id: jasmine#.createSpyObj
  summary: Create an object with multiple Spys as its members
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) createSpyObj(baseNameopt, methodNames, propertyNamesopt) → {Object}

    Create an object with multiple [`Spy`](spy)s as its members.

    ##### Parameters:

    | Name            | Type                       | Attributes   | Description                                                                                                           |
    |-----------------|----------------------------|--------------|-----------------------------------------------------------------------------------------------------------------------|
    | `baseName`      | String                     | \<optional\> | Base name for the spies in the object.                                                                                |
    | `methodNames`   | Array.\<String\> \| Object |              | Array of method names to create spies for, or Object whose keys will be method names and values the `returnValue`.    |
    | `propertyNames` | Array.\<String\> \| Object | \<optional\> | Array of property names to create spies for, or Object whose keys will be propertynames and values the `returnValue`. |

    Since:

    - 1.3.0

    ##### Returns:

    Type

    Object
- name: debugLog
  id: jasmine#.debugLog
  summary: Logs a message for use in debugging
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) debugLog(msg)

    Logs a message for use in debugging. If the spec fails, trace messages will be included in the [`result`](global#SpecResult) passed to the reporter's specDone method.

    This method should be called only when a spec (including any associated beforeEach or afterEach functions) is running.

    ##### Parameters:

    | Name  | Type   | Description        |
    |-------|--------|--------------------|
    | `msg` | String | The message to log |

    Since:

    - 4.0.0
- name: DebugLogEntry
  id: global#DebugLogEntry
  summary: null
  belongs_to: Global
  description: |-
    #### DebugLogEntry

    ##### Properties:

    | Name        | Type   | Description                                                                   |
    |-------------|--------|-------------------------------------------------------------------------------|
    | `message`   | String | The message that was passed to [`jasmine.debugLog`](jasmine#.debugLog).       |
    | `timestamp` | number | The time when the entry was added, in milliseconds from the spec's start time |
- name: DEFAULT_TIMEOUT_INTERVAL
  id: jasmine#.DEFAULT_TIMEOUT_INTERVAL
  summary: Default number of milliseconds Jasmine will wait for an asynchronous spec, before, or after function to complete
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) DEFAULT_TIMEOUT_INTERVAL

    Default number of milliseconds Jasmine will wait for an asynchronous spec, before, or after function to complete. This can be overridden on a case by case basis by passing a time limit as the third argument to [`it`](global#it), [`beforeEach`](global#beforeEach), [`afterEach`](global#afterEach), [`beforeAll`](global#beforeAll), or [`afterAll`](global#afterAll). The value must be no greater than the largest number of milliseconds supported by setTimeout, which is usually 2147483647.

    While debugging tests, you may want to set this to a large number (or pass a large number to one of the functions mentioned above) so that Jasmine does not move on to after functions or the next spec while you're debugging.

    Since:

    - 1.3.0

    Default Value:

    - 5000
- name: deprecated
  id: env#deprecated
  summary: Causes a deprecation warning to be logged to the console and reported to reporters
  belongs_to: 'Class: Env'
  description: |-
    #### deprecated(deprecation, optionsopt)

    Causes a deprecation warning to be logged to the console and reported to reporters.

    The optional second parameter is an object that can have either of the following properties:

    omitStackTrace: Whether to omit the stack trace. Optional. Defaults to false. This option is ignored if the deprecation is an Error. Set this when the stack trace will not contain anything that helps the user find the source of the deprecation.

    ignoreRunnable: Whether to log the deprecation on the root suite, ignoring the spec or suite that's running when it happens. Optional. Defaults to false.

    ##### Parameters:

    | Name          | Type            | Attributes   | Description                                |
    |---------------|-----------------|--------------|--------------------------------------------|
    | `deprecation` | String \| Error |              | The deprecation message                    |
    | `options`     | Object          | \<optional\> | Optional extra options, as described above |

    Since:

    - 2.99
- name: describe
  id: global#describe
  summary: Create a group of specs (often called a suite)
  belongs_to: Global
  description: |-
    #### describe(description, specDefinitions)

    Create a group of specs (often called a suite).

    Calls to `describe` can be nested within other calls to compose your suite as a tree.

    ##### Parameters:

    | Name              | Type     | Description                                                            |
    |-------------------|----------|------------------------------------------------------------------------|
    | `description`     | String   | Textual description of the group                                       |
    | `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |

    Since:

    - 1.3.0
- name: description
  id: spec#description
  summary: The description passed to the it that created this spec
  belongs_to: 'Interface: Spec'
  description: |-
    #### (readonly) description :string

    The description passed to the [`it`](global#it) that created this spec.

    ##### Type:

    - string

    Since:

    - 2.0.0

    #### (readonly) description :string

    The description passed to the [`it`](global#it) that created this spec.

    ##### Type:

    - string
- name: description
  id: suite#description
  summary: The description passed to the describe that created this suite
  belongs_to: 'Interface: Suite'
  description: |-
    #### (readonly) description :string

    The description passed to the [`describe`](global#describe) that created this suite.

    ##### Type:

    - string

    Since:

    - 2.0.0

    #### (readonly) description :string

    The description passed to the [`describe`](global#describe) that created this suite.

    ##### Type:

    - string

    &nbsp;
- name: empty
  id: jasmine#.empty
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) empty()

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is empty.

    Since:

    - 3.1.0
- name: equals
  id: matchersutil#equals
  summary: Determines whether two values are deeply equal to each other
  belongs_to: 'Class: MatchersUtil'
  description: |-
    #### equals(a, b) → {boolean}

    Determines whether two values are deeply equal to each other.

    ##### Parameters:

    | Name | Type | Description                 |
    |------|------|-----------------------------|
    | `a`  | \*   | The first value to compare  |
    | `b`  | \*   | The second value to compare |

    Since:

    - 2.0.0

    ##### Returns:

    True if the values are equal

    Type

    boolean
- name: exec
  id: spystrategy#exec
  summary: Execute the current spy strategy
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### exec()

    Execute the current spy strategy.

    Since:

    - 2.0.0
- name: execute
  id: env#execute
  summary: Executes the specs
  belongs_to: 'Class: Env'
  description: |-
    #### execute(runnablesToRunopt, onCompleteopt) → {Promise.\<[JasmineDoneInfo](global#JasmineDoneInfo)\>}

    Executes the specs.

    If called with no parameters or with a falsy value as the first parameter, all specs will be executed except those that are excluded by a [`spec filter`](configuration#specFilter) or other mechanism. If the first parameter is a list of spec/suite IDs, only those specs/suites will be run.

    Both parameters are optional, but a completion callback is only valid as the second parameter. To specify a completion callback but not a list of specs/suites to run, pass null or undefined as the first parameter. The completion callback is supported for backward compatibility. In most cases it will be more convenient to use the returned promise instead.

    execute should not be called more than once unless the env has been configured with `{autoCleanClosures: false}`.

    execute returns a promise. The promise will be resolved to the same [`overall result`](global#JasmineDoneInfo) that's passed to a reporter's `jasmineDone` method, even if the suite did not pass. To determine whether the suite passed, check the value that the promise resolves to or use a [`Reporter`](reporter).

    ##### Parameters:

    | Name             | Type             | Attributes   | Description                                           |
    |------------------|------------------|--------------|-------------------------------------------------------|
    | `runnablesToRun` | Array.\<string\> | \<optional\> | IDs of suites and/or specs to run                     |
    | `onComplete`     | function         | \<optional\> | Function that will be called after all specs have run |

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Promise.\<[JasmineDoneInfo](global#JasmineDoneInfo)\>
- name: executionTime
  id: jsapireporter#executionTime
  summary: Get the number of milliseconds it took for the full Jasmine suite to run
  belongs_to: 'Class: jsApiReporter'
  description: |-
    #### executionTime() → {Number}

    Get the number of milliseconds it took for the full Jasmine suite to run.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Number
- name: expect
  id: global#expect
  summary: Create an expectation for a spec
  belongs_to: Global
  description: |-
    #### expect(actual) → {[matchers](matchers)}

    Create an expectation for a spec.

    ##### Parameters:

    | Name     | Type   | Description                                         |
    |----------|--------|-----------------------------------------------------|
    | `actual` | Object | Actual computed value to test expectations against. |

    Since:

    - 1.3.0

    ##### Returns:

    Type

    [matchers](matchers)
- name: expectAsync
  id: global#expectAsync
  summary: Create an asynchronous expectation for a spec
  belongs_to: Global
  description: |-
    #### expectAsync(actual) → {[async-matchers](async-matchers)}

    Create an asynchronous expectation for a spec. Note that the matchers that are provided by an asynchronous expectation all return promises which must be either returned from the spec or waited for using `await` in order for Jasmine to associate them with the correct spec.

    ##### Parameters:

    | Name     | Type   | Description                                         |
    |----------|--------|-----------------------------------------------------|
    | `actual` | Object | Actual computed value to test expectations against. |

    Since:

    - 3.3.0

    ##### Returns:

    Type

    [async-matchers](async-matchers)

    ##### Examples

    ``` javascript
    await expectAsync(somePromise).toBeResolved();
    ```

    ``` javascript
    return expectAsync(somePromise).toBeResolved();
    ```
- name: Expectation
  id: global#Expectation
  summary: null
  belongs_to: Global
  description: |-
    #### Expectation

    ##### Properties:

    | Name              | Type                | Description                                                                                                                                 |
    |-------------------|---------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
    | `matcherName`     | String              | The name of the matcher that was executed for this expectation.                                                                             |
    | `message`         | String              | The failure message for the expectation.                                                                                                    |
    | `stack`           | String              | The stack trace for the failure if available.                                                                                               |
    | `passed`          | Boolean             | Whether the expectation passed or failed.                                                                                                   |
    | `expected`        | Object              | If the expectation failed, what was the expected value.                                                                                     |
    | `actual`          | Object              | If the expectation failed, what actual value was produced.                                                                                  |
    | `globalErrorType` | String \| undefined | The type of an error that is reported on the top suite. Valid values are undefined, "afterAll", "load", "lateExpectation", and "lateError". |
- name: fail
  id: global#fail
  summary: Explicitly mark a spec as failed
  belongs_to: Global
  description: |-
    #### fail(erroropt)

    Explicitly mark a spec as failed.

    ##### Parameters:

    | Name    | Type            | Attributes   | Description             |
    |---------|-----------------|--------------|-------------------------|
    | `error` | String \| Error | \<optional\> | Reason for the failure. |

    Since:

    - 2.1.0
- name: failSpecWithNoExpectations
  id: configuration#failSpecWithNoExpectations
  summary: Whether to fail the spec if it ran no expectations
  belongs_to: 'Interface: Configuration'
  description: |-
    #### failSpecWithNoExpectations :Boolean

    Whether to fail the spec if it ran no expectations. By default a spec that ran no expectations is reported as passed. Setting this to true will report such spec as a failure.

    ##### Type:

    - Boolean

    Since:

    - 3.5.0

    Default Value:

    - false
- name: falsy
  id: jasmine#.falsy
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) falsy()

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is `null`, `undefined`, `0`, `false` or anything falsey.

    Since:

    - 3.1.0
- name: fdescribe
  id: global#fdescribe
  summary: null
  belongs_to: Global
  description: |-
    #### fdescribe(description, specDefinitions)

    A focused [`describe`](global#describe)

    If suites or specs are focused, only those that are focused will be executed

    ##### Parameters:

    | Name              | Type     | Description                                                            |
    |-------------------|----------|------------------------------------------------------------------------|
    | `description`     | String   | Textual description of the group                                       |
    | `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |

    Since:

    - 2.1.0

    See:

    - [fit](global#fit)
- name: first
  id: spy_calls#first
  summary: Get the first invocation of this spy
  belongs_to: 'Namespace: calls'
  description: |-
    #### first() → {ObjecSpy.callData}

    Get the first invocation of this spy.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    ObjecSpy.callData
- name: fit
  id: global#fit
  summary: If suites or specs are focused, only those that are focused will be executed
  belongs_to: Global
  description: |-
    #### fit(description, testFunction, timeoutopt)

    A focused [`it`](global#it)

    If suites or specs are focused, only those that are focused will be executed.

    ##### Parameters:

    | Name           | Type                                                      | Attributes   | Default                                                                 | Description                                        |
    |----------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|----------------------------------------------------|
    | `description`  | String                                                    |              |                                                                         | Textual description of what this spec is checking. |
    | `testFunction` |  [implementationCallback](global#implementationCallback)  |              |                                                                         | Function that contains the code of your test.      |
    | `timeout`      | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async spec.                  |

    Since:

    - 2.1.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: getEnv
  id: jasmine#.getEnv
  summary: Get the currently booted Jasmine Environment
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) getEnv() → {[Env](env)}

    Get the currently booted Jasmine Environment.

    Since:

    - 1.3.0

    ##### Returns:

    Type

    [Env](env)
- name: getFullName
  id: spec#getFullName
  summary: The full description including all ancestors of this spec
  belongs_to: 'Interface: Spec'
  description: |-
    #### getFullName() → {string}

    The full description including all ancestors of this spec.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    string

    #### getFullName() → {string}

    The full description including all ancestors of this spec.

    ##### Returns:

    Type

    string

    ## Spec

    See:

    - [Configuration#specFilter](configuration#specFilter)

    ### Members
- name: getFullName
  id: suite#getFullName
  summary: The full description including all ancestors of this suite
  belongs_to: 'Interface: Suite'
  description: |-
    #### getFullName() → {string}

    The full description including all ancestors of this suite.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    string

    #### getFullName() → {string}

    The full description including all ancestors of this suite.

    ##### Returns:

    Type

    string

    ## Suite

    See:

    - [Env#topSuite](env#topSuite)

    ### Members
- name: Global
  id: global
  summary: Run some shared teardown once after all of the specs in the describe are run
  description: "# Global\n\n### Methods\n\n#### afterAll(functionopt, timeoutopt)\n\nRun some shared teardown once after all of the specs in the [`describe`](global#describe) are run.\n\n*Note:* Be careful, sharing the teardown from a afterAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.\n\n##### Parameters:\n\n| Name       | Type                                                    | Attributes   | Default                                                                 | Description                                             |\n|------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|---------------------------------------------------------|\n| `function` | [implementationCallback](global#implementationCallback) | \\<optional\\> |                                                                         | Function that contains the code to teardown your specs. |\n| `timeout`  | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async afterAll.                   |\n\nSince:  \n- 2.1.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### afterEach(functionopt, timeoutopt)\n\nRun some shared teardown after each of the specs in the [`describe`](global#describe) in which it is called.\n\n##### Parameters:\n\n| Name       | Type                                                    | Attributes   | Default                                                                 | Description                                             |\n|------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|---------------------------------------------------------|\n| `function` | [implementationCallback](global#implementationCallback) | \\<optional\\> |                                                                         | Function that contains the code to teardown your specs. |\n| `timeout`  | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async afterEach.                  |\n\nSince:  \n- 1.3.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### beforeAll(functionopt, timeoutopt)\n\nRun some shared setup once before all of the specs in the [`describe`](global#describe) are run.\n\n*Note:* Be careful, sharing the setup from a beforeAll makes it easy to accidentally leak state between your specs so that they erroneously pass or fail.\n\n##### Parameters:\n\n| Name       | Type                                                    | Attributes   | Default                                                                 | Description                                          |\n|------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|------------------------------------------------------|\n| `function` | [implementationCallback](global#implementationCallback) | \\<optional\\> |                                                                         | Function that contains the code to setup your specs. |\n| `timeout`  | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async beforeAll.               |\n\nSince:  \n- 2.1.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### beforeEach(functionopt, timeoutopt)\n\nRun some shared setup before each of the specs in the [`describe`](global#describe) in which it is called.\n\n##### Parameters:\n\n| Name       | Type                                                    | Attributes   | Default                                                                 | Description                                          |\n|------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|------------------------------------------------------|\n| `function` | [implementationCallback](global#implementationCallback) | \\<optional\\> |                                                                         | Function that contains the code to setup your specs. |\n| `timeout`  | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async beforeEach.              |\n\nSince:  \n- 1.3.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### describe(description, specDefinitions)\n\nCreate a group of specs (often called a suite).\n\nCalls to `describe` can be nested within other calls to compose your suite as a tree.\n\n##### Parameters:\n\n| Name              | Type     | Description                                                            |\n|-------------------|----------|------------------------------------------------------------------------|\n| `description`     | String   | Textual description of the group                                       |\n| `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |\n\nSince:  \n- 1.3.0\n\n#### expect(actual) → {[matchers](matchers)}\n\nCreate an expectation for a spec.\n\n##### Parameters:\n\n| Name     | Type   | Description                                         |\n|----------|--------|-----------------------------------------------------|\n| `actual` | Object | Actual computed value to test expectations against. |\n\nSince:  \n- 1.3.0\n\n##### Returns:\n\nType  \n[matchers](matchers)\n\n#### expectAsync(actual) → {[async-matchers](async-matchers)}\n\nCreate an asynchronous expectation for a spec. Note that the matchers that are provided by an asynchronous expectation all return promises which must be either returned from the spec or waited for using `await` in order for Jasmine to associate them with the correct spec.\n\n##### Parameters:\n\n| Name     | Type   | Description                                         |\n|----------|--------|-----------------------------------------------------|\n| `actual` | Object | Actual computed value to test expectations against. |\n\nSince:  \n- 3.3.0\n\n##### Returns:\n\nType  \n[async-matchers](async-matchers)\n\n##### Examples\n\n``` javascript\nawait expectAsync(somePromise).toBeResolved();\n```\n\n``` javascript\nreturn expectAsync(somePromise).toBeResolved();\n```\n\n#### fail(erroropt)\n\nExplicitly mark a spec as failed.\n\n##### Parameters:\n\n| Name    | Type            | Attributes   | Description             |\n|---------|-----------------|--------------|-------------------------|\n| `error` | String \\| Error | \\<optional\\> | Reason for the failure. |\n\nSince:  \n- 2.1.0\n\n#### fdescribe(description, specDefinitions)\n\nA focused [`describe`](global#describe)\n\nIf suites or specs are focused, only those that are focused will be executed\n\n##### Parameters:\n\n| Name              | Type     | Description                                                            |\n|-------------------|----------|------------------------------------------------------------------------|\n| `description`     | String   | Textual description of the group                                       |\n| `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |\n\nSince:  \n- 2.1.0\n\nSee:  \n- [fit](global#fit)\n\n#### fit(description, testFunction, timeoutopt)\n\nA focused [`it`](global#it)\n\nIf suites or specs are focused, only those that are focused will be executed.\n\n##### Parameters:\n\n| Name           | Type                                                    | Attributes   | Default                                                                 | Description                                        |\n|----------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|----------------------------------------------------|\n| `description`  | String                                                  |              |                                                                         | Textual description of what this spec is checking. |\n| `testFunction` | [implementationCallback](global#implementationCallback) |              |                                                                         | Function that contains the code of your test.      |\n| `timeout`      | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async spec.                  |\n\nSince:  \n- 2.1.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### it(description, testFunctionopt, timeoutopt)\n\nDefine a single spec. A spec should contain one or more [`expectations`](global#expect) that test the state of the code.\n\nA spec whose expectations all succeed will be passing and a spec with any failures will fail. The name `it` is a pronoun for the test target, not an abbreviation of anything. It makes the spec more readable by connecting the function name `it` and the argument `description` as a complete sentence.\n\n##### Parameters:\n\n| Name           | Type                                                    | Attributes   | Default                                                                 | Description                                                                               |\n|----------------|---------------------------------------------------------|--------------|-------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|\n| `description`  | String                                                  |              |                                                                         | Textual description of what this spec is checking                                         |\n| `testFunction` | [implementationCallback](global#implementationCallback) | \\<optional\\> |                                                                         | Function that contains the code of your test. If not provided the test will be `pending`. |\n| `timeout`      | Int                                                     | \\<optional\\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async spec.                                                         |\n\nSince:  \n- 1.3.0\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n#### pending(messageopt)\n\nMark a spec as pending, expectation results will be ignored.\n\n##### Parameters:\n\n| Name      | Type   | Attributes   | Description                 |\n|-----------|--------|--------------|-----------------------------|\n| `message` | String | \\<optional\\> | Reason the spec is pending. |\n\nSince:  \n- 2.0.0\n\n#### setSpecProperty(key, value)\n\nSets a user-defined property that will be provided to reporters as part of the properties field of [`SpecResult`](global#SpecResult)\n\n##### Parameters:\n\n| Name    | Type   | Description               |\n|---------|--------|---------------------------|\n| `key`   | String | The name of the property  |\n| `value` | \\*     | The value of the property |\n\nSince:  \n- 3.6.0\n\n#### setSuiteProperty(key, value)\n\nSets a user-defined property that will be provided to reporters as part of the properties field of [`SuiteResult`](global#SuiteResult)\n\n##### Parameters:\n\n| Name    | Type   | Description               |\n|---------|--------|---------------------------|\n| `key`   | String | The name of the property  |\n| `value` | \\*     | The value of the property |\n\nSince:  \n- 3.6.0\n\n#### spyOn(obj, methodName) → {[Spy](spy)}\n\nInstall a spy onto an existing object.\n\n##### Parameters:\n\n| Name         | Type   | Description                                            |\n|--------------|--------|--------------------------------------------------------|\n| `obj`        | Object | The object upon which to install the [`Spy`](spy).     |\n| `methodName` | String | The name of the method to replace with a [`Spy`](spy). |\n\nSince:  \n- 1.3.0\n\n##### Returns:\n\nType  \n[Spy](spy)\n\n#### spyOnAllFunctions(obj, includeNonEnumerable) → {Object}\n\nInstalls spies on all writable and configurable properties of an object.\n\n##### Parameters:\n\n| Name                   | Type    | Description                                              |\n|------------------------|---------|----------------------------------------------------------|\n| `obj`                  | Object  | The object upon which to install the [`Spy`](spy)s       |\n| `includeNonEnumerable` | boolean | Whether or not to add spies to non-enumerable properties |\n\nSince:  \n- 3.2.1\n\n##### Returns:\n\nthe spied object\n\nType  \nObject\n\n#### spyOnProperty(obj, propertyName, accessTypeopt) → {[Spy](spy)}\n\nInstall a spy on a property installed with `Object.defineProperty` onto an existing object.\n\n##### Parameters:\n\n| Name           | Type   | Attributes   | Default | Description                                                    |\n|----------------|--------|--------------|---------|----------------------------------------------------------------|\n| `obj`          | Object |              |         | The object upon which to install the [`Spy`](spy)              |\n| `propertyName` | String |              |         | The name of the property to replace with a [`Spy`](spy).       |\n| `accessType`   | String | \\<optional\\> | get     | The access type (get\\|set) of the property to [`Spy`](spy) on. |\n\nSince:  \n- 2.6.0\n\n##### Returns:\n\nType  \n[Spy](spy)\n\n#### xdescribe(description, specDefinitions)\n\nA temporarily disabled [`describe`](global#describe)\n\nSpecs within an `xdescribe` will be marked pending and not executed\n\n##### Parameters:\n\n| Name              | Type     | Description                                                            |\n|-------------------|----------|------------------------------------------------------------------------|\n| `description`     | String   | Textual description of the group                                       |\n| `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |\n\nSince:  \n- 1.3.0\n\n#### xit(description, testFunctionopt)\n\nA temporarily disabled [`it`](global#it)\n\nThe spec will report as `pending` and will not be executed.\n\n##### Parameters:\n\n| Name           | Type                                                    | Attributes   | Description                                                         |\n|----------------|---------------------------------------------------------|--------------|---------------------------------------------------------------------|\n| `description`  | String                                                  |              | Textual description of what this spec is checking.                  |\n| `testFunction` | [implementationCallback](global#implementationCallback) | \\<optional\\> | Function that contains the code of your test. Will not be executed. |\n\nSince:  \n- 1.3.0\n\n### Type Definitions\n\n#### DebugLogEntry\n\n##### Properties:\n\n| Name        | Type   | Description                                                                   |\n|-------------|--------|-------------------------------------------------------------------------------|\n| `message`   | String | The message that was passed to [`jasmine.debugLog`](jasmine#.debugLog).       |\n| `timestamp` | number | The time when the entry was added, in milliseconds from the spec's start time |\n\n#### Expectation\n\n##### Properties:\n\n| Name              | Type                | Description                                                                                                                                 |\n|-------------------|---------------------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| `matcherName`     | String              | The name of the matcher that was executed for this expectation.                                                                             |\n| `message`         | String              | The failure message for the expectation.                                                                                                    |\n| `stack`           | String              | The stack trace for the failure if available.                                                                                               |\n| `passed`          | Boolean             | Whether the expectation passed or failed.                                                                                                   |\n| `expected`        | Object              | If the expectation failed, what was the expected value.                                                                                     |\n| `actual`          | Object              | If the expectation failed, what actual value was produced.                                                                                  |\n| `globalErrorType` | String \\| undefined | The type of an error that is reported on the top suite. Valid values are undefined, \"afterAll\", \"load\", \"lateExpectation\", and \"lateError\". |\n\n#### implementationCallback(doneopt)\n\nCallback passed to parts of the Jasmine base interface.\n\nBy default Jasmine assumes this function completes synchronously. If you have code that you need to test asynchronously, you can declare that you receive a `done` callback, return a Promise, or use the `async` keyword if it is supported in your environment.\n\n##### Parameters:\n\n| Name   | Type     | Attributes   | Description                                                                                                                      |\n|--------|----------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `done` | function | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### JasmineDoneInfo\n\nInformation passed to the [`Reporter#jasmineDone`](reporter#jasmineDone) event.\n\n##### Properties:\n\n| Name                  | Type                                        | Description                                                                               |\n|-----------------------|---------------------------------------------|-------------------------------------------------------------------------------------------|\n| `overallStatus`       | OverallStatus                               | The overall result of the suite: 'passed', 'failed', or 'incomplete'.                     |\n| `totalTime`           | Int                                         | The total time (in ms) that it took to execute the suite                                  |\n| `incompleteReason`    | IncompleteReason                            | Explanation of why the suite was incomplete.                                              |\n| `order`               | Order                                       | Information about the ordering (random or not) of this execution of the suite.            |\n| `failedExpectations`  | Array.\\<[Expectation](global#Expectation)\\> | List of expectations that failed in an [`afterAll`](global#afterAll) at the global level. |\n| `deprecationWarnings` | Array.\\<[Expectation](global#Expectation)\\> | List of deprecation warnings that occurred at the global level.                           |\n\nSince:  \n- 2.4.0\n\n#### JasmineStartedInfo\n\nInformation passed to the [`Reporter#jasmineStarted`](reporter#jasmineStarted) event.\n\n##### Properties:\n\n| Name                | Type  | Description                                                                    |\n|---------------------|-------|--------------------------------------------------------------------------------|\n| `totalSpecsDefined` | Int   | The total number of specs defined in this suite.                               |\n| `order`             | Order | Information about the ordering (random or not) of this execution of the suite. |\n\nSince:  \n- 2.0.0\n\n#### SpecFilter(spec)\n\nA function that takes a spec and returns true if it should be executed or false if it should be skipped.\n\n##### Parameters:\n\n| Name   | Type         | Description                                   |\n|--------|--------------|-----------------------------------------------|\n| `spec` | [Spec](spec) | The spec that the filter is being applied to. |\n\n##### Returns:\n\nboolean\n\n#### SpecResult\n\n##### Properties:\n\n| Name                  | Type                                                    | Description                                                                                             |\n|-----------------------|---------------------------------------------------------|---------------------------------------------------------------------------------------------------------|\n| `id`                  | Int                                                     | The unique id of this spec.                                                                             |\n| `description`         | String                                                  | The description passed to the [`it`](global#it) that created this spec.                                 |\n| `fullName`            | String                                                  | The full description including all ancestors of this spec.                                              |\n| `failedExpectations`  | Array.\\<[Expectation](global#Expectation)\\>             | The list of expectations that failed during execution of this spec.                                     |\n| `passedExpectations`  | Array.\\<[Expectation](global#Expectation)\\>             | The list of expectations that passed during execution of this spec.                                     |\n| `deprecationWarnings` | Array.\\<[Expectation](global#Expectation)\\>             | The list of deprecation warnings that occurred during execution this spec.                              |\n| `pendingReason`       | String                                                  | If the spec is [`pending`](global#pending), this will be the reason.                                    |\n| `status`              | String                                                  | Once the spec has completed, this string represents the pass/fail status of this spec.                  |\n| `duration`            | number                                                  | The time in ms used by the spec execution, including any before/afterEach.                              |\n| `properties`          | Object                                                  | User-supplied properties, if any, that were set using [`Env#setSpecProperty`](env#setSpecProperty)      |\n| `debugLogs`           | Array.\\<[DebugLogEntry](global#DebugLogEntry)\\> \\| null | Messages, if any, that were logged using [`jasmine.debugLog`](jasmine#.debugLog) during a failing spec. |\n\nSince:  \n- 2.0.0\n\n#### SuiteResult\n\n##### Properties:\n\n| Name                  | Type                                        | Description                                                                                          |\n|-----------------------|---------------------------------------------|------------------------------------------------------------------------------------------------------|\n| `id`                  | Int                                         | The unique id of this suite.                                                                         |\n| `description`         | String                                      | The description text passed to the [`describe`](global#describe) that made this suite.               |\n| `fullName`            | String                                      | The full description including all ancestors of this suite.                                          |\n| `failedExpectations`  | Array.\\<[Expectation](global#Expectation)\\> | The list of expectations that failed in an [`afterAll`](global#afterAll) for this suite.             |\n| `deprecationWarnings` | Array.\\<[Expectation](global#Expectation)\\> | The list of deprecation warnings that occurred on this suite.                                        |\n| `status`              | String                                      | Once the suite has completed, this string represents the pass/fail status of this suite.             |\n| `duration`            | number                                      | The time in ms for Suite execution, including any before/afterAll, before/afterEach.                 |\n| `properties`          | Object                                      | User-supplied properties, if any, that were set using [`Env#setSuiteProperty`](env#setSuiteProperty) |\n\nSince:  \n- 2.0.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/global.html](https://jasmine.github.io/api/4.0/global.html)"
- name: hideDisabled
  id: configuration#hideDisabled
  summary: Whether or not reporters should hide disabled specs from their output
  belongs_to: 'Interface: Configuration'
  description: |-
    #### hideDisabled :Boolean

    Whether or not reporters should hide disabled specs from their output. Currently only supported by Jasmine's HTMLReporter

    ##### Type:

    - Boolean

    Since:

    - 3.3.0

    Default Value:

    - false
- name: id
  id: spec#id
  summary: The unique ID of this spec
  belongs_to: 'Interface: Spec'
  description: |-
    #### (readonly) id :string

    The unique ID of this spec.

    ##### Type:

    - string

    Since:

    - 2.0.0

    #### (readonly) id :string

    The unique ID of this spec.

    ##### Type:

    - string

    ### Methods
- name: id
  id: suite#id
  summary: The unique ID of this suite
  belongs_to: 'Interface: Suite'
  description: |-
    #### (readonly) id :string

    The unique ID of this suite.

    ##### Type:

    - string

    Since:

    - 2.0.0

    #### (readonly) id :string

    The unique ID of this suite.

    ##### Type:

    - string

    &nbsp;
- name: identity
  id: spystrategy#identity
  summary: Get the identifying information for the spy
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### identity :String

    Get the identifying information for the spy.

    ##### Type:

    - String

    Since:

    - 3.0.0

    ### Methods
- name: implementationCallback
  id: global#implementationCallback
  summary: Callback passed to parts of the Jasmine base interface
  belongs_to: Global
  description: |-
    #### implementationCallback(doneopt)

    Callback passed to parts of the Jasmine base interface.

    By default Jasmine assumes this function completes synchronously. If you have code that you need to test asynchronously, you can declare that you receive a `done` callback, return a Promise, or use the `async` keyword if it is supported in your environment.

    ##### Parameters:

    | Name   | Type     | Attributes   | Description                                                                                                                      |
    |--------|----------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `done` | function | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: install
  id: clock#install
  summary: Install the mock clock over the built-in methods
  belongs_to: 'Class: Clock'
  description: |-
    #### install() → {[Clock](clock)}

    Install the mock clock over the built-in methods.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    [Clock](clock)
- name: 'Interface: AsymmetricEqualityTester'
  id: asymmetricequalitytester
  summary: An asymmetric equality tester is an object that can match multiple objects
  description: "# Interface: AsymmetricEqualityTester\n\n## AsymmetricEqualityTester\n\nAn asymmetric equality tester is an object that can match multiple objects. Examples include jasmine.any() and jasmine.stringMatching(). Jasmine includes a number of built-in asymmetric equality testers, such as [`jasmine.objectContaining`](jasmine#.objectContaining). User-defined asymmetric equality testers are also supported.\n\nAsymmetric equality testers work with any matcher, including user-defined custom matchers, that uses [`MatchersUtil#equals`](matchersutil#equals) or [`MatchersUtil#contains`](matchersutil#contains).\n\nSince:  \n- 2.0.0\n\nSee:  \n- [custom asymmetric_equality_testers](https://jasmine.github.io/tutorials/custom_asymmetric_equality_testers)\n\n### Example\n\n``` javascript\nfunction numberDivisibleBy(divisor) {\n  return {\n    asymmetricMatch: function(n) {\n      return typeof n === 'number' && n % divisor === 0;\n    },\n    jasmineToString: function() {\n      return `<a number divisible by ${divisor}>`;\n    }\n  };\n}\n\nvar actual = {\n  n: 2,\n  otherFields: \"don't care\"\n};\n\nexpect(actual).toEqual(jasmine.objectContaining({n: numberDivisibleBy(2)}));\n```\n\n### Methods\n\n#### asymmetricMatch(value, matchersUtil) → {Boolean}\n\nDetermines whether a value matches this tester\n\n##### Parameters:\n\n| Name           | Type                         | Description                         |\n|----------------|------------------------------|-------------------------------------|\n| `value`        | any                          | The value to test                   |\n| `matchersUtil` | [MatchersUtil](matchersutil) | utilities for testing equality, etc |\n\n##### Returns:\n\nType  \nBoolean\n\n#### jasmineToString(pp) → {String}\n\nReturns a string representation of this tester to use in matcher failure messages\n\n##### Parameters:\n\n| Name | Type     | Description                                                             |\n|------|----------|-------------------------------------------------------------------------|\n| `pp` | function | Function that takes a value and returns a pretty-printed representation |\n\n##### Returns:\n\nType  \nString\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/AsymmetricEqualityTester.html](https://jasmine.github.io/api/4.0/AsymmetricEqualityTester.html)"
- name: 'Interface: Configuration'
  id: configuration
  summary: This represents the available options to configure Jasmine
  description: "# Interface: Configuration\n\n## Configuration\n\nThis represents the available options to configure Jasmine. Options that are not provided will use their default values.\n\nSince:  \n- 3.3.0\n\nSee:  \n- [Env#configure](env#configure)\n\n### Members\n\n#### autoCleanClosures :boolean\n\nClean closures when a suite is done running (done by clearing the stored function reference). This prevents memory leaks, but you won't be able to run jasmine multiple times.\n\n##### Type:\n\n- boolean\n\nSince:  \n- 3.10.0\n\nDefault Value:  \n- true\n\n#### failSpecWithNoExpectations :Boolean\n\nWhether to fail the spec if it ran no expectations. By default a spec that ran no expectations is reported as passed. Setting this to true will report such spec as a failure.\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.5.0\n\nDefault Value:  \n- false\n\n#### hideDisabled :Boolean\n\nWhether or not reporters should hide disabled specs from their output. Currently only supported by Jasmine's HTMLReporter\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.3.0\n\nDefault Value:  \n- false\n\n#### random :Boolean\n\nWhether to randomize spec execution order\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.3.0\n\nDefault Value:  \n- true\n\n#### seed :number\\|string\n\nSeed to use as the basis of randomization. Null causes the seed to be determined randomly at the start of execution.\n\n##### Type:\n\n- number \\| string\n\nSince:  \n- 3.3.0\n\nDefault Value:  \n- null\n\n#### specFilter :[SpecFilter](global#SpecFilter)\n\nFunction to use to filter specs\n\n##### Type:\n\n- [SpecFilter](global#SpecFilter)\n\nSince:  \n- 3.3.0\n\nDefault Value:  \n- A function that always returns true.\n\n#### stopOnSpecFailure :Boolean\n\nWhether to stop execution of the suite after the first spec failure\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.9.0\n\nDefault Value:  \n- false\n\n#### stopSpecOnExpectationFailure :Boolean\n\nWhether to cause specs to only have one expectation failure.\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.3.0\n\nDefault Value:  \n- false\n\n#### verboseDeprecations :Boolean\n\nWhether or not to issue warnings for certain deprecated functionality every time it's used. If not set or set to false, deprecation warnings for methods that tend to be called frequently will be issued only once or otherwise throttled to to prevent the suite output from being flooded with warnings.\n\n##### Type:\n\n- Boolean\n\nSince:  \n- 3.6.0\n\nDefault Value:  \n- false\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Configuration.html](https://jasmine.github.io/api/4.0/Configuration.html)"
- name: 'Interface: Reporter'
  id: reporter
  summary: This represents the available reporter callback for an object passed to Env#addReporter
  description: "# Interface: Reporter\n\n## Reporter\n\nThis represents the available reporter callback for an object passed to [`Env#addReporter`](env#addReporter).\n\nSee:  \n- [custom reporter](https://jasmine.github.io/tutorials/custom_reporter)\n\n### Methods\n\n#### jasmineDone(suiteInfo, doneopt)\n\nWhen the entire suite has finished execution `jasmineDone` is called\n\n##### Parameters:\n\n| Name        | Type                                      | Attributes   | Description                                                                                                                      |\n|-------------|-------------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `suiteInfo` | [JasmineDoneInfo](global#JasmineDoneInfo) |              | Information about the full Jasmine suite that just finished running.                                                             |\n| `done`      | function                                  | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### jasmineStarted(suiteInfo, doneopt)\n\n`jasmineStarted` is called after all of the specs have been loaded, but just before execution starts.\n\n##### Parameters:\n\n| Name        | Type                                            | Attributes   | Description                                                                                                                      |\n|-------------|-------------------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `suiteInfo` | [JasmineStartedInfo](global#JasmineStartedInfo) |              | Information about the full Jasmine suite that is being run                                                                       |\n| `done`      | function                                        | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### specDone(result, doneopt)\n\n`specDone` is invoked when an `it` and its associated `beforeEach` and `afterEach` functions have been run.\n\nWhile jasmine doesn't require any specific functions, not defining a `specDone` will make it impossible for a reporter to know when a spec has failed.\n\n##### Parameters:\n\n| Name     | Type                            | Attributes   | Description                                                                                                                      |\n|----------|---------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `result` | [SpecResult](global#SpecResult) |              |                                                                                                                                  |\n| `done`   | function                        | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### specStarted(result, doneopt)\n\n`specStarted` is invoked when an `it` starts to run (including associated `beforeEach` functions)\n\n##### Parameters:\n\n| Name     | Type                            | Attributes   | Description                                                                                                                      |\n|----------|---------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `result` | [SpecResult](global#SpecResult) |              | Information about the individual [`it`](global#it) being run                                                                     |\n| `done`   | function                        | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### suiteDone(result, doneopt)\n\n`suiteDone` is invoked when all of the child specs and suites for a given suite have been run\n\nWhile jasmine doesn't require any specific functions, not defining a `suiteDone` will make it impossible for a reporter to know when a suite has failures in an `afterAll`.\n\n##### Parameters:\n\n| Name     | Type                              | Attributes   | Description                                                                                                                      |\n|----------|-----------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `result` | [SuiteResult](global#SuiteResult) |              |                                                                                                                                  |\n| `done`   | function                          | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n#### suiteStarted(result, doneopt)\n\n`suiteStarted` is invoked when a `describe` starts to run\n\n##### Parameters:\n\n| Name     | Type                              | Attributes   | Description                                                                                                                      |\n|----------|-----------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `result` | [SuiteResult](global#SuiteResult) |              | Information about the individual [`describe`](global#describe) being run                                                         |\n| `done`   | function                          | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:  \n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Reporter.html](https://jasmine.github.io/api/4.0/Reporter.html)"
- name: 'Interface: Spec'
  id: spec
  summary: The description passed to the it that created this spec
  description: "# Interface: Spec\n\n## Spec\n\nSince:  \n- 2.0.0\n\nSee:  \n- [Configuration#specFilter](configuration#specFilter)\n\n### Members\n\n#### (readonly) description :string\n\nThe description passed to the [`it`](global#it) that created this spec.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) description :string\n\nThe description passed to the [`it`](global#it) that created this spec.\n\n##### Type:\n\n- string\n\n#### (readonly) id :string\n\nThe unique ID of this spec.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) id :string\n\nThe unique ID of this spec.\n\n##### Type:\n\n- string\n\n### Methods\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this spec.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nstring\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this spec.\n\n##### Returns:\n\nType  \nstring\n\n## Spec\n\nSee:  \n- [Configuration#specFilter](configuration#specFilter)\n\n### Members\n\n#### (readonly) description :string\n\nThe description passed to the [`it`](global#it) that created this spec.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) description :string\n\nThe description passed to the [`it`](global#it) that created this spec.\n\n##### Type:\n\n- string\n\n#### (readonly) id :string\n\nThe unique ID of this spec.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) id :string\n\nThe unique ID of this spec.\n\n##### Type:\n\n- string\n\n### Methods\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this spec.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nstring\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this spec.\n\n##### Returns:\n\nType  \nstring\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Spec.html](https://jasmine.github.io/api/4.0/Spec.html)"
- name: 'Interface: SpyStrategy'
  id: spystrategy
  summary: Get the identifying information for the spy
  description: "# Interface: SpyStrategy\n\n## SpyStrategy\n\n### Members\n\n#### identity :String\n\nGet the identifying information for the spy.\n\n##### Type:\n\n- String\n\nSince:  \n- 3.0.0\n\n### Methods\n\n#### callFake(fn)\n\nTell the spy to call a fake implementation when invoked.\n\n##### Parameters:\n\n| Name | Type     | Description                                        |\n|------|----------|----------------------------------------------------|\n| `fn` | function | The function to invoke with the passed parameters. |\n\nSince:  \n- 2.0.0\n\n#### callThrough()\n\nTell the spy to call through to the real implementation when invoked.\n\nSince:  \n- 2.0.0\n\n#### exec()\n\nExecute the current spy strategy.\n\nSince:  \n- 2.0.0\n\n#### rejectWith(value)\n\nTell the spy to return a promise rejecting with the specified value when invoked.\n\n##### Parameters:\n\n| Name    | Type | Description          |\n|---------|------|----------------------|\n| `value` | \\*   | The value to return. |\n\nSince:  \n- 3.5.0\n\n#### resolveTo(value)\n\nTell the spy to return a promise resolving to the specified value when invoked.\n\n##### Parameters:\n\n| Name    | Type | Description          |\n|---------|------|----------------------|\n| `value` | \\*   | The value to return. |\n\nSince:  \n- 3.5.0\n\n#### returnValue(value)\n\nTell the spy to return the value when invoked.\n\n##### Parameters:\n\n| Name    | Type | Description          |\n|---------|------|----------------------|\n| `value` | \\*   | The value to return. |\n\nSince:  \n- 2.0.0\n\n#### returnValues(…values)\n\nTell the spy to return one of the specified values (sequentially) each time the spy is invoked.\n\n##### Parameters:\n\n| Name     | Type | Attributes     | Description                                           |\n|----------|------|----------------|-------------------------------------------------------|\n| `values` | \\*   | \\<repeatable\\> | Values to be returned on subsequent calls to the spy. |\n\nSince:  \n- 2.1.0\n\n#### stub()\n\nTell the spy to do nothing when invoked. This is the default.\n\nSince:  \n- 2.0.0\n\n#### throwError(something)\n\nTell the spy to throw an error when invoked.\n\n##### Parameters:\n\n| Name        | Type                      | Description    |\n|-------------|---------------------------|----------------|\n| `something` | Error \\| Object \\| String | Thing to throw |\n\nSince:  \n- 2.0.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/SpyStrategy.html](https://jasmine.github.io/api/4.0/SpyStrategy.html)"
- name: 'Interface: Suite'
  id: suite
  summary: The suite's children
  description: "# Interface: Suite\n\n## Suite\n\nSince:  \n- 2.0.0\n\nSee:  \n- [Env#topSuite](env#topSuite)\n\n### Members\n\n#### children :Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nThe suite's children.\n\n##### Type:\n\n- Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nSince:  \n- 2.0.0\n\n#### children :Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nThe suite's children.\n\n##### Type:\n\n- Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\n#### (readonly) description :string\n\nThe description passed to the [`describe`](global#describe) that created this suite.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) description :string\n\nThe description passed to the [`describe`](global#describe) that created this suite.\n\n##### Type:\n\n- string\n\n#### (readonly) id :string\n\nThe unique ID of this suite.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) id :string\n\nThe unique ID of this suite.\n\n##### Type:\n\n- string\n\n#### (readonly) parentSuite :[Suite](suite)\n\nThe parent of this suite, or null if this is the top suite.\n\n##### Type:\n\n- [Suite](suite)\n\n### Methods\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this suite.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nstring\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this suite.\n\n##### Returns:\n\nType  \nstring\n\n## Suite\n\nSee:  \n- [Env#topSuite](env#topSuite)\n\n### Members\n\n#### children :Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nThe suite's children.\n\n##### Type:\n\n- Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nSince:  \n- 2.0.0\n\n#### children :Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\nThe suite's children.\n\n##### Type:\n\n- Array.\\<([Spec](spec)\\|[Suite](suite))\\>\n\n#### (readonly) description :string\n\nThe description passed to the [`describe`](global#describe) that created this suite.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) description :string\n\nThe description passed to the [`describe`](global#describe) that created this suite.\n\n##### Type:\n\n- string\n\n#### (readonly) id :string\n\nThe unique ID of this suite.\n\n##### Type:\n\n- string\n\nSince:  \n- 2.0.0\n\n#### (readonly) id :string\n\nThe unique ID of this suite.\n\n##### Type:\n\n- string\n\n#### (readonly) parentSuite :[Suite](suite)\n\nThe parent of this suite, or null if this is the top suite.\n\n##### Type:\n\n- [Suite](suite)\n\n### Methods\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this suite.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nstring\n\n#### getFullName() → {string}\n\nThe full description including all ancestors of this suite.\n\n##### Returns:\n\nType  \nstring\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Suite.html](https://jasmine.github.io/api/4.0/Suite.html)"
- name: isSpy
  id: jasmine#.isSpy
  summary: Determines whether the provided function is a Jasmine spy
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) isSpy(putativeSpy) → {Boolean}

    Determines whether the provided function is a Jasmine spy.

    ##### Parameters:

    | Name          | Type     | Description            |
    |---------------|----------|------------------------|
    | `putativeSpy` | function | The function to check. |

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Boolean
- name: it
  id: global#it
  summary: Define a single spec
  belongs_to: Global
  description: |-
    #### it(description, testFunctionopt, timeoutopt)

    Define a single spec. A spec should contain one or more [`expectations`](global#expect) that test the state of the code.

    A spec whose expectations all succeed will be passing and a spec with any failures will fail. The name `it` is a pronoun for the test target, not an abbreviation of anything. It makes the spec more readable by connecting the function name `it` and the argument `description` as a complete sentence.

    ##### Parameters:

    | Name           | Type                                                      | Attributes   | Default                                                                 | Description                                                                               |
    |----------------|-----------------------------------------------------------|--------------|-------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|
    | `description`  | String                                                    |              |                                                                         | Textual description of what this spec is checking                                         |
    | `testFunction` |  [implementationCallback](global#implementationCallback)  | \<optional\> |                                                                         | Function that contains the code of your test. If not provided the test will be `pending`. |
    | `timeout`      | Int                                                       | \<optional\> | [`jasmine.DEFAULT_TIMEOUT_INTERVAL`](jasmine#.DEFAULT_TIMEOUT_INTERVAL) | Custom timeout for an async spec.                                                         |

    Since:

    - 1.3.0

    See:

    - [async](https://jasmine.github.io/tutorials/async)
- name: jasmineDone
  id: reporter#jasmineDone
  summary: Optionally return a Promise instead of using done to cause Jasmine to wait for completion
  belongs_to: 'Interface: Reporter'
  description: |-
    #### jasmineDone(suiteInfo, doneopt)

    When the entire suite has finished execution `jasmineDone` is called

    ##### Parameters:

    | Name        | Type                                        | Attributes   | Description                                                                                                                      |
    |-------------|---------------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `suiteInfo` |  [JasmineDoneInfo](global#JasmineDoneInfo)  |              | Information about the full Jasmine suite that just finished running.                                                             |
    | `done`      | function                                    | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    See:

    - [async](https://jasmine.github.io/tutorials/async)

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: JasmineDoneInfo
  id: global#JasmineDoneInfo
  summary: Information passed to the Reporter#jasmineDone event
  belongs_to: Global
  description: |-
    #### JasmineDoneInfo

    Information passed to the [`Reporter#jasmineDone`](reporter#jasmineDone) event.

    ##### Properties:

    | Name                  | Type                                        | Description                                                                               |
    |-----------------------|---------------------------------------------|-------------------------------------------------------------------------------------------|
    | `overallStatus`       | OverallStatus                               | The overall result of the suite: 'passed', 'failed', or 'incomplete'.                     |
    | `totalTime`           | Int                                         | The total time (in ms) that it took to execute the suite                                  |
    | `incompleteReason`    | IncompleteReason                            | Explanation of why the suite was incomplete.                                              |
    | `order`               | Order                                       | Information about the ordering (random or not) of this execution of the suite.            |
    | `failedExpectations`  | Array.\<[Expectation](global#Expectation)\> | List of expectations that failed in an [`afterAll`](global#afterAll) at the global level. |
    | `deprecationWarnings` | Array.\<[Expectation](global#Expectation)\> | List of deprecation warnings that occurred at the global level.                           |

    Since:

    - 2.4.0
- name: jasmineStarted
  id: reporter#jasmineStarted
  summary: jasmineStarted is called after all of the specs have been loaded, but just before execution starts
  belongs_to: 'Interface: Reporter'
  description: |-
    #### jasmineStarted(suiteInfo, doneopt)

    `jasmineStarted` is called after all of the specs have been loaded, but just before execution starts.

    ##### Parameters:

    | Name        | Type                                              | Attributes   | Description                                                                                                                      |
    |-------------|---------------------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `suiteInfo` |  [JasmineStartedInfo](global#JasmineStartedInfo)  |              | Information about the full Jasmine suite that is being run                                                                       |
    | `done`      | function                                          | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    See:

    - [async](https://jasmine.github.io/tutorials/async)

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: JasmineStartedInfo
  id: global#JasmineStartedInfo
  summary: Information passed to the Reporter#jasmineStarted event
  belongs_to: Global
  description: |-
    #### JasmineStartedInfo

    Information passed to the [`Reporter#jasmineStarted`](reporter#jasmineStarted) event.

    ##### Properties:

    | Name                | Type  | Description                                                                    |
    |---------------------|-------|--------------------------------------------------------------------------------|
    | `totalSpecsDefined` | Int   | The total number of specs defined in this suite.                               |
    | `order`             | Order | Information about the ordering (random or not) of this execution of the suite. |

    Since:

    - 2.0.0
- name: jasmineToString
  id: asymmetricequalitytester#jasmineToString
  summary: © 2008–2019 Pivotal Labs Licensed under the MIT License
  belongs_to: 'Interface: AsymmetricEqualityTester'
  description: "#### jasmineToString(pp) → {String}\n\nReturns a string representation of this tester to use in matcher failure messages\n\n##### Parameters:\n\n| Name | Type     | Description                                                             |\n|------|----------|-------------------------------------------------------------------------|\n| `pp` | function | Function that takes a value and returns a pretty-printed representation |\n\n##### Returns:\n\nType\n\nString\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/AsymmetricEqualityTester.html](https://jasmine.github.io/api/4.0/AsymmetricEqualityTester.html)"
- name: mapContaining
  id: jasmine#.mapContaining
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) mapContaining(sample)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if every key/value pair in the sample passes the deep equality comparison with at least one key/value pair in the actual value being compared

    ##### Parameters:

    | Name     | Type | Description                                       |
    |----------|------|---------------------------------------------------|
    | `sample` | Map  | The subset of items that *must* be in the actual. |

    Since:

    - 3.5.0
- name: MAX_PRETTY_PRINT_ARRAY_LENGTH
  id: jasmine#.MAX_PRETTY_PRINT_ARRAY_LENGTH
  summary: Maximum number of array elements to display when pretty printing objects
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) MAX_PRETTY_PRINT_ARRAY_LENGTH

    Maximum number of array elements to display when pretty printing objects. This will also limit the number of keys and values displayed for an object. Elements past this number will be ellipised.

    Since:

    - 2.7.0

    Default Value:

    - 50
- name: MAX_PRETTY_PRINT_CHARS
  id: jasmine#.MAX_PRETTY_PRINT_CHARS
  summary: Maximum number of characters to display when pretty printing objects
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) MAX_PRETTY_PRINT_CHARS

    Maximum number of characters to display when pretty printing objects. Characters past this number will be ellipised.

    Since:

    - 2.9.0

    Default Value:

    - 100
- name: MAX_PRETTY_PRINT_DEPTH
  id: jasmine#.MAX_PRETTY_PRINT_DEPTH
  summary: Maximum object depth the pretty printer will print to
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) MAX_PRETTY_PRINT_DEPTH

    Maximum object depth the pretty printer will print to. Set this to a lower value to speed up pretty printing if you have large objects.

    Since:

    - 1.3.0

    Default Value:

    - 8

    ### Methods
- name: mockDate
  id: clock#mockDate
  summary: null
  belongs_to: 'Class: Clock'
  description: |-
    #### mockDate(initialDateopt)

    Instruct the installed Clock to also mock the date returned by `new Date()`

    ##### Parameters:

    | Name          | Type | Attributes   | Default | Description            |
    |---------------|------|--------------|---------|------------------------|
    | `initialDate` | Date | \<optional\> | now     | The `Date` to provide. |

    Since:

    - 2.1.0
- name: 'Module: jasmine-core'
  id: module-jasmine-core
  summary: 'Note: Only available on Node'
  description: "# Module: jasmine-core\n\nNote: Only available on Node.\n\n### Members\n\n#### (static) boot :function\n\nBoots a copy of Jasmine and returns an object as described in [`jasmine`](jasmine).\n\n##### Type:\n\n- function\n\n#### (static) noGlobals\n\nBoots a copy of Jasmine and returns an object containing the properties that would normally be added to the global object. If noGlobals is called multiple times, the same object is returned every time.\n\nDo not call boot() if you also call noGlobals().\n\n##### Example\n\n``` javascript\nconst {describe, beforeEach, it, expect, jasmine} = require('jasmine-core').noGlobals();\n```\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/module-jasmine-core.html](https://jasmine.github.io/api/4.0/module-jasmine-core.html)"
- name: mostRecent
  id: spy_calls#mostRecent
  summary: Get the most recent invocation of this spy
  belongs_to: 'Namespace: calls'
  description: |-
    #### mostRecent() → {ObjecSpy.callData}

    Get the most recent invocation of this spy.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    ObjecSpy.callData
- name: 'Namespace: async-matchers'
  id: async-matchers
  summary: Asynchronous matchers that operate on an actual value which is a promise, and return a promise
  description: "# Namespace: async-matchers\n\n## async-matchers\n\nAsynchronous matchers that operate on an actual value which is a promise, and return a promise.\n\nMost async matchers will wait indefinitely for the promise to be resolved or rejected, resulting in a spec timeout if that never happens. If you expect that the promise will already be resolved or rejected at the time the matcher is called, you can use the [`async-matchers#already`](async-matchers#already) modifier to get a faster failure with a more helpful message.\n\nNote: Specs must await the result of each async matcher, return the promise returned by the matcher, or return a promise that's derived from the one returned by the matcher. Otherwise the matcher will not be evaluated before the spec completes.\n\n### Examples\n\n``` javascript\n// Good\nawait expectAsync(aPromise).toBeResolved();\n```\n\n``` javascript\n// Good\nreturn expectAsync(aPromise).toBeResolved();\n```\n\n``` javascript\n// Good\nreturn expectAsync(aPromise).toBeResolved()\n .then(function() {\n   // more spec code\n });\n```\n\n``` javascript\n// Bad\nexpectAsync(aPromise).toBeResolved();\n```\n\n### Members\n\n#### already :[async-matchers](async-matchers)\n\nFail as soon as possible if the actual is pending. Otherwise evaluate the matcher.\n\n##### Type:\n\n- [async-matchers](async-matchers)\n\nSince:  \n- 3.8.0\n\n##### Examples\n\n``` javascript\nawait expectAsync(myPromise).already.toBeResolved();\n```\n\n``` javascript\nreturn expectAsync(myPromise).already.toBeResolved();\n```\n\n#### not :[async-matchers](async-matchers)\n\nInvert the matcher following this [`expectAsync`](global#expectAsync)\n\n##### Type:\n\n- [async-matchers](async-matchers)\n\n##### Examples\n\n``` javascript\nawait expectAsync(myPromise).not.toBeResolved();\n```\n\n``` javascript\nreturn expectAsync(myPromise).not.toBeResolved();\n```\n\n### Methods\n\n#### (async) toBePending()\n\nExpect a promise to be pending, i.e. the promise is neither resolved nor rejected.\n\nSince:  \n- 3.6\n\n##### Example\n\n``` javascript\nawait expectAsync(aPromise).toBePending();\n```\n\n#### (async) toBeRejected()\n\nExpect a promise to be rejected.\n\nSince:  \n- 3.1.0\n\n##### Examples\n\n``` javascript\nawait expectAsync(aPromise).toBeRejected();\n```\n\n``` javascript\nreturn expectAsync(aPromise).toBeRejected();\n```\n\n#### (async) toBeRejectedWith(expected)\n\nExpect a promise to be rejected with a value equal to the expected, using deep equality comparison.\n\n##### Parameters:\n\n| Name       | Type   | Description                                            |\n|------------|--------|--------------------------------------------------------|\n| `expected` | Object | Value that the promise is expected to be rejected with |\n\nSince:  \n- 3.3.0\n\n##### Examples\n\n``` javascript\nawait expectAsync(aPromise).toBeRejectedWith({prop: 'value'});\n```\n\n``` javascript\nreturn expectAsync(aPromise).toBeRejectedWith({prop: 'value'});\n```\n\n#### (async) toBeRejectedWithError(expectedopt, messageopt)\n\nExpect a promise to be rejected with a value matched to the expected\n\n##### Parameters:\n\n| Name       | Type             | Attributes   | Description                                                                                                       |\n|------------|------------------|--------------|-------------------------------------------------------------------------------------------------------------------|\n| `expected` | Error            | \\<optional\\> | `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used. |\n| `message`  | RegExp \\| String | \\<optional\\> | The message that should be set on the thrown `Error`                                                              |\n\nSince:  \n- 3.5.0\n\n##### Example\n\n``` javascript\nawait expectAsync(aPromise).toBeRejectedWithError(MyCustomError, 'Error message');\nawait expectAsync(aPromise).toBeRejectedWithError(MyCustomError, /Error message/);\nawait expectAsync(aPromise).toBeRejectedWithError(MyCustomError);\nawait expectAsync(aPromise).toBeRejectedWithError('Error message');\nreturn expectAsync(aPromise).toBeRejectedWithError(/Error message/);\n```\n\n#### (async) toBeResolved()\n\nExpect a promise to be resolved.\n\nSince:  \n- 3.1.0\n\n##### Examples\n\n``` javascript\nawait expectAsync(aPromise).toBeResolved();\n```\n\n``` javascript\nreturn expectAsync(aPromise).toBeResolved();\n```\n\n#### (async) toBeResolvedTo(expected)\n\nExpect a promise to be resolved to a value equal to the expected, using deep equality comparison.\n\n##### Parameters:\n\n| Name       | Type   | Description                                      |\n|------------|--------|--------------------------------------------------|\n| `expected` | Object | Value that the promise is expected to resolve to |\n\nSince:  \n- 3.1.0\n\n##### Examples\n\n``` javascript\nawait expectAsync(aPromise).toBeResolvedTo({prop: 'value'});\n```\n\n``` javascript\nreturn expectAsync(aPromise).toBeResolvedTo({prop: 'value'});\n```\n\n#### withContext(message) → {[async-matchers](async-matchers)}\n\nAdd some context for an [`expectAsync`](global#expectAsync)\n\n##### Parameters:\n\n| Name      | Type   | Description                                             |\n|-----------|--------|---------------------------------------------------------|\n| `message` | String | Additional context to show when the async matcher fails |\n\nSince:  \n- 3.3.0\n\n##### Returns:\n\nType  \n[async-matchers](async-matchers)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/async-matchers.html](https://jasmine.github.io/api/4.0/async-matchers.html)"
- name: 'Namespace: calls'
  id: spy_calls
  summary: Get the raw calls array for this spy
  description: "# Namespace: calls\n\n## [Spy](spy)\\#calls\n\nSince:  \n- 2.0.0\n\n### Methods\n\n#### all() → {Array.\\<[Spy.callData](spy#.callData)\\>}\n\nGet the raw calls array for this spy.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nArray.\\<[Spy.callData](spy#.callData)\\>\n\n#### allArgs() → {Array}\n\nGet all of the arguments for each invocation of this spy in the order they were received.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nArray\n\n#### any() → {Boolean}\n\nCheck whether this spy has been invoked.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nBoolean\n\n#### argsFor(index) → {Array}\n\nGet the arguments that were passed to a specific invocation of this spy.\n\n##### Parameters:\n\n| Name    | Type    | Description                   |\n|---------|---------|-------------------------------|\n| `index` | Integer | The 0-based invocation index. |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nArray\n\n#### count() → {Integer}\n\nGet the number of invocations of this spy.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nInteger\n\n#### first() → {ObjecSpy.callData}\n\nGet the first invocation of this spy.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nObjecSpy.callData\n\n#### mostRecent() → {ObjecSpy.callData}\n\nGet the most recent invocation of this spy.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nObjecSpy.callData\n\n#### reset()\n\nReset this spy as if it has never been called.\n\nSince:  \n- 2.0.0\n\n#### saveArgumentsByValue()\n\nSet this spy to do a shallow clone of arguments passed to each invocation.\n\nSince:  \n- 2.5.0\n\n#### thisFor(index) → (nullable) {Object}\n\nGet the \"this\" object that was passed to a specific invocation of this spy.\n\n##### Parameters:\n\n| Name    | Type    | Description                   |\n|---------|---------|-------------------------------|\n| `index` | Integer | The 0-based invocation index. |\n\nSince:  \n- 3.8.0\n\n##### Returns:\n\nType  \nObject\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Spy_calls.html](https://jasmine.github.io/api/4.0/Spy_calls.html)"
- name: 'Namespace: jasmine'
  id: jasmine
  summary: Default number of milliseconds Jasmine will wait for an asynchronous spec, before, or after function to complete
  description: "# Namespace: jasmine\n\n## jasmine\n\n### Members\n\n#### (static) DEFAULT_TIMEOUT_INTERVAL\n\nDefault number of milliseconds Jasmine will wait for an asynchronous spec, before, or after function to complete. This can be overridden on a case by case basis by passing a time limit as the third argument to [`it`](global#it), [`beforeEach`](global#beforeEach), [`afterEach`](global#afterEach), [`beforeAll`](global#beforeAll), or [`afterAll`](global#afterAll). The value must be no greater than the largest number of milliseconds supported by setTimeout, which is usually 2147483647.\n\nWhile debugging tests, you may want to set this to a large number (or pass a large number to one of the functions mentioned above) so that Jasmine does not move on to after functions or the next spec while you're debugging.\n\nSince:  \n- 1.3.0\n\nDefault Value:  \n- 5000\n\n#### (static) MAX_PRETTY_PRINT_ARRAY_LENGTH\n\nMaximum number of array elements to display when pretty printing objects. This will also limit the number of keys and values displayed for an object. Elements past this number will be ellipised.\n\nSince:  \n- 2.7.0\n\nDefault Value:  \n- 50\n\n#### (static) MAX_PRETTY_PRINT_CHARS\n\nMaximum number of characters to display when pretty printing objects. Characters past this number will be ellipised.\n\nSince:  \n- 2.9.0\n\nDefault Value:  \n- 100\n\n#### (static) MAX_PRETTY_PRINT_DEPTH\n\nMaximum object depth the pretty printer will print to. Set this to a lower value to speed up pretty printing if you have large objects.\n\nSince:  \n- 1.3.0\n\nDefault Value:  \n- 8\n\n### Methods\n\n#### (static) addAsyncMatchers(matchers)\n\nAdd custom async matchers for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name       | Type   | Description                                                |\n|------------|--------|------------------------------------------------------------|\n| `matchers` | Object | Keys from this object will be the new async matcher names. |\n\nSince:  \n- 3.5.0\n\nSee:  \n- [custom matcher](https://jasmine.github.io/tutorials/custom_matcher)\n\n#### (static) addCustomEqualityTester(tester)\n\nAdd a custom equality tester for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name     | Type     | Description                                                                                                                                                   |\n|----------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `tester` | function | A function which takes two arguments to compare and returns a `true` or `false` comparison result if it knows how to compare them, and `undefined` otherwise. |\n\nSince:  \n- 2.0.0\n\nSee:  \n- [custom equality](https://jasmine.github.io/tutorials/custom_equality)\n\n#### (static) addCustomObjectFormatter(formatter)\n\nAdd a custom object formatter for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name        | Type     | Description                                                                                                            |\n|-------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| `formatter` | function | A function which takes a value to format and returns a string if it knows how to format it, and `undefined` otherwise. |\n\nSince:  \n- 3.6.0\n\nSee:  \n- [custom object_formatters](https://jasmine.github.io/tutorials/custom_object_formatters)\n\n#### (static) addMatchers(matchers)\n\nAdd custom matchers for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name       | Type   | Description                                          |\n|------------|--------|------------------------------------------------------|\n| `matchers` | Object | Keys from this object will be the new matcher names. |\n\nSince:  \n- 2.0.0\n\nSee:  \n- [custom matcher](https://jasmine.github.io/tutorials/custom_matcher)\n\n#### (static) addSpyStrategy(name, factory)\n\nAdd a custom spy strategy for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name      | Type     | Description                                              |\n|-----------|----------|----------------------------------------------------------|\n| `name`    | String   | The name of the strategy (i.e. what you call from `and`) |\n| `factory` | function | Factory function that returns the plan to be executed.   |\n\nSince:  \n- 3.5.0\n\n#### (static) any(clazz)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is an instance of the specified class/constructor.\n\n##### Parameters:\n\n| Name    | Type        | Description                       |\n|---------|-------------|-----------------------------------|\n| `clazz` | Constructor | The constructor to check against. |\n\nSince:  \n- 1.3.0\n\n#### (static) anything()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is not `null` and not `undefined`.\n\nSince:  \n- 2.2.0\n\n#### (static) arrayContaining(sample)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is an `Array` that contains at least the elements in the sample.\n\n##### Parameters:\n\n| Name     | Type  | Description |\n|----------|-------|-------------|\n| `sample` | Array |             |\n\nSince:  \n- 2.2.0\n\n#### (static) arrayWithExactContents(sample)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is an `Array` that contains all of the elements in the sample in any order.\n\n##### Parameters:\n\n| Name     | Type  | Description |\n|----------|-------|-------------|\n| `sample` | Array |             |\n\nSince:  \n- 2.8.0\n\n#### (static) clock() → {[Clock](clock)}\n\nGet the currently booted mock {Clock} for this Jasmine environment.\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \n[Clock](clock)\n\n#### (static) createSpy(nameopt, originalFnopt) → {[Spy](spy)}\n\nCreate a bare [`Spy`](spy) object. This won't be installed anywhere and will not have any implementation behind it.\n\n##### Parameters:\n\n| Name         | Type     | Attributes   | Description                                                       |\n|--------------|----------|--------------|-------------------------------------------------------------------|\n| `name`       | String   | \\<optional\\> | Name to give the spy. This will be displayed in failure messages. |\n| `originalFn` | function | \\<optional\\> | Function to act as the real implementation.                       |\n\nSince:  \n- 1.3.0\n\n##### Returns:\n\nType  \n[Spy](spy)\n\n#### (static) createSpyObj(baseNameopt, methodNames, propertyNamesopt) → {Object}\n\nCreate an object with multiple [`Spy`](spy)s as its members.\n\n##### Parameters:\n\n| Name            | Type                       | Attributes   | Description                                                                                                           |\n|-----------------|----------------------------|--------------|-----------------------------------------------------------------------------------------------------------------------|\n| `baseName`      | String                     | \\<optional\\> | Base name for the spies in the object.                                                                                |\n| `methodNames`   | Array.\\<String\\> \\| Object |              | Array of method names to create spies for, or Object whose keys will be method names and values the `returnValue`.    |\n| `propertyNames` | Array.\\<String\\> \\| Object | \\<optional\\> | Array of property names to create spies for, or Object whose keys will be propertynames and values the `returnValue`. |\n\nSince:  \n- 1.3.0\n\n##### Returns:\n\nType  \nObject\n\n#### (static) debugLog(msg)\n\nLogs a message for use in debugging. If the spec fails, trace messages will be included in the [`result`](global#SpecResult) passed to the reporter's specDone method.\n\nThis method should be called only when a spec (including any associated beforeEach or afterEach functions) is running.\n\n##### Parameters:\n\n| Name  | Type   | Description        |\n|-------|--------|--------------------|\n| `msg` | String | The message to log |\n\nSince:  \n- 4.0.0\n\n#### (static) empty()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is empty.\n\nSince:  \n- 3.1.0\n\n#### (static) falsy()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is `null`, `undefined`, `0`, `false` or anything falsey.\n\nSince:  \n- 3.1.0\n\n#### (static) getEnv() → {[Env](env)}\n\nGet the currently booted Jasmine Environment.\n\nSince:  \n- 1.3.0\n\n##### Returns:\n\nType  \n[Env](env)\n\n#### (static) isSpy(putativeSpy) → {Boolean}\n\nDetermines whether the provided function is a Jasmine spy.\n\n##### Parameters:\n\n| Name          | Type     | Description            |\n|---------------|----------|------------------------|\n| `putativeSpy` | function | The function to check. |\n\nSince:  \n- 2.0.0\n\n##### Returns:\n\nType  \nBoolean\n\n#### (static) mapContaining(sample)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if every key/value pair in the sample passes the deep equality comparison with at least one key/value pair in the actual value being compared\n\n##### Parameters:\n\n| Name     | Type | Description                                       |\n|----------|------|---------------------------------------------------|\n| `sample` | Map  | The subset of items that *must* be in the actual. |\n\nSince:  \n- 3.5.0\n\n#### (static) notEmpty()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is not empty.\n\nSince:  \n- 3.1.0\n\n#### (static) objectContaining(sample)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared contains at least the keys and values.\n\n##### Parameters:\n\n| Name     | Type   | Description                                            |\n|----------|--------|--------------------------------------------------------|\n| `sample` | Object | The subset of properties that *must* be in the actual. |\n\nSince:  \n- 1.3.0\n\n#### (static) setContaining(sample)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if every item in the sample passes the deep equality comparison with at least one item in the actual value being compared\n\n##### Parameters:\n\n| Name     | Type | Description                                       |\n|----------|------|---------------------------------------------------|\n| `sample` | Set  | The subset of items that *must* be in the actual. |\n\nSince:  \n- 3.5.0\n\n#### (static) setDefaultSpyStrategy(defaultStrategyFn)\n\nSet the default spy strategy for the current scope of specs.\n\n*Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).\n\n##### Parameters:\n\n| Name                | Type     | Description                        |\n|---------------------|----------|------------------------------------|\n| `defaultStrategyFn` | function | a function that assigns a strategy |\n\n##### Example\n\n``` javascript\nbeforeEach(function() {\n  jasmine.setDefaultSpyStrategy(and => and.returnValue(true));\n});\n```\n\n#### (static) stringContaining(expected)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is a `String` that contains the specified `String`.\n\n##### Parameters:\n\n| Name       | Type   | Description |\n|------------|--------|-------------|\n| `expected` | String |             |\n\nSince:  \n- 3.10.0\n\n#### (static) stringMatching(expected)\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is a `String` that matches the `RegExp` or `String`.\n\n##### Parameters:\n\n| Name       | Type             | Description |\n|------------|------------------|-------------|\n| `expected` | RegExp \\| String |             |\n\nSince:  \n- 2.2.0\n\n#### (static) truthy()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is `true` or anything truthy.\n\nSince:  \n- 3.1.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/jasmine.html](https://jasmine.github.io/api/4.0/jasmine.html)"
- name: 'Namespace: matchers'
  id: matchers
  summary: Matchers that come with Jasmine out of the box
  description: "# Namespace: matchers\n\n## matchers\n\nMatchers that come with Jasmine out of the box.\n\n### Members\n\n#### not :[matchers](matchers)\n\nInvert the matcher following this [`expect`](global#expect)\n\n##### Type:\n\n- [matchers](matchers)\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(something).not.toBe(true);\n```\n\n### Methods\n\n#### nothing()\n\n[`expect`](global#expect) nothing explicitly.\n\nSince:  \n- 2.8.0\n\n##### Example\n\n``` javascript\nexpect().nothing();\n```\n\n#### toBe(expected)\n\n[`expect`](global#expect) the actual value to be `===` to the expected value.\n\n##### Parameters:\n\n| Name       | Type   | Description                            |\n|------------|--------|----------------------------------------|\n| `expected` | Object | The expected value to compare against. |\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(thing).toBe(realThing);\n```\n\n#### toBeCloseTo(expected, precisionopt)\n\n[`expect`](global#expect) the actual value to be within a specified precision of the expected value.\n\n##### Parameters:\n\n| Name        | Type   | Attributes   | Default | Description                            |\n|-------------|--------|--------------|---------|----------------------------------------|\n| `expected`  | Object |              |         | The expected value to compare against. |\n| `precision` | Number | \\<optional\\> | 2       | The number of decimal points to check. |\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(number).toBeCloseTo(42.2, 3);\n```\n\n#### toBeDefined()\n\n[`expect`](global#expect) the actual value to be defined. (Not `undefined`)\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeDefined();\n```\n\n#### toBeFalse()\n\n[`expect`](global#expect) the actual value to be `false`.\n\nSince:  \n- 3.5.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeFalse();\n```\n\n#### toBeFalsy()\n\n[`expect`](global#expect) the actual value to be falsy\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeFalsy();\n```\n\n#### toBeGreaterThan(expected)\n\n[`expect`](global#expect) the actual value to be greater than the expected value.\n\n##### Parameters:\n\n| Name       | Type   | Description                   |\n|------------|--------|-------------------------------|\n| `expected` | Number | The value to compare against. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeGreaterThan(3);\n```\n\n#### toBeGreaterThanOrEqual(expected)\n\n[`expect`](global#expect) the actual value to be greater than or equal to the expected value.\n\n##### Parameters:\n\n| Name       | Type   | Description                            |\n|------------|--------|----------------------------------------|\n| `expected` | Number | The expected value to compare against. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeGreaterThanOrEqual(25);\n```\n\n#### toBeInstanceOf(expected)\n\n[`expect`](global#expect) the actual to be an instance of the expected class\n\n##### Parameters:\n\n| Name       | Type   | Description                                    |\n|------------|--------|------------------------------------------------|\n| `expected` | Object | The class or constructor function to check for |\n\nSince:  \n- 3.5.0\n\n##### Example\n\n``` javascript\nexpect('foo').toBeInstanceOf(String);\nexpect(3).toBeInstanceOf(Number);\nexpect(new Error()).toBeInstanceOf(Error);\n```\n\n#### toBeLessThan(expected)\n\n[`expect`](global#expect) the actual value to be less than the expected value.\n\n##### Parameters:\n\n| Name       | Type   | Description                            |\n|------------|--------|----------------------------------------|\n| `expected` | Number | The expected value to compare against. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeLessThan(0);\n```\n\n#### toBeLessThanOrEqual(expected)\n\n[`expect`](global#expect) the actual value to be less than or equal to the expected value.\n\n##### Parameters:\n\n| Name       | Type   | Description                            |\n|------------|--------|----------------------------------------|\n| `expected` | Number | The expected value to compare against. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeLessThanOrEqual(123);\n```\n\n#### toBeNaN()\n\n[`expect`](global#expect) the actual value to be `NaN` (Not a Number).\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(thing).toBeNaN();\n```\n\n#### toBeNegativeInfinity()\n\n[`expect`](global#expect) the actual value to be `-Infinity` (-infinity).\n\nSince:  \n- 2.6.0\n\n##### Example\n\n``` javascript\nexpect(thing).toBeNegativeInfinity();\n```\n\n#### toBeNull()\n\n[`expect`](global#expect) the actual value to be `null`.\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeNull();\n```\n\n#### toBePositiveInfinity()\n\n[`expect`](global#expect) the actual value to be `Infinity` (infinity).\n\nSince:  \n- 2.6.0\n\n##### Example\n\n``` javascript\nexpect(thing).toBePositiveInfinity();\n```\n\n#### toBeTrue()\n\n[`expect`](global#expect) the actual value to be `true`.\n\nSince:  \n- 3.5.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeTrue();\n```\n\n#### toBeTruthy()\n\n[`expect`](global#expect) the actual value to be truthy.\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(thing).toBeTruthy();\n```\n\n#### toBeUndefined()\n\n[`expect`](global#expect) the actual value to be `undefined`.\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(result).toBeUndefined():\n```\n\n#### toContain(expected)\n\n[`expect`](global#expect) the actual value to contain a specific value.\n\n##### Parameters:\n\n| Name       | Type   | Description            |\n|------------|--------|------------------------|\n| `expected` | Object | The value to look for. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(array).toContain(anElement);\nexpect(string).toContain(substring);\n```\n\n#### toEqual(expected)\n\n[`expect`](global#expect) the actual value to be equal to the expected, using deep equality comparison.\n\n##### Parameters:\n\n| Name       | Type   | Description    |\n|------------|--------|----------------|\n| `expected` | Object | Expected value |\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(bigObject).toEqual({\"foo\": ['bar', 'baz']});\n```\n\n#### toHaveBeenCalled()\n\n[`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called.\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(mySpy).toHaveBeenCalled();\nexpect(mySpy).not.toHaveBeenCalled();\n```\n\n#### toHaveBeenCalledBefore(expected)\n\n[`expect`](global#expect) the actual value (a [`Spy`](spy)) to have been called before another [`Spy`](spy).\n\n##### Parameters:\n\n| Name       | Type       | Description                                                                |\n|------------|------------|----------------------------------------------------------------------------|\n| `expected` | [Spy](spy) | [`Spy`](spy) that should have been called after the `actual` [`Spy`](spy). |\n\nSince:  \n- 2.6.0\n\n##### Example\n\n``` javascript\nexpect(mySpy).toHaveBeenCalledBefore(otherSpy);\n```\n\n#### toHaveBeenCalledOnceWith()\n\n[`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called exactly once, and exactly with the particular arguments.\n\n##### Parameters:\n\n| Type   | Attributes     | Description               |\n|--------|----------------|---------------------------|\n| Object | \\<repeatable\\> | The arguments to look for |\n\nSince:  \n- 3.6.0\n\n##### Example\n\n``` javascript\nexpect(mySpy).toHaveBeenCalledOnceWith('foo', 'bar', 2);\n```\n\n#### toHaveBeenCalledTimes(expected)\n\n[`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called the specified number of times.\n\n##### Parameters:\n\n| Name       | Type   | Description                            |\n|------------|--------|----------------------------------------|\n| `expected` | Number | The number of invocations to look for. |\n\nSince:  \n- 2.4.0\n\n##### Example\n\n``` javascript\nexpect(mySpy).toHaveBeenCalledTimes(3);\n```\n\n#### toHaveBeenCalledWith()\n\n[`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called with particular arguments at least once.\n\n##### Parameters:\n\n| Type   | Attributes     | Description               |\n|--------|----------------|---------------------------|\n| Object | \\<repeatable\\> | The arguments to look for |\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(mySpy).toHaveBeenCalledWith('foo', 'bar', 2);\n```\n\n#### toHaveClass(expected)\n\n[`expect`](global#expect) the actual value to be a DOM element that has the expected class\n\n##### Parameters:\n\n| Name       | Type   | Description                |\n|------------|--------|----------------------------|\n| `expected` | Object | The class name to test for |\n\nSince:  \n- 3.0.0\n\n##### Example\n\n``` javascript\nvar el = document.createElement('div');\nel.className = 'foo bar baz';\nexpect(el).toHaveClass('bar');\n```\n\n#### toHaveSize(expected)\n\n[`expect`](global#expect) the actual size to be equal to the expected, using array-like length or object keys size.\n\n##### Parameters:\n\n| Name       | Type   | Description   |\n|------------|--------|---------------|\n| `expected` | Object | Expected size |\n\nSince:  \n- 3.6.0\n\n##### Example\n\n``` javascript\narray = [1,2];\nexpect(array).toHaveSize(2);\n```\n\n#### toMatch(expected)\n\n[`expect`](global#expect) the actual value to match a regular expression\n\n##### Parameters:\n\n| Name       | Type             | Description                      |\n|------------|------------------|----------------------------------|\n| `expected` | RegExp \\| String | Value to look for in the string. |\n\nSince:  \n- 1.3.0\n\n##### Example\n\n``` javascript\nexpect(\"my string\").toMatch(/string$/);\nexpect(\"other string\").toMatch(\"her\");\n```\n\n#### toThrow(expectedopt)\n\n[`expect`](global#expect) a function to `throw` something.\n\n##### Parameters:\n\n| Name       | Type   | Attributes   | Description                                                                                              |\n|------------|--------|--------------|----------------------------------------------------------------------------------------------------------|\n| `expected` | Object | \\<optional\\> | Value that should be thrown. If not provided, simply the fact that something was thrown will be checked. |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(function() { return 'things'; }).toThrow('foo');\nexpect(function() { return 'stuff'; }).toThrow();\n```\n\n#### toThrowError(expectedopt, messageopt)\n\n[`expect`](global#expect) a function to `throw` an `Error`.\n\n##### Parameters:\n\n| Name       | Type             | Attributes   | Description                                                                                                       |\n|------------|------------------|--------------|-------------------------------------------------------------------------------------------------------------------|\n| `expected` | Error            | \\<optional\\> | `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used. |\n| `message`  | RegExp \\| String | \\<optional\\> | The message that should be set on the thrown `Error`                                                              |\n\nSince:  \n- 2.0.0\n\n##### Example\n\n``` javascript\nexpect(function() { return 'things'; }).toThrowError(MyCustomError, 'message');\nexpect(function() { return 'things'; }).toThrowError(MyCustomError, /bar/);\nexpect(function() { return 'stuff'; }).toThrowError(MyCustomError);\nexpect(function() { return 'other'; }).toThrowError(/foo/);\nexpect(function() { return 'other'; }).toThrowError();\n```\n\n#### toThrowMatching(predicate)\n\n[`expect`](global#expect) a function to `throw` something matching a predicate.\n\n##### Parameters:\n\n| Name        | Type     | Description                                                                                 |\n|-------------|----------|---------------------------------------------------------------------------------------------|\n| `predicate` | function | A function that takes the thrown exception as its parameter and returns true if it matches. |\n\nSince:  \n- 3.0.0\n\n##### Example\n\n``` javascript\nexpect(function() { throw new Error('nope'); }).toThrowMatching(function(thrown) { return thrown.message === 'nope'; });\n```\n\n#### withContext(message) → {[matchers](matchers)}\n\nAdd some context for an [`expect`](global#expect)\n\n##### Parameters:\n\n| Name      | Type   | Description                                       |\n|-----------|--------|---------------------------------------------------|\n| `message` | String | Additional context to show when the matcher fails |\n\nSince:  \n- 3.3.0\n\n##### Returns:\n\nType  \n[matchers](matchers)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/matchers.html](https://jasmine.github.io/api/4.0/matchers.html)"
- name: noGlobals
  id: module-jasmine-core#.noGlobals
  summary: Boots a copy of Jasmine and returns an object containing the properties that would normally be added to the global object
  belongs_to: 'Module: jasmine-core'
  description: "#### (static) noGlobals\n\nBoots a copy of Jasmine and returns an object containing the properties that would normally be added to the global object. If noGlobals is called multiple times, the same object is returned every time.\n\nDo not call boot() if you also call noGlobals().\n\n##### Example\n\n``` javascript\nconst {describe, beforeEach, it, expect, jasmine} = require('jasmine-core').noGlobals();\n```\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/module-jasmine-core.html](https://jasmine.github.io/api/4.0/module-jasmine-core.html)"
- name: not
  id: async-matchers#not
  summary: null
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### not :[async-matchers](async-matchers)

    Invert the matcher following this [`expectAsync`](global#expectAsync)

    ##### Type:

    -  [async-matchers](async-matchers)

    ##### Examples

    ``` javascript
    await expectAsync(myPromise).not.toBeResolved();
    ```

    ``` javascript
    return expectAsync(myPromise).not.toBeResolved();
    ```

    ### Methods
- name: not
  id: matchers#not
  summary: null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### not :[matchers](matchers)

    Invert the matcher following this [`expect`](global#expect)

    ##### Type:

    -  [matchers](matchers)

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(something).not.toBe(true);
    ```

    ### Methods
- name: notEmpty
  id: jasmine#.notEmpty
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) notEmpty()

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is not empty.

    Since:

    - 3.1.0
- name: nothing
  id: matchers#nothing
  summary: expect nothing explicitly
  belongs_to: 'Namespace: matchers'
  description: |-
    #### nothing()

    [`expect`](global#expect) nothing explicitly.

    Since:

    - 2.8.0

    ##### Example

    ``` javascript
    expect().nothing();
    ```
- name: objectContaining
  id: jasmine#.objectContaining
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) objectContaining(sample)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared contains at least the keys and values.

    ##### Parameters:

    | Name     | Type   | Description                                            |
    |----------|--------|--------------------------------------------------------|
    | `sample` | Object | The subset of properties that *must* be in the actual. |

    Since:

    - 1.3.0
- name: parentSuite
  id: suite#parentSuite
  summary: The parent of this suite, or null if this is the top suite
  belongs_to: 'Interface: Suite'
  description: |-
    #### (readonly) parentSuite :[Suite](suite)

    The parent of this suite, or null if this is the top suite.

    ##### Type:

    -  [Suite](suite)

    ### Methods
- name: pending
  id: global#pending
  summary: Mark a spec as pending, expectation results will be ignored
  belongs_to: Global
  description: |-
    #### pending(messageopt)

    Mark a spec as pending, expectation results will be ignored.

    ##### Parameters:

    | Name      | Type   | Attributes   | Description                 |
    |-----------|--------|--------------|-----------------------------|
    | `message` | String | \<optional\> | Reason the spec is pending. |

    Since:

    - 2.0.0
- name: pp
  id: matchersutil#pp
  summary: Formats a value for use in matcher failure messages and similar contexts, taking into account the current set of custom value formatters
  belongs_to: 'Class: MatchersUtil'
  description: "#### pp(value) → {string}\n\nFormats a value for use in matcher failure messages and similar contexts, taking into account the current set of custom value formatters.\n\n##### Parameters:\n\n| Name    | Type | Description               |\n|---------|------|---------------------------|\n| `value` | \\*   | The value to pretty-print |\n\nSince:\n\n- 3.6.0\n\n##### Returns:\n\nThe pretty-printed value\n\nType\n\nstring\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/MatchersUtil.html](https://jasmine.github.io/api/4.0/MatchersUtil.html)"
- name: provideFallbackReporter
  id: env#provideFallbackReporter
  summary: Provide a fallback reporter if no other reporters have been specified
  belongs_to: 'Class: Env'
  description: |-
    #### provideFallbackReporter(reporterToAdd)

    Provide a fallback reporter if no other reporters have been specified.

    ##### Parameters:

    | Name            | Type                   | Description  |
    |-----------------|------------------------|--------------|
    | `reporterToAdd` |  [Reporter](reporter)  | The reporter |

    Since:

    - 2.5.0

    See:

    - [custom reporter](https://jasmine.github.io/tutorials/custom_reporter)
- name: random
  id: configuration#random
  summary: null
  belongs_to: 'Interface: Configuration'
  description: |-
    #### random :Boolean

    Whether to randomize spec execution order

    ##### Type:

    - Boolean

    Since:

    - 3.3.0

    Default Value:

    - true
- name: rejectWith
  id: spystrategy#rejectWith
  summary: Tell the spy to return a promise rejecting with the specified value when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### rejectWith(value)

    Tell the spy to return a promise rejecting with the specified value when invoked.

    ##### Parameters:

    | Name    | Type | Description          |
    |---------|------|----------------------|
    | `value` | \*   | The value to return. |

    Since:

    - 3.5.0
- name: reset
  id: spy_calls#reset
  summary: Reset this spy as if it has never been called
  belongs_to: 'Namespace: calls'
  description: |-
    #### reset()

    Reset this spy as if it has never been called.

    Since:

    - 2.0.0
- name: resolveTo
  id: spystrategy#resolveTo
  summary: Tell the spy to return a promise resolving to the specified value when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### resolveTo(value)

    Tell the spy to return a promise resolving to the specified value when invoked.

    ##### Parameters:

    | Name    | Type | Description          |
    |---------|------|----------------------|
    | `value` | \*   | The value to return. |

    Since:

    - 3.5.0
- name: returnValue
  id: spystrategy#returnValue
  summary: Tell the spy to return the value when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### returnValue(value)

    Tell the spy to return the value when invoked.

    ##### Parameters:

    | Name    | Type | Description          |
    |---------|------|----------------------|
    | `value` | \*   | The value to return. |

    Since:

    - 2.0.0
- name: returnValues
  id: spystrategy#returnValues
  summary: Tell the spy to return one of the specified values (sequentially) each time the spy is invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### returnValues(…values)

    Tell the spy to return one of the specified values (sequentially) each time the spy is invoked.

    ##### Parameters:

    | Name     | Type | Attributes     | Description                                           |
    |----------|------|----------------|-------------------------------------------------------|
    | `values` | \*   | \<repeatable\> | Values to be returned on subsequent calls to the spy. |

    Since:

    - 2.1.0
- name: saveArgumentsByValue
  id: spy_calls#saveArgumentsByValue
  summary: Set this spy to do a shallow clone of arguments passed to each invocation
  belongs_to: 'Namespace: calls'
  description: |-
    #### saveArgumentsByValue()

    Set this spy to do a shallow clone of arguments passed to each invocation.

    Since:

    - 2.5.0
- name: seed
  id: configuration#seed
  summary: Seed to use as the basis of randomization
  belongs_to: 'Interface: Configuration'
  description: |-
    #### seed :number\|string

    Seed to use as the basis of randomization. Null causes the seed to be determined randomly at the start of execution.

    ##### Type:

    - number \| string

    Since:

    - 3.3.0

    Default Value:

    - null
- name: setContaining
  id: jasmine#.setContaining
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) setContaining(sample)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if every item in the sample passes the deep equality comparison with at least one item in the actual value being compared

    ##### Parameters:

    | Name     | Type | Description                                       |
    |----------|------|---------------------------------------------------|
    | `sample` | Set  | The subset of items that *must* be in the actual. |

    Since:

    - 3.5.0
- name: setDefaultSpyStrategy
  id: jasmine#.setDefaultSpyStrategy
  summary: Set the default spy strategy for the current scope of specs
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) setDefaultSpyStrategy(defaultStrategyFn)

    Set the default spy strategy for the current scope of specs.

    *Note:* This is only callable from within a [`beforeEach`](global#beforeEach), [`it`](global#it), or [`beforeAll`](global#beforeAll).

    ##### Parameters:

    | Name                | Type     | Description                        |
    |---------------------|----------|------------------------------------|
    | `defaultStrategyFn` | function | a function that assigns a strategy |

    ##### Example

    ``` javascript
    beforeEach(function() {
      jasmine.setDefaultSpyStrategy(and => and.returnValue(true));
    });
    ```
- name: setSpecProperty
  id: env#setSpecProperty
  summary: null
  belongs_to: 'Class: Env'
  description: |-
    #### setSpecProperty(key, value)

    Sets a user-defined property that will be provided to reporters as part of the properties field of [`SpecResult`](global#SpecResult)

    ##### Parameters:

    | Name    | Type   | Description               |
    |---------|--------|---------------------------|
    | `key`   | String | The name of the property  |
    | `value` | \*     | The value of the property |

    Since:

    - 3.6.0
- name: setSpecProperty
  id: global#setSpecProperty
  summary: null
  belongs_to: Global
  description: |-
    #### setSpecProperty(key, value)

    Sets a user-defined property that will be provided to reporters as part of the properties field of [`SpecResult`](global#SpecResult)

    ##### Parameters:

    | Name    | Type   | Description               |
    |---------|--------|---------------------------|
    | `key`   | String | The name of the property  |
    | `value` | \*     | The value of the property |

    Since:

    - 3.6.0
- name: setSuiteProperty
  id: env#setSuiteProperty
  summary: null
  belongs_to: 'Class: Env'
  description: |-
    #### setSuiteProperty(key, value)

    Sets a user-defined property that will be provided to reporters as part of the properties field of [`SuiteResult`](global#SuiteResult)

    ##### Parameters:

    | Name    | Type   | Description               |
    |---------|--------|---------------------------|
    | `key`   | String | The name of the property  |
    | `value` | \*     | The value of the property |

    Since:

    - 3.6.0
- name: setSuiteProperty
  id: global#setSuiteProperty
  summary: null
  belongs_to: Global
  description: |-
    #### setSuiteProperty(key, value)

    Sets a user-defined property that will be provided to reporters as part of the properties field of [`SuiteResult`](global#SuiteResult)

    ##### Parameters:

    | Name    | Type   | Description               |
    |---------|--------|---------------------------|
    | `key`   | String | The name of the property  |
    | `value` | \*     | The value of the property |

    Since:

    - 3.6.0
- name: specDone
  id: reporter#specDone
  summary: specDone is invoked when an it and its associated beforeEach and afterEach functions have been run
  belongs_to: 'Interface: Reporter'
  description: |-
    #### specDone(result, doneopt)

    `specDone` is invoked when an `it` and its associated `beforeEach` and `afterEach` functions have been run.

    While jasmine doesn't require any specific functions, not defining a `specDone` will make it impossible for a reporter to know when a spec has failed.

    ##### Parameters:

    | Name     | Type                              | Attributes   | Description                                                                                                                      |
    |----------|-----------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `result` |  [SpecResult](global#SpecResult)  |              |                                                                                                                                  |
    | `done`   | function                          | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    See:

    - [async](https://jasmine.github.io/tutorials/async)

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: specFilter
  id: configuration#specFilter
  summary: null
  belongs_to: 'Interface: Configuration'
  description: |-
    #### specFilter :[SpecFilter](global#SpecFilter)

    Function to use to filter specs

    ##### Type:

    -  [SpecFilter](global#SpecFilter)

    Since:

    - 3.3.0

    Default Value:

    - A function that always returns true.
- name: SpecFilter
  id: global#SpecFilter
  summary: A function that takes a spec and returns true if it should be executed or false if it should be skipped
  belongs_to: Global
  description: |-
    #### SpecFilter(spec)

    A function that takes a spec and returns true if it should be executed or false if it should be skipped.

    ##### Parameters:

    | Name   | Type           | Description                                   |
    |--------|----------------|-----------------------------------------------|
    | `spec` |  [Spec](spec)  | The spec that the filter is being applied to. |

    ##### Returns:

    boolean
- name: SpecResult
  id: global#SpecResult
  summary: null
  belongs_to: Global
  description: |-
    #### SpecResult

    ##### Properties:

    | Name                  | Type                                                    | Description                                                                                             |
    |-----------------------|---------------------------------------------------------|---------------------------------------------------------------------------------------------------------|
    | `id`                  | Int                                                     | The unique id of this spec.                                                                             |
    | `description`         | String                                                  | The description passed to the [`it`](global#it) that created this spec.                                 |
    | `fullName`            | String                                                  | The full description including all ancestors of this spec.                                              |
    | `failedExpectations`  | Array.\<[Expectation](global#Expectation)\>             | The list of expectations that failed during execution of this spec.                                     |
    | `passedExpectations`  | Array.\<[Expectation](global#Expectation)\>             | The list of expectations that passed during execution of this spec.                                     |
    | `deprecationWarnings` | Array.\<[Expectation](global#Expectation)\>             | The list of deprecation warnings that occurred during execution this spec.                              |
    | `pendingReason`       | String                                                  | If the spec is [`pending`](global#pending), this will be the reason.                                    |
    | `status`              | String                                                  | Once the spec has completed, this string represents the pass/fail status of this spec.                  |
    | `duration`            | number                                                  | The time in ms used by the spec execution, including any before/afterEach.                              |
    | `properties`          | Object                                                  | User-supplied properties, if any, that were set using [`Env#setSpecProperty`](env#setSpecProperty)      |
    | `debugLogs`           | Array.\<[DebugLogEntry](global#DebugLogEntry)\> \| null | Messages, if any, that were logged using [`jasmine.debugLog`](jasmine#.debugLog) during a failing spec. |

    Since:

    - 2.0.0
- name: specResults
  id: jsapireporter#specResults
  summary: Get the results for a set of specs
  belongs_to: 'Class: jsApiReporter'
  description: |-
    #### specResults(index, length) → {Array.\<[SpecResult](global#SpecResult)\>}

    Get the results for a set of specs.

    Retrievable in slices for easier serialization.

    ##### Parameters:

    | Name     | Type   | Description                                   |
    |----------|--------|-----------------------------------------------|
    | `index`  | Number | The position in the specs list to start from. |
    | `length` | Number | Maximum number of specs results to return.    |

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Array.\<[SpecResult](global#SpecResult)\>
- name: specs
  id: jsapireporter#specs
  summary: Get all spec results
  belongs_to: 'Class: jsApiReporter'
  description: |-
    #### specs() → {Array.\<[SpecResult](global#SpecResult)\>}

    Get all spec results.

    Since:

    - 2.0.0

    ##### Returns:

    Type

    Array.\<[SpecResult](global#SpecResult)\>
- name: specStarted
  id: reporter#specStarted
  summary: Optionally return a Promise instead of using done to cause Jasmine to wait for completion
  belongs_to: 'Interface: Reporter'
  description: |-
    #### specStarted(result, doneopt)

    `specStarted` is invoked when an `it` starts to run (including associated `beforeEach` functions)

    ##### Parameters:

    | Name     | Type                              | Attributes   | Description                                                                                                                      |
    |----------|-----------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `result` |  [SpecResult](global#SpecResult)  |              | Information about the individual [`it`](global#it) being run                                                                     |
    | `done`   | function                          | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    See:

    - [async](https://jasmine.github.io/tutorials/async)

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: spyOn
  id: global#spyOn
  summary: Install a spy onto an existing object
  belongs_to: Global
  description: |-
    #### spyOn(obj, methodName) → {[Spy](spy)}

    Install a spy onto an existing object.

    ##### Parameters:

    | Name         | Type   | Description                                            |
    |--------------|--------|--------------------------------------------------------|
    | `obj`        | Object | The object upon which to install the [`Spy`](spy).     |
    | `methodName` | String | The name of the method to replace with a [`Spy`](spy). |

    Since:

    - 1.3.0

    ##### Returns:

    Type

    [Spy](spy)
- name: spyOnAllFunctions
  id: global#spyOnAllFunctions
  summary: Installs spies on all writable and configurable properties of an object
  belongs_to: Global
  description: |-
    #### spyOnAllFunctions(obj, includeNonEnumerable) → {Object}

    Installs spies on all writable and configurable properties of an object.

    ##### Parameters:

    | Name                   | Type    | Description                                              |
    |------------------------|---------|----------------------------------------------------------|
    | `obj`                  | Object  | The object upon which to install the [`Spy`](spy)s       |
    | `includeNonEnumerable` | boolean | Whether or not to add spies to non-enumerable properties |

    Since:

    - 3.2.1

    ##### Returns:

    the spied object

    Type

    Object
- name: spyOnProperty
  id: global#spyOnProperty
  summary: Install a spy on a property installed with Object.defineProperty onto an existing object
  belongs_to: Global
  description: |-
    #### spyOnProperty(obj, propertyName, accessTypeopt) → {[Spy](spy)}

    Install a spy on a property installed with `Object.defineProperty` onto an existing object.

    ##### Parameters:

    | Name           | Type   | Attributes   | Default | Description                                                    |
    |----------------|--------|--------------|---------|----------------------------------------------------------------|
    | `obj`          | Object |              |         | The object upon which to install the [`Spy`](spy)              |
    | `propertyName` | String |              |         | The name of the property to replace with a [`Spy`](spy).       |
    | `accessType`   | String | \<optional\> | get     | The access type (get\|set) of the property to [`Spy`](spy) on. |

    Since:

    - 2.6.0

    ##### Returns:

    Type

    [Spy](spy)
- name: status
  id: jsapireporter#status
  summary: Get the current status for the Jasmine environment
  belongs_to: 'Class: jsApiReporter'
  description: |-
    #### status() → {String}

    Get the current status for the Jasmine environment.

    Since:

    - 2.0.0

    ##### Returns:

    - One of `loaded`, `started`, or `done`

    Type

    String
- name: stopOnSpecFailure
  id: configuration#stopOnSpecFailure
  summary: null
  belongs_to: 'Interface: Configuration'
  description: |-
    #### stopOnSpecFailure :Boolean

    Whether to stop execution of the suite after the first spec failure

    ##### Type:

    - Boolean

    Since:

    - 3.9.0

    Default Value:

    - false
- name: stopSpecOnExpectationFailure
  id: configuration#stopSpecOnExpectationFailure
  summary: Whether to cause specs to only have one expectation failure
  belongs_to: 'Interface: Configuration'
  description: |-
    #### stopSpecOnExpectationFailure :Boolean

    Whether to cause specs to only have one expectation failure.

    ##### Type:

    - Boolean

    Since:

    - 3.3.0

    Default Value:

    - false
- name: stringContaining
  id: jasmine#.stringContaining
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) stringContaining(expected)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is a `String` that contains the specified `String`.

    ##### Parameters:

    | Name       | Type   | Description |
    |------------|--------|-------------|
    | `expected` | String |             |

    Since:

    - 3.10.0
- name: stringMatching
  id: jasmine#.stringMatching
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: |-
    #### (static) stringMatching(expected)

    Get an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value is a `String` that matches the `RegExp` or `String`.

    ##### Parameters:

    | Name       | Type             | Description |
    |------------|------------------|-------------|
    | `expected` | RegExp \| String |             |

    Since:

    - 2.2.0
- name: stub
  id: spystrategy#stub
  summary: Tell the spy to do nothing when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: |-
    #### stub()

    Tell the spy to do nothing when invoked. This is the default.

    Since:

    - 2.0.0
- name: suiteDone
  id: reporter#suiteDone
  summary: While jasmine doesn't require any specific functions, not defining a suiteDone will make it impossible for a reporter to know when a suite has failures in an afterAll
  belongs_to: 'Interface: Reporter'
  description: |-
    #### suiteDone(result, doneopt)

    `suiteDone` is invoked when all of the child specs and suites for a given suite have been run

    While jasmine doesn't require any specific functions, not defining a `suiteDone` will make it impossible for a reporter to know when a suite has failures in an `afterAll`.

    ##### Parameters:

    | Name     | Type                                | Attributes   | Description                                                                                                                      |
    |----------|-------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|
    | `result` |  [SuiteResult](global#SuiteResult)  |              |                                                                                                                                  |
    | `done`   | function                            | \<optional\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |

    See:

    - [async](https://jasmine.github.io/tutorials/async)

    ##### Returns:

    Optionally return a Promise instead of using `done` to cause Jasmine to wait for completion.
- name: SuiteResult
  id: global#SuiteResult
  summary: © 2008–2019 Pivotal Labs Licensed under the MIT License
  belongs_to: Global
  description: "#### SuiteResult\n\n##### Properties:\n\n| Name                  | Type                                        | Description                                                                                          |\n|-----------------------|---------------------------------------------|------------------------------------------------------------------------------------------------------|\n| `id`                  | Int                                         | The unique id of this suite.                                                                         |\n| `description`         | String                                      | The description text passed to the [`describe`](global#describe) that made this suite.               |\n| `fullName`            | String                                      | The full description including all ancestors of this suite.                                          |\n| `failedExpectations`  | Array.\\<[Expectation](global#Expectation)\\> | The list of expectations that failed in an [`afterAll`](global#afterAll) for this suite.             |\n| `deprecationWarnings` | Array.\\<[Expectation](global#Expectation)\\> | The list of deprecation warnings that occurred on this suite.                                        |\n| `status`              | String                                      | Once the suite has completed, this string represents the pass/fail status of this suite.             |\n| `duration`            | number                                      | The time in ms for Suite execution, including any before/afterAll, before/afterEach.                 |\n| `properties`          | Object                                      | User-supplied properties, if any, that were set using [`Env#setSuiteProperty`](env#setSuiteProperty) |\n\nSince:\n\n- 2.0.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/global.html](https://jasmine.github.io/api/4.0/global.html)"
- name: suiteResults
  id: jsapireporter#suiteResults
  summary: Get the results for a set of suites
  belongs_to: 'Class: jsApiReporter'
  description: |-
    #### suiteResults(index, length) → {Array.\<[SuiteResult](global#SuiteResult)\>}

    Get the results for a set of suites.

    Retrievable in slices for easier serialization.

    ##### Parameters:

    | Name     | Type   | Description                                    |
    |----------|--------|------------------------------------------------|
    | `index`  | Number | The position in the suites list to start from. |
    | `length` | Number | Maximum number of suite results to return.     |

    Since:

    - 2.1.0

    ##### Returns:

    Type

    Array.\<[SuiteResult](global#SuiteResult)\>
- name: suites
  id: jsapireporter#suites
  summary: Get all of the suites in a single object, with their id as the key
  belongs_to: 'Class: jsApiReporter'
  description: "#### suites() → {Object}\n\nGet all of the suites in a single object, with their `id` as the key.\n\nSince:\n\n- 2.0.0\n\n##### Returns:\n\n- Map of suite id to [`SuiteResult`](global#SuiteResult)\n\nType\n\nObject\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/jsApiReporter.html](https://jasmine.github.io/api/4.0/jsApiReporter.html)"
- name: suiteStarted
  id: reporter#suiteStarted
  summary: Optionally return a Promise instead of using done to cause Jasmine to wait for completion
  belongs_to: 'Interface: Reporter'
  description: "#### suiteStarted(result, doneopt)\n\n`suiteStarted` is invoked when a `describe` starts to run\n\n##### Parameters:\n\n| Name     | Type                                | Attributes   | Description                                                                                                                      |\n|----------|-------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `result` |  [SuiteResult](global#SuiteResult)  |              | Information about the individual [`describe`](global#describe) being run                                                         |\n| `done`   | function                            | \\<optional\\> | Used to specify to Jasmine that this callback is asynchronous and Jasmine should wait until it has been called before moving on. |\n\nSee:\n\n- [async](https://jasmine.github.io/tutorials/async)\n\n##### Returns:\n\nOptionally return a Promise instead of using `done` to cause Jasmine to wait for completion.\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Reporter.html](https://jasmine.github.io/api/4.0/Reporter.html)"
- name: thisFor
  id: spy_calls#thisFor
  summary: Get the "this" object that was passed to a specific invocation of this spy
  belongs_to: 'Namespace: calls'
  description: "#### thisFor(index) → (nullable) {Object}\n\nGet the \"this\" object that was passed to a specific invocation of this spy.\n\n##### Parameters:\n\n| Name    | Type    | Description                   |\n|---------|---------|-------------------------------|\n| `index` | Integer | The 0-based invocation index. |\n\nSince:\n\n- 3.8.0\n\n##### Returns:\n\nType\n\nObject\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Spy_calls.html](https://jasmine.github.io/api/4.0/Spy_calls.html)"
- name: throwError
  id: spystrategy#throwError
  summary: Tell the spy to throw an error when invoked
  belongs_to: 'Interface: SpyStrategy'
  description: "#### throwError(something)\n\nTell the spy to throw an error when invoked.\n\n##### Parameters:\n\n| Name        | Type                      | Description    |\n|-------------|---------------------------|----------------|\n| `something` | Error \\| Object \\| String | Thing to throw |\n\nSince:\n\n- 2.0.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/SpyStrategy.html](https://jasmine.github.io/api/4.0/SpyStrategy.html)"
- name: tick
  id: clock#tick
  summary: null
  belongs_to: 'Class: Clock'
  description: |-
    #### tick(millis)

    Tick the Clock forward, running any enqueued timeouts along the way

    ##### Parameters:

    | Name     | Type | Description                         |
    |----------|------|-------------------------------------|
    | `millis` | int  | The number of milliseconds to tick. |

    Since:

    - 1.3.0
- name: toBe
  id: matchers#toBe
  summary: expect the actual value to be === to the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBe(expected)

    [`expect`](global#expect) the actual value to be `===` to the expected value.

    ##### Parameters:

    | Name       | Type   | Description                            |
    |------------|--------|----------------------------------------|
    | `expected` | Object | The expected value to compare against. |

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(thing).toBe(realThing);
    ```
- name: toBeCloseTo
  id: matchers#toBeCloseTo
  summary: expect the actual value to be within a specified precision of the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeCloseTo(expected, precisionopt)

    [`expect`](global#expect) the actual value to be within a specified precision of the expected value.

    ##### Parameters:

    | Name        | Type   | Attributes   | Default | Description                            |
    |-------------|--------|--------------|---------|----------------------------------------|
    | `expected`  | Object |              |         | The expected value to compare against. |
    | `precision` | Number | \<optional\> | 2       | The number of decimal points to check. |

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(number).toBeCloseTo(42.2, 3);
    ```
- name: toBeDefined
  id: matchers#toBeDefined
  summary: expect the actual value to be defined
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeDefined()

    [`expect`](global#expect) the actual value to be defined. (Not `undefined`)

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(result).toBeDefined();
    ```
- name: toBeFalse
  id: matchers#toBeFalse
  summary: expect the actual value to be false
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeFalse()

    [`expect`](global#expect) the actual value to be `false`.

    Since:

    - 3.5.0

    ##### Example

    ``` javascript
    expect(result).toBeFalse();
    ```
- name: toBeFalsy
  id: matchers#toBeFalsy
  summary: null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeFalsy()

    [`expect`](global#expect) the actual value to be falsy

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(result).toBeFalsy();
    ```
- name: toBeGreaterThan
  id: matchers#toBeGreaterThan
  summary: expect the actual value to be greater than the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeGreaterThan(expected)

    [`expect`](global#expect) the actual value to be greater than the expected value.

    ##### Parameters:

    | Name       | Type   | Description                   |
    |------------|--------|-------------------------------|
    | `expected` | Number | The value to compare against. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(result).toBeGreaterThan(3);
    ```
- name: toBeGreaterThanOrEqual
  id: matchers#toBeGreaterThanOrEqual
  summary: expect the actual value to be greater than or equal to the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeGreaterThanOrEqual(expected)

    [`expect`](global#expect) the actual value to be greater than or equal to the expected value.

    ##### Parameters:

    | Name       | Type   | Description                            |
    |------------|--------|----------------------------------------|
    | `expected` | Number | The expected value to compare against. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(result).toBeGreaterThanOrEqual(25);
    ```
- name: toBeInstanceOf
  id: matchers#toBeInstanceOf
  summary: null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeInstanceOf(expected)

    [`expect`](global#expect) the actual to be an instance of the expected class

    ##### Parameters:

    | Name       | Type   | Description                                    |
    |------------|--------|------------------------------------------------|
    | `expected` | Object | The class or constructor function to check for |

    Since:

    - 3.5.0

    ##### Example

    ``` javascript
    expect('foo').toBeInstanceOf(String);
    expect(3).toBeInstanceOf(Number);
    expect(new Error()).toBeInstanceOf(Error);
    ```
- name: toBeLessThan
  id: matchers#toBeLessThan
  summary: expect the actual value to be less than the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeLessThan(expected)

    [`expect`](global#expect) the actual value to be less than the expected value.

    ##### Parameters:

    | Name       | Type   | Description                            |
    |------------|--------|----------------------------------------|
    | `expected` | Number | The expected value to compare against. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(result).toBeLessThan(0);
    ```
- name: toBeLessThanOrEqual
  id: matchers#toBeLessThanOrEqual
  summary: expect the actual value to be less than or equal to the expected value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeLessThanOrEqual(expected)

    [`expect`](global#expect) the actual value to be less than or equal to the expected value.

    ##### Parameters:

    | Name       | Type   | Description                            |
    |------------|--------|----------------------------------------|
    | `expected` | Number | The expected value to compare against. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(result).toBeLessThanOrEqual(123);
    ```
- name: toBeNaN
  id: matchers#toBeNaN
  summary: expect the actual value to be NaN (Not a Number)
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeNaN()

    [`expect`](global#expect) the actual value to be `NaN` (Not a Number).

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(thing).toBeNaN();
    ```
- name: toBeNegativeInfinity
  id: matchers#toBeNegativeInfinity
  summary: expect the actual value to be -Infinity (-infinity)
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeNegativeInfinity()

    [`expect`](global#expect) the actual value to be `-Infinity` (-infinity).

    Since:

    - 2.6.0

    ##### Example

    ``` javascript
    expect(thing).toBeNegativeInfinity();
    ```
- name: toBeNull
  id: matchers#toBeNull
  summary: expect the actual value to be null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeNull()

    [`expect`](global#expect) the actual value to be `null`.

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(result).toBeNull();
    ```
- name: toBePending
  id: async-matchers#toBePending
  summary: Expect a promise to be pending, i.e
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBePending()

    Expect a promise to be pending, i.e. the promise is neither resolved nor rejected.

    Since:

    - 3.6

    ##### Example

    ``` javascript
    await expectAsync(aPromise).toBePending();
    ```
- name: toBePositiveInfinity
  id: matchers#toBePositiveInfinity
  summary: expect the actual value to be Infinity (infinity)
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBePositiveInfinity()

    [`expect`](global#expect) the actual value to be `Infinity` (infinity).

    Since:

    - 2.6.0

    ##### Example

    ``` javascript
    expect(thing).toBePositiveInfinity();
    ```
- name: toBeRejected
  id: async-matchers#toBeRejected
  summary: Expect a promise to be rejected
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBeRejected()

    Expect a promise to be rejected.

    Since:

    - 3.1.0

    ##### Examples

    ``` javascript
    await expectAsync(aPromise).toBeRejected();
    ```

    ``` javascript
    return expectAsync(aPromise).toBeRejected();
    ```
- name: toBeRejectedWith
  id: async-matchers#toBeRejectedWith
  summary: Expect a promise to be rejected with a value equal to the expected, using deep equality comparison
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBeRejectedWith(expected)

    Expect a promise to be rejected with a value equal to the expected, using deep equality comparison.

    ##### Parameters:

    | Name       | Type   | Description                                            |
    |------------|--------|--------------------------------------------------------|
    | `expected` | Object | Value that the promise is expected to be rejected with |

    Since:

    - 3.3.0

    ##### Examples

    ``` javascript
    await expectAsync(aPromise).toBeRejectedWith({prop: 'value'});
    ```

    ``` javascript
    return expectAsync(aPromise).toBeRejectedWith({prop: 'value'});
    ```
- name: toBeRejectedWithError
  id: async-matchers#toBeRejectedWithError
  summary: null
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBeRejectedWithError(expectedopt, messageopt)

    Expect a promise to be rejected with a value matched to the expected

    ##### Parameters:

    | Name       | Type             | Attributes   | Description                                                                                                       |
    |------------|------------------|--------------|-------------------------------------------------------------------------------------------------------------------|
    | `expected` | Error            | \<optional\> | `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used. |
    | `message`  | RegExp \| String | \<optional\> | The message that should be set on the thrown `Error`                                                              |

    Since:

    - 3.5.0

    ##### Example

    ``` javascript
    await expectAsync(aPromise).toBeRejectedWithError(MyCustomError, 'Error message');
    await expectAsync(aPromise).toBeRejectedWithError(MyCustomError, /Error message/);
    await expectAsync(aPromise).toBeRejectedWithError(MyCustomError);
    await expectAsync(aPromise).toBeRejectedWithError('Error message');
    return expectAsync(aPromise).toBeRejectedWithError(/Error message/);
    ```
- name: toBeResolved
  id: async-matchers#toBeResolved
  summary: Expect a promise to be resolved
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBeResolved()

    Expect a promise to be resolved.

    Since:

    - 3.1.0

    ##### Examples

    ``` javascript
    await expectAsync(aPromise).toBeResolved();
    ```

    ``` javascript
    return expectAsync(aPromise).toBeResolved();
    ```
- name: toBeResolvedTo
  id: async-matchers#toBeResolvedTo
  summary: Expect a promise to be resolved to a value equal to the expected, using deep equality comparison
  belongs_to: 'Namespace: async-matchers'
  description: |-
    #### (async) toBeResolvedTo(expected)

    Expect a promise to be resolved to a value equal to the expected, using deep equality comparison.

    ##### Parameters:

    | Name       | Type   | Description                                      |
    |------------|--------|--------------------------------------------------|
    | `expected` | Object | Value that the promise is expected to resolve to |

    Since:

    - 3.1.0

    ##### Examples

    ``` javascript
    await expectAsync(aPromise).toBeResolvedTo({prop: 'value'});
    ```

    ``` javascript
    return expectAsync(aPromise).toBeResolvedTo({prop: 'value'});
    ```
- name: toBeTrue
  id: matchers#toBeTrue
  summary: expect the actual value to be true
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeTrue()

    [`expect`](global#expect) the actual value to be `true`.

    Since:

    - 3.5.0

    ##### Example

    ``` javascript
    expect(result).toBeTrue();
    ```
- name: toBeTruthy
  id: matchers#toBeTruthy
  summary: expect the actual value to be truthy
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeTruthy()

    [`expect`](global#expect) the actual value to be truthy.

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(thing).toBeTruthy();
    ```
- name: toBeUndefined
  id: matchers#toBeUndefined
  summary: expect the actual value to be undefined
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toBeUndefined()

    [`expect`](global#expect) the actual value to be `undefined`.

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(result).toBeUndefined():
    ```
- name: toContain
  id: matchers#toContain
  summary: expect the actual value to contain a specific value
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toContain(expected)

    [`expect`](global#expect) the actual value to contain a specific value.

    ##### Parameters:

    | Name       | Type   | Description            |
    |------------|--------|------------------------|
    | `expected` | Object | The value to look for. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(array).toContain(anElement);
    expect(string).toContain(substring);
    ```
- name: toEqual
  id: matchers#toEqual
  summary: expect the actual value to be equal to the expected, using deep equality comparison
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toEqual(expected)

    [`expect`](global#expect) the actual value to be equal to the expected, using deep equality comparison.

    ##### Parameters:

    | Name       | Type   | Description    |
    |------------|--------|----------------|
    | `expected` | Object | Expected value |

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(bigObject).toEqual({"foo": ['bar', 'baz']});
    ```
- name: toHaveBeenCalled
  id: matchers#toHaveBeenCalled
  summary: expect the actual (a Spy) to have been called
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveBeenCalled()

    [`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called.

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(mySpy).toHaveBeenCalled();
    expect(mySpy).not.toHaveBeenCalled();
    ```
- name: toHaveBeenCalledBefore
  id: matchers#toHaveBeenCalledBefore
  summary: expect the actual value (a Spy) to have been called before another Spy
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveBeenCalledBefore(expected)

    [`expect`](global#expect) the actual value (a [`Spy`](spy)) to have been called before another [`Spy`](spy).

    ##### Parameters:

    | Name       | Type         | Description                                                                |
    |------------|--------------|----------------------------------------------------------------------------|
    | `expected` |  [Spy](spy)  | [`Spy`](spy) that should have been called after the `actual` [`Spy`](spy). |

    Since:

    - 2.6.0

    ##### Example

    ``` javascript
    expect(mySpy).toHaveBeenCalledBefore(otherSpy);
    ```
- name: toHaveBeenCalledOnceWith
  id: matchers#toHaveBeenCalledOnceWith
  summary: expect the actual (a Spy) to have been called exactly once, and exactly with the particular arguments
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveBeenCalledOnceWith()

    [`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called exactly once, and exactly with the particular arguments.

    ##### Parameters:

    | Type   | Attributes     | Description               |
    |--------|----------------|---------------------------|
    | Object | \<repeatable\> | The arguments to look for |

    Since:

    - 3.6.0

    ##### Example

    ``` javascript
    expect(mySpy).toHaveBeenCalledOnceWith('foo', 'bar', 2);
    ```
- name: toHaveBeenCalledTimes
  id: matchers#toHaveBeenCalledTimes
  summary: expect the actual (a Spy) to have been called the specified number of times
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveBeenCalledTimes(expected)

    [`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called the specified number of times.

    ##### Parameters:

    | Name       | Type   | Description                            |
    |------------|--------|----------------------------------------|
    | `expected` | Number | The number of invocations to look for. |

    Since:

    - 2.4.0

    ##### Example

    ``` javascript
    expect(mySpy).toHaveBeenCalledTimes(3);
    ```
- name: toHaveBeenCalledWith
  id: matchers#toHaveBeenCalledWith
  summary: expect the actual (a Spy) to have been called with particular arguments at least once
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveBeenCalledWith()

    [`expect`](global#expect) the actual (a [`Spy`](spy)) to have been called with particular arguments at least once.

    ##### Parameters:

    | Type   | Attributes     | Description               |
    |--------|----------------|---------------------------|
    | Object | \<repeatable\> | The arguments to look for |

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect(mySpy).toHaveBeenCalledWith('foo', 'bar', 2);
    ```
- name: toHaveClass
  id: matchers#toHaveClass
  summary: null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveClass(expected)

    [`expect`](global#expect) the actual value to be a DOM element that has the expected class

    ##### Parameters:

    | Name       | Type   | Description                |
    |------------|--------|----------------------------|
    | `expected` | Object | The class name to test for |

    Since:

    - 3.0.0

    ##### Example

    ``` javascript
    var el = document.createElement('div');
    el.className = 'foo bar baz';
    expect(el).toHaveClass('bar');
    ```
- name: toHaveSize
  id: matchers#toHaveSize
  summary: expect the actual size to be equal to the expected, using array-like length or object keys size
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toHaveSize(expected)

    [`expect`](global#expect) the actual size to be equal to the expected, using array-like length or object keys size.

    ##### Parameters:

    | Name       | Type   | Description   |
    |------------|--------|---------------|
    | `expected` | Object | Expected size |

    Since:

    - 3.6.0

    ##### Example

    ``` javascript
    array = [1,2];
    expect(array).toHaveSize(2);
    ```
- name: toMatch
  id: matchers#toMatch
  summary: null
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toMatch(expected)

    [`expect`](global#expect) the actual value to match a regular expression

    ##### Parameters:

    | Name       | Type             | Description                      |
    |------------|------------------|----------------------------------|
    | `expected` | RegExp \| String | Value to look for in the string. |

    Since:

    - 1.3.0

    ##### Example

    ``` javascript
    expect("my string").toMatch(/string$/);
    expect("other string").toMatch("her");
    ```
- name: topSuite
  id: env#topSuite
  summary: Provides the root suite, through which all suites and specs can be accessed
  belongs_to: 'Class: Env'
  description: "#### topSuite() → {[Suite](suite)}\n\nProvides the root suite, through which all suites and specs can be accessed.\n\nSince:\n\n- 2.0.0\n\n##### Returns:\n\nthe root suite\n\nType\n\n[Suite](suite)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Env.html](https://jasmine.github.io/api/4.0/Env.html)"
- name: toThrow
  id: matchers#toThrow
  summary: expect a function to throw something
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toThrow(expectedopt)

    [`expect`](global#expect) a function to `throw` something.

    ##### Parameters:

    | Name       | Type   | Attributes   | Description                                                                                              |
    |------------|--------|--------------|----------------------------------------------------------------------------------------------------------|
    | `expected` | Object | \<optional\> | Value that should be thrown. If not provided, simply the fact that something was thrown will be checked. |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(function() { return 'things'; }).toThrow('foo');
    expect(function() { return 'stuff'; }).toThrow();
    ```
- name: toThrowError
  id: matchers#toThrowError
  summary: expect a function to throw an Error
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toThrowError(expectedopt, messageopt)

    [`expect`](global#expect) a function to `throw` an `Error`.

    ##### Parameters:

    | Name       | Type             | Attributes   | Description                                                                                                       |
    |------------|------------------|--------------|-------------------------------------------------------------------------------------------------------------------|
    | `expected` | Error            | \<optional\> | `Error` constructor the object that was thrown needs to be an instance of. If not provided, `Error` will be used. |
    | `message`  | RegExp \| String | \<optional\> | The message that should be set on the thrown `Error`                                                              |

    Since:

    - 2.0.0

    ##### Example

    ``` javascript
    expect(function() { return 'things'; }).toThrowError(MyCustomError, 'message');
    expect(function() { return 'things'; }).toThrowError(MyCustomError, /bar/);
    expect(function() { return 'stuff'; }).toThrowError(MyCustomError);
    expect(function() { return 'other'; }).toThrowError(/foo/);
    expect(function() { return 'other'; }).toThrowError();
    ```
- name: toThrowMatching
  id: matchers#toThrowMatching
  summary: expect a function to throw something matching a predicate
  belongs_to: 'Namespace: matchers'
  description: |-
    #### toThrowMatching(predicate)

    [`expect`](global#expect) a function to `throw` something matching a predicate.

    ##### Parameters:

    | Name        | Type     | Description                                                                                 |
    |-------------|----------|---------------------------------------------------------------------------------------------|
    | `predicate` | function | A function that takes the thrown exception as its parameter and returns true if it matches. |

    Since:

    - 3.0.0

    ##### Example

    ``` javascript
    expect(function() { throw new Error('nope'); }).toThrowMatching(function(thrown) { return thrown.message === 'nope'; });
    ```
- name: truthy
  id: jasmine#.truthy
  summary: Get an AsymmetricEqualityTester, usable in any matcher that uses Jasmine's equality (e.g
  belongs_to: 'Namespace: jasmine'
  description: "#### (static) truthy()\n\nGet an [`AsymmetricEqualityTester`](asymmetricequalitytester), usable in any [`matcher`](matchers) that uses Jasmine's equality (e.g. [`toEqual`](matchers#toEqual), [`toContain`](matchers#toContain), or [`toHaveBeenCalledWith`](matchers#toHaveBeenCalledWith)), that will succeed if the actual value being compared is `true` or anything truthy.\n\nSince:\n\n- 3.1.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/jasmine.html](https://jasmine.github.io/api/4.0/jasmine.html)"
- name: uninstall
  id: clock#uninstall
  summary: Uninstall the mock clock, returning the built-in methods to their places
  belongs_to: 'Class: Clock'
  description: |-
    #### uninstall()

    Uninstall the mock clock, returning the built-in methods to their places.

    Since:

    - 2.0.0
- name: verboseDeprecations
  id: configuration#verboseDeprecations
  summary: Whether or not to issue warnings for certain deprecated functionality every time it's used
  belongs_to: 'Interface: Configuration'
  description: "#### verboseDeprecations :Boolean\n\nWhether or not to issue warnings for certain deprecated functionality every time it's used. If not set or set to false, deprecation warnings for methods that tend to be called frequently will be issued only once or otherwise throttled to to prevent the suite output from being flooded with warnings.\n\n##### Type:\n\n- Boolean\n\nSince:\n\n- 3.6.0\n\nDefault Value:\n\n- false\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Configuration.html](https://jasmine.github.io/api/4.0/Configuration.html)"
- name: withArgs
  id: spy#withArgs
  summary: Specifies a strategy to be used for calls to the spy that have the specified arguments
  belongs_to: 'Class: Spy'
  description: "#### withArgs(…args) → {[SpyStrategy](spystrategy)}\n\nSpecifies a strategy to be used for calls to the spy that have the specified arguments.\n\n##### Parameters:\n\n| Name   | Type | Attributes     | Description            |\n|--------|------|----------------|------------------------|\n| `args` | \\*   | \\<repeatable\\> | The arguments to match |\n\nSince:\n\n- 3.0.0\n\n##### Returns:\n\nType\n\n[SpyStrategy](spystrategy)\n\n##### Example\n\n``` javascript\nspyOn(someObj, 'func').withArgs(1, 2, 3).and.returnValue(42);\nsomeObj.func(1, 2, 3); // returns 42\n```\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Spy.html](https://jasmine.github.io/api/4.0/Spy.html)"
- name: withContext
  id: async-matchers#withContext
  summary: © 2008–2019 Pivotal Labs Licensed under the MIT License
  belongs_to: 'Namespace: async-matchers'
  description: "#### withContext(message) → {[async-matchers](async-matchers)}\n\nAdd some context for an [`expectAsync`](global#expectAsync)\n\n##### Parameters:\n\n| Name      | Type   | Description                                             |\n|-----------|--------|---------------------------------------------------------|\n| `message` | String | Additional context to show when the async matcher fails |\n\nSince:\n\n- 3.3.0\n\n##### Returns:\n\nType\n\n[async-matchers](async-matchers)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/async-matchers.html](https://jasmine.github.io/api/4.0/async-matchers.html)"
- name: withContext
  id: matchers#withContext
  summary: © 2008–2019 Pivotal Labs Licensed under the MIT License
  belongs_to: 'Namespace: matchers'
  description: "#### withContext(message) → {[matchers](matchers)}\n\nAdd some context for an [`expect`](global#expect)\n\n##### Parameters:\n\n| Name      | Type   | Description                                       |\n|-----------|--------|---------------------------------------------------|\n| `message` | String | Additional context to show when the matcher fails |\n\nSince:\n\n- 3.3.0\n\n##### Returns:\n\nType\n\n[matchers](matchers)\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/matchers.html](https://jasmine.github.io/api/4.0/matchers.html)"
- name: withMock
  id: clock#withMock
  summary: The clock will be installed before the function is called and uninstalled in a finally after the function completes
  belongs_to: 'Class: Clock'
  description: "#### withMock(closure)\n\nExecute a function with a mocked Clock\n\nThe clock will be [`install`](clock#install)ed before the function is called and [`uninstall`](clock#uninstall)ed in a `finally` after the function completes.\n\n##### Parameters:\n\n| Name      | Type     | Description                |\n|-----------|----------|----------------------------|\n| `closure` | function | The function to be called. |\n\nSince:\n\n- 2.3.0\n\n© 2008–2019 Pivotal Labs  \nLicensed under the MIT License.  \n[https://jasmine.github.io/api/4.0/Clock.html](https://jasmine.github.io/api/4.0/Clock.html)"
- name: xdescribe
  id: global#xdescribe
  summary: null
  belongs_to: Global
  description: |-
    #### xdescribe(description, specDefinitions)

    A temporarily disabled [`describe`](global#describe)

    Specs within an `xdescribe` will be marked pending and not executed

    ##### Parameters:

    | Name              | Type     | Description                                                            |
    |-------------------|----------|------------------------------------------------------------------------|
    | `description`     | String   | Textual description of the group                                       |
    | `specDefinitions` | function | Function for Jasmine to invoke that will define inner suites and specs |

    Since:

    - 1.3.0
- name: xit
  id: global#xit
  summary: The spec will report as pending and will not be executed
  belongs_to: Global
  description: |-
    #### xit(description, testFunctionopt)

    A temporarily disabled [`it`](global#it)

    The spec will report as `pending` and will not be executed.

    ##### Parameters:

    | Name           | Type                                                      | Attributes   | Description                                                         |
    |----------------|-----------------------------------------------------------|--------------|---------------------------------------------------------------------|
    | `description`  | String                                                    |              | Textual description of what this spec is checking.                  |
    | `testFunction` |  [implementationCallback](global#implementationCallback)  | \<optional\> | Function that contains the code of your test. Will not be executed. |

    Since:

    - 1.3.0

    ### Type Definitions
