---
name: Sequelize
slug: sequelize~6
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '6'
copyright: |-
  Copyright © 2014–present Sequelize contributors
  Licensed under the MIT License.
  https://sequelize.org/api/v6/
homepage: https://sequelize.org/

---
- name: AccessDeniedError
  id: class/src/errors/connection/access-denied-error.ts~accessdeniederror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# AccessDeniedError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → AccessDeniedError\n\nThrown when a connection to a database is refused due to insufficient privileges\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/access-denied-error.ts~AccessDeniedError.html](https://sequelize.org/api/v6/class/src/errors/connection/access-denied-error.ts~AccessDeniedError.html)"
- name: Advanced M:N Associations
  id: advanced-association-concepts/advanced-many-to-many/index
  summary: Make sure you have read the associations guide before reading this guide
  description: "# Advanced M:N Associations\n\nMake sure you have read the [associations guide](../../core-concepts/assocs/index) before reading this guide.\n\nLet's start with an example of a Many-to-Many relationship between `User` and `Profile`.\n\n``` js\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  points: DataTypes.INTEGER\n}, { timestamps: false });\nconst Profile = sequelize.define('profile', {\n  name: DataTypes.STRING\n}, { timestamps: false });\n```\n\nThe simplest way to define the Many-to-Many relationship is:\n\n``` js\nUser.belongsToMany(Profile, { through: 'User_Profiles' });\nProfile.belongsToMany(User, { through: 'User_Profiles' });\n```\n\nBy passing a string to `through` above, we are asking Sequelize to automatically generate a model named `User_Profiles` as the *through table* (also known as junction table), with only two columns: `userId` and `profileId`. A composite unique key will be established on these two columns.\n\nWe can also define ourselves a model to be used as the through table.\n\n``` js\nconst User_Profile = sequelize.define('User_Profile', {}, { timestamps: false });\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\nThe above has the exact same effect. Note that we didn't define any attributes on the `User_Profile` model. The fact that we passed it into a `belongsToMany` call tells sequelize to create the two attributes `userId` and `profileId` automatically, just like other associations also cause Sequelize to automatically add a column to one of the involved models.\n\nHowever, defining the model by ourselves has several advantages. We can, for example, define more columns on our through table:\n\n``` js\nconst User_Profile = sequelize.define('User_Profile', {\n  selfGranted: DataTypes.BOOLEAN\n}, { timestamps: false });\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\nWith this, we can now track an extra information at the through table, namely the `selfGranted` boolean. For example, when calling the `user.addProfile()` we can pass values for the extra columns using the `through` option.\n\nExample:\n\n``` js\nconst amidala = await User.create({ username: 'p4dm3', points: 1000 });\nconst queen = await Profile.create({ name: 'Queen' });\nawait amidala.addProfile(queen, { through: { selfGranted: false } });\nconst result = await User.findOne({\n  where: { username: 'p4dm3' },\n  include: Profile\n});\nconsole.log(result);\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\",\n      \"User_Profile\": {\n        \"userId\": 4,\n        \"profileId\": 6,\n        \"selfGranted\": false\n      }\n    }\n  ]\n}\n```\n\nYou can create all relationship in single `create` call too.\n\nExample:\n\n``` js\nconst amidala = await User.create({\n  username: 'p4dm3',\n  points: 1000,\n  profiles: [{\n    name: 'Queen',\n    User_Profile: {\n      selfGranted: true\n    }\n  }]\n}, {\n  include: Profile\n});\n\nconst result = await User.findOne({\n  where: { username: 'p4dm3' },\n  include: Profile\n});\n\nconsole.log(result);\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 1,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 1,\n      \"name\": \"Queen\",\n      \"User_Profile\": {\n        \"selfGranted\": true,\n        \"userId\": 1,\n        \"profileId\": 1\n      }\n    }\n  ]\n}\n```\n\nYou probably noticed that the `User_Profiles` table does not have an `id` field. As mentioned above, it has a composite unique key instead. The name of this composite unique key is chosen automatically by Sequelize but can be customized with the `uniqueKey` option:\n\n``` js\nUser.belongsToMany(Profile, { through: User_Profiles, uniqueKey: 'my_custom_unique' });\n```\n\nAnother possibility, if desired, is to force the through table to have a primary key just like other standard tables. To do this, simply define the primary key in the model:\n\n``` js\nconst User_Profile = sequelize.define('User_Profile', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  },\n  selfGranted: DataTypes.BOOLEAN\n}, { timestamps: false });\nUser.belongsToMany(Profile, { through: User_Profile });\nProfile.belongsToMany(User, { through: User_Profile });\n```\n\nThe above will still create two columns `userId` and `profileId`, of course, but instead of setting up a composite unique key on them, the model will use its `id` column as primary key. Everything else will still work just fine.\n\n## Through tables versus normal tables and the \"Super Many-to-Many association\"[​](#through-tables-versus-normal-tables-and-the-super-many-to-many-association \"Direct link to heading\")\n\nNow we will compare the usage of the last Many-to-Many setup shown above with the usual One-to-Many relationships, so that in the end we conclude with the concept of a *\"Super Many-to-Many relationship\"*.\n\n### Models recap (with minor rename)[​](#models-recap-with-minor-rename \"Direct link to heading\")\n\nTo make things easier to follow, let's rename our `User_Profile` model to `grant`. Note that everything works in the same way as before. Our models are:\n\n``` js\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  points: DataTypes.INTEGER\n}, { timestamps: false });\n\nconst Profile = sequelize.define('profile', {\n  name: DataTypes.STRING\n}, { timestamps: false });\n\nconst Grant = sequelize.define('grant', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  },\n  selfGranted: DataTypes.BOOLEAN\n}, { timestamps: false });\n```\n\nWe established a Many-to-Many relationship between `User` and `Profile` using the `Grant` model as the through table:\n\n``` js\nUser.belongsToMany(Profile, { through: Grant });\nProfile.belongsToMany(User, { through: Grant });\n```\n\nThis automatically added the columns `userId` and `profileId` to the `Grant` model.\n\n**Note:** As shown above, we have chosen to force the `grant` model to have a single primary key (called `id`, as usual). This is necessary for the *Super Many-to-Many relationship* that will be defined soon.\n\n### Using One-to-Many relationships instead[​](#using-one-to-many-relationships-instead \"Direct link to heading\")\n\nInstead of setting up the Many-to-Many relationship defined above, what if we did the following instead?\n\n``` js\n// Setup a One-to-Many relationship between User and Grant\nUser.hasMany(Grant);\nGrant.belongsTo(User);\n\n// Also setup a One-to-Many relationship between Profile and Grant\nProfile.hasMany(Grant);\nGrant.belongsTo(Profile);\n```\n\nThe result is essentially the same! This is because `User.hasMany(Grant)` and `Profile.hasMany(Grant)` will automatically add the `userId` and `profileId` columns to `Grant`, respectively.\n\nThis shows that one Many-to-Many relationship isn't very different from two One-to-Many relationships. The tables in the database look the same.\n\nThe only difference is when you try to perform an eager load with Sequelize.\n\n``` js\n// With the Many-to-Many approach, you can do:\nUser.findAll({ include: Profile });\nProfile.findAll({ include: User });\n// However, you can't do:\nUser.findAll({ include: Grant });\nProfile.findAll({ include: Grant });\nGrant.findAll({ include: User });\nGrant.findAll({ include: Profile });\n\n// On the other hand, with the double One-to-Many approach, you can do:\nUser.findAll({ include: Grant });\nProfile.findAll({ include: Grant });\nGrant.findAll({ include: User });\nGrant.findAll({ include: Profile });\n// However, you can't do:\nUser.findAll({ include: Profile });\nProfile.findAll({ include: User });\n// Although you can emulate those with nested includes, as follows:\nUser.findAll({\n  include: {\n    model: Grant,\n    include: Profile\n  }\n}); // This emulates the `User.findAll({ include: Profile })`, however\n    // the resulting object structure is a bit different. The original\n    // structure has the form `user.profiles[].grant`, while the emulated\n    // structure has the form `user.grants[].profiles[]`.\n```\n\n### The best of both worlds: the Super Many-to-Many relationship[​](#the-best-of-both-worlds-the-super-many-to-many-relationship \"Direct link to heading\")\n\nWe can simply combine both approaches shown above!\n\n``` js\n// The Super Many-to-Many relationship\nUser.belongsToMany(Profile, { through: Grant });\nProfile.belongsToMany(User, { through: Grant });\nUser.hasMany(Grant);\nGrant.belongsTo(User);\nProfile.hasMany(Grant);\nGrant.belongsTo(Profile);\n```\n\nThis way, we can do all kinds of eager loading:\n\n``` js\n// All these work:\nUser.findAll({ include: Profile });\nProfile.findAll({ include: User });\nUser.findAll({ include: Grant });\nProfile.findAll({ include: Grant });\nGrant.findAll({ include: User });\nGrant.findAll({ include: Profile });\n```\n\nWe can even perform all kinds of deeply nested includes:\n\n``` js\nUser.findAll({\n  include: [\n    {\n      model: Grant,\n      include: [User, Profile]\n    },\n    {\n      model: Profile,\n      include: {\n        model: User,\n        include: {\n          model: Grant,\n          include: [User, Profile]\n        }\n      }\n    }\n  ]\n});\n```\n\n## Aliases and custom key names[​](#aliases-and-custom-key-names \"Direct link to heading\")\n\nSimilarly to the other relationships, aliases can be defined for Many-to-Many relationships.\n\nBefore proceeding, please recall [the aliasing example for `belongsTo`](../../core-concepts/assocs/index#defining-an-alias) on the [associations guide](../../core-concepts/assocs/index). Note that, in that case, defining an association impacts both the way includes are done (i.e. passing the association name) and the name Sequelize chooses for the foreign key (in that example, `leaderId` was created on the `Ship` model).\n\nDefining an alias for a `belongsToMany` association also impacts the way includes are performed:\n\n``` js\nProduct.belongsToMany(Category, { as: 'groups', through: 'product_categories' });\nCategory.belongsToMany(Product, { as: 'items', through: 'product_categories' });\n\n// [...]\n\nawait Product.findAll({ include: Category }); // This doesn't work\n\nawait Product.findAll({ // This works, passing the alias\n  include: {\n    model: Category,\n    as: 'groups'\n  }\n});\n\nawait Product.findAll({ include: 'groups' }); // This also works\n```\n\nHowever, defining an alias here has nothing to do with the foreign key names. The names of both foreign keys created in the through table are still constructed by Sequelize based on the name of the models being associated. This can readily be seen by inspecting the generated SQL for the through table in the example above:\n\n``` sql\nCREATE TABLE IF NOT EXISTS `product_categories` (\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  `productId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  `categoryId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (`productId`, `categoryId`)\n);\n```\n\nWe can see that the foreign keys are `productId` and `categoryId`. To change these names, Sequelize accepts the options `foreignKey` and `otherKey` respectively (i.e., the `foreignKey` defines the key for the source model in the through relation, and `otherKey` defines it for the target model):\n\n``` js\nProduct.belongsToMany(Category, {\n  through: 'product_categories',\n  foreignKey: 'objectId', // replaces `productId`\n  otherKey: 'typeId' // replaces `categoryId`\n});\nCategory.belongsToMany(Product, {\n  through: 'product_categories',\n  foreignKey: 'typeId', // replaces `categoryId`\n  otherKey: 'objectId' // replaces `productId`\n});\n```\n\nGenerated SQL:\n\n``` sql\nCREATE TABLE IF NOT EXISTS `product_categories` (\n  `createdAt` DATETIME NOT NULL,\n  `updatedAt` DATETIME NOT NULL,\n  `objectId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  `typeId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (`objectId`, `typeId`)\n);\n```\n\nAs shown above, when you define a Many-to-Many relationship with two `belongsToMany` calls (which is the standard way), you should provide the `foreignKey` and `otherKey` options appropriately in both calls. If you pass these options in only one of the calls, the Sequelize behavior will be unreliable.\n\n## Self-references[​](#self-references \"Direct link to heading\")\n\nSequelize supports self-referential Many-to-Many relationships, intuitively:\n\n``` js\nPerson.belongsToMany(Person, { as: 'Children', through: 'PersonChildren' })\n// This will create the table PersonChildren which stores the ids of the objects.\n```\n\n## Specifying attributes from the through table[​](#specifying-attributes-from-the-through-table \"Direct link to heading\")\n\nBy default, when eager loading a many-to-many relationship, Sequelize will return data in the following structure (based on the first example in this guide):\n\n``` json\n// User.findOne({ include: Profile })\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\",\n      \"grant\": {\n        \"userId\": 4,\n        \"profileId\": 6,\n        \"selfGranted\": false\n      }\n    }\n  ]\n}\n```\n\nNotice that the outer object is an `User`, which has a field called `profiles`, which is a `Profile` array, such that each `Profile` comes with an extra field called `grant` which is a `Grant` instance. This is the default structure created by Sequelize when eager loading from a Many-to-Many relationship.\n\nHowever, if you want only some of the attributes of the through table, you can provide an array with the attributes you want in the `attributes` option. For example, if you only want the `selfGranted` attribute from the through table:\n\n``` js\nUser.findOne({\n  include: {\n    model: Profile,\n    through: {\n      attributes: ['selfGranted']\n    }\n  }\n});\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\",\n      \"grant\": {\n        \"selfGranted\": false\n      }\n    }\n  ]\n}\n```\n\nIf you don't want the nested `grant` field at all, use `attributes: []`:\n\n``` js\nUser.findOne({\n  include: {\n    model: Profile,\n    through: {\n      attributes: []\n    }\n  }\n});\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 4,\n  \"username\": \"p4dm3\",\n  \"points\": 1000,\n  \"profiles\": [\n    {\n      \"id\": 6,\n      \"name\": \"queen\"\n    }\n  ]\n}\n```\n\nIf you are using mixins (such as `user.getProfiles()`) instead of finder methods (such as `User.findAll()`), you have to use the `joinTableAttributes` option instead:\n\n``` js\nsomeUser.getProfiles({ joinTableAttributes: ['selfGranted'] });\n```\n\nOutput:\n\n``` json\n[\n  {\n    \"id\": 6,\n    \"name\": \"queen\",\n    \"grant\": {\n      \"selfGranted\": false\n    }\n  }\n]\n```\n\n## Many-to-many-to-many relationships and beyond[​](#many-to-many-to-many-relationships-and-beyond \"Direct link to heading\")\n\nConsider you are trying to model a game championship. There are players and teams. Teams play games. However, players can change teams in the middle of the championship (but not in the middle of a game). So, given one specific game, there are certain teams participating in that game, and each of these teams has a set of players (for that game).\n\nSo we start by defining the three relevant models:\n\n``` js\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\nconst Game = sequelize.define('Game', { name: DataTypes.INTEGER });\n```\n\nNow, the question is: how to associate them?\n\nFirst, we note that:\n\n- One game has many teams associated to it (the ones that are playing that game);\n- One team may have participated in many games.\n\nThe above observations show that we need a Many-to-Many relationship between Game and Team. Let's use the Super Many-to-Many relationship as explained earlier in this guide:\n\n``` js\n// Super Many-to-Many relationship between Game and Team\nconst GameTeam = sequelize.define('GameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  }\n});\nTeam.belongsToMany(Game, { through: GameTeam });\nGame.belongsToMany(Team, { through: GameTeam });\nGameTeam.belongsTo(Game);\nGameTeam.belongsTo(Team);\nGame.hasMany(GameTeam);\nTeam.hasMany(GameTeam);\n```\n\nThe part about players is trickier. We note that the set of players that form a team depends not only on the team (obviously), but also on which game is being considered. Therefore, we don't want a Many-to-Many relationship between Player and Team. We also don't want a Many-to-Many relationship between Player and Game. Instead of associating a Player to any of those models, what we need is an association between a Player and something like a *\"team-game pair constraint\"*, since it is the pair (team plus game) that defines which players belong there. So what we are looking for turns out to be precisely the junction model, GameTeam, itself! And, we note that, since a given *game-team pair* specifies many players, and on the other hand that the same player can participate of many *game-team pairs*, we need a Many-to-Many relationship between Player and GameTeam!\n\nTo provide the greatest flexibility, let's use the Super Many-to-Many relationship construction here again:\n\n``` js\n// Super Many-to-Many relationship between Player and GameTeam\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  }\n});\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\nPlayerGameTeam.belongsTo(Player);\nPlayerGameTeam.belongsTo(GameTeam);\nPlayer.hasMany(PlayerGameTeam);\nGameTeam.hasMany(PlayerGameTeam);\n```\n\nThe above associations achieve precisely what we want. Here is a full runnable example of this:\n\n``` js\nconst { Sequelize, Op, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:', {\n  define: { timestamps: false } // Just for less clutter in this example\n});\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\nconst Game = sequelize.define('Game', { name: DataTypes.INTEGER });\n\n// We apply a Super Many-to-Many relationship between Game and Team\nconst GameTeam = sequelize.define('GameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  }\n});\nTeam.belongsToMany(Game, { through: GameTeam });\nGame.belongsToMany(Team, { through: GameTeam });\nGameTeam.belongsTo(Game);\nGameTeam.belongsTo(Team);\nGame.hasMany(GameTeam);\nTeam.hasMany(GameTeam);\n\n// We apply a Super Many-to-Many relationship between Player and GameTeam\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n    allowNull: false\n  }\n});\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\nPlayerGameTeam.belongsTo(Player);\nPlayerGameTeam.belongsTo(GameTeam);\nPlayer.hasMany(PlayerGameTeam);\nGameTeam.hasMany(PlayerGameTeam);\n\n(async () => {\n\n  await sequelize.sync();\n  await Player.bulkCreate([\n    { username: 's0me0ne' },\n    { username: 'empty' },\n    { username: 'greenhead' },\n    { username: 'not_spock' },\n    { username: 'bowl_of_petunias' }\n  ]);\n  await Game.bulkCreate([\n    { name: 'The Big Clash' },\n    { name: 'Winter Showdown' },\n    { name: 'Summer Beatdown' }\n  ]);\n  await Team.bulkCreate([\n    { name: 'The Martians' },\n    { name: 'The Earthlings' },\n    { name: 'The Plutonians' }\n  ]);\n\n  // Let's start defining which teams were in which games. This can be done\n  // in several ways, such as calling `.setTeams` on each game. However, for\n  // brevity, we will use direct `create` calls instead, referring directly\n  // to the IDs we want. We know that IDs are given in order starting from 1.\n  await GameTeam.bulkCreate([\n    { GameId: 1, TeamId: 1 },   // this GameTeam will get id 1\n    { GameId: 1, TeamId: 2 },   // this GameTeam will get id 2\n    { GameId: 2, TeamId: 1 },   // this GameTeam will get id 3\n    { GameId: 2, TeamId: 3 },   // this GameTeam will get id 4\n    { GameId: 3, TeamId: 2 },   // this GameTeam will get id 5\n    { GameId: 3, TeamId: 3 }    // this GameTeam will get id 6\n  ]);\n\n  // Now let's specify players.\n  // For brevity, let's do it only for the second game (Winter Showdown).\n  // Let's say that that s0me0ne and greenhead played for The Martians, while\n  // not_spock and bowl_of_petunias played for The Plutonians:\n  await PlayerGameTeam.bulkCreate([\n    // In 'Winter Showdown' (i.e. GameTeamIds 3 and 4):\n    { PlayerId: 1, GameTeamId: 3 },   // s0me0ne played for The Martians\n    { PlayerId: 3, GameTeamId: 3 },   // greenhead played for The Martians\n    { PlayerId: 4, GameTeamId: 4 },   // not_spock played for The Plutonians\n    { PlayerId: 5, GameTeamId: 4 }    // bowl_of_petunias played for The Plutonians\n  ]);\n\n  // Now we can make queries!\n  const game = await Game.findOne({\n    where: {\n      name: \"Winter Showdown\"\n    },\n    include: {\n      model: GameTeam,\n      include: [\n        {\n          model: Player,\n          through: { attributes: [] } // Hide unwanted `PlayerGameTeam` nested object from results\n        },\n        Team\n      ]\n    }\n  });\n\n  console.log(`Found game: \"${game.name}\"`);\n  for (let i = 0; i < game.GameTeams.length; i++) {\n    const team = game.GameTeams[i].Team;\n    const players = game.GameTeams[i].Players;\n    console.log(`- Team \"${team.name}\" played game \"${game.name}\" with the following players:`);\n    console.log(players.map(p => `--- ${p.username}`).join('\\n'));\n  }\n\n})();\n```\n\nOutput:\n\n``` text\nFound game: \"Winter Showdown\"\n- Team \"The Martians\" played game \"Winter Showdown\" with the following players:\n--- s0me0ne\n--- greenhead\n- Team \"The Plutonians\" played game \"Winter Showdown\" with the following players:\n--- not_spock\n--- bowl_of_petunias\n```\n\nSo this is how we can achieve a *many-to-many-to-many* relationship between three models in Sequelize, by taking advantage of the Super Many-to-Many relationship technique!\n\nThis idea can be applied recursively for even more complex, *many-to-many-to-...-to-many* relationships (although at some point queries might become slow).\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/advanced-association-concepts/advanced-many-to-many/](https://sequelize.org/docs/v6/advanced-association-concepts/advanced-many-to-many/)"
- name: AggregateError
  id: class/src/errors/aggregate-error.ts~aggregateerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# AggregateError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → AggregateError\n\nA wrapper for multiple Errors\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/aggregate-error.ts~AggregateError.html](https://sequelize.org/api/v6/class/src/errors/aggregate-error.ts~AggregateError.html)"
- name: ARRAY
  id: class/src/data-types.js~array
  summary: An array of type
  description: "# ARRAY\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → ARRAY\n\nAn array of `type`. Only available in Postgres.\n\n#### Example:\n\n``` prettyprint\nDataTypes.ARRAY(DataTypes.DECIMAL)\n```\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(type: ABSTRACT)  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber770) \n\n#### Params:\n\n| Name | Type     | Attribute | Description          |\n|------|----------|-----------|----------------------|\n| type | ABSTRACT |           | type of array values |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~ARRAY.html](https://sequelize.org/api/v6/class/src/data-types.js~ARRAY.html)"
- name: Association
  id: class/src/associations/base.js~association
  summary: Creating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target)
  description: "# Association\n\n#### Direct Subclass:\n\n[BelongsTo](belongs-to.js~belongsto), [BelongsToMany](belongs-to-many.js~belongstomany), [HasMany](has-many.js~hasmany), [HasOne](has-one.js~hasone)\n\nCreating associations in sequelize is done by calling one of the belongsTo / hasOne / hasMany / belongsToMany functions on a model (the source), and providing another model as the first argument to the function (the target).\n\n- hasOne - adds a foreign key to the target and singular association mixins to the source.\n- belongsTo - add a foreign key and singular association mixins to the source.\n- hasMany - adds a foreign key to target and plural association mixins to the source.\n- belongsToMany - creates an N:M association with a join table and adds plural association mixins to the source. The junction table is created with sourceId and targetId.\n\nCreating an association will add a foreign key constraint to the attributes. All associations use `CASCADE` on update and `SET NULL` on delete, except for n:m, which also uses `CASCADE` on delete.\n\nWhen creating associations, you can provide an alias, via the `as` option. This is useful if the same model is associated twice, or you want your association to be called something other than the name of the target model.\n\nAs an example, consider the case where users have many pictures, one of which is their profile picture. All pictures have a `userId`, but in addition the user model also has a `profilePictureId`, to be able to easily load the user's profile picture.\n\n``` lang-js\nUser.hasMany(Picture)\nUser.belongsTo(Picture, { as: 'ProfilePicture', constraints: false })\n\nuser.getPictures() // gets you all pictures\nuser.getProfilePicture() // gets you only the profile picture\n\nUser.findAll({\n  where: ...,\n  include: [\n    { model: Picture }, // load all pictures\n    { model: Picture, as: 'ProfilePicture' }, // load the profile picture.\n    // Notice that the spelling must be the exact same as the one in the association\n  ]\n})\n```\n\nTo get full control over the foreign key column added by sequelize, you can use the `foreignKey` option. It can either be a string, that specifies the name, or and object type definition, equivalent to those passed to `sequelize.define`.\n\n``` lang-js\nUser.hasMany(Picture, { foreignKey: 'uid' })\n```\n\nThe foreign key column in Picture will now be called `uid` instead of the default `userId`.\n\n``` lang-js\nUser.hasMany(Picture, {\n  foreignKey: {\n    name: 'uid',\n    allowNull: false\n  }\n})\n```\n\nThis specifies that the `uid` column cannot be null. In most cases this will already be covered by the foreign key constraints, which sequelize creates automatically, but can be useful in case where the foreign keys are disabled, e.g. due to circular references (see `constraints: false` below).\n\nWhen fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to `find`/`findAll`. To only get pictures in JPG, you can do:\n\n``` lang-js\nuser.getPictures({\n  where: {\n    format: 'jpg'\n  }\n})\n```\n\nThere are several ways to update and add new associations. Continuing with our example of users and pictures:\n\n``` lang-js\nuser.addPicture(p) // Add a single picture\nuser.setPictures([p1, p2]) // Associate user with ONLY these two picture, all other associations will be deleted\nuser.addPictures([p1, p2]) // Associate user with these two pictures, but don't touch any current associations\n```\n\nYou don't have to pass in a complete object to the association functions, if your associated model has a single primary key:\n\n``` lang-js\nuser.addPicture(req.query.pid) // Here pid is just an integer, representing the primary key of the picture\n```\n\nIn the example above we have specified that a user belongs to his profile picture. Conceptually, this might not make sense, but since we want to add the foreign key to the user model this is the way to do it.\n\nNote how we also specified `constraints: false` for profile picture. This is because we add a foreign key from user to picture (profilePictureId), and from picture to user (userId). If we were to add foreign keys to both, it would create a cyclic dependency, and sequelize would not know which table to create first, since user depends on picture, and picture depends on user. These kinds of problems are detected by sequelize before the models are synced to the database, and you will get an error along the lines of `Error: Cyclic dependency found. 'users' is dependent of itself`. If you encounter this, you should either disable some constraints, or rethink your associations completely.\n\n## Member Summary\n\n[TABLE]\n\n## Public Members\n\n### public associationType: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/associations/base.js.html#lineNumber104) \n\nThe type of the association. One of `HasMany`, `BelongsTo`, `HasOne`, `BelongsToMany`\n\n### public source: [Model](../model.js~model)  [source](https://sequelize.org/api/v6/file/src/associations/base.js.html#lineNumber87) \n\n### public target: [Model](../model.js~model)  [source](https://sequelize.org/api/v6/file/src/associations/base.js.html#lineNumber92) \n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/associations/base.js~Association.html](https://sequelize.org/api/v6/class/src/associations/base.js~Association.html)"
- name: Association Scopes
  id: advanced-association-concepts/association-scopes/index
  summary: This section concerns association scopes, which are similar but not the same as model scopes
  description: "# Association Scopes\n\nThis section concerns association scopes, which are similar but not the same as [model scopes](../../other-topics/scopes/index).\n\nAssociation scopes can be placed both on the associated model (the target of the association) and on the through table for Many-to-Many relationships.\n\n## Concept[​](#concept \"Direct link to heading\")\n\nSimilarly to how a [model scope](../../other-topics/scopes/index) is automatically applied on the model static calls, such as `Model.scope('foo').findAll()`, an association scope is a rule (more precisely, a set of default attributes and options) that is automatically applied on instance calls from the model. Here, *instance calls* mean method calls that are called from an instance (rather than from the Model itself). Mixins are the main example of instance methods (`instance.getSomething`, `instance.setSomething`, `instance.addSomething` and `instance.createSomething`).\n\nAssociation scopes behave just like model scopes, in the sense that both cause an automatic application of things like `where` clauses to finder calls; the difference being that instead of applying to static finder calls (which is the case for model scopes), the association scopes automatically apply to instance finder calls (such as mixins).\n\n## Example[​](#example \"Direct link to heading\")\n\nA basic example of an association scope for the One-to-Many association between models `Foo` and `Bar` is shown below.\n\n- Setup:\n\n  ``` js\n  const Foo = sequelize.define('foo', { name: DataTypes.STRING });\n  const Bar = sequelize.define('bar', { status: DataTypes.STRING });\n  Foo.hasMany(Bar, {\n      scope: {\n          status: 'open'\n      },\n      as: 'openBars'\n  });\n  await sequelize.sync();\n  const myFoo = await Foo.create({ name: \"My Foo\" });\n  ```\n\n- After this setup, calling `myFoo.getOpenBars()` generates the following SQL:\n\n  ``` sql\n  SELECT\n      `id`, `status`, `createdAt`, `updatedAt`, `fooId`\n  FROM `bars` AS `bar`\n  WHERE `bar`.`status` = 'open' AND `bar`.`fooId` = 1;\n  ```\n\nWith this we can see that upon calling the `.getOpenBars()` mixin, the association scope `{ status: 'open' }` was automatically applied into the `WHERE` clause of the generated SQL.\n\n## Achieving the same behavior with standard scopes[​](#achieving-the-same-behavior-with-standard-scopes \"Direct link to heading\")\n\nWe could have achieved the same behavior with standard scopes:\n\n``` js\n// Foo.hasMany(Bar, {\n//     scope: {\n//         status: 'open'\n//     },\n//     as: 'openBars'\n// });\n\nBar.addScope('open', {\n    where: {\n        status: 'open'\n    }\n});\nFoo.hasMany(Bar);\nFoo.hasMany(Bar.scope('open'), { as: 'openBars' });\n```\n\nWith the above code, `myFoo.getOpenBars()` yields the same SQL shown above.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/advanced-association-concepts/association-scopes/](https://sequelize.org/docs/v6/advanced-association-concepts/association-scopes/)"
- name: AssociationError
  id: class/src/errors/association-error.ts~associationerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# AssociationError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → AssociationError\n\nThrown when an association is improperly constructed (see message for details)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/association-error.ts~AssociationError.html](https://sequelize.org/api/v6/class/src/errors/association-error.ts~AssociationError.html)"
- name: Associations
  id: moved/associations/index
  summary: The contents of this page were moved to other specialized guides
  description: "# Associations\n\nThe contents of this page were moved to other specialized guides.\n\nIf you're here, you might be looking for these topics:\n\n- **Core Concepts**\n  - [Associations](../../core-concepts/assocs/index)\n- **Advanced Association Concepts**\n  - [Eager Loading](../../advanced-association-concepts/eager-loading/index)\n  - [Creating with Associations](../../advanced-association-concepts/creating-with-associations/index)\n  - [Advanced M:N Associations](../../advanced-association-concepts/advanced-many-to-many/index)\n  - [Polymorphism & Scopes](../../advanced-association-concepts/polymorphic-associations/index)\n- **Other Topics**\n  - [Naming Strategies](../../other-topics/naming-strategies/index)\n  - [Constraints & Circularities](../../other-topics/constraints-and-circularities/index)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/moved/associations/](https://sequelize.org/docs/v6/moved/associations/)"
- name: Associations
  id: core-concepts/assocs/index
  summary: 'Sequelize supports the standard associations: One-To-One, One-To-Many and Many-To-Many'
  description: "# Associations\n\nSequelize supports the standard associations: [One-To-One](https://en.wikipedia.org/wiki/One-to-one_%28data_model%29), [One-To-Many](https://en.wikipedia.org/wiki/One-to-many_%28data_model%29) and [Many-To-Many](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29).\n\nTo do this, Sequelize provides **four** types of associations that should be combined to create them:\n\n- The `HasOne` association\n- The `BelongsTo` association\n- The `HasMany` association\n- The `BelongsToMany` association\n\nThe guide will start explaining how to define these four types of associations, and then will follow up to explain how to combine those to define the three standard association types ([One-To-One](https://en.wikipedia.org/wiki/One-to-one_%28data_model%29), [One-To-Many](https://en.wikipedia.org/wiki/One-to-many_%28data_model%29) and [Many-To-Many](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29)).\n\n## Defining the Sequelize associations[​](#defining-the-sequelize-associations \"Direct link to heading\")\n\nThe four association types are defined in a very similar way. Let's say we have two models, `A` and `B`. Telling Sequelize that you want an association between the two needs just a function call:\n\n``` js\nconst A = sequelize.define('A', /* ... */);\nconst B = sequelize.define('B', /* ... */);\n\nA.hasOne(B); // A HasOne B\nA.belongsTo(B); // A BelongsTo B\nA.hasMany(B); // A HasMany B\nA.belongsToMany(B, { through: 'C' }); // A BelongsToMany B through the junction table C\n```\n\nThey all accept an options object as a second parameter (optional for the first three, mandatory for `belongsToMany` containing at least the `through` property):\n\n``` js\nA.hasOne(B, { /* options */ });\nA.belongsTo(B, { /* options */ });\nA.hasMany(B, { /* options */ });\nA.belongsToMany(B, { through: 'C', /* options */ });\n```\n\nThe order in which the association is defined is relevant. In other words, the order matters, for the four cases. In all examples above, `A` is called the **source** model and `B` is called the **target** model. This terminology is important.\n\nThe `A.hasOne(B)` association means that a One-To-One relationship exists between `A` and `B`, with the foreign key being defined in the target model (`B`).\n\nThe `A.belongsTo(B)` association means that a One-To-One relationship exists between `A` and `B`, with the foreign key being defined in the source model (`A`).\n\nThe `A.hasMany(B)` association means that a One-To-Many relationship exists between `A` and `B`, with the foreign key being defined in the target model (`B`).\n\nThese three calls will cause Sequelize to automatically add foreign keys to the appropriate models (unless they are already present).\n\nThe `A.belongsToMany(B, { through: 'C' })` association means that a Many-To-Many relationship exists between `A` and `B`, using table `C` as [junction table](https://en.wikipedia.org/wiki/Associative_entity), which will have the foreign keys (`aId` and `bId`, for example). Sequelize will automatically create this model `C` (unless it already exists) and define the appropriate foreign keys on it.\n\n*Note: In the examples above for `belongsToMany`, a string (`'C'`) was passed to the through option. In this case, Sequelize automatically generates a model with this name. However, you can also pass a model directly, if you have already defined it.*\n\nThese are the main ideas involved in each type of association. However, these relationships are often used in pairs, in order to enable better usage with Sequelize. This will be seen later on.\n\n## Creating the standard relationships[​](#creating-the-standard-relationships \"Direct link to heading\")\n\nAs mentioned, usually the Sequelize associations are defined in pairs. In summary:\n\n- To create a **One-To-One** relationship, the `hasOne` and `belongsTo` associations are used together;\n- To create a **One-To-Many** relationship, the `hasMany` and `belongsTo` associations are used together;\n- To create a **Many-To-Many** relationship, two `belongsToMany` calls are used together.\n  - Note: there is also a *Super Many-To-Many* relationship, which uses six associations at once, and will be discussed in the [Advanced Many-to-Many relationships guide](../../advanced-association-concepts/advanced-many-to-many/index).\n\nThis will all be seen in detail next. The advantages of using these pairs instead of one single association will be discussed in the end of this chapter.\n\n## One-To-One relationships[​](#one-to-one-relationships \"Direct link to heading\")\n\n### Philosophy[​](#philosophy \"Direct link to heading\")\n\nBefore digging into the aspects of using Sequelize, it is useful to take a step back to consider what happens with a One-To-One relationship.\n\nLet's say we have two models, `Foo` and `Bar`. We want to establish a One-To-One relationship between Foo and Bar. We know that in a relational database, this will be done by establishing a foreign key in one of the tables. So in this case, a very relevant question is: in which table do we want this foreign key to be? In other words, do we want `Foo` to have a `barId` column, or should `Bar` have a `fooId` column instead?\n\nIn principle, both options are a valid way to establish a One-To-One relationship between Foo and Bar. However, when we say something like *\"there is a One-To-One relationship between Foo and Bar\"*, it is unclear whether or not the relationship is *mandatory* or optional. In other words, can a Foo exist without a Bar? Can a Bar exist without a Foo? The answers to these questions help figuring out where we want the foreign key column to be.\n\n### Goal[​](#goal \"Direct link to heading\")\n\nFor the rest of this example, let's assume that we have two models, `Foo` and `Bar`. We want to setup a One-To-One relationship between them such that `Bar` gets a `fooId` column.\n\n### Implementation[​](#implementation \"Direct link to heading\")\n\nThe main setup to achieve the goal is as follows:\n\n``` js\nFoo.hasOne(Bar);\nBar.belongsTo(Foo);\n```\n\nSince no option was passed, Sequelize will infer what to do from the names of the models. In this case, Sequelize knows that a `fooId` column must be added to `Bar`.\n\nThis way, calling `Bar.sync()` after the above will yield the following SQL (on PostgreSQL, for example):\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"foos\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"bars\" (\n  /* ... */\n  \"fooId\" INTEGER REFERENCES \"foos\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE\n  /* ... */\n);\n```\n\n### Options[​](#options \"Direct link to heading\")\n\nVarious options can be passed as a second parameter of the association call.\n\n#### `onDelete` and `onUpdate`[​](#ondelete-and-onupdate \"Direct link to heading\")\n\nFor example, to configure the `ON DELETE` and `ON UPDATE` behaviors, you can do:\n\n``` js\nFoo.hasOne(Bar, {\n  onDelete: 'RESTRICT',\n  onUpdate: 'RESTRICT'\n});\nBar.belongsTo(Foo);\n```\n\nThe possible choices are `RESTRICT`, `CASCADE`, `NO ACTION`, `SET DEFAULT` and `SET NULL`.\n\nThe defaults for the One-To-One associations is `SET NULL` for `ON DELETE` and `CASCADE` for `ON UPDATE`.\n\n#### Customizing the foreign key[​](#customizing-the-foreign-key \"Direct link to heading\")\n\nBoth the `hasOne` and `belongsTo` calls shown above will infer that the foreign key to be created should be called `fooId`. To use a different name, such as `myFooId`:\n\n``` js\n// Option 1\nFoo.hasOne(Bar, {\n  foreignKey: 'myFooId'\n});\nBar.belongsTo(Foo);\n\n// Option 2\nFoo.hasOne(Bar, {\n  foreignKey: {\n    name: 'myFooId'\n  }\n});\nBar.belongsTo(Foo);\n\n// Option 3\nFoo.hasOne(Bar);\nBar.belongsTo(Foo, {\n  foreignKey: 'myFooId'\n});\n\n// Option 4\nFoo.hasOne(Bar);\nBar.belongsTo(Foo, {\n  foreignKey: {\n    name: 'myFooId'\n  }\n});\n```\n\nAs shown above, the `foreignKey` option accepts a string or an object. When receiving an object, this object will be used as the definition for the column just like it would do in a standard `sequelize.define` call. Therefore, specifying options such as `type`, `allowNull`, `defaultValue`, etc, just work.\n\nFor example, to use `UUID` as the foreign key data type instead of the default (`INTEGER`), you can simply do:\n\n``` js\nconst { DataTypes } = require(\"Sequelize\");\n\nFoo.hasOne(Bar, {\n  foreignKey: {\n    // name: 'myFooId'\n    type: DataTypes.UUID\n  }\n});\nBar.belongsTo(Foo);\n```\n\n#### Mandatory versus optional associations[​](#mandatory-versus-optional-associations \"Direct link to heading\")\n\nBy default, the association is considered optional. In other words, in our example, the `fooId` is allowed to be null, meaning that one Bar can exist without a Foo. Changing this is just a matter of specifying `allowNull: false` in the foreign key options:\n\n``` js\nFoo.hasOne(Bar, {\n  foreignKey: {\n    allowNull: false\n  }\n});\n// \"fooId\" INTEGER NOT NULL REFERENCES \"foos\" (\"id\") ON DELETE RESTRICT ON UPDATE RESTRICT\n```\n\n## One-To-Many relationships[​](#one-to-many-relationships \"Direct link to heading\")\n\n### Philosophy[​](#philosophy-1 \"Direct link to heading\")\n\nOne-To-Many associations are connecting one source with multiple targets, while all these targets are connected only with this single source.\n\nThis means that, unlike the One-To-One association, in which we had to choose where the foreign key would be placed, there is only one option in One-To-Many associations. For example, if one Foo has many Bars (and this way each Bar belongs to one Foo), then the only sensible implementation is to have a `fooId` column in the `Bar` table. The opposite is impossible, since one Foo has many Bars.\n\n### Goal[​](#goal-1 \"Direct link to heading\")\n\nIn this example, we have the models `Team` and `Player`. We want to tell Sequelize that there is a One-To-Many relationship between them, meaning that one Team has many Players, while each Player belongs to a single Team.\n\n### Implementation[​](#implementation-1 \"Direct link to heading\")\n\nThe main way to do this is as follows:\n\n``` js\nTeam.hasMany(Player);\nPlayer.belongsTo(Team);\n```\n\nAgain, as mentioned, the main way to do it used a pair of Sequelize associations (`hasMany` and `belongsTo`).\n\nFor example, in PostgreSQL, the above setup will yield the following SQL upon `sync()`:\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"Teams\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"Players\" (\n  /* ... */\n  \"TeamId\" INTEGER REFERENCES \"Teams\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  /* ... */\n);\n```\n\n### Options[​](#options-1 \"Direct link to heading\")\n\nThe options to be applied in this case are the same from the One-To-One case. For example, to change the name of the foreign key and make sure that the relationship is mandatory, we can do:\n\n``` js\nTeam.hasMany(Player, {\n  foreignKey: 'clubId'\n});\nPlayer.belongsTo(Team);\n```\n\nLike One-To-One relationships, `ON DELETE` defaults to `SET NULL` and `ON UPDATE` defaults to `CASCADE`.\n\n## Many-To-Many relationships[​](#many-to-many-relationships \"Direct link to heading\")\n\n### Philosophy[​](#philosophy-2 \"Direct link to heading\")\n\nMany-To-Many associations connect one source with multiple targets, while all these targets can in turn be connected to other sources beyond the first.\n\nThis cannot be represented by adding one foreign key to one of the tables, like the other relationships did. Instead, the concept of a [Junction Model](https://en.wikipedia.org/wiki/Associative_entity) is used. This will be an extra model (and extra table in the database) which will have two foreign key columns and will keep track of the associations. The junction table is also sometimes called *join table* or *through table*.\n\n### Goal[​](#goal-2 \"Direct link to heading\")\n\nFor this example, we will consider the models `Movie` and `Actor`. One actor may have participated in many movies, and one movie had many actors involved with its production. The junction table that will keep track of the associations will be called `ActorMovies`, which will contain the foreign keys `movieId` and `actorId`.\n\n### Implementation[​](#implementation-2 \"Direct link to heading\")\n\nThe main way to do this in Sequelize is as follows:\n\n``` js\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nMovie.belongsToMany(Actor, { through: 'ActorMovies' });\nActor.belongsToMany(Movie, { through: 'ActorMovies' });\n```\n\nSince a string was given in the `through` option of the `belongsToMany` call, Sequelize will automatically create the `ActorMovies` model which will act as the junction model. For example, in PostgreSQL:\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"MovieId\" INTEGER REFERENCES \"Movies\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  \"ActorId\" INTEGER REFERENCES \"Actors\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (\"MovieId\",\"ActorId\")\n);\n```\n\nInstead of a string, passing a model directly is also supported, and in that case the given model will be used as the junction model (and no model will be created automatically). For example:\n\n``` js\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nconst ActorMovies = sequelize.define('ActorMovies', {\n  MovieId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Movie, // 'Movies' would also work\n      key: 'id'\n    }\n  },\n  ActorId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Actor, // 'Actors' would also work\n      key: 'id'\n    }\n  }\n});\nMovie.belongsToMany(Actor, { through: ActorMovies });\nActor.belongsToMany(Movie, { through: ActorMovies });\n```\n\nThe above yields the following SQL in PostgreSQL, which is equivalent to the one shown above:\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"MovieId\" INTEGER NOT NULL REFERENCES \"Movies\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"ActorId\" INTEGER NOT NULL REFERENCES \"Actors\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  UNIQUE (\"MovieId\", \"ActorId\"),     -- Note: Sequelize generated this UNIQUE constraint but\n  PRIMARY KEY (\"MovieId\",\"ActorId\")  -- it is irrelevant since it's also a PRIMARY KEY\n);\n```\n\n### Options[​](#options-2 \"Direct link to heading\")\n\nUnlike One-To-One and One-To-Many relationships, the defaults for both `ON UPDATE` and `ON DELETE` are `CASCADE` for Many-To-Many relationships.\n\nBelongs-To-Many creates a unique key on through model. This unique key name can be overridden using **uniqueKey** option. To prevent creating this unique key, use the ***unique: false*** option.\n\n``` js\nProject.belongsToMany(User, { through: UserProjects, uniqueKey: 'my_custom_unique' })\n```\n\n## Basics of queries involving associations[​](#basics-of-queries-involving-associations \"Direct link to heading\")\n\nWith the basics of defining associations covered, we can look at queries involving associations. The most common queries on this matter are the *read* queries (i.e. SELECTs). Later on, other types of queries will be shown.\n\nIn order to study this, we will consider an example in which we have Ships and Captains, and a one-to-one relationship between them. We will allow null on foreign keys (the default), meaning that a Ship can exist without a Captain and vice-versa.\n\n``` js\n// This is the setup of our models for the examples below\nconst Ship = sequelize.define('ship', {\n  name: DataTypes.TEXT,\n  crewCapacity: DataTypes.INTEGER,\n  amountOfSails: DataTypes.INTEGER\n}, { timestamps: false });\nconst Captain = sequelize.define('captain', {\n  name: DataTypes.TEXT,\n  skillLevel: {\n    type: DataTypes.INTEGER,\n    validate: { min: 1, max: 10 }\n  }\n}, { timestamps: false });\nCaptain.hasOne(Ship);\nShip.belongsTo(Captain);\n```\n\n### Fetching associations - Eager Loading vs Lazy Loading[​](#fetching-associations---eager-loading-vs-lazy-loading \"Direct link to heading\")\n\nThe concepts of Eager Loading and Lazy Loading are fundamental to understand how fetching associations work in Sequelize. Lazy Loading refers to the technique of fetching the associated data only when you really want it; Eager Loading, on the other hand, refers to the technique of fetching everything at once, since the beginning, with a larger query.\n\n#### Lazy Loading example[​](#lazy-loading-example \"Direct link to heading\")\n\n``` js\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: \"Jack Sparrow\"\n  }\n});\n// Do stuff with the fetched captain\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\n// Now we want information about his ship!\nconst hisShip = await awesomeCaptain.getShip();\n// Do stuff with the ship\nconsole.log('Ship Name:', hisShip.name);\nconsole.log('Amount of Sails:', hisShip.amountOfSails);\n```\n\nObserve that in the example above, we made two queries, only fetching the associated ship when we wanted to use it. This can be especially useful if we may or may not need the ship, perhaps we want to fetch it conditionally, only in a few cases; this way we can save time and memory by only fetching it when necessary.\n\nNote: the `getShip()` instance method used above is one of the methods Sequelize automatically adds to `Captain` instances. There are others. You will learn more about them later in this guide.\n\n#### Eager Loading Example[​](#eager-loading-example \"Direct link to heading\")\n\n``` js\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: \"Jack Sparrow\"\n  },\n  include: Ship\n});\n// Now the ship comes with it\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\nconsole.log('Ship Name:', awesomeCaptain.ship.name);\nconsole.log('Amount of Sails:', awesomeCaptain.ship.amountOfSails);\n```\n\nAs shown above, Eager Loading is performed in Sequelize by using the `include` option. Observe that here only one query was performed to the database (which brings the associated data along with the instance).\n\nThis was just a quick introduction to Eager Loading in Sequelize. There is a lot more to it, which you can learn at [the dedicated guide on Eager Loading](../../advanced-association-concepts/eager-loading/index).\n\n### Creating, updating and deleting[​](#creating-updating-and-deleting \"Direct link to heading\")\n\nThe above showed the basics on queries for fetching data involving associations. For creating, updating and deleting, you can either:\n\n- Use the standard model queries directly:\n\n  ``` js\n  // Example: creating an associated model using the standard methods\n  Bar.create({\n    name: 'My Bar',\n    fooId: 5\n  });\n  // This creates a Bar belonging to the Foo of ID 5 (since fooId is\n  // a regular column, after all). Nothing very clever going on here.\n  ```\n\n- Or use the *[special methods/mixins](#special-methods-mixins-added-to-instances)* available for associated models, which are explained later on this page.\n\n**Note:** The [`save()` instance method](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-save) is not aware of associations. In other words, if you change a value from a *child* object that was eager loaded along a *parent* object, calling `save()` on the parent will completely ignore the change that happened on the child.\n\n## Association Aliases & Custom Foreign Keys[​](#association-aliases--custom-foreign-keys \"Direct link to heading\")\n\nIn all the above examples, Sequelize automatically defined the foreign key names. For example, in the Ship and Captain example, Sequelize automatically defined a `captainId` field on the Ship model. However, it is easy to specify a custom foreign key.\n\nLet's consider the models Ship and Captain in a simplified form, just to focus on the current topic, as shown below (less fields):\n\n``` js\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define('captain', { name: DataTypes.TEXT }, { timestamps: false });\n```\n\nThere are three ways to specify a different name for the foreign key:\n\n- By providing the foreign key name directly\n- By defining an Alias\n- By doing both things\n\n### Recap: the default setup[​](#recap-the-default-setup \"Direct link to heading\")\n\nBy using simply `Ship.belongsTo(Captain)`, sequelize will generate the foreign key name automatically:\n\n``` js\nShip.belongsTo(Captain); // This creates the `captainId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n### Providing the foreign key name directly[​](#providing-the-foreign-key-name-directly \"Direct link to heading\")\n\nThe foreign key name can be provided directly with an option in the association definition, as follows:\n\n``` js\nShip.belongsTo(Captain, { foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'Captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n### Defining an Alias[​](#defining-an-alias \"Direct link to heading\")\n\nDefining an Alias is more powerful than simply specifying a custom name for the foreign key. This is better understood with an example:\n\n``` js\nShip.belongsTo(Captain, { as: 'leader' }); // This creates the `leaderId` foreign key in Ship.\n\n// Eager Loading no longer works by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log((await Ship.findAll({\n  include: {\n    model: Captain,\n    as: 'leader'\n  }\n})).toJSON());\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\nAliases are especially useful when you need to define two different associations between the same models. For example, if we have the models `Mail` and `Person`, we may want to associate them twice, to represent the `sender` and `receiver` of the Mail. In this case we must use an alias for each association, since otherwise a call like `mail.getPerson()` would be ambiguous. With the `sender` and `receiver` aliases, we would have the two methods available and working: `mail.getSender()` and `mail.getReceiver()`, both of them returning a `Promise<Person>`.\n\nWhen defining an alias for a `hasOne` or `belongsTo` association, you should use the singular form of a word (such as `leader`, in the example above). On the other hand, when defining an alias for `hasMany` and `belongsToMany`, you should use the plural form. Defining aliases for Many-to-Many relationships (with `belongsToMany`) is covered in the [Advanced Many-to-Many Associations guide](../../advanced-association-concepts/advanced-many-to-many/index).\n\n### Doing both things[​](#doing-both-things \"Direct link to heading\")\n\nWe can define and alias and also directly define the foreign key:\n\n``` js\nShip.belongsTo(Captain, { as: 'leader', foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Since an alias was defined, eager Loading doesn't work by simply passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log((await Ship.findAll({\n  include: {\n    model: Captain,\n    as: 'leader'\n  }\n})).toJSON());\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\n## Special methods/mixins added to instances[​](#special-methodsmixins-added-to-instances \"Direct link to heading\")\n\nWhen an association is defined between two models, the instances of those models gain special methods to interact with their associated counterparts.\n\nFor example, if we have two models, `Foo` and `Bar`, and they are associated, their instances will have the following methods/mixins available, depending on the association type:\n\n### `Foo.hasOne(Bar)`[​](#foohasonebar \"Direct link to heading\")\n\n- `fooInstance.getBar()`\n- `fooInstance.setBar()`\n- `fooInstance.createBar()`\n\nExample:\n\n``` js\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBar()); // null\nawait foo.setBar(bar1);\nconsole.log((await foo.getBar()).name); // 'some-bar'\nawait foo.createBar({ name: 'yet-another-bar' });\nconst newlyAssociatedBar = await foo.getBar();\nconsole.log(newlyAssociatedBar.name); // 'yet-another-bar'\nawait foo.setBar(null); // Un-associate\nconsole.log(await foo.getBar()); // null\n```\n\n### `Foo.belongsTo(Bar)`[​](#foobelongstobar \"Direct link to heading\")\n\nThe same ones from `Foo.hasOne(Bar)`:\n\n- `fooInstance.getBar()`\n- `fooInstance.setBar()`\n- `fooInstance.createBar()`\n\n### `Foo.hasMany(Bar)`[​](#foohasmanybar \"Direct link to heading\")\n\n- `fooInstance.getBars()`\n- `fooInstance.countBars()`\n- `fooInstance.hasBar()`\n- `fooInstance.hasBars()`\n- `fooInstance.setBars()`\n- `fooInstance.addBar()`\n- `fooInstance.addBars()`\n- `fooInstance.removeBar()`\n- `fooInstance.removeBars()`\n- `fooInstance.createBar()`\n\nExample:\n\n``` js\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBars()); // []\nconsole.log(await foo.countBars()); // 0\nconsole.log(await foo.hasBar(bar1)); // false\nawait foo.addBars([bar1, bar2]);\nconsole.log(await foo.countBars()); // 2\nawait foo.addBar(bar1);\nconsole.log(await foo.countBars()); // 2\nconsole.log(await foo.hasBar(bar1)); // true\nawait foo.removeBar(bar2);\nconsole.log(await foo.countBars()); // 1\nawait foo.createBar({ name: 'yet-another-bar' });\nconsole.log(await foo.countBars()); // 2\nawait foo.setBars([]); // Un-associate all previously associated bars\nconsole.log(await foo.countBars()); // 0\n```\n\nThe getter method accepts options just like the usual finder methods (such as `findAll`):\n\n``` js\nconst easyTasks = await project.getTasks({\n  where: {\n    difficulty: {\n      [Op.lte]: 5\n    }\n  }\n});\nconst taskTitles = (await project.getTasks({\n  attributes: ['title'],\n  raw: true\n})).map(task => task.title);\n```\n\n### `Foo.belongsToMany(Bar, { through: Baz })`[​](#foobelongstomanybar--through-baz- \"Direct link to heading\")\n\nThe same ones from `Foo.hasMany(Bar)`:\n\n- `fooInstance.getBars()`\n- `fooInstance.countBars()`\n- `fooInstance.hasBar()`\n- `fooInstance.hasBars()`\n- `fooInstance.setBars()`\n- `fooInstance.addBar()`\n- `fooInstance.addBars()`\n- `fooInstance.removeBar()`\n- `fooInstance.removeBars()`\n- `fooInstance.createBar()`\n\nFor belongsToMany relationships, by default `getBars()` will return all fields from the join table. Note that any `include` options will apply to the target `Bar` object, so trying to set options for the join table as you would when eager loading with `find` methods is not possible. To choose what attributes of the join table to include, `getBars()` supports a `joinTableAttributes` option that can be used similarly to setting `through.attributes` in an `include`. As an example, given Foo belongsToMany Bar, the following will both output results without join table fields:\n\n``` js\nconst foo = Foo.findByPk(id, {\n  include: [{\n    model: Bar,\n    through: { attributes: [] }\n  }]\n})\nconsole.log(foo.bars)\n\nconst foo = Foo.findByPk(id)\nconsole.log(foo.getBars({ joinTableAttributes: [] }))\n```\n\n### Note: Method names[​](#note-method-names \"Direct link to heading\")\n\nAs shown in the examples above, the names Sequelize gives to these special methods are formed by a prefix (e.g. `get`, `add`, `set`) concatenated with the model name (with the first letter in uppercase). When necessary, the plural is used, such as in `fooInstance.setBars()`. Again, irregular plurals are also handled automatically by Sequelize. For example, `Person` becomes `People` and `Hypothesis` becomes `Hypotheses`.\n\nIf an alias was defined, it will be used instead of the model name to form the method names. For example:\n\n``` js\nTask.hasOne(User, { as: 'Author' });\n```\n\n- `taskInstance.getAuthor()`\n- `taskInstance.setAuthor()`\n- `taskInstance.createAuthor()`\n\n## Why associations are defined in pairs?[​](#why-associations-are-defined-in-pairs \"Direct link to heading\")\n\nAs mentioned earlier and shown in most examples above, usually associations in Sequelize are defined in pairs:\n\n- To create a **One-To-One** relationship, the `hasOne` and `belongsTo` associations are used together;\n- To create a **One-To-Many** relationship, the `hasMany` and `belongsTo` associations are used together;\n- To create a **Many-To-Many** relationship, two `belongsToMany` calls are used together.\n\nWhen a Sequelize association is defined between two models, only the *source* model *knows about it*. So, for example, when using `Foo.hasOne(Bar)` (so `Foo` is the source model and `Bar` is the target model), only `Foo` knows about the existence of this association. This is why in this case, as shown above, `Foo` instances gain the methods `getBar()`, `setBar()` and `createBar()`, while on the other hand `Bar` instances get nothing.\n\nSimilarly, for `Foo.hasOne(Bar)`, since `Foo` knows about the relationship, we can perform eager loading as in `Foo.findOne({ include: Bar })`, but we can't do `Bar.findOne({ include: Foo })`.\n\nTherefore, to bring full power to Sequelize usage, we usually setup the relationship in pairs, so that both models get to *know about it*.\n\nPractical demonstration:\n\n- If we do not define the pair of associations, calling for example just `Foo.hasOne(Bar)`:\n\n  ``` js\n  // This works...\n  await Foo.findOne({ include: Bar });\n\n  // But this throws an error:\n  await Bar.findOne({ include: Foo });\n  // SequelizeEagerLoadingError: foo is not associated to bar!\n  ```\n\n- If we define the pair as recommended, i.e., both `Foo.hasOne(Bar)` and `Bar.belongsTo(Foo)`:\n\n  ``` js\n  // This works!\n  await Foo.findOne({ include: Bar });\n\n  // This also works!\n  await Bar.findOne({ include: Foo });\n  ```\n\n## Multiple associations involving the same models[​](#multiple-associations-involving-the-same-models \"Direct link to heading\")\n\nIn Sequelize, it is possible to define multiple associations between the same models. You just have to define different aliases for them:\n\n``` js\nTeam.hasOne(Game, { as: 'HomeTeam', foreignKey: 'homeTeamId' });\nTeam.hasOne(Game, { as: 'AwayTeam', foreignKey: 'awayTeamId' });\nGame.belongsTo(Team);\n```\n\n## Creating associations referencing a field which is not the primary key[​](#creating-associations-referencing-a-field-which-is-not-the-primary-key \"Direct link to heading\")\n\nIn all the examples above, the associations were defined by referencing the primary keys of the involved models (in our case, their IDs). However, Sequelize allows you to define an association that uses another field, instead of the primary key field, to establish the association.\n\nThis other field must have a unique constraint on it (otherwise, it wouldn't make sense).\n\n### For `belongsTo` relationships[​](#for-belongsto-relationships \"Direct link to heading\")\n\nFirst, recall that the `A.belongsTo(B)` association places the foreign key in the *source model* (i.e., in `A`).\n\nLet's again use the example of Ships and Captains. Additionally, we will assume that Captain names are unique:\n\n``` js\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define('captain', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\n```\n\nThis way, instead of keeping the `captainId` on our Ships, we could keep a `captainName` instead and use it as our association tracker. In other words, instead of referencing the `id` from the target model (Captain), our relationship will reference another column on the target model: the `name` column. To specify this, we have to define a *target key*. We will also have to specify a name for the foreign key itself:\n\n``` js\nShip.belongsTo(Captain, { targetKey: 'name', foreignKey: 'captainName' });\n// This creates a foreign key called `captainName` in the source model (Ship)\n// which references the `name` field from the target model (Captain).\n```\n\nNow we can do things like:\n\n``` js\nawait Captain.create({ name: \"Jack Sparrow\" });\nconst ship = await Ship.create({ name: \"Black Pearl\", captainName: \"Jack Sparrow\" });\nconsole.log((await ship.getCaptain()).name); // \"Jack Sparrow\"\n```\n\n### For `hasOne` and `hasMany` relationships[​](#for-hasone-and-hasmany-relationships \"Direct link to heading\")\n\nThe exact same idea can be applied to the `hasOne` and `hasMany` associations, but instead of providing a `targetKey`, we provide a `sourceKey` when defining the association. This is because unlike `belongsTo`, the `hasOne` and `hasMany` associations keep the foreign key on the target model:\n\n``` js\nconst Foo = sequelize.define('foo', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Bar = sequelize.define('bar', {\n  title: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Baz = sequelize.define('baz', { summary: DataTypes.TEXT }, { timestamps: false });\nFoo.hasOne(Bar, { sourceKey: 'name', foreignKey: 'fooName' });\nBar.hasMany(Baz, { sourceKey: 'title', foreignKey: 'barTitle' });\n// [...]\nawait Bar.setFoo(\"Foo's Name Here\");\nawait Baz.addBar(\"Bar's Title Here\");\n```\n\n### For `belongsToMany` relationships[​](#for-belongstomany-relationships \"Direct link to heading\")\n\nThe same idea can also be applied to `belongsToMany` relationships. However, unlike the other situations, in which we have only one foreign key involved, the `belongsToMany` relationship involves two foreign keys which are kept on an extra table (the junction table).\n\nConsider the following setup:\n\n``` js\nconst Foo = sequelize.define('foo', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Bar = sequelize.define('bar', {\n  title: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\n```\n\nThere are four cases to consider:\n\n- We might want a many-to-many relationship using the default primary keys for both `Foo` and `Bar`:\n\n``` js\nFoo.belongsToMany(Bar, { through: 'foo_bar' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barId`\n```\n\n- We might want a many-to-many relationship using the default primary key for `Foo` but a different field for `Bar`:\n\n``` js\nFoo.belongsToMany(Bar, { through: 'foo_bar', targetKey: 'title' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barTitle`\n```\n\n- We might want a many-to-many relationship using the a different field for `Foo` and the default primary key for `Bar`:\n\n``` js\nFoo.belongsToMany(Bar, { through: 'foo_bar', sourceKey: 'name' });\n// This creates a junction table `foo_bar` with fields `fooName` and `barId`\n```\n\n- We might want a many-to-many relationship using different fields for both `Foo` and `Bar`:\n\n``` js\nFoo.belongsToMany(Bar, { through: 'foo_bar', sourceKey: 'name', targetKey: 'title' });\n// This creates a junction table `foo_bar` with fields `fooName` and `barTitle`\n```\n\n### Notes[​](#notes \"Direct link to heading\")\n\nDon't forget that the field referenced in the association must have a unique constraint placed on it. Otherwise, an error will be thrown (and sometimes with a mysterious error message - such as `SequelizeDatabaseError: SQLITE_ERROR: foreign key mismatch - \"ships\" referencing \"captains\"` for SQLite).\n\nThe trick to deciding between `sourceKey` and `targetKey` is just to remember where each relationship places its foreign key. As mentioned in the beginning of this guide:\n\n- `A.belongsTo(B)` keeps the foreign key in the source model (`A`), therefore the referenced key is in the target model, hence the usage of `targetKey`.\n\n- `A.hasOne(B)` and `A.hasMany(B)` keep the foreign key in the target model (`B`), therefore the referenced key is in the source model, hence the usage of `sourceKey`.\n\n- `A.belongsToMany(B)` involves an extra table (the junction table), therefore both `sourceKey` and `targetKey` are usable, with `sourceKey` corresponding to some field in `A` (the source) and `targetKey` corresponding to some field in `B` (the target).\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/assocs/](https://sequelize.org/docs/v6/core-concepts/assocs/)"
- name: AsyncQueueError
  id: class/src/dialects/mssql/async-queue.ts~asyncqueueerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# AsyncQueueError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → AsyncQueueError\n\nThrown when a connection to a database is closed while an operation is in progress\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/mssql/async-queue.ts~AsyncQueueError.html](https://sequelize.org/api/v6/class/src/dialects/mssql/async-queue.ts~AsyncQueueError.html)"
- name: BaseError
  id: class/src/errors/base-error.ts~baseerror
  summary: The Base Error all Sequelize Errors inherit from
  description: "# BaseError\n\n#### Extends:\n\n[Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) → BaseError\n\nThe Base Error all Sequelize Errors inherit from.\n\nSequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor. All sequelize errors inherit from the base JS error object.\n\nThis means that errors can be accessed using `Sequelize.ValidationError`\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/base-error.ts~BaseError.html](https://sequelize.org/api/v6/class/src/errors/base-error.ts~BaseError.html)"
- name: BelongsTo
  id: class/src/associations/belongs-to.js~belongsto
  summary: In the API reference below, add the name of the association to the method, e.g
  description: "# BelongsTo\n\n#### Extends:\n\n[Association](base.js~association) → BelongsTo\n\nOne-to-one association\n\nIn the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n\n#### See:\n\n- [Model.belongsTo](../model.js~model#static-method-belongsTo)\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async create(sourceInstance: [Model](../model.js~model), values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to.js.html#lineNumber228) \n\nCreate a new instance of the associated model and associate it with this.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                   |                          |\n|-----------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\> | The created target model |\n\n#### See:\n\n- Model#create for a full explanation of options\n\n### public async get(instances: [Model](../model.js~model) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>, options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to.js.html#lineNumber127) \n\nGet the associated instance.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                   |\n|-----------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\> |\n\n#### See:\n\n- [Model.findOne](../model.js~model#static-method-findOne) for a full explanation of options\n\n### public async set(sourceInstance: [Model](../model.js~model), associatedInstance: [Model](../model.js~model) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to.js.html#lineNumber194) \n\nSet the associated model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/associations/belongs-to.js~BelongsTo.html](https://sequelize.org/api/v6/class/src/associations/belongs-to.js~BelongsTo.html)"
- name: BelongsToMany
  id: class/src/associations/belongs-to-many.js~belongstomany
  summary: Many-to-many association with a join table
  description: "# BelongsToMany\n\n#### Extends:\n\n[Association](base.js~association) → BelongsToMany\n\nMany-to-many association with a join table.\n\nWhen the join table has additional attributes, these can be passed in the options object:\n\n``` lang-js\nUserProject = sequelize.define('user_project', {\n  role: Sequelize.STRING\n});\nUser.belongsToMany(Project, { through: UserProject });\nProject.belongsToMany(User, { through: UserProject });\n// through is required!\n\nuser.addProject(project, { through: { role: 'manager' }});\n```\n\nAll methods allow you to pass either a persisted instance, its primary key, or a mixture:\n\n``` lang-js\nconst project = await Project.create({ id: 11 });\nawait user.addProjects([project, 12]);\n```\n\nIf you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n\n``` lang-js\np1.UserProjects = {\n  started: true\n}\nuser.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n```\n\nSimilarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n\n``` lang-js\nconst projects = await user.getProjects();\nconst p1 = projects[0];\np1.UserProjects.started // Is this project started yet?\n```\n\nIn the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n\n#### See:\n\n- [Model.belongsToMany](../model.js~model#static-method-belongsToMany)\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async add(sourceInstance: [Model](../model.js~model), newInstances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber672) \n\nAssociate one or several rows with source instance. It will not un-associate any already associated instance that may be missing from `newInstances`.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async count(instance: [Model](../model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber494) \n\nCount everything currently associated with this, using an optional where clause.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> |\n\n### public async create(sourceInstance: [Model](../model.js~model), values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber789) \n\nCreate a new instance of the associated model and associate it with this.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async get(instance: [Model](../model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>\\>  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber425) \n\nGet everything currently associated with this, using an optional where clause.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>\\> |\n\n#### See:\n\n- [Model](../model.js~model) for a full explanation of options\n\n### public async has(sourceInstance: [Model](../model.js~model), instances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\>  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber519) \n\nCheck if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if *all* instances are associated\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                            |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\> |\n\n### public remove(sourceInstance: [Model](../model.js~model), oldAssociatedObjects: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\], options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber764) \n\nUn-associate one or more instance(s).\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async set(sourceInstance: [Model](../model.js~model), newAssociatedObjects: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/belongs-to-many.js.html#lineNumber566) \n\nSet the associated models by passing an array of instances or their primary keys. Everything that it not in the passed array will be un-associated.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/associations/belongs-to-many.js~BelongsToMany.html](https://sequelize.org/api/v6/class/src/associations/belongs-to-many.js~BelongsToMany.html)"
- name: BIGINT
  id: class/src/data-types.js~bigint
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# BIGINT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → [INTEGER](data-types.js~integer) → BIGINT\n\nA 64 bit integer\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~BIGINT.html](https://sequelize.org/api/v6/class/src/data-types.js~BIGINT.html)"
- name: BLOB
  id: class/src/data-types.js~blob
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# BLOB\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → BLOB\n\nBinary storage\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber551) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~BLOB.html](https://sequelize.org/api/v6/class/src/data-types.js~BLOB.html)"
- name: BOOLEAN
  id: class/src/data-types.js~boolean
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# BOOLEAN\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → BOOLEAN\n\nA boolean / tinyint column, depending on dialect\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~BOOLEAN.html](https://sequelize.org/api/v6/class/src/data-types.js~BOOLEAN.html)"
- name: BulkRecordError
  id: class/src/errors/bulk-record-error.ts~bulkrecorderror
  summary: Thrown when bulk operation fails, it represent per record level error
  description: "# BulkRecordError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → BulkRecordError\n\nThrown when bulk operation fails, it represent per record level error. Used with AggregateError\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/bulk-record-error.ts~BulkRecordError.html](https://sequelize.org/api/v6/class/src/errors/bulk-record-error.ts~BulkRecordError.html)"
- name: CHAR
  id: class/src/data-types.js~char
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# CHAR\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [STRING](data-types.js~string) → CHAR\n\nCHAR A fixed length string\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), binary: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber100) \n\n#### Override:\n\n[STRING#constructor](data-types.js~string#instance-constructor-constructor)\n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~CHAR.html](https://sequelize.org/api/v6/class/src/data-types.js~CHAR.html)"
- name: CIDR
  id: class/src/data-types.js~cidr
  summary: The cidr type holds an IPv4 or IPv6 network specification
  description: "# CIDR\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → CIDR\n\nThe cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n\nOnly available for Postgres\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~CIDR.html](https://sequelize.org/api/v6/class/src/data-types.js~CIDR.html)"
- name: CITEXT
  id: class/src/data-types.js~citext
  summary: An unlimited length case-insensitive text column
  description: "# CITEXT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → CITEXT\n\nAn unlimited length case-insensitive text column. Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints). Only available in Postgres and SQLite.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~CITEXT.html](https://sequelize.org/api/v6/class/src/data-types.js~CITEXT.html)"
- name: Connection Pool
  id: other-topics/connection-pool/index
  summary: If you're connecting to the database from a single process, you should create only one Sequelize instance
  description: "# Connection Pool\n\nIf you're connecting to the database from a single process, you should create only one Sequelize instance. Sequelize will set up a connection pool on initialization. This connection pool can be configured through the constructor's `options` parameter (using `options.pool`), as is shown in the following example:\n\n``` js\nconst sequelize = new Sequelize(/* ... */, {\n  // ...\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000\n  }\n});\n```\n\nLearn more in the [API Reference for the Sequelize constructor](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-constructor-constructor). If you're connecting to the database from multiple processes, you'll have to create one instance per process, but each instance should have a maximum connection pool size of such that the total maximum size is respected. For example, if you want a max connection pool size of 90 and you have three processes, the Sequelize instance of each process should have a max connection pool size of 30.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/connection-pool/](https://sequelize.org/docs/v6/other-topics/connection-pool/)"
- name: ConnectionAcquireTimeoutError
  id: class/src/errors/connection/connection-acquire-timeout-error.ts~connectionacquiretimeouterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ConnectionAcquireTimeoutError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → ConnectionAcquireTimeoutError\n\nThrown when connection is not acquired due to timeout\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/connection-acquire-timeout-error.ts~ConnectionAcquireTimeoutError.html](https://sequelize.org/api/v6/class/src/errors/connection/connection-acquire-timeout-error.ts~ConnectionAcquireTimeoutError.html)"
- name: ConnectionError
  id: class/src/errors/connection-error.ts~connectionerror
  summary: A base class for all connection related errors
  description: "# ConnectionError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → ConnectionError\n\nA base class for all connection related errors.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection-error.ts~ConnectionError.html](https://sequelize.org/api/v6/class/src/errors/connection-error.ts~ConnectionError.html)"
- name: ConnectionRefusedError
  id: class/src/errors/connection/connection-refused-error.ts~connectionrefusederror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ConnectionRefusedError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → ConnectionRefusedError\n\nThrown when a connection to a database is refused\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/connection-refused-error.ts~ConnectionRefusedError.html](https://sequelize.org/api/v6/class/src/errors/connection/connection-refused-error.ts~ConnectionRefusedError.html)"
- name: ConnectionTimedOutError
  id: class/src/errors/connection/connection-timed-out-error.ts~connectiontimedouterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ConnectionTimedOutError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → ConnectionTimedOutError\n\nThrown when a connection to a database times out\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/connection-timed-out-error.ts~ConnectionTimedOutError.html](https://sequelize.org/api/v6/class/src/errors/connection/connection-timed-out-error.ts~ConnectionTimedOutError.html)"
- name: Constraints & Circularities
  id: other-topics/constraints-and-circularities/index
  summary: Adding constraints between tables means that tables must be created in the database in a certain order, when using sequelize.sync
  description: "# Constraints & Circularities\n\nAdding constraints between tables means that tables must be created in the database in a certain order, when using `sequelize.sync`. If `Task` has a reference to `User`, the `User` table must be created before the `Task` table can be created. This can sometimes lead to circular references, where Sequelize cannot find an order in which to sync. Imagine a scenario of documents and versions. A document can have multiple versions, and for convenience, a document has a reference to its current version.\n\n``` js\nconst { Sequelize, Model, DataTypes } = require(\"sequelize\");\n\nclass Document extends Model {}\nDocument.init({\n    author: DataTypes.STRING\n}, { sequelize, modelName: 'document' });\n\nclass Version extends Model {}\nVersion.init({\n  timestamp: DataTypes.DATE\n}, { sequelize, modelName: 'version' });\n\nDocument.hasMany(Version); // This adds documentId attribute to version\nDocument.belongsTo(Version, {\n  as: 'Current',\n  foreignKey: 'currentVersionId'\n}); // This adds currentVersionId attribute to document\n```\n\nHowever, unfortunately the code above will result in the following error:\n\n``` text\nCyclic dependency found. documents is dependent of itself. Dependency chain: documents -> versions => documents\n```\n\nIn order to alleviate that, we can pass `constraints: false` to one of the associations:\n\n``` js\nDocument.hasMany(Version);\nDocument.belongsTo(Version, {\n  as: 'Current',\n  foreignKey: 'currentVersionId',\n  constraints: false\n});\n```\n\nWhich will allow us to sync the tables correctly:\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"documents\" (\n  \"id\" SERIAL,\n  \"author\" VARCHAR(255),\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"currentVersionId\" INTEGER,\n  PRIMARY KEY (\"id\")\n);\n\nCREATE TABLE IF NOT EXISTS \"versions\" (\n  \"id\" SERIAL,\n  \"timestamp\" TIMESTAMP WITH TIME ZONE,\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"documentId\" INTEGER REFERENCES \"documents\" (\"id\") ON DELETE\n  SET\n    NULL ON UPDATE CASCADE,\n    PRIMARY KEY (\"id\")\n);\n```\n\n## Enforcing a foreign key reference without constraints[​](#enforcing-a-foreign-key-reference-without-constraints \"Direct link to heading\")\n\nSometimes you may want to reference another table, without adding any constraints, or associations. In that case you can manually add the reference attributes to your schema definition, and mark the relations between them.\n\n``` js\nclass Trainer extends Model {}\nTrainer.init({\n  firstName: Sequelize.STRING,\n  lastName: Sequelize.STRING\n}, { sequelize, modelName: 'trainer' });\n\n// Series will have a trainerId = Trainer.id foreign reference key\n// after we call Trainer.hasMany(series)\nclass Series extends Model {}\nSeries.init({\n  title: Sequelize.STRING,\n  subTitle: Sequelize.STRING,\n  description: Sequelize.TEXT,\n  // Set FK relationship (hasMany) with `Trainer`\n  trainerId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Trainer,\n      key: 'id'\n    }\n  }\n}, { sequelize, modelName: 'series' });\n\n// Video will have seriesId = Series.id foreign reference key\n// after we call Series.hasOne(Video)\nclass Video extends Model {}\nVideo.init({\n  title: Sequelize.STRING,\n  sequence: Sequelize.INTEGER,\n  description: Sequelize.TEXT,\n  // set relationship (hasOne) with `Series`\n  seriesId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Series, // Can be both a string representing the table name or a Sequelize model\n      key: 'id'\n    }\n  }\n}, { sequelize, modelName: 'video' });\n\nSeries.hasOne(Video);\nTrainer.hasMany(Series);\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/constraints-and-circularities/](https://sequelize.org/docs/v6/other-topics/constraints-and-circularities/)"
- name: Creating with Associations
  id: advanced-association-concepts/creating-with-associations/index
  summary: An instance can be created with nested association in one step, provided all elements are new
  description: "# Creating with Associations\n\nAn instance can be created with nested association in one step, provided all elements are new.\n\nIn contrast, performing updates and deletions involving nested objects is currently not possible. For that, you will have to perform each separate action explicitly.\n\n## BelongsTo / HasMany / HasOne association[​](#belongsto--hasmany--hasone-association \"Direct link to heading\")\n\nConsider the following models:\n\n``` js\nclass Product extends Model {}\nProduct.init({\n  title: Sequelize.STRING\n}, { sequelize, modelName: 'product' });\nclass User extends Model {}\nUser.init({\n  firstName: Sequelize.STRING,\n  lastName: Sequelize.STRING\n}, { sequelize, modelName: 'user' });\nclass Address extends Model {}\nAddress.init({\n  type: DataTypes.STRING,\n  line1: Sequelize.STRING,\n  line2: Sequelize.STRING,\n  city: Sequelize.STRING,\n  state: Sequelize.STRING,\n  zip: Sequelize.STRING,\n}, { sequelize, modelName: 'address' });\n\n// We save the return values of the association setup calls to use them later\nProduct.User = Product.belongsTo(User);\nUser.Addresses = User.hasMany(Address);\n// Also works for `hasOne`\n```\n\nA new `Product`, `User`, and one or more `Address` can be created in one step in the following way:\n\n``` js\nreturn Product.create({\n  title: 'Chair',\n  user: {\n    firstName: 'Mick',\n    lastName: 'Broadstone',\n    addresses: [{\n      type: 'home',\n      line1: '100 Main St.',\n      city: 'Austin',\n      state: 'TX',\n      zip: '78704'\n    }]\n  }\n}, {\n  include: [{\n    association: Product.User,\n    include: [ User.Addresses ]\n  }]\n});\n```\n\nObserve the usage of the `include` option in the `Product.create` call. That is necessary for Sequelize to understand what you are trying to create along with the association.\n\nNote: here, our user model is called `user`, with a lowercase `u` - This means that the property in the object should also be `user`. If the name given to `sequelize.define` was `User`, the key in the object should also be `User`. Likewise for `addresses`, except it's pluralized being a `hasMany` association.\n\n## BelongsTo association with an alias[​](#belongsto-association-with-an-alias \"Direct link to heading\")\n\nThe previous example can be extended to support an association alias.\n\n``` js\nconst Creator = Product.belongsTo(User, { as: 'creator' });\n\nreturn Product.create({\n  title: 'Chair',\n  creator: {\n    firstName: 'Matt',\n    lastName: 'Hansen'\n  }\n}, {\n  include: [ Creator ]\n});\n```\n\n## HasMany / BelongsToMany association[​](#hasmany--belongstomany-association \"Direct link to heading\")\n\nLet's introduce the ability to associate a product with many tags. Setting up the models could look like:\n\n``` js\nclass Tag extends Model {}\nTag.init({\n  name: Sequelize.STRING\n}, { sequelize, modelName: 'tag' });\n\nProduct.hasMany(Tag);\n// Also works for `belongsToMany`.\n```\n\nNow we can create a product with multiple tags in the following way:\n\n``` js\nProduct.create({\n  id: 1,\n  title: 'Chair',\n  tags: [\n    { name: 'Alpha'},\n    { name: 'Beta'}\n  ]\n}, {\n  include: [ Tag ]\n})\n```\n\nAnd, we can modify this example to support an alias as well:\n\n``` js\nconst Categories = Product.hasMany(Tag, { as: 'categories' });\n\nProduct.create({\n  id: 1,\n  title: 'Chair',\n  categories: [\n    { id: 1, name: 'Alpha' },\n    { id: 2, name: 'Beta' }\n  ]\n}, {\n  include: [{\n    association: Categories,\n    as: 'categories'\n  }]\n})\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/advanced-association-concepts/creating-with-associations/](https://sequelize.org/docs/v6/advanced-association-concepts/creating-with-associations/)"
- name: Data Types
  id: moved/data-types/index
  summary: The contents of this page were moved to other specialized guides
  description: "# Data Types\n\nThe contents of this page were moved to other specialized guides.\n\nIf you're here, you might be looking for these topics:\n\n- **Core Concepts**\n  - [Model Basics: Data Types](../../core-concepts/model-basics/index#data-types)\n- **Other Topics**\n  - [Other Data Types](../../other-topics/other-data-types/index)\n  - [Extending Data Types](../../other-topics/extending-data-types/index)\n  - [Dialect-Specific Things](../../other-topics/dialect-specific-things/index)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/moved/data-types/](https://sequelize.org/docs/v6/moved/data-types/)"
- name: DatabaseError
  id: class/src/errors/database-error.ts~databaseerror
  summary: A base class for all database related errors
  description: "# DatabaseError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → DatabaseError\n\nA base class for all database related errors.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/database-error.ts~DatabaseError.html](https://sequelize.org/api/v6/class/src/errors/database-error.ts~DatabaseError.html)"
- name: DATE
  id: class/src/data-types.js~date
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# DATE\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → DATE\n\nDate column with timezone, default is UTC\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber429) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~DATE.html](https://sequelize.org/api/v6/class/src/data-types.js~DATE.html)"
- name: DATEONLY
  id: class/src/data-types.js~dateonly
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# DATEONLY\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → DATEONLY\n\nA date only column (no timestamp)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~DATEONLY.html](https://sequelize.org/api/v6/class/src/data-types.js~DATEONLY.html)"
- name: Db2QueryInterface
  id: class/src/dialects/db2/query-interface.js~db2queryinterface
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# Db2QueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → Db2QueryInterface\n\nThe interface that Sequelize uses to talk with Db2 database\n\n## Inherited Summary\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/db2/query-interface.js~Db2QueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/db2/query-interface.js~Db2QueryInterface.html)"
- name: DECIMAL
  id: class/src/data-types.js~decimal
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# DECIMAL\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → DECIMAL\n\nDecimal type, variable precision, take length as specified by user\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(precision: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), scale: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber333) \n\n#### Override:\n\n[NUMBER#constructor](data-types.js~number#instance-constructor-constructor)\n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~DECIMAL.html](https://sequelize.org/api/v6/class/src/data-types.js~DECIMAL.html)"
- name: Dialect-Specific Things
  id: other-topics/dialect-specific-things/index
  summary: The underlying connector library used by Sequelize for MySQL is the mysql2 npm package (version 1.5.2 or higher)
  description: "# Dialect-Specific Things\n\n## Underlying Connector Libraries[​](#underlying-connector-libraries \"Direct link to heading\")\n\n### MySQL[​](#mysql \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for MySQL is the [mysql2](https://www.npmjs.com/package/mysql2) npm package (version 1.5.2 or higher).\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mysql',\n  dialectOptions: {\n    // Your mysql2 options here\n  }\n})\n```\n\n`dialectOptions` are passed directly to the MySQL connection constructor. A full list of options can be found in the [MySQL docs](https://www.npmjs.com/package/mysql#connection-options).\n\n### MariaDB[​](#mariadb \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for MariaDB is the [mariadb](https://www.npmjs.com/package/mariadb) npm package.\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mariadb',\n  dialectOptions: {\n    // Your mariadb options here\n    // connectTimeout: 1000\n  }\n});\n```\n\n`dialectOptions` are passed directly to the MariaDB connection constructor. A full list of options can be found in the [MariaDB docs](https://mariadb.com/kb/en/nodejs-connection-options/).\n\n### SQLite[​](#sqlite \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for SQLite is the [sqlite3](https://www.npmjs.com/package/sqlite3) npm package (version 4.0.0 or above).  \nDue to security vulnerabilities with sqlite3@^4 it is recommended to use the [@vscode/sqlite3](https://www.npmjs.com/package/@vscode/sqlite3) fork if updating to sqlite3@^5.0.3 is not possible.\n\nYou specify the storage file in the Sequelize constructor with the `storage` option (use `:memory:` for an in-memory SQLite instance).\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n``` js\nimport { Sequelize } from 'sequelize';\nimport SQLite from 'sqlite3';\n\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite', // or ':memory:'\n  dialectOptions: {\n    // Your sqlite3 options here\n    // for instance, this is how you can configure the database opening mode:\n    mode: SQLite.OPEN_READWRITE | SQLite.OPEN_CREATE | SQLite.OPEN_FULLMUTEX,\n  },\n});\n```\n\nThe following fields may be passed to SQLite `dialectOptions`:\n\n- `mode`: Set the opening mode for the SQLite connection. Potential values are provided by the `sqlite3` package, and can include `SQLite.OPEN_READONLY`, `SQLite.OPEN_READWRITE`, or `SQLite.OPEN_CREATE`.  \n  See [sqlite3's API reference](https://github.com/TryGhost/node-sqlite3/wiki/API) and the [SQLite C interface documentation](https://www.sqlite.org/c3ref/open.html) for more details.\n\n### PostgreSQL[​](#postgresql \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for PostgreSQL is the [pg](https://www.npmjs.com/package/pg) package (for Node 10 & 12, use pg version 7.0.0 or above. For Node 14 and above you need to use pg version 8.2.x or above, as per [the pg documentation](https://node-postgres.com/#version-compatibility)). The module [pg-hstore](https://www.npmjs.com/package/pg-hstore) is also necessary.\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n  }\n});\n```\n\nThe following fields may be passed to Postgres `dialectOptions`:\n\n- `application_name`: Name of application in pg_stat_activity. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-APPLICATION-NAME) for details.\n- `ssl`: SSL options. See the [`pg` docs](https://node-postgres.com/features/ssl) for details.\n- `client_encoding`: // Setting 'auto' determines locale based on the client LC_CTYPE environment variable. See the [Postgres docs](https://www.postgresql.org/docs/current/multibyte.html) for details.\n- `keepAlive`: Boolean to enable TCP KeepAlive. See the [`pg` changelog](https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#v600) for details.\n- `statement_timeout`: Times out queries after a set time in milliseconds. Added in pg v7.3. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-STATEMENT-TIMEOUT) for details.\n- `idle_in_transaction_session_timeout`: Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-IDLE-IN-TRANSACTION-SESSION-TIMEOUT) for details.\n\nTo connect over a unix domain socket, specify the path to the socket directory in the `host` option. The socket path must start with `/`.\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  host: '/path/to/socket_directory'\n});\n```\n\nThe default `client_min_messages` config in sequelize is `WARNING`.\n\n### Redshift[​](#redshift \"Direct link to heading\")\n\nMost configuration is same as PostgreSQL above.\n\nRedshift doesn't support `client_min_messages`, 'ignore' is needed to skip the configuration:\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n    // ...\n    clientMinMessages: 'ignore' // case insensitive\n  }\n});\n```\n\n### MSSQL[​](#mssql \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for MSSQL is the [tedious](https://www.npmjs.com/package/tedious) npm package (version 6.0.0 or above).\n\nYou can provide custom options to it using `dialectOptions.options` in the Sequelize constructor:\n\n``` js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mssql',\n  dialectOptions: {\n    // Observe the need for this nested `options` field for MSSQL\n    options: {\n      // Your tedious options here\n      useUTC: false,\n      dateFirst: 1\n    }\n  }\n});\n```\n\nA full list of options can be found in the [tedious docs](https://tediousjs.github.io/tedious/api-connection.html#function_newConnection).\n\n#### MSSQL Domain Account[​](#mssql-domain-account \"Direct link to heading\")\n\nIn order to connect with a domain account, use the following format.\n\n``` js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mssql',\n  dialectOptions: {\n    authentication: {\n      type: 'ntlm',\n      options: {\n        domain: 'yourDomain',\n        userName: 'username',\n        password: 'password'\n      }\n    },\n    options: {\n      instanceName: 'SQLEXPRESS'\n    }\n  }\n})\n```\n\n### Snowflake (Experiment)[​](#snowflake-experiment \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for Snowflake is the [snowflake-sdk](https://www.npmjs.com/package/snowflake-sdk) npm package.\n\nIn order to connect with an account, use the following format:\n\n``` js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'snowflake',\n  dialectOptions: {\n    // put your snowflake account here,\n    account: 'myAccount',  // my-app.us-east-1\n\n    // below option should be optional\n    role: 'myRole',\n    warehouse: 'myWarehouse',\n    schema: 'mySchema'\n  },\n  // same as other dialect\n  username: 'myUserName',\n  password: 'myPassword',\n  database: 'myDatabaseName'\n})\n```\n\n**NOTE** There is no test sandbox provided so the snowflake integration test is not part of the pipeline. Also it is difficult for core team to triage and debug. This dialect needs to be maintained by the snowflake user/community for now.\n\nFor running integration test:\n\n``` sh\nSEQ_ACCOUNT=myAccount SEQ_USER=myUser SEQ_PW=myPassword SEQ_ROLE=myRole SEQ_DB=myDatabaseName SEQ_SCHEMA=mySchema SEQ_WH=myWareHouse npm run test-integration-snowflake\n```\n\n### Oracle Database[​](#oracle-database \"Direct link to heading\")\n\nThe underlying connector library used by Sequelize for Oracle is the [node-oracledb](https://www.npmjs.com/package/oracledb) package.  \nSee [Releases](https://sequelize.org/releases/#oracle-support-table) to see which versions of Oracle Database & node-oracledb are supported.\n\nnode-oracledb needs [Oracle Instant Client](https://www.oracle.com/database/technologies/instant-client/downloads.html) to work. You can use the node-oracledb [quick start](https://oracle.github.io/node-oracledb/INSTALL.html#quickstart) link for installations.\n\nBelow is a Sequelize constructor with parameters related to Oracle Database.\n\n``` js\nconst sequelize = new Sequelize('servicename', 'username', 'password', {\n  dialect: 'oracle',\n  host: 'hostname',\n  port: 'port number', //optional\n});\n```\n\nThe default port number for Oracle database is 1521.\n\nSequelize also lets you pass credentials in URL format:\n\n``` js\nconst sequelize = new Sequelize('oracle://user:pass@hostname:port/servicename');\n```\n\n## Data type: TIMESTAMP WITHOUT TIME ZONE - PostgreSQL only[​](#data-type-timestamp-without-time-zone---postgresql-only \"Direct link to heading\")\n\nIf you are working with the PostgreSQL `TIMESTAMP WITHOUT TIME ZONE` and you need to parse it to a different timezone, please use the pg library's own parser:\n\n``` js\nrequire('pg').types.setTypeParser(1114, stringValue => {\n  return new Date(stringValue + '+0000');\n  // e.g., UTC offset. Use any offset that you would like.\n});\n```\n\n## Data type: ARRAY(ENUM) - PostgreSQL only[​](#data-type-arrayenum---postgresql-only \"Direct link to heading\")\n\nArray(Enum) type requireS special treatment. Whenever Sequelize will talk to the database, it has to typecast array values with ENUM name.\n\nSo this enum name must follow this pattern `enum_<table_name>_<col_name>`. If you are using `sync` then correct name will automatically be generated.\n\n## Table Hints - MSSQL only[​](#table-hints---mssql-only \"Direct link to heading\")\n\nThe `tableHint` option can be used to define a table hint. The hint must be a value from `TableHints` and should only be used when absolutely necessary. Only a single table hint is currently supported per query.\n\nTable hints override the default behavior of MSSQL query optimizer by specifing certain options. They only affect the table or view referenced in that clause.\n\n``` js\nconst { TableHints } = require('sequelize');\nProject.findAll({\n  // adding the table hint NOLOCK\n  tableHint: TableHints.NOLOCK\n  // this will generate the SQL 'WITH (NOLOCK)'\n})\n```\n\n## Index Hints - MySQL/MariaDB only[​](#index-hints---mysqlmariadb-only \"Direct link to heading\")\n\nThe `indexHints` option can be used to define index hints. The hint type must be a value from `IndexHints` and the values should reference existing indexes.\n\nIndex hints [override the default behavior of the MySQL query optimizer](https://dev.mysql.com/doc/refman/5.7/en/index-hints.html).\n\n``` js\nconst { IndexHints } = require(\"sequelize\");\nProject.findAll({\n  indexHints: [\n    { type: IndexHints.USE, values: ['index_project_on_name'] }\n  ],\n  where: {\n    id: {\n      [Op.gt]: 623\n    },\n    name: {\n      [Op.like]: 'Foo %'\n    }\n  }\n});\n```\n\nThe above will generate a MySQL query that looks like this:\n\n``` sql\nSELECT * FROM Project USE INDEX (index_project_on_name) WHERE name LIKE 'FOO %' AND id > 623;\n```\n\n`Sequelize.IndexHints` includes `USE`, `FORCE`, and `IGNORE`.\n\nSee [Issue \\#9421](https://github.com/sequelize/sequelize/issues/9421) for the original API proposal.\n\n## Engines - MySQL/MariaDB only[​](#engines---mysqlmariadb-only \"Direct link to heading\")\n\nThe default engine for a model is InnoDB.\n\nYou can change the engine for a model with the `engine` option (e.g., to MyISAM):\n\n``` js\nconst Person = sequelize.define('person', { /* attributes */ }, {\n  engine: 'MYISAM'\n});\n```\n\nLike every option for the definition of a model, this setting can also be changed globally with the `define` option of the Sequelize constructor:\n\n``` js\nconst sequelize = new Sequelize(db, user, pw, {\n  define: { engine: 'MYISAM' }\n})\n```\n\n## Table comments - MySQL/MariaDB/PostgreSQL only[​](#table-comments---mysqlmariadbpostgresql-only \"Direct link to heading\")\n\nYou can specify a comment for a table when defining the model:\n\n``` js\nclass Person extends Model {}\nPerson.init({ /* attributes */ }, {\n  comment: \"I'm a table comment!\",\n  sequelize\n})\n```\n\nThe comment will be set when calling `sync()`.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/dialect-specific-things/](https://sequelize.org/docs/v6/other-topics/dialect-specific-things/)"
- name: DOUBLE
  id: class/src/data-types.js~double
  summary: Floating point number (8-byte precision)
  description: "# DOUBLE\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → DOUBLE\n\nFloating point number (8-byte precision).\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), decimals: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber320) \n\n#### Override:\n\n[NUMBER#constructor](data-types.js~number#instance-constructor-constructor)\n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~DOUBLE.html](https://sequelize.org/api/v6/class/src/data-types.js~DOUBLE.html)"
- name: Eager Loading
  id: advanced-association-concepts/eager-loading/index
  summary: As briefly mentioned in the associations guide, eager Loading is the act of querying data of several models at once (one 'main' model and one or more associated models)
  description: "# Eager Loading\n\nAs briefly mentioned in [the associations guide](../../core-concepts/assocs/index), eager Loading is the act of querying data of several models at once (one 'main' model and one or more associated models). At the SQL level, this is a query with one or more [joins](https://en.wikipedia.org/wiki/Join_(SQL)).\n\nWhen this is done, the associated models will be added by Sequelize in appropriately named, automatically created field(s) in the returned objects.\n\nIn Sequelize, eager loading is mainly done by using the `include` option on a model finder query (such as `findOne`, `findAll`, etc).\n\n## Basic example[​](#basic-example \"Direct link to heading\")\n\nLet's assume the following setup:\n\n``` js\nconst User = sequelize.define('user', { name: DataTypes.STRING }, { timestamps: false });\nconst Task = sequelize.define('task', { name: DataTypes.STRING }, { timestamps: false });\nconst Tool = sequelize.define('tool', {\n  name: DataTypes.STRING,\n  size: DataTypes.STRING\n}, { timestamps: false });\nUser.hasMany(Task);\nTask.belongsTo(User);\nUser.hasMany(Tool, { as: 'Instruments' });\n```\n\n### Fetching a single associated element[​](#fetching-a-single-associated-element \"Direct link to heading\")\n\nOK. So, first of all, let's load all tasks with their associated user:\n\n``` js\nconst tasks = await Task.findAll({ include: User });\nconsole.log(JSON.stringify(tasks, null, 2));\n```\n\nOutput:\n\n``` json\n[{\n  \"name\": \"A Task\",\n  \"id\": 1,\n  \"userId\": 1,\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"id\": 1\n  }\n}]\n```\n\nHere, `tasks[0].user instanceof User` is `true`. This shows that when Sequelize fetches associated models, they are added to the output object as model instances.\n\nAbove, the associated model was added to a new field called `user` in the fetched task. The name of this field was automatically chosen by Sequelize based on the name of the associated model, where its pluralized form is used when applicable (i.e., when the association is `hasMany` or `belongsToMany`). In other words, since `Task.belongsTo(User)`, a task is associated to one user, therefore the logical choice is the singular form (which Sequelize follows automatically).\n\n### Fetching all associated elements[​](#fetching-all-associated-elements \"Direct link to heading\")\n\nNow, instead of loading the user that is associated to a given task, we will do the opposite - we will find all tasks associated to a given user.\n\nThe method call is essentially the same. The only difference is that now the extra field created in the query result uses the pluralized form (`tasks` in this case), and its value is an array of task instances (instead of a single instance, as above).\n\n``` js\nconst users = await User.findAll({ include: Task });\nconsole.log(JSON.stringify(users, null, 2));\n```\n\nOutput:\n\n``` json\n[{\n  \"name\": \"John Doe\",\n  \"id\": 1,\n  \"tasks\": [{\n    \"name\": \"A Task\",\n    \"id\": 1,\n    \"userId\": 1\n  }]\n}]\n```\n\nNotice that the accessor (the `tasks` property in the resulting instance) is pluralized since the association is one-to-many.\n\n### Fetching an Aliased association[​](#fetching-an-aliased-association \"Direct link to heading\")\n\nIf an association is aliased (using the `as` option), you must specify this alias when including the model. Instead of passing the model directly to the `include` option, you should instead provide an object with two options: `model` and `as`.\n\nNotice how the user's `Tool`s are aliased as `Instruments` above. In order to get that right you have to specify the model you want to load, as well as the alias:\n\n``` js\nconst users = await User.findAll({\n  include: { model: Tool, as: 'Instruments' }\n});\nconsole.log(JSON.stringify(users, null, 2));\n```\n\nOutput:\n\n``` json\n[{\n  \"name\": \"John Doe\",\n  \"id\": 1,\n  \"Instruments\": [{\n    \"name\": \"Scissor\",\n    \"id\": 1,\n    \"userId\": 1\n  }]\n}]\n```\n\nYou can also include by alias name by specifying a string that matches the association alias:\n\n``` js\nUser.findAll({ include: 'Instruments' }); // Also works\nUser.findAll({ include: { association: 'Instruments' } }); // Also works\n```\n\n### Required eager loading[​](#required-eager-loading \"Direct link to heading\")\n\nWhen eager loading, we can force the query to return only records which have an associated model, effectively converting the query from the default `OUTER JOIN` to an `INNER JOIN`. This is done with the `required: true` option, as follows:\n\n``` js\nUser.findAll({\n  include: {\n    model: Task,\n    required: true\n  }\n});\n```\n\nThis option also works on nested includes.\n\n### Eager loading filtered at the associated model level[​](#eager-loading-filtered-at-the-associated-model-level \"Direct link to heading\")\n\nWhen eager loading, we can also filter the associated model using the `where` option, as in the following example:\n\n``` js\nUser.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments'\n    where: {\n      size: {\n        [Op.ne]: 'small'\n      }\n    }\n  }\n});\n```\n\nGenerated SQL:\n\n``` sql\nSELECT\n  `user`.`id`,\n  `user`.`name`,\n  `Instruments`.`id` AS `Instruments.id`,\n  `Instruments`.`name` AS `Instruments.name`,\n  `Instruments`.`size` AS `Instruments.size`,\n  `Instruments`.`userId` AS `Instruments.userId`\nFROM `users` AS `user`\nINNER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId` AND\n  `Instruments`.`size` != 'small';\n```\n\nNote that the SQL query generated above will only fetch users that have at least one tool that matches the condition (of not being `small`, in this case). This is the case because, when the `where` option is used inside an `include`, Sequelize automatically sets the `required` option to `true`. This means that, instead of an `OUTER JOIN`, an `INNER JOIN` is done, returning only the parent models with at least one matching children.\n\nNote also that the `where` option used was converted into a condition for the `ON` clause of the `INNER JOIN`. In order to obtain a *top-level* `WHERE` clause, instead of an `ON` clause, something different must be done. This will be shown next.\n\n#### Referring to other columns[​](#referring-to-other-columns \"Direct link to heading\")\n\nIf you want to apply a `WHERE` clause in an included model referring to a value from an associated model, you can simply use the `Sequelize.col` function, as show in the example below:\n\n``` js\n// Find all projects with a least one task where task.state === project.state\nProject.findAll({\n  include: {\n    model: Task,\n    where: {\n      state: Sequelize.col('project.state')\n    }\n  }\n})\n```\n\n### Complex where clauses at the top-level[​](#complex-where-clauses-at-the-top-level \"Direct link to heading\")\n\nTo obtain top-level `WHERE` clauses that involve nested columns, Sequelize provides a way to reference nested columns: the `'$nested.column$'` syntax.\n\nIt can be used, for example, to move the where conditions from an included model from the `ON` condition to a top-level `WHERE` clause.\n\n``` js\nUser.findAll({\n  where: {\n    '$Instruments.size$': { [Op.ne]: 'small' }\n  },\n  include: [{\n    model: Tool,\n    as: 'Instruments'\n  }]\n});\n```\n\nGenerated SQL:\n\n``` sql\nSELECT\n  `user`.`id`,\n  `user`.`name`,\n  `Instruments`.`id` AS `Instruments.id`,\n  `Instruments`.`name` AS `Instruments.name`,\n  `Instruments`.`size` AS `Instruments.size`,\n  `Instruments`.`userId` AS `Instruments.userId`\nFROM `users` AS `user`\nLEFT OUTER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId`\nWHERE `Instruments`.`size` != 'small';\n```\n\nThe `$nested.column$` syntax also works for columns that are nested several levels deep, such as `$some.super.deeply.nested.column$`. Therefore, you can use this to make complex filters on deeply nested columns.\n\nFor a better understanding of all differences between the inner `where` option (used inside an `include`), with and without the `required` option, and a top-level `where` using the `$nested.column$` syntax, below we have four examples for you:\n\n``` js\n// Inner where, with default `required: true`\nawait User.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    where: {\n      size: { [Op.ne]: 'small' }\n    }\n  }\n});\n\n// Inner where, `required: false`\nawait User.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    where: {\n      size: { [Op.ne]: 'small' }\n    },\n    required: false\n  }\n});\n\n// Top-level where, with default `required: false`\nawait User.findAll({\n  where: {\n    '$Instruments.size$': { [Op.ne]: 'small' }\n  },\n  include: {\n    model: Tool,\n    as: 'Instruments'\n  }\n});\n\n// Top-level where, `required: true`\nawait User.findAll({\n  where: {\n    '$Instruments.size$': { [Op.ne]: 'small' }\n  },\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    required: true\n  }\n});\n```\n\nGenerated SQLs, in order:\n\n``` sql\n-- Inner where, with default `required: true`\nSELECT [...] FROM `users` AS `user`\nINNER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId`\n  AND `Instruments`.`size` != 'small';\n\n-- Inner where, `required: false`\nSELECT [...] FROM `users` AS `user`\nLEFT OUTER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId`\n  AND `Instruments`.`size` != 'small';\n\n-- Top-level where, with default `required: false`\nSELECT [...] FROM `users` AS `user`\nLEFT OUTER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId`\nWHERE `Instruments`.`size` != 'small';\n\n-- Top-level where, `required: true`\nSELECT [...] FROM `users` AS `user`\nINNER JOIN `tools` AS `Instruments` ON\n  `user`.`id` = `Instruments`.`userId`\nWHERE `Instruments`.`size` != 'small';\n```\n\n### Fetching with `RIGHT OUTER JOIN` (MySQL, MariaDB, PostgreSQL and MSSQL only)[​](#fetching-with-right-outer-join-mysql-mariadb-postgresql-and-mssql-only \"Direct link to heading\")\n\nBy default, associations are loaded using a `LEFT OUTER JOIN` - that is to say it only includes records from the parent table. You can change this behavior to a `RIGHT OUTER JOIN` by passing the `right` option, if the dialect you are using supports it.\n\nCurrenly, SQLite does not support [right joins](https://www.sqlite.org/omitted.html).\n\n*Note:* `right` is only respected if `required` is false.\n\n``` js\nUser.findAll({\n  include: [{\n    model: Task // will create a left join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    right: true // will create a right join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    required: true,\n    right: true // has no effect, will create an inner join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Task,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    right: true // has no effect, will create an inner join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Tool,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    required: false // will create a left join\n  }]\n});\nUser.findAll({\n  include: [{\n    model: Tool,\n    where: { name: { [Op.ne]: 'empty trash' } },\n    required: false\n    right: true // will create a right join\n  }]\n});\n```\n\n## Multiple eager loading[​](#multiple-eager-loading \"Direct link to heading\")\n\nThe `include` option can receive an array in order to fetch multiple associated models at once:\n\n``` js\nFoo.findAll({\n  include: [\n    {\n      model: Bar,\n      required: true\n    },\n    {\n      model: Baz,\n      where: /* ... */\n    },\n    Qux // Shorthand syntax for { model: Qux } also works here\n  ]\n})\n```\n\n## Eager loading with Many-to-Many relationships[​](#eager-loading-with-many-to-many-relationships \"Direct link to heading\")\n\nWhen you perform eager loading on a model with a Belongs-to-Many relationship, Sequelize will fetch the junction table data as well, by default. For example:\n\n``` js\nconst Foo = sequelize.define('Foo', { name: DataTypes.TEXT });\nconst Bar = sequelize.define('Bar', { name: DataTypes.TEXT });\nFoo.belongsToMany(Bar, { through: 'Foo_Bar' });\nBar.belongsToMany(Foo, { through: 'Foo_Bar' });\n\nawait sequelize.sync();\nconst foo = await Foo.create({ name: 'foo' });\nconst bar = await Bar.create({ name: 'bar' });\nawait foo.addBar(bar);\nconst fetchedFoo = await Foo.findOne({ include: Bar });\nconsole.log(JSON.stringify(fetchedFoo, null, 2));\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 1,\n  \"name\": \"foo\",\n  \"Bars\": [\n    {\n      \"id\": 1,\n      \"name\": \"bar\",\n      \"Foo_Bar\": {\n        \"FooId\": 1,\n        \"BarId\": 1\n      }\n    }\n  ]\n}\n```\n\nNote that every bar instance eager loaded into the `\"Bars\"` property has an extra property called `Foo_Bar` which is the relevant Sequelize instance of the junction model. By default, Sequelize fetches all attributes from the junction table in order to build this extra property.\n\nHowever, you can specify which attributes you want fetched. This is done with the `attributes` option applied inside the `through` option of the include. For example:\n\n``` js\nFoo.findAll({\n  include: [{\n    model: Bar,\n    through: {\n      attributes: [/* list the wanted attributes here */]\n    }\n  }]\n});\n```\n\nIf you don't want anything from the junction table, you can explicitly provide an empty array to the `attributes` option inside the `through` option of the `include` option, and in this case nothing will be fetched and the extra property will not even be created:\n\n``` js\nFoo.findOne({\n  include: {\n    model: Bar,\n    through: {\n      attributes: []\n    }\n  }\n});\n```\n\nOutput:\n\n``` json\n{\n  \"id\": 1,\n  \"name\": \"foo\",\n  \"Bars\": [\n    {\n      \"id\": 1,\n      \"name\": \"bar\"\n    }\n  ]\n}\n```\n\nWhenever including a model from a Many-to-Many relationship, you can also apply a filter on the junction table. This is done with the `where` option applied inside the `through` option of the include. For example:\n\n``` js\nUser.findAll({\n  include: [{\n    model: Project,\n    through: {\n      where: {\n        // Here, `completed` is a column present at the junction table\n        completed: true\n      }\n    }\n  }]\n});\n```\n\nGenerated SQL (using SQLite):\n\n``` sql\nSELECT\n  `User`.`id`,\n  `User`.`name`,\n  `Projects`.`id` AS `Projects.id`,\n  `Projects`.`name` AS `Projects.name`,\n  `Projects->User_Project`.`completed` AS `Projects.User_Project.completed`,\n  `Projects->User_Project`.`UserId` AS `Projects.User_Project.UserId`,\n  `Projects->User_Project`.`ProjectId` AS `Projects.User_Project.ProjectId`\nFROM `Users` AS `User`\nLEFT OUTER JOIN `User_Projects` AS `Projects->User_Project` ON\n  `User`.`id` = `Projects->User_Project`.`UserId`\nLEFT OUTER JOIN `Projects` AS `Projects` ON\n  `Projects`.`id` = `Projects->User_Project`.`ProjectId` AND\n  `Projects->User_Project`.`completed` = 1;\n```\n\n## Including everything[​](#including-everything \"Direct link to heading\")\n\nTo include all associated models, you can use the `all` and `nested` options:\n\n``` js\n// Fetch all models associated with User\nUser.findAll({ include: { all: true }});\n\n// Fetch all models associated with User and their nested associations (recursively)\nUser.findAll({ include: { all: true, nested: true }});\n```\n\n## Including soft deleted records[​](#including-soft-deleted-records \"Direct link to heading\")\n\nIn case you want to eager load soft deleted records you can do that by setting `include.paranoid` to `false`:\n\n``` js\nUser.findAll({\n  include: [{\n    model: Tool,\n    as: 'Instruments',\n    where: { size: { [Op.ne]: 'small' } },\n    paranoid: false\n  }]\n});\n```\n\n## Ordering eager loaded associations[​](#ordering-eager-loaded-associations \"Direct link to heading\")\n\nWhen you want to apply `ORDER` clauses to eager loaded models, you must use the top-level `order` option with augmented arrays, starting with the specification of the nested model you want to sort.\n\nThis is better understood with examples.\n\n``` js\nCompany.findAll({\n  include: Division,\n  order: [\n    // We start the order array with the model we want to sort\n    [Division, 'name', 'ASC']\n  ]\n});\nCompany.findAll({\n  include: Division,\n  order: [\n    [Division, 'name', 'DESC']\n  ]\n});\nCompany.findAll({\n  // If the include uses an alias...\n  include: { model: Division, as: 'Div' },\n  order: [\n    // ...we use the same syntax from the include\n    // in the beginning of the order array\n    [{ model: Division, as: 'Div' }, 'name', 'DESC']\n  ]\n});\n\nCompany.findAll({\n  // If we have includes nested in several levels...\n  include: {\n    model: Division,\n    include: Department\n  },\n  order: [\n    // ... we replicate the include chain of interest\n    // at the beginning of the order array\n    [Division, Department, 'name', 'DESC']\n  ]\n});\n```\n\nIn the case of many-to-many relationships, you are also able to sort by attributes in the through table. For example, assuming we have a Many-to-Many relationship between `Division` and `Department` whose junction model is `DepartmentDivision`, you can do:\n\n``` js\nCompany.findAll({\n  include: {\n    model: Division,\n    include: Department\n  },\n  order: [\n    [Division, DepartmentDivision, 'name', 'ASC']\n  ]\n});\n```\n\nIn all the above examples, you have noticed that the `order` option is used at the top-level. The only situation in which `order` also works inside the include option is when `separate: true` is used. In that case, the usage is as follows:\n\n``` js\n// This only works for `separate: true` (which in turn\n// only works for has-many relationships).\nUser.findAll({\n  include: {\n    model: Post,\n    separate: true,\n    order: [\n      ['createdAt', 'DESC']\n    ]\n  }\n});\n```\n\n### Complex ordering involving sub-queries[​](#complex-ordering-involving-sub-queries \"Direct link to heading\")\n\nTake a look at the [guide on sub-queries](../../other-topics/sub-queries/index) for an example of how to use a sub-query to assist a more complex ordering.\n\n## Nested eager loading[​](#nested-eager-loading \"Direct link to heading\")\n\nYou can use nested eager loading to load all related models of a related model:\n\n``` js\nconst users = await User.findAll({\n  include: {\n    model: Tool,\n    as: 'Instruments',\n    include: {\n      model: Teacher,\n      include: [ /* etc */ ]\n    }\n  }\n});\nconsole.log(JSON.stringify(users, null, 2));\n```\n\nOutput:\n\n``` json\n[{\n  \"name\": \"John Doe\",\n  \"id\": 1,\n  \"Instruments\": [{ // 1:M and N:M association\n    \"name\": \"Scissor\",\n    \"id\": 1,\n    \"userId\": 1,\n    \"Teacher\": { // 1:1 association\n      \"name\": \"Jimi Hendrix\"\n    }\n  }]\n}]\n```\n\nThis will produce an outer join. However, a `where` clause on a related model will create an inner join and return only the instances that have matching sub-models. To return all parent instances, you should add `required: false`.\n\n``` js\nUser.findAll({\n  include: [{\n    model: Tool,\n    as: 'Instruments',\n    include: [{\n      model: Teacher,\n      where: {\n        school: \"Woodstock Music School\"\n      },\n      required: false\n    }]\n  }]\n});\n```\n\nThe query above will return all users, and all their instruments, but only those teachers associated with `Woodstock Music School`.\n\n## Using `findAndCountAll` with includes[​](#using-findandcountall-with-includes \"Direct link to heading\")\n\nThe `findAndCountAll` utility function supports includes. Only the includes that are marked as `required` will be considered in `count`. For example, if you want to find and count all users who have a profile:\n\n``` js\nUser.findAndCountAll({\n  include: [\n    { model: Profile, required: true }\n  ],\n  limit: 3\n});\n```\n\nBecause the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted. Adding a `where` clause to the include automatically makes it required:\n\n``` js\nUser.findAndCountAll({\n  include: [\n    { model: Profile, where: { active: true } }\n  ],\n  limit: 3\n});\n```\n\nThe query above will only count users who have an active profile, because `required` is implicitly set to true when you add a where clause to the include.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/advanced-association-concepts/eager-loading/](https://sequelize.org/docs/v6/advanced-association-concepts/eager-loading/)"
- name: EagerLoadingError
  id: class/src/errors/eager-loading-error.ts~eagerloadingerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# EagerLoadingError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → EagerLoadingError\n\nThrown when an include statement is improperly constructed (see message for details)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/eager-loading-error.ts~EagerLoadingError.html](https://sequelize.org/api/v6/class/src/errors/eager-loading-error.ts~EagerLoadingError.html)"
- name: EmptyResultError
  id: class/src/errors/empty-result-error.ts~emptyresulterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# EmptyResultError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → EmptyResultError\n\nThrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/empty-result-error.ts~EmptyResultError.html](https://sequelize.org/api/v6/class/src/errors/empty-result-error.ts~EmptyResultError.html)"
- name: ENUM
  id: class/src/data-types.js~enum
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ENUM\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → ENUM\n\nAn enumeration, Postgres Only\n\n#### Example:\n\n``` prettyprint\nDataTypes.ENUM('value', 'another value')\nDataTypes.ENUM(['value', 'another value'])\nDataTypes.ENUM({\n  values: ['value', 'another value']\n})\n```\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(args: ...any \\| {values: any\\[\\]} \\| any\\[\\])  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber741) \n\n#### Params:\n\n| Name | Type                                   | Attribute | Description                                                                                  |\n|------|----------------------------------------|-----------|----------------------------------------------------------------------------------------------|\n| args | ...any \\| {values: any\\[\\]} \\| any\\[\\] |           | either array of values or options object with values array. It also supports variadic values |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~ENUM.html](https://sequelize.org/api/v6/class/src/data-types.js~ENUM.html)"
- name: ExclusionConstraintError
  id: class/src/errors/database/exclusion-constraint-error.ts~exclusionconstrainterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ExclusionConstraintError\n\n#### Extends:\n\nimport_database_error~import_database_error.default → ExclusionConstraintError\n\nThrown when an exclusion constraint is violated in the database\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/database/exclusion-constraint-error.ts~ExclusionConstraintError.html](https://sequelize.org/api/v6/class/src/errors/database/exclusion-constraint-error.ts~ExclusionConstraintError.html)"
- name: Extending Data Types
  id: other-topics/extending-data-types/index
  summary: Most likely the type you are trying to implement is already included in DataTypes
  description: "# Extending Data Types\n\nMost likely the type you are trying to implement is already included in [DataTypes](../other-data-types/index). If a new datatype is not included, this manual will show how to write it yourself.\n\nSequelize doesn't create new datatypes in the database. This tutorial explains how to make Sequelize recognize new datatypes and assumes that those new datatypes are already created in the database.\n\nTo extend Sequelize datatypes, do it before any Sequelize instance is created.\n\n## Example[​](#example \"Direct link to heading\")\n\nIn this example, we will create a type called `SOMETYPE` that replicates the built-in datatype `DataTypes.INTEGER(11).ZEROFILL.UNSIGNED`.\n\n``` js\nconst { Sequelize, DataTypes, Utils } = require('Sequelize');\ncreateTheNewDataType();\nconst sequelize = new Sequelize('sqlite::memory:');\n\nfunction createTheNewDataType() {\n\n  class SOMETYPE extends DataTypes.ABSTRACT {\n    // Mandatory: complete definition of the new type in the database\n    toSql() {\n      return 'INTEGER(11) UNSIGNED ZEROFILL'\n    }\n\n    // Optional: validator function\n    validate(value, options) {\n      return (typeof value === 'number') && (!Number.isNaN(value));\n    }\n\n    // Optional: sanitizer\n    _sanitize(value) {\n      // Force all numbers to be positive\n      return value < 0 ? 0 : Math.round(value);\n    }\n\n    // Optional: value stringifier before sending to database\n    _stringify(value) {\n      return value.toString();\n    }\n\n    // Optional: parser for values received from the database\n    static parse(value) {\n      return Number.parseInt(value);\n    }\n  }\n\n  // Mandatory: set the type key\n  SOMETYPE.prototype.key = SOMETYPE.key = 'SOMETYPE';\n\n  // Mandatory: add the new type to DataTypes. Optionally wrap it on `Utils.classToInvokable` to\n  // be able to use this datatype directly without having to call `new` on it.\n  DataTypes.SOMETYPE = Utils.classToInvokable(SOMETYPE);\n\n  // Optional: disable escaping after stringifier. Do this at your own risk, since this opens opportunity for SQL injections.\n  // DataTypes.SOMETYPE.escape = false;\n\n}\n```\n\nAfter creating this new datatype, you need to map this datatype in each database dialect and make some adjustments.\n\n## PostgreSQL[​](#postgresql \"Direct link to heading\")\n\nLet's say the name of the new datatype is `pg_new_type` in the postgres database. That name has to be mapped to `DataTypes.SOMETYPE`. Additionally, it is required to create a child postgres-specific datatype.\n\n``` js\nfunction createTheNewDataType() {\n  // [...]\n\n  const PgTypes = DataTypes.postgres;\n\n  // Mandatory: map postgres datatype name\n  DataTypes.SOMETYPE.types.postgres = ['pg_new_type'];\n\n  // Mandatory: create a postgres-specific child datatype with its own parse\n  // method. The parser will be dynamically mapped to the OID of pg_new_type.\n  PgTypes.SOMETYPE = function SOMETYPE() {\n    if (!(this instanceof PgTypes.SOMETYPE)) {\n      return new PgTypes.SOMETYPE();\n    }\n    DataTypes.SOMETYPE.apply(this, arguments);\n  }\n  const util = require('util'); // Built-in Node package\n  util.inherits(PgTypes.SOMETYPE, DataTypes.SOMETYPE);\n\n  // Mandatory: create, override or reassign a postgres-specific parser\n  // PgTypes.SOMETYPE.parse = value => value;\n  PgTypes.SOMETYPE.parse = DataTypes.SOMETYPE.parse || x => x;\n\n  // Optional: add or override methods of the postgres-specific datatype\n  // like toSql, escape, validate, _stringify, _sanitize...\n\n}\n```\n\n### Ranges[​](#ranges \"Direct link to heading\")\n\nAfter a new range type has been [defined in postgres](https://www.postgresql.org/docs/current/static/rangetypes.html#RANGETYPES-DEFINING), it is trivial to add it to Sequelize.\n\nIn this example the name of the postgres range type is `SOMETYPE_range` and the name of the underlying postgres datatype is `pg_new_type`. The key of `subtypes` and `castTypes` is the key of the Sequelize datatype `DataTypes.SOMETYPE.key`, in lower case.\n\n``` js\nfunction createTheNewDataType() {\n  // [...]\n\n  // Add postgresql range, SOMETYPE comes from DataType.SOMETYPE.key in lower case\n  DataTypes.RANGE.types.postgres.subtypes.SOMETYPE = 'SOMETYPE_range';\n  DataTypes.RANGE.types.postgres.castTypes.SOMETYPE = 'pg_new_type';\n}\n```\n\nThe new range can be used in model definitions as `DataTypes.RANGE(DataTypes.SOMETYPE)` or `DataTypes.RANGE(DataTypes.SOMETYPE)`.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/extending-data-types/](https://sequelize.org/docs/v6/other-topics/extending-data-types/)"
- name: FLOAT
  id: class/src/data-types.js~float
  summary: Floating point number (4-byte precision)
  description: "# FLOAT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → FLOAT\n\nFloating point number (4-byte precision).\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), decimals: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber288) \n\n#### Override:\n\n[NUMBER#constructor](data-types.js~number#instance-constructor-constructor)\n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~FLOAT.html](https://sequelize.org/api/v6/class/src/data-types.js~FLOAT.html)"
- name: ForeignKeyConstraintError
  id: class/src/errors/database/foreign-key-constraint-error.ts~foreignkeyconstrainterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# ForeignKeyConstraintError\n\n#### Extends:\n\nimport_database_error~import_database_error.default → ForeignKeyConstraintError\n\nThrown when a foreign key constraint is violated in the database\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/database/foreign-key-constraint-error.ts~ForeignKeyConstraintError.html](https://sequelize.org/api/v6/class/src/errors/database/foreign-key-constraint-error.ts~ForeignKeyConstraintError.html)"
- name: Function
  id: function/index
  summary: this function was deprecated
  description: "# Function\n\n[TABLE]\n\n## Static Public\n\n### public format(arr: unknown\\[\\], dialect: AbstractDialect): \\*  [source](https://sequelize.org/api/v6/file/src/utils.js.html#lineNumber123) \n\nthis function was deprecated. use {@link injectReplacements} instead. This method has been removed in v7.\n\n#### Params:\n\n| Name    | Type            | Attribute | Description                                                             |\n|---------|-----------------|-----------|-------------------------------------------------------------------------|\n| arr     | unknown\\[\\]     |           | first item is the SQL, following items are the positional replacements. |\n| dialect | AbstractDialect |           |                                                                         |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public formatNamedParameters(sql: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), parameters: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), dialect: AbstractDialect): \\*  [source](https://sequelize.org/api/v6/file/src/utils.js.html#lineNumber137) \n\nthis function was deprecated. use {@link injectReplacements} instead. This method has been removed in v7.\n\n#### Params:\n\n| Name       | Type                                                                                              | Attribute | Description |\n|------------|---------------------------------------------------------------------------------------------------|-----------|-------------|\n| sql        | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           |             |\n| parameters | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           |             |\n| dialect    | AbstractDialect                                                                                   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public injectReplacements(sqlString: \\*, dialect: \\*, replacements: \\*): \\*  [source](../file/src/utils/sql.ts#lineNumber38) \n\nInlines replacements in places where they would be valid SQL values.\n\n#### Params:\n\n| Name         | Type | Attribute | Description                                                                               |\n|--------------|------|-----------|-------------------------------------------------------------------------------------------|\n| sqlString    | \\*   |           | The SQL that contains the replacements                                                    |\n| dialect      | \\*   |           | The dialect of the SQL                                                                    |\n| replacements | \\*   |           | if provided, this method will replace ':named' replacements & positional replacements (?) |\n\n#### Return:\n\n|     |                                                                       |\n|-----|-----------------------------------------------------------------------|\n| \\*  | The SQL with replacements rewritten in their dialect-specific syntax. |\n\n### public safeStringifyJson(value: any): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/utils.js.html#lineNumber658) \n\nStringify a value as JSON with some differences:\n\n- bigints are stringified as a json string. (`safeStringifyJson({ val: 1n })` outputs `'{ \"val\": \"1\" }'`). This is because of a decision by TC39 to not support bigint in JSON.stringify <https://github.com/tc39/proposal-bigint/issues/24>\n\n#### Params:\n\n| Name  | Type | Attribute | Description             |\n|-------|------|-----------|-------------------------|\n| value | any  |           | the value to stringify. |\n\n#### Return:\n\n|                                                                                                   |                     |\n|---------------------------------------------------------------------------------------------------|---------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | the resulting json. |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/function/index.html](https://sequelize.org/api/v6/function/index.html)"
- name: GEOGRAPHY
  id: class/src/data-types.js~geography
  summary: A geography datatype represents two dimensional spacial objects in an elliptic coord system
  description: "# GEOGRAPHY\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → GEOGRAPHY\n\nA geography datatype represents two dimensional spacial objects in an elliptic coord system.\n\n**The difference from geometry and geography type:**\n\nPostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement. Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326), but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n\n**What is best to use? It depends:**\n\nWhen choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for. If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type. Although the new geography data type can cover the globe, the geometry type is far from obsolete. The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n\n#### Example:\n\nDefining a Geography type attribute\n\n``` prettyprint\nDataTypes.GEOGRAPHY\nDataTypes.GEOGRAPHY('POINT')\nDataTypes.GEOGRAPHY('POINT', 4326)\n```\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(type: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), srid: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber884) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~GEOGRAPHY.html](https://sequelize.org/api/v6/class/src/data-types.js~GEOGRAPHY.html)"
- name: GEOMETRY
  id: class/src/data-types.js~geometry
  summary: A column storing Geometry information
  description: "# GEOMETRY\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → GEOMETRY\n\nA column storing Geometry information. It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n\nGeoJSON is accepted as input and returned as output.\n\nIn PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`. In MySQL it is parsed using the function `ST_GeomFromText`.\n\nTherefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects. See the following examples:\n\n#### See:\n\n- DataTypes.GEOGRAPHY\n\n#### Example:\n\nDefining a Geometry type attribute\n\n``` prettyprint\nDataTypes.GEOMETRY\nDataTypes.GEOMETRY('POINT')\nDataTypes.GEOMETRY('POINT', 4326)\n```\n\nCreate a new point\n\n``` prettyprint\nconst point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\n\nUser.create({username: 'username', geometry: point });\n```\n\nCreate a new linestring\n\n``` prettyprint\nconst line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n\nUser.create({username: 'username', geometry: line });\n```\n\nCreate a new polygon\n\n``` prettyprint\nconst polygon = { type: 'Polygon', coordinates: [\n                [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n                  [100.0, 1.0], [100.0, 0.0] ]\n                ]};\n\nUser.create({username: 'username', geometry: polygon });\n```\n\nCreate a new point with a custom SRID\n\n``` prettyprint\nconst point = {\n  type: 'Point',\n  coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\n  crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n};\n\nUser.create({username: 'username', geometry: point })\n```\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(type: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), srid: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber841) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~GEOMETRY.html](https://sequelize.org/api/v6/class/src/data-types.js~GEOMETRY.html)"
- name: Getters, Setters & Virtuals
  id: core-concepts/getters-setters-virtuals/index
  summary: Sequelize allows you to define custom getters and setters for the attributes of your models
  description: "# Getters, Setters & Virtuals\n\nSequelize allows you to define custom getters and setters for the attributes of your models.\n\nSequelize also allows you to specify the so-called *virtual attributes*, which are attributes on the Sequelize Model that doesn't really exist in the underlying SQL table, but instead are populated automatically by Sequelize. They are very useful to create custom attributes which also could simplify your code, for example.\n\n## Getters[​](#getters \"Direct link to heading\")\n\nA getter is a `get()` function defined for one column in the model definition:\n\n``` js\nconst User = sequelize.define('user', {\n  // Let's say we wanted to see every username in uppercase, even\n  // though they are not necessarily uppercase in the database itself\n  username: {\n    type: DataTypes.STRING,\n    get() {\n      const rawValue = this.getDataValue('username');\n      return rawValue ? rawValue.toUpperCase() : null;\n    }\n  }\n});\n```\n\nThis getter, just like a standard JavaScript getter, is called automatically when the field value is read:\n\n``` js\nconst user = User.build({ username: 'SuperUser123' });\nconsole.log(user.username); // 'SUPERUSER123'\nconsole.log(user.getDataValue('username')); // 'SuperUser123'\n```\n\nNote that, although `SUPERUSER123` was logged above, the value truly stored in the database is still `SuperUser123`. We used `this.getDataValue('username')` to obtain this value, and converted it to uppercase.\n\nHad we tried to use `this.username` in the getter instead, we would have gotten an infinite loop! This is why Sequelize provides the `getDataValue` method.\n\n## Setters[​](#setters \"Direct link to heading\")\n\nA setter is a `set()` function defined for one column in the model definition. It receives the value being set:\n\n``` js\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  password: {\n    type: DataTypes.STRING,\n    set(value) {\n      // Storing passwords in plaintext in the database is terrible.\n      // Hashing the value with an appropriate cryptographic hash function is better.\n      this.setDataValue('password', hash(value));\n    }\n  }\n});\n```\n\n``` js\nconst user = User.build({ username: 'someone', password: 'NotSo§tr0ngP4$SW0RD!' });\nconsole.log(user.password); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\nconsole.log(user.getDataValue('password')); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\n```\n\nObserve that Sequelize called the setter automatically, before even sending data to the database. The only data the database ever saw was the already hashed value.\n\nIf we wanted to involve another field from our model instance in the computation, that is possible and very easy!\n\n``` js\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  password: {\n    type: DataTypes.STRING,\n    set(value) {\n      // Storing passwords in plaintext in the database is terrible.\n      // Hashing the value with an appropriate cryptographic hash function is better.\n      // Using the username as a salt is better.\n      this.setDataValue('password', hash(this.username + value));\n    }\n  }\n});\n```\n\n**Note:** The above examples involving password handling, although much better than simply storing the password in plaintext, are far from perfect security. Handling passwords properly is hard, everything here is just for the sake of an example to show Sequelize functionality. We suggest involving a cybersecurity expert and/or reading [OWASP](https://www.owasp.org/) documents and/or visiting the [InfoSec StackExchange](https://security.stackexchange.com/).\n\n## Combining getters and setters[​](#combining-getters-and-setters \"Direct link to heading\")\n\nGetters and setters can be both defined in the same field.\n\nFor the sake of an example, let's say we are modeling a `Post`, whose `content` is a text of unlimited length. To improve memory usage, let's say we want to store a gzipped version of the content.\n\n*Note: modern databases should do some compression automatically in these cases. Please note that this is just for the sake of an example.*\n\n``` js\nconst { gzipSync, gunzipSync } = require('zlib');\n\nconst Post = sequelize.define('post', {\n  content: {\n    type: DataTypes.TEXT,\n    get() {\n      const storedValue = this.getDataValue('content');\n      const gzippedBuffer = Buffer.from(storedValue, 'base64');\n      const unzippedBuffer = gunzipSync(gzippedBuffer);\n      return unzippedBuffer.toString();\n    },\n    set(value) {\n      const gzippedBuffer = gzipSync(value);\n      this.setDataValue('content', gzippedBuffer.toString('base64'));\n    }\n  }\n});\n```\n\nWith the above setup, whenever we try to interact with the `content` field of our `Post` model, Sequelize will automatically handle the custom getter and setter. For example:\n\n``` js\nconst post = await Post.create({ content: 'Hello everyone!' });\n\nconsole.log(post.content); // 'Hello everyone!'\n// Everything is happening under the hood, so we can even forget that the\n// content is actually being stored as a gzipped base64 string!\n\n// However, if we are really curious, we can get the 'raw' data...\nconsole.log(post.getDataValue('content'));\n// Output: 'H4sIAAAAAAAACvNIzcnJV0gtSy2qzM9LVQQAUuk9jQ8AAAA='\n```\n\n## Virtual fields[​](#virtual-fields \"Direct link to heading\")\n\nVirtual fields are fields that Sequelize populates under the hood, but in reality they don't even exist in the database.\n\nFor example, let's say we have the `firstName` and `lastName` attributes for a User.\n\n*Again, this is [only for the sake of an example](https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/).*\n\nIt would be nice to have a simple way to obtain the *full name* directly! We can combine the idea of `getters` with the special data type Sequelize provides for this kind of situation: `DataTypes.VIRTUAL`:\n\n``` js\nconst { DataTypes } = require(\"sequelize\");\n\nconst User = sequelize.define('user', {\n  firstName: DataTypes.TEXT,\n  lastName: DataTypes.TEXT,\n  fullName: {\n    type: DataTypes.VIRTUAL,\n    get() {\n      return `${this.firstName} ${this.lastName}`;\n    },\n    set(value) {\n      throw new Error('Do not try to set the `fullName` value!');\n    }\n  }\n});\n```\n\nThe `VIRTUAL` field does not cause a column in the table to exist. In other words, the model above will not have a `fullName` column. However, it will appear to have it!\n\n``` js\nconst user = await User.create({ firstName: 'John', lastName: 'Doe' });\nconsole.log(user.fullName); // 'John Doe'\n```\n\n## Deprecated in Sequelize v7: `getterMethods` and `setterMethods`[​](#deprecated-in-sequelize-v7-gettermethods-and-settermethods \"Direct link to heading\")\n\nSequelize also provides the `getterMethods` and `setterMethods` options in the model definition to specify things that look like, but aren't exactly the same as, virtual attributes. This usage is discouraged and likely to be **deprecated** in the future (in favor of using virtual attributes directly).\n\nExample:\n\n``` js\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('user', {\n  firstName: DataTypes.STRING,\n  lastName: DataTypes.STRING\n}, {\n  getterMethods: {\n    fullName() {\n      return this.firstName + ' ' + this.lastName;\n    }\n  },\n  setterMethods: {\n    fullName(value) {\n      // Note: this is just for demonstration.\n      // See: https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\n      const names = value.split(' ');\n      const firstName = names[0];\n      const lastName = names.slice(1).join(' ');\n      this.setDataValue('firstName', firstName);\n      this.setDataValue('lastName', lastName);\n    }\n  }\n});\n\n(async () => {\n  await sequelize.sync();\n  let user = await User.create({ firstName: 'John',  lastName: 'Doe' });\n  console.log(user.fullName); // 'John Doe'\n  user.fullName = 'Someone Else';\n  await user.save();\n  user = await User.findOne();\n  console.log(user.firstName); // 'Someone'\n  console.log(user.lastName); // 'Else'\n})();\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/getters-setters-virtuals/](https://sequelize.org/docs/v6/core-concepts/getters-setters-virtuals/)"
- name: Getting Started
  id: getting-started/index
  summary: In this tutorial you will learn to make a simple setup of Sequelize
  description: "# Getting Started\n\nIn this tutorial you will learn to make a simple setup of Sequelize.\n\n## Installing[​](#installing \"Direct link to heading\")\n\nSequelize is available via [npm](https://www.npmjs.com/package/sequelize) (or [yarn](https://yarnpkg.com/package/sequelize)).\n\n``` sh\nnpm install --save sequelize\n```\n\nYou'll also have to manually install the driver for your database of choice:\n\n``` sh\n# One of the following:\n$ npm install --save pg pg-hstore # Postgres\n$ npm install --save mysql2\n$ npm install --save mariadb\n$ npm install --save sqlite3\n$ npm install --save tedious # Microsoft SQL Server\n$ npm install --save oracledb # Oracle Database\n```\n\n## Connecting to a database[​](#connecting-to-a-database \"Direct link to heading\")\n\nTo connect to the database, you must create a Sequelize instance. This can be done by either passing the connection parameters separately to the Sequelize constructor or by passing a single connection URI:\n\n``` js\nconst { Sequelize } = require('sequelize');\n\n// Option 1: Passing a connection URI\nconst sequelize = new Sequelize('sqlite::memory:') // Example for sqlite\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname') // Example for postgres\n\n// Option 2: Passing parameters separately (sqlite)\nconst sequelize = new Sequelize({\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite'\n});\n\n// Option 3: Passing parameters separately (other dialects)\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: /* one of 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql' | 'db2' | 'snowflake' | 'oracle' */\n});\n```\n\nThe Sequelize constructor accepts a lot of options. They are documented in the [API Reference](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-constructor-constructor).\n\n### Testing the connection[​](#testing-the-connection \"Direct link to heading\")\n\nYou can use the `.authenticate()` function to test if the connection is OK:\n\n``` js\ntry {\n  await sequelize.authenticate();\n  console.log('Connection has been established successfully.');\n} catch (error) {\n  console.error('Unable to connect to the database:', error);\n}\n```\n\n### Closing the connection[​](#closing-the-connection \"Direct link to heading\")\n\nSequelize will keep the connection open by default, and use the same connection for all queries. If you need to close the connection, call `sequelize.close()` (which is asynchronous and returns a Promise).\n\nnote\n\nOnce `sequelize.close()` has been called, it's impossible to open a new connection. You will need to create a new Sequelize instance to access your database again.\n\n## Terminology convention[​](#terminology-convention \"Direct link to heading\")\n\nObserve that, in the examples above, `Sequelize` refers to the library itself while `sequelize` refers to an instance of Sequelize, which represents a connection to one database. This is the recommended convention and it will be followed throughout the documentation.\n\n## Tip for reading the docs[​](#tip-for-reading-the-docs \"Direct link to heading\")\n\nYou are encouraged to run code examples locally while reading the Sequelize docs. This will help you learn faster. The easiest way to do this is using the SQLite dialect:\n\n``` js\nconst { Sequelize, Op, Model, DataTypes } = require(\"sequelize\");\nconst sequelize = new Sequelize(\"sqlite::memory:\");\n\n// Code here! It works!\n```\n\nTo experiment with the other dialects, which are harder to setup locally, you can use the [Sequelize SSCCE](https://github.com/papb/sequelize-sscce) GitHub repository, which allows you to run code on all supported dialects directly from GitHub, for free, without any setup!\n\n## New databases versus existing databases[​](#new-databases-versus-existing-databases \"Direct link to heading\")\n\nIf you are starting a project from scratch, and your database is still empty, Sequelize can be used since the beginning in order to automate the creation of every table in your database.\n\nAlso, if you want to use Sequelize to connect to a database that is already filled with tables and data, that works as well! Sequelize has got you covered in both cases.\n\n## Logging[​](#logging \"Direct link to heading\")\n\nBy default, Sequelize will log to console every SQL query it performs. The `options.logging` option can be used to customize this behavior, by defining the function that gets executed every time Sequelize would log something. The default value is `console.log` and when using that only the first log parameter of log function call is displayed. For example, for query logging the first parameter is the raw query and the second (hidden by default) is the Sequelize object.\n\nCommon useful values for `options.logging`:\n\n``` js\nconst sequelize = new Sequelize('sqlite::memory:', {\n  // Choose one of the logging options\n  logging: console.log,                  // Default, displays the first parameter of the log function call\n  logging: (...msg) => console.log(msg), // Displays all log function call parameters\n  logging: false,                        // Disables logging\n  logging: msg => logger.debug(msg),     // Use custom logger (e.g. Winston or Bunyan), displays the first parameter\n  logging: logger.debug.bind(logger)     // Alternative way to use custom logger, displays all messages\n});\n```\n\n## Promises and async/await[​](#promises-and-asyncawait \"Direct link to heading\")\n\nMost of the methods provided by Sequelize are asynchronous and therefore return Promises. They are all [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) , so you can use the Promise API (for example, using `then`, `catch`, `finally`) out of the box.\n\nOf course, using `async` and `await` works normally as well.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/getting-started/](https://sequelize.org/docs/v6/getting-started/)"
- name: HasMany
  id: class/src/associations/has-many.js~hasmany
  summary: In the API reference below, add the name of the association to the method, e.g
  description: "# HasMany\n\n#### Extends:\n\n[Association](base.js~association) → HasMany\n\nOne-to-many association\n\nIn the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`. If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n\n#### See:\n\n- [Model.hasMany](../model.js~model#static-method-hasMany)\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async add(sourceInstance: [Model](../model.js~model), targetInstances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber404) \n\nAssociate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row, or a mixed array of Model / string / numbers to associate multiple rows.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async count(instance: [Model](../model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber253) \n\nCount everything currently associated with this, using an optional where clause.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> |\n\n### public async create(sourceInstance: [Model](../model.js~model), values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber463) \n\nCreate a new instance of the associated model and associate it with this.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async get(instances: [Model](../model.js~model) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>, options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>\\>  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber173) \n\nGet everything currently associated with this, using an optional where clause.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>\\> |\n\n#### See:\n\n- [Model.findAll](../model.js~model#static-method-findAll) for a full explanation of options\n\n### public async has(sourceInstance: [Model](../model.js~model), targetInstances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber282) \n\nCheck if one or more rows are associated with `this`.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async remove(sourceInstance: [Model](../model.js~model), targetInstances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\], options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber435) \n\nUn-associate one or several target rows.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async set(sourceInstance: [Model](../model.js~model), targetInstances: [Model](../model.js~model) \\| [Model](../model.js~model)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\] \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\[\\] \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-many.js.html#lineNumber327) \n\nSet the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/associations/has-many.js~HasMany.html](https://sequelize.org/api/v6/class/src/associations/has-many.js~HasMany.html)"
- name: HasOne
  id: class/src/associations/has-one.js~hasone
  summary: In the API reference below, add the name of the association to the method, e.g
  description: "# HasOne\n\n#### Extends:\n\n[Association](base.js~association) → HasOne\n\nOne-to-one association\n\nIn the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`. This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n\n#### See:\n\n- [Model.hasOne](../model.js~model#static-method-hasOne)\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async create(sourceInstance: [Model](../model.js~model), values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/associations/has-one.js.html#lineNumber242) \n\nCreate a new instance of the associated model and associate it with this.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                   |                          |\n|-----------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\> | The created target model |\n\n#### See:\n\n- Model#create for a full explanation of options\n\n### public async get(instances: [Model](../model.js~model) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](../model.js~model)\\>, options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/associations/has-one.js.html#lineNumber126) \n\nGet the associated instance.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                   |\n|-----------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](../model.js~model)\\> |\n\n#### See:\n\n- [Model.findOne](../model.js~model#static-method-findOne) for a full explanation of options\n\n### public async set(sourceInstance: [Model](../model.js~model), associatedInstance: [Model](../model.js~model) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/associations/has-one.js.html#lineNumber193) \n\nSet the associated model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/associations/has-one.js~HasOne.html](https://sequelize.org/api/v6/class/src/associations/has-one.js~HasOne.html)"
- name: Hooks
  id: other-topics/hooks/index
  summary: Hooks (also known as lifecycle events), are functions which are called before and after calls in sequelize are executed
  description: "# Hooks\n\nHooks (also known as lifecycle events), are functions which are called before and after calls in sequelize are executed. For example, if you want to always set a value on a model before saving it, you can add a `beforeUpdate` hook.\n\n**Note:** *You can't use hooks with instances. Hooks are used with models.*\n\n## Available hooks[​](#available-hooks \"Direct link to heading\")\n\nSequelize provides a lot of hooks. The full list can be found in directly in the [source code - src/hooks.js](https://github.com/sequelize/sequelize/blob/v6/src/hooks.js#L7).\n\n## Hooks firing order[​](#hooks-firing-order \"Direct link to heading\")\n\nThe diagram below shows the firing order for the most common hooks.\n\n***Note:** this list is not exhaustive.*\n\n``` text\n(1)\n  beforeBulkCreate(instances, options)\n  beforeBulkDestroy(options)\n  beforeBulkUpdate(options)\n(2)\n  beforeValidate(instance, options)\n\n[... validation happens ...]\n\n(3)\n  afterValidate(instance, options)\n  validationFailed(instance, options, error)\n(4)\n  beforeCreate(instance, options)\n  beforeDestroy(instance, options)\n  beforeUpdate(instance, options)\n  beforeSave(instance, options)\n  beforeUpsert(values, options)\n\n[... creation/update/destruction happens ...]\n\n(5)\n  afterCreate(instance, options)\n  afterDestroy(instance, options)\n  afterUpdate(instance, options)\n  afterSave(instance, options)\n  afterUpsert(created, options)\n(6)\n  afterBulkCreate(instances, options)\n  afterBulkDestroy(options)\n  afterBulkUpdate(options)\n```\n\n## Declaring Hooks[​](#declaring-hooks \"Direct link to heading\")\n\nArguments to hooks are passed by reference. This means, that you can change the values, and this will be reflected in the insert / update statement. A hook may contain async actions - in this case the hook function should return a promise.\n\nThere are currently three ways to programmatically add hooks:\n\n``` js\n// Method 1 via the .init() method\nclass User extends Model {}\nUser.init({\n  username: DataTypes.STRING,\n  mood: {\n    type: DataTypes.ENUM,\n    values: ['happy', 'sad', 'neutral']\n  }\n}, {\n  hooks: {\n    beforeValidate: (user, options) => {\n      user.mood = 'happy';\n    },\n    afterValidate: (user, options) => {\n      user.username = 'Toni';\n    }\n  },\n  sequelize\n});\n\n// Method 2 via the .addHook() method\nUser.addHook('beforeValidate', (user, options) => {\n  user.mood = 'happy';\n});\n\nUser.addHook('afterValidate', 'someCustomName', (user, options) => {\n  return Promise.reject(new Error(\"I'm afraid I can't let you do that!\"));\n});\n\n// Method 3 via the direct method\nUser.beforeCreate(async (user, options) => {\n  const hashedPassword = await hashPassword(user.password);\n  user.password = hashedPassword;\n});\n\nUser.afterValidate('myHookAfter', (user, options) => {\n  user.username = 'Toni';\n});\n```\n\n## Removing hooks[​](#removing-hooks \"Direct link to heading\")\n\nOnly a hook with name param can be removed.\n\n``` js\nclass Book extends Model {}\nBook.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nBook.addHook('afterCreate', 'notifyUsers', (book, options) => {\n  // ...\n});\n\nBook.removeHook('afterCreate', 'notifyUsers');\n```\n\nYou can have many hooks with same name. Calling `.removeHook()` will remove all of them.\n\n## Global / universal hooks[​](#global--universal-hooks \"Direct link to heading\")\n\nGlobal hooks are hooks that are run for all models. They are especially useful for plugins and can define behaviours that you want for all your models, for example to allow customization on timestamps using `sequelize.define` on your models:\n\n``` js\nconst User = sequelize.define('User', {}, {\n    tableName: 'users',\n    hooks : {\n        beforeCreate : (record, options) => {\n            record.dataValues.createdAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n            record.dataValues.updatedAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n        },\n        beforeUpdate : (record, options) => {\n            record.dataValues.updatedAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n        }\n    }\n});\n```\n\nThey can be defined in many ways, which have slightly different semantics:\n\n### Default Hooks (on Sequelize constructor options)[​](#default-hooks-on-sequelize-constructor-options \"Direct link to heading\")\n\n``` js\nconst sequelize = new Sequelize(..., {\n  define: {\n    hooks: {\n      beforeCreate() {\n        // Do stuff\n      }\n    }\n  }\n});\n```\n\nThis adds a default hook to all models, which is run if the model does not define its own `beforeCreate` hook:\n\n``` js\nconst User = sequelize.define('User', {});\nconst Project = sequelize.define('Project', {}, {\n  hooks: {\n    beforeCreate() {\n      // Do other stuff\n    }\n  }\n});\n\nawait User.create({});    // Runs the global hook\nawait Project.create({}); // Runs its own hook (because the global hook is overwritten)\n```\n\n### Permanent Hooks (with `sequelize.addHook`)[​](#permanent-hooks-with-sequelizeaddhook \"Direct link to heading\")\n\n``` js\nsequelize.addHook('beforeCreate', () => {\n  // Do stuff\n});\n```\n\nThis hook is always run, whether or not the model specifies its own `beforeCreate` hook. Local hooks are always run before global hooks:\n\n``` js\nconst User = sequelize.define('User', {});\nconst Project = sequelize.define('Project', {}, {\n  hooks: {\n    beforeCreate() {\n      // Do other stuff\n    }\n  }\n});\n\nawait User.create({});    // Runs the global hook\nawait Project.create({}); // Runs its own hook, followed by the global hook\n```\n\nPermanent hooks may also be defined in the options passed to the Sequelize constructor:\n\n``` js\nnew Sequelize(..., {\n  hooks: {\n    beforeCreate() {\n      // do stuff\n    }\n  }\n});\n```\n\nNote that the above is not the same as the *Default Hooks* mentioned above. That one uses the `define` option of the constructor. This one does not.\n\n### Connection Hooks[​](#connection-hooks \"Direct link to heading\")\n\nSequelize provides four hooks that are executed immediately before and after a database connection is obtained or released:\n\n- `sequelize.beforeConnect(callback)`\n  - The callback has the form `async (config) => /* ... */`\n- `sequelize.afterConnect(callback)`\n  - The callback has the form `async (connection, config) => /* ... */`\n- `sequelize.beforeDisconnect(callback)`\n  - The callback has the form `async (connection) => /* ... */`\n- `sequelize.afterDisconnect(callback)`\n  - The callback has the form `async (connection) => /* ... */`\n\nThese hooks can be useful if you need to asynchronously obtain database credentials, or need to directly access the low-level database connection after it has been created.\n\nFor example, we can asynchronously obtain a database password from a rotating token store, and mutate Sequelize's configuration object with the new credentials:\n\n``` js\nsequelize.beforeConnect(async (config) => {\n  config.password = await getAuthToken();\n});\n```\n\nThese hooks may *only* be declared as a permanent global hook, as the connection pool is shared by all models.\n\n## Instance hooks[​](#instance-hooks \"Direct link to heading\")\n\nThe following hooks will emit whenever you're editing a single object:\n\n- `beforeValidate`\n- `afterValidate` / `validationFailed`\n- `beforeCreate` / `beforeUpdate` / `beforeSave` / `beforeDestroy`\n- `afterCreate` / `afterUpdate` / `afterSave` / `afterDestroy`\n\n``` js\nUser.beforeCreate(user => {\n  if (user.accessLevel > 10 && user.username !== \"Boss\") {\n    throw new Error(\"You can't grant this user an access level above 10!\");\n  }\n});\n```\n\nThe following example will throw an error:\n\n``` js\ntry {\n  await User.create({ username: 'Not a Boss', accessLevel: 20 });\n} catch (error) {\n  console.log(error); // You can't grant this user an access level above 10!\n};\n```\n\nThe following example will be successful:\n\n``` js\nconst user = await User.create({ username: 'Boss', accessLevel: 20 });\nconsole.log(user); // user object with username 'Boss' and accessLevel of 20\n```\n\n### Model hooks[​](#model-hooks \"Direct link to heading\")\n\nSometimes you'll be editing more than one record at a time by using methods like `bulkCreate`, `update` and `destroy`. The following hooks will emit whenever you're using one of those methods:\n\n- `YourModel.beforeBulkCreate(callback)`\n  - The callback has the form `(instances, options) => /* ... */`\n- `YourModel.beforeBulkUpdate(callback)`\n  - The callback has the form `(options) => /* ... */`\n- `YourModel.beforeBulkDestroy(callback)`\n  - The callback has the form `(options) => /* ... */`\n- `YourModel.afterBulkCreate(callback)`\n  - The callback has the form `(instances, options) => /* ... */`\n- `YourModel.afterBulkUpdate(callback)`\n  - The callback has the form `(options) => /* ... */`\n- `YourModel.afterBulkDestroy(callback)`\n  - The callback has the form `(options) => /* ... */`\n\nNote: methods like `bulkCreate` do not emit individual hooks by default - only the bulk hooks. However, if you want individual hooks to be emitted as well, you can pass the `{ individualHooks: true }` option to the query call. However, this can drastically impact performance, depending on the number of records involved (since, among other things, all instances will be loaded into memory). Examples:\n\n``` js\nawait Model.destroy({\n  where: { accessLevel: 0 },\n  individualHooks: true\n});\n// This will select all records that are about to be deleted and emit `beforeDestroy` and `afterDestroy` on each instance.\n\nawait Model.update({ username: 'Tony' }, {\n  where: { accessLevel: 0 },\n  individualHooks: true\n});\n// This will select all records that are about to be updated and emit `beforeUpdate` and `afterUpdate` on each instance.\n```\n\nIf you use `Model.bulkCreate(...)` with the `updateOnDuplicate` option, changes made in the hook to fields that aren't given in the `updateOnDuplicate` array will not be persisted to the database. However it is possible to change the `updateOnDuplicate` option inside the hook if this is what you want.\n\n``` js\nUser.beforeBulkCreate((users, options) => {\n  for (const user of users) {\n    if (user.isMember) {\n      user.memberSince = new Date();\n    }\n  }\n\n  // Add `memberSince` to updateOnDuplicate otherwise it won't be persisted\n  if (options.updateOnDuplicate && !options.updateOnDuplicate.includes('memberSince')) {\n    options.updateOnDuplicate.push('memberSince');\n  }\n});\n\n// Bulk updating existing users with updateOnDuplicate option\nawait Users.bulkCreate([\n  { id: 1, isMember: true },\n  { id: 2, isMember: false }\n], {\n  updateOnDuplicate: ['isMember']\n});\n```\n\n## Associations[​](#associations \"Direct link to heading\")\n\nFor the most part hooks will work the same for instances when being associated.\n\n### One-to-One and One-to-Many associations[​](#one-to-one-and-one-to-many-associations \"Direct link to heading\")\n\n- When using `add`/`set` mixin methods the `beforeUpdate` and `afterUpdate` hooks will run.\n\n- The `beforeDestroy` and `afterDestroy` hooks will only be called on associations that have `onDelete: 'CASCADE'` and `hooks: true`. For example:\n\n``` js\nclass Projects extends Model {}\nProjects.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nclass Tasks extends Model {}\nTasks.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nProjects.hasMany(Tasks, { onDelete: 'CASCADE', hooks: true });\nTasks.belongsTo(Projects);\n```\n\nThis code will run `beforeDestroy` and `afterDestroy` hooks on the Tasks model.\n\nSequelize, by default, will try to optimize your queries as much as possible. When calling cascade on delete, Sequelize will simply execute:\n\n``` sql\nDELETE FROM `table` WHERE associatedIdentifier = associatedIdentifier.primaryKey\n```\n\nHowever, adding `hooks: true` explicitly tells Sequelize that optimization is not of your concern. Then, Sequelize will first perform a `SELECT` on the associated objects and destroy each instance, one by one, in order to be able to properly call the hooks (with the right parameters).\n\n### Many-to-Many associations[​](#many-to-many-associations \"Direct link to heading\")\n\n- When using `add` mixin methods for `belongsToMany` relationships (that will add one or more records to the junction table) the `beforeBulkCreate` and `afterBulkCreate` hooks in the junction model will run.\n\n  - If `{ individualHooks: true }` was passed to the call, then each individual hook will also run.\n\n- When using `remove` mixin methods for `belongsToMany` relationships (that will remove one or more records to the junction table) the `beforeBulkDestroy` and `afterBulkDestroy` hooks in the junction model will run.\n\n  - If `{ individualHooks: true }` was passed to the call, then each individual hook will also run.\n\nIf your association is Many-to-Many, you may be interested in firing hooks on the through model when using the `remove` call. Internally, sequelize is using `Model.destroy` resulting in calling the `bulkDestroy` instead of the `before/afterDestroy` hooks on each through instance.\n\n## Hooks and Transactions[​](#hooks-and-transactions \"Direct link to heading\")\n\nMany model operations in Sequelize allow you to specify a transaction in the options parameter of the method. If a transaction *is* specified in the original call, it will be present in the options parameter passed to the hook function. For example, consider the following snippet:\n\n``` js\nUser.addHook('afterCreate', async (user, options) => {\n  // We can use `options.transaction` to perform some other call\n  // using the same transaction of the call that triggered this hook\n  await User.update({ mood: 'sad' }, {\n    where: {\n      id: user.id\n    },\n    transaction: options.transaction\n  });\n});\n\nawait sequelize.transaction(async t => {\n  await User.create({\n    username: 'someguy',\n    mood: 'happy'\n  }, {\n    transaction: t\n  });\n});\n```\n\nIf we had not included the transaction option in our call to `User.update` in the preceding code, no change would have occurred, since our newly created user does not exist in the database until the pending transaction has been committed.\n\n### Internal Transactions[​](#internal-transactions \"Direct link to heading\")\n\nIt is very important to recognize that sequelize may make use of transactions internally for certain operations such as `Model.findOrCreate`. If your hook functions execute read or write operations that rely on the object's presence in the database, or modify the object's stored values like the example in the preceding section, you should always specify `{ transaction: options.transaction }`:\n\n- If a transaction was used, then `{ transaction: options.transaction }` will ensure it is used again;\n- Otherwise, `{ transaction: options.transaction }` will be equivalent to `{ transaction: undefined }`, which won't use a transaction (which is ok).\n\nThis way your hooks will always behave correctly.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/hooks/](https://sequelize.org/docs/v6/other-topics/hooks/)"
- name: HostNotFoundError
  id: class/src/errors/connection/host-not-found-error.ts~hostnotfounderror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# HostNotFoundError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → HostNotFoundError\n\nThrown when a connection to a database has a hostname that was not found\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/host-not-found-error.ts~HostNotFoundError.html](https://sequelize.org/api/v6/class/src/errors/connection/host-not-found-error.ts~HostNotFoundError.html)"
- name: HostNotReachableError
  id: class/src/errors/connection/host-not-reachable-error.ts~hostnotreachableerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# HostNotReachableError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → HostNotReachableError\n\nThrown when a connection to a database has a hostname that was not reachable\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/host-not-reachable-error.ts~HostNotReachableError.html](https://sequelize.org/api/v6/class/src/errors/connection/host-not-reachable-error.ts~HostNotReachableError.html)"
- name: HSTORE
  id: class/src/data-types.js~hstore
  summary: A key / value store column
  description: "# HSTORE\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → HSTORE\n\nA key / value store column. Only available in Postgres.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~HSTORE.html](https://sequelize.org/api/v6/class/src/data-types.js~HSTORE.html)"
- name: Indexes
  id: other-topics/indexes/index
  summary: Sequelize supports adding indexes to the model definition which will be created on sequelize.sync()
  description: "# Indexes\n\nSequelize supports adding indexes to the model definition which will be created on [`sequelize.sync()`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-sync).\n\n``` js\nconst User = sequelize.define('User', { /* attributes */ }, {\n  indexes: [\n    // Create a unique index on email\n    {\n      unique: true,\n      fields: ['email']\n    },\n\n    // Creates a gin index on data with the jsonb_path_ops operator\n    {\n      fields: ['data'],\n      using: 'gin',\n      operator: 'jsonb_path_ops'\n    },\n\n    // By default index name will be [table]_[fields]\n    // Creates a multi column partial index\n    {\n      name: 'public_by_author',\n      fields: ['author', 'status'],\n      where: {\n        status: 'public'\n      }\n    },\n\n    // A BTREE index with an ordered field\n    {\n      name: 'title_index',\n      using: 'BTREE',\n      fields: [\n        'author',\n        {\n          name: 'title',\n          collate: 'en_US',\n          order: 'DESC',\n          length: 5\n        }\n      ]\n    }\n  ]\n});\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/indexes/](https://sequelize.org/docs/v6/other-topics/indexes/)"
- name: INET
  id: class/src/data-types.js~inet
  summary: The INET type holds an IPv4 or IPv6 host address, and optionally its subnet
  description: "# INET\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → INET\n\nThe INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n\nOnly available for Postgres\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~INET.html](https://sequelize.org/api/v6/class/src/data-types.js~INET.html)"
- name: InstanceError
  id: class/src/errors/instance-error.ts~instanceerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# InstanceError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → InstanceError\n\nThrown when a some problem occurred with Instance methods (see message for details)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/instance-error.ts~InstanceError.html](https://sequelize.org/api/v6/class/src/errors/instance-error.ts~InstanceError.html)"
- name: INTEGER
  id: class/src/data-types.js~integer
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# INTEGER\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → INTEGER\n\n#### Direct Subclass:\n\n[BIGINT](data-types.js~bigint), [MEDIUMINT](data-types.js~mediumint), [SMALLINT](data-types.js~smallint), [TINYINT](data-types.js~tinyint)\n\nA 32 bit integer\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~INTEGER.html](https://sequelize.org/api/v6/class/src/data-types.js~INTEGER.html)"
- name: InvalidConnectionError
  id: class/src/errors/connection/invalid-connection-error.ts~invalidconnectionerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# InvalidConnectionError\n\n#### Extends:\n\nimport_connection_error~import_connection_error.default → InvalidConnectionError\n\nThrown when a connection to a database has invalid values for any of the connection parameters\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/connection/invalid-connection-error.ts~InvalidConnectionError.html](https://sequelize.org/api/v6/class/src/errors/connection/invalid-connection-error.ts~InvalidConnectionError.html)"
- name: JSONB
  id: class/src/data-types.js~jsonb
  summary: A binary storage JSON column
  description: "# JSONB\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [JSONTYPE](data-types.js~jsontype) → JSONB\n\nA binary storage JSON column. Only available in Postgres.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~JSONB.html](https://sequelize.org/api/v6/class/src/data-types.js~JSONB.html)"
- name: JSONTYPE
  id: class/src/data-types.js~jsontype
  summary: A JSON string column
  description: "# JSONTYPE\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → JSONTYPE\n\n#### Direct Subclass:\n\n[JSONB](data-types.js~jsonb)\n\nA JSON string column. Available in MySQL, Postgres and SQLite\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~JSONTYPE.html](https://sequelize.org/api/v6/class/src/data-types.js~JSONTYPE.html)"
- name: Legal Notice
  id: other-topics/legal/index
  summary: Sequelize library is distributed with MIT license
  description: "# Legal Notice\n\n## License[​](#license \"Direct link to heading\")\n\nSequelize library is distributed with MIT license. You can find original license [here.](https://github.com/sequelize/sequelize/blob/main/LICENSE)\n\n``` text\nMIT License\n\nCopyright (c) 2014-present Sequelize contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## AUTHOR(S)[​](#authors \"Direct link to heading\")\n\n``` text\nMain author:\n\nSascha Depold\nUhlandstr. 160\n10719 Berlin\nsascha [at] depold [dot] com\n[plus] 49 152 [slash] 03878582\n```\n\n## INHALTLICHE VERANTWORTUNG[​](#inhaltliche-verantwortung \"Direct link to heading\")\n\n``` text\nIch übernehme keine Haftung für ausgehende Links.\nDaher musst du dich bei Problemen an deren Betreiber wenden!\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/legal/](https://sequelize.org/docs/v6/other-topics/legal/)"
- name: MACADDR
  id: class/src/data-types.js~macaddr
  summary: The MACADDR type stores MAC addresses
  description: "# MACADDR\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → MACADDR\n\nThe MACADDR type stores MAC addresses. Takes 6 bytes\n\nOnly available for Postgres\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~MACADDR.html](https://sequelize.org/api/v6/class/src/data-types.js~MACADDR.html)"
- name: MEDIUMINT
  id: class/src/data-types.js~mediumint
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# MEDIUMINT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → [INTEGER](data-types.js~integer) → MEDIUMINT\n\nA 24 bit integer\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~MEDIUMINT.html](https://sequelize.org/api/v6/class/src/data-types.js~MEDIUMINT.html)"
- name: Migrations
  id: other-topics/migrations/index
  summary: Just like you use version control systems such as Git to manage changes in your source code, you can use migrations to keep track of changes to the database
  description: "# Migrations\n\nJust like you use [version control](https://en.wikipedia.org/wiki/Version_control) systems such as [Git](https://en.wikipedia.org/wiki/Git) to manage changes in your source code, you can use **migrations** to keep track of changes to the database. With migrations you can transfer your existing database into another state and vice versa: Those state transitions are saved in migration files, which describe how to get to the new state and how to revert the changes in order to get back to the old state.\n\nYou will need the [Sequelize Command-Line Interface (CLI)](https://github.com/sequelize/cli). The CLI ships support for migrations and project bootstrapping.\n\nA Migration in Sequelize is a javascript file which exports two functions, `up` and `down`, that dictates how to perform the migration and undo it. You define those functions manually, but you don't call them manually; they will be called automatically by the CLI. In these functions, you should simply perform whatever queries you need, with the help of `sequelize.query` and whichever other methods Sequelize provides to you. There is no extra magic beyond that.\n\n## Installing the CLI[​](#installing-the-cli \"Direct link to heading\")\n\nTo install the Sequelize CLI:\n\n``` text\nnpm install --save-dev sequelize-cli\n```\n\nFor details see the [CLI GitHub repository](https://github.com/sequelize/cli).\n\n## Project bootstrapping[​](#project-bootstrapping \"Direct link to heading\")\n\nTo create an empty project you will need to execute `init` command\n\n``` text\nnpx sequelize-cli init\n```\n\nThis will create following folders\n\n- `config`, contains config file, which tells CLI how to connect with database\n- `models`, contains all models for your project\n- `migrations`, contains all migration files\n- `seeders`, contains all seed files\n\n### Configuration[​](#configuration \"Direct link to heading\")\n\nBefore continuing further we will need to tell the CLI how to connect to the database. To do that let's open default config file `config/config.json`. It looks something like this:\n\n``` json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\nNote that the Sequelize CLI assumes mysql by default. If you're using another dialect, you need to change the content of the `\"dialect\"` option.\n\nNow edit this file and set correct database credentials and dialect. The keys of the objects (e.g. \"development\") are used on `model/index.js` for matching `process.env.NODE_ENV` (When undefined, \"development\" is a default value).\n\nSequelize will use the default connection port for each dialect (for example, for postgres, it is port 5432). If you need to specify a different port, use the `\"port\"` field (it is not present by default in `config/config.js` but you can simply add it).\n\n**Note:** *If your database doesn't exist yet, you can just call `db:create` command. With proper access it will create that database for you.*\n\n## Creating the first Model (and Migration)[​](#creating-the-first-model-and-migration \"Direct link to heading\")\n\nOnce you have properly configured CLI config file you are ready to create your first migration. It's as simple as executing a simple command.\n\nWe will use `model:generate` command. This command requires two options:\n\n- `name`: the name of the model;\n- `attributes`: the list of model attributes.\n\nLet's create a model named `User`.\n\n``` text\nnpx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n```\n\nThis will:\n\n- Create a model file `user` in `models` folder;\n- Create a migration file with name like `XXXXXXXXXXXXXX-create-user.js` in `migrations` folder.\n\n**Note:** *Sequelize will only use Model files, it's the table representation. On the other hand, the migration file is a change in that model or more specifically that table, used by CLI. Treat migrations like a commit or a log for some change in database.*\n\n## Running Migrations[​](#running-migrations \"Direct link to heading\")\n\nUntil this step, we haven't inserted anything into the database. We have just created the required model and migration files for our first model, `User`. Now to actually create that table in the database you need to run `db:migrate` command.\n\n``` text\nnpx sequelize-cli db:migrate\n```\n\nThis command will execute these steps:\n\n- Will ensure a table called `SequelizeMeta` in database. This table is used to record which migrations have run on the current database\n- Start looking for any migration files which haven't run yet. This is possible by checking `SequelizeMeta` table. In this case it will run `XXXXXXXXXXXXXX-create-user.js` migration, which we created in last step.\n- Creates a table called `Users` with all columns as specified in its migration file.\n\n## Undoing Migrations[​](#undoing-migrations \"Direct link to heading\")\n\nNow our table has been created and saved in the database. With migration you can revert to old state by just running a command.\n\nYou can use `db:migrate:undo`, this command will revert most the recent migration.\n\n``` text\nnpx sequelize-cli db:migrate:undo\n```\n\nYou can revert back to the initial state by undoing all migrations with the `db:migrate:undo:all` command. You can also revert back to a specific migration by passing its name with the `--to` option.\n\n``` text\nnpx sequelize-cli db:migrate:undo:all --to XXXXXXXXXXXXXX-create-posts.js\n```\n\n## Creating the first Seed[​](#creating-the-first-seed \"Direct link to heading\")\n\nSuppose we want to insert some data into a few tables by default. If we follow up on the previous example we can consider creating a demo user for the `User` table.\n\nTo manage all data migrations you can use seeders. Seed files are some change in data that can be used to populate database tables with sample or test data.\n\nLet's create a seed file which will add a demo user to our `User` table.\n\n``` text\nnpx sequelize-cli seed:generate --name demo-user\n```\n\nThis command will create a seed file in `seeders` folder. File name will look something like `XXXXXXXXXXXXXX-demo-user.js`. It follows the same `up / down` semantics as the migration files.\n\nNow we should edit this file to insert demo user to `User` table.\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Users', [{\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'example@example.com',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }]);\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Users', null, {});\n  }\n};\n```\n\n## Running Seeds[​](#running-seeds \"Direct link to heading\")\n\nIn last step you created a seed file; however, it has not been committed to the database. To do that we run a simple command.\n\n``` text\nnpx sequelize-cli db:seed:all\n```\n\nThis will execute that seed file and a demo user will be inserted into the `User` table.\n\n**Note:** *Seeder execution history is not stored anywhere, unlike migrations, which use the `SequelizeMeta` table. If you wish to change this behavior, please read the `Storage` section.*\n\n## Undoing Seeds[​](#undoing-seeds \"Direct link to heading\")\n\nSeeders can be undone if they are using any storage. There are two commands available for that:\n\nIf you wish to undo the most recent seed:\n\n``` text\nnpx sequelize-cli db:seed:undo\n```\n\nIf you wish to undo a specific seed:\n\n``` text\nnpx sequelize-cli db:seed:undo --seed name-of-seed-as-in-data\n```\n\nIf you wish to undo all seeds:\n\n``` text\nnpx sequelize-cli db:seed:undo:all\n```\n\n## Migration Skeleton[​](#migration-skeleton \"Direct link to heading\")\n\nThe following skeleton shows a typical migration file.\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    // logic for transforming into the new state\n  },\n  down: (queryInterface, Sequelize) => {\n    // logic for reverting the changes\n  }\n}\n```\n\nWe can generate this file using `migration:generate`. This will create `xxx-migration-skeleton.js` in your migration folder.\n\n``` text\nnpx sequelize-cli migration:generate --name migration-skeleton\n```\n\nThe passed `queryInterface` object can be used to modify the database. The `Sequelize` object stores the available data types such as `STRING` or `INTEGER`. Function `up` or `down` should return a `Promise`. Let's look at an example:\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n};\n```\n\nThe following is an example of a migration that performs two changes in the database, using an automatically-managed transaction to ensure that all instructions are successfully executed or rolled back in case of failure:\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.addColumn('Person', 'petName', {\n          type: Sequelize.DataTypes.STRING\n        }, { transaction: t }),\n        queryInterface.addColumn('Person', 'favoriteColor', {\n          type: Sequelize.DataTypes.STRING,\n        }, { transaction: t })\n      ]);\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.removeColumn('Person', 'petName', { transaction: t }),\n        queryInterface.removeColumn('Person', 'favoriteColor', { transaction: t })\n      ]);\n    });\n  }\n};\n```\n\nThe next example is of a migration that has a foreign key. You can use references to specify a foreign key:\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false\n      },\n      userId: {\n        type: Sequelize.DataTypes.INTEGER,\n        references: {\n          model: {\n            tableName: 'users',\n            schema: 'schema'\n          },\n          key: 'id'\n        },\n        allowNull: false\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n}\n```\n\nThe next example is of a migration that uses async/await where you create an unique index on a new column, with a manually-managed transaction:\n\n``` js\nmodule.exports = {\n  async up(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.addColumn(\n        'Person',\n        'petName',\n        {\n          type: Sequelize.DataTypes.STRING,\n        },\n        { transaction }\n      );\n      await queryInterface.addIndex(\n        'Person',\n        'petName',\n        {\n          fields: 'petName',\n          unique: true,\n          transaction,\n        }\n      );\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n  async down(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.removeColumn('Person', 'petName', { transaction });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  }\n};\n```\n\nThe next example is of a migration that creates an unique index composed of multiple fields with a condition, which allows a relation to exist multiple times but only one can satisfy the condition:\n\n``` js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      bool: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false\n      }\n    }).then((queryInterface, Sequelize) => {\n      queryInterface.addIndex(\n        'Person',\n        ['name', 'bool'],\n        {\n          indicesType: 'UNIQUE',\n          where: { bool : 'true' },\n        }\n      );\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n}\n```\n\n### The `.sequelizerc` file[​](#the-sequelizerc-file \"Direct link to heading\")\n\nThis is a special configuration file. It lets you specify the following options that you would usually pass as arguments to CLI:\n\n- `env`: The environment to run the command in\n- `config`: The path to the config file\n- `options-path`: The path to a JSON file with additional options\n- `migrations-path`: The path to the migrations folder\n- `seeders-path`: The path to the seeders folder\n- `models-path`: The path to the models folder\n- `url`: The database connection string to use. Alternative to using --config files\n- `debug`: When available show various debug information\n\nSome scenarios where you can use it:\n\n- You want to override default path to `migrations`, `models`, `seeders` or `config` folder.\n- You want to rename `config.json` to something else like `database.json`\n\nAnd a whole lot more. Let's see how you can use this file for custom configuration.\n\nTo begin, let's create the `.sequelizerc` file in the root directory of your project, with the following content:\n\n``` js\n// .sequelizerc\n\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'database.json'),\n  'models-path': path.resolve('db', 'models'),\n  'seeders-path': path.resolve('db', 'seeders'),\n  'migrations-path': path.resolve('db', 'migrations')\n};\n```\n\nWith this config you are telling the CLI to:\n\n- Use `config/database.json` file for config settings;\n- Use `db/models` as models folder;\n- Use `db/seeders` as seeders folder;\n- Use `db/migrations` as migrations folder.\n\n### Dynamic configuration[​](#dynamic-configuration \"Direct link to heading\")\n\nThe configuration file is by default a JSON file called `config.json`. But sometimes you need a dynamic configuration, for example to access environment variables or execute some other code to determine the configuration.\n\nThankfully, the Sequelize CLI can read from both `.json` and `.js` files. This can be setup with `.sequelizerc` file. You just have to provide the path to your `.js` file as the `config` option of your exported object:\n\n``` js\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'config.js')\n}\n```\n\nNow the Sequelize CLI will load `config/config.js` for getting configuration options.\n\nAn example of `config/config.js` file:\n\n``` js\nconst fs = require('fs');\n\nmodule.exports = {\n  development: {\n    username: 'database_dev',\n    password: 'database_dev',\n    database: 'database_dev',\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  test: {\n    username: process.env.CI_DB_USERNAME,\n    password: process.env.CI_DB_PASSWORD,\n    database: process.env.CI_DB_NAME,\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  production: {\n    username: process.env.PROD_DB_USERNAME,\n    password: process.env.PROD_DB_PASSWORD,\n    database: process.env.PROD_DB_NAME,\n    host: process.env.PROD_DB_HOSTNAME,\n    port: process.env.PROD_DB_PORT,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n      ssl: {\n        ca: fs.readFileSync(__dirname + '/mysql-ca-main.crt')\n      }\n    }\n  }\n};\n```\n\nThe example above also shows how to add custom dialect options to the configuration.\n\n### Using Babel[​](#using-babel \"Direct link to heading\")\n\nTo enable more modern constructions in your migrations and seeders, you can simply install `babel-register` and require it at the beginning of `.sequelizerc`:\n\n``` text\nnpm i --save-dev babel-register\n```\n\n``` js\n// .sequelizerc\n\nrequire(\"babel-register\");\n\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'config.json'),\n  'models-path': path.resolve('models'),\n  'seeders-path': path.resolve('seeders'),\n  'migrations-path': path.resolve('migrations')\n}\n```\n\nOf course, the outcome will depend upon your babel configuration (such as in a `.babelrc` file). Learn more at [babeljs.io](https://babeljs.io).\n\n### Security tip[​](#security-tip \"Direct link to heading\")\n\nUse environment variables for config settings. This is because secrets such as passwords should never be part of the source code (and especially not committed to version control).\n\n### Storage[​](#storage \"Direct link to heading\")\n\nThere are three types of storage that you can use: `sequelize`, `json`, and `none`.\n\n- `sequelize` : stores migrations and seeds in a table on the sequelize database\n- `json` : stores migrations and seeds on a json file\n- `none` : does not store any migration/seed\n\n#### Migration Storage[​](#migration-storage \"Direct link to heading\")\n\nBy default the CLI will create a table in your database called `SequelizeMeta` containing an entry for each executed migration. To change this behavior, there are three options you can add to the configuration file. Using `migrationStorage`, you can choose the type of storage to be used for migrations. If you choose `json`, you can specify the path of the file using `migrationStoragePath` or the CLI will write to the file `sequelize-meta.json`. If you want to keep the information in the database, using `sequelize`, but want to use a different table, you can change the table name using `migrationStorageTableName`. Also you can define a different schema for the `SequelizeMeta` table by providing the `migrationStorageTableSchema` property.\n\n``` json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n\n    // Use a different storage type. Default: sequelize\n    \"migrationStorage\": \"json\",\n\n    // Use a different file name. Default: sequelize-meta.json\n    \"migrationStoragePath\": \"sequelizeMeta.json\",\n\n    // Use a different table name. Default: SequelizeMeta\n    \"migrationStorageTableName\": \"sequelize_meta\",\n\n    // Use a different schema for the SequelizeMeta table\n    \"migrationStorageTableSchema\": \"custom_schema\"\n  }\n}\n```\n\n**Note:** *The `none` storage is not recommended as a migration storage. If you decide to use it, be aware of the implications of having no record of what migrations did or didn't run.*\n\n#### Seed Storage[​](#seed-storage \"Direct link to heading\")\n\nBy default the CLI will not save any seed that is executed. If you choose to change this behavior (!), you can use `seederStorage` in the configuration file to change the storage type. If you choose `json`, you can specify the path of the file using `seederStoragePath` or the CLI will write to the file `sequelize-data.json`. If you want to keep the information in the database, using `sequelize`, you can specify the table name using `seederStorageTableName`, or it will default to `SequelizeData`.\n\n``` json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    // Use a different storage. Default: none\n    \"seederStorage\": \"json\",\n    // Use a different file name. Default: sequelize-data.json\n    \"seederStoragePath\": \"sequelizeData.json\",\n    // Use a different table name. Default: SequelizeData\n    \"seederStorageTableName\": \"sequelize_data\"\n  }\n}\n```\n\n### Configuration Connection String[​](#configuration-connection-string \"Direct link to heading\")\n\nAs an alternative to the `--config` option with configuration files defining your database, you can use the `--url` option to pass in a connection string. For example:\n\n``` text\nnpx sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n```\n\nIf utilizing `package.json` scripts with npm, make sure to use the extra `--` in your command when using flags. For example:\n\n``` json\n// package.json\n\n...\n  \"scripts\": {\n    \"migrate:up\": \"npx sequelize-cli db:migrate\",\n    \"migrate:undo\": \"npx sequelize-cli db:migrate:undo\"\n  },\n...\n```\n\nUse the command like so: `npm run migrate:up -- --url <url>`\n\n### Programmatic usage[​](#programmatic-usage \"Direct link to heading\")\n\nSequelize has a sister library called [umzug](https://github.com/sequelize/umzug) for programmatically handling execution and logging of migration tasks.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/migrations/](https://sequelize.org/docs/v6/other-topics/migrations/)"
- name: Model
  id: class/src/model.js~model
  summary: A Model represents a table in the database
  description: "# Model\n\nA Model represents a table in the database. Instances of this class represent a database row.\n\nModel instances operate with the concept of a `dataValues` property, which stores the actual values represented by the instance. By default, the values from dataValues can also be accessed directly from the Instance, that is:\n\n``` lang-js\ninstance.field\n// is the same as\ninstance.get('field')\n// is the same as\ninstance.getDataValue('field')\n```\n\nHowever, if getters and/or setters are defined for `field` they will be invoked, instead of returning the value from `dataValues`. Accessing properties directly or using `get` is preferred for regular use, `getDataValue` should only be used for custom getters.\n\n#### See:\n\n- [Sequelize#define](sequelize.js~sequelize#instance-method-define) for more information about getters and setters\n\n## Static Method Summary\n\n[TABLE]\n\n## Constructor Summary\n\n[TABLE]\n\n## Member Summary\n\n[TABLE]\n\n## Method Summary\n\n[TABLE]\n\n## Static Public Methods\n\n### public static addScope(name: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), scope: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object))  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1523) \n\nAdd a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.\n\nBy default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.\n\n#### Params:\n\n[TABLE]\n\n### public static async aggregate(attribute: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), aggregateFunction: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[DataTypes](../../variable/index#static-variable-DataTypes)\\|[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2003) \n\nRun an aggregation method on the specified field\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                                                       |                                                                                                                                               |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[DataTypes](../../variable/index#static-variable-DataTypes)\\|[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\\> | Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in which case the complete data result is returned. |\n\n### public static belongsTo(target: [Model](model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [BelongsTo](associations/belongs-to.js~belongsto)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4590) \n\nCreates an association between this (the source) and the provided target. The foreign key is added on the source.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                   |\n|---------------------------------------------------|\n| [BelongsTo](associations/belongs-to.js~belongsto) |\n\n#### Example:\n\n``` prettyprint\nProfile.belongsTo(User) // This will add userId to the profile table\n```\n\n### public static belongsToMany(target: [Model](model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [BelongsToMany](associations/belongs-to-many.js~belongstomany)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4549) \n\nCreate an N:M association with a join table. Defining `through` is required.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                |\n|----------------------------------------------------------------|\n| [BelongsToMany](associations/belongs-to-many.js~belongstomany) |\n\n#### Example:\n\n``` prettyprint\n// Automagically generated join model\nUser.belongsToMany(Project, { through: 'UserProjects' })\nProject.belongsToMany(User, { through: 'UserProjects' })\n\n// Join model with additional attributes\nconst UserProjects = sequelize.define('UserProjects', {\n  started: Sequelize.BOOLEAN\n})\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })\n```\n\n### public static build(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Model](model.js~model) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2225) \n\nBuilds a new model instance.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                       |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Model](model.js~model) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\> |\n\n### public static async bulkCreate(records: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2610) \n\nCreate and insert multiple instances in bulk.\n\nThe success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records. To obtain Instances for the newly created values, you will need to query for them again.\n\nIf validation fails, the promise is rejected with an array-like AggregateError\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                   |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>\\> |\n\n### public static async count(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2075) \n\nCount the number of records matching the provided where clause.\n\nIf you provide an `include` option, the number of matching associations will be counted instead.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> |\n\n### public static async create(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2277) \n\nBuilds a new model instance and calls save on it.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### See:\n\n- [Model.build](model.js~model#static-method-build)\n- [Model.save](model.js~model#instance-method-save)\n\n### public static async decrement(fields: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\[\\], ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  since 4.36.0 [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3488) \n\nDecrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a `sql SET column = column - X WHERE foo = 'bar'` query. To get the correct value after a decrement into the Instance you should do a reload.\n\n#### Params:\n\n| Name    | Type                                                                                                                                                                                                                                                                                                      | Attribute | Description                                                                                                                                                                                                                     |\n|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| fields  | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given. |\n| options | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)                                                                                                                                                                                                         |           | decrement options, similar to increment                                                                                                                                                                                         |\n\n#### Return:\n\n|                                                                                                                                                                                                                                        |                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\[\\], ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> | returns an array of affected rows and affected count with `options.returning` true, whenever supported by dialect |\n\n#### Example:\n\ndecrement number by 1\n\n``` prettyprint\nModel.decrement('number', { where: { foo: 'bar' });\n```\n\ndecrement number and count by 2\n\n``` prettyprint\nModel.decrement(['number', 'count'], { by: 2, where: { foo: 'bar' } });\n```\n\ndecrement answer by 42, and decrement tries by -1\n\n``` prettyprint\n// `by` is ignored, since each column has its own value\nModel.decrement({ answer: 42, tries: -1}, { by: 2, where: { foo: 'bar' } });\n```\n\n#### See:\n\n- [Model.increment](model.js~model#static-method-increment)\n- [Model#reload](model.js~model#instance-method-reload)\n\n### public static async describe(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3310) \n\nRun a describe query on the table.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |                                    |\n|-----------------------------------------------------------------------------------------------------|------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) | hash of attributes and their types |\n\n### public static async destroy(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2972) \n\nDelete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |                              |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> | The number of destroyed rows |\n\n### public static async drop(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1447) \n\nDrop the table represented by this Model\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public static async findAll(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1744) \n\nSearch for multiple instances.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                   |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>\\> |\n\n#### Example:\n\nSimple search using AND and =\n\n``` prettyprint\nModel.findAll({\n  where: {\n    attr1: 42,\n    attr2: 'cake'\n  }\n})\n\n# WHERE attr1 = 42 AND attr2 = 'cake'\n```\n\nUsing greater than, less than etc.\n\n``` prettyprint\nconst {gt, lte, ne, in: opIn} = Sequelize.Op;\n\nModel.findAll({\n  where: {\n    attr1: {\n      [gt]: 50\n    },\n    attr2: {\n      [lte]: 45\n    },\n    attr3: {\n      [opIn]: [1,2,3]\n    },\n    attr4: {\n      [ne]: 5\n    }\n  }\n})\n\n# WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5\n```\n\nQueries using OR\n\n``` prettyprint\nconst {or, and, gt, lt} = Sequelize.Op;\n\nModel.findAll({\n  where: {\n    name: 'a project',\n    [or]: [\n      {id: [1, 2, 3]},\n      {\n        [and]: [\n          {id: {[gt]: 10}},\n          {id: {[lt]: 100}}\n        ]\n      }\n    ]\n  }\n});\n\n# WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));\n```\n\n#### See:\n\n- Operators for possible operators \\_\\_Alias\\_\\_: \\_all\\_ The promise is resolved with an array of Model instances if the query succeeds.\\_\n- [Sequelize#query](sequelize.js~sequelize#instance-method-query)\n\n### public static async findAndCountAll(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<{count: number\\|number\\[\\], rows: Model\\[\\]}\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2147) \n\nFind all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                     |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<{count: number\\|number\\[\\], rows: Model\\[\\]}\\> |\n\n#### Example:\n\n``` prettyprint\nconst result = await Model.findAndCountAll({\n  where: ...,\n  limit: 12,\n  offset: 12\n});\n\n# In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.\n\n# When you add includes, only those which are required (either because they have a where clause, or because `required` is explicitly set to true on the include) will be added to the count part.\n\n# Suppose you want to find all users who have a profile attached:\n\nUser.findAndCountAll({\n  include: [\n     { model: Profile, required: true}\n  ],\n  limit: 3\n});\n\n# Because the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted\n```\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for a specification of find and query options\n- [Model.count](model.js~model#static-method-count) for a specification of count options\n\n### public static async findByPk(param: [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| Buffer, options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1929) \n\nSearch for a single instance by its primary key.\\_\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for a full explanation of options, Note that options.where is not supported.\n\n### public static async findCreateFind(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2454) \n\nA more performant findOrCreate that may not work under a transaction (working in postgres) Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\> |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for a full specification of find and options\n\n### public static async findOne(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\|[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1962) \n\nSearch for a single instance. Returns the first instance found, or null if none can be found.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\|[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\\> |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for an explanation of options\n\n### public static async findOrBuild(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2300) \n\nFind a row that matches the query, or build (but don't save) the row if none is found. The successful result of the promise will be (instance, built)\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\> |\n\n### public static async findOrCreate(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2343) \n\nFind a row that matches the query, or build and save the row if none is found The successful result of the promise will be (instance, created)\n\nIf no transaction is passed in the `options` object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call. However, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize. TimeoutError will be thrown instead. If a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model), [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\> |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for a full specification of find and options\n\n### public static getAttributes(): [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| any  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber320) \n\nReturns the attributes of the model.\n\n#### Return:\n\n|                                                                                                          |\n|----------------------------------------------------------------------------------------------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| any |\n\n### public static getTableName(): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1500) \n\nGet the table name of the model, taking schema into account. The method will return The name as a string if the model has no schema, or an object with `tableName`, `schema` and `delimiter` properties.\n\n#### Return:\n\n|                                                                                                                                                                                                        |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |\n\n### public static hasMany(target: [Model](model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [HasMany](associations/has-many.js~hasmany)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4513) \n\nCreates a 1:m association between this (the source) and the provided target. The foreign key is added on the target.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                             |\n|---------------------------------------------|\n| [HasMany](associations/has-many.js~hasmany) |\n\n#### Example:\n\n``` prettyprint\nUser.hasMany(Profile) // This will add userId to the profile table\n```\n\n### public static hasOne(target: [Model](model.js~model), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [HasOne](associations/has-one.js~hasone)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4570) \n\nCreates an association between this (the source) and the provided target. The foreign key is added on the target.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                          |\n|------------------------------------------|\n| [HasOne](associations/has-one.js~hasone) |\n\n#### Example:\n\n``` prettyprint\nUser.hasOne(Profile) // This will add userId to the profile table\n```\n\n### public static async increment(fields: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\[\\], ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3380) \n\nIncrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a `SET column = column + X WHERE foo = 'bar'` query. To get the correct value after an increment into the Instance you should do a reload.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                        |                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\[\\], ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> | returns an array of affected rows and affected count with `options.returning` true, whenever supported by dialect |\n\n#### Example:\n\nincrement number by 1\n\n``` prettyprint\nModel.increment('number', { where: { foo: 'bar' });\n```\n\nincrement number and count by 2\n\n``` prettyprint\nModel.increment(['number', 'count'], { by: 2, where: { foo: 'bar' } });\n```\n\nincrement answer by 42, and decrement tries by 1\n\n``` prettyprint\n// `by` is ignored, as each column has its own value\nModel.increment({ answer: 42, tries: -1}, { by: 2, where: { foo: 'bar' } });\n```\n\n#### See:\n\n- [Model#reload](model.js~model#instance-method-reload)\n\n### public static init(attributes: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber958) \n\nInitialize a model, representing a table in the DB, with attributes and options.\n\nThe table columns are defined by the hash that is given as the first argument. Each attribute of the hash represents a column.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                         |\n|-------------------------|\n| [Model](model.js~model) |\n\n#### Example:\n\n``` prettyprint\nProject.init({\n  columnA: {\n    type: Sequelize.BOOLEAN,\n    validate: {\n      is: ['[a-z]','i'],        // will only allow letters\n      max: 23,                  // only allow values <= 23\n      isIn: {\n        args: [['en', 'zh']],\n        msg: \"Must be English or Chinese\"\n      }\n    },\n    field: 'column_a'\n    // Other attributes here\n  },\n  columnB: Sequelize.STRING,\n  columnC: 'MY VERY OWN COLUMN TYPE'\n}, {sequelize})\n\nsequelize.models.modelName // The model will now be available in models under the class name\n```\n\n#### See:\n\n- [Model Basics](https://sequelize.org/master/manual/model-basics.html) guide\n- [Hooks](https://sequelize.org/master/manual/model-basics.html) guide\n- [Validations & Constraints](https://sequelize.org/master/manual/validations-and-constraints.html) guide\n\n### public static async max(field: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\*\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2180) \n\nFind the maximum value of field\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                           |\n|-----------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\*\\> |\n\n#### See:\n\n- [Model.aggregate](model.js~model#static-method-aggregate) for options\n\n### public static async min(field: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\*\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2195) \n\nFind the minimum value of field\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                           |\n|-----------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\*\\> |\n\n#### See:\n\n- [Model.aggregate](model.js~model#static-method-aggregate) for options\n\n### public static removeAttribute(attribute: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1316) \n\nRemove attribute from model definition\n\n#### Params:\n\n| Name      | Type                                                                                              | Attribute | Description                 |\n|-----------|---------------------------------------------------------------------------------------------------|-----------|-----------------------------|\n| attribute | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | name of attribute to remove |\n\n### public static async restore(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3056) \n\nRestore multiple instances if `paranoid` is enabled.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public static schema(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1476) \n\nApply a schema to this model. For postgres, this will actually place the schema in front of the table name - `\"schema\".\"tableName\"`, while the schema will be prepended to the table name for mysql and sqlite - `'schema.tablename'`.\n\nThis method is intended for use cases where the same model is needed in multiple schemas. In such a use case it is important to call `model.schema(schema, [options]).sync()` for each model to ensure the models are created in the correct schema.\n\nIf a single default schema per model is needed, set the `options.schema='schema'` parameter during the `define()` call for the model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                         |\n|-------------------------|\n| [Model](model.js~model) |\n\n#### See:\n\n- [Sequelize#define](sequelize.js~sequelize#instance-method-define) for more information about setting a default schema.\n\n### public static scope(option: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1582) \n\nApply a scope created in `define` to the model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                         |                                                                                                                               |\n|-------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| [Model](model.js~model) | A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope. |\n\n#### Example:\n\nhow to create scopes\n\n``` prettyprint\nconst Model = sequelize.define('model', attributes, {\n  defaultScope: {\n    where: {\n      username: 'dan'\n    },\n    limit: 12\n  },\n  scopes: {\n    isALie: {\n      where: {\n        stuff: 'cake'\n      }\n    },\n    complexFunction: function(email, accessLevel) {\n      return {\n        where: {\n          email: {\n            [Op.like]: email\n          },\n          access_level {\n            [Op.gte]: accessLevel\n          }\n        }\n      }\n    }\n  }\n})\n\n# As you have defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:\n\nModel.findAll() // WHERE username = 'dan'\nModel.findAll({ where: { age: { [Op.gt]: 12 } } }) // WHERE age > 12 AND username = 'dan'\n```\n\nTo invoke scope functions you can do\n\n``` prettyprint\nModel.scope({ method: ['complexFunction', 'dan@sequelize.com', 42]}).findAll()\n// WHERE email like 'dan@sequelize.com%' AND access_level >= 42\n```\n\n### public static async sum(field: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2210) \n\nFind the sum of field\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> |\n\n#### See:\n\n- [Model.aggregate](model.js~model#static-method-aggregate) for options\n\n### public static async sync(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1331) \n\nSync this Model to the DB, that is create the table.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### See:\n\n- [Sequelize#sync](sequelize.js~sequelize#instance-method-sync) for options\n\n### public static async truncate(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2948) \n\nTruncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### See:\n\n- [Model.destroy](model.js~model#static-method-destroy) for more information\n\n### public static unscoped(): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber1509) \n\nGet un-scoped model\n\n#### Return:\n\n|                         |\n|-------------------------|\n| [Model](model.js~model) |\n\n### public static async update(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3127) \n\nUpdate multiple instances that match the where options.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                                                                                                                                                                                                                                |                                                                                                                                                                                                                                  |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>\\> | The promise returns an array with one or two elements. The first element is always the number of affected rows, while the second element is the actual affected rows (only supported in postgres with `options.returning` true). |\n\n### public static async upsert(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<Array\\<Model, boolean\\|null\\>\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber2516) \n\nInsert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.\n\n**Implementation details:**\n\n- MySQL - Implemented with ON DUPLICATE KEY UPDATE\\`\n- PostgreSQL - Implemented with ON CONFLICT DO UPDATE. If update data contains PK field, then PK is selected as the default conflict key. Otherwise first unique constraint/index will be selected, which can satisfy conflict key requirements.\n- SQLite - Implemented with ON CONFLICT DO UPDATE\n- MSSQL - Implemented as a single query using `MERGE` and `WHEN (NOT) MATCHED THEN`\n\n**Note** that Postgres/SQLite returns null for created, no matter if the row was created or updated\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                      |                                                                                                                                                                                                                                                                     |\n|--------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<Array\\<Model, boolean\\|null\\>\\> | returns an array with two elements, the first being the new record and the second being `true` if it was just created or `false` if it already existed (except on Postgres and SQLite, which can't detect this and will always return `null` instead of a boolean). |\n\n## Public Constructors\n\n### public constructor(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object))  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber85) \n\nBuilds a new model instance.\n\n#### Params:\n\n[TABLE]\n\n## Public Members\n\n### public isNewRecord: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean): \\*  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber140) \n\nReturns true if this instance has not yet been persisted to the database\n\n#### Properties:\n\n| Name        | Type | Attribute | Description |\n|-------------|------|-----------|-------------|\n| isNewRecord | \\*   |           |             |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |\n\n#### Return Properties:\n\n| Name        | Type | Attribute | Description |\n|-------------|------|-----------|-------------|\n| isNewRecord | \\*   |           |             |\n\n### public get sequelize: [Sequelize](sequelize.js~sequelize): \\*  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber72) \n\nA reference to the sequelize instance\n\n#### Properties:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| sequelize | \\*   |           |             |\n\n#### Return:\n\n|                                     |\n|-------------------------------------|\n| [Sequelize](sequelize.js~sequelize) |\n\n#### Return Properties:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| sequelize | \\*   |           |             |\n\n#### See:\n\n- [Sequelize](sequelize.js~sequelize)\n\n## Public Methods\n\n### public changed(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), value: any): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3823) \n\nIf changed is called with a string it will return a boolean indicating whether the value of that key in `dataValues` is different from the value in `_previousDataValues`.\n\nIf changed is called without an argument, it will return an array of keys that have changed.\n\nIf changed is called without an argument and no keys have changed, it will return `false`.\n\nPlease note that this function will return `false` when a property from a nested (for example JSON) property was edited manually, you must call `changed('key', true)` manually in these cases. Writing an entirely new object (eg. deep cloned) will be detected.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                        |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) |\n\n#### Example:\n\n```` prettyprint\n```\nconst mdl = await MyModel.findOne();\nmdl.myJsonField.a = 1;\nconsole.log(mdl.changed()) => false\nmdl.save(); // this will not save anything\nmdl.changed('myJsonField', true);\nconsole.log(mdl.changed()) => ['myJsonField']\nmdl.save(); // will save\n```\n````\n\n### public async decrement(fields: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4433) \n\nDecrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a\n\n``` lang-sql\nSET column = column - X\n```\n\nquery. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\ninstance.decrement('number') // decrement number by 1\n\ninstance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2\n\n// decrement answer by 42, and tries by 1.\n// `by` is ignored, since each column has its own value\ninstance.decrement({ answer: 42, tries: 1}, { by: 2 })\n```\n\n#### See:\n\n- [Model#reload](model.js~model#instance-method-reload)\n\n### public async destroy(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4267) \n\nDestroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public equals(other: [Model](model.js~model)): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4448) \n\nCheck whether this and `other` Instance refer to the same row\n\n#### Params:\n\n| Name  | Type                    | Attribute | Description                       |\n|-------|-------------------------|-----------|-----------------------------------|\n| other | [Model](model.js~model) |           | Other instance to compare against |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |\n\n### public equalsOneOf(others: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\>): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4467) \n\nCheck if this is equal to one of `others` by calling equals\n\n#### Params:\n\n| Name   | Type                                                                                                                       | Attribute | Description                            |\n|--------|----------------------------------------------------------------------------------------------------------------------------|-----------|----------------------------------------|\n| others | [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Model](model.js~model)\\> |           | An array of instances to check against |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |\n\n### public get(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| any  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3569) \n\nIf no key is given, returns all values of the instance, also invoking virtual getters.\n\nIf key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                          |\n|----------------------------------------------------------------------------------------------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| any |\n\n### public getDataValue(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): any  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3536) \n\nGet the value of the underlying data value\n\n#### Params:\n\n| Name | Type                                                                                              | Attribute | Description                        |\n|------|---------------------------------------------------------------------------------------------------|-----------|------------------------------------|\n| key  | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | key to look in instance data store |\n\n#### Return:\n\n|     |\n|-----|\n| any |\n\n### public async increment(fields: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  since 4.0.0 [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4392) \n\nIncrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a\n\n``` lang-sql\nSET column = column + X\n```\n\nquery. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### Example:\n\n``` prettyprint\ninstance.increment('number') // increment number by 1\n\ninstance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2\n\n// increment answer by 42, and tries by 1.\n// `by` is ignored, since each column has its own value\ninstance.increment({ answer: 42, tries: 1}, { by: 2 })\n```\n\n#### See:\n\n- [Model#reload](model.js~model#instance-method-reload)\n\n### public isSoftDeleted(): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4312) \n\nHelper method to determine if a instance is \"soft deleted\". This is particularly useful if the implementer renamed the `deletedAt` attribute to something different. This method requires `paranoid` to be enabled.\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |\n\n### public previous(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): any \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<any\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3850) \n\nReturns the previous value for key from `_previousDataValues`.\n\nIf called without a key, returns the previous values for all values which have changed\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                               |\n|---------------------------------------------------------------------------------------------------------------|\n| any \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<any\\> |\n\n### public async reload(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4176) \n\nRefresh the current instance in-place, i.e. update the object with current data from the DB and return the same object. This is different from doing a `find(Instance.id)`, because that would create and return a new instance. With this method, all references to the Instance are updated with the new data and no new objects are created.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n\n### public async restore(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4334) \n\nRestore the row corresponding to this instance. Only available for paranoid models.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async save(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3914) \n\nValidates this instance, and if the validation passes, persists it to the database.\n\nReturns a Promise that resolves to the saved instance (or rejects with a `Sequelize.ValidationError`, which will have a property for each of the fields for which the validation failed, with the error message for that field).\n\nThis method is optimized to perform an UPDATE only into the fields that changed. If nothing has changed, no SQL query will be performed.\n\nThis method is not aware of eager loaded associations. In other words, if some other model instance (child) was eager loaded with this instance (parent), and you change something in the child, calling `save()` will simply ignore the change that happened on the child.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n### public set(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), value: any, options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3660) \n\nSet is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call `save`). In its most basic form `set` will update a value stored in the underlying `dataValues` object. However, if a custom setter function is defined for the key, that function will be called instead. To bypass the setter, you can pass `raw: true` in the options object.\n\nIf set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be set directly to the object passed, or used to extend dataValues, if dataValues already contain values.\n\nWhen set is called, the previous value of the field is stored and sets a changed flag(see `changed`).\n\nSet can also be used to build instances for associations, if you have values for those. When using set with associations you need to make sure the property key matches the alias of the association while also making sure that the proper include options have been set (from .build() or .findOne())\n\nIf called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                         |\n|-------------------------|\n| [Model](model.js~model) |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll) for more information about includes\n\n### public setDataValue(key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), value: any)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3547) \n\nUpdate the underlying data value\n\n#### Params:\n\n| Name  | Type                                                                                              | Attribute | Description                       |\n|-------|---------------------------------------------------------------------------------------------------|-----------|-----------------------------------|\n| key   | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | key to set in instance data store |\n| value | any                                                                                               |           | new value for given key           |\n\n### public toJSON(): [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4485) \n\nConvert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all values gotten from the DB, and apply all custom getters.\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |\n\n#### See:\n\n- [Model#get](model.js~model#instance-method-get)\n\n### public async update(values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\>  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4230) \n\nThis is the same as calling `set` and then calling `save` but it only saves the exact values passed to it, making it more atomic and safer.\n\n#### Params:\n\n| Name    | Type                                                                                              | Attribute | Description |\n|---------|---------------------------------------------------------------------------------------------------|-----------|-------------|\n| values  | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | See `set`   |\n| options | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | See `save`  |\n\n#### Return:\n\n|                                                                                                                                |\n|--------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Model](model.js~model)\\> |\n\n#### See:\n\n- [Model#set](model.js~model#instance-method-set)\n- [Model#save](model.js~model#instance-method-save)\n\n### public async validate(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber4212) \n\nValidate the attributes of this instance according to validation rules set in the model definition.\n\nThe promise fulfills if and only if validation successful; otherwise it rejects an Error instance containing { field name : \\[error msgs\\] } entries.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public where(checkVersion: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)): [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)  [source](https://sequelize.org/api/v6/file/src/model.js.html#lineNumber3509) \n\nGet an object representing the query for this instance, use with `options.where`\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/model.js~Model.html](https://sequelize.org/api/v6/class/src/model.js~Model.html)"
- name: Model Basics
  id: core-concepts/model-basics/index
  summary: In this tutorial you will learn what models are in Sequelize and how to use them
  description: "# Model Basics\n\nIn this tutorial you will learn what models are in Sequelize and how to use them.\n\n## Concept[​](#concept \"Direct link to heading\")\n\nModels are the essence of Sequelize. A model is an abstraction that represents a table in your database. In Sequelize, it is a class that extends [Model](https://sequelize.org/api/v6/class/src/model.js~Model.html).\n\nThe model tells Sequelize several things about the entity it represents, such as the name of the table in the database and which columns it has (and their data types).\n\nA model in Sequelize has a name. This name does not have to be the same name of the table it represents in the database. Usually, models have singular names (such as `User`) while tables have pluralized names (such as `Users`), although this is fully configurable.\n\n## Model Definition[​](#model-definition \"Direct link to heading\")\n\nModels can be defined in two equivalent ways in Sequelize:\n\n- Calling [`sequelize.define(modelName, attributes, options)`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-define)\n- Extending [Model](https://sequelize.org/api/v6/class/src/model.js~Model.html) and calling [`init(attributes, options)`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-init)\n\nAfter a model is defined, it is available within `sequelize.models` by its model name.\n\nTo learn with an example, we will consider that we want to create a model to represent users, which have a `firstName` and a `lastName`. We want our model to be called `User`, and the table it represents is called `Users` in the database.\n\nBoth ways to define this model are shown below. After being defined, we can access our model with `sequelize.models.User`.\n\n### Using [`sequelize.define`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-define):[​](#using-sequelizedefine \"Direct link to heading\")\n\n``` js\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('User', {\n  // Model attributes are defined here\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  lastName: {\n    type: DataTypes.STRING\n    // allowNull defaults to true\n  }\n}, {\n  // Other model options go here\n});\n\n// `sequelize.define` also returns the model\nconsole.log(User === sequelize.models.User); // true\n```\n\n### Extending [Model](https://sequelize.org/api/v6/class/src/model.js~Model.html)[​](#extending-model \"Direct link to heading\")\n\n``` js\nconst { Sequelize, DataTypes, Model } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\n\nUser.init({\n  // Model attributes are defined here\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  lastName: {\n    type: DataTypes.STRING\n    // allowNull defaults to true\n  }\n}, {\n  // Other model options go here\n  sequelize, // We need to pass the connection instance\n  modelName: 'User' // We need to choose the model name\n});\n\n// the defined model is the class itself\nconsole.log(User === sequelize.models.User); // true\n```\n\nInternally, `sequelize.define` calls `Model.init`, so both approaches are essentially equivalent.\n\n#### Caveat with Public Class Fields[​](#caveat-with-public-class-fields \"Direct link to heading\")\n\nAdding a [Public Class Field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) with the same name as one of the model's attribute is going to cause issues. Sequelize adds a getter & a setter for each attribute defined through `Model.init`. Adding a Public Class Field will shadow those getter and setters, blocking access to the model's actual data.\n\n``` typescript\n// Invalid\nclass User extends Model {\n  id; // this field will shadow sequelize's getter & setter. It should be removed.\n  otherPublicField; // this field does not shadow anything. It is fine.\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // undefined\n```\n\n``` typescript\n// Valid\nclass User extends Model {\n  otherPublicField;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\nIn TypeScript, you can add typing information without adding an actual public class field by using the `declare` keyword:\n\n``` typescript\n// Valid\nclass User extends Model {\n  declare id: number; // this is ok! The 'declare' keyword ensures this field will not be emitted by TypeScript.\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\n## Table name inference[​](#table-name-inference \"Direct link to heading\")\n\nObserve that, in both methods above, the table name (`Users`) was never explicitly defined. However, the model name was given (`User`).\n\nBy default, when the table name is not given, Sequelize automatically pluralizes the model name and uses that as the table name. This pluralization is done under the hood by a library called [inflection](https://www.npmjs.com/package/inflection), so that irregular plurals (such as `person -> people`) are computed correctly.\n\nOf course, this behavior is easily configurable.\n\n### Enforcing the table name to be equal to the model name[​](#enforcing-the-table-name-to-be-equal-to-the-model-name \"Direct link to heading\")\n\nYou can stop the auto-pluralization performed by Sequelize using the `freezeTableName: true` option. This way, Sequelize will infer the table name to be equal to the model name, without any modifications:\n\n``` js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  freezeTableName: true\n});\n```\n\nThe example above will create a model named `User` pointing to a table also named `User`.\n\nThis behavior can also be defined globally for the sequelize instance, when it is created:\n\n``` js\nconst sequelize = new Sequelize('sqlite::memory:', {\n  define: {\n    freezeTableName: true\n  }\n});\n```\n\nThis way, all tables will use the same name as the model name.\n\n### Providing the table name directly[​](#providing-the-table-name-directly \"Direct link to heading\")\n\nYou can simply tell Sequelize the name of the table directly as well:\n\n``` js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  tableName: 'Employees'\n});\n```\n\n## Model synchronization[​](#model-synchronization \"Direct link to heading\")\n\nWhen you define a model, you're telling Sequelize a few things about its table in the database. However, what if the table actually doesn't even exist in the database? What if it exists, but it has different columns, less columns, or any other difference?\n\nThis is where model synchronization comes in. A model can be synchronized with the database by calling [`model.sync(options)`](https://sequelize.org/master/class/src/model.js~Model.html#static-method-sync), an asynchronous function (that returns a Promise). With this call, Sequelize will automatically perform an SQL query to the database. Note that this changes only the table in the database, not the model in the JavaScript side.\n\n- `User.sync()` - This creates the table if it doesn't exist (and does nothing if it already exists)\n- `User.sync({ force: true })` - This creates the table, dropping it first if it already existed\n- `User.sync({ alter: true })` - This checks what is the current state of the table in the database (which columns it has, what are their data types, etc), and then performs the necessary changes in the table to make it match the model.\n\nExample:\n\n``` js\nawait User.sync({ force: true });\nconsole.log(\"The table for the User model was just (re)created!\");\n```\n\n### Synchronizing all models at once[​](#synchronizing-all-models-at-once \"Direct link to heading\")\n\nYou can use [`sequelize.sync()`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-sync) to automatically synchronize all models. Example:\n\n``` js\nawait sequelize.sync({ force: true });\nconsole.log(\"All models were synchronized successfully.\");\n```\n\n### Dropping tables[​](#dropping-tables \"Direct link to heading\")\n\nTo drop the table related to a model:\n\n``` js\nawait User.drop();\nconsole.log(\"User table dropped!\");\n```\n\nTo drop all tables:\n\n``` js\nawait sequelize.drop();\nconsole.log(\"All tables dropped!\");\n```\n\n### Database safety check[​](#database-safety-check \"Direct link to heading\")\n\nAs shown above, the `sync` and `drop` operations are destructive. Sequelize accepts a `match` option as an additional safety check, which receives a RegExp:\n\n``` js\n// This will run .sync() only if database name ends with '_test'\nsequelize.sync({ force: true, match: /_test$/ });\n```\n\n### Synchronization in production[​](#synchronization-in-production \"Direct link to heading\")\n\nAs shown above, `sync({ force: true })` and `sync({ alter: true })` can be destructive operations. Therefore, they are not recommended for production-level software. Instead, synchronization should be done with the advanced concept of [Migrations](../../other-topics/migrations/index), with the help of the [Sequelize CLI](https://github.com/sequelize/cli).\n\n## Timestamps[​](#timestamps \"Direct link to heading\")\n\nBy default, Sequelize automatically adds the fields `createdAt` and `updatedAt` to every model, using the data type `DataTypes.DATE`. Those fields are automatically managed as well - whenever you use Sequelize to create or update something, those fields will be set correctly. The `createdAt` field will contain the timestamp representing the moment of creation, and the `updatedAt` will contain the timestamp of the latest update.\n\n**Note:** This is done in the Sequelize level (i.e. not done with *SQL triggers*). This means that direct SQL queries (for example queries performed without Sequelize by any other means) will not cause these fields to be updated automatically.\n\nThis behavior can be disabled for a model with the `timestamps: false` option:\n\n``` js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  timestamps: false\n});\n```\n\nIt is also possible to enable only one of `createdAt`/`updatedAt`, and to provide a custom name for these columns:\n\n``` js\nclass Foo extends Model {}\nFoo.init({ /* attributes */ }, {\n  sequelize,\n\n  // don't forget to enable timestamps!\n  timestamps: true,\n\n  // I don't want createdAt\n  createdAt: false,\n\n  // I want updatedAt to actually be called updateTimestamp\n  updatedAt: 'updateTimestamp'\n});\n```\n\n## Column declaration shorthand syntax[​](#column-declaration-shorthand-syntax \"Direct link to heading\")\n\nIf the only thing being specified about a column is its data type, the syntax can be shortened:\n\n``` js\n// This:\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING\n  }\n});\n\n// Can be simplified to:\nsequelize.define('User', { name: DataTypes.STRING });\n```\n\n## Default Values[​](#default-values \"Direct link to heading\")\n\nBy default, Sequelize assumes that the default value of a column is `NULL`. This behavior can be changed by passing a specific `defaultValue` to the column definition:\n\n``` js\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING,\n    defaultValue: \"John Doe\"\n  }\n});\n```\n\nSome special values, such as `DataTypes.NOW`, are also accepted:\n\n``` js\nsequelize.define('Foo', {\n  bar: {\n    type: DataTypes.DATETIME,\n    defaultValue: DataTypes.NOW\n    // This way, the current date/time will be used to populate this column (at the moment of insertion)\n  }\n});\n```\n\n## Data Types[​](#data-types \"Direct link to heading\")\n\nEvery column you define in your model must have a data type. Sequelize provides [a lot of built-in data types](https://github.com/sequelize/sequelize/blob/main/src/data-types.js). To access a built-in data type, you must import `DataTypes`:\n\n``` js\nconst { DataTypes } = require(\"sequelize\"); // Import the built-in data types\n```\n\n### Strings[​](#strings \"Direct link to heading\")\n\n``` js\nDataTypes.STRING             // VARCHAR(255)\nDataTypes.STRING(1234)       // VARCHAR(1234)\nDataTypes.STRING.BINARY      // VARCHAR BINARY\nDataTypes.TEXT               // TEXT\nDataTypes.TEXT('tiny')       // TINYTEXT\nDataTypes.CITEXT             // CITEXT          PostgreSQL and SQLite only.\nDataTypes.TSVECTOR           // TSVECTOR        PostgreSQL only.\n```\n\n### Boolean[​](#boolean \"Direct link to heading\")\n\n``` js\nDataTypes.BOOLEAN            // TINYINT(1)\n```\n\n### Numbers[​](#numbers \"Direct link to heading\")\n\n``` js\nDataTypes.INTEGER            // INTEGER\nDataTypes.BIGINT             // BIGINT\nDataTypes.BIGINT(11)         // BIGINT(11)\n\nDataTypes.FLOAT              // FLOAT\nDataTypes.FLOAT(11)          // FLOAT(11)\nDataTypes.FLOAT(11, 10)      // FLOAT(11,10)\n\nDataTypes.REAL               // REAL            PostgreSQL only.\nDataTypes.REAL(11)           // REAL(11)        PostgreSQL only.\nDataTypes.REAL(11, 12)       // REAL(11,12)     PostgreSQL only.\n\nDataTypes.DOUBLE             // DOUBLE\nDataTypes.DOUBLE(11)         // DOUBLE(11)\nDataTypes.DOUBLE(11, 10)     // DOUBLE(11,10)\n\nDataTypes.DECIMAL            // DECIMAL\nDataTypes.DECIMAL(10, 2)     // DECIMAL(10,2)\n```\n\n#### Unsigned & Zerofill integers - MySQL/MariaDB only[​](#unsigned--zerofill-integers---mysqlmariadb-only \"Direct link to heading\")\n\nIn MySQL and MariaDB, the data types `INTEGER`, `BIGINT`, `FLOAT` and `DOUBLE` can be set as unsigned or zerofill (or both), as follows:\n\n``` js\nDataTypes.INTEGER.UNSIGNED\nDataTypes.INTEGER.ZEROFILL\nDataTypes.INTEGER.UNSIGNED.ZEROFILL\n// You can also specify the size i.e. INTEGER(10) instead of simply INTEGER\n// Same for BIGINT, FLOAT and DOUBLE\n```\n\n### Dates[​](#dates \"Direct link to heading\")\n\n``` js\nDataTypes.DATE       // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nDataTypes.DATE(6)    // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nDataTypes.DATEONLY   // DATE without time\n```\n\n### UUIDs[​](#uuids \"Direct link to heading\")\n\nFor UUIDs, use `DataTypes.UUID`. It becomes the `UUID` data type for PostgreSQL and SQLite, and `CHAR(36)` for MySQL. Sequelize can generate UUIDs automatically for these fields, simply use `DataTypes.UUIDV1` or `DataTypes.UUIDV4` as the default value:\n\n``` js\n{\n  type: DataTypes.UUID,\n  defaultValue: DataTypes.UUIDV4 // Or DataTypes.UUIDV1\n}\n```\n\n### Others[​](#others \"Direct link to heading\")\n\nThere are other data types, covered in a [separate guide](../../other-topics/other-data-types/index).\n\n## Column Options[​](#column-options \"Direct link to heading\")\n\nWhen defining a column, apart from specifying the `type` of the column, and the `allowNull` and `defaultValue` options mentioned above, there are a lot more options that can be used. Some examples are below.\n\n``` js\nconst { Model, DataTypes, Deferrable } = require(\"sequelize\");\n\nclass Foo extends Model {}\nFoo.init({\n  // instantiating will automatically set the flag to true if not set\n  flag: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },\n\n  // default values for dates => current time\n  myDate: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },\n\n  // setting allowNull to false will add NOT NULL to the column, which means an error will be\n  // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n  // is not null before querying the DB, look at the validations section below.\n  title: { type: DataTypes.STRING, allowNull: false },\n\n  // Creating two objects with the same value will throw an error. The unique property can be either a\n  // boolean, or a string. If you provide the same string for multiple columns, they will form a\n  // composite unique key.\n  uniqueOne: { type: DataTypes.STRING,  unique: 'compositeIndex' },\n  uniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n\n  // The unique property is simply a shorthand to create a unique constraint.\n  someUnique: { type: DataTypes.STRING, unique: true },\n\n  // Go on reading for further information about primary keys\n  identifier: { type: DataTypes.STRING, primaryKey: true },\n\n  // autoIncrement can be used to create auto_incrementing integer columns\n  incrementMe: { type: DataTypes.INTEGER, autoIncrement: true },\n\n  // You can specify a custom column name via the 'field' attribute:\n  fieldWithUnderscores: { type: DataTypes.STRING, field: 'field_with_underscores' },\n\n  // It is possible to create foreign keys:\n  bar_id: {\n    type: DataTypes.INTEGER,\n\n    references: {\n      // This is a reference to another model\n      model: Bar,\n\n      // This is the column name of the referenced model\n      key: 'id',\n\n      // With PostgreSQL, it is optionally possible to declare when to check the foreign key constraint, passing the Deferrable type.\n      deferrable: Deferrable.INITIALLY_IMMEDIATE\n      // Options:\n      // - `Deferrable.INITIALLY_IMMEDIATE` - Immediately check the foreign key constraints\n      // - `Deferrable.INITIALLY_DEFERRED` - Defer all foreign key constraint check to the end of a transaction\n      // - `Deferrable.NOT` - Don't defer the checks at all (default) - This won't allow you to dynamically change the rule in a transaction\n    }\n  },\n\n  // Comments can only be added to columns in MySQL, MariaDB, PostgreSQL and MSSQL\n  commentMe: {\n    type: DataTypes.INTEGER,\n    comment: 'This is a column name that has a comment'\n  }\n}, {\n  sequelize,\n  modelName: 'foo',\n\n  // Using `unique: true` in an attribute above is exactly the same as creating the index in the model's options:\n  indexes: [{ unique: true, fields: ['someUnique'] }]\n});\n```\n\n## Taking advantage of Models being classes[​](#taking-advantage-of-models-being-classes \"Direct link to heading\")\n\nThe Sequelize models are [ES6 classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes). You can very easily add custom instance or class level methods.\n\n``` js\nclass User extends Model {\n  static classLevelMethod() {\n    return 'foo';\n  }\n  instanceLevelMethod() {\n    return 'bar';\n  }\n  getFullname() {\n    return [this.firstname, this.lastname].join(' ');\n  }\n}\nUser.init({\n  firstname: Sequelize.TEXT,\n  lastname: Sequelize.TEXT\n}, { sequelize });\n\nconsole.log(User.classLevelMethod()); // 'foo'\nconst user = User.build({ firstname: 'Jane', lastname: 'Doe' });\nconsole.log(user.instanceLevelMethod()); // 'bar'\nconsole.log(user.getFullname()); // 'Jane Doe'\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/model-basics/](https://sequelize.org/docs/v6/core-concepts/model-basics/)"
- name: Model Instances
  id: core-concepts/model-instances/index
  summary: As you already know, a model is an ES6 class
  description: "# Model Instances\n\nAs you already know, a model is an [ES6 class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes). An instance of the class represents one object from that model (which maps to one row of the table in the database). This way, model instances are [DAOs](https://en.wikipedia.org/wiki/Data_access_object).\n\nFor this guide, the following setup will be assumed:\n\n``` js\nconst { Sequelize, Model, DataTypes } = require(\"sequelize\");\nconst sequelize = new Sequelize(\"sqlite::memory:\");\n\nconst User = sequelize.define(\"user\", {\n  name: DataTypes.TEXT,\n  favoriteColor: {\n    type: DataTypes.TEXT,\n    defaultValue: 'green'\n  },\n  age: DataTypes.INTEGER,\n  cash: DataTypes.INTEGER\n});\n\n(async () => {\n  await sequelize.sync({ force: true });\n  // Code here\n})();\n```\n\n## Creating an instance[​](#creating-an-instance \"Direct link to heading\")\n\nAlthough a model is a class, you should not create instances by using the `new` operator directly. Instead, the [`build`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-build) method should be used:\n\n``` js\nconst jane = User.build({ name: \"Jane\" });\nconsole.log(jane instanceof User); // true\nconsole.log(jane.name); // \"Jane\"\n```\n\nHowever, the code above does not communicate with the database at all (note that it is not even asynchronous)! This is because the [`build`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-build) method only creates an object that *represents* data that *can* be mapped to a database. In order to really save (i.e. persist) this instance in the database, the [`save`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-save) method should be used:\n\n``` js\nawait jane.save();\nconsole.log('Jane was saved to the database!');\n```\n\nNote, from the usage of `await` in the snippet above, that `save` is an asynchronous method. In fact, almost every Sequelize method is asynchronous; `build` is one of the very few exceptions.\n\n### A very useful shortcut: the `create` method[​](#a-very-useful-shortcut-the-create-method \"Direct link to heading\")\n\nSequelize provides the [`create`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-create) method, which combines the `build` and `save` methods shown above into a single method:\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\n// Jane exists in the database now!\nconsole.log(jane instanceof User); // true\nconsole.log(jane.name); // \"Jane\"\n```\n\n## Note: logging instances[​](#note-logging-instances \"Direct link to heading\")\n\nTrying to log a model instance directly to `console.log` will produce a lot of clutter, since Sequelize instances have a lot of things attached to them. Instead, you can use the `.toJSON()` method (which, by the way, automatically guarantees the instances to be `JSON.stringify`-ed well).\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\n// console.log(jane); // Don't do this\nconsole.log(jane.toJSON()); // This is good!\nconsole.log(JSON.stringify(jane, null, 4)); // This is also good!\n```\n\n## Default values[​](#default-values \"Direct link to heading\")\n\nBuilt instances will automatically get default values:\n\n``` js\nconst jane = User.build({ name: \"Jane\" });\nconsole.log(jane.favoriteColor); // \"green\"\n```\n\n## Updating an instance[​](#updating-an-instance \"Direct link to heading\")\n\nIf you change the value of some field of an instance, calling `save` again will update it accordingly:\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// the name is still \"Jane\" in the database\nawait jane.save();\n// Now the name was updated to \"Ada\" in the database!\n```\n\nYou can update several fields at once with the [`set`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-set) method:\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\n\njane.set({\n  name: \"Ada\",\n  favoriteColor: \"blue\"\n});\n// As above, the database still has \"Jane\" and \"green\"\nawait jane.save();\n// The database now has \"Ada\" and \"blue\" for name and favorite color\n```\n\nNote that the `save()` here will also persist any other changes that have been made on this instance, not just those in the previous `set` call. If you want to update a specific set of fields, you can use [`update`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-update):\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\njane.favoriteColor = \"blue\"\nawait jane.update({ name: \"Ada\" })\n// The database now has \"Ada\" for name, but still has the default \"green\" for favorite color\nawait jane.save()\n// Now the database has \"Ada\" for name and \"blue\" for favorite color\n```\n\n## Deleting an instance[​](#deleting-an-instance \"Direct link to heading\")\n\nYou can delete an instance by calling [`destroy`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-destroy):\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\nawait jane.destroy();\n// Now this entry was removed from the database\n```\n\n## Reloading an instance[​](#reloading-an-instance \"Direct link to heading\")\n\nYou can reload an instance from the database by calling [`reload`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-reload):\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\njane.name = \"Ada\";\n// the name is still \"Jane\" in the database\nawait jane.reload();\nconsole.log(jane.name); // \"Jane\"\n```\n\nThe reload call generates a `SELECT` query to get the up-to-date data from the database.\n\n## Saving only some fields[​](#saving-only-some-fields \"Direct link to heading\")\n\nIt is possible to define which attributes should be saved when calling `save`, by passing an array of column names.\n\nThis is useful when you set attributes based on a previously defined object, for example, when you get the values of an object via a form of a web app. Furthermore, this is used internally in the `update` implementation. This is how it looks like:\n\n``` js\nconst jane = await User.create({ name: \"Jane\" });\nconsole.log(jane.name); // \"Jane\"\nconsole.log(jane.favoriteColor); // \"green\"\njane.name = \"Jane II\";\njane.favoriteColor = \"blue\";\nawait jane.save({ fields: ['name'] });\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"blue\"\n// The above printed blue because the local object has it set to blue, but\n// in the database it is still \"green\":\nawait jane.reload();\nconsole.log(jane.name); // \"Jane II\"\nconsole.log(jane.favoriteColor); // \"green\"\n```\n\n## Change-awareness of save[​](#change-awareness-of-save \"Direct link to heading\")\n\nThe `save` method is optimized internally to only update fields that really changed. This means that if you don't change anything and call `save`, Sequelize will know that the save is superfluous and do nothing, i.e., no query will be generated (it will still return a Promise, but it will resolve immediately).\n\nAlso, if only a few attributes have changed when you call `save`, only those fields will be sent in the `UPDATE` query, to improve performance.\n\n## Incrementing and decrementing integer values[​](#incrementing-and-decrementing-integer-values \"Direct link to heading\")\n\nIn order to increment/decrement values of an instance without running into concurrency issues, Sequelize provides the [`increment`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-increment) and [`decrement`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-decrement) instance methods.\n\n``` js\nconst jane = await User.create({ name: \"Jane\", age: 100 });\nconst incrementResult = await jane.increment('age', { by: 2 });\n// Note: to increment by 1 you can omit the `by` option and just do `user.increment('age')`\n\n// In PostgreSQL, `incrementResult` will be the updated user, unless the option\n// `{ returning: false }` was set (and then it will be undefined).\n\n// In other dialects, `incrementResult` will be undefined. If you need the updated instance, you will have to call `user.reload()`.\n```\n\nYou can also increment multiple fields at once:\n\n``` js\nconst jane = await User.create({ name: \"Jane\", age: 100, cash: 5000 });\nawait jane.increment({\n  'age': 2,\n  'cash': 100\n});\n\n// If the values are incremented by the same amount, you can use this other syntax as well:\nawait jane.increment(['age', 'cash'], { by: 2 });\n```\n\nDecrementing works in the exact same way.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/model-instances/](https://sequelize.org/docs/v6/core-concepts/model-instances/)"
- name: Model Querying - Basics
  id: core-concepts/model-querying-basics/index
  summary: Sequelize provides various methods to assist querying your database for data
  description: "# Model Querying - Basics\n\nSequelize provides various methods to assist querying your database for data.\n\n*Important notice: to perform production-ready queries with Sequelize, make sure you have read the [Transactions guide](../../other-topics/transactions/index) as well. Transactions are important to ensure data integrity and to provide other benefits.*\n\nThis guide will show how to make the standard [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) queries.\n\n## Simple INSERT queries[​](#simple-insert-queries \"Direct link to heading\")\n\nFirst, a simple example:\n\n``` js\n// Create a new user\nconst jane = await User.create({ firstName: \"Jane\", lastName: \"Doe\" });\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\n```\n\nThe [`Model.create()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-create) method is a shorthand for building an unsaved instance with [`Model.build()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-build) and saving the instance with [`instance.save()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#instance-method-save).\n\nIt is also possible to define which attributes can be set in the `create` method. This can be especially useful if you create database entries based on a form which can be filled by a user. Using that would, for example, allow you to restrict the `User` model to set only an username but not an admin flag (i.e., `isAdmin`):\n\n``` js\nconst user = await User.create({\n  username: 'alice123',\n  isAdmin: true\n}, { fields: ['username'] });\n// let's assume the default of isAdmin is false\nconsole.log(user.username); // 'alice123'\nconsole.log(user.isAdmin); // false\n```\n\n## Simple SELECT queries[​](#simple-select-queries \"Direct link to heading\")\n\nYou can read the whole table from the database with the [`findAll`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-findAll) method:\n\n``` js\n// Find all users\nconst users = await User.findAll();\nconsole.log(users.every(user => user instanceof User)); // true\nconsole.log(\"All users:\", JSON.stringify(users, null, 2));\n```\n\n``` sql\nSELECT * FROM ...\n```\n\n## Specifying attributes for SELECT queries[​](#specifying-attributes-for-select-queries \"Direct link to heading\")\n\nTo select only some attributes, you can use the `attributes` option:\n\n``` js\nModel.findAll({\n  attributes: ['foo', 'bar']\n});\n```\n\n``` sql\nSELECT foo, bar FROM ...\n```\n\nAttributes can be renamed using a nested array:\n\n``` js\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz'], 'qux']\n});\n```\n\n``` sql\nSELECT foo, bar AS baz, qux FROM ...\n```\n\nYou can use [`sequelize.fn`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#static-method-fn) to do aggregations:\n\n``` js\nModel.findAll({\n  attributes: [\n    'foo',\n    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'],\n    'bar'\n  ]\n});\n```\n\n``` sql\nSELECT foo, COUNT(hats) AS n_hats, bar FROM ...\n```\n\nWhen using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with `instance.n_hats`.\n\nSometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:\n\n``` js\n// This is a tiresome way of getting the number of hats (along with every column)\nModel.findAll({\n  attributes: [\n    'id', 'foo', 'bar', 'baz', 'qux', 'hats', // We had to list all attributes...\n    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'] // To add the aggregation...\n  ]\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes from your model later\nModel.findAll({\n  attributes: {\n    include: [\n      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']\n    ]\n  }\n});\n```\n\n``` sql\nSELECT id, foo, bar, baz, qux, hats, COUNT(hats) AS n_hats FROM ...\n```\n\nSimilarly, it's also possible to remove a selected few attributes:\n\n``` js\nModel.findAll({\n  attributes: { exclude: ['baz'] }\n});\n```\n\n``` sql\n-- Assuming all columns are 'id', 'foo', 'bar', 'baz' and 'qux'\nSELECT id, foo, bar, qux FROM ...\n```\n\n## Applying WHERE clauses[​](#applying-where-clauses \"Direct link to heading\")\n\nThe `where` option is used to filter the query. There are lots of operators to use for the `where` clause, available as Symbols from [`Op`](https://sequelize.org/api/v6/variable/index.html#static-variable-Op).\n\n### The basics[​](#the-basics \"Direct link to heading\")\n\n``` js\nPost.findAll({\n  where: {\n    authorId: 2\n  }\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\nObserve that no operator (from `Op`) was explicitly passed, so Sequelize assumed an equality comparison by default. The above code is equivalent to:\n\n``` js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    authorId: {\n      [Op.eq]: 2\n    }\n  }\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\nMultiple checks can be passed:\n\n``` js\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active'\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\nJust like Sequelize inferred the `Op.eq` operator in the first example, here Sequelize inferred that the caller wanted an `AND` for the two checks. The code above is equivalent to:\n\n``` js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.and]: [\n      { authorId: 12 },\n      { status: 'active' }\n    ]\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\nAn `OR` can be easily performed in a similar way:\n\n``` js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.or]: [\n      { authorId: 12 },\n      { authorId: 13 }\n    ]\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\nSince the above was an `OR` involving the same field, Sequelize allows you to use a slightly different structure which is more readable and generates the same behavior:\n\n``` js\nconst { Op } = require(\"sequelize\");\nPost.destroy({\n  where: {\n    authorId: {\n      [Op.or]: [12, 13]\n    }\n  }\n});\n// DELETE FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\n### Operators[​](#operators \"Direct link to heading\")\n\nSequelize provides several operators.\n\n``` js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.and]: [{ a: 5 }, { b: 6 }],            // (a = 5) AND (b = 6)\n    [Op.or]: [{ a: 5 }, { b: 6 }],             // (a = 5) OR (b = 6)\n    someAttribute: {\n      // Basics\n      [Op.eq]: 3,                              // = 3\n      [Op.ne]: 20,                             // != 20\n      [Op.is]: null,                           // IS NULL\n      [Op.not]: true,                          // IS NOT TRUE\n      [Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n\n      // Using dialect specific column identifiers (PG in the following example):\n      [Op.col]: 'user.organization_id',        // = \"user\".\"organization_id\"\n\n      // Number comparisons\n      [Op.gt]: 6,                              // > 6\n      [Op.gte]: 6,                             // >= 6\n      [Op.lt]: 10,                             // < 10\n      [Op.lte]: 10,                            // <= 10\n      [Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n      [Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n\n      // Other operators\n\n      [Op.all]: sequelize.literal('SELECT 1'), // > ALL (SELECT 1)\n\n      [Op.in]: [1, 2],                         // IN [1, 2]\n      [Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n\n      [Op.like]: '%hat',                       // LIKE '%hat'\n      [Op.notLike]: '%hat',                    // NOT LIKE '%hat'\n      [Op.startsWith]: 'hat',                  // LIKE 'hat%'\n      [Op.endsWith]: 'hat',                    // LIKE '%hat'\n      [Op.substring]: 'hat',                   // LIKE '%hat%'\n      [Op.iLike]: '%hat',                      // ILIKE '%hat' (case insensitive) (PG only)\n      [Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (PG only)\n      [Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (MySQL/PG only)\n      [Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only)\n      [Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (PG only)\n      [Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (PG only)\n\n      [Op.any]: [2, 3],                        // ANY (ARRAY[2, 3]::INTEGER[]) (PG only)\n      [Op.match]: Sequelize.fn('to_tsquery', 'fat & rat') // match text search for strings 'fat' and 'rat' (PG only)\n\n      // In Postgres, Op.like/Op.iLike/Op.notLike can be combined to Op.any:\n      [Op.like]: { [Op.any]: ['cat', 'hat'] }  // LIKE ANY (ARRAY['cat', 'hat'])\n\n      // There are more postgres-only range operators, see below\n    }\n  }\n});\n```\n\n#### Shorthand syntax for `Op.in`[​](#shorthand-syntax-for-opin \"Direct link to heading\")\n\nPassing an array directly to the `where` option will implicitly use the `IN` operator:\n\n``` js\nPost.findAll({\n  where: {\n    id: [1,2,3] // Same as using `id: { [Op.in]: [1,2,3] }`\n  }\n});\n// SELECT ... FROM \"posts\" AS \"post\" WHERE \"post\".\"id\" IN (1, 2, 3);\n```\n\n### Logical combinations with operators[​](#logical-combinations-with-operators \"Direct link to heading\")\n\nThe operators `Op.and`, `Op.or` and `Op.not` can be used to create arbitrarily complex nested logical comparisons.\n\n#### Examples with `Op.and` and `Op.or`[​](#examples-with-opand-and-opor \"Direct link to heading\")\n\n``` js\nconst { Op } = require(\"sequelize\");\n\nFoo.findAll({\n  where: {\n    rank: {\n      [Op.or]: {\n        [Op.lt]: 1000,\n        [Op.eq]: null\n      }\n    },\n    // rank < 1000 OR rank IS NULL\n\n    {\n      createdAt: {\n        [Op.lt]: new Date(),\n        [Op.gt]: new Date(new Date() - 24 * 60 * 60 * 1000)\n      }\n    },\n    // createdAt < [timestamp] AND createdAt > [timestamp]\n\n    {\n      [Op.or]: [\n        {\n          title: {\n            [Op.like]: 'Boat%'\n          }\n        },\n        {\n          description: {\n            [Op.like]: '%boat%'\n          }\n        }\n      ]\n    }\n    // title LIKE 'Boat%' OR description LIKE '%boat%'\n  }\n});\n```\n\n#### Examples with `Op.not`[​](#examples-with-opnot \"Direct link to heading\")\n\n``` js\nProject.findAll({\n  where: {\n    name: 'Some Project',\n    [Op.not]: [\n      { id: [1,2,3] },\n      {\n        description: {\n          [Op.like]: 'Hello%'\n        }\n      }\n    ]\n  }\n});\n```\n\nThe above will generate:\n\n``` sql\nSELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'Some Project'\n  AND NOT (\n    `Projects`.`id` IN (1,2,3)\n    AND\n    `Projects`.`description` LIKE 'Hello%'\n  )\n)\n```\n\n### Advanced queries with functions (not just columns)[​](#advanced-queries-with-functions-not-just-columns \"Direct link to heading\")\n\nWhat if you wanted to obtain something like `WHERE char_length(\"content\") = 7`?\n\n``` js\nPost.findAll({\n  where: sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7)\n});\n// SELECT ... FROM \"posts\" AS \"post\" WHERE char_length(\"content\") = 7\n```\n\nNote the usage of the [`sequelize.fn`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#static-method-fn) and [`sequelize.col`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#static-method-col) methods, which should be used to specify an SQL function call and a table column, respectively. These methods should be used instead of passing a plain string (such as `char_length(content)`) because Sequelize needs to treat this situation differently (for example, using other symbol escaping approaches).\n\nWhat if you need something even more complex?\n\n``` js\nPost.findAll({\n  where: {\n    [Op.or]: [\n      sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7),\n      {\n        content: {\n          [Op.like]: 'Hello%'\n        }\n      },\n      {\n        [Op.and]: [\n          { status: 'draft' },\n          sequelize.where(sequelize.fn('char_length', sequelize.col('content')), {\n            [Op.gt]: 10\n          })\n        ]\n      }\n    ]\n  }\n});\n```\n\nThe above generates the following SQL:\n\n``` sql\nSELECT\n  ...\nFROM \"posts\" AS \"post\"\nWHERE (\n  char_length(\"content\") = 7\n  OR\n  \"post\".\"content\" LIKE 'Hello%'\n  OR (\n    \"post\".\"status\" = 'draft'\n    AND\n    char_length(\"content\") > 10\n  )\n)\n```\n\n### Postgres-only Range Operators[​](#postgres-only-range-operators \"Direct link to heading\")\n\nRange types can be queried with all supported operators.\n\nKeep in mind, the provided range value can [define the bound inclusion/exclusion](../../other-topics/other-data-types/index#ranges-postgresql-only) as well.\n\n``` js\n[Op.contains]: 2,            // @> '2'::integer  (PG range contains element operator)\n[Op.contains]: [1, 2],       // @> [1, 2)        (PG range contains range operator)\n[Op.contained]: [1, 2],      // <@ [1, 2)        (PG range is contained by operator)\n[Op.overlap]: [1, 2],        // && [1, 2)        (PG range overlap (have points in common) operator)\n[Op.adjacent]: [1, 2],       // -|- [1, 2)       (PG range is adjacent to operator)\n[Op.strictLeft]: [1, 2],     // << [1, 2)        (PG range strictly left of operator)\n[Op.strictRight]: [1, 2],    // >> [1, 2)        (PG range strictly right of operator)\n[Op.noExtendRight]: [1, 2],  // &< [1, 2)        (PG range does not extend to the right of operator)\n[Op.noExtendLeft]: [1, 2],   // &> [1, 2)        (PG range does not extend to the left of operator)\n```\n\n### Deprecated: Operator Aliases[​](#deprecated-operator-aliases \"Direct link to heading\")\n\nIn Sequelize v4, it was possible to specify strings to refer to operators, instead of using Symbols. This is now deprecated and heavily discouraged, and will probably be removed in the next major version. If you really need it, you can pass the `operatorAliases` option in the Sequelize constructor.\n\nFor example:\n\n``` js\nconst { Sequelize, Op } = require(\"sequelize\");\nconst sequelize = new Sequelize('sqlite::memory:', {\n  operatorsAliases: {\n    $gt: Op.gt\n  }\n});\n\n// Now we can use `$gt` instead of `[Op.gt]` in where clauses:\nFoo.findAll({\n  where: {\n    $gt: 6 // Works like using [Op.gt]\n  }\n});\n```\n\n## Simple UPDATE queries[​](#simple-update-queries \"Direct link to heading\")\n\nUpdate queries also accept the `where` option, just like the read queries shown above.\n\n``` js\n// Change everyone without a last name to \"Doe\"\nawait User.update({ lastName: \"Doe\" }, {\n  where: {\n    lastName: null\n  }\n});\n```\n\n## Simple DELETE queries[​](#simple-delete-queries \"Direct link to heading\")\n\nDelete queries also accept the `where` option, just like the read queries shown above.\n\n``` js\n// Delete everyone named \"Jane\"\nawait User.destroy({\n  where: {\n    firstName: \"Jane\"\n  }\n});\n```\n\nTo destroy everything the `TRUNCATE` SQL can be used:\n\n``` js\n// Truncate the table\nawait User.destroy({\n  truncate: true\n});\n```\n\n## Creating in bulk[​](#creating-in-bulk \"Direct link to heading\")\n\nSequelize provides the `Model.bulkCreate` method to allow creating multiple records at once, with only one query.\n\nThe usage of `Model.bulkCreate` is very similar to `Model.create`, by receiving an array of objects instead of a single object.\n\n``` js\nconst captains = await Captain.bulkCreate([\n  { name: 'Jack Sparrow' },\n  { name: 'Davy Jones' }\n]);\nconsole.log(captains.length); // 2\nconsole.log(captains[0] instanceof Captain); // true\nconsole.log(captains[0].name); // 'Jack Sparrow'\nconsole.log(captains[0].id); // 1 // (or another auto-generated value)\n```\n\nHowever, by default, `bulkCreate` does not run validations on each object that is going to be created (which `create` does). To make `bulkCreate` run these validations as well, you must pass the `validate: true` option. This will decrease performance. Usage example:\n\n``` js\nconst Foo = sequelize.define('foo', {\n  bar: {\n    type: DataTypes.TEXT,\n    validate: {\n      len: [4, 6]\n    }\n  }\n});\n\n// This will not throw an error, both instances will be created\nawait Foo.bulkCreate([\n  { name: 'abc123' },\n  { name: 'name too long' }\n]);\n\n// This will throw an error, nothing will be created\nawait Foo.bulkCreate([\n  { name: 'abc123' },\n  { name: 'name too long' }\n], { validate: true });\n```\n\nIf you are accepting values directly from the user, it might be beneficial to limit the columns that you want to actually insert. To support this, `bulkCreate()` accepts a `fields` option, an array defining which fields must be considered (the rest will be ignored).\n\n``` js\nawait User.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true }\n], { fields: ['username'] });\n// Neither foo nor bar are admins.\n```\n\n## Ordering and Grouping[​](#ordering-and-grouping \"Direct link to heading\")\n\nSequelize provides the `order` and `group` options to work with `ORDER BY` and `GROUP BY`.\n\n### Ordering[​](#ordering \"Direct link to heading\")\n\nThe `order` option takes an array of items to order the query by or a sequelize method. These *items* are themselves arrays in the form `[column, direction]`. The column will be escaped correctly and the direction will be checked in a whitelist of valid directions (such as `ASC`, `DESC`, `NULLS FIRST`, etc).\n\n``` js\nSubtask.findAll({\n  order: [\n    // Will escape title and validate DESC against a list of valid direction parameters\n    ['title', 'DESC'],\n\n    // Will order by max(age)\n    sequelize.fn('max', sequelize.col('age')),\n\n    // Will order by max(age) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n\n    // Will order by  otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n\n    // Will order an associated model's createdAt using the model name as the association's name.\n    [Task, 'createdAt', 'DESC'],\n\n    // Will order through an associated model's createdAt using the model names as the associations' names.\n    [Task, Project, 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using the name of the association.\n    ['Task', 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt using the names of the associations.\n    ['Task', 'Project', 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using an association object. (preferred method)\n    [Subtask.associations.Task, 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt using association objects. (preferred method)\n    [Subtask.associations.Task, Task.associations.Project, 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using a simple association object.\n    [{model: Task, as: 'Task'}, 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt simple association objects.\n    [{model: Task, as: 'Task'}, {model: Project, as: 'Project'}, 'createdAt', 'DESC']\n  ],\n\n  // Will order by max age descending\n  order: sequelize.literal('max(age) DESC'),\n\n  // Will order by max age ascending assuming ascending is the default order when direction is omitted\n  order: sequelize.fn('max', sequelize.col('age')),\n\n  // Will order by age ascending assuming ascending is the default order when direction is omitted\n  order: sequelize.col('age'),\n\n  // Will order randomly based on the dialect (instead of fn('RAND') or fn('RANDOM'))\n  order: sequelize.random()\n});\n\nFoo.findOne({\n  order: [\n    // will return `name`\n    ['name'],\n    // will return `username` DESC\n    ['username', 'DESC'],\n    // will return max(`age`)\n    sequelize.fn('max', sequelize.col('age')),\n    // will return max(`age`) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    // will return otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    // will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!\n    [sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']\n  ]\n});\n```\n\nTo recap, the elements of the order array can be the following:\n\n- A string (which will be automatically quoted)\n- An array, whose first element will be quoted, second will be appended verbatim\n- An object with a `raw` field:\n  - The content of `raw` will be added verbatim without quoting\n  - Everything else is ignored, and if raw is not set, the query will fail\n- A call to `Sequelize.fn` (which will generate a function call in SQL)\n- A call to `Sequelize.col` (which will quoute the column name)\n\n### Grouping[​](#grouping \"Direct link to heading\")\n\nThe syntax for grouping and ordering are equal, except that grouping does not accept a direction as last argument of the array (there is no `ASC`, `DESC`, `NULLS FIRST`, etc).\n\nYou can also pass a string directly to `group`, which will be included directly (verbatim) into the generated SQL. Use with caution and don't use with user generated content.\n\n``` js\nProject.findAll({ group: 'name' });\n// yields 'GROUP BY name'\n```\n\n## Limits and Pagination[​](#limits-and-pagination \"Direct link to heading\")\n\nThe `limit` and `offset` options allow you to work with limiting / pagination:\n\n``` js\n// Fetch 10 instances/rows\nProject.findAll({ limit: 10 });\n\n// Skip 8 instances/rows\nProject.findAll({ offset: 8 });\n\n// Skip 5 instances and fetch the 5 after that\nProject.findAll({ offset: 5, limit: 5 });\n```\n\nUsually these are used alongside the `order` option.\n\n## Utility methods[​](#utility-methods \"Direct link to heading\")\n\nSequelize also provides a few utility methods.\n\n### `count`[​](#count \"Direct link to heading\")\n\nThe `count` method simply counts the occurrences of elements in the database.\n\n``` js\nconsole.log(`There are ${await Project.count()} projects`);\n\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25\n    }\n  }\n});\nconsole.log(`There are ${amount} projects with an id greater than 25`);\n```\n\n### `max`, `min` and `sum`[​](#max-min-and-sum \"Direct link to heading\")\n\nSequelize also provides the `max`, `min` and `sum` convenience methods.\n\nLet's assume we have three users, whose ages are 10, 5, and 40.\n\n``` js\nawait User.max('age'); // 40\nawait User.max('age', { where: { age: { [Op.lt]: 20 } } }); // 10\nawait User.min('age'); // 5\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 10\nawait User.sum('age'); // 55\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 50\n```\n\n### `increment`, `decrement`[​](#increment-decrement \"Direct link to heading\")\n\nSequelize also provides the `increment` convenience method.\n\nLet's assume we have a user, whose age is 10.\n\n``` js\nawait User.increment({age: 5}, { where: { id: 1 } }) // Will increase age to 15\nawait User.increment({age: -5}, { where: { id: 1 } }) // Will decrease age to 5\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/model-querying-basics/](https://sequelize.org/docs/v6/core-concepts/model-querying-basics/)"
- name: Model Querying - Finders
  id: core-concepts/model-querying-finders/index
  summary: Finder methods are the ones that generate SELECT queries
  description: "# Model Querying - Finders\n\nFinder methods are the ones that generate `SELECT` queries.\n\nBy default, the results of all finder methods are instances of the model class (as opposed to being just plain JavaScript objects). This means that after the database returns the results, Sequelize automatically wraps everything in proper instance objects. In a few cases, when there are too many results, this wrapping can be inefficient. To disable this wrapping and receive a plain response instead, pass `{ raw: true }` as an option to the finder method.\n\n## `findAll`[​](#findall \"Direct link to heading\")\n\nThe `findAll` method is already known from the previous tutorial. It generates a standard `SELECT` query which will retrieve all entries from the table (unless restricted by something like a `where` clause, for example).\n\n## `findByPk`[​](#findbypk \"Direct link to heading\")\n\nThe `findByPk` method obtains only a single entry from the table, using the provided primary key.\n\n``` js\nconst project = await Project.findByPk(123);\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  // Its primary key is 123\n}\n```\n\n## `findOne`[​](#findone \"Direct link to heading\")\n\nThe `findOne` method obtains the first entry it finds (that fulfills the optional query options, if provided).\n\n``` js\nconst project = await Project.findOne({ where: { title: 'My Title' } });\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  console.log(project.title); // 'My Title'\n}\n```\n\n## `findOrCreate`[​](#findorcreate \"Direct link to heading\")\n\nThe method `findOrCreate` will create an entry in the table unless it can find one fulfilling the query options. In both cases, it will return an instance (either the found instance or the created instance) and a boolean indicating whether that instance was created or already existed.\n\nThe `where` option is considered for finding the entry, and the `defaults` option is used to define what must be created in case nothing was found. If the `defaults` do not contain values for every column, Sequelize will take the values given to `where` (if present).\n\nLet's assume we have an empty database with a `User` model which has a `username` and a `job`.\n\n``` js\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript'\n  }\n});\nconsole.log(user.username); // 'sdepold'\nconsole.log(user.job); // This may or may not be 'Technical Lead JavaScript'\nconsole.log(created); // The boolean indicating whether this instance was just created\nif (created) {\n  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'\n}\n```\n\n## `findAndCountAll`[​](#findandcountall \"Direct link to heading\")\n\nThe `findAndCountAll` method is a convenience method that combines `findAll` and `count`. This is useful when dealing with queries related to pagination where you want to retrieve data with a `limit` and `offset` but also need to know the total number of records that match the query.\n\nWhen `group` is not provided, the `findAndCountAll` method returns an object with two properties:\n\n- `count` - an integer - the total number records matching the query\n- `rows` - an array of objects - the obtained records\n\nWhen `group` is provided, the `findAndCountAll` method returns an object with two properties:\n\n- `count` - an array of objects - contains the count in each group and the projected attributes\n- `rows` - an array of objects - the obtained records\n\n``` js\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%'\n    }\n  },\n  offset: 10,\n  limit: 2\n});\nconsole.log(count);\nconsole.log(rows);\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/model-querying-finders/](https://sequelize.org/docs/v6/core-concepts/model-querying-finders/)"
- name: Models Definition
  id: moved/models-definition/index
  summary: The contents of this page were moved to Model Basics
  description: "# Models Definition\n\nThe contents of this page were moved to [Model Basics](../../core-concepts/model-basics/index).\n\nThe only exception is the guide on `sequelize.import`, which is deprecated and was removed from the docs. However, if you really need it, it was kept here.\n\n------------------------------------------------------------------------\n\n## Deprecated: `sequelize.import`[​](#deprecated-sequelizeimport \"Direct link to heading\")\n\n> ***Note:** You should not use `sequelize.import`. Please just use [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import), [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports), or [`require`](https://nodejs.org/api/modules.html#requireid) instead.*\n>\n> *This documentation has been kept just in case you really need to maintain old code that uses it.*\n\n`sequelize.import` can only load [CommonJS](https://nodejs.org/api/modules.html) files, and is not capable of loading [`ecmascript modules`](https://nodejs.org/api/esm.html). Use native `import` if you need to load ecmascript modules.\n\nYou can store your model definitions in a single file using the `sequelize.import` method. The returned object is exactly the same as defined in the imported file's function. The import is cached, just like `require`, so you won't run into trouble if importing a file more than once.\n\n``` js\n// in your server file - e.g. app.js\nconst Project = sequelize.import(__dirname + \"/path/to/models/project\");\n\n// The model definition is done in /path/to/models/project.js\nmodule.exports = (sequelize, DataTypes) => {\n  return sequelize.define('project', {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  });\n};\n```\n\nThe `import` method can also accept a callback as an argument.\n\n``` js\nsequelize.import('project', (sequelize, DataTypes) => {\n  return sequelize.define('project', {\n    name: DataTypes.STRING,\n    description: DataTypes.TEXT\n  });\n});\n```\n\nThis extra capability is useful when, for example, `Error: Cannot find module` is thrown even though `/path/to/models/project` seems to be correct. Some frameworks, such as Meteor, overload `require`, and might raise an error such as:\n\n``` text\nError: Cannot find module '/home/you/meteorApp/.meteor/local/build/programs/server/app/path/to/models/project.js'\n```\n\nThis can be worked around by passing in Meteor's version of `require`:\n\n``` js\n// If this fails...\nconst AuthorModel = db.import('./path/to/models/project');\n\n// Try this instead!\nconst AuthorModel = db.import('project', require('./path/to/models/project'));\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/moved/models-definition/](https://sequelize.org/docs/v6/moved/models-definition/)"
- name: Models Usage
  id: moved/models-usage/index
  summary: The contents of this page were moved to other specialized guides
  description: "# Models Usage\n\nThe contents of this page were moved to other specialized guides.\n\nIf you're here, you might be looking for these topics:\n\n- **Core Concepts**\n  - [Model Querying - Basics](../../core-concepts/model-querying-basics/index)\n  - [Model Querying - Finders](../../core-concepts/model-querying-finders/index)\n  - [Raw Queries](../../core-concepts/raw-queries/index)\n- **Advanced Association Concepts**\n  - [Eager Loading](../../advanced-association-concepts/eager-loading/index)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/moved/models-usage/](https://sequelize.org/docs/v6/moved/models-usage/)"
- name: MSSqlQueryInterface
  id: class/src/dialects/mssql/query-interface.js~mssqlqueryinterface
  summary: A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint
  description: "# MSSqlQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → MSSqlQueryInterface\n\nThe interface that Sequelize uses to talk with MSSQL database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async removeColumn(tableName: \\*, attributeName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/mssql/query-interface.js.html#lineNumber19) \n\nA wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n#### Override:\n\n[QueryInterface#removeColumn](../abstract/query-interface.js~queryinterface#instance-method-removeColumn)\n\n#### Params:\n\n| Name          | Type | Attribute | Description |\n|---------------|------|-----------|-------------|\n| tableName     | \\*   |           |             |\n| attributeName | \\*   |           |             |\n| options       | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async upsert(tableName: \\*, insertValues: \\*, updateValues: \\*, where: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/mssql/query-interface.js.html#lineNumber50) \n\nUpsert\n\n#### Override:\n\n[QueryInterface#upsert](../abstract/query-interface.js~queryinterface#instance-method-upsert)\n\n#### Params:\n\n| Name         | Type | Attribute | Description |\n|--------------|------|-----------|-------------|\n| tableName    | \\*   |           |             |\n| insertValues | \\*   |           |             |\n| updateValues | \\*   |           |             |\n| where        | \\*   |           |             |\n| options      | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/mssql/query-interface.js~MSSqlQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/mssql/query-interface.js~MSSqlQueryInterface.html)"
- name: MySQLQueryInterface
  id: class/src/dialects/mysql/query-interface.js~mysqlqueryinterface
  summary: A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint
  description: "# MySQLQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → MySQLQueryInterface\n\nThe interface that Sequelize uses to talk with MySQL/MariaDB database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async removeColumn(tableName: \\*, columnName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/mysql/query-interface.js.html#lineNumber16) \n\nA wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n#### Override:\n\n[QueryInterface#removeColumn](../abstract/query-interface.js~queryinterface#instance-method-removeColumn)\n\n#### Params:\n\n| Name       | Type | Attribute | Description |\n|------------|------|-----------|-------------|\n| tableName  | \\*   |           |             |\n| columnName | \\*   |           |             |\n| options    | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async removeConstraint(tableName: \\*, constraintName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/mysql/query-interface.js.html#lineNumber59) \n\nRemove a constraint from a table\n\n#### Override:\n\n[QueryInterface#removeConstraint](../abstract/query-interface.js~queryinterface#instance-method-removeConstraint)\n\n#### Params:\n\n| Name           | Type | Attribute | Description |\n|----------------|------|-----------|-------------|\n| tableName      | \\*   |           |             |\n| constraintName | \\*   |           |             |\n| options        | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async upsert(tableName: \\*, insertValues: \\*, updateValues: \\*, where: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/mysql/query-interface.js.html#lineNumber44) \n\nUpsert\n\n#### Override:\n\n[QueryInterface#upsert](../abstract/query-interface.js~queryinterface#instance-method-upsert)\n\n#### Params:\n\n| Name         | Type | Attribute | Description |\n|--------------|------|-----------|-------------|\n| tableName    | \\*   |           |             |\n| insertValues | \\*   |           |             |\n| updateValues | \\*   |           |             |\n| where        | \\*   |           |             |\n| options      | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/mysql/query-interface.js~MySQLQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/mysql/query-interface.js~MySQLQueryInterface.html)"
- name: Naming Strategies
  id: other-topics/naming-strategies/index
  summary: Sequelize provides the underscored option for a model
  description: "# Naming Strategies\n\n## The `underscored` option[​](#the-underscored-option \"Direct link to heading\")\n\nSequelize provides the `underscored` option for a model. When `true`, this option will set the `field` option on all attributes to the [snake_case](https://en.wikipedia.org/wiki/Snake_case) version of its name. This also applies to foreign keys automatically generated by associations and other automatically generated fields. Example:\n\n``` js\nconst User = sequelize.define('user', { username: Sequelize.STRING }, {\n  underscored: true\n});\nconst Task = sequelize.define('task', { title: Sequelize.STRING }, {\n  underscored: true\n});\nUser.hasMany(Task);\nTask.belongsTo(User);\n```\n\nAbove we have the models User and Task, both using the `underscored` option. We also have a One-to-Many relationship between them. Also, recall that since `timestamps` is true by default, we should expect the `createdAt` and `updatedAt` fields to be automatically created as well.\n\nWithout the `underscored` option, Sequelize would automatically define:\n\n- A `createdAt` attribute for each model, pointing to a column named `createdAt` in each table\n- An `updatedAt` attribute for each model, pointing to a column named `updatedAt` in each table\n- A `userId` attribute in the `Task` model, pointing to a column named `userId` in the task table\n\nWith the `underscored` option enabled, Sequelize will instead define:\n\n- A `createdAt` attribute for each model, pointing to a column named `created_at` in each table\n- An `updatedAt` attribute for each model, pointing to a column named `updated_at` in each table\n- A `userId` attribute in the `Task` model, pointing to a column named `user_id` in the task table\n\nNote that in both cases the fields are still [camelCase](https://en.wikipedia.org/wiki/Camel_case) in the JavaScript side; this option only changes how these fields are mapped to the database itself. The `field` option of every attribute is set to their snake_case version, but the attribute itself remains camelCase.\n\nThis way, calling `sync()` on the above code will generate the following:\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"users\" (\n  \"id\" SERIAL,\n  \"username\" VARCHAR(255),\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  PRIMARY KEY (\"id\")\n);\nCREATE TABLE IF NOT EXISTS \"tasks\" (\n  \"id\" SERIAL,\n  \"title\" VARCHAR(255),\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"user_id\" INTEGER REFERENCES \"users\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  PRIMARY KEY (\"id\")\n);\n```\n\n## Singular vs. Plural[​](#singular-vs-plural \"Direct link to heading\")\n\nAt a first glance, it can be confusing whether the singular form or plural form of a name shall be used around in Sequelize. This section aims at clarifying that a bit.\n\nRecall that Sequelize uses a library called [inflection](https://www.npmjs.com/package/inflection) under the hood, so that irregular plurals (such as `person -> people`) are computed correctly. However, if you're working in another language, you may want to define the singular and plural forms of names directly; sequelize allows you to do this with some options.\n\n### When defining models[​](#when-defining-models \"Direct link to heading\")\n\nModels should be defined with the singular form of a word. Example:\n\n``` js\nsequelize.define('foo', { name: DataTypes.STRING });\n```\n\nAbove, the model name is `foo` (singular), and the respective table name is `foos`, since Sequelize automatically gets the plural for the table name.\n\n### When defining a reference key in a model[​](#when-defining-a-reference-key-in-a-model \"Direct link to heading\")\n\n``` js\nsequelize.define('foo', {\n  name: DataTypes.STRING,\n  barId: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    references: {\n      model: \"bars\",\n      key: \"id\"\n    },\n    onDelete: \"CASCADE\"\n  },\n});\n```\n\nIn the above example we are manually defining a key that references another model. It's not usual to do this, but if you have to, you should use the table name there. This is because the reference is created upon the referenced table name. In the example above, the plural form was used (`bars`), assuming that the `bar` model was created with the default settings (making its underlying table automatically pluralized).\n\n### When retrieving data from eager loading[​](#when-retrieving-data-from-eager-loading \"Direct link to heading\")\n\nWhen you perform an `include` in a query, the included data will be added to an extra field in the returned objects, according to the following rules:\n\n- When including something from a single association (`hasOne` or `belongsTo`) - the field name will be the singular version of the model name;\n- When including something from a multiple association (`hasMany` or `belongsToMany`) - the field name will be the plural form of the model.\n\nIn short, the name of the field will take the most logical form in each situation.\n\nExamples:\n\n``` js\n// Assuming Foo.hasMany(Bar)\nconst foo = Foo.findOne({ include: Bar });\n// foo.bars will be an array\n// foo.bar will not exist since it doens't make sense\n\n// Assuming Foo.hasOne(Bar)\nconst foo = Foo.findOne({ include: Bar });\n// foo.bar will be an object (possibly null if there is no associated model)\n// foo.bars will not exist since it doens't make sense\n\n// And so on.\n```\n\n### Overriding singulars and plurals when defining aliases[​](#overriding-singulars-and-plurals-when-defining-aliases \"Direct link to heading\")\n\nWhen defining an alias for an association, instead of using simply `{ as: 'myAlias' }`, you can pass an object to specify the singular and plural forms:\n\n``` js\nProject.belongsToMany(User, {\n  as: {\n    singular: 'líder',\n    plural: 'líderes'\n  }\n});\n```\n\nIf you know that a model will always use the same alias in associations, you can provide the singular and plural forms directly to the model itself:\n\n``` js\nconst User = sequelize.define('user', { /* ... */ }, {\n  name: {\n    singular: 'líder',\n    plural: 'líderes',\n  }\n});\nProject.belongsToMany(User);\n```\n\nThe mixins added to the user instances will use the correct forms. For example, instead of `project.addUser()`, Sequelize will provide `project.getLíder()`. Also, instead of `project.setUsers()`, Sequelize will provide `project.setLíderes()`.\n\nNote: recall that using `as` to change the name of the association will also change the name of the foreign key. Therefore it is recommended to also specify the foreign key(s) involved directly in this case.\n\n``` js\n// Example of possible mistake\nInvoice.belongsTo(Subscription, { as: 'TheSubscription' });\nSubscription.hasMany(Invoice);\n```\n\nThe first call above will establish a foreign key called `theSubscriptionId` on `Invoice`. However, the second call will also establish a foreign key on `Invoice` (since as we know, `hasMany` calls places foreign keys in the target model) - however, it will be named `subscriptionId`. This way you will have both `subscriptionId` and `theSubscriptionId` columns.\n\nThe best approach is to choose a name for the foreign key and place it explicitly in both calls. For example, if `subscription_id` was chosen:\n\n``` js\n// Fixed example\nInvoice.belongsTo(Subscription, { as: 'TheSubscription', foreignKey: 'subscription_id' });\nSubscription.hasMany(Invoice, { foreignKey: 'subscription_id' });\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/naming-strategies/](https://sequelize.org/docs/v6/other-topics/naming-strategies/)"
- name: NOW
  id: class/src/data-types.js~now
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# NOW\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → NOW\n\nA default value of the current timestamp\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~NOW.html](https://sequelize.org/api/v6/class/src/data-types.js~NOW.html)"
- name: NUMBER
  id: class/src/data-types.js~number
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# NUMBER\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → NUMBER\n\n#### Direct Subclass:\n\n[DECIMAL](data-types.js~decimal), [DOUBLE](data-types.js~double), [FLOAT](data-types.js~float), [INTEGER](data-types.js~integer), [REAL](data-types.js~real)\n\n#### Indirect Subclass:\n\n[BIGINT](data-types.js~bigint), [MEDIUMINT](data-types.js~mediumint), [SMALLINT](data-types.js~smallint), [TINYINT](data-types.js~tinyint)\n\nBase number type which is used to build other types\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber175) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~NUMBER.html](https://sequelize.org/api/v6/class/src/data-types.js~NUMBER.html)"
- name: Optimistic Locking
  id: other-topics/optimistic-locking/index
  summary: Sequelize has built-in support for optimistic locking through a model instance version count
  description: "# Optimistic Locking\n\nSequelize has built-in support for optimistic locking through a model instance version count.\n\nOptimistic locking is disabled by default and can be enabled by setting the `version` property to true in a specific model definition or global model configuration. See [model configuration](../../core-concepts/model-basics/index) for more details.\n\nOptimistic locking allows concurrent access to model records for edits and prevents conflicts from overwriting data. It does this by checking whether another process has made changes to a record since it was read and throws an OptimisticLockError when a conflict is detected.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/optimistic-locking/](https://sequelize.org/docs/v6/other-topics/optimistic-locking/)"
- name: OptimisticLockError
  id: class/src/errors/optimistic-lock-error.ts~optimisticlockerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# OptimisticLockError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → OptimisticLockError\n\nThrown when attempting to update a stale model instance\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/optimistic-lock-error.ts~OptimisticLockError.html](https://sequelize.org/api/v6/class/src/errors/optimistic-lock-error.ts~OptimisticLockError.html)"
- name: OracleQueryInterface
  id: class/src/dialects/oracle/query-interface.js~oraclequeryinterface
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# OracleQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → OracleQueryInterface\n\nThe interface that Sequelize uses to talk with Oracle database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async upsert(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), insertValues: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), updateValues: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), where: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/dialects/oracle/query-interface.js.html#lineNumber24) \n\nUpsert\n\n#### Override:\n\n[QueryInterface#upsert](../abstract/query-interface.js~queryinterface#instance-method-upsert)\n\n#### Params:\n\n| Name         | Type                                                                                              | Attribute | Description                                                           |\n|--------------|---------------------------------------------------------------------------------------------------|-----------|-----------------------------------------------------------------------|\n| tableName    | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | table to upsert on                                                    |\n| insertValues | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | values to be inserted, mapped to field name                           |\n| updateValues | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | values to be updated, mapped to field name                            |\n| where        | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | where conditions, which can be used for UPDATE part when INSERT fails |\n| options      | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | query options                                                         |\n\n#### Return:\n\n|                                                                                                                                                                                                                                                                                                                |                                                |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> | Resolves an array with \\<created, primaryKey\\> |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/oracle/query-interface.js~OracleQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/oracle/query-interface.js~OracleQueryInterface.html)"
- name: Other Data Types
  id: other-topics/other-data-types/index
  summary: Apart from the most common data types mentioned in the Model Basics guide, Sequelize provides several other data types
  description: "# Other Data Types\n\nApart from the most common data types mentioned in the Model Basics guide, Sequelize provides several other data types.\n\n## Ranges (PostgreSQL only)[​](#ranges-postgresql-only \"Direct link to heading\")\n\n``` js\nDataTypes.RANGE(DataTypes.INTEGER)    // int4range\nDataTypes.RANGE(DataTypes.BIGINT)     // int8range\nDataTypes.RANGE(DataTypes.DATE)       // tstzrange\nDataTypes.RANGE(DataTypes.DATEONLY)   // daterange\nDataTypes.RANGE(DataTypes.DECIMAL)    // numrange\n```\n\nSince range types have extra information for their bound inclusion/exclusion it's not very straightforward to just use a tuple to represent them in javascript.\n\nWhen supplying ranges as values you can choose from the following APIs:\n\n``` js\n// defaults to inclusive lower bound, exclusive upper bound\nconst range = [\n  new Date(Date.UTC(2016, 0, 1)),\n  new Date(Date.UTC(2016, 1, 1))\n];\n// '[\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\n\n// control inclusion\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\n];\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\"]'\n\n// composite form\nconst range = [\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\n  new Date(Date.UTC(2016, 1, 1)),\n];\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\n\nconst Timeline = sequelize.define('Timeline', {\n  range: DataTypes.RANGE(DataTypes.DATE)\n});\n\nawait Timeline.create({ range });\n```\n\nHowever, retrieved range values always come in the form of an array of objects. For example, if the stored value is `(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\"]`, after a finder query you will get:\n\n``` js\n[\n  { value: Date, inclusive: false },\n  { value: Date, inclusive: true }\n]\n```\n\nYou will need to call `reload()` after updating an instance with a range type or use the `returning: true` option.\n\n### Special Cases[​](#special-cases \"Direct link to heading\")\n\n``` js\n// empty range:\nTimeline.create({ range: [] }); // range = 'empty'\n\n// Unbounded range:\nTimeline.create({ range: [null, null] }); // range = '[,)'\n// range = '[,\"2016-01-01 00:00:00+00:00\")'\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\n\n// Infinite range:\n// range = '[-infinity,\"2016-01-01 00:00:00+00:00\")'\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });\n```\n\n## Network Addresses[​](#network-addresses \"Direct link to heading\")\n\nAll PostgreSQL MariaDB MySQL MSSQL SQLite Snowflake db2 ibmi\n\n| Sequelize DataType | PostgreSQL                                                               | MariaDB | MySQL | MSSQL | SQLite | Snowflake | db2 | ibmi |\n|--------------------|--------------------------------------------------------------------------|---------|-------|-------|--------|-----------|-----|------|\n| `CIDR`             | [`CIDR`](https://www.postgresql.org/docs/9.1/datatype-net-types.html)    | ❌      | ❌    | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `INET`             | [`INET`](https://www.postgresql.org/docs/9.1/datatype-net-types.html)    | ❌      | ❌    | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `MACADDR`          | [`MACADDR`](https://www.postgresql.org/docs/9.1/datatype-net-types.html) | ❌      | ❌    | ❌    | ❌     | ❌        | ❌  | ❌   |\n\n## Arrays (PostgreSQL only)[​](#arrays-postgresql-only \"Direct link to heading\")\n\n``` typescript\n// Defines an array of DataTypes.SOMETHING.\nDataTypes.ARRAY(/* DataTypes.SOMETHING */)\n\n// For example\n// VARCHAR(255)[]\nDataTypes.ARRAY(DataTypes.STRING)\n// VARCHAR(255)[][]\nDataTypes.ARRAY(DataTypes.ARRAY(DataTypes.STRING))\n```\n\n## BLOBs[​](#blobs \"Direct link to heading\")\n\n``` js\nDataTypes.BLOB                // BLOB (bytea for PostgreSQL)\nDataTypes.BLOB('tiny')        // TINYBLOB (bytea for PostgreSQL)\nDataTypes.BLOB('medium')      // MEDIUMBLOB (bytea for PostgreSQL)\nDataTypes.BLOB('long')        // LONGBLOB (bytea for PostgreSQL)\n```\n\nThe blob datatype allows you to insert data both as strings and as buffers. However, when a blob is retrieved from database with Sequelize, it will always be retrieved as a buffer.\n\n## ENUMs[​](#enums \"Direct link to heading\")\n\nThe ENUM is a data type that accepts only a few values, specified as a list.\n\n``` js\nDataTypes.ENUM('foo', 'bar') // An ENUM with allowed values 'foo' and 'bar'\n```\n\nENUMs can also be specified with the `values` field of the column definition, as follows:\n\n``` js\nsequelize.define('foo', {\n  states: {\n    type: DataTypes.ENUM,\n    values: ['active', 'pending', 'deleted']\n  }\n});\n```\n\n## JSON (SQLite, MySQL, MariaDB, Oracle and PostgreSQL only)[​](#json-sqlite-mysql-mariadb-oracle-and-postgresql-only \"Direct link to heading\")\n\nThe `DataTypes.JSON` data type is only supported for SQLite, MySQL, MariaDB, Oracle and PostgreSQL. However, there is a minimum support for MSSQL (see below).\n\n### Note for PostgreSQL[​](#note-for-postgresql \"Direct link to heading\")\n\nThe JSON data type in PostgreSQL stores the value as plain text, as opposed to binary representation. If you simply want to store and retrieve a JSON representation, using JSON will take less disk space and less time to build from its input representation. However, if you want to do any operations on the JSON value, you should prefer the JSONB data type described below.\n\n### JSONB (PostgreSQL only)[​](#jsonb-postgresql-only \"Direct link to heading\")\n\nPostgreSQL also supports a JSONB data type: `DataTypes.JSONB`. It can be queried in three different ways:\n\n``` js\n// Nested object\nawait Foo.findOne({\n  where: {\n    meta: {\n      video: {\n        url: {\n          [Op.ne]: null\n        }\n      }\n    }\n  }\n});\n\n// Nested key\nawait Foo.findOne({\n  where: {\n    \"meta.audio.length\": {\n      [Op.gt]: 20\n    }\n  }\n});\n\n// Containment\nawait Foo.findOne({\n  where: {\n    meta: {\n      [Op.contains]: {\n        site: {\n          url: 'https://google.com'\n        }\n      }\n    }\n  }\n});\n```\n\n### MSSQL[​](#mssql \"Direct link to heading\")\n\nMSSQL does not have a JSON data type, however it does provide some support for JSON stored as strings through certain functions since SQL Server 2016. Using these functions, you will be able to query the JSON stored in the string, but any returned values will need to be parsed seperately.\n\n``` js\n// ISJSON - to test if a string contains valid JSON\nawait User.findAll({\n  where: sequelize.where(sequelize.fn('ISJSON', sequelize.col('userDetails')), 1)\n})\n\n// JSON_VALUE - extract a scalar value from a JSON string\nawait User.findAll({\n  attributes: [[ sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), 'address line 1']]\n})\n\n// JSON_VALUE - query a scalar value from a JSON string\nawait User.findAll({\n  where: sequelize.where(sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), '14, Foo Street')\n})\n\n// JSON_QUERY - extract an object or array\nawait User.findAll({\n  attributes: [[ sequelize.fn('JSON_QUERY', sequelize.col('userDetails'), '$.address'), 'full address']]\n})\n```\n\n## Miscellaneous DataTypes[​](#miscellaneous-datatypes \"Direct link to heading\")\n\nAll PostgreSQL MariaDB MySQL MSSQL SQLite Snowflake db2 ibmi\n\n| Sequelize DataType                                                            | PostgreSQL                                                                | [MariaDB](https://mariadb.com/kb/en/geometry-types/) | [MySQL](https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html) | MSSQL | SQLite | Snowflake | db2 | ibmi |\n|-------------------------------------------------------------------------------|---------------------------------------------------------------------------|------------------------------------------------------|-----------------------------------------------------------------------------|-------|--------|-----------|-----|------|\n| [`GEOMETRY`](https://sequelize.org/api/v6/class/src/data-types.js~geometry)   | [`GEOMETRY`](https://postgis.net/workshops/postgis-intro/geometries.html) | `GEOMETRY`                                           | `GEOMETRY`                                                                  | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `GEOMETRY('POINT')`                                                           | `GEOMETRY(POINT)`                                                         | `POINT`                                              | `POINT`                                                                     | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `GEOMETRY('POINT', 4326)`                                                     | `GEOMETRY(POINT,4326)`                                                    | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `GEOMETRY('POLYGON')`                                                         | `GEOMETRY(POLYGON)`                                                       | `POLYGON`                                            | `POLYGON`                                                                   | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `GEOMETRY('LINESTRING')`                                                      | `GEOMETRY(LINESTRING)`                                                    | `LINESTRING`                                         | `LINESTRING`                                                                | ❌    | ❌     | ❌        | ❌  | ❌   |\n| [`GEOGRAPHY`](https://sequelize.org/api/v6/class/src/data-types.js~geography) | [`GEOGRAPHY`](https://postgis.net/workshops/postgis-intro/geography.html) | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   |\n| `HSTORE`                                                                      | [`HSTORE`](https://www.postgresql.org/docs/9.1/hstore.html)               | ❌                                                   | ❌                                                                          | ❌    | ❌     | ❌        | ❌  | ❌   |\n\nnote\n\nIn Postgres, the GEOMETRY and GEOGRAPHY types are implemented by [the PostGIS extension](https://postgis.net/workshops/postgis-intro/geometries.html).\n\nIn Postgres, You must install the [pg-hstore](https://www.npmjs.com/package/pg-hstore) package if you use `DataTypes.HSTORE`\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/other-data-types/](https://sequelize.org/docs/v6/other-topics/other-data-types/)"
- name: Paranoid
  id: core-concepts/paranoid/index
  summary: Sequelize supports the concept of paranoid tables
  description: "# Paranoid\n\nSequelize supports the concept of *paranoid* tables. A *paranoid* table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called `deletedAt` will have its value set to the timestamp of that deletion request.\n\nThis means that paranoid tables perform a *soft-deletion* of records, instead of a *hard-deletion*.\n\n## Defining a model as paranoid[​](#defining-a-model-as-paranoid \"Direct link to heading\")\n\nTo make a model paranoid, you must pass the `paranoid: true` option to the model definition. Paranoid requires timestamps to work (i.e. it won't work if you also pass `timestamps: false`).\n\nYou can also change the default column name (which is `deletedAt`) to something else.\n\n``` js\nclass Post extends Model {}\nPost.init({ /* attributes here */ }, {\n  sequelize,\n  paranoid: true,\n\n  // If you want to give a custom name to the deletedAt column\n  deletedAt: 'destroyTime'\n});\n```\n\n## Deleting[​](#deleting \"Direct link to heading\")\n\nWhen you call the `destroy` method, a soft-deletion will happen:\n\n``` js\nawait Post.destroy({\n  where: {\n    id: 1\n  }\n});\n// UPDATE \"posts\" SET \"deletedAt\"=[timestamp] WHERE \"deletedAt\" IS NULL AND \"id\" = 1\n```\n\nIf you really want a hard-deletion and your model is paranoid, you can force it using the `force: true` option:\n\n``` js\nawait Post.destroy({\n  where: {\n    id: 1\n  },\n  force: true\n});\n// DELETE FROM \"posts\" WHERE \"id\" = 1\n```\n\nThe above examples used the static `destroy` method as an example (`Post.destroy`), but everything works in the same way with the instance method:\n\n``` js\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy(); // Would just set the `deletedAt` flag\nawait post.destroy({ force: true }); // Would really delete the record\n```\n\n## Restoring[​](#restoring \"Direct link to heading\")\n\nTo restore soft-deleted records, you can use the `restore` method, which comes both in the static version as well as in the instance version:\n\n``` js\n// Example showing the instance `restore` method\n// We create a post, soft-delete it and then restore it back\nconst post = await Post.create({ title: 'test' });\nconsole.log(post instanceof Post); // true\nawait post.destroy();\nconsole.log('soft-deleted!');\nawait post.restore();\nconsole.log('restored!');\n\n// Example showing the static `restore` method.\n// Restoring every soft-deleted post with more than 100 likes\nawait Post.restore({\n  where: {\n    likes: {\n      [Op.gt]: 100\n    }\n  }\n});\n```\n\n## Behavior with other queries[​](#behavior-with-other-queries \"Direct link to heading\")\n\nEvery query performed by Sequelize will automatically ignore soft-deleted records (except raw queries, of course).\n\nThis means that, for example, the `findAll` method will not see the soft-deleted records, fetching only the ones that were not deleted.\n\nEven if you simply call `findByPk` providing the primary key of a soft-deleted record, the result will be `null` as if that record didn't exist.\n\nIf you really want to let the query see the soft-deleted records, you can pass the `paranoid: false` option to the query method. For example:\n\n``` js\nawait Post.findByPk(123); // This will return `null` if the record of id 123 is soft-deleted\nawait Post.findByPk(123, { paranoid: false }); // This will retrieve the record\n\nawait Post.findAll({\n  where: { foo: 'bar' }\n}); // This will not retrieve soft-deleted records\n\nawait Post.findAll({\n  where: { foo: 'bar' },\n  paranoid: false\n}); // This will also retrieve soft-deleted records\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/paranoid/](https://sequelize.org/docs/v6/core-concepts/paranoid/)"
- name: Polymorphic Associations
  id: advanced-association-concepts/polymorphic-associations/index
  summary: 'Note: the usage of polymorphic associations in Sequelize, as outlined in this guide, should be done with caution'
  description: "# Polymorphic Associations\n\n***Note:** the usage of polymorphic associations in Sequelize, as outlined in this guide, should be done with caution. Don't just copy-paste code from here, otherwise you might easily make mistakes and introduce bugs in your code. Make sure you understand what is going on.*\n\n## Concept[​](#concept \"Direct link to heading\")\n\nA **polymorphic association** consists on two (or more) associations happening with the same foreign key.\n\nFor example, consider the models `Image`, `Video` and `Comment`. The first two represent something that a user might post. We want to allow comments to be placed in both of them. This way, we immediately think of establishing the following associations:\n\n- A One-to-Many association between `Image` and `Comment`:\n\n  ``` js\n  Image.hasMany(Comment);\n  Comment.belongsTo(Image);\n  ```\n\n- A One-to-Many association between `Video` and `Comment`:\n\n  ``` js\n  Video.hasMany(Comment);\n  Comment.belongsTo(Video);\n  ```\n\nHowever, the above would cause Sequelize to create two foreign keys on the `Comment` table: `ImageId` and `VideoId`. This is not ideal because this structure makes it look like a comment can be attached at the same time to one image and one video, which isn't true. Instead, what we really want here is precisely a polymorphic association, in which a `Comment` points to a single **Commentable**, an abstract polymorphic entity that represents one of `Image` or `Video`.\n\nBefore proceeding to how to configure such an association, let's see how using it looks like:\n\n``` js\nconst image = await Image.create({ url: \"https://placekitten.com/408/287\" });\nconst comment = await image.createComment({ content: \"Awesome!\" });\n\nconsole.log(comment.commentableId === image.id); // true\n\n// We can also retrieve which type of commentable a comment is associated to.\n// The following prints the model name of the associated commentable instance.\nconsole.log(comment.commentableType); // \"Image\"\n\n// We can use a polymorphic method to retrieve the associated commentable, without\n// having to worry whether it's an Image or a Video.\nconst associatedCommentable = await comment.getCommentable();\n\n// In this example, `associatedCommentable` is the same thing as `image`:\nconst isDeepEqual = require('deep-equal');\nconsole.log(isDeepEqual(image, commentable)); // true\n```\n\n## Configuring a One-to-Many polymorphic association[​](#configuring-a-one-to-many-polymorphic-association \"Direct link to heading\")\n\nTo setup the polymorphic association for the example above (which is an example of One-to-Many polymorphic association), we have the following steps:\n\n- Define a string field called `commentableType` in the `Comment` model;\n- Define the `hasMany` and `belongsTo` association between `Image`/`Video` and `Comment`:\n  - Disabling constraints (i.e. using `{ constraints: false }`), since the same foreign key is referencing multiple tables;\n  - Specifying the appropriate [association scopes](../association-scopes/index);\n- To properly support lazy loading, define a new instance method on the `Comment` model called `getCommentable` which calls, under the hood, the correct mixin to fetch the appropriate commentable;\n- To properly support eager loading, define an `afterFind` hook on the `Comment` model that automatically populates the `commentable` field in every instance;\n- To prevent bugs/mistakes in eager loading, you can also delete the concrete fields `image` and `video` from Comment instances in the same `afterFind` hook, leaving only the abstract `commentable` field available.\n\nHere is an example:\n\n``` js\n// Helper function\nconst uppercaseFirst = str => `${str[0].toUpperCase()}${str.substr(1)}`;\n\nclass Image extends Model {}\nImage.init({\n  title: DataTypes.STRING,\n  url: DataTypes.STRING\n}, { sequelize, modelName: 'image' });\n\nclass Video extends Model {}\nVideo.init({\n  title: DataTypes.STRING,\n  text: DataTypes.STRING\n}, { sequelize, modelName: 'video' });\n\nclass Comment extends Model {\n  getCommentable(options) {\n    if (!this.commentableType) return Promise.resolve(null);\n    const mixinMethodName = `get${uppercaseFirst(this.commentableType)}`;\n    return this[mixinMethodName](options);\n  }\n}\nComment.init({\n  title: DataTypes.STRING,\n  commentableId: DataTypes.INTEGER,\n  commentableType: DataTypes.STRING\n}, { sequelize, modelName: 'comment' });\n\nImage.hasMany(Comment, {\n  foreignKey: 'commentableId',\n  constraints: false,\n  scope: {\n    commentableType: 'image'\n  }\n});\nComment.belongsTo(Image, { foreignKey: 'commentableId', constraints: false });\n\nVideo.hasMany(Comment, {\n  foreignKey: 'commentableId',\n  constraints: false,\n  scope: {\n    commentableType: 'video'\n  }\n});\nComment.belongsTo(Video, { foreignKey: 'commentableId', constraints: false });\n\nComment.addHook(\"afterFind\", findResult => {\n  if (!Array.isArray(findResult)) findResult = [findResult];\n  for (const instance of findResult) {\n    if (instance.commentableType === \"image\" && instance.image !== undefined) {\n      instance.commentable = instance.image;\n    } else if (instance.commentableType === \"video\" && instance.video !== undefined) {\n      instance.commentable = instance.video;\n    }\n    // To prevent mistakes:\n    delete instance.image;\n    delete instance.dataValues.image;\n    delete instance.video;\n    delete instance.dataValues.video;\n  }\n});\n```\n\nSince the `commentableId` column references several tables (two in this case), we cannot add a `REFERENCES` constraint to it. This is why the `constraints: false` option was used.\n\nNote that, in the code above:\n\n- The *Image -\\> Comment* association defined an association scope: `{ commentableType: 'image' }`\n- The *Video -\\> Comment* association defined an association scope: `{ commentableType: 'video' }`\n\nThese scopes are automatically applied when using the association functions (as explained in the [Association Scopes](../association-scopes/index) guide). Some examples are below, with their generated SQL statements:\n\n- `image.getComments()`:\n\n  ``` sql\n  SELECT \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\n  FROM \"comments\" AS \"comment\"\n  WHERE \"comment\".\"commentableType\" = 'image' AND \"comment\".\"commentableId\" = 1;\n  ```\n\n  Here we can see that ``  `comment`.`commentableType` = 'image' `` was automatically added to the `WHERE` clause of the generated SQL. This is exactly the behavior we want.\n\n- `image.createComment({ title: 'Awesome!' })`:\n\n  ``` sql\n  INSERT INTO \"comments\" (\n    \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\n  ) VALUES (\n    DEFAULT, 'Awesome!', 'image', 1,\n    '2018-04-17 05:36:40.454 +00:00', '2018-04-17 05:36:40.454 +00:00'\n  ) RETURNING *;\n  ```\n\n- `image.addComment(comment)`:\n\n  ``` sql\n  UPDATE \"comments\"\n  SET \"commentableId\"=1, \"commentableType\"='image', \"updatedAt\"='2018-04-17 05:38:43.948 +00:00'\n  WHERE \"id\" IN (1)\n  ```\n\n### Polymorphic lazy loading[​](#polymorphic-lazy-loading \"Direct link to heading\")\n\nThe `getCommentable` instance method on `Comment` provides an abstraction for lazy loading the associated commentable - working whether the comment belongs to an Image or a Video.\n\nIt works by simply converting the `commentableType` string into a call to the correct mixin (either `getImage` or `getVideo`).\n\nNote that the `getCommentable` implementation above:\n\n- Returns `null` when no association is present (which is good);\n- Allows you to pass an options object to `getCommentable(options)`, just like any other standard Sequelize method. This is useful to specify where-conditions or includes, for example.\n\n### Polymorphic eager loading[​](#polymorphic-eager-loading \"Direct link to heading\")\n\nNow, we want to perform a polymorphic eager loading of the associated commentables for one (or more) comments. We want to achieve something similar to the following idea:\n\n``` js\nconst comment = await Comment.findOne({\n  include: [ /* What to put here? */ ]\n});\nconsole.log(comment.commentable); // This is our goal\n```\n\nThe solution is to tell Sequelize to include both Images and Videos, so that our `afterFind` hook defined above will do the work, automatically adding the `commentable` field to the instance object, providing the abstraction we want.\n\nFor example:\n\n``` js\nconst comments = await Comment.findAll({\n  include: [Image, Video]\n});\nfor (const comment of comments) {\n  const message = `Found comment #${comment.id} with ${comment.commentableType} commentable:`;\n  console.log(message, comment.commentable.toJSON());\n}\n```\n\nOutput example:\n\n``` text\nFound comment #1 with image commentable: { id: 1,\n  title: 'Meow',\n  url: 'https://placekitten.com/408/287',\n  createdAt: 2019-12-26T15:04:53.047Z,\n  updatedAt: 2019-12-26T15:04:53.047Z }\n```\n\n### Caution - possibly invalid eager/lazy loading\\![​](#caution---possibly-invalid-eagerlazy-loading \"Direct link to heading\")\n\nConsider a comment `Foo` whose `commentableId` is 2 and `commentableType` is `image`. Consider also that `Image A` and `Video X` both happen to have an id equal to 2. Conceptually, it is clear that `Video X` is not associated to `Foo`, because even though its id is 2, the `commentableType` of `Foo` is `image`, not `video`. However, this distinction is made by Sequelize only at the level of the abstractions performed by `getCommentable` and the hook we created above.\n\nThis means that if you call `Comment.findAll({ include: Video })` in the situation above, `Video X` will be eager loaded into `Foo`. Thankfully, our `afterFind` hook will delete it automatically, to help prevent bugs, but regardless it is important that you understand what is going on.\n\nThe best way to prevent this kind of mistake is to **avoid using the concrete accessors and mixins directly at all costs** (such as `.image`, `.getVideo()`, `.setImage()`, etc), always preferring the abstractions we created, such as `.getCommentable()` and `.commentable`. If you really need to access eager-loaded `.image` and `.video` for some reason, make sure you wrap that in a type check such as `comment.commentableType === 'image'`.\n\n## Configuring a Many-to-Many polymorphic association[​](#configuring-a-many-to-many-polymorphic-association \"Direct link to heading\")\n\nIn the above example, we had the models `Image` and `Video` being abstractly called *commentables*, with one *commentable* having many comments. However, one given comment would belong to a single *commentable* - this is why the whole situation is a One-to-Many polymorphic association.\n\nNow, to consider a Many-to-Many polymorphic association, instead of considering comments, we will consider tags. For convenience, instead of calling Image and Video as *commentables*, we will now call them *taggables*. One *taggable* may have several tags, and at the same time one tag can be placed in several *taggables*.\n\nThe setup for this goes as follows:\n\n- Define the junction model explicitly, specifying the two foreign keys as `tagId` and `taggableId` (this way it is a junction model for a Many-to-Many relationship between `Tag` and the abstract concept of *taggable*);\n- Define a string field called `taggableType` in the junction model;\n- Define the `belongsToMany` associations between the two models and `Tag`:\n  - Disabling constraints (i.e. using `{ constraints: false }`), since the same foreign key is referencing multiple tables;\n  - Specifying the appropriate [association scopes](../association-scopes/index);\n- Define a new instance method on the `Tag` model called `getTaggables` which calls, under the hood, the correct mixin to fetch the appropriate taggables.\n\nImplementation:\n\n``` js\nclass Tag extends Model {\n  getTaggables(options) {\n    const images = await this.getImages(options);\n    const videos = await this.getVideos(options);\n    // Concat images and videos in a single array of taggables\n    return images.concat(videos);\n  }\n}\nTag.init({\n  name: DataTypes.STRING\n}, { sequelize, modelName: 'tag' });\n\n// Here we define the junction model explicitly\nclass Tag_Taggable extends Model {}\nTag_Taggable.init({\n  tagId: {\n    type: DataTypes.INTEGER,\n    unique: 'tt_unique_constraint'\n  },\n  taggableId: {\n    type: DataTypes.INTEGER,\n    unique: 'tt_unique_constraint',\n    references: null\n  },\n  taggableType: {\n    type: DataTypes.STRING,\n    unique: 'tt_unique_constraint'\n  }\n}, { sequelize, modelName: 'tag_taggable' });\n\nImage.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'image'\n    }\n  },\n  foreignKey: 'taggableId',\n  constraints: false\n});\nTag.belongsToMany(Image, {\n  through: {\n    model: Tag_Taggable,\n    unique: false\n  },\n  foreignKey: 'tagId',\n  constraints: false\n});\n\nVideo.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'video'\n    }\n  },\n  foreignKey: 'taggableId',\n  constraints: false\n});\nTag.belongsToMany(Video, {\n  through: {\n    model: Tag_Taggable,\n    unique: false\n  },\n  foreignKey: 'tagId',\n  constraints: false\n});\n```\n\nThe `constraints: false` option disables references constraints, as the `taggableId` column references several tables, we cannot add a `REFERENCES` constraint to it.\n\nNote that:\n\n- The *Image -\\> Tag* association defined an association scope: `{ taggableType: 'image' }`\n- The *Video -\\> Tag* association defined an association scope: `{ taggableType: 'video' }`\n\nThese scopes are automatically applied when using the association functions. Some examples are below, with their generated SQL statements:\n\n- `image.getTags()`:\n\n  ``` sql\n  SELECT\n    `tag`.`id`,\n    `tag`.`name`,\n    `tag`.`createdAt`,\n    `tag`.`updatedAt`,\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\n  FROM `tags` AS `tag`\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\n    `tag`.`id` = `tag_taggable`.`tagId` AND\n    `tag_taggable`.`taggableId` = 1 AND\n    `tag_taggable`.`taggableType` = 'image';\n  ```\n\n  Here we can see that ``  `tag_taggable`.`taggableType` = 'image' `` was automatically added to the `WHERE` clause of the generated SQL. This is exactly the behavior we want.\n\n- `tag.getTaggables()`:\n\n  ``` sql\n  SELECT\n    `image`.`id`,\n    `image`.`url`,\n    `image`.`createdAt`,\n    `image`.`updatedAt`,\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\n  FROM `images` AS `image`\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\n    `image`.`id` = `tag_taggable`.`taggableId` AND\n    `tag_taggable`.`tagId` = 1;\n\n  SELECT\n    `video`.`id`,\n    `video`.`url`,\n    `video`.`createdAt`,\n    `video`.`updatedAt`,\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\n  FROM `videos` AS `video`\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\n    `video`.`id` = `tag_taggable`.`taggableId` AND\n    `tag_taggable`.`tagId` = 1;\n  ```\n\nNote that the above implementation of `getTaggables()` allows you to pass an options object to `getCommentable(options)`, just like any other standard Sequelize method. This is useful to specify where-conditions or includes, for example.\n\n### Applying scopes on the target model[​](#applying-scopes-on-the-target-model \"Direct link to heading\")\n\nIn the example above, the `scope` options (such as `scope: { taggableType: 'image' }`) were applied to the *through* model, not the *target* model, since it was used under the `through` option.\n\nWe can also apply an association scope on the target model. We can even do both at the same time.\n\nTo illustrate this, consider an extension of the above example between tags and taggables, where each tag has a status. This way, to get all pending tags of an image, we could establish another `belognsToMany` relationship between `Image` and `Tag`, this time applying a scope on the through model and another scope on the target model:\n\n``` js\nImage.belongsToMany(Tag, {\n  through: {\n    model: Tag_Taggable,\n    unique: false,\n    scope: {\n      taggableType: 'image'\n    }\n  },\n  scope: {\n    status: 'pending'\n  },\n  as: 'pendingTags',\n  foreignKey: 'taggableId',\n  constraints: false\n});\n```\n\nThis way, when calling `image.getPendingTags()`, the following SQL query will be generated:\n\n``` sql\nSELECT\n  `tag`.`id`,\n  `tag`.`name`,\n  `tag`.`status`,\n  `tag`.`createdAt`,\n  `tag`.`updatedAt`,\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\nFROM `tags` AS `tag`\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\n  `tag`.`id` = `tag_taggable`.`tagId` AND\n  `tag_taggable`.`taggableId` = 1 AND\n  `tag_taggable`.`taggableType` = 'image'\nWHERE (\n  `tag`.`status` = 'pending'\n);\n```\n\nWe can see that both scopes were applied automatically:\n\n- ``  `tag_taggable`.`taggableType` = 'image' `` was added automatically to the `INNER JOIN`;\n- ``  `tag`.`status` = 'pending' `` was added automatically to an outer where clause.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/advanced-association-concepts/polymorphic-associations/](https://sequelize.org/docs/v6/advanced-association-concepts/polymorphic-associations/)"
- name: PostgresQueryInterface
  id: class/src/dialects/postgres/query-interface.js~postgresqueryinterface
  summary: Those details contains constraintSchema, constraintName, constraintCatalog tableCatalog, tableSchema, tableName, columnName, referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName
  description: "# PostgresQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → PostgresQueryInterface\n\nThe interface that Sequelize uses to talk with Postgres database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async dropAllEnums(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/postgres/query-interface.js.html#lineNumber199) \n\nDrop all enums from database (Postgres only)\n\n#### Params:\n\n| Name    | Type                                                                                              | Attribute | Description   |\n|---------|---------------------------------------------------------------------------------------------------|-----------|---------------|\n| options | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Query options |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropEnum(enumName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/postgres/query-interface.js.html#lineNumber183) \n\nDrop specified enum from database (Postgres only)\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropTable(tableName: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/postgres/query-interface.js.html#lineNumber230) \n\nSince postgres has a special case for enums, we should drop the related enum type within the table and attribute\n\n#### Override:\n\n[QueryInterface#dropTable](../abstract/query-interface.js~queryinterface#instance-method-dropTable)\n\n#### Params:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| tableName | \\*   |           |             |\n| options   | \\*   |           |             |\n\n### public async getForeignKeyReferencesForTable(table: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/postgres/query-interface.js.html#lineNumber152) \n\nGet foreign key references details for the table\n\nThose details contains constraintSchema, constraintName, constraintCatalog tableCatalog, tableSchema, tableName, columnName, referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName. Remind: constraint informations won't return if it's sqlite.\n\n#### Override:\n\n[QueryInterface#getForeignKeyReferencesForTable](../abstract/query-interface.js~queryinterface#instance-method-getForeignKeyReferencesForTable)\n\n#### Params:\n\n| Name    | Type | Attribute | Description |\n|---------|------|-----------|-------------|\n| table   | \\*   |           |             |\n| options | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async pgListEnums(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/postgres/query-interface.js.html#lineNumber218) \n\nList all enums (Postgres only)\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/postgres/query-interface.js~PostgresQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/postgres/query-interface.js~PostgresQueryInterface.html)"
- name: Query Interface
  id: other-topics/query-interface/index
  summary: An instance of Sequelize uses something called Query Interface to communicate to the database in a dialect-agnostic way
  description: "# Query Interface\n\nAn instance of Sequelize uses something called **Query Interface** to communicate to the database in a dialect-agnostic way. Most of the methods you've learned in this manual are implemented with the help of several methods from the query interface.\n\nThe methods from the query interface are therefore lower-level methods; you should use them only if you do not find another way to do it with higher-level APIs from Sequelize. They are, of course, still higher-level than running raw queries directly (i.e., writing SQL by hand).\n\nThis guide shows a few examples, but for the full list of what it can do, and for detailed usage of each method, check the [QueryInterface API](https://sequelize.org/api/v6/class/src/dialects/abstract/query-interface.js~QueryInterface.html).\n\n## Obtaining the query interface[​](#obtaining-the-query-interface \"Direct link to heading\")\n\nFrom now on, we will call `queryInterface` the singleton instance of the [QueryInterface](https://sequelize.org/api/v6/class/src/dialects/abstract/query-interface.js~QueryInterface.html) class, which is available on your Sequelize instance:\n\n``` js\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize(/* ... */);\nconst queryInterface = sequelize.getQueryInterface();\n```\n\n## Creating a table[​](#creating-a-table \"Direct link to heading\")\n\n``` js\nqueryInterface.createTable('Person', {\n  name: DataTypes.STRING,\n  isBetaMember: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n    allowNull: false\n  }\n});\n```\n\nGenerated SQL (using SQLite):\n\n``` SQL\nCREATE TABLE IF NOT EXISTS `Person` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0\n);\n```\n\n**Note:** Consider defining a Model instead and calling `YourModel.sync()` instead, which is a higher-level approach.\n\n## Adding a column to a table[​](#adding-a-column-to-a-table \"Direct link to heading\")\n\n``` js\nqueryInterface.addColumn('Person', 'petName', { type: DataTypes.STRING });\n```\n\nGenerated SQL (using SQLite):\n\n``` sql\nALTER TABLE `Person` ADD `petName` VARCHAR(255);\n```\n\n## Changing the datatype of a column[​](#changing-the-datatype-of-a-column \"Direct link to heading\")\n\n``` js\nqueryInterface.changeColumn('Person', 'foo', {\n  type: DataTypes.FLOAT,\n  defaultValue: 3.14,\n  allowNull: false\n});\n```\n\nGenerated SQL (using MySQL):\n\n``` sql\nALTER TABLE `Person` CHANGE `foo` `foo` FLOAT NOT NULL DEFAULT 3.14;\n```\n\n## Removing a column[​](#removing-a-column \"Direct link to heading\")\n\n``` js\nqueryInterface.removeColumn('Person', 'petName', { /* query options */ });\n```\n\nGenerated SQL (using PostgreSQL):\n\n``` SQL\nALTER TABLE \"public\".\"Person\" DROP COLUMN \"petName\";\n```\n\n## Changing and removing columns in SQLite[​](#changing-and-removing-columns-in-sqlite \"Direct link to heading\")\n\nSQLite does not support directly altering and removing columns. However, Sequelize will try to work around this by recreating the whole table with the help of a backup table, inspired by [these instructions](https://www.sqlite.org/lang_altertable.html#otheralter).\n\nFor example:\n\n``` js\n// Assuming we have a table in SQLite created as follows:\nqueryInterface.createTable('Person', {\n  name: DataTypes.STRING,\n  isBetaMember: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n    allowNull: false\n  },\n  petName: DataTypes.STRING,\n  foo: DataTypes.INTEGER\n});\n\n// And we change a column:\nqueryInterface.changeColumn('Person', 'foo', {\n  type: DataTypes.FLOAT,\n  defaultValue: 3.14,\n  allowNull: false\n});\n```\n\nThe following SQL calls are generated for SQLite:\n\n``` sql\nPRAGMA TABLE_INFO(`Person`);\n\nCREATE TABLE IF NOT EXISTS `Person_backup` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\n  `petName` VARCHAR(255)\n);\n\nINSERT INTO `Person_backup`\n  SELECT\n    `name`,\n    `isBetaMember`,\n    `foo`,\n    `petName`\n  FROM `Person`;\n\nDROP TABLE `Person`;\n\nCREATE TABLE IF NOT EXISTS `Person` (\n  `name` VARCHAR(255),\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\n  `petName` VARCHAR(255)\n);\n\nINSERT INTO `Person`\n  SELECT\n    `name`,\n    `isBetaMember`,\n    `foo`,\n    `petName`\n  FROM `Person_backup`;\n\nDROP TABLE `Person_backup`;\n```\n\n## Other[​](#other \"Direct link to heading\")\n\nAs mentioned in the beginning of this guide, there is a lot more to the Query Interface available in Sequelize! Check the [QueryInterface API](https://sequelize.org/api/v6/class/src/dialects/abstract/query-interface.js~QueryInterface.html) for a full list of what can be done.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/query-interface/](https://sequelize.org/docs/v6/other-topics/query-interface/)"
- name: QueryError
  id: class/src/errors/query-error.ts~queryerror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# QueryError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → QueryError\n\nThrown when a query is passed invalid options (see message for details)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/query-error.ts~QueryError.html](https://sequelize.org/api/v6/class/src/errors/query-error.ts~QueryError.html)"
- name: Querying
  id: moved/querying/index
  summary: The contents of this page were moved to other specialized guides
  description: "# Querying\n\nThe contents of this page were moved to other specialized guides.\n\nIf you're here, you might be looking for these topics:\n\n- **Core Concepts**\n  - [Model Querying - Basics](../../core-concepts/model-querying-basics/index)\n  - [Model Querying - Finders](../../core-concepts/model-querying-finders/index)\n  - [Raw Queries](../../core-concepts/raw-queries/index)\n  - [Associations](../../core-concepts/assocs/index)\n- **Other Topics**\n  - [Dialect-Specific Things](../../other-topics/dialect-specific-things/index)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/moved/querying/](https://sequelize.org/docs/v6/moved/querying/)"
- name: QueryInterface
  id: class/src/dialects/abstract/query-interface.js~queryinterface
  summary: This method returns an array of hashes containing information about all attributes in the table
  description: "# QueryInterface\n\n#### Direct Subclass:\n\n[Db2QueryInterface](../db2/query-interface.js~db2queryinterface), [MSSqlQueryInterface](../mssql/query-interface.js~mssqlqueryinterface), [MySQLQueryInterface](../mysql/query-interface.js~mysqlqueryinterface), [OracleQueryInterface](../oracle/query-interface.js~oraclequeryinterface), [PostgresQueryInterface](../postgres/query-interface.js~postgresqueryinterface), [SQLiteQueryInterface](../sqlite/query-interface.js~sqlitequeryinterface), [SnowflakeQueryInterface](../snowflake/query-interface.js~snowflakequeryinterface)\n\nThe interface that Sequelize uses to talk to all databases\n\n## Method Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async addColumn(table: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), key: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attribute: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber423) \n\nAdd a new column to a table\n\n``` lang-js\nqueryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   after: 'columnB' // after option is only supported by MySQL\n});\n```\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async addConstraint(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber756) \n\nAdd a constraint to a table\n\nAvailable constraints:\n\n- UNIQUE\n- DEFAULT (MSSQL only)\n- CHECK (MySQL - Ignored by the database engine )\n- FOREIGN KEY\n- PRIMARY KEY\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\nUNIQUE\n\n``` prettyprint\nqueryInterface.addConstraint('Users', {\n  fields: ['email'],\n  type: 'unique',\n  name: 'custom_unique_constraint_name'\n});\n```\n\nCHECK\n\n``` prettyprint\nqueryInterface.addConstraint('Users', {\n  fields: ['roles'],\n  type: 'check',\n  where: {\n     roles: ['user', 'admin', 'moderator', 'guest']\n  }\n});\n```\n\nDefault - MSSQL only\n\n``` prettyprint\nqueryInterface.addConstraint('Users', {\n   fields: ['roles'],\n   type: 'default',\n   defaultValue: 'guest'\n});\n```\n\nPrimary Key\n\n``` prettyprint\nqueryInterface.addConstraint('Users', {\n   fields: ['username'],\n   type: 'primary key',\n   name: 'custom_primary_constraint_name'\n});\n```\n\nForeign Key\n\n``` prettyprint\nqueryInterface.addConstraint('Posts', {\n  fields: ['username'],\n  type: 'foreign key',\n  name: 'custom_fkey_constraint_name',\n  references: { //Required field\n    table: 'target_table_name',\n    field: 'target_column_name'\n  },\n  onDelete: 'cascade',\n  onUpdate: 'cascade'\n});\n```\n\nComposite Foreign Key\n\n``` prettyprint\nqueryInterface.addConstraint('TableName', {\n  fields: ['source_column_name', 'other_source_column_name'],\n  type: 'foreign key',\n  name: 'custom_fkey_constraint_name',\n  references: { //Required field\n    table: 'target_table_name',\n    fields: ['target_column_name', 'other_target_column_name']\n  },\n  onDelete: 'cascade',\n  onUpdate: 'cascade'\n});\n```\n\n### public async addIndex(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), attributes: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), rawTablename: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber570) \n\nAdd an index to a column\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async bulkDelete(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), where: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), model: [Model](../../model.js~model)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber979) \n\nDelete multiple records from a table\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async bulkInsert(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), records: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), attributes: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber877) \n\nInsert multiple records into a table\n\n#### Params:\n\n| Name       | Type                                                                                              | Attribute | Description                                          |\n|------------|---------------------------------------------------------------------------------------------------|-----------|------------------------------------------------------|\n| tableName  | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | Table name to insert record to                       |\n| records    | [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)   |           | List of records to insert                            |\n| options    | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Various options, please see Model.bulkCreate options |\n| attributes | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Various attributes mapped by field name              |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\nqueryInterface.bulkInsert('roles', [{\n   label: 'user',\n   createdAt: new Date(),\n   updatedAt: new Date()\n }, {\n   label: 'admin',\n   createdAt: new Date(),\n   updatedAt: new Date()\n }]);\n```\n\n### public async bulkUpdate(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), values: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), identifier: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), attributes: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber920) \n\nUpdate multiple records of a table\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\nqueryInterface.bulkUpdate('roles', {\n    label: 'admin',\n  }, {\n    userType: 3,\n  },\n);\n```\n\n### public async changeColumn(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attributeName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), dataTypeOrOptions: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber486) \n\nChange a column definition\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async createDatabase(database: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber32) \n\nCreate a database\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async createFunction(functionName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), params: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), returnType: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), language: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), body: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), optionsArray: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber1146) \n\nCreate an SQL function\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\nqueryInterface.createFunction(\n  'someFunction',\n  [\n    {type: 'integer', name: 'param', direction: 'IN'}\n  ],\n  'integer',\n  'plpgsql',\n  'RETURN param + 1;',\n  [\n    'IMMUTABLE',\n    'LEAKPROOF'\n  ],\n  {\n   variables:\n     [\n       {type: 'integer', name: 'myVar', default: 100}\n     ],\n     force: true\n  };\n);\n```\n\n### public async createSchema(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber60) \n\nCreate a schema\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async createTable(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attributes: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), model: [Model](../../model.js~model)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber187) \n\nCreate a table with given set of attributes\n\n``` lang-js\nqueryInterface.createTable(\n  'nameOfTheNewTable',\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    createdAt: {\n      type: Sequelize.DATE\n    },\n    updatedAt: {\n      type: Sequelize.DATE\n    },\n    attr1: Sequelize.STRING,\n    attr2: Sequelize.INTEGER,\n    attr3: {\n      type: Sequelize.BOOLEAN,\n      defaultValue: false,\n      allowNull: false\n    },\n    //foreign key usage\n    attr4: {\n      type: Sequelize.INTEGER,\n      references: {\n        model: 'another_table_name',\n        key: 'id'\n      },\n      onUpdate: 'cascade',\n      onDelete: 'cascade'\n    }\n  },\n  {\n    engine: 'MYISAM',    // default: 'InnoDB'\n    charset: 'latin1',   // default: null\n    schema: 'public',    // default: public, PostgreSQL only.\n    comment: 'my table', // comment for table\n    collate: 'latin1_danish_ci' // collation, MYSQL only\n  }\n)\n```\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async describeTable(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\\>  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber367) \n\nDescribe a table structure\n\nThis method returns an array of hashes containing information about all attributes in the table.\n\n``` lang-js\n{\n   name: {\n     type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n     allowNull:    true,\n     defaultValue: null\n   },\n   isBetaMember: {\n     type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n     allowNull:    false,\n     defaultValue: false\n   }\n}\n```\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                          |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\\> |\n\n### public async dropAllSchemas(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber87) \n\nDrop all schemas\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropAllTables(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber285) \n\nDrop all tables from database\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropDatabase(database: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber46) \n\nDrop a database\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropFunction(functionName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), params: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber1173) \n\nDrop an SQL function\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\nqueryInterface.dropFunction(\n  'someFunction',\n  [\n    {type: 'varchar', name: 'param1', direction: 'IN'},\n    {type: 'integer', name: 'param2', direction: 'INOUT'}\n  ]\n);\n```\n\n### public async dropSchema(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber74) \n\nDrop a schema\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropTable(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber258) \n\nDrop a table from database\n\n#### Params:\n\n| Name      | Type                                                                                              | Attribute | Description        |\n|-----------|---------------------------------------------------------------------------------------------------|-----------|--------------------|\n| tableName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | Table name to drop |\n| options   | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Query options      |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async getForeignKeyReferencesForTable(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber650) \n\nGet foreign key references details for the table\n\nThose details contains constraintSchema, constraintName, constraintCatalog tableCatalog, tableSchema, tableName, columnName, referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName. Remind: constraint informations won't return if it's sqlite.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async getForeignKeysForTables(tableNames: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\], options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber612) \n\nReturns all foreign key constraints of requested tables\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public quoteIdentifier(identifier: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), force: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber463) \n\nSplit a list of identifiers by \".\" and quote each part\n\n#### Params:\n\n| Name       | Type                                                                                                | Attribute | Description |\n|------------|-----------------------------------------------------------------------------------------------------|-----------|-------------|\n| identifier | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)   |           |             |\n| force      | [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |           |             |\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |\n\n### public quoteIdentifiers(identifiers: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber474) \n\nSplit a list of identifiers by \".\" and quote each part.\n\n#### Params:\n\n| Name        | Type                                                                                              | Attribute | Description |\n|-------------|---------------------------------------------------------------------------------------------------|-----------|-------------|\n| identifiers | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           |             |\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |\n\n### public async removeColumn(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attributeName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber440) \n\nRemove a column from a table\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async removeConstraint(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), constraintName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber783) \n\nRemove a constraint from a table\n\n#### Params:\n\n| Name           | Type                                                                                              | Attribute | Description                        |\n|----------------|---------------------------------------------------------------------------------------------------|-----------|------------------------------------|\n| tableName      | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | Table name to drop constraint from |\n| constraintName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | Constraint name                    |\n| options        | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Query options                      |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async removeIndex(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), indexNameOrAttributes: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\\[\\], options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber669) \n\nRemove an already existing index from a table\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async renameColumn(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attrNameBefore: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attrNameAfter: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber526) \n\nRename a column\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async renameFunction(oldFunctionName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), params: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), newFunctionName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber1202) \n\nRename an SQL function\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\nqueryInterface.renameFunction(\n  'fooFunction',\n  [\n    {type: 'varchar', name: 'param1', direction: 'IN'},\n    {type: 'integer', name: 'param2', direction: 'INOUT'}\n  ],\n  'barFunction'\n);\n```\n\n### public async renameTable(before: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), after: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber314) \n\nRename a table\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async showAllSchemas(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\>  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber104) \n\nShow all schemas\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                                                                                                                        |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\> |\n\n### public async tableExists(tableName: TableName, options: QueryOptions): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\>  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber239) \n\nReturns a promise that will resolve to true if the table exists in the database, false otherwise.\n\n#### Params:\n\n| Name      | Type         | Attribute | Description           |\n|-----------|--------------|-----------|-----------------------|\n| tableName | TableName    |           | The name of the table |\n| options   | QueryOptions |           | Query options         |\n\n#### Return:\n\n|                                                                                                                                                                                                            |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\\> |\n\n### public async upsert(tableName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), insertValues: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), updateValues: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), where: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\>  [source](https://sequelize.org/api/v6/file/src/dialects/abstract/query-interface.js.html#lineNumber812) \n\nUpsert\n\n#### Params:\n\n| Name         | Type                                                                                              | Attribute | Description                                                           |\n|--------------|---------------------------------------------------------------------------------------------------|-----------|-----------------------------------------------------------------------|\n| tableName    | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | table to upsert on                                                    |\n| insertValues | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | values to be inserted, mapped to field name                           |\n| updateValues | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | values to be updated, mapped to field name                            |\n| where        | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | where conditions, which can be used for UPDATE part when INSERT fails |\n| options      | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | query options                                                         |\n\n#### Return:\n\n|                                                                                                                                                                                                                                                                                                                |                                                |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), ?[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\\> | Resolves an array with \\<created, primaryKey\\> |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/abstract/query-interface.js~QueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/abstract/query-interface.js~QueryInterface.html)"
- name: RANGE
  id: class/src/data-types.js~range
  summary: Range types are data types representing a range of values of some element type (called the range's subtype)
  description: "# RANGE\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → RANGE\n\nRange types are data types representing a range of values of some element type (called the range's subtype). Only available in Postgres. See [the Postgres documentation](https://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(subtype: ABSTRACT)  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber614) \n\n#### Params:\n\n| Name    | Type     | Attribute | Description                           |\n|---------|----------|-----------|---------------------------------------|\n| subtype | ABSTRACT |           | A subtype for range, like RANGE(DATE) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~RANGE.html](https://sequelize.org/api/v6/class/src/data-types.js~RANGE.html)"
- name: Raw Queries
  id: core-concepts/raw-queries/index
  summary: As there are often use cases in which it is just easier to execute raw / already prepared SQL queries, you can use the sequelize.query method
  description: "# Raw Queries\n\nAs there are often use cases in which it is just easier to execute raw / already prepared SQL queries, you can use the [`sequelize.query`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-query) method.\n\nBy default the function will return two arguments - a results array, and an object containing metadata (such as amount of affected rows, etc). Note that since this is a raw query, the metadata are dialect specific. Some dialects return the metadata \"within\" the results object (as properties on an array). However, two arguments will always be returned, but for MSSQL and MySQL it will be two references to the same object.\n\n``` js\nconst [results, metadata] = await sequelize.query(\"UPDATE users SET y = 42 WHERE x = 12\");\n// Results will be an empty array and metadata will contain the number of affected rows.\n```\n\nIn cases where you don't need to access the metadata you can pass in a query type to tell sequelize how to format the results. For example, for a simple select query you could do:\n\n``` js\nconst { QueryTypes } = require('sequelize');\nconst users = await sequelize.query(\"SELECT * FROM `users`\", { type: QueryTypes.SELECT });\n// We didn't need to destructure the result here - the results were returned directly\n```\n\nSeveral other query types are available. [Peek into the source for details](https://github.com/sequelize/sequelize/blob/main/src/query-types.ts).\n\nA second option is the model. If you pass a model the returned data will be instances of that model.\n\n``` js\n// Callee is the model definition. This allows you to easily map a query to a predefined model\nconst projects = await sequelize.query('SELECT * FROM projects', {\n  model: Projects,\n  mapToModel: true // pass true here if you have any mapped fields\n});\n// Each element of `projects` is now an instance of Project\n```\n\nSee more options in the [query API reference](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-query). Some examples:\n\n``` js\nconst { QueryTypes } = require('sequelize');\nawait sequelize.query('SELECT 1', {\n  // A function (or false) for logging your queries\n  // Will get called for every SQL query that gets sent\n  // to the server.\n  logging: console.log,\n\n  // If plain is true, then sequelize will only return the first\n  // record of the result set. In case of false it will return all records.\n  plain: false,\n\n  // Set this to true if you don't have a model definition for your query.\n  raw: false,\n\n  // The type of query you are executing. The query type affects how results are formatted before they are passed back.\n  type: QueryTypes.SELECT\n});\n\n// Note the second argument being null!\n// Even if we declared a callee here, the raw: true would\n// supersede and return a raw object.\nconsole.log(await sequelize.query('SELECT * FROM projects', { raw: true }));\n```\n\n## \"Dotted\" attributes and the `nest` option[​](#dotted-attributes-and-the-nest-option \"Direct link to heading\")\n\nIf an attribute name of the table contains dots, the resulting objects can become nested objects by setting the `nest: true` option. This is achieved with [dottie.js](https://github.com/mickhansen/dottie.js/) under the hood. See below:\n\n- Without `nest: true`:\n\n  ``` js\n  const { QueryTypes } = require('sequelize');\n  const records = await sequelize.query('select 1 as `foo.bar.baz`', {\n    type: QueryTypes.SELECT\n  });\n  console.log(JSON.stringify(records[0], null, 2));\n  ```\n\n  ``` json\n  {\n    \"foo.bar.baz\": 1\n  }\n  ```\n\n- With `nest: true`:\n\n  ``` js\n  const { QueryTypes } = require('sequelize');\n  const records = await sequelize.query('select 1 as `foo.bar.baz`', {\n    nest: true,\n    type: QueryTypes.SELECT\n  });\n  console.log(JSON.stringify(records[0], null, 2));\n  ```\n\n  ``` json\n  {\n    \"foo\": {\n      \"bar\": {\n        \"baz\": 1\n      }\n    }\n  }\n  ```\n\n## Replacements[​](#replacements \"Direct link to heading\")\n\nReplacements in a query can be done in two different ways, either using named parameters (starting with `:`), or unnamed, represented by a `?`. Replacements are passed in the options object.\n\n- If an array is passed, `?` will be replaced in the order that they appear in the array\n- If an object is passed, `:key` will be replaced with the keys from that object. If the object contains keys not found in the query or vice versa, an exception will be thrown.\n\n``` js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status = ?',\n  {\n    replacements: ['active'],\n    type: QueryTypes.SELECT\n  }\n);\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status = :status',\n  {\n    replacements: { status: 'active' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\nArray replacements will automatically be handled, the following query searches for projects where the status matches an array of values.\n\n``` js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status IN(:status)',\n  {\n    replacements: { status: ['active', 'inactive'] },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\nTo use the wildcard operator `%`, append it to your replacement. The following query matches users with names that start with 'ben'.\n\n``` js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM users WHERE name LIKE :search_name',\n  {\n    replacements: { search_name: 'ben%' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\n## Bind Parameter[​](#bind-parameter \"Direct link to heading\")\n\nBind parameters are like replacements. Except replacements are escaped and inserted into the query by sequelize before the query is sent to the database, while bind parameters are sent to the database outside the SQL query text. A query can have either bind parameters or replacements. Bind parameters are referred to by either $1, $2, ... (numeric) or $key (alpha-numeric). This is independent of the dialect.\n\n- If an array is passed, `$1` is bound to the 1st element in the array (`bind[0]`)\n- If an object is passed, `$key` is bound to `object['key']`. Each key must begin with a non-numeric char. `$1` is not a valid key, even if `object['1']` exists.\n- In either case `$$` can be used to escape a literal `$` sign.\n\nThe array or object must contain all bound values or Sequelize will throw an exception. This applies even to cases in which the database may ignore the bound parameter.\n\nThe database may add further restrictions to this. Bind parameters cannot be SQL keywords, nor table or column names. They are also ignored in quoted text or data. In PostgreSQL it may also be needed to typecast them, if the type cannot be inferred from the context `$1::varchar`.\n\n``` js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $1',\n  {\n    bind: ['active'],\n    type: QueryTypes.SELECT\n  }\n);\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $status',\n  {\n    bind: { status: 'active' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/raw-queries/](https://sequelize.org/docs/v6/core-concepts/raw-queries/)"
- name: Read Replication
  id: other-topics/read-replication/index
  summary: Sequelize supports read replication, i.e
  description: "# Read Replication\n\nSequelize supports [read replication](https://en.wikipedia.org/wiki/Replication_%28computing%29#Database_replication), i.e. having multiple servers that you can connect to when you want to do a SELECT query. When you do read replication, you specify one or more servers to act as read replicas, and one server to act as the main writer, which handles all writes and updates and propagates them to the replicas (note that the actual replication process is **not** handled by Sequelize, but should be set up by database backend).\n\n``` js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mysql',\n  port: 3306,\n  replication: {\n    read: [\n      { host: '8.8.8.8', username: 'read-1-username', password: process.env.READ_DB_1_PW },\n      { host: '9.9.9.9', username: 'read-2-username', password: process.env.READ_DB_2_PW }\n    ],\n    write: { host: '1.1.1.1', username: 'write-username', password: process.env.WRITE_DB_PW }\n  },\n  pool: { // If you want to override the options used for the read/write pool you can do so here\n    max: 20,\n    idle: 30000\n  },\n})\n```\n\nIf you have any general settings that apply to all replicas you do not need to provide them for each instance. In the code above, database name and port is propagated to all replicas. The same will happen for user and password, if you leave them out for any of the replicas. Each replica has the following options:`host`,`port`,`username`,`password`,`database`.\n\nSequelize uses a pool to manage connections to your replicas. Internally Sequelize will maintain two pools created using `pool` configuration.\n\nIf you want to modify these, you can pass pool as an options when instantiating Sequelize, as shown above.\n\nEach `write` or `useMaster: true` query will use write pool. For `SELECT` read pool will be used. Read replica are switched using a basic round robin scheduling.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/read-replication/](https://sequelize.org/docs/v6/other-topics/read-replication/)"
- name: REAL
  id: class/src/data-types.js~real
  summary: Floating point number (4-byte precision)
  description: "# REAL\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → REAL\n\nFloating point number (4-byte precision).\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), decimals: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber307) \n\n#### Override:\n\n[NUMBER#constructor](data-types.js~number#instance-constructor-constructor)\n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~REAL.html](https://sequelize.org/api/v6/class/src/data-types.js~REAL.html)"
- name: References
  id: identifiers
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# References\n\n[TABLE]\n\n## associations\n\n[TABLE]\n\n## dialects/abstract\n\n[TABLE]\n\n## dialects/db2\n\n[TABLE]\n\n## dialects/mssql\n\n[TABLE]\n\n## dialects/mysql\n\n[TABLE]\n\n## dialects/oracle\n\n[TABLE]\n\n## dialects/postgres\n\n[TABLE]\n\n## dialects/snowflake\n\n[TABLE]\n\n## dialects/sqlite\n\n[TABLE]\n\n## errors\n\n[TABLE]\n\n## errors/connection\n\n[TABLE]\n\n## errors/database\n\n[TABLE]\n\n## errors/validation\n\n[TABLE]\n\n## utils\n\n[TABLE]\n\nDirectories\n\n[associations](#associations)\n\n[abstract](#dialects-abstract)\n\n[db2](#dialects-db2)\n\n[mssql](#dialects-mssql)\n\n[mysql](#dialects-mysql)\n\n[oracle](#dialects-oracle)\n\n[postgres](#dialects-postgres)\n\n[snowflake](#dialects-snowflake)\n\n[sqlite](#dialects-sqlite)\n\n[errors](#errors)\n\n[connection](#errors-connection)\n\n[database](#errors-database)\n\n[validation](#errors-validation)\n\n[utils](#utils)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/identifiers.html](https://sequelize.org/api/v6/identifiers.html)"
- name: Resources
  id: other-topics/resources/index
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# Resources\n\n## Addons & Plugins[​](#addons--plugins \"Direct link to heading\")\n\n### ACL[​](#acl \"Direct link to heading\")\n\n- [ssacl](https://github.com/pumpupapp/ssacl)\n- [ssacl-attribute-roles](https://github.com/mickhansen/ssacl-attribute-roles)\n- [SequelizeGuard](https://github.com/lotivo/sequelize-acl) - Role, Permission based Authorization for Sequelize.\n\n### Auto Code Generation & Scaffolding[​](#auto-code-generation--scaffolding \"Direct link to heading\")\n\n- [meteor modeler](https://www.datensen.com/) - Desktop tool for visual definition of Sequelize models and asssociations.\n- [sequelize-ui](https://github.com/tomjschuster/sequelize-ui) - Online tool for building models, relations and more.\n- [sequelizer](https://github.com/andyforever/sequelizer) - A GUI Desktop App for generating Sequelize models. Support for Mysql, Mariadb, Postgres, Sqlite, Mssql.\n- [sequelize-auto](https://github.com/sequelize/sequelize-auto) Generating models for SequelizeJS via the command line is another choice.\n- [pg-generator](https://www.pg-generator.com/builtin-templates/sequelize/) - Auto generate/scaffold Sequelize models for PostgreSQL database.\n- [sequelizejs-decorators](https://www.npmjs.com/package/sequelizejs-decorators) decorators for composing sequelize models\n\n### Autoloader[​](#autoloader \"Direct link to heading\")\n\n- [sequelize-autoload](https://github.com/boxsnake-nodejs/sequelize-autoload) - An autoloader for Sequelize, inspired by [PSR-0](https://www.php-fig.org/psr/psr-0/) and [PSR-4](https://www.php-fig.org/psr/psr-4/).\n\n### Bcrypt[​](#bcrypt \"Direct link to heading\")\n\n- [sequelize-bcrypt](https://github.com/mattiamalonni/sequelize-bcrypt) - Utility to integrate bcrypt into sequelize models\n\n### Caching[​](#caching \"Direct link to heading\")\n\n- [sequelize-transparent-cache](https://github.com/DanielHreben/sequelize-transparent-cache)\n\n### Filters[​](#filters \"Direct link to heading\")\n\n- [sequelize-transforms](https://www.npmjs.com/package/sequelize-transforms) - Add configurable attribute transforms.\n\n### Fixtures / mock data[​](#fixtures--mock-data \"Direct link to heading\")\n\n- [Fixer](https://github.com/olalonde/fixer)\n- [Sequelize-fixtures](https://github.com/domasx2/sequelize-fixtures)\n- [Sequelize-fixture](https://github.com/xudejian/sequelize-fixture)\n\n### Hierarchies[​](#hierarchies \"Direct link to heading\")\n\n- [sequelize-hierarchy](https://www.npmjs.com/package/sequelize-hierarchy) - Nested hierarchies for Sequelize.\n\n### Historical records / Time travel[​](#historical-records--time-travel \"Direct link to heading\")\n\n- [sequelize-temporal](https://github.com/bonaval/sequelize-temporal) - Temporal tables (aka historical records)\n\n### Joi[​](#joi \"Direct link to heading\")\n\n- [sequelize-joi](https://github.com/mattiamalonni/sequelize-joi) - Allows specifying [Joi](https://github.com/sideway/joi) validation schema for model attributes in Sequelize.\n\n### Migrations[​](#migrations \"Direct link to heading\")\n\n- [umzug](https://github.com/sequelize/umzug)\n\n### Slugification[​](#slugification \"Direct link to heading\")\n\n- [sequelize-slugify](https://www.npmjs.com/package/sequelize-slugify) - Add slugs to sequelize models\n\n### Tokens[​](#tokens \"Direct link to heading\")\n\n- [sequelize-tokenify](https://github.com/pipll/sequelize-tokenify) - Add unique tokens to sequelize models\n\n### Miscellaneous[​](#miscellaneous \"Direct link to heading\")\n\n- [sequelize-deep-update](https://www.npmjs.com/package/sequelize-deep-update) - Update a sequelize instance and its included associated instances with new properties.\n- [sequelize-noupdate-attributes](https://www.npmjs.com/package/sequelize-noupdate-attributes) - Adds no update/readonly attributes support to models.\n- [sqlcommenter-sequelize](https://github.com/google/sqlcommenter/tree/master/nodejs/sqlcommenter-nodejs/packages/sqlcommenter-sequelize) A [sqlcommenter](https://google.github.io/sqlcommenter/) plugin with [support for Sequelize](https://google.github.io/sqlcommenter/node/sequelize/) to augment SQL statements with comments that can be used later to correlate application code with SQL statements.\n- [automated-express-backend](https://github.com/ruyd/automated-express-backend) - Sample Sequelize Backend with runtime generation of API\n- [@rematter/paranoid-sql](https://www.npmjs.com/package/@rematter/paranoid-sql) - Add conditions to verify rows are not soft deleted.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/resources/](https://sequelize.org/docs/v6/other-topics/resources/)"
- name: Scopes
  id: other-topics/scopes/index
  summary: Scopes are used to help you reuse code
  description: "# Scopes\n\nScopes are used to help you reuse code. You can define commonly used queries, specifying options such as `where`, `include`, `limit`, etc.\n\nThis guide concerns model scopes. You might also be interested in the [guide for association scopes](../../advanced-association-concepts/association-scopes/index), which are similar but not the same thing.\n\n## Definition[​](#definition \"Direct link to heading\")\n\nScopes are defined in the model definition and can be finder objects, or functions returning finder objects - except for the default scope, which can only be an object:\n\n``` js\nclass Project extends Model {}\nProject.init({\n  // Attributes\n}, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    },\n    activeUsers: {\n      include: [\n        { model: User, where: { active: true } }\n      ]\n    },\n    random() {\n      return {\n        where: {\n          someNumber: Math.random()\n        }\n      }\n    },\n    accessLevel(value) {\n      return {\n        where: {\n          accessLevel: {\n            [Op.gte]: value\n          }\n        }\n      }\n    },\n    sequelize,\n    modelName: 'project'\n  }\n});\n```\n\nYou can also add scopes after a model has been defined by calling [`YourModel.addScope`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-addScope). This is especially useful for scopes with includes, where the model in the include might not be defined at the time the other model is being defined.\n\nThe default scope is always applied. This means, that with the model definition above, `Project.findAll()` will create the following query:\n\n``` sql\nSELECT * FROM projects WHERE active = true\n```\n\nThe default scope can be removed by calling `.unscoped()`, `.scope(null)`, or by invoking another scope:\n\n``` js\nawait Project.scope('deleted').findAll(); // Removes the default scope\n```\n\n``` sql\nSELECT * FROM projects WHERE deleted = true\n```\n\nIt is also possible to include scoped models in a scope definition. This allows you to avoid duplicating `include`, `attributes` or `where` definitions. Using the above example, and invoking the `active` scope on the included User model (rather than specifying the condition directly in that include object):\n\n``` js\n// The `activeUsers` scope defined in the example above could also have been defined this way:\nProject.addScope('activeUsers', {\n  include: [\n    { model: User.scope('active') }\n  ]\n});\n```\n\n## Usage[​](#usage \"Direct link to heading\")\n\nScopes are applied by calling `.scope` on the model definition, passing the name of one or more scopes. `.scope` returns a fully functional model instance with all the regular methods: `.findAll`, `.update`, `.count`, `.destroy` etc. You can save this model instance and reuse it later:\n\n``` js\nconst DeletedProjects = Project.scope('deleted');\nawait DeletedProjects.findAll();\n\n// The above is equivalent to:\nawait Project.findAll({\n  where: {\n    deleted: true\n  }\n});\n```\n\nScopes apply to `.find`, `.findAll`, `.count`, `.update`, `.increment` and `.destroy`.\n\nScopes which are functions can be invoked in two ways. If the scope does not take any arguments it can be invoked as normally. If the scope takes arguments, pass an object:\n\n``` js\nawait Project.scope('random', { method: ['accessLevel', 19] }).findAll();\n```\n\nGenerated SQL:\n\n``` sql\nSELECT * FROM projects WHERE someNumber = 42 AND accessLevel >= 19\n```\n\n## Merging[​](#merging \"Direct link to heading\")\n\nSeveral scopes can be applied simultaneously by passing an array of scopes to `.scope`, or by passing the scopes as consecutive arguments.\n\n``` js\n// These two are equivalent\nawait Project.scope('deleted', 'activeUsers').findAll();\nawait Project.scope(['deleted', 'activeUsers']).findAll();\n```\n\nGenerated SQL:\n\n``` sql\nSELECT * FROM projects\nINNER JOIN users ON projects.userId = users.id\nWHERE projects.deleted = true\nAND users.active = true\n```\n\nIf you want to apply another scope alongside the default scope, pass the key `defaultScope` to `.scope`:\n\n``` js\nawait Project.scope('defaultScope', 'deleted').findAll();\n```\n\nGenerated SQL:\n\n``` sql\nSELECT * FROM projects WHERE active = true AND deleted = true\n```\n\nWhen invoking several scopes, keys from subsequent scopes will overwrite previous ones (similarly to [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)), except for `where` and `include`, which will be merged. Consider two scopes:\n\n``` js\nYourModel.addScope('scope1', {\n  where: {\n    firstName: 'bob',\n    age: {\n      [Op.gt]: 20\n    }\n  },\n  limit: 2\n});\nYourModel.addScope('scope2', {\n  where: {\n    age: {\n      [Op.lt]: 30\n    }\n  },\n  limit: 10\n});\n```\n\nUsing `.scope('scope1', 'scope2')` will yield the following WHERE clause:\n\n``` sql\nWHERE firstName = 'bob' AND age < 30 LIMIT 10\n```\n\nNote how `limit` and `age` are overwritten by `scope2`, while `firstName` is preserved. The `limit`, `offset`, `order`, `paranoid`, `lock` and `raw` fields are overwritten, while `where` is by default shallowly merged (meaning that identical keys will be overwritten). If the flag `whereMergeStrategy` is set to `and` (on the model or on the sequelize instance), `where` fields will be merged using the `and` operator.\n\nFor instance, if `YourModel` was initialized as such:\n\n``` js\nYourModel.init({ /* attributes */ }, {\n  // ... other init options\n  whereMergeStrategy: 'and',\n});\n```\n\nUsing `.scope('scope1', 'scope2')` will yield the following WHERE clause:\n\n``` sql\nWHERE firstName = 'bob' AND age > 20 AND age < 30 LIMIT 10\n```\n\nNote that `attributes` keys of multiple applied scopes are merged in such a way that `attributes.exclude` are always preserved. This allows merging several scopes and never leaking sensitive fields in final scope.\n\nThe same merge logic applies when passing a find object directly to `findAll` (and similar finders) on a scoped model:\n\n``` js\nProject.scope('deleted').findAll({\n  where: {\n    firstName: 'john'\n  }\n})\n```\n\nGenerated where clause:\n\n``` sql\nWHERE deleted = true AND firstName = 'john'\n```\n\nHere the `deleted` scope is merged with the finder. If we were to pass `where: { firstName: 'john', deleted: false }` to the finder, the `deleted` scope would be overwritten.\n\n### Merging includes[​](#merging-includes \"Direct link to heading\")\n\nIncludes are merged recursively based on the models being included. This is a very powerful merge, added on v5, and is better understood with an example.\n\nConsider the models `Foo`, `Bar`, `Baz` and `Qux`, with One-to-Many associations as follows:\n\n``` js\nconst Foo = sequelize.define('Foo', { name: Sequelize.STRING });\nconst Bar = sequelize.define('Bar', { name: Sequelize.STRING });\nconst Baz = sequelize.define('Baz', { name: Sequelize.STRING });\nconst Qux = sequelize.define('Qux', { name: Sequelize.STRING });\nFoo.hasMany(Bar, { foreignKey: 'fooId' });\nBar.hasMany(Baz, { foreignKey: 'barId' });\nBaz.hasMany(Qux, { foreignKey: 'bazId' });\n```\n\nNow, consider the following four scopes defined on Foo:\n\n``` js\nFoo.addScope('includeEverything', {\n  include: {\n    model: Bar,\n    include: [{\n      model: Baz,\n      include: Qux\n    }]\n  }\n});\n\nFoo.addScope('limitedBars', {\n  include: [{\n    model: Bar,\n    limit: 2\n  }]\n});\n\nFoo.addScope('limitedBazs', {\n  include: [{\n    model: Bar,\n    include: [{\n      model: Baz,\n      limit: 2\n    }]\n  }]\n});\n\nFoo.addScope('excludeBazName', {\n  include: [{\n    model: Bar,\n    include: [{\n      model: Baz,\n      attributes: {\n        exclude: ['name']\n      }\n    }]\n  }]\n});\n```\n\nThese four scopes can be deeply merged easily, for example by calling `Foo.scope('includeEverything', 'limitedBars', 'limitedBazs', 'excludeBazName').findAll()`, which would be entirely equivalent to calling the following:\n\n``` js\nawait Foo.findAll({\n  include: {\n    model: Bar,\n    limit: 2,\n    include: [{\n      model: Baz,\n      limit: 2,\n      attributes: {\n        exclude: ['name']\n      },\n      include: Qux\n    }]\n  }\n});\n\n// The above is equivalent to:\nawait Foo.scope([\n  'includeEverything',\n  'limitedBars',\n  'limitedBazs',\n  'excludeBazName'\n]).findAll();\n```\n\nObserve how the four scopes were merged into one. The includes of scopes are merged based on the model being included. If one scope includes model A and another includes model B, the merged result will include both models A and B. On the other hand, if both scopes include the same model A, but with different options (such as nested includes or other attributes), those will be merged recursively, as shown above.\n\nThe merge illustrated above works in the exact same way regardless of the order applied to the scopes. The order would only make a difference if a certain option was set by two different scopes - which is not the case of the above example, since each scope does a different thing.\n\nThis merge strategy also works in the exact same way with options passed to `.findAll`, `.findOne` and the like.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/scopes/](https://sequelize.org/docs/v6/other-topics/scopes/)"
- name: Sequelize
  id: class/src/sequelize.js~sequelize
  summary: This is the main class, the entry point to sequelize
  description: "# Sequelize\n\nThis is the main class, the entry point to sequelize.\n\n## Static Method Summary\n\n[TABLE]\n\n## Constructor Summary\n\n[TABLE]\n\n## Member Summary\n\n[TABLE]\n\n## Method Summary\n\n[TABLE]\n\n## Static Public Methods\n\n### public static and(args: ...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [and](sequelize.js~sequelize#static-method-and)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1074) \n\nAn AND query\n\n#### Params:\n\n| Name | Type                                                                                                                                                                                                      | Attribute | Description                         |\n|------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-------------------------------------|\n| args | ...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Each argument will be joined by AND |\n\n#### Return:\n\n|                                                 |\n|-------------------------------------------------|\n| [and](sequelize.js~sequelize#static-method-and) |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n\n### public static cast(val: any, type: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [cast](sequelize.js~sequelize#static-method-cast)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1045) \n\nCreates an object representing a call to the cast function.\n\n#### Params:\n\n| Name | Type                                                                                              | Attribute | Description            |\n|------|---------------------------------------------------------------------------------------------------|-----------|------------------------|\n| val  | any                                                                                               |           | The value to cast      |\n| type | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | The type to cast it to |\n\n#### Return:\n\n|                                                   |\n|---------------------------------------------------|\n| [cast](sequelize.js~sequelize#static-method-cast) |\n\n### public static col(col: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [col](sequelize.js~sequelize#static-method-col)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1031) \n\nCreates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.\n\n#### Params:\n\n| Name | Type                                                                                              | Attribute | Description            |\n|------|---------------------------------------------------------------------------------------------------|-----------|------------------------|\n| col  | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | The name of the column |\n\n#### Return:\n\n|                                                 |\n|-------------------------------------------------|\n| [col](sequelize.js~sequelize#static-method-col) |\n\n#### See:\n\n- Sequelize#fn\n\n### public static fn(fn: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), args: any): [fn](sequelize.js~sequelize#static-method-fn)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1015) \n\nCreates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions. If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.\n\n#### Params:\n\n| Name | Type                                                                                              | Attribute | Description                                                       |\n|------|---------------------------------------------------------------------------------------------------|-----------|-------------------------------------------------------------------|\n| fn   | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | The function you want to call                                     |\n| args | any                                                                                               |           | All further arguments will be passed as arguments to the function |\n\n#### Return:\n\n|                                               |\n|-----------------------------------------------|\n| [fn](sequelize.js~sequelize#static-method-fn) |\n\n#### Example:\n\nConvert a user's username to upper case\n\n``` prettyprint\ninstance.update({\n  username: sequelize.fn('upper', sequelize.col('username'))\n});\n```\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n- [Sequelize.define](sequelize.js~sequelize#instance-method-define)\n- [Sequelize.col](sequelize.js~sequelize#static-method-col)\n\n### public static json(conditionsOrPath: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), value: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)): [json](sequelize.js~sequelize#static-method-json)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1106) \n\nCreates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                   |\n|---------------------------------------------------|\n| [json](sequelize.js~sequelize#static-method-json) |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n\n### public static literal(val: any): [literal](sequelize.js~sequelize#static-method-literal)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1058) \n\nCreates an object representing a literal, i.e. something that will not be escaped.\n\n#### Params:\n\n| Name | Type | Attribute | Description   |\n|------|------|-----------|---------------|\n| val  | any  |           | literal value |\n\n#### Return:\n\n|                                                         |\n|---------------------------------------------------------|\n| [literal](sequelize.js~sequelize#static-method-literal) |\n\n### public static or(args: ...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [or](sequelize.js~sequelize#static-method-or)  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1090) \n\nAn OR query\n\n#### Params:\n\n| Name | Type                                                                                                                                                                                                      | Attribute | Description                        |\n|------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|------------------------------------|\n| args | ...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | Each argument will be joined by OR |\n\n#### Return:\n\n|                                               |\n|-----------------------------------------------|\n| [or](sequelize.js~sequelize#static-method-or) |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n\n### public static useCLS(ns: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1221) \n\nUse CLS (Continuation Local Storage) with Sequelize. With Continuation Local Storage, all queries within the transaction callback will automatically receive the transaction object.\n\nCLS namespace provided is stored as `Sequelize._cls`\n\n#### Params:\n\n| Name | Type                                                                                              | Attribute | Description   |\n|------|---------------------------------------------------------------------------------------------------|-----------|---------------|\n| ns   | [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |           | CLS namespace |\n\n#### Return:\n\n|                                                                                                   |                       |\n|---------------------------------------------------------------------------------------------------|-----------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) | Sequelize constructor |\n\n### public static where(attr: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), comparator: symbol, logic: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): \\*  since v2.0.0-dev3 [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1126) \n\nA way of specifying attr = condition.\n\nThe attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)\n\nFor string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n#### See:\n\n- [Model.findAll](model.js~model#static-method-findAll)\n\n## Public Constructors\n\n### public constructor(database: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), username: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), password: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object))  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber185) \n\nInstantiate sequelize with name of database, username and password.\n\n#### Params:\n\n[TABLE]\n\n#### Example:\n\n``` prettyprint\n// without password / with blank password\nconst sequelize = new Sequelize('database', 'username', null, {\n  dialect: 'mysql'\n})\n\n// with password and options\nconst sequelize = new Sequelize('my_database', 'john', 'doe', {\n  dialect: 'postgres'\n})\n\n// with database, username, and password in the options object\nconst sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });\n\n// with uri\nconst sequelize = new Sequelize('mysql://localhost:3306/database', {})\n\n// option examples\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  // the sql dialect of the database\n  // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'\n  dialect: 'mysql',\n\n  // custom host; default: localhost\n  host: 'my.server.tld',\n  // for postgres, you can also specify an absolute path to a directory\n  // containing a UNIX socket to connect over\n  // host: '/sockets/psql_sockets'.\n\n  // custom port; default: dialect default\n  port: 12345,\n\n  // custom protocol; default: 'tcp'\n  // postgres only, useful for Heroku\n  protocol: null,\n\n  // disable logging or provide a custom logging function; default: console.log\n  logging: false,\n\n  // you can also pass any dialect options to the underlying dialect library\n  // - default is empty\n  // - currently supported: 'mysql', 'postgres', 'mssql'\n  dialectOptions: {\n    socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',\n    supportBigNumbers: true,\n    bigNumberStrings: true\n  },\n\n  // the storage engine for sqlite\n  // - default ':memory:'\n  storage: 'path/to/database.sqlite',\n\n  // disable inserting undefined values as NULL\n  // - default: false\n  omitNull: true,\n\n  // a flag for using a native library or not.\n  // in the case of 'pg' -- set this to true will allow SSL support\n  // - default: false\n  native: true,\n\n  // A flag that defines if connection should be over ssl or not\n  // - default: undefined\n  ssl: true,\n\n  // Specify options, which are used when sequelize.define is called.\n  // The following example:\n  //   define: { timestamps: false }\n  // is basically the same as:\n  //   Model.init(attributes, { timestamps: false });\n  //   sequelize.define(name, attributes, { timestamps: false });\n  // so defining the timestamps for each model will be not necessary\n  define: {\n    underscored: false,\n    freezeTableName: false,\n    charset: 'utf8',\n    dialectOptions: {\n      collate: 'utf8_general_ci'\n    },\n    timestamps: true\n  },\n\n  // similar for sync: you can define this to always force sync for models\n  sync: { force: true },\n\n  // pool configuration used to pool database connections\n  pool: {\n    max: 5,\n    idle: 30000,\n    acquire: 60000,\n  },\n\n  // isolation level of each transaction\n  // defaults to dialect default\n  isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ\n})\n```\n\n## Public Members\n\n### public models: {}  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber382) \n\nModels are stored here under the name given to `sequelize.define`\n\n## Public Methods\n\n### public async authenticate(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber963) \n\nTest the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public close(): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1291) \n\nClose all connections used by this sequelize instance, and free all references so the instance can be garbage collected.\n\nNormally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want to garbage collect some of them.\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async createSchema(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber722) \n\nCreate a new database schema.\n\n**Note:** this is a schema in the [postgres sense of the word](https://www.postgresql.org/docs/9.1/static/ddl-schemas.html), not a database table. In mysql and sqlite, this command will do nothing.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### See:\n\n- [Model.schema](model.js~model#static-method-schema)\n\n### public define(modelName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), attributes: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber461) \n\nDefine a new model, representing a table in the database.\n\nThe table columns are defined by the object that is given as the second argument. Each key of the object represents a column\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                         |                     |\n|-------------------------|---------------------|\n| [Model](model.js~model) | Newly defined model |\n\n#### Example:\n\n``` prettyprint\nsequelize.define('modelName', {\n  columnA: {\n      type: Sequelize.BOOLEAN,\n      validate: {\n        is: [\"[a-z]\",'i'],        // will only allow letters\n        max: 23,                  // only allow values <= 23\n        isIn: {\n          args: [['en', 'zh']],\n          msg: \"Must be English or Chinese\"\n        }\n      },\n      field: 'column_a'\n  },\n  columnB: Sequelize.STRING,\n  columnC: 'MY VERY OWN COLUMN TYPE'\n});\n\nsequelize.models.modelName // The model will now be available in models under the name given to define\n```\n\n#### See:\n\n- [Model.init](model.js~model#static-method-init) for a more comprehensive specification of the \\`options\\` and \\`attributes\\` objects.\n- [Model Basics](https://sequelize.org/master/manual/model-basics.html) guide\n\n### public async drop(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber913) \n\nDrop all tables defined through this sequelize instance. This is done by calling Model.drop on each model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### See:\n\n- [Model.drop](model.js~model#static-method-drop) for options\n\n### public async dropAllSchemas(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber768) \n\nDrop all schemas.\n\n**Note:** this is a schema in the [postgres sense of the word](https://www.postgresql.org/docs/9.1/static/ddl-schemas.html), not a database table. In mysql and sqlite, this is the equivalent of drop all tables.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async dropSchema(schema: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber753) \n\nDrop a single schema\n\n**Note:** this is a schema in the [postgres sense of the word](https://www.postgresql.org/docs/9.1/static/ddl-schemas.html), not a database table. In mysql and sqlite, this drop a table matching the schema name\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public escape(value: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber703) \n\nEscape value.\n\n#### Params:\n\n| Name  | Type                                                                                              | Attribute | Description            |\n|-------|---------------------------------------------------------------------------------------------------|-----------|------------------------|\n| value | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | string value to escape |\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |\n\n### public getDatabaseName(): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber412) \n\nReturns the database name.\n\n#### Return:\n\n|                                                                                                   |                    |\n|---------------------------------------------------------------------------------------------------|--------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | The database name. |\n\n### public getDialect(): [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber403) \n\nReturns the specified dialect.\n\n#### Return:\n\n|                                                                                                   |                        |\n|---------------------------------------------------------------------------------------------------|------------------------|\n| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | The specified dialect. |\n\n### public getQueryInterface(): [QueryInterface](dialects/abstract/query-interface.js~queryinterface)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber421) \n\nReturns an instance of QueryInterface.\n\n#### Return:\n\n|                                                                       |                                            |\n|-----------------------------------------------------------------------|--------------------------------------------|\n| [QueryInterface](dialects/abstract/query-interface.js~queryinterface) | An instance (singleton) of QueryInterface. |\n\n### public isDefined(modelName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber495) \n\nChecks whether a model with the given name is defined\n\n#### Params:\n\n| Name      | Type                                                                                              | Attribute | Description                                       |\n|-----------|---------------------------------------------------------------------------------------------------|-----------|---------------------------------------------------|\n| modelName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | The name of a model defined with Sequelize.define |\n\n#### Return:\n\n|                                                                                                     |                                                           |\n|-----------------------------------------------------------------------------------------------------|-----------------------------------------------------------|\n| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) | Returns true if model is already defined, otherwise false |\n\n### public model(modelName: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)): [Model](model.js~model)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber480) \n\nFetch a Model which is already defined\n\n#### Params:\n\n| Name      | Type                                                                                              | Attribute | Description                                       |\n|-----------|---------------------------------------------------------------------------------------------------|-----------|---------------------------------------------------|\n| modelName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |           | The name of a model defined with Sequelize.define |\n\n#### Return:\n\n|                         |                 |\n|-------------------------|-----------------|\n| [Model](model.js~model) | Specified model |\n\n#### Throw:\n\n|     |                                                                                                 |\n|-----|-------------------------------------------------------------------------------------------------|\n| \\*  | Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false) |\n\n### public async query(sql: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber539) \n\nExecute a query on the DB, optionally bypassing all the Sequelize goodness.\n\nBy default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\n\nIf you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\n\n``` lang-js\nconst [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\n\nconst results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\n```\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### See:\n\n- [Model.build](model.js~model#static-method-build) for more information about instance option.\n\n### public random(): [fn](sequelize.js~sequelize#static-method-fn)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber985) \n\nGet the fn for random based on the dialect\n\n#### Return:\n\n|                                               |\n|-----------------------------------------------|\n| [fn](sequelize.js~sequelize#static-method-fn) |\n\n### public async set(variables: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber671) \n\nExecute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction. Only works for MySQL or MariaDB.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async showAllSchemas(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber737) \n\nShow all defined schemas\n\n**Note:** this is a schema in the [postgres sense of the word](https://www.postgresql.org/docs/9.1/static/ddl-schemas.html), not a database table. In mysql and sqlite, this will show all tables.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async sync(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber787) \n\nSync all defined models to the DB.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async transaction(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), autoCallback: [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber1176) \n\nStart a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see [Transaction](transaction.js~transaction)\n\nIf you have [CLS](https://github.com/Jeff-Lewis/cls-hooked) enabled, the transaction will automatically be passed to any query that runs within the callback\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### Example:\n\n``` prettyprint\ntry {\n  const transaction = await sequelize.transaction();\n  const user = await User.findOne(..., { transaction });\n  await user.update(..., { transaction });\n  await transaction.commit();\n} catch {\n  await transaction.rollback()\n}\n```\n\nA syntax for automatically committing or rolling back based on the promise chain resolution is also supported\n\n``` prettyprint\ntry {\n  await sequelize.transaction(transaction => { // Note that we pass a callback rather than awaiting the call with no arguments\n    const user = await User.findOne(..., {transaction});\n    await user.update(..., {transaction});\n  });\n  // Committed\n} catch(err) {\n  // Rolled back\n  console.error(err);\n}\n```\n\nTo enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:\n\n``` prettyprint\nconst cls = require('cls-hooked');\nconst namespace = cls.createNamespace('....');\nconst Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\n// Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\n```\n\n### public async truncate(options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/sequelize.js.html#lineNumber875) \n\nTruncate all tables defined through the sequelize models. This is done by calling `Model.truncate()` on each model.\n\n#### Params:\n\n[TABLE]\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n#### See:\n\n- [Model.truncate](model.js~model#static-method-truncate) for more information\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html)"
- name: SequelizeScopeError
  id: class/src/errors/sequelize-scope-error.ts~sequelizescopeerror
  summary: Scope Error
  description: "# SequelizeScopeError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → SequelizeScopeError\n\nScope Error. Thrown when the sequelize cannot query the specified scope.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/sequelize-scope-error.ts~SequelizeScopeError.html](https://sequelize.org/api/v6/class/src/errors/sequelize-scope-error.ts~SequelizeScopeError.html)"
- name: SMALLINT
  id: class/src/data-types.js~smallint
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# SMALLINT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → [INTEGER](data-types.js~integer) → SMALLINT\n\nA 16 bit integer\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~SMALLINT.html](https://sequelize.org/api/v6/class/src/data-types.js~SMALLINT.html)"
- name: SnowflakeQueryInterface
  id: class/src/dialects/snowflake/query-interface.js~snowflakequeryinterface
  summary: A wrapper that fixes Snowflake's inability to cleanly remove columns from existing tables if they have a foreign key constraint
  description: "# SnowflakeQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → SnowflakeQueryInterface\n\nThe interface that Sequelize uses to talk with Snowflake database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async removeColumn(tableName: \\*, columnName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/snowflake/query-interface.js.html#lineNumber16) \n\nA wrapper that fixes Snowflake's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n#### Override:\n\n[QueryInterface#removeColumn](../abstract/query-interface.js~queryinterface#instance-method-removeColumn)\n\n#### Params:\n\n| Name       | Type | Attribute | Description |\n|------------|------|-----------|-------------|\n| tableName  | \\*   |           |             |\n| columnName | \\*   |           |             |\n| options    | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async removeConstraint(tableName: \\*, constraintName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/snowflake/query-interface.js.html#lineNumber54) \n\nRemove a constraint from a table\n\n#### Override:\n\n[QueryInterface#removeConstraint](../abstract/query-interface.js~queryinterface#instance-method-removeConstraint)\n\n#### Params:\n\n| Name           | Type | Attribute | Description |\n|----------------|------|-----------|-------------|\n| tableName      | \\*   |           |             |\n| constraintName | \\*   |           |             |\n| options        | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async upsert(tableName: \\*, insertValues: \\*, updateValues: \\*, where: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/snowflake/query-interface.js.html#lineNumber42) \n\nUpsert\n\n#### Override:\n\n[QueryInterface#upsert](../abstract/query-interface.js~queryinterface#instance-method-upsert)\n\n#### Params:\n\n| Name         | Type | Attribute | Description |\n|--------------|------|-----------|-------------|\n| tableName    | \\*   |           |             |\n| insertValues | \\*   |           |             |\n| updateValues | \\*   |           |             |\n| where        | \\*   |           |             |\n| options      | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/snowflake/query-interface.js~SnowflakeQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/snowflake/query-interface.js~SnowflakeQueryInterface.html)"
- name: SQLiteQueryInterface
  id: class/src/dialects/sqlite/query-interface.js~sqlitequeryinterface
  summary: A wrapper that fixes SQLite's inability to change columns from existing tables
  description: "# SQLiteQueryInterface\n\n#### Extends:\n\n[QueryInterface](../abstract/query-interface.js~queryinterface) → SQLiteQueryInterface\n\nThe interface that Sequelize uses to talk with SQLite database\n\n## Method Summary\n\n[TABLE]\n\n## Inherited Summary\n\n[TABLE]\n\n## Public Methods\n\n### public async addConstraint(tableName: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber115) \n\nAdd a constraint to a table\n\nAvailable constraints:\n\n- UNIQUE\n- DEFAULT (MSSQL only)\n- CHECK (MySQL - Ignored by the database engine )\n- FOREIGN KEY\n- PRIMARY KEY\n\n#### Override:\n\n[QueryInterface#addConstraint](../abstract/query-interface.js~queryinterface#instance-method-addConstraint)\n\n#### Params:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| tableName | \\*   |           |             |\n| options   | \\*   |           |             |\n\n### public async changeColumn(tableName: \\*, attributeName: \\*, dataTypeOrOptions: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber39) \n\nA wrapper that fixes SQLite's inability to change columns from existing tables. It will create a backup of the table, drop the table afterwards and create a new table with the same name but with a modified version of the respective column.\n\n#### Override:\n\n[QueryInterface#changeColumn](../abstract/query-interface.js~queryinterface#instance-method-changeColumn)\n\n#### Params:\n\n| Name              | Type | Attribute | Description |\n|-------------------|------|-----------|-------------|\n| tableName         | \\*   |           |             |\n| attributeName     | \\*   |           |             |\n| dataTypeOrOptions | \\*   |           |             |\n| options           | \\*   |           |             |\n\n### public async describeTable(tableName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber176) \n\nDescribe a table structure\n\nThis method returns an array of hashes containing information about all attributes in the table.\n\n``` lang-js\n{\n   name: {\n     type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n     allowNull:    true,\n     defaultValue: null\n   },\n   isBetaMember: {\n     type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n     allowNull:    false,\n     defaultValue: false\n   }\n}\n```\n\n#### Override:\n\n[QueryInterface#describeTable](../abstract/query-interface.js~queryinterface#instance-method-describeTable)\n\n#### Params:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| tableName | \\*   |           |             |\n| options   | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async dropAllTables(options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber163) \n\nDrop all tables from database\n\n#### Override:\n\n[QueryInterface#dropAllTables](../abstract/query-interface.js~queryinterface#instance-method-dropAllTables)\n\n#### Params:\n\n| Name    | Type | Attribute | Description |\n|---------|------|-----------|-------------|\n| options | \\*   |           |             |\n\n### public async getForeignKeyReferencesForTable(tableName: \\*, options: \\*): \\*  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber146) \n\nGet foreign key references details for the table\n\nThose details contains constraintSchema, constraintName, constraintCatalog tableCatalog, tableSchema, tableName, columnName, referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName. Remind: constraint informations won't return if it's sqlite.\n\n#### Override:\n\n[QueryInterface#getForeignKeyReferencesForTable](../abstract/query-interface.js~queryinterface#instance-method-getForeignKeyReferencesForTable)\n\n#### Params:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| tableName | \\*   |           |             |\n| options   | \\*   |           |             |\n\n#### Return:\n\n|     |\n|-----|\n| \\*  |\n\n### public async removeColumn(tableName: \\*, attributeName: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber20) \n\nA wrapper that fixes SQLite's inability to remove columns from existing tables. It will create a backup of the table, drop the table afterwards and create a new table with the same name but without the obsolete column.\n\n#### Override:\n\n[QueryInterface#removeColumn](../abstract/query-interface.js~queryinterface#instance-method-removeColumn)\n\n#### Params:\n\n| Name          | Type | Attribute | Description |\n|---------------|------|-----------|-------------|\n| tableName     | \\*   |           |             |\n| attributeName | \\*   |           |             |\n| options       | \\*   |           |             |\n\n### public async removeConstraint(tableName: \\*, constraintName: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber74) \n\nRemove a constraint from a table\n\n#### Override:\n\n[QueryInterface#removeConstraint](../abstract/query-interface.js~queryinterface#instance-method-removeConstraint)\n\n#### Params:\n\n| Name           | Type | Attribute | Description |\n|----------------|------|-----------|-------------|\n| tableName      | \\*   |           |             |\n| constraintName | \\*   |           |             |\n| options        | \\*   |           |             |\n\n### public async renameColumn(tableName: \\*, attrNameBefore: \\*, attrNameAfter: \\*, options: \\*)  [source](https://sequelize.org/api/v6/file/src/dialects/sqlite/query-interface.js.html#lineNumber58) \n\nA wrapper that fixes SQLite's inability to rename columns from existing tables. It will create a backup of the table, drop the table afterwards and create a new table with the same name but with a renamed version of the respective column.\n\n#### Override:\n\n[QueryInterface#renameColumn](../abstract/query-interface.js~queryinterface#instance-method-renameColumn)\n\n#### Params:\n\n| Name           | Type | Attribute | Description |\n|----------------|------|-----------|-------------|\n| tableName      | \\*   |           |             |\n| attrNameBefore | \\*   |           |             |\n| attrNameAfter  | \\*   |           |             |\n| options        | \\*   |           |             |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/dialects/sqlite/query-interface.js~SQLiteQueryInterface.html](https://sequelize.org/api/v6/class/src/dialects/sqlite/query-interface.js~SQLiteQueryInterface.html)"
- name: STRING
  id: class/src/data-types.js~string
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# STRING\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → STRING\n\n#### Direct Subclass:\n\n[CHAR](data-types.js~char)\n\nSTRING A variable length string\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), binary: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber58) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~STRING.html](https://sequelize.org/api/v6/class/src/data-types.js~STRING.html)"
- name: Sub Queries
  id: other-topics/sub-queries/index
  summary: 'Note: we have disabled timestamps just to have shorter queries for the next examples'
  description: "# Sub Queries\n\nConsider you have two models, `Post` and `Reaction`, with a One-to-Many relationship set up, so that one post has many reactions:\n\n``` js\nconst Post = sequelize.define('post', {\n    content: DataTypes.STRING\n}, { timestamps: false });\n\nconst Reaction = sequelize.define('reaction', {\n    type: DataTypes.STRING\n}, { timestamps: false });\n\nPost.hasMany(Reaction);\nReaction.belongsTo(Post);\n```\n\n*Note: we have disabled timestamps just to have shorter queries for the next examples.*\n\nLet's fill our tables with some data:\n\n``` js\nasync function makePostWithReactions(content, reactionTypes) {\n    const post = await Post.create({ content });\n    await Reaction.bulkCreate(\n        reactionTypes.map(type => ({ type, postId: post.id }))\n    );\n    return post;\n}\n\nawait makePostWithReactions('Hello World', [\n    'Like', 'Angry', 'Laugh', 'Like', 'Like', 'Angry', 'Sad', 'Like'\n]);\nawait makePostWithReactions('My Second Post', [\n    'Laugh', 'Laugh', 'Like', 'Laugh'\n]);\n```\n\nNow, we are ready for examples of the power of subqueries.\n\nLet's say we wanted to compute via SQL a `laughReactionsCount` for each post. We can achieve that with a sub-query, such as the following:\n\n``` sql\nSELECT\n    *,\n    (\n        SELECT COUNT(*)\n        FROM reactions AS reaction\n        WHERE\n            reaction.postId = post.id\n            AND\n            reaction.type = \"Laugh\"\n    ) AS laughReactionsCount\nFROM posts AS post\n```\n\nIf we run the above raw SQL query through Sequelize, we get:\n\n``` json\n[\n  {\n    \"id\": 1,\n    \"content\": \"Hello World\",\n    \"laughReactionsCount\": 1\n  },\n  {\n    \"id\": 2,\n    \"content\": \"My Second Post\",\n    \"laughReactionsCount\": 3\n  }\n]\n```\n\nSo how can we achieve that with more help from Sequelize, without having to write the whole raw query by hand?\n\nThe answer: by combining the `attributes` option of the finder methods (such as `findAll`) with the `sequelize.literal` utility function, that allows you to directly insert arbitrary content into the query without any automatic escaping.\n\nThis means that Sequelize will help you with the main, larger query, but you will still have to write that sub-query by yourself:\n\n``` js\nPost.findAll({\n    attributes: {\n        include: [\n            [\n                // Note the wrapping parentheses in the call below!\n                sequelize.literal(`(\n                    SELECT COUNT(*)\n                    FROM reactions AS reaction\n                    WHERE\n                        reaction.postId = post.id\n                        AND\n                        reaction.type = \"Laugh\"\n                )`),\n                'laughReactionsCount'\n            ]\n        ]\n    }\n});\n```\n\n*Important Note: Since `sequelize.literal` inserts arbitrary content without escaping to the query, it deserves very special attention since it may be a source of (major) security vulnerabilities. It should not be used on user-generated content.* However, here, we are using `sequelize.literal` with a fixed string, carefully written by us (the coders). This is ok, since we know what we are doing.\n\nThe above gives the following output:\n\n``` json\n[\n  {\n    \"id\": 1,\n    \"content\": \"Hello World\",\n    \"laughReactionsCount\": 1\n  },\n  {\n    \"id\": 2,\n    \"content\": \"My Second Post\",\n    \"laughReactionsCount\": 3\n  }\n]\n```\n\nSuccess!\n\n## Using sub-queries for complex ordering[​](#using-sub-queries-for-complex-ordering \"Direct link to heading\")\n\nThis idea can be used to enable complex ordering, such as ordering posts by the number of laugh reactions they have:\n\n``` js\nPost.findAll({\n    attributes: {\n        include: [\n            [\n                sequelize.literal(`(\n                    SELECT COUNT(*)\n                    FROM reactions AS reaction\n                    WHERE\n                        reaction.postId = post.id\n                        AND\n                        reaction.type = \"Laugh\"\n                )`),\n                'laughReactionsCount'\n            ]\n        ]\n    },\n    order: [\n        [sequelize.literal('laughReactionsCount'), 'DESC']\n    ]\n});\n```\n\nResult:\n\n``` json\n[\n  {\n    \"id\": 2,\n    \"content\": \"My Second Post\",\n    \"laughReactionsCount\": 3\n  },\n  {\n    \"id\": 1,\n    \"content\": \"Hello World\",\n    \"laughReactionsCount\": 1\n  }\n]\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/sub-queries/](https://sequelize.org/docs/v6/other-topics/sub-queries/)"
- name: TEXT
  id: class/src/data-types.js~text
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# TEXT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → TEXT\n\nUnlimited length TEXT column\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(length: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber118) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~TEXT.html](https://sequelize.org/api/v6/class/src/data-types.js~TEXT.html)"
- name: TIME
  id: class/src/data-types.js~time
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# TIME\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → TIME\n\nA time column\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~TIME.html](https://sequelize.org/api/v6/class/src/data-types.js~TIME.html)"
- name: TimeoutError
  id: class/src/errors/database/timeout-error.ts~timeouterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# TimeoutError\n\n#### Extends:\n\nimport_database_error~import_database_error.default → TimeoutError\n\nThrown when a database query times out because of a deadlock\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/database/timeout-error.ts~TimeoutError.html](https://sequelize.org/api/v6/class/src/errors/database/timeout-error.ts~TimeoutError.html)"
- name: TINYINT
  id: class/src/data-types.js~tinyint
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# TINYINT\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → [NUMBER](data-types.js~number) → [INTEGER](data-types.js~integer) → TINYINT\n\nA 8 bit integer\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~TINYINT.html](https://sequelize.org/api/v6/class/src/data-types.js~TINYINT.html)"
- name: Transaction
  id: class/src/transaction.js~transaction
  summary: The transaction object is used to identify a running transaction
  description: "# Transaction\n\nThe transaction object is used to identify a running transaction. It is created by calling `Sequelize.transaction()`. To run a query under a transaction, you should pass the transaction in the options object.\n\n#### See:\n\n- [Sequelize.transaction](sequelize.js~sequelize#instance-method-transaction)\n\n## Static Member Summary\n\n[TABLE]\n\n## Constructor Summary\n\n[TABLE]\n\n## Member Summary\n\n[TABLE]\n\n## Method Summary\n\n[TABLE]\n\n## Static Public Members\n\n### public static get ISOLATION_LEVELS: {\"READ_UNCOMMITTED\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"READ_COMMITTED\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"REPEATABLE_READ\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"SERIALIZABLE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)}  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber274) \n\nIsolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`. Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n\nPass in the desired level as the first argument:\n\n#### Properties:\n\n| Name             | Type | Attribute | Description |\n|------------------|------|-----------|-------------|\n| READ_UNCOMMITTED | \\*   |           |             |\n| READ_COMMITTED   | \\*   |           |             |\n| REPEATABLE_READ  | \\*   |           |             |\n| SERIALIZABLE     | \\*   |           |             |\n\n#### Example:\n\n``` prettyprint\ntry {\n  const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n    // your transactions\n  });\n  // transaction has been committed. Do something after the commit if required.\n} catch(err) {\n  // do something with the err.\n}\n```\n\n### public static get LOCK: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object): {\"UPDATE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"SHARE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"KEY_SHARE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"NO_KEY_UPDATE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)}  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber324) \n\nPossible options for row locking. Used in conjunction with `find` calls:\n\n#### Properties:\n\n| Name          | Type | Attribute | Description        |\n|---------------|------|-----------|--------------------|\n| UPDATE        | \\*   |           |                    |\n| SHARE         | \\*   |           |                    |\n| KEY_SHARE     | \\*   |           | Postgres 9.3+ only |\n| NO_KEY_UPDATE | \\*   |           | Postgres 9.3+ only |\n\n#### Return:\n\n|                                                                                                   |\n|---------------------------------------------------------------------------------------------------|\n| [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) |\n\n#### Return Properties:\n\n| Name          | Type | Attribute | Description        |\n|---------------|------|-----------|--------------------|\n| UPDATE        | \\*   |           |                    |\n| SHARE         | \\*   |           |                    |\n| KEY_SHARE     | \\*   |           | Postgres 9.3+ only |\n| NO_KEY_UPDATE | \\*   |           | Postgres 9.3+ only |\n\n#### Example:\n\n``` prettyprint\n// t1 is a transaction\nModel.findAll({\n  where: ...,\n  transaction: t1,\n  lock: t1.LOCK...\n});\n```\n\nPostgres also supports specific locks while eager loading by using OF:\n\n``` prettyprint\nUserModel.findAll({\n  where: ...,\n  include: [TaskModel, ...],\n  transaction: t1,\n  lock: {\n    level: t1.LOCK...,\n    of: UserModel\n  }\n});\n\n# UserModel will be locked but TaskModel won't!\n```\n\nYou can also skip locked rows:\n\n``` prettyprint\n// t1 is a transaction\nModel.findAll({\n  where: ...,\n  transaction: t1,\n  lock: true,\n  skipLocked: true\n});\n# The query will now return any rows that aren't locked by another transaction\n```\n\n### public static get TYPES: {\"DEFERRED\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"IMMEDIATE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), \"EXCLUSIVE\": [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)}  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber245) \n\nTypes can be set per-transaction by passing `options.type` to `sequelize.transaction`. Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`. Sqlite only.\n\nPass in the desired level as the first argument:\n\n#### Properties:\n\n| Name      | Type | Attribute | Description |\n|-----------|------|-----------|-------------|\n| DEFERRED  | \\*   |           |             |\n| IMMEDIATE | \\*   |           |             |\n| EXCLUSIVE | \\*   |           |             |\n\n#### Example:\n\n``` prettyprint\ntry {\n  await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n     // your transactions\n  });\n  // transaction has been committed. Do something after the commit if required.\n} catch(err) {\n  // do something with the err.\n}\n```\n\n## Public Constructors\n\n### public constructor(sequelize: [Sequelize](sequelize.js~sequelize), options: [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object))  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber21) \n\nCreates a new transaction instance\n\n#### Params:\n\n[TABLE]\n\n## Public Members\n\n### public get LOCK: \\*  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber336) \n\nPlease see [Transaction.LOCK](transaction.js~transaction#static-get-LOCK)\n\n## Public Methods\n\n### public afterCommit(fn: [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function))  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber217) \n\nA hook that is run after a transaction is committed\n\n#### Params:\n\n| Name | Type                                                                                                  | Attribute | Description                                                       |\n|------|-------------------------------------------------------------------------------------------------------|-----------|-------------------------------------------------------------------|\n| fn   | [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) |           | A callback function that is called with the committed transaction |\n\n### public async commit(): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber54) \n\nCommit the transaction\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async forceCleanup()  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber188) \n\nKills the connection this transaction uses. Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error and the transaction is left in a broken state, and releasing the connection to the pool would be dangerous.\n\n### public async prepareEnvironment(useCLS: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber111) \n\nCalled to acquire a connection to use and set the correct options on the connection. We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n\n#### Params:\n\n| Name   | Type                                                                                                | Attribute | Description                                                                                                                                                                     |\n|--------|-----------------------------------------------------------------------------------------------------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| useCLS | [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |           | Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object. |\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\n### public async rollback(): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [source](https://sequelize.org/api/v6/file/src/transaction.js.html#lineNumber80) \n\nRollback (abort) the transaction\n\n#### Return:\n\n|                                                                                                     |\n|-----------------------------------------------------------------------------------------------------|\n| [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) |\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/transaction.js~Transaction.html](https://sequelize.org/api/v6/class/src/transaction.js~Transaction.html)"
- name: Transactions
  id: other-topics/transactions/index
  summary: Sequelize does not use transactions by default
  description: "# Transactions\n\nSequelize does not use [transactions](https://en.wikipedia.org/wiki/Database_transaction) by default. However, for production-ready usage of Sequelize, you should definitely configure Sequelize to use transactions.\n\nSequelize supports two ways of using transactions:\n\n1.  **Unmanaged transactions:** Committing and rolling back the transaction should be done manually by the user (by calling the appropriate Sequelize methods).\n\n2.  **Managed transactions**: Sequelize will automatically rollback the transaction if any error is thrown, or commit the transaction otherwise. Also, if CLS (Continuation Local Storage) is enabled, all queries within the transaction callback will automatically receive the transaction object.\n\n## Unmanaged transactions[​](#unmanaged-transactions \"Direct link to heading\")\n\nLet's start with an example:\n\n``` js\n// First, we start a transaction from your connection and save it into a variable\nconst t = await sequelize.transaction();\n\ntry {\n\n  // Then, we do some calls passing this transaction as an option:\n\n  const user = await User.create({\n    firstName: 'Bart',\n    lastName: 'Simpson'\n  }, { transaction: t });\n\n  await user.addSibling({\n    firstName: 'Lisa',\n    lastName: 'Simpson'\n  }, { transaction: t });\n\n  // If the execution reaches this line, no errors were thrown.\n  // We commit the transaction.\n  await t.commit();\n\n} catch (error) {\n\n  // If the execution reaches this line, an error was thrown.\n  // We rollback the transaction.\n  await t.rollback();\n\n}\n```\n\nAs shown above, the *unmanaged transaction* approach requires that you commit and rollback the transaction manually, when necessary.\n\n## Managed transactions[​](#managed-transactions \"Direct link to heading\")\n\nManaged transactions handle committing or rolling back the transaction automatically. You start a managed transaction by passing a callback to `sequelize.transaction`. This callback can be `async` (and usually is).\n\nThe following will happen in this case:\n\n- Sequelize will automatically start a transaction and obtain a transaction object `t`\n- Then, Sequelize will execute the callback you provided, passing `t` into it\n- If your callback throws an error, Sequelize will automatically rollback the transaction\n- If your callback succeeds, Sequelize will automatically commit the transaction\n- Only then the `sequelize.transaction` call will settle:\n  - Either resolving with the resolution of your callback\n  - Or, if your callback throws, rejecting with the thrown error\n\nExample code:\n\n``` js\ntry {\n\n  const result = await sequelize.transaction(async (t) => {\n\n    const user = await User.create({\n      firstName: 'Abraham',\n      lastName: 'Lincoln'\n    }, { transaction: t });\n\n    await user.setShooter({\n      firstName: 'John',\n      lastName: 'Boothe'\n    }, { transaction: t });\n\n    return user;\n\n  });\n\n  // If the execution reaches this line, the transaction has been committed successfully\n  // `result` is whatever was returned from the transaction callback (the `user`, in this case)\n\n} catch (error) {\n\n  // If the execution reaches this line, an error occurred.\n  // The transaction has already been rolled back automatically by Sequelize!\n\n}\n```\n\nNote that `t.commit()` and `t.rollback()` were not called directly (which is correct).\n\n### Throw errors to rollback[​](#throw-errors-to-rollback \"Direct link to heading\")\n\nWhen using the managed transaction you should *never* commit or rollback the transaction manually. If all queries are successful (in the sense of not throwing any error), but you still want to rollback the transaction, you should throw an error yourself:\n\n``` js\nawait sequelize.transaction(async t => {\n  const user = await User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, { transaction: t });\n\n  // Woops, the query was successful but we still want to roll back!\n  // We throw an error manually, so that Sequelize handles everything automatically.\n  throw new Error();\n});\n```\n\n### Automatically pass transactions to all queries[​](#automatically-pass-transactions-to-all-queries \"Direct link to heading\")\n\nIn the examples above, the transaction is still manually passed, by passing `{ transaction: t }` as the second argument. To automatically pass the transaction to all queries you must install the [cls-hooked](https://github.com/Jeff-Lewis/cls-hooked) (CLS) module and instantiate a namespace in your own code:\n\n``` js\nconst cls = require('cls-hooked');\nconst namespace = cls.createNamespace('my-very-own-namespace');\n```\n\nTo enable CLS you must tell sequelize which namespace to use by using a static method of the sequelize constructor:\n\n``` js\nconst Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\nnew Sequelize(....);\n```\n\nNotice, that the `useCLS()` method is on the *constructor*, not on an instance of sequelize. This means that all instances will share the same namespace, and that CLS is all-or-nothing - you cannot enable it only for some instances.\n\nCLS works like a thread-local storage for callbacks. What this means in practice is that different callback chains can access local variables by using the CLS namespace. When CLS is enabled sequelize will set the `transaction` property on the namespace when a new transaction is created. Since variables set within a callback chain are private to that chain several concurrent transactions can exist at the same time:\n\n``` js\nsequelize.transaction((t1) => {\n  namespace.get('transaction') === t1; // true\n});\n\nsequelize.transaction((t2) => {\n  namespace.get('transaction') === t2; // true\n});\n```\n\nIn most case you won't need to access `namespace.get('transaction')` directly, since all queries will automatically look for a transaction on the namespace:\n\n``` js\nsequelize.transaction((t1) => {\n  // With CLS enabled, the user will be created inside the transaction\n  return User.create({ name: 'Alice' });\n});\n```\n\n## Concurrent/Partial transactions[​](#concurrentpartial-transactions \"Direct link to heading\")\n\nYou can have concurrent transactions within a sequence of queries or have some of them excluded from any transactions. Use the `transaction` option to control which transaction a query belongs to:\n\n**Note:** *SQLite does not support more than one transaction at the same time.*\n\n### With CLS enabled[​](#with-cls-enabled \"Direct link to heading\")\n\n``` js\nsequelize.transaction((t1) => {\n  return sequelize.transaction((t2) => {\n    // With CLS enabled, queries here will by default use t2.\n    // Pass in the `transaction` option to define/alter the transaction they belong to.\n    return Promise.all([\n        User.create({ name: 'Bob' }, { transaction: null }),\n        User.create({ name: 'Mallory' }, { transaction: t1 }),\n        User.create({ name: 'John' }) // this would default to t2\n    ]);\n  });\n});\n```\n\n## Passing options[​](#passing-options \"Direct link to heading\")\n\nThe `sequelize.transaction` method accepts options.\n\nFor unmanaged transactions, just use `sequelize.transaction(options)`.\n\nFor managed transactions, use `sequelize.transaction(options, callback)`.\n\n## Isolation levels[​](#isolation-levels \"Direct link to heading\")\n\nThe possible isolations levels to use when starting a transaction:\n\n``` js\nconst { Transaction } = require('sequelize');\n\n// The following are valid isolation levels:\nTransaction.ISOLATION_LEVELS.READ_UNCOMMITTED // \"READ UNCOMMITTED\"\nTransaction.ISOLATION_LEVELS.READ_COMMITTED // \"READ COMMITTED\"\nTransaction.ISOLATION_LEVELS.REPEATABLE_READ  // \"REPEATABLE READ\"\nTransaction.ISOLATION_LEVELS.SERIALIZABLE // \"SERIALIZABLE\"\n```\n\nBy default, sequelize uses the isolation level of the database. If you want to use a different isolation level, pass in the desired level as the first argument:\n\n``` js\nconst { Transaction } = require('sequelize');\n\nawait sequelize.transaction({\n  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE\n}, async (t) => {\n  // Your code\n});\n```\n\nYou can also overwrite the `isolationLevel` setting globally with an option in the Sequelize constructor:\n\n``` js\nconst { Sequelize, Transaction } = require('sequelize');\n\nconst sequelize = new Sequelize('sqlite::memory:', {\n  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});\n```\n\n**Note for MSSQL:** *The `SET ISOLATION LEVEL` queries are not logged since the specified `isolationLevel` is passed directly to `tedious`.*\n\n## Usage with other sequelize methods[​](#usage-with-other-sequelize-methods \"Direct link to heading\")\n\nThe `transaction` option goes with most other options, which are usually the first argument of a method.\n\nFor methods that take values, like `.create`, `.update()`, etc. `transaction` should be passed to the option in the second argument.\n\nIf unsure, refer to the API documentation for the method you are using to be sure of the signature.\n\nExamples:\n\n``` js\nawait User.create({ name: 'Foo Bar' }, { transaction: t });\n\nawait User.findAll({\n  where: {\n    name: 'Foo Bar'\n  },\n  transaction: t\n});\n```\n\n## The `afterCommit` hook[​](#the-aftercommit-hook \"Direct link to heading\")\n\nA `transaction` object allows tracking if and when it is committed.\n\nAn `afterCommit` hook can be added to both managed and unmanaged transaction objects:\n\n``` js\n// Managed transaction:\nawait sequelize.transaction(async (t) => {\n  t.afterCommit(() => {\n    // Your logic\n  });\n});\n\n// Unmanaged transaction:\nconst t = await sequelize.transaction();\nt.afterCommit(() => {\n  // Your logic\n});\nawait t.commit();\n```\n\nThe callback passed to `afterCommit` can be `async`. In this case:\n\n- For a managed transaction: the `sequelize.transaction` call will wait for it before settling;\n- For an unmanaged transaction: the `t.commit` call will wait for it before settling.\n\nNotes:\n\n- The `afterCommit` hook is not raised if the transaction is rolled back;\n- The `afterCommit` hook does not modify the return value of the transaction (unlike most hooks)\n\nYou can use the `afterCommit` hook in conjunction with model hooks to know when a instance is saved and available outside of a transaction\n\n``` js\nUser.afterSave((instance, options) => {\n  if (options.transaction) {\n    // Save done within a transaction, wait until transaction is committed to\n    // notify listeners the instance has been saved\n    options.transaction.afterCommit(() => /* Notify */)\n    return;\n  }\n  // Save done outside a transaction, safe for callers to fetch the updated model\n  // Notify\n});\n```\n\n## Locks[​](#locks \"Direct link to heading\")\n\nQueries within a `transaction` can be performed with locks:\n\n``` js\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  transaction: t1\n});\n```\n\nQueries within a transaction can skip locked rows:\n\n``` js\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  skipLocked: true,\n  transaction: t2\n});\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/transactions/](https://sequelize.org/docs/v6/other-topics/transactions/)"
- name: TSVECTOR
  id: class/src/data-types.js~tsvector
  summary: The TSVECTOR type stores text search vectors
  description: "# TSVECTOR\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → TSVECTOR\n\nThe TSVECTOR type stores text search vectors.\n\nOnly available for Postgres\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~TSVECTOR.html](https://sequelize.org/api/v6/class/src/data-types.js~TSVECTOR.html)"
- name: TypeScript
  id: other-topics/typescript/index
  summary: We're working hard on making Sequelize a breeze to use in TypeScript
  description: "# TypeScript\n\ninfo\n\nWe're working hard on making Sequelize a breeze to use in TypeScript. [Some parts](https://github.com/sequelize/sequelize/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ARFC+label%3A%22type%3A+typescript%22) are still a work in progress. We recommend using [sequelize-typescript](https://www.npmjs.com/package/sequelize-typescript) to bridge the gap until our improvements are ready to be released.\n\nSequelize provides its own TypeScript definitions.\n\nPlease note that only **TypeScript \\>= 4.1** is supported. Our TypeScript support does not follow SemVer. We will support TypeScript releases for at least one year, after which they may be dropped in a SemVer MINOR release.\n\nAs Sequelize heavily relies on runtime property assignments, TypeScript won't be very useful out of the box. A decent amount of manual type declarations are needed to make models workable.\n\n## Installation[​](#installation \"Direct link to heading\")\n\nIn order to avoid clashes with different Node versions, the typings for Node are not included. You must install [`@types/node`](https://www.npmjs.com/package/@types/node) manually.\n\n## Usage[​](#usage \"Direct link to heading\")\n\n**Important**: You must use `declare` on your class properties typings to ensure TypeScript does not emit those class properties. See [Caveat with Public Class Fields](../../core-concepts/model-basics/index#caveat-with-public-class-fields)\n\nSequelize Models accept two generic types to define what the model's Attributes & Creation Attributes are like:\n\n``` typescript\nimport { Model, Optional } from 'sequelize';\n\n// We don't recommend doing this. Read on for the new way of declaring Model typings.\n\ntype UserAttributes = {\n  id: number,\n  name: string,\n  // other attributes...\n};\n\n// we're telling the Model that 'id' is optional\n// when creating an instance of the model (such as using Model.create()).\ntype UserCreationAttributes = Optional<UserAttributes, 'id'>;\n\nclass User extends Model<UserAttributes, UserCreationAttributes> {\n  declare id: number;\n  declare name: string;\n  // other attributes...\n}\n```\n\nThis solution is verbose. Sequelize \\>=6.14.0 provides new utility types that will drastically reduce the amount of boilerplate necessary: `InferAttributes`, and `InferCreationAttributes`. They will extract Attribute typings directly from the Model:\n\n``` typescript\nimport { Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\n// order of InferAttributes & InferCreationAttributes is important.\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  // 'CreationOptional' is a special type that marks the field as optional\n  // when creating an instance of the model (such as using Model.create()).\n  declare id: CreationOptional<number>;\n  declare name: string;\n  // other attributes...\n}\n```\n\nImportant things to know about `InferAttributes` & `InferCreationAttributes` work: They will select all declared properties of the class except:\n\n- Static fields and methods.\n- Methods (anything whose type is a function).\n- Those whose type uses the branded type `NonAttribute`.\n- Those excluded by using InferAttributes like this: `InferAttributes<User, { omit: 'properties' | 'to' | 'omit' }>`.\n- Those declared by the Model superclass (but not intermediary classes!). If one of your attributes shares the same name as one of the properties of `Model`, change its name. Doing this is likely to cause issues anyway.\n- Getter & setters are not automatically excluded. Set their return / parameter type to `NonAttribute`, or add them to `omit` to exclude them.\n\n`InferCreationAttributes` works the same way as `InferAttributes` with one exception:Properties typed using the `CreationOptional` type will be marked as optional. Note that attributes that accept `null`, or `undefined` do not need to use `CreationOptional`:\n\n``` typescript\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  declare firstName: string;\n\n  // there is no need to use CreationOptional on lastName because nullable attributes\n  // are always optional in User.create()\n  declare lastName: string | null;\n}\n\n// ...\n\nawait User.create({\n  firstName: 'Zoé',\n  // last name omitted, but this is still valid!\n});\n```\n\nYou only need to use `CreationOptional` & `NonAttribute` on class instance fields or getters.\n\nExample of a minimal TypeScript project with strict type-checking for attributes:\n\n``` typescript\n/**\n * Keep this file in sync with the code in the \"Usage\" section\n * in /docs/manual/other-topics/typescript.md\n *\n * Don't include this comment in the md file.\n */\nimport {\n  Association, DataTypes, HasManyAddAssociationMixin, HasManyCountAssociationsMixin,\n  HasManyCreateAssociationMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin,\n  HasManySetAssociationsMixin, HasManyAddAssociationsMixin, HasManyHasAssociationsMixin,\n  HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, Model, ModelDefined, Optional,\n  Sequelize, InferAttributes, InferCreationAttributes, CreationOptional, NonAttribute, ForeignKey,\n} from 'sequelize';\n\nconst sequelize = new Sequelize('mysql://root:asd123@localhost:3306/mydb');\n\n// 'projects' is excluded as it's not an attribute, it's an association.\nclass User extends Model<InferAttributes<User, { omit: 'projects' }>, InferCreationAttributes<User, { omit: 'projects' }>> {\n  // id can be undefined during creation when using `autoIncrement`\n  declare id: CreationOptional<number>;\n  declare name: string;\n  declare preferredName: string | null; // for nullable fields\n\n  // timestamps!\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n\n  // Since TS cannot determine model association at compile time\n  // we have to declare them here purely virtually\n  // these will not exist until `Model.init` was called.\n  declare getProjects: HasManyGetAssociationsMixin<Project>; // Note the null assertions!\n  declare addProject: HasManyAddAssociationMixin<Project, number>;\n  declare addProjects: HasManyAddAssociationsMixin<Project, number>;\n  declare setProjects: HasManySetAssociationsMixin<Project, number>;\n  declare removeProject: HasManyRemoveAssociationMixin<Project, number>;\n  declare removeProjects: HasManyRemoveAssociationsMixin<Project, number>;\n  declare hasProject: HasManyHasAssociationMixin<Project, number>;\n  declare hasProjects: HasManyHasAssociationsMixin<Project, number>;\n  declare countProjects: HasManyCountAssociationsMixin;\n  declare createProject: HasManyCreateAssociationMixin<Project, 'ownerId'>;\n\n  // You can also pre-declare possible inclusions, these will only be populated if you\n  // actively include a relation.\n  declare projects?: NonAttribute<Project[]>; // Note this is optional since it's only populated when explicitly requested in code\n\n  // getters that are not attributes should be tagged using NonAttribute\n  // to remove them from the model's Attribute Typings.\n  get fullName(): NonAttribute<string> {\n    return this.name;\n  }\n\n  declare static associations: {\n    projects: Association<User, Project>;\n  };\n}\n\nclass Project extends Model<\n  InferAttributes<Project>,\n  InferCreationAttributes<Project>\n> {\n  // id can be undefined during creation when using `autoIncrement`\n  declare id: CreationOptional<number>;\n\n  // foreign keys are automatically added by associations methods (like Project.belongsTo)\n  // by branding them using the `ForeignKey` type, `Project.init` will know it does not need to\n  // display an error if ownerId is missing.\n  declare ownerId: ForeignKey<User['id']>;\n  declare name: string;\n\n  // `owner` is an eagerly-loaded association.\n  // We tag it as `NonAttribute`\n  declare owner?: NonAttribute<User>;\n\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n}\n\nclass Address extends Model<\n  InferAttributes<Address>,\n  InferCreationAttributes<Address>\n> {\n  declare userId: ForeignKey<User['id']>;\n  declare address: string;\n\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n}\n\nProject.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    sequelize,\n    tableName: 'projects'\n  }\n);\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    preferredName: {\n      type: new DataTypes.STRING(128),\n      allowNull: true\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    tableName: 'users',\n    sequelize // passing the `sequelize` instance is required\n  }\n);\n\nAddress.init(\n  {\n    address: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    tableName: 'address',\n    sequelize // passing the `sequelize` instance is required\n  }\n);\n\n// You can also define modules in a functional way\ninterface NoteAttributes {\n  id: number;\n  title: string;\n  content: string;\n}\n\n// You can also set multiple attributes optional at once\ntype NoteCreationAttributes = Optional<NoteAttributes, 'id' | 'title'>;\n\n// And with a functional approach defining a module looks like this\nconst Note: ModelDefined<\n  NoteAttributes,\n  NoteCreationAttributes\n> = sequelize.define(\n  'Note',\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    title: {\n      type: new DataTypes.STRING(64),\n      defaultValue: 'Unnamed Note'\n    },\n    content: {\n      type: new DataTypes.STRING(4096),\n      allowNull: false\n    }\n  },\n  {\n    tableName: 'notes'\n  }\n);\n\n// Here we associate which actually populates out pre-declared `association` static and other methods.\nUser.hasMany(Project, {\n  sourceKey: 'id',\n  foreignKey: 'ownerId',\n  as: 'projects' // this determines the name in `associations`!\n});\n\nAddress.belongsTo(User, { targetKey: 'id' });\nUser.hasOne(Address, { sourceKey: 'id' });\n\nasync function doStuffWithUser() {\n  const newUser = await User.create({\n    name: 'Johnny',\n    preferredName: 'John',\n  });\n  console.log(newUser.id, newUser.name, newUser.preferredName);\n\n  const project = await newUser.createProject({\n    name: 'first!'\n  });\n\n  const ourUser = await User.findByPk(1, {\n    include: [User.associations.projects],\n    rejectOnEmpty: true // Specifying true here removes `null` from the return type!\n  });\n\n  // Note the `!` null assertion since TS can't know if we included\n  // the model or not\n  console.log(ourUser.projects![0].name);\n}\n\n(async () => {\n  await sequelize.sync();\n  await doStuffWithUser();\n})();\n```\n\n### The case of `Model.init`[​](#the-case-of-modelinit \"Direct link to heading\")\n\n`Model.init` requires an attribute configuration for each attribute declared in typings.\n\nSome attributes don't actually need to be passed to `Model.init`, this is how you can make this static method aware of them:\n\n- Methods used to define associations (`Model.belongsTo`, `Model.hasMany`, etc…) already handle the configuration of the necessary foreign keys attributes. It is not necessary to configure these foreign keys using `Model.init`. Use the `ForeignKey<>` branded type to make `Model.init` aware of the fact that it isn't necessary to configure the foreign key:\n\n  ``` typescript\n  import { Model, InferAttributes, InferCreationAttributes, DataTypes, ForeignKey } from 'sequelize';\n\n  class Project extends Model<InferAttributes<Project>, InferCreationAttributes<Project>> {\n    id: number;\n    userId: ForeignKey<number>;\n  }\n\n  // this configures the `userId` attribute.\n  Project.belongsTo(User);\n\n  // therefore, `userId` doesn't need to be specified here.\n  Project.init({\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n  }, { sequelize });\n  ```\n\n- Timestamp attributes managed by Sequelize (by default, `createdAt`, `updatedAt`, and `deletedAt`) don't need to be configured using `Model.init`, unfortunately `Model.init` has no way of knowing this. We recommend you use the minimum necessary configuration to silence this error:\n\n  ``` typescript\n  import { Model, InferAttributes, InferCreationAttributes, DataTypes } from 'sequelize';\n\n  class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n    id: number;\n    createdAt: Date;\n    updatedAt: Date;\n  }\n\n  User.init({\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    // technically, `createdAt` & `updatedAt` are added by Sequelize and don't need to be configured in Model.init\n    // but the typings of Model.init do not know this. Add the following to mute the typing error:\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  }, { sequelize });\n  ```\n\n### Usage without strict types for attributes[​](#usage-without-strict-types-for-attributes \"Direct link to heading\")\n\nThe typings for Sequelize v5 allowed you to define models without specifying types for the attributes. This is still possible for backwards compatibility and for cases where you feel strict typing for attributes isn't worth it.\n\n``` typescript\n/**\n * Keep this file in sync with the code in the \"Usage without strict types for\n * attributes\" section in /docs/manual/other-topics/typescript.md\n *\n * Don't include this comment in the md file.\n */\nimport { Sequelize, Model, DataTypes } from 'sequelize';\n\nconst sequelize = new Sequelize('mysql://root:asd123@localhost:3306/mydb');\n\nclass User extends Model {\n  declare id: number;\n  declare name: string;\n  declare preferredName: string | null;\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    preferredName: {\n      type: new DataTypes.STRING(128),\n      allowNull: true,\n    },\n  },\n  {\n    tableName: 'users',\n    sequelize, // passing the `sequelize` instance is required\n  },\n);\n\nasync function doStuffWithUserModel() {\n  const newUser = await User.create({\n    name: 'Johnny',\n    preferredName: 'John',\n  });\n  console.log(newUser.id, newUser.name, newUser.preferredName);\n\n  const foundUser = await User.findOne({ where: { name: 'Johnny' } });\n  if (foundUser === null) return;\n  console.log(foundUser.name);\n}\n```\n\n## Usage of `Sequelize#define`[​](#usage-of-sequelizedefine \"Direct link to heading\")\n\nIn Sequelize versions before v5, the default way of defining a model involved using `Sequelize#define`. It's still possible to define models with that, and you can also add typings to these models using interfaces.\n\n``` typescript\n/**\n * Keep this file in sync with the code in the \"Usage of `sequelize.define`\"\n * section in /docs/manual/other-topics/typescript.md\n *\n * Don't include this comment in the md file.\n */\nimport { Sequelize, Model, DataTypes, CreationOptional, InferAttributes, InferCreationAttributes } from 'sequelize';\n\nconst sequelize = new Sequelize('mysql://root:asd123@localhost:3306/mydb');\n\n// We recommend you declare an interface for the attributes, for stricter typechecking\n\ninterface UserModel extends Model<InferAttributes<UserModel>, InferCreationAttributes<UserModel>> {\n  // Some fields are optional when calling UserModel.create() or UserModel.build()\n  id: CreationOptional<number>;\n  name: string;\n}\n\nconst UserModel = sequelize.define<UserModel>('User', {\n  id: {\n    primaryKey: true,\n    type: DataTypes.INTEGER.UNSIGNED,\n  },\n  name: {\n    type: DataTypes.STRING,\n  },\n});\n\nasync function doStuff() {\n  const instance = await UserModel.findByPk(1, {\n    rejectOnEmpty: true,\n  });\n\n  console.log(instance.id);\n}\n```\n\n## Utility Types[​](#utility-types \"Direct link to heading\")\n\n### Requesting a Model Class[​](#requesting-a-model-class \"Direct link to heading\")\n\n`ModelStatic` is designed to be used to type a Model *class*.\n\nHere is an example of a utility method that requests a Model Class, and returns the list of primary keys defined in that class:\n\n``` typescript\nimport { ModelStatic, ModelAttributeColumnOptions, Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\n/**\n * Returns the list of attributes that are part of the model's primary key.\n */\nexport function getPrimaryKeyAttributes(model: ModelStatic<any>): ModelAttributeColumnOptions[] {\n  const attributes: ModelAttributeColumnOptions[] = [];\n\n  for (const attribute of Object.values(model.rawAttributes)) {\n    if (attribute.primaryKey) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  id: CreationOptional<number>;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER.UNSIGNED,\n    autoIncrement: true,\n    primaryKey: true\n  },\n}, { sequelize });\n\nconst primaryAttributes = getPrimaryKeyAttributes(User);\n```\n\n### Getting a Model's attributes[​](#getting-a-models-attributes \"Direct link to heading\")\n\nIf you need to access the list of attributes of a given model, `Attributes<Model>` and `CreationAttributes<Model>` are what you need to use.\n\nThey will return the Attributes (and Creation Attributes) of the Model passed as a parameter.\n\nDon't confuse them with `InferAttributes` and `InferCreationAttributes`. These two utility types should only every be used in the definition of a Model to automatically create the list of attributes from the model's public class fields. They only work with class-based model definitions (When using `Model.init`).\n\n`Attributes<Model>` and `CreationAttributes<Model>` will return the list of attributes of any model, no matter how they were created (be it `Model.init` or `Sequelize#define`).\n\nHere is an example of a utility function that requests a Model Class, and the name of an attribute ; and returns the corresponding attribute metadata.\n\n``` typescript\nimport {\n  ModelStatic,\n  ModelAttributeColumnOptions,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  Attributes\n} from 'sequelize';\n\nexport function getAttributeMetadata<M extends Model>(model: ModelStatic<M>, attributeName: keyof Attributes<M>): ModelAttributeColumnOptions {\n  const attribute = model.rawAttributes[attributeName];\n  if (attribute == null) {\n    throw new Error(`Attribute ${attributeName} does not exist on model ${model.name}`);\n  }\n\n  return attribute;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  id: CreationOptional<number>;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER.UNSIGNED,\n    autoIncrement: true,\n    primaryKey: true\n  },\n}, { sequelize });\n\nconst idAttributeMeta = getAttributeMetadata(User, 'id'); // works!\n\n// @ts-expect-error\nconst nameAttributeMeta = getAttributeMetadata(User, 'name'); // fails because 'name' is not an attribute of User\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/typescript/](https://sequelize.org/docs/v6/other-topics/typescript/)"
- name: UniqueConstraintError
  id: class/src/errors/validation/unique-constraint-error.ts~uniqueconstrainterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# UniqueConstraintError\n\n#### Extends:\n\nimport_validation_error~import_validation_error.default → UniqueConstraintError\n\nThrown when a unique constraint is violated in the database\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/validation/unique-constraint-error.ts~UniqueConstraintError.html](https://sequelize.org/api/v6/class/src/errors/validation/unique-constraint-error.ts~UniqueConstraintError.html)"
- name: UnknownConstraintError
  id: class/src/errors/database/unknown-constraint-error.ts~unknownconstrainterror
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# UnknownConstraintError\n\n#### Extends:\n\nimport_database_error~import_database_error.default → UnknownConstraintError\n\nThrown when constraint name is not found in the database\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/database/unknown-constraint-error.ts~UnknownConstraintError.html](https://sequelize.org/api/v6/class/src/errors/database/unknown-constraint-error.ts~UnknownConstraintError.html)"
- name: Upgrade to v6
  id: other-topics/upgrade/index
  summary: Sequelize v6 is the next major release after v5
  description: "# Upgrade to v6\n\nSequelize v6 is the next major release after v5. Below is a list of breaking changes to help you upgrade.\n\n## Breaking Changes[​](#breaking-changes \"Direct link to heading\")\n\n### Support for Node 10 and up[​](#support-for-node-10-and-up \"Direct link to heading\")\n\nSequelize v6 will only support Node 10 and up [\\#10821](https://github.com/sequelize/sequelize/issues/10821).\n\n### CLS[​](#cls \"Direct link to heading\")\n\nYou should now use [cls-hooked](https://github.com/Jeff-Lewis/cls-hooked) package for CLS support.\n\n``` js\nconst cls = require(\"cls-hooked\");\nconst namespace = cls.createNamespace(\"....\");\nconst Sequelize = require(\"sequelize\");\n\nSequelize.useCLS(namespace);\n```\n\n### Database Engine Support[​](#database-engine-support \"Direct link to heading\")\n\nWe have updated our minimum supported database engine versions. Using older database engine will show `SEQUELIZE0006` deprecation warning. Please check [the releases page](https://sequelize.org/releases/) for the version table.\n\n### Sequelize[​](#sequelize \"Direct link to heading\")\n\n- Bluebird has been removed. Internally all methods are now using async/await. Public API now returns native promises. Thanks to [Andy Edwards](https://github.com/jedwards1211) for this refactor work.\n- `Sequelize.Promise` is no longer available.\n- `sequelize.import` method has been removed. CLI users should update to `sequelize-cli@6`.\n- All instances of QueryInterface and QueryGenerator have been renamed to their lowerCamelCase variants eg. queryInterface and queryGenerator when used as property names on Model and Dialect, the class names remain the same.\n\n### Model[​](#model \"Direct link to heading\")\n\n#### `options.returning`[​](#optionsreturning \"Direct link to heading\")\n\nOption `returning: true` will no longer return attributes that are not defined in the model. Old behavior can be achieved by using `returning: ['*']` instead.\n\n#### `Model.changed()`[​](#modelchanged \"Direct link to heading\")\n\nThis method now tests for equality with [`_.isEqual`](https://lodash.com/docs/4.17.15#isEqual) and is now deep aware for JSON objects. Modifying a nested value for a JSON object won't mark it as changed (since it is still the same object).\n\n``` js\nconst instance = await MyModel.findOne();\n\ninstance.myJsonField.someProperty = 12345; // Changed from something else to 12345\nconsole.log(instance.changed()); // false\n\nawait instance.save(); // this will not save anything\n\ninstance.changed(\"myJsonField\", true);\nconsole.log(instance.changed()); // ['myJsonField']\n\nawait instance.save(); // will save\n```\n\n#### `Model.bulkCreate()`[​](#modelbulkcreate \"Direct link to heading\")\n\nThis method now throws `Sequelize.AggregateError` instead of `Bluebird.AggregateError`. All errors are now exposed as `errors` key.\n\n#### `Model.upsert()`[​](#modelupsert \"Direct link to heading\")\n\nNative upsert is now supported for all dialects.\n\n``` js\nconst [instance, created] = await MyModel.upsert({});\n```\n\nSignature for this method has been changed to `Promise<Model,boolean | null>`. First index contains upserted `instance`, second index contains a boolean (or `null`) indicating if record was created or updated. For SQLite/Postgres, `created` value will always be `null`.\n\n- MySQL - Implemented with ON DUPLICATE KEY UPDATE\n- PostgreSQL - Implemented with ON CONFLICT DO UPDATE\n- SQLite - Implemented with ON CONFLICT DO UPDATE\n- MSSQL - Implemented with MERGE statement\n\n**Note for Postgres users:** If upsert payload contains PK field, then PK will be used as the conflict target. Otherwise first unique constraint will be selected as the conflict key.\n\n### QueryInterface[​](#queryinterface \"Direct link to heading\")\n\n#### `addConstraint`[​](#addconstraint \"Direct link to heading\")\n\nThis method now only takes 2 parameters, `tableName` and `options`. Previously the second parameter could be a list of column names to apply the constraint to, this list must now be passed as `options.fields` property.\n\n## Changelog[​](#changelog \"Direct link to heading\")\n\n### 6.0.0-beta.7[​](#600-beta7 \"Direct link to heading\")\n\n- docs(associations): belongs to many create with through table\n- docs(query-interface): fix broken links [\\#12272](https://github.com/sequelize/sequelize/pull/12272)\n- docs(sequelize): omitNull only works for CREATE/UPDATE queries\n- docs: asyncify [\\#12297](https://github.com/sequelize/sequelize/pull/12297)\n- docs: responsive [\\#12308](https://github.com/sequelize/sequelize/pull/12308)\n- docs: update feature request template\n- feat(postgres): native upsert [\\#12301](https://github.com/sequelize/sequelize/pull/12301)\n- feat(sequelize): allow passing dialectOptions.options from url [\\#12404](https://github.com/sequelize/sequelize/pull/12404)\n- fix(include): check if attributes specified for included through model [\\#12316](https://github.com/sequelize/sequelize/pull/12316)\n- fix(model.destroy): return 0 with truncate [\\#12281](https://github.com/sequelize/sequelize/pull/12281)\n- fix(mssql): empty order array generates invalid FETCH statement [\\#12261](https://github.com/sequelize/sequelize/pull/12261)\n- fix(postgres): parse enums correctly when describing a table [\\#12409](https://github.com/sequelize/sequelize/pull/12409)\n- fix(query): ensure correct return signature for QueryTypes.RAW [\\#12305](https://github.com/sequelize/sequelize/pull/12305)\n- fix(query): preserve cls context for logger [\\#12328](https://github.com/sequelize/sequelize/pull/12328)\n- fix(query-generator): do not generate GROUP BY clause if options.group is empty [\\#12343](https://github.com/sequelize/sequelize/pull/12343)\n- fix(reload): include default scope [\\#12399](https://github.com/sequelize/sequelize/pull/12399)\n- fix(types): add Association into OrderItem type [\\#12332](https://github.com/sequelize/sequelize/pull/12332)\n- fix(types): add clientMinMessages to Options interface [\\#12375](https://github.com/sequelize/sequelize/pull/12375)\n- fix(types): transactionType in Options [\\#12377](https://github.com/sequelize/sequelize/pull/12377)\n- fix(types): add support for optional values in \"where\" clauses [\\#12337](https://github.com/sequelize/sequelize/pull/12337)\n- fix(types): add missing fields to 'FindOrCreateType' [\\#12338](https://github.com/sequelize/sequelize/pull/12338)\n- fix: add missing sql and parameters properties to some query errors [\\#12299](https://github.com/sequelize/sequelize/pull/12299)\n- fix: remove custom inspect [\\#12262](https://github.com/sequelize/sequelize/pull/12262)\n- refactor: cleanup query generators [\\#12304](https://github.com/sequelize/sequelize/pull/12304)\n\n### 6.0.0-beta.6[​](#600-beta6 \"Direct link to heading\")\n\n- docs(add-constraint): options.fields support\n- docs(association): document uniqueKey for belongs to many [\\#12166](https://github.com/sequelize/sequelize/pull/12166)\n- docs(association): options.through.where support\n- docs(association): use and instead of 'a nd' [\\#12191](https://github.com/sequelize/sequelize/pull/12191)\n- docs(association): use correct scope name [\\#12204](https://github.com/sequelize/sequelize/pull/12204)\n- docs(manuals): avoid duplicate header ids [\\#12201](https://github.com/sequelize/sequelize/pull/12201)\n- docs(model): correct syntax error in example code [\\#12137](https://github.com/sequelize/sequelize/pull/12137)\n- docs(query-interface): removeIndex indexNameOrAttributes [\\#11947](https://github.com/sequelize/sequelize/pull/11947)\n- docs(resources): add sequelize-guard library [\\#12235](https://github.com/sequelize/sequelize/pull/12235)\n- docs(typescript): fix confusing comments [\\#12226](https://github.com/sequelize/sequelize/pull/12226)\n- docs(v6-guide): bluebird removal API changes\n- docs: database version support info [\\#12168](https://github.com/sequelize/sequelize/pull/12168)\n- docs: remove remaining bluebird references [\\#12167](https://github.com/sequelize/sequelize/pull/12167)\n- feat(belongs-to-many): allow creation of paranoid join tables [\\#12088](https://github.com/sequelize/sequelize/pull/12088)\n- feat(belongs-to-many): get/has/count for paranoid join table [\\#12256](https://github.com/sequelize/sequelize/pull/12256)\n- feat(pool): expose maxUses pool config option [\\#12101](https://github.com/sequelize/sequelize/pull/12101)\n- feat(postgres): minify include aliases over limit [\\#11940](https://github.com/sequelize/sequelize/pull/11940)\n- feat(sequelize): handle query string host value [\\#12041](https://github.com/sequelize/sequelize/pull/12041)\n- fix(associations): ensure correct schema on all generated attributes [\\#12258](https://github.com/sequelize/sequelize/pull/12258)\n- fix(docs/instances): use correct variable for increment [\\#12087](https://github.com/sequelize/sequelize/pull/12087)\n- fix(include): separate queries are not sub-queries [\\#12144](https://github.com/sequelize/sequelize/pull/12144)\n- fix(model): fix unchained promise in association logic in bulkCreate [\\#12163](https://github.com/sequelize/sequelize/pull/12163)\n- fix(model): updateOnDuplicate handles composite keys [\\#11984](https://github.com/sequelize/sequelize/pull/11984)\n- fix(model.count): distinct without any column generates invalid SQL [\\#11946](https://github.com/sequelize/sequelize/pull/11946)\n- fix(model.reload): ignore options.where and always use this.where() [\\#12211](https://github.com/sequelize/sequelize/pull/12211)\n- fix(mssql) insert record failure because of BOOLEAN column type [\\#12090](https://github.com/sequelize/sequelize/pull/12090)\n- fix(mssql): cast sql_variant in query generator [\\#11994](https://github.com/sequelize/sequelize/pull/11994)\n- fix(mssql): dont use OUTPUT INSERTED for update without returning [\\#12260](https://github.com/sequelize/sequelize/pull/12260)\n- fix(mssql): duplicate order in FETCH/NEXT queries [\\#12257](https://github.com/sequelize/sequelize/pull/12257)\n- fix(mssql): set correct scale for float [\\#11962](https://github.com/sequelize/sequelize/pull/11962)\n- fix(mssql): tedious v9 requires connect call [\\#12182](https://github.com/sequelize/sequelize/pull/12182)\n- fix(mssql): use uppercase for engine table and columns [\\#12212](https://github.com/sequelize/sequelize/pull/12212)\n- fix(pool): show deprecation when engine is not supported [\\#12218](https://github.com/sequelize/sequelize/pull/12218)\n- fix(postgres): addColumn support ARRAY(ENUM) [\\#12259](https://github.com/sequelize/sequelize/pull/12259)\n- fix(query): do not bind \\\\ used within a whole-word [\\#12250](https://github.com/sequelize/sequelize/pull/12250)\n- fix(query-generator): handle literal for substring based operators [\\#12210](https://github.com/sequelize/sequelize/pull/12210)\n- fix(query-interface): allow passing null for query interface insert [\\#11931](https://github.com/sequelize/sequelize/pull/11931)\n- fix(query-interface): allow sequelize.fn and sequelize.literal in fields of IndexesOptions [\\#12224](https://github.com/sequelize/sequelize/pull/12224)\n- fix(scope): don't modify original scope definition [\\#12207](https://github.com/sequelize/sequelize/pull/12207)\n- fix(sqlite): multiple primary keys results in syntax error [\\#12237](https://github.com/sequelize/sequelize/pull/12237)\n- fix(sync): pass options to all query methods [\\#12208](https://github.com/sequelize/sequelize/pull/12208)\n- fix(typings): add type_helpers to file list [\\#12000](https://github.com/sequelize/sequelize/pull/12000)\n- fix(typings): correct Model.init return type [\\#12148](https://github.com/sequelize/sequelize/pull/12148)\n- fix(typings): fn is assignable to where [\\#12040](https://github.com/sequelize/sequelize/pull/12040)\n- fix(typings): getForeignKeysForTables argument definition [\\#12084](https://github.com/sequelize/sequelize/pull/12084)\n- fix(typings): make between operator accept date ranges [\\#12162](https://github.com/sequelize/sequelize/pull/12162)\n- refactor(ci): improve database wait script [\\#12132](https://github.com/sequelize/sequelize/pull/12132)\n- refactor(tsd-test-setup): add & setup dtslint [\\#11879](https://github.com/sequelize/sequelize/pull/11879)\n- refactor: move all dialect conditional logic into subclass [\\#12217](https://github.com/sequelize/sequelize/pull/12217)\n- refactor: remove sequelize.import helper [\\#12175](https://github.com/sequelize/sequelize/pull/12175)\n- refactor: use native versions [\\#12159](https://github.com/sequelize/sequelize/pull/12159)\n- refactor: use object spread instead of Object.assign [\\#12213](https://github.com/sequelize/sequelize/pull/12213)\n\n### 6.0.0-beta.5[​](#600-beta5 \"Direct link to heading\")\n\n- fix(find-all): throw on empty attributes [\\#11867](https://github.com/sequelize/sequelize/pull/11867)\n- fix(types): `queryInterface.addIndex` [\\#11844](https://github.com/sequelize/sequelize/pull/11844)\n- fix(types): `plain` option in `sequelize.query` [\\#11596](https://github.com/sequelize/sequelize/pull/11596)\n- fix(types): correct overloaded method order [\\#11727](https://github.com/sequelize/sequelize/pull/11727)\n- fix(types): `comparator` arg of `Sequelize.where` [\\#11843](https://github.com/sequelize/sequelize/pull/11843)\n- fix(types): fix BelongsToManyGetAssociationsMixinOptions [\\#11818](https://github.com/sequelize/sequelize/pull/11818)\n- fix(types): adds `hooks` to `CreateOptions` [\\#11736](https://github.com/sequelize/sequelize/pull/11736)\n- fix(increment): broken queries [\\#11852](https://github.com/sequelize/sequelize/pull/11852)\n- fix(associations): gets on many-to-many with non-primary target key [\\#11778](https://github.com/sequelize/sequelize11778/pull/)\n- fix: properly select SRID if present [\\#11763](https://github.com/sequelize/sequelize/pull/11763)\n- feat(sqlite): automatic path provision for `options.storage` [\\#11853](https://github.com/sequelize/sequelize/pull/11853)\n- feat(postgres): `idle_in_transaction_session_timeout` connection option [\\#11775](https://github.com/sequelize/sequelize11775/pull/)\n- feat(index): improve to support multiple fields with operator [\\#11934](https://github.com/sequelize/sequelize/pull/11934)\n- docs(transactions): fix addIndex example and grammar [\\#11759](https://github.com/sequelize/sequelize/pull/11759)\n- docs(raw-queries): remove outdated info [\\#11833](https://github.com/sequelize/sequelize/pull/11833)\n- docs(optimistic-locking): fix missing manual [\\#11850](https://github.com/sequelize/sequelize/pull/11850)\n- docs(model): findOne return value for empty result [\\#11762](https://github.com/sequelize/sequelize/pull/11762)\n- docs(model-querying-basics.md): add some commas [\\#11891](https://github.com/sequelize/sequelize/pull/11891)\n- docs(manuals): fix missing models-definition page [\\#11838](https://github.com/sequelize/sequelize/pull/11838)\n- docs(manuals): extensive rewrite [\\#11825](https://github.com/sequelize/sequelize/pull/11825)\n- docs(dialect-specific): add MSSQL domain auth example [\\#11799](https://github.com/sequelize/sequelize/pull/11799)\n- docs(associations): fix typos in assocs manual [\\#11888](https://github.com/sequelize/sequelize/pull/11888)\n- docs(associations): fix typo [\\#11869](https://github.com/sequelize/sequelize/pull/11869)\n\n### 6.0.0-beta.4[​](#600-beta4 \"Direct link to heading\")\n\n- feat(sync): allow to bypass drop statements when sync with alter enabled [\\#11708](https://github.com/sequelize/sequelize/pull/11708)\n- fix(model): injectDependentVirtualAttrs on included models [\\#11713](https://github.com/sequelize/sequelize/pull/11713)\n- fix(model): generate ON CONFLICT ... DO UPDATE correctly [\\#11666](https://github.com/sequelize/sequelize/pull/11666)\n- fix(mssql): optimize formatError RegEx [\\#11725](https://github.com/sequelize/sequelize/pull/11725)\n- fix(types): add getForeignKeyReferencesForTable type [\\#11738](https://github.com/sequelize/sequelize/pull/11738)\n- fix(types): add 'restore' hooks to types [\\#11730](https://github.com/sequelize/sequelize/pull/11730)\n- fix(types): added 'fieldMaps' to QueryOptions typings [\\#11702](https://github.com/sequelize/sequelize/pull/11702)\n- fix(types): add isSoftDeleted to Model [\\#11628](https://github.com/sequelize/sequelize/pull/11628)\n- fix(types): fix upsert typing [\\#11674](https://github.com/sequelize/sequelize/pull/11674)\n- fix(types): specified 'this' for getters and setters in fields [\\#11648](https://github.com/sequelize/sequelize/pull/11648)\n- fix(types): add paranoid to UpdateOptions interface [\\#11647](https://github.com/sequelize/sequelize/pull/11647)\n- fix(types): include 'as' in IncludeThroughOptions definition [\\#11624](https://github.com/sequelize/sequelize/pull/11624)\n- fix(types): add Includeable to IncludeOptions.include type [\\#11622](https://github.com/sequelize/sequelize/pull/11622)\n- fix(types): transaction lock [\\#11620](https://github.com/sequelize/sequelize/pull/11620)\n- fix(sequelize.fn): escape dollarsign (#11533) [\\#11606](https://github.com/sequelize/sequelize/pull/11606)\n- fix(types): add nested to Includeable [\\#11354](https://github.com/sequelize/sequelize/pull/11354)\n- fix(types): add date to where [\\#11612](https://github.com/sequelize/sequelize/pull/11612)\n- fix(types): add getDatabaseName (#11431) [\\#11614](https://github.com/sequelize/sequelize/pull/11614)\n- fix(types): beforeDestroy [\\#11618](https://github.com/sequelize/sequelize/pull/11618)\n- fix(types): query-interface table schema [\\#11582](https://github.com/sequelize/sequelize/pull/11582)\n- docs: README.md [\\#11698](https://github.com/sequelize/sequelize/pull/11698)\n- docs(sequelize): detail options.retry usage [\\#11643](https://github.com/sequelize/sequelize/pull/11643)\n- docs: clarify logging option in Sequelize constructor [\\#11653](https://github.com/sequelize/sequelize/pull/11653)\n- docs(migrations): fix syntax error in example [\\#11626](https://github.com/sequelize/sequelize/pull/11626)\n- docs: describe logging option [\\#11654](https://github.com/sequelize/sequelize/pull/11654)\n- docs(transaction): fix typo [\\#11659](https://github.com/sequelize/sequelize/pull/11659)\n- docs(hooks): add info about belongs-to-many [\\#11601](https://github.com/sequelize/sequelize/pull/11601)\n- docs(associations): fix typo [\\#11592](https://github.com/sequelize/sequelize/pull/11592)\n\n### 6.0.0-beta.3[​](#600-beta3 \"Direct link to heading\")\n\n- feat: support cls-hooked / tests [\\#11584](https://github.com/sequelize/sequelize/pull/11584)\n\n### 6.0.0-beta.2[​](#600-beta2 \"Direct link to heading\")\n\n- feat(postgres): change returning option to only return model attributes [\\#11526](https://github.com/sequelize/sequelize/pull/11526)\n- fix(associations): allow binary key for belongs-to-many [\\#11578](https://github.com/sequelize/sequelize/pull/11578)\n- fix(postgres): always replace returning statement for upsertQuery\n- fix(model): make .changed() deep aware [\\#10851](https://github.com/sequelize/sequelize/pull/10851)\n- change: use node 10 [\\#11580](https://github.com/sequelize/sequelize/pull/11580)\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/upgrade/](https://sequelize.org/docs/v6/other-topics/upgrade/)"
- name: Using sequelize in AWS Lambda
  id: other-topics/aws-lambda/index
  summary: AWS Lambda is a serverless computing service that allows customers to run code without having to worry about the underlying servers
  description: "# Using sequelize in AWS Lambda\n\n[AWS Lambda](https://aws.amazon.com/lambda/) is a serverless computing service that allows customers to run code without having to worry about the underlying servers. Using `sequelize` in AWS Lambda can be tricky if certain concepts are not properly understood and an appropriate configuration is not used. This guide seeks to clarify some of these concepts so users of the library can properly configure `sequelize` for AWS Lambda and troubleshoot issues.\n\n## TL;DR[​](#tldr \"Direct link to heading\")\n\nIf you just want to learn how to properly configure `sequelize` [connection pooling](../connection-pool/index) for AWS Lambda, all you need to know is that `sequelize` connection pooling does not get along well with AWS Lambda's Node.js runtime and it ends up causing more problems than it solves. Therefore, the most appropriate configuration is to **use pooling within the same invocation** and **avoid pooling across invocations** (i.e. close all connections at the end):\n\n``` js\nconst { Sequelize } = require(\"sequelize\");\n\nlet sequelize = null;\n\nasync function loadSequelize() {\n  const sequelize = new Sequelize(/* (...) */, {\n    // (...)\n    pool: {\n      /*\n       * Lambda functions process one request at a time but your code may issue multiple queries\n       * concurrently. Be wary that `sequelize` has methods that issue 2 queries concurrently\n       * (e.g. `Model.findAndCountAll()`). Using a value higher than 1 allows concurrent queries to\n       * be executed in parallel rather than serialized. Careful with executing too many queries in\n       * parallel per Lambda function execution since that can bring down your database with an\n       * excessive number of connections.\n       *\n       * Ideally you want to choose a `max` number where this holds true:\n       * max * EXPECTED_MAX_CONCURRENT_LAMBDA_INVOCATIONS < MAX_ALLOWED_DATABASE_CONNECTIONS * 0.8\n       */\n      max: 2,\n      /*\n       * Set this value to 0 so connection pool eviction logic eventually cleans up all connections\n       * in the event of a Lambda function timeout.\n       */\n      min: 0,\n      /*\n       * Set this value to 0 so connections are eligible for cleanup immediately after they're\n       * returned to the pool.\n       */\n      idle: 0,\n      // Choose a small enough value that fails fast if a connection takes too long to be established.\n      acquire: 3000,\n      /*\n       * Ensures the connection pool attempts to be cleaned up automatically on the next Lambda\n       * function invocation, if the previous invocation timed out.\n       */\n      evict: CURRENT_LAMBDA_FUNCTION_TIMEOUT\n    }\n  });\n\n  // or `sequelize.sync()`\n  await sequelize.authenticate();\n\n  return sequelize;\n}\n\nmodule.exports.handler = async function (event, callback) {\n  // re-use the sequelize instance across invocations to improve performance\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  } else {\n    // restart connection pool to ensure connections are not re-used across invocations\n    sequelize.connectionManager.initPools();\n\n    // restore `getConnection()` if it has been overwritten by `close()`\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\n      delete sequelize.connectionManager.getConnection;\n    }\n  }\n\n  try {\n    return await doSomethingWithSequelize(sequelize);\n  } finally {\n    // close any opened connections during the invocation\n    // this will wait for any in-progress queries to finish before closing the connections\n    await sequelize.connectionManager.close();\n  }\n};\n```\n\n### Using AWS RDS Proxy[​](#using-aws-rds-proxy \"Direct link to heading\")\n\nIf your are using [AWS RDS](https://aws.amazon.com/rds/) and you are using [Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-proxy.html) or a [supported database engine](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.html), then connect to your database using [AWS RDS Proxy](https://aws.amazon.com/rds/proxy/). This will make sure that opening/closing connections on each invocation is not an expensive operation for your underlying database server.\n\n------------------------------------------------------------------------\n\nIf you want to understand why you must use sequelize this way in AWS Lambda, continue reading the rest of this document:\n\n## The Node.js event loop[​](#the-nodejs-event-loop \"Direct link to heading\")\n\nThe [Node.js event loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/) is:\n\n> what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded —\n\nWhile the event loop implementation is in C++, here's a simplified JavaScript pseudo-implementation that illustrates how Node.js would execute a script named `index.js`:\n\n``` js\n// see: https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n// see: https://www.youtube.com/watch?v=P9csgxBgaZ8\n// see: https://www.youtube.com/watch?v=PNa9OMajw9w\nconst process = require('process');\n\n/*\n * counter of pending events\n *\n * reference counter is increased for every:\n *\n * 1. scheduled timer: `setTimeout()`, `setInterval()`, etc.\n * 2. scheduled immediate: `setImmediate()`.\n * 3. syscall of non-blocking IO: `require('net').Server.listen()`, etc.\n * 4. scheduled task to the thread pool: `require('fs').WriteStream.write()`, etc.\n *\n * reference counter is decreased for every:\n *\n * 1. elapsed timer\n * 2. executed immediate\n * 3. completed non-blocking IO\n * 4. completed thread pool task\n *\n * references can be explicitly decreased by invoking `.unref()` on some\n * objects like: `require('net').Socket.unref()`\n */\nlet refs = 0;\n\n/*\n * a heap of timers, sorted by next ocurrence\n *\n * whenever `setTimeout()` or `setInterval()` is invoked, a timer gets added here\n */\nconst timersHeap = /* (...) */;\n\n/*\n * a FIFO queue of immediates\n *\n * whenever `setImmediate()` is invoked, it gets added here\n */\nconst immediates = /* (...) */;\n\n/*\n * a FIFO queue of next tick callbacks\n *\n * whenever `require('process').nextTick()` is invoked, the callback gets added here\n */\nconst nextTickCallbacks = [];\n\n/*\n * a heap of Promise-related callbacks, sorted by promise constructors callbacks first,\n * and then resolved/rejected callbacks\n *\n * whenever a new Promise instance is created via `new Promise` or a promise resolves/rejects\n * the appropriate callback (if any) gets added here\n */\nconst promiseCallbacksHeap = /* ... */;\n\nfunction execTicksAndPromises() {\n  while (nextTickCallbacks.length || promiseCallbacksHeap.size()) {\n    // execute all callbacks scheduled with `process.nextTick()`\n    while (nextTickCallbacks.length) {\n      const callback = nextTickCallbacks.shift();\n      callback();\n    }\n\n    // execute all promise-related callbacks\n    while (promiseCallbacksHeap.size()) {\n      const callback = promiseCallbacksHeap.pop();\n      callback();\n    }\n  }\n}\n\ntry {\n  // execute index.js\n  require('./index');\n  execTicksAndPromises();\n\n  do {\n    // timers phase: executes all elapsed timers\n    getElapsedTimerCallbacks(timersHeap).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // pending callbacks phase: executes some system operations (like `TCP errors`) that are not\n    //                          executed in the poll phase\n    getPendingCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    })\n\n    // poll phase: gets completed non-blocking I/O events or thread pool tasks and invokes the\n    //             corresponding callbacks; if there are none and there's no pending immediates,\n    //             it blocks waiting for events/completed tasks for a maximum of `maxWait`\n    const maxWait = computeWhenNextTimerElapses(timersHeap);\n    pollForEventsFromKernelOrThreadPool(maxWait, immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // check phase: execute available immediates; if an immediate callback invokes `setImmediate()`\n    //              it will be invoked on the next event loop iteration\n    getImmediateCallbacks(immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // close callbacks phase: execute special `.on('close')` callbacks\n    getCloseCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    if (refs === 0) {\n      // listeners of this event may execute code that increments `refs`\n      process.emit('beforeExit');\n    }\n  } while (refs > 0);\n} catch (err) {\n  if (!process.listenerCount('uncaughtException')) {\n    // default behavior: print stack and exit with status code 1\n    console.error(err.stack);\n    process.exit(1);\n  } else {\n    // there are listeners: emit the event and exit using `process.exitCode || 0`\n    process.emit('uncaughtException');\n    process.exit();\n  }\n}\n```\n\n## AWS Lambda function handler types in Node.js[​](#aws-lambda-function-handler-types-in-nodejs \"Direct link to heading\")\n\nAWS Lambda handlers come in two flavors in Node.js:\n\n[Non-async handlers](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html#nodejs-handler-sync) (i.e. `callback`):\n\n``` js\nmodule.exports.handler = function (event, context, callback) {\n  try {\n    doSomething();\n    callback(null, \"Hello World!\"); // Lambda returns \"Hello World!\"\n  } catch (err) {\n    // try/catch is not required, uncaught exceptions invoke `callback(err)` implicitly\n    callback(err); // Lambda fails with `err`\n  }\n};\n```\n\n[Async handlers](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html#nodejs-handler-async) (i.e. use `async`/`await` or `Promise`s):\n\n``` js\n// async/await\nmodule.exports.handler = async function (event, context) {\n  try {\n    await doSomethingAsync();\n    return \"Hello World!\"; // equivalent of: callback(null, \"Hello World!\");\n  } catch (err) {\n    // try/cath is not required, async functions always return a Promise\n    throw err; // equivalent of: callback(err);\n  }\n};\n\n// Promise\nmodule.exports.handler = function (event, context) {\n  /*\n   * must return a `Promise` to be considered an async handler\n   *\n   * an uncaught exception that prevents a `Promise` to be returned\n   * by the handler will \"downgrade\" the handler to non-async\n   */\n  return Promise.resolve()\n    .then(() => doSomethingAsync())\n    .then(() => \"Hello World!\");\n};\n```\n\nWhile at first glance it seems like async VS non-async handlers are simply a code styling choice, there is a fundamental difference between the two:\n\n- In async handlers, a Lambda function execution finishes when the `Promise` returned by the handler resolves or rejects, regardless of whether the event loop is empty or not.\n- In non-async handlers, a Lambda function execution finishes when one of the following conditions occur:\n  - The event loop is empty ([process `'beforeExit'` event](https://nodejs.org/dist/latest-v12.x/docs/api/process.html#process_event_beforeexit) is used to detect this).\n  - The `callback` argument is invoked and [`context.callbackWaitsForEmptyEventLoop`](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html) is set to `false`.\n\nThis fundamental difference is very important to understand in order to rationalize how `sequelize` may be affected by it. Here are a few examples to illustrate the difference:\n\n``` js\n// no callback invoked\nmodule.exports.handler = function () {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n};\n\n// callback invoked\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  callback(null, \"Hello World!\");\n};\n\n// callback invoked, context.callbackWaitsForEmptyEventLoop = false\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  context.callbackWaitsForEmptyEventLoop = false;\n  setTimeout(() => doSomething(), 2000);\n  setTimeout(() => callback(null, \"Hello World!\"), 1000);\n};\n\n// async/await\nmodule.exports.handler = async function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return \"Hello World!\";\n};\n\n// Promise\nmodule.exports.handler = function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return Promise.resolve(\"Hello World!\");\n};\n```\n\n## AWS Lambda execution environments (i.e. containers)[​](#aws-lambda-execution-environments-ie-containers \"Direct link to heading\")\n\nAWS Lambda function handlers are invoked by built-in or custom [runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) which run in execution environments (i.e. containers) that [may or may not be re-used](https://aws.amazon.com/blogs/compute/container-reuse-in-lambda/) across invocations. Containers can only process [one request at a time](https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html). Concurrent invocations of a Lambda function means that a container instance will be created for each concurrent request.\n\nIn practice, this means that Lambda functions should be designed to be stateless but developers can use state for caching purposes:\n\n``` js\nlet sequelize = null;\n\nmodule.exports.handler = async function () {\n  /*\n   * sequelize will already be loaded if the container is re-used\n   *\n   * containers are never re-used when a Lambda function's code change\n   *\n   * while the time elapsed between Lambda invocations is used as a factor to determine whether\n   * a container is re-used, no assumptions should be made of when a container is actually re-used\n   *\n   * AWS does not publicly document the rules of container re-use \"by design\" since containers\n   * can be recycled in response to internal AWS Lambda events (e.g. a Lambda function container\n   * may be recycled even if the function is constanly invoked)\n   */\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  }\n\n  return await doSomethingWithSequelize(sequelize);\n};\n```\n\nWhen a Lambda function doesn't wait for the event loop to be empty and a container is re-used, the event loop will be \"paused\" until the next invocation occurs. For example:\n\n``` js\nlet counter = 0;\n\nmodule.exports.handler = function (event, context, callback) {\n  /*\n   * The first invocation (i.e. container initialized) will:\n   * - log:\n   *   - Fast timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 5XX\n   * - return: 1\n   *\n   * Wait 3 seconds and invoke the Lambda again. The invocation (i.e. container re-used) will:\n   * - log:\n   *   - Slow timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 3XXX\n   *   - Fast timeout invoked. Request id: 11111111-1111-1111-1111-111111111111 | Elapsed ms: 5XX\n   * - return: 3\n   */\n  const now = Date.now();\n\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  setTimeout(() => {\n    console.log(\n      \"Slow timeout invoked. Request id:\",\n      context.awsRequestId,\n      \"| Elapsed ms:\",\n      Date.now() - now\n    );\n    counter++;\n  }, 1000);\n\n  setTimeout(() => {\n    console.log(\n      \"Fast timeout invoked. Request id:\",\n      context.awsRequestId,\n      \"| Elapsed ms:\",\n      Date.now() - now\n    );\n    counter++;\n    callback(null, counter);\n  }, 500);\n};\n```\n\n## Sequelize connection pooling in AWS Lambda[​](#sequelize-connection-pooling-in-aws-lambda \"Direct link to heading\")\n\n`sequelize` uses connection pooling for optimizing usage of database connections. The connection pool used by `sequelize` is implemented using `setTimeout()` callbacks (which are processed by the Node.js event loop).\n\nGiven the fact that AWS Lambda containers process one request at a time, one would be tempted to configure `sequelize` as follows:\n\n``` js\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize(/* (...) */, {\n  // (...)\n  pool: { min: 1, max: 1 }\n});\n```\n\nThis configuration prevents Lambda containers from overwhelming the database server with an excessive number of connections (since each container takes at most 1 connection). It also makes sure that the container's connection is not garbage collected when idle so the connection does not need to be re-established when the Lambda container is re-used. Unfortunately, this configuration presents a set of issues:\n\n1.  Lambdas that wait for the event loop to be empty will always time out. `sequelize` connection pools schedule a `setTimeout` every [`options.pool.evict`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-constructor-constructor) ms until **all idle connections have been closed**. However, since `min` is set to `1`, there will always be at least one idle connection in the pool, resulting in an infinite event loop.\n2.  Some operations like [`Model.findAndCountAll()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-findAndCountAll) execute multiple queries asynchronously (e.g. [`Model.count()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-count) and [`Model.findAll()`](https://sequelize.org/api/v6/class/src/model.js~Model.html#static-method-findAll)). Using a maximum of one connection forces the queries to be exectued serially (rather than in parallel using two connections). While this may be an acceptable performance compromise in order to maintain a manageable number of database connections, long running queries may result in [`ConnectionAcquireTimeoutError`](https://sequelize.org/api/v6/class/src/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError.html) if a query takes more than the default or configured [`options.pool.acquire`](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-constructor-constructor) timeout to complete. This is because the serialized query will be stuck waiting on the pool until the connection used by the other query is released.\n3.  If the AWS Lambda function times out (i.e. the configured AWS Lambda timeout is exceeded), the Node.js event loop will be \"paused\" regardless of its state. This can cause race conditions that result in connection errors. For example, you may encounter situations where a very expensive query causes a Lambda function to time out, the event loop is \"paused\" before the expensive query finishes and the connection is released back to the pool, and subsequent Lambda invocations fail with a `ConnectionAcquireTimeoutError` if the container is re-used and the connection has not been returned after `options.pool.acquire` ms.\n\nYou can attempt to mitigate issue **\\#2** by using `{ min: 1, max: 2 }`. However, this will still suffer from issues **\\#1** and **\\#3** whilst introducing additional ones:\n\n1.  Race conditions may occur where the even loop \"pauses\" before a connection pool eviction callback executes or more than `options.pool.evict` time elapses between Lambda invocations. This can result in timeout errors, handshake errors, and other connection-related errors.\n2.  If you use an operation like `Model.findAndCountAll()` and either the underlying `Model.count()` or `Model.findAll()` queries fail, you won't be able to ensure that the other query has finished executing (and the connection is put back into the pool) before the Lambda function execution finishes and the event loop is \"paused\". This can leave connections in a stale state which can result in prematurely closed TCP connections and other connection-related errors.\n\nUsing `{ min: 2, max: 2 }` mitigates additional issue **\\#1**. However, the configuration still suffers from all the other issues (original **\\#1**, **\\#3**, and additional **\\#2**).\n\n### Detailed race condition example[​](#detailed-race-condition-example \"Direct link to heading\")\n\nIn order to make sense of the example, you'll need a bit more context of how certain parts of Lambda and `sequelize` are implemented.\n\nThe built-in AWS Lambda runtime for `nodejs.12x` is implemented in Node.js. You can access the entire source code of the runtime by reading the contents of `/var/runtime/` inside a Node.js Lambda function. The relevant subset of the code is as follows:\n\n**runtime/Runtime.js**\n\n``` js\nclass Runtime {\n  // (...)\n\n  // each iteration is executed in the event loop `check` phase\n  scheduleIteration() {\n    setImmediate(() => this.handleOnce().then(/* (...) */));\n  }\n\n  async handleOnce() {\n    // get next invocation. see: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next\n    let { bodyJson, headers } = await this.client.nextInvocation();\n\n    // prepare `context` handler parameter\n    let invokeContext = new InvokeContext(headers);\n    invokeContext.updateLoggingContext();\n\n    // prepare `callback` handler parameter\n    let [callback, callbackContext] = CallbackContext.build(\n      this.client,\n      invokeContext.invokeId,\n      this.scheduleIteration.bind(this)\n    );\n\n    try {\n      // this listener is subscribed to process.on('beforeExit')\n      // so that when when `context.callbackWaitsForEmptyEventLoop === true`\n      // the Lambda execution finishes after the event loop is empty\n      this._setDefaultExitListener(invokeContext.invokeId);\n\n      // execute handler\n      const result = this.handler(\n        JSON.parse(bodyJson),\n        invokeContext.attachEnvironmentData(callbackContext),\n        callback\n      );\n\n      // finish the execution if the handler is async\n      if (_isPromise(result)) {\n        result\n          .then(callbackContext.succeed, callbackContext.fail)\n          .catch(callbackContext.fail);\n      }\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n```\n\nThe runtime schedules an iteration at the end of the initialization code:\n\n**runtime/index.js**\n\n``` js\n// (...)\n\nnew Runtime(client, handler, errorCallbacks).scheduleIteration();\n```\n\nAll SQL queries invoked by a Lambda handler using `sequelize` are ultimately executed using [Sequelize.prototype.query()](https://sequelize.org/api/v6/class/src/sequelize.js~Sequelize.html#instance-method-query). This method is responsible for obtaining a connection from the pool, executing the query, and releasing the connection back to the pool when the query completes. The following snippet shows a simplification of the method's logic for queries without transactions:\n\n**sequelize.js**\n\n``` js\nclass Sequelize {\n  // (...)\n\n  query(sql, options) {\n    // (...)\n\n    const connection = await this.connectionManager.getConnection(options);\n    const query = new this.dialect.Query(connection, this, options);\n\n    try {\n      return await query.run(sql, bindParameters);\n    } finally {\n      await this.connectionManager.releaseConnection(connection);\n    }\n  }\n}\n```\n\nThe field `this.connectionManager` is an instance of a dialect-specific `ConnectionManager` class. All dialect-specific managers inherit from an abstract `ConnectionManager` class which initializes the connection pool and configures it to invoke the dialect-specific class' `connect()` method everytime a new connection needs to be created. The following snippet shows a simplification of the `mysql` dialect `connect()` method:\n\n**mysql/connection-manager.js**\n\n``` js\nclass ConnectionManager {\n  // (...)\n\n  async connect(config) {\n    // (...)\n    return await new Promise((resolve, reject) => {\n      // uses mysql2's `new Connection()`\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = (e) => {\n        connection.removeListener(\"connect\", connectHandler);\n        connection.removeListener(\"error\", connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        connection.removeListener(\"error\", errorHandler);\n        resolve(connection);\n      };\n\n      connection.on(\"error\", errorHandler);\n      connection.once(\"connect\", connectHandler);\n    });\n  }\n}\n```\n\nThe field `this.lib` refers to [`mysql2`](https://www.npmjs.com/package/mysql2) and the function `createConnection()` creates a connection by creating an instance of a `Connection` class. The relevant subset of this class is as follows:\n\n**mysql2/connection.js**\n\n``` js\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    // (...)\n\n    // create Socket\n    this.stream = /* (...) */;\n\n    // when data is received, clear timeout\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n\n    // (...)\n\n    // when handshake is completed, emit the 'connect' event\n    handshakeCommand.on('end', () => {\n      this.emit('connect', handshakeCommand.handshake);\n    });\n\n    // set a timeout to trigger if no data is received on the socket\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  // (...)\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    // this will emit the 'error' event\n    this._handleNetworkError(err);\n  }\n}\n```\n\nBased on the previous code, the following sequence of events shows how a connection pooling race condition with `{ min: 1, max: 1 }` can result with in a `ETIMEDOUT` error:\n\n1.  A Lambda invocation is received (new container):\n    1.  The event loop enters the `check` phase and `runtime/Runtime.js`'s `handleOnce()` method is invoked.\n        1.  The `handleOnce()` method invokes `await this.client.nextInvocation()` and waits.\n    2.  The event loop skips the `timers` phase since there no pending timers.\n    3.  The event loop enters the `poll` phase and the `handleOnce()` method continues.\n    4.  The Lambda handler is invoked.\n    5.  The Lambda handler invokes `Model.count()` which invokes `sequelize.js`'s `query()` which invokes `connectionManager.getConnection()`.\n    6.  The connection pool initializes a `setTimeout(..., config.pool.acquire)` for `Model.count()` and invokes `mysql/connection-manager.js`'s `connect()` to create a new connection.\n    7.  `mysql2/connection.js` creates the TCP socket and initializes a `setTimeout()` for failing the connection with `ETIMEDOUT`.\n    8.  The promise returned by the handler rejects (for reasons not detailed here) so the Lambda function execution finishes and the Node.js event loop is \"paused\".\n2.  Enough time elapses beween invocations so that:\n    1.  `config.pool.acquire` timer elapses.\n    2.  `mysql2` connection timer has not elapsed yet but has almost elapsed (i.e. race condition).\n3.  A second Lambda invocation is received (container re-used):\n    1.  The event loop is \"resumed\".\n    2.  The event loop enters the `check` phase and `runtime/Runtime.js`'s `handleOnce()` method is invoked.\n    3.  The event loop enters the `timers` phase and the `config.pool.acquire` timer elapses, causing the previous invocation's `Model.count()` promise to reject with `ConnectionAcquireTimeoutError`.\n    4.  The event loop enters the `poll` phase and the `handleOnce()` method continues.\n    5.  The Lambda handler is invoked.\n    6.  The Lambda handler invokes `Model.count()` which invokes `sequelize.js`'s `query()` which invokes `connectionManager.getConnection()`.\n    7.  The connection pool initializes a `setTimeout(..., config.pool.acquire)` for `Model.count()` and since `{ max : 1 }` it waits for the pending `connect()` promise to complete.\n    8.  The event loop skips the `check` phase since there are no pending immediates.\n    9.  **Race condition:** The event loop enters the `timers` phase and the `mysql2` connection timeout elapses, resulting in a `ETIMEDOUT` error that is emitted using `connection.emit('error')`.\n    10. The emitted event rejects the promise in `mysql/connection-manager.js`'s `connect()` which in turn forwards the rejected promise to the `Model.count()` query's promise.\n    11. The lambda function fails with an `ETIMEDOUT` error.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/aws-lambda/](https://sequelize.org/docs/v6/other-topics/aws-lambda/)"
- name: UUID
  id: class/src/data-types.js~uuid
  summary: A column storing a unique universal identifier
  description: "# UUID\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → UUID\n\nA column storing a unique universal identifier. Use with `UUIDV1` or `UUIDV4` for default values.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~UUID.html](https://sequelize.org/api/v6/class/src/data-types.js~UUID.html)"
- name: UUIDV1
  id: class/src/data-types.js~uuidv1
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# UUIDV1\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → UUIDV1\n\nA default unique universal identifier generated following the UUID v1 standard\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~UUIDV1.html](https://sequelize.org/api/v6/class/src/data-types.js~UUIDV1.html)"
- name: UUIDV4
  id: class/src/data-types.js~uuidv4
  summary: Copyright © 2014–present Sequelize contributors Licensed under the MIT License
  description: "# UUIDV4\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → UUIDV4\n\nA default unique universal identifier generated following the UUID v4 standard\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~UUIDV4.html](https://sequelize.org/api/v6/class/src/data-types.js~UUIDV4.html)"
- name: ValidationError
  id: class/src/errors/validation-error.ts~validationerror
  summary: Validation Error
  description: "# ValidationError\n\n#### Extends:\n\nimport_base_error~import_base_error.default → ValidationError\n\nValidation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property, which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/validation-error.ts~ValidationError.html](https://sequelize.org/api/v6/class/src/errors/validation-error.ts~ValidationError.html)"
- name: ValidationErrorItem
  id: class/src/errors/validation-error.ts~validationerroritem
  summary: Validation Error Item Instances of this class are included in the ValidationError.errors property
  description: "# ValidationErrorItem\n\nValidation Error Item Instances of this class are included in the `ValidationError.errors` property.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/errors/validation-error.ts~ValidationErrorItem.html](https://sequelize.org/api/v6/class/src/errors/validation-error.ts~ValidationErrorItem.html)"
- name: Validations & Constraints
  id: core-concepts/validations-and-constraints/index
  summary: In this tutorial you will learn how to setup validations and constraints for your models in Sequelize
  description: "# Validations & Constraints\n\nIn this tutorial you will learn how to setup validations and constraints for your models in Sequelize.\n\nFor this tutorial, the following setup will be assumed:\n\n``` js\nconst { Sequelize, Op, Model, DataTypes } = require(\"sequelize\");\nconst sequelize = new Sequelize(\"sqlite::memory:\");\n\nconst User = sequelize.define(\"user\", {\n  username: {\n    type: DataTypes.TEXT,\n    allowNull: false,\n    unique: true\n  },\n  hashedPassword: {\n    type: DataTypes.STRING(64),\n    validate: {\n      is: /^[0-9a-f]{64}$/i\n    }\n  }\n});\n\n(async () => {\n  await sequelize.sync({ force: true });\n  // Code here\n})();\n```\n\n## Difference between Validations and Constraints[​](#difference-between-validations-and-constraints \"Direct link to heading\")\n\nValidations are checks performed in the Sequelize level, in pure JavaScript. They can be arbitrarily complex if you provide a custom validator function, or can be one of the built-in validators offered by Sequelize. If a validation fails, no SQL query will be sent to the database at all.\n\nOn the other hand, constraints are rules defined at SQL level. The most basic example of constraint is an Unique Constraint. If a constraint check fails, an error will be thrown by the database and Sequelize will forward this error to JavaScript (in this example, throwing a `SequelizeUniqueConstraintError`). Note that in this case, the SQL query was performed, unlike the case for validations.\n\n## Unique Constraint[​](#unique-constraint \"Direct link to heading\")\n\nOur code example above defines a unique constraint on the `username` field:\n\n``` js\n/* ... */ {\n  username: {\n    type: DataTypes.TEXT,\n    allowNull: false,\n    unique: true\n  },\n} /* ... */\n```\n\nWhen this model is synchronized (by calling `sequelize.sync` for example), the `username` field will be created in the table as ``  `username` TEXT UNIQUE ``, and an attempt to insert an username that already exists there will throw a `SequelizeUniqueConstraintError`.\n\n## Allowing/disallowing null values[​](#allowingdisallowing-null-values \"Direct link to heading\")\n\nBy default, `null` is an allowed value for every column of a model. This can be disabled setting the `allowNull: false` option for a column, as it was done in the `username` field from our code example:\n\n``` js\n/* ... */ {\n  username: {\n    type: DataTypes.TEXT,\n    allowNull: false,\n    unique: true\n  },\n} /* ... */\n```\n\nWithout `allowNull: false`, the call `User.create({})` would work.\n\n### Note about `allowNull` implementation[​](#note-about-allownull-implementation \"Direct link to heading\")\n\nThe `allowNull` check is the only check in Sequelize that is a mix of a *validation* and a *constraint* in the senses described at the beginning of this tutorial. This is because:\n\n- If an attempt is made to set `null` to a field that does not allow null, a `ValidationError` will be thrown *without any SQL query being performed*.\n- In addition, after `sequelize.sync`, the column that has `allowNull: false` will be defined with a `NOT NULL` SQL constraint. This way, direct SQL queries that attempt to set the value to `null` will also fail.\n\n## Validators[​](#validators \"Direct link to heading\")\n\nModel validators allow you to specify format/content/inheritance validations for each attribute of the model. Validations are automatically run on `create`, `update` and `save`. You can also call `validate()` to manually validate an instance.\n\n### Per-attribute validations[​](#per-attribute-validations \"Direct link to heading\")\n\nYou can define your custom validators or use several built-in validators, implemented by [validator.js (10.11.0)](https://github.com/chriso/validator.js), as shown below.\n\n``` js\nsequelize.define('foo', {\n  bar: {\n    type: DataTypes.STRING,\n    validate: {\n      is: /^[a-z]+$/i,          // matches this RegExp\n      is: [\"^[a-z]+$\",'i'],     // same as above, but constructing the RegExp from a string\n      not: /^[a-z]+$/i,         // does not match this RegExp\n      not: [\"^[a-z]+$\",'i'],    // same as above, but constructing the RegExp from a string\n      isEmail: true,            // checks for email format (foo@bar.com)\n      isUrl: true,              // checks for url format (https://foo.com)\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\n      isIPv6: true,             // checks for IPv6 format\n      isAlpha: true,            // will only allow letters\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \"_abc\" will fail\n      isNumeric: true,          // will only allow numbers\n      isInt: true,              // checks for valid integers\n      isFloat: true,            // checks for valid floating point numbers\n      isDecimal: true,          // checks for any numbers\n      isLowercase: true,        // checks for lowercase\n      isUppercase: true,        // checks for uppercase\n      notNull: true,            // won't allow null\n      isNull: true,             // only allows null\n      notEmpty: true,           // don't allow empty strings\n      equals: 'specific value', // only allow a specific value\n      contains: 'foo',          // force specific substrings\n      notIn: [['foo', 'bar']],  // check the value is not one of these\n      isIn: [['foo', 'bar']],   // check the value is one of these\n      notContains: 'bar',       // don't allow specific substrings\n      len: [2,10],              // only allow values with length between 2 and 10\n      isUUID: 4,                // only allow uuids\n      isDate: true,             // only allow date strings\n      isAfter: \"2011-11-05\",    // only allow date strings after a specific date\n      isBefore: \"2011-11-05\",   // only allow date strings before a specific date\n      max: 23,                  // only allow values <= 23\n      min: 23,                  // only allow values >= 23\n      isCreditCard: true,       // check for valid credit card numbers\n\n      // Examples of custom validators:\n      isEven(value) {\n        if (parseInt(value) % 2 !== 0) {\n          throw new Error('Only even values are allowed!');\n        }\n      }\n      isGreaterThanOtherField(value) {\n        if (parseInt(value) <= parseInt(this.otherField)) {\n          throw new Error('Bar must be greater than otherField.');\n        }\n      }\n    }\n  }\n});\n```\n\nNote that where multiple arguments need to be passed to the built-in validation functions, the arguments to be passed must be in an array. But if a single array argument is to be passed, for instance an array of acceptable strings for `isIn`, this will be interpreted as multiple string arguments instead of one array argument. To work around this pass a single-length array of arguments, such as `[['foo', 'bar']]` as shown above.\n\nTo use a custom error message instead of that provided by [validator.js](https://github.com/chriso/validator.js), use an object instead of the plain value or array of arguments, for example a validator which needs no argument can be given a custom message with\n\n``` js\nisInt: {\n  msg: \"Must be an integer number of pennies\"\n}\n```\n\nor if arguments need to also be passed add an `args` property:\n\n``` js\nisIn: {\n  args: [['en', 'zh']],\n  msg: \"Must be English or Chinese\"\n}\n```\n\nWhen using custom validator functions the error message will be whatever message the thrown `Error` object holds.\n\nSee [the validator.js project](https://github.com/chriso/validator.js) for more details on the built in validation methods.\n\n**Hint:** You can also define a custom function for the logging part. Just pass a function. The first parameter will be the string that is logged.\n\n### `allowNull` interaction with other validators[​](#allownull-interaction-with-other-validators \"Direct link to heading\")\n\nIf a particular field of a model is set to not allow null (with `allowNull: false`) and that value has been set to `null`, all validators will be skipped and a `ValidationError` will be thrown.\n\nOn the other hand, if it is set to allow null (with `allowNull: true`) and that value has been set to `null`, only the built-in validators will be skipped, while the custom validators will still run.\n\nThis means you can, for instance, have a string field which validates its length to be between 5 and 10 characters, but which also allows `null` (since the length validator will be skipped automatically when the value is `null`):\n\n``` js\nclass User extends Model {}\nUser.init({\n  username: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    validate: {\n      len: [5, 10]\n    }\n  }\n}, { sequelize });\n```\n\nYou also can conditionally allow `null` values, with a custom validator, since it won't be skipped:\n\n``` js\nclass User extends Model {}\nUser.init({\n  age: Sequelize.INTEGER,\n  name: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    validate: {\n      customValidator(value) {\n        if (value === null && this.age !== 10) {\n          throw new Error(\"name can't be null unless age is 10\");\n        }\n      }\n    }\n  }\n}, { sequelize });\n```\n\nYou can customize `allowNull` error message by setting the `notNull` validator:\n\n``` js\nclass User extends Model {}\nUser.init({\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      notNull: {\n        msg: 'Please enter your name'\n      }\n    }\n  }\n}, { sequelize });\n```\n\n### Model-wide validations[​](#model-wide-validations \"Direct link to heading\")\n\nValidations can also be defined to check the model after the field-specific validators. Using this you could, for example, ensure either neither of `latitude` and `longitude` are set or both, and fail if one but not the other is set.\n\nModel validator methods are called with the model object's context and are deemed to fail if they throw an error, otherwise pass. This is just the same as with custom field-specific validators.\n\nAny error messages collected are put in the validation result object alongside the field validation errors, with keys named after the failed validation method's key in the `validate` option object. Even though there can only be one error message for each model validation method at any one time, it is presented as a single string error in an array, to maximize consistency with the field errors.\n\nAn example:\n\n``` js\nclass Place extends Model {}\nPlace.init({\n  name: Sequelize.STRING,\n  address: Sequelize.STRING,\n  latitude: {\n    type: DataTypes.INTEGER,\n    validate: {\n      min: -90,\n      max: 90\n    }\n  },\n  longitude: {\n    type: DataTypes.INTEGER,\n    validate: {\n      min: -180,\n      max: 180\n    }\n  },\n}, {\n  sequelize,\n  validate: {\n    bothCoordsOrNone() {\n      if ((this.latitude === null) !== (this.longitude === null)) {\n        throw new Error('Either both latitude and longitude, or neither!');\n      }\n    }\n  }\n})\n```\n\nIn this simple case an object fails validation if either latitude or longitude is given, but not both. If we try to build one with an out-of-range latitude and no longitude, `somePlace.validate()` might return:\n\n``` js\n{\n  'latitude': ['Invalid number: latitude'],\n  'bothCoordsOrNone': ['Either both latitude and longitude, or neither!']\n}\n```\n\nSuch validation could have also been done with a custom validator defined on a single attribute (such as the `latitude` attribute, by checking `(value === null) !== (this.longitude === null)`), but the model-wide validation approach is cleaner.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/](https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/)"
- name: Variable
  id: variable/index
  summary: A convenience class holding commonly used data types
  description: "# Variable\n\n[TABLE]\n\n## Static Public\n\n### public DataTypes: \\*  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber1005) \n\nA convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n\n``` lang-js\nsequelize.define('model', {\n  column: DataTypes.INTEGER\n})\n```\n\nWhen defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n\nTo provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n\nSome data types have special properties that can be accessed in order to change the data type. For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`. The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n\n- All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n- The `CHAR` and `STRING` types expose the `BINARY` property\n\nThree of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n\n``` lang-js\nsequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV1,\n    primaryKey: true\n  }\n})\n```\n\nThere may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value from a function.\n\n``` lang-js\nsequelize.define('model', {\n  uuid: {\n    type: DataTypes.UUID,\n    defaultValue: function() {\n      return generateMyId()\n    },\n    primaryKey: true\n  }\n})\n```\n\n### public Deferrable: {\"INITIALLY_DEFERRED\": \\*, \"INITIALLY_IMMEDIATE\": \\*, \"NOT\": \\*, \"SET_DEFERRED\": \\*, \"SET_IMMEDIATE\": \\*}  [source](https://sequelize.org/api/v6/file/src/deferrable.js.html#lineNumber97) \n\nA collection of properties related to deferrable constraints. It can be used to make foreign key constraints deferrable and to set the constraints within a transaction. This is only supported in PostgreSQL.\n\nThe foreign keys can be configured like this. It will create a foreign key that will check the constraints immediately when the data was inserted.\n\n``` lang-js\nsequelize.define('Model', {\n  foreign_id: {\n    type: Sequelize.INTEGER,\n    references: {\n      model: OtherModel,\n      key: 'id',\n      deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n    }\n  }\n});\n```\n\nThe constraints can be configured in a transaction like this. It will trigger a query once the transaction has been started and set the constraints to be checked at the very end of the transaction.\n\n``` lang-js\nsequelize.transaction({\n  deferrable: Sequelize.Deferrable.SET_DEFERRED\n});\n```\n\n#### Properties:\n\n| Name                | Type | Attribute | Description                                                                                                                                                                               |\n|---------------------|------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| INITIALLY_DEFERRED  | \\*   |           | Use when declaring a constraint. Allow and enable by default this constraint's checks to be deferred at the end of transactions.                                                          |\n| INITIALLY_IMMEDIATE | \\*   |           | Use when declaring a constraint. Allow the constraint's checks to be deferred at the end of transactions.                                                                                 |\n| NOT                 | \\*   |           | Use when declaring a constraint. Set the constraint to not deferred. This is the default in PostgreSQL and makes it impossible to dynamically defer the constraints within a transaction. |\n| SET_DEFERRED        | \\*   |           | Use when declaring a transaction. Defer the deferrable checks involved in this transaction at commit.                                                                                     |\n| SET_IMMEDIATE       | \\*   |           | Use when declaring a transaction. Execute the deferrable checks involved in this transaction immediately.                                                                                 |\n\n### public IndexHints: \\*  [source](https://sequelize.org/api/v6/file/src/index-hints.js.html#lineNumber10) \n\nAn enum of index hints to be used in mysql for querying with index hints\n\n#### Properties:\n\n| Name   | Type | Attribute | Description |\n|--------|------|-----------|-------------|\n| USE    | \\*   |           |             |\n| FORCE  | \\*   |           |             |\n| IGNORE | \\*   |           |             |\n\n### public QueryTypes: \\*  [source](https://sequelize.org/api/v6/file/src/query-types.js.html#lineNumber23) \n\nAn enum of query types used by `sequelize.query`\n\n#### Properties:\n\n| Name            | Type | Attribute | Description |\n|-----------------|------|-----------|-------------|\n| SELECT          | \\*   |           |             |\n| INSERT          | \\*   |           |             |\n| UPDATE          | \\*   |           |             |\n| BULKUPDATE      | \\*   |           |             |\n| BULKDELETE      | \\*   |           |             |\n| DELETE          | \\*   |           |             |\n| UPSERT          | \\*   |           |             |\n| VERSION         | \\*   |           |             |\n| SHOWTABLES      | \\*   |           |             |\n| SHOWINDEXES     | \\*   |           |             |\n| DESCRIBE        | \\*   |           |             |\n| RAW             | \\*   |           |             |\n| FOREIGNKEYS     | \\*   |           |             |\n| SHOWCONSTRAINTS | \\*   |           |             |\n\n#### See:\n\n- [Sequelize#query](../class/src/sequelize.js~sequelize#instance-method-query)\n\n### public TableHints: \\*  [source](https://sequelize.org/api/v6/file/src/table-hints.js.html#lineNumber22) \n\nAn enum of table hints to be used in mssql for querying with table hints\n\n#### Properties:\n\n| Name            | Type | Attribute | Description |\n|-----------------|------|-----------|-------------|\n| NOLOCK          | \\*   |           |             |\n| READUNCOMMITTED | \\*   |           |             |\n| UPDLOCK         | \\*   |           |             |\n| REPEATABLEREAD  | \\*   |           |             |\n| SERIALIZABLE    | \\*   |           |             |\n| READCOMMITTED   | \\*   |           |             |\n| TABLOCK         | \\*   |           |             |\n| TABLOCKX        | \\*   |           |             |\n| PAGLOCK         | \\*   |           |             |\n| ROWLOCK         | \\*   |           |             |\n| NOWAIT          | \\*   |           |             |\n| READPAST        | \\*   |           |             |\n| XLOCK           | \\*   |           |             |\n| SNAPSHOT        | \\*   |           |             |\n| NOEXPAND        | \\*   |           |             |\n\n### public ValidationErrorItemOrigin: \\*  [source](../file/src/errors/validation-error.ts#lineNumber46) \n\nAn enum that defines valid ValidationErrorItem `origin` values\n\n### public ValidationErrorItemType: \\*  [source](../file/src/errors/validation-error.ts#lineNumber36) \n\nAn enum that is used internally by the `ValidationErrorItem` class that maps current `type` strings (as given to ValidationErrorItem.constructor()) to our new `origin` values.\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/variable/index.html](https://sequelize.org/api/v6/variable/index.html)"
- name: VIRTUAL
  id: class/src/data-types.js~virtual
  summary: A virtual value that is not stored in the DB
  description: "# VIRTUAL\n\n#### Extends:\n\nsrc/data-types.js~ABSTRACT → VIRTUAL\n\nA virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n\nYou could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well. Return type is mostly useful for setups that rely on types like GraphQL.\n\n#### Example:\n\nChecking password length before hashing it\n\n``` prettyprint\nsequelize.define('user', {\n  password_hash: DataTypes.STRING,\n  password: {\n    type: DataTypes.VIRTUAL,\n    set: function (val) {\n       // Remember to set the data value, otherwise it won't be validated\n       this.setDataValue('password', val);\n       this.setDataValue('password_hash', this.salt + val);\n     },\n     validate: {\n        isLongEnough: function (val) {\n          if (val.length < 7) {\n            throw new Error(\"Please choose a longer password\")\n         }\n      }\n    }\n  }\n})\n\n# In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n```\n\nVirtual with dependency fields\n\n``` prettyprint\n{\n  active: {\n    type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n    get: function() {\n      return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n    }\n  }\n}\n```\n\n## Constructor Summary\n\n[TABLE]\n\n## Public Constructors\n\n### public constructor(ReturnType: ABSTRACT, fields: [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array))  [source](https://sequelize.org/api/v6/file/src/data-types.js.html#lineNumber718) \n\n#### Params:\n\n[TABLE]\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/api/v6/class/src/data-types.js~VIRTUAL.html](https://sequelize.org/api/v6/class/src/data-types.js~VIRTUAL.html)"
- name: Working with Legacy Tables
  id: other-topics/legacy/index
  summary: While out of the box Sequelize will seem a bit opinionated it's easy to work legacy tables and forward proof your application by defining (otherwise generated) table and field names
  description: "# Working with Legacy Tables\n\nWhile out of the box Sequelize will seem a bit opinionated it's easy to work legacy tables and forward proof your application by defining (otherwise generated) table and field names.\n\n## Tables[​](#tables \"Direct link to heading\")\n\n``` js\nclass User extends Model {}\nUser.init({\n  // ...\n}, {\n  modelName: 'user',\n  tableName: 'users',\n  sequelize,\n});\n```\n\n## Fields[​](#fields \"Direct link to heading\")\n\n``` js\nclass MyModel extends Model {}\nMyModel.init({\n  userId: {\n    type: DataTypes.INTEGER,\n    field: 'user_id'\n  }\n}, { sequelize });\n```\n\n## Primary keys[​](#primary-keys \"Direct link to heading\")\n\nSequelize will assume your table has a `id` primary key property by default.\n\nTo define your own primary key:\n\n``` js\nclass Collection extends Model {}\nCollection.init({\n  uid: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true // Automatically gets converted to SERIAL for postgres\n  }\n}, { sequelize });\n\nclass Collection extends Model {}\nCollection.init({\n  uuid: {\n    type: DataTypes.UUID,\n    primaryKey: true\n  }\n}, { sequelize });\n```\n\nAnd if your model has no primary key at all you can use `Model.removeAttribute('id');`\n\nInstances without primary keys can still be retrieved using `Model.findOne` and `Model.findAll`.  \nWhile it's currently possible to use their instance methods (`instance.save`, `instance.update`, etc…), doing this will lead to subtle bugs, and is planned for removal in a future major update.\n\ninfo\n\nIf your model has no primary keys, you need to use the static equivalent of the following instance methods, and provide your own `where` parameter:\n\n- `instance.save`: `Model.update`\n- `instance.update`: `Model.update`\n- `instance.reload`: `Model.findOne`\n- `instance.destroy`: `Model.destroy`\n- `instance.restore`: `Model.restore`\n- `instance.decrement`: `Model.decrement`\n- `instance.increment`: `Model.increment`\n\n## Foreign keys[​](#foreign-keys \"Direct link to heading\")\n\n``` js\n// 1:1\nOrganization.belongsTo(User, { foreignKey: 'owner_id' });\nUser.hasOne(Organization, { foreignKey: 'owner_id' });\n\n// 1:M\nProject.hasMany(Task, { foreignKey: 'tasks_pk' });\nTask.belongsTo(Project, { foreignKey: 'tasks_pk' });\n\n// N:M\nUser.belongsToMany(Role, { through: 'user_has_roles', foreignKey: 'user_role_user_id' });\nRole.belongsToMany(User, { through: 'user_has_roles', foreignKey: 'roles_identifier' });\n```\n\nCopyright © 2014–present Sequelize contributors  \nLicensed under the MIT License.  \n[https://sequelize.org/docs/v6/other-topics/legacy/](https://sequelize.org/docs/v6/other-topics/legacy/)"
