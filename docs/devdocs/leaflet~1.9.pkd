---
name: Leaflet
slug: leaflet~1.9
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '1.9'
copyright: |-
  © 2010–2022 Vladimir Agafonkin
  © 2010–2011, CloudMade
  Maps © OpenStreetMap contributors.
  https://leafletjs.com/reference.html
homepage: https://leafletjs.com/

---
- name: Bounds
  id: index#bounds
  summary: Represents a rectangular area in pixel coordinates
  description: |-
    ## Bounds

    Represents a rectangular area in pixel coordinates.

    ### Usage example

    ``` javascript
    var p1 = L.point(10, 10),
    p2 = L.point(40, 60),
    bounds = L.bounds(p1, p2);
    ```

    All Leaflet methods that accept [`Bounds`](#bounds) objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:

    ``` javascript
    otherBounds.intersects([[10, 10], [40, 60]]);
    ```

    Note that [`Bounds`](#bounds) does not inherit from Leaflet's [`Class`](#class) object, which means new classes can't inherit from it, and new methods can't be added to it with the `include` function.

    ### Creation

    Factory

    Description
- name: 'Bounds creation: L.bounds'
  id: index#bounds-l-bounds
  summary: Creates a Bounds object from two corners coordinate pairs
  description: |-
    `L.bounds(<`[`Point`](#point)`> `*`corner1`*`, <`[`Point`](#point)`> `*`corner2`*`)`

    Creates a Bounds object from two corners coordinate pairs.

    `L.bounds(<Point[]> `*`points`*`)`

    Creates a Bounds object from the given array of points.

    ### Methods

    Method

    Returns

    Description
- name: 'Bounds methods: contains'
  id: index#bounds-contains
  summary: Returns true if the rectangle contains the given one
  description: |-
    `contains(<`[`Bounds`](#bounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle contains the given one.

    `contains(<`[`Point`](#point)`> `*`point`*`)`

    `Boolean`

    Returns `true` if the rectangle contains the given point.
- name: 'Bounds methods: equals'
  id: index#bounds-equals
  summary: Returns true if the rectangle is equivalent to the given bounds
  description: |-
    `equals(<`[`Bounds`](#bounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle is equivalent to the given bounds.

    ### Properties

    Property

    Type

    Description
- name: 'Bounds methods: extend'
  id: index#bounds-extend
  summary: Extends the bounds to contain the given point
  description: |-
    `extend(<`[`Point`](#point)`> `*`point`*`)`

    `this`

    Extends the bounds to contain the given point.

    `extend(<`[`Bounds`](#bounds)`> `*`otherBounds`*`)`

    `this`

    Extend the bounds to contain the given bounds
- name: 'Bounds methods: getBottomLeft'
  id: index#bounds-getbottomleft
  summary: Returns the bottom-left point of the bounds
  description: |-
    `getBottomLeft()`

    ` `[`Point`](#point)` `

    Returns the bottom-left point of the bounds.
- name: 'Bounds methods: getBottomRight'
  id: index#bounds-getbottomright
  summary: Returns the bottom-right point of the bounds (i.e
  description: |-
    `getBottomRight()`

    ` `[`Point`](#point)` `

    Returns the bottom-right point of the bounds (i.e. [`this.max`](#bounds-max)).
- name: 'Bounds methods: getCenter'
  id: index#bounds-getcenter
  summary: Returns the center point of the bounds
  description: |-
    `getCenter(<Boolean> `*`round?`*`)`

    ` `[`Point`](#point)` `

    Returns the center point of the bounds.
- name: 'Bounds methods: getSize'
  id: index#bounds-getsize
  summary: null
  description: |-
    `getSize()`

    ` `[`Point`](#point)` `

    Returns the size of the given bounds
- name: 'Bounds methods: getTopLeft'
  id: index#bounds-gettopleft
  summary: Returns the top-left point of the bounds (i.e
  description: |-
    `getTopLeft()`

    ` `[`Point`](#point)` `

    Returns the top-left point of the bounds (i.e. [`this.min`](#bounds-min)).
- name: 'Bounds methods: getTopRight'
  id: index#bounds-gettopright
  summary: Returns the top-right point of the bounds
  description: |-
    `getTopRight()`

    ` `[`Point`](#point)` `

    Returns the top-right point of the bounds.
- name: 'Bounds methods: intersects'
  id: index#bounds-intersects
  summary: Returns true if the rectangle intersects the given bounds
  description: |-
    `intersects(<`[`Bounds`](#bounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common.
- name: 'Bounds methods: isValid'
  id: index#bounds-isvalid
  summary: Returns true if the bounds are properly initialized
  description: |-
    `isValid()`

    `Boolean`

    Returns `true` if the bounds are properly initialized.
- name: 'Bounds methods: overlaps'
  id: index#bounds-overlaps
  summary: Returns true if the rectangle overlaps the given bounds
  description: |-
    `overlaps(<`[`Bounds`](#bounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area.
- name: 'Bounds methods: pad'
  id: index#bounds-pad
  summary: Returns bounds created by extending or retracting the current bounds by a given ratio in each direction
  description: |-
    `pad(<Number> `*`bufferRatio`*`)`

    ` `[`Bounds`](#bounds)` `

    Returns bounds created by extending or retracting the current bounds by a given ratio in each direction. For example, a ratio of 0.5 extends the bounds by 50% in each direction. Negative values will retract the bounds.
- name: 'Bounds properties: max'
  id: index#bounds-max
  summary: The bottom right corner of the rectangle
  description: |-
    `max`

    ` `[`Point`](#point)` `

    The bottom right corner of the rectangle.
- name: 'Bounds properties: min'
  id: index#bounds-min
  summary: The top left corner of the rectangle
  description: |-
    `min`

    ` `[`Point`](#point)` `

    The top left corner of the rectangle.
- name: Browser
  id: index#browser
  summary: A namespace with static properties for browser/feature detection used by Leaflet internally
  description: |-
    ## Browser

    A namespace with static properties for browser/feature detection used by Leaflet internally.

    ### Usage example

    ``` javascript
    if (L.Browser.ielt9) {
      alert('Upgrade your browser, dude!');
    }
    ```

    ### Properties

    Property

    Type

    Description
- name: 'Browser properties: android'
  id: index#browser-android
  summary: Deprecated.true for any browser running on an Android platform
  description: |-
    `android`

    `Boolean`

    **Deprecated.**`true` for any browser running on an Android platform.
- name: 'Browser properties: android23'
  id: index#browser-android23
  summary: Deprecated.true for browsers running on Android 2 or Android 3
  description: |-
    `android23`

    `Boolean`

    **Deprecated.**`true` for browsers running on Android 2 or Android 3.
- name: 'Browser properties: androidStock'
  id: index#browser-androidstock
  summary: Deprecated.true for the Android stock browser (i.e
  description: |-
    `androidStock`

    `Boolean`

    **Deprecated.**`true` for the Android stock browser (i.e. not Chrome)
- name: 'Browser properties: any3d'
  id: index#browser-any3d
  summary: true for all browsers supporting CSS transforms
  description: |-
    `any3d`

    `Boolean`

    `true` for all browsers supporting CSS transforms.
- name: 'Browser properties: canvas'
  id: index#browser-canvas
  summary: null
  description: |-
    `canvas`

    `Boolean`

    `true` when the browser supports [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API).
- name: 'Browser properties: chrome'
  id: index#browser-chrome
  summary: true for the Chrome browser
  description: |-
    `chrome`

    `Boolean`

    `true` for the Chrome browser.
- name: 'Browser properties: edge'
  id: index#browser-edge
  summary: true for the Edge web browser
  description: |-
    `edge`

    `Boolean`

    `true` for the Edge web browser.
- name: 'Browser properties: gecko'
  id: index#browser-gecko
  summary: true for gecko-based browsers like Firefox
  description: |-
    `gecko`

    `Boolean`

    `true` for gecko-based browsers like Firefox.
- name: 'Browser properties: gecko3d'
  id: index#browser-gecko3d
  summary: true for gecko-based browsers supporting CSS transforms
  description: |-
    `gecko3d`

    `Boolean`

    `true` for gecko-based browsers supporting CSS transforms.
- name: 'Browser properties: ie'
  id: index#browser-ie
  summary: true for all Internet Explorer versions (not Edge)
  description: |-
    `ie`

    `Boolean`

    `true` for all Internet Explorer versions (not Edge).
- name: 'Browser properties: ie3d'
  id: index#browser-ie3d
  summary: true for all Internet Explorer versions supporting CSS transforms
  description: |-
    `ie3d`

    `Boolean`

    `true` for all Internet Explorer versions supporting CSS transforms.
- name: 'Browser properties: ielt9'
  id: index#browser-ielt9
  summary: true for Internet Explorer versions less than 9
  description: |-
    `ielt9`

    `Boolean`

    `true` for Internet Explorer versions less than 9.
- name: 'Browser properties: mac'
  id: index#browser-mac
  summary: null
  description: |-
    `mac`

    `Boolean`

    `true` when the browser is running in a Mac platform `true` when the browser is running in a Linux platform
- name: 'Browser properties: mobile'
  id: index#browser-mobile
  summary: true for all browsers running in a mobile device
  description: |-
    `mobile`

    `Boolean`

    `true` for all browsers running in a mobile device.
- name: 'Browser properties: mobileGecko'
  id: index#browser-mobilegecko
  summary: true for gecko-based browsers running in a mobile device
  description: |-
    `mobileGecko`

    `Boolean`

    `true` for gecko-based browsers running in a mobile device.
- name: 'Browser properties: mobileOpera'
  id: index#browser-mobileopera
  summary: true for the Opera browser in a mobile device
  description: |-
    `mobileOpera`

    `Boolean`

    `true` for the Opera browser in a mobile device.
- name: 'Browser properties: mobileWebkit'
  id: index#browser-mobilewebkit
  summary: true for all webkit-based browsers in a mobile device
  description: |-
    `mobileWebkit`

    `Boolean`

    `true` for all webkit-based browsers in a mobile device.
- name: 'Browser properties: mobileWebkit3d'
  id: index#browser-mobilewebkit3d
  summary: true for all webkit-based browsers in a mobile device supporting CSS transforms
  description: |-
    `mobileWebkit3d`

    `Boolean`

    `true` for all webkit-based browsers in a mobile device supporting CSS transforms.
- name: 'Browser properties: msPointer'
  id: index#browser-mspointer
  summary: true for browsers implementing the Microsoft touch events model (notably IE10)
  description: |-
    `msPointer`

    `Boolean`

    `true` for browsers implementing the Microsoft touch events model (notably IE10).
- name: 'Browser properties: opera'
  id: index#browser-opera
  summary: null
  description: |-
    `opera`

    `Boolean`

    `true` for the Opera browser
- name: 'Browser properties: opera12'
  id: index#browser-opera12
  summary: true for the Opera browser supporting CSS transforms (version 12 or later)
  description: |-
    `opera12`

    `Boolean`

    `true` for the Opera browser supporting CSS transforms (version 12 or later).
- name: 'Browser properties: passiveEvents'
  id: index#browser-passiveevents
  summary: true for browsers that support passive events
  description: |-
    `passiveEvents`

    `Boolean`

    `true` for browsers that support passive events.
- name: 'Browser properties: pointer'
  id: index#browser-pointer
  summary: true for all browsers supporting pointer events
  description: |-
    `pointer`

    `Boolean`

    `true` for all browsers supporting [pointer events](https://msdn.microsoft.com/en-us/library/dn433244%28v=vs.85%29.aspx).
- name: 'Browser properties: retina'
  id: index#browser-retina
  summary: null
  description: |-
    `retina`

    `Boolean`

    `true` for browsers on a high-resolution "retina" screen or on any screen when browser's display zoom is more than 100%.
- name: 'Browser properties: safari'
  id: index#browser-safari
  summary: true for the Safari browser
  description: |-
    `safari`

    `Boolean`

    `true` for the Safari browser.
- name: 'Browser properties: svg'
  id: index#browser-svg
  summary: true when the browser supports SVG
  description: |-
    `svg`

    `Boolean`

    `true` when the browser supports [SVG](https://developer.mozilla.org/docs/Web/SVG).
- name: 'Browser properties: touch'
  id: index#browser-touch
  summary: true for all browsers supporting either touch or pointer events
  description: |-
    `touch`

    `Boolean`

    `true` for all browsers supporting either [touch](#browser-touch) or [pointer](#browser-pointer) events. Note: pointer events will be preferred (if available), and processed for all `touch*` listeners.
- name: 'Browser properties: touchNative'
  id: index#browser-touchnative
  summary: true for all browsers supporting touch events
  description: |-
    `touchNative`

    `Boolean`

    `true` for all browsers supporting [touch events](https://developer.mozilla.org/docs/Web/API/Touch_events). **This does not necessarily mean** that the browser is running in a computer with a touchscreen, it only means that the browser is capable of understanding touch events.
- name: 'Browser properties: vml'
  id: index#browser-vml
  summary: true if the browser supports VML
  description: |-
    `vml`

    `Boolean`

    `true` if the browser supports [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language).
- name: 'Browser properties: webkit'
  id: index#browser-webkit
  summary: true for webkit-based browsers like Chrome and Safari (including mobile versions)
  description: |-
    `webkit`

    `Boolean;`

    `true` for webkit-based browsers like Chrome and Safari (including mobile versions).
- name: 'Browser properties: webkit3d'
  id: index#browser-webkit3d
  summary: true for webkit-based browsers supporting CSS transforms
  description: |-
    `webkit3d`

    `Boolean`

    `true` for webkit-based browsers supporting CSS transforms.
- name: 'Browser properties: win'
  id: index#browser-win
  summary: null
  description: |-
    `win`

    `Boolean`

    `true` when the browser is running in a Windows platform
- name: Canvas
  id: index#canvas
  summary: Allows vector layers to be displayed with <canvas>. Inherits Renderer
  description: |-
    ## Canvas

    Allows vector layers to be displayed with [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API). Inherits [`Renderer`](#renderer).

    Due to [technical limitations](https://caniuse.com/canvas), Canvas is not available in all web browsers, notably IE8, and overlapping geometries might not display properly in some edge cases.

    ### Usage example

    Use Canvas by default for all paths in the map:

    ``` javascript
    var map = L.map('map', {
        renderer: L.canvas()
    });
    ```

    Use a Canvas renderer with extra padding for specific vector geometries:

    ``` javascript
    var map = L.map('map');
    var myRenderer = L.canvas({ padding: 0.5 });
    var line = L.polyline( coordinates, { renderer: myRenderer } );
    var circle = L.circle( center, { renderer: myRenderer } );
    ```

    ### Creation

    Factory

    Description
- name: 'Canvas creation: L.canvas'
  id: index#canvas-l-canvas
  summary: Creates a Canvas renderer with the given options
  description: |-
    `L.canvas(<`[`Renderer options`](#renderer-option)`> `*`options?`*`)`

    Creates a Canvas renderer with the given options.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Canvas events: add'
  id: index#canvas-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Canvas events: popupclose'
  id: index#canvas-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Canvas events: popupopen'
  id: index#canvas-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Canvas events: tooltipclose'
  id: index#canvas-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Canvas events: tooltipopen'
  id: index#canvas-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Canvas events: update'
  id: index#canvas-update
  summary: null
  description: |-
    `update`

    ` `[`Event`](#event)` `

    Fired when the renderer updates its bounds, center and zoom, for example when its map has moved

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Canvas methods: addEventListener'
  id: index#canvas-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Canvas methods: addEventParent'
  id: index#canvas-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Canvas methods: addOneTimeEventListener'
  id: index#canvas-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Canvas methods: addTo'
  id: index#canvas-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Canvas methods: bindPopup'
  id: index#canvas-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Canvas methods: bindTooltip'
  id: index#canvas-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Canvas methods: clearAllEventListeners'
  id: index#canvas-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Canvas methods: closePopup'
  id: index#canvas-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Canvas methods: closeTooltip'
  id: index#canvas-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Canvas methods: fire'
  id: index#canvas-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Canvas methods: fireEvent'
  id: index#canvas-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Canvas methods: getAttribution'
  id: index#canvas-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Canvas methods: getPane'
  id: index#canvas-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Canvas methods: getPopup'
  id: index#canvas-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Canvas methods: getTooltip'
  id: index#canvas-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Canvas methods: hasEventListeners'
  id: index#canvas-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Canvas methods: isPopupOpen'
  id: index#canvas-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Canvas methods: isTooltipOpen'
  id: index#canvas-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Canvas methods: listens'
  id: index#canvas-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Canvas methods: off'
  id: index#canvas-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Canvas methods: on'
  id: index#canvas-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Canvas methods: once'
  id: index#canvas-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Canvas methods: openPopup'
  id: index#canvas-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Canvas methods: openTooltip'
  id: index#canvas-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Canvas methods: removeEventListener'
  id: index#canvas-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Canvas methods: removeEventParent'
  id: index#canvas-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Canvas methods: removeFrom'
  id: index#canvas-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Canvas methods: setPopupContent'
  id: index#canvas-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Canvas methods: setTooltipContent'
  id: index#canvas-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Canvas methods: togglePopup'
  id: index#canvas-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Canvas methods: toggleTooltip'
  id: index#canvas-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Canvas methods: unbindPopup'
  id: index#canvas-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Canvas methods: unbindTooltip'
  id: index#canvas-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Canvas options: attribution'
  id: index#canvas-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Events inherited from [Renderer](#renderer)

    Event

    Data

    Description
- name: 'Canvas options: padding'
  id: index#canvas-padding
  summary: How much to extend the clip area around the map view (relative to its size) e.g
  description: |-
    `padding`

    `Number`

    `0.1`

    How much to extend the clip area around the map view (relative to its size) e.g. 0.1 would be 10% of map view in each direction

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Canvas options: pane'
  id: index#canvas-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Canvas options: tolerance'
  id: index#canvas-tolerance
  summary: How much to extend the click tolerance around a path/object on the map
  description: |-
    `tolerance`

    `Number`

    `0`

    How much to extend the click tolerance around a path/object on the map.

    Options inherited from [Renderer](#renderer)

    Option

    Type

    Default

    Description
- name: Circle
  id: index#circle
  summary: A class for drawing circle overlays on a map
  description: |-
    ## Circle

    A class for drawing circle overlays on a map. Extends [`CircleMarker`](#circlemarker).

    It's an approximation and starts to diverge from a real circle closer to poles (due to projection distortion).

    ### Usage example

    ``` javascript
    L.circle([50.5, 30.5], {radius: 200}).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'Circle creation: L.circle'
  id: index#circle-l-circle
  summary: Instantiates a circle object given a geographical point, and an options object which contains the circle radius
  description: |-
    `L.circle(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Circle options`](#circle-option)`> `*`options?`*`)`

    Instantiates a circle object given a geographical point, and an options object which contains the circle radius.

    `L.circle(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number> `*`radius`*`, <`[`Circle options`](#circle-option)`> `*`options?`*`)`

    Obsolete way of instantiating a circle, for compatibility with 0.7.x code. Do not use in new applications or plugins.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Circle events: add'
  id: index#circle-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Circle events: click'
  id: index#circle-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Circle events: contextmenu'
  id: index#circle-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Circle events: dblclick'
  id: index#circle-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Circle events: mousedown'
  id: index#circle-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Circle events: mouseout'
  id: index#circle-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Circle events: mouseover'
  id: index#circle-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Circle events: mouseup'
  id: index#circle-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Circle events: move'
  id: index#circle-move
  summary: Fired when the marker is moved via setLatLng
  description: |-
    `move`

    ` `[`Event`](#event)` `

    Fired when the marker is moved via [`setLatLng`](#circlemarker-setlatlng). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Circle events: popupclose'
  id: index#circle-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Circle events: popupopen'
  id: index#circle-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Circle events: tooltipclose'
  id: index#circle-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Circle events: tooltipopen'
  id: index#circle-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Circle methods: addEventListener'
  id: index#circle-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Circle methods: addEventParent'
  id: index#circle-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Circle methods: addOneTimeEventListener'
  id: index#circle-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Circle methods: addTo'
  id: index#circle-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Circle methods: bindPopup'
  id: index#circle-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Circle methods: bindTooltip'
  id: index#circle-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Circle methods: bringToBack'
  id: index#circle-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Circle methods: bringToFront'
  id: index#circle-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'Circle methods: clearAllEventListeners'
  id: index#circle-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Circle methods: closePopup'
  id: index#circle-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Circle methods: closeTooltip'
  id: index#circle-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Circle methods: fire'
  id: index#circle-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Circle methods: fireEvent'
  id: index#circle-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Circle methods: getAttribution'
  id: index#circle-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Circle methods: getBounds'
  id: index#circle-getbounds
  summary: Returns the LatLngBounds of the path
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the [`LatLngBounds`](#latlngbounds) of the path.

    Methods inherited from [CircleMarker](#circlemarker)

    Method

    Returns

    Description
- name: 'Circle methods: getLatLng'
  id: index#circle-getlatlng
  summary: null
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the current geographical position of the circle marker

    Methods inherited from [Path](#path)

    Method

    Returns

    Description
- name: 'Circle methods: getPane'
  id: index#circle-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Circle methods: getPopup'
  id: index#circle-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Circle methods: getRadius'
  id: index#circle-getradius
  summary: Returns the current radius of a circle
  description: |-
    `getRadius()`

    `Number`

    Returns the current radius of a circle. Units are in meters.
- name: 'Circle methods: getTooltip'
  id: index#circle-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Circle methods: hasEventListeners'
  id: index#circle-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Circle methods: isPopupOpen'
  id: index#circle-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Circle methods: isTooltipOpen'
  id: index#circle-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Circle methods: listens'
  id: index#circle-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Circle methods: off'
  id: index#circle-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Circle methods: on'
  id: index#circle-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Circle methods: once'
  id: index#circle-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Circle methods: openPopup'
  id: index#circle-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Circle methods: openTooltip'
  id: index#circle-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Circle methods: redraw'
  id: index#circle-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'Circle methods: removeEventListener'
  id: index#circle-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Circle methods: removeEventParent'
  id: index#circle-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Circle methods: removeFrom'
  id: index#circle-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Circle methods: setLatLng'
  id: index#circle-setlatlng
  summary: Sets the position of a circle marker to a new location
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latLng`*`)`

    `this`

    Sets the position of a circle marker to a new location.
- name: 'Circle methods: setPopupContent'
  id: index#circle-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Circle methods: setRadius'
  id: index#circle-setradius
  summary: Sets the radius of a circle
  description: |-
    `setRadius(<Number> `*`radius`*`)`

    `this`

    Sets the radius of a circle. Units are in meters.
- name: 'Circle methods: setStyle'
  id: index#circle-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'Circle methods: setTooltipContent'
  id: index#circle-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Circle methods: toGeoJSON'
  id: index#circle-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the circle marker (as a GeoJSON [`Point`](#point) Feature).
- name: 'Circle methods: togglePopup'
  id: index#circle-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Circle methods: toggleTooltip'
  id: index#circle-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Circle methods: unbindPopup'
  id: index#circle-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Circle methods: unbindTooltip'
  id: index#circle-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Circle options: attribution'
  id: index#circle-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Events inherited from [CircleMarker](#circlemarker)

    Event

    Data

    Description
- name: 'Circle options: bubblingMouseEvents'
  id: index#circle-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Circle options: className'
  id: index#circle-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Circle options: color'
  id: index#circle-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'Circle options: dashArray'
  id: index#circle-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Circle options: dashOffset'
  id: index#circle-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Circle options: fill'
  id: index#circle-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'Circle options: fillColor'
  id: index#circle-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'Circle options: fillOpacity'
  id: index#circle-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'Circle options: fillRule'
  id: index#circle-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'Circle options: interactive'
  id: index#circle-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Circle options: lineCap'
  id: index#circle-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'Circle options: lineJoin'
  id: index#circle-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'Circle options: opacity'
  id: index#circle-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'Circle options: pane'
  id: index#circle-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Circle options: radius'
  id: index#circle-radius
  summary: Radius of the circle, in meters
  description: |-
    `radius`

    `Number`

    Radius of the circle, in meters.

    Options inherited from [Path](#path)

    Option

    Type

    Default

    Description
- name: 'Circle options: renderer'
  id: index#circle-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'Circle options: stroke'
  id: index#circle-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'Circle options: weight'
  id: index#circle-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: CircleMarker
  id: index#circlemarker
  summary: A circle of a fixed size with radius specified in pixels
  description: |-
    ## CircleMarker

    A circle of a fixed size with radius specified in pixels. Extends [`Path`](#path).

    ### Creation

    Factory

    Description
- name: 'CircleMarker creation: L.circleMarker'
  id: index#circlemarker-l-circlemarker
  summary: Instantiates a circle marker object given a geographical point, and an optional options object
  description: |-
    `L.circleMarker(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`CircleMarker options`](#circlemarker-option)`> `*`options?`*`)`

    Instantiates a circle marker object given a geographical point, and an optional options object.

    ### Options

    Option

    Type

    Default

    Description
- name: 'CircleMarker events: add'
  id: index#circlemarker-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'CircleMarker events: click'
  id: index#circlemarker-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'CircleMarker events: contextmenu'
  id: index#circlemarker-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'CircleMarker events: dblclick'
  id: index#circlemarker-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'CircleMarker events: mousedown'
  id: index#circlemarker-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'CircleMarker events: mouseout'
  id: index#circlemarker-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'CircleMarker events: mouseover'
  id: index#circlemarker-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'CircleMarker events: mouseup'
  id: index#circlemarker-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'CircleMarker events: move'
  id: index#circlemarker-move
  summary: Fired when the marker is moved via setLatLng
  description: |-
    `move`

    ` `[`Event`](#event)` `

    Fired when the marker is moved via [`setLatLng`](#circlemarker-setlatlng). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'CircleMarker events: popupclose'
  id: index#circlemarker-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'CircleMarker events: popupopen'
  id: index#circlemarker-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'CircleMarker events: tooltipclose'
  id: index#circlemarker-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'CircleMarker events: tooltipopen'
  id: index#circlemarker-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'CircleMarker methods: addEventListener'
  id: index#circlemarker-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'CircleMarker methods: addEventParent'
  id: index#circlemarker-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'CircleMarker methods: addOneTimeEventListener'
  id: index#circlemarker-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'CircleMarker methods: addTo'
  id: index#circlemarker-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'CircleMarker methods: bindPopup'
  id: index#circlemarker-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'CircleMarker methods: bindTooltip'
  id: index#circlemarker-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'CircleMarker methods: bringToBack'
  id: index#circlemarker-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'CircleMarker methods: bringToFront'
  id: index#circlemarker-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'CircleMarker methods: clearAllEventListeners'
  id: index#circlemarker-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'CircleMarker methods: closePopup'
  id: index#circlemarker-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'CircleMarker methods: closeTooltip'
  id: index#circlemarker-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'CircleMarker methods: fire'
  id: index#circlemarker-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'CircleMarker methods: fireEvent'
  id: index#circlemarker-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'CircleMarker methods: getAttribution'
  id: index#circlemarker-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'CircleMarker methods: getLatLng'
  id: index#circlemarker-getlatlng
  summary: null
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the current geographical position of the circle marker
- name: 'CircleMarker methods: getPane'
  id: index#circlemarker-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'CircleMarker methods: getPopup'
  id: index#circlemarker-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'CircleMarker methods: getRadius'
  id: index#circlemarker-getradius
  summary: null
  description: |-
    `getRadius()`

    `Number`

    Returns the current radius of the circle

    Methods inherited from [Path](#path)

    Method

    Returns

    Description
- name: 'CircleMarker methods: getTooltip'
  id: index#circlemarker-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'CircleMarker methods: hasEventListeners'
  id: index#circlemarker-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'CircleMarker methods: isPopupOpen'
  id: index#circlemarker-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'CircleMarker methods: isTooltipOpen'
  id: index#circlemarker-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'CircleMarker methods: listens'
  id: index#circlemarker-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'CircleMarker methods: off'
  id: index#circlemarker-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'CircleMarker methods: on'
  id: index#circlemarker-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'CircleMarker methods: once'
  id: index#circlemarker-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'CircleMarker methods: openPopup'
  id: index#circlemarker-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'CircleMarker methods: openTooltip'
  id: index#circlemarker-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'CircleMarker methods: redraw'
  id: index#circlemarker-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'CircleMarker methods: removeEventListener'
  id: index#circlemarker-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'CircleMarker methods: removeEventParent'
  id: index#circlemarker-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'CircleMarker methods: removeFrom'
  id: index#circlemarker-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'CircleMarker methods: setLatLng'
  id: index#circlemarker-setlatlng
  summary: Sets the position of a circle marker to a new location
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latLng`*`)`

    `this`

    Sets the position of a circle marker to a new location.
- name: 'CircleMarker methods: setPopupContent'
  id: index#circlemarker-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'CircleMarker methods: setRadius'
  id: index#circlemarker-setradius
  summary: Sets the radius of a circle marker
  description: |-
    `setRadius(<Number> `*`radius`*`)`

    `this`

    Sets the radius of a circle marker. Units are in pixels.
- name: 'CircleMarker methods: setStyle'
  id: index#circlemarker-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'CircleMarker methods: setTooltipContent'
  id: index#circlemarker-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'CircleMarker methods: toGeoJSON'
  id: index#circlemarker-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the circle marker (as a GeoJSON [`Point`](#point) Feature).
- name: 'CircleMarker methods: togglePopup'
  id: index#circlemarker-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'CircleMarker methods: toggleTooltip'
  id: index#circlemarker-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'CircleMarker methods: unbindPopup'
  id: index#circlemarker-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'CircleMarker methods: unbindTooltip'
  id: index#circlemarker-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'CircleMarker options: attribution'
  id: index#circlemarker-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'CircleMarker options: bubblingMouseEvents'
  id: index#circlemarker-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'CircleMarker options: className'
  id: index#circlemarker-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'CircleMarker options: color'
  id: index#circlemarker-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'CircleMarker options: dashArray'
  id: index#circlemarker-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'CircleMarker options: dashOffset'
  id: index#circlemarker-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'CircleMarker options: fill'
  id: index#circlemarker-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'CircleMarker options: fillColor'
  id: index#circlemarker-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'CircleMarker options: fillOpacity'
  id: index#circlemarker-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'CircleMarker options: fillRule'
  id: index#circlemarker-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'CircleMarker options: interactive'
  id: index#circlemarker-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'CircleMarker options: lineCap'
  id: index#circlemarker-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'CircleMarker options: lineJoin'
  id: index#circlemarker-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'CircleMarker options: opacity'
  id: index#circlemarker-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'CircleMarker options: pane'
  id: index#circlemarker-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'CircleMarker options: radius'
  id: index#circlemarker-radius
  summary: null
  description: |-
    `radius`

    `Number`

    `10`

    Radius of the circle marker, in pixels

    Options inherited from [Path](#path)

    Option

    Type

    Default

    Description
- name: 'CircleMarker options: renderer'
  id: index#circlemarker-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'CircleMarker options: stroke'
  id: index#circlemarker-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'CircleMarker options: weight'
  id: index#circlemarker-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: Class
  id: index#class
  summary: L.Class powers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here
  description: |-
    ## Class

    L.Class powers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here.

    In addition to implementing a simple classical inheritance model, it introduces several special properties for convenient code organization — options, includes and statics.

    ### Usage example

    ``` javascript
    var MyClass = L.Class.extend({
    initialize: function (greeter) {
        this.greeter = greeter;
        // class constructor
    },

    greet: function (name) {
        alert(this.greeter + ', ' + name)
        }
    });

    // create instance of MyClass, passing "Hello" to the constructor
    var a = new MyClass("Hello");

    // call greet method, alerting "Hello, World"
    a.greet("World");
    ```

    #### Class Factories

    You may have noticed that Leaflet objects are created without using the `new` keyword. This is achieved by complementing each class with a lowercase factory method:

    ``` javascript
    new L.Map('map'); // becomes:
    L.map('map');
    ```

    The factories are implemented very easily, and you can do this for your own classes:

    ``` javascript
    L.map = function (id, options) {
        return new L.Map(id, options);
    };
    ```

    #### Inheritance

    You use L.Class.extend to define new classes, but you can use the same method on any class to inherit from it:

    ``` javascript
    var MyChildClass = MyClass.extend({
        // ... new properties and methods
    });
    ```

    This will create a class that inherits all methods and properties of the parent class (through a proper prototype chain), adding or overriding the ones you pass to extend. It will also properly react to instanceof:

    ``` javascript
    var a = new MyChildClass();
    a instanceof MyChildClass; // true
    a instanceof MyClass; // true
    ```

    You can call parent methods (including constructor) from corresponding child ones (as you do with super calls in other languages) by accessing parent class prototype and using JavaScript's call or apply:

    ``` javascript
    var MyChildClass = MyClass.extend({
        initialize: function () {
            MyClass.prototype.initialize.call(this, "Yo");
        },

        greet: function (name) {
            MyClass.prototype.greet.call(this, 'bro ' + name + '!');
        }
    });

    var a = new MyChildClass();
    a.greet('Jason'); // alerts "Yo, bro Jason!"
    ```

    #### Options

    `options` is a special property that unlike other objects that you pass to `extend` will be merged with the parent one instead of overriding it completely, which makes managing configuration of objects and default values convenient:

    ``` javascript
    var MyClass = L.Class.extend({
        options: {
            myOption1: 'foo',
            myOption2: 'bar'
        }
    });

    var MyChildClass = MyClass.extend({
        options: {
            myOption1: 'baz',
            myOption3: 5
        }
    });

    var a = new MyChildClass();
    a.options.myOption1; // 'baz'
    a.options.myOption2; // 'bar'
    a.options.myOption3; // 5
    ```

    There's also [`L.Util.setOptions`](#util-setoptions), a method for conveniently merging options passed to constructor with the defaults defines in the class:

    ``` javascript
    var MyClass = L.Class.extend({
        options: {
            foo: 'bar',
            bla: 5
        },

        initialize: function (options) {
            L.Util.setOptions(this, options);
            ...
        }
    });

    var a = new MyClass({bla: 10});
    a.options; // {foo: 'bar', bla: 10}
    ```

    Note that the options object allows any keys, not just the options defined by the class and its base classes. This means you can use the options object to store application specific information, as long as you avoid keys that are already used by the class in question.

    #### Includes

    `includes` is a special class property that merges all specified objects into the class (such objects are called mixins).

    ``` javascript
     var MyMixin = {
        foo: function () { ... },
        bar: 5
    };

    var MyClass = L.Class.extend({
        includes: MyMixin
    });

    var a = new MyClass();
    a.foo();
    ```

    You can also do such includes in runtime with the `include` method:

    ``` javascript
    MyClass.include(MyMixin);
    ```

    `statics` is just a convenience property that injects specified object properties as the static properties of the class, useful for defining constants:

    ``` javascript
    var MyClass = L.Class.extend({
        statics: {
            FOO: 'bar',
            BLA: 5
        }
    });

    MyClass.FOO; // 'bar'
    ```

    #### Constructor hooks

    If you're a plugin developer, you often need to add additional initialization code to existing classes (e.g. editing hooks for [`L.Polyline`](#polyline)). Leaflet comes with a way to do it easily using the `addInitHook` method:

    ``` javascript
    MyClass.addInitHook(function () {
        // ... do something in constructor additionally
        // e.g. add event listeners, set custom properties etc.
    });
    ```

    You can also use the following shortcut when you just need to make one additional method call:

    ``` javascript
    MyClass.addInitHook('methodName', arg1, arg2, …);
    ```

    ### Functions

    Function

    Returns

    Description
- name: 'Class functions: addInitHook'
  id: index#class-addinithook
  summary: Adds a constructor hook to the class
  description: |-
    `addInitHook(<Function> `*`fn`*`)`

    `this`

    Adds a [constructor hook](#class-constructor-hooks) to the class.
- name: 'Class functions: extend'
  id: index#class-extend
  summary: Extends the current class given the properties to be included
  description: |-
    `extend(<Object> `*`props`*`)`

    `Function`

    [Extends the current class](#class-inheritance) given the properties to be included. Returns a Javascript function that is a class constructor (to be called with `new`).
- name: 'Class functions: include'
  id: index#class-include
  summary: Includes a mixin into the current class
  description: |-
    `include(<Object> `*`properties`*`)`

    `this`

    [Includes a mixin](#class-includes) into the current class.
- name: 'Class functions: mergeOptions'
  id: index#class-mergeoptions
  summary: Merges options into the defaults of the class
  description: |-
    `mergeOptions(<Object> `*`options`*`)`

    `this`

    [Merges `options`](#class-options) into the defaults of the class.
- name: Control
  id: index#control
  summary: L.Control is a base class for implementing map controls
  description: |-
    ## Control

    L.Control is a base class for implementing map controls. Handles positioning. All other controls extend from this class.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Control methods: addTo'
  id: index#control-addto
  summary: Adds the control to the given map
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the control to the given map.
- name: 'Control methods: getContainer'
  id: index#control-getcontainer
  summary: Returns the HTMLElement that contains the control
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTMLElement that contains the control.
- name: 'Control methods: getPosition'
  id: index#control-getposition
  summary: Returns the position of the control
  description: |-
    `getPosition()`

    `string`

    Returns the position of the control.
- name: 'Control methods: onAdd'
  id: index#control-onadd
  summary: Should return the container DOM element for the control and add listeners on relevant map events
  description: |-
    `onAdd(<`[`Map`](#map)`> `*`map`*`)`

    `HTMLElement`

    Should return the container DOM element for the control and add listeners on relevant map events. Called on [`control.addTo(map)`](#control-addTo).
- name: 'Control methods: onRemove'
  id: index#control-onremove
  summary: Optional method
  description: |-
    `onRemove(<`[`Map`](#map)`> `*`map`*`)`

    Optional method. Should contain all clean up code that removes the listeners previously added in [`onAdd`](#control-onadd). Called on [`control.remove()`](#control-remove).
- name: 'Control methods: remove'
  id: index#control-remove
  summary: Removes the control from the map it is currently active on
  description: |-
    `remove()`

    `this`

    Removes the control from the map it is currently active on.

    #### Extension methods

    Every control should extend from [`L.Control`](#control) and (re-)implement the following methods.

    Method

    Returns

    Description
- name: 'Control methods: setPosition'
  id: index#control-setposition
  summary: Sets the position of the control
  description: |-
    `setPosition(<string> `*`position`*`)`

    `this`

    Sets the position of the control.
- name: 'Control options: position'
  id: index#control-position
  summary: The position of the control (one of the map corners)
  description: |-
    `position`

    `String`

    `'topright'`

    The position of the control (one of the map corners). Possible values are `'topleft'`, `'topright'`, `'bottomleft'` or `'bottomright'`

    ### Methods

    Classes extending L.Control will inherit the following methods:

    Method

    Returns

    Description
- name: Control.Attribution
  id: index#control-attribution
  summary: The attribution control allows you to display attribution data in a small text box on a map
  description: |-
    ## Control.Attribution

    The attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its [`attributionControl` option](#map-attributioncontrol) to `false`, and it fetches attribution texts from layers with the [`getAttribution` method](#layer-getattribution) automatically. Extends Control.

    ### Creation

    Factory

    Description
- name: 'Control.Attribution creation: L.control.attribution'
  id: index#control-attribution-l-control-attribution
  summary: Creates an attribution control
  description: |-
    `L.control.attribution(<`[`Control.Attribution options`](#control-attribution-option)`> `*`options`*`)`

    Creates an attribution control.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Control.Attribution methods: addAttribution'
  id: index#control-attribution-addattribution
  summary: Adds an attribution text (e.g
  description: |-
    `addAttribution(<String> `*`text`*`)`

    `this`

    Adds an attribution text (e.g. `'&copy; OpenStreetMap contributors'`).
- name: 'Control.Attribution methods: addTo'
  id: index#control-attribution-addto
  summary: Adds the control to the given map
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the control to the given map.
- name: 'Control.Attribution methods: getContainer'
  id: index#control-attribution-getcontainer
  summary: Returns the HTMLElement that contains the control
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTMLElement that contains the control.
- name: 'Control.Attribution methods: getPosition'
  id: index#control-attribution-getposition
  summary: Returns the position of the control
  description: |-
    `getPosition()`

    `string`

    Returns the position of the control.
- name: 'Control.Attribution methods: remove'
  id: index#control-attribution-remove
  summary: Removes the control from the map it is currently active on
  description: |-
    `remove()`

    `this`

    Removes the control from the map it is currently active on.
- name: 'Control.Attribution methods: removeAttribution'
  id: index#control-attribution-removeattribution
  summary: Removes an attribution text
  description: |-
    `removeAttribution(<String> `*`text`*`)`

    `this`

    Removes an attribution text.

    Methods inherited from [Control](#control)

    Method

    Returns

    Description
- name: 'Control.Attribution methods: setPosition'
  id: index#control-attribution-setposition
  summary: Sets the position of the control
  description: |-
    `setPosition(<string> `*`position`*`)`

    `this`

    Sets the position of the control.
- name: 'Control.Attribution methods: setPrefix'
  id: index#control-attribution-setprefix
  summary: The HTML text shown before the attributions
  description: |-
    `setPrefix(<String|false> `*`prefix`*`)`

    `this`

    The HTML text shown before the attributions. Pass `false` to disable.
- name: 'Control.Attribution options: position'
  id: index#control-attribution-position
  summary: The position of the control (one of the map corners)
  description: |-
    `position`

    `String`

    `'topright'`

    The position of the control (one of the map corners). Possible values are `'topleft'`, `'topright'`, `'bottomleft'` or `'bottomright'`

    ### Methods

    Method

    Returns

    Description
- name: 'Control.Attribution options: prefix'
  id: index#control-attribution-prefix
  summary: The HTML text shown before the attributions
  description: |-
    `prefix`

    `String|false`

    `'Leaflet'`

    The HTML text shown before the attributions. Pass `false` to disable.

    Options inherited from [Control](#control)

    Option

    Type

    Default

    Description
- name: Control.Layers
  id: index#control-layers
  summary: The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the detailed example)
  description: |-
    ## Control.Layers

    The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the [detailed example](https://leafletjs.com/examples/layers-control/)). Extends [`Control`](#control).

    ### Usage example

    ``` javascript
    var baseLayers = {
        "Mapbox": mapbox,
        "OpenStreetMap": osm
    };

    var overlays = {
        "Marker": marker,
        "Roads": roadsLayer
    };

    L.control.layers(baseLayers, overlays).addTo(map);
    ```

    The `baseLayers` and `overlays` parameters are object literals with layer names as keys and [`Layer`](#layer) objects as values:

    ``` javascript
    {
        "<someName1>": layer1,
        "<someName2>": layer2
    }
    ```

    The layer names can contain HTML, which allows you to add additional styling to the items:

    ``` javascript
    {"<img src='my-layer-icon' /> <span class='my-layer-item'>My Layer</span>": myLayer}
    ```

    ### Creation

    Factory

    Description
- name: 'Control.Layers creation: L.control.layers'
  id: index#control-layers-l-control-layers
  summary: Creates a layers control with the given layers
  description: |-
    `L.control.layers(<Object> `*`baselayers?`*`, <Object> `*`overlays?`*`, <`[`Control.Layers options`](#control-layers-option)`> `*`options?`*`)`

    Creates a layers control with the given layers. Base layers will be switched with radio buttons, while overlays will be switched with checkboxes. Note that all base layers should be passed in the base layers object, but only one should be added to the map during map instantiation.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Control.Layers methods: addBaseLayer'
  id: index#control-layers-addbaselayer
  summary: Adds a base layer (radio button entry) with the given name to the control
  description: |-
    `addBaseLayer(<`[`Layer`](#layer)`> `*`layer`*`, <String> `*`name`*`)`

    `this`

    Adds a base layer (radio button entry) with the given name to the control.
- name: 'Control.Layers methods: addOverlay'
  id: index#control-layers-addoverlay
  summary: Adds an overlay (checkbox entry) with the given name to the control
  description: |-
    `addOverlay(<`[`Layer`](#layer)`> `*`layer`*`, <String> `*`name`*`)`

    `this`

    Adds an overlay (checkbox entry) with the given name to the control.
- name: 'Control.Layers methods: addTo'
  id: index#control-layers-addto
  summary: Adds the control to the given map
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the control to the given map.
- name: 'Control.Layers methods: collapse'
  id: index#control-layers-collapse
  summary: Collapse the control container if expanded
  description: |-
    `collapse()`

    `this`

    Collapse the control container if expanded.

    Methods inherited from [Control](#control)

    Method

    Returns

    Description
- name: 'Control.Layers methods: expand'
  id: index#control-layers-expand
  summary: Expand the control container if collapsed
  description: |-
    `expand()`

    `this`

    Expand the control container if collapsed.
- name: 'Control.Layers methods: getContainer'
  id: index#control-layers-getcontainer
  summary: Returns the HTMLElement that contains the control
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTMLElement that contains the control.
- name: 'Control.Layers methods: getPosition'
  id: index#control-layers-getposition
  summary: Returns the position of the control
  description: |-
    `getPosition()`

    `string`

    Returns the position of the control.
- name: 'Control.Layers methods: remove'
  id: index#control-layers-remove
  summary: Removes the control from the map it is currently active on
  description: |-
    `remove()`

    `this`

    Removes the control from the map it is currently active on.
- name: 'Control.Layers methods: removeLayer'
  id: index#control-layers-removelayer
  summary: Remove the given layer from the control
  description: |-
    `removeLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Remove the given layer from the control.
- name: 'Control.Layers methods: setPosition'
  id: index#control-layers-setposition
  summary: Sets the position of the control
  description: |-
    `setPosition(<string> `*`position`*`)`

    `this`

    Sets the position of the control.
- name: 'Control.Layers options: autoZIndex'
  id: index#control-layers-autozindex
  summary: If true, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off
  description: |-
    `autoZIndex`

    `Boolean`

    `true`

    If `true`, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.
- name: 'Control.Layers options: collapsed'
  id: index#control-layers-collapsed
  summary: If true, the control will be collapsed into an icon and expanded on mouse hover, touch, or keyboard activation
  description: |-
    `collapsed`

    `Boolean`

    `true`

    If `true`, the control will be collapsed into an icon and expanded on mouse hover, touch, or keyboard activation.
- name: 'Control.Layers options: hideSingleBase'
  id: index#control-layers-hidesinglebase
  summary: If true, the base layers in the control will be hidden when there is only one
  description: |-
    `hideSingleBase`

    `Boolean`

    `false`

    If `true`, the base layers in the control will be hidden when there is only one.
- name: 'Control.Layers options: position'
  id: index#control-layers-position
  summary: The position of the control (one of the map corners)
  description: |-
    `position`

    `String`

    `'topright'`

    The position of the control (one of the map corners). Possible values are `'topleft'`, `'topright'`, `'bottomleft'` or `'bottomright'`

    ### Methods

    Method

    Returns

    Description
- name: 'Control.Layers options: sortFunction'
  id: index#control-layers-sortfunction
  summary: A compare function that will be used for sorting the layers, when sortLayers is true
  description: |-
    `sortFunction`

    `Function`

    `*`

    A [compare function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) that will be used for sorting the layers, when `sortLayers` is `true`. The function receives both the [`L.Layer`](#layer) instances and their names, as in `sortFunction(layerA, layerB, nameA, nameB)`. By default, it sorts layers alphabetically by their name.

    Options inherited from [Control](#control)

    Option

    Type

    Default

    Description
- name: 'Control.Layers options: sortLayers'
  id: index#control-layers-sortlayers
  summary: Whether to sort the layers
  description: |-
    `sortLayers`

    `Boolean`

    `false`

    Whether to sort the layers. When `false`, layers will keep the order in which they were added to the control.
- name: Control.Scale
  id: index#control-scale
  summary: A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems
  description: |-
    ## Control.Scale

    A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends [`Control`](#control).

    ### Usage example

    ``` javascript
    L.control.scale().addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'Control.Scale creation: L.control.scale'
  id: index#control-scale-l-control-scale
  summary: Creates an scale control with the given options
  description: |-
    `L.control.scale(<`[`Control.Scale options`](#control-scale-option)`> `*`options?`*`)`

    Creates an scale control with the given options.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Control.Scale methods: addTo'
  id: index#control-scale-addto
  summary: Adds the control to the given map
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the control to the given map.
- name: 'Control.Scale methods: getContainer'
  id: index#control-scale-getcontainer
  summary: Returns the HTMLElement that contains the control
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTMLElement that contains the control.
- name: 'Control.Scale methods: getPosition'
  id: index#control-scale-getposition
  summary: Returns the position of the control
  description: |-
    `getPosition()`

    `string`

    Returns the position of the control.
- name: 'Control.Scale methods: remove'
  id: index#control-scale-remove
  summary: Removes the control from the map it is currently active on
  description: |-
    `remove()`

    `this`

    Removes the control from the map it is currently active on.
- name: 'Control.Scale methods: setPosition'
  id: index#control-scale-setposition
  summary: Sets the position of the control
  description: |-
    `setPosition(<string> `*`position`*`)`

    `this`

    Sets the position of the control.
- name: 'Control.Scale options: imperial'
  id: index#control-scale-imperial
  summary: Whether to show the imperial scale line (mi/ft)
  description: |-
    `imperial`

    `Boolean`

    `True`

    Whether to show the imperial scale line (mi/ft).
- name: 'Control.Scale options: maxWidth'
  id: index#control-scale-maxwidth
  summary: Maximum width of the control in pixels
  description: |-
    `maxWidth`

    `Number`

    `100`

    Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).
- name: 'Control.Scale options: metric'
  id: index#control-scale-metric
  summary: Whether to show the metric scale line (m/km)
  description: |-
    `metric`

    `Boolean`

    `True`

    Whether to show the metric scale line (m/km).
- name: 'Control.Scale options: position'
  id: index#control-scale-position
  summary: The position of the control (one of the map corners)
  description: |-
    `position`

    `String`

    `'topright'`

    The position of the control (one of the map corners). Possible values are `'topleft'`, `'topright'`, `'bottomleft'` or `'bottomright'`

    ### Methods

    Methods inherited from [Control](#control)

    Method

    Returns

    Description
- name: 'Control.Scale options: updateWhenIdle'
  id: index#control-scale-updatewhenidle
  summary: If true, the control is updated on moveend, otherwise it's always up-to-date (updated on move)
  description: |-
    `updateWhenIdle`

    `Boolean`

    `false`

    If `true`, the control is updated on [`moveend`](#map-moveend), otherwise it's always up-to-date (updated on [`move`](#map-move)).

    Options inherited from [Control](#control)

    Option

    Type

    Default

    Description
- name: Control.Zoom
  id: index#control-zoom
  summary: A basic zoom control with two buttons (zoom in and zoom out)
  description: |-
    ## Control.Zoom

    A basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its [`zoomControl` option](#map-zoomcontrol) to `false`. Extends [`Control`](#control).

    ### Creation

    Factory

    Description
- name: 'Control.Zoom creation: L.control.zoom'
  id: index#control-zoom-l-control-zoom
  summary: null
  description: |-
    `L.control.zoom(<`[`Control.Zoom options`](#control-zoom-option)`> `*`options`*`)`

    Creates a zoom control

    ### Options

    Option

    Type

    Default

    Description
- name: 'Control.Zoom methods: addTo'
  id: index#control-zoom-addto
  summary: Adds the control to the given map
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the control to the given map.
- name: 'Control.Zoom methods: getContainer'
  id: index#control-zoom-getcontainer
  summary: Returns the HTMLElement that contains the control
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTMLElement that contains the control.
- name: 'Control.Zoom methods: getPosition'
  id: index#control-zoom-getposition
  summary: Returns the position of the control
  description: |-
    `getPosition()`

    `string`

    Returns the position of the control.
- name: 'Control.Zoom methods: remove'
  id: index#control-zoom-remove
  summary: Removes the control from the map it is currently active on
  description: |-
    `remove()`

    `this`

    Removes the control from the map it is currently active on.
- name: 'Control.Zoom methods: setPosition'
  id: index#control-zoom-setposition
  summary: Sets the position of the control
  description: |-
    `setPosition(<string> `*`position`*`)`

    `this`

    Sets the position of the control.
- name: 'Control.Zoom options: position'
  id: index#control-zoom-position
  summary: The position of the control (one of the map corners)
  description: |-
    `position`

    `String`

    `'topright'`

    The position of the control (one of the map corners). Possible values are `'topleft'`, `'topright'`, `'bottomleft'` or `'bottomright'`

    ### Methods

    Methods inherited from [Control](#control)

    Method

    Returns

    Description
- name: 'Control.Zoom options: zoomInText'
  id: index#control-zoom-zoomintext
  summary: The text set on the 'zoom in' button
  description: |-
    `zoomInText`

    `String`

    `'<span aria-hidden="true">+</span>'`

    The text set on the 'zoom in' button.
- name: 'Control.Zoom options: zoomInTitle'
  id: index#control-zoom-zoomintitle
  summary: The title set on the 'zoom in' button
  description: |-
    `zoomInTitle`

    `String`

    `'Zoom in'`

    The title set on the 'zoom in' button.
- name: 'Control.Zoom options: zoomOutText'
  id: index#control-zoom-zoomouttext
  summary: The text set on the 'zoom out' button
  description: |-
    `zoomOutText`

    `String`

    `'<span aria-hidden="true">&#x2212;</span>'`

    The text set on the 'zoom out' button.
- name: 'Control.Zoom options: zoomOutTitle'
  id: index#control-zoom-zoomouttitle
  summary: The title set on the 'zoom out' button
  description: |-
    `zoomOutTitle`

    `String`

    `'Zoom out'`

    The title set on the 'zoom out' button.

    Options inherited from [Control](#control)

    Option

    Type

    Default

    Description
- name: CRS
  id: index#crs
  summary: null
  description: |-
    ## CRS

    ### Methods

    Method

    Returns

    Description
- name: 'CRS defined crss: L.CRS.Base'
  id: index#crs-l-crs-base
  summary: Object that defines coordinate reference systems for projecting geographical points into pixel (screen) coordinates and back (and to coordinates in other units for WMS services)
  description: |-
    `L.CRS.Base`

    Object that defines coordinate reference systems for projecting geographical points into pixel (screen) coordinates and back (and to coordinates in other units for [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services). See [spatial reference system](https://en.wikipedia.org/wiki/Spatial_reference_system).

    Leaflet defines the most usual CRSs by default. If you want to use a CRS not defined by default, take a look at the [Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) plugin.

    Note that the CRS instances do not inherit from Leaflet's [`Class`](#class) object, and can't be instantiated. Also, new classes can't inherit from them, and methods can't be added to them with the `include` function.
- name: 'CRS defined crss: L.CRS.Earth'
  id: index#crs-l-crs-earth
  summary: Serves as the base for CRS that are global such that they cover the earth
  description: |-
    `L.CRS.Earth`

    Serves as the base for CRS that are global such that they cover the earth. Can only be used as the base for other CRS and cannot be used directly, since it does not have a `code`, `projection` or `transformation`. `distance()` returns meters.
- name: 'CRS defined crss: L.CRS.EPSG3395'
  id: index#crs-l-crs-epsg3395
  summary: Rarely used by some commercial tile providers
  description: |-
    `L.CRS.EPSG3395`

    Rarely used by some commercial tile providers. Uses Elliptical Mercator projection.
- name: 'CRS defined crss: L.CRS.EPSG3857'
  id: index#crs-l-crs-epsg3857
  summary: The most common CRS for online maps, used by almost all free and commercial tile providers
  description: |-
    `L.CRS.EPSG3857`

    The most common CRS for online maps, used by almost all free and commercial tile providers. Uses Spherical Mercator projection. Set in by default in Map's `crs` option.
- name: 'CRS defined crss: L.CRS.EPSG4326'
  id: index#crs-l-crs-epsg4326
  summary: A common CRS among GIS enthusiasts
  description: |-
    `L.CRS.EPSG4326`

    A common CRS among GIS enthusiasts. Uses simple Equirectangular projection.

    Leaflet 1.0.x complies with the [TMS coordinate scheme for EPSG:4326](https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification#global-geodetic), which is a breaking change from 0.7.x behaviour. If you are using a [`TileLayer`](#tilelayer) with this CRS, ensure that there are two 256x256 pixel tiles covering the whole earth at zoom level zero, and that the tile coordinate origin is (-180,+90), or (-180,-90) for [`TileLayer`](#tilelayer)s with [the `tms` option](#tilelayer-tms) set.
- name: 'CRS defined crss: L.CRS.Simple'
  id: index#crs-l-crs-simple
  summary: A simple CRS that maps longitude and latitude into x and y directly
  description: |-
    `L.CRS.Simple`

    A simple CRS that maps longitude and latitude into `x` and `y` directly. May be used for maps of flat surfaces (e.g. game maps). Note that the `y` axis should still be inverted (going from bottom to top). `distance()` returns simple euclidean distance.
- name: 'CRS methods: distance'
  id: index#crs-distance
  summary: Returns the distance between two geographical coordinates
  description: |-
    `distance(<`[`LatLng`](#latlng)`> `*`latlng1`*`, <`[`LatLng`](#latlng)`> `*`latlng2`*`)`

    `Number`

    Returns the distance between two geographical coordinates.
- name: 'CRS methods: getProjectedBounds'
  id: index#crs-getprojectedbounds
  summary: Returns the projection's bounds scaled and transformed for the provided zoom
  description: |-
    `getProjectedBounds(<Number> `*`zoom`*`)`

    ` `[`Bounds`](#bounds)` `

    Returns the projection's bounds scaled and transformed for the provided `zoom`.
- name: 'CRS methods: latLngToPoint'
  id: index#crs-latlngtopoint
  summary: Projects geographical coordinates into pixel coordinates for a given zoom
  description: |-
    `latLngToPoint(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number> `*`zoom`*`)`

    ` `[`Point`](#point)` `

    Projects geographical coordinates into pixel coordinates for a given zoom.
- name: 'CRS methods: pointToLatLng'
  id: index#crs-pointtolatlng
  summary: The inverse of latLngToPoint
  description: |-
    `pointToLatLng(<`[`Point`](#point)`> `*`point`*`, <Number> `*`zoom`*`)`

    ` `[`LatLng`](#latlng)` `

    The inverse of `latLngToPoint`. Projects pixel coordinates on a given zoom into geographical coordinates.
- name: 'CRS methods: project'
  id: index#crs-project
  summary: Projects geographical coordinates into coordinates in units accepted for this CRS (e.g
  description: |-
    `project(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`Point`](#point)` `

    Projects geographical coordinates into coordinates in units accepted for this CRS (e.g. meters for EPSG:3857, for passing it to WMS services).
- name: 'CRS methods: scale'
  id: index#crs-scale
  summary: Returns the scale used when transforming projected coordinates into pixel coordinates for a particular zoom
  description: |-
    `scale(<Number> `*`zoom`*`)`

    `Number`

    Returns the scale used when transforming projected coordinates into pixel coordinates for a particular zoom. For example, it returns `256 * 2^zoom` for Mercator-based CRS.
- name: 'CRS methods: unproject'
  id: index#crs-unproject
  summary: Given a projected coordinate returns the corresponding LatLng
  description: |-
    `unproject(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`LatLng`](#latlng)` `

    Given a projected coordinate returns the corresponding LatLng. The inverse of `project`.
- name: 'CRS methods: wrapLatLng'
  id: index#crs-wraplatlng
  summary: Returns a LatLng where lat and lng has been wrapped according to the CRS's wrapLat and wrapLng properties, if they are outside the CRS's bounds
  description: |-
    `wrapLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`LatLng`](#latlng)` `

    Returns a [`LatLng`](#latlng) where lat and lng has been wrapped according to the CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds.
- name: 'CRS methods: wrapLatLngBounds'
  id: index#crs-wraplatlngbounds
  summary: Returns a LatLngBounds with the same size as the given one, ensuring that its center is within the CRS's bounds
  description: |-
    `wrapLatLngBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns a [`LatLngBounds`](#latlngbounds) with the same size as the given one, ensuring that its center is within the CRS's bounds. Only accepts actual [`L.LatLngBounds`](#latlngbounds) instances, not arrays.

    ### Properties

    Property

    Type

    Description
- name: 'CRS methods: zoom'
  id: index#crs-zoom
  summary: Inverse of scale(), returns the zoom level corresponding to a scale factor of scale
  description: |-
    `zoom(<Number> `*`scale`*`)`

    `Number`

    Inverse of `scale()`, returns the zoom level corresponding to a scale factor of `scale`.
- name: 'CRS properties: code'
  id: index#crs-code
  summary: Standard code name of the CRS passed into WMS services (e.g
  description: |-
    `code`

    `String`

    Standard code name of the CRS passed into WMS services (e.g. `'EPSG:3857'`)
- name: 'CRS properties: infinite'
  id: index#crs-infinite
  summary: null
  description: |-
    `infinite`

    `Boolean`

    If true, the coordinate space will be unbounded (infinite in both axes)

    ### Defined CRSs

    CRS

    Description
- name: 'CRS properties: wrapLat'
  id: index#crs-wraplat
  summary: Like wrapLng, but for the latitude (vertical) axis
  description: |-
    `wrapLat`

    `Number[]`

    Like `wrapLng`, but for the latitude (vertical) axis.
- name: 'CRS properties: wrapLng'
  id: index#crs-wraplng
  summary: An array of two numbers defining whether the longitude (horizontal) coordinate axis wraps around a given range and how
  description: |-
    `wrapLng`

    `Number[]`

    An array of two numbers defining whether the longitude (horizontal) coordinate axis wraps around a given range and how. Defaults to `[-180, 180]` in most geographical CRSs. If `undefined`, the longitude axis does not wrap around.
- name: DivIcon
  id: index#divicon
  summary: Represents a lightweight icon for markers that uses a simple <div> element instead of an image
  description: |-
    ## DivIcon

    Represents a lightweight icon for markers that uses a simple `<div>` element instead of an image. Inherits from [`Icon`](#icon) but ignores the `iconUrl` and shadow options.

    ### Usage example

    ``` javascript
    var myIcon = L.divIcon({className: 'my-div-icon'});
    // you can set .my-div-icon styles in CSS

    L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);
    ```

    By default, it has a 'leaflet-div-icon' CSS class and is styled as a little white square with a shadow.

    ### Creation

    Factory

    Description
- name: 'DivIcon creation: L.divIcon'
  id: index#divicon-l-divicon
  summary: Creates a DivIcon instance with the given options
  description: |-
    `L.divIcon(<`[`DivIcon options`](#divicon-option)`> `*`options`*`)`

    Creates a [`DivIcon`](#divicon) instance with the given options.

    ### Options

    Option

    Type

    Default

    Description
- name: 'DivIcon methods: createIcon'
  id: index#divicon-createicon
  summary: Called internally when the icon has to be shown, returns a <img> HTML element styled according to the options
  description: |-
    `createIcon(<HTMLElement> `*`oldIcon?`*`)`

    `HTMLElement`

    Called internally when the icon has to be shown, returns a `<img>` HTML element styled according to the options.
- name: 'DivIcon methods: createShadow'
  id: index#divicon-createshadow
  summary: As createIcon, but for the shadow beneath it
  description: |-
    `createShadow(<HTMLElement> `*`oldIcon?`*`)`

    `HTMLElement`

    As `createIcon`, but for the shadow beneath it.
- name: 'DivIcon options: bgPos'
  id: index#divicon-bgpos
  summary: null
  description: |-
    `bgPos`

    ` `[`Point`](#point)` `

    `[0, 0]`

    Optional relative position of the background, in pixels

    Options inherited from [Icon](#icon)

    Option

    Type

    Default

    Description
- name: 'DivIcon options: className'
  id: index#divicon-classname
  summary: A custom class name to assign to both icon and shadow images
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to both icon and shadow images. Empty by default.
- name: 'DivIcon options: crossOrigin'
  id: index#divicon-crossorigin
  summary: Whether the crossOrigin attribute will be added to the tiles
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.

    ### Methods

    Methods inherited from [Icon](#icon)

    Method

    Returns

    Description
- name: 'DivIcon options: html'
  id: index#divicon-html
  summary: Custom HTML code to put inside the div element, empty by default
  description: |-
    `html`

    `String|HTMLElement`

    `''`

    Custom HTML code to put inside the div element, empty by default. Alternatively, an instance of `HTMLElement`.
- name: 'DivIcon options: iconAnchor'
  id: index#divicon-iconanchor
  summary: The coordinates of the "tip" of the icon (relative to its top left corner)
  description: |-
    `iconAnchor`

    ` `[`Point`](#point)` `

    `null`

    The coordinates of the "tip" of the icon (relative to its top left corner). The icon will be aligned so that this point is at the marker's geographical location. Centered by default if size is specified, also can be set in CSS with negative margins.
- name: 'DivIcon options: iconRetinaUrl'
  id: index#divicon-iconretinaurl
  summary: The URL to a retina sized version of the icon image (absolute or relative to your script path)
  description: |-
    `iconRetinaUrl`

    `String`

    `null`

    The URL to a retina sized version of the icon image (absolute or relative to your script path). Used for Retina screen devices.
- name: 'DivIcon options: iconSize'
  id: index#divicon-iconsize
  summary: Size of the icon image in pixels
  description: |-
    `iconSize`

    ` `[`Point`](#point)` `

    `null`

    Size of the icon image in pixels.
- name: 'DivIcon options: iconUrl'
  id: index#divicon-iconurl
  summary: (required) The URL to the icon image (absolute or relative to your script path)
  description: |-
    `iconUrl`

    `String`

    `null`

    **(required)** The URL to the icon image (absolute or relative to your script path).
- name: 'DivIcon options: popupAnchor'
  id: index#divicon-popupanchor
  summary: The coordinates of the point from which popups will "open", relative to the icon anchor
  description: |-
    `popupAnchor`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The coordinates of the point from which popups will "open", relative to the icon anchor.
- name: 'DivIcon options: shadowAnchor'
  id: index#divicon-shadowanchor
  summary: The coordinates of the "tip" of the shadow (relative to its top left corner) (the same as iconAnchor if not specified)
  description: |-
    `shadowAnchor`

    ` `[`Point`](#point)` `

    `null`

    The coordinates of the "tip" of the shadow (relative to its top left corner) (the same as iconAnchor if not specified).
- name: 'DivIcon options: shadowRetinaUrl'
  id: index#divicon-shadowretinaurl
  summary: null
  description: |-
    `shadowRetinaUrl`

    `String`

    `null`
- name: 'DivIcon options: shadowSize'
  id: index#divicon-shadowsize
  summary: Size of the shadow image in pixels
  description: |-
    `shadowSize`

    ` `[`Point`](#point)` `

    `null`

    Size of the shadow image in pixels.
- name: 'DivIcon options: shadowUrl'
  id: index#divicon-shadowurl
  summary: The URL to the icon shadow image
  description: |-
    `shadowUrl`

    `String`

    `null`

    The URL to the icon shadow image. If not specified, no shadow image will be created.
- name: 'DivIcon options: tooltipAnchor'
  id: index#divicon-tooltipanchor
  summary: The coordinates of the point from which tooltips will "open", relative to the icon anchor
  description: |-
    `tooltipAnchor`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The coordinates of the point from which tooltips will "open", relative to the icon anchor.
- name: DivOverlay
  id: index#divoverlay
  summary: Base model for L.Popup and L.Tooltip
  description: |-
    ## DivOverlay

    Base model for L.Popup and L.Tooltip. Inherit from it for custom overlays like plugins.

    ### Options

    Option

    Type

    Default

    Description
- name: 'DivOverlay events: add'
  id: index#divoverlay-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'DivOverlay events: click'
  id: index#divoverlay-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'DivOverlay events: contentupdate'
  id: index#divoverlay-contentupdate
  summary: null
  description: |-
    `contentupdate`

    ` `[`Event`](#event)` `

    Fired when the content of the overlay is updated

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'DivOverlay events: contextmenu'
  id: index#divoverlay-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'DivOverlay events: dblclick'
  id: index#divoverlay-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'DivOverlay events: mousedown'
  id: index#divoverlay-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'DivOverlay events: mouseout'
  id: index#divoverlay-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'DivOverlay events: mouseover'
  id: index#divoverlay-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'DivOverlay events: mouseup'
  id: index#divoverlay-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'DivOverlay events: popupclose'
  id: index#divoverlay-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'DivOverlay events: popupopen'
  id: index#divoverlay-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'DivOverlay events: tooltipclose'
  id: index#divoverlay-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'DivOverlay events: tooltipopen'
  id: index#divoverlay-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'DivOverlay methods: addEventListener'
  id: index#divoverlay-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'DivOverlay methods: addEventParent'
  id: index#divoverlay-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'DivOverlay methods: addOneTimeEventListener'
  id: index#divoverlay-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'DivOverlay methods: addTo'
  id: index#divoverlay-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'DivOverlay methods: bindPopup'
  id: index#divoverlay-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'DivOverlay methods: bindTooltip'
  id: index#divoverlay-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'DivOverlay methods: bringToBack'
  id: index#divoverlay-bringtoback
  summary: Brings this overlay to the back of other overlays (in the same map pane)
  description: |-
    `bringToBack()`

    `this`

    Brings this overlay to the back of other overlays (in the same map pane).

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'DivOverlay methods: bringToFront'
  id: index#divoverlay-bringtofront
  summary: Brings this overlay in front of other overlays (in the same map pane)
  description: |-
    `bringToFront()`

    `this`

    Brings this overlay in front of other overlays (in the same map pane).
- name: 'DivOverlay methods: clearAllEventListeners'
  id: index#divoverlay-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'DivOverlay methods: close'
  id: index#divoverlay-close
  summary: Closes the overlay
  description: |-
    `close()`

    `this`

    Closes the overlay. Alternative to `map.closePopup(popup)`/`.closeTooltip(tooltip)` and `layer.closePopup()`/`.closeTooltip()`.
- name: 'DivOverlay methods: closePopup'
  id: index#divoverlay-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'DivOverlay methods: closeTooltip'
  id: index#divoverlay-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'DivOverlay methods: fire'
  id: index#divoverlay-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'DivOverlay methods: fireEvent'
  id: index#divoverlay-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'DivOverlay methods: getAttribution'
  id: index#divoverlay-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'DivOverlay methods: getContent'
  id: index#divoverlay-getcontent
  summary: Returns the content of the overlay
  description: |-
    `getContent()`

    `String|HTMLElement`

    Returns the content of the overlay.
- name: 'DivOverlay methods: getElement'
  id: index#divoverlay-getelement
  summary: Returns the HTML container of the overlay
  description: |-
    `getElement()`

    `String|HTMLElement`

    Returns the HTML container of the overlay.
- name: 'DivOverlay methods: getLatLng'
  id: index#divoverlay-getlatlng
  summary: Returns the geographical point of the overlay
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the geographical point of the overlay.
- name: 'DivOverlay methods: getPane'
  id: index#divoverlay-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'DivOverlay methods: getPopup'
  id: index#divoverlay-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'DivOverlay methods: getTooltip'
  id: index#divoverlay-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'DivOverlay methods: hasEventListeners'
  id: index#divoverlay-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'DivOverlay methods: isOpen'
  id: index#divoverlay-isopen
  summary: Returns true when the overlay is visible on the map
  description: |-
    `isOpen()`

    `Boolean`

    Returns `true` when the overlay is visible on the map.
- name: 'DivOverlay methods: isPopupOpen'
  id: index#divoverlay-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'DivOverlay methods: isTooltipOpen'
  id: index#divoverlay-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'DivOverlay methods: listens'
  id: index#divoverlay-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'DivOverlay methods: off'
  id: index#divoverlay-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'DivOverlay methods: on'
  id: index#divoverlay-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'DivOverlay methods: once'
  id: index#divoverlay-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'DivOverlay methods: openOn'
  id: index#divoverlay-openon
  summary: Adds the overlay to the map
  description: |-
    `openOn(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the overlay to the map. Alternative to `map.openPopup(popup)`/`.openTooltip(tooltip)`.
- name: 'DivOverlay methods: openPopup'
  id: index#divoverlay-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'DivOverlay methods: openTooltip'
  id: index#divoverlay-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'DivOverlay methods: removeEventListener'
  id: index#divoverlay-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'DivOverlay methods: removeEventParent'
  id: index#divoverlay-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'DivOverlay methods: removeFrom'
  id: index#divoverlay-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'DivOverlay methods: setContent'
  id: index#divoverlay-setcontent
  summary: Sets the HTML content of the overlay
  description: |-
    `setContent(<String|HTMLElement|Function> `*`htmlContent`*`)`

    `this`

    Sets the HTML content of the overlay. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.
- name: 'DivOverlay methods: setLatLng'
  id: index#divoverlay-setlatlng
  summary: Sets the geographical point where the overlay will open
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `this`

    Sets the geographical point where the overlay will open.
- name: 'DivOverlay methods: setPopupContent'
  id: index#divoverlay-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'DivOverlay methods: setTooltipContent'
  id: index#divoverlay-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'DivOverlay methods: toggle'
  id: index#divoverlay-toggle
  summary: Opens or closes the overlay bound to layer depending on its current state
  description: |-
    `toggle(<`[`Layer`](#layer)`> `*`layer?`*`)`

    `this`

    Opens or closes the overlay bound to layer depending on its current state. Argument may be omitted only for overlay bound to layer. Alternative to `layer.togglePopup()`/`.toggleTooltip()`.
- name: 'DivOverlay methods: togglePopup'
  id: index#divoverlay-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'DivOverlay methods: toggleTooltip'
  id: index#divoverlay-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'DivOverlay methods: unbindPopup'
  id: index#divoverlay-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'DivOverlay methods: unbindTooltip'
  id: index#divoverlay-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'DivOverlay methods: update'
  id: index#divoverlay-update
  summary: Updates the overlay content, layout and position
  description: |-
    `update()`

    `null`

    Updates the overlay content, layout and position. Useful for updating the overlay after something inside changed, e.g. image loaded.
- name: 'DivOverlay options: attribution'
  id: index#divoverlay-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    #### DivOverlay events

    Event

    Data

    Description
- name: 'DivOverlay options: bubblingMouseEvents'
  id: index#divoverlay-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'DivOverlay options: className'
  id: index#divoverlay-classname
  summary: A custom CSS class name to assign to the overlay
  description: |-
    `className`

    `String`

    `''`

    A custom CSS class name to assign to the overlay.
- name: 'DivOverlay options: content'
  id: index#divoverlay-content
  summary: Sets the HTML content of the overlay while initializing
  description: |-
    `content`

    `String|HTMLElement|Function`

    `''`

    Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'DivOverlay options: interactive'
  id: index#divoverlay-interactive
  summary: If true, the popup/tooltip will listen to the mouse events
  description: |-
    `interactive`

    `Boolean`

    `false`

    If true, the popup/tooltip will listen to the mouse events.
- name: 'DivOverlay options: offset'
  id: index#divoverlay-offset
  summary: The offset of the overlay position
  description: |-
    `offset`

    ` `[`Point`](#point)` `

    `Point(0, 0)`

    The offset of the overlay position.
- name: 'DivOverlay options: pane'
  id: index#divoverlay-pane
  summary: Map pane where the overlay will be added
  description: |-
    `pane`

    `String`

    `undefined`

    `Map pane` where the overlay will be added.
- name: DomEvent
  id: index#domevent
  summary: Utility functions to work with the DOM events, used by Leaflet internally
  description: |-
    ## DomEvent

    Utility functions to work with the [DOM events](https://developer.mozilla.org/docs/Web/API/Event), used by Leaflet internally.

    ### Functions

    Function

    Returns

    Description
- name: 'DomEvent functions: addListener'
  id: index#domevent-addlistener
  summary: null
  description: |-
    `addListener(`*`…`*`)`

    `this`

    Alias to [`L.DomEvent.on`](#domevent-on)
- name: 'DomEvent functions: disableClickPropagation'
  id: index#domevent-disableclickpropagation
  summary: Adds stopPropagation to the element's 'click', 'dblclick', 'contextmenu', 'mousedown' and 'touchstart' events (plus browser variants)
  description: |-
    `disableClickPropagation(<HTMLElement> `*`el`*`)`

    `this`

    Adds `stopPropagation` to the element's `'click'`, `'dblclick'`, `'contextmenu'`, `'mousedown'` and `'touchstart'` events (plus browser variants).
- name: 'DomEvent functions: disableScrollPropagation'
  id: index#domevent-disablescrollpropagation
  summary: Adds stopPropagation to the element's 'wheel' events (plus browser variants)
  description: |-
    `disableScrollPropagation(<HTMLElement> `*`el`*`)`

    `this`

    Adds `stopPropagation` to the element's `'wheel'` events (plus browser variants).
- name: 'DomEvent functions: getMousePosition'
  id: index#domevent-getmouseposition
  summary: Gets normalized mouse position from a DOM event relative to the container (border excluded) or to the whole page if not specified
  description: |-
    `getMousePosition(<DOMEvent> `*`ev`*`, <HTMLElement> `*`container?`*`)`

    ` `[`Point`](#point)` `

    Gets normalized mouse position from a DOM event relative to the `container` (border excluded) or to the whole page if not specified.
- name: 'DomEvent functions: getPropagationPath'
  id: index#domevent-getpropagationpath
  summary: Compatibility polyfill for Event.composedPath()
  description: |-
    `getPropagationPath(<DOMEvent> `*`ev`*`)`

    `Array`

    Compatibility polyfill for [`Event.composedPath()`](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath). Returns an array containing the `HTMLElement`s that the given DOM event should propagate to (if not stopped).
- name: 'DomEvent functions: getWheelDelta'
  id: index#domevent-getwheeldelta
  summary: Gets normalized wheel delta from a wheel DOM event, in vertical pixels scrolled (negative if scrolling down)
  description: |-
    `getWheelDelta(<DOMEvent> `*`ev`*`)`

    `Number`

    Gets normalized wheel delta from a wheel DOM event, in vertical pixels scrolled (negative if scrolling down). Events from pointing devices without precise scrolling are mapped to a best guess of 60 pixels.
- name: 'DomEvent functions: off'
  id: index#domevent-off
  summary: Removes a previously added listener function
  description: |-
    `off(<HTMLElement> `*`el`*`, <String> `*`types`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. Note that if you passed a custom context to on, you must pass the same context to `off` in order to remove the listener.

    `off(<HTMLElement> `*`el`*`, <Object> `*`eventMap`*`, <Object> `*`context?`*`)`

    `this`

    Removes a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`

    `off(<HTMLElement> `*`el`*`, <String> `*`types`*`)`

    `this`

    Removes all previously added listeners of given types.

    `off(<HTMLElement> `*`el`*`)`

    `this`

    Removes all previously added listeners from given HTMLElement
- name: 'DomEvent functions: on'
  id: index#domevent-on
  summary: Adds a listener function (fn) to a particular DOM event type of the element el
  description: |-
    `on(<HTMLElement> `*`el`*`, <String> `*`types`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular DOM event type of the element `el`. You can optionally specify the context of the listener (object the `this` keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<HTMLElement> `*`el`*`, <Object> `*`eventMap`*`, <Object> `*`context?`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'DomEvent functions: preventDefault'
  id: index#domevent-preventdefault
  summary: Prevents the default action of the DOM Event ev from happening (such as following a link in the href of the a element, or doing a POST request with page reload when a <form> is submitted)
  description: |-
    `preventDefault(<DOMEvent> `*`ev`*`)`

    `this`

    Prevents the default action of the DOM Event `ev` from happening (such as following a link in the href of the a element, or doing a POST request with page reload when a `<form>` is submitted). Use it inside listener functions.
- name: 'DomEvent functions: removeListener'
  id: index#domevent-removelistener
  summary: null
  description: |-
    `removeListener(`*`…`*`)`

    `this`

    Alias to [`L.DomEvent.off`](#domevent-off)
- name: 'DomEvent functions: stop'
  id: index#domevent-stop
  summary: Does stopPropagation and preventDefault at the same time
  description: |-
    `stop(<DOMEvent> `*`ev`*`)`

    `this`

    Does `stopPropagation` and `preventDefault` at the same time.
- name: 'DomEvent functions: stopPropagation'
  id: index#domevent-stoppropagation
  summary: Stop the given event from propagation to parent elements
  description: |-
    `stopPropagation(<DOMEvent> `*`ev`*`)`

    `this`

    Stop the given event from propagation to parent elements. Used inside the listener functions:

    ``` javascript
    L.DomEvent.on(div, 'click', function (ev) {
        L.DomEvent.stopPropagation(ev);
    });
    ```
- name: DomUtil
  id: index#domutil
  summary: Utility functions to work with the DOM tree, used by Leaflet internally
  description: |-
    ## DomUtil

    Utility functions to work with the [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model) tree, used by Leaflet internally.

    Most functions expecting or returning a `HTMLElement` also work for SVG elements. The only difference is that classes refer to CSS classes in HTML and SVG classes in SVG.

    ### Functions

    Function

    Returns

    Description
- name: 'DomUtil functions: addClass'
  id: index#domutil-addclass
  summary: Adds name to the element's class attribute
  description: |-
    `addClass(<HTMLElement> `*`el`*`, <String> `*`name`*`)`

    Adds `name` to the element's class attribute.
- name: 'DomUtil functions: create'
  id: index#domutil-create
  summary: Creates an HTML element with tagName, sets its class to className, and optionally appends it to container element
  description: |-
    `create(<String> `*`tagName`*`, <String> `*`className?`*`, <HTMLElement> `*`container?`*`)`

    `HTMLElement`

    Creates an HTML element with `tagName`, sets its class to `className`, and optionally appends it to `container` element.
- name: 'DomUtil functions: disableImageDrag'
  id: index#domutil-disableimagedrag
  summary: As L.DomUtil.disableTextSelection, but for dragstart DOM events, usually generated when the user drags an image
  description: |-
    `disableImageDrag()`

    As [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection), but for `dragstart` DOM events, usually generated when the user drags an image.
- name: 'DomUtil functions: disableTextSelection'
  id: index#domutil-disabletextselection
  summary: Prevents the user from generating selectstart DOM events, usually generated when the user drags the mouse through a page with text
  description: |-
    `disableTextSelection()`

    Prevents the user from generating `selectstart` DOM events, usually generated when the user drags the mouse through a page with text. Used internally by Leaflet to override the behaviour of any click-and-drag interaction on the map. Affects drag interactions on the whole document.
- name: 'DomUtil functions: empty'
  id: index#domutil-empty
  summary: null
  description: |-
    `empty(<HTMLElement> `*`el`*`)`

    Removes all of `el`'s children elements from `el`
- name: 'DomUtil functions: enableImageDrag'
  id: index#domutil-enableimagedrag
  summary: Cancels the effects of a previous L.DomUtil.disableImageDrag
  description: |-
    `enableImageDrag()`

    Cancels the effects of a previous [`L.DomUtil.disableImageDrag`](#domutil-disabletextselection).
- name: 'DomUtil functions: enableTextSelection'
  id: index#domutil-enabletextselection
  summary: Cancels the effects of a previous L.DomUtil.disableTextSelection
  description: |-
    `enableTextSelection()`

    Cancels the effects of a previous [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection).
- name: 'DomUtil functions: get'
  id: index#domutil-get
  summary: Returns an element given its DOM id, or returns the element itself if it was passed directly
  description: |-
    `get(<String|HTMLElement> `*`id`*`)`

    `HTMLElement`

    Returns an element given its DOM id, or returns the element itself if it was passed directly.
- name: 'DomUtil functions: getClass'
  id: index#domutil-getclass
  summary: Returns the element's class
  description: |-
    `getClass(<HTMLElement> `*`el`*`)`

    `String`

    Returns the element's class.
- name: 'DomUtil functions: getPosition'
  id: index#domutil-getposition
  summary: Returns the coordinates of an element previously positioned with setPosition
  description: |-
    `getPosition(<HTMLElement> `*`el`*`)`

    ` `[`Point`](#point)` `

    Returns the coordinates of an element previously positioned with setPosition.
- name: 'DomUtil functions: getScale'
  id: index#domutil-getscale
  summary: Computes the CSS scale currently applied on the element
  description: |-
    `getScale(<HTMLElement> `*`el`*`)`

    `Object`

    Computes the CSS scale currently applied on the element. Returns an object with `x` and `y` members as horizontal and vertical scales respectively, and `boundingClientRect` as the result of [`getBoundingClientRect()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

    ### Properties

    Property

    Type

    Description
- name: 'DomUtil functions: getSizedParentNode'
  id: index#domutil-getsizedparentnode
  summary: Finds the closest parent node which size (width and height) is not null
  description: |-
    `getSizedParentNode(<HTMLElement> `*`el`*`)`

    `HTMLElement`

    Finds the closest parent node which size (width and height) is not null.
- name: 'DomUtil functions: getStyle'
  id: index#domutil-getstyle
  summary: Returns the value for a certain style attribute on an element, including computed values or values set through CSS
  description: |-
    `getStyle(<HTMLElement> `*`el`*`, <String> `*`styleAttrib`*`)`

    `String`

    Returns the value for a certain style attribute on an element, including computed values or values set through CSS.
- name: 'DomUtil functions: hasClass'
  id: index#domutil-hasclass
  summary: Returns true if the element's class attribute contains name
  description: |-
    `hasClass(<HTMLElement> `*`el`*`, <String> `*`name`*`)`

    `Boolean`

    Returns `true` if the element's class attribute contains `name`.
- name: 'DomUtil functions: preventOutline'
  id: index#domutil-preventoutline
  summary: Makes the outline of the element el invisible
  description: |-
    `preventOutline(<HTMLElement> `*`el`*`)`

    Makes the [outline](https://developer.mozilla.org/docs/Web/CSS/outline) of the element `el` invisible. Used internally by Leaflet to prevent focusable elements from displaying an outline when the user performs a drag interaction on them.
- name: 'DomUtil functions: remove'
  id: index#domutil-remove
  summary: null
  description: |-
    `remove(<HTMLElement> `*`el`*`)`

    Removes `el` from its parent element
- name: 'DomUtil functions: removeClass'
  id: index#domutil-removeclass
  summary: Removes name from the element's class attribute
  description: |-
    `removeClass(<HTMLElement> `*`el`*`, <String> `*`name`*`)`

    Removes `name` from the element's class attribute.
- name: 'DomUtil functions: restoreOutline'
  id: index#domutil-restoreoutline
  summary: Cancels the effects of a previous L.DomUtil.preventOutline
  description: |-
    `restoreOutline()`

    Cancels the effects of a previous [`L.DomUtil.preventOutline`](https://leafletjs.com/reference.html).
- name: 'DomUtil functions: setClass'
  id: index#domutil-setclass
  summary: Sets the element's class
  description: |-
    `setClass(<HTMLElement> `*`el`*`, <String> `*`name`*`)`

    Sets the element's class.
- name: 'DomUtil functions: setOpacity'
  id: index#domutil-setopacity
  summary: Set the opacity of an element (including old IE support)
  description: |-
    `setOpacity(<HTMLElement> `*`el`*`, <Number> `*`opacity`*`)`

    Set the opacity of an element (including old IE support). `opacity` must be a number from `0` to `1`.
- name: 'DomUtil functions: setPosition'
  id: index#domutil-setposition
  summary: Sets the position of el to coordinates specified by position, using CSS translate or top/left positioning depending on the browser (used by Leaflet internally to position its layers)
  description: |-
    `setPosition(<HTMLElement> `*`el`*`, <`[`Point`](#point)`> `*`position`*`)`

    Sets the position of `el` to coordinates specified by `position`, using CSS translate or top/left positioning depending on the browser (used by Leaflet internally to position its layers).
- name: 'DomUtil functions: setTransform'
  id: index#domutil-settransform
  summary: Resets the 3D CSS transform of el so it is translated by offset pixels and optionally scaled by scale
  description: |-
    `setTransform(<HTMLElement> `*`el`*`, <`[`Point`](#point)`> `*`offset`*`, <Number> `*`scale?`*`)`

    Resets the 3D CSS transform of `el` so it is translated by `offset` pixels and optionally scaled by `scale`. Does not have an effect if the browser doesn't support 3D CSS transforms.
- name: 'DomUtil functions: testProp'
  id: index#domutil-testprop
  summary: Goes through the array of style names and returns the first name that is a valid style name for an element
  description: |-
    `testProp(<String[]> `*`props`*`)`

    `String|false`

    Goes through the array of style names and returns the first name that is a valid style name for an element. If no such name is found, it returns false. Useful for vendor-prefixed styles like `transform`.
- name: 'DomUtil functions: toBack'
  id: index#domutil-toback
  summary: Makes el the first child of its parent, so it renders behind the other children
  description: |-
    `toBack(<HTMLElement> `*`el`*`)`

    Makes `el` the first child of its parent, so it renders behind the other children.
- name: 'DomUtil functions: toFront'
  id: index#domutil-tofront
  summary: Makes el the last child of its parent, so it renders in front of the other children
  description: |-
    `toFront(<HTMLElement> `*`el`*`)`

    Makes `el` the last child of its parent, so it renders in front of the other children.
- name: 'DomUtil properties: TRANSFORM'
  id: index#domutil-transform
  summary: Vendor-prefixed transform style name (e.g
  description: |-
    `TRANSFORM`

    `String`

    Vendor-prefixed transform style name (e.g. `'webkitTransform'` for WebKit).
- name: 'DomUtil properties: TRANSITION'
  id: index#domutil-transition
  summary: Vendor-prefixed transition style name
  description: |-
    `TRANSITION`

    `String`

    Vendor-prefixed transition style name.
- name: 'DomUtil properties: TRANSITION_END'
  id: index#domutil-transition_end
  summary: Vendor-prefixed transitionend event name
  description: |-
    `TRANSITION_END`

    `String`

    Vendor-prefixed transitionend event name.
- name: Draggable
  id: index#draggable
  summary: A class for making DOM elements draggable (including touch support)
  description: |-
    ## Draggable

    A class for making DOM elements draggable (including touch support). Used internally for map and marker dragging. Only works for elements that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition).

    ### Usage example

    ``` javascript
    var draggable = new L.Draggable(elementToDrag);
    draggable.enable();
    ```

    ### Constructor

    Constructor

    Description
- name: 'Draggable constructor: L.Draggable'
  id: index#draggable-l-draggable
  summary: Creates a Draggable object for moving el when you start dragging the dragHandle element (equals el itself by default)
  description: |-
    `L.Draggable(<HTMLElement> `*`el`*`, <HTMLElement> `*`dragHandle?`*`, <Boolean> `*`preventOutline?`*`, <`[`Draggable options`](#draggable-option)`> `*`options?`*`)`

    Creates a [`Draggable`](#draggable) object for moving `el` when you start dragging the `dragHandle` element (equals `el` itself by default).

    ### Options

    Option

    Type

    Default

    Description
- name: 'Draggable events: down'
  id: index#draggable-down
  summary: Fired when a drag is about to start
  description: |-
    `down`

    ` `[`Event`](#event)` `

    Fired when a drag is about to start.
- name: 'Draggable events: drag'
  id: index#draggable-drag
  summary: Fired continuously during dragging
  description: |-
    `drag`

    ` `[`Event`](#event)` `

    Fired continuously during dragging.
- name: 'Draggable events: dragend'
  id: index#draggable-dragend
  summary: Fired when the drag ends
  description: |-
    `dragend`

    ` `[`DragEndEvent`](#dragendevent)` `

    Fired when the drag ends.

    ### Methods

    Method

    Returns

    Description
- name: 'Draggable events: dragstart'
  id: index#draggable-dragstart
  summary: null
  description: |-
    `dragstart`

    ` `[`Event`](#event)` `

    Fired when a drag starts
- name: 'Draggable events: predrag'
  id: index#draggable-predrag
  summary: Fired continuously during dragging before each corresponding update of the element's position
  description: |-
    `predrag`

    ` `[`Event`](#event)` `

    Fired continuously during dragging *before* each corresponding update of the element's position.
- name: 'Draggable methods: addEventListener'
  id: index#draggable-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Draggable methods: addEventParent'
  id: index#draggable-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Draggable methods: addOneTimeEventListener'
  id: index#draggable-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Draggable methods: clearAllEventListeners'
  id: index#draggable-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Draggable methods: disable'
  id: index#draggable-disable
  summary: null
  description: |-
    `disable()`

    Disables the dragging ability

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Draggable methods: enable'
  id: index#draggable-enable
  summary: null
  description: |-
    `enable()`

    Enables the dragging ability
- name: 'Draggable methods: fire'
  id: index#draggable-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Draggable methods: fireEvent'
  id: index#draggable-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Draggable methods: hasEventListeners'
  id: index#draggable-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Draggable methods: listens'
  id: index#draggable-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Draggable methods: off'
  id: index#draggable-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Draggable methods: on'
  id: index#draggable-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Draggable methods: once'
  id: index#draggable-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Draggable methods: removeEventListener'
  id: index#draggable-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Draggable methods: removeEventParent'
  id: index#draggable-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Draggable options: clickTolerance'
  id: index#draggable-clicktolerance
  summary: The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag)
  description: |-
    `clickTolerance`

    `Number`

    `3`

    The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag).

    ### Events

    Event

    Data

    Description
- name: Event objects
  id: index#event-objects
  summary: Whenever a class inheriting from Evented fires an event, a listener function will be called with an event argument, which is a plain object containing information about the event
  description: |-
    ## Event objects

    Whenever a class inheriting from [`Evented`](#evented) fires an event, a listener function will be called with an event argument, which is a plain object containing information about the event. For example:

    ``` javascript
    map.on('click', function(ev) {
        alert(ev.latlng); // ev is an event object (MouseEvent in this case)
    });
    ```

    The information available depends on the event type:

    ### Event

    The base event object. All other event objects contain these properties too.

    Property

    Type

    Description
- name: 'Event objects dragendevent: distance'
  id: index#dragendevent-distance
  summary: The distance in pixels the draggable element was moved by
  description: |-
    `distance`

    `Number`

    The distance in pixels the draggable element was moved by.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects dragendevent: layer'
  id: index#dragendevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### ZoomAnimEvent

    Property

    Type

    Description
- name: 'Event objects dragendevent: propagatedFrom'
  id: index#dragendevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects dragendevent: sourceTarget'
  id: index#dragendevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects dragendevent: target'
  id: index#dragendevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects dragendevent: type'
  id: index#dragendevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects errorevent: code'
  id: index#errorevent-code
  summary: Error code (if applicable)
  description: |-
    `code`

    `Number`

    Error code (if applicable).

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects errorevent: layer'
  id: index#errorevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### LayerEvent

    Property

    Type

    Description
- name: 'Event objects errorevent: message'
  id: index#errorevent-message
  summary: Error message
  description: |-
    `message`

    `String`

    Error message.
- name: 'Event objects errorevent: propagatedFrom'
  id: index#errorevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects errorevent: sourceTarget'
  id: index#errorevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects errorevent: target'
  id: index#errorevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects errorevent: type'
  id: index#errorevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects event: layer'
  id: index#event-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### KeyboardEvent

    Property

    Type

    Description
- name: 'Event objects event: propagatedFrom'
  id: index#event-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects event: sourceTarget'
  id: index#event-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects event: target'
  id: index#event-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects event: type'
  id: index#event-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects geojsonevent: geometryType'
  id: index#geojsonevent-geometrytype
  summary: GeoJSON geometry type of the feature
  description: |-
    `geometryType`

    `String`

    GeoJSON geometry type of the feature.
- name: 'Event objects geojsonevent: id'
  id: index#geojsonevent-id
  summary: GeoJSON ID of the feature (if present)
  description: |-
    `id`

    `String`

    GeoJSON ID of the feature (if present).

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects geojsonevent: layer'
  id: index#geojsonevent-layer
  summary: The layer for the GeoJSON feature that is being added to the map
  description: |-
    `layer`

    ` `[`Layer`](#layer)` `

    The layer for the GeoJSON feature that is being added to the map.
- name: 'Event objects geojsonevent: propagatedFrom'
  id: index#geojsonevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.

    ### PopupEvent

    Property

    Type

    Description
- name: 'Event objects geojsonevent: properties'
  id: index#geojsonevent-properties
  summary: GeoJSON properties of the feature
  description: |-
    `properties`

    `Object`

    GeoJSON properties of the feature.
- name: 'Event objects geojsonevent: sourceTarget'
  id: index#geojsonevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects geojsonevent: target'
  id: index#geojsonevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects geojsonevent: type'
  id: index#geojsonevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects keyboardevent: layer'
  id: index#keyboardevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### MouseEvent

    Property

    Type

    Description
- name: 'Event objects keyboardevent: originalEvent'
  id: index#keyboardevent-originalevent
  summary: The original DOM KeyboardEvent that triggered this Leaflet event
  description: |-
    `originalEvent`

    `DOMEvent`

    The original [DOM `KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) that triggered this Leaflet event.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects keyboardevent: propagatedFrom'
  id: index#keyboardevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects keyboardevent: sourceTarget'
  id: index#keyboardevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects keyboardevent: target'
  id: index#keyboardevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects keyboardevent: type'
  id: index#keyboardevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects layerevent: layer'
  id: index#layerevent-layer
  summary: The layer that was added or removed
  description: |-
    `layer`

    ` `[`Layer`](#layer)` `

    The layer that was added or removed.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects layerevent: propagatedFrom'
  id: index#layerevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.

    ### LayersControlEvent

    Property

    Type

    Description
- name: 'Event objects layerevent: sourceTarget'
  id: index#layerevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects layerevent: target'
  id: index#layerevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects layerevent: type'
  id: index#layerevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects layerscontrolevent: layer'
  id: index#layerscontrolevent-layer
  summary: The layer that was added or removed
  description: |-
    `layer`

    ` `[`Layer`](#layer)` `

    The layer that was added or removed.
- name: 'Event objects layerscontrolevent: name'
  id: index#layerscontrolevent-name
  summary: The name of the layer that was added or removed
  description: |-
    `name`

    `String`

    The name of the layer that was added or removed.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects layerscontrolevent: propagatedFrom'
  id: index#layerscontrolevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.

    ### TileEvent

    Property

    Type

    Description
- name: 'Event objects layerscontrolevent: sourceTarget'
  id: index#layerscontrolevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects layerscontrolevent: target'
  id: index#layerscontrolevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects layerscontrolevent: type'
  id: index#layerscontrolevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects locationevent: accuracy'
  id: index#locationevent-accuracy
  summary: Accuracy of location in meters
  description: |-
    `accuracy`

    `Number`

    Accuracy of location in meters.
- name: 'Event objects locationevent: altitude'
  id: index#locationevent-altitude
  summary: Height of the position above the WGS84 ellipsoid in meters
  description: |-
    `altitude`

    `Number`

    Height of the position above the WGS84 ellipsoid in meters.
- name: 'Event objects locationevent: altitudeAccuracy'
  id: index#locationevent-altitudeaccuracy
  summary: Accuracy of altitude in meters
  description: |-
    `altitudeAccuracy`

    `Number`

    Accuracy of altitude in meters.
- name: 'Event objects locationevent: bounds'
  id: index#locationevent-bounds
  summary: Geographical bounds of the area user is located in (with respect to the accuracy of location)
  description: |-
    `bounds`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Geographical bounds of the area user is located in (with respect to the accuracy of location).
- name: 'Event objects locationevent: heading'
  id: index#locationevent-heading
  summary: The direction of travel in degrees counting clockwise from true North
  description: |-
    `heading`

    `Number`

    The direction of travel in degrees counting clockwise from true North.
- name: 'Event objects locationevent: latlng'
  id: index#locationevent-latlng
  summary: Detected geographical location of the user
  description: |-
    `latlng`

    ` `[`LatLng`](#latlng)` `

    Detected geographical location of the user.
- name: 'Event objects locationevent: layer'
  id: index#locationevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### ErrorEvent

    Property

    Type

    Description
- name: 'Event objects locationevent: propagatedFrom'
  id: index#locationevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects locationevent: sourceTarget'
  id: index#locationevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects locationevent: speed'
  id: index#locationevent-speed
  summary: Current velocity in meters per second
  description: |-
    `speed`

    `Number`

    Current velocity in meters per second.
- name: 'Event objects locationevent: target'
  id: index#locationevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects locationevent: timestamp'
  id: index#locationevent-timestamp
  summary: The time when the position was acquired
  description: |-
    `timestamp`

    `Number`

    The time when the position was acquired.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects locationevent: type'
  id: index#locationevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects mouseevent: containerPoint'
  id: index#mouseevent-containerpoint
  summary: Pixel coordinates of the point where the mouse event occurred relative to the map сontainer
  description: |-
    `containerPoint`

    ` `[`Point`](#point)` `

    Pixel coordinates of the point where the mouse event occurred relative to the map сontainer.
- name: 'Event objects mouseevent: latlng'
  id: index#mouseevent-latlng
  summary: The geographical point where the mouse event occurred
  description: |-
    `latlng`

    ` `[`LatLng`](#latlng)` `

    The geographical point where the mouse event occurred.
- name: 'Event objects mouseevent: layer'
  id: index#mouseevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### LocationEvent

    Property

    Type

    Description
- name: 'Event objects mouseevent: layerPoint'
  id: index#mouseevent-layerpoint
  summary: Pixel coordinates of the point where the mouse event occurred relative to the map layer
  description: |-
    `layerPoint`

    ` `[`Point`](#point)` `

    Pixel coordinates of the point where the mouse event occurred relative to the map layer.
- name: 'Event objects mouseevent: originalEvent'
  id: index#mouseevent-originalevent
  summary: The original DOM MouseEvent or DOM TouchEvent that triggered this Leaflet event
  description: |-
    `originalEvent`

    `DOMEvent`

    The original [DOM `MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) or [DOM `TouchEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) that triggered this Leaflet event.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects mouseevent: propagatedFrom'
  id: index#mouseevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects mouseevent: sourceTarget'
  id: index#mouseevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects mouseevent: target'
  id: index#mouseevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects mouseevent: type'
  id: index#mouseevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects popupevent: layer'
  id: index#popupevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### TooltipEvent

    Property

    Type

    Description
- name: 'Event objects popupevent: popup'
  id: index#popupevent-popup
  summary: The popup that was opened or closed
  description: |-
    `popup`

    ` `[`Popup`](#popup)` `

    The popup that was opened or closed.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects popupevent: propagatedFrom'
  id: index#popupevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects popupevent: sourceTarget'
  id: index#popupevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects popupevent: target'
  id: index#popupevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects popupevent: type'
  id: index#popupevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects resizeevent: layer'
  id: index#resizeevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### GeoJSONEvent

    Property

    Type

    Description
- name: 'Event objects resizeevent: newSize'
  id: index#resizeevent-newsize
  summary: The new size after the resize event
  description: |-
    `newSize`

    ` `[`Point`](#point)` `

    The new size after the resize event.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects resizeevent: oldSize'
  id: index#resizeevent-oldsize
  summary: The old size before resize event
  description: |-
    `oldSize`

    ` `[`Point`](#point)` `

    The old size before resize event.
- name: 'Event objects resizeevent: propagatedFrom'
  id: index#resizeevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects resizeevent: sourceTarget'
  id: index#resizeevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects resizeevent: target'
  id: index#resizeevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects resizeevent: type'
  id: index#resizeevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects tileerrorevent: coords'
  id: index#tileerrorevent-coords
  summary: Point object with the tile's x, y, and z (zoom level) coordinates
  description: |-
    `coords`

    ` `[`Point`](#point)` `

    Point object with the tile's `x`, `y`, and `z` (zoom level) coordinates.
- name: 'Event objects tileerrorevent: error'
  id: index#tileerrorevent-error
  summary: Error passed to the tile's done() callback
  description: |-
    `error`

    `*`

    Error passed to the tile's `done()` callback.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects tileerrorevent: layer'
  id: index#tileerrorevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### ResizeEvent

    Property

    Type

    Description
- name: 'Event objects tileerrorevent: propagatedFrom'
  id: index#tileerrorevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects tileerrorevent: sourceTarget'
  id: index#tileerrorevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects tileerrorevent: target'
  id: index#tileerrorevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects tileerrorevent: tile'
  id: index#tileerrorevent-tile
  summary: The tile element (image)
  description: |-
    `tile`

    `HTMLElement`

    The tile element (image).
- name: 'Event objects tileerrorevent: type'
  id: index#tileerrorevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects tileevent: coords'
  id: index#tileevent-coords
  summary: Point object with the tile's x, y, and z (zoom level) coordinates
  description: |-
    `coords`

    ` `[`Point`](#point)` `

    Point object with the tile's `x`, `y`, and `z` (zoom level) coordinates.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects tileevent: layer'
  id: index#tileevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### TileErrorEvent

    Property

    Type

    Description
- name: 'Event objects tileevent: propagatedFrom'
  id: index#tileevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects tileevent: sourceTarget'
  id: index#tileevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects tileevent: target'
  id: index#tileevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects tileevent: tile'
  id: index#tileevent-tile
  summary: The tile element (image)
  description: |-
    `tile`

    `HTMLElement`

    The tile element (image).
- name: 'Event objects tileevent: type'
  id: index#tileevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects tooltipevent: layer'
  id: index#tooltipevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.

    ### DragEndEvent

    Property

    Type

    Description
- name: 'Event objects tooltipevent: propagatedFrom'
  id: index#tooltipevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects tooltipevent: sourceTarget'
  id: index#tooltipevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects tooltipevent: target'
  id: index#tooltipevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects tooltipevent: tooltip'
  id: index#tooltipevent-tooltip
  summary: The tooltip that was opened or closed
  description: |-
    `tooltip`

    ` `[`Tooltip`](#tooltip)` `

    The tooltip that was opened or closed.

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects tooltipevent: type'
  id: index#tooltipevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects zoomanimevent: center'
  id: index#zoomanimevent-center
  summary: null
  description: |-
    `center`

    ` `[`LatLng`](#latlng)` `

    The current center of the map
- name: 'Event objects zoomanimevent: layer'
  id: index#zoomanimevent-layer
  summary: Deprecated
  description: |-
    `layer`

    `Object`

    **Deprecated.** The same as `propagatedFrom`.
- name: 'Event objects zoomanimevent: noUpdate'
  id: index#zoomanimevent-noupdate
  summary: null
  description: |-
    `noUpdate`

    `Boolean`

    Whether layers should update their contents due to this event

    Properties inherited from [Event](#event)

    Property

    Type

    Description
- name: 'Event objects zoomanimevent: propagatedFrom'
  id: index#zoomanimevent-propagatedfrom
  summary: For propagated events, the last object that propagated the event to its event parent
  description: |-
    `propagatedFrom`

    `Object`

    For propagated events, the last object that propagated the event to its event parent.
- name: 'Event objects zoomanimevent: sourceTarget'
  id: index#zoomanimevent-sourcetarget
  summary: The object that originally fired the event
  description: |-
    `sourceTarget`

    `Object`

    The object that originally fired the event. For non-propagated events, this will be the same as the `target`.
- name: 'Event objects zoomanimevent: target'
  id: index#zoomanimevent-target
  summary: The object that fired the event
  description: |-
    `target`

    `Object`

    The object that fired the event. For propagated events, the last object in the propagation chain that fired the event.
- name: 'Event objects zoomanimevent: type'
  id: index#zoomanimevent-type
  summary: The event type (e.g
  description: |-
    `type`

    `String`

    The event type (e.g. `'click'`).
- name: 'Event objects zoomanimevent: zoom'
  id: index#zoomanimevent-zoom
  summary: null
  description: |-
    `zoom`

    `Number`

    The current zoom level of the map
- name: Evented
  id: index#evented
  summary: A set of methods shared between event-powered classes (like Map and Marker)
  description: |-
    ## Evented

    A set of methods shared between event-powered classes (like [`Map`](#map) and [`Marker`](#marker)). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire `'click'` event).

    ### Usage example

    ``` javascript
    map.on('click', function(e) {
        alert(e.latlng);
    } );
    ```

    Leaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:

    ``` javascript
    function onClick(e) { ... }

    map.on('click', onClick);
    map.off('click', onClick);
    ```

    ### Methods

    Method

    Returns

    Description
- name: 'Evented methods: addEventListener'
  id: index#evented-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Evented methods: addEventParent'
  id: index#evented-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Evented methods: addOneTimeEventListener'
  id: index#evented-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Evented methods: clearAllEventListeners'
  id: index#evented-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Evented methods: fire'
  id: index#evented-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Evented methods: fireEvent'
  id: index#evented-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Evented methods: hasEventListeners'
  id: index#evented-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Evented methods: listens'
  id: index#evented-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Evented methods: off'
  id: index#evented-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Evented methods: on'
  id: index#evented-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Evented methods: once'
  id: index#evented-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Evented methods: removeEventListener'
  id: index#evented-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Evented methods: removeEventParent'
  id: index#evented-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: FeatureGroup
  id: index#featuregroup
  summary: null
  description: |-
    ## FeatureGroup

    Extended [`LayerGroup`](#layergroup) that makes it easier to do the same thing to all its member layers:

    - [`bindPopup`](#layer-bindpopup) binds a popup to all of the layers at once (likewise with [`bindTooltip`](#layer-bindtooltip))
    - Events are propagated to the [`FeatureGroup`](#featuregroup), so if the group has an event handler, it will handle events from any of the layers. This includes mouse events and custom events.
    - Has `layeradd` and `layerremove` events

    ### Usage example

    ``` javascript
    L.featureGroup([marker1, marker2, polyline])
        .bindPopup('Hello world!')
        .on('click', function() { alert('Clicked on a member of the group!'); })
        .addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'FeatureGroup creation: L.featureGroup'
  id: index#featuregroup-l-featuregroup
  summary: Create a feature group, optionally given an initial set of layers and an options object
  description: |-
    `L.featureGroup(<Layer[]> `*`layers?`*`, <Object> `*`options?`*`)`

    Create a feature group, optionally given an initial set of layers and an `options` object.

    ### Options

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'FeatureGroup events: add'
  id: index#featuregroup-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'FeatureGroup events: click'
  id: index#featuregroup-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'FeatureGroup events: contextmenu'
  id: index#featuregroup-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'FeatureGroup events: dblclick'
  id: index#featuregroup-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'FeatureGroup events: layeradd'
  id: index#featuregroup-layeradd
  summary: null
  description: |-
    `layeradd`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when a layer is added to this [`FeatureGroup`](#featuregroup)
- name: 'FeatureGroup events: layerremove'
  id: index#featuregroup-layerremove
  summary: null
  description: |-
    `layerremove`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when a layer is removed from this [`FeatureGroup`](#featuregroup)

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'FeatureGroup events: mousedown'
  id: index#featuregroup-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'FeatureGroup events: mouseout'
  id: index#featuregroup-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'FeatureGroup events: mouseover'
  id: index#featuregroup-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'FeatureGroup events: mouseup'
  id: index#featuregroup-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'FeatureGroup events: popupclose'
  id: index#featuregroup-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'FeatureGroup events: popupopen'
  id: index#featuregroup-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'FeatureGroup events: tooltipclose'
  id: index#featuregroup-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'FeatureGroup events: tooltipopen'
  id: index#featuregroup-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'FeatureGroup methods: addEventListener'
  id: index#featuregroup-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'FeatureGroup methods: addEventParent'
  id: index#featuregroup-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'FeatureGroup methods: addLayer'
  id: index#featuregroup-addlayer
  summary: Adds the given layer to the group
  description: |-
    `addLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Adds the given layer to the group.
- name: 'FeatureGroup methods: addOneTimeEventListener'
  id: index#featuregroup-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'FeatureGroup methods: addTo'
  id: index#featuregroup-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'FeatureGroup methods: bindPopup'
  id: index#featuregroup-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'FeatureGroup methods: bindTooltip'
  id: index#featuregroup-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'FeatureGroup methods: bringToBack'
  id: index#featuregroup-bringtoback
  summary: null
  description: |-
    `bringToBack()`

    `this`

    Brings the layer group to the back of all other layers
- name: 'FeatureGroup methods: bringToFront'
  id: index#featuregroup-bringtofront
  summary: null
  description: |-
    `bringToFront()`

    `this`

    Brings the layer group to the top of all other layers
- name: 'FeatureGroup methods: clearAllEventListeners'
  id: index#featuregroup-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'FeatureGroup methods: clearLayers'
  id: index#featuregroup-clearlayers
  summary: Removes all the layers from the group
  description: |-
    `clearLayers()`

    `this`

    Removes all the layers from the group.
- name: 'FeatureGroup methods: closePopup'
  id: index#featuregroup-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'FeatureGroup methods: closeTooltip'
  id: index#featuregroup-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'FeatureGroup methods: eachLayer'
  id: index#featuregroup-eachlayer
  summary: Iterates over the layers of the group, optionally specifying context of the iterator function
  description: |-
    `eachLayer(<Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Iterates over the layers of the group, optionally specifying context of the iterator function.

    ``` javascript
    group.eachLayer(function (layer) {
        layer.bindPopup('Hello');
    });
    ```
- name: 'FeatureGroup methods: fire'
  id: index#featuregroup-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'FeatureGroup methods: fireEvent'
  id: index#featuregroup-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'FeatureGroup methods: getAttribution'
  id: index#featuregroup-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'FeatureGroup methods: getBounds'
  id: index#featuregroup-getbounds
  summary: Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children)
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).

    Methods inherited from [LayerGroup](#layergroup)

    Method

    Returns

    Description
- name: 'FeatureGroup methods: getLayer'
  id: index#featuregroup-getlayer
  summary: Returns the layer with the given internal ID
  description: |-
    `getLayer(<Number> `*`id`*`)`

    ` `[`Layer`](#layer)` `

    Returns the layer with the given internal ID.
- name: 'FeatureGroup methods: getLayerId'
  id: index#featuregroup-getlayerid
  summary: null
  description: |-
    `getLayerId(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Number`

    Returns the internal ID for a layer

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'FeatureGroup methods: getLayers'
  id: index#featuregroup-getlayers
  summary: Returns an array of all the layers added to the group
  description: |-
    `getLayers()`

    `Layer[]`

    Returns an array of all the layers added to the group.
- name: 'FeatureGroup methods: getPane'
  id: index#featuregroup-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'FeatureGroup methods: getPopup'
  id: index#featuregroup-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'FeatureGroup methods: getTooltip'
  id: index#featuregroup-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'FeatureGroup methods: hasEventListeners'
  id: index#featuregroup-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'FeatureGroup methods: hasLayer'
  id: index#featuregroup-haslayer
  summary: Returns true if the given layer is currently added to the group
  description: |-
    `hasLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Boolean`

    Returns `true` if the given layer is currently added to the group.

    `hasLayer(<Number> `*`id`*`)`

    `Boolean`

    Returns `true` if the given internal ID is currently added to the group.
- name: 'FeatureGroup methods: invoke'
  id: index#featuregroup-invoke
  summary: Calls methodName on every layer contained in this group, passing any additional parameters
  description: |-
    `invoke(<String> `*`methodName`*`, `*`…`*`)`

    `this`

    Calls `methodName` on every layer contained in this group, passing any additional parameters. Has no effect if the layers contained do not implement `methodName`.
- name: 'FeatureGroup methods: isPopupOpen'
  id: index#featuregroup-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'FeatureGroup methods: isTooltipOpen'
  id: index#featuregroup-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'FeatureGroup methods: listens'
  id: index#featuregroup-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'FeatureGroup methods: off'
  id: index#featuregroup-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'FeatureGroup methods: on'
  id: index#featuregroup-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'FeatureGroup methods: once'
  id: index#featuregroup-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'FeatureGroup methods: openPopup'
  id: index#featuregroup-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'FeatureGroup methods: openTooltip'
  id: index#featuregroup-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'FeatureGroup methods: removeEventListener'
  id: index#featuregroup-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'FeatureGroup methods: removeEventParent'
  id: index#featuregroup-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'FeatureGroup methods: removeFrom'
  id: index#featuregroup-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'FeatureGroup methods: removeLayer'
  id: index#featuregroup-removelayer
  summary: Removes the given layer from the group
  description: |-
    `removeLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Removes the given layer from the group.

    `removeLayer(<Number> `*`id`*`)`

    `this`

    Removes the layer with the given internal ID from the group.
- name: 'FeatureGroup methods: setPopupContent'
  id: index#featuregroup-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'FeatureGroup methods: setStyle'
  id: index#featuregroup-setstyle
  summary: Sets the given path options to each layer of the group that has a setStyle method
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Sets the given path options to each layer of the group that has a `setStyle` method.
- name: 'FeatureGroup methods: setTooltipContent'
  id: index#featuregroup-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'FeatureGroup methods: setZIndex'
  id: index#featuregroup-setzindex
  summary: Calls setZIndex on every layer contained in this group, passing the z-index
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Calls `setZIndex` on every layer contained in this group, passing the z-index.
- name: 'FeatureGroup methods: toGeoJSON'
  id: index#featuregroup-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).
- name: 'FeatureGroup methods: togglePopup'
  id: index#featuregroup-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'FeatureGroup methods: toggleTooltip'
  id: index#featuregroup-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'FeatureGroup methods: unbindPopup'
  id: index#featuregroup-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'FeatureGroup methods: unbindTooltip'
  id: index#featuregroup-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'FeatureGroup options: attribution'
  id: index#featuregroup-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'FeatureGroup options: bubblingMouseEvents'
  id: index#featuregroup-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'FeatureGroup options: interactive'
  id: index#featuregroup-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.
- name: 'FeatureGroup options: pane'
  id: index#featuregroup-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'FitBounds options: animate'
  id: index#fitbounds-options-animate
  summary: If not specified, zoom animation will happen if the zoom origin is inside the current view
  description: |-
    `animate`

    `Boolean`

    If not specified, zoom animation will happen if the zoom origin is inside the current view. If `true`, the map will attempt animating zoom disregarding where zoom origin is. Setting `false` will make it always reset the view completely without animation.

    Options inherited from [Pan options](#pan-options)

    Option

    Type

    Default

    Description
- name: 'FitBounds options: duration'
  id: index#fitbounds-options-duration
  summary: Duration of animated panning, in seconds
  description: |-
    `duration`

    `Number`

    `0.25`

    Duration of animated panning, in seconds.
- name: 'FitBounds options: easeLinearity'
  id: index#fitbounds-options-easelinearity
  summary: The curvature factor of panning animation easing (third parameter of the Cubic Bezier curve)
  description: |-
    `easeLinearity`

    `Number`

    `0.25`

    The curvature factor of panning animation easing (third parameter of the [Cubic Bezier curve](https://cubic-bezier.com/)). 1.0 means linear animation, and the smaller this number, the more bowed the curve.
- name: 'FitBounds options: maxZoom'
  id: index#fitbounds-options-maxzoom
  summary: The maximum possible zoom to use
  description: |-
    `maxZoom`

    `Number`

    `null`

    The maximum possible zoom to use.

    Options inherited from [Zoom options](#zoom-options)

    Option

    Type

    Default

    Description
- name: 'FitBounds options: noMoveStart'
  id: index#fitbounds-options-nomovestart
  summary: If true, panning won't fire movestart event on start (used internally for panning inertia)
  description: |-
    `noMoveStart`

    `Boolean`

    `false`

    If `true`, panning won't fire `movestart` event on start (used internally for panning inertia).

    Options inherited from [Padding options](#padding-options)

    Option

    Type

    Default

    Description
- name: 'FitBounds options: padding'
  id: index#fitbounds-options-padding
  summary: Equivalent of setting both top left and bottom right padding to the same value
  description: |-
    `padding`

    ` `[`Point`](#point)` `

    `[0, 0]`

    Equivalent of setting both top left and bottom right padding to the same value.
- name: 'FitBounds options: paddingBottomRight'
  id: index#fitbounds-options-paddingbottomright
  summary: The same for the bottom right corner of the map
  description: |-
    `paddingBottomRight`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The same for the bottom right corner of the map.
- name: 'FitBounds options: paddingTopLeft'
  id: index#fitbounds-options-paddingtopleft
  summary: Sets the amount of padding in the top left corner of a map container that shouldn't be accounted for when setting the view to fit bounds
  description: |-
    `paddingTopLeft`

    ` `[`Point`](#point)` `

    `[0, 0]`

    Sets the amount of padding in the top left corner of a map container that shouldn't be accounted for when setting the view to fit bounds. Useful if you have some control overlays on the map like a sidebar and you don't want them to obscure objects you're zooming to.
- name: GeoJSON
  id: index#geojson
  summary: Represents a GeoJSON object or an array of GeoJSON objects
  description: |-
    ## GeoJSON

    Represents a GeoJSON object or an array of GeoJSON objects. Allows you to parse GeoJSON data and display it on the map. Extends [`FeatureGroup`](#featuregroup).

    ### Usage example

    ``` javascript
    L.geoJSON(data, {
        style: function (feature) {
            return {color: feature.properties.color};
        }
    }).bindPopup(function (layer) {
        return layer.feature.properties.description;
    }).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'GeoJSON creation: L.geoJSON'
  id: index#geojson-l-geojson
  summary: Creates a GeoJSON layer
  description: |-
    `L.geoJSON(<Object> `*`geojson?`*`, <`[`GeoJSON options`](#geojson-option)`> `*`options?`*`)`

    Creates a GeoJSON layer. Optionally accepts an object in [GeoJSON format](https://tools.ietf.org/html/rfc7946) to display on the map (you can alternatively add it later with `addData` method) and an `options` object.

    ### Options

    Option

    Type

    Default

    Description
- name: 'GeoJSON events: add'
  id: index#geojson-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'GeoJSON events: click'
  id: index#geojson-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'GeoJSON events: contextmenu'
  id: index#geojson-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'GeoJSON events: dblclick'
  id: index#geojson-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'GeoJSON events: layeradd'
  id: index#geojson-layeradd
  summary: null
  description: |-
    `layeradd`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when a layer is added to this [`FeatureGroup`](#featuregroup)
- name: 'GeoJSON events: layerremove'
  id: index#geojson-layerremove
  summary: null
  description: |-
    `layerremove`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when a layer is removed from this [`FeatureGroup`](#featuregroup)

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'GeoJSON events: mousedown'
  id: index#geojson-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'GeoJSON events: mouseout'
  id: index#geojson-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'GeoJSON events: mouseover'
  id: index#geojson-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'GeoJSON events: mouseup'
  id: index#geojson-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'GeoJSON events: popupclose'
  id: index#geojson-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'GeoJSON events: popupopen'
  id: index#geojson-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'GeoJSON events: tooltipclose'
  id: index#geojson-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'GeoJSON events: tooltipopen'
  id: index#geojson-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'GeoJSON functions: asFeature'
  id: index#geojson-asfeature
  summary: Normalize GeoJSON geometries/features into GeoJSON features
  description: |-
    `asFeature(<Object> `*`geojson`*`)`

    `Object`

    Normalize GeoJSON geometries/features into GeoJSON features.
- name: 'GeoJSON functions: coordsToLatLngs'
  id: index#geojson-coordstolatlngs
  summary: Creates a multidimensional array of LatLngs from a GeoJSON coordinates array
  description: |-
    `coordsToLatLngs(<Array> `*`coords`*`, <Number> `*`levelsDeep?`*`, <Function> `*`coordsToLatLng?`*`)`

    `Array`

    Creates a multidimensional array of [`LatLng`](#latlng)s from a GeoJSON coordinates array. `levelsDeep` specifies the nesting level (0 is for an array of points, 1 for an array of arrays of points, etc., 0 by default). Can use a custom [`coordsToLatLng`](#geojson-coordstolatlng) function.
- name: 'GeoJSON functions: geometryToLayer'
  id: index#geojson-geometrytolayer
  summary: Creates a Layer from a given GeoJSON feature
  description: |-
    `geometryToLayer(<Object> `*`featureData`*`, <`[`GeoJSON options`](#geojson-option)`> `*`options?`*`)`

    ` `[`Layer`](#layer)` `

    Creates a [`Layer`](#layer) from a given GeoJSON feature. Can use a custom [`pointToLayer`](#geojson-pointtolayer) and/or [`coordsToLatLng`](#geojson-coordstolatlng) functions if provided as options.
- name: 'GeoJSON functions: latLngsToCoords'
  id: index#geojson-latlngstocoords
  summary: Reverse of coordsToLatLngs closed determines whether the first point should be appended to the end of the array to close the feature, only used when levelsDeep is 0
  description: |-
    `latLngsToCoords(<Array> `*`latlngs`*`, <Number> `*`levelsDeep?`*`, <Boolean> `*`closed?`*`, <Number|false> `*`precision?`*`)`

    `Array`

    Reverse of [`coordsToLatLngs`](#geojson-coordstolatlngs) `closed` determines whether the first point should be appended to the end of the array to close the feature, only used when `levelsDeep` is 0. False by default. Coordinates values are rounded with [`formatNum`](#util-formatnum) function.
- name: 'GeoJSON functions: latLngToCoords'
  id: index#geojson-latlngtocoords
  summary: Reverse of coordsToLatLng Coordinates values are rounded with formatNum function
  description: |-
    `latLngToCoords(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number|false> `*`precision?`*`)`

    `Array`

    Reverse of [`coordsToLatLng`](#geojson-coordstolatlng) Coordinates values are rounded with [`formatNum`](#util-formatnum) function.
- name: 'GeoJSON methods: addData'
  id: index#geojson-adddata
  summary: Adds a GeoJSON object to the layer
  description: |-
    `addData(`*`data`*`)`

    `this`

    Adds a GeoJSON object to the layer.
- name: 'GeoJSON methods: addEventListener'
  id: index#geojson-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'GeoJSON methods: addEventParent'
  id: index#geojson-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'GeoJSON methods: addLayer'
  id: index#geojson-addlayer
  summary: Adds the given layer to the group
  description: |-
    `addLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Adds the given layer to the group.
- name: 'GeoJSON methods: addOneTimeEventListener'
  id: index#geojson-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'GeoJSON methods: addTo'
  id: index#geojson-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'GeoJSON methods: bindPopup'
  id: index#geojson-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'GeoJSON methods: bindTooltip'
  id: index#geojson-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'GeoJSON methods: bringToBack'
  id: index#geojson-bringtoback
  summary: null
  description: |-
    `bringToBack()`

    `this`

    Brings the layer group to the back of all other layers
- name: 'GeoJSON methods: bringToFront'
  id: index#geojson-bringtofront
  summary: null
  description: |-
    `bringToFront()`

    `this`

    Brings the layer group to the top of all other layers
- name: 'GeoJSON methods: clearAllEventListeners'
  id: index#geojson-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'GeoJSON methods: clearLayers'
  id: index#geojson-clearlayers
  summary: Removes all the layers from the group
  description: |-
    `clearLayers()`

    `this`

    Removes all the layers from the group.
- name: 'GeoJSON methods: closePopup'
  id: index#geojson-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'GeoJSON methods: closeTooltip'
  id: index#geojson-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'GeoJSON methods: eachLayer'
  id: index#geojson-eachlayer
  summary: Iterates over the layers of the group, optionally specifying context of the iterator function
  description: |-
    `eachLayer(<Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Iterates over the layers of the group, optionally specifying context of the iterator function.

    ``` javascript
    group.eachLayer(function (layer) {
        layer.bindPopup('Hello');
    });
    ```
- name: 'GeoJSON methods: fire'
  id: index#geojson-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'GeoJSON methods: fireEvent'
  id: index#geojson-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'GeoJSON methods: getAttribution'
  id: index#geojson-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GeoJSON methods: getBounds'
  id: index#geojson-getbounds
  summary: Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children)
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).

    Methods inherited from [LayerGroup](#layergroup)

    Method

    Returns

    Description
- name: 'GeoJSON methods: getLayer'
  id: index#geojson-getlayer
  summary: Returns the layer with the given internal ID
  description: |-
    `getLayer(<Number> `*`id`*`)`

    ` `[`Layer`](#layer)` `

    Returns the layer with the given internal ID.
- name: 'GeoJSON methods: getLayerId'
  id: index#geojson-getlayerid
  summary: null
  description: |-
    `getLayerId(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Number`

    Returns the internal ID for a layer

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GeoJSON methods: getLayers'
  id: index#geojson-getlayers
  summary: Returns an array of all the layers added to the group
  description: |-
    `getLayers()`

    `Layer[]`

    Returns an array of all the layers added to the group.
- name: 'GeoJSON methods: getPane'
  id: index#geojson-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'GeoJSON methods: getPopup'
  id: index#geojson-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GeoJSON methods: getTooltip'
  id: index#geojson-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'GeoJSON methods: hasEventListeners'
  id: index#geojson-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)

    ### Functions

    There are several static functions which can be called without instantiating L.GeoJSON:

    Function

    Returns

    Description
- name: 'GeoJSON methods: hasLayer'
  id: index#geojson-haslayer
  summary: Returns true if the given layer is currently added to the group
  description: |-
    `hasLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Boolean`

    Returns `true` if the given layer is currently added to the group.

    `hasLayer(<Number> `*`id`*`)`

    `Boolean`

    Returns `true` if the given internal ID is currently added to the group.
- name: 'GeoJSON methods: invoke'
  id: index#geojson-invoke
  summary: Calls methodName on every layer contained in this group, passing any additional parameters
  description: |-
    `invoke(<String> `*`methodName`*`, `*`…`*`)`

    `this`

    Calls `methodName` on every layer contained in this group, passing any additional parameters. Has no effect if the layers contained do not implement `methodName`.
- name: 'GeoJSON methods: isPopupOpen'
  id: index#geojson-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'GeoJSON methods: isTooltipOpen'
  id: index#geojson-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'GeoJSON methods: listens'
  id: index#geojson-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'GeoJSON methods: off'
  id: index#geojson-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'GeoJSON methods: on'
  id: index#geojson-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'GeoJSON methods: once'
  id: index#geojson-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'GeoJSON methods: openPopup'
  id: index#geojson-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'GeoJSON methods: openTooltip'
  id: index#geojson-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'GeoJSON methods: removeEventListener'
  id: index#geojson-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'GeoJSON methods: removeEventParent'
  id: index#geojson-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'GeoJSON methods: removeFrom'
  id: index#geojson-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'GeoJSON methods: removeLayer'
  id: index#geojson-removelayer
  summary: Removes the given layer from the group
  description: |-
    `removeLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Removes the given layer from the group.

    `removeLayer(<Number> `*`id`*`)`

    `this`

    Removes the layer with the given internal ID from the group.
- name: 'GeoJSON methods: resetStyle'
  id: index#geojson-resetstyle
  summary: Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events
  description: |-
    `resetStyle(`*`layer?`*`)`

    `this`

    Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events. If `layer` is omitted, the style of all features in the current layer is reset.
- name: 'GeoJSON methods: setPopupContent'
  id: index#geojson-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'GeoJSON methods: setStyle'
  id: index#geojson-setstyle
  summary: Changes styles of GeoJSON vector layers with the given style function
  description: |-
    `setStyle(`*`style`*`)`

    `this`

    Changes styles of GeoJSON vector layers with the given style function.

    Methods inherited from [FeatureGroup](#featuregroup)

    Method

    Returns

    Description
- name: 'GeoJSON methods: setTooltipContent'
  id: index#geojson-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'GeoJSON methods: setZIndex'
  id: index#geojson-setzindex
  summary: Calls setZIndex on every layer contained in this group, passing the z-index
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Calls `setZIndex` on every layer contained in this group, passing the z-index.
- name: 'GeoJSON methods: toGeoJSON'
  id: index#geojson-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).
- name: 'GeoJSON methods: togglePopup'
  id: index#geojson-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'GeoJSON methods: toggleTooltip'
  id: index#geojson-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'GeoJSON methods: unbindPopup'
  id: index#geojson-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'GeoJSON methods: unbindTooltip'
  id: index#geojson-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'GeoJSON options: attribution'
  id: index#geojson-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Events inherited from [FeatureGroup](#featuregroup)

    Event

    Data

    Description
- name: 'GeoJSON options: bubblingMouseEvents'
  id: index#geojson-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'GeoJSON options: filter'
  id: index#geojson-filter
  summary: A Function that will be used to decide whether to include a feature or not
  description: |-
    `filter`

    `Function`

    `*`

    A `Function` that will be used to decide whether to include a feature or not. The default is to include all features:

    ``` javascript
    function (geoJsonFeature) {
        return true;
    }
    ```

    Note: dynamically changing the `filter` option will have effect only on newly added data. It will *not* re-evaluate already included features.
- name: 'GeoJSON options: interactive'
  id: index#geojson-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.
- name: 'GeoJSON options: markersInheritOptions'
  id: index#geojson-markersinheritoptions
  summary: Whether default Markers for "Point" type Features inherit from group options
  description: |-
    `markersInheritOptions`

    `Boolean`

    `false`

    Whether default Markers for "Point" type Features inherit from group options.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'GeoJSON options: onEachFeature'
  id: index#geojson-oneachfeature
  summary: A Function that will be called once for each created Feature, after it has been created and styled
  description: |-
    `onEachFeature`

    `Function`

    `*`

    A `Function` that will be called once for each created `Feature`, after it has been created and styled. Useful for attaching events and popups to features. The default is to do nothing with the newly created layers:

    ``` javascript
    function (feature, layer) {}
    ```
- name: 'GeoJSON options: pane'
  id: index#geojson-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'GeoJSON options: pointToLayer'
  id: index#geojson-pointtolayer
  summary: A Function defining how GeoJSON points spawn Leaflet layers
  description: |-
    `pointToLayer`

    `Function`

    `*`

    A `Function` defining how GeoJSON points spawn Leaflet layers. It is internally called when data is added, passing the GeoJSON point feature and its [`LatLng`](#latlng). The default is to spawn a default [`Marker`](#marker):

    ``` javascript
    function(geoJsonPoint, latlng) {
        return L.marker(latlng);
    }
    ```
- name: 'GeoJSON options: style'
  id: index#geojson-style
  summary: A Function defining the Path options for styling GeoJSON lines and polygons, called internally when data is added
  description: |-
    `style`

    `Function`

    `*`

    A `Function` defining the [`Path options`](#path-option) for styling GeoJSON lines and polygons, called internally when data is added. The default value is to not override any defaults:

    ``` javascript
    function (geoJsonFeature) {
        return {}
    }
    ```
- name: Global Switches
  id: index#global-switches
  summary: Global switches are created for rare cases and generally make Leaflet to not detect a particular browser feature even if it's there
  description: |-
    ## Global Switches

    Global switches are created for rare cases and generally make Leaflet to not detect a particular browser feature even if it's there. You need to set the switch as a global variable to true before including Leaflet on the page, like this:

    ``` html
    <script>L_NO_TOUCH = true;</script>
    <script src="leaflet.js"></script>
    ```

    | Switch         | Description                                                                                                                                                      |
    |----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `L_NO_TOUCH`   | Forces Leaflet to not use touch events even if it detects them.                                                                                                  |
    | `L_DISABLE_3D` | Forces Leaflet to not use hardware-accelerated CSS 3D transforms for positioning (which may cause glitches in some rare environments) even if they're supported. |
- name: GridLayer
  id: index#gridlayer
  summary: Generic class for handling a tiled grid of HTML elements
  description: |-
    ## GridLayer

    Generic class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces `TileLayer.Canvas`. GridLayer can be extended to create a tiled grid of HTML elements like `<canvas>`, `<img>` or `<div>`. GridLayer will handle creating and animating these DOM elements for you.

    ### Usage example

    #### Synchronous usage

    To create a custom layer, extend GridLayer and implement the `createTile()` method, which will be passed a [`Point`](#point) object with the `x`, `y`, and `z` (zoom level) coordinates to draw your tile.

    ``` javascript
    var CanvasLayer = L.GridLayer.extend({
        createTile: function(coords){
            // create a <canvas> element for drawing
            var tile = L.DomUtil.create('canvas', 'leaflet-tile');

            // setup tile width and height according to the options
            var size = this.getTileSize();
            tile.width = size.x;
            tile.height = size.y;

            // get a canvas context and draw something on it using coords.x, coords.y and coords.z
            var ctx = tile.getContext('2d');

            // return the tile so it can be rendered on screen
            return tile;
        }
    });
    ```

    #### Asynchronous usage

    Tile creation can also be asynchronous, this is useful when using a third-party drawing library. Once the tile is finished drawing it can be passed to the `done()` callback.

    ``` javascript
    var CanvasLayer = L.GridLayer.extend({
        createTile: function(coords, done){
            var error;

            // create a <canvas> element for drawing
            var tile = L.DomUtil.create('canvas', 'leaflet-tile');

            // setup tile width and height according to the options
            var size = this.getTileSize();
            tile.width = size.x;
            tile.height = size.y;

            // draw something asynchronously and pass the tile to the done() callback
            setTimeout(function() {
                done(error, tile);
            }, 1000);

            return tile;
        }
    });
    ```

    ### Creation

    Factory

    Description
- name: 'GridLayer creation: L.gridLayer'
  id: index#gridlayer-l-gridlayer
  summary: Creates a new instance of GridLayer with the supplied options
  description: |-
    `L.gridLayer(<`[`GridLayer options`](#gridlayer-option)`> `*`options?`*`)`

    Creates a new instance of GridLayer with the supplied options.

    ### Options

    Option

    Type

    Default

    Description
- name: 'GridLayer events: add'
  id: index#gridlayer-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'GridLayer events: load'
  id: index#gridlayer-load
  summary: Fired when the grid layer loaded all visible tiles
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the grid layer loaded all visible tiles.

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'GridLayer events: loading'
  id: index#gridlayer-loading
  summary: Fired when the grid layer starts loading tiles
  description: |-
    `loading`

    ` `[`Event`](#event)` `

    Fired when the grid layer starts loading tiles.
- name: 'GridLayer events: popupclose'
  id: index#gridlayer-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'GridLayer events: popupopen'
  id: index#gridlayer-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'GridLayer events: tileerror'
  id: index#gridlayer-tileerror
  summary: Fired when there is an error loading a tile
  description: |-
    `tileerror`

    ` `[`TileErrorEvent`](#tileerrorevent)` `

    Fired when there is an error loading a tile.
- name: 'GridLayer events: tileload'
  id: index#gridlayer-tileload
  summary: Fired when a tile loads
  description: |-
    `tileload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile loads.
- name: 'GridLayer events: tileloadstart'
  id: index#gridlayer-tileloadstart
  summary: Fired when a tile is requested and starts loading
  description: |-
    `tileloadstart`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is requested and starts loading.
- name: 'GridLayer events: tileunload'
  id: index#gridlayer-tileunload
  summary: Fired when a tile is removed (e.g
  description: |-
    `tileunload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is removed (e.g. when a tile goes off the screen).
- name: 'GridLayer events: tooltipclose'
  id: index#gridlayer-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'GridLayer events: tooltipopen'
  id: index#gridlayer-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'GridLayer methods: addEventListener'
  id: index#gridlayer-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'GridLayer methods: addEventParent'
  id: index#gridlayer-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'GridLayer methods: addOneTimeEventListener'
  id: index#gridlayer-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'GridLayer methods: addTo'
  id: index#gridlayer-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'GridLayer methods: bindPopup'
  id: index#gridlayer-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'GridLayer methods: bindTooltip'
  id: index#gridlayer-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'GridLayer methods: bringToBack'
  id: index#gridlayer-bringtoback
  summary: Brings the tile layer to the bottom of all tile layers
  description: |-
    `bringToBack()`

    `this`

    Brings the tile layer to the bottom of all tile layers.
- name: 'GridLayer methods: bringToFront'
  id: index#gridlayer-bringtofront
  summary: Brings the tile layer to the top of all tile layers
  description: |-
    `bringToFront()`

    `this`

    Brings the tile layer to the top of all tile layers.
- name: 'GridLayer methods: clearAllEventListeners'
  id: index#gridlayer-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'GridLayer methods: closePopup'
  id: index#gridlayer-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'GridLayer methods: closeTooltip'
  id: index#gridlayer-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'GridLayer methods: createTile'
  id: index#gridlayer-createtile
  summary: Called only internally, must be overridden by classes extending GridLayer
  description: |-
    `createTile(<Object> `*`coords`*`, <Function> `*`done?`*`)`

    `HTMLElement`

    Called only internally, must be overridden by classes extending [`GridLayer`](#gridlayer). Returns the `HTMLElement` corresponding to the given `coords`. If the `done` callback is specified, it must be called when the tile has finished loading and drawing.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GridLayer methods: fire'
  id: index#gridlayer-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'GridLayer methods: fireEvent'
  id: index#gridlayer-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'GridLayer methods: getAttribution'
  id: index#gridlayer-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GridLayer methods: getContainer'
  id: index#gridlayer-getcontainer
  summary: Returns the HTML element that contains the tiles for this layer
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTML element that contains the tiles for this layer.
- name: 'GridLayer methods: getPane'
  id: index#gridlayer-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'GridLayer methods: getPopup'
  id: index#gridlayer-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'GridLayer methods: getTileSize'
  id: index#gridlayer-gettilesize
  summary: Normalizes the tileSize option into a point
  description: |-
    `getTileSize()`

    ` `[`Point`](#point)` `

    Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

    #### Extension methods

    Layers extending [`GridLayer`](#gridlayer) shall reimplement the following method.

    Method

    Returns

    Description
- name: 'GridLayer methods: getTooltip'
  id: index#gridlayer-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'GridLayer methods: hasEventListeners'
  id: index#gridlayer-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'GridLayer methods: isLoading'
  id: index#gridlayer-isloading
  summary: Returns true if any tile in the grid layer has not finished loading
  description: |-
    `isLoading()`

    `Boolean`

    Returns `true` if any tile in the grid layer has not finished loading.
- name: 'GridLayer methods: isPopupOpen'
  id: index#gridlayer-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'GridLayer methods: isTooltipOpen'
  id: index#gridlayer-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'GridLayer methods: listens'
  id: index#gridlayer-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'GridLayer methods: off'
  id: index#gridlayer-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'GridLayer methods: on'
  id: index#gridlayer-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'GridLayer methods: once'
  id: index#gridlayer-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'GridLayer methods: openPopup'
  id: index#gridlayer-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'GridLayer methods: openTooltip'
  id: index#gridlayer-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'GridLayer methods: redraw'
  id: index#gridlayer-redraw
  summary: Causes the layer to clear all the tiles and request them again
  description: |-
    `redraw()`

    `this`

    Causes the layer to clear all the tiles and request them again.
- name: 'GridLayer methods: removeEventListener'
  id: index#gridlayer-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'GridLayer methods: removeEventParent'
  id: index#gridlayer-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'GridLayer methods: removeFrom'
  id: index#gridlayer-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'GridLayer methods: setOpacity'
  id: index#gridlayer-setopacity
  summary: Changes the opacity of the grid layer
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Changes the [opacity](#gridlayer-opacity) of the grid layer.
- name: 'GridLayer methods: setPopupContent'
  id: index#gridlayer-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'GridLayer methods: setTooltipContent'
  id: index#gridlayer-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'GridLayer methods: setZIndex'
  id: index#gridlayer-setzindex
  summary: Changes the zIndex of the grid layer
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Changes the [zIndex](#gridlayer-zindex) of the grid layer.
- name: 'GridLayer methods: togglePopup'
  id: index#gridlayer-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'GridLayer methods: toggleTooltip'
  id: index#gridlayer-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'GridLayer methods: unbindPopup'
  id: index#gridlayer-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'GridLayer methods: unbindTooltip'
  id: index#gridlayer-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'GridLayer options: attribution'
  id: index#gridlayer-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'GridLayer options: bounds'
  id: index#gridlayer-bounds
  summary: If set, tiles will only be loaded inside the set LatLngBounds
  description: |-
    `bounds`

    ` `[`LatLngBounds`](#latlngbounds)` `

    `undefined`

    If set, tiles will only be loaded inside the set [`LatLngBounds`](#latlngbounds).
- name: 'GridLayer options: className'
  id: index#gridlayer-classname
  summary: A custom class name to assign to the tile layer
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the tile layer. Empty by default.
- name: 'GridLayer options: keepBuffer'
  id: index#gridlayer-keepbuffer
  summary: When panning the map, keep this many rows and columns of tiles before unloading them
  description: |-
    `keepBuffer`

    `Number`

    `2`

    When panning the map, keep this many rows and columns of tiles before unloading them.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'GridLayer options: maxNativeZoom'
  id: index#gridlayer-maxnativezoom
  summary: Maximum zoom number the tile source has available
  description: |-
    `maxNativeZoom`

    `Number`

    `undefined`

    Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than `maxNativeZoom` will be loaded from `maxNativeZoom` level and auto-scaled.
- name: 'GridLayer options: maxZoom'
  id: index#gridlayer-maxzoom
  summary: The maximum zoom level up to which this layer will be displayed (inclusive)
  description: |-
    `maxZoom`

    `Number`

    `undefined`

    The maximum zoom level up to which this layer will be displayed (inclusive).
- name: 'GridLayer options: minNativeZoom'
  id: index#gridlayer-minnativezoom
  summary: Minimum zoom number the tile source has available
  description: |-
    `minNativeZoom`

    `Number`

    `undefined`

    Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than `minNativeZoom` will be loaded from `minNativeZoom` level and auto-scaled.
- name: 'GridLayer options: minZoom'
  id: index#gridlayer-minzoom
  summary: The minimum zoom level down to which this layer will be displayed (inclusive)
  description: |-
    `minZoom`

    `Number`

    `0`

    The minimum zoom level down to which this layer will be displayed (inclusive).
- name: 'GridLayer options: noWrap'
  id: index#gridlayer-nowrap
  summary: Whether the layer is wrapped around the antimeridian
  description: |-
    `noWrap`

    `Boolean`

    `false`

    Whether the layer is wrapped around the antimeridian. If `true`, the GridLayer will only be displayed once at low zoom levels. Has no effect when the [map CRS](#map-crs) doesn't wrap around. Can be used in combination with [`bounds`](#gridlayer-bounds) to prevent requesting tiles outside the CRS limits.
- name: 'GridLayer options: opacity'
  id: index#gridlayer-opacity
  summary: Opacity of the tiles
  description: |-
    `opacity`

    `Number`

    `1.0`

    Opacity of the tiles. Can be used in the `createTile()` function.
- name: 'GridLayer options: pane'
  id: index#gridlayer-pane
  summary: Map pane where the grid layer will be added
  description: |-
    `pane`

    `String`

    `'tilePane'`

    `Map pane` where the grid layer will be added.
- name: 'GridLayer options: tileSize'
  id: index#gridlayer-tilesize
  summary: Width and height of tiles in the grid
  description: |-
    `tileSize`

    `Number|Point`

    `256`

    Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.
- name: 'GridLayer options: updateInterval'
  id: index#gridlayer-updateinterval
  summary: Tiles will not update more than once every updateInterval milliseconds when panning
  description: |-
    `updateInterval`

    `Number`

    `200`

    Tiles will not update more than once every `updateInterval` milliseconds when panning.
- name: 'GridLayer options: updateWhenIdle'
  id: index#gridlayer-updatewhenidle
  summary: Load new tiles only when panning ends
  description: |-
    `updateWhenIdle`

    `Boolean`

    `(depends)`

    Load new tiles only when panning ends. `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation. `false` otherwise in order to display new tiles *during* panning, since it is easy to pan outside the [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.
- name: 'GridLayer options: updateWhenZooming'
  id: index#gridlayer-updatewhenzooming
  summary: By default, a smooth zoom animation (during a touch zoom or a flyTo()) will update grid layers every integer zoom level
  description: |-
    `updateWhenZooming`

    `Boolean`

    `true`

    By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.
- name: 'GridLayer options: zIndex'
  id: index#gridlayer-zindex
  summary: The explicit zIndex of the tile layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit zIndex of the tile layer.
- name: Handler
  id: index#handler
  summary: null
  description: |-
    ## Handler

    Abstract class for map interaction handlers

    ### Methods

    Method

    Returns

    Description
- name: 'Handler functions: addTo'
  id: index#handler-addto
  summary: Adds a new Handler to the given map with the given name
  description: |-
    `addTo(<`[`Map`](#map)`> `*`map`*`, <String> `*`name`*`)`

    `this`

    Adds a new Handler to the given map with the given name.
- name: 'Handler methods: addHooks'
  id: index#handler-addhooks
  summary: Called when the handler is enabled, should add event hooks
  description: |-
    `addHooks()`

    Called when the handler is enabled, should add event hooks.
- name: 'Handler methods: disable'
  id: index#handler-disable
  summary: null
  description: |-
    `disable()`

    `this`

    Disables the handler
- name: 'Handler methods: enable'
  id: index#handler-enable
  summary: null
  description: |-
    `enable()`

    `this`

    Enables the handler
- name: 'Handler methods: enabled'
  id: index#handler-enabled
  summary: null
  description: |-
    `enabled()`

    `Boolean`

    Returns `true` if the handler is enabled

    #### Extension methods

    Classes inheriting from [`Handler`](#handler) must implement the two following methods:

    Method

    Returns

    Description
- name: 'Handler methods: removeHooks'
  id: index#handler-removehooks
  summary: Called when the handler is disabled, should remove the event hooks added previously
  description: |-
    `removeHooks()`

    Called when the handler is disabled, should remove the event hooks added previously.

    ### Functions

    #### There is static function which can be called without instantiating L.Handler:

    Function

    Returns

    Description
- name: Icon
  id: index#icon
  summary: Represents an icon to provide when creating a marker
  description: |-
    ## Icon

    Represents an icon to provide when creating a marker.

    ### Usage example

    ``` javascript
    var myIcon = L.icon({
        iconUrl: 'my-icon.png',
        iconSize: [38, 95],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
        shadowUrl: 'my-icon-shadow.png',
        shadowSize: [68, 95],
        shadowAnchor: [22, 94]
    });

    L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);
    ```

    [`L.Icon.Default`](#icon-default) extends [`L.Icon`](#icon) and is the blue icon Leaflet uses for markers by default.

    ### Creation

    Factory

    Description
- name: 'Icon creation: L.icon'
  id: index#icon-l-icon
  summary: Creates an icon instance with the given options
  description: |-
    `L.icon(<`[`Icon options`](#icon-option)`> `*`options`*`)`

    Creates an icon instance with the given options.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Icon icon.default: imagePath'
  id: index#icon-default-imagepath
  summary: Icon.Default will try to auto-detect the location of the blue icon images
  description: |-
    `imagePath`

    `String`

    [`Icon.Default`](#icon-default) will try to auto-detect the location of the blue icon images. If you are placing these images in a non-standard way, set this option to point to the right path.
- name: 'Icon methods: createIcon'
  id: index#icon-createicon
  summary: Called internally when the icon has to be shown, returns a <img> HTML element styled according to the options
  description: |-
    `createIcon(<HTMLElement> `*`oldIcon?`*`)`

    `HTMLElement`

    Called internally when the icon has to be shown, returns a `<img>` HTML element styled according to the options.
- name: 'Icon methods: createShadow'
  id: index#icon-createshadow
  summary: As createIcon, but for the shadow beneath it
  description: |-
    `createShadow(<HTMLElement> `*`oldIcon?`*`)`

    `HTMLElement`

    As `createIcon`, but for the shadow beneath it.

    ### Icon.Default

    A trivial subclass of [`Icon`](#icon), represents the icon to use in [`Marker`](#marker)s when no icon is specified. Points to the blue marker image distributed with Leaflet releases.

    In order to customize the default icon, just change the properties of `L.Icon.Default.prototype.options` (which is a set of [`Icon options`](#icon-option)).

    If you want to *completely* replace the default icon, override the `L.Marker.prototype.options.icon` with your own icon instead.

    Option

    Type

    Default

    Description
- name: 'Icon options: className'
  id: index#icon-classname
  summary: A custom class name to assign to both icon and shadow images
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to both icon and shadow images. Empty by default.
- name: 'Icon options: crossOrigin'
  id: index#icon-crossorigin
  summary: Whether the crossOrigin attribute will be added to the tiles
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.

    ### Methods

    Method

    Returns

    Description
- name: 'Icon options: iconAnchor'
  id: index#icon-iconanchor
  summary: The coordinates of the "tip" of the icon (relative to its top left corner)
  description: |-
    `iconAnchor`

    ` `[`Point`](#point)` `

    `null`

    The coordinates of the "tip" of the icon (relative to its top left corner). The icon will be aligned so that this point is at the marker's geographical location. Centered by default if size is specified, also can be set in CSS with negative margins.
- name: 'Icon options: iconRetinaUrl'
  id: index#icon-iconretinaurl
  summary: The URL to a retina sized version of the icon image (absolute or relative to your script path)
  description: |-
    `iconRetinaUrl`

    `String`

    `null`

    The URL to a retina sized version of the icon image (absolute or relative to your script path). Used for Retina screen devices.
- name: 'Icon options: iconSize'
  id: index#icon-iconsize
  summary: Size of the icon image in pixels
  description: |-
    `iconSize`

    ` `[`Point`](#point)` `

    `null`

    Size of the icon image in pixels.
- name: 'Icon options: iconUrl'
  id: index#icon-iconurl
  summary: (required) The URL to the icon image (absolute or relative to your script path)
  description: |-
    `iconUrl`

    `String`

    `null`

    **(required)** The URL to the icon image (absolute or relative to your script path).
- name: 'Icon options: popupAnchor'
  id: index#icon-popupanchor
  summary: The coordinates of the point from which popups will "open", relative to the icon anchor
  description: |-
    `popupAnchor`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The coordinates of the point from which popups will "open", relative to the icon anchor.
- name: 'Icon options: shadowAnchor'
  id: index#icon-shadowanchor
  summary: The coordinates of the "tip" of the shadow (relative to its top left corner) (the same as iconAnchor if not specified)
  description: |-
    `shadowAnchor`

    ` `[`Point`](#point)` `

    `null`

    The coordinates of the "tip" of the shadow (relative to its top left corner) (the same as iconAnchor if not specified).
- name: 'Icon options: shadowRetinaUrl'
  id: index#icon-shadowretinaurl
  summary: null
  description: |-
    `shadowRetinaUrl`

    `String`

    `null`
- name: 'Icon options: shadowSize'
  id: index#icon-shadowsize
  summary: Size of the shadow image in pixels
  description: |-
    `shadowSize`

    ` `[`Point`](#point)` `

    `null`

    Size of the shadow image in pixels.
- name: 'Icon options: shadowUrl'
  id: index#icon-shadowurl
  summary: The URL to the icon shadow image
  description: |-
    `shadowUrl`

    `String`

    `null`

    The URL to the icon shadow image. If not specified, no shadow image will be created.
- name: 'Icon options: tooltipAnchor'
  id: index#icon-tooltipanchor
  summary: The coordinates of the point from which tooltips will "open", relative to the icon anchor
  description: |-
    `tooltipAnchor`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The coordinates of the point from which tooltips will "open", relative to the icon anchor.
- name: ImageOverlay
  id: index#imageoverlay
  summary: Used to load and display a single image over specific bounds of the map
  description: |-
    ## ImageOverlay

    Used to load and display a single image over specific bounds of the map. Extends [`Layer`](#layer).

    ### Usage example

    ``` javascript
    var imageUrl = 'https://maps.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',
        imageBounds = [[40.712216, -74.22655], [40.773941, -74.12544]];
    L.imageOverlay(imageUrl, imageBounds).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'ImageOverlay creation: L.imageOverlay'
  id: index#imageoverlay-l-imageoverlay
  summary: Instantiates an image overlay object given the URL of the image and the geographical bounds it is tied to
  description: |-
    `L.imageOverlay(<String> `*`imageUrl`*`, <`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <`[`ImageOverlay options`](#imageoverlay-option)`> `*`options?`*`)`

    Instantiates an image overlay object given the URL of the image and the geographical bounds it is tied to.

    ### Options

    Option

    Type

    Default

    Description
- name: 'ImageOverlay events: add'
  id: index#imageoverlay-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'ImageOverlay events: click'
  id: index#imageoverlay-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'ImageOverlay events: contextmenu'
  id: index#imageoverlay-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'ImageOverlay events: dblclick'
  id: index#imageoverlay-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'ImageOverlay events: error'
  id: index#imageoverlay-error
  summary: null
  description: |-
    `error`

    ` `[`Event`](#event)` `

    Fired when the ImageOverlay layer fails to load its image

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'ImageOverlay events: load'
  id: index#imageoverlay-load
  summary: null
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the ImageOverlay layer has loaded its image
- name: 'ImageOverlay events: mousedown'
  id: index#imageoverlay-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'ImageOverlay events: mouseout'
  id: index#imageoverlay-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'ImageOverlay events: mouseover'
  id: index#imageoverlay-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'ImageOverlay events: mouseup'
  id: index#imageoverlay-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'ImageOverlay events: popupclose'
  id: index#imageoverlay-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'ImageOverlay events: popupopen'
  id: index#imageoverlay-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'ImageOverlay events: tooltipclose'
  id: index#imageoverlay-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'ImageOverlay events: tooltipopen'
  id: index#imageoverlay-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'ImageOverlay methods: addEventListener'
  id: index#imageoverlay-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'ImageOverlay methods: addEventParent'
  id: index#imageoverlay-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'ImageOverlay methods: addOneTimeEventListener'
  id: index#imageoverlay-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'ImageOverlay methods: addTo'
  id: index#imageoverlay-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'ImageOverlay methods: bindPopup'
  id: index#imageoverlay-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'ImageOverlay methods: bindTooltip'
  id: index#imageoverlay-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'ImageOverlay methods: bringToBack'
  id: index#imageoverlay-bringtoback
  summary: Brings the layer to the bottom of all overlays
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all overlays.
- name: 'ImageOverlay methods: bringToFront'
  id: index#imageoverlay-bringtofront
  summary: Brings the layer to the top of all overlays
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all overlays.
- name: 'ImageOverlay methods: clearAllEventListeners'
  id: index#imageoverlay-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'ImageOverlay methods: closePopup'
  id: index#imageoverlay-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'ImageOverlay methods: closeTooltip'
  id: index#imageoverlay-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'ImageOverlay methods: fire'
  id: index#imageoverlay-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'ImageOverlay methods: fireEvent'
  id: index#imageoverlay-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'ImageOverlay methods: getAttribution'
  id: index#imageoverlay-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'ImageOverlay methods: getBounds'
  id: index#imageoverlay-getbounds
  summary: null
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Get the bounds that this ImageOverlay covers
- name: 'ImageOverlay methods: getCenter'
  id: index#imageoverlay-getcenter
  summary: Returns the center of the ImageOverlay
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center of the ImageOverlay.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'ImageOverlay methods: getElement'
  id: index#imageoverlay-getelement
  summary: Returns the instance of HTMLImageElement used by this overlay
  description: |-
    `getElement()`

    `HTMLElement`

    Returns the instance of [`HTMLImageElement`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement) used by this overlay.
- name: 'ImageOverlay methods: getPane'
  id: index#imageoverlay-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'ImageOverlay methods: getPopup'
  id: index#imageoverlay-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'ImageOverlay methods: getTooltip'
  id: index#imageoverlay-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'ImageOverlay methods: hasEventListeners'
  id: index#imageoverlay-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'ImageOverlay methods: isPopupOpen'
  id: index#imageoverlay-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'ImageOverlay methods: isTooltipOpen'
  id: index#imageoverlay-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'ImageOverlay methods: listens'
  id: index#imageoverlay-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'ImageOverlay methods: off'
  id: index#imageoverlay-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'ImageOverlay methods: on'
  id: index#imageoverlay-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'ImageOverlay methods: once'
  id: index#imageoverlay-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'ImageOverlay methods: openPopup'
  id: index#imageoverlay-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'ImageOverlay methods: openTooltip'
  id: index#imageoverlay-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'ImageOverlay methods: removeEventListener'
  id: index#imageoverlay-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'ImageOverlay methods: removeEventParent'
  id: index#imageoverlay-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'ImageOverlay methods: removeFrom'
  id: index#imageoverlay-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'ImageOverlay methods: setBounds'
  id: index#imageoverlay-setbounds
  summary: null
  description: |-
    `setBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    `this`

    Update the bounds that this ImageOverlay covers
- name: 'ImageOverlay methods: setOpacity'
  id: index#imageoverlay-setopacity
  summary: Sets the opacity of the overlay
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Sets the opacity of the overlay.
- name: 'ImageOverlay methods: setPopupContent'
  id: index#imageoverlay-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'ImageOverlay methods: setTooltipContent'
  id: index#imageoverlay-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'ImageOverlay methods: setUrl'
  id: index#imageoverlay-seturl
  summary: Changes the URL of the image
  description: |-
    `setUrl(<String> `*`url`*`)`

    `this`

    Changes the URL of the image.
- name: 'ImageOverlay methods: setZIndex'
  id: index#imageoverlay-setzindex
  summary: Changes the zIndex of the image overlay
  description: |-
    `setZIndex(<Number> `*`value`*`)`

    `this`

    Changes the [zIndex](#imageoverlay-zindex) of the image overlay.
- name: 'ImageOverlay methods: togglePopup'
  id: index#imageoverlay-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'ImageOverlay methods: toggleTooltip'
  id: index#imageoverlay-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'ImageOverlay methods: unbindPopup'
  id: index#imageoverlay-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'ImageOverlay methods: unbindTooltip'
  id: index#imageoverlay-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'ImageOverlay options: alt'
  id: index#imageoverlay-alt
  summary: Text for the alt attribute of the image (useful for accessibility)
  description: |-
    `alt`

    `String`

    `''`

    Text for the `alt` attribute of the image (useful for accessibility).
- name: 'ImageOverlay options: attribution'
  id: index#imageoverlay-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'ImageOverlay options: bubblingMouseEvents'
  id: index#imageoverlay-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'ImageOverlay options: className'
  id: index#imageoverlay-classname
  summary: A custom class name to assign to the image
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the image. Empty by default.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'ImageOverlay options: crossOrigin'
  id: index#imageoverlay-crossorigin
  summary: Whether the crossOrigin attribute will be added to the image
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.
- name: 'ImageOverlay options: errorOverlayUrl'
  id: index#imageoverlay-erroroverlayurl
  summary: URL to the overlay image to show in place of the overlay that failed to load
  description: |-
    `errorOverlayUrl`

    `String`

    `''`

    URL to the overlay image to show in place of the overlay that failed to load.
- name: 'ImageOverlay options: interactive'
  id: index#imageoverlay-interactive
  summary: If true, the image overlay will emit mouse events when clicked or hovered
  description: |-
    `interactive`

    `Boolean`

    `false`

    If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.
- name: 'ImageOverlay options: opacity'
  id: index#imageoverlay-opacity
  summary: The opacity of the image overlay
  description: |-
    `opacity`

    `Number`

    `1.0`

    The opacity of the image overlay.
- name: 'ImageOverlay options: pane'
  id: index#imageoverlay-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'ImageOverlay options: zIndex'
  id: index#imageoverlay-zindex
  summary: The explicit zIndex of the overlay layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.
- name: Interactive layer
  id: index#interactive-layer
  summary: Some Layers can be made interactive - when the user interacts with such a layer, mouse events like click and mouseover can be handled
  description: |-
    ## Interactive layer

    Some [`Layer`](#layer)s can be made interactive - when the user interacts with such a layer, mouse events like `click` and `mouseover` can be handled. Use the [event handling methods](#evented-method) to handle these events.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Interactive layer events: add'
  id: index#interactive-layer-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Interactive layer events: click'
  id: index#interactive-layer-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Interactive layer events: contextmenu'
  id: index#interactive-layer-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Interactive layer events: dblclick'
  id: index#interactive-layer-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Interactive layer events: mousedown'
  id: index#interactive-layer-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Interactive layer events: mouseout'
  id: index#interactive-layer-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Interactive layer events: mouseover'
  id: index#interactive-layer-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Interactive layer events: mouseup'
  id: index#interactive-layer-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Interactive layer events: popupclose'
  id: index#interactive-layer-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Interactive layer events: popupopen'
  id: index#interactive-layer-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Interactive layer events: tooltipclose'
  id: index#interactive-layer-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Interactive layer events: tooltipopen'
  id: index#interactive-layer-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Interactive layer methods: addEventListener'
  id: index#interactive-layer-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Interactive layer methods: addEventParent'
  id: index#interactive-layer-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Interactive layer methods: addOneTimeEventListener'
  id: index#interactive-layer-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Interactive layer methods: addTo'
  id: index#interactive-layer-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Interactive layer methods: bindPopup'
  id: index#interactive-layer-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Interactive layer methods: bindTooltip'
  id: index#interactive-layer-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Interactive layer methods: clearAllEventListeners'
  id: index#interactive-layer-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Interactive layer methods: closePopup'
  id: index#interactive-layer-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Interactive layer methods: closeTooltip'
  id: index#interactive-layer-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Interactive layer methods: fire'
  id: index#interactive-layer-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Interactive layer methods: fireEvent'
  id: index#interactive-layer-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Interactive layer methods: getAttribution'
  id: index#interactive-layer-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Interactive layer methods: getPane'
  id: index#interactive-layer-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Interactive layer methods: getPopup'
  id: index#interactive-layer-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Interactive layer methods: getTooltip'
  id: index#interactive-layer-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Interactive layer methods: hasEventListeners'
  id: index#interactive-layer-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Interactive layer methods: isPopupOpen'
  id: index#interactive-layer-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Interactive layer methods: isTooltipOpen'
  id: index#interactive-layer-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Interactive layer methods: listens'
  id: index#interactive-layer-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Interactive layer methods: off'
  id: index#interactive-layer-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Interactive layer methods: on'
  id: index#interactive-layer-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Interactive layer methods: once'
  id: index#interactive-layer-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Interactive layer methods: openPopup'
  id: index#interactive-layer-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Interactive layer methods: openTooltip'
  id: index#interactive-layer-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Interactive layer methods: removeEventListener'
  id: index#interactive-layer-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Interactive layer methods: removeEventParent'
  id: index#interactive-layer-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Interactive layer methods: removeFrom'
  id: index#interactive-layer-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Interactive layer methods: setPopupContent'
  id: index#interactive-layer-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Interactive layer methods: setTooltipContent'
  id: index#interactive-layer-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Interactive layer methods: togglePopup'
  id: index#interactive-layer-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Interactive layer methods: toggleTooltip'
  id: index#interactive-layer-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Interactive layer methods: unbindPopup'
  id: index#interactive-layer-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Interactive layer methods: unbindTooltip'
  id: index#interactive-layer-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Interactive layer options: attribution'
  id: index#interactive-layer-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    #### Mouse events

    Event

    Data

    Description
- name: 'Interactive layer options: bubblingMouseEvents'
  id: index#interactive-layer-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Interactive layer options: interactive'
  id: index#interactive-layer-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.
- name: 'Interactive layer options: pane'
  id: index#interactive-layer-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: LatLng
  id: index#latlng
  summary: Represents a geographical point with a certain latitude and longitude
  description: |-
    ## LatLng

    Represents a geographical point with a certain latitude and longitude.

    ### Usage example

    ``` javascript
    var latlng = L.latLng(50.5, 30.5);
    ```

    All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:

    ``` javascript
    map.panTo([50, 30]);
    map.panTo({lng: 30, lat: 50});
    map.panTo({lat: 50, lng: 30});
    map.panTo(L.latLng(50, 30));
    ```

    Note that [`LatLng`](#latlng) does not inherit from Leaflet's [`Class`](#class) object, which means new classes can't inherit from it, and new methods can't be added to it with the `include` function.

    ### Creation

    Factory

    Description
- name: 'LatLng creation: L.latLng'
  id: index#latlng-l-latlng
  summary: Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude)
  description: |-
    `L.latLng(<Number> `*`latitude`*`, <Number> `*`longitude`*`, <Number> `*`altitude?`*`)`

    Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude).

    `L.latLng(<Array> `*`coords`*`)`

    Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead.

    `L.latLng(<Object> `*`coords`*`)`

    Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead.

    ### Methods

    Method

    Returns

    Description
- name: 'LatLng methods: distanceTo'
  id: index#latlng-distanceto
  summary: Returns the distance (in meters) to the given LatLng calculated using the Spherical Law of Cosines
  description: |-
    `distanceTo(<`[`LatLng`](#latlng)`> `*`otherLatLng`*`)`

    `Number`

    Returns the distance (in meters) to the given [`LatLng`](#latlng) calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).
- name: 'LatLng methods: equals'
  id: index#latlng-equals
  summary: Returns true if the given LatLng point is at the same position (within a small margin of error)
  description: |-
    `equals(<`[`LatLng`](#latlng)`> `*`otherLatLng`*`, <Number> `*`maxMargin?`*`)`

    `Boolean`

    Returns `true` if the given [`LatLng`](#latlng) point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.
- name: 'LatLng methods: toBounds'
  id: index#latlng-tobounds
  summary: Returns a new LatLngBounds object in which each boundary is sizeInMeters/2 meters apart from the LatLng
  description: |-
    `toBounds(<Number> `*`sizeInMeters`*`)`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns a new [`LatLngBounds`](#latlngbounds) object in which each boundary is `sizeInMeters/2` meters apart from the [`LatLng`](#latlng).

    ### Properties

    Property

    Type

    Description
- name: 'LatLng methods: toString'
  id: index#latlng-tostring
  summary: Returns a string representation of the point (for debugging purposes)
  description: |-
    `toString()`

    `String`

    Returns a string representation of the point (for debugging purposes).
- name: 'LatLng methods: wrap'
  id: index#latlng-wrap
  summary: Returns a new LatLng object with the longitude wrapped so it's always between -180 and +180 degrees
  description: |-
    `wrap()`

    ` `[`LatLng`](#latlng)` `

    Returns a new [`LatLng`](#latlng) object with the longitude wrapped so it's always between -180 and +180 degrees.
- name: 'LatLng properties: alt'
  id: index#latlng-alt
  summary: null
  description: |-
    `alt`

    `Number`

    Altitude in meters (optional)
- name: 'LatLng properties: lat'
  id: index#latlng-lat
  summary: null
  description: |-
    `lat`

    `Number`

    Latitude in degrees
- name: 'LatLng properties: lng'
  id: index#latlng-lng
  summary: null
  description: |-
    `lng`

    `Number`

    Longitude in degrees
- name: LatLngBounds
  id: index#latlngbounds
  summary: Represents a rectangular geographical area on a map
  description: |-
    ## LatLngBounds

    Represents a rectangular geographical area on a map.

    ### Usage example

    ``` javascript
    var corner1 = L.latLng(40.712, -74.227),
    corner2 = L.latLng(40.774, -74.125),
    bounds = L.latLngBounds(corner1, corner2);
    ```

    All Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:

    ``` javascript
    map.fitBounds([
        [40.712, -74.227],
        [40.774, -74.125]
    ]);
    ```

    Caution: if the area crosses the antimeridian (often confused with the International Date Line), you must specify corners *outside* the \[-180, 180\] degrees longitude range.

    Note that [`LatLngBounds`](#latlngbounds) does not inherit from Leaflet's [`Class`](#class) object, which means new classes can't inherit from it, and new methods can't be added to it with the `include` function.

    ### Creation

    Factory

    Description
- name: 'LatLngBounds creation: L.latLngBounds'
  id: index#latlngbounds-l-latlngbounds
  summary: Creates a LatLngBounds object by defining two diagonally opposite corners of the rectangle
  description: |-
    `L.latLngBounds(<`[`LatLng`](#latlng)`> `*`corner1`*`, <`[`LatLng`](#latlng)`> `*`corner2`*`)`

    Creates a [`LatLngBounds`](#latlngbounds) object by defining two diagonally opposite corners of the rectangle.

    `L.latLngBounds(<LatLng[]> `*`latlngs`*`)`

    Creates a [`LatLngBounds`](#latlngbounds) object defined by the geographical points it contains. Very useful for zooming the map to fit a particular set of locations with [`fitBounds`](#map-fitbounds).

    ### Methods

    Method

    Returns

    Description
- name: 'LatLngBounds methods: contains'
  id: index#latlngbounds-contains
  summary: Returns true if the rectangle contains the given one
  description: |-
    `contains(<`[`LatLngBounds`](#latlngbounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle contains the given one.

    `contains(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `Boolean`

    Returns `true` if the rectangle contains the given point.
- name: 'LatLngBounds methods: equals'
  id: index#latlngbounds-equals
  summary: Returns true if the rectangle is equivalent (within a small margin of error) to the given bounds
  description: |-
    `equals(<`[`LatLngBounds`](#latlngbounds)`> `*`otherBounds`*`, <Number> `*`maxMargin?`*`)`

    `Boolean`

    Returns `true` if the rectangle is equivalent (within a small margin of error) to the given bounds. The margin of error can be overridden by setting `maxMargin` to a small number.
- name: 'LatLngBounds methods: extend'
  id: index#latlngbounds-extend
  summary: null
  description: |-
    `extend(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `this`

    Extend the bounds to contain the given point

    `extend(<`[`LatLngBounds`](#latlngbounds)`> `*`otherBounds`*`)`

    `this`

    Extend the bounds to contain the given bounds
- name: 'LatLngBounds methods: getCenter'
  id: index#latlngbounds-getcenter
  summary: Returns the center point of the bounds
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center point of the bounds.
- name: 'LatLngBounds methods: getEast'
  id: index#latlngbounds-geteast
  summary: null
  description: |-
    `getEast()`

    `Number`

    Returns the east longitude of the bounds
- name: 'LatLngBounds methods: getNorth'
  id: index#latlngbounds-getnorth
  summary: null
  description: |-
    `getNorth()`

    `Number`

    Returns the north latitude of the bounds
- name: 'LatLngBounds methods: getNorthEast'
  id: index#latlngbounds-getnortheast
  summary: Returns the north-east point of the bounds
  description: |-
    `getNorthEast()`

    ` `[`LatLng`](#latlng)` `

    Returns the north-east point of the bounds.
- name: 'LatLngBounds methods: getNorthWest'
  id: index#latlngbounds-getnorthwest
  summary: Returns the north-west point of the bounds
  description: |-
    `getNorthWest()`

    ` `[`LatLng`](#latlng)` `

    Returns the north-west point of the bounds.
- name: 'LatLngBounds methods: getSouth'
  id: index#latlngbounds-getsouth
  summary: null
  description: |-
    `getSouth()`

    `Number`

    Returns the south latitude of the bounds
- name: 'LatLngBounds methods: getSouthEast'
  id: index#latlngbounds-getsoutheast
  summary: Returns the south-east point of the bounds
  description: |-
    `getSouthEast()`

    ` `[`LatLng`](#latlng)` `

    Returns the south-east point of the bounds.
- name: 'LatLngBounds methods: getSouthWest'
  id: index#latlngbounds-getsouthwest
  summary: Returns the south-west point of the bounds
  description: |-
    `getSouthWest()`

    ` `[`LatLng`](#latlng)` `

    Returns the south-west point of the bounds.
- name: 'LatLngBounds methods: getWest'
  id: index#latlngbounds-getwest
  summary: null
  description: |-
    `getWest()`

    `Number`

    Returns the west longitude of the bounds
- name: 'LatLngBounds methods: intersects'
  id: index#latlngbounds-intersects
  summary: Returns true if the rectangle intersects the given bounds
  description: |-
    `intersects(<`[`LatLngBounds`](#latlngbounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common.
- name: 'LatLngBounds methods: isValid'
  id: index#latlngbounds-isvalid
  summary: Returns true if the bounds are properly initialized
  description: |-
    `isValid()`

    `Boolean`

    Returns `true` if the bounds are properly initialized.
- name: 'LatLngBounds methods: overlaps'
  id: index#latlngbounds-overlaps
  summary: Returns true if the rectangle overlaps the given bounds
  description: |-
    `overlaps(<`[`LatLngBounds`](#latlngbounds)`> `*`otherBounds`*`)`

    `Boolean`

    Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area.
- name: 'LatLngBounds methods: pad'
  id: index#latlngbounds-pad
  summary: Returns bounds created by extending or retracting the current bounds by a given ratio in each direction
  description: |-
    `pad(<Number> `*`bufferRatio`*`)`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns bounds created by extending or retracting the current bounds by a given ratio in each direction. For example, a ratio of 0.5 extends the bounds by 50% in each direction. Negative values will retract the bounds.
- name: 'LatLngBounds methods: toBBoxString'
  id: index#latlngbounds-tobboxstring
  summary: Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format
  description: |-
    `toBBoxString()`

    `String`

    Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format. Useful for sending requests to web services that return geo data.
- name: Layer
  id: index#layer
  summary: A set of methods from the Layer base class that all Leaflet layers use
  description: |-
    ## Layer

    A set of methods from the Layer base class that all Leaflet layers use. Inherits all methods, options and events from [`L.Evented`](#evented).

    ### Usage example

    ``` javascript
    var layer = L.marker(latlng).addTo(map);
    layer.addTo(map);
    layer.remove();
    ```

    ### Options

    Option

    Type

    Default

    Description
- name: 'Layer events: add'
  id: index#layer-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Layer events: popupclose'
  id: index#layer-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    #### Tooltip events

    Event

    Data

    Description
- name: 'Layer events: popupopen'
  id: index#layer-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Layer events: tooltipclose'
  id: index#layer-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Classes extending [`L.Layer`](#layer) will inherit the following methods:

    Method

    Returns

    Description
- name: 'Layer events: tooltipopen'
  id: index#layer-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Layer methods: addEventListener'
  id: index#layer-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Layer methods: addEventParent'
  id: index#layer-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Layer methods: addOneTimeEventListener'
  id: index#layer-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Layer methods: addTo'
  id: index#layer-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Layer methods: beforeAdd'
  id: index#layer-beforeadd
  summary: Optional method
  description: |-
    `beforeAdd(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.

    #### Popup methods

    All layers share a set of methods convenient for binding popups to it.

    ``` javascript
    var layer = L.Polygon(latlngs).bindPopup('Hi There!').addTo(map);
    layer.openPopup();
    layer.closePopup();
    ```

    Popups will also be automatically opened when the layer is clicked on and closed when the layer is removed from the map or another popup is opened.

    Method

    Returns

    Description
- name: 'Layer methods: bindPopup'
  id: index#layer-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Layer methods: bindTooltip'
  id: index#layer-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Layer methods: clearAllEventListeners'
  id: index#layer-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Layer methods: closePopup'
  id: index#layer-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Layer methods: closeTooltip'
  id: index#layer-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Layer methods: fire'
  id: index#layer-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Layer methods: fireEvent'
  id: index#layer-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Layer methods: getAttribution'
  id: index#layer-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    #### Extension methods

    Every layer should extend from [`L.Layer`](#layer) and (re-)implement the following methods.

    Method

    Returns

    Description
- name: 'Layer methods: getEvents'
  id: index#layer-getevents
  summary: 'This optional method should return an object like { viewreset: this._reset } for addEventListener'
  description: |-
    `getEvents()`

    `Object`

    This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer.
- name: 'Layer methods: getPane'
  id: index#layer-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Layer methods: getPopup'
  id: index#layer-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    #### Tooltip methods

    All layers share a set of methods convenient for binding tooltips to it.

    ``` javascript
    var layer = L.Polygon(latlngs).bindTooltip('Hi There!').addTo(map);
    layer.openTooltip();
    layer.closeTooltip();
    ```

    Method

    Returns

    Description
- name: 'Layer methods: getTooltip'
  id: index#layer-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Layer methods: hasEventListeners'
  id: index#layer-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Layer methods: isPopupOpen'
  id: index#layer-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Layer methods: isTooltipOpen'
  id: index#layer-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Layer methods: listens'
  id: index#layer-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Layer methods: off'
  id: index#layer-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Layer methods: on'
  id: index#layer-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Layer methods: onAdd'
  id: index#layer-onadd
  summary: Should contain code that creates DOM elements for the layer, adds them to map panes where they should belong and puts listeners on relevant map events
  description: |-
    `onAdd(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer).
- name: 'Layer methods: once'
  id: index#layer-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Layer methods: onRemove'
  id: index#layer-onremove
  summary: Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in onAdd
  description: |-
    `onRemove(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer).
- name: 'Layer methods: openPopup'
  id: index#layer-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Layer methods: openTooltip'
  id: index#layer-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Layer methods: removeEventListener'
  id: index#layer-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Layer methods: removeEventParent'
  id: index#layer-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Layer methods: removeFrom'
  id: index#layer-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Layer methods: setPopupContent'
  id: index#layer-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Layer methods: setTooltipContent'
  id: index#layer-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Layer methods: togglePopup'
  id: index#layer-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Layer methods: toggleTooltip'
  id: index#layer-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Layer methods: unbindPopup'
  id: index#layer-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Layer methods: unbindTooltip'
  id: index#layer-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Layer options: attribution'
  id: index#layer-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'Layer options: pane'
  id: index#layer-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: LayerGroup
  id: index#layergroup
  summary: Used to group several layers and handle them as one
  description: |-
    ## LayerGroup

    Used to group several layers and handle them as one. If you add it to the map, any layers added or removed from the group will be added/removed on the map as well. Extends [`Layer`](#layer).

    ### Usage example

    ``` javascript
    L.layerGroup([marker1, marker2])
        .addLayer(polyline)
        .addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'LayerGroup creation: L.layerGroup'
  id: index#layergroup-l-layergroup
  summary: Create a layer group, optionally given an initial set of layers and an options object
  description: |-
    `L.layerGroup(<Layer[]> `*`layers?`*`, <Object> `*`options?`*`)`

    Create a layer group, optionally given an initial set of layers and an `options` object.

    ### Options

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'LayerGroup events: add'
  id: index#layergroup-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'LayerGroup events: click'
  id: index#layergroup-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'LayerGroup events: contextmenu'
  id: index#layergroup-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'LayerGroup events: dblclick'
  id: index#layergroup-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'LayerGroup events: mousedown'
  id: index#layergroup-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'LayerGroup events: mouseout'
  id: index#layergroup-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'LayerGroup events: mouseover'
  id: index#layergroup-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'LayerGroup events: mouseup'
  id: index#layergroup-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'LayerGroup events: popupclose'
  id: index#layergroup-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'LayerGroup events: popupopen'
  id: index#layergroup-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'LayerGroup events: tooltipclose'
  id: index#layergroup-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'LayerGroup events: tooltipopen'
  id: index#layergroup-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'LayerGroup methods: addEventListener'
  id: index#layergroup-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'LayerGroup methods: addEventParent'
  id: index#layergroup-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'LayerGroup methods: addLayer'
  id: index#layergroup-addlayer
  summary: Adds the given layer to the group
  description: |-
    `addLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Adds the given layer to the group.
- name: 'LayerGroup methods: addOneTimeEventListener'
  id: index#layergroup-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'LayerGroup methods: addTo'
  id: index#layergroup-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'LayerGroup methods: bindPopup'
  id: index#layergroup-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'LayerGroup methods: bindTooltip'
  id: index#layergroup-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'LayerGroup methods: clearAllEventListeners'
  id: index#layergroup-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'LayerGroup methods: clearLayers'
  id: index#layergroup-clearlayers
  summary: Removes all the layers from the group
  description: |-
    `clearLayers()`

    `this`

    Removes all the layers from the group.
- name: 'LayerGroup methods: closePopup'
  id: index#layergroup-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'LayerGroup methods: closeTooltip'
  id: index#layergroup-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'LayerGroup methods: eachLayer'
  id: index#layergroup-eachlayer
  summary: Iterates over the layers of the group, optionally specifying context of the iterator function
  description: |-
    `eachLayer(<Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Iterates over the layers of the group, optionally specifying context of the iterator function.

    ``` javascript
    group.eachLayer(function (layer) {
        layer.bindPopup('Hello');
    });
    ```
- name: 'LayerGroup methods: fire'
  id: index#layergroup-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'LayerGroup methods: fireEvent'
  id: index#layergroup-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'LayerGroup methods: getAttribution'
  id: index#layergroup-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'LayerGroup methods: getLayer'
  id: index#layergroup-getlayer
  summary: Returns the layer with the given internal ID
  description: |-
    `getLayer(<Number> `*`id`*`)`

    ` `[`Layer`](#layer)` `

    Returns the layer with the given internal ID.
- name: 'LayerGroup methods: getLayerId'
  id: index#layergroup-getlayerid
  summary: null
  description: |-
    `getLayerId(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Number`

    Returns the internal ID for a layer

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'LayerGroup methods: getLayers'
  id: index#layergroup-getlayers
  summary: Returns an array of all the layers added to the group
  description: |-
    `getLayers()`

    `Layer[]`

    Returns an array of all the layers added to the group.
- name: 'LayerGroup methods: getPane'
  id: index#layergroup-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'LayerGroup methods: getPopup'
  id: index#layergroup-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'LayerGroup methods: getTooltip'
  id: index#layergroup-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'LayerGroup methods: hasEventListeners'
  id: index#layergroup-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'LayerGroup methods: hasLayer'
  id: index#layergroup-haslayer
  summary: Returns true if the given layer is currently added to the group
  description: |-
    `hasLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Boolean`

    Returns `true` if the given layer is currently added to the group.

    `hasLayer(<Number> `*`id`*`)`

    `Boolean`

    Returns `true` if the given internal ID is currently added to the group.
- name: 'LayerGroup methods: invoke'
  id: index#layergroup-invoke
  summary: Calls methodName on every layer contained in this group, passing any additional parameters
  description: |-
    `invoke(<String> `*`methodName`*`, `*`…`*`)`

    `this`

    Calls `methodName` on every layer contained in this group, passing any additional parameters. Has no effect if the layers contained do not implement `methodName`.
- name: 'LayerGroup methods: isPopupOpen'
  id: index#layergroup-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'LayerGroup methods: isTooltipOpen'
  id: index#layergroup-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'LayerGroup methods: listens'
  id: index#layergroup-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'LayerGroup methods: off'
  id: index#layergroup-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'LayerGroup methods: on'
  id: index#layergroup-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'LayerGroup methods: once'
  id: index#layergroup-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'LayerGroup methods: openPopup'
  id: index#layergroup-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'LayerGroup methods: openTooltip'
  id: index#layergroup-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'LayerGroup methods: removeEventListener'
  id: index#layergroup-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'LayerGroup methods: removeEventParent'
  id: index#layergroup-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'LayerGroup methods: removeFrom'
  id: index#layergroup-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'LayerGroup methods: removeLayer'
  id: index#layergroup-removelayer
  summary: Removes the given layer from the group
  description: |-
    `removeLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Removes the given layer from the group.

    `removeLayer(<Number> `*`id`*`)`

    `this`

    Removes the layer with the given internal ID from the group.
- name: 'LayerGroup methods: setPopupContent'
  id: index#layergroup-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'LayerGroup methods: setTooltipContent'
  id: index#layergroup-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'LayerGroup methods: setZIndex'
  id: index#layergroup-setzindex
  summary: Calls setZIndex on every layer contained in this group, passing the z-index
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Calls `setZIndex` on every layer contained in this group, passing the z-index.
- name: 'LayerGroup methods: toGeoJSON'
  id: index#layergroup-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).
- name: 'LayerGroup methods: togglePopup'
  id: index#layergroup-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'LayerGroup methods: toggleTooltip'
  id: index#layergroup-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'LayerGroup methods: unbindPopup'
  id: index#layergroup-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'LayerGroup methods: unbindTooltip'
  id: index#layergroup-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'LayerGroup options: attribution'
  id: index#layergroup-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'LayerGroup options: bubblingMouseEvents'
  id: index#layergroup-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'LayerGroup options: interactive'
  id: index#layergroup-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.
- name: 'LayerGroup options: pane'
  id: index#layergroup-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: LineUtil
  id: index#lineutil
  summary: Various utility functions for polyline points processing, used by Leaflet internally to make polylines lightning-fast
  description: |-
    ## LineUtil

    Various utility functions for polyline points processing, used by Leaflet internally to make polylines lightning-fast.

    ### Functions

    Function

    Returns

    Description
- name: 'LineUtil functions: clipSegment'
  id: index#lineutil-clipsegment
  summary: Clips the segment a to b by rectangular bounds with the Cohen-Sutherland algorithm (modifying the segment points directly!)
  description: |-
    `clipSegment(<`[`Point`](#point)`> `*`a`*`, <`[`Point`](#point)`> `*`b`*`, <`[`Bounds`](#bounds)`> `*`bounds`*`, <Boolean> `*`useLastCode?`*`, <Boolean> `*`round?`*`)`

    `Point[]|Boolean`

    Clips the segment a to b by rectangular bounds with the [Cohen-Sutherland algorithm](https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm) (modifying the segment points directly!). Used by Leaflet to only show polyline points that are on the screen or near, increasing performance.
- name: 'LineUtil functions: closestPointOnSegment'
  id: index#lineutil-closestpointonsegment
  summary: Returns the closest point from a point p on a segment p1 to p2
  description: |-
    `closestPointOnSegment(<`[`Point`](#point)`> `*`p`*`, <`[`Point`](#point)`> `*`p1`*`, <`[`Point`](#point)`> `*`p2`*`)`

    `Number`

    Returns the closest point from a point `p` on a segment `p1` to `p2`.
- name: 'LineUtil functions: isFlat'
  id: index#lineutil-isflat
  summary: Returns true if latlngs is a flat array, false is nested
  description: |-
    `isFlat(<LatLng[]> `*`latlngs`*`)`

    `Boolean`

    Returns true if `latlngs` is a flat array, false is nested.
- name: 'LineUtil functions: pointToSegmentDistance'
  id: index#lineutil-pointtosegmentdistance
  summary: Returns the distance between point p and segment p1 to p2
  description: |-
    `pointToSegmentDistance(<`[`Point`](#point)`> `*`p`*`, <`[`Point`](#point)`> `*`p1`*`, <`[`Point`](#point)`> `*`p2`*`)`

    `Number`

    Returns the distance between point `p` and segment `p1` to `p2`.
- name: 'LineUtil functions: polylineCenter'
  id: index#lineutil-polylinecenter
  summary: Returns the center (centroid) of the passed LatLngs (first ring) from a polyline
  description: |-
    `polylineCenter(<LatLng[]> `*`latlngs`*`, <`[`CRS`](#crs)`> `*`crs`*`)`

    ` `[`LatLng`](#latlng)` `

    Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the passed LatLngs (first ring) from a polyline.
- name: 'LineUtil functions: simplify'
  id: index#lineutil-simplify
  summary: Dramatically reduces the number of points in a polyline while retaining its shape and returns a new array of simplified points, using the Ramer-Douglas-Peucker algorithm
  description: |-
    `simplify(<Point[]> `*`points`*`, <Number> `*`tolerance`*`)`

    `Point[]`

    Dramatically reduces the number of points in a polyline while retaining its shape and returns a new array of simplified points, using the [Ramer-Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm). Used for a huge performance boost when processing/displaying Leaflet polylines for each zoom level and also reducing visual noise. tolerance affects the amount of simplification (lesser value means higher quality but slower and with more points). Also released as a separated micro-library [Simplify.js](https://mourner.github.io/simplify-js/).
- name: 'Locate options: enableHighAccuracy'
  id: index#locate-options-enablehighaccuracy
  summary: Enables high accuracy, see description in the W3C spec
  description: |-
    `enableHighAccuracy`

    `Boolean`

    `false`

    Enables high accuracy, see [description in the W3C spec](https://w3c.github.io/geolocation-api/#enablehighaccuracy-member).

    ### Zoom options

    Some of the [`Map`](#map) methods which modify the zoom level take in an `options` parameter. This is a plain javascript object with the following optional components:

    Option

    Type

    Default

    Description
- name: 'Locate options: maximumAge'
  id: index#locate-options-maximumage
  summary: Maximum age of detected location
  description: |-
    `maximumAge`

    `Number`

    `0`

    Maximum age of detected location. If less than this amount of milliseconds passed since last geolocation response, `locate` will return a cached location.
- name: 'Locate options: maxZoom'
  id: index#locate-options-maxzoom
  summary: The maximum zoom for automatic view setting when using setView option
  description: |-
    `maxZoom`

    `Number`

    `Infinity`

    The maximum zoom for automatic view setting when using `setView` option.
- name: 'Locate options: setView'
  id: index#locate-options-setview
  summary: If true, automatically sets the map view to the user location with respect to detection accuracy, or to world view if geolocation failed
  description: |-
    `setView`

    `Boolean`

    `false`

    If `true`, automatically sets the map view to the user location with respect to detection accuracy, or to world view if geolocation failed.
- name: 'Locate options: timeout'
  id: index#locate-options-timeout
  summary: Number of milliseconds to wait for a response from geolocation before firing a locationerror event
  description: |-
    `timeout`

    `Number`

    `10000`

    Number of milliseconds to wait for a response from geolocation before firing a `locationerror` event.
- name: 'Locate options: watch'
  id: index#locate-options-watch
  summary: If true, starts continuous watching of location changes (instead of detecting it once) using W3C watchPosition method
  description: |-
    `watch`

    `Boolean`

    `false`

    If `true`, starts continuous watching of location changes (instead of detecting it once) using W3C `watchPosition` method. You can later stop watching using `map.stopLocate()` method.
- name: Map
  id: index#map
  summary: The central class of the API — it is used to create a map on a page and manipulate it
  description: |-
    ## Map

    The central class of the API — it is used to create a map on a page and manipulate it.

    ### Usage example

    ``` javascript
    // initialize the map on the "map" div with a given center and zoom
    var map = L.map('map', {
        center: [51.505, -0.09],
        zoom: 13
    });
    ```

    ### Creation

    Factory

    Description
- name: 'Map creation: L.map'
  id: index#map-l-map
  summary: Instantiates a map object given the DOM ID of a <div> element and optionally an object literal with Map options
  description: |-
    `L.map(<String> `*`id`*`, <Map options> `*`options?`*`)`

    Instantiates a map object given the DOM ID of a `<div>` element and optionally an object literal with `Map options`.

    `L.map(<HTMLElement> `*`el`*`, <Map options> `*`options?`*`)`

    Instantiates a map object given an instance of a `<div>` HTML element and optionally an object literal with `Map options`.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Map events: autopanstart'
  id: index#map-autopanstart
  summary: Fired when the map starts autopanning when opening a popup
  description: |-
    `autopanstart`

    ` `[`Event`](#event)` `

    Fired when the map starts autopanning when opening a popup.

    #### Tooltip events

    Event

    Data

    Description
- name: 'Map events: baselayerchange'
  id: index#map-baselayerchange
  summary: Fired when the base layer is changed through the layers control
  description: |-
    `baselayerchange`

    ` `[`LayersControlEvent`](#layerscontrolevent)` `

    Fired when the base layer is changed through the [layers control](#control-layers).
- name: 'Map events: click'
  id: index#map-click
  summary: Fired when the user clicks (or taps) the map
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the map.
- name: 'Map events: contextmenu'
  id: index#map-contextmenu
  summary: Fired when the user pushes the right mouse button on the map, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the right mouse button on the map, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).
- name: 'Map events: dblclick'
  id: index#map-dblclick
  summary: Fired when the user double-clicks (or double-taps) the map
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the map.
- name: 'Map events: keydown'
  id: index#map-keydown
  summary: Fired when the user presses a key from the keyboard while the map is focused
  description: |-
    `keydown`

    ` `[`KeyboardEvent`](#keyboardevent)` `

    Fired when the user presses a key from the keyboard while the map is focused. Unlike the `keypress` event, the `keydown` event is fired for keys that produce a character value and for keys that do not produce a character value.
- name: 'Map events: keypress'
  id: index#map-keypress
  summary: Fired when the user presses a key from the keyboard that produces a character value while the map is focused
  description: |-
    `keypress`

    ` `[`KeyboardEvent`](#keyboardevent)` `

    Fired when the user presses a key from the keyboard that produces a character value while the map is focused.
- name: 'Map events: keyup'
  id: index#map-keyup
  summary: Fired when the user releases a key from the keyboard while the map is focused
  description: |-
    `keyup`

    ` `[`KeyboardEvent`](#keyboardevent)` `

    Fired when the user releases a key from the keyboard while the map is focused.
- name: 'Map events: layeradd'
  id: index#map-layeradd
  summary: Fired when a new layer is added to the map
  description: |-
    `layeradd`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when a new layer is added to the map.
- name: 'Map events: layerremove'
  id: index#map-layerremove
  summary: null
  description: |-
    `layerremove`

    ` `[`LayerEvent`](#layerevent)` `

    Fired when some layer is removed from the map

    #### Map state change events

    Event

    Data

    Description
- name: 'Map events: load'
  id: index#map-load
  summary: Fired when the map is initialized (when its center and zoom are set for the first time)
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the map is initialized (when its center and zoom are set for the first time).
- name: 'Map events: locationerror'
  id: index#map-locationerror
  summary: Fired when geolocation (using the locate method) failed
  description: |-
    `locationerror`

    ` `[`ErrorEvent`](#errorevent)` `

    Fired when geolocation (using the [`locate`](#map-locate) method) failed.
- name: 'Map events: locationfound'
  id: index#map-locationfound
  summary: Fired when geolocation (using the locate method) went successfully
  description: |-
    `locationfound`

    ` `[`LocationEvent`](#locationevent)` `

    Fired when geolocation (using the [`locate`](#map-locate) method) went successfully.

    #### Interaction events

    Event

    Data

    Description
- name: 'Map events: mousedown'
  id: index#map-mousedown
  summary: Fired when the user pushes the mouse button on the map
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the map.
- name: 'Map events: mousemove'
  id: index#map-mousemove
  summary: Fired while the mouse moves over the map
  description: |-
    `mousemove`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired while the mouse moves over the map.
- name: 'Map events: mouseout'
  id: index#map-mouseout
  summary: Fired when the mouse leaves the map
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the map.
- name: 'Map events: mouseover'
  id: index#map-mouseover
  summary: Fired when the mouse enters the map
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the map.
- name: 'Map events: mouseup'
  id: index#map-mouseup
  summary: Fired when the user releases the mouse button on the map
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button on the map.
- name: 'Map events: move'
  id: index#map-move
  summary: Fired repeatedly during any movement of the map, including pan and fly animations
  description: |-
    `move`

    ` `[`Event`](#event)` `

    Fired repeatedly during any movement of the map, including pan and fly animations.
- name: 'Map events: moveend'
  id: index#map-moveend
  summary: Fired when the center of the map stops changing (e.g
  description: |-
    `moveend`

    ` `[`Event`](#event)` `

    Fired when the center of the map stops changing (e.g. user stopped dragging the map or after non-centered zoom).

    #### Popup events

    Event

    Data

    Description
- name: 'Map events: movestart'
  id: index#map-movestart
  summary: Fired when the view of the map starts changing (e.g
  description: |-
    `movestart`

    ` `[`Event`](#event)` `

    Fired when the view of the map starts changing (e.g. user starts dragging the map).
- name: 'Map events: overlayadd'
  id: index#map-overlayadd
  summary: Fired when an overlay is selected through the layers control
  description: |-
    `overlayadd`

    ` `[`LayersControlEvent`](#layerscontrolevent)` `

    Fired when an overlay is selected through the [layers control](#control-layers).
- name: 'Map events: overlayremove'
  id: index#map-overlayremove
  summary: Fired when an overlay is deselected through the layers control
  description: |-
    `overlayremove`

    ` `[`LayersControlEvent`](#layerscontrolevent)` `

    Fired when an overlay is deselected through the [layers control](#control-layers).
- name: 'Map events: popupclose'
  id: index#map-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup in the map is closed
- name: 'Map events: popupopen'
  id: index#map-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup is opened in the map
- name: 'Map events: preclick'
  id: index#map-preclick
  summary: Fired before mouse click on the map (sometimes useful when you want something to happen on click before any existing click handlers start running)
  description: |-
    `preclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired before mouse click on the map (sometimes useful when you want something to happen on click before any existing click handlers start running).

    #### Other Events

    Event

    Data

    Description
- name: 'Map events: resize'
  id: index#map-resize
  summary: Fired when the map is resized
  description: |-
    `resize`

    ` `[`ResizeEvent`](#resizeevent)` `

    Fired when the map is resized.
- name: 'Map events: tooltipclose'
  id: index#map-tooltipclose
  summary: Fired when a tooltip in the map is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip in the map is closed.

    #### Location events

    Event

    Data

    Description
- name: 'Map events: tooltipopen'
  id: index#map-tooltipopen
  summary: Fired when a tooltip is opened in the map
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip is opened in the map.
- name: 'Map events: unload'
  id: index#map-unload
  summary: Fired when the map is destroyed with remove method
  description: |-
    `unload`

    ` `[`Event`](#event)` `

    Fired when the map is destroyed with [remove](#map-remove) method.
- name: 'Map events: viewreset'
  id: index#map-viewreset
  summary: Fired when the map needs to redraw its content (this usually happens on map zoom or load)
  description: |-
    `viewreset`

    ` `[`Event`](#event)` `

    Fired when the map needs to redraw its content (this usually happens on map zoom or load). Very useful for creating custom overlays.
- name: 'Map events: zoomanim'
  id: index#map-zoomanim
  summary: Fired at least once per zoom animation
  description: |-
    `zoomanim`

    ` `[`ZoomAnimEvent`](#zoomanimevent)` `

    Fired at least once per zoom animation. For continuous zoom, like pinch zooming, fired once per frame during zoom.

    ### Methods

    Method

    Returns

    Description
- name: 'Map events: zoomend'
  id: index#map-zoomend
  summary: Fired when the map zoom changed, after any animations
  description: |-
    `zoomend`

    ` `[`Event`](#event)` `

    Fired when the map zoom changed, after any animations.
- name: 'Map events: zoomlevelschange'
  id: index#map-zoomlevelschange
  summary: Fired when the number of zoomlevels on the map is changed due to adding or removing a layer
  description: |-
    `zoomlevelschange`

    ` `[`Event`](#event)` `

    Fired when the number of zoomlevels on the map is changed due to adding or removing a layer.
- name: 'Map events: zoomstart'
  id: index#map-zoomstart
  summary: Fired when the map zoom is about to change (e.g
  description: |-
    `zoomstart`

    ` `[`Event`](#event)` `

    Fired when the map zoom is about to change (e.g. before zoom animation).
- name: 'Map map panes: mapPane'
  id: index#map-mappane
  summary: null
  description: |-
    `mapPane`

    `HTMLElement`

    `'auto'`

    Pane that contains all other map panes
- name: 'Map map panes: markerPane'
  id: index#map-markerpane
  summary: null
  description: |-
    `markerPane`

    `HTMLElement`

    `600`

    Pane for [`Icon`](#icon)s of [`Marker`](#marker)s
- name: 'Map map panes: overlayPane'
  id: index#map-overlaypane
  summary: null
  description: |-
    `overlayPane`

    `HTMLElement`

    `400`

    Pane for vectors ([`Path`](#path)s, like [`Polyline`](#polyline)s and [`Polygon`](#polygon)s), [`ImageOverlay`](#imageoverlay)s and [`VideoOverlay`](#videooverlay)s
- name: 'Map map panes: popupPane'
  id: index#map-popuppane
  summary: Pane for Popups
  description: |-
    `popupPane`

    `HTMLElement`

    `700`

    Pane for [`Popup`](#popup)s.

    ### Locate options

    Some of the geolocation methods for [`Map`](#map) take in an `options` parameter. This is a plain javascript object with the following optional components:

    Option

    Type

    Default

    Description
- name: 'Map map panes: shadowPane'
  id: index#map-shadowpane
  summary: Pane for overlay shadows (e.g
  description: |-
    `shadowPane`

    `HTMLElement`

    `500`

    Pane for overlay shadows (e.g. [`Marker`](#marker) shadows)
- name: 'Map map panes: tilePane'
  id: index#map-tilepane
  summary: null
  description: |-
    `tilePane`

    `HTMLElement`

    `200`

    Pane for [`GridLayer`](#gridlayer)s and [`TileLayer`](#tilelayer)s
- name: 'Map map panes: tooltipPane'
  id: index#map-tooltippane
  summary: Pane for Tooltips
  description: |-
    `tooltipPane`

    `HTMLElement`

    `650`

    Pane for [`Tooltip`](#tooltip)s.
- name: 'Map methods: addControl'
  id: index#map-addcontrol
  summary: null
  description: |-
    `addControl(<`[`Control`](#control)`> `*`control`*`)`

    `this`

    Adds the given control to the map
- name: 'Map methods: addEventListener'
  id: index#map-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Map methods: addEventParent'
  id: index#map-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Map methods: addHandler'
  id: index#map-addhandler
  summary: Adds a new Handler to the map, given its name and constructor function
  description: |-
    `addHandler(<String> `*`name`*`, <Function> `*`HandlerClass`*`)`

    `this`

    Adds a new [`Handler`](#handler) to the map, given its name and constructor function.
- name: 'Map methods: addLayer'
  id: index#map-addlayer
  summary: null
  description: |-
    `addLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Adds the given layer to the map
- name: 'Map methods: addOneTimeEventListener'
  id: index#map-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Map methods: clearAllEventListeners'
  id: index#map-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Map methods: closePopup'
  id: index#map-closepopup
  summary: Closes the popup previously opened with openPopup (or the given one)
  description: |-
    `closePopup(<`[`Popup`](#popup)`> `*`popup?`*`)`

    `this`

    Closes the popup previously opened with [openPopup](#map-openpopup) (or the given one).
- name: 'Map methods: closeTooltip'
  id: index#map-closetooltip
  summary: Closes the tooltip given as parameter
  description: |-
    `closeTooltip(<`[`Tooltip`](#tooltip)`> `*`tooltip`*`)`

    `this`

    Closes the tooltip given as parameter.

    #### Methods for modifying map state

    Method

    Returns

    Description
- name: 'Map methods: containerPointToLatLng'
  id: index#map-containerpointtolatlng
  summary: Given a pixel coordinate relative to the map container, returns the corresponding geographical coordinate (for the current zoom level)
  description: |-
    `containerPointToLatLng(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`LatLng`](#latlng)` `

    Given a pixel coordinate relative to the map container, returns the corresponding geographical coordinate (for the current zoom level).
- name: 'Map methods: containerPointToLayerPoint'
  id: index#map-containerpointtolayerpoint
  summary: Given a pixel coordinate relative to the map container, returns the corresponding pixel coordinate relative to the origin pixel
  description: |-
    `containerPointToLayerPoint(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`Point`](#point)` `

    Given a pixel coordinate relative to the map container, returns the corresponding pixel coordinate relative to the [origin pixel](#map-getpixelorigin).
- name: 'Map methods: createPane'
  id: index#map-createpane
  summary: Creates a new map pane with the given name if it doesn't exist already, then returns it
  description: |-
    `createPane(<String> `*`name`*`, <HTMLElement> `*`container?`*`)`

    `HTMLElement`

    Creates a new [map pane](#map-pane) with the given name if it doesn't exist already, then returns it. The pane is created as a child of `container`, or as a child of the main map pane if not set.
- name: 'Map methods: distance'
  id: index#map-distance
  summary: Returns the distance between two geographical coordinates according to the map's CRS
  description: |-
    `distance(<`[`LatLng`](#latlng)`> `*`latlng1`*`, <`[`LatLng`](#latlng)`> `*`latlng2`*`)`

    `Number`

    Returns the distance between two geographical coordinates according to the map's CRS. By default this measures distance in meters.
- name: 'Map methods: eachLayer'
  id: index#map-eachlayer
  summary: Iterates over the layers of the map, optionally specifying context of the iterator function
  description: |-
    `eachLayer(<Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Iterates over the layers of the map, optionally specifying context of the iterator function.

    ``` javascript
    map.eachLayer(function(layer){
        layer.bindPopup('Hello');
    });
    ```
- name: 'Map methods: fire'
  id: index#map-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Map methods: fireEvent'
  id: index#map-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Map methods: fitBounds'
  id: index#map-fitbounds
  summary: Sets a map view that contains the given geographical bounds with the maximum zoom level possible
  description: |-
    `fitBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <`[`fitBounds options`](#fitbounds-options)`> `*`options?`*`)`

    `this`

    Sets a map view that contains the given geographical bounds with the maximum zoom level possible.
- name: 'Map methods: fitWorld'
  id: index#map-fitworld
  summary: Sets a map view that mostly contains the whole world with the maximum zoom level possible
  description: |-
    `fitWorld(<`[`fitBounds options`](#fitbounds-options)`> `*`options?`*`)`

    `this`

    Sets a map view that mostly contains the whole world with the maximum zoom level possible.
- name: 'Map methods: flyTo'
  id: index#map-flyto
  summary: Sets the view of the map (geographical center and zoom) performing a smooth pan-zoom animation
  description: |-
    `flyTo(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number> `*`zoom?`*`, <`[`Zoom/pan options`](#zoom/pan-options)`> `*`options?`*`)`

    `this`

    Sets the view of the map (geographical center and zoom) performing a smooth pan-zoom animation.
- name: 'Map methods: flyToBounds'
  id: index#map-flytobounds
  summary: Sets the view of the map with a smooth animation like flyTo, but takes a bounds parameter like fitBounds
  description: |-
    `flyToBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <`[`fitBounds options`](#fitbounds-options)`> `*`options?`*`)`

    `this`

    Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto), but takes a bounds parameter like [`fitBounds`](#map-fitbounds).
- name: 'Map methods: getBounds'
  id: index#map-getbounds
  summary: null
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the geographical bounds visible in the current map view
- name: 'Map methods: getBoundsZoom'
  id: index#map-getboundszoom
  summary: Returns the maximum zoom level on which the given bounds fit to the map view in its entirety
  description: |-
    `getBoundsZoom(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <Boolean> `*`inside?`*`, <`[`Point`](#point)`> `*`padding?`*`)`

    `Number`

    Returns the maximum zoom level on which the given bounds fit to the map view in its entirety. If `inside` (optional) is set to `true`, the method instead returns the minimum zoom level on which the map view fits into the given bounds in its entirety.
- name: 'Map methods: getCenter'
  id: index#map-getcenter
  summary: null
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the geographical center of the map view
- name: 'Map methods: getContainer'
  id: index#map-getcontainer
  summary: Returns the HTML element that contains the map
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTML element that contains the map.
- name: 'Map methods: getMaxZoom'
  id: index#map-getmaxzoom
  summary: Returns the maximum zoom level of the map (if set in the maxZoom option of the map or of any layers)
  description: |-
    `getMaxZoom()`

    `Number`

    Returns the maximum zoom level of the map (if set in the `maxZoom` option of the map or of any layers).
- name: 'Map methods: getMinZoom'
  id: index#map-getminzoom
  summary: Returns the minimum zoom level of the map (if set in the minZoom option of the map or of any layers), or 0 by default
  description: |-
    `getMinZoom()`

    `Number`

    Returns the minimum zoom level of the map (if set in the `minZoom` option of the map or of any layers), or `0` by default.
- name: 'Map methods: getPane'
  id: index#map-getpane
  summary: Returns a map pane, given its name or its HTML element (its identity)
  description: |-
    `getPane(<String|HTMLElement> `*`pane`*`)`

    `HTMLElement`

    Returns a [map pane](#map-pane), given its name or its HTML element (its identity).
- name: 'Map methods: getPanes'
  id: index#map-getpanes
  summary: Returns a plain object containing the names of all panes as keys and the panes as values
  description: |-
    `getPanes()`

    `Object`

    Returns a plain object containing the names of all [panes](#map-pane) as keys and the panes as values.
- name: 'Map methods: getPixelBounds'
  id: index#map-getpixelbounds
  summary: Returns the bounds of the current map view in projected pixel coordinates (sometimes useful in layer and overlay implementations)
  description: |-
    `getPixelBounds()`

    ` `[`Bounds`](#bounds)` `

    Returns the bounds of the current map view in projected pixel coordinates (sometimes useful in layer and overlay implementations).
- name: 'Map methods: getPixelOrigin'
  id: index#map-getpixelorigin
  summary: Returns the projected pixel coordinates of the top left point of the map layer (useful in custom layer and overlay implementations)
  description: |-
    `getPixelOrigin()`

    ` `[`Point`](#point)` `

    Returns the projected pixel coordinates of the top left point of the map layer (useful in custom layer and overlay implementations).
- name: 'Map methods: getPixelWorldBounds'
  id: index#map-getpixelworldbounds
  summary: Returns the world's bounds in pixel coordinates for zoom level zoom
  description: |-
    `getPixelWorldBounds(<Number> `*`zoom?`*`)`

    ` `[`Bounds`](#bounds)` `

    Returns the world's bounds in pixel coordinates for zoom level `zoom`. If `zoom` is omitted, the map's current zoom level is used.

    #### Conversion Methods

    Method

    Returns

    Description
- name: 'Map methods: getRenderer'
  id: index#map-getrenderer
  summary: Returns the instance of Renderer that should be used to render the given Path
  description: |-
    `getRenderer(<`[`Path`](#path)`> `*`layer`*`)`

    ` `[`Renderer`](#renderer)` `

    Returns the instance of [`Renderer`](#renderer) that should be used to render the given [`Path`](#path). It will ensure that the `renderer` options of the map and paths are respected, and that the renderers do exist on the map.

    #### Methods for Layers and Controls

    Method

    Returns

    Description
- name: 'Map methods: getScaleZoom'
  id: index#map-getscalezoom
  summary: Returns the zoom level that the map would end up at, if it is at fromZoom level and everything is scaled by a factor of scale
  description: |-
    `getScaleZoom(<Number> `*`scale`*`, <Number> `*`fromZoom`*`)`

    `Number`

    Returns the zoom level that the map would end up at, if it is at `fromZoom` level and everything is scaled by a factor of `scale`. Inverse of [`getZoomScale`](#map-getZoomScale).
- name: 'Map methods: getSize'
  id: index#map-getsize
  summary: Returns the current size of the map container (in pixels)
  description: |-
    `getSize()`

    ` `[`Point`](#point)` `

    Returns the current size of the map container (in pixels).
- name: 'Map methods: getZoom'
  id: index#map-getzoom
  summary: null
  description: |-
    `getZoom()`

    `Number`

    Returns the current zoom level of the map view
- name: 'Map methods: getZoomScale'
  id: index#map-getzoomscale
  summary: Returns the scale factor to be applied to a map transition from zoom level fromZoom to toZoom
  description: |-
    `getZoomScale(<Number> `*`toZoom`*`, <Number> `*`fromZoom`*`)`

    `Number`

    Returns the scale factor to be applied to a map transition from zoom level `fromZoom` to `toZoom`. Used internally to help with zoom animations.
- name: 'Map methods: hasEventListeners'
  id: index#map-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)

    ### Properties

    #### Controls

    Property

    Type

    Description
- name: 'Map methods: hasLayer'
  id: index#map-haslayer
  summary: null
  description: |-
    `hasLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `Boolean`

    Returns `true` if the given layer is currently added to the map
- name: 'Map methods: invalidateSize'
  id: index#map-invalidatesize
  summary: Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically, also animating pan by default
  description: |-
    `invalidateSize(<`[`Zoom/pan options`](#zoom/pan-options)`> `*`options`*`)`

    `this`

    Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically, also animating pan by default. If `options.pan` is `false`, panning will not occur. If `options.debounceMoveend` is `true`, it will delay `moveend` event so that it doesn't happen often even if the method is called many times in a row.

    `invalidateSize(<Boolean> `*`animate`*`)`

    `this`

    Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically, also animating pan by default.
- name: 'Map methods: latLngToContainerPoint'
  id: index#map-latlngtocontainerpoint
  summary: Given a geographical coordinate, returns the corresponding pixel coordinate relative to the map container
  description: |-
    `latLngToContainerPoint(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`Point`](#point)` `

    Given a geographical coordinate, returns the corresponding pixel coordinate relative to the map container.
- name: 'Map methods: latLngToLayerPoint'
  id: index#map-latlngtolayerpoint
  summary: Given a geographical coordinate, returns the corresponding pixel coordinate relative to the origin pixel
  description: |-
    `latLngToLayerPoint(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`Point`](#point)` `

    Given a geographical coordinate, returns the corresponding pixel coordinate relative to the [origin pixel](#map-getpixelorigin).
- name: 'Map methods: layerPointToContainerPoint'
  id: index#map-layerpointtocontainerpoint
  summary: Given a pixel coordinate relative to the origin pixel, returns the corresponding pixel coordinate relative to the map container
  description: |-
    `layerPointToContainerPoint(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`Point`](#point)` `

    Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin), returns the corresponding pixel coordinate relative to the map container.
- name: 'Map methods: layerPointToLatLng'
  id: index#map-layerpointtolatlng
  summary: Given a pixel coordinate relative to the origin pixel, returns the corresponding geographical coordinate (for the current zoom level)
  description: |-
    `layerPointToLatLng(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`LatLng`](#latlng)` `

    Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin), returns the corresponding geographical coordinate (for the current zoom level).
- name: 'Map methods: listens'
  id: index#map-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Map methods: locate'
  id: index#map-locate
  summary: Tries to locate the user using the Geolocation API, firing a locationfound event with location data on success or a locationerror event on failure, and optionally sets the map view to the user's location with respect to detection accuracy (or to the world view if geolocation failed)
  description: |-
    `locate(<`[`Locate options`](#locate-options)`> `*`options?`*`)`

    `this`

    Tries to locate the user using the Geolocation API, firing a [`locationfound`](#map-locationfound) event with location data on success or a [`locationerror`](#map-locationerror) event on failure, and optionally sets the map view to the user's location with respect to detection accuracy (or to the world view if geolocation failed). Note that, if your page doesn't use HTTPS, this method will fail in modern browsers ([Chrome 50 and newer](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins)) See [`Locate options`](#locate-options) for more details.
- name: 'Map methods: mouseEventToContainerPoint'
  id: index#map-mouseeventtocontainerpoint
  summary: Given a MouseEvent object, returns the pixel coordinate relative to the map container where the event took place
  description: |-
    `mouseEventToContainerPoint(<`[`MouseEvent`](#mouseevent)`> `*`ev`*`)`

    ` `[`Point`](#point)` `

    Given a MouseEvent object, returns the pixel coordinate relative to the map container where the event took place.
- name: 'Map methods: mouseEventToLatLng'
  id: index#map-mouseeventtolatlng
  summary: Given a MouseEvent object, returns geographical coordinate where the event took place
  description: |-
    `mouseEventToLatLng(<`[`MouseEvent`](#mouseevent)`> `*`ev`*`)`

    ` `[`LatLng`](#latlng)` `

    Given a MouseEvent object, returns geographical coordinate where the event took place.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Map methods: mouseEventToLayerPoint'
  id: index#map-mouseeventtolayerpoint
  summary: Given a MouseEvent object, returns the pixel coordinate relative to the origin pixel where the event took place
  description: |-
    `mouseEventToLayerPoint(<`[`MouseEvent`](#mouseevent)`> `*`ev`*`)`

    ` `[`Point`](#point)` `

    Given a MouseEvent object, returns the pixel coordinate relative to the [origin pixel](#map-getpixelorigin) where the event took place.
- name: 'Map methods: off'
  id: index#map-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Map methods: on'
  id: index#map-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Map methods: once'
  id: index#map-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Map methods: openPopup'
  id: index#map-openpopup
  summary: Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability)
  description: |-
    `openPopup(<`[`Popup`](#popup)`> `*`popup`*`)`

    `this`

    Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).

    `openPopup(<String|HTMLElement> `*`content`*`, <`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Creates a popup with the specified content and options and opens it in the given point on a map.
- name: 'Map methods: openTooltip'
  id: index#map-opentooltip
  summary: Opens the specified tooltip
  description: |-
    `openTooltip(<`[`Tooltip`](#tooltip)`> `*`tooltip`*`)`

    `this`

    Opens the specified tooltip.

    `openTooltip(<String|HTMLElement> `*`content`*`, <`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Creates a tooltip with the specified content and options and open it.
- name: 'Map methods: panBy'
  id: index#map-panby
  summary: Pans the map by a given number of pixels (animated)
  description: |-
    `panBy(<`[`Point`](#point)`> `*`offset`*`, <`[`Pan options`](#pan-options)`> `*`options?`*`)`

    `this`

    Pans the map by a given number of pixels (animated).
- name: 'Map methods: panInside'
  id: index#map-paninside
  summary: Pans the map the minimum amount to make the latlng visible
  description: |-
    `panInside(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`padding options`](#padding-options)`> `*`options?`*`)`

    `this`

    Pans the map the minimum amount to make the `latlng` visible. Use padding options to fit the display to more restricted bounds. If `latlng` is already within the (optionally padded) display bounds, the map will not be panned.
- name: 'Map methods: panInsideBounds'
  id: index#map-paninsidebounds
  summary: Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any
  description: |-
    `panInsideBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <`[`Pan options`](#pan-options)`> `*`options?`*`)`

    `this`

    Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any.
- name: 'Map methods: panTo'
  id: index#map-panto
  summary: Pans the map to a given center
  description: |-
    `panTo(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Pan options`](#pan-options)`> `*`options?`*`)`

    `this`

    Pans the map to a given center.
- name: 'Map methods: project'
  id: index#map-project
  summary: Projects a geographical coordinate LatLng according to the projection of the map's CRS, then scales it according to zoom and the CRS's Transformation
  description: |-
    `project(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number> `*`zoom`*`)`

    ` `[`Point`](#point)` `

    Projects a geographical coordinate [`LatLng`](#latlng) according to the projection of the map's CRS, then scales it according to `zoom` and the CRS's [`Transformation`](#transformation). The result is pixel coordinate relative to the CRS origin.
- name: 'Map methods: remove'
  id: index#map-remove
  summary: Destroys the map and clears all related event listeners
  description: |-
    `remove()`

    `this`

    Destroys the map and clears all related event listeners.
- name: 'Map methods: removeControl'
  id: index#map-removecontrol
  summary: null
  description: |-
    `removeControl(<`[`Control`](#control)`> `*`control`*`)`

    `this`

    Removes the given control from the map
- name: 'Map methods: removeEventListener'
  id: index#map-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Map methods: removeEventParent'
  id: index#map-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Map methods: removeLayer'
  id: index#map-removelayer
  summary: Removes the given layer from the map
  description: |-
    `removeLayer(<`[`Layer`](#layer)`> `*`layer`*`)`

    `this`

    Removes the given layer from the map.
- name: 'Map methods: setMaxBounds'
  id: index#map-setmaxbounds
  summary: Restricts the map view to the given bounds (see the maxBounds option)
  description: |-
    `setMaxBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    `this`

    Restricts the map view to the given bounds (see the [maxBounds](#map-maxbounds) option).
- name: 'Map methods: setMaxZoom'
  id: index#map-setmaxzoom
  summary: Sets the upper limit for the available zoom levels (see the maxZoom option)
  description: |-
    `setMaxZoom(<Number> `*`zoom`*`)`

    `this`

    Sets the upper limit for the available zoom levels (see the [maxZoom](#map-maxzoom) option).
- name: 'Map methods: setMinZoom'
  id: index#map-setminzoom
  summary: Sets the lower limit for the available zoom levels (see the minZoom option)
  description: |-
    `setMinZoom(<Number> `*`zoom`*`)`

    `this`

    Sets the lower limit for the available zoom levels (see the [minZoom](#map-minzoom) option).
- name: 'Map methods: setView'
  id: index#map-setview
  summary: Sets the view of the map (geographical center and zoom) with the given animation options
  description: |-
    `setView(<`[`LatLng`](#latlng)`> `*`center`*`, <Number> `*`zoom`*`, <`[`Zoom/pan options`](#zoom/pan-options)`> `*`options?`*`)`

    `this`

    Sets the view of the map (geographical center and zoom) with the given animation options.
- name: 'Map methods: setZoom'
  id: index#map-setzoom
  summary: Sets the zoom of the map
  description: |-
    `setZoom(<Number> `*`zoom`*`, <`[`Zoom/pan options`](#zoom/pan-options)`> `*`options?`*`)`

    `this`

    Sets the zoom of the map.
- name: 'Map methods: setZoomAround'
  id: index#map-setzoomaround
  summary: Zooms the map while keeping a specified geographical point on the map stationary (e.g
  description: |-
    `setZoomAround(<`[`LatLng`](#latlng)`> `*`latlng`*`, <Number> `*`zoom`*`, <`[`Zoom options`](#zoom-options)`> `*`options`*`)`

    `this`

    Zooms the map while keeping a specified geographical point on the map stationary (e.g. used internally for scroll zoom and double-click zoom).

    `setZoomAround(<`[`Point`](#point)`> `*`offset`*`, <Number> `*`zoom`*`, <`[`Zoom options`](#zoom-options)`> `*`options`*`)`

    `this`

    Zooms the map while keeping a specified pixel on the map (relative to the top-left corner) stationary.
- name: 'Map methods: stop'
  id: index#map-stop
  summary: Stops the currently running panTo or flyTo animation, if any
  description: |-
    `stop()`

    `this`

    Stops the currently running `panTo` or `flyTo` animation, if any.

    #### Geolocation methods

    Method

    Returns

    Description
- name: 'Map methods: stopLocate'
  id: index#map-stoplocate
  summary: null
  description: |-
    `stopLocate()`

    `this`

    Stops watching location previously initiated by `map.locate({watch: true})` and aborts resetting the map view if map.locate was called with `{setView: true}`.

    #### Other Methods

    Method

    Returns

    Description
- name: 'Map methods: unproject'
  id: index#map-unproject
  summary: Inverse of project
  description: |-
    `unproject(<`[`Point`](#point)`> `*`point`*`, <Number> `*`zoom`*`)`

    ` `[`LatLng`](#latlng)` `

    Inverse of [`project`](#map-project).
- name: 'Map methods: whenReady'
  id: index#map-whenready
  summary: Runs the given function fn when the map gets initialized with a view (center and zoom) and at least one layer, or immediately if it's already initialized, optionally passing a function context
  description: |-
    `whenReady(<Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Runs the given function `fn` when the map gets initialized with a view (center and zoom) and at least one layer, or immediately if it's already initialized, optionally passing a function context.

    #### Methods for Getting Map State

    Method

    Returns

    Description
- name: 'Map methods: wrapLatLng'
  id: index#map-wraplatlng
  summary: Returns a LatLng where lat and lng has been wrapped according to the map's CRS's wrapLat and wrapLng properties, if they are outside the CRS's bounds
  description: |-
    `wrapLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`LatLng`](#latlng)` `

    Returns a [`LatLng`](#latlng) where `lat` and `lng` has been wrapped according to the map's CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds. By default this means longitude is wrapped around the dateline so its value is between -180 and +180 degrees.
- name: 'Map methods: wrapLatLngBounds'
  id: index#map-wraplatlngbounds
  summary: Returns a LatLngBounds with the same size as the given one, ensuring that its center is within the CRS's bounds
  description: |-
    `wrapLatLngBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns a [`LatLngBounds`](#latlngbounds) with the same size as the given one, ensuring that its center is within the CRS's bounds. By default this means the center longitude is wrapped around the dateline so its value is between -180 and +180 degrees, and the majority of the bounds overlaps the CRS's bounds.
- name: 'Map methods: zoomIn'
  id: index#map-zoomin
  summary: Increases the zoom of the map by delta (zoomDelta by default)
  description: |-
    `zoomIn(<Number> `*`delta?`*`, <`[`Zoom options`](#zoom-options)`> `*`options?`*`)`

    `this`

    Increases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).
- name: 'Map methods: zoomOut'
  id: index#map-zoomout
  summary: Decreases the zoom of the map by delta (zoomDelta by default)
  description: |-
    `zoomOut(<Number> `*`delta?`*`, <`[`Zoom options`](#zoom-options)`> `*`options?`*`)`

    `this`

    Decreases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).
- name: 'Map options: attributionControl'
  id: index#map-attributioncontrol
  summary: Whether a attribution control is added to the map by default
  description: |-
    `attributionControl`

    `Boolean`

    `true`

    Whether a [attribution control](#control-attribution) is added to the map by default.
- name: 'Map options: bounceAtZoomLimits'
  id: index#map-bounceatzoomlimits
  summary: Set it to false if you don't want the map to zoom beyond min/max zoom and then bounce back when pinch-zooming
  description: |-
    `bounceAtZoomLimits`

    `Boolean`

    `true`

    Set it to false if you don't want the map to zoom beyond min/max zoom and then bounce back when pinch-zooming.

    #### Map State Options

    Option

    Type

    Default

    Description
- name: 'Map options: center'
  id: index#map-center
  summary: null
  description: |-
    `center`

    ` `[`LatLng`](#latlng)` `

    `undefined`

    Initial geographic center of the map
- name: 'Map options: closePopupOnClick'
  id: index#map-closepopuponclick
  summary: Set it to false if you don't want popups to close when user clicks the map
  description: |-
    `closePopupOnClick`

    `Boolean`

    `true`

    Set it to `false` if you don't want popups to close when user clicks the map.
- name: 'Map options: crs'
  id: index#map-crs
  summary: The Coordinate Reference System to use
  description: |-
    `crs`

    ` `[`CRS`](#crs)` `

    `L.CRS.EPSG3857`

    The [Coordinate Reference System](#crs) to use. Don't change this if you're not sure what it means.
- name: 'Map options: easeLinearity'
  id: index#map-easelinearity
  summary: null
  description: |-
    `easeLinearity`

    `Number`

    `0.2`
- name: 'Map options: fadeAnimation'
  id: index#map-fadeanimation
  summary: Whether the tile fade animation is enabled
  description: |-
    `fadeAnimation`

    `Boolean`

    `true`

    Whether the tile fade animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.
- name: 'Map options: inertia'
  id: index#map-inertia
  summary: If enabled, panning of the map will have an inertia effect where the map builds momentum while dragging and continues moving in the same direction for some time
  description: |-
    `inertia`

    `Boolean`

    `*`

    If enabled, panning of the map will have an inertia effect where the map builds momentum while dragging and continues moving in the same direction for some time. Feels especially nice on touch devices. Enabled by default.
- name: 'Map options: inertiaDeceleration'
  id: index#map-inertiadeceleration
  summary: null
  description: |-
    `inertiaDeceleration`

    `Number`

    `3000`

    The rate with which the inertial movement slows down, in pixels/second².
- name: 'Map options: inertiaMaxSpeed'
  id: index#map-inertiamaxspeed
  summary: Max speed of the inertial movement, in pixels/second
  description: |-
    `inertiaMaxSpeed`

    `Number`

    `Infinity`

    Max speed of the inertial movement, in pixels/second.
- name: 'Map options: keyboardPanDelta'
  id: index#map-keyboardpandelta
  summary: Amount of pixels to pan when pressing an arrow key
  description: |-
    `keyboardPanDelta`

    `Number`

    `80`

    Amount of pixels to pan when pressing an arrow key.

    #### Mouse wheel options

    Option

    Type

    Default

    Description
- name: 'Map options: layers'
  id: index#map-layers
  summary: null
  description: |-
    `layers`

    `Layer[]`

    `[]`

    Array of layers that will be added to the map initially
- name: 'Map options: markerZoomAnimation'
  id: index#map-markerzoomanimation
  summary: Whether markers animate their zoom with the zoom animation, if disabled they will disappear for the length of the animation
  description: |-
    `markerZoomAnimation`

    `Boolean`

    `true`

    Whether markers animate their zoom with the zoom animation, if disabled they will disappear for the length of the animation. By default it's enabled in all browsers that support CSS3 Transitions except Android.
- name: 'Map options: maxBounds'
  id: index#map-maxbounds
  summary: When this option is set, the map restricts the view to the given geographical bounds, bouncing the user back if the user tries to pan outside the view
  description: |-
    `maxBounds`

    ` `[`LatLngBounds`](#latlngbounds)` `

    `null`

    When this option is set, the map restricts the view to the given geographical bounds, bouncing the user back if the user tries to pan outside the view. To set the restriction dynamically, use [`setMaxBounds`](#map-setmaxbounds) method.
- name: 'Map options: maxBoundsViscosity'
  id: index#map-maxboundsviscosity
  summary: If maxBounds is set, this option will control how solid the bounds are when dragging the map around
  description: |-
    `maxBoundsViscosity`

    `Number`

    `0.0`

    If `maxBounds` is set, this option will control how solid the bounds are when dragging the map around. The default value of `0.0` allows the user to drag outside the bounds at normal speed, higher values will slow down map dragging outside bounds, and `1.0` makes the bounds fully solid, preventing the user from dragging outside the bounds.

    #### Keyboard Navigation Options

    Option

    Type

    Default

    Description
- name: 'Map options: maxZoom'
  id: index#map-maxzoom
  summary: Maximum zoom level of the map
  description: |-
    `maxZoom`

    `Number`

    `*`

    Maximum zoom level of the map. If not specified and at least one [`GridLayer`](#gridlayer) or [`TileLayer`](#tilelayer) is in the map, the highest of their `maxZoom` options will be used instead.
- name: 'Map options: minZoom'
  id: index#map-minzoom
  summary: Minimum zoom level of the map
  description: |-
    `minZoom`

    `Number`

    `*`

    Minimum zoom level of the map. If not specified and at least one [`GridLayer`](#gridlayer) or [`TileLayer`](#tilelayer) is in the map, the lowest of their `minZoom` options will be used instead.
- name: 'Map options: preferCanvas'
  id: index#map-prefercanvas
  summary: Whether Paths should be rendered on a Canvas renderer
  description: |-
    `preferCanvas`

    `Boolean`

    `false`

    Whether [`Path`](#path)s should be rendered on a [`Canvas`](#canvas) renderer. By default, all [`Path`](#path)s are rendered in a [`SVG`](#svg) renderer.

    #### Control options

    Option

    Type

    Default

    Description
- name: 'Map options: renderer'
  id: index#map-renderer
  summary: The default method for drawing vector layers on the map
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    `*`

    The default method for drawing vector layers on the map. [`L.SVG`](#svg) or [`L.Canvas`](#canvas) by default depending on browser support.

    #### Animation Options

    Option

    Type

    Default

    Description
- name: 'Map options: tapTolerance'
  id: index#map-taptolerance
  summary: The max number of pixels a user can shift his finger during touch for it to be considered a valid tap
  description: |-
    `tapTolerance`

    `Number`

    `15`

    The max number of pixels a user can shift his finger during touch for it to be considered a valid tap.
- name: 'Map options: trackResize'
  id: index#map-trackresize
  summary: Whether the map automatically handles browser window resize to update itself
  description: |-
    `trackResize`

    `Boolean`

    `true`

    Whether the map automatically handles browser window resize to update itself.

    #### Panning Inertia Options

    Option

    Type

    Default

    Description
- name: 'Map options: transform3DLimit'
  id: index#map-transform3dlimit
  summary: Defines the maximum size of a CSS translation transform
  description: |-
    `transform3DLimit`

    `Number`

    `2^23`

    Defines the maximum size of a CSS translation transform. The default value should not be changed unless a web browser positions layers in the wrong place after doing a large `panBy`.

    ### Events

    #### Layer events

    Event

    Data

    Description
- name: 'Map options: wheelDebounceTime'
  id: index#map-wheeldebouncetime
  summary: Limits the rate at which a wheel can fire (in milliseconds)
  description: |-
    `wheelDebounceTime`

    `Number`

    `40`

    Limits the rate at which a wheel can fire (in milliseconds). By default user can't zoom via wheel more often than once per 40 ms.
- name: 'Map options: wheelPxPerZoomLevel'
  id: index#map-wheelpxperzoomlevel
  summary: How many scroll pixels (as reported by L.DomEvent.getWheelDelta) mean a change of one full zoom level
  description: |-
    `wheelPxPerZoomLevel`

    `Number`

    `60`

    How many scroll pixels (as reported by [L.DomEvent.getWheelDelta](#domevent-getwheeldelta)) mean a change of one full zoom level. Smaller values will make wheel-zooming faster (and vice versa).

    #### Touch interaction options

    Option

    Type

    Default

    Description
- name: 'Map options: worldCopyJump'
  id: index#map-worldcopyjump
  summary: With this option enabled, the map tracks when you pan to another "copy" of the world and seamlessly jumps to the original one so that all overlays like markers and vector layers are still visible
  description: |-
    `worldCopyJump`

    `Boolean`

    `false`

    With this option enabled, the map tracks when you pan to another "copy" of the world and seamlessly jumps to the original one so that all overlays like markers and vector layers are still visible.
- name: 'Map options: zoomAnimation'
  id: index#map-zoomanimation
  summary: Whether the map zoom animation is enabled
  description: |-
    `zoomAnimation`

    `Boolean`

    `true`

    Whether the map zoom animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.
- name: 'Map options: zoomAnimationThreshold'
  id: index#map-zoomanimationthreshold
  summary: Won't animate zoom if the zoom difference exceeds this value
  description: |-
    `zoomAnimationThreshold`

    `Number`

    `4`

    Won't animate zoom if the zoom difference exceeds this value.
- name: 'Map options: zoomDelta'
  id: index#map-zoomdelta
  summary: Controls how much the map's zoom level will change after a zoomIn(), zoomOut(), pressing + or - on the keyboard, or using the zoom controls
  description: |-
    `zoomDelta`

    `Number`

    `1`

    Controls how much the map's zoom level will change after a [`zoomIn()`](#map-zoomin), [`zoomOut()`](#map-zoomout), pressing `+` or `-` on the keyboard, or using the [zoom controls](#control-zoom). Values smaller than `1` (e.g. `0.5`) allow for greater granularity.
- name: 'Map options: zoomSnap'
  id: index#map-zoomsnap
  summary: Forces the map's zoom level to always be a multiple of this, particularly right after a fitBounds() or a pinch-zoom
  description: |-
    `zoomSnap`

    `Number`

    `1`

    Forces the map's zoom level to always be a multiple of this, particularly right after a [`fitBounds()`](#map-fitbounds) or a pinch-zoom. By default, the zoom level snaps to the nearest integer; lower values (e.g. `0.5` or `0.1`) allow for greater granularity. A value of `0` means the zoom level will not be snapped after `fitBounds` or a pinch-zoom.
- name: Marker
  id: index#marker
  summary: L.Marker is used to display clickable/draggable icons on the map
  description: |-
    ## Marker

    L.Marker is used to display clickable/draggable icons on the map. Extends [`Layer`](#layer).

    ### Usage example

    ``` javascript
    L.marker([50.5, 30.5]).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'Marker creation: L.marker'
  id: index#marker-l-marker
  summary: Instantiates a Marker object given a geographical point and optionally an options object
  description: |-
    `L.marker(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Marker options`](#marker-option)`> `*`options?`*`)`

    Instantiates a Marker object given a geographical point and optionally an options object.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Marker events: add'
  id: index#marker-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Marker events: click'
  id: index#marker-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Marker events: contextmenu'
  id: index#marker-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Marker events: dblclick'
  id: index#marker-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Marker events: drag'
  id: index#marker-drag
  summary: Fired repeatedly while the user drags the marker
  description: |-
    `drag`

    ` `[`Event`](#event)` `

    Fired repeatedly while the user drags the marker.
- name: 'Marker events: dragend'
  id: index#marker-dragend
  summary: Fired when the user stops dragging the marker
  description: |-
    `dragend`

    ` `[`DragEndEvent`](#dragendevent)` `

    Fired when the user stops dragging the marker.
- name: 'Marker events: dragstart'
  id: index#marker-dragstart
  summary: Fired when the user starts dragging the marker
  description: |-
    `dragstart`

    ` `[`Event`](#event)` `

    Fired when the user starts dragging the marker.
- name: 'Marker events: mousedown'
  id: index#marker-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Marker events: mouseout'
  id: index#marker-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Marker events: mouseover'
  id: index#marker-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Marker events: mouseup'
  id: index#marker-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Marker events: move'
  id: index#marker-move
  summary: Fired when the marker is moved via setLatLng or by dragging
  description: |-
    `move`

    ` `[`Event`](#event)` `

    Fired when the marker is moved via [`setLatLng`](#marker-setlatlng) or by [dragging](#marker-dragging). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

    #### Dragging events

    Event

    Data

    Description
- name: 'Marker events: moveend'
  id: index#marker-moveend
  summary: Fired when the marker stops moving (because of dragging)
  description: |-
    `moveend`

    ` `[`Event`](#event)` `

    Fired when the marker stops moving (because of dragging).

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Marker events: movestart'
  id: index#marker-movestart
  summary: Fired when the marker starts moving (because of dragging)
  description: |-
    `movestart`

    ` `[`Event`](#event)` `

    Fired when the marker starts moving (because of dragging).
- name: 'Marker events: popupclose'
  id: index#marker-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Marker events: popupopen'
  id: index#marker-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Marker events: tooltipclose'
  id: index#marker-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    In addition to [shared layer methods](#layer) like `addTo()` and `remove()` and [popup methods](#popup) like bindPopup() you can also use the following methods:

    Method

    Returns

    Description
- name: 'Marker events: tooltipopen'
  id: index#marker-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Marker methods: addEventListener'
  id: index#marker-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Marker methods: addEventParent'
  id: index#marker-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Marker methods: addOneTimeEventListener'
  id: index#marker-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Marker methods: addTo'
  id: index#marker-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Marker methods: bindPopup'
  id: index#marker-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Marker methods: bindTooltip'
  id: index#marker-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Marker methods: clearAllEventListeners'
  id: index#marker-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Marker methods: closePopup'
  id: index#marker-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Marker methods: closeTooltip'
  id: index#marker-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Marker methods: fire'
  id: index#marker-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Marker methods: fireEvent'
  id: index#marker-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Marker methods: getAttribution'
  id: index#marker-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Marker methods: getIcon'
  id: index#marker-geticon
  summary: null
  description: |-
    `getIcon()`

    ` `[`Icon`](#icon)` `

    Returns the current icon used by the marker
- name: 'Marker methods: getLatLng'
  id: index#marker-getlatlng
  summary: Returns the current geographical position of the marker
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the current geographical position of the marker.
- name: 'Marker methods: getPane'
  id: index#marker-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Marker methods: getPopup'
  id: index#marker-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Marker methods: getTooltip'
  id: index#marker-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Marker methods: hasEventListeners'
  id: index#marker-haseventlisteners
  summary: Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see Handler methods)
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)

    ### Properties

    #### Interaction handlers

    Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see [`Handler`](#handler) methods). Example:

    ``` javascript
    marker.dragging.disable();
    ```

    Property

    Type

    Description
- name: 'Marker methods: isPopupOpen'
  id: index#marker-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Marker methods: isTooltipOpen'
  id: index#marker-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Marker methods: listens'
  id: index#marker-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Marker methods: off'
  id: index#marker-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Marker methods: on'
  id: index#marker-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Marker methods: once'
  id: index#marker-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Marker methods: openPopup'
  id: index#marker-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Marker methods: openTooltip'
  id: index#marker-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Marker methods: removeEventListener'
  id: index#marker-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Marker methods: removeEventParent'
  id: index#marker-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Marker methods: removeFrom'
  id: index#marker-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Marker methods: setIcon'
  id: index#marker-seticon
  summary: Changes the marker icon
  description: |-
    `setIcon(<`[`Icon`](#icon)`> `*`icon`*`)`

    `this`

    Changes the marker icon.
- name: 'Marker methods: setLatLng'
  id: index#marker-setlatlng
  summary: Changes the marker position to the given point
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `this`

    Changes the marker position to the given point.
- name: 'Marker methods: setOpacity'
  id: index#marker-setopacity
  summary: Changes the opacity of the marker
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Changes the opacity of the marker.

    #### Other methods

    Method

    Returns

    Description
- name: 'Marker methods: setPopupContent'
  id: index#marker-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Marker methods: setTooltipContent'
  id: index#marker-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Marker methods: setZIndexOffset'
  id: index#marker-setzindexoffset
  summary: Changes the zIndex offset of the marker
  description: |-
    `setZIndexOffset(<Number> `*`offset`*`)`

    `this`

    Changes the [zIndex offset](#marker-zindexoffset) of the marker.
- name: 'Marker methods: toGeoJSON'
  id: index#marker-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the marker (as a GeoJSON [`Point`](#point) Feature).

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Marker methods: togglePopup'
  id: index#marker-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Marker methods: toggleTooltip'
  id: index#marker-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Marker methods: unbindPopup'
  id: index#marker-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Marker methods: unbindTooltip'
  id: index#marker-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Marker options: alt'
  id: index#marker-alt
  summary: Text for the alt attribute of the icon image
  description: |-
    `alt`

    `String`

    `'Marker'`

    Text for the `alt` attribute of the icon image. [Useful for accessibility](https://leafletjs.com/examples/accessibility/#markers-must-be-labelled).
- name: 'Marker options: attribution'
  id: index#marker-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'Marker options: autoPan'
  id: index#marker-autopan
  summary: Whether to pan the map when dragging this marker near its edge or not
  description: |-
    `autoPan`

    `Boolean`

    `false`

    Whether to pan the map when dragging this marker near its edge or not.
- name: 'Marker options: autoPanOnFocus'
  id: index#marker-autopanonfocus
  summary: When true, the map will pan whenever the marker is focused (via e.g
  description: |-
    `autoPanOnFocus`

    `Boolean`

    `true`

    When `true`, the map will pan whenever the marker is focused (via e.g. pressing `tab` on the keyboard) to ensure the marker is visible within the map's bounds

    #### Draggable marker options

    Option

    Type

    Default

    Description
- name: 'Marker options: autoPanPadding'
  id: index#marker-autopanpadding
  summary: Distance (in pixels to the left/right and to the top/bottom) of the map edge to start panning the map
  description: |-
    `autoPanPadding`

    ` `[`Point`](#point)` `

    `Point(50, 50)`

    Distance (in pixels to the left/right and to the top/bottom) of the map edge to start panning the map.
- name: 'Marker options: autoPanSpeed'
  id: index#marker-autopanspeed
  summary: Number of pixels the map should pan by
  description: |-
    `autoPanSpeed`

    `Number`

    `10`

    Number of pixels the map should pan by.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Marker options: bubblingMouseEvents'
  id: index#marker-bubblingmouseevents
  summary: When true, a mouse event on this marker will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `false`

    When `true`, a mouse event on this marker will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Marker options: draggable'
  id: index#marker-draggable
  summary: Whether the marker is draggable with mouse/touch or not
  description: |-
    `draggable`

    `Boolean`

    `false`

    Whether the marker is draggable with mouse/touch or not.
- name: 'Marker options: icon'
  id: index#marker-icon
  summary: Icon instance to use for rendering the marker
  description: |-
    `icon`

    ` `[`Icon`](#icon)` `

    `*`

    Icon instance to use for rendering the marker. See [Icon documentation](#icon) for details on how to customize the marker icon. If not specified, a common instance of [`L.Icon.Default`](#icon-default) is used.
- name: 'Marker options: interactive'
  id: index#marker-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Marker options: keyboard'
  id: index#marker-keyboard
  summary: Whether the marker can be tabbed to with a keyboard and clicked by pressing enter
  description: |-
    `keyboard`

    `Boolean`

    `true`

    Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.
- name: 'Marker options: opacity'
  id: index#marker-opacity
  summary: The opacity of the marker
  description: |-
    `opacity`

    `Number`

    `1.0`

    The opacity of the marker.
- name: 'Marker options: pane'
  id: index#marker-pane
  summary: Map pane where the markers icon will be added
  description: |-
    `pane`

    `String`

    `'markerPane'`

    `Map pane` where the markers icon will be added.
- name: 'Marker options: riseOffset'
  id: index#marker-riseoffset
  summary: The z-index offset used for the riseOnHover feature
  description: |-
    `riseOffset`

    `Number`

    `250`

    The z-index offset used for the `riseOnHover` feature.
- name: 'Marker options: riseOnHover'
  id: index#marker-riseonhover
  summary: If true, the marker will get on top of others when you hover the mouse over it
  description: |-
    `riseOnHover`

    `Boolean`

    `false`

    If `true`, the marker will get on top of others when you hover the mouse over it.
- name: 'Marker options: shadowPane'
  id: index#marker-shadowpane
  summary: Map pane where the markers shadow will be added
  description: |-
    `shadowPane`

    `String`

    `'shadowPane'`

    `Map pane` where the markers shadow will be added.
- name: 'Marker options: title'
  id: index#marker-title
  summary: Text for the browser tooltip that appear on marker hover (no tooltip by default)
  description: |-
    `title`

    `String`

    `''`

    Text for the browser tooltip that appear on marker hover (no tooltip by default). [Useful for accessibility](https://leafletjs.com/examples/accessibility/#markers-must-be-labelled).
- name: 'Marker options: zIndexOffset'
  id: index#marker-zindexoffset
  summary: By default, marker images zIndex is set automatically based on its latitude
  description: |-
    `zIndexOffset`

    `Number`

    `0`

    By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like `1000` (or high negative value, respectively).
- name: 'Marker properties: dragging'
  id: index#marker-dragging
  summary: Marker dragging handler (by both mouse and touch)
  description: |-
    `dragging`

    ` `[`Handler`](#handler)` `

    Marker dragging handler (by both mouse and touch). Only valid when the marker is on the map (Otherwise set [`marker.options.draggable`](#marker-draggable)).
- name: noConflict
  id: index#noconflict
  summary: null
  description: |-
    ## noConflict

    This method restores the `L` global variable to the original value it had before Leaflet inclusion, and returns the real Leaflet namespace so you can put it elsewhere, like this:

    ``` html
    <script src='libs/l.js'>
    <!-- L points to some other library -->

    <script src='leaflet.js'>
    <!-- you include Leaflet, it replaces the L variable to Leaflet namespace -->

    <script>
    var Leaflet = L.noConflict();
    // now L points to that other library again, and you can use Leaflet.Map etc.
    </script>
    ```
- name: 'Padding options: padding'
  id: index#padding-options-padding
  summary: Equivalent of setting both top left and bottom right padding to the same value
  description: |-
    `padding`

    ` `[`Point`](#point)` `

    `[0, 0]`

    Equivalent of setting both top left and bottom right padding to the same value.

    ### FitBounds options

    Option

    Type

    Default

    Description
- name: 'Padding options: paddingBottomRight'
  id: index#padding-options-paddingbottomright
  summary: The same for the bottom right corner of the map
  description: |-
    `paddingBottomRight`

    ` `[`Point`](#point)` `

    `[0, 0]`

    The same for the bottom right corner of the map.
- name: 'Padding options: paddingTopLeft'
  id: index#padding-options-paddingtopleft
  summary: Sets the amount of padding in the top left corner of a map container that shouldn't be accounted for when setting the view to fit bounds
  description: |-
    `paddingTopLeft`

    ` `[`Point`](#point)` `

    `[0, 0]`

    Sets the amount of padding in the top left corner of a map container that shouldn't be accounted for when setting the view to fit bounds. Useful if you have some control overlays on the map like a sidebar and you don't want them to obscure objects you're zooming to.
- name: 'Pan options: animate'
  id: index#pan-options-animate
  summary: If true, panning will always be animated if possible
  description: |-
    `animate`

    `Boolean`

    If `true`, panning will always be animated if possible. If `false`, it will not animate panning, either resetting the map view if panning more than a screen away, or just setting a new offset for the map pane (except for `panBy` which always does the latter).
- name: 'Pan options: duration'
  id: index#pan-options-duration
  summary: Duration of animated panning, in seconds
  description: |-
    `duration`

    `Number`

    `0.25`

    Duration of animated panning, in seconds.
- name: 'Pan options: easeLinearity'
  id: index#pan-options-easelinearity
  summary: The curvature factor of panning animation easing (third parameter of the Cubic Bezier curve)
  description: |-
    `easeLinearity`

    `Number`

    `0.25`

    The curvature factor of panning animation easing (third parameter of the [Cubic Bezier curve](https://cubic-bezier.com/)). 1.0 means linear animation, and the smaller this number, the more bowed the curve.
- name: 'Pan options: noMoveStart'
  id: index#pan-options-nomovestart
  summary: If true, panning won't fire movestart event on start (used internally for panning inertia)
  description: |-
    `noMoveStart`

    `Boolean`

    `false`

    If `true`, panning won't fire `movestart` event on start (used internally for panning inertia).

    ### Zoom/pan options

    Options inherited from [Zoom options](#zoom-options)

    Option

    Type

    Default

    Description
- name: Path
  id: index#path
  summary: An abstract class that contains options and constants shared between vector overlays (Polygon, Polyline, Circle)
  description: |-
    ## Path

    An abstract class that contains options and constants shared between vector overlays (Polygon, Polyline, Circle). Do not use it directly. Extends [`Layer`](#layer).

    ### Options

    Option

    Type

    Default

    Description
- name: 'Path events: add'
  id: index#path-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Path events: click'
  id: index#path-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Path events: contextmenu'
  id: index#path-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Path events: dblclick'
  id: index#path-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Path events: mousedown'
  id: index#path-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Path events: mouseout'
  id: index#path-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Path events: mouseover'
  id: index#path-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Path events: mouseup'
  id: index#path-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Path events: popupclose'
  id: index#path-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Path events: popupopen'
  id: index#path-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Path events: tooltipclose'
  id: index#path-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Path events: tooltipopen'
  id: index#path-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Path methods: addEventListener'
  id: index#path-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Path methods: addEventParent'
  id: index#path-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Path methods: addOneTimeEventListener'
  id: index#path-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Path methods: addTo'
  id: index#path-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Path methods: bindPopup'
  id: index#path-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Path methods: bindTooltip'
  id: index#path-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Path methods: bringToBack'
  id: index#path-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Path methods: bringToFront'
  id: index#path-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'Path methods: clearAllEventListeners'
  id: index#path-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Path methods: closePopup'
  id: index#path-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Path methods: closeTooltip'
  id: index#path-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Path methods: fire'
  id: index#path-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Path methods: fireEvent'
  id: index#path-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Path methods: getAttribution'
  id: index#path-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Path methods: getPane'
  id: index#path-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Path methods: getPopup'
  id: index#path-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Path methods: getTooltip'
  id: index#path-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Path methods: hasEventListeners'
  id: index#path-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Path methods: isPopupOpen'
  id: index#path-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Path methods: isTooltipOpen'
  id: index#path-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Path methods: listens'
  id: index#path-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Path methods: off'
  id: index#path-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Path methods: on'
  id: index#path-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Path methods: once'
  id: index#path-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Path methods: openPopup'
  id: index#path-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Path methods: openTooltip'
  id: index#path-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Path methods: redraw'
  id: index#path-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'Path methods: removeEventListener'
  id: index#path-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Path methods: removeEventParent'
  id: index#path-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Path methods: removeFrom'
  id: index#path-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Path methods: setPopupContent'
  id: index#path-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Path methods: setStyle'
  id: index#path-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'Path methods: setTooltipContent'
  id: index#path-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Path methods: togglePopup'
  id: index#path-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Path methods: toggleTooltip'
  id: index#path-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Path methods: unbindPopup'
  id: index#path-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Path methods: unbindTooltip'
  id: index#path-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Path options: attribution'
  id: index#path-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Path options: bubblingMouseEvents'
  id: index#path-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Path options: className'
  id: index#path-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Path options: color'
  id: index#path-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'Path options: dashArray'
  id: index#path-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Path options: dashOffset'
  id: index#path-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Path options: fill'
  id: index#path-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'Path options: fillColor'
  id: index#path-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'Path options: fillOpacity'
  id: index#path-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'Path options: fillRule'
  id: index#path-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'Path options: interactive'
  id: index#path-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Path options: lineCap'
  id: index#path-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'Path options: lineJoin'
  id: index#path-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'Path options: opacity'
  id: index#path-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'Path options: pane'
  id: index#path-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Path options: renderer'
  id: index#path-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'Path options: stroke'
  id: index#path-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'Path options: weight'
  id: index#path-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: Point
  id: index#point
  summary: Represents a point with x and y coordinates in pixels
  description: |-
    ## Point

    Represents a point with `x` and `y` coordinates in pixels.

    ### Usage example

    ``` javascript
    var point = L.point(200, 300);
    ```

    All Leaflet methods and options that accept [`Point`](#point) objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:

    ``` javascript
    map.panBy([200, 300]);
    map.panBy(L.point(200, 300));
    ```

    Note that [`Point`](#point) does not inherit from Leaflet's [`Class`](#class) object, which means new classes can't inherit from it, and new methods can't be added to it with the `include` function.

    ### Creation

    Factory

    Description
- name: 'Point creation: L.point'
  id: index#point-l-point
  summary: Creates a Point object with the given x and y coordinates
  description: |-
    `L.point(<Number> `*`x`*`, <Number> `*`y`*`, <Boolean> `*`round?`*`)`

    Creates a Point object with the given `x` and `y` coordinates. If optional `round` is set to true, rounds the `x` and `y` values.

    `L.point(<Number[]> `*`coords`*`)`

    Expects an array of the form `[x, y]` instead.

    `L.point(<Object> `*`coords`*`)`

    Expects a plain object of the form `{x: Number, y: Number}` instead.

    ### Methods

    Method

    Returns

    Description
- name: 'Point methods: add'
  id: index#point-add
  summary: Returns the result of addition of the current and the given points
  description: |-
    `add(<`[`Point`](#point)`> `*`otherPoint`*`)`

    ` `[`Point`](#point)` `

    Returns the result of addition of the current and the given points.
- name: 'Point methods: ceil'
  id: index#point-ceil
  summary: Returns a copy of the current point with ceiled coordinates (rounded up)
  description: |-
    `ceil()`

    ` `[`Point`](#point)` `

    Returns a copy of the current point with ceiled coordinates (rounded up).
- name: 'Point methods: clone'
  id: index#point-clone
  summary: Returns a copy of the current point
  description: |-
    `clone()`

    ` `[`Point`](#point)` `

    Returns a copy of the current point.
- name: 'Point methods: contains'
  id: index#point-contains
  summary: Returns true if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values)
  description: |-
    `contains(<`[`Point`](#point)`> `*`otherPoint`*`)`

    `Boolean`

    Returns `true` if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values).
- name: 'Point methods: distanceTo'
  id: index#point-distanceto
  summary: Returns the cartesian distance between the current and the given points
  description: |-
    `distanceTo(<`[`Point`](#point)`> `*`otherPoint`*`)`

    `Number`

    Returns the cartesian distance between the current and the given points.
- name: 'Point methods: divideBy'
  id: index#point-divideby
  summary: Returns the result of division of the current point by the given number
  description: |-
    `divideBy(<Number> `*`num`*`)`

    ` `[`Point`](#point)` `

    Returns the result of division of the current point by the given number.
- name: 'Point methods: equals'
  id: index#point-equals
  summary: Returns true if the given point has the same coordinates
  description: |-
    `equals(<`[`Point`](#point)`> `*`otherPoint`*`)`

    `Boolean`

    Returns `true` if the given point has the same coordinates.
- name: 'Point methods: floor'
  id: index#point-floor
  summary: Returns a copy of the current point with floored coordinates (rounded down)
  description: |-
    `floor()`

    ` `[`Point`](#point)` `

    Returns a copy of the current point with floored coordinates (rounded down).
- name: 'Point methods: multiplyBy'
  id: index#point-multiplyby
  summary: Returns the result of multiplication of the current point by the given number
  description: |-
    `multiplyBy(<Number> `*`num`*`)`

    ` `[`Point`](#point)` `

    Returns the result of multiplication of the current point by the given number.
- name: 'Point methods: round'
  id: index#point-round
  summary: Returns a copy of the current point with rounded coordinates
  description: |-
    `round()`

    ` `[`Point`](#point)` `

    Returns a copy of the current point with rounded coordinates.
- name: 'Point methods: scaleBy'
  id: index#point-scaleby
  summary: Multiply each coordinate of the current point by each coordinate of scale
  description: |-
    `scaleBy(<`[`Point`](#point)`> `*`scale`*`)`

    ` `[`Point`](#point)` `

    Multiply each coordinate of the current point by each coordinate of `scale`. In linear algebra terms, multiply the point by the [scaling matrix](https://en.wikipedia.org/wiki/Scaling_%28geometry%29#Matrix_representation) defined by `scale`.
- name: 'Point methods: subtract'
  id: index#point-subtract
  summary: Returns the result of subtraction of the given point from the current
  description: |-
    `subtract(<`[`Point`](#point)`> `*`otherPoint`*`)`

    ` `[`Point`](#point)` `

    Returns the result of subtraction of the given point from the current.
- name: 'Point methods: toString'
  id: index#point-tostring
  summary: Returns a string representation of the point for debugging purposes
  description: |-
    `toString()`

    `String`

    Returns a string representation of the point for debugging purposes.

    ### Properties

    Property

    Type

    Description
- name: 'Point methods: trunc'
  id: index#point-trunc
  summary: Returns a copy of the current point with truncated coordinates (rounded towards zero)
  description: |-
    `trunc()`

    ` `[`Point`](#point)` `

    Returns a copy of the current point with truncated coordinates (rounded towards zero).
- name: 'Point methods: unscaleBy'
  id: index#point-unscaleby
  summary: Inverse of scaleBy
  description: |-
    `unscaleBy(<`[`Point`](#point)`> `*`scale`*`)`

    ` `[`Point`](#point)` `

    Inverse of `scaleBy`. Divide each coordinate of the current point by each coordinate of `scale`.
- name: 'Point properties: x'
  id: index#point-x
  summary: null
  description: |-
    `x`

    `Number`

    The `x` coordinate of the point
- name: 'Point properties: y'
  id: index#point-y
  summary: null
  description: |-
    `y`

    `Number`

    The `y` coordinate of the point
- name: Polygon
  id: index#polygon
  summary: A class for drawing polygon overlays on a map
  description: |-
    ## Polygon

    A class for drawing polygon overlays on a map. Extends [`Polyline`](#polyline).

    Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.

    ### Usage example

    ``` javascript
    // create a red polygon from an array of LatLng points
    var latlngs = [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]];

    var polygon = L.polygon(latlngs, {color: 'red'}).addTo(map);

    // zoom the map to the polygon
    map.fitBounds(polygon.getBounds());
    ```

    You can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape:

    ``` javascript
    var latlngs = [
      [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
      [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
    ];
    ```

    Additionally, you can pass a multi-dimensional array to represent a MultiPolygon shape.

    ``` javascript
    var latlngs = [
      [ // first polygon
        [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
        [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
      ],
      [ // second polygon
        [[41, -111.03],[45, -111.04],[45, -104.05],[41, -104.05]]
      ]
    ];
    ```

    ### Creation

    Factory

    Description
- name: 'Polygon creation: L.polygon'
  id: index#polygon-l-polygon
  summary: null
  description: |-
    `L.polygon(<LatLng[]> `*`latlngs`*`, <`[`Polyline options`](#polyline-option)`> `*`options?`*`)`

    ### Options

    Options inherited from [Polyline](#polyline)

    Option

    Type

    Default

    Description
- name: 'Polygon events: add'
  id: index#polygon-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Polygon events: click'
  id: index#polygon-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Polygon events: contextmenu'
  id: index#polygon-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Polygon events: dblclick'
  id: index#polygon-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Polygon events: mousedown'
  id: index#polygon-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Polygon events: mouseout'
  id: index#polygon-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Polygon events: mouseover'
  id: index#polygon-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Polygon events: mouseup'
  id: index#polygon-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Polygon events: popupclose'
  id: index#polygon-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Polygon events: popupopen'
  id: index#polygon-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Polygon events: tooltipclose'
  id: index#polygon-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Polygon events: tooltipopen'
  id: index#polygon-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Polygon methods: addEventListener'
  id: index#polygon-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Polygon methods: addEventParent'
  id: index#polygon-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Polygon methods: addLatLng'
  id: index#polygon-addlatlng
  summary: Adds a given point to the polyline
  description: |-
    `addLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`, <LatLng[]> `*`latlngs?`*`)`

    `this`

    Adds a given point to the polyline. By default, adds to the first ring of the polyline in case of a multi-polyline, but can be overridden by passing a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

    Methods inherited from [Path](#path)

    Method

    Returns

    Description
- name: 'Polygon methods: addOneTimeEventListener'
  id: index#polygon-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Polygon methods: addTo'
  id: index#polygon-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Polygon methods: bindPopup'
  id: index#polygon-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Polygon methods: bindTooltip'
  id: index#polygon-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Polygon methods: bringToBack'
  id: index#polygon-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polygon methods: bringToFront'
  id: index#polygon-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'Polygon methods: clearAllEventListeners'
  id: index#polygon-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Polygon methods: closePopup'
  id: index#polygon-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Polygon methods: closestLayerPoint'
  id: index#polygon-closestlayerpoint
  summary: Returns the point closest to p on the Polyline
  description: |-
    `closestLayerPoint(<`[`Point`](#point)`> `*`p`*`)`

    ` `[`Point`](#point)` `

    Returns the point closest to `p` on the Polyline.
- name: 'Polygon methods: closeTooltip'
  id: index#polygon-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Polygon methods: fire'
  id: index#polygon-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Polygon methods: fireEvent'
  id: index#polygon-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Polygon methods: getAttribution'
  id: index#polygon-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polygon methods: getBounds'
  id: index#polygon-getbounds
  summary: Returns the LatLngBounds of the path
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the [`LatLngBounds`](#latlngbounds) of the path.
- name: 'Polygon methods: getCenter'
  id: index#polygon-getcenter
  summary: Returns the center (centroid) of the Polygon
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the Polygon.

    Methods inherited from [Polyline](#polyline)

    Method

    Returns

    Description
- name: 'Polygon methods: getLatLngs'
  id: index#polygon-getlatlngs
  summary: Returns an array of the points in the path, or nested arrays of points in case of multi-polyline
  description: |-
    `getLatLngs()`

    `LatLng[]`

    Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.
- name: 'Polygon methods: getPane'
  id: index#polygon-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Polygon methods: getPopup'
  id: index#polygon-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polygon methods: getTooltip'
  id: index#polygon-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Polygon methods: hasEventListeners'
  id: index#polygon-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Polygon methods: isEmpty'
  id: index#polygon-isempty
  summary: Returns true if the Polyline has no LatLngs
  description: |-
    `isEmpty()`

    `Boolean`

    Returns `true` if the Polyline has no LatLngs.
- name: 'Polygon methods: isPopupOpen'
  id: index#polygon-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Polygon methods: isTooltipOpen'
  id: index#polygon-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Polygon methods: listens'
  id: index#polygon-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Polygon methods: off'
  id: index#polygon-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Polygon methods: on'
  id: index#polygon-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Polygon methods: once'
  id: index#polygon-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Polygon methods: openPopup'
  id: index#polygon-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Polygon methods: openTooltip'
  id: index#polygon-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Polygon methods: redraw'
  id: index#polygon-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'Polygon methods: removeEventListener'
  id: index#polygon-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Polygon methods: removeEventParent'
  id: index#polygon-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Polygon methods: removeFrom'
  id: index#polygon-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Polygon methods: setLatLngs'
  id: index#polygon-setlatlngs
  summary: Replaces all the points in the polyline with the given array of geographical points
  description: |-
    `setLatLngs(<LatLng[]> `*`latlngs`*`)`

    `this`

    Replaces all the points in the polyline with the given array of geographical points.
- name: 'Polygon methods: setPopupContent'
  id: index#polygon-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Polygon methods: setStyle'
  id: index#polygon-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'Polygon methods: setTooltipContent'
  id: index#polygon-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Polygon methods: toGeoJSON'
  id: index#polygon-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the polygon (as a GeoJSON [`Polygon`](#polygon) or `MultiPolygon` Feature).
- name: 'Polygon methods: togglePopup'
  id: index#polygon-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Polygon methods: toggleTooltip'
  id: index#polygon-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Polygon methods: unbindPopup'
  id: index#polygon-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Polygon methods: unbindTooltip'
  id: index#polygon-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Polygon options: attribution'
  id: index#polygon-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Polygon options: bubblingMouseEvents'
  id: index#polygon-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Polygon options: className'
  id: index#polygon-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Polygon options: color'
  id: index#polygon-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'Polygon options: dashArray'
  id: index#polygon-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Polygon options: dashOffset'
  id: index#polygon-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Polygon options: fill'
  id: index#polygon-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'Polygon options: fillColor'
  id: index#polygon-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'Polygon options: fillOpacity'
  id: index#polygon-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'Polygon options: fillRule'
  id: index#polygon-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'Polygon options: interactive'
  id: index#polygon-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Polygon options: lineCap'
  id: index#polygon-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'Polygon options: lineJoin'
  id: index#polygon-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'Polygon options: noClip'
  id: index#polygon-noclip
  summary: Disable polyline clipping
  description: |-
    `noClip`

    `Boolean`

    `false`

    Disable polyline clipping.

    Options inherited from [Path](#path)

    Option

    Type

    Default

    Description
- name: 'Polygon options: opacity'
  id: index#polygon-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'Polygon options: pane'
  id: index#polygon-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Polygon options: renderer'
  id: index#polygon-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'Polygon options: smoothFactor'
  id: index#polygon-smoothfactor
  summary: How much to simplify the polyline on each zoom level
  description: |-
    `smoothFactor`

    `Number`

    `1.0`

    How much to simplify the polyline on each zoom level. More means better performance and smoother look, and less means more accurate representation.
- name: 'Polygon options: stroke'
  id: index#polygon-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'Polygon options: weight'
  id: index#polygon-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: Polyline
  id: index#polyline
  summary: A class for drawing polyline overlays on a map
  description: |-
    ## Polyline

    A class for drawing polyline overlays on a map. Extends [`Path`](#path).

    ### Usage example

    ``` javascript
    // create a red polyline from an array of LatLng points
    var latlngs = [
        [45.51, -122.68],
        [37.77, -122.43],
        [34.04, -118.2]
    ];

    var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);

    // zoom the map to the polyline
    map.fitBounds(polyline.getBounds());
    ```

    You can also pass a multi-dimensional array to represent a `MultiPolyline` shape:

    ``` javascript
    // create a red polyline from an array of arrays of LatLng points
    var latlngs = [
        [[45.51, -122.68],
         [37.77, -122.43],
         [34.04, -118.2]],
        [[40.78, -73.91],
         [41.83, -87.62],
         [32.76, -96.72]]
    ];
    ```

    ### Creation

    Factory

    Description
- name: 'Polyline creation: L.polyline'
  id: index#polyline-l-polyline
  summary: Instantiates a polyline object given an array of geographical points and optionally an options object
  description: |-
    `L.polyline(<LatLng[]> `*`latlngs`*`, <`[`Polyline options`](#polyline-option)`> `*`options?`*`)`

    Instantiates a polyline object given an array of geographical points and optionally an options object. You can create a [`Polyline`](#polyline) object with multiple separate lines (`MultiPolyline`) by passing an array of arrays of geographic points.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Polyline events: add'
  id: index#polyline-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Polyline events: click'
  id: index#polyline-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Polyline events: contextmenu'
  id: index#polyline-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Polyline events: dblclick'
  id: index#polyline-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Polyline events: mousedown'
  id: index#polyline-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Polyline events: mouseout'
  id: index#polyline-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Polyline events: mouseover'
  id: index#polyline-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Polyline events: mouseup'
  id: index#polyline-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Polyline events: popupclose'
  id: index#polyline-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Polyline events: popupopen'
  id: index#polyline-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Polyline events: tooltipclose'
  id: index#polyline-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Polyline events: tooltipopen'
  id: index#polyline-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Polyline methods: addEventListener'
  id: index#polyline-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Polyline methods: addEventParent'
  id: index#polyline-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Polyline methods: addLatLng'
  id: index#polyline-addlatlng
  summary: Adds a given point to the polyline
  description: |-
    `addLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`, <LatLng[]> `*`latlngs?`*`)`

    `this`

    Adds a given point to the polyline. By default, adds to the first ring of the polyline in case of a multi-polyline, but can be overridden by passing a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

    Methods inherited from [Path](#path)

    Method

    Returns

    Description
- name: 'Polyline methods: addOneTimeEventListener'
  id: index#polyline-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Polyline methods: addTo'
  id: index#polyline-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Polyline methods: bindPopup'
  id: index#polyline-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Polyline methods: bindTooltip'
  id: index#polyline-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Polyline methods: bringToBack'
  id: index#polyline-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polyline methods: bringToFront'
  id: index#polyline-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'Polyline methods: clearAllEventListeners'
  id: index#polyline-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Polyline methods: closePopup'
  id: index#polyline-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Polyline methods: closestLayerPoint'
  id: index#polyline-closestlayerpoint
  summary: Returns the point closest to p on the Polyline
  description: |-
    `closestLayerPoint(<`[`Point`](#point)`> `*`p`*`)`

    ` `[`Point`](#point)` `

    Returns the point closest to `p` on the Polyline.
- name: 'Polyline methods: closeTooltip'
  id: index#polyline-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Polyline methods: fire'
  id: index#polyline-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Polyline methods: fireEvent'
  id: index#polyline-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Polyline methods: getAttribution'
  id: index#polyline-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polyline methods: getBounds'
  id: index#polyline-getbounds
  summary: Returns the LatLngBounds of the path
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the [`LatLngBounds`](#latlngbounds) of the path.
- name: 'Polyline methods: getCenter'
  id: index#polyline-getcenter
  summary: Returns the center (centroid) of the polyline
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center ([centroid](https://en.wikipedia.org/wiki/Centroid)) of the polyline.
- name: 'Polyline methods: getLatLngs'
  id: index#polyline-getlatlngs
  summary: Returns an array of the points in the path, or nested arrays of points in case of multi-polyline
  description: |-
    `getLatLngs()`

    `LatLng[]`

    Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.
- name: 'Polyline methods: getPane'
  id: index#polyline-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Polyline methods: getPopup'
  id: index#polyline-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Polyline methods: getTooltip'
  id: index#polyline-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Polyline methods: hasEventListeners'
  id: index#polyline-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Polyline methods: isEmpty'
  id: index#polyline-isempty
  summary: Returns true if the Polyline has no LatLngs
  description: |-
    `isEmpty()`

    `Boolean`

    Returns `true` if the Polyline has no LatLngs.
- name: 'Polyline methods: isPopupOpen'
  id: index#polyline-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Polyline methods: isTooltipOpen'
  id: index#polyline-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Polyline methods: listens'
  id: index#polyline-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Polyline methods: off'
  id: index#polyline-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Polyline methods: on'
  id: index#polyline-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Polyline methods: once'
  id: index#polyline-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Polyline methods: openPopup'
  id: index#polyline-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Polyline methods: openTooltip'
  id: index#polyline-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Polyline methods: redraw'
  id: index#polyline-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'Polyline methods: removeEventListener'
  id: index#polyline-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Polyline methods: removeEventParent'
  id: index#polyline-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Polyline methods: removeFrom'
  id: index#polyline-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Polyline methods: setLatLngs'
  id: index#polyline-setlatlngs
  summary: Replaces all the points in the polyline with the given array of geographical points
  description: |-
    `setLatLngs(<LatLng[]> `*`latlngs`*`)`

    `this`

    Replaces all the points in the polyline with the given array of geographical points.
- name: 'Polyline methods: setPopupContent'
  id: index#polyline-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Polyline methods: setStyle'
  id: index#polyline-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'Polyline methods: setTooltipContent'
  id: index#polyline-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Polyline methods: toGeoJSON'
  id: index#polyline-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the polyline (as a GeoJSON `LineString` or `MultiLineString` Feature).
- name: 'Polyline methods: togglePopup'
  id: index#polyline-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Polyline methods: toggleTooltip'
  id: index#polyline-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Polyline methods: unbindPopup'
  id: index#polyline-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Polyline methods: unbindTooltip'
  id: index#polyline-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Polyline options: attribution'
  id: index#polyline-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Polyline options: bubblingMouseEvents'
  id: index#polyline-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Polyline options: className'
  id: index#polyline-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Polyline options: color'
  id: index#polyline-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'Polyline options: dashArray'
  id: index#polyline-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Polyline options: dashOffset'
  id: index#polyline-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Polyline options: fill'
  id: index#polyline-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'Polyline options: fillColor'
  id: index#polyline-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'Polyline options: fillOpacity'
  id: index#polyline-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'Polyline options: fillRule'
  id: index#polyline-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'Polyline options: interactive'
  id: index#polyline-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Polyline options: lineCap'
  id: index#polyline-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'Polyline options: lineJoin'
  id: index#polyline-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'Polyline options: noClip'
  id: index#polyline-noclip
  summary: Disable polyline clipping
  description: |-
    `noClip`

    `Boolean`

    `false`

    Disable polyline clipping.

    Options inherited from [Path](#path)

    Option

    Type

    Default

    Description
- name: 'Polyline options: opacity'
  id: index#polyline-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'Polyline options: pane'
  id: index#polyline-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Polyline options: renderer'
  id: index#polyline-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'Polyline options: smoothFactor'
  id: index#polyline-smoothfactor
  summary: How much to simplify the polyline on each zoom level
  description: |-
    `smoothFactor`

    `Number`

    `1.0`

    How much to simplify the polyline on each zoom level. More means better performance and smoother look, and less means more accurate representation.
- name: 'Polyline options: stroke'
  id: index#polyline-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'Polyline options: weight'
  id: index#polyline-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: PolyUtil
  id: index#polyutil
  summary: Various utility functions for polygon geometries
  description: |-
    ## PolyUtil

    Various utility functions for polygon geometries.

    ### Functions

    Function

    Returns

    Description
- name: 'PolyUtil functions: centroid'
  id: index#polyutil-centroid
  summary: Returns the 'center of mass' of the passed LatLngs
  description: |-
    `centroid(<LatLng[]> `*`latlngs`*`)`

    ` `[`LatLng`](#latlng)` `

    Returns the 'center of mass' of the passed LatLngs.
- name: 'PolyUtil functions: clipPolygon'
  id: index#polyutil-clippolygon
  summary: Clips the polygon geometry defined by the given points by the given bounds (using the Sutherland-Hodgman algorithm)
  description: |-
    `clipPolygon(<Point[]> `*`points`*`, <`[`Bounds`](#bounds)`> `*`bounds`*`, <Boolean> `*`round?`*`)`

    `Point[]`

    Clips the polygon geometry defined by the given `points` by the given bounds (using the [Sutherland-Hodgman algorithm](https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm)). Used by Leaflet to only show polygon points that are on the screen or near, increasing performance. Note that polygon points needs different algorithm for clipping than polyline, so there's a separate method for it.
- name: 'PolyUtil functions: polygonCenter'
  id: index#polyutil-polygoncenter
  summary: Returns the center (centroid) of the passed LatLngs (first ring) from a polygon
  description: |-
    `polygonCenter(<LatLng[]> `*`latlngs`*`, <`[`CRS`](#crs)`> `*`crs`*`)`

    ` `[`LatLng`](#latlng)` `

    Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the passed LatLngs (first ring) from a polygon.
- name: Popup
  id: index#popup
  summary: Used to open popups in certain places of the map
  description: |-
    ## Popup

    Used to open popups in certain places of the map. Use [Map.openPopup](#map-openpopup) to open popups while making sure that only one popup is open at one time (recommended for usability), or use [Map.addLayer](#map-addlayer) to open as many as you want.

    ### Usage example

    If you want to just bind a popup to marker click and then open it, it's really easy:

    ``` javascript
    marker.bindPopup(popupContent).openPopup();
    ```

    Path overlays like polylines also have a `bindPopup` method.

    A popup can be also standalone:

    ``` javascript
    var popup = L.popup()
        .setLatLng(latlng)
        .setContent('<p>Hello world!<br />This is a nice popup.</p>')
        .openOn(map);
    ```

    or

    ``` javascript
    var popup = L.popup(latlng, {content: '<p>Hello world!<br />This is a nice popup.</p>'})
        .openOn(map);
    ```

    ### Creation

    Factory

    Description
- name: 'Popup creation: L.popup'
  id: index#popup-l-popup
  summary: Instantiates a Popup object given an optional options object that describes its appearance and location and an optional source object that is used to tag the popup with a reference to the Layer to which it refers
  description: |-
    `L.popup(<`[`Popup options`](#popup-option)`> `*`options?`*`, <`[`Layer`](#layer)`> `*`source?`*`)`

    Instantiates a [`Popup`](#popup) object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the popup with a reference to the Layer to which it refers.

    `L.popup(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    Instantiates a [`Popup`](#popup) object given `latlng` where the popup will open and an optional `options` object that describes its appearance and location.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Popup events: add'
  id: index#popup-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Popup events: click'
  id: index#popup-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Popup events: contentupdate'
  id: index#popup-contentupdate
  summary: null
  description: |-
    `contentupdate`

    ` `[`Event`](#event)` `

    Fired when the content of the overlay is updated

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Popup events: contextmenu'
  id: index#popup-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Popup events: dblclick'
  id: index#popup-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Popup events: mousedown'
  id: index#popup-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Popup events: mouseout'
  id: index#popup-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Popup events: mouseover'
  id: index#popup-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Popup events: mouseup'
  id: index#popup-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Popup events: popupclose'
  id: index#popup-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Popup events: popupopen'
  id: index#popup-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Popup events: tooltipclose'
  id: index#popup-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Popup events: tooltipopen'
  id: index#popup-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Popup methods: addEventListener'
  id: index#popup-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Popup methods: addEventParent'
  id: index#popup-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Popup methods: addOneTimeEventListener'
  id: index#popup-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Popup methods: addTo'
  id: index#popup-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Popup methods: bindPopup'
  id: index#popup-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Popup methods: bindTooltip'
  id: index#popup-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Popup methods: bringToBack'
  id: index#popup-bringtoback
  summary: Brings this overlay to the back of other overlays (in the same map pane)
  description: |-
    `bringToBack()`

    `this`

    Brings this overlay to the back of other overlays (in the same map pane).

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Popup methods: bringToFront'
  id: index#popup-bringtofront
  summary: Brings this overlay in front of other overlays (in the same map pane)
  description: |-
    `bringToFront()`

    `this`

    Brings this overlay in front of other overlays (in the same map pane).
- name: 'Popup methods: clearAllEventListeners'
  id: index#popup-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Popup methods: close'
  id: index#popup-close
  summary: Closes the overlay
  description: |-
    `close()`

    `this`

    Closes the overlay. Alternative to `map.closePopup(popup)`/`.closeTooltip(tooltip)` and `layer.closePopup()`/`.closeTooltip()`.
- name: 'Popup methods: closePopup'
  id: index#popup-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Popup methods: closeTooltip'
  id: index#popup-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Popup methods: fire'
  id: index#popup-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Popup methods: fireEvent'
  id: index#popup-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Popup methods: getAttribution'
  id: index#popup-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Popup methods: getContent'
  id: index#popup-getcontent
  summary: Returns the content of the overlay
  description: |-
    `getContent()`

    `String|HTMLElement`

    Returns the content of the overlay.
- name: 'Popup methods: getElement'
  id: index#popup-getelement
  summary: Returns the HTML container of the overlay
  description: |-
    `getElement()`

    `String|HTMLElement`

    Returns the HTML container of the overlay.
- name: 'Popup methods: getLatLng'
  id: index#popup-getlatlng
  summary: Returns the geographical point of the overlay
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the geographical point of the overlay.
- name: 'Popup methods: getPane'
  id: index#popup-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Popup methods: getPopup'
  id: index#popup-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Popup methods: getTooltip'
  id: index#popup-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Popup methods: hasEventListeners'
  id: index#popup-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Popup methods: isOpen'
  id: index#popup-isopen
  summary: Returns true when the overlay is visible on the map
  description: |-
    `isOpen()`

    `Boolean`

    Returns `true` when the overlay is visible on the map.
- name: 'Popup methods: isPopupOpen'
  id: index#popup-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Popup methods: isTooltipOpen'
  id: index#popup-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Popup methods: listens'
  id: index#popup-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Popup methods: off'
  id: index#popup-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Popup methods: on'
  id: index#popup-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Popup methods: once'
  id: index#popup-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Popup methods: openOn'
  id: index#popup-openon
  summary: Alternative to map.openPopup(popup)
  description: |-
    `openOn(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Alternative to `map.openPopup(popup)`. Adds the popup to the map and closes the previous one.

    Methods inherited from [DivOverlay](#divoverlay)

    Method

    Returns

    Description
- name: 'Popup methods: openPopup'
  id: index#popup-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Popup methods: openTooltip'
  id: index#popup-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Popup methods: removeEventListener'
  id: index#popup-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Popup methods: removeEventParent'
  id: index#popup-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Popup methods: removeFrom'
  id: index#popup-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Popup methods: setContent'
  id: index#popup-setcontent
  summary: Sets the HTML content of the overlay
  description: |-
    `setContent(<String|HTMLElement|Function> `*`htmlContent`*`)`

    `this`

    Sets the HTML content of the overlay. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.
- name: 'Popup methods: setLatLng'
  id: index#popup-setlatlng
  summary: Sets the geographical point where the overlay will open
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `this`

    Sets the geographical point where the overlay will open.
- name: 'Popup methods: setPopupContent'
  id: index#popup-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Popup methods: setTooltipContent'
  id: index#popup-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Popup methods: toggle'
  id: index#popup-toggle
  summary: Opens or closes the overlay bound to layer depending on its current state
  description: |-
    `toggle(<`[`Layer`](#layer)`> `*`layer?`*`)`

    `this`

    Opens or closes the overlay bound to layer depending on its current state. Argument may be omitted only for overlay bound to layer. Alternative to `layer.togglePopup()`/`.toggleTooltip()`.
- name: 'Popup methods: togglePopup'
  id: index#popup-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Popup methods: toggleTooltip'
  id: index#popup-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Popup methods: unbindPopup'
  id: index#popup-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Popup methods: unbindTooltip'
  id: index#popup-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Popup methods: update'
  id: index#popup-update
  summary: Updates the overlay content, layout and position
  description: |-
    `update()`

    `null`

    Updates the overlay content, layout and position. Useful for updating the overlay after something inside changed, e.g. image loaded.
- name: 'Popup options: attribution'
  id: index#popup-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    DivOverlay events inherited from [DivOverlay](#divoverlay)

    Event

    Data

    Description
- name: 'Popup options: autoClose'
  id: index#popup-autoclose
  summary: Set it to false if you want to override the default behavior of the popup closing when another popup is opened
  description: |-
    `autoClose`

    `Boolean`

    `true`

    Set it to `false` if you want to override the default behavior of the popup closing when another popup is opened.
- name: 'Popup options: autoPan'
  id: index#popup-autopan
  summary: Set it to false if you don't want the map to do panning animation to fit the opened popup
  description: |-
    `autoPan`

    `Boolean`

    `true`

    Set it to `false` if you don't want the map to do panning animation to fit the opened popup.
- name: 'Popup options: autoPanPadding'
  id: index#popup-autopanpadding
  summary: Equivalent of setting both top left and bottom right autopan padding to the same value
  description: |-
    `autoPanPadding`

    ` `[`Point`](#point)` `

    `Point(5, 5)`

    Equivalent of setting both top left and bottom right autopan padding to the same value.
- name: 'Popup options: autoPanPaddingBottomRight'
  id: index#popup-autopanpaddingbottomright
  summary: The margin between the popup and the bottom right corner of the map view after autopanning was performed
  description: |-
    `autoPanPaddingBottomRight`

    ` `[`Point`](#point)` `

    `null`

    The margin between the popup and the bottom right corner of the map view after autopanning was performed.
- name: 'Popup options: autoPanPaddingTopLeft'
  id: index#popup-autopanpaddingtopleft
  summary: The margin between the popup and the top left corner of the map view after autopanning was performed
  description: |-
    `autoPanPaddingTopLeft`

    ` `[`Point`](#point)` `

    `null`

    The margin between the popup and the top left corner of the map view after autopanning was performed.
- name: 'Popup options: bubblingMouseEvents'
  id: index#popup-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Popup options: className'
  id: index#popup-classname
  summary: A custom CSS class name to assign to the popup
  description: |-
    `className`

    `String`

    `''`

    A custom CSS class name to assign to the popup.

    Options inherited from [DivOverlay](#divoverlay)

    Option

    Type

    Default

    Description
- name: 'Popup options: closeButton'
  id: index#popup-closebutton
  summary: Controls the presence of a close button in the popup
  description: |-
    `closeButton`

    `Boolean`

    `true`

    Controls the presence of a close button in the popup.
- name: 'Popup options: closeOnClick'
  id: index#popup-closeonclick
  summary: Set it if you want to override the default behavior of the popup closing when user clicks on the map
  description: |-
    `closeOnClick`

    `Boolean`

    `*`

    Set it if you want to override the default behavior of the popup closing when user clicks on the map. Defaults to the map's [`closePopupOnClick`](#map-closepopuponclick) option.
- name: 'Popup options: closeOnEscapeKey'
  id: index#popup-closeonescapekey
  summary: Set it to false if you want to override the default behavior of the ESC key for closing of the popup
  description: |-
    `closeOnEscapeKey`

    `Boolean`

    `true`

    Set it to `false` if you want to override the default behavior of the ESC key for closing of the popup.
- name: 'Popup options: content'
  id: index#popup-content
  summary: Sets the HTML content of the overlay while initializing
  description: |-
    `content`

    `String|HTMLElement|Function`

    `''`

    Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Popup options: interactive'
  id: index#popup-interactive
  summary: If true, the popup/tooltip will listen to the mouse events
  description: |-
    `interactive`

    `Boolean`

    `false`

    If true, the popup/tooltip will listen to the mouse events.
- name: 'Popup options: keepInView'
  id: index#popup-keepinview
  summary: Set it to true if you want to prevent users from panning the popup off of the screen while it is open
  description: |-
    `keepInView`

    `Boolean`

    `false`

    Set it to `true` if you want to prevent users from panning the popup off of the screen while it is open.
- name: 'Popup options: maxHeight'
  id: index#popup-maxheight
  summary: If set, creates a scrollable container of the given height inside a popup if its content exceeds it
  description: |-
    `maxHeight`

    `Number`

    `null`

    If set, creates a scrollable container of the given height inside a popup if its content exceeds it. The scrollable container can be styled using the `leaflet-popup-scrolled` CSS class selector.
- name: 'Popup options: maxWidth'
  id: index#popup-maxwidth
  summary: Max width of the popup, in pixels
  description: |-
    `maxWidth`

    `Number`

    `300`

    Max width of the popup, in pixels.
- name: 'Popup options: minWidth'
  id: index#popup-minwidth
  summary: Min width of the popup, in pixels
  description: |-
    `minWidth`

    `Number`

    `50`

    Min width of the popup, in pixels.
- name: 'Popup options: offset'
  id: index#popup-offset
  summary: The offset of the popup position
  description: |-
    `offset`

    ` `[`Point`](#point)` `

    `Point(0, 7)`

    The offset of the popup position.
- name: 'Popup options: pane'
  id: index#popup-pane
  summary: Map pane where the popup will be added
  description: |-
    `pane`

    `String`

    `'popupPane'`

    `Map pane` where the popup will be added.
- name: PosAnimation
  id: index#posanimation
  summary: Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9
  description: |-
    ## PosAnimation

    Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.

    ### Usage example

    ``` javascript
    var myPositionMarker = L.marker([48.864716, 2.294694]).addTo(map);

    myPositionMarker.on("click", function() {
        var pos = map.latLngToLayerPoint(myPositionMarker.getLatLng());
        pos.y -= 25;
        var fx = new L.PosAnimation();

        fx.once('end',function() {
            pos.y += 25;
            fx.run(myPositionMarker._icon, pos, 0.8);
        });

        fx.run(myPositionMarker._icon, pos, 0.3);
    });
    ```

    ### Constructor

    Constructor

    Description
- name: 'PosAnimation constructor: L.PosAnimation'
  id: index#posanimation-l-posanimation
  summary: Creates a PosAnimation object
  description: |-
    `L.PosAnimation()`

    Creates a [`PosAnimation`](#posanimation) object.

    ### Events

    Event

    Data

    Description
- name: 'PosAnimation events: end'
  id: index#posanimation-end
  summary: Fired when the animation ends
  description: |-
    `end`

    ` `[`Event`](#event)` `

    Fired when the animation ends.

    ### Methods

    Method

    Returns

    Description
- name: 'PosAnimation events: start'
  id: index#posanimation-start
  summary: null
  description: |-
    `start`

    ` `[`Event`](#event)` `

    Fired when the animation starts
- name: 'PosAnimation events: step'
  id: index#posanimation-step
  summary: Fired continuously during the animation
  description: |-
    `step`

    ` `[`Event`](#event)` `

    Fired continuously during the animation.
- name: 'PosAnimation methods: addEventListener'
  id: index#posanimation-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'PosAnimation methods: addEventParent'
  id: index#posanimation-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'PosAnimation methods: addOneTimeEventListener'
  id: index#posanimation-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'PosAnimation methods: clearAllEventListeners'
  id: index#posanimation-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'PosAnimation methods: fire'
  id: index#posanimation-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'PosAnimation methods: fireEvent'
  id: index#posanimation-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'PosAnimation methods: hasEventListeners'
  id: index#posanimation-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'PosAnimation methods: listens'
  id: index#posanimation-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'PosAnimation methods: off'
  id: index#posanimation-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'PosAnimation methods: on'
  id: index#posanimation-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'PosAnimation methods: once'
  id: index#posanimation-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'PosAnimation methods: removeEventListener'
  id: index#posanimation-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'PosAnimation methods: removeEventParent'
  id: index#posanimation-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'PosAnimation methods: run'
  id: index#posanimation-run
  summary: Run an animation of a given element to a new position, optionally setting duration in seconds (0.25 by default) and easing linearity factor (3rd argument of the cubic bezier curve, 0.5 by default)
  description: |-
    `run(<HTMLElement> `*`el`*`, <`[`Point`](#point)`> `*`newPos`*`, <Number> `*`duration?`*`, <Number> `*`easeLinearity?`*`)`

    Run an animation of a given element to a new position, optionally setting duration in seconds (`0.25` by default) and easing linearity factor (3rd argument of the [cubic bezier curve](https://cubic-bezier.com/#0,0,.5,1), `0.5` by default).
- name: 'PosAnimation methods: stop'
  id: index#posanimation-stop
  summary: Stops the animation (if currently running)
  description: |-
    `stop()`

    Stops the animation (if currently running).

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: Projection
  id: index#projection
  summary: An object with methods for projecting geographical coordinates of the world onto a flat surface (and back)
  description: |-
    ## Projection

    An object with methods for projecting geographical coordinates of the world onto a flat surface (and back). See [Map projection](https://en.wikipedia.org/wiki/Map_projection).

    ### Methods

    Method

    Returns

    Description
- name: 'Projection defined projections: L.Projection.LonLat'
  id: index#projection-l-projection-lonlat
  summary: Equirectangular, or Plate Carree projection — the most simple projection, mostly used by GIS enthusiasts
  description: |-
    `L.Projection.LonLat`

    Equirectangular, or Plate Carree projection — the most simple projection, mostly used by GIS enthusiasts. Directly maps `x` as longitude, and `y` as latitude. Also suitable for flat worlds, e.g. game maps. Used by the `EPSG:4326` and `Simple` CRS.
- name: 'Projection defined projections: L.Projection.Mercator'
  id: index#projection-l-projection-mercator
  summary: Elliptical Mercator projection — more complex than Spherical Mercator
  description: |-
    `L.Projection.Mercator`

    Elliptical Mercator projection — more complex than Spherical Mercator. Assumes that Earth is an ellipsoid. Used by the EPSG:3395 CRS.
- name: 'Projection defined projections: L.Projection.SphericalMercator'
  id: index#projection-l-projection-sphericalmercator
  summary: Spherical Mercator projection — the most common projection for online maps, used by almost all free and commercial tile providers
  description: |-
    `L.Projection.SphericalMercator`

    Spherical Mercator projection — the most common projection for online maps, used by almost all free and commercial tile providers. Assumes that Earth is a sphere. Used by the `EPSG:3857` CRS.
- name: 'Projection methods: project'
  id: index#projection-project
  summary: Projects geographical coordinates into a 2D point
  description: |-
    `project(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    ` `[`Point`](#point)` `

    Projects geographical coordinates into a 2D point. Only accepts actual [`L.LatLng`](#latlng) instances, not arrays.
- name: 'Projection methods: unproject'
  id: index#projection-unproject
  summary: The inverse of project
  description: |-
    `unproject(<`[`Point`](#point)`> `*`point`*`)`

    ` `[`LatLng`](#latlng)` `

    The inverse of `project`. Projects a 2D point into a geographical location. Only accepts actual [`L.Point`](#point) instances, not arrays.

    Note that the projection instances do not inherit from Leaflet's [`Class`](#class) object, and can't be instantiated. Also, new classes can't inherit from them, and methods can't be added to them with the `include` function.

    ### Properties

    Property

    Type

    Description
- name: 'Projection properties: bounds'
  id: index#projection-bounds
  summary: null
  description: |-
    `bounds`

    ` `[`Bounds`](#bounds)` `

    The bounds (specified in CRS units) where the projection is valid

    ### Defined projections

    Leaflet comes with a set of already defined Projections out of the box:

    Projection

    Description
- name: Rectangle
  id: index#rectangle
  summary: A class for drawing rectangle overlays on a map
  description: |-
    ## Rectangle

    A class for drawing rectangle overlays on a map. Extends [`Polygon`](#polygon).

    ### Usage example

    ``` javascript
    // define rectangle geographical bounds
    var bounds = [[54.559322, -5.767822], [56.1210604, -3.021240]];

    // create an orange rectangle
    L.rectangle(bounds, {color: "#ff7800", weight: 1}).addTo(map);

    // zoom the map to the rectangle bounds
    map.fitBounds(bounds);
    ```

    ### Creation

    Factory

    Description
- name: 'Rectangle creation: L.rectangle'
  id: index#rectangle-l-rectangle
  summary: null
  description: |-
    `L.rectangle(<`[`LatLngBounds`](#latlngbounds)`> `*`latLngBounds`*`, <`[`Polyline options`](#polyline-option)`> `*`options?`*`)`

    ### Options

    Options inherited from [Polyline](#polyline)

    Option

    Type

    Default

    Description
- name: 'Rectangle events: add'
  id: index#rectangle-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Rectangle events: click'
  id: index#rectangle-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Rectangle events: contextmenu'
  id: index#rectangle-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Rectangle events: dblclick'
  id: index#rectangle-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Rectangle events: mousedown'
  id: index#rectangle-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Rectangle events: mouseout'
  id: index#rectangle-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Rectangle events: mouseover'
  id: index#rectangle-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Rectangle events: mouseup'
  id: index#rectangle-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Rectangle events: popupclose'
  id: index#rectangle-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Rectangle events: popupopen'
  id: index#rectangle-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Rectangle events: tooltipclose'
  id: index#rectangle-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'Rectangle events: tooltipopen'
  id: index#rectangle-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Rectangle methods: addEventListener'
  id: index#rectangle-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Rectangle methods: addEventParent'
  id: index#rectangle-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Rectangle methods: addLatLng'
  id: index#rectangle-addlatlng
  summary: Adds a given point to the polyline
  description: |-
    `addLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`, <LatLng[]> `*`latlngs?`*`)`

    `this`

    Adds a given point to the polyline. By default, adds to the first ring of the polyline in case of a multi-polyline, but can be overridden by passing a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

    Methods inherited from [Path](#path)

    Method

    Returns

    Description
- name: 'Rectangle methods: addOneTimeEventListener'
  id: index#rectangle-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Rectangle methods: addTo'
  id: index#rectangle-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Rectangle methods: bindPopup'
  id: index#rectangle-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Rectangle methods: bindTooltip'
  id: index#rectangle-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Rectangle methods: bringToBack'
  id: index#rectangle-bringtoback
  summary: Brings the layer to the bottom of all path layers
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all path layers.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Rectangle methods: bringToFront'
  id: index#rectangle-bringtofront
  summary: Brings the layer to the top of all path layers
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all path layers.
- name: 'Rectangle methods: clearAllEventListeners'
  id: index#rectangle-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Rectangle methods: closePopup'
  id: index#rectangle-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Rectangle methods: closestLayerPoint'
  id: index#rectangle-closestlayerpoint
  summary: Returns the point closest to p on the Polyline
  description: |-
    `closestLayerPoint(<`[`Point`](#point)`> `*`p`*`)`

    ` `[`Point`](#point)` `

    Returns the point closest to `p` on the Polyline.
- name: 'Rectangle methods: closeTooltip'
  id: index#rectangle-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Rectangle methods: fire'
  id: index#rectangle-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Rectangle methods: fireEvent'
  id: index#rectangle-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Rectangle methods: getAttribution'
  id: index#rectangle-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Rectangle methods: getBounds'
  id: index#rectangle-getbounds
  summary: Returns the LatLngBounds of the path
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Returns the [`LatLngBounds`](#latlngbounds) of the path.
- name: 'Rectangle methods: getCenter'
  id: index#rectangle-getcenter
  summary: Returns the center (centroid) of the Polygon
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the Polygon.

    Methods inherited from [Polyline](#polyline)

    Method

    Returns

    Description
- name: 'Rectangle methods: getLatLngs'
  id: index#rectangle-getlatlngs
  summary: Returns an array of the points in the path, or nested arrays of points in case of multi-polyline
  description: |-
    `getLatLngs()`

    `LatLng[]`

    Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.
- name: 'Rectangle methods: getPane'
  id: index#rectangle-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Rectangle methods: getPopup'
  id: index#rectangle-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Rectangle methods: getTooltip'
  id: index#rectangle-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Rectangle methods: hasEventListeners'
  id: index#rectangle-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Rectangle methods: isEmpty'
  id: index#rectangle-isempty
  summary: Returns true if the Polyline has no LatLngs
  description: |-
    `isEmpty()`

    `Boolean`

    Returns `true` if the Polyline has no LatLngs.
- name: 'Rectangle methods: isPopupOpen'
  id: index#rectangle-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Rectangle methods: isTooltipOpen'
  id: index#rectangle-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Rectangle methods: listens'
  id: index#rectangle-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Rectangle methods: off'
  id: index#rectangle-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Rectangle methods: on'
  id: index#rectangle-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Rectangle methods: once'
  id: index#rectangle-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Rectangle methods: openPopup'
  id: index#rectangle-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Rectangle methods: openTooltip'
  id: index#rectangle-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Rectangle methods: redraw'
  id: index#rectangle-redraw
  summary: Redraws the layer
  description: |-
    `redraw()`

    `this`

    Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.
- name: 'Rectangle methods: removeEventListener'
  id: index#rectangle-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Rectangle methods: removeEventParent'
  id: index#rectangle-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Rectangle methods: removeFrom'
  id: index#rectangle-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Rectangle methods: setBounds'
  id: index#rectangle-setbounds
  summary: Redraws the rectangle with the passed bounds
  description: |-
    `setBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`latLngBounds`*`)`

    `this`

    Redraws the rectangle with the passed bounds.

    Methods inherited from [Polygon](#polygon)

    Method

    Returns

    Description
- name: 'Rectangle methods: setLatLngs'
  id: index#rectangle-setlatlngs
  summary: Replaces all the points in the polyline with the given array of geographical points
  description: |-
    `setLatLngs(<LatLng[]> `*`latlngs`*`)`

    `this`

    Replaces all the points in the polyline with the given array of geographical points.
- name: 'Rectangle methods: setPopupContent'
  id: index#rectangle-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Rectangle methods: setStyle'
  id: index#rectangle-setstyle
  summary: Changes the appearance of a Path based on the options in the Path options object
  description: |-
    `setStyle(<`[`Path options`](#path-option)`> `*`style`*`)`

    `this`

    Changes the appearance of a Path based on the options in the [`Path options`](#path-option) object.
- name: 'Rectangle methods: setTooltipContent'
  id: index#rectangle-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Rectangle methods: toGeoJSON'
  id: index#rectangle-togeojson
  summary: Coordinates values are rounded with formatNum function with given precision
  description: |-
    `toGeoJSON(<Number|false> `*`precision?`*`)`

    `Object`

    Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`. Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the polygon (as a GeoJSON [`Polygon`](#polygon) or `MultiPolygon` Feature).
- name: 'Rectangle methods: togglePopup'
  id: index#rectangle-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Rectangle methods: toggleTooltip'
  id: index#rectangle-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Rectangle methods: unbindPopup'
  id: index#rectangle-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Rectangle methods: unbindTooltip'
  id: index#rectangle-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Rectangle options: attribution'
  id: index#rectangle-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Rectangle options: bubblingMouseEvents'
  id: index#rectangle-bubblingmouseevents
  summary: When true, a mouse event on this path will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this path will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).
- name: 'Rectangle options: className'
  id: index#rectangle-classname
  summary: Custom class name set on an element
  description: |-
    `className`

    `String`

    `null`

    Custom class name set on an element. Only for SVG renderer.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Rectangle options: color'
  id: index#rectangle-color
  summary: null
  description: |-
    `color`

    `String`

    `'#3388ff'`

    Stroke color
- name: 'Rectangle options: dashArray'
  id: index#rectangle-dasharray
  summary: A string that defines the stroke dash pattern
  description: |-
    `dashArray`

    `String`

    `null`

    A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Rectangle options: dashOffset'
  id: index#rectangle-dashoffset
  summary: A string that defines the distance into the dash pattern to start the dash
  description: |-
    `dashOffset`

    `String`

    `null`

    A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on [`Canvas`](#canvas)-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).
- name: 'Rectangle options: fill'
  id: index#rectangle-fill
  summary: Whether to fill the path with color
  description: |-
    `fill`

    `Boolean`

    `depends`

    Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.
- name: 'Rectangle options: fillColor'
  id: index#rectangle-fillcolor
  summary: Fill color
  description: |-
    `fillColor`

    `String`

    `*`

    Fill color. Defaults to the value of the [`color`](#path-color) option
- name: 'Rectangle options: fillOpacity'
  id: index#rectangle-fillopacity
  summary: Fill opacity
  description: |-
    `fillOpacity`

    `Number`

    `0.2`

    Fill opacity.
- name: 'Rectangle options: fillRule'
  id: index#rectangle-fillrule
  summary: A string that defines how the inside of a shape is determined
  description: |-
    `fillRule`

    `String`

    `'evenodd'`

    A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.
- name: 'Rectangle options: interactive'
  id: index#rectangle-interactive
  summary: If false, the layer will not emit mouse events and will act as a part of the underlying map
  description: |-
    `interactive`

    `Boolean`

    `true`

    If `false`, the layer will not emit mouse events and will act as a part of the underlying map.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Rectangle options: lineCap'
  id: index#rectangle-linecap
  summary: A string that defines shape to be used at the end of the stroke
  description: |-
    `lineCap`

    `String`

    `'round'`

    A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.
- name: 'Rectangle options: lineJoin'
  id: index#rectangle-linejoin
  summary: A string that defines shape to be used at the corners of the stroke
  description: |-
    `lineJoin`

    `String`

    `'round'`

    A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.
- name: 'Rectangle options: noClip'
  id: index#rectangle-noclip
  summary: Disable polyline clipping
  description: |-
    `noClip`

    `Boolean`

    `false`

    Disable polyline clipping.

    Options inherited from [Path](#path)

    Option

    Type

    Default

    Description
- name: 'Rectangle options: opacity'
  id: index#rectangle-opacity
  summary: null
  description: |-
    `opacity`

    `Number`

    `1.0`

    Stroke opacity
- name: 'Rectangle options: pane'
  id: index#rectangle-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'Rectangle options: renderer'
  id: index#rectangle-renderer
  summary: Use this specific instance of Renderer for this path
  description: |-
    `renderer`

    ` `[`Renderer`](#renderer)` `

    Use this specific instance of [`Renderer`](#renderer) for this path. Takes precedence over the map's [default renderer](#map-renderer).
- name: 'Rectangle options: smoothFactor'
  id: index#rectangle-smoothfactor
  summary: How much to simplify the polyline on each zoom level
  description: |-
    `smoothFactor`

    `Number`

    `1.0`

    How much to simplify the polyline on each zoom level. More means better performance and smoother look, and less means more accurate representation.
- name: 'Rectangle options: stroke'
  id: index#rectangle-stroke
  summary: Whether to draw stroke along the path
  description: |-
    `stroke`

    `Boolean`

    `true`

    Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.
- name: 'Rectangle options: weight'
  id: index#rectangle-weight
  summary: null
  description: |-
    `weight`

    `Number`

    `3`

    Stroke width in pixels
- name: Renderer
  id: index#renderer
  summary: Base class for vector renderer implementations (SVG, Canvas)
  description: |-
    ## Renderer

    Base class for vector renderer implementations ([`SVG`](#svg), [`Canvas`](#canvas)). Handles the DOM container of the renderer, its bounds, and its zoom animation.

    A [`Renderer`](#renderer) works as an implicit layer group for all [`Path`](#path)s - the renderer itself can be added or removed to the map. All paths use a renderer, which can be implicit (the map will decide the type of renderer and use it automatically) or explicit (using the [`renderer`](#path-renderer) option of the path).

    Do not use this class directly, use [`SVG`](#svg) and [`Canvas`](#canvas) instead.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Renderer events: add'
  id: index#renderer-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Renderer events: popupclose'
  id: index#renderer-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Renderer events: popupopen'
  id: index#renderer-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Renderer events: tooltipclose'
  id: index#renderer-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Renderer events: tooltipopen'
  id: index#renderer-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Renderer events: update'
  id: index#renderer-update
  summary: null
  description: |-
    `update`

    ` `[`Event`](#event)` `

    Fired when the renderer updates its bounds, center and zoom, for example when its map has moved

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Renderer methods: addEventListener'
  id: index#renderer-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Renderer methods: addEventParent'
  id: index#renderer-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Renderer methods: addOneTimeEventListener'
  id: index#renderer-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Renderer methods: addTo'
  id: index#renderer-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Renderer methods: bindPopup'
  id: index#renderer-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Renderer methods: bindTooltip'
  id: index#renderer-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Renderer methods: clearAllEventListeners'
  id: index#renderer-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Renderer methods: closePopup'
  id: index#renderer-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Renderer methods: closeTooltip'
  id: index#renderer-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Renderer methods: fire'
  id: index#renderer-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Renderer methods: fireEvent'
  id: index#renderer-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Renderer methods: getAttribution'
  id: index#renderer-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Renderer methods: getPane'
  id: index#renderer-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Renderer methods: getPopup'
  id: index#renderer-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Renderer methods: getTooltip'
  id: index#renderer-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Renderer methods: hasEventListeners'
  id: index#renderer-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Renderer methods: isPopupOpen'
  id: index#renderer-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Renderer methods: isTooltipOpen'
  id: index#renderer-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Renderer methods: listens'
  id: index#renderer-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Renderer methods: off'
  id: index#renderer-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Renderer methods: on'
  id: index#renderer-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Renderer methods: once'
  id: index#renderer-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Renderer methods: openPopup'
  id: index#renderer-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Renderer methods: openTooltip'
  id: index#renderer-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Renderer methods: removeEventListener'
  id: index#renderer-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Renderer methods: removeEventParent'
  id: index#renderer-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Renderer methods: removeFrom'
  id: index#renderer-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Renderer methods: setPopupContent'
  id: index#renderer-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Renderer methods: setTooltipContent'
  id: index#renderer-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Renderer methods: togglePopup'
  id: index#renderer-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Renderer methods: toggleTooltip'
  id: index#renderer-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Renderer methods: unbindPopup'
  id: index#renderer-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Renderer methods: unbindTooltip'
  id: index#renderer-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Renderer options: attribution'
  id: index#renderer-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'Renderer options: padding'
  id: index#renderer-padding
  summary: How much to extend the clip area around the map view (relative to its size) e.g
  description: |-
    `padding`

    `Number`

    `0.1`

    How much to extend the clip area around the map view (relative to its size) e.g. 0.1 would be 10% of map view in each direction

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Renderer options: pane'
  id: index#renderer-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: SVG
  id: index#svg
  summary: Allows vector layers to be displayed with SVG
  description: |-
    ## SVG

    Allows vector layers to be displayed with [SVG](https://developer.mozilla.org/docs/Web/SVG). Inherits [`Renderer`](#renderer).

    Due to [technical limitations](https://caniuse.com/svg), SVG is not available in all web browsers, notably Android 2.x and 3.x.

    Although SVG is not available on IE7 and IE8, these browsers support [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language) (a now deprecated technology), and the SVG renderer will fall back to VML in this case.

    VML was deprecated in 2012, which means VML functionality exists only for backwards compatibility with old versions of Internet Explorer.

    ### Usage example

    Use SVG by default for all paths in the map:

    ``` javascript
    var map = L.map('map', {
        renderer: L.svg()
    });
    ```

    Use a SVG renderer with extra padding for specific vector geometries:

    ``` javascript
    var map = L.map('map');
    var myRenderer = L.svg({ padding: 0.5 });
    var line = L.polyline( coordinates, { renderer: myRenderer } );
    var circle = L.circle( center, { renderer: myRenderer } );
    ```

    ### Creation

    Factory

    Description
- name: 'SVG creation: L.svg'
  id: index#svg-l-svg
  summary: Creates a SVG renderer with the given options
  description: |-
    `L.svg(<`[`Renderer options`](#renderer-option)`> `*`options?`*`)`

    Creates a SVG renderer with the given options.

    ### Options

    Options inherited from [Renderer](#renderer)

    Option

    Type

    Default

    Description
- name: 'SVG events: add'
  id: index#svg-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'SVG events: popupclose'
  id: index#svg-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'SVG events: popupopen'
  id: index#svg-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'SVG events: tooltipclose'
  id: index#svg-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVG events: tooltipopen'
  id: index#svg-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'SVG events: update'
  id: index#svg-update
  summary: null
  description: |-
    `update`

    ` `[`Event`](#event)` `

    Fired when the renderer updates its bounds, center and zoom, for example when its map has moved

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'SVG functions: create'
  id: index#svg-create
  summary: Returns a instance of SVGElement, corresponding to the class name passed
  description: |-
    `create(<String> `*`name`*`)`

    `SVGElement`

    Returns a instance of [SVGElement](https://developer.mozilla.org/docs/Web/API/SVGElement), corresponding to the class name passed. For example, using 'line' will return an instance of [SVGLineElement](https://developer.mozilla.org/docs/Web/API/SVGLineElement).
- name: 'SVG functions: pointsToPath'
  id: index#svg-pointstopath
  summary: null
  description: |-
    `pointsToPath(<Point[]> `*`rings`*`, <Boolean> `*`closed`*`)`

    `String`

    Generates a SVG path string for multiple rings, with each ring turning into "M..L..L.." instructions
- name: 'SVG methods: addEventListener'
  id: index#svg-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'SVG methods: addEventParent'
  id: index#svg-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'SVG methods: addOneTimeEventListener'
  id: index#svg-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'SVG methods: addTo'
  id: index#svg-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'SVG methods: bindPopup'
  id: index#svg-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'SVG methods: bindTooltip'
  id: index#svg-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'SVG methods: clearAllEventListeners'
  id: index#svg-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'SVG methods: closePopup'
  id: index#svg-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'SVG methods: closeTooltip'
  id: index#svg-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'SVG methods: fire'
  id: index#svg-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'SVG methods: fireEvent'
  id: index#svg-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'SVG methods: getAttribution'
  id: index#svg-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVG methods: getPane'
  id: index#svg-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'SVG methods: getPopup'
  id: index#svg-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVG methods: getTooltip'
  id: index#svg-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'SVG methods: hasEventListeners'
  id: index#svg-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)

    ### Functions

    There are several static functions which can be called without instantiating L.SVG:

    Function

    Returns

    Description
- name: 'SVG methods: isPopupOpen'
  id: index#svg-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'SVG methods: isTooltipOpen'
  id: index#svg-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'SVG methods: listens'
  id: index#svg-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'SVG methods: off'
  id: index#svg-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'SVG methods: on'
  id: index#svg-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'SVG methods: once'
  id: index#svg-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'SVG methods: openPopup'
  id: index#svg-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'SVG methods: openTooltip'
  id: index#svg-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'SVG methods: removeEventListener'
  id: index#svg-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'SVG methods: removeEventParent'
  id: index#svg-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'SVG methods: removeFrom'
  id: index#svg-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'SVG methods: setPopupContent'
  id: index#svg-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'SVG methods: setTooltipContent'
  id: index#svg-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'SVG methods: togglePopup'
  id: index#svg-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'SVG methods: toggleTooltip'
  id: index#svg-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'SVG methods: unbindPopup'
  id: index#svg-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'SVG methods: unbindTooltip'
  id: index#svg-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'SVG options: attribution'
  id: index#svg-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Events inherited from [Renderer](#renderer)

    Event

    Data

    Description
- name: 'SVG options: padding'
  id: index#svg-padding
  summary: How much to extend the clip area around the map view (relative to its size) e.g
  description: |-
    `padding`

    `Number`

    `0.1`

    How much to extend the clip area around the map view (relative to its size) e.g. 0.1 would be 10% of map view in each direction

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'SVG options: pane'
  id: index#svg-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: SVGOverlay
  id: index#svgoverlay
  summary: Used to load, display and provide DOM access to an SVG file over specific bounds of the map
  description: |-
    ## SVGOverlay

    Used to load, display and provide DOM access to an SVG file over specific bounds of the map. Extends [`ImageOverlay`](#imageoverlay).

    An SVG overlay uses the [`<svg>`](https://developer.mozilla.org/docs/Web/SVG/Element/svg) element.

    ### Usage example

    ``` javascript
    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgElement.setAttribute('xmlns', "http://www.w3.org/2000/svg");
    svgElement.setAttribute('viewBox', "0 0 200 200");
    svgElement.innerHTML = '<rect width="200" height="200"/><rect x="75" y="23" width="50" height="50" style="fill:red"/><rect x="75" y="123" width="50" height="50" style="fill:#0013ff"/>';
    var svgElementBounds = [ [ 32, -130 ], [ 13, -100 ] ];
    L.svgOverlay(svgElement, svgElementBounds).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'SVGOverlay creation: L.svgOverlay'
  id: index#svgoverlay-l-svgoverlay
  summary: Instantiates an image overlay object given an SVG element and the geographical bounds it is tied to
  description: |-
    `L.svgOverlay(<String|SVGElement> `*`svg`*`, <`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <SVGOverlay options> `*`options?`*`)`

    Instantiates an image overlay object given an SVG element and the geographical bounds it is tied to. A viewBox attribute is required on the SVG element to zoom in and out properly.

    ### Options

    Options inherited from [ImageOverlay](#imageoverlay)

    Option

    Type

    Default

    Description
- name: 'SVGOverlay events: add'
  id: index#svgoverlay-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'SVGOverlay events: click'
  id: index#svgoverlay-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'SVGOverlay events: contextmenu'
  id: index#svgoverlay-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'SVGOverlay events: dblclick'
  id: index#svgoverlay-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'SVGOverlay events: error'
  id: index#svgoverlay-error
  summary: null
  description: |-
    `error`

    ` `[`Event`](#event)` `

    Fired when the ImageOverlay layer fails to load its image

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'SVGOverlay events: load'
  id: index#svgoverlay-load
  summary: null
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the ImageOverlay layer has loaded its image
- name: 'SVGOverlay events: mousedown'
  id: index#svgoverlay-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'SVGOverlay events: mouseout'
  id: index#svgoverlay-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'SVGOverlay events: mouseover'
  id: index#svgoverlay-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'SVGOverlay events: mouseup'
  id: index#svgoverlay-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'SVGOverlay events: popupclose'
  id: index#svgoverlay-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'SVGOverlay events: popupopen'
  id: index#svgoverlay-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'SVGOverlay events: tooltipclose'
  id: index#svgoverlay-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'SVGOverlay events: tooltipopen'
  id: index#svgoverlay-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'SVGOverlay methods: addEventListener'
  id: index#svgoverlay-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'SVGOverlay methods: addEventParent'
  id: index#svgoverlay-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'SVGOverlay methods: addOneTimeEventListener'
  id: index#svgoverlay-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'SVGOverlay methods: addTo'
  id: index#svgoverlay-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'SVGOverlay methods: bindPopup'
  id: index#svgoverlay-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'SVGOverlay methods: bindTooltip'
  id: index#svgoverlay-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'SVGOverlay methods: bringToBack'
  id: index#svgoverlay-bringtoback
  summary: Brings the layer to the bottom of all overlays
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all overlays.
- name: 'SVGOverlay methods: bringToFront'
  id: index#svgoverlay-bringtofront
  summary: Brings the layer to the top of all overlays
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all overlays.
- name: 'SVGOverlay methods: clearAllEventListeners'
  id: index#svgoverlay-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'SVGOverlay methods: closePopup'
  id: index#svgoverlay-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'SVGOverlay methods: closeTooltip'
  id: index#svgoverlay-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'SVGOverlay methods: fire'
  id: index#svgoverlay-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'SVGOverlay methods: fireEvent'
  id: index#svgoverlay-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'SVGOverlay methods: getAttribution'
  id: index#svgoverlay-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVGOverlay methods: getBounds'
  id: index#svgoverlay-getbounds
  summary: null
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Get the bounds that this ImageOverlay covers
- name: 'SVGOverlay methods: getCenter'
  id: index#svgoverlay-getcenter
  summary: Returns the center of the ImageOverlay
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center of the ImageOverlay.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVGOverlay methods: getElement'
  id: index#svgoverlay-getelement
  summary: Returns the instance of SVGElement used by this overlay
  description: |-
    `getElement()`

    `SVGElement`

    Returns the instance of [`SVGElement`](https://developer.mozilla.org/docs/Web/API/SVGElement) used by this overlay.

    Methods inherited from [ImageOverlay](#imageoverlay)

    Method

    Returns

    Description
- name: 'SVGOverlay methods: getPane'
  id: index#svgoverlay-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'SVGOverlay methods: getPopup'
  id: index#svgoverlay-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'SVGOverlay methods: getTooltip'
  id: index#svgoverlay-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'SVGOverlay methods: hasEventListeners'
  id: index#svgoverlay-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'SVGOverlay methods: isPopupOpen'
  id: index#svgoverlay-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'SVGOverlay methods: isTooltipOpen'
  id: index#svgoverlay-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'SVGOverlay methods: listens'
  id: index#svgoverlay-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'SVGOverlay methods: off'
  id: index#svgoverlay-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'SVGOverlay methods: on'
  id: index#svgoverlay-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'SVGOverlay methods: once'
  id: index#svgoverlay-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'SVGOverlay methods: openPopup'
  id: index#svgoverlay-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'SVGOverlay methods: openTooltip'
  id: index#svgoverlay-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'SVGOverlay methods: removeEventListener'
  id: index#svgoverlay-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'SVGOverlay methods: removeEventParent'
  id: index#svgoverlay-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'SVGOverlay methods: removeFrom'
  id: index#svgoverlay-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'SVGOverlay methods: setBounds'
  id: index#svgoverlay-setbounds
  summary: null
  description: |-
    `setBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    `this`

    Update the bounds that this ImageOverlay covers
- name: 'SVGOverlay methods: setOpacity'
  id: index#svgoverlay-setopacity
  summary: Sets the opacity of the overlay
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Sets the opacity of the overlay.
- name: 'SVGOverlay methods: setPopupContent'
  id: index#svgoverlay-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'SVGOverlay methods: setTooltipContent'
  id: index#svgoverlay-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'SVGOverlay methods: setUrl'
  id: index#svgoverlay-seturl
  summary: Changes the URL of the image
  description: |-
    `setUrl(<String> `*`url`*`)`

    `this`

    Changes the URL of the image.
- name: 'SVGOverlay methods: setZIndex'
  id: index#svgoverlay-setzindex
  summary: Changes the zIndex of the image overlay
  description: |-
    `setZIndex(<Number> `*`value`*`)`

    `this`

    Changes the [zIndex](#imageoverlay-zindex) of the image overlay.
- name: 'SVGOverlay methods: togglePopup'
  id: index#svgoverlay-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'SVGOverlay methods: toggleTooltip'
  id: index#svgoverlay-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'SVGOverlay methods: unbindPopup'
  id: index#svgoverlay-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'SVGOverlay methods: unbindTooltip'
  id: index#svgoverlay-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'SVGOverlay options: alt'
  id: index#svgoverlay-alt
  summary: Text for the alt attribute of the image (useful for accessibility)
  description: |-
    `alt`

    `String`

    `''`

    Text for the `alt` attribute of the image (useful for accessibility).
- name: 'SVGOverlay options: attribution'
  id: index#svgoverlay-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Events inherited from [ImageOverlay](#imageoverlay)

    Event

    Data

    Description
- name: 'SVGOverlay options: bubblingMouseEvents'
  id: index#svgoverlay-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'SVGOverlay options: className'
  id: index#svgoverlay-classname
  summary: A custom class name to assign to the image
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the image. Empty by default.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'SVGOverlay options: crossOrigin'
  id: index#svgoverlay-crossorigin
  summary: Whether the crossOrigin attribute will be added to the image
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.
- name: 'SVGOverlay options: errorOverlayUrl'
  id: index#svgoverlay-erroroverlayurl
  summary: URL to the overlay image to show in place of the overlay that failed to load
  description: |-
    `errorOverlayUrl`

    `String`

    `''`

    URL to the overlay image to show in place of the overlay that failed to load.
- name: 'SVGOverlay options: interactive'
  id: index#svgoverlay-interactive
  summary: If true, the image overlay will emit mouse events when clicked or hovered
  description: |-
    `interactive`

    `Boolean`

    `false`

    If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.
- name: 'SVGOverlay options: opacity'
  id: index#svgoverlay-opacity
  summary: The opacity of the image overlay
  description: |-
    `opacity`

    `Number`

    `1.0`

    The opacity of the image overlay.
- name: 'SVGOverlay options: pane'
  id: index#svgoverlay-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'SVGOverlay options: zIndex'
  id: index#svgoverlay-zindex
  summary: The explicit zIndex of the overlay layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.
- name: TileLayer
  id: index#tilelayer
  summary: Used to load and display tile layers on the map
  description: |-
    ## TileLayer

    Used to load and display tile layers on the map. Note that most tile servers require attribution, which you can set under [`Layer`](#layer). Extends [`GridLayer`](#gridlayer).

    ### Usage example

    ``` javascript
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar', attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(map);
    ```

    #### URL template

    A string of the following form:

    ``` javascript
    'https://{s}.somedomain.com/blabla/{z}/{x}/{y}{r}.png'
    ```

    `{s}` means one of the available subdomains (used sequentially to help with browser parallel requests per domain limitation; subdomain values are specified in options; `a`, `b` or `c` by default, can be omitted), `{z}` — zoom level, `{x}` and `{y}` — tile coordinates. `{r}` can be used to add "@2x" to the URL to load retina tiles.

    You can use custom keys in the template, which will be [evaluated](#util-template) from TileLayer options, like this:

    ``` javascript
    L.tileLayer('https://{s}.somedomain.com/{foo}/{z}/{x}/{y}.png', {foo: 'bar'});
    ```

    ### Creation

    #### Extension methods

    Factory

    Description
- name: 'TileLayer creation: L.tilelayer'
  id: index#tilelayer-l-tilelayer
  summary: Instantiates a tile layer object given a URL template and optionally an options object
  description: |-
    `L.tilelayer(<String> `*`urlTemplate`*`, <`[`TileLayer options`](#tilelayer-option)`> `*`options?`*`)`

    Instantiates a tile layer object given a `URL template` and optionally an options object.

    ### Options

    Option

    Type

    Default

    Description
- name: 'TileLayer events: add'
  id: index#tilelayer-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'TileLayer events: load'
  id: index#tilelayer-load
  summary: Fired when the grid layer loaded all visible tiles
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the grid layer loaded all visible tiles.

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'TileLayer events: loading'
  id: index#tilelayer-loading
  summary: Fired when the grid layer starts loading tiles
  description: |-
    `loading`

    ` `[`Event`](#event)` `

    Fired when the grid layer starts loading tiles.
- name: 'TileLayer events: popupclose'
  id: index#tilelayer-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'TileLayer events: popupopen'
  id: index#tilelayer-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'TileLayer events: tileabort'
  id: index#tilelayer-tileabort
  summary: Fired when a tile was loading but is now not wanted
  description: |-
    `tileabort`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile was loading but is now not wanted.

    Events inherited from [GridLayer](#gridlayer)

    Event

    Data

    Description
- name: 'TileLayer events: tileerror'
  id: index#tilelayer-tileerror
  summary: Fired when there is an error loading a tile
  description: |-
    `tileerror`

    ` `[`TileErrorEvent`](#tileerrorevent)` `

    Fired when there is an error loading a tile.
- name: 'TileLayer events: tileload'
  id: index#tilelayer-tileload
  summary: Fired when a tile loads
  description: |-
    `tileload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile loads.
- name: 'TileLayer events: tileloadstart'
  id: index#tilelayer-tileloadstart
  summary: Fired when a tile is requested and starts loading
  description: |-
    `tileloadstart`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is requested and starts loading.
- name: 'TileLayer events: tileunload'
  id: index#tilelayer-tileunload
  summary: Fired when a tile is removed (e.g
  description: |-
    `tileunload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is removed (e.g. when a tile goes off the screen).
- name: 'TileLayer events: tooltipclose'
  id: index#tilelayer-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'TileLayer events: tooltipopen'
  id: index#tilelayer-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'TileLayer methods: addEventListener'
  id: index#tilelayer-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'TileLayer methods: addEventParent'
  id: index#tilelayer-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'TileLayer methods: addOneTimeEventListener'
  id: index#tilelayer-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'TileLayer methods: addTo'
  id: index#tilelayer-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'TileLayer methods: bindPopup'
  id: index#tilelayer-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'TileLayer methods: bindTooltip'
  id: index#tilelayer-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'TileLayer methods: bringToBack'
  id: index#tilelayer-bringtoback
  summary: Brings the tile layer to the bottom of all tile layers
  description: |-
    `bringToBack()`

    `this`

    Brings the tile layer to the bottom of all tile layers.
- name: 'TileLayer methods: bringToFront'
  id: index#tilelayer-bringtofront
  summary: Brings the tile layer to the top of all tile layers
  description: |-
    `bringToFront()`

    `this`

    Brings the tile layer to the top of all tile layers.
- name: 'TileLayer methods: clearAllEventListeners'
  id: index#tilelayer-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'TileLayer methods: closePopup'
  id: index#tilelayer-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'TileLayer methods: closeTooltip'
  id: index#tilelayer-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'TileLayer methods: createTile'
  id: index#tilelayer-createtile
  summary: Called only internally, overrides GridLayer's createTile() to return an <img> HTML element with the appropriate image URL given coords
  description: |-
    `createTile(<Object> `*`coords`*`, <Function> `*`done?`*`)`

    `HTMLElement`

    Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile) to return an `<img>` HTML element with the appropriate image URL given `coords`. The `done` callback is called when the tile has been loaded.

    #### Extension methods

    Layers extending [`TileLayer`](#tilelayer) might reimplement the following method.

    Method

    Returns

    Description
- name: 'TileLayer methods: fire'
  id: index#tilelayer-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'TileLayer methods: fireEvent'
  id: index#tilelayer-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'TileLayer methods: getAttribution'
  id: index#tilelayer-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer methods: getContainer'
  id: index#tilelayer-getcontainer
  summary: Returns the HTML element that contains the tiles for this layer
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTML element that contains the tiles for this layer.
- name: 'TileLayer methods: getPane'
  id: index#tilelayer-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'TileLayer methods: getPopup'
  id: index#tilelayer-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer methods: getTileSize'
  id: index#tilelayer-gettilesize
  summary: Normalizes the tileSize option into a point
  description: |-
    `getTileSize()`

    ` `[`Point`](#point)` `

    Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer methods: getTileUrl'
  id: index#tilelayer-gettileurl
  summary: Called only internally, returns the URL for a tile given its coordinates
  description: |-
    `getTileUrl(<Object> `*`coords`*`)`

    `String`

    Called only internally, returns the URL for a tile given its coordinates. Classes extending [`TileLayer`](#tilelayer) can override this function to provide custom tile URL naming schemes.

    Methods inherited from [GridLayer](#gridlayer)

    Method

    Returns

    Description
- name: 'TileLayer methods: getTooltip'
  id: index#tilelayer-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'TileLayer methods: hasEventListeners'
  id: index#tilelayer-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'TileLayer methods: isLoading'
  id: index#tilelayer-isloading
  summary: Returns true if any tile in the grid layer has not finished loading
  description: |-
    `isLoading()`

    `Boolean`

    Returns `true` if any tile in the grid layer has not finished loading.
- name: 'TileLayer methods: isPopupOpen'
  id: index#tilelayer-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'TileLayer methods: isTooltipOpen'
  id: index#tilelayer-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'TileLayer methods: listens'
  id: index#tilelayer-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'TileLayer methods: off'
  id: index#tilelayer-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'TileLayer methods: on'
  id: index#tilelayer-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'TileLayer methods: once'
  id: index#tilelayer-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'TileLayer methods: openPopup'
  id: index#tilelayer-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'TileLayer methods: openTooltip'
  id: index#tilelayer-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'TileLayer methods: redraw'
  id: index#tilelayer-redraw
  summary: Causes the layer to clear all the tiles and request them again
  description: |-
    `redraw()`

    `this`

    Causes the layer to clear all the tiles and request them again.
- name: 'TileLayer methods: removeEventListener'
  id: index#tilelayer-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'TileLayer methods: removeEventParent'
  id: index#tilelayer-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'TileLayer methods: removeFrom'
  id: index#tilelayer-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'TileLayer methods: setOpacity'
  id: index#tilelayer-setopacity
  summary: Changes the opacity of the grid layer
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Changes the [opacity](#gridlayer-opacity) of the grid layer.
- name: 'TileLayer methods: setPopupContent'
  id: index#tilelayer-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'TileLayer methods: setTooltipContent'
  id: index#tilelayer-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'TileLayer methods: setUrl'
  id: index#tilelayer-seturl
  summary: Updates the layer's URL template and redraws it (unless noRedraw is set to true)
  description: |-
    `setUrl(<String> `*`url`*`, <Boolean> `*`noRedraw?`*`)`

    `this`

    Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`). If the URL does not change, the layer will not be redrawn unless the noRedraw parameter is set to false.
- name: 'TileLayer methods: setZIndex'
  id: index#tilelayer-setzindex
  summary: Changes the zIndex of the grid layer
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Changes the [zIndex](#gridlayer-zindex) of the grid layer.
- name: 'TileLayer methods: togglePopup'
  id: index#tilelayer-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'TileLayer methods: toggleTooltip'
  id: index#tilelayer-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'TileLayer methods: unbindPopup'
  id: index#tilelayer-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'TileLayer methods: unbindTooltip'
  id: index#tilelayer-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'TileLayer options: attribution'
  id: index#tilelayer-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    #### Extension methods

    Event

    Data

    Description
- name: 'TileLayer options: bounds'
  id: index#tilelayer-bounds
  summary: If set, tiles will only be loaded inside the set LatLngBounds
  description: |-
    `bounds`

    ` `[`LatLngBounds`](#latlngbounds)` `

    `undefined`

    If set, tiles will only be loaded inside the set [`LatLngBounds`](#latlngbounds).
- name: 'TileLayer options: className'
  id: index#tilelayer-classname
  summary: A custom class name to assign to the tile layer
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the tile layer. Empty by default.
- name: 'TileLayer options: crossOrigin'
  id: index#tilelayer-crossorigin
  summary: Whether the crossOrigin attribute will be added to the tiles
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.
- name: 'TileLayer options: detectRetina'
  id: index#tilelayer-detectretina
  summary: If true and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution
  description: |-
    `detectRetina`

    `Boolean`

    `false`

    If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.
- name: 'TileLayer options: errorTileUrl'
  id: index#tilelayer-errortileurl
  summary: URL to the tile image to show in place of the tile that failed to load
  description: |-
    `errorTileUrl`

    `String`

    `''`

    URL to the tile image to show in place of the tile that failed to load.
- name: 'TileLayer options: keepBuffer'
  id: index#tilelayer-keepbuffer
  summary: When panning the map, keep this many rows and columns of tiles before unloading them
  description: |-
    `keepBuffer`

    `Number`

    `2`

    When panning the map, keep this many rows and columns of tiles before unloading them.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'TileLayer options: maxNativeZoom'
  id: index#tilelayer-maxnativezoom
  summary: Maximum zoom number the tile source has available
  description: |-
    `maxNativeZoom`

    `Number`

    `undefined`

    Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than `maxNativeZoom` will be loaded from `maxNativeZoom` level and auto-scaled.
- name: 'TileLayer options: maxZoom'
  id: index#tilelayer-maxzoom
  summary: The maximum zoom level up to which this layer will be displayed (inclusive)
  description: |-
    `maxZoom`

    `Number`

    `18`

    The maximum zoom level up to which this layer will be displayed (inclusive).
- name: 'TileLayer options: minNativeZoom'
  id: index#tilelayer-minnativezoom
  summary: Minimum zoom number the tile source has available
  description: |-
    `minNativeZoom`

    `Number`

    `undefined`

    Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than `minNativeZoom` will be loaded from `minNativeZoom` level and auto-scaled.
- name: 'TileLayer options: minZoom'
  id: index#tilelayer-minzoom
  summary: The minimum zoom level down to which this layer will be displayed (inclusive)
  description: |-
    `minZoom`

    `Number`

    `0`

    The minimum zoom level down to which this layer will be displayed (inclusive).
- name: 'TileLayer options: noWrap'
  id: index#tilelayer-nowrap
  summary: Whether the layer is wrapped around the antimeridian
  description: |-
    `noWrap`

    `Boolean`

    `false`

    Whether the layer is wrapped around the antimeridian. If `true`, the GridLayer will only be displayed once at low zoom levels. Has no effect when the [map CRS](#map-crs) doesn't wrap around. Can be used in combination with [`bounds`](#gridlayer-bounds) to prevent requesting tiles outside the CRS limits.
- name: 'TileLayer options: opacity'
  id: index#tilelayer-opacity
  summary: Opacity of the tiles
  description: |-
    `opacity`

    `Number`

    `1.0`

    Opacity of the tiles. Can be used in the `createTile()` function.
- name: 'TileLayer options: pane'
  id: index#tilelayer-pane
  summary: Map pane where the grid layer will be added
  description: |-
    `pane`

    `String`

    `'tilePane'`

    `Map pane` where the grid layer will be added.
- name: 'TileLayer options: referrerPolicy'
  id: index#tilelayer-referrerpolicy
  summary: Whether the referrerPolicy attribute will be added to the tiles
  description: |-
    `referrerPolicy`

    `Boolean|String`

    `false`

    Whether the referrerPolicy attribute will be added to the tiles. If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided. This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer (e.g. to validate an API token). Refer to [HTMLImageElement.referrerPolicy](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy) for valid String values.

    Options inherited from [GridLayer](#gridlayer)

    Option

    Type

    Default

    Description
- name: 'TileLayer options: subdomains'
  id: index#tilelayer-subdomains
  summary: Subdomains of the tile service
  description: |-
    `subdomains`

    `String|String[]`

    `'abc'`

    Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.
- name: 'TileLayer options: tileSize'
  id: index#tilelayer-tilesize
  summary: Width and height of tiles in the grid
  description: |-
    `tileSize`

    `Number|Point`

    `256`

    Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.
- name: 'TileLayer options: tms'
  id: index#tilelayer-tms
  summary: If true, inverses Y axis numbering for tiles (turn this on for TMS services)
  description: |-
    `tms`

    `Boolean`

    `false`

    If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services).
- name: 'TileLayer options: updateInterval'
  id: index#tilelayer-updateinterval
  summary: Tiles will not update more than once every updateInterval milliseconds when panning
  description: |-
    `updateInterval`

    `Number`

    `200`

    Tiles will not update more than once every `updateInterval` milliseconds when panning.
- name: 'TileLayer options: updateWhenIdle'
  id: index#tilelayer-updatewhenidle
  summary: Load new tiles only when panning ends
  description: |-
    `updateWhenIdle`

    `Boolean`

    `(depends)`

    Load new tiles only when panning ends. `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation. `false` otherwise in order to display new tiles *during* panning, since it is easy to pan outside the [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.
- name: 'TileLayer options: updateWhenZooming'
  id: index#tilelayer-updatewhenzooming
  summary: By default, a smooth zoom animation (during a touch zoom or a flyTo()) will update grid layers every integer zoom level
  description: |-
    `updateWhenZooming`

    `Boolean`

    `true`

    By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.
- name: 'TileLayer options: zIndex'
  id: index#tilelayer-zindex
  summary: The explicit zIndex of the tile layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit zIndex of the tile layer.
- name: 'TileLayer options: zoomOffset'
  id: index#tilelayer-zoomoffset
  summary: The zoom number used in tile URLs will be offset with this value
  description: |-
    `zoomOffset`

    `Number`

    `0`

    The zoom number used in tile URLs will be offset with this value.
- name: 'TileLayer options: zoomReverse'
  id: index#tilelayer-zoomreverse
  summary: null
  description: |-
    `zoomReverse`

    `Boolean`

    `false`

    If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)
- name: TileLayer.WMS
  id: index#tilelayer-wms
  summary: Used to display WMS services as tile layers on the map
  description: |-
    ## TileLayer.WMS

    Used to display [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services as tile layers on the map. Extends [`TileLayer`](#tilelayer).

    ### Usage example

    ``` javascript
    var nexrad = L.tileLayer.wms("http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi", {
        layers: 'nexrad-n0r-900913',
        format: 'image/png',
        transparent: true,
        attribution: "Weather data © 2012 IEM Nexrad"
    });
    ```

    ### Creation

    Factory

    Description
- name: 'TileLayer.WMS creation: L.tileLayer.wms'
  id: index#tilelayer-wms-l-tilelayer-wms
  summary: Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object
  description: |-
    `L.tileLayer.wms(<String> `*`baseUrl`*`, <`[`TileLayer.WMS options`](#tilelayer-wms-option)`> `*`options`*`)`

    Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object.

    ### Options

    If any custom options not documented here are used, they will be sent to the WMS server as extra parameters in each request URL. This can be useful for [non-standard vendor WMS parameters](https://docs.geoserver.org/stable/en/user/services/wms/vendor.html).

    Option

    Type

    Default

    Description
- name: 'TileLayer.WMS events: add'
  id: index#tilelayer-wms-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'TileLayer.WMS events: load'
  id: index#tilelayer-wms-load
  summary: Fired when the grid layer loaded all visible tiles
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the grid layer loaded all visible tiles.

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'TileLayer.WMS events: loading'
  id: index#tilelayer-wms-loading
  summary: Fired when the grid layer starts loading tiles
  description: |-
    `loading`

    ` `[`Event`](#event)` `

    Fired when the grid layer starts loading tiles.
- name: 'TileLayer.WMS events: popupclose'
  id: index#tilelayer-wms-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'TileLayer.WMS events: popupopen'
  id: index#tilelayer-wms-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'TileLayer.WMS events: tileabort'
  id: index#tilelayer-wms-tileabort
  summary: Fired when a tile was loading but is now not wanted
  description: |-
    `tileabort`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile was loading but is now not wanted.

    Events inherited from [GridLayer](#gridlayer)

    Event

    Data

    Description
- name: 'TileLayer.WMS events: tileerror'
  id: index#tilelayer-wms-tileerror
  summary: Fired when there is an error loading a tile
  description: |-
    `tileerror`

    ` `[`TileErrorEvent`](#tileerrorevent)` `

    Fired when there is an error loading a tile.
- name: 'TileLayer.WMS events: tileload'
  id: index#tilelayer-wms-tileload
  summary: Fired when a tile loads
  description: |-
    `tileload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile loads.
- name: 'TileLayer.WMS events: tileloadstart'
  id: index#tilelayer-wms-tileloadstart
  summary: Fired when a tile is requested and starts loading
  description: |-
    `tileloadstart`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is requested and starts loading.
- name: 'TileLayer.WMS events: tileunload'
  id: index#tilelayer-wms-tileunload
  summary: Fired when a tile is removed (e.g
  description: |-
    `tileunload`

    ` `[`TileEvent`](#tileevent)` `

    Fired when a tile is removed (e.g. when a tile goes off the screen).
- name: 'TileLayer.WMS events: tooltipclose'
  id: index#tilelayer-wms-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'TileLayer.WMS events: tooltipopen'
  id: index#tilelayer-wms-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'TileLayer.WMS methods: addEventListener'
  id: index#tilelayer-wms-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'TileLayer.WMS methods: addEventParent'
  id: index#tilelayer-wms-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'TileLayer.WMS methods: addOneTimeEventListener'
  id: index#tilelayer-wms-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'TileLayer.WMS methods: addTo'
  id: index#tilelayer-wms-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'TileLayer.WMS methods: bindPopup'
  id: index#tilelayer-wms-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'TileLayer.WMS methods: bindTooltip'
  id: index#tilelayer-wms-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'TileLayer.WMS methods: bringToBack'
  id: index#tilelayer-wms-bringtoback
  summary: Brings the tile layer to the bottom of all tile layers
  description: |-
    `bringToBack()`

    `this`

    Brings the tile layer to the bottom of all tile layers.
- name: 'TileLayer.WMS methods: bringToFront'
  id: index#tilelayer-wms-bringtofront
  summary: Brings the tile layer to the top of all tile layers
  description: |-
    `bringToFront()`

    `this`

    Brings the tile layer to the top of all tile layers.
- name: 'TileLayer.WMS methods: clearAllEventListeners'
  id: index#tilelayer-wms-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'TileLayer.WMS methods: closePopup'
  id: index#tilelayer-wms-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'TileLayer.WMS methods: closeTooltip'
  id: index#tilelayer-wms-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'TileLayer.WMS methods: createTile'
  id: index#tilelayer-wms-createtile
  summary: Called only internally, overrides GridLayer's createTile() to return an <img> HTML element with the appropriate image URL given coords
  description: |-
    `createTile(<Object> `*`coords`*`, <Function> `*`done?`*`)`

    `HTMLElement`

    Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile) to return an `<img>` HTML element with the appropriate image URL given `coords`. The `done` callback is called when the tile has been loaded.

    Methods inherited from [GridLayer](#gridlayer)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: fire'
  id: index#tilelayer-wms-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'TileLayer.WMS methods: fireEvent'
  id: index#tilelayer-wms-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'TileLayer.WMS methods: getAttribution'
  id: index#tilelayer-wms-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: getContainer'
  id: index#tilelayer-wms-getcontainer
  summary: Returns the HTML element that contains the tiles for this layer
  description: |-
    `getContainer()`

    `HTMLElement`

    Returns the HTML element that contains the tiles for this layer.
- name: 'TileLayer.WMS methods: getPane'
  id: index#tilelayer-wms-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'TileLayer.WMS methods: getPopup'
  id: index#tilelayer-wms-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: getTileSize'
  id: index#tilelayer-wms-gettilesize
  summary: Normalizes the tileSize option into a point
  description: |-
    `getTileSize()`

    ` `[`Point`](#point)` `

    Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: getTooltip'
  id: index#tilelayer-wms-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: hasEventListeners'
  id: index#tilelayer-wms-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'TileLayer.WMS methods: isLoading'
  id: index#tilelayer-wms-isloading
  summary: Returns true if any tile in the grid layer has not finished loading
  description: |-
    `isLoading()`

    `Boolean`

    Returns `true` if any tile in the grid layer has not finished loading.
- name: 'TileLayer.WMS methods: isPopupOpen'
  id: index#tilelayer-wms-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'TileLayer.WMS methods: isTooltipOpen'
  id: index#tilelayer-wms-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'TileLayer.WMS methods: listens'
  id: index#tilelayer-wms-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'TileLayer.WMS methods: off'
  id: index#tilelayer-wms-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'TileLayer.WMS methods: on'
  id: index#tilelayer-wms-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'TileLayer.WMS methods: once'
  id: index#tilelayer-wms-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'TileLayer.WMS methods: openPopup'
  id: index#tilelayer-wms-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'TileLayer.WMS methods: openTooltip'
  id: index#tilelayer-wms-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'TileLayer.WMS methods: redraw'
  id: index#tilelayer-wms-redraw
  summary: Causes the layer to clear all the tiles and request them again
  description: |-
    `redraw()`

    `this`

    Causes the layer to clear all the tiles and request them again.
- name: 'TileLayer.WMS methods: removeEventListener'
  id: index#tilelayer-wms-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'TileLayer.WMS methods: removeEventParent'
  id: index#tilelayer-wms-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'TileLayer.WMS methods: removeFrom'
  id: index#tilelayer-wms-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'TileLayer.WMS methods: setOpacity'
  id: index#tilelayer-wms-setopacity
  summary: Changes the opacity of the grid layer
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Changes the [opacity](#gridlayer-opacity) of the grid layer.
- name: 'TileLayer.WMS methods: setParams'
  id: index#tilelayer-wms-setparams
  summary: Merges an object with the new parameters and re-requests tiles on the current screen (unless noRedraw was set to true)
  description: |-
    `setParams(<Object> `*`params`*`, <Boolean> `*`noRedraw?`*`)`

    `this`

    Merges an object with the new parameters and re-requests tiles on the current screen (unless `noRedraw` was set to true).

    Methods inherited from [TileLayer](#tilelayer)

    Method

    Returns

    Description
- name: 'TileLayer.WMS methods: setPopupContent'
  id: index#tilelayer-wms-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'TileLayer.WMS methods: setTooltipContent'
  id: index#tilelayer-wms-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'TileLayer.WMS methods: setUrl'
  id: index#tilelayer-wms-seturl
  summary: Updates the layer's URL template and redraws it (unless noRedraw is set to true)
  description: |-
    `setUrl(<String> `*`url`*`, <Boolean> `*`noRedraw?`*`)`

    `this`

    Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`). If the URL does not change, the layer will not be redrawn unless the noRedraw parameter is set to false.
- name: 'TileLayer.WMS methods: setZIndex'
  id: index#tilelayer-wms-setzindex
  summary: Changes the zIndex of the grid layer
  description: |-
    `setZIndex(<Number> `*`zIndex`*`)`

    `this`

    Changes the [zIndex](#gridlayer-zindex) of the grid layer.
- name: 'TileLayer.WMS methods: togglePopup'
  id: index#tilelayer-wms-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'TileLayer.WMS methods: toggleTooltip'
  id: index#tilelayer-wms-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'TileLayer.WMS methods: unbindPopup'
  id: index#tilelayer-wms-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'TileLayer.WMS methods: unbindTooltip'
  id: index#tilelayer-wms-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'TileLayer.WMS options: attribution'
  id: index#tilelayer-wms-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Extension methods inherited from [TileLayer](#tilelayer)

    Event

    Data

    Description
- name: 'TileLayer.WMS options: bounds'
  id: index#tilelayer-wms-bounds
  summary: If set, tiles will only be loaded inside the set LatLngBounds
  description: |-
    `bounds`

    ` `[`LatLngBounds`](#latlngbounds)` `

    `undefined`

    If set, tiles will only be loaded inside the set [`LatLngBounds`](#latlngbounds).
- name: 'TileLayer.WMS options: className'
  id: index#tilelayer-wms-classname
  summary: A custom class name to assign to the tile layer
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the tile layer. Empty by default.
- name: 'TileLayer.WMS options: crossOrigin'
  id: index#tilelayer-wms-crossorigin
  summary: Whether the crossOrigin attribute will be added to the tiles
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the tiles. If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.
- name: 'TileLayer.WMS options: crs'
  id: index#tilelayer-wms-crs
  summary: Coordinate Reference System to use for the WMS requests, defaults to map CRS
  description: |-
    `crs`

    ` `[`CRS`](#crs)` `

    `null`

    Coordinate Reference System to use for the WMS requests, defaults to map CRS. Don't change this if you're not sure what it means.
- name: 'TileLayer.WMS options: detectRetina'
  id: index#tilelayer-wms-detectretina
  summary: If true and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution
  description: |-
    `detectRetina`

    `Boolean`

    `false`

    If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.
- name: 'TileLayer.WMS options: errorTileUrl'
  id: index#tilelayer-wms-errortileurl
  summary: URL to the tile image to show in place of the tile that failed to load
  description: |-
    `errorTileUrl`

    `String`

    `''`

    URL to the tile image to show in place of the tile that failed to load.
- name: 'TileLayer.WMS options: format'
  id: index#tilelayer-wms-format
  summary: WMS image format (use 'image/png' for layers with transparency)
  description: |-
    `format`

    `String`

    `'image/jpeg'`

    WMS image format (use `'image/png'` for layers with transparency).
- name: 'TileLayer.WMS options: keepBuffer'
  id: index#tilelayer-wms-keepbuffer
  summary: When panning the map, keep this many rows and columns of tiles before unloading them
  description: |-
    `keepBuffer`

    `Number`

    `2`

    When panning the map, keep this many rows and columns of tiles before unloading them.

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'TileLayer.WMS options: layers'
  id: index#tilelayer-wms-layers
  summary: (required) Comma-separated list of WMS layers to show
  description: |-
    `layers`

    `String`

    `''`

    **(required)** Comma-separated list of WMS layers to show.
- name: 'TileLayer.WMS options: maxNativeZoom'
  id: index#tilelayer-wms-maxnativezoom
  summary: Maximum zoom number the tile source has available
  description: |-
    `maxNativeZoom`

    `Number`

    `undefined`

    Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than `maxNativeZoom` will be loaded from `maxNativeZoom` level and auto-scaled.
- name: 'TileLayer.WMS options: maxZoom'
  id: index#tilelayer-wms-maxzoom
  summary: The maximum zoom level up to which this layer will be displayed (inclusive)
  description: |-
    `maxZoom`

    `Number`

    `18`

    The maximum zoom level up to which this layer will be displayed (inclusive).
- name: 'TileLayer.WMS options: minNativeZoom'
  id: index#tilelayer-wms-minnativezoom
  summary: Minimum zoom number the tile source has available
  description: |-
    `minNativeZoom`

    `Number`

    `undefined`

    Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than `minNativeZoom` will be loaded from `minNativeZoom` level and auto-scaled.
- name: 'TileLayer.WMS options: minZoom'
  id: index#tilelayer-wms-minzoom
  summary: The minimum zoom level down to which this layer will be displayed (inclusive)
  description: |-
    `minZoom`

    `Number`

    `0`

    The minimum zoom level down to which this layer will be displayed (inclusive).
- name: 'TileLayer.WMS options: noWrap'
  id: index#tilelayer-wms-nowrap
  summary: Whether the layer is wrapped around the antimeridian
  description: |-
    `noWrap`

    `Boolean`

    `false`

    Whether the layer is wrapped around the antimeridian. If `true`, the GridLayer will only be displayed once at low zoom levels. Has no effect when the [map CRS](#map-crs) doesn't wrap around. Can be used in combination with [`bounds`](#gridlayer-bounds) to prevent requesting tiles outside the CRS limits.
- name: 'TileLayer.WMS options: opacity'
  id: index#tilelayer-wms-opacity
  summary: Opacity of the tiles
  description: |-
    `opacity`

    `Number`

    `1.0`

    Opacity of the tiles. Can be used in the `createTile()` function.
- name: 'TileLayer.WMS options: pane'
  id: index#tilelayer-wms-pane
  summary: Map pane where the grid layer will be added
  description: |-
    `pane`

    `String`

    `'tilePane'`

    `Map pane` where the grid layer will be added.
- name: 'TileLayer.WMS options: referrerPolicy'
  id: index#tilelayer-wms-referrerpolicy
  summary: Whether the referrerPolicy attribute will be added to the tiles
  description: |-
    `referrerPolicy`

    `Boolean|String`

    `false`

    Whether the referrerPolicy attribute will be added to the tiles. If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided. This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer (e.g. to validate an API token). Refer to [HTMLImageElement.referrerPolicy](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy) for valid String values.

    Options inherited from [GridLayer](#gridlayer)

    Option

    Type

    Default

    Description
- name: 'TileLayer.WMS options: styles'
  id: index#tilelayer-wms-styles
  summary: Comma-separated list of WMS styles
  description: |-
    `styles`

    `String`

    `''`

    Comma-separated list of WMS styles.
- name: 'TileLayer.WMS options: subdomains'
  id: index#tilelayer-wms-subdomains
  summary: Subdomains of the tile service
  description: |-
    `subdomains`

    `String|String[]`

    `'abc'`

    Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.
- name: 'TileLayer.WMS options: tileSize'
  id: index#tilelayer-wms-tilesize
  summary: Width and height of tiles in the grid
  description: |-
    `tileSize`

    `Number|Point`

    `256`

    Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.
- name: 'TileLayer.WMS options: tms'
  id: index#tilelayer-wms-tms
  summary: If true, inverses Y axis numbering for tiles (turn this on for TMS services)
  description: |-
    `tms`

    `Boolean`

    `false`

    If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services).
- name: 'TileLayer.WMS options: transparent'
  id: index#tilelayer-wms-transparent
  summary: If true, the WMS service will return images with transparency
  description: |-
    `transparent`

    `Boolean`

    `false`

    If `true`, the WMS service will return images with transparency.
- name: 'TileLayer.WMS options: updateInterval'
  id: index#tilelayer-wms-updateinterval
  summary: Tiles will not update more than once every updateInterval milliseconds when panning
  description: |-
    `updateInterval`

    `Number`

    `200`

    Tiles will not update more than once every `updateInterval` milliseconds when panning.
- name: 'TileLayer.WMS options: updateWhenIdle'
  id: index#tilelayer-wms-updatewhenidle
  summary: Load new tiles only when panning ends
  description: |-
    `updateWhenIdle`

    `Boolean`

    `(depends)`

    Load new tiles only when panning ends. `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation. `false` otherwise in order to display new tiles *during* panning, since it is easy to pan outside the [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.
- name: 'TileLayer.WMS options: updateWhenZooming'
  id: index#tilelayer-wms-updatewhenzooming
  summary: By default, a smooth zoom animation (during a touch zoom or a flyTo()) will update grid layers every integer zoom level
  description: |-
    `updateWhenZooming`

    `Boolean`

    `true`

    By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.
- name: 'TileLayer.WMS options: uppercase'
  id: index#tilelayer-wms-uppercase
  summary: If true, WMS request parameter keys will be uppercase
  description: |-
    `uppercase`

    `Boolean`

    `false`

    If `true`, WMS request parameter keys will be uppercase.

    Options inherited from [TileLayer](#tilelayer)

    Option

    Type

    Default

    Description
- name: 'TileLayer.WMS options: version'
  id: index#tilelayer-wms-version
  summary: null
  description: |-
    `version`

    `String`

    `'1.1.1'`

    Version of the WMS service to use
- name: 'TileLayer.WMS options: zIndex'
  id: index#tilelayer-wms-zindex
  summary: The explicit zIndex of the tile layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit zIndex of the tile layer.
- name: 'TileLayer.WMS options: zoomOffset'
  id: index#tilelayer-wms-zoomoffset
  summary: The zoom number used in tile URLs will be offset with this value
  description: |-
    `zoomOffset`

    `Number`

    `0`

    The zoom number used in tile URLs will be offset with this value.
- name: 'TileLayer.WMS options: zoomReverse'
  id: index#tilelayer-wms-zoomreverse
  summary: null
  description: |-
    `zoomReverse`

    `Boolean`

    `false`

    If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)
- name: Tooltip
  id: index#tooltip
  summary: Used to display small texts on top of map layers
  description: |-
    ## Tooltip

    Used to display small texts on top of map layers.

    ### Usage example

    If you want to just bind a tooltip to marker:

    ``` javascript
    marker.bindTooltip("my tooltip text").openTooltip();
    ```

    Path overlays like polylines also have a `bindTooltip` method.

    A tooltip can be also standalone:

    ``` javascript
    var tooltip = L.tooltip()
        .setLatLng(latlng)
        .setContent('Hello world!<br />This is a nice tooltip.')
        .addTo(map);
    ```

    or

    ``` javascript
    var tooltip = L.tooltip(latlng, {content: 'Hello world!<br />This is a nice tooltip.'})
        .addTo(map);
    ```

    Note about tooltip offset. Leaflet takes two options in consideration for computing tooltip offsetting:

    - the `offset` Tooltip option: it defaults to \[0, 0\], and it's specific to one tooltip. Add a positive x offset to move the tooltip to the right, and a positive y offset to move it to the bottom. Negatives will move to the left and top.
    - the `tooltipAnchor` Icon option: this will only be considered for Marker. You should adapt this value if you use a custom icon.

    ### Creation

    Factory

    Description
- name: 'Tooltip creation: L.tooltip'
  id: index#tooltip-l-tooltip
  summary: Instantiates a Tooltip object given an optional options object that describes its appearance and location and an optional source object that is used to tag the tooltip with a reference to the Layer to which it refers
  description: |-
    `L.tooltip(<`[`Tooltip options`](#tooltip-option)`> `*`options?`*`, <`[`Layer`](#layer)`> `*`source?`*`)`

    Instantiates a [`Tooltip`](#tooltip) object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the tooltip with a reference to the Layer to which it refers.

    `L.tooltip(<`[`LatLng`](#latlng)`> `*`latlng`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    Instantiates a [`Tooltip`](#tooltip) object given `latlng` where the tooltip will open and an optional `options` object that describes its appearance and location.

    ### Options

    Option

    Type

    Default

    Description
- name: 'Tooltip events: add'
  id: index#tooltip-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'Tooltip events: click'
  id: index#tooltip-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'Tooltip events: contentupdate'
  id: index#tooltip-contentupdate
  summary: null
  description: |-
    `contentupdate`

    ` `[`Event`](#event)` `

    Fired when the content of the overlay is updated

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'Tooltip events: contextmenu'
  id: index#tooltip-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Tooltip events: dblclick'
  id: index#tooltip-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'Tooltip events: mousedown'
  id: index#tooltip-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'Tooltip events: mouseout'
  id: index#tooltip-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'Tooltip events: mouseover'
  id: index#tooltip-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'Tooltip events: mouseup'
  id: index#tooltip-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'Tooltip events: popupclose'
  id: index#tooltip-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'Tooltip events: popupopen'
  id: index#tooltip-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'Tooltip events: tooltipclose'
  id: index#tooltip-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Methods inherited from [DivOverlay](#divoverlay)

    Method

    Returns

    Description
- name: 'Tooltip events: tooltipopen'
  id: index#tooltip-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'Tooltip methods: addEventListener'
  id: index#tooltip-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'Tooltip methods: addEventParent'
  id: index#tooltip-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'Tooltip methods: addOneTimeEventListener'
  id: index#tooltip-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'Tooltip methods: addTo'
  id: index#tooltip-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'Tooltip methods: bindPopup'
  id: index#tooltip-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Tooltip methods: bindTooltip'
  id: index#tooltip-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'Tooltip methods: bringToBack'
  id: index#tooltip-bringtoback
  summary: Brings this overlay to the back of other overlays (in the same map pane)
  description: |-
    `bringToBack()`

    `this`

    Brings this overlay to the back of other overlays (in the same map pane).

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Tooltip methods: bringToFront'
  id: index#tooltip-bringtofront
  summary: Brings this overlay in front of other overlays (in the same map pane)
  description: |-
    `bringToFront()`

    `this`

    Brings this overlay in front of other overlays (in the same map pane).
- name: 'Tooltip methods: clearAllEventListeners'
  id: index#tooltip-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'Tooltip methods: close'
  id: index#tooltip-close
  summary: Closes the overlay
  description: |-
    `close()`

    `this`

    Closes the overlay. Alternative to `map.closePopup(popup)`/`.closeTooltip(tooltip)` and `layer.closePopup()`/`.closeTooltip()`.
- name: 'Tooltip methods: closePopup'
  id: index#tooltip-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'Tooltip methods: closeTooltip'
  id: index#tooltip-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'Tooltip methods: fire'
  id: index#tooltip-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'Tooltip methods: fireEvent'
  id: index#tooltip-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'Tooltip methods: getAttribution'
  id: index#tooltip-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Tooltip methods: getContent'
  id: index#tooltip-getcontent
  summary: Returns the content of the overlay
  description: |-
    `getContent()`

    `String|HTMLElement`

    Returns the content of the overlay.
- name: 'Tooltip methods: getElement'
  id: index#tooltip-getelement
  summary: Returns the HTML container of the overlay
  description: |-
    `getElement()`

    `String|HTMLElement`

    Returns the HTML container of the overlay.
- name: 'Tooltip methods: getLatLng'
  id: index#tooltip-getlatlng
  summary: Returns the geographical point of the overlay
  description: |-
    `getLatLng()`

    ` `[`LatLng`](#latlng)` `

    Returns the geographical point of the overlay.
- name: 'Tooltip methods: getPane'
  id: index#tooltip-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'Tooltip methods: getPopup'
  id: index#tooltip-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'Tooltip methods: getTooltip'
  id: index#tooltip-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'Tooltip methods: hasEventListeners'
  id: index#tooltip-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'Tooltip methods: isOpen'
  id: index#tooltip-isopen
  summary: Returns true when the overlay is visible on the map
  description: |-
    `isOpen()`

    `Boolean`

    Returns `true` when the overlay is visible on the map.
- name: 'Tooltip methods: isPopupOpen'
  id: index#tooltip-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'Tooltip methods: isTooltipOpen'
  id: index#tooltip-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'Tooltip methods: listens'
  id: index#tooltip-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'Tooltip methods: off'
  id: index#tooltip-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'Tooltip methods: on'
  id: index#tooltip-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'Tooltip methods: once'
  id: index#tooltip-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'Tooltip methods: openOn'
  id: index#tooltip-openon
  summary: Adds the overlay to the map
  description: |-
    `openOn(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Adds the overlay to the map. Alternative to `map.openPopup(popup)`/`.openTooltip(tooltip)`.
- name: 'Tooltip methods: openPopup'
  id: index#tooltip-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'Tooltip methods: openTooltip'
  id: index#tooltip-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'Tooltip methods: removeEventListener'
  id: index#tooltip-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'Tooltip methods: removeEventParent'
  id: index#tooltip-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'Tooltip methods: removeFrom'
  id: index#tooltip-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'Tooltip methods: setContent'
  id: index#tooltip-setcontent
  summary: Sets the HTML content of the overlay
  description: |-
    `setContent(<String|HTMLElement|Function> `*`htmlContent`*`)`

    `this`

    Sets the HTML content of the overlay. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.
- name: 'Tooltip methods: setLatLng'
  id: index#tooltip-setlatlng
  summary: Sets the geographical point where the overlay will open
  description: |-
    `setLatLng(<`[`LatLng`](#latlng)`> `*`latlng`*`)`

    `this`

    Sets the geographical point where the overlay will open.
- name: 'Tooltip methods: setPopupContent'
  id: index#tooltip-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'Tooltip methods: setTooltipContent'
  id: index#tooltip-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'Tooltip methods: toggle'
  id: index#tooltip-toggle
  summary: Opens or closes the overlay bound to layer depending on its current state
  description: |-
    `toggle(<`[`Layer`](#layer)`> `*`layer?`*`)`

    `this`

    Opens or closes the overlay bound to layer depending on its current state. Argument may be omitted only for overlay bound to layer. Alternative to `layer.togglePopup()`/`.toggleTooltip()`.
- name: 'Tooltip methods: togglePopup'
  id: index#tooltip-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'Tooltip methods: toggleTooltip'
  id: index#tooltip-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'Tooltip methods: unbindPopup'
  id: index#tooltip-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'Tooltip methods: unbindTooltip'
  id: index#tooltip-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'Tooltip methods: update'
  id: index#tooltip-update
  summary: Updates the overlay content, layout and position
  description: |-
    `update()`

    `null`

    Updates the overlay content, layout and position. Useful for updating the overlay after something inside changed, e.g. image loaded.
- name: 'Tooltip options: attribution'
  id: index#tooltip-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    DivOverlay events inherited from [DivOverlay](#divoverlay)

    Event

    Data

    Description
- name: 'Tooltip options: bubblingMouseEvents'
  id: index#tooltip-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'Tooltip options: className'
  id: index#tooltip-classname
  summary: A custom CSS class name to assign to the overlay
  description: |-
    `className`

    `String`

    `''`

    A custom CSS class name to assign to the overlay.
- name: 'Tooltip options: content'
  id: index#tooltip-content
  summary: Sets the HTML content of the overlay while initializing
  description: |-
    `content`

    `String|HTMLElement|Function`

    `''`

    Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'Tooltip options: direction'
  id: index#tooltip-direction
  summary: Direction where to open the tooltip
  description: |-
    `direction`

    `String`

    `'auto'`

    Direction where to open the tooltip. Possible values are: `right`, `left`, `top`, `bottom`, `center`, `auto`. `auto` will dynamically switch between `right` and `left` according to the tooltip position on the map.
- name: 'Tooltip options: interactive'
  id: index#tooltip-interactive
  summary: If true, the popup/tooltip will listen to the mouse events
  description: |-
    `interactive`

    `Boolean`

    `false`

    If true, the popup/tooltip will listen to the mouse events.
- name: 'Tooltip options: offset'
  id: index#tooltip-offset
  summary: Optional offset of the tooltip position
  description: |-
    `offset`

    ` `[`Point`](#point)` `

    `Point(0, 0)`

    Optional offset of the tooltip position.
- name: 'Tooltip options: opacity'
  id: index#tooltip-opacity
  summary: Tooltip container opacity
  description: |-
    `opacity`

    `Number`

    `0.9`

    Tooltip container opacity.

    Options inherited from [DivOverlay](#divoverlay)

    Option

    Type

    Default

    Description
- name: 'Tooltip options: pane'
  id: index#tooltip-pane
  summary: Map pane where the tooltip will be added
  description: |-
    `pane`

    `String`

    `'tooltipPane'`

    `Map pane` where the tooltip will be added.
- name: 'Tooltip options: permanent'
  id: index#tooltip-permanent
  summary: Whether to open the tooltip permanently or only on mouseover
  description: |-
    `permanent`

    `Boolean`

    `false`

    Whether to open the tooltip permanently or only on mouseover.
- name: 'Tooltip options: sticky'
  id: index#tooltip-sticky
  summary: If true, the tooltip will follow the mouse instead of being fixed at the feature center
  description: |-
    `sticky`

    `Boolean`

    `false`

    If true, the tooltip will follow the mouse instead of being fixed at the feature center.
- name: Transformation
  id: index#transformation
  summary: 'Represents an affine transformation: a set of coefficients a, b, c, d for transforming a point of a form (x, y) into (a*x + b, c*y + d) and doing the reverse'
  description: |-
    ## Transformation

    Represents an affine transformation: a set of coefficients `a`, `b`, `c`, `d` for transforming a point of a form `(x, y)` into `(a*x + b, c*y + d)` and doing the reverse. Used by Leaflet in its projections code.

    ### Usage example

    ``` javascript
    var transformation = L.transformation(2, 5, -1, 10),
        p = L.point(1, 2),
        p2 = transformation.transform(p), //  L.point(7, 8)
        p3 = transformation.untransform(p2); //  L.point(1, 2)
    ```

    ### Creation

    Factory

    Description
- name: 'Transformation creation: L.transformation'
  id: index#transformation-l-transformation
  summary: Instantiates a Transformation object with the given coefficients
  description: |-
    `L.transformation(<Number> `*`a`*`, <Number> `*`b`*`, <Number> `*`c`*`, <Number> `*`d`*`)`

    Instantiates a Transformation object with the given coefficients.

    `L.transformation(<Array> `*`coefficients`*`)`

    Expects an coefficients array of the form `[a: Number, b: Number, c: Number, d: Number]`.

    ### Methods

    Method

    Returns

    Description
- name: 'Transformation methods: transform'
  id: index#transformation-transform
  summary: Returns a transformed point, optionally multiplied by the given scale
  description: |-
    `transform(<`[`Point`](#point)`> `*`point`*`, <Number> `*`scale?`*`)`

    ` `[`Point`](#point)` `

    Returns a transformed point, optionally multiplied by the given scale. Only accepts actual [`L.Point`](#point) instances, not arrays.
- name: 'Transformation methods: untransform'
  id: index#transformation-untransform
  summary: Returns the reverse transformation of the given point, optionally divided by the given scale
  description: |-
    `untransform(<`[`Point`](#point)`> `*`point`*`, <Number> `*`scale?`*`)`

    ` `[`Point`](#point)` `

    Returns the reverse transformation of the given point, optionally divided by the given scale. Only accepts actual [`L.Point`](#point) instances, not arrays.
- name: Util
  id: index#util
  summary: Various utility functions, used by Leaflet internally
  description: |-
    ## Util

    Various utility functions, used by Leaflet internally.

    ### Functions

    Function

    Returns

    Description
- name: 'Util functions: bind'
  id: index#util-bind
  summary: Returns a new function bound to the arguments passed, like Function.prototype.bind
  description: |-
    `bind(<Function> `*`fn`*`, `*`…`*`)`

    `Function`

    Returns a new function bound to the arguments passed, like [Function.prototype.bind](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/bind). Has a `L.bind()` shortcut.
- name: 'Util functions: cancelAnimFrame'
  id: index#util-cancelanimframe
  summary: Cancels a previous requestAnimFrame
  description: |-
    `cancelAnimFrame(<Number> `*`id`*`)`

    `undefined`

    Cancels a previous `requestAnimFrame`. See also [window.cancelAnimationFrame](https://developer.mozilla.org/docs/Web/API/window/cancelAnimationFrame).

    ### Properties

    Property

    Type

    Description
- name: 'Util functions: create'
  id: index#util-create
  summary: null
  description: |-
    `create(<Object> `*`proto`*`, <Object> `*`properties?`*`)`

    `Object`

    Compatibility polyfill for [Object.create](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/create)
- name: 'Util functions: extend'
  id: index#util-extend
  summary: Merges the properties of the src object (or multiple objects) into dest object and returns the latter
  description: |-
    `extend(<Object> `*`dest`*`, <Object> `*`src?`*`)`

    `Object`

    Merges the properties of the `src` object (or multiple objects) into `dest` object and returns the latter. Has an `L.extend` shortcut.
- name: 'Util functions: falseFn'
  id: index#util-falsefn
  summary: Returns a function which always returns false
  description: |-
    `falseFn()`

    `Function`

    Returns a function which always returns `false`.
- name: 'Util functions: formatNum'
  id: index#util-formatnum
  summary: Returns the number num rounded with specified precision
  description: |-
    `formatNum(<Number> `*`num`*`, <Number|false> `*`precision?`*`)`

    `Number`

    Returns the number `num` rounded with specified `precision`. The default `precision` value is 6 decimal places. `false` can be passed to skip any processing (can be useful to avoid round-off errors).
- name: 'Util functions: getParamString'
  id: index#util-getparamstring
  summary: Converts an object into a parameter URL string, e.g
  description: |-
    `getParamString(<Object> `*`obj`*`, <String> `*`existingUrl?`*`, <Boolean> `*`uppercase?`*`)`

    `String`

    Converts an object into a parameter URL string, e.g. `{a: "foo", b: "bar"}` translates to `'?a=foo&b=bar'`. If `existingUrl` is set, the parameters will be appended at the end. If `uppercase` is `true`, the parameter names will be uppercased (e.g. `'?A=foo&B=bar'`)
- name: 'Util functions: indexOf'
  id: index#util-indexof
  summary: null
  description: |-
    `indexOf(<Array> `*`array`*`, <Object> `*`el`*`)`

    `Number`

    Compatibility polyfill for [Array.prototype.indexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)
- name: 'Util functions: isArray'
  id: index#util-isarray
  summary: null
  description: |-
    `isArray(`*`obj`*`)`

    `Boolean`

    Compatibility polyfill for [Array.isArray](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)
- name: 'Util functions: requestAnimFrame'
  id: index#util-requestanimframe
  summary: Schedules fn to be executed when the browser repaints
  description: |-
    `requestAnimFrame(<Function> `*`fn`*`, <Object> `*`context?`*`, <Boolean> `*`immediate?`*`)`

    `Number`

    Schedules `fn` to be executed when the browser repaints. `fn` is bound to `context` if given. When `immediate` is set, `fn` is called immediately if the browser doesn't have native support for [`window.requestAnimationFrame`](https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame), otherwise it's delayed. Returns a request ID that can be used to cancel the request.
- name: 'Util functions: setOptions'
  id: index#util-setoptions
  summary: Merges the given properties to the options of the obj object, returning the resulting options
  description: |-
    `setOptions(<Object> `*`obj`*`, <Object> `*`options`*`)`

    `Object`

    Merges the given properties to the `options` of the `obj` object, returning the resulting options. See `Class options`. Has an `L.setOptions` shortcut.
- name: 'Util functions: splitWords'
  id: index#util-splitwords
  summary: Trims and splits the string on whitespace and returns the array of parts
  description: |-
    `splitWords(<String> `*`str`*`)`

    `String[]`

    Trims and splits the string on whitespace and returns the array of parts.
- name: 'Util functions: stamp'
  id: index#util-stamp
  summary: Returns the unique ID of an object, assigning it one if it doesn't have it
  description: |-
    `stamp(<Object> `*`obj`*`)`

    `Number`

    Returns the unique ID of an object, assigning it one if it doesn't have it.
- name: 'Util functions: template'
  id: index#util-template
  summary: 'Simple templating facility, accepts a template string of the form ''Hello {a}, {b}'' and a data object like {a: ''foo'', b: ''bar''}, returns evaluated string (''Hello foo, bar'')'
  description: |-
    `template(<String> `*`str`*`, <Object> `*`data`*`)`

    `String`

    Simple templating facility, accepts a template string of the form `'Hello {a}, {b}'` and a data object like `{a: 'foo', b: 'bar'}`, returns evaluated string `('Hello foo, bar')`. You can also specify functions instead of strings for data values — they will be evaluated passing `data` as an argument.
- name: 'Util functions: throttle'
  id: index#util-throttle
  summary: Returns a function which executes function fn with the given scope context (so that the this keyword refers to context inside fn's code)
  description: |-
    `throttle(<Function> `*`fn`*`, <Number> `*`time`*`, <Object> `*`context`*`)`

    `Function`

    Returns a function which executes function `fn` with the given scope `context` (so that the `this` keyword refers to `context` inside `fn`'s code). The function `fn` will be called no more than one time per given amount of `time`. The arguments received by the bound function will be any arguments passed when binding the function, followed by any arguments passed when invoking the bound function. Has an `L.throttle` shortcut.
- name: 'Util functions: trim'
  id: index#util-trim
  summary: null
  description: |-
    `trim(<String> `*`str`*`)`

    `String`

    Compatibility polyfill for [String.prototype.trim](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)
- name: 'Util functions: wrapNum'
  id: index#util-wrapnum
  summary: Returns the number num modulo range in such a way so it lies within range[0] and range[1]
  description: |-
    `wrapNum(<Number> `*`num`*`, <Number[]> `*`range`*`, <Boolean> `*`includeMax?`*`)`

    `Number`

    Returns the number `num` modulo `range` in such a way so it lies within `range[0]` and `range[1]`. The returned value will be always smaller than `range[1]` unless `includeMax` is set to `true`.
- name: 'Util properties: emptyImageUrl'
  id: index#util-emptyimageurl
  summary: Data URI string containing a base64-encoded empty GIF image
  description: |-
    `emptyImageUrl`

    `String`

    Data URI string containing a base64-encoded empty GIF image. Used as a hack to free memory from unused images on WebKit-powered mobile devices (by setting image `src` to this string).
- name: 'Util properties: lastId'
  id: index#util-lastid
  summary: null
  description: |-
    `lastId`

    `Number`

    Last unique ID used by [`stamp()`](#util-stamp)
- name: version
  id: index#version
  summary: A constant that represents the Leaflet version in use
  description: "## version\n\nA constant that represents the Leaflet version in use.\n\n``` javascript\nL.version; // contains \"1.0.0\" (or whatever version is currently in use)\n```\n\n© 2010–2022 Vladimir Agafonkin  \n© 2010–2011, CloudMade  \nMaps © OpenStreetMap contributors.  \n[https://leafletjs.com/reference.html](https://leafletjs.com/reference.html)"
- name: VideoOverlay
  id: index#videooverlay
  summary: Used to load and display a video player over specific bounds of the map
  description: |-
    ## VideoOverlay

    Used to load and display a video player over specific bounds of the map. Extends [`ImageOverlay`](#imageoverlay).

    A video overlay uses the [`<video>`](https://developer.mozilla.org/docs/Web/HTML/Element/video) HTML5 element.

    ### Usage example

    ``` javascript
    var videoUrl = 'https://www.mapbox.com/bites/00188/patricia_nasa.webm',
        videoBounds = [[ 32, -130], [ 13, -100]];
    L.videoOverlay(videoUrl, videoBounds ).addTo(map);
    ```

    ### Creation

    Factory

    Description
- name: 'VideoOverlay creation: L.videoOverlay'
  id: index#videooverlay-l-videooverlay
  summary: Instantiates an image overlay object given the URL of the video (or array of URLs, or even a video element) and the geographical bounds it is tied to
  description: |-
    `L.videoOverlay(<String|Array|HTMLVideoElement> `*`video`*`, <`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`, <`[`VideoOverlay options`](#videooverlay-option)`> `*`options?`*`)`

    Instantiates an image overlay object given the URL of the video (or array of URLs, or even a video element) and the geographical bounds it is tied to.

    ### Options

    Option

    Type

    Default

    Description
- name: 'VideoOverlay events: add'
  id: index#videooverlay-add
  summary: null
  description: |-
    `add`

    ` `[`Event`](#event)` `

    Fired after the layer is added to a map
- name: 'VideoOverlay events: click'
  id: index#videooverlay-click
  summary: Fired when the user clicks (or taps) the layer
  description: |-
    `click`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user clicks (or taps) the layer.
- name: 'VideoOverlay events: contextmenu'
  id: index#videooverlay-contextmenu
  summary: Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event
  description: |-
    `contextmenu`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user right-clicks on the layer, prevents default browser context menu from showing if there are listeners on this event. Also fired on mobile when the user holds a single touch for a second (also called long press).

    Events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'VideoOverlay events: dblclick'
  id: index#videooverlay-dblclick
  summary: Fired when the user double-clicks (or double-taps) the layer
  description: |-
    `dblclick`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user double-clicks (or double-taps) the layer.
- name: 'VideoOverlay events: error'
  id: index#videooverlay-error
  summary: null
  description: |-
    `error`

    ` `[`Event`](#event)` `

    Fired when the ImageOverlay layer fails to load its image

    Mouse events inherited from [Interactive layer](#interactive-layer)

    Event

    Data

    Description
- name: 'VideoOverlay events: load'
  id: index#videooverlay-load
  summary: null
  description: |-
    `load`

    ` `[`Event`](#event)` `

    Fired when the video has finished loading the first frame

    Events inherited from [ImageOverlay](#imageoverlay)

    Event

    Data

    Description
- name: 'VideoOverlay events: mousedown'
  id: index#videooverlay-mousedown
  summary: Fired when the user pushes the mouse button on the layer
  description: |-
    `mousedown`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user pushes the mouse button on the layer.
- name: 'VideoOverlay events: mouseout'
  id: index#videooverlay-mouseout
  summary: Fired when the mouse leaves the layer
  description: |-
    `mouseout`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse leaves the layer.
- name: 'VideoOverlay events: mouseover'
  id: index#videooverlay-mouseover
  summary: Fired when the mouse enters the layer
  description: |-
    `mouseover`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the mouse enters the layer.
- name: 'VideoOverlay events: mouseup'
  id: index#videooverlay-mouseup
  summary: Fired when the user releases the mouse button pushed on the layer
  description: |-
    `mouseup`

    ` `[`MouseEvent`](#mouseevent)` `

    Fired when the user releases the mouse button pushed on the layer.
- name: 'VideoOverlay events: popupclose'
  id: index#videooverlay-popupclose
  summary: null
  description: |-
    `popupclose`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is closed

    Tooltip events inherited from [Layer](#layer)

    Event

    Data

    Description
- name: 'VideoOverlay events: popupopen'
  id: index#videooverlay-popupopen
  summary: null
  description: |-
    `popupopen`

    ` `[`PopupEvent`](#popupevent)` `

    Fired when a popup bound to this layer is opened
- name: 'VideoOverlay events: tooltipclose'
  id: index#videooverlay-tooltipclose
  summary: Fired when a tooltip bound to this layer is closed
  description: |-
    `tooltipclose`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is closed.

    ### Methods

    Method

    Returns

    Description
- name: 'VideoOverlay events: tooltipopen'
  id: index#videooverlay-tooltipopen
  summary: Fired when a tooltip bound to this layer is opened
  description: |-
    `tooltipopen`

    ` `[`TooltipEvent`](#tooltipevent)` `

    Fired when a tooltip bound to this layer is opened.
- name: 'VideoOverlay methods: addEventListener'
  id: index#videooverlay-addeventlistener
  summary: null
  description: |-
    `addEventListener(`*`…`*`)`

    `this`

    Alias to [`on(…)`](#evented-on)
- name: 'VideoOverlay methods: addEventParent'
  id: index#videooverlay-addeventparent
  summary: null
  description: |-
    `addEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Adds an event parent - an [`Evented`](#evented) that will receive propagated events
- name: 'VideoOverlay methods: addOneTimeEventListener'
  id: index#videooverlay-addonetimeeventlistener
  summary: null
  description: |-
    `addOneTimeEventListener(`*`…`*`)`

    `this`

    Alias to [`once(…)`](#evented-once)
- name: 'VideoOverlay methods: addTo'
  id: index#videooverlay-addto
  summary: Adds the layer to the given map or layer group
  description: |-
    `addTo(<Map|LayerGroup> `*`map`*`)`

    `this`

    Adds the layer to the given map or layer group.
- name: 'VideoOverlay methods: bindPopup'
  id: index#videooverlay-bindpopup
  summary: Binds a popup to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindPopup(<String|HTMLElement|Function|Popup> `*`content`*`, <`[`Popup options`](#popup-option)`> `*`options?`*`)`

    `this`

    Binds a popup to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'VideoOverlay methods: bindTooltip'
  id: index#videooverlay-bindtooltip
  summary: Binds a tooltip to the layer with the passed content and sets up the necessary event listeners
  description: |-
    `bindTooltip(<String|HTMLElement|Function|Tooltip> `*`content`*`, <`[`Tooltip options`](#tooltip-option)`> `*`options?`*`)`

    `this`

    Binds a tooltip to the layer with the passed `content` and sets up the necessary event listeners. If a `Function` is passed it will receive the layer as the first argument and should return a `String` or `HTMLElement`.
- name: 'VideoOverlay methods: bringToBack'
  id: index#videooverlay-bringtoback
  summary: Brings the layer to the bottom of all overlays
  description: |-
    `bringToBack()`

    `this`

    Brings the layer to the bottom of all overlays.
- name: 'VideoOverlay methods: bringToFront'
  id: index#videooverlay-bringtofront
  summary: Brings the layer to the top of all overlays
  description: |-
    `bringToFront()`

    `this`

    Brings the layer to the top of all overlays.
- name: 'VideoOverlay methods: clearAllEventListeners'
  id: index#videooverlay-clearalleventlisteners
  summary: null
  description: |-
    `clearAllEventListeners(`*`…`*`)`

    `this`

    Alias to [`off()`](#evented-off)
- name: 'VideoOverlay methods: closePopup'
  id: index#videooverlay-closepopup
  summary: Closes the popup bound to this layer if it is open
  description: |-
    `closePopup()`

    `this`

    Closes the popup bound to this layer if it is open.
- name: 'VideoOverlay methods: closeTooltip'
  id: index#videooverlay-closetooltip
  summary: Closes the tooltip bound to this layer if it is open
  description: |-
    `closeTooltip()`

    `this`

    Closes the tooltip bound to this layer if it is open.
- name: 'VideoOverlay methods: fire'
  id: index#videooverlay-fire
  summary: Fires an event of the specified type
  description: |-
    `fire(<String> `*`type`*`, <Object> `*`data?`*`, <Boolean> `*`propagate?`*`)`

    `this`

    Fires an event of the specified type. You can optionally provide a data object — the first argument of the listener function will contain its properties. The event can optionally be propagated to event parents.
- name: 'VideoOverlay methods: fireEvent'
  id: index#videooverlay-fireevent
  summary: null
  description: |-
    `fireEvent(`*`…`*`)`

    `this`

    Alias to [`fire(…)`](#evented-fire)
- name: 'VideoOverlay methods: getAttribution'
  id: index#videooverlay-getattribution
  summary: Used by the attribution control, returns the attribution option
  description: |-
    `getAttribution()`

    `String`

    Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

    Popup methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'VideoOverlay methods: getBounds'
  id: index#videooverlay-getbounds
  summary: null
  description: |-
    `getBounds()`

    ` `[`LatLngBounds`](#latlngbounds)` `

    Get the bounds that this ImageOverlay covers
- name: 'VideoOverlay methods: getCenter'
  id: index#videooverlay-getcenter
  summary: Returns the center of the ImageOverlay
  description: |-
    `getCenter()`

    ` `[`LatLng`](#latlng)` `

    Returns the center of the ImageOverlay.

    Methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'VideoOverlay methods: getElement'
  id: index#videooverlay-getelement
  summary: Returns the instance of HTMLVideoElement used by this overlay
  description: |-
    `getElement()`

    `HTMLVideoElement`

    Returns the instance of [`HTMLVideoElement`](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement) used by this overlay.

    Methods inherited from [ImageOverlay](#imageoverlay)

    Method

    Returns

    Description
- name: 'VideoOverlay methods: getPane'
  id: index#videooverlay-getpane
  summary: Returns the HTMLElement representing the named pane on the map
  description: |-
    `getPane(<String> `*`name?`*`)`

    `HTMLElement`

    Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.
- name: 'VideoOverlay methods: getPopup'
  id: index#videooverlay-getpopup
  summary: Returns the popup bound to this layer
  description: |-
    `getPopup()`

    ` `[`Popup`](#popup)` `

    Returns the popup bound to this layer.

    Tooltip methods inherited from [Layer](#layer)

    Method

    Returns

    Description
- name: 'VideoOverlay methods: getTooltip'
  id: index#videooverlay-gettooltip
  summary: Returns the tooltip bound to this layer
  description: |-
    `getTooltip()`

    ` `[`Tooltip`](#tooltip)` `

    Returns the tooltip bound to this layer.

    Methods inherited from [Evented](#evented)

    Method

    Returns

    Description
- name: 'VideoOverlay methods: hasEventListeners'
  id: index#videooverlay-haseventlisteners
  summary: null
  description: |-
    `hasEventListeners(`*`…`*`)`

    `Boolean`

    Alias to [`listens(…)`](#evented-listens)
- name: 'VideoOverlay methods: isPopupOpen'
  id: index#videooverlay-ispopupopen
  summary: Returns true if the popup bound to this layer is currently open
  description: |-
    `isPopupOpen()`

    `boolean`

    Returns `true` if the popup bound to this layer is currently open.
- name: 'VideoOverlay methods: isTooltipOpen'
  id: index#videooverlay-istooltipopen
  summary: Returns true if the tooltip bound to this layer is currently open
  description: |-
    `isTooltipOpen()`

    `boolean`

    Returns `true` if the tooltip bound to this layer is currently open.
- name: 'VideoOverlay methods: listens'
  id: index#videooverlay-listens
  summary: Returns true if a particular event type has any listeners attached to it
  description: |-
    `listens(<String> `*`type`*`, <Boolean> `*`propagate?`*`)`

    `Boolean`

    Returns `true` if a particular event type has any listeners attached to it. The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.
- name: 'VideoOverlay methods: off'
  id: index#videooverlay-off
  summary: Removes a previously added listener function
  description: |-
    `off(<String> `*`type`*`, <Function> `*`fn?`*`, <Object> `*`context?`*`)`

    `this`

    Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.

    `off(<Object> `*`eventMap`*`)`

    `this`

    Removes a set of type/listener pairs.

    `off()`

    `this`

    Removes all listeners to all events on the object. This includes implicitly attached events.
- name: 'VideoOverlay methods: on'
  id: index#videooverlay-on
  summary: Adds a listener function (fn) to a particular event type of the object
  description: |-
    `on(<String> `*`type`*`, <Function> `*`fn`*`, <Object> `*`context?`*`)`

    `this`

    Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).

    `on(<Object> `*`eventMap`*`)`

    `this`

    Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
- name: 'VideoOverlay methods: once'
  id: index#videooverlay-once
  summary: Behaves as on(…), except the listener will only get fired once and then removed
  description: |-
    `once(`*`…`*`)`

    `this`

    Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.
- name: 'VideoOverlay methods: openPopup'
  id: index#videooverlay-openpopup
  summary: Opens the bound popup at the specified latlng or at the default popup anchor if no latlng is passed
  description: |-
    `openPopup(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.
- name: 'VideoOverlay methods: openTooltip'
  id: index#videooverlay-opentooltip
  summary: Opens the bound tooltip at the specified latlng or at the default tooltip anchor if no latlng is passed
  description: |-
    `openTooltip(<`[`LatLng`](#latlng)`> `*`latlng?`*`)`

    `this`

    Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.
- name: 'VideoOverlay methods: removeEventListener'
  id: index#videooverlay-removeeventlistener
  summary: null
  description: |-
    `removeEventListener(`*`…`*`)`

    `this`

    Alias to [`off(…)`](#evented-off)
- name: 'VideoOverlay methods: removeEventParent'
  id: index#videooverlay-removeeventparent
  summary: null
  description: |-
    `removeEventParent(<`[`Evented`](#evented)`> `*`obj`*`)`

    `this`

    Removes an event parent, so it will stop receiving propagated events
- name: 'VideoOverlay methods: removeFrom'
  id: index#videooverlay-removefrom
  summary: null
  description: |-
    `removeFrom(<`[`Map`](#map)`> `*`map`*`)`

    `this`

    Removes the layer from the given map

    `removeFrom(<`[`LayerGroup`](#layergroup)`> `*`group`*`)`

    `this`

    Removes the layer from the given [`LayerGroup`](#layergroup)
- name: 'VideoOverlay methods: setBounds'
  id: index#videooverlay-setbounds
  summary: null
  description: |-
    `setBounds(<`[`LatLngBounds`](#latlngbounds)`> `*`bounds`*`)`

    `this`

    Update the bounds that this ImageOverlay covers
- name: 'VideoOverlay methods: setOpacity'
  id: index#videooverlay-setopacity
  summary: Sets the opacity of the overlay
  description: |-
    `setOpacity(<Number> `*`opacity`*`)`

    `this`

    Sets the opacity of the overlay.
- name: 'VideoOverlay methods: setPopupContent'
  id: index#videooverlay-setpopupcontent
  summary: Sets the content of the popup bound to this layer
  description: |-
    `setPopupContent(<String|HTMLElement|Popup> `*`content`*`)`

    `this`

    Sets the content of the popup bound to this layer.
- name: 'VideoOverlay methods: setTooltipContent'
  id: index#videooverlay-settooltipcontent
  summary: Sets the content of the tooltip bound to this layer
  description: |-
    `setTooltipContent(<String|HTMLElement|Tooltip> `*`content`*`)`

    `this`

    Sets the content of the tooltip bound to this layer.
- name: 'VideoOverlay methods: setUrl'
  id: index#videooverlay-seturl
  summary: Changes the URL of the image
  description: |-
    `setUrl(<String> `*`url`*`)`

    `this`

    Changes the URL of the image.
- name: 'VideoOverlay methods: setZIndex'
  id: index#videooverlay-setzindex
  summary: Changes the zIndex of the image overlay
  description: |-
    `setZIndex(<Number> `*`value`*`)`

    `this`

    Changes the [zIndex](#imageoverlay-zindex) of the image overlay.
- name: 'VideoOverlay methods: togglePopup'
  id: index#videooverlay-togglepopup
  summary: Opens or closes the popup bound to this layer depending on its current state
  description: |-
    `togglePopup()`

    `this`

    Opens or closes the popup bound to this layer depending on its current state.
- name: 'VideoOverlay methods: toggleTooltip'
  id: index#videooverlay-toggletooltip
  summary: Opens or closes the tooltip bound to this layer depending on its current state
  description: |-
    `toggleTooltip()`

    `this`

    Opens or closes the tooltip bound to this layer depending on its current state.
- name: 'VideoOverlay methods: unbindPopup'
  id: index#videooverlay-unbindpopup
  summary: Removes the popup previously bound with bindPopup
  description: |-
    `unbindPopup()`

    `this`

    Removes the popup previously bound with `bindPopup`.
- name: 'VideoOverlay methods: unbindTooltip'
  id: index#videooverlay-unbindtooltip
  summary: Removes the tooltip previously bound with bindTooltip
  description: |-
    `unbindTooltip()`

    `this`

    Removes the tooltip previously bound with `bindTooltip`.
- name: 'VideoOverlay options: alt'
  id: index#videooverlay-alt
  summary: Text for the alt attribute of the image (useful for accessibility)
  description: |-
    `alt`

    `String`

    `''`

    Text for the `alt` attribute of the image (useful for accessibility).
- name: 'VideoOverlay options: attribution'
  id: index#videooverlay-attribution
  summary: String to be shown in the attribution control, e.g
  description: |-
    `attribution`

    `String`

    `null`

    String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

    ### Events

    Event

    Data

    Description
- name: 'VideoOverlay options: autoplay'
  id: index#videooverlay-autoplay
  summary: Whether the video starts playing automatically when loaded
  description: |-
    `autoplay`

    `Boolean`

    `true`

    Whether the video starts playing automatically when loaded. On some browsers autoplay will only work with `muted: true`
- name: 'VideoOverlay options: bubblingMouseEvents'
  id: index#videooverlay-bubblingmouseevents
  summary: When true, a mouse event on this layer will trigger the same event on the map (unless L.DomEvent.stopPropagation is used)
  description: |-
    `bubblingMouseEvents`

    `Boolean`

    `true`

    When `true`, a mouse event on this layer will trigger the same event on the map (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

    Options inherited from [Layer](#layer)

    Option

    Type

    Default

    Description
- name: 'VideoOverlay options: className'
  id: index#videooverlay-classname
  summary: A custom class name to assign to the image
  description: |-
    `className`

    `String`

    `''`

    A custom class name to assign to the image. Empty by default.

    Options inherited from [Interactive layer](#interactive-layer)

    Option

    Type

    Default

    Description
- name: 'VideoOverlay options: crossOrigin'
  id: index#videooverlay-crossorigin
  summary: Whether the crossOrigin attribute will be added to the image
  description: |-
    `crossOrigin`

    `Boolean|String`

    `false`

    Whether the crossOrigin attribute will be added to the image. If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data. Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.
- name: 'VideoOverlay options: errorOverlayUrl'
  id: index#videooverlay-erroroverlayurl
  summary: URL to the overlay image to show in place of the overlay that failed to load
  description: |-
    `errorOverlayUrl`

    `String`

    `''`

    URL to the overlay image to show in place of the overlay that failed to load.
- name: 'VideoOverlay options: interactive'
  id: index#videooverlay-interactive
  summary: If true, the image overlay will emit mouse events when clicked or hovered
  description: |-
    `interactive`

    `Boolean`

    `false`

    If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.
- name: 'VideoOverlay options: keepAspectRatio'
  id: index#videooverlay-keepaspectratio
  summary: Whether the video will save aspect ratio after the projection
  description: |-
    `keepAspectRatio`

    `Boolean`

    `true`

    Whether the video will save aspect ratio after the projection. Relevant for supported browsers. See [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)
- name: 'VideoOverlay options: loop'
  id: index#videooverlay-loop
  summary: Whether the video will loop back to the beginning when played
  description: |-
    `loop`

    `Boolean`

    `true`

    Whether the video will loop back to the beginning when played.
- name: 'VideoOverlay options: muted'
  id: index#videooverlay-muted
  summary: Whether the video starts on mute when loaded
  description: |-
    `muted`

    `Boolean`

    `false`

    Whether the video starts on mute when loaded.
- name: 'VideoOverlay options: opacity'
  id: index#videooverlay-opacity
  summary: The opacity of the image overlay
  description: |-
    `opacity`

    `Number`

    `1.0`

    The opacity of the image overlay.
- name: 'VideoOverlay options: pane'
  id: index#videooverlay-pane
  summary: By default the layer will be added to the map's overlay pane
  description: |-
    `pane`

    `String`

    `'overlayPane'`

    By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.
- name: 'VideoOverlay options: playsInline'
  id: index#videooverlay-playsinline
  summary: Mobile browsers will play the video right where it is instead of open it up in fullscreen mode
  description: |-
    `playsInline`

    `Boolean`

    `true`

    Mobile browsers will play the video right where it is instead of open it up in fullscreen mode.

    Options inherited from [ImageOverlay](#imageoverlay)

    Option

    Type

    Default

    Description
- name: 'VideoOverlay options: zIndex'
  id: index#videooverlay-zindex
  summary: The explicit zIndex of the overlay layer
  description: |-
    `zIndex`

    `Number`

    `1`

    The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.
- name: 'Zoom options: animate'
  id: index#zoom-options-animate
  summary: If not specified, zoom animation will happen if the zoom origin is inside the current view
  description: |-
    `animate`

    `Boolean`

    If not specified, zoom animation will happen if the zoom origin is inside the current view. If `true`, the map will attempt animating zoom disregarding where zoom origin is. Setting `false` will make it always reset the view completely without animation.

    ### Pan options

    Some of the [`Map`](#map) methods which modify the center of the map take in an `options` parameter. This is a plain javascript object with the following optional components:

    Option

    Type

    Default

    Description
- name: 'Zoom/pan options: animate'
  id: index#zoom/pan-options-animate
  summary: If not specified, zoom animation will happen if the zoom origin is inside the current view
  description: |-
    `animate`

    `Boolean`

    If not specified, zoom animation will happen if the zoom origin is inside the current view. If `true`, the map will attempt animating zoom disregarding where zoom origin is. Setting `false` will make it always reset the view completely without animation.

    Options inherited from [Pan options](#pan-options)

    Option

    Type

    Default

    Description
- name: 'Zoom/pan options: duration'
  id: index#zoom/pan-options-duration
  summary: Duration of animated panning, in seconds
  description: |-
    `duration`

    `Number`

    `0.25`

    Duration of animated panning, in seconds.
- name: 'Zoom/pan options: easeLinearity'
  id: index#zoom/pan-options-easelinearity
  summary: The curvature factor of panning animation easing (third parameter of the Cubic Bezier curve)
  description: |-
    `easeLinearity`

    `Number`

    `0.25`

    The curvature factor of panning animation easing (third parameter of the [Cubic Bezier curve](https://cubic-bezier.com/)). 1.0 means linear animation, and the smaller this number, the more bowed the curve.
- name: 'Zoom/pan options: noMoveStart'
  id: index#zoom/pan-options-nomovestart
  summary: If true, panning won't fire movestart event on start (used internally for panning inertia)
  description: |-
    `noMoveStart`

    `Boolean`

    `false`

    If `true`, panning won't fire `movestart` event on start (used internally for panning inertia).

    ### Padding options

    Option

    Type

    Default

    Description
