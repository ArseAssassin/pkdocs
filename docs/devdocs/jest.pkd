---
name: Jest
slug: jest
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2022 Facebook, Inc.
  Licensed under the MIT License.
  https://jestjs.io/docs/getting-started
homepage: https://jestjs.io/

---
- name: .each
  id: api#each
  summary: The .each modifier offers few different ways to define a table of the test cases
  belongs_to: Globals
  description: "### `.each`\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n``` typescript\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\nOr declared separately as a variable:\n\n``` typescript\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n#### Array of arrays\n\nThe array of arrays style will work smoothly with inlined tables:\n\n``` typescript\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n``` typescript\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n#### Template literal\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n``` typescript\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n```\n\nOtherwise it will require a generic type argument:\n\n``` typescript\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/api](https://jestjs.io/docs/api)"
- name: .not
  id: expect#not
  summary: If you know how to test something, .not lets you test its opposite
  belongs_to: Expect
  description: |-
    ### `.not`

    If you know how to test something, `.not` lets you test its opposite. For example, this code tests that the best La Croix flavor is not coconut:

    ``` typescript
    test('the best flavor is not coconut', () => {
      expect(bestLaCroixFlavor()).not.toBe('coconut');
    });
    ```
- name: .rejects
  id: expect#rejects
  summary: Use .rejects to unwrap the reason of a rejected promise so any other matcher can be chained
  belongs_to: Expect
  description: |-
    ### `.rejects`

    Use `.rejects` to unwrap the reason of a rejected promise so any other matcher can be chained. If the promise is fulfilled the assertion fails.

    For example, this code tests that the promise rejects with reason `'octopus'`:

    ``` typescript
    test('rejects to octopus', () => {
      // make sure to add a return statement
      return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(
        'octopus',
      );
    });
    ```

    Note that, since you are still testing promises, the test is still asynchronous. Hence, you will need to [tell Jest to wait](asynchronous#promises) by returning the unwrapped assertion.

    Alternatively, you can use `async/await` in combination with `.rejects`.

    ``` typescript
    test('rejects to octopus', async () => {
      await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');
    });
    ```
- name: .resolves
  id: expect#resolves
  summary: Use resolves to unwrap the value of a fulfilled promise so any other matcher can be chained
  belongs_to: Expect
  description: |-
    ### `.resolves`

    Use `resolves` to unwrap the value of a fulfilled promise so any other matcher can be chained. If the promise is rejected the assertion fails.

    For example, this code tests that the promise resolves and that the resulting value is `'lemon'`:

    ``` typescript
    test('resolves to lemon', () => {
      // make sure to add a return statement
      return expect(Promise.resolve('lemon')).resolves.toBe('lemon');
    });
    ```

    Note that, since you are still testing promises, the test is still asynchronous. Hence, you will need to [tell Jest to wait](asynchronous#promises) by returning the unwrapped assertion.

    Alternatively, you can use `async/await` in combination with `.resolves`:

    ``` typescript
    test('resolves to lemon', async () => {
      await expect(Promise.resolve('lemon')).resolves.toBe('lemon');
      await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');
    });
    ```
- name: .toBe()
  id: expect#tobevalue
  summary: Use .toBe to compare primitive values or to check referential identity of object instances
  belongs_to: Expect
  description: |-
    ### `.toBe(value)`

    Use `.toBe` to compare primitive values or to check referential identity of object instances. It calls `Object.is` to compare values, which is even better for testing than `===` strict equality operator.

    For example, this code will validate some properties of the `can` object:

    ``` typescript
    const can = {
      name: 'pamplemousse',
      ounces: 12,
    };

    describe('the can', () => {
      test('has 12 ounces', () => {
        expect(can.ounces).toBe(12);
      });

      test('has a sophisticated name', () => {
        expect(can.name).toBe('pamplemousse');
      });
    });
    ```

    Don't use `.toBe` with floating-point numbers. For example, due to rounding, in JavaScript `0.2 + 0.1` is not strictly equal to `0.3`. If you have floating point numbers, try `.toBeCloseTo` instead.

    Although the `.toBe` matcher **checks** referential identity, it **reports** a deep comparison of values if the assertion fails. If differences between properties do not help you to understand why a test fails, especially if the report is large, then you might move the comparison into the `expect` function. For example, to assert whether or not elements are the same instance:

    - rewrite `expect(received).toBe(expected)` as `expect(Object.is(received, expected)).toBe(true)`
    - rewrite `expect(received).not.toBe(expected)` as `expect(Object.is(received, expected)).toBe(false)`
- name: .toBeCloseTo()
  id: expect#tobeclosetonumber-numdigits
  summary: Use toBeCloseTo to compare floating point numbers for approximate equality
  belongs_to: Expect
  description: |-
    ### `.toBeCloseTo(number, numDigits?)`

    Use `toBeCloseTo` to compare floating point numbers for approximate equality.

    The optional `numDigits` argument limits the number of digits to check **after** the decimal point. For the default value `2`, the test criterion is `Math.abs(expected - received) < 0.005` (that is, `10 ** -2 / 2`).

    Intuitive equality comparisons often fail, because arithmetic on decimal (base 10) values often have rounding errors in limited precision binary (base 2) representation. For example, this test fails:

    ``` typescript
    test('adding works sanely with decimals', () => {
      expect(0.2 + 0.1).toBe(0.3); // Fails!
    });
    ```

    It fails because in JavaScript, `0.2 + 0.1` is actually `0.30000000000000004`.

    For example, this test passes with a precision of 5 digits:

    ``` typescript
    test('adding works sanely with decimals', () => {
      expect(0.2 + 0.1).toBeCloseTo(0.3, 5);
    });
    ```

    Because floating point errors are the problem that `toBeCloseTo` solves, it does not support big integer values.
- name: .toBeDefined()
  id: expect#tobedefined
  summary: Use .toBeDefined to check that a variable is not undefined
  belongs_to: Expect
  description: |-
    ### `.toBeDefined()`

    Use `.toBeDefined` to check that a variable is not undefined. For example, if you want to check that a function `fetchNewFlavorIdea()` returns *something*, you can write:

    ``` typescript
    test('there is a new flavor idea', () => {
      expect(fetchNewFlavorIdea()).toBeDefined();
    });
    ```

    You could write `expect(fetchNewFlavorIdea()).not.toBe(undefined)`, but it's better practice to avoid referring to `undefined` directly in your code.
- name: .toBeFalsy()
  id: expect#tobefalsy
  summary: Use .toBeFalsy when you don't care what a value is and you want to ensure a value is false in a boolean context
  belongs_to: Expect
  description: |-
    ### `.toBeFalsy()`

    Use `.toBeFalsy` when you don't care what a value is and you want to ensure a value is false in a boolean context. For example, let's say you have some application code that looks like:

    ``` typescript
    drinkSomeLaCroix();
    if (!getErrors()) {
      drinkMoreLaCroix();
    }
    ```

    You may not care what `getErrors` returns, specifically - it might return `false`, `null`, or `0`, and your code would still work. So if you want to test there are no errors after drinking some La Croix, you could write:

    ``` typescript
    test('drinking La Croix does not lead to errors', () => {
      drinkSomeLaCroix();
      expect(getErrors()).toBeFalsy();
    });
    ```

    In JavaScript, there are six falsy values: `false`, `0`, `''`, `null`, `undefined`, and `NaN`. Everything else is truthy.
- name: .toBeGreaterThan()
  id: expect#tobegreaterthannumber--bigint
  summary: Use toBeGreaterThan to compare received > expected for number or big integer values
  belongs_to: Expect
  description: |-
    ### `.toBeGreaterThan(number | bigint)`

    Use `toBeGreaterThan` to compare `received > expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of more than 10 ounces:

    ``` typescript
    test('ounces per can is more than 10', () => {
      expect(ouncesPerCan()).toBeGreaterThan(10);
    });
    ```
- name: .toBeGreaterThanOrEqual()
  id: expect#tobegreaterthanorequalnumber--bigint
  summary: Use toBeGreaterThanOrEqual to compare received >= expected for number or big integer values
  belongs_to: Expect
  description: |-
    ### `.toBeGreaterThanOrEqual(number | bigint)`

    Use `toBeGreaterThanOrEqual` to compare `received >= expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of at least 12 ounces:

    ``` typescript
    test('ounces per can is at least 12', () => {
      expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);
    });
    ```
- name: .toBeInstanceOf()
  id: expect#tobeinstanceofclass
  summary: Use .toBeInstanceOf(Class) to check that an object is an instance of a class
  belongs_to: Expect
  description: |-
    ### `.toBeInstanceOf(Class)`

    Use `.toBeInstanceOf(Class)` to check that an object is an instance of a class. This matcher uses `instanceof` underneath.

    ``` typescript
    class A {}

    expect(new A()).toBeInstanceOf(A);
    expect(() => {}).toBeInstanceOf(Function);
    expect(new A()).toBeInstanceOf(Function); // throws
    ```
- name: .toBeLessThan()
  id: expect#tobelessthannumber--bigint
  summary: Use toBeLessThan to compare received < expected for number or big integer values
  belongs_to: Expect
  description: |-
    ### `.toBeLessThan(number | bigint)`

    Use `toBeLessThan` to compare `received < expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of less than 20 ounces:

    ``` typescript
    test('ounces per can is less than 20', () => {
      expect(ouncesPerCan()).toBeLessThan(20);
    });
    ```
- name: .toBeLessThanOrEqual()
  id: expect#tobelessthanorequalnumber--bigint
  summary: Use toBeLessThanOrEqual to compare received <= expected for number or big integer values
  belongs_to: Expect
  description: |-
    ### `.toBeLessThanOrEqual(number | bigint)`

    Use `toBeLessThanOrEqual` to compare `received <= expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of at most 12 ounces:

    ``` typescript
    test('ounces per can is at most 12', () => {
      expect(ouncesPerCan()).toBeLessThanOrEqual(12);
    });
    ```
- name: .toBeNaN()
  id: expect#tobenan
  summary: Use .toBeNaN when checking a value is NaN
  belongs_to: Expect
  description: |-
    ### `.toBeNaN()`

    Use `.toBeNaN` when checking a value is `NaN`.

    ``` typescript
    test('passes when value is NaN', () => {
      expect(NaN).toBeNaN();
      expect(1).not.toBeNaN();
    });
    ```
- name: .toBeNull()
  id: expect#tobenull
  summary: .toBeNull() is the same as .toBe(null) but the error messages are a bit nicer
  belongs_to: Expect
  description: |-
    ### `.toBeNull()`

    `.toBeNull()` is the same as `.toBe(null)` but the error messages are a bit nicer. So use `.toBeNull()` when you want to check that something is null.

    ``` typescript
    function bloop() {
      return null;
    }

    test('bloop returns null', () => {
      expect(bloop()).toBeNull();
    });
    ```
- name: .toBeTruthy()
  id: expect#tobetruthy
  summary: Use .toBeTruthy when you don't care what a value is and you want to ensure a value is true in a boolean context
  belongs_to: Expect
  description: |-
    ### `.toBeTruthy()`

    Use `.toBeTruthy` when you don't care what a value is and you want to ensure a value is true in a boolean context. For example, let's say you have some application code that looks like:

    ``` typescript
    drinkSomeLaCroix();
    if (thirstInfo()) {
      drinkMoreLaCroix();
    }
    ```

    You may not care what `thirstInfo` returns, specifically - it might return `true` or a complex object, and your code would still work. So if you want to test that `thirstInfo` will be truthy after drinking some La Croix, you could write:

    ``` typescript
    test('drinking La Croix leads to having thirst info', () => {
      drinkSomeLaCroix();
      expect(thirstInfo()).toBeTruthy();
    });
    ```

    In JavaScript, there are six falsy values: `false`, `0`, `''`, `null`, `undefined`, and `NaN`. Everything else is truthy.
- name: .toBeUndefined()
  id: expect#tobeundefined
  summary: Use .toBeUndefined to check that a variable is undefined
  belongs_to: Expect
  description: |-
    ### `.toBeUndefined()`

    Use `.toBeUndefined` to check that a variable is undefined. For example, if you want to check that a function `bestDrinkForFlavor(flavor)` returns `undefined` for the `'octopus'` flavor, because there is no good octopus-flavored drink:

    ``` typescript
    test('the best drink for octopus flavor is undefined', () => {
      expect(bestDrinkForFlavor('octopus')).toBeUndefined();
    });
    ```

    You could write `expect(bestDrinkForFlavor('octopus')).toBe(undefined)`, but it's better practice to avoid referring to `undefined` directly in your code.
- name: .toContain()
  id: expect#tocontainitem
  summary: Use .toContain when you want to check that an item is in an array
  belongs_to: Expect
  description: |-
    ### `.toContain(item)`

    Use `.toContain` when you want to check that an item is in an array. For testing the items in the array, this uses `===`, a strict equality check. `.toContain` can also check whether a string is a substring of another string.

    For example, if `getAllFlavors()` returns an array of flavors and you want to be sure that `lime` is in there, you can write:

    ``` typescript
    test('the flavor list contains lime', () => {
      expect(getAllFlavors()).toContain('lime');
    });
    ```

    This matcher also accepts others iterables such as strings, sets, node lists and HTML collections.
- name: .toContainEqual()
  id: expect#tocontainequalitem
  summary: Use .toContainEqual when you want to check that an item with a specific structure and values is contained in an array
  belongs_to: Expect
  description: |-
    ### `.toContainEqual(item)`

    Use `.toContainEqual` when you want to check that an item with a specific structure and values is contained in an array. For testing the items in the array, this matcher recursively checks the equality of all fields, rather than checking for object identity.

    ``` typescript
    describe('my beverage', () => {
      test('is delicious and not sour', () => {
        const myBeverage = {delicious: true, sour: false};
        expect(myBeverages()).toContainEqual(myBeverage);
      });
    });
    ```
- name: .toEqual()
  id: expect#toequalvalue
  summary: Use .toEqual to compare recursively all properties of object instances (also known as "deep" equality)
  belongs_to: Expect
  description: |-
    ### `.toEqual(value)`

    Use `.toEqual` to compare recursively all properties of object instances (also known as "deep" equality). It calls `Object.is` to compare primitive values, which is even better for testing than `===` strict equality operator.

    For example, `.toEqual` and `.toBe` behave differently in this test suite, so all the tests pass:

    ``` typescript
    const can1 = {
      flavor: 'grapefruit',
      ounces: 12,
    };
    const can2 = {
      flavor: 'grapefruit',
      ounces: 12,
    };

    describe('the La Croix cans on my desk', () => {
      test('have all the same properties', () => {
        expect(can1).toEqual(can2);
      });
      test('are not the exact same can', () => {
        expect(can1).not.toBe(can2);
      });
    });
    ```

    tip

    `.toEqual` won't perform a *deep equality* check for two errors. Only the `message` property of an Error is considered for equality. It is recommended to use the `.toThrow` matcher for testing against errors.

    If differences between properties do not help you to understand why a test fails, especially if the report is large, then you might move the comparison into the `expect` function. For example, use `equals` method of `Buffer` class to assert whether or not buffers contain the same content:

    - rewrite `expect(received).toEqual(expected)` as `expect(received.equals(expected)).toBe(true)`
    - rewrite `expect(received).not.toEqual(expected)` as `expect(received.equals(expected)).toBe(false)`

    &nbsp;
- name: .toHaveBeenCalled()
  id: expect#tohavebeencalled
  summary: Use .toHaveBeenCalledWith to ensure that a mock function was called with specific arguments
  belongs_to: Expect
  description: |-
    ### `.toHaveBeenCalled()`

    Also under the alias: `.toBeCalled()`

    Use `.toHaveBeenCalledWith` to ensure that a mock function was called with specific arguments. The arguments are checked with the same algorithm that `.toEqual` uses.

    For example, let's say you have a `drinkAll(drink, flavour)` function that takes a `drink` function and applies it to all available beverages. You might want to check that `drink` gets called for `'lemon'`, but not for `'octopus'`, because `'octopus'` flavour is really weird and why would anything be octopus-flavoured? You can do that with this test suite:

    ``` typescript
    function drinkAll(callback, flavour) {
      if (flavour !== 'octopus') {
        callback(flavour);
      }
    }

    describe('drinkAll', () => {
      test('drinks something lemon-flavoured', () => {
        const drink = jest.fn();
        drinkAll(drink, 'lemon');
        expect(drink).toHaveBeenCalled();
      });

      test('does not drink something octopus-flavoured', () => {
        const drink = jest.fn();
        drinkAll(drink, 'octopus');
        expect(drink).not.toHaveBeenCalled();
      });
    });
    ```
- name: .toHaveBeenCalledTimes()
  id: expect#tohavebeencalledtimesnumber
  summary: Use .toHaveBeenCalledTimes to ensure that a mock function got called exact number of times
  belongs_to: Expect
  description: |-
    ### `.toHaveBeenCalledTimes(number)`

    Also under the alias: `.toBeCalledTimes(number)`

    Use `.toHaveBeenCalledTimes` to ensure that a mock function got called exact number of times.

    For example, let's say you have a `drinkEach(drink, Array<flavor>)` function that takes a `drink` function and applies it to array of passed beverages. You might want to check that drink function was called exact number of times. You can do that with this test suite:

    ``` typescript
    test('drinkEach drinks each drink', () => {
      const drink = jest.fn();
      drinkEach(drink, ['lemon', 'octopus']);
      expect(drink).toHaveBeenCalledTimes(2);
    });
    ```
- name: .toHaveBeenCalledWith()
  id: expect#tohavebeencalledwitharg1-arg2-
  summary: Use .toHaveBeenCalledWith to ensure that a mock function was called with specific arguments
  belongs_to: Expect
  description: |-
    ### `.toHaveBeenCalledWith(arg1, arg2, ...)`

    Also under the alias: `.toBeCalledWith()`

    Use `.toHaveBeenCalledWith` to ensure that a mock function was called with specific arguments. The arguments are checked with the same algorithm that `.toEqual` uses.

    For example, let's say that you can register a beverage with a `register` function, and `applyToAll(f)` should apply the function `f` to all registered beverages. To make sure this works, you could write:

    ``` typescript
    test('registration applies correctly to orange La Croix', () => {
      const beverage = new LaCroix('orange');
      register(beverage);
      const f = jest.fn();
      applyToAll(f);
      expect(f).toHaveBeenCalledWith(beverage);
    });
    ```
- name: .toHaveBeenLastCalledWith()
  id: expect#tohavebeenlastcalledwitharg1-arg2-
  summary: If you have a mock function, you can use .toHaveBeenLastCalledWith to test what arguments it was last called with
  belongs_to: Expect
  description: |-
    ### `.toHaveBeenLastCalledWith(arg1, arg2, ...)`

    Also under the alias: `.lastCalledWith(arg1, arg2, ...)`

    If you have a mock function, you can use `.toHaveBeenLastCalledWith` to test what arguments it was last called with. For example, let's say you have a `applyToAllFlavors(f)` function that applies `f` to a bunch of flavors, and you want to ensure that when you call it, the last flavor it operates on is `'mango'`. You can write:

    ``` typescript
    test('applying to all flavors does mango last', () => {
      const drink = jest.fn();
      applyToAllFlavors(drink);
      expect(drink).toHaveBeenLastCalledWith('mango');
    });
    ```
- name: .toHaveBeenNthCalledWith()
  id: expect#tohavebeennthcalledwithnthcall-arg1-arg2-
  summary: If you have a mock function, you can use .toHaveBeenNthCalledWith to test what arguments it was nth called with
  belongs_to: Expect
  description: |-
    ### `.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)`

    Also under the alias: `.nthCalledWith(nthCall, arg1, arg2, ...)`

    If you have a mock function, you can use `.toHaveBeenNthCalledWith` to test what arguments it was nth called with. For example, let's say you have a `drinkEach(drink, Array<flavor>)` function that applies `f` to a bunch of flavors, and you want to ensure that when you call it, the first flavor it operates on is `'lemon'` and the second one is `'octopus'`. You can write:

    ``` typescript
    test('drinkEach drinks each drink', () => {
      const drink = jest.fn();
      drinkEach(drink, ['lemon', 'octopus']);
      expect(drink).toHaveBeenNthCalledWith(1, 'lemon');
      expect(drink).toHaveBeenNthCalledWith(2, 'octopus');
    });
    ```

    note

    The nth argument must be positive integer starting from 1.
- name: .toHaveLastReturnedWith()
  id: expect#tohavelastreturnedwithvalue
  summary: Use .toHaveLastReturnedWith to test the specific value that a mock function last returned
  belongs_to: Expect
  description: |-
    ### `.toHaveLastReturnedWith(value)`

    Also under the alias: `.lastReturnedWith(value)`

    Use `.toHaveLastReturnedWith` to test the specific value that a mock function last returned. If the last call to the mock function threw an error, then this matcher will fail no matter what value you provided as the expected return value.

    For example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:

    ``` typescript
    test('drink returns La Croix (Orange) last', () => {
      const beverage1 = {name: 'La Croix (Lemon)'};
      const beverage2 = {name: 'La Croix (Orange)'};
      const drink = jest.fn(beverage => beverage.name);

      drink(beverage1);
      drink(beverage2);

      expect(drink).toHaveLastReturnedWith('La Croix (Orange)');
    });
    ```
- name: .toHaveLength()
  id: expect#tohavelengthnumber
  summary: Use .toHaveLength to check that an object has a .length property and it is set to a certain numeric value
  belongs_to: Expect
  description: |-
    ### `.toHaveLength(number)`

    Use `.toHaveLength` to check that an object has a `.length` property and it is set to a certain numeric value.

    This is especially useful for checking arrays or strings size.

    ``` typescript
    expect([1, 2, 3]).toHaveLength(3);
    expect('abc').toHaveLength(3);
    expect('').not.toHaveLength(5);
    ```
- name: .toHaveNthReturnedWith()
  id: expect#tohaventhreturnedwithnthcall-value
  summary: Use .toHaveNthReturnedWith to test the specific value that a mock function returned for the nth call
  belongs_to: Expect
  description: |-
    ### `.toHaveNthReturnedWith(nthCall, value)`

    Also under the alias: `.nthReturnedWith(nthCall, value)`

    Use `.toHaveNthReturnedWith` to test the specific value that a mock function returned for the nth call. If the nth call to the mock function threw an error, then this matcher will fail no matter what value you provided as the expected return value.

    For example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:

    ``` typescript
    test('drink returns expected nth calls', () => {
      const beverage1 = {name: 'La Croix (Lemon)'};
      const beverage2 = {name: 'La Croix (Orange)'};
      const drink = jest.fn(beverage => beverage.name);

      drink(beverage1);
      drink(beverage2);

      expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');
      expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');
    });
    ```

    note

    The nth argument must be positive integer starting from 1.
- name: .toHaveProperty()
  id: expect#tohavepropertykeypath-value
  summary: Use .toHaveProperty to check if property at provided reference keyPath exists for an object
  belongs_to: Expect
  description: |-
    ### `.toHaveProperty(keyPath, value?)`

    Use `.toHaveProperty` to check if property at provided reference `keyPath` exists for an object. For checking deeply nested properties in an object you may use [dot notation](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors) or an array containing the keyPath for deep references.

    You can provide an optional `value` argument to compare the received property value (recursively for all properties of object instances, also known as deep equality, like the `toEqual` matcher).

    The following example contains a `houseForSale` object with nested properties. We are using `toHaveProperty` to check for the existence and values of various properties in the object.

    ``` typescript
    // Object containing house features to be tested
    const houseForSale = {
      bath: true,
      bedrooms: 4,
      kitchen: {
        amenities: ['oven', 'stove', 'washer'],
        area: 20,
        wallColor: 'white',
        'nice.oven': true,
      },
      livingroom: {
        amenities: [
          {
            couch: [
              ['large', {dimensions: [20, 20]}],
              ['small', {dimensions: [10, 10]}],
            ],
          },
        ],
      },
      'ceiling.height': 2,
    };

    test('this house has my desired features', () => {
      // Example Referencing
      expect(houseForSale).toHaveProperty('bath');
      expect(houseForSale).toHaveProperty('bedrooms', 4);

      expect(houseForSale).not.toHaveProperty('pool');

      // Deep referencing using dot notation
      expect(houseForSale).toHaveProperty('kitchen.area', 20);
      expect(houseForSale).toHaveProperty('kitchen.amenities', [
        'oven',
        'stove',
        'washer',
      ]);

      expect(houseForSale).not.toHaveProperty('kitchen.open');

      // Deep referencing using an array containing the keyPath
      expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);
      expect(houseForSale).toHaveProperty(
        ['kitchen', 'amenities'],
        ['oven', 'stove', 'washer'],
      );
      expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');
      expect(houseForSale).toHaveProperty(
        'livingroom.amenities[0].couch[0][1].dimensions[0]',
        20,
      );
      expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);
      expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);

      // Referencing keys with dot in the key itself
      expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');
    });
    ```
- name: .toHaveReturned()
  id: expect#tohavereturned
  summary: If you have a mock function, you can use .toHaveReturned to test that the mock function successfully returned (i.e., did not throw an error) at least one time
  belongs_to: Expect
  description: |-
    ### `.toHaveReturned()`

    Also under the alias: `.toReturn()`

    If you have a mock function, you can use `.toHaveReturned` to test that the mock function successfully returned (i.e., did not throw an error) at least one time. For example, let's say you have a mock `drink` that returns `true`. You can write:

    ``` typescript
    test('drinks returns', () => {
      const drink = jest.fn(() => true);

      drink();

      expect(drink).toHaveReturned();
    });
    ```
- name: .toHaveReturnedTimes()
  id: expect#tohavereturnedtimesnumber
  summary: Use .toHaveReturnedTimes to ensure that a mock function returned successfully (i.e., did not throw an error) an exact number of times
  belongs_to: Expect
  description: |-
    ### `.toHaveReturnedTimes(number)`

    Also under the alias: `.toReturnTimes(number)`

    Use `.toHaveReturnedTimes` to ensure that a mock function returned successfully (i.e., did not throw an error) an exact number of times. Any calls to the mock function that throw an error are not counted toward the number of times the function returned.

    For example, let's say you have a mock `drink` that returns `true`. You can write:

    ``` typescript
    test('drink returns twice', () => {
      const drink = jest.fn(() => true);

      drink();
      drink();

      expect(drink).toHaveReturnedTimes(2);
    });
    ```
- name: .toHaveReturnedWith()
  id: expect#tohavereturnedwithvalue
  summary: Use .toHaveReturnedWith to ensure that a mock function returned a specific value
  belongs_to: Expect
  description: |-
    ### `.toHaveReturnedWith(value)`

    Also under the alias: `.toReturnWith(value)`

    Use `.toHaveReturnedWith` to ensure that a mock function returned a specific value.

    For example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:

    ``` typescript
    test('drink returns La Croix', () => {
      const beverage = {name: 'La Croix'};
      const drink = jest.fn(beverage => beverage.name);

      drink(beverage);

      expect(drink).toHaveReturnedWith('La Croix');
    });
    ```
- name: .toMatch()
  id: expect#tomatchregexp--string
  summary: Use .toMatch to check that a string matches a regular expression
  belongs_to: Expect
  description: |-
    ### `.toMatch(regexp | string)`

    Use `.toMatch` to check that a string matches a regular expression.

    For example, you might not know what exactly `essayOnTheBestFlavor()` returns, but you know it's a really long string, and the substring `grapefruit` should be in there somewhere. You can test this with:

    ``` typescript
    describe('an essay on the best flavor', () => {
      test('mentions grapefruit', () => {
        expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);
        expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));
      });
    });
    ```

    This matcher also accepts a string, which it will try to match:

    ``` typescript
    describe('grapefruits are healthy', () => {
      test('grapefruits are a fruit', () => {
        expect('grapefruits').toMatch('fruit');
      });
    });
    ```
- name: .toMatchInlineSnapshot()
  id: expect#tomatchinlinesnapshotpropertymatchers-inlinesnapshot
  summary: Ensures that a value matches the most recent snapshot
  belongs_to: Expect
  description: |-
    ### `.toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)`

    Ensures that a value matches the most recent snapshot.

    You can provide an optional `propertyMatchers` object argument, which has asymmetric matchers as values of a subset of expected properties, **if** the received value will be an **object** instance. It is like `toMatchObject` with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties.

    Jest adds the `inlineSnapshot` string argument to the matcher in the test file (instead of an external `.snap` file) the first time that the test runs.

    Check out the section on [Inline Snapshots](snapshot-testing#inline-snapshots) for more info.
- name: .toMatchObject()
  id: expect#tomatchobjectobject
  summary: Use .toMatchObject to check that a JavaScript object matches a subset of the properties of an object
  belongs_to: Expect
  description: |-
    ### `.toMatchObject(object)`

    Use `.toMatchObject` to check that a JavaScript object matches a subset of the properties of an object. It will match received objects with properties that are **not** in the expected object.

    You can also pass an array of objects, in which case the method will return true only if each object in the received array matches (in the `toMatchObject` sense described above) the corresponding object in the expected array. This is useful if you want to check that two arrays match in their number of elements, as opposed to `arrayContaining`, which allows for extra elements in the received array.

    You can match properties against values or against matchers.

    ``` typescript
    const houseForSale = {
      bath: true,
      bedrooms: 4,
      kitchen: {
        amenities: ['oven', 'stove', 'washer'],
        area: 20,
        wallColor: 'white',
      },
    };
    const desiredHouse = {
      bath: true,
      kitchen: {
        amenities: ['oven', 'stove', 'washer'],
        wallColor: expect.stringMatching(/white|yellow/),
      },
    };

    test('the house has my desired features', () => {
      expect(houseForSale).toMatchObject(desiredHouse);
    });
    ```

    ``` typescript
    describe('toMatchObject applied to arrays', () => {
      test('the number of elements must match exactly', () => {
        expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);
      });

      test('.toMatchObject is called for each elements, so extra object properties are okay', () => {
        expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([
          {foo: 'bar'},
          {baz: 1},
        ]);
      });
    });
    ```
- name: .toMatchSnapshot()
  id: expect#tomatchsnapshotpropertymatchers-hint
  summary: This ensures that a value matches the most recent snapshot
  belongs_to: Expect
  description: |-
    ### `.toMatchSnapshot(propertyMatchers?, hint?)`

    This ensures that a value matches the most recent snapshot. Check out [the Snapshot Testing guide](snapshot-testing) for more information.

    You can provide an optional `propertyMatchers` object argument, which has asymmetric matchers as values of a subset of expected properties, **if** the received value will be an **object** instance. It is like `toMatchObject` with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties.

    You can provide an optional `hint` string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate **multiple** snapshots in a **single** `it` or `test` block. Jest sorts snapshots by name in the corresponding `.snap` file.
- name: .toStrictEqual()
  id: expect#tostrictequalvalue
  summary: Use .toStrictEqual to test that objects have the same types as well as structure
  belongs_to: Expect
  description: |-
    ### `.toStrictEqual(value)`

    Use `.toStrictEqual` to test that objects have the same types as well as structure.

    Differences from `.toEqual`:

    - Keys with `undefined` properties are checked. e.g. `{a: undefined, b: 2}` does not match `{b: 2}` when using `.toStrictEqual`.
    - Array sparseness is checked. e.g. `[, 1]` does not match `[undefined, 1]` when using `.toStrictEqual`.
    - Object types are checked to be equal. e.g. A class instance with fields `a` and `b` will not equal a literal object with fields `a` and `b`.

    ``` typescript
    class LaCroix {
      constructor(flavor) {
        this.flavor = flavor;
      }
    }

    describe('the La Croix cans on my desk', () => {
      test('are not semantically the same', () => {
        expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});
        expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});
      });
    });
    ```
- name: .toThrow()
  id: expect#tothrowerror
  summary: Use .toThrow to test that a function throws when it is called
  belongs_to: Expect
  description: |-
    ### `.toThrow(error?)`

    Also under the alias: `.toThrowError(error?)`

    Use `.toThrow` to test that a function throws when it is called. For example, if we want to test that `drinkFlavor('octopus')` throws, because octopus flavor is too disgusting to drink, we could write:

    ``` typescript
    test('throws on octopus', () => {
      expect(() => {
        drinkFlavor('octopus');
      }).toThrow();
    });
    ```

    tip

    You must wrap the code in a function, otherwise the error will not be caught and the assertion will fail.

    You can provide an optional argument to test that a specific error is thrown:

    - regular expression: error message **matches** the pattern
    - string: error message **includes** the substring
    - error object: error message is **equal to** the message property of the object
    - error class: error object is **instance of** class

    For example, let's say that `drinkFlavor` is coded like this:

    ``` typescript
    function drinkFlavor(flavor) {
      if (flavor == 'octopus') {
        throw new DisgustingFlavorError('yuck, octopus flavor');
      }
      // Do some other stuff
    }
    ```

    We could test this error gets thrown in several ways:

    ``` typescript
    test('throws on octopus', () => {
      function drinkOctopus() {
        drinkFlavor('octopus');
      }

      // Test that the error message says "yuck" somewhere: these are equivalent
      expect(drinkOctopus).toThrowError(/yuck/);
      expect(drinkOctopus).toThrowError('yuck');

      // Test the exact error message
      expect(drinkOctopus).toThrowError(/^yuck, octopus flavor$/);
      expect(drinkOctopus).toThrowError(new Error('yuck, octopus flavor'));

      // Test that we get a DisgustingFlavorError
      expect(drinkOctopus).toThrowError(DisgustingFlavorError);
    });
    ```
- name: .toThrowErrorMatchingInlineSnapshot()
  id: expect#tothrowerrormatchinginlinesnapshotinlinesnapshot
  summary: Use .toThrowErrorMatchingInlineSnapshot to test that a function throws an error matching the most recent snapshot when it is called
  belongs_to: Expect
  description: "### `.toThrowErrorMatchingInlineSnapshot(inlineSnapshot)`\n\nUse `.toThrowErrorMatchingInlineSnapshot` to test that a function throws an error matching the most recent snapshot when it is called.\n\nJest adds the `inlineSnapshot` string argument to the matcher in the test file (instead of an external `.snap` file) the first time that the test runs.\n\nCheck out the section on [Inline Snapshots](snapshot-testing#inline-snapshots) for more info.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/expect](https://jestjs.io/docs/expect)"
- name: .toThrowErrorMatchingSnapshot()
  id: expect#tothrowerrormatchingsnapshothint
  summary: Use .toThrowErrorMatchingSnapshot to test that a function throws an error matching the most recent snapshot when it is called
  belongs_to: Expect
  description: |-
    ### `.toThrowErrorMatchingSnapshot(hint?)`

    Use `.toThrowErrorMatchingSnapshot` to test that a function throws an error matching the most recent snapshot when it is called.

    You can provide an optional `hint` string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate **multiple** snapshots in a **single** `it` or `test` block. Jest sorts snapshots by name in the corresponding `.snap` file.

    For example, let's say you have a `drinkFlavor` function that throws whenever the flavor is `'octopus'`, and is coded like this:

    ``` typescript
    function drinkFlavor(flavor) {
      if (flavor == 'octopus') {
        throw new DisgustingFlavorError('yuck, octopus flavor');
      }
      // Do some other stuff
    }
    ```

    The test for this function will look this way:

    ``` typescript
    test('throws on octopus', () => {
      function drinkOctopus() {
        drinkFlavor('octopus');
      }

      expect(drinkOctopus).toThrowErrorMatchingSnapshot();
    });
    ```

    And it will generate the following snapshot:

    ``` typescript
    exports[`drinking flavors throws on octopus 1`] = `"yuck, octopus flavor"`;
    ```

    Check out [React Tree Snapshot Testing](https://jestjs.io/blog/2016/07/27/jest-14) for more information on snapshot testing.
- name: afterAll()
  id: api#afterallfn-timeout
  summary: Runs a function after all the tests in this file have completed
  belongs_to: Globals
  description: |-
    ### `afterAll(fn, timeout)`

    Runs a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.

    Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    This is often useful if you want to clean up some global setup state that is shared across tests.

    For example:

    ``` typescript
    const globalDatabase = makeGlobalDatabase();

    function cleanUpDatabase(db) {
      db.cleanUp();
    }

    afterAll(() => {
      cleanUpDatabase(globalDatabase);
    });

    test('can find things', () => {
      return globalDatabase.find('thing', {}, results => {
        expect(results.length).toBeGreaterThan(0);
      });
    });

    test('can insert a thing', () => {
      return globalDatabase.insert('thing', makeThing(), response => {
        expect(response.success).toBeTruthy();
      });
    });
    ```

    Here the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.

    If `afterAll` is inside a `describe` block, it runs at the end of the describe block.

    If you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.
- name: afterEach()
  id: api#aftereachfn-timeout
  summary: Runs a function after each one of the tests in this file completes
  belongs_to: Globals
  description: |-
    ### `afterEach(fn, timeout)`

    Runs a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.

    Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    This is often useful if you want to clean up some temporary state that is created by each test.

    For example:

    ``` typescript
    const globalDatabase = makeGlobalDatabase();

    function cleanUpDatabase(db) {
      db.cleanUp();
    }

    afterEach(() => {
      cleanUpDatabase(globalDatabase);
    });

    test('can find things', () => {
      return globalDatabase.find('thing', {}, results => {
        expect(results.length).toBeGreaterThan(0);
      });
    });

    test('can insert a thing', () => {
      return globalDatabase.insert('thing', makeThing(), response => {
        expect(response.success).toBeTruthy();
      });
    });
    ```

    Here the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.

    If `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.

    If you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.
- name: An Async Example
  id: tutorial-async
  summary: First, enable Babel support in Jest as documented in the Getting Started guide
  description: "# An Async Example\n\nFirst, enable Babel support in Jest as documented in the [Getting Started](getting-started#using-babel) guide.\n\nLet's implement a module that fetches user data from an API and returns the user name.\n\n``` typescript\nimport request from './request';\n\nexport function getUserName(userID) {\n  return request(`/users/${userID}`).then(user => user.name);\n}\n```\n\nuser.js\n\nIn the above implementation, we expect the `request.js` module to return a promise. We chain a call to `then` to receive the user name.\n\nNow imagine an implementation of `request.js` that goes to the network and fetches some user data:\n\n``` typescript\nconst http = require('http');\n\nexport default function request(url) {\n  return new Promise(resolve => {\n    // This is an example of an http request, for example to fetch\n    // user data from an API.\n    // This module is being mocked in __mocks__/request.js\n    http.get({path: url}, response => {\n      let data = '';\n      response.on('data', _data => (data += _data));\n      response.on('end', () => resolve(data));\n    });\n  });\n}\n```\n\nrequest.js\n\nBecause we don't want to go to the network in our test, we are going to create a manual mock for our `request.js` module in the `__mocks__` folder (the folder is case-sensitive, `__MOCKS__` will not work). It could look something like this:\n\n``` typescript\nconst users = {\n  4: {name: 'Mark'},\n  5: {name: 'Paul'},\n};\n\nexport default function request(url) {\n  return new Promise((resolve, reject) => {\n    const userID = parseInt(url.substr('/users/'.length), 10);\n    process.nextTick(() =>\n      users[userID]\n        ? resolve(users[userID])\n        : reject({\n            error: `User with ${userID} not found.`,\n          }),\n    );\n  });\n}\n```\n\n\\_\\_mocks\\_\\_/request.js\n\nNow let's write a test for our async functionality.\n\n``` typescript\njest.mock('../request');\n\nimport * as user from '../user';\n\n// The assertion for a promise must be returned.\nit('works with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(4).then(data => expect(data).toEqual('Mark'));\n});\n```\n\n\\_\\_tests\\_\\_/user-test.js\n\nWe call `jest.mock('../request')` to tell Jest to use our manual mock. `it` expects the return value to be a Promise that is going to be resolved. You can chain as many Promises as you like and call `expect` at any time, as long as you return a Promise at the end.\n\n## `.resolves`\n\nThere is a less verbose way using `resolves` to unwrap the value of a fulfilled promise together with any other matcher. If the promise is rejected, the assertion will fail.\n\n``` typescript\nit('works with resolves', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(5)).resolves.toEqual('Paul');\n});\n```\n\n## `async`/`await`\n\nWriting tests using the `async`/`await` syntax is also possible. Here is how you'd write the same examples from before:\n\n``` typescript\n// async/await can be used.\nit('works with async/await', async () => {\n  expect.assertions(1);\n  const data = await user.getUserName(4);\n  expect(data).toEqual('Mark');\n});\n\n// async/await can also be used with `.resolves`.\nit('works with async/await and resolves', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(5)).resolves.toEqual('Paul');\n});\n```\n\nTo enable async/await in your project, install [`@babel/preset-env`](https://babeljs.io/docs/en/babel-preset-env) and enable the feature in your `babel.config.js` file.\n\n## Error handling\n\nErrors can be handled using the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise a fulfilled promise would not fail the test:\n\n``` typescript\n// Testing for async errors using Promise.catch.\nit('tests error with promises', () => {\n  expect.assertions(1);\n  return user.getUserName(2).catch(e =>\n    expect(e).toEqual({\n      error: 'User with 2 not found.',\n    }),\n  );\n});\n\n// Or using async/await.\nit('tests error with async/await', async () => {\n  expect.assertions(1);\n  try {\n    await user.getUserName(1);\n  } catch (e) {\n    expect(e).toEqual({\n      error: 'User with 1 not found.',\n    });\n  }\n});\n```\n\n## `.rejects`\n\nThe`.rejects` helper works like the `.resolves` helper. If the promise is fulfilled, the test will automatically fail. `expect.assertions(number)` is not required but recommended to verify that a certain number of [assertions](expect#expectassertionsnumber) are called during a test. It is otherwise easy to forget to `return`/`await` the `.resolves` assertions.\n\n``` typescript\n// Testing for async errors using `.rejects`.\nit('tests error with rejects', () => {\n  expect.assertions(1);\n  return expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n\n// Or using async/await with `.rejects`.\nit('tests error with async/await and rejects', async () => {\n  expect.assertions(1);\n  await expect(user.getUserName(3)).rejects.toEqual({\n    error: 'User with 3 not found.',\n  });\n});\n```\n\nThe code for this example is available at [examples/async](https://github.com/facebook/jest/tree/main/examples/async).\n\nIf you'd like to test timers, like `setTimeout`, take a look at the [Timer mocks](timer-mocks) documentation.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/tutorial-async](https://jestjs.io/docs/tutorial-async)"
- name: Architecture
  id: architecture
  summary: There is also a written guide you can follow
  description: "# Architecture\n\nIf you are interested in learning more about how Jest works, understand its architecture, and how Jest is split up into individual reusable packages, check out this video:\n\nIf you'd like to learn how to build a testing framework like Jest from scratch, check out this video:\n\nThere is also a [written guide you can follow](https://cpojer.net/posts/building-a-javascript-testing-framework). It teaches the fundamental concepts of Jest and explains how various parts of Jest can be used to compose a custom testing framework.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/architecture](https://jestjs.io/docs/architecture)"
- name: beforeAll()
  id: api#beforeallfn-timeout
  summary: Runs a function before any of the tests in this file run
  belongs_to: Globals
  description: |-
    ### `beforeAll(fn, timeout)`

    Runs a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.

    Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    This is often useful if you want to set up some global state that will be used by many tests.

    For example:

    ``` typescript
    const globalDatabase = makeGlobalDatabase();

    beforeAll(() => {
      // Clears the database and adds some testing data.
      // Jest will wait for this promise to resolve before running tests.
      return globalDatabase.clear().then(() => {
        return globalDatabase.insert({testData: 'foo'});
      });
    });

    // Since we only set up the database once in this example, it's important
    // that our tests don't modify it.
    test('can find things', () => {
      return globalDatabase.find('thing', {}, results => {
        expect(results.length).toBeGreaterThan(0);
      });
    });
    ```

    Here the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.

    If `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.

    If you want to run something before every test instead of before any test runs, use `beforeEach` instead.
- name: beforeEach()
  id: api#beforeeachfn-timeout
  summary: Runs a function before each of the tests in this file runs
  belongs_to: Globals
  description: |-
    ### `beforeEach(fn, timeout)`

    Runs a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.

    Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    This is often useful if you want to reset some global state that will be used by many tests.

    For example:

    ``` typescript
    const globalDatabase = makeGlobalDatabase();

    beforeEach(() => {
      // Clears the database and adds some testing data.
      // Jest will wait for this promise to resolve before running tests.
      return globalDatabase.clear().then(() => {
        return globalDatabase.insert({testData: 'foo'});
      });
    });

    test('can find things', () => {
      return globalDatabase.find('thing', {}, results => {
        expect(results.length).toBeGreaterThan(0);
      });
    });

    test('can insert a thing', () => {
      return globalDatabase.insert('thing', makeThing(), response => {
        expect(response.success).toBeTruthy();
      });
    });
    ```

    Here the `beforeEach` ensures that the database is reset for each test.

    If `beforeEach` is inside a `describe` block, it runs for each test in the describe block.

    If you only need to run some setup code once, before any tests run, use `beforeAll` instead.
- name: Bypassing module mocks
  id: bypassing-module-mocks
  summary: Jest allows you to mock out whole modules in your tests, which can be useful for testing if your code is calling functions from that module correctly
  description: "# Bypassing module mocks\n\nJest allows you to mock out whole modules in your tests, which can be useful for testing if your code is calling functions from that module correctly. However, sometimes you may want to use parts of a mocked module in your *test file*, in which case you want to access the original implementation, rather than a mocked version.\n\nConsider writing a test case for this `createUser` function:\n\n``` typescript\nimport fetch from 'node-fetch';\n\nexport const createUser = async () => {\n  const response = await fetch('http://website.com/users', {method: 'POST'});\n  const userId = await response.text();\n  return userId;\n};\n```\n\ncreateUser.js\n\nYour test will want to mock the `fetch` function so that we can be sure that it gets called without actually making the network request. However, you'll also need to mock the return value of `fetch` with a `Response` (wrapped in a `Promise`), as our function uses it to grab the created user's ID. So you might initially try writing a test like this:\n\n``` typescript\njest.mock('node-fetch');\n\nimport fetch, {Response} from 'node-fetch';\nimport {createUser} from './createUser';\n\ntest('createUser calls fetch with the right args and returns the user id', async () => {\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\n\n  const userId = await createUser();\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledWith('http://website.com/users', {\n    method: 'POST',\n  });\n  expect(userId).toBe('4');\n});\n```\n\nHowever, if you ran that test you would find that the `createUser` function would fail, throwing the error: `TypeError: response.text is not a function`. This is because the `Response` class you've imported from `node-fetch` has been mocked (due to the `jest.mock` call at the top of the test file) so it no longer behaves the way it should.\n\nTo get around problems like this, Jest provides the `jest.requireActual` helper. To make the above test work, make the following change to the imports in the test file:\n\n``` typescript\n// BEFORE\njest.mock('node-fetch');\nimport fetch, {Response} from 'node-fetch';\n```\n\n``` typescript\n// AFTER\njest.mock('node-fetch');\nimport fetch from 'node-fetch';\nconst {Response} = jest.requireActual('node-fetch');\n```\n\nThis allows your test file to import the actual `Response` object from `node-fetch`, rather than a mocked version. This means the test will now pass correctly.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/bypassing-module-mocks](https://jestjs.io/docs/bypassing-module-mocks)"
- name: Code Transformation
  id: code-transformation
  summary: Jest runs the code in your project as JavaScript, but if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates) then you'll need to transform that code into plain JavaScript, similar to what you would do when building for browsers
  description: "# Code Transformation\n\nJest runs the code in your project as JavaScript, but if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates) then you'll need to transform that code into plain JavaScript, similar to what you would do when building for browsers.\n\nJest supports this via the [`transform`](configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) configuration option.\n\nA transformer is a module that provides a method for transforming source files. For example, if you wanted to be able to use a new language feature in your modules or tests that aren't yet supported by Node, you might plug in a code preprocessor that would transpile a future version of JavaScript to a current one.\n\nJest will cache the result of a transformation and attempt to invalidate that result based on a number of factors, such as the source of the file being transformed and changing configuration.\n\n## Defaults\n\nJest ships with one transformer out of the box – [`babel-jest`](https://github.com/facebook/jest/tree/main/packages/babel-jest#setup). It will load your project's Babel configuration and transform any file matching the `/\\.[jt]sx?$/` RegExp (in other words, any `.js`, `.jsx`, `.ts` or `.tsx` file). In addition, `babel-jest` will inject the Babel plugin necessary for mock hoisting talked about in [ES Module mocking](manual-mocks#using-with-es-module-imports).\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n``` typescript\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n## Writing custom transformers\n\nYou can write your own transformer. The API of a transformer is as follows:\n\n``` typescript\ninterface TransformOptions<TransformerConfig = unknown> {\n  supportsDynamicImport: boolean;\n  supportsExportNamespaceFrom: boolean;\n  supportsStaticESM: boolean;\n  supportsTopLevelAwait: boolean;\n  instrument: boolean;\n  /** Cached file system which is used by `jest-runtime` to improve performance. */\n  cacheFS: Map<string, string>;\n  /** Jest configuration of currently running project. */\n  config: ProjectConfig;\n  /** Stringified version of the `config` - useful in cache busting. */\n  configString: string;\n  /** Transformer configuration passed through `transform` option by the user. */\n  transformerConfig: TransformerConfig;\n}\n\ntype TransformedSource = {\n  code: string;\n  map?: RawSourceMap | string | null;\n};\n\ninterface SyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ninterface AsyncTransformer<TransformerConfig = unknown> {\n  canInstrument?: boolean;\n\n  getCacheKey?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => string;\n\n  getCacheKeyAsync?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<string>;\n\n  process?: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => TransformedSource;\n\n  processAsync: (\n    sourceText: string,\n    sourcePath: string,\n    options: TransformOptions<TransformerConfig>,\n  ) => Promise<TransformedSource>;\n}\n\ntype Transformer<TransformerConfig = unknown> =\n  | SyncTransformer<TransformerConfig>\n  | AsyncTransformer<TransformerConfig>;\n\ntype TransformerCreator<\n  X extends Transformer<TransformerConfig>,\n  TransformerConfig = unknown,\n> = (transformerConfig?: TransformerConfig) => X;\n\ntype TransformerFactory<X extends Transformer> = {\n  createTransformer: TransformerCreator<X>;\n};\n```\n\nnote\n\nThe definitions above were trimmed down for brevity. Full code can be found in [Jest repo on GitHub](https://github.com/facebook/jest/blob/main/packages/jest-transform/src/types.ts) (remember to choose the right tag/commit for your version of Jest).\n\nThere are a couple of ways you can import code into Jest - using Common JS (`require`) or ECMAScript Modules (`import` - which exists in static and dynamic versions). Jest passes files through code transformation on demand (for instance when a `require` or `import` is evaluated). This process, also known as \"transpilation\", might happen *synchronously* (in the case of `require`), or *asynchronously* (in the case of `import` or `import()`, the latter of which also works from Common JS modules). For this reason, the interface exposes both pairs of methods for asynchronous and synchronous processes: `process{Async}` and `getCacheKey{Async}`. The latter is called to figure out if we need to call `process{Async}` at all. Since async transformation can happen synchronously without issue, it's possible for the async case to \"fall back\" to the sync variant, but not vice versa.\n\nSo if your code base is ESM only implementing the async variants is sufficient. Otherwise, if any code is loaded through `require` (including `createRequire` from within ESM), then you need to implement the synchronous variant. Be aware that `node_modules` is not transpiled with default config.\n\nSemi-related to this are the supports flags we pass (see `CallerTransformOptions` above), but those should be used within the transform to figure out if it should return ESM or CJS, and has no direct bearing on sync vs async\n\nThough not required, we *highly recommend* implementing `getCacheKey` as well, so we do not waste resources transpiling when we could have read its previous result from disk. You can use [`@jest/create-cache-key-function`](https://www.npmjs.com/package/@jest/create-cache-key-function) to help implement it.\n\nInstead of having your custom transformer implement the `Transformer` interface directly, you can choose to export `createTransformer`, a factory function to dynamically create transformers. This is to allow having a transformer config in your jest config.\n\nNote that [ECMAScript module](ecmascript-modules) support is indicated by the passed in `supports*` options. Specifically `supportsDynamicImport: true` means the transformer can return `import()` expressions, which is supported by both ESM and CJS. If `supportsStaticESM: true` it means top level `import` statements are supported and the code will be interpreted as ESM and not CJS. See [Node's docs](https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs) for details on the differences.\n\ntip\n\nMake sure `process{Async}` method returns source map alongside with transformed code, so it is possible to report line information accurately in code coverage and test errors. Inline source maps also work but are slower.\n\nDuring the development of a transformer it can be useful to run Jest with `--no-cache` to frequently [delete cache](troubleshooting#caching-issues).\n\n### Examples\n\n### TypeScript with type checking\n\nWhile `babel-jest` by default will transpile TypeScript files, Babel will not verify the types. If you want that you can use [`ts-jest`](https://github.com/kulshekhar/ts-jest).\n\n#### Transforming images to their path\n\nImporting images is a way to include them in your browser bundle, but they are not valid JavaScript. One way of handling it in Jest is to replace the imported value with its filename.\n\n``` typescript\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\nfileTransformer.js\n\n``` typescript\nmodule.exports = {\n  transform: {\n    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n      '<rootDir>/fileTransformer.js',\n  },\n};\n```\n\njest.config.js\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/code-transformation](https://jestjs.io/docs/code-transformation)"
- name: 'Config: //'
  id: configuration#-string
  summary: This option allows comments in package.json
  belongs_to: Configuring Jest
  description: "### `//` \\[string\\]\n\nThis option allows comments in `package.json`. Include the comment text as the value of this key:\n\n``` typescript\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\npackage.json\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/configuration](https://jestjs.io/docs/configuration)"
- name: 'Config: automock'
  id: configuration#automock-boolean
  summary: This option tells Jest that all imported modules in your tests should be mocked automatically
  belongs_to: Configuring Jest
  description: |-
    ### `automock` \[boolean\]

    Default: `false`

    This option tells Jest that all imported modules in your tests should be mocked automatically. All modules used in your tests will have a replacement implementation, keeping the API surface.

    Example:

    ``` typescript
    export default {
      authorize: () => 'token',
      isAuthorized: secret => secret === 'wizard',
    };
    ```

    utils.js

    ``` typescript
    import utils from '../utils';

    test('if utils mocked automatically', () => {
      // Public methods of `utils` are now mock functions
      expect(utils.authorize.mock).toBeTruthy();
      expect(utils.isAuthorized.mock).toBeTruthy();

      // You can provide them with your own implementation
      // or pass the expected return value
      utils.authorize.mockReturnValue('mocked_token');
      utils.isAuthorized.mockReturnValue(true);

      expect(utils.authorize()).toBe('mocked_token');
      expect(utils.isAuthorized('not_wizard')).toBeTruthy();
    });
    ```

    \_\_tests\_\_/automock.test.js

    note

    Node modules are automatically mocked when you have a manual mock in place (e.g.: `__mocks__/lodash.js`). More info [here](manual-mocks#mocking-node-modules).

    Node.js core modules, like `fs`, are not mocked by default. They can be mocked explicitly, like `jest.mock('fs')`.
- name: 'Config: bail'
  id: configuration#bail-number--boolean
  summary: By default, Jest runs all tests and produces all errors into the console upon completion
  belongs_to: Configuring Jest
  description: |-
    ### `bail` \[number \| boolean\]

    Default: `0`

    By default, Jest runs all tests and produces all errors into the console upon completion. The bail config option can be used here to have Jest stop running tests after `n` failures. Setting bail to `true` is the same as setting bail to `1`.
- name: 'Config: cacheDirectory'
  id: configuration#cachedirectory-string
  summary: The directory where Jest should store its cached dependency information
  belongs_to: Configuring Jest
  description: |-
    ### `cacheDirectory` \[string\]

    Default: `"/tmp/<path>"`

    The directory where Jest should store its cached dependency information.

    Jest attempts to scan your dependency tree once (up-front) and cache it in order to ease some of the filesystem churn that needs to happen while running tests. This config option lets you customize where Jest stores that cache data on disk.
- name: 'Config: clearMocks'
  id: configuration#clearmocks-boolean
  summary: Automatically clear mock calls, instances, contexts and results before every test
  belongs_to: Configuring Jest
  description: |-
    ### `clearMocks` \[boolean\]

    Default: `false`

    Automatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.
- name: 'Config: collectCoverage'
  id: configuration#collectcoverage-boolean
  summary: Indicates whether the coverage information should be collected while executing the test
  belongs_to: Configuring Jest
  description: |-
    ### `collectCoverage` \[boolean\]

    Default: `false`

    Indicates whether the coverage information should be collected while executing the test. Because this retrofits all executed files with coverage collection statements, it may significantly slow down your tests.

    Jest ships with two coverage providers: `babel` (default) and `v8`. See the [`coverageProvider`](#coverageprovider-string) option for more details.

    info

    The `babel` and `v8` coverage providers use `/* istanbul ignore next */` and `/* c8 ignore next */` comments to exclude lines from coverage reports, respectively. For more information, you can view the [`istanbuljs` documentation](https://github.com/istanbuljs/nyc#parsing-hints-ignoring-lines) and the [`c8` documentation](https://github.com/bcoe/c8#ignoring-uncovered-lines-functions-and-blocks).
- name: 'Config: collectCoverageFrom'
  id: configuration#collectcoveragefrom-array
  summary: An array of glob patterns indicating a set of files for which coverage information should be collected
  belongs_to: Configuring Jest
  description: |-
    ### `collectCoverageFrom` \[array\]

    Default: `undefined`

    An array of [glob patterns](https://github.com/micromatch/micromatch) indicating a set of files for which coverage information should be collected. If a file matches the specified glob pattern, coverage information will be collected for it even if no tests exist for this file and it's never required in the test suite.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      collectCoverageFrom: [
        '**/*.{js,jsx}',
        '!**/node_modules/**',
        '!**/vendor/**',
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      collectCoverageFrom: [
        '**/*.{js,jsx}',
        '!**/node_modules/**',
        '!**/vendor/**',
      ],
    };

    export default config;
    ```

    This will collect coverage information for all the files inside the project's `rootDir`, except the ones that match `**/node_modules/**` or `**/vendor/**`.

    tip

    Each glob pattern is applied in the order they are specified in the config. For example `["!**/__tests__/**", "**/*.js"]` will not exclude `__tests__` because the negation is overwritten with the second pattern. In order to make the negated glob work in this example it has to come after `**/*.js`.

    note

    This option requires `collectCoverage` to be set to `true` or Jest to be invoked with `--coverage`.

    Help:

    If you are seeing coverage output such as...

    ``` typescript
    =============================== Coverage summary ===============================
    Statements   : Unknown% ( 0/0 )
    Branches     : Unknown% ( 0/0 )
    Functions    : Unknown% ( 0/0 )
    Lines        : Unknown% ( 0/0 )
    ================================================================================
    Jest: Coverage data for global was not found.
    ```

    Most likely your glob patterns are not matching any files. Refer to the [micromatch](https://github.com/micromatch/micromatch) documentation to ensure your globs are compatible.
- name: 'Config: coverageDirectory'
  id: configuration#coveragedirectory-string
  summary: The directory where Jest should output its coverage files
  belongs_to: Configuring Jest
  description: |-
    ### `coverageDirectory` \[string\]

    Default: `undefined`

    The directory where Jest should output its coverage files.
- name: 'Config: coveragePathIgnorePatterns'
  id: configuration#coveragepathignorepatterns-arraystring
  summary: An array of regexp pattern strings that are matched against all file paths before executing the test
  belongs_to: Configuring Jest
  description: |-
    ### `coveragePathIgnorePatterns` \[array\<string\>\]

    Default: `["/node_modules/"]`

    An array of regexp pattern strings that are matched against all file paths before executing the test. If the file path matches any of the patterns, coverage information will be skipped.

    These pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `["<rootDir>/build/", "<rootDir>/node_modules/"]`.
- name: 'Config: coverageProvider'
  id: configuration#coverageprovider-string
  summary: Indicates which provider should be used to instrument code for coverage
  belongs_to: Configuring Jest
  description: |-
    ### `coverageProvider` \[string\]

    Indicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.

    Note that using `v8` is considered experimental. This uses V8's builtin code coverage rather than one based on Babel. It is not as well tested, and it has also improved in the last few releases of Node. Using the latest versions of node (v14 at the time of this writing) will yield better results.
- name: 'Config: coverageReporters'
  id: configuration#coveragereporters-arraystring--string-options
  summary: A list of reporter names that Jest uses when writing coverage reports
  belongs_to: Configuring Jest
  description: |-
    ### `coverageReporters` \[array\<string \| \[string, options\]\>\]

    Default: `["clover", "json", "lcov", "text"]`

    A list of reporter names that Jest uses when writing coverage reports. Any [istanbul reporter](https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib) can be used.

    tip

    Setting this option overwrites the default values. Add `"text"` or `"text-summary"` to see a coverage summary in the console output.

    Additional options can be passed using the tuple form. For example, you may hide coverage report lines for all fully-covered files:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],
    };

    export default config;
    ```

    For more information about the options object shape refer to `CoverageReporterWithOptions` type in the [type definitions](https://github.com/facebook/jest/tree/main/packages/jest-types/src/Config.ts).
- name: 'Config: coverageThreshold'
  id: configuration#coveragethreshold-object
  summary: This will be used to configure minimum threshold enforcement for coverage results
  belongs_to: Configuring Jest
  description: |-
    ### `coverageThreshold` \[object\]

    Default: `undefined`

    This will be used to configure minimum threshold enforcement for coverage results. Thresholds can be specified as `global`, as a [glob](https://github.com/isaacs/node-glob#glob-primer), and as a directory or file path. If thresholds aren't met, jest will fail. Thresholds specified as a positive number are taken to be the minimum percentage required. Thresholds specified as a negative number represent the maximum number of uncovered entities allowed.

    For example, with the following configuration jest will fail if there is less than 80% branch, line, and function coverage, or if there are more than 10 uncovered statements:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      coverageThreshold: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: -10,
        },
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      coverageThreshold: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: -10,
        },
      },
    };

    export default config;
    ```

    If globs or paths are specified alongside `global`, coverage data for matching paths will be subtracted from overall coverage and thresholds will be applied independently. Thresholds for globs are applied to all files matching the glob. If the file specified by path is not found, an error is returned.

    For example, with the following configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      coverageThreshold: {
        global: {
          branches: 50,
          functions: 50,
          lines: 50,
          statements: 50,
        },
        './src/components/': {
          branches: 40,
          statements: 40,
        },
        './src/reducers/**/*.js': {
          statements: 90,
        },
        './src/api/very-important-module.js': {
          branches: 100,
          functions: 100,
          lines: 100,
          statements: 100,
        },
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      coverageThreshold: {
        global: {
          branches: 50,
          functions: 50,
          lines: 50,
          statements: 50,
        },
        './src/components/': {
          branches: 40,
          statements: 40,
        },
        './src/reducers/**/*.js': {
          statements: 90,
        },
        './src/api/very-important-module.js': {
          branches: 100,
          functions: 100,
          lines: 100,
          statements: 100,
        },
      },
    };

    export default config;
    ```

    Jest will fail if:

    - The `./src/components` directory has less than 40% branch or statement coverage.
    - One of the files matching the `./src/reducers/**/*.js` glob has less than 90% statement coverage.
    - The `./src/api/very-important-module.js` file has less than 100% coverage.
    - Every remaining file combined has less than 50% coverage (`global`).
- name: 'Config: dependencyExtractor'
  id: configuration#dependencyextractor-string
  summary: This option allows the use of a custom dependency extractor
  belongs_to: Configuring Jest
  description: |-
    ### `dependencyExtractor` \[string\]

    Default: `undefined`

    This option allows the use of a custom dependency extractor. It must be a node module that exports an object with an `extract` function. E.g.:

    ``` typescript
    const crypto = require('crypto');
    const fs = require('fs');

    module.exports = {
      extract(code, filePath, defaultExtract) {
        const deps = defaultExtract(code, filePath);
        // Scan the file and add dependencies in `deps` (which is a `Set`)
        return deps;
      },
      getCacheKey() {
        return crypto
          .createHash('md5')
          .update(fs.readFileSync(__filename))
          .digest('hex');
      },
    };
    ```

    The `extract` function should return an iterable (`Array`, `Set`, etc.) with the dependencies found in the code.

    That module can also contain a `getCacheKey` function to generate a cache key to determine if the logic has changed and any cached artifacts relying on it should be discarded.
- name: 'Config: displayName'
  id: configuration#displayname-string-object
  summary: Allows for a label to be printed alongside a test while it is running
  belongs_to: Configuring Jest
  description: |-
    ### `displayName` \[string, object\]

    default: `undefined`

    Allows for a label to be printed alongside a test while it is running. This becomes more useful in multi-project repositories where there can be many jest configuration files. This visually tells which project a test belongs to.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      displayName: 'CLIENT',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      displayName: 'CLIENT',
    };

    export default config;
    ```

    Alternatively, an object with the properties `name` and `color` can be passed. This allows for a custom configuration of the background color of the displayName. `displayName` defaults to white when its value is a string. Jest uses [`chalk`](https://github.com/chalk/chalk) to provide the color. As such, all of the valid options for colors supported by `chalk` are also supported by Jest.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      displayName: {
        name: 'CLIENT',
        color: 'blue',
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      displayName: {
        name: 'CLIENT',
        color: 'blue',
      },
    };

    export default config;
    ```
- name: 'Config: errorOnDeprecated'
  id: configuration#errorondeprecated-boolean
  summary: Make calling deprecated APIs throw helpful error messages
  belongs_to: Configuring Jest
  description: |-
    ### `errorOnDeprecated` \[boolean\]

    Default: `false`

    Make calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.
- name: 'Config: extensionsToTreatAsEsm'
  id: configuration#extensionstotreatasesm-arraystring
  summary: Jest will run .mjs and .js files with nearest package.json's type field set to module as ECMAScript Modules
  belongs_to: Configuring Jest
  description: |-
    ### `extensionsToTreatAsEsm` \[array\<string\>\]

    Default: `[]`

    Jest will run `.mjs` and `.js` files with nearest `package.json`'s `type` field set to `module` as ECMAScript Modules. If you have any other files that should run with native ESM, you need to specify their file extension here.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      extensionsToTreatAsEsm: ['.ts'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      extensionsToTreatAsEsm: ['.ts'],
    };

    export default config;
    ```

    caution

    Jest's ESM support is still experimental, see [its docs for more details](ecmascript-modules).
- name: 'Config: fakeTimers'
  id: configuration#faketimers-object
  summary: The fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test
  belongs_to: Configuring Jest
  description: |-
    ### `fakeTimers` \[object\]

    Default: `{}`

    The fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test. For additional details see [Fake Timers guide](timer-mocks) and [API documentation](jest-object#fake-timers).

    This option provides the default configuration of fake timers for all tests. Calling `jest.useFakeTimers()` in a test file will use these options or will override them if a configuration object is passed. For example, you can tell Jest to keep the original implementation of `process.nextTick()` and adjust the limit of recursive timers that will be run:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      fakeTimers: {
        doNotFake: ['nextTick'],
        timerLimit: 1000,
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      fakeTimers: {
        doNotFake: ['nextTick'],
        timerLimit: 1000,
      },
    };

    export default config;
    ```

    ``` typescript
    // install fake timers for this file using the options from Jest configuration
    jest.useFakeTimers();

    test('increase the limit of recursive timers for this and following tests', () => {
      jest.useFakeTimers({timerLimit: 5000});
      // ...
    });
    ```

    fakeTime.test.js

    tip

    Instead of including `jest.useFakeTimers()` in each test file, you can enable fake timers globally for all tests in your Jest configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      fakeTimers: {
        enableGlobally: true,
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      fakeTimers: {
        enableGlobally: true,
      },
    };

    export default config;
    ```

    Configuration options:

    ``` typescript
    type FakeableAPI =
      | 'Date'
      | 'hrtime'
      | 'nextTick'
      | 'performance'
      | 'queueMicrotask'
      | 'requestAnimationFrame'
      | 'cancelAnimationFrame'
      | 'requestIdleCallback'
      | 'cancelIdleCallback'
      | 'setImmediate'
      | 'clearImmediate'
      | 'setInterval'
      | 'clearInterval'
      | 'setTimeout'
      | 'clearTimeout';

    type ModernFakeTimersConfig = {
      /**
       * If set to `true` all timers will be advanced automatically by 20 milliseconds
       * every 20 milliseconds. A custom time delta may be provided by passing a number.
       * The default is `false`.
       */
      advanceTimers?: boolean | number;
      /**
       * List of names of APIs that should not be faked. The default is `[]`, meaning
       * all APIs are faked.
       */
      doNotFake?: Array<FakeableAPI>;
      /** Whether fake timers should be enabled for all test files. The default is `false`. */
      enableGlobally?: boolean;
      /**
       * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.
       * The default is `false`.
       */
      legacyFakeTimers?: boolean;
      /** Sets current system time to be used by fake timers. The default is `Date.now()`. */
      now?: number;
      /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */
      timerLimit?: number;
    };
    ```

    Legacy Fake Timers

    For some reason you might have to use legacy implementation of fake timers. Here is how to enable it globally (additional options are not supported):

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      fakeTimers: {
        enableGlobally: true,
        legacyFakeTimers: true,
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      fakeTimers: {
        enableGlobally: true,
        legacyFakeTimers: true,
      },
    };

    export default config;
    ```
- name: 'Config: forceCoverageMatch'
  id: configuration#forcecoveragematch-arraystring
  summary: Test files are normally ignored from collecting code coverage
  belongs_to: Configuring Jest
  description: |-
    ### `forceCoverageMatch` \[array\<string\>\]

    Default: `['']`

    Test files are normally ignored from collecting code coverage. With this option, you can overwrite this behavior and include otherwise ignored files in code coverage.

    For example, if you have tests in source files named with `.t.js` extension as following:

    ``` typescript
    export function sum(a, b) {
      return a + b;
    }

    if (process.env.NODE_ENV === 'test') {
      test('sum', () => {
        expect(sum(1, 2)).toBe(3);
      });
    }
    ```

    sum.t.js

    You can collect coverage from those files with setting `forceCoverageMatch`.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      forceCoverageMatch: ['**/*.t.js'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      forceCoverageMatch: ['**/*.t.js'],
    };

    export default config;
    ```
- name: 'Config: globals'
  id: configuration#globals-object
  summary: A set of global variables that need to be available in all test environments
  belongs_to: Configuring Jest
  description: |-
    ### `globals` \[object\]

    Default: `{}`

    A set of global variables that need to be available in all test environments.

    For example, the following would create a global `__DEV__` variable set to `true` in all test environments:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      globals: {
        __DEV__: true,
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      globals: {
        __DEV__: true,
      },
    };

    export default config;
    ```

    Note that, if you specify a global reference value (like an object or array) here, and some code mutates that value in the midst of running a test, that mutation will *not* be persisted across test runs for other test files. In addition, the `globals` object must be json-serializable, so it can't be used to specify global functions. For that, you should use `setupFiles`.
- name: 'Config: globalSetup'
  id: configuration#globalsetup-string
  summary: This option allows the use of a custom global setup module, which must export a function (it can be sync or async)
  belongs_to: Configuring Jest
  description: |-
    ### `globalSetup` \[string\]

    Default: `undefined`

    This option allows the use of a custom global setup module, which must export a function (it can be sync or async). The function will be triggered once before all test suites and it will receive two arguments: Jest's [`globalConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L282) and [`projectConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L347).

    info

    A global setup module configured in a project (using multi-project runner) will be triggered only when you run at least one test from this project.

    Any global variables that are defined through `globalSetup` can only be read in `globalTeardown`. You cannot retrieve globals defined here in your test suites.

    While code transformation is applied to the linked setup-file, Jest will **not** transform any code in `node_modules`. This is due to the need to load the actual transformers (e.g. `babel` or `typescript`) to perform transformation.

    ``` typescript
    module.exports = async function (globalConfig, projectConfig) {
      console.log(globalConfig.testPathPattern);
      console.log(projectConfig.cache);

      // Set reference to mongod in order to close the server during teardown.
      globalThis.__MONGOD__ = mongod;
    };
    ```

    setup.js

    ``` typescript
    module.exports = async function (globalConfig, projectConfig) {
      console.log(globalConfig.testPathPattern);
      console.log(projectConfig.cache);

      await globalThis.__MONGOD__.stop();
    };
    ```

    teardown.js
- name: 'Config: globalTeardown'
  id: configuration#globalteardown-string
  summary: This option allows the use of a custom global teardown module which must export a function (it can be sync or async)
  belongs_to: Configuring Jest
  description: |-
    ### `globalTeardown` \[string\]

    Default: `undefined`

    This option allows the use of a custom global teardown module which must export a function (it can be sync or async). The function will be triggered once after all test suites and it will receive two arguments: Jest's [`globalConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L282) and [`projectConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L347).

    info

    A global teardown module configured in a project (using multi-project runner) will be triggered only when you run at least one test from this project.

    The same caveat concerning transformation of `node_modules` as for `globalSetup` applies to `globalTeardown`.
- name: 'Config: haste'
  id: configuration#haste-object
  summary: This will be used to configure the behavior of jest-haste-map, Jest's internal file crawler/cache system
  belongs_to: Configuring Jest
  description: |-
    ### `haste` \[object\]

    Default: `undefined`

    This will be used to configure the behavior of `jest-haste-map`, Jest's internal file crawler/cache system. The following options are supported:

    ``` typescript
    type HasteConfig = {
      /** Whether to hash files using SHA-1. */
      computeSha1?: boolean;
      /** The platform to use as the default, e.g. 'ios'. */
      defaultPlatform?: string | null;
      /** Force use of Node's `fs` APIs rather than shelling out to `find` */
      forceNodeFilesystemAPI?: boolean;
      /**
       * Whether to follow symlinks when crawling for files.
       *   This options cannot be used in projects which use watchman.
       *   Projects with `watchman` set to true will error if this option is set to true.
       */
      enableSymlinks?: boolean;
      /** Path to a custom implementation of Haste. */
      hasteImplModulePath?: string;
      /** All platforms to target, e.g ['ios', 'android']. */
      platforms?: Array<string>;
      /** Whether to throw on error on module collision. */
      throwOnModuleCollision?: boolean;
      /** Custom HasteMap module */
      hasteMapModulePath?: string;
      /** Whether to retain all files, allowing e.g. search for tests in `node_modules`. */
      retainAllFiles?: boolean;
    };
    ```
- name: 'Config: injectGlobals'
  id: configuration#injectglobals-boolean
  summary: Insert Jest's globals (expect, test, describe, beforeEach etc.) into the global environment
  belongs_to: Configuring Jest
  description: |-
    ### `injectGlobals` \[boolean\]

    Default: `true`

    Insert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.

    ``` typescript
    import {expect, jest, test} from '@jest/globals';

    jest.useFakeTimers();

    test('some test', () => {
      expect(Date.now()).toBe(0);
    });
    ```

    note

    This option is only supported using the default `jest-circus` test runner.
- name: 'Config: maxConcurrency'
  id: configuration#maxconcurrency-number
  summary: A number limiting the number of tests that are allowed to run at the same time when using test.concurrent
  belongs_to: Configuring Jest
  description: |-
    ### `maxConcurrency` \[number\]

    Default: `5`

    A number limiting the number of tests that are allowed to run at the same time when using `test.concurrent`. Any test above this limit will be queued and executed once a slot is released.
- name: 'Config: maxWorkers'
  id: configuration#maxworkers-number--string
  summary: Specifies the maximum number of workers the worker-pool will spawn for running tests
  belongs_to: Configuring Jest
  description: |-
    ### `maxWorkers` \[number \| string\]

    Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.

    For environments with variable CPUs available, you can use percentage based configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      maxWorkers: '50%',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      maxWorkers: '50%',
    };

    export default config;
    ```
- name: 'Config: moduleDirectories'
  id: configuration#moduledirectories-arraystring
  summary: An array of directory names to be searched recursively up from the requiring module's location
  belongs_to: Configuring Jest
  description: |-
    ### `moduleDirectories` \[array\<string\>\]

    Default: `["node_modules"]`

    An array of directory names to be searched recursively up from the requiring module's location. Setting this option will *override* the default, if you wish to still search `node_modules` for packages include it along with any other options:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      moduleDirectories: ['node_modules', 'bower_components'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      moduleDirectories: ['node_modules', 'bower_components'],
    };

    export default config;
    ```
- name: 'Config: moduleFileExtensions'
  id: configuration#modulefileextensions-arraystring
  summary: An array of file extensions your modules use
  belongs_to: Configuring Jest
  description: |-
    ### `moduleFileExtensions` \[array\<string\>\]

    Default: `["js", "mjs", "cjs", "jsx", "ts", "tsx", "json", "node"]`

    An array of file extensions your modules use. If you require modules without specifying a file extension, these are the extensions Jest will look for, in left-to-right order.

    We recommend placing the extensions most commonly used in your project on the left, so if you are using TypeScript, you may want to consider moving "ts" and/or "tsx" to the beginning of the array.
- name: 'Config: moduleNameMapper'
  id: configuration#modulenamemapper-objectstring-string--arraystring
  summary: A map from regular expressions to module names or to arrays of module names that allow to stub out resources, like images or styles with a single module
  belongs_to: Configuring Jest
  description: |-
    ### `moduleNameMapper` \[object\<string, string \| array\<string\>\>\]

    Default: `null`

    A map from regular expressions to module names or to arrays of module names that allow to stub out resources, like images or styles with a single module.

    Modules that are mapped to an alias are unmocked by default, regardless of whether automocking is enabled or not.

    Use `<rootDir>` string token to refer to [`rootDir`](#rootdir-string) value if you want to use file paths.

    Additionally, you can substitute captured regex groups using numbered backreferences.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      moduleNameMapper: {
        '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
        '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',
        'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
        'assets/(.*)': [
          '<rootDir>/images/$1',
          '<rootDir>/photos/$1',
          '<rootDir>/recipes/$1',
        ],
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      moduleNameMapper: {
        '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',
        '^[./a-zA-Z0-9$_-]+\\.png$': '<rootDir>/RelativeImageStub.js',
        'module_name_(.*)': '<rootDir>/substituted_module_$1.js',
        'assets/(.*)': [
          '<rootDir>/images/$1',
          '<rootDir>/photos/$1',
          '<rootDir>/recipes/$1',
        ],
      },
    };

    export default config;
    ```

    The order in which the mappings are defined matters. Patterns are checked one by one until one fits. The most specific rule should be listed first. This is true for arrays of module names as well.

    info

    If you provide module names without boundaries `^$` it may cause hard to spot errors. E.g. `relay` will replace all modules which contain `relay` as a substring in its name: `relay`, `react-relay` and `graphql-relay` will all be pointed to your stub.
- name: 'Config: modulePathIgnorePatterns'
  id: configuration#modulepathignorepatterns-arraystring
  summary: An array of regexp pattern strings that are matched against all module paths before those paths are to be considered 'visible' to the module loader
  belongs_to: Configuring Jest
  description: |-
    ### `modulePathIgnorePatterns` \[array\<string\>\]

    Default: `[]`

    An array of regexp pattern strings that are matched against all module paths before those paths are to be considered 'visible' to the module loader. If a given module's path matches any of the patterns, it will not be `require()`-able in the test environment.

    These pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      modulePathIgnorePatterns: ['<rootDir>/build/'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      modulePathIgnorePatterns: ['<rootDir>/build/'],
    };

    export default config;
    ```
- name: 'Config: modulePaths'
  id: configuration#modulepaths-arraystring
  summary: An alternative API to setting the NODE_PATH env variable, modulePaths is an array of absolute paths to additional locations to search when resolving modules
  belongs_to: Configuring Jest
  description: |-
    ### `modulePaths` \[array\<string\>\]

    Default: `[]`

    An alternative API to setting the `NODE_PATH` env variable, `modulePaths` is an array of absolute paths to additional locations to search when resolving modules. Use the `<rootDir>` string token to include the path to your project's root directory.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      modulePaths: ['<rootDir>/app/'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      modulePaths: ['<rootDir>/app/'],
    };

    export default config;
    ```
- name: 'Config: notify'
  id: configuration#notify-boolean
  summary: Activates native OS notifications for test results
  belongs_to: Configuring Jest
  description: |-
    ### `notify` \[boolean\]

    Default: `false`

    Activates native OS notifications for test results. To display the notifications Jest needs [`node-notifier`](https://github.com/mikaelbr/node-notifier) package, which must be installed additionally:

    - npm
    - Yarn

    ``` typescript
    npm install --save-dev node-notifier
    ```

    ``` typescript
    yarn add --dev node-notifier
    ```

    tip

    On macOS, remember to allow notifications from `terminal-notifier` under System Preferences \> Notifications & Focus.

    On Windows, `node-notifier` creates a new start menu entry on the first use and not display the notification. Notifications will be properly displayed on subsequent runs.
- name: 'Config: notifyMode'
  id: configuration#notifymode-string
  summary: Specifies notification mode
  belongs_to: Configuring Jest
  description: |-
    ### `notifyMode` \[string\]

    Default: `failure-change`

    Specifies notification mode. Requires `notify: true`.

    #### Modes

    - `always`: always send a notification.
    - `failure`: send a notification when tests fail.
    - `success`: send a notification when tests pass.
    - `change`: send a notification when the status changed.
    - `success-change`: send a notification when tests pass or once when it fails.
    - `failure-change`: send a notification when tests fail or once when it passes.

    &nbsp;
- name: 'Config: preset'
  id: configuration#preset-string
  summary: A preset that is used as a base for Jest's configuration
  belongs_to: Configuring Jest
  description: |-
    ### `preset` \[string\]

    Default: `undefined`

    A preset that is used as a base for Jest's configuration. A preset should point to an npm module that has a `jest-preset.json`, `jest-preset.js`, `jest-preset.cjs` or `jest-preset.mjs` file at the root.

    For example, this preset `foo-bar/jest-preset.js` will be configured as follows:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      preset: 'foo-bar',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      preset: 'foo-bar',
    };

    export default config;
    ```

    Presets may also be relative to filesystem paths:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      preset: './node_modules/foo-bar/jest-preset.js',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      preset: './node_modules/foo-bar/jest-preset.js',
    };

    export default config;
    ```

    info

    Note that if you also have specified [`rootDir`](#rootdir-string) that the resolution of this file will be relative to that root directory.
- name: 'Config: prettierPath'
  id: configuration#prettierpath-string
  summary: Sets the path to the prettier node module used to update inline snapshots
  belongs_to: Configuring Jest
  description: |-
    ### `prettierPath` \[string\]

    Default: `'prettier'`

    Sets the path to the [`prettier`](https://prettier.io/) node module used to update inline snapshots.
- name: 'Config: projects'
  id: configuration#projects-arraystring--projectconfig
  summary: When the projects configuration is provided with an array of paths or glob patterns, Jest will run tests in all of the specified projects at the same time
  belongs_to: Configuring Jest
  description: |-
    ### `projects` \[array\<string \| ProjectConfig\>\]

    Default: `undefined`

    When the `projects` configuration is provided with an array of paths or glob patterns, Jest will run tests in all of the specified projects at the same time. This is great for monorepos or when working on multiple projects at the same time.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      projects: ['<rootDir>', '<rootDir>/examples/*'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      projects: ['<rootDir>', '<rootDir>/examples/*'],
    };

    export default config;
    ```

    This example configuration will run Jest in the root directory as well as in every folder in the examples directory. You can have an unlimited amount of projects running in the same Jest instance.

    The projects feature can also be used to run multiple configurations or multiple [runners](#runner-string). For this purpose, you can pass an array of configuration objects. For example, to run both tests and ESLint (via [jest-runner-eslint](https://github.com/jest-community/jest-runner-eslint)) in the same invocation of Jest:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      projects: [
        {
          displayName: 'test',
        },
        {
          displayName: 'lint',
          runner: 'jest-runner-eslint',
          testMatch: ['<rootDir>/**/*.js'],
        },
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      projects: [
        {
          displayName: 'test',
        },
        {
          displayName: 'lint',
          runner: 'jest-runner-eslint',
          testMatch: ['<rootDir>/**/*.js'],
        },
      ],
    };

    export default config;
    ```

    tip

    When using multi-project runner, it's recommended to add a `displayName` for each project. This will show the `displayName` of a project next to its tests.
- name: 'Config: reporters'
  id: configuration#reporters-arraymodulename--modulename-options
  summary: Use this configuration option to add reporters to Jest
  belongs_to: Configuring Jest
  description: |-
    ### `reporters` \[array\<moduleName \| \[moduleName, options\]\>\]

    Default: `undefined`

    Use this configuration option to add reporters to Jest. It must be a list of reporter names, additional options can be passed to a reporter using the tuple form:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      reporters: [
        'default',
        ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      reporters: [
        'default',
        ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],
      ],
    };

    export default config;
    ```

    #### Default Reporter

    If custom reporters are specified, the default Jest reporter will be overridden. If you wish to keep it, `'default'` must be passed as a reporters name:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      reporters: [
        'default',
        ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      reporters: [
        'default',
        ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],
      ],
    };

    export default config;
    ```

    #### GitHub Actions Reporter

    If included in the list, the built-in GitHub Actions Reporter will annotate changed files with test failure messages:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      reporters: ['default', 'github-actions'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      reporters: ['default', 'github-actions'],
    };

    export default config;
    ```

    #### Summary Reporter

    Summary reporter prints out summary of all tests. It is a part of default reporter, hence it will be enabled if `'default'` is included in the list. For instance, you might want to use it as stand-alone reporter instead of the default one, or together with [Silent Reporter](https://github.com/rickhanlonii/jest-silent-reporter):

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      reporters: ['jest-silent-reporter', 'summary'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      reporters: ['jest-silent-reporter', 'summary'],
    };

    export default config;
    ```

    #### Custom Reporters

    tip

    Hungry for reporters? Take a look at long list of [awesome reporters](https://github.com/jest-community/awesome-jest/blob/main/README.md#reporters) from Awesome Jest.

    Custom reporter module must export a class that takes `globalConfig`, `reporterOptions` and `reporterContext` as constructor arguments and implements at least `onRunComplete()` method (for the full list of methods and argument types see `Reporter` interface in [packages/jest-reporters/src/types.ts](https://github.com/facebook/jest/blob/main/packages/jest-reporters/src/types.ts)):

    ``` typescript
    class CustomReporter {
      constructor(globalConfig, reporterOptions, reporterContext) {
        this._globalConfig = globalConfig;
        this._options = reporterOptions;
        this._context = reporterContext;
      }

      onRunComplete(testContexts, results) {
        console.log('Custom reporter output:');
        console.log('global config: ', this._globalConfig);
        console.log('options for this reporter from Jest config: ', this._options);
        console.log('reporter context passed from test scheduler: ', this._context);
      }

      // Optionally, reporters can force Jest to exit with non zero code by returning
      // an `Error` from `getLastError()` method.
      getLastError() {
        if (this._shouldFail) {
          return new Error('Custom error reported!');
        }
      }
    }

    module.exports = CustomReporter;
    ```

    custom-reporter.js
- name: 'Config: resetMocks'
  id: configuration#resetmocks-boolean
  summary: Automatically reset mock state before every test
  belongs_to: Configuring Jest
  description: |-
    ### `resetMocks` \[boolean\]

    Default: `false`

    Automatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.
- name: 'Config: resetModules'
  id: configuration#resetmodules-boolean
  summary: By default, each test file gets its own independent module registry
  belongs_to: Configuring Jest
  description: |-
    ### `resetModules` \[boolean\]

    Default: `false`

    By default, each test file gets its own independent module registry. Enabling `resetModules` goes a step further and resets the module registry before running each individual test. This is useful to isolate modules for every test so that the local module state doesn't conflict between tests. This can be done programmatically using [`jest.resetModules()`](jest-object#jestresetmodules).
- name: 'Config: resolver'
  id: configuration#resolver-string
  summary: This option allows the use of a custom resolver
  belongs_to: Configuring Jest
  description: |-
    ### `resolver` \[string\]

    Default: `undefined`

    This option allows the use of a custom resolver. This resolver must be a module that exports *either*:

    1.  a function expecting a string as the first argument for the path to resolve and an options object as the second argument. The function should either return a path to the module that should be resolved or throw an error if the module can't be found. *or*
    2.  an object containing `async` and/or `sync` properties. The `sync` property should be a function with the shape explained above, and the `async` property should also be a function that accepts the same arguments, but returns a promise which resolves with the path to the module or rejects with an error.

    The options object provided to resolvers has the shape:

    ``` typescript
    type ResolverOptions = {
      /** Directory to begin resolving from. */
      basedir: string;
      /** List of export conditions. */
      conditions?: Array<string>;
      /** Instance of default resolver. */
      defaultResolver: (path: string, options: ResolverOptions) => string;
      /** List of file extensions to search in order. */
      extensions?: Array<string>;
      /** List of directory names to be looked up for modules recursively. */
      moduleDirectory?: Array<string>;
      /** List of `require.paths` to use if nothing is found in `node_modules`. */
      paths?: Array<string>;
      /** Allows transforming parsed `package.json` contents. */
      packageFilter?: (pkg: PackageJSON, file: string, dir: string) => PackageJSON;
      /** Allows transforms a path within a package. */
      pathFilter?: (pkg: PackageJSON, path: string, relativePath: string) => string;
      /** Current root directory. */
      rootDir?: string;
    };
    ```

    tip

    The `defaultResolver` passed as an option is the Jest default resolver which might be useful when you write your custom one. It takes the same arguments as your custom synchronous one, e.g. `(path, options)` and returns a string or throws.

    For example, if you want to respect Browserify's [`"browser"` field](https://github.com/browserify/browserify-handbook/blob/master/readme.markdown#browser-field), you can use the following resolver:

    ``` typescript
    const browserResolve = require('browser-resolve');

    module.exports = browserResolve.sync;
    ```

    resolver.js

    And add it to Jest configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      resolver: '<rootDir>/resolver.js',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      resolver: '<rootDir>/resolver.js',
    };

    export default config;
    ```

    By combining `defaultResolver` and `packageFilter` we can implement a `package.json` "pre-processor" that allows us to change how the default resolver will resolve modules. For example, imagine we want to use the field `"module"` if it is present, otherwise fallback to `"main"`:

    ``` typescript
    module.exports = (path, options) => {
      // Call the defaultResolver, so we leverage its cache, error handling, etc.
      return options.defaultResolver(path, {
        ...options,
        // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)
        packageFilter: pkg => {
          return {
            ...pkg,
            // Alter the value of `main` before resolving the package
            main: pkg.module || pkg.main,
          };
        },
      });
    };
    ```
- name: 'Config: restoreMocks'
  id: configuration#restoremocks-boolean
  summary: Automatically restore mock state and implementation before every test
  belongs_to: Configuring Jest
  description: |-
    ### `restoreMocks` \[boolean\]

    Default: `false`

    Automatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.
- name: 'Config: rootDir'
  id: configuration#rootdir-string
  summary: The root directory that Jest should scan for tests and modules within
  belongs_to: Configuring Jest
  description: |-
    ### `rootDir` \[string\]

    Default: The root of the directory containing your Jest [config file](#) *or* the `package.json` *or* the [`pwd`](http://en.wikipedia.org/wiki/Pwd) if no `package.json` is found

    The root directory that Jest should scan for tests and modules within. If you put your Jest config inside your `package.json` and want the root directory to be the root of your repo, the value for this config param will default to the directory of the `package.json`.

    Oftentimes, you'll want to set this to `'src'` or `'lib'`, corresponding to where in your repository the code is stored.

    tip

    Using `'<rootDir>'` as a string token in any other path-based configuration settings will refer back to this value. For example, if you want a [`setupFiles`](#setupfiles-array) entry to point at the `some-setup.js` file at the root of the project, set its value to: `'<rootDir>/some-setup.js'`.
- name: 'Config: roots'
  id: configuration#roots-arraystring
  summary: A list of paths to directories that Jest should use to search for files in
  belongs_to: Configuring Jest
  description: |-
    ### `roots` \[array\<string\>\]

    Default: `["<rootDir>"]`

    A list of paths to directories that Jest should use to search for files in.

    There are times where you only want Jest to search in a single sub-directory (such as cases where you have a `src/` directory in your repo), but prevent it from accessing the rest of the repo.

    info

    While `rootDir` is mostly used as a token to be re-used in other configuration options, `roots` is used by the internals of Jest to locate **test files and source files**. This applies also when searching for manual mocks for modules from `node_modules` (`__mocks__` will need to live in one of the `roots`).

    By default, `roots` has a single entry `<rootDir>` but there are cases where you may want to have multiple roots within one project, for example `roots: ["<rootDir>/src/", "<rootDir>/tests/"]`.
- name: 'Config: runner'
  id: configuration#runner-string
  summary: This option allows you to use a custom runner instead of Jest's default test runner
  belongs_to: Configuring Jest
  description: |-
    ### `runner` \[string\]

    Default: `"jest-runner"`

    This option allows you to use a custom runner instead of Jest's default test runner. Examples of runners include:

    - [`jest-runner-eslint`](https://github.com/jest-community/jest-runner-eslint)
    - [`jest-runner-mocha`](https://github.com/rogeliog/jest-runner-mocha)
    - [`jest-runner-tsc`](https://github.com/azz/jest-runner-tsc)
    - [`jest-runner-prettier`](https://github.com/keplersj/jest-runner-prettier)

    info

    The `runner` property value can omit the `jest-runner-` prefix of the package name.

    To write a test-runner, export a class with which accepts `globalConfig` in the constructor, and has a `runTests` method with the signature:

    ``` typescript
    async function runTests(
      tests: Array<Test>,
      watcher: TestWatcher,
      onStart: OnTestStart,
      onResult: OnTestSuccess,
      onFailure: OnTestFailure,
      options: TestRunnerOptions,
    ): Promise<void>;
    ```

    If you need to restrict your test-runner to only run in serial rather than being executed in parallel your class should have the property `isSerial` to be set as `true`.
- name: 'Config: sandboxInjectedGlobals'
  id: configuration#sandboxinjectedglobals-arraystring
  summary: Renamed from extraGlobals in Jest 28
  belongs_to: Configuring Jest
  description: |-
    ### `sandboxInjectedGlobals` \[array\<string\>\]

    tip

    Renamed from `extraGlobals` in Jest 28.

    Default: `undefined`

    Test files run inside a [vm](https://nodejs.org/api/vm.html), which slows calls to global context properties (e.g. `Math`). With this option you can specify extra properties to be defined inside the vm for faster lookups.

    For example, if your tests call `Math` often, you can pass it by setting `sandboxInjectedGlobals`.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      sandboxInjectedGlobals: ['Math'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      sandboxInjectedGlobals: ['Math'],
    };

    export default config;
    ```

    note

    This option has no effect if you use [native ESM](ecmascript-modules).
- name: 'Config: setupFiles'
  id: configuration#setupfiles-array
  summary: A list of paths to modules that run some code to configure or set up the testing environment
  belongs_to: Configuring Jest
  description: |-
    ### `setupFiles` \[array\]

    Default: `[]`

    A list of paths to modules that run some code to configure or set up the testing environment. Each setupFile will be run once per test file. Since every test runs in its own environment, these scripts will be executed in the testing environment before executing [`setupFilesAfterEnv`](#setupfilesafterenv-array) and before the test code itself.

    tip

    If your setup script is a CJS module, it may export an async function. Jest will call the function and await its result. This might be useful to fetch some data asynchronously. If the file is an ESM module, simply use top-level await to achieve the same result.
- name: 'Config: setupFilesAfterEnv'
  id: configuration#setupfilesafterenv-array
  summary: A list of paths to modules that run some code to configure or set up the testing framework before each test file in the suite is executed
  belongs_to: Configuring Jest
  description: |-
    ### `setupFilesAfterEnv` \[array\]

    Default: `[]`

    A list of paths to modules that run some code to configure or set up the testing framework before each test file in the suite is executed. Since [`setupFiles`](#setupfiles-array) executes before the test framework is installed in the environment, this script file presents you the opportunity of running some code immediately after the test framework has been installed in the environment but before the test code itself.

    In other words, `setupFilesAfterEnv` modules are meant for code which is repeating in each test file. Having the test framework installed makes Jest [globals](api), [`jest` object](jest-object) and [`expect`](expect) accessible in the modules. For example, you can add extra matchers from [`jest-extended`](https://github.com/jest-community/jest-extended) library or call [setup and teardown](setup-teardown) hooks:

    ``` typescript
    const matchers = require('jest-extended');
    expect.extend(matchers);

    afterEach(() => {
      jest.useRealTimers();
    });
    ```

    setup-jest.js

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      setupFilesAfterEnv: ['<rootDir>/setup-matchers.js'],
    };

    export default config;
    ```
- name: 'Config: slowTestThreshold'
  id: configuration#slowtestthreshold-number
  summary: The number of seconds after which a test is considered as slow and reported as such in the results
  belongs_to: Configuring Jest
  description: |-
    ### `slowTestThreshold` \[number\]

    Default: `5`

    The number of seconds after which a test is considered as slow and reported as such in the results.
- name: 'Config: snapshotFormat'
  id: configuration#snapshotformat-object
  summary: Allows overriding specific snapshot formatting options documented in the pretty-format readme, with the exceptions of compareKeys and plugins
  belongs_to: Configuring Jest
  description: |-
    ### `snapshotFormat` \[object\]

    Default: `{escapeString: false, printBasicPrototype: false}`

    Allows overriding specific snapshot formatting options documented in the [pretty-format readme](https://www.npmjs.com/package/pretty-format#usage-with-options), with the exceptions of `compareKeys` and `plugins`. For example, this config would have the snapshot formatter not print a prefix for "Object" and "Array":

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      snapshotFormat: {
        printBasicPrototype: false,
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      snapshotFormat: {
        printBasicPrototype: false,
      },
    };

    export default config;
    ```

    ``` typescript
    test('does not show prototypes for object and array inline', () => {
      const object = {
        array: [{hello: 'Danger'}],
      };
      expect(object).toMatchInlineSnapshot(`
    {
      "array": [
        {
          "hello": "Danger",
        },
      ],
    }
        `);
    });
    ```

    some.test.js
- name: 'Config: snapshotResolver'
  id: configuration#snapshotresolver-string
  summary: The path to a module that can resolve test<->snapshot path
  belongs_to: Configuring Jest
  description: |-
    ### `snapshotResolver` \[string\]

    Default: `undefined`

    The path to a module that can resolve test\<-\>snapshot path. This config option lets you customize where Jest stores snapshot files on disk.

    ``` typescript
    module.exports = {
      // resolves from test to snapshot path
      resolveSnapshotPath: (testPath, snapshotExtension) =>
        testPath.replace('__tests__', '__snapshots__') + snapshotExtension,

      // resolves from snapshot to test path
      resolveTestPath: (snapshotFilePath, snapshotExtension) =>
        snapshotFilePath
          .replace('__snapshots__', '__tests__')
          .slice(0, -snapshotExtension.length),

      // Example test path, used for preflight consistency check of the implementation above
      testPathForConsistencyCheck: 'some/__tests__/example.test.js',
    };
    ```

    custom-resolver.js
- name: 'Config: snapshotSerializers'
  id: configuration#snapshotserializers-arraystring
  summary: A list of paths to snapshot serializer modules Jest should use for snapshot testing
  belongs_to: Configuring Jest
  description: |-
    ### `snapshotSerializers` \[array\<string\>\]

    Default: `[]`

    A list of paths to snapshot serializer modules Jest should use for snapshot testing.

    Jest has default serializers for built-in JavaScript types, HTML elements (Jest 20.0.0+), ImmutableJS (Jest 20.0.0+) and for React elements. See [snapshot test tutorial](tutorial-react-native#snapshot-test) for more information.

    ``` typescript
    module.exports = {
      serialize(val, config, indentation, depth, refs, printer) {
        return `Pretty foo: ${printer(val.foo)}`;
      },

      test(val) {
        return val && Object.prototype.hasOwnProperty.call(val, 'foo');
      },
    };
    ```

    custom-serializer.js

    `printer` is a function that serializes a value using existing plugins.

    Add `custom-serializer` to your Jest configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      snapshotSerializers: ['path/to/custom-serializer.js'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      snapshotSerializers: ['path/to/custom-serializer.js'],
    };

    export default config;
    ```

    Finally tests would look as follows:

    ``` typescript
    test(() => {
      const bar = {
        foo: {
          x: 1,
          y: 2,
        },
      };

      expect(bar).toMatchSnapshot();
    });
    ```

    Rendered snapshot:

    ``` typescript
    Pretty foo: Object {
      "x": 1,
      "y": 2,
    }
    ```

    To make a dependency explicit instead of implicit, you can call [`expect.addSnapshotSerializer`](expect#expectaddsnapshotserializerserializer) to add a module for an individual test file instead of adding its path to `snapshotSerializers` in Jest configuration.

    More about serializers API can be found [here](https://github.com/facebook/jest/tree/main/packages/pretty-format/README.md#serialize).
- name: 'Config: testEnvironment'
  id: configuration#testenvironment-string
  summary: The test environment that will be used for testing
  belongs_to: Configuring Jest
  description: |-
    ### `testEnvironment` \[string\]

    Default: `"node"`

    The test environment that will be used for testing. The default environment in Jest is a Node.js environment. If you are building a web app, you can use a browser-like environment through [`jsdom`](https://github.com/jsdom/jsdom) instead.

    By adding a `@jest-environment` docblock at the top of the file, you can specify another environment to be used for all tests in that file:

    ``` typescript
    /**
     * @jest-environment jsdom
     */

    test('use jsdom in this test file', () => {
      const element = document.createElement('div');
      expect(element).not.toBeNull();
    });
    ```

    You can create your own module that will be used for setting up the test environment. The module must export a class with `setup`, `teardown` and `getVmContext` methods. You can also pass variables from this module to your test suites by assigning them to `this.global` object – this will make them available in your test suites as global variables. The constructor is passed [global config](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-types/src/Config.ts#L284) and [project config](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-types/src/Config.ts#L349) as its first argument, and [`testEnvironmentContext`](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-environment/src/index.ts#L13) as its second.

    The class may optionally expose an asynchronous `handleTestEvent` method to bind to events fired by [`jest-circus`](https://github.com/facebook/jest/tree/main/packages/jest-circus). Normally, `jest-circus` test runner would pause until a promise returned from `handleTestEvent` gets fulfilled, **except for the next events**: `start_describe_definition`, `finish_describe_definition`, `add_hook`, `add_test` or `error` (for the up-to-date list you can look at [SyncEvent type in the types definitions](https://github.com/facebook/jest/tree/main/packages/jest-types/src/Circus.ts)). That is caused by backward compatibility reasons and `process.on('unhandledRejection', callback)` signature, but that usually should not be a problem for most of the use cases.

    Any docblock pragmas in test files will be passed to the environment constructor and can be used for per-test configuration. If the pragma does not have a value, it will be present in the object with its value set to an empty string. If the pragma is not present, it will not be present in the object.

    To use this class as your custom environment, refer to it by its full path within the project. For example, if your class is stored in `my-custom-environment.js` in some subfolder of your project, then the annotation might look like this:

    ``` typescript
    /**
     * @jest-environment ./src/test/my-custom-environment
     */
    ```

    info

    TestEnvironment is sandboxed. Each test suite will trigger setup/teardown in their own TestEnvironment.

    Example:

    ``` typescript
    // my-custom-environment
    const NodeEnvironment = require('jest-environment-node').default;

    class CustomEnvironment extends NodeEnvironment {
      constructor(config, context) {
        super(config, context);
        console.log(config.globalConfig);
        console.log(config.projectConfig);
        this.testPath = context.testPath;
        this.docblockPragmas = context.docblockPragmas;
      }

      async setup() {
        await super.setup();
        await someSetupTasks(this.testPath);
        this.global.someGlobalObject = createGlobalObject();

        // Will trigger if docblock contains @my-custom-pragma my-pragma-value
        if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {
          // ...
        }
      }

      async teardown() {
        this.global.someGlobalObject = destroyGlobalObject();
        await someTeardownTasks();
        await super.teardown();
      }

      getVmContext() {
        return super.getVmContext();
      }

      async handleTestEvent(event, state) {
        if (event.name === 'test_start') {
          // ...
        }
      }
    }

    module.exports = CustomEnvironment;
    ```

    ``` typescript
    // my-test-suite
    /**
     * @jest-environment ./my-custom-environment
     */
    let someGlobalObject;

    beforeAll(() => {
      someGlobalObject = globalThis.someGlobalObject;
    });
    ```
- name: 'Config: testEnvironmentOptions'
  id: configuration#testenvironmentoptions-object
  summary: Test environment options that will be passed to the testEnvironment
  belongs_to: Configuring Jest
  description: |-
    ### `testEnvironmentOptions` \[Object\]

    Default: `{}`

    Test environment options that will be passed to the `testEnvironment`. The relevant options depend on the environment.

    For example, in `jest-environment-jsdom`, you can override options given to [`jsdom`](https://github.com/jsdom/jsdom) such as `{html: "<html lang="zh-cmn-Hant"></html>", url: 'https://jestjs.io/', userAgent: "Agent/007"}`.

    Both `jest-environment-jsdom` and `jest-environment-node` allow specifying `customExportConditions`, which allow you to control which versions of a library are loaded from `exports` in `package.json`. `jest-environment-jsdom` defaults to `['browser']`. `jest-environment-node` defaults to `['node', 'node-addons']`.

    These options can also be passed in a docblock, similar to `testEnvironment`. Note that it must be parseable by `JSON.parse`. Example:

    ``` typescript
    /**
     * @jest-environment jsdom
     * @jest-environment-options {"url": "https://jestjs.io/"}
     */

    test('use jsdom and set the URL in this test file', () => {
      expect(window.location.href).toBe('https://jestjs.io/');
    });
    ```
- name: 'Config: testFailureExitCode'
  id: configuration#testfailureexitcode-number
  summary: The exit code Jest returns on test failure
  belongs_to: Configuring Jest
  description: |-
    ### `testFailureExitCode` \[number\]

    Default: `1`

    The exit code Jest returns on test failure.

    info

    This does not change the exit code in the case of Jest errors (e.g. invalid configuration).
- name: 'Config: testMatch'
  id: configuration#testmatch-arraystring
  summary: The glob patterns Jest uses to detect test files
  belongs_to: Configuring Jest
  description: |-
    ### `testMatch` \[array\<string\>\]

    (default: `[ "**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)" ]`)

    The glob patterns Jest uses to detect test files. By default it looks for `.js`, `.jsx`, `.ts` and `.tsx` files inside of `__tests__` folders, as well as any files with a suffix of `.test` or `.spec` (e.g. `Component.test.js` or `Component.spec.js`). It will also find files called `test.js` or `spec.js`.

    See the [micromatch](https://github.com/micromatch/micromatch) package for details of the patterns you can specify.

    See also [`testRegex` \[string \| array\<string\>\]](#testregex-string--arraystring), but note that you cannot specify both options.

    tip

    Each glob pattern is applied in the order they are specified in the config. For example `["!**/__fixtures__/**", "**/__tests__/**/*.js"]` will not exclude `__fixtures__` because the negation is overwritten with the second pattern. In order to make the negated glob work in this example it has to come after `**/__tests__/**/*.js`.
- name: 'Config: testPathIgnorePatterns'
  id: configuration#testpathignorepatterns-arraystring
  summary: An array of regexp pattern strings that are matched against all test paths before executing the test
  belongs_to: Configuring Jest
  description: |-
    ### `testPathIgnorePatterns` \[array\<string\>\]

    Default: `["/node_modules/"]`

    An array of regexp pattern strings that are matched against all test paths before executing the test. If the test path matches any of the patterns, it will be skipped.

    These pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `["<rootDir>/build/", "<rootDir>/node_modules/"]`.
- name: 'Config: testRegex'
  id: configuration#testregex-string--arraystring
  summary: The pattern or patterns Jest uses to detect test files
  belongs_to: Configuring Jest
  description: |-
    ### `testRegex` \[string \| array\<string\>\]

    Default: `(/__tests__/.*|(\\.|/)(test|spec))\\.[jt]sx?$`

    The pattern or patterns Jest uses to detect test files. By default it looks for `.js`, `.jsx`, `.ts` and `.tsx` files inside of `__tests__` folders, as well as any files with a suffix of `.test` or `.spec` (e.g. `Component.test.js` or `Component.spec.js`). It will also find files called `test.js` or `spec.js`. See also [`testMatch` \[array\<string\>\]](#testmatch-arraystring), but note that you cannot specify both options.

    The following is a visualization of the default regex:

    ``` typescript
    ├── __tests__
    │   └── component.spec.js # test
    │   └── anything # test
    ├── package.json # not test
    ├── foo.test.js # test
    ├── bar.spec.jsx # test
    └── component.js # not test
    ```

    info

    `testRegex` will try to detect test files using the **absolute file path**, therefore, having a folder with a name that matches it will run all the files as tests.
- name: 'Config: testResultsProcessor'
  id: configuration#testresultsprocessor-string
  summary: This option allows the use of a custom results processor
  belongs_to: Configuring Jest
  description: |-
    ### `testResultsProcessor` \[string\]

    Default: `undefined`

    This option allows the use of a custom results processor. This processor must be a node module that exports a function expecting an object with the following structure as the first argument and return it:

    ``` typescript
    {
      "success": boolean,
      "startTime": epoch,
      "numTotalTestSuites": number,
      "numPassedTestSuites": number,
      "numFailedTestSuites": number,
      "numRuntimeErrorTestSuites": number,
      "numTotalTests": number,
      "numPassedTests": number,
      "numFailedTests": number,
      "numPendingTests": number,
      "numTodoTests": number,
      "openHandles": Array<Error>,
      "testResults": [{
        "numFailingTests": number,
        "numPassingTests": number,
        "numPendingTests": number,
        "testResults": [{
          "title": string (message in it block),
          "status": "failed" | "pending" | "passed",
          "ancestorTitles": [string (message in describe blocks)],
          "failureMessages": [string],
          "numPassingAsserts": number,
          "location": {
            "column": number,
            "line": number
          },
          "duration": number | null
        },
        ...
        ],
        "perfStats": {
          "start": epoch,
          "end": epoch
        },
        "testFilePath": absolute path to test file,
        "coverage": {}
      },
      "testExecError:" (exists if there was a top-level failure) {
        "message": string
        "stack": string
      }
      ...
      ]
    }
    ```

    `testResultsProcessor` and `reporters` are very similar to each other. One difference is that a test result processor only gets called after all tests finished. Whereas a reporter has the ability to receive test results after individual tests and/or test suites are finished.
- name: 'Config: testRunner'
  id: configuration#testrunner-string
  summary: This option allows the use of a custom test runner
  belongs_to: Configuring Jest
  description: |-
    ### `testRunner` \[string\]

    Default: `jest-circus/runner`

    This option allows the use of a custom test runner. The default is `jest-circus`. A custom test runner can be provided by specifying a path to a test runner implementation.

    The test runner module must export a function with the following signature:

    ``` typescript
    function testRunner(
      globalConfig: GlobalConfig,
      config: ProjectConfig,
      environment: Environment,
      runtime: Runtime,
      testPath: string,
    ): Promise<TestResult>;
    ```

    An example of such function can be found in our default [jasmine2 test runner package](https://github.com/facebook/jest/blob/main/packages/jest-jasmine2/src/index.ts).
- name: 'Config: testSequencer'
  id: configuration#testsequencer-string
  summary: This option allows you to use a custom sequencer instead of Jest's default
  belongs_to: Configuring Jest
  description: |-
    ### `testSequencer` \[string\]

    Default: `@jest/test-sequencer`

    This option allows you to use a custom sequencer instead of Jest's default.

    tip

    Both `sort` and `shard` may optionally return a `Promise`.

    For example, you may sort test paths alphabetically:

    ``` typescript
    const Sequencer = require('@jest/test-sequencer').default;

    class CustomSequencer extends Sequencer {
      /**
       * Select tests for shard requested via --shard=shardIndex/shardCount
       * Sharding is applied before sorting
       */
      shard(tests, {shardIndex, shardCount}) {
        const shardSize = Math.ceil(tests.length / shardCount);
        const shardStart = shardSize * (shardIndex - 1);
        const shardEnd = shardSize * shardIndex;

        return [...tests]
          .sort((a, b) => (a.path > b.path ? 1 : -1))
          .slice(shardStart, shardEnd);
      }

      /**
       * Sort test to determine order of execution
       * Sorting is applied after sharding
       */
      sort(tests) {
        // Test structure information
        // https://github.com/facebook/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21
        const copyTests = Array.from(tests);
        return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));
      }
    }

    module.exports = CustomSequencer;
    ```

    custom-sequencer.js

    Add `custom-sequencer` to your Jest configuration:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      testSequencer: 'path/to/custom-sequencer.js',
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      testSequencer: 'path/to/custom-sequencer.js',
    };

    export default config;
    ```
- name: 'Config: testTimeout'
  id: configuration#testtimeout-number
  summary: Default timeout of a test in milliseconds
  belongs_to: Configuring Jest
  description: |-
    ### `testTimeout` \[number\]

    Default: `5000`

    Default timeout of a test in milliseconds.
- name: 'Config: transform'
  id: configuration#transform-objectstring-pathtotransformer--pathtotransformer-object
  summary: A map from regular expressions to paths to transformers
  belongs_to: Configuring Jest
  description: |-
    ### `transform` \[object\<string, pathToTransformer \| \[pathToTransformer, object\]\>\]

    Default: `{"\\.[jt]sx?$": "babel-jest"}`

    A map from regular expressions to paths to transformers. Optionally, a tuple with configuration options can be passed as second argument: `{filePattern: ['path-to-transformer', {options}]}`. For example, here is how you can configure `babel-jest` for non-default behavior: `{'\\.js$': ['babel-jest', {rootMode: 'upward'}]}`.

    Jest runs the code of your project as JavaScript, hence a transformer is needed if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates). By default, Jest will use [`babel-jest`](https://github.com/facebook/jest/tree/main/packages/babel-jest#setup) transformer, which will load your project's Babel configuration and transform any file matching the `/\.[jt]sx?$/` RegExp (in other words, any `.js`, `.jsx`, `.ts` or `.tsx` file). In addition, `babel-jest` will inject the Babel plugin necessary for mock hoisting talked about in [ES Module mocking](manual-mocks#using-with-es-module-imports).

    See the [Code Transformation](code-transformation) section for more details and instructions on building your own transformer.

    tip

    Keep in mind that a transformer only runs once per file unless the file has changed.

    Remember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      transform: {
        '\\.[jt]sx?$': 'babel-jest',
        '\\.css$': 'some-css-transformer',
      },
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      transform: {
        '\\.[jt]sx?$': 'babel-jest',
        '\\.css$': 'some-css-transformer',
      },
    };

    export default config;
    ```
- name: 'Config: transformIgnorePatterns'
  id: configuration#transformignorepatterns-arraystring
  summary: An array of regexp pattern strings that are matched against all source file paths before transformation
  belongs_to: Configuring Jest
  description: |-
    ### `transformIgnorePatterns` \[array\<string\>\]

    Default: `["/node_modules/", "\\.pnp\\.[^\\\/]+$"]`

    An array of regexp pattern strings that are matched against all source file paths before transformation. If the file path matches **any** of the patterns, it will not be transformed.

    Providing regexp patterns that overlap with each other may result in files not being transformed that you expected to be transformed. For example:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],
    };

    export default config;
    ```

    The first pattern will match (and therefore not transform) files inside `/node_modules` except for those in `/node_modules/foo/` and `/node_modules/bar/`. The second pattern will match (and therefore not transform) files inside any path with `/bar/` in it. With the two together, files in `/node_modules/bar/` will not be transformed because it does match the second pattern, even though it was excluded by the first.

    Sometimes it happens (especially in React Native or TypeScript projects) that 3rd party modules are published as untranspiled code. Since all files inside `node_modules` are not transformed by default, Jest will not understand the code in these modules, resulting in syntax errors. To overcome this, you may use `transformIgnorePatterns` to allow transpiling such modules. You'll find a good example of this use case in [React Native Guide](tutorial-react-native#transformignorepatterns-customization).

    These pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      transformIgnorePatterns: [
        '<rootDir>/bower_components/',
        '<rootDir>/node_modules/',
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      transformIgnorePatterns: [
        '<rootDir>/bower_components/',
        '<rootDir>/node_modules/',
      ],
    };

    export default config;
    ```

    tip

    If you use `pnpm` and need to convert some packages under `node_modules`, you need to note that the packages in this folder (e.g. `node_modules/package-a/`) have been symlinked to the path under `.pnpm` (e.g. `node_modules/.pnpm/package-a@x.x.x/node_modules/pakcage-a/`), so using `<rootdir>/node_modules/(?!(package-a|package-b)/)` directly will not be recognized, while is to use:

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      transformIgnorePatterns: [
        '<rootdir>/node_modules/.pnpm/(?!(package-a|package-b)@)',
      ],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      transformIgnorePatterns: [
        '<rootdir>/node_modules/.pnpm/(?!(package-a|package-b)@)',
      ],
    };

    export default config;
    ```

    It should be noted that the folder name of pnpm under `.pnpm` is the package name plus `@` and version number, so writing `/` will not be recognized, but using `@` can.
- name: 'Config: unmockedModulePathPatterns'
  id: configuration#unmockedmodulepathpatterns-arraystring
  summary: An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them
  belongs_to: Configuring Jest
  description: |-
    ### `unmockedModulePathPatterns` \[array\<string\>\]

    Default: `[]`

    An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them. If a module's path matches any of the patterns in this list, it will not be automatically mocked by the module loader.

    This is useful for some commonly used 'utility' modules that are almost always used as implementation details almost all the time (like underscore/lo-dash, etc). It's generally a best practice to keep this list as small as possible and always use explicit `jest.mock()`/`jest.unmock()` calls in individual tests. Explicit per-test setup is far easier for other readers of the test to reason about the environment the test will run in.

    It is possible to override this setting in individual tests by explicitly calling `jest.mock()` at the top of the test file.
- name: 'Config: verbose'
  id: configuration#verbose-boolean
  summary: Indicates whether each individual test should be reported during the run
  belongs_to: Configuring Jest
  description: |-
    ### `verbose` \[boolean\]

    Default: `false`

    Indicates whether each individual test should be reported during the run. All errors will also still be shown on the bottom after execution. Note that if there is only one test file being run it will default to `true`.
- name: 'Config: watchman'
  id: configuration#watchman-boolean
  summary: Whether to use watchman for file crawling
  belongs_to: Configuring Jest
  description: |-
    ### `watchman` \[boolean\]

    Default: `true`

    Whether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling.
- name: 'Config: watchPathIgnorePatterns'
  id: configuration#watchpathignorepatterns-arraystring
  summary: An array of RegExp patterns that are matched against all source file paths before re-running tests in watch mode
  belongs_to: Configuring Jest
  description: |-
    ### `watchPathIgnorePatterns` \[array\<string\>\]

    Default: `[]`

    An array of RegExp patterns that are matched against all source file paths before re-running tests in watch mode. If the file path matches any of the patterns, when it is updated, it will not trigger a re-run of tests.

    These patterns match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `["<rootDir>/node_modules/"]`.

    Even if nothing is specified here, the watcher will ignore changes to the version control folders (.git, .hg). Other hidden files and directories, i.e. those that begin with a dot (`.`), are watched by default. Remember to escape the dot when you add them to `watchPathIgnorePatterns` as it is a special RegExp character.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      watchPathIgnorePatterns: ['<rootDir>/\\.tmp/', '<rootDir>/bar/'],
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      watchPathIgnorePatterns: ['<rootDir>/\\.tmp/', '<rootDir>/bar/'],
    };

    export default config;
    ```
- name: 'Config: watchPlugins'
  id: configuration#watchplugins-arraystring--string-object
  summary: This option allows you to use custom watch plugins
  belongs_to: Configuring Jest
  description: |-
    ### `watchPlugins` \[array\<string \| \[string, Object\]\>\]

    Default: `[]`

    This option allows you to use custom watch plugins. Read more about watch plugins [here](watch-plugins).

    Examples of watch plugins include:

    - [`jest-watch-master`](https://github.com/rickhanlonii/jest-watch-master)
    - [`jest-watch-select-projects`](https://github.com/rogeliog/jest-watch-select-projects)
    - [`jest-watch-suspend`](https://github.com/unional/jest-watch-suspend)
    - [`jest-watch-typeahead`](https://github.com/jest-community/jest-watch-typeahead)
    - [`jest-watch-yarn-workspaces`](https://github.com/cameronhunter/jest-watch-directories/tree/master/packages/jest-watch-yarn-workspaces)

    info

    The values in the `watchPlugins` property value can omit the `jest-watch-` prefix of the package name.
- name: 'Config: workerIdleMemoryLimit'
  id: configuration#workeridlememorylimit-numberstring
  summary: After the worker has executed a test the memory usage of it is checked
  belongs_to: Configuring Jest
  description: |-
    ### `workerIdleMemoryLimit` \[number\|string\]

    Default: `undefined`

    Specifies the memory limit for workers before they are recycled and is primarily a work-around for [this issue](https://github.com/facebook/jest/issues/11956);

    After the worker has executed a test the memory usage of it is checked. If it exceeds the value specified the worker is killed and restarted. The limit can be specified in a number of different ways and whatever the result is `Math.floor` is used to turn it into an integer value:

    - `<= 1` - The value is assumed to be a percentage of system memory. So 0.5 sets the memory limit of the worker to half of the total system memory
    - `\> 1` - Assumed to be a fixed byte value. Because of the previous rule if you wanted a value of 1 byte (I don't know why) you could use `1.1`.
    - With units
      - `50%` - As above, a percentage of total system memory
      - `100KB`, `65MB`, etc - With units to denote a fixed memory limit.
        - `K` / `KB` - Kilobytes (x1000)
        - `KiB` - Kibibytes (x1024)
        - `M` / `MB` - Megabytes
        - `MiB` - Mebibytes
        - `G` / `GB` - Gigabytes
        - `GiB` - Gibibytes

    **NOTE:**[% based memory does not work on Linux CircleCI workers](https://github.com/facebook/jest/issues/11956#issuecomment-1212925677) due to incorrect system memory being reported.

    - JavaScript
    - TypeScript

    ``` typescript
    /** @type {import('jest').Config} */
    const config = {
      workerIdleMemoryLimit: 0.2,
    };

    module.exports = config;
    ```

    ``` typescript
    import type {Config} from 'jest';

    const config: Config = {
      workerIdleMemoryLimit: 0.2,
    };

    export default config;
    ```
- name: Configuring Jest
  id: configuration
  summary: The Jest philosophy is to work great by default, but sometimes you just need more configuration power
  description: "# Configuring Jest\n\nThe Jest philosophy is to work great by default, but sometimes you just need more configuration power.\n\nIt is recommended to define the configuration in a dedicated JavaScript, TypeScript or JSON file. The file will be discovered automatically, if it is named `jest.config.js|ts|mjs|cjs|json`. You can use [`--config`](cli#--configpath) flag to pass an explicit path to the file.\n\nnote\n\nKeep in mind that the resulting configuration object must always be JSON-serializable.\n\nThe configuration file should simply export an object:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  verbose: true,\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  verbose: true,\n};\n\nexport default config;\n```\n\nOr a function returning an object:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @returns {Promise<import('jest').Config>} */\nmodule.exports = async () => {\n  return {\n    verbose: true,\n  };\n};\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nexport default async (): Promise<Config> => {\n  return {\n    verbose: true,\n  };\n};\n```\n\ntip\n\nTo read TypeScript configuration files Jest requires [`ts-node`](https://npmjs.com/package/ts-node). Make sure it is installed in your project.\n\nThe configuration also can be stored in a JSON file as a plain object:\n\n``` typescript\n{\n  \"bail\": 1,\n  \"verbose\": true\n}\n```\n\njest.config.json\n\nAlternatively Jest's configuration can be defined through the `\"jest\"` key in the `package.json` of your project:\n\n``` typescript\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"verbose\": true\n  }\n}\n```\n\npackage.json\n\n## Options\n\ninfo\n\nYou can retrieve Jest's defaults from `jest-config` to extend them if needed:\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst {defaults} = require('jest-config');\n\n/** @type {import('jest').Config} */\nconst config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts', 'cts'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\nimport {defaults} from 'jest-config';\n\nconst config: Config = {\n  moduleFileExtensions: [...defaults.moduleFileExtensions, 'mts'],\n};\n\nexport default config;\n```\n\n- [`automock` \\[boolean\\]](#automock-boolean)\n- [`bail` \\[number \\| boolean\\]](#bail-number--boolean)\n- [`cacheDirectory` \\[string\\]](#cachedirectory-string)\n- [`clearMocks` \\[boolean\\]](#clearmocks-boolean)\n- [`collectCoverage` \\[boolean\\]](#collectcoverage-boolean)\n- [`collectCoverageFrom` \\[array\\]](#collectcoveragefrom-array)\n- [`coverageDirectory` \\[string\\]](#coveragedirectory-string)\n- [`coveragePathIgnorePatterns` \\[array\\<string\\>\\]](#coveragepathignorepatterns-arraystring)\n- [`coverageProvider` \\[string\\]](#coverageprovider-string)\n- [`coverageReporters` \\[array\\<string \\| \\[string, options\\]\\>\\]](#coveragereporters-arraystring--string-options)\n- [`coverageThreshold` \\[object\\]](#coveragethreshold-object)\n- [`dependencyExtractor` \\[string\\]](#dependencyextractor-string)\n- [`displayName` \\[string, object\\]](#displayname-string-object)\n- [`errorOnDeprecated` \\[boolean\\]](#errorondeprecated-boolean)\n- [`extensionsToTreatAsEsm` \\[array\\<string\\>\\]](#extensionstotreatasesm-arraystring)\n- [`fakeTimers` \\[object\\]](#faketimers-object)\n- [`forceCoverageMatch` \\[array\\<string\\>\\]](#forcecoveragematch-arraystring)\n- [`globals` \\[object\\]](#globals-object)\n- [`globalSetup` \\[string\\]](#globalsetup-string)\n- [`globalTeardown` \\[string\\]](#globalteardown-string)\n- [`haste` \\[object\\]](#haste-object)\n- [`injectGlobals` \\[boolean\\]](#injectglobals-boolean)\n- [`maxConcurrency` \\[number\\]](#maxconcurrency-number)\n- [`maxWorkers` \\[number \\| string\\]](#maxworkers-number--string)\n- [`moduleDirectories` \\[array\\<string\\>\\]](#moduledirectories-arraystring)\n- [`moduleFileExtensions` \\[array\\<string\\>\\]](#modulefileextensions-arraystring)\n- [`moduleNameMapper` \\[object\\<string, string \\| array\\<string\\>\\>\\]](#modulenamemapper-objectstring-string--arraystring)\n- [`modulePathIgnorePatterns` \\[array\\<string\\>\\]](#modulepathignorepatterns-arraystring)\n- [`modulePaths` \\[array\\<string\\>\\]](#modulepaths-arraystring)\n- [`notify` \\[boolean\\]](#notify-boolean)\n- [`notifyMode` \\[string\\]](#notifymode-string)\n- [`preset` \\[string\\]](#preset-string)\n- [`prettierPath` \\[string\\]](#prettierpath-string)\n- [`projects` \\[array\\<string \\| ProjectConfig\\>\\]](#projects-arraystring--projectconfig)\n- [`reporters` \\[array\\<moduleName \\| \\[moduleName, options\\]\\>\\]](#reporters-arraymodulename--modulename-options)\n- [`resetMocks` \\[boolean\\]](#resetmocks-boolean)\n- [`resetModules` \\[boolean\\]](#resetmodules-boolean)\n- [`resolver` \\[string\\]](#resolver-string)\n- [`restoreMocks` \\[boolean\\]](#restoremocks-boolean)\n- [`rootDir` \\[string\\]](#rootdir-string)\n- [`roots` \\[array\\<string\\>\\]](#roots-arraystring)\n- [`runner` \\[string\\]](#runner-string)\n- [`sandboxInjectedGlobals` \\[array\\<string\\>\\]](#sandboxinjectedglobals-arraystring)\n- [`setupFiles` \\[array\\]](#setupfiles-array)\n- [`setupFilesAfterEnv` \\[array\\]](#setupfilesafterenv-array)\n- [`slowTestThreshold` \\[number\\]](#slowtestthreshold-number)\n- [`snapshotFormat` \\[object\\]](#snapshotformat-object)\n- [`snapshotResolver` \\[string\\]](#snapshotresolver-string)\n- [`snapshotSerializers` \\[array\\<string\\>\\]](#snapshotserializers-arraystring)\n- [`testEnvironment` \\[string\\]](#testenvironment-string)\n- [`testEnvironmentOptions` \\[Object\\]](#testenvironmentoptions-object)\n- [`testFailureExitCode` \\[number\\]](#testfailureexitcode-number)\n- [`testMatch` \\[array\\<string\\>\\]](#testmatch-arraystring)\n- [`testPathIgnorePatterns` \\[array\\<string\\>\\]](#testpathignorepatterns-arraystring)\n- [`testRegex` \\[string \\| array\\<string\\>\\]](#testregex-string--arraystring)\n- [`testResultsProcessor` \\[string\\]](#testresultsprocessor-string)\n- [`testRunner` \\[string\\]](#testrunner-string)\n- [`testSequencer` \\[string\\]](#testsequencer-string)\n- [`testTimeout` \\[number\\]](#testtimeout-number)\n- [`transform` \\[object\\<string, pathToTransformer \\| \\[pathToTransformer, object\\]\\>\\]](#transform-objectstring-pathtotransformer--pathtotransformer-object)\n- [`transformIgnorePatterns` \\[array\\<string\\>\\]](#transformignorepatterns-arraystring)\n- [`unmockedModulePathPatterns` \\[array\\<string\\>\\]](#unmockedmodulepathpatterns-arraystring)\n- [`verbose` \\[boolean\\]](#verbose-boolean)\n- [`watchPathIgnorePatterns` \\[array\\<string\\>\\]](#watchpathignorepatterns-arraystring)\n- [`watchPlugins` \\[array\\<string \\| \\[string, Object\\]\\>\\]](#watchplugins-arraystring--string-object)\n- [`watchman` \\[boolean\\]](#watchman-boolean)\n- [`workerIdleMemoryLimit` \\[number\\|string\\]](#workeridlememorylimit-numberstring)\n- [`//` \\[string\\]](#-string)\n\n## Reference\n\n### `automock` \\[boolean\\]\n\nDefault: `false`\n\nThis option tells Jest that all imported modules in your tests should be mocked automatically. All modules used in your tests will have a replacement implementation, keeping the API surface.\n\nExample:\n\n``` typescript\nexport default {\n  authorize: () => 'token',\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\nutils.js\n\n``` typescript\nimport utils from '../utils';\n\ntest('if utils mocked automatically', () => {\n  // Public methods of `utils` are now mock functions\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized.mock).toBeTruthy();\n\n  // You can provide them with your own implementation\n  // or pass the expected return value\n  utils.authorize.mockReturnValue('mocked_token');\n  utils.isAuthorized.mockReturnValue(true);\n\n  expect(utils.authorize()).toBe('mocked_token');\n  expect(utils.isAuthorized('not_wizard')).toBeTruthy();\n});\n```\n\n\\_\\_tests\\_\\_/automock.test.js\n\nnote\n\nNode modules are automatically mocked when you have a manual mock in place (e.g.: `__mocks__/lodash.js`). More info [here](manual-mocks#mocking-node-modules).\n\nNode.js core modules, like `fs`, are not mocked by default. They can be mocked explicitly, like `jest.mock('fs')`.\n\n### `bail` \\[number \\| boolean\\]\n\nDefault: `0`\n\nBy default, Jest runs all tests and produces all errors into the console upon completion. The bail config option can be used here to have Jest stop running tests after `n` failures. Setting bail to `true` is the same as setting bail to `1`.\n\n### `cacheDirectory` \\[string\\]\n\nDefault: `\"/tmp/<path>\"`\n\nThe directory where Jest should store its cached dependency information.\n\nJest attempts to scan your dependency tree once (up-front) and cache it in order to ease some of the filesystem churn that needs to happen while running tests. This config option lets you customize where Jest stores that cache data on disk.\n\n### `clearMocks` \\[boolean\\]\n\nDefault: `false`\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `collectCoverage` \\[boolean\\]\n\nDefault: `false`\n\nIndicates whether the coverage information should be collected while executing the test. Because this retrofits all executed files with coverage collection statements, it may significantly slow down your tests.\n\nJest ships with two coverage providers: `babel` (default) and `v8`. See the [`coverageProvider`](#coverageprovider-string) option for more details.\n\ninfo\n\nThe `babel` and `v8` coverage providers use `/* istanbul ignore next */` and `/* c8 ignore next */` comments to exclude lines from coverage reports, respectively. For more information, you can view the [`istanbuljs` documentation](https://github.com/istanbuljs/nyc#parsing-hints-ignoring-lines) and the [`c8` documentation](https://github.com/bcoe/c8#ignoring-uncovered-lines-functions-and-blocks).\n\n### `collectCoverageFrom` \\[array\\]\n\nDefault: `undefined`\n\nAn array of [glob patterns](https://github.com/micromatch/micromatch) indicating a set of files for which coverage information should be collected. If a file matches the specified glob pattern, coverage information will be collected for it even if no tests exist for this file and it's never required in the test suite.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/vendor/**',\n  ],\n};\n\nexport default config;\n```\n\nThis will collect coverage information for all the files inside the project's `rootDir`, except the ones that match `**/node_modules/**` or `**/vendor/**`.\n\ntip\n\nEach glob pattern is applied in the order they are specified in the config. For example `[\"!**/__tests__/**\", \"**/*.js\"]` will not exclude `__tests__` because the negation is overwritten with the second pattern. In order to make the negated glob work in this example it has to come after `**/*.js`.\n\nnote\n\nThis option requires `collectCoverage` to be set to `true` or Jest to be invoked with `--coverage`.\n\nHelp:\n\nIf you are seeing coverage output such as...\n\n``` typescript\n=============================== Coverage summary ===============================\nStatements   : Unknown% ( 0/0 )\nBranches     : Unknown% ( 0/0 )\nFunctions    : Unknown% ( 0/0 )\nLines        : Unknown% ( 0/0 )\n================================================================================\nJest: Coverage data for global was not found.\n```\n\nMost likely your glob patterns are not matching any files. Refer to the [micromatch](https://github.com/micromatch/micromatch) documentation to ensure your globs are compatible.\n\n### `coverageDirectory` \\[string\\]\n\nDefault: `undefined`\n\nThe directory where Jest should output its coverage files.\n\n### `coveragePathIgnorePatterns` \\[array\\<string\\>\\]\n\nDefault: `[\"/node_modules/\"]`\n\nAn array of regexp pattern strings that are matched against all file paths before executing the test. If the file path matches any of the patterns, coverage information will be skipped.\n\nThese pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `[\"<rootDir>/build/\", \"<rootDir>/node_modules/\"]`.\n\n### `coverageProvider` \\[string\\]\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\nNote that using `v8` is considered experimental. This uses V8's builtin code coverage rather than one based on Babel. It is not as well tested, and it has also improved in the last few releases of Node. Using the latest versions of node (v14 at the time of this writing) will yield better results.\n\n### `coverageReporters` \\[array\\<string \\| \\[string, options\\]\\>\\]\n\nDefault: `[\"clover\", \"json\", \"lcov\", \"text\"]`\n\nA list of reporter names that Jest uses when writing coverage reports. Any [istanbul reporter](https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib) can be used.\n\ntip\n\nSetting this option overwrites the default values. Add `\"text\"` or `\"text-summary\"` to see a coverage summary in the console output.\n\nAdditional options can be passed using the tuple form. For example, you may hide coverage report lines for all fully-covered files:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageReporters: ['clover', 'json', 'lcov', ['text', {skipFull: true}]],\n};\n\nexport default config;\n```\n\nFor more information about the options object shape refer to `CoverageReporterWithOptions` type in the [type definitions](https://github.com/facebook/jest/tree/main/packages/jest-types/src/Config.ts).\n\n### `coverageThreshold` \\[object\\]\n\nDefault: `undefined`\n\nThis will be used to configure minimum threshold enforcement for coverage results. Thresholds can be specified as `global`, as a [glob](https://github.com/isaacs/node-glob#glob-primer), and as a directory or file path. If thresholds aren't met, jest will fail. Thresholds specified as a positive number are taken to be the minimum percentage required. Thresholds specified as a negative number represent the maximum number of uncovered entities allowed.\n\nFor example, with the following configuration jest will fail if there is less than 80% branch, line, and function coverage, or if there are more than 10 uncovered statements:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: -10,\n    },\n  },\n};\n\nexport default config;\n```\n\nIf globs or paths are specified alongside `global`, coverage data for matching paths will be subtracted from overall coverage and thresholds will be applied independently. Thresholds for globs are applied to all files matching the glob. If the file specified by path is not found, an error is returned.\n\nFor example, with the following configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  coverageThreshold: {\n    global: {\n      branches: 50,\n      functions: 50,\n      lines: 50,\n      statements: 50,\n    },\n    './src/components/': {\n      branches: 40,\n      statements: 40,\n    },\n    './src/reducers/**/*.js': {\n      statements: 90,\n    },\n    './src/api/very-important-module.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n};\n\nexport default config;\n```\n\nJest will fail if:\n\n- The `./src/components` directory has less than 40% branch or statement coverage.\n- One of the files matching the `./src/reducers/**/*.js` glob has less than 90% statement coverage.\n- The `./src/api/very-important-module.js` file has less than 100% coverage.\n- Every remaining file combined has less than 50% coverage (`global`).\n\n### `dependencyExtractor` \\[string\\]\n\nDefault: `undefined`\n\nThis option allows the use of a custom dependency extractor. It must be a node module that exports an object with an `extract` function. E.g.:\n\n``` typescript\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nmodule.exports = {\n  extract(code, filePath, defaultExtract) {\n    const deps = defaultExtract(code, filePath);\n    // Scan the file and add dependencies in `deps` (which is a `Set`)\n    return deps;\n  },\n  getCacheKey() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(__filename))\n      .digest('hex');\n  },\n};\n```\n\nThe `extract` function should return an iterable (`Array`, `Set`, etc.) with the dependencies found in the code.\n\nThat module can also contain a `getCacheKey` function to generate a cache key to determine if the logic has changed and any cached artifacts relying on it should be discarded.\n\n### `displayName` \\[string, object\\]\n\ndefault: `undefined`\n\nAllows for a label to be printed alongside a test while it is running. This becomes more useful in multi-project repositories where there can be many jest configuration files. This visually tells which project a test belongs to.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: 'CLIENT',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: 'CLIENT',\n};\n\nexport default config;\n```\n\nAlternatively, an object with the properties `name` and `color` can be passed. This allows for a custom configuration of the background color of the displayName. `displayName` defaults to white when its value is a string. Jest uses [`chalk`](https://github.com/chalk/chalk) to provide the color. As such, all of the valid options for colors supported by `chalk` are also supported by Jest.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  displayName: {\n    name: 'CLIENT',\n    color: 'blue',\n  },\n};\n\nexport default config;\n```\n\n### `errorOnDeprecated` \\[boolean\\]\n\nDefault: `false`\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `extensionsToTreatAsEsm` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nJest will run `.mjs` and `.js` files with nearest `package.json`'s `type` field set to `module` as ECMAScript Modules. If you have any other files that should run with native ESM, you need to specify their file extension here.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  extensionsToTreatAsEsm: ['.ts'],\n};\n\nexport default config;\n```\n\ncaution\n\nJest's ESM support is still experimental, see [its docs for more details](ecmascript-modules).\n\n### `fakeTimers` \\[object\\]\n\nDefault: `{}`\n\nThe fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test. For additional details see [Fake Timers guide](timer-mocks) and [API documentation](jest-object#fake-timers).\n\nThis option provides the default configuration of fake timers for all tests. Calling `jest.useFakeTimers()` in a test file will use these options or will override them if a configuration object is passed. For example, you can tell Jest to keep the original implementation of `process.nextTick()` and adjust the limit of recursive timers that will be run:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    doNotFake: ['nextTick'],\n    timerLimit: 1000,\n  },\n};\n\nexport default config;\n```\n\n``` typescript\n// install fake timers for this file using the options from Jest configuration\njest.useFakeTimers();\n\ntest('increase the limit of recursive timers for this and following tests', () => {\n  jest.useFakeTimers({timerLimit: 5000});\n  // ...\n});\n```\n\nfakeTime.test.js\n\ntip\n\nInstead of including `jest.useFakeTimers()` in each test file, you can enable fake timers globally for all tests in your Jest configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n  },\n};\n\nexport default config;\n```\n\nConfiguration options:\n\n``` typescript\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype ModernFakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n  enableGlobally?: boolean;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers. The default is `Date.now()`. */\n  now?: number;\n  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n  timerLimit?: number;\n};\n```\n\nLegacy Fake Timers\n\nFor some reason you might have to use legacy implementation of fake timers. Here is how to enable it globally (additional options are not supported):\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  fakeTimers: {\n    enableGlobally: true,\n    legacyFakeTimers: true,\n  },\n};\n\nexport default config;\n```\n\n### `forceCoverageMatch` \\[array\\<string\\>\\]\n\nDefault: `['']`\n\nTest files are normally ignored from collecting code coverage. With this option, you can overwrite this behavior and include otherwise ignored files in code coverage.\n\nFor example, if you have tests in source files named with `.t.js` extension as following:\n\n``` typescript\nexport function sum(a, b) {\n  return a + b;\n}\n\nif (process.env.NODE_ENV === 'test') {\n  test('sum', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n\nsum.t.js\n\nYou can collect coverage from those files with setting `forceCoverageMatch`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  forceCoverageMatch: ['**/*.t.js'],\n};\n\nexport default config;\n```\n\n### `globals` \\[object\\]\n\nDefault: `{}`\n\nA set of global variables that need to be available in all test environments.\n\nFor example, the following would create a global `__DEV__` variable set to `true` in all test environments:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  globals: {\n    __DEV__: true,\n  },\n};\n\nexport default config;\n```\n\nNote that, if you specify a global reference value (like an object or array) here, and some code mutates that value in the midst of running a test, that mutation will *not* be persisted across test runs for other test files. In addition, the `globals` object must be json-serializable, so it can't be used to specify global functions. For that, you should use `setupFiles`.\n\n### `globalSetup` \\[string\\]\n\nDefault: `undefined`\n\nThis option allows the use of a custom global setup module, which must export a function (it can be sync or async). The function will be triggered once before all test suites and it will receive two arguments: Jest's [`globalConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L282) and [`projectConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L347).\n\ninfo\n\nA global setup module configured in a project (using multi-project runner) will be triggered only when you run at least one test from this project.\n\nAny global variables that are defined through `globalSetup` can only be read in `globalTeardown`. You cannot retrieve globals defined here in your test suites.\n\nWhile code transformation is applied to the linked setup-file, Jest will **not** transform any code in `node_modules`. This is due to the need to load the actual transformers (e.g. `babel` or `typescript`) to perform transformation.\n\n``` typescript\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  // Set reference to mongod in order to close the server during teardown.\n  globalThis.__MONGOD__ = mongod;\n};\n```\n\nsetup.js\n\n``` typescript\nmodule.exports = async function (globalConfig, projectConfig) {\n  console.log(globalConfig.testPathPattern);\n  console.log(projectConfig.cache);\n\n  await globalThis.__MONGOD__.stop();\n};\n```\n\nteardown.js\n\n### `globalTeardown` \\[string\\]\n\nDefault: `undefined`\n\nThis option allows the use of a custom global teardown module which must export a function (it can be sync or async). The function will be triggered once after all test suites and it will receive two arguments: Jest's [`globalConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L282) and [`projectConfig`](https://github.com/facebook/jest/blob/main/packages/jest-types/src/Config.ts#L347).\n\ninfo\n\nA global teardown module configured in a project (using multi-project runner) will be triggered only when you run at least one test from this project.\n\nThe same caveat concerning transformation of `node_modules` as for `globalSetup` applies to `globalTeardown`.\n\n### `haste` \\[object\\]\n\nDefault: `undefined`\n\nThis will be used to configure the behavior of `jest-haste-map`, Jest's internal file crawler/cache system. The following options are supported:\n\n``` typescript\ntype HasteConfig = {\n  /** Whether to hash files using SHA-1. */\n  computeSha1?: boolean;\n  /** The platform to use as the default, e.g. 'ios'. */\n  defaultPlatform?: string | null;\n  /** Force use of Node's `fs` APIs rather than shelling out to `find` */\n  forceNodeFilesystemAPI?: boolean;\n  /**\n   * Whether to follow symlinks when crawling for files.\n   *   This options cannot be used in projects which use watchman.\n   *   Projects with `watchman` set to true will error if this option is set to true.\n   */\n  enableSymlinks?: boolean;\n  /** Path to a custom implementation of Haste. */\n  hasteImplModulePath?: string;\n  /** All platforms to target, e.g ['ios', 'android']. */\n  platforms?: Array<string>;\n  /** Whether to throw on error on module collision. */\n  throwOnModuleCollision?: boolean;\n  /** Custom HasteMap module */\n  hasteMapModulePath?: string;\n  /** Whether to retain all files, allowing e.g. search for tests in `node_modules`. */\n  retainAllFiles?: boolean;\n};\n```\n\n### `injectGlobals` \\[boolean\\]\n\nDefault: `true`\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `maxConcurrency` \\[number\\]\n\nDefault: `5`\n\nA number limiting the number of tests that are allowed to run at the same time when using `test.concurrent`. Any test above this limit will be queued and executed once a slot is released.\n\n### `maxWorkers` \\[number \\| string\\]\n\nSpecifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  maxWorkers: '50%',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  maxWorkers: '50%',\n};\n\nexport default config;\n```\n\n### `moduleDirectories` \\[array\\<string\\>\\]\n\nDefault: `[\"node_modules\"]`\n\nAn array of directory names to be searched recursively up from the requiring module's location. Setting this option will *override* the default, if you wish to still search `node_modules` for packages include it along with any other options:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleDirectories: ['node_modules', 'bower_components'],\n};\n\nexport default config;\n```\n\n### `moduleFileExtensions` \\[array\\<string\\>\\]\n\nDefault: `[\"js\", \"mjs\", \"cjs\", \"jsx\", \"ts\", \"tsx\", \"json\", \"node\"]`\n\nAn array of file extensions your modules use. If you require modules without specifying a file extension, these are the extensions Jest will look for, in left-to-right order.\n\nWe recommend placing the extensions most commonly used in your project on the left, so if you are using TypeScript, you may want to consider moving \"ts\" and/or \"tsx\" to the beginning of the array.\n\n### `moduleNameMapper` \\[object\\<string, string \\| array\\<string\\>\\>\\]\n\nDefault: `null`\n\nA map from regular expressions to module names or to arrays of module names that allow to stub out resources, like images or styles with a single module.\n\nModules that are mapped to an alias are unmocked by default, regardless of whether automocking is enabled or not.\n\nUse `<rootDir>` string token to refer to [`rootDir`](#rootdir-string) value if you want to use file paths.\n\nAdditionally, you can substitute captured regex groups using numbered backreferences.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  moduleNameMapper: {\n    '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n    '^[./a-zA-Z0-9$_-]+\\\\.png$': '<rootDir>/RelativeImageStub.js',\n    'module_name_(.*)': '<rootDir>/substituted_module_$1.js',\n    'assets/(.*)': [\n      '<rootDir>/images/$1',\n      '<rootDir>/photos/$1',\n      '<rootDir>/recipes/$1',\n    ],\n  },\n};\n\nexport default config;\n```\n\nThe order in which the mappings are defined matters. Patterns are checked one by one until one fits. The most specific rule should be listed first. This is true for arrays of module names as well.\n\ninfo\n\nIf you provide module names without boundaries `^$` it may cause hard to spot errors. E.g. `relay` will replace all modules which contain `relay` as a substring in its name: `relay`, `react-relay` and `graphql-relay` will all be pointed to your stub.\n\n### `modulePathIgnorePatterns` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nAn array of regexp pattern strings that are matched against all module paths before those paths are to be considered 'visible' to the module loader. If a given module's path matches any of the patterns, it will not be `require()`-able in the test environment.\n\nThese pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n};\n\nexport default config;\n```\n\n### `modulePaths` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nAn alternative API to setting the `NODE_PATH` env variable, `modulePaths` is an array of absolute paths to additional locations to search when resolving modules. Use the `<rootDir>` string token to include the path to your project's root directory.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  modulePaths: ['<rootDir>/app/'],\n};\n\nexport default config;\n```\n\n### `notify` \\[boolean\\]\n\nDefault: `false`\n\nActivates native OS notifications for test results. To display the notifications Jest needs [`node-notifier`](https://github.com/mikaelbr/node-notifier) package, which must be installed additionally:\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev node-notifier\n```\n\n``` typescript\nyarn add --dev node-notifier\n```\n\ntip\n\nOn macOS, remember to allow notifications from `terminal-notifier` under System Preferences \\> Notifications & Focus.\n\nOn Windows, `node-notifier` creates a new start menu entry on the first use and not display the notification. Notifications will be properly displayed on subsequent runs.\n\n### `notifyMode` \\[string\\]\n\nDefault: `failure-change`\n\nSpecifies notification mode. Requires `notify: true`.\n\n#### Modes\n\n- `always`: always send a notification.\n- `failure`: send a notification when tests fail.\n- `success`: send a notification when tests pass.\n- `change`: send a notification when the status changed.\n- `success-change`: send a notification when tests pass or once when it fails.\n- `failure-change`: send a notification when tests fail or once when it passes.\n\n### `preset` \\[string\\]\n\nDefault: `undefined`\n\nA preset that is used as a base for Jest's configuration. A preset should point to an npm module that has a `jest-preset.json`, `jest-preset.js`, `jest-preset.cjs` or `jest-preset.mjs` file at the root.\n\nFor example, this preset `foo-bar/jest-preset.js` will be configured as follows:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  preset: 'foo-bar',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: 'foo-bar',\n};\n\nexport default config;\n```\n\nPresets may also be relative to filesystem paths:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  preset: './node_modules/foo-bar/jest-preset.js',\n};\n\nexport default config;\n```\n\ninfo\n\nNote that if you also have specified [`rootDir`](#rootdir-string) that the resolution of this file will be relative to that root directory.\n\n### `prettierPath` \\[string\\]\n\nDefault: `'prettier'`\n\nSets the path to the [`prettier`](https://prettier.io/) node module used to update inline snapshots.\n\n### `projects` \\[array\\<string \\| ProjectConfig\\>\\]\n\nDefault: `undefined`\n\nWhen the `projects` configuration is provided with an array of paths or glob patterns, Jest will run tests in all of the specified projects at the same time. This is great for monorepos or when working on multiple projects at the same time.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: ['<rootDir>', '<rootDir>/examples/*'],\n};\n\nexport default config;\n```\n\nThis example configuration will run Jest in the root directory as well as in every folder in the examples directory. You can have an unlimited amount of projects running in the same Jest instance.\n\nThe projects feature can also be used to run multiple configurations or multiple [runners](#runner-string). For this purpose, you can pass an array of configuration objects. For example, to run both tests and ESLint (via [jest-runner-eslint](https://github.com/jest-community/jest-runner-eslint)) in the same invocation of Jest:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  projects: [\n    {\n      displayName: 'test',\n    },\n    {\n      displayName: 'lint',\n      runner: 'jest-runner-eslint',\n      testMatch: ['<rootDir>/**/*.js'],\n    },\n  ],\n};\n\nexport default config;\n```\n\ntip\n\nWhen using multi-project runner, it's recommended to add a `displayName` for each project. This will show the `displayName` of a project next to its tests.\n\n### `reporters` \\[array\\<moduleName \\| \\[moduleName, options\\]\\>\\]\n\nDefault: `undefined`\n\nUse this configuration option to add reporters to Jest. It must be a list of reporter names, additional options can be passed to a reporter using the tuple form:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['<rootDir>/custom-reporter.js', {banana: 'yes', pineapple: 'no'}],\n  ],\n};\n\nexport default config;\n```\n\n#### Default Reporter\n\nIf custom reporters are specified, the default Jest reporter will be overridden. If you wish to keep it, `'default'` must be passed as a reporters name:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: [\n    'default',\n    ['jest-junit', {outputDirectory: 'reports', outputName: 'report.xml'}],\n  ],\n};\n\nexport default config;\n```\n\n#### GitHub Actions Reporter\n\nIf included in the list, the built-in GitHub Actions Reporter will annotate changed files with test failure messages:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['default', 'github-actions'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['default', 'github-actions'],\n};\n\nexport default config;\n```\n\n#### Summary Reporter\n\nSummary reporter prints out summary of all tests. It is a part of default reporter, hence it will be enabled if `'default'` is included in the list. For instance, you might want to use it as stand-alone reporter instead of the default one, or together with [Silent Reporter](https://github.com/rickhanlonii/jest-silent-reporter):\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  reporters: ['jest-silent-reporter', 'summary'],\n};\n\nexport default config;\n```\n\n#### Custom Reporters\n\ntip\n\nHungry for reporters? Take a look at long list of [awesome reporters](https://github.com/jest-community/awesome-jest/blob/main/README.md#reporters) from Awesome Jest.\n\nCustom reporter module must export a class that takes `globalConfig`, `reporterOptions` and `reporterContext` as constructor arguments and implements at least `onRunComplete()` method (for the full list of methods and argument types see `Reporter` interface in [packages/jest-reporters/src/types.ts](https://github.com/facebook/jest/blob/main/packages/jest-reporters/src/types.ts)):\n\n``` typescript\nclass CustomReporter {\n  constructor(globalConfig, reporterOptions, reporterContext) {\n    this._globalConfig = globalConfig;\n    this._options = reporterOptions;\n    this._context = reporterContext;\n  }\n\n  onRunComplete(testContexts, results) {\n    console.log('Custom reporter output:');\n    console.log('global config: ', this._globalConfig);\n    console.log('options for this reporter from Jest config: ', this._options);\n    console.log('reporter context passed from test scheduler: ', this._context);\n  }\n\n  // Optionally, reporters can force Jest to exit with non zero code by returning\n  // an `Error` from `getLastError()` method.\n  getLastError() {\n    if (this._shouldFail) {\n      return new Error('Custom error reported!');\n    }\n  }\n}\n\nmodule.exports = CustomReporter;\n```\n\ncustom-reporter.js\n\n### `resetMocks` \\[boolean\\]\n\nDefault: `false`\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `resetModules` \\[boolean\\]\n\nDefault: `false`\n\nBy default, each test file gets its own independent module registry. Enabling `resetModules` goes a step further and resets the module registry before running each individual test. This is useful to isolate modules for every test so that the local module state doesn't conflict between tests. This can be done programmatically using [`jest.resetModules()`](jest-object#jestresetmodules).\n\n### `resolver` \\[string\\]\n\nDefault: `undefined`\n\nThis option allows the use of a custom resolver. This resolver must be a module that exports *either*:\n\n1.  a function expecting a string as the first argument for the path to resolve and an options object as the second argument. The function should either return a path to the module that should be resolved or throw an error if the module can't be found. *or*\n2.  an object containing `async` and/or `sync` properties. The `sync` property should be a function with the shape explained above, and the `async` property should also be a function that accepts the same arguments, but returns a promise which resolves with the path to the module or rejects with an error.\n\nThe options object provided to resolvers has the shape:\n\n``` typescript\ntype ResolverOptions = {\n  /** Directory to begin resolving from. */\n  basedir: string;\n  /** List of export conditions. */\n  conditions?: Array<string>;\n  /** Instance of default resolver. */\n  defaultResolver: (path: string, options: ResolverOptions) => string;\n  /** List of file extensions to search in order. */\n  extensions?: Array<string>;\n  /** List of directory names to be looked up for modules recursively. */\n  moduleDirectory?: Array<string>;\n  /** List of `require.paths` to use if nothing is found in `node_modules`. */\n  paths?: Array<string>;\n  /** Allows transforming parsed `package.json` contents. */\n  packageFilter?: (pkg: PackageJSON, file: string, dir: string) => PackageJSON;\n  /** Allows transforms a path within a package. */\n  pathFilter?: (pkg: PackageJSON, path: string, relativePath: string) => string;\n  /** Current root directory. */\n  rootDir?: string;\n};\n```\n\ntip\n\nThe `defaultResolver` passed as an option is the Jest default resolver which might be useful when you write your custom one. It takes the same arguments as your custom synchronous one, e.g. `(path, options)` and returns a string or throws.\n\nFor example, if you want to respect Browserify's [`\"browser\"` field](https://github.com/browserify/browserify-handbook/blob/master/readme.markdown#browser-field), you can use the following resolver:\n\n``` typescript\nconst browserResolve = require('browser-resolve');\n\nmodule.exports = browserResolve.sync;\n```\n\nresolver.js\n\nAnd add it to Jest configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  resolver: '<rootDir>/resolver.js',\n};\n\nexport default config;\n```\n\nBy combining `defaultResolver` and `packageFilter` we can implement a `package.json` \"pre-processor\" that allows us to change how the default resolver will resolve modules. For example, imagine we want to use the field `\"module\"` if it is present, otherwise fallback to `\"main\"`:\n\n``` typescript\nmodule.exports = (path, options) => {\n  // Call the defaultResolver, so we leverage its cache, error handling, etc.\n  return options.defaultResolver(path, {\n    ...options,\n    // Use packageFilter to process parsed `package.json` before the resolution (see https://www.npmjs.com/package/resolve#resolveid-opts-cb)\n    packageFilter: pkg => {\n      return {\n        ...pkg,\n        // Alter the value of `main` before resolving the package\n        main: pkg.module || pkg.main,\n      };\n    },\n  });\n};\n```\n\n### `restoreMocks` \\[boolean\\]\n\nDefault: `false`\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `rootDir` \\[string\\]\n\nDefault: The root of the directory containing your Jest [config file](#) *or* the `package.json` *or* the [`pwd`](http://en.wikipedia.org/wiki/Pwd) if no `package.json` is found\n\nThe root directory that Jest should scan for tests and modules within. If you put your Jest config inside your `package.json` and want the root directory to be the root of your repo, the value for this config param will default to the directory of the `package.json`.\n\nOftentimes, you'll want to set this to `'src'` or `'lib'`, corresponding to where in your repository the code is stored.\n\ntip\n\nUsing `'<rootDir>'` as a string token in any other path-based configuration settings will refer back to this value. For example, if you want a [`setupFiles`](#setupfiles-array) entry to point at the `some-setup.js` file at the root of the project, set its value to: `'<rootDir>/some-setup.js'`.\n\n### `roots` \\[array\\<string\\>\\]\n\nDefault: `[\"<rootDir>\"]`\n\nA list of paths to directories that Jest should use to search for files in.\n\nThere are times where you only want Jest to search in a single sub-directory (such as cases where you have a `src/` directory in your repo), but prevent it from accessing the rest of the repo.\n\ninfo\n\nWhile `rootDir` is mostly used as a token to be re-used in other configuration options, `roots` is used by the internals of Jest to locate **test files and source files**. This applies also when searching for manual mocks for modules from `node_modules` (`__mocks__` will need to live in one of the `roots`).\n\nBy default, `roots` has a single entry `<rootDir>` but there are cases where you may want to have multiple roots within one project, for example `roots: [\"<rootDir>/src/\", \"<rootDir>/tests/\"]`.\n\n### `runner` \\[string\\]\n\nDefault: `\"jest-runner\"`\n\nThis option allows you to use a custom runner instead of Jest's default test runner. Examples of runners include:\n\n- [`jest-runner-eslint`](https://github.com/jest-community/jest-runner-eslint)\n- [`jest-runner-mocha`](https://github.com/rogeliog/jest-runner-mocha)\n- [`jest-runner-tsc`](https://github.com/azz/jest-runner-tsc)\n- [`jest-runner-prettier`](https://github.com/keplersj/jest-runner-prettier)\n\ninfo\n\nThe `runner` property value can omit the `jest-runner-` prefix of the package name.\n\nTo write a test-runner, export a class with which accepts `globalConfig` in the constructor, and has a `runTests` method with the signature:\n\n``` typescript\nasync function runTests(\n  tests: Array<Test>,\n  watcher: TestWatcher,\n  onStart: OnTestStart,\n  onResult: OnTestSuccess,\n  onFailure: OnTestFailure,\n  options: TestRunnerOptions,\n): Promise<void>;\n```\n\nIf you need to restrict your test-runner to only run in serial rather than being executed in parallel your class should have the property `isSerial` to be set as `true`.\n\n### `sandboxInjectedGlobals` \\[array\\<string\\>\\]\n\ntip\n\nRenamed from `extraGlobals` in Jest 28.\n\nDefault: `undefined`\n\nTest files run inside a [vm](https://nodejs.org/api/vm.html), which slows calls to global context properties (e.g. `Math`). With this option you can specify extra properties to be defined inside the vm for faster lookups.\n\nFor example, if your tests call `Math` often, you can pass it by setting `sandboxInjectedGlobals`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  sandboxInjectedGlobals: ['Math'],\n};\n\nexport default config;\n```\n\nnote\n\nThis option has no effect if you use [native ESM](ecmascript-modules).\n\n### `setupFiles` \\[array\\]\n\nDefault: `[]`\n\nA list of paths to modules that run some code to configure or set up the testing environment. Each setupFile will be run once per test file. Since every test runs in its own environment, these scripts will be executed in the testing environment before executing [`setupFilesAfterEnv`](#setupfilesafterenv-array) and before the test code itself.\n\ntip\n\nIf your setup script is a CJS module, it may export an async function. Jest will call the function and await its result. This might be useful to fetch some data asynchronously. If the file is an ESM module, simply use top-level await to achieve the same result.\n\n### `setupFilesAfterEnv` \\[array\\]\n\nDefault: `[]`\n\nA list of paths to modules that run some code to configure or set up the testing framework before each test file in the suite is executed. Since [`setupFiles`](#setupfiles-array) executes before the test framework is installed in the environment, this script file presents you the opportunity of running some code immediately after the test framework has been installed in the environment but before the test code itself.\n\nIn other words, `setupFilesAfterEnv` modules are meant for code which is repeating in each test file. Having the test framework installed makes Jest [globals](api), [`jest` object](jest-object) and [`expect`](expect) accessible in the modules. For example, you can add extra matchers from [`jest-extended`](https://github.com/jest-community/jest-extended) library or call [setup and teardown](setup-teardown) hooks:\n\n``` typescript\nconst matchers = require('jest-extended');\nexpect.extend(matchers);\n\nafterEach(() => {\n  jest.useRealTimers();\n});\n```\n\nsetup-jest.js\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: ['<rootDir>/setup-matchers.js'],\n};\n\nexport default config;\n```\n\n### `slowTestThreshold` \\[number\\]\n\nDefault: `5`\n\nThe number of seconds after which a test is considered as slow and reported as such in the results.\n\n### `snapshotFormat` \\[object\\]\n\nDefault: `{escapeString: false, printBasicPrototype: false}`\n\nAllows overriding specific snapshot formatting options documented in the [pretty-format readme](https://www.npmjs.com/package/pretty-format#usage-with-options), with the exceptions of `compareKeys` and `plugins`. For example, this config would have the snapshot formatter not print a prefix for \"Object\" and \"Array\":\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotFormat: {\n    printBasicPrototype: false,\n  },\n};\n\nexport default config;\n```\n\n``` typescript\ntest('does not show prototypes for object and array inline', () => {\n  const object = {\n    array: [{hello: 'Danger'}],\n  };\n  expect(object).toMatchInlineSnapshot(`\n{\n  \"array\": [\n    {\n      \"hello\": \"Danger\",\n    },\n  ],\n}\n    `);\n});\n```\n\nsome.test.js\n\n### `snapshotResolver` \\[string\\]\n\nDefault: `undefined`\n\nThe path to a module that can resolve test\\<-\\>snapshot path. This config option lets you customize where Jest stores snapshot files on disk.\n\n``` typescript\nmodule.exports = {\n  // resolves from test to snapshot path\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('__tests__', '__snapshots__') + snapshotExtension,\n\n  // resolves from snapshot to test path\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    snapshotFilePath\n      .replace('__snapshots__', '__tests__')\n      .slice(0, -snapshotExtension.length),\n\n  // Example test path, used for preflight consistency check of the implementation above\n  testPathForConsistencyCheck: 'some/__tests__/example.test.js',\n};\n```\n\ncustom-resolver.js\n\n### `snapshotSerializers` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nA list of paths to snapshot serializer modules Jest should use for snapshot testing.\n\nJest has default serializers for built-in JavaScript types, HTML elements (Jest 20.0.0+), ImmutableJS (Jest 20.0.0+) and for React elements. See [snapshot test tutorial](tutorial-react-native#snapshot-test) for more information.\n\n``` typescript\nmodule.exports = {\n  serialize(val, config, indentation, depth, refs, printer) {\n    return `Pretty foo: ${printer(val.foo)}`;\n  },\n\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo');\n  },\n};\n```\n\ncustom-serializer.js\n\n`printer` is a function that serializes a value using existing plugins.\n\nAdd `custom-serializer` to your Jest configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  snapshotSerializers: ['path/to/custom-serializer.js'],\n};\n\nexport default config;\n```\n\nFinally tests would look as follows:\n\n``` typescript\ntest(() => {\n  const bar = {\n    foo: {\n      x: 1,\n      y: 2,\n    },\n  };\n\n  expect(bar).toMatchSnapshot();\n});\n```\n\nRendered snapshot:\n\n``` typescript\nPretty foo: Object {\n  \"x\": 1,\n  \"y\": 2,\n}\n```\n\nTo make a dependency explicit instead of implicit, you can call [`expect.addSnapshotSerializer`](expect#expectaddsnapshotserializerserializer) to add a module for an individual test file instead of adding its path to `snapshotSerializers` in Jest configuration.\n\nMore about serializers API can be found [here](https://github.com/facebook/jest/tree/main/packages/pretty-format/README.md#serialize).\n\n### `testEnvironment` \\[string\\]\n\nDefault: `\"node\"`\n\nThe test environment that will be used for testing. The default environment in Jest is a Node.js environment. If you are building a web app, you can use a browser-like environment through [`jsdom`](https://github.com/jsdom/jsdom) instead.\n\nBy adding a `@jest-environment` docblock at the top of the file, you can specify another environment to be used for all tests in that file:\n\n``` typescript\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div');\n  expect(element).not.toBeNull();\n});\n```\n\nYou can create your own module that will be used for setting up the test environment. The module must export a class with `setup`, `teardown` and `getVmContext` methods. You can also pass variables from this module to your test suites by assigning them to `this.global` object – this will make them available in your test suites as global variables. The constructor is passed [global config](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-types/src/Config.ts#L284) and [project config](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-types/src/Config.ts#L349) as its first argument, and [`testEnvironmentContext`](https://github.com/facebook/jest/blob/491e7cb0f2daa8263caccc72d48bdce7ba759b11/packages/jest-environment/src/index.ts#L13) as its second.\n\nThe class may optionally expose an asynchronous `handleTestEvent` method to bind to events fired by [`jest-circus`](https://github.com/facebook/jest/tree/main/packages/jest-circus). Normally, `jest-circus` test runner would pause until a promise returned from `handleTestEvent` gets fulfilled, **except for the next events**: `start_describe_definition`, `finish_describe_definition`, `add_hook`, `add_test` or `error` (for the up-to-date list you can look at [SyncEvent type in the types definitions](https://github.com/facebook/jest/tree/main/packages/jest-types/src/Circus.ts)). That is caused by backward compatibility reasons and `process.on('unhandledRejection', callback)` signature, but that usually should not be a problem for most of the use cases.\n\nAny docblock pragmas in test files will be passed to the environment constructor and can be used for per-test configuration. If the pragma does not have a value, it will be present in the object with its value set to an empty string. If the pragma is not present, it will not be present in the object.\n\nTo use this class as your custom environment, refer to it by its full path within the project. For example, if your class is stored in `my-custom-environment.js` in some subfolder of your project, then the annotation might look like this:\n\n``` typescript\n/**\n * @jest-environment ./src/test/my-custom-environment\n */\n```\n\ninfo\n\nTestEnvironment is sandboxed. Each test suite will trigger setup/teardown in their own TestEnvironment.\n\nExample:\n\n``` typescript\n// my-custom-environment\nconst NodeEnvironment = require('jest-environment-node').default;\n\nclass CustomEnvironment extends NodeEnvironment {\n  constructor(config, context) {\n    super(config, context);\n    console.log(config.globalConfig);\n    console.log(config.projectConfig);\n    this.testPath = context.testPath;\n    this.docblockPragmas = context.docblockPragmas;\n  }\n\n  async setup() {\n    await super.setup();\n    await someSetupTasks(this.testPath);\n    this.global.someGlobalObject = createGlobalObject();\n\n    // Will trigger if docblock contains @my-custom-pragma my-pragma-value\n    if (this.docblockPragmas['my-custom-pragma'] === 'my-pragma-value') {\n      // ...\n    }\n  }\n\n  async teardown() {\n    this.global.someGlobalObject = destroyGlobalObject();\n    await someTeardownTasks();\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n\n  async handleTestEvent(event, state) {\n    if (event.name === 'test_start') {\n      // ...\n    }\n  }\n}\n\nmodule.exports = CustomEnvironment;\n```\n\n``` typescript\n// my-test-suite\n/**\n * @jest-environment ./my-custom-environment\n */\nlet someGlobalObject;\n\nbeforeAll(() => {\n  someGlobalObject = globalThis.someGlobalObject;\n});\n```\n\n### `testEnvironmentOptions` \\[Object\\]\n\nDefault: `{}`\n\nTest environment options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\nFor example, in `jest-environment-jsdom`, you can override options given to [`jsdom`](https://github.com/jsdom/jsdom) such as `{html: \"<html lang=\"zh-cmn-Hant\"></html>\", url: 'https://jestjs.io/', userAgent: \"Agent/007\"}`.\n\nBoth `jest-environment-jsdom` and `jest-environment-node` allow specifying `customExportConditions`, which allow you to control which versions of a library are loaded from `exports` in `package.json`. `jest-environment-jsdom` defaults to `['browser']`. `jest-environment-node` defaults to `['node', 'node-addons']`.\n\nThese options can also be passed in a docblock, similar to `testEnvironment`. Note that it must be parseable by `JSON.parse`. Example:\n\n``` typescript\n/**\n * @jest-environment jsdom\n * @jest-environment-options {\"url\": \"https://jestjs.io/\"}\n */\n\ntest('use jsdom and set the URL in this test file', () => {\n  expect(window.location.href).toBe('https://jestjs.io/');\n});\n```\n\n### `testFailureExitCode` \\[number\\]\n\nDefault: `1`\n\nThe exit code Jest returns on test failure.\n\ninfo\n\nThis does not change the exit code in the case of Jest errors (e.g. invalid configuration).\n\n### `testMatch` \\[array\\<string\\>\\]\n\n(default: `[ \"**/__tests__/**/*.[jt]s?(x)\", \"**/?(*.)+(spec|test).[jt]s?(x)\" ]`)\n\nThe glob patterns Jest uses to detect test files. By default it looks for `.js`, `.jsx`, `.ts` and `.tsx` files inside of `__tests__` folders, as well as any files with a suffix of `.test` or `.spec` (e.g. `Component.test.js` or `Component.spec.js`). It will also find files called `test.js` or `spec.js`.\n\nSee the [micromatch](https://github.com/micromatch/micromatch) package for details of the patterns you can specify.\n\nSee also [`testRegex` \\[string \\| array\\<string\\>\\]](#testregex-string--arraystring), but note that you cannot specify both options.\n\ntip\n\nEach glob pattern is applied in the order they are specified in the config. For example `[\"!**/__fixtures__/**\", \"**/__tests__/**/*.js\"]` will not exclude `__fixtures__` because the negation is overwritten with the second pattern. In order to make the negated glob work in this example it has to come after `**/__tests__/**/*.js`.\n\n### `testPathIgnorePatterns` \\[array\\<string\\>\\]\n\nDefault: `[\"/node_modules/\"]`\n\nAn array of regexp pattern strings that are matched against all test paths before executing the test. If the test path matches any of the patterns, it will be skipped.\n\nThese pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `[\"<rootDir>/build/\", \"<rootDir>/node_modules/\"]`.\n\n### `testRegex` \\[string \\| array\\<string\\>\\]\n\nDefault: `(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$`\n\nThe pattern or patterns Jest uses to detect test files. By default it looks for `.js`, `.jsx`, `.ts` and `.tsx` files inside of `__tests__` folders, as well as any files with a suffix of `.test` or `.spec` (e.g. `Component.test.js` or `Component.spec.js`). It will also find files called `test.js` or `spec.js`. See also [`testMatch` \\[array\\<string\\>\\]](#testmatch-arraystring), but note that you cannot specify both options.\n\nThe following is a visualization of the default regex:\n\n``` typescript\n├── __tests__\n│   └── component.spec.js # test\n│   └── anything # test\n├── package.json # not test\n├── foo.test.js # test\n├── bar.spec.jsx # test\n└── component.js # not test\n```\n\ninfo\n\n`testRegex` will try to detect test files using the **absolute file path**, therefore, having a folder with a name that matches it will run all the files as tests.\n\n### `testResultsProcessor` \\[string\\]\n\nDefault: `undefined`\n\nThis option allows the use of a custom results processor. This processor must be a node module that exports a function expecting an object with the following structure as the first argument and return it:\n\n``` typescript\n{\n  \"success\": boolean,\n  \"startTime\": epoch,\n  \"numTotalTestSuites\": number,\n  \"numPassedTestSuites\": number,\n  \"numFailedTestSuites\": number,\n  \"numRuntimeErrorTestSuites\": number,\n  \"numTotalTests\": number,\n  \"numPassedTests\": number,\n  \"numFailedTests\": number,\n  \"numPendingTests\": number,\n  \"numTodoTests\": number,\n  \"openHandles\": Array<Error>,\n  \"testResults\": [{\n    \"numFailingTests\": number,\n    \"numPassingTests\": number,\n    \"numPendingTests\": number,\n    \"testResults\": [{\n      \"title\": string (message in it block),\n      \"status\": \"failed\" | \"pending\" | \"passed\",\n      \"ancestorTitles\": [string (message in describe blocks)],\n      \"failureMessages\": [string],\n      \"numPassingAsserts\": number,\n      \"location\": {\n        \"column\": number,\n        \"line\": number\n      },\n      \"duration\": number | null\n    },\n    ...\n    ],\n    \"perfStats\": {\n      \"start\": epoch,\n      \"end\": epoch\n    },\n    \"testFilePath\": absolute path to test file,\n    \"coverage\": {}\n  },\n  \"testExecError:\" (exists if there was a top-level failure) {\n    \"message\": string\n    \"stack\": string\n  }\n  ...\n  ]\n}\n```\n\n`testResultsProcessor` and `reporters` are very similar to each other. One difference is that a test result processor only gets called after all tests finished. Whereas a reporter has the ability to receive test results after individual tests and/or test suites are finished.\n\n### `testRunner` \\[string\\]\n\nDefault: `jest-circus/runner`\n\nThis option allows the use of a custom test runner. The default is `jest-circus`. A custom test runner can be provided by specifying a path to a test runner implementation.\n\nThe test runner module must export a function with the following signature:\n\n``` typescript\nfunction testRunner(\n  globalConfig: GlobalConfig,\n  config: ProjectConfig,\n  environment: Environment,\n  runtime: Runtime,\n  testPath: string,\n): Promise<TestResult>;\n```\n\nAn example of such function can be found in our default [jasmine2 test runner package](https://github.com/facebook/jest/blob/main/packages/jest-jasmine2/src/index.ts).\n\n### `testSequencer` \\[string\\]\n\nDefault: `@jest/test-sequencer`\n\nThis option allows you to use a custom sequencer instead of Jest's default.\n\ntip\n\nBoth `sort` and `shard` may optionally return a `Promise`.\n\nFor example, you may sort test paths alphabetically:\n\n``` typescript\nconst Sequencer = require('@jest/test-sequencer').default;\n\nclass CustomSequencer extends Sequencer {\n  /**\n   * Select tests for shard requested via --shard=shardIndex/shardCount\n   * Sharding is applied before sorting\n   */\n  shard(tests, {shardIndex, shardCount}) {\n    const shardSize = Math.ceil(tests.length / shardCount);\n    const shardStart = shardSize * (shardIndex - 1);\n    const shardEnd = shardSize * shardIndex;\n\n    return [...tests]\n      .sort((a, b) => (a.path > b.path ? 1 : -1))\n      .slice(shardStart, shardEnd);\n  }\n\n  /**\n   * Sort test to determine order of execution\n   * Sorting is applied after sharding\n   */\n  sort(tests) {\n    // Test structure information\n    // https://github.com/facebook/jest/blob/6b8b1404a1d9254e7d5d90a8934087a9c9899dab/packages/jest-runner/src/types.ts#L17-L21\n    const copyTests = Array.from(tests);\n    return copyTests.sort((testA, testB) => (testA.path > testB.path ? 1 : -1));\n  }\n}\n\nmodule.exports = CustomSequencer;\n```\n\ncustom-sequencer.js\n\nAdd `custom-sequencer` to your Jest configuration:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  testSequencer: 'path/to/custom-sequencer.js',\n};\n\nexport default config;\n```\n\n### `testTimeout` \\[number\\]\n\nDefault: `5000`\n\nDefault timeout of a test in milliseconds.\n\n### `transform` \\[object\\<string, pathToTransformer \\| \\[pathToTransformer, object\\]\\>\\]\n\nDefault: `{\"\\\\.[jt]sx?$\": \"babel-jest\"}`\n\nA map from regular expressions to paths to transformers. Optionally, a tuple with configuration options can be passed as second argument: `{filePattern: ['path-to-transformer', {options}]}`. For example, here is how you can configure `babel-jest` for non-default behavior: `{'\\\\.js$': ['babel-jest', {rootMode: 'upward'}]}`.\n\nJest runs the code of your project as JavaScript, hence a transformer is needed if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates). By default, Jest will use [`babel-jest`](https://github.com/facebook/jest/tree/main/packages/babel-jest#setup) transformer, which will load your project's Babel configuration and transform any file matching the `/\\.[jt]sx?$/` RegExp (in other words, any `.js`, `.jsx`, `.ts` or `.tsx` file). In addition, `babel-jest` will inject the Babel plugin necessary for mock hoisting talked about in [ES Module mocking](manual-mocks#using-with-es-module-imports).\n\nSee the [Code Transformation](code-transformation) section for more details and instructions on building your own transformer.\n\ntip\n\nKeep in mind that a transformer only runs once per file unless the file has changed.\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transform: {\n    '\\\\.[jt]sx?$': 'babel-jest',\n    '\\\\.css$': 'some-css-transformer',\n  },\n};\n\nexport default config;\n```\n\n### `transformIgnorePatterns` \\[array\\<string\\>\\]\n\nDefault: `[\"/node_modules/\", \"\\\\.pnp\\\\.[^\\\\\\/]+$\"]`\n\nAn array of regexp pattern strings that are matched against all source file paths before transformation. If the file path matches **any** of the patterns, it will not be transformed.\n\nProviding regexp patterns that overlap with each other may result in files not being transformed that you expected to be transformed. For example:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: ['/node_modules/(?!(foo|bar)/)', '/bar/'],\n};\n\nexport default config;\n```\n\nThe first pattern will match (and therefore not transform) files inside `/node_modules` except for those in `/node_modules/foo/` and `/node_modules/bar/`. The second pattern will match (and therefore not transform) files inside any path with `/bar/` in it. With the two together, files in `/node_modules/bar/` will not be transformed because it does match the second pattern, even though it was excluded by the first.\n\nSometimes it happens (especially in React Native or TypeScript projects) that 3rd party modules are published as untranspiled code. Since all files inside `node_modules` are not transformed by default, Jest will not understand the code in these modules, resulting in syntax errors. To overcome this, you may use `transformIgnorePatterns` to allow transpiling such modules. You'll find a good example of this use case in [React Native Guide](tutorial-react-native#transformignorepatterns-customization).\n\nThese pattern strings match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootDir>/bower_components/',\n    '<rootDir>/node_modules/',\n  ],\n};\n\nexport default config;\n```\n\ntip\n\nIf you use `pnpm` and need to convert some packages under `node_modules`, you need to note that the packages in this folder (e.g. `node_modules/package-a/`) have been symlinked to the path under `.pnpm` (e.g. `node_modules/.pnpm/package-a@x.x.x/node_modules/pakcage-a/`), so using `<rootdir>/node_modules/(?!(package-a|package-b)/)` directly will not be recognized, while is to use:\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  transformIgnorePatterns: [\n    '<rootdir>/node_modules/.pnpm/(?!(package-a|package-b)@)',\n  ],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  transformIgnorePatterns: [\n    '<rootdir>/node_modules/.pnpm/(?!(package-a|package-b)@)',\n  ],\n};\n\nexport default config;\n```\n\nIt should be noted that the folder name of pnpm under `.pnpm` is the package name plus `@` and version number, so writing `/` will not be recognized, but using `@` can.\n\n### `unmockedModulePathPatterns` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nAn array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them. If a module's path matches any of the patterns in this list, it will not be automatically mocked by the module loader.\n\nThis is useful for some commonly used 'utility' modules that are almost always used as implementation details almost all the time (like underscore/lo-dash, etc). It's generally a best practice to keep this list as small as possible and always use explicit `jest.mock()`/`jest.unmock()` calls in individual tests. Explicit per-test setup is far easier for other readers of the test to reason about the environment the test will run in.\n\nIt is possible to override this setting in individual tests by explicitly calling `jest.mock()` at the top of the test file.\n\n### `verbose` \\[boolean\\]\n\nDefault: `false`\n\nIndicates whether each individual test should be reported during the run. All errors will also still be shown on the bottom after execution. Note that if there is only one test file being run it will default to `true`.\n\n### `watchPathIgnorePatterns` \\[array\\<string\\>\\]\n\nDefault: `[]`\n\nAn array of RegExp patterns that are matched against all source file paths before re-running tests in watch mode. If the file path matches any of the patterns, when it is updated, it will not trigger a re-run of tests.\n\nThese patterns match against the full path. Use the `<rootDir>` string token to include the path to your project's root directory to prevent it from accidentally ignoring all of your files in different environments that may have different root directories. Example: `[\"<rootDir>/node_modules/\"]`.\n\nEven if nothing is specified here, the watcher will ignore changes to the version control folders (.git, .hg). Other hidden files and directories, i.e. those that begin with a dot (`.`), are watched by default. Remember to escape the dot when you add them to `watchPathIgnorePatterns` as it is a special RegExp character.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  watchPathIgnorePatterns: ['<rootDir>/\\\\.tmp/', '<rootDir>/bar/'],\n};\n\nexport default config;\n```\n\n### `watchPlugins` \\[array\\<string \\| \\[string, Object\\]\\>\\]\n\nDefault: `[]`\n\nThis option allows you to use custom watch plugins. Read more about watch plugins [here](watch-plugins).\n\nExamples of watch plugins include:\n\n- [`jest-watch-master`](https://github.com/rickhanlonii/jest-watch-master)\n- [`jest-watch-select-projects`](https://github.com/rogeliog/jest-watch-select-projects)\n- [`jest-watch-suspend`](https://github.com/unional/jest-watch-suspend)\n- [`jest-watch-typeahead`](https://github.com/jest-community/jest-watch-typeahead)\n- [`jest-watch-yarn-workspaces`](https://github.com/cameronhunter/jest-watch-directories/tree/master/packages/jest-watch-yarn-workspaces)\n\ninfo\n\nThe values in the `watchPlugins` property value can omit the `jest-watch-` prefix of the package name.\n\n### `watchman` \\[boolean\\]\n\nDefault: `true`\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling.\n\n### `workerIdleMemoryLimit` \\[number\\|string\\]\n\nDefault: `undefined`\n\nSpecifies the memory limit for workers before they are recycled and is primarily a work-around for [this issue](https://github.com/facebook/jest/issues/11956);\n\nAfter the worker has executed a test the memory usage of it is checked. If it exceeds the value specified the worker is killed and restarted. The limit can be specified in a number of different ways and whatever the result is `Math.floor` is used to turn it into an integer value:\n\n- `<= 1` - The value is assumed to be a percentage of system memory. So 0.5 sets the memory limit of the worker to half of the total system memory\n- `\\> 1` - Assumed to be a fixed byte value. Because of the previous rule if you wanted a value of 1 byte (I don't know why) you could use `1.1`.\n- With units\n  - `50%` - As above, a percentage of total system memory\n  - `100KB`, `65MB`, etc - With units to denote a fixed memory limit.\n    - `K` / `KB` - Kilobytes (x1000)\n    - `KiB` - Kibibytes (x1024)\n    - `M` / `MB` - Megabytes\n    - `MiB` - Mebibytes\n    - `G` / `GB` - Gigabytes\n    - `GiB` - Gibibytes\n\n**NOTE:** [% based memory does not work on Linux CircleCI workers](https://github.com/facebook/jest/issues/11956#issuecomment-1212925677) due to incorrect system memory being reported.\n\n- JavaScript\n- TypeScript\n\n``` typescript\n/** @type {import('jest').Config} */\nconst config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nmodule.exports = config;\n```\n\n``` typescript\nimport type {Config} from 'jest';\n\nconst config: Config = {\n  workerIdleMemoryLimit: 0.2,\n};\n\nexport default config;\n```\n\n### `//` \\[string\\]\n\nThis option allows comments in `package.json`. Include the comment text as the value of this key:\n\n``` typescript\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"//\": \"Comment goes here\",\n    \"verbose\": true\n  }\n}\n```\n\npackage.json\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/configuration](https://jestjs.io/docs/configuration)"
- name: describe()
  id: api#describename-fn
  summary: describe(name, fn) creates a block that groups together several related tests
  belongs_to: Globals
  description: |-
    ### `describe(name, fn)`

    `describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:

    ``` typescript
    const myBeverage = {
      delicious: true,
      sour: false,
    };

    describe('my beverage', () => {
      test('is delicious', () => {
        expect(myBeverage.delicious).toBeTruthy();
      });

      test('is not sour', () => {
        expect(myBeverage.sour).toBeFalsy();
      });
    });
    ```

    This isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.

    You can also nest `describe` blocks if you have a hierarchy of tests:

    ``` typescript
    const binaryStringToNumber = binString => {
      if (!/^[01]+$/.test(binString)) {
        throw new CustomError('Not a binary number.');
      }

      return parseInt(binString, 2);
    };

    describe('binaryStringToNumber', () => {
      describe('given an invalid binary string', () => {
        test('composed of non-numbers throws CustomError', () => {
          expect(() => binaryStringToNumber('abc')).toThrowError(CustomError);
        });

        test('with extra whitespace throws CustomError', () => {
          expect(() => binaryStringToNumber('  100')).toThrowError(CustomError);
        });
      });

      describe('given a valid binary string', () => {
        test('returns the correct number', () => {
          expect(binaryStringToNumber('100')).toBe(4);
        });
      });
    });
    ```
- name: describe.each()
  id: api#describeeachtablename-fn-timeout
  summary: Use describe.each if you keep duplicating the same test suites with different data
  belongs_to: Globals
  description: |-
    ### `describe.each(table)(name, fn, timeout)`

    Use `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.

    `describe.each` is available with two APIs:

    #### 1. `describe.each(table)(name, fn, timeout)`

    - `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row.
      - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`
    - `name`: `String` the title of the test suite.
      - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):
        - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).
        - `%s`- String.
        - `%d`- Number.
        - `%i` - Integer.
        - `%f` - Floating point value.
        - `%j` - JSON.
        - `%o` - Object.
        - `%#` - Index of the test case.
        - `%%` - single percent sign ('%'). This does not consume an argument.
      - Or generate unique test titles by injecting properties of test case object with `$variable`
        - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`
        - You can use `$#` to inject the index of the test case
        - You cannot use `$variable` with the `printf` formatting except for `%%`
    - `fn`: `Function` the suite of tests to be ran, this is the function that will receive the parameters in each row as function arguments.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    describe.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      test(`returns ${expected}`, () => {
        expect(a + b).toBe(expected);
      });

      test(`returned value not be greater than ${expected}`, () => {
        expect(a + b).not.toBeGreaterThan(expected);
      });

      test(`returned value not be less than ${expected}`, () => {
        expect(a + b).not.toBeLessThan(expected);
      });
    });
    ```

    ``` typescript
    describe.each([
      {a: 1, b: 1, expected: 2},
      {a: 1, b: 2, expected: 3},
      {a: 2, b: 1, expected: 3},
    ])('.add($a, $b)', ({a, b, expected}) => {
      test(`returns ${expected}`, () => {
        expect(a + b).toBe(expected);
      });

      test(`returned value not be greater than ${expected}`, () => {
        expect(a + b).not.toBeGreaterThan(expected);
      });

      test(`returned value not be less than ${expected}`, () => {
        expect(a + b).not.toBeLessThan(expected);
      });
    });
    ```

    #### 2. `` describe.each`table`(name, fn, timeout) ``

    - `table`: `Tagged Template Literal`
      - First row of variable name column headings separated with `|`
      - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.
    - `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.
      - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`
    - `fn`: `Function` the suite of tests to be ran, this is the function that will receive the test data object.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    describe.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('$a + $b', ({a, b, expected}) => {
      test(`returns ${expected}`, () => {
        expect(a + b).toBe(expected);
      });

      test(`returned value not be greater than ${expected}`, () => {
        expect(a + b).not.toBeGreaterThan(expected);
      });

      test(`returned value not be less than ${expected}`, () => {
        expect(a + b).not.toBeLessThan(expected);
      });
    });
    ```
- name: describe.only()
  id: api#describeonlyname-fn
  summary: null
  belongs_to: Globals
  description: |-
    ### `describe.only(name, fn)`

    Also under the alias: `fdescribe(name, fn)`

    You can use `describe.only` if you want to run only one describe block:

    ``` typescript
    describe.only('my beverage', () => {
      test('is delicious', () => {
        expect(myBeverage.delicious).toBeTruthy();
      });

      test('is not sour', () => {
        expect(myBeverage.sour).toBeFalsy();
      });
    });

    describe('my other beverage', () => {
      // ... will be skipped
    });
    ```
- name: describe.only.each()
  id: api#describeonlyeachtablename-fn
  summary: Use describe.only.each if you want to only run specific tests suites of data driven tests
  belongs_to: Globals
  description: |-
    ### `describe.only.each(table)(name, fn)`

    Also under the aliases: `fdescribe.each(table)(name, fn)` and `` fdescribe.each`table`(name, fn) ``

    Use `describe.only.each` if you want to only run specific tests suites of data driven tests.

    `describe.only.each` is available with two APIs:

    #### `describe.only.each(table)(name, fn)`

    ``` typescript
    describe.only.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      test(`returns ${expected}`, () => {
        expect(a + b).toBe(expected);
      });
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` describe.only.each`table`(name, fn) ``

    ``` typescript
    describe.only.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', ({a, b, expected}) => {
      test('passes', () => {
        expect(a + b).toBe(expected);
      });
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: describe.skip()
  id: api#describeskipname-fn
  summary: Using describe.skip is often a cleaner alternative to temporarily commenting out a chunk of tests
  belongs_to: Globals
  description: |-
    ### `describe.skip(name, fn)`

    Also under the alias: `xdescribe(name, fn)`

    You can use `describe.skip` if you do not want to run the tests of a particular `describe` block:

    ``` typescript
    describe('my beverage', () => {
      test('is delicious', () => {
        expect(myBeverage.delicious).toBeTruthy();
      });

      test('is not sour', () => {
        expect(myBeverage.sour).toBeFalsy();
      });
    });

    describe.skip('my other beverage', () => {
      // ... will be skipped
    });
    ```

    Using `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.
- name: describe.skip.each()
  id: api#describeskipeachtablename-fn
  summary: Use describe.skip.each if you want to stop running a suite of data driven tests
  belongs_to: Globals
  description: |-
    ### `describe.skip.each(table)(name, fn)`

    Also under the aliases: `xdescribe.each(table)(name, fn)` and `` xdescribe.each`table`(name, fn) ``

    Use `describe.skip.each` if you want to stop running a suite of data driven tests.

    `describe.skip.each` is available with two APIs:

    #### `describe.skip.each(table)(name, fn)`

    ``` typescript
    describe.skip.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      test(`returns ${expected}`, () => {
        expect(a + b).toBe(expected); // will not be ran
      });
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` describe.skip.each`table`(name, fn) ``

    ``` typescript
    describe.skip.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', ({a, b, expected}) => {
      test('will not be ran', () => {
        expect(a + b).toBe(expected); // will not be ran
      });
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: DOM Manipulation
  id: tutorial-jquery
  summary: Another class of functions that is often considered difficult to test is code that directly manipulates the DOM
  description: "# DOM Manipulation\n\nAnother class of functions that is often considered difficult to test is code that directly manipulates the DOM. Let's see how we can test the following snippet of jQuery code that listens to a click event, fetches some data asynchronously and sets the content of a span.\n\n``` typescript\n'use strict';\n\nconst $ = require('jquery');\nconst fetchCurrentUser = require('./fetchCurrentUser.js');\n\n$('#button').click(() => {\n  fetchCurrentUser(user => {\n    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');\n    $('#username').text(user.fullName + ' - ' + loggedText);\n  });\n});\n```\n\ndisplayUser.js\n\nAgain, we create a test file in the `__tests__/` folder:\n\n``` typescript\n'use strict';\n\njest.mock('../fetchCurrentUser');\n\ntest('displays a user after a click', () => {\n  // Set up our document body\n  document.body.innerHTML =\n    '<div>' +\n    '  <span id=\"username\" />' +\n    '  <button id=\"button\" />' +\n    '</div>';\n\n  // This module has a side-effect\n  require('../displayUser');\n\n  const $ = require('jquery');\n  const fetchCurrentUser = require('../fetchCurrentUser');\n\n  // Tell the fetchCurrentUser mock function to automatically invoke\n  // its callback with some data\n  fetchCurrentUser.mockImplementation(cb => {\n    cb({\n      fullName: 'Johnny Cash',\n      loggedIn: true,\n    });\n  });\n\n  // Use jquery to emulate a click on our button\n  $('#button').click();\n\n  // Assert that the fetchCurrentUser function was called, and that the\n  // #username span's inner text was updated as we'd expect it to.\n  expect(fetchCurrentUser).toBeCalled();\n  expect($('#username').text()).toEqual('Johnny Cash - Logged In');\n});\n```\n\n\\_\\_tests\\_\\_/displayUser-test.js\n\nWe are mocking `fetchCurrentUser.js` so that our test doesn't make a real network request but instead resolves to mock data locally. This ensures that our test can complete in milliseconds rather than seconds and guarantees a fast unit test iteration speed.\n\nAlso, the function being tested adds an event listener on the `#button` DOM element, so we need to set up our DOM correctly for the test. `jsdom` and the `jest-environment-jsdom` package simulate a DOM environment as if you were in the browser. This means that every DOM API that we call can be observed in the same way it would be observed in a browser!\n\nTo get started with the JSDOM [test environment](configuration#testenvironment-string), the `jest-environment-jsdom` package must be installed if it's not already:\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev jest-environment-jsdom\n```\n\n``` typescript\nyarn add --dev jest-environment-jsdom\n```\n\nThe code for this example is available at [examples/jquery](https://github.com/facebook/jest/tree/main/examples/jquery).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/tutorial-jquery](https://jestjs.io/docs/tutorial-jquery)"
- name: ECMAScript Modules
  id: ecmascript-modules
  summary: Jest ships with experimental support for ECMAScript Modules (ESM)
  description: "# ECMAScript Modules\n\nJest ships with *experimental* support for ECMAScript Modules (ESM).\n\n> Note that due to its experimental nature there are many bugs and missing features in Jest's implementation, both known and unknown. You should check out the [tracking issue](https://github.com/facebook/jest/issues/9430) and the [label](https://github.com/facebook/jest/labels/ES%20Modules) on the issue tracker for the latest status.\n\n> Also note that the APIs Jest uses to implement ESM support is still [considered experimental by Node](https://nodejs.org/api/vm.html#vm_class_vm_module) (as of version `14.13.1`).\n\nWith the warnings out of the way, this is how you activate ESM support in your tests.\n\n1.  Ensure you either disable [code transforms](configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) by passing `transform: {}` or otherwise configure your transformer to emit ESM rather than the default CommonJS (CJS).\n\n2.  Execute `node` with `--experimental-vm-modules`, e.g. `node --experimental-vm-modules node_modules/jest/bin/jest.js` or `NODE_OPTIONS=--experimental-vm-modules npx jest` etc..\n\n    On Windows, you can use [`cross-env`](https://github.com/kentcdodds/cross-env) to be able to set environment variables.\n\n    If you use Yarn, you can use `yarn node --experimental-vm-modules $(yarn bin jest)`. This command will also work if you use [Yarn Plug'n'Play](https://yarnpkg.com/features/pnp).\n\n3.  Beyond that, we attempt to follow `node`'s logic for activating \"ESM mode\" (such as looking at `type` in `package.json` or `.mjs` files), see [their docs](https://nodejs.org/api/esm.html#esm_enabling) for details.\n\n4.  If you want to treat other file extensions (such as `.jsx` or `.ts`) as ESM, please use the [`extensionsToTreatAsEsm` option](configuration#extensionstotreatasesm-arraystring).\n\n## Differences between ESM and CommonJS\n\nMost of the differences are explained in [Node's documentation](https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs), but in addition to the things mentioned there, Jest injects a special variable into all executed files - the [`jest` object](jest-object). To access this object in ESM, you need to import it from the `@jest/globals` module or use `import.meta`.\n\n``` typescript\nimport {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n```\n\nPlease note that we currently don't support `jest.mock` in a clean way in ESM, but that is something we intend to add proper support for in the future. Follow [this issue](https://github.com/facebook/jest/issues/10025) for updates.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/ecmascript-modules](https://jestjs.io/docs/ecmascript-modules)"
- name: Environment Variables
  id: environment-variables
  summary: Set to 'test' if it's not already set to something else
  description: "# Environment Variables\n\nJest sets the following environment variables:\n\n### `NODE_ENV`\n\nSet to `'test'` if it's not already set to something else.\n\n### `JEST_WORKER_ID`\n\nEach worker process is assigned a unique id (index-based that starts with `1`). This is set to `1` for all tests when [`runInBand`](cli#--runinband) is set to true.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/environment-variables](https://jestjs.io/docs/environment-variables)"
- name: ES6 Class Mocks
  id: es6-class-mocks
  summary: Jest can be used to mock ES6 classes that are imported into files you want to test
  description: "# ES6 Class Mocks\n\nJest can be used to mock ES6 classes that are imported into files you want to test.\n\nES6 classes are constructor functions with some syntactic sugar. Therefore, any mock for an ES6 class must be a function or an actual ES6 class (which is, again, another function). So you can mock them using [mock functions](mock-functions).\n\n## An ES6 Class Example\n\nWe'll use a contrived example of a class that plays sound files, `SoundPlayer`, and a consumer class which uses that class, `SoundPlayerConsumer`. We'll mock `SoundPlayer` in our tests for `SoundPlayerConsumer`.\n\n``` typescript\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n}\n```\n\nsound-player.js\n\n``` typescript\nimport SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n```\n\nsound-player-consumer.js\n\n## The 4 ways to create an ES6 class mock\n\n### Automatic mock\n\nCalling `jest.mock('./sound-player')` returns a useful \"automatic mock\" you can use to spy on calls to the class constructor and all of its methods. It replaces the ES6 class with a mock constructor, and replaces all of its methods with [mock functions](mock-functions) that always return `undefined`. Method calls are saved in `theAutomaticMock.mock.instances[index].methodName.mock.calls`.\n\nPlease note that if you use arrow functions in your classes, they will *not* be part of the mock. The reason for that is that arrow functions are not present on the object's prototype, they are merely properties holding a reference to a function.\n\nIf you don't need to replace the implementation of the class, this is the easiest option to set up. For example:\n\n``` typescript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toEqual(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n```\n\n### Manual mock\n\nCreate a [manual mock](manual-mocks) by saving a mock implementation in the `__mocks__` folder. This allows you to specify the implementation, and it can be used across test files.\n\n``` typescript\n// Import this named export into your test file:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n\\_\\_mocks\\_\\_/sound-player.js\n\nImport the mock and the mock method shared by all instances:\n\n``` typescript\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n```\n\nsound-player-consumer.test.js\n\n### Calling [`jest.mock()`](jest-object#jestmockmodulename-factory-options) with the module factory parameter\n\n`jest.mock(path, moduleFactory)` takes a **module factory** argument. A module factory is a function that returns the mock.\n\nIn order to mock a constructor function, the module factory must return a constructor function. In other words, the module factory must be a function that returns a function - a higher-order function (HOF).\n\n``` typescript\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n```\n\ncaution\n\nSince calls to `jest.mock()` are hoisted to the top of the file, Jest prevents access to out-of-scope variables. By default, you cannot first define a variable and then use it in the factory. Jest will disable this check for variables that start with the word `mock`. However, it is still up to you to guarantee that they will be initialized on time. Be aware of [Temporal Dead Zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz).\n\nFor example, the following will throw an out-of-scope error due to the use of `fake` instead of `mock` in the variable declaration.\n\n``` typescript\n// Note: this will fail\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n```\n\nThe following will throw a `ReferenceError` despite using `mock` in the variable declaration, as the `mockSoundPlayer` is not wrapped in an arrow function and thus accessed before initialization after hoisting.\n\n``` typescript\nimport SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// results in a ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n```\n\n### Replacing the mock using [`mockImplementation()`](mock-function-api#mockfnmockimplementationfn) or [`mockImplementationOnce()`](mock-function-api#mockfnmockimplementationoncefn)\n\nYou can replace all of the above mocks in order to change the implementation, for a single test or all tests, by calling `mockImplementation()` on the existing mock.\n\nCalls to jest.mock are hoisted to the top of the code. You can specify a mock later, e.g. in `beforeAll()`, by calling `mockImplementation()` (or `mockImplementationOnce()`) on the existing mock instead of using the factory parameter. This also allows you to change the mock between tests, if needed:\n\n``` typescript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('When SoundPlayer throws an error', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Test error');\n        },\n      };\n    });\n  });\n\n  it('Should throw an error when calling playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n```\n\n## In depth: Understanding mock constructor functions\n\nBuilding your constructor function mock using `jest.fn().mockImplementation()` makes mocks appear more complicated than they really are. This section shows how you can create your own mocks to illustrate how mocking works.\n\n### Manual mock that is another ES6 class\n\nIf you define an ES6 class using the same filename as the mocked class in the `__mocks__` folder, it will serve as the mock. This class will be used in place of the real class. This allows you to inject a test implementation for the class, but does not provide a way to spy on calls.\n\nFor the contrived example, the mock might look like this:\n\n``` typescript\nexport default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer: constructor was called');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer: playSoundFile was called');\n  }\n}\n```\n\n\\_\\_mocks\\_\\_/sound-player.js\n\n### Mock using module factory parameter\n\nThe module factory function passed to `jest.mock(path, moduleFactory)` can be a HOF that returns a function\\*. This will allow calling `new` on the mock. Again, this allows you to inject different behavior for testing, but does not provide a way to spy on calls.\n\n#### \\* Module factory function must return a function\n\nIn order to mock a constructor function, the module factory must return a constructor function. In other words, the module factory must be a function that returns a function - a higher-order function (HOF).\n\n``` typescript\njest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\n***Note: Arrow functions won't work***\n\nNote that the mock can't be an arrow function because calling `new` on an arrow function is not allowed in JavaScript. So this won't work:\n\n``` typescript\njest.mock('./sound-player', () => {\n  return () => {\n    // Does not work; arrow functions can't be called with new\n    return {playSoundFile: () => {}};\n  };\n});\n```\n\nThis will throw ***TypeError: \\_soundPlayer2.default is not a constructor***, unless the code is transpiled to ES5, e.g. by `@babel/preset-env`. (ES5 doesn't have arrow functions nor classes, so both will be transpiled to plain functions.)\n\n## Mocking a specific method of a class\n\nLets say that you want to mock or spy the method `playSoundFile` within the class `SoundPlayer`. A simple example:\n\n``` typescript\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('mocked function');\n  }); // comment this line if just want to \"spy\"\n\nit('player consumer plays music', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n```\n\n### Static, getter and setter methods\n\nLets imagine our class `SoundPlayer` has a getter method `foo` and a static method `brand`\n\n``` typescript\nexport default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Playing sound file ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n```\n\nYou can mock/spy them easily, here is an example:\n\n``` typescript\n// your jest test file below\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n```\n\n## Keeping track of usage (spying on the mock)\n\nInjecting a test implementation is helpful, but you will probably also want to test whether the class constructor and methods are called with the correct parameters.\n\n### Spying on the constructor\n\nIn order to track calls to the constructor, replace the function returned by the HOF with a Jest mock function. Create it with [`jest.fn()`](jest-object#jestfnimplementation), and then specify its implementation with `mockImplementation()`.\n\n``` typescript\nimport SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n```\n\nThis will let us inspect usage of our mocked class, using `SoundPlayer.mock.calls`: `expect(SoundPlayer).toHaveBeenCalled();` or near-equivalent: `expect(SoundPlayer.mock.calls.length).toEqual(1);`\n\n### Mocking non-default class exports\n\nIf the class is **not** the default export from the module then you need to return an object with the key that is the same as the class export name.\n\n``` typescript\nimport {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Works and lets you check for constructor calls:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n```\n\n### Spying on methods of our class\n\nOur mocked class will need to provide any member functions (`playSoundFile` in the example) that will be called during our tests, or else we'll get an error for calling a function that doesn't exist. But we'll probably want to also spy on calls to those methods, to ensure that they were called with the expected parameters.\n\nA new object will be created each time the mock constructor function is called during tests. To spy on method calls in all of these objects, we populate `playSoundFile` with another mock function, and store a reference to that same mock function in our test file, so it's available during tests.\n\n``` typescript\nimport SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Now we can track calls to playSoundFile\n  });\n});\n```\n\nThe manual mock equivalent of this would be:\n\n``` typescript\n// Import this named export into your test file\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n```\n\n\\_\\_mocks\\_\\_/sound-player.js\n\nUsage is similar to the module factory function, except that you can omit the second argument from `jest.mock()`, and you must import the mocked method into your test file, since it is no longer defined there. Use the original module path for this; don't include `__mocks__`.\n\n### Cleaning up between tests\n\nTo clear the record of calls to the mock constructor function and its methods, we call [`mockClear()`](mock-function-api#mockfnmockclear) in the `beforeEach()` function:\n\n``` typescript\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n```\n\n## Complete example\n\nHere's a complete test file which uses the module factory parameter to `jest.mock`:\n\n``` typescript\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toEqual(coolSoundFileName);\n});\n```\n\nsound-player-consumer.test.js\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/es6-class-mocks](https://jestjs.io/docs/es6-class-mocks)"
- name: Expect
  id: expect
  summary: When you're writing tests, you often need to check that values meet certain conditions
  description: "# Expect\n\nWhen you're writing tests, you often need to check that values meet certain conditions. `expect` gives you access to a number of \"matchers\" that let you validate different things.\n\nFor additional Jest matchers maintained by the Jest Community check out [`jest-extended`](https://github.com/jest-community/jest-extended).\n\n## Methods\n\n- [`expect(value)`](#expectvalue)\n- [`expect.extend(matchers)`](#expectextendmatchers)\n- [`expect.anything()`](#expectanything)\n- [`expect.any(constructor)`](#expectanyconstructor)\n- [`expect.arrayContaining(array)`](#expectarraycontainingarray)\n- [`expect.assertions(number)`](#expectassertionsnumber)\n- [`expect.closeTo(number, numDigits?)`](#expectclosetonumber-numdigits)\n- [`expect.hasAssertions()`](#expecthasassertions)\n- [`expect.not.arrayContaining(array)`](#expectnotarraycontainingarray)\n- [`expect.not.objectContaining(object)`](#expectnotobjectcontainingobject)\n- [`expect.not.stringContaining(string)`](#expectnotstringcontainingstring)\n- [`expect.not.stringMatching(string | regexp)`](#expectnotstringmatchingstring--regexp)\n- [`expect.objectContaining(object)`](#expectobjectcontainingobject)\n- [`expect.stringContaining(string)`](#expectstringcontainingstring)\n- [`expect.stringMatching(string | regexp)`](#expectstringmatchingstring--regexp)\n- [`expect.addSnapshotSerializer(serializer)`](#expectaddsnapshotserializerserializer)\n- [`.not`](#not)\n- [`.resolves`](#resolves)\n- [`.rejects`](#rejects)\n- [`.toBe(value)`](#tobevalue)\n- [`.toHaveBeenCalled()`](#tohavebeencalled)\n- [`.toHaveBeenCalledTimes(number)`](#tohavebeencalledtimesnumber)\n- [`.toHaveBeenCalledWith(arg1, arg2, ...)`](#tohavebeencalledwitharg1-arg2-)\n- [`.toHaveBeenLastCalledWith(arg1, arg2, ...)`](#tohavebeenlastcalledwitharg1-arg2-)\n- [`.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)`](#tohavebeennthcalledwithnthcall-arg1-arg2-)\n- [`.toHaveReturned()`](#tohavereturned)\n- [`.toHaveReturnedTimes(number)`](#tohavereturnedtimesnumber)\n- [`.toHaveReturnedWith(value)`](#tohavereturnedwithvalue)\n- [`.toHaveLastReturnedWith(value)`](#tohavelastreturnedwithvalue)\n- [`.toHaveNthReturnedWith(nthCall, value)`](#tohaventhreturnedwithnthcall-value)\n- [`.toHaveLength(number)`](#tohavelengthnumber)\n- [`.toHaveProperty(keyPath, value?)`](#tohavepropertykeypath-value)\n- [`.toBeCloseTo(number, numDigits?)`](#tobeclosetonumber-numdigits)\n- [`.toBeDefined()`](#tobedefined)\n- [`.toBeFalsy()`](#tobefalsy)\n- [`.toBeGreaterThan(number | bigint)`](#tobegreaterthannumber--bigint)\n- [`.toBeGreaterThanOrEqual(number | bigint)`](#tobegreaterthanorequalnumber--bigint)\n- [`.toBeLessThan(number | bigint)`](#tobelessthannumber--bigint)\n- [`.toBeLessThanOrEqual(number | bigint)`](#tobelessthanorequalnumber--bigint)\n- [`.toBeInstanceOf(Class)`](#tobeinstanceofclass)\n- [`.toBeNull()`](#tobenull)\n- [`.toBeTruthy()`](#tobetruthy)\n- [`.toBeUndefined()`](#tobeundefined)\n- [`.toBeNaN()`](#tobenan)\n- [`.toContain(item)`](#tocontainitem)\n- [`.toContainEqual(item)`](#tocontainequalitem)\n- [`.toEqual(value)`](#toequalvalue)\n- [`.toMatch(regexp | string)`](#tomatchregexp--string)\n- [`.toMatchObject(object)`](#tomatchobjectobject)\n- [`.toMatchSnapshot(propertyMatchers?, hint?)`](#tomatchsnapshotpropertymatchers-hint)\n- [`.toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)`](#tomatchinlinesnapshotpropertymatchers-inlinesnapshot)\n- [`.toStrictEqual(value)`](#tostrictequalvalue)\n- [`.toThrow(error?)`](#tothrowerror)\n- [`.toThrowErrorMatchingSnapshot(hint?)`](#tothrowerrormatchingsnapshothint)\n- [`.toThrowErrorMatchingInlineSnapshot(inlineSnapshot)`](#tothrowerrormatchinginlinesnapshotinlinesnapshot)\n\n## Reference\n\n### `expect(value)`\n\nThe `expect` function is used every time you want to test a value. You will rarely call `expect` by itself. Instead, you will use `expect` along with a \"matcher\" function to assert something about a value.\n\nIt's easier to understand this with an example. Let's say you have a method `bestLaCroixFlavor()` which is supposed to return the string `'grapefruit'`. Here's how you would test that:\n\n``` typescript\ntest('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n```\n\nIn this case, `toBe` is the matcher function. There are a lot of different matcher functions, documented below, to help you test different things.\n\nThe argument to `expect` should be the value that your code produces, and any argument to the matcher should be the correct value. If you mix them up, your tests will still work, but the error messages on failing tests will look strange.\n\n### `expect.extend(matchers)`\n\nYou can use `expect.extend` to add your own matchers to Jest. For example, let's say that you're testing a number utility library and you're frequently asserting that numbers appear within particular ranges of other numbers. You could abstract that into a `toBeWithinRange` matcher:\n\n``` typescript\nexpect.extend({\n  toBeWithinRange(received, floor, ceiling) {\n    const pass = received >= floor && received <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be within range ${floor} - ${ceiling}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be within range ${floor} - ${ceiling}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('numeric ranges', () => {\n  expect(100).toBeWithinRange(90, 110);\n  expect(101).not.toBeWithinRange(0, 100);\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n```\n\nnote\n\nIn TypeScript, when using `@types/jest` for example, you can declare the new `toBeWithinRange` matcher in the imported module like this:\n\n``` typescript\ninterface CustomMatchers<R = unknown> {\n  toBeWithinRange(floor: number, ceiling: number): R;\n}\n\ndeclare global {\n  namespace jest {\n    interface Expect extends CustomMatchers {}\n    interface Matchers<R> extends CustomMatchers<R> {}\n    interface InverseAsymmetricMatchers extends CustomMatchers {}\n  }\n}\n```\n\n#### Async Matchers\n\n`expect.extend` also supports async matchers. Async matchers return a Promise so you will need to await the returned value. Let's use an example matcher to illustrate the usage of them. We are going to implement a matcher called `toBeDivisibleByExternalValue`, where the divisible number is going to be pulled from an external source.\n\n``` typescript\nexpect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue == 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n```\n\n#### Custom Matchers API\n\nMatchers should return an object (or a Promise of an object) with two keys. `pass` indicates whether there was a match or not, and `message` provides a function with no arguments that returns an error message in case of failure. Thus, when `pass` is false, `message` should return the error message for when `expect(x).yourMatcher()` fails. And when `pass` is true, `message` should return the error message for when `expect(x).not.yourMatcher()` fails.\n\nMatchers are called with the argument passed to `expect(x)` followed by the arguments passed to `.yourMatcher(y, z)`:\n\n``` typescript\nexpect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n```\n\nThese helper functions and properties can be found on `this` inside a custom matcher:\n\n#### `this.isNot`\n\nA boolean to let you know this matcher was called with the negated `.not` modifier allowing you to display a clear and correct matcher hint (see example code).\n\n#### `this.promise`\n\nA string allowing you to display a clear and correct matcher hint:\n\n- `'rejects'` if matcher was called with the promise `.rejects` modifier\n- `'resolves'` if matcher was called with the promise `.resolves` modifier\n- `''` if matcher was not called with a promise modifier\n\n#### `this.equals(a, b)`\n\nThis is a deep-equality function that will return `true` if two objects have the same values (recursively).\n\n#### `this.expand`\n\nA boolean to let you know this matcher was called with an `expand` option. When Jest is called with the `--expand` flag, `this.expand` can be used to determine if Jest is expected to show full diffs and errors.\n\n#### `this.utils`\n\nThere are a number of helpful tools exposed on `this.utils` primarily consisting of the exports from [`jest-matcher-utils`](https://github.com/facebook/jest/tree/main/packages/jest-matcher-utils).\n\nThe most useful ones are `matcherHint`, `printExpected` and `printReceived` to format the error messages nicely. For example, take a look at the implementation for the `toBe` matcher:\n\n``` typescript\nconst {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n```\n\nThis will print something like this:\n\n``` typescript\n  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      \"banana\"\n    Received:\n      \"apple\"\n```\n\nWhen an assertion fails, the error message should give as much signal as necessary to the user so they can resolve their issue quickly. You should craft a precise failure message to make sure users of your custom assertions have a good developer experience.\n\n#### Custom snapshot matchers\n\nTo use snapshot testing inside of your custom matcher you can import `jest-snapshot` and use it from within your matcher.\n\nHere's a snapshot matcher that trims a string to store for a given length, `.toMatchTrimmedSnapshot(length)`:\n\n``` typescript\nconst {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.substring(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n```\n\nIt's also possible to create custom matchers for inline snapshots, the snapshots will be correctly added to the custom matchers. However, inline snapshot will always try to append to the first argument or the second when the first argument is the property matcher, so it's not possible to accept custom arguments in the custom matchers.\n\n``` typescript\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.substring(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n```\n\n#### async\n\nIf your custom inline snapshot matcher is async i.e. uses `async`-`await` you might encounter an error like \"Multiple inline snapshots for the same call are not supported\". Jest needs additional context information to find where the custom inline snapshot matcher was used to update the snapshots properly.\n\n``` typescript\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n```\n\n#### Bail out\n\nUsually `jest` tries to match every snapshot that is expected in a test.\n\nSometimes it might not make sense to continue the test if a prior snapshot failed. For example, when you make snapshots of a state-machine after various transitions you can abort the test once one transition produced the wrong state.\n\nIn that case you can implement a custom snapshot matcher that throws on the first mismatch instead of collecting every mismatch.\n\n``` typescript\nconst {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n```\n\n### `expect.anything()`\n\n`expect.anything()` matches anything but `null` or `undefined`. You can use it inside `toEqual` or `toBeCalledWith` instead of a literal value. For example, if you want to check that a mock function is called with a non-null argument:\n\n``` typescript\ntest('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toBeCalledWith(expect.anything());\n});\n```\n\n### `expect.any(constructor)`\n\n`expect.any(constructor)` matches anything that was created with the given constructor or if it's a primitive that is of the passed type. You can use it inside `toEqual` or `toBeCalledWith` instead of a literal value. For example, if you want to check that a mock function is called with a number:\n\n``` typescript\nclass Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toBeCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toBeCalledWith(expect.any(Number));\n});\n```\n\n### `expect.arrayContaining(array)`\n\n`expect.arrayContaining(array)` matches a received array which contains all of the elements in the expected array. That is, the expected array is a **subset** of the received array. Therefore, it matches a received array which contains elements that are **not** in the expected array.\n\nYou can use it instead of a literal value:\n\n- in `toEqual` or `toBeCalledWith`\n- to match a property in `objectContaining` or `toMatchObject`\n\n``` typescript\ndescribe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n```\n\n``` typescript\ndescribe('Beware of a misunderstanding! A sequence of dice rolls', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('matches even with an unexpected number 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match without an expected number 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n### `expect.assertions(number)`\n\n`expect.assertions(number)` verifies that a certain number of assertions are called during a test. This is often useful when testing asynchronous code, in order to make sure that assertions in a callback actually got called.\n\nFor example, let's say that we have a function `doAsync` that receives two callbacks `callback1` and `callback2`, it will asynchronously call both of them in an unknown order. We can test this with:\n\n``` typescript\ntest('doAsync calls both callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n```\n\nThe `expect.assertions(2)` call ensures that both callbacks actually get called.\n\n### `expect.closeTo(number, numDigits?)`\n\n`expect.closeTo(number, numDigits?)` is useful when comparing floating point numbers in object properties or array item. If you need to compare a number, please use `.toBeCloseTo` instead.\n\nThe optional `numDigits` argument limits the number of digits to check **after** the decimal point. For the default value `2`, the test criterion is `Math.abs(expected - received) < 0.005 (that is, 10 ** -2 / 2)`.\n\nFor example, this test passes with a precision of 5 digits:\n\n``` typescript\ntest('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n```\n\n### `expect.hasAssertions()`\n\n`expect.hasAssertions()` verifies that at least one assertion is called during a test. This is often useful when testing asynchronous code, in order to make sure that assertions in a callback actually got called.\n\nFor example, let's say that we have a few functions that all deal with state. `prepareState` calls a callback with a state object, `validateState` runs on that state object, and `waitOnState` returns a promise that waits until all `prepareState` callbacks complete. We can test this with:\n\n``` typescript\ntest('prepareState prepares a valid state', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n```\n\nThe `expect.hasAssertions()` call ensures that the `prepareState` callback actually gets called.\n\n### `expect.not.arrayContaining(array)`\n\n`expect.not.arrayContaining(array)` matches a received array which does not contain all of the elements in the expected array. That is, the expected array **is not a subset** of the received array.\n\nIt is the inverse of `expect.arrayContaining`.\n\n``` typescript\ndescribe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('matches if the actual array does not contain the expected elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n```\n\n### `expect.not.objectContaining(object)`\n\n`expect.not.objectContaining(object)` matches any received object that does not recursively match the expected properties. That is, the expected object **is not a subset** of the received object. Therefore, it matches a received object which contains properties that are **not** in the expected object.\n\nIt is the inverse of `expect.objectContaining`.\n\n``` typescript\ndescribe('not.objectContaining', () => {\n  const expected = {foo: 'bar'};\n\n  it('matches if the actual object does not contain expected key: value pairs', () => {\n    expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));\n  });\n});\n```\n\n### `expect.not.stringContaining(string)`\n\n`expect.not.stringContaining(string)` matches the received value if it is not a string or if it is a string that does not contain the exact expected string.\n\nIt is the inverse of `expect.stringContaining`.\n\n``` typescript\ndescribe('not.stringContaining', () => {\n  const expected = 'Hello world!';\n\n  it('matches if the received value does not contain the expected substring', () => {\n    expect('How are you?').toEqual(expect.not.stringContaining(expected));\n  });\n});\n```\n\n### `expect.not.stringMatching(string | regexp)`\n\n`expect.not.stringMatching(string | regexp)` matches the received value if it is not a string or if it is a string that does not match the expected string or regular expression.\n\nIt is the inverse of `expect.stringMatching`.\n\n``` typescript\ndescribe('not.stringMatching', () => {\n  const expected = /Hello world!/;\n\n  it('matches if the received value does not match the expected regex', () => {\n    expect('How are you?').toEqual(expect.not.stringMatching(expected));\n  });\n});\n```\n\n### `expect.objectContaining(object)`\n\n`expect.objectContaining(object)` matches any received object that recursively matches the expected properties. That is, the expected object is a **subset** of the received object. Therefore, it matches a received object which contains properties that **are present** in the expected object.\n\nInstead of literal property values in the expected object, you can use matchers, `expect.anything()`, and so on.\n\nFor example, let's say that we expect an `onPress` function to be called with an `Event` object, and all we need to verify is that the event has `event.x` and `event.y` properties. We can do that with:\n\n``` typescript\ntest('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toBeCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n```\n\n### `expect.stringContaining(string)`\n\n`expect.stringContaining(string)` matches the received value if it is a string that contains the exact expected string.\n\n### `expect.stringMatching(string | regexp)`\n\n`expect.stringMatching(string | regexp)` matches the received value if it is a string that matches the expected string or regular expression.\n\nYou can use it instead of a literal value:\n\n- in `toEqual` or `toBeCalledWith`\n- to match an element in `arrayContaining`\n- to match a property in `objectContaining` or `toMatchObject`\n\nThis example also shows how you can nest multiple asymmetric matchers, with `expect.stringMatching` inside the `expect.arrayContaining`.\n\n``` typescript\ndescribe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n```\n\n### `expect.addSnapshotSerializer(serializer)`\n\nYou can call `expect.addSnapshotSerializer` to add a module that formats application-specific data structures.\n\nFor an individual test file, an added module precedes any modules from `snapshotSerializers` configuration, which precede the default snapshot serializers for built-in JavaScript types and for React elements. The last module added is the first module tested.\n\n``` typescript\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n```\n\nIf you add a snapshot serializer in individual test files instead of adding it to `snapshotSerializers` configuration:\n\n- You make the dependency explicit instead of implicit.\n- You avoid limits to configuration that might cause you to eject from [create-react-app](https://github.com/facebookincubator/create-react-app).\n\nSee [configuring Jest](configuration#snapshotserializers-arraystring) for more information.\n\n### `.not`\n\nIf you know how to test something, `.not` lets you test its opposite. For example, this code tests that the best La Croix flavor is not coconut:\n\n``` typescript\ntest('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n```\n\n### `.resolves`\n\nUse `resolves` to unwrap the value of a fulfilled promise so any other matcher can be chained. If the promise is rejected the assertion fails.\n\nFor example, this code tests that the promise resolves and that the resulting value is `'lemon'`:\n\n``` typescript\ntest('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n```\n\nNote that, since you are still testing promises, the test is still asynchronous. Hence, you will need to [tell Jest to wait](asynchronous#promises) by returning the unwrapped assertion.\n\nAlternatively, you can use `async/await` in combination with `.resolves`:\n\n``` typescript\ntest('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n```\n\n### `.rejects`\n\nUse `.rejects` to unwrap the reason of a rejected promise so any other matcher can be chained. If the promise is fulfilled the assertion fails.\n\nFor example, this code tests that the promise rejects with reason `'octopus'`:\n\n``` typescript\ntest('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n```\n\nNote that, since you are still testing promises, the test is still asynchronous. Hence, you will need to [tell Jest to wait](asynchronous#promises) by returning the unwrapped assertion.\n\nAlternatively, you can use `async/await` in combination with `.rejects`.\n\n``` typescript\ntest('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n```\n\n### `.toBe(value)`\n\nUse `.toBe` to compare primitive values or to check referential identity of object instances. It calls `Object.is` to compare values, which is even better for testing than `===` strict equality operator.\n\nFor example, this code will validate some properties of the `can` object:\n\n``` typescript\nconst can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n```\n\nDon't use `.toBe` with floating-point numbers. For example, due to rounding, in JavaScript `0.2 + 0.1` is not strictly equal to `0.3`. If you have floating point numbers, try `.toBeCloseTo` instead.\n\nAlthough the `.toBe` matcher **checks** referential identity, it **reports** a deep comparison of values if the assertion fails. If differences between properties do not help you to understand why a test fails, especially if the report is large, then you might move the comparison into the `expect` function. For example, to assert whether or not elements are the same instance:\n\n- rewrite `expect(received).toBe(expected)` as `expect(Object.is(received, expected)).toBe(true)`\n- rewrite `expect(received).not.toBe(expected)` as `expect(Object.is(received, expected)).toBe(false)`\n\n### `.toHaveBeenCalled()`\n\nAlso under the alias: `.toBeCalled()`\n\nUse `.toHaveBeenCalledWith` to ensure that a mock function was called with specific arguments. The arguments are checked with the same algorithm that `.toEqual` uses.\n\nFor example, let's say you have a `drinkAll(drink, flavour)` function that takes a `drink` function and applies it to all available beverages. You might want to check that `drink` gets called for `'lemon'`, but not for `'octopus'`, because `'octopus'` flavour is really weird and why would anything be octopus-flavoured? You can do that with this test suite:\n\n``` typescript\nfunction drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n```\n\n### `.toHaveBeenCalledTimes(number)`\n\nAlso under the alias: `.toBeCalledTimes(number)`\n\nUse `.toHaveBeenCalledTimes` to ensure that a mock function got called exact number of times.\n\nFor example, let's say you have a `drinkEach(drink, Array<flavor>)` function that takes a `drink` function and applies it to array of passed beverages. You might want to check that drink function was called exact number of times. You can do that with this test suite:\n\n``` typescript\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n```\n\n### `.toHaveBeenCalledWith(arg1, arg2, ...)`\n\nAlso under the alias: `.toBeCalledWith()`\n\nUse `.toHaveBeenCalledWith` to ensure that a mock function was called with specific arguments. The arguments are checked with the same algorithm that `.toEqual` uses.\n\nFor example, let's say that you can register a beverage with a `register` function, and `applyToAll(f)` should apply the function `f` to all registered beverages. To make sure this works, you could write:\n\n``` typescript\ntest('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n```\n\n### `.toHaveBeenLastCalledWith(arg1, arg2, ...)`\n\nAlso under the alias: `.lastCalledWith(arg1, arg2, ...)`\n\nIf you have a mock function, you can use `.toHaveBeenLastCalledWith` to test what arguments it was last called with. For example, let's say you have a `applyToAllFlavors(f)` function that applies `f` to a bunch of flavors, and you want to ensure that when you call it, the last flavor it operates on is `'mango'`. You can write:\n\n``` typescript\ntest('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n```\n\n### `.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)`\n\nAlso under the alias: `.nthCalledWith(nthCall, arg1, arg2, ...)`\n\nIf you have a mock function, you can use `.toHaveBeenNthCalledWith` to test what arguments it was nth called with. For example, let's say you have a `drinkEach(drink, Array<flavor>)` function that applies `f` to a bunch of flavors, and you want to ensure that when you call it, the first flavor it operates on is `'lemon'` and the second one is `'octopus'`. You can write:\n\n``` typescript\ntest('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n```\n\nnote\n\nThe nth argument must be positive integer starting from 1.\n\n### `.toHaveReturned()`\n\nAlso under the alias: `.toReturn()`\n\nIf you have a mock function, you can use `.toHaveReturned` to test that the mock function successfully returned (i.e., did not throw an error) at least one time. For example, let's say you have a mock `drink` that returns `true`. You can write:\n\n``` typescript\ntest('drinks returns', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n```\n\n### `.toHaveReturnedTimes(number)`\n\nAlso under the alias: `.toReturnTimes(number)`\n\nUse `.toHaveReturnedTimes` to ensure that a mock function returned successfully (i.e., did not throw an error) an exact number of times. Any calls to the mock function that throw an error are not counted toward the number of times the function returned.\n\nFor example, let's say you have a mock `drink` that returns `true`. You can write:\n\n``` typescript\ntest('drink returns twice', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n```\n\n### `.toHaveReturnedWith(value)`\n\nAlso under the alias: `.toReturnWith(value)`\n\nUse `.toHaveReturnedWith` to ensure that a mock function returned a specific value.\n\nFor example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:\n\n``` typescript\ntest('drink returns La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n```\n\n### `.toHaveLastReturnedWith(value)`\n\nAlso under the alias: `.lastReturnedWith(value)`\n\nUse `.toHaveLastReturnedWith` to test the specific value that a mock function last returned. If the last call to the mock function threw an error, then this matcher will fail no matter what value you provided as the expected return value.\n\nFor example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:\n\n``` typescript\ntest('drink returns La Croix (Orange) last', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n```\n\n### `.toHaveNthReturnedWith(nthCall, value)`\n\nAlso under the alias: `.nthReturnedWith(nthCall, value)`\n\nUse `.toHaveNthReturnedWith` to test the specific value that a mock function returned for the nth call. If the nth call to the mock function threw an error, then this matcher will fail no matter what value you provided as the expected return value.\n\nFor example, let's say you have a mock `drink` that returns the name of the beverage that was consumed. You can write:\n\n``` typescript\ntest('drink returns expected nth calls', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\n});\n```\n\nnote\n\nThe nth argument must be positive integer starting from 1.\n\n### `.toHaveLength(number)`\n\nUse `.toHaveLength` to check that an object has a `.length` property and it is set to a certain numeric value.\n\nThis is especially useful for checking arrays or strings size.\n\n``` typescript\nexpect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n```\n\n### `.toHaveProperty(keyPath, value?)`\n\nUse `.toHaveProperty` to check if property at provided reference `keyPath` exists for an object. For checking deeply nested properties in an object you may use [dot notation](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors) or an array containing the keyPath for deep references.\n\nYou can provide an optional `value` argument to compare the received property value (recursively for all properties of object instances, also known as deep equality, like the `toEqual` matcher).\n\nThe following example contains a `houseForSale` object with nested properties. We are using `toHaveProperty` to check for the existence and values of various properties in the object.\n\n``` typescript\n// Object containing house features to be tested\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('this house has my desired features', () => {\n  // Example Referencing\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // Deep referencing using dot notation\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // Deep referencing using an array containing the keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n```\n\n### `.toBeCloseTo(number, numDigits?)`\n\nUse `toBeCloseTo` to compare floating point numbers for approximate equality.\n\nThe optional `numDigits` argument limits the number of digits to check **after** the decimal point. For the default value `2`, the test criterion is `Math.abs(expected - received) < 0.005` (that is, `10 ** -2 / 2`).\n\nIntuitive equality comparisons often fail, because arithmetic on decimal (base 10) values often have rounding errors in limited precision binary (base 2) representation. For example, this test fails:\n\n``` typescript\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\n});\n```\n\nIt fails because in JavaScript, `0.2 + 0.1` is actually `0.30000000000000004`.\n\nFor example, this test passes with a precision of 5 digits:\n\n``` typescript\ntest('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n```\n\nBecause floating point errors are the problem that `toBeCloseTo` solves, it does not support big integer values.\n\n### `.toBeDefined()`\n\nUse `.toBeDefined` to check that a variable is not undefined. For example, if you want to check that a function `fetchNewFlavorIdea()` returns *something*, you can write:\n\n``` typescript\ntest('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n```\n\nYou could write `expect(fetchNewFlavorIdea()).not.toBe(undefined)`, but it's better practice to avoid referring to `undefined` directly in your code.\n\n### `.toBeFalsy()`\n\nUse `.toBeFalsy` when you don't care what a value is and you want to ensure a value is false in a boolean context. For example, let's say you have some application code that looks like:\n\n``` typescript\ndrinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n```\n\nYou may not care what `getErrors` returns, specifically - it might return `false`, `null`, or `0`, and your code would still work. So if you want to test there are no errors after drinking some La Croix, you could write:\n\n``` typescript\ntest('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n```\n\nIn JavaScript, there are six falsy values: `false`, `0`, `''`, `null`, `undefined`, and `NaN`. Everything else is truthy.\n\n### `.toBeGreaterThan(number | bigint)`\n\nUse `toBeGreaterThan` to compare `received > expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of more than 10 ounces:\n\n``` typescript\ntest('ounces per can is more than 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n```\n\n### `.toBeGreaterThanOrEqual(number | bigint)`\n\nUse `toBeGreaterThanOrEqual` to compare `received >= expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of at least 12 ounces:\n\n``` typescript\ntest('ounces per can is at least 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n```\n\n### `.toBeLessThan(number | bigint)`\n\nUse `toBeLessThan` to compare `received < expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of less than 20 ounces:\n\n``` typescript\ntest('ounces per can is less than 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n```\n\n### `.toBeLessThanOrEqual(number | bigint)`\n\nUse `toBeLessThanOrEqual` to compare `received <= expected` for number or big integer values. For example, test that `ouncesPerCan()` returns a value of at most 12 ounces:\n\n``` typescript\ntest('ounces per can is at most 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n```\n\n### `.toBeInstanceOf(Class)`\n\nUse `.toBeInstanceOf(Class)` to check that an object is an instance of a class. This matcher uses `instanceof` underneath.\n\n``` typescript\nclass A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n```\n\n### `.toBeNull()`\n\n`.toBeNull()` is the same as `.toBe(null)` but the error messages are a bit nicer. So use `.toBeNull()` when you want to check that something is null.\n\n``` typescript\nfunction bloop() {\n  return null;\n}\n\ntest('bloop returns null', () => {\n  expect(bloop()).toBeNull();\n});\n```\n\n### `.toBeTruthy()`\n\nUse `.toBeTruthy` when you don't care what a value is and you want to ensure a value is true in a boolean context. For example, let's say you have some application code that looks like:\n\n``` typescript\ndrinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n```\n\nYou may not care what `thirstInfo` returns, specifically - it might return `true` or a complex object, and your code would still work. So if you want to test that `thirstInfo` will be truthy after drinking some La Croix, you could write:\n\n``` typescript\ntest('drinking La Croix leads to having thirst info', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n```\n\nIn JavaScript, there are six falsy values: `false`, `0`, `''`, `null`, `undefined`, and `NaN`. Everything else is truthy.\n\n### `.toBeUndefined()`\n\nUse `.toBeUndefined` to check that a variable is undefined. For example, if you want to check that a function `bestDrinkForFlavor(flavor)` returns `undefined` for the `'octopus'` flavor, because there is no good octopus-flavored drink:\n\n``` typescript\ntest('the best drink for octopus flavor is undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n```\n\nYou could write `expect(bestDrinkForFlavor('octopus')).toBe(undefined)`, but it's better practice to avoid referring to `undefined` directly in your code.\n\n### `.toBeNaN()`\n\nUse `.toBeNaN` when checking a value is `NaN`.\n\n``` typescript\ntest('passes when value is NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n```\n\n### `.toContain(item)`\n\nUse `.toContain` when you want to check that an item is in an array. For testing the items in the array, this uses `===`, a strict equality check. `.toContain` can also check whether a string is a substring of another string.\n\nFor example, if `getAllFlavors()` returns an array of flavors and you want to be sure that `lime` is in there, you can write:\n\n``` typescript\ntest('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n```\n\nThis matcher also accepts others iterables such as strings, sets, node lists and HTML collections.\n\n### `.toContainEqual(item)`\n\nUse `.toContainEqual` when you want to check that an item with a specific structure and values is contained in an array. For testing the items in the array, this matcher recursively checks the equality of all fields, rather than checking for object identity.\n\n``` typescript\ndescribe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n```\n\n### `.toEqual(value)`\n\nUse `.toEqual` to compare recursively all properties of object instances (also known as \"deep\" equality). It calls `Object.is` to compare primitive values, which is even better for testing than `===` strict equality operator.\n\nFor example, `.toEqual` and `.toBe` behave differently in this test suite, so all the tests pass:\n\n``` typescript\nconst can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n```\n\ntip\n\n`.toEqual` won't perform a *deep equality* check for two errors. Only the `message` property of an Error is considered for equality. It is recommended to use the `.toThrow` matcher for testing against errors.\n\nIf differences between properties do not help you to understand why a test fails, especially if the report is large, then you might move the comparison into the `expect` function. For example, use `equals` method of `Buffer` class to assert whether or not buffers contain the same content:\n\n- rewrite `expect(received).toEqual(expected)` as `expect(received.equals(expected)).toBe(true)`\n- rewrite `expect(received).not.toEqual(expected)` as `expect(received.equals(expected)).toBe(false)`\n\n### `.toMatch(regexp | string)`\n\nUse `.toMatch` to check that a string matches a regular expression.\n\nFor example, you might not know what exactly `essayOnTheBestFlavor()` returns, but you know it's a really long string, and the substring `grapefruit` should be in there somewhere. You can test this with:\n\n``` typescript\ndescribe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n```\n\nThis matcher also accepts a string, which it will try to match:\n\n``` typescript\ndescribe('grapefruits are healthy', () => {\n  test('grapefruits are a fruit', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n```\n\n### `.toMatchObject(object)`\n\nUse `.toMatchObject` to check that a JavaScript object matches a subset of the properties of an object. It will match received objects with properties that are **not** in the expected object.\n\nYou can also pass an array of objects, in which case the method will return true only if each object in the received array matches (in the `toMatchObject` sense described above) the corresponding object in the expected array. This is useful if you want to check that two arrays match in their number of elements, as opposed to `arrayContaining`, which allows for extra elements in the received array.\n\nYou can match properties against values or against matchers.\n\n``` typescript\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n```\n\n``` typescript\ndescribe('toMatchObject applied to arrays', () => {\n  test('the number of elements must match exactly', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject is called for each elements, so extra object properties are okay', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n```\n\n### `.toMatchSnapshot(propertyMatchers?, hint?)`\n\nThis ensures that a value matches the most recent snapshot. Check out [the Snapshot Testing guide](snapshot-testing) for more information.\n\nYou can provide an optional `propertyMatchers` object argument, which has asymmetric matchers as values of a subset of expected properties, **if** the received value will be an **object** instance. It is like `toMatchObject` with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties.\n\nYou can provide an optional `hint` string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate **multiple** snapshots in a **single** `it` or `test` block. Jest sorts snapshots by name in the corresponding `.snap` file.\n\n### `.toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)`\n\nEnsures that a value matches the most recent snapshot.\n\nYou can provide an optional `propertyMatchers` object argument, which has asymmetric matchers as values of a subset of expected properties, **if** the received value will be an **object** instance. It is like `toMatchObject` with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties.\n\nJest adds the `inlineSnapshot` string argument to the matcher in the test file (instead of an external `.snap` file) the first time that the test runs.\n\nCheck out the section on [Inline Snapshots](snapshot-testing#inline-snapshots) for more info.\n\n### `.toStrictEqual(value)`\n\nUse `.toStrictEqual` to test that objects have the same types as well as structure.\n\nDifferences from `.toEqual`:\n\n- Keys with `undefined` properties are checked. e.g. `{a: undefined, b: 2}` does not match `{b: 2}` when using `.toStrictEqual`.\n- Array sparseness is checked. e.g. `[, 1]` does not match `[undefined, 1]` when using `.toStrictEqual`.\n- Object types are checked to be equal. e.g. A class instance with fields `a` and `b` will not equal a literal object with fields `a` and `b`.\n\n``` typescript\nclass LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n```\n\n### `.toThrow(error?)`\n\nAlso under the alias: `.toThrowError(error?)`\n\nUse `.toThrow` to test that a function throws when it is called. For example, if we want to test that `drinkFlavor('octopus')` throws, because octopus flavor is too disgusting to drink, we could write:\n\n``` typescript\ntest('throws on octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n```\n\ntip\n\nYou must wrap the code in a function, otherwise the error will not be caught and the assertion will fail.\n\nYou can provide an optional argument to test that a specific error is thrown:\n\n- regular expression: error message **matches** the pattern\n- string: error message **includes** the substring\n- error object: error message is **equal to** the message property of the object\n- error class: error object is **instance of** class\n\nFor example, let's say that `drinkFlavor` is coded like this:\n\n``` typescript\nfunction drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nWe could test this error gets thrown in several ways:\n\n``` typescript\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrowError(/yuck/);\n  expect(drinkOctopus).toThrowError('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrowError(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrowError(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrowError(DisgustingFlavorError);\n});\n```\n\n### `.toThrowErrorMatchingSnapshot(hint?)`\n\nUse `.toThrowErrorMatchingSnapshot` to test that a function throws an error matching the most recent snapshot when it is called.\n\nYou can provide an optional `hint` string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate **multiple** snapshots in a **single** `it` or `test` block. Jest sorts snapshots by name in the corresponding `.snap` file.\n\nFor example, let's say you have a `drinkFlavor` function that throws whenever the flavor is `'octopus'`, and is coded like this:\n\n``` typescript\nfunction drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n```\n\nThe test for this function will look this way:\n\n``` typescript\ntest('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n```\n\nAnd it will generate the following snapshot:\n\n``` typescript\nexports[`drinking flavors throws on octopus 1`] = `\"yuck, octopus flavor\"`;\n```\n\nCheck out [React Tree Snapshot Testing](https://jestjs.io/blog/2016/07/27/jest-14) for more information on snapshot testing.\n\n### `.toThrowErrorMatchingInlineSnapshot(inlineSnapshot)`\n\nUse `.toThrowErrorMatchingInlineSnapshot` to test that a function throws an error matching the most recent snapshot when it is called.\n\nJest adds the `inlineSnapshot` string argument to the matcher in the test file (instead of an external `.snap` file) the first time that the test runs.\n\nCheck out the section on [Inline Snapshots](snapshot-testing#inline-snapshots) for more info.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/expect](https://jestjs.io/docs/expect)"
- name: expect()
  id: expect#expectvalue
  summary: The expect function is used every time you want to test a value
  belongs_to: Expect
  description: |-
    ### `expect(value)`

    The `expect` function is used every time you want to test a value. You will rarely call `expect` by itself. Instead, you will use `expect` along with a "matcher" function to assert something about a value.

    It's easier to understand this with an example. Let's say you have a method `bestLaCroixFlavor()` which is supposed to return the string `'grapefruit'`. Here's how you would test that:

    ``` typescript
    test('the best flavor is grapefruit', () => {
      expect(bestLaCroixFlavor()).toBe('grapefruit');
    });
    ```

    In this case, `toBe` is the matcher function. There are a lot of different matcher functions, documented below, to help you test different things.

    The argument to `expect` should be the value that your code produces, and any argument to the matcher should be the correct value. If you mix them up, your tests will still work, but the error messages on failing tests will look strange.
- name: expect.addSnapshotSerializer()
  id: expect#expectaddsnapshotserializerserializer
  summary: You can call expect.addSnapshotSerializer to add a module that formats application-specific data structures
  belongs_to: Expect
  description: |-
    ### `expect.addSnapshotSerializer(serializer)`

    You can call `expect.addSnapshotSerializer` to add a module that formats application-specific data structures.

    For an individual test file, an added module precedes any modules from `snapshotSerializers` configuration, which precede the default snapshot serializers for built-in JavaScript types and for React elements. The last module added is the first module tested.

    ``` typescript
    import serializer from 'my-serializer-module';
    expect.addSnapshotSerializer(serializer);

    // affects expect(value).toMatchSnapshot() assertions in the test file
    ```

    If you add a snapshot serializer in individual test files instead of adding it to `snapshotSerializers` configuration:

    - You make the dependency explicit instead of implicit.
    - You avoid limits to configuration that might cause you to eject from [create-react-app](https://github.com/facebookincubator/create-react-app).

    See [configuring Jest](configuration#snapshotserializers-arraystring) for more information.
- name: expect.any()
  id: expect#expectanyconstructor
  summary: expect.any(constructor) matches anything that was created with the given constructor or if it's a primitive that is of the passed type
  belongs_to: Expect
  description: |-
    ### `expect.any(constructor)`

    `expect.any(constructor)` matches anything that was created with the given constructor or if it's a primitive that is of the passed type. You can use it inside `toEqual` or `toBeCalledWith` instead of a literal value. For example, if you want to check that a mock function is called with a number:

    ``` typescript
    class Cat {}
    function getCat(fn) {
      return fn(new Cat());
    }

    test('randocall calls its callback with a class instance', () => {
      const mock = jest.fn();
      getCat(mock);
      expect(mock).toBeCalledWith(expect.any(Cat));
    });

    function randocall(fn) {
      return fn(Math.floor(Math.random() * 6 + 1));
    }

    test('randocall calls its callback with a number', () => {
      const mock = jest.fn();
      randocall(mock);
      expect(mock).toBeCalledWith(expect.any(Number));
    });
    ```
- name: expect.anything()
  id: expect#expectanything
  summary: expect.anything() matches anything but null or undefined
  belongs_to: Expect
  description: |-
    ### `expect.anything()`

    `expect.anything()` matches anything but `null` or `undefined`. You can use it inside `toEqual` or `toBeCalledWith` instead of a literal value. For example, if you want to check that a mock function is called with a non-null argument:

    ``` typescript
    test('map calls its argument with a non-null argument', () => {
      const mock = jest.fn();
      [1].map(x => mock(x));
      expect(mock).toBeCalledWith(expect.anything());
    });
    ```
- name: expect.arrayContaining()
  id: expect#expectarraycontainingarray
  summary: expect.arrayContaining(array) matches a received array which contains all of the elements in the expected array
  belongs_to: Expect
  description: |-
    ### `expect.arrayContaining(array)`

    `expect.arrayContaining(array)` matches a received array which contains all of the elements in the expected array. That is, the expected array is a **subset** of the received array. Therefore, it matches a received array which contains elements that are **not** in the expected array.

    You can use it instead of a literal value:

    - in `toEqual` or `toBeCalledWith`
    - to match a property in `objectContaining` or `toMatchObject`

    ``` typescript
    describe('arrayContaining', () => {
      const expected = ['Alice', 'Bob'];
      it('matches even if received contains additional elements', () => {
        expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));
      });
      it('does not match if received does not contain expected elements', () => {
        expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));
      });
    });
    ```

    ``` typescript
    describe('Beware of a misunderstanding! A sequence of dice rolls', () => {
      const expected = [1, 2, 3, 4, 5, 6];
      it('matches even with an unexpected number 7', () => {
        expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(
          expect.arrayContaining(expected),
        );
      });
      it('does not match without an expected number 2', () => {
        expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(
          expect.arrayContaining(expected),
        );
      });
    });
    ```
- name: expect.assertions()
  id: expect#expectassertionsnumber
  summary: expect.assertions(number) verifies that a certain number of assertions are called during a test
  belongs_to: Expect
  description: |-
    ### `expect.assertions(number)`

    `expect.assertions(number)` verifies that a certain number of assertions are called during a test. This is often useful when testing asynchronous code, in order to make sure that assertions in a callback actually got called.

    For example, let's say that we have a function `doAsync` that receives two callbacks `callback1` and `callback2`, it will asynchronously call both of them in an unknown order. We can test this with:

    ``` typescript
    test('doAsync calls both callbacks', () => {
      expect.assertions(2);
      function callback1(data) {
        expect(data).toBeTruthy();
      }
      function callback2(data) {
        expect(data).toBeTruthy();
      }

      doAsync(callback1, callback2);
    });
    ```

    The `expect.assertions(2)` call ensures that both callbacks actually get called.
- name: expect.closeTo()
  id: expect#expectclosetonumber-numdigits
  summary: expect.closeTo(number, numDigits?) is useful when comparing floating point numbers in object properties or array item
  belongs_to: Expect
  description: |-
    ### `expect.closeTo(number, numDigits?)`

    `expect.closeTo(number, numDigits?)` is useful when comparing floating point numbers in object properties or array item. If you need to compare a number, please use `.toBeCloseTo` instead.

    The optional `numDigits` argument limits the number of digits to check **after** the decimal point. For the default value `2`, the test criterion is `Math.abs(expected - received) < 0.005 (that is, 10 ** -2 / 2)`.

    For example, this test passes with a precision of 5 digits:

    ``` typescript
    test('compare float in object properties', () => {
      expect({
        title: '0.1 + 0.2',
        sum: 0.1 + 0.2,
      }).toEqual({
        title: '0.1 + 0.2',
        sum: expect.closeTo(0.3, 5),
      });
    });
    ```
- name: expect.extend()
  id: expect#expectextendmatchers
  summary: You can use expect.extend to add your own matchers to Jest
  belongs_to: Expect
  description: |-
    ### `expect.extend(matchers)`

    You can use `expect.extend` to add your own matchers to Jest. For example, let's say that you're testing a number utility library and you're frequently asserting that numbers appear within particular ranges of other numbers. You could abstract that into a `toBeWithinRange` matcher:

    ``` typescript
    expect.extend({
      toBeWithinRange(received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
          return {
            message: () =>
              `expected ${received} not to be within range ${floor} - ${ceiling}`,
            pass: true,
          };
        } else {
          return {
            message: () =>
              `expected ${received} to be within range ${floor} - ${ceiling}`,
            pass: false,
          };
        }
      },
    });

    test('numeric ranges', () => {
      expect(100).toBeWithinRange(90, 110);
      expect(101).not.toBeWithinRange(0, 100);
      expect({apples: 6, bananas: 3}).toEqual({
        apples: expect.toBeWithinRange(1, 10),
        bananas: expect.not.toBeWithinRange(11, 20),
      });
    });
    ```

    note

    In TypeScript, when using `@types/jest` for example, you can declare the new `toBeWithinRange` matcher in the imported module like this:

    ``` typescript
    interface CustomMatchers<R = unknown> {
      toBeWithinRange(floor: number, ceiling: number): R;
    }

    declare global {
      namespace jest {
        interface Expect extends CustomMatchers {}
        interface Matchers<R> extends CustomMatchers<R> {}
        interface InverseAsymmetricMatchers extends CustomMatchers {}
      }
    }
    ```

    #### Async Matchers

    `expect.extend` also supports async matchers. Async matchers return a Promise so you will need to await the returned value. Let's use an example matcher to illustrate the usage of them. We are going to implement a matcher called `toBeDivisibleByExternalValue`, where the divisible number is going to be pulled from an external source.

    ``` typescript
    expect.extend({
      async toBeDivisibleByExternalValue(received) {
        const externalValue = await getExternalValueFromRemoteSource();
        const pass = received % externalValue == 0;
        if (pass) {
          return {
            message: () =>
              `expected ${received} not to be divisible by ${externalValue}`,
            pass: true,
          };
        } else {
          return {
            message: () =>
              `expected ${received} to be divisible by ${externalValue}`,
            pass: false,
          };
        }
      },
    });

    test('is divisible by external value', async () => {
      await expect(100).toBeDivisibleByExternalValue();
      await expect(101).not.toBeDivisibleByExternalValue();
    });
    ```

    #### Custom Matchers API

    Matchers should return an object (or a Promise of an object) with two keys. `pass` indicates whether there was a match or not, and `message` provides a function with no arguments that returns an error message in case of failure. Thus, when `pass` is false, `message` should return the error message for when `expect(x).yourMatcher()` fails. And when `pass` is true, `message` should return the error message for when `expect(x).not.yourMatcher()` fails.

    Matchers are called with the argument passed to `expect(x)` followed by the arguments passed to `.yourMatcher(y, z)`:

    ``` typescript
    expect.extend({
      yourMatcher(x, y, z) {
        return {
          pass: true,
          message: () => '',
        };
      },
    });
    ```

    These helper functions and properties can be found on `this` inside a custom matcher:

    #### `this.isNot`

    A boolean to let you know this matcher was called with the negated `.not` modifier allowing you to display a clear and correct matcher hint (see example code).

    #### `this.promise`

    A string allowing you to display a clear and correct matcher hint:

    - `'rejects'` if matcher was called with the promise `.rejects` modifier
    - `'resolves'` if matcher was called with the promise `.resolves` modifier
    - `''` if matcher was not called with a promise modifier

    #### `this.equals(a, b)`

    This is a deep-equality function that will return `true` if two objects have the same values (recursively).

    #### `this.expand`

    A boolean to let you know this matcher was called with an `expand` option. When Jest is called with the `--expand` flag, `this.expand` can be used to determine if Jest is expected to show full diffs and errors.

    #### `this.utils`

    There are a number of helpful tools exposed on `this.utils` primarily consisting of the exports from [`jest-matcher-utils`](https://github.com/facebook/jest/tree/main/packages/jest-matcher-utils).

    The most useful ones are `matcherHint`, `printExpected` and `printReceived` to format the error messages nicely. For example, take a look at the implementation for the `toBe` matcher:

    ``` typescript
    const {diff} = require('jest-diff');
    expect.extend({
      toBe(received, expected) {
        const options = {
          comment: 'Object.is equality',
          isNot: this.isNot,
          promise: this.promise,
        };

        const pass = Object.is(received, expected);

        const message = pass
          ? () =>
              // eslint-disable-next-line prefer-template
              this.utils.matcherHint('toBe', undefined, undefined, options) +
              '\n\n' +
              `Expected: not ${this.utils.printExpected(expected)}\n` +
              `Received: ${this.utils.printReceived(received)}`
          : () => {
              const diffString = diff(expected, received, {
                expand: this.expand,
              });
              return (
                // eslint-disable-next-line prefer-template
                this.utils.matcherHint('toBe', undefined, undefined, options) +
                '\n\n' +
                (diffString && diffString.includes('- Expect')
                  ? `Difference:\n\n${diffString}`
                  : `Expected: ${this.utils.printExpected(expected)}\n` +
                    `Received: ${this.utils.printReceived(received)}`)
              );
            };

        return {actual: received, message, pass};
      },
    });
    ```

    This will print something like this:

    ``` typescript
      expect(received).toBe(expected)

        Expected value to be (using Object.is):
          "banana"
        Received:
          "apple"
    ```

    When an assertion fails, the error message should give as much signal as necessary to the user so they can resolve their issue quickly. You should craft a precise failure message to make sure users of your custom assertions have a good developer experience.

    #### Custom snapshot matchers

    To use snapshot testing inside of your custom matcher you can import `jest-snapshot` and use it from within your matcher.

    Here's a snapshot matcher that trims a string to store for a given length, `.toMatchTrimmedSnapshot(length)`:

    ``` typescript
    const {toMatchSnapshot} = require('jest-snapshot');

    expect.extend({
      toMatchTrimmedSnapshot(received, length) {
        return toMatchSnapshot.call(
          this,
          received.substring(0, length),
          'toMatchTrimmedSnapshot',
        );
      },
    });

    it('stores only 10 characters', () => {
      expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);
    });

    /*
    Stored snapshot will look like:

    exports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `"extra long"`;
    */
    ```

    It's also possible to create custom matchers for inline snapshots, the snapshots will be correctly added to the custom matchers. However, inline snapshot will always try to append to the first argument or the second when the first argument is the property matcher, so it's not possible to accept custom arguments in the custom matchers.

    ``` typescript
    const {toMatchInlineSnapshot} = require('jest-snapshot');

    expect.extend({
      toMatchTrimmedInlineSnapshot(received, ...rest) {
        return toMatchInlineSnapshot.call(this, received.substring(0, 10), ...rest);
      },
    });

    it('stores only 10 characters', () => {
      expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();
      /*
      The snapshot will be added inline like
      expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(
        `"extra long"`
      );
      */
    });
    ```

    #### async

    If your custom inline snapshot matcher is async i.e. uses `async`-`await` you might encounter an error like "Multiple inline snapshots for the same call are not supported". Jest needs additional context information to find where the custom inline snapshot matcher was used to update the snapshots properly.

    ``` typescript
    const {toMatchInlineSnapshot} = require('jest-snapshot');

    expect.extend({
      async toMatchObservationInlineSnapshot(fn, ...rest) {
        // The error (and its stacktrace) must be created before any `await`
        this.error = new Error();

        // The implementation of `observe` doesn't matter.
        // It only matters that the custom snapshot matcher is async.
        const observation = await observe(async () => {
          await fn();
        });

        return toMatchInlineSnapshot.call(this, recording, ...rest);
      },
    });

    it('observes something', async () => {
      await expect(async () => {
        return 'async action';
      }).toMatchTrimmedInlineSnapshot();
      /*
      The snapshot will be added inline like
      await expect(async () => {
        return 'async action';
      }).toMatchTrimmedInlineSnapshot(`"async action"`);
      */
    });
    ```

    #### Bail out

    Usually `jest` tries to match every snapshot that is expected in a test.

    Sometimes it might not make sense to continue the test if a prior snapshot failed. For example, when you make snapshots of a state-machine after various transitions you can abort the test once one transition produced the wrong state.

    In that case you can implement a custom snapshot matcher that throws on the first mismatch instead of collecting every mismatch.

    ``` typescript
    const {toMatchInlineSnapshot} = require('jest-snapshot');

    expect.extend({
      toMatchStateInlineSnapshot(...args) {
        this.dontThrow = () => {};

        return toMatchInlineSnapshot.call(this, ...args);
      },
    });

    let state = 'initial';

    function transition() {
      // Typo in the implementation should cause the test to fail
      if (state === 'INITIAL') {
        state = 'pending';
      } else if (state === 'pending') {
        state = 'done';
      }
    }

    it('transitions as expected', () => {
      expect(state).toMatchStateInlineSnapshot(`"initial"`);

      transition();
      // Already produces a mismatch. No point in continuing the test.
      expect(state).toMatchStateInlineSnapshot(`"loading"`);

      transition();
      expect(state).toMatchStateInlineSnapshot(`"done"`);
    });
    ```
- name: expect.hasAssertions()
  id: expect#expecthasassertions
  summary: expect.hasAssertions() verifies that at least one assertion is called during a test
  belongs_to: Expect
  description: |-
    ### `expect.hasAssertions()`

    `expect.hasAssertions()` verifies that at least one assertion is called during a test. This is often useful when testing asynchronous code, in order to make sure that assertions in a callback actually got called.

    For example, let's say that we have a few functions that all deal with state. `prepareState` calls a callback with a state object, `validateState` runs on that state object, and `waitOnState` returns a promise that waits until all `prepareState` callbacks complete. We can test this with:

    ``` typescript
    test('prepareState prepares a valid state', () => {
      expect.hasAssertions();
      prepareState(state => {
        expect(validateState(state)).toBeTruthy();
      });
      return waitOnState();
    });
    ```

    The `expect.hasAssertions()` call ensures that the `prepareState` callback actually gets called.
- name: expect.not.arrayContaining()
  id: expect#expectnotarraycontainingarray
  summary: expect.not.arrayContaining(array) matches a received array which does not contain all of the elements in the expected array
  belongs_to: Expect
  description: |-
    ### `expect.not.arrayContaining(array)`

    `expect.not.arrayContaining(array)` matches a received array which does not contain all of the elements in the expected array. That is, the expected array **is not a subset** of the received array.

    It is the inverse of `expect.arrayContaining`.

    ``` typescript
    describe('not.arrayContaining', () => {
      const expected = ['Samantha'];

      it('matches if the actual array does not contain the expected elements', () => {
        expect(['Alice', 'Bob', 'Eve']).toEqual(
          expect.not.arrayContaining(expected),
        );
      });
    });
    ```
- name: expect.not.objectContaining()
  id: expect#expectnotobjectcontainingobject
  summary: expect.not.objectContaining(object) matches any received object that does not recursively match the expected properties
  belongs_to: Expect
  description: |-
    ### `expect.not.objectContaining(object)`

    `expect.not.objectContaining(object)` matches any received object that does not recursively match the expected properties. That is, the expected object **is not a subset** of the received object. Therefore, it matches a received object which contains properties that are **not** in the expected object.

    It is the inverse of `expect.objectContaining`.

    ``` typescript
    describe('not.objectContaining', () => {
      const expected = {foo: 'bar'};

      it('matches if the actual object does not contain expected key: value pairs', () => {
        expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));
      });
    });
    ```
- name: expect.not.stringContaining()
  id: expect#expectnotstringcontainingstring
  summary: expect.not.stringContaining(string) matches the received value if it is not a string or if it is a string that does not contain the exact expected string
  belongs_to: Expect
  description: |-
    ### `expect.not.stringContaining(string)`

    `expect.not.stringContaining(string)` matches the received value if it is not a string or if it is a string that does not contain the exact expected string.

    It is the inverse of `expect.stringContaining`.

    ``` typescript
    describe('not.stringContaining', () => {
      const expected = 'Hello world!';

      it('matches if the received value does not contain the expected substring', () => {
        expect('How are you?').toEqual(expect.not.stringContaining(expected));
      });
    });
    ```
- name: expect.not.stringMatching()
  id: expect#expectnotstringmatchingstring--regexp
  summary: expect.not.stringMatching(string | regexp) matches the received value if it is not a string or if it is a string that does not match the expected string or regular expression
  belongs_to: Expect
  description: |-
    ### `expect.not.stringMatching(string | regexp)`

    `expect.not.stringMatching(string | regexp)` matches the received value if it is not a string or if it is a string that does not match the expected string or regular expression.

    It is the inverse of `expect.stringMatching`.

    ``` typescript
    describe('not.stringMatching', () => {
      const expected = /Hello world!/;

      it('matches if the received value does not match the expected regex', () => {
        expect('How are you?').toEqual(expect.not.stringMatching(expected));
      });
    });
    ```
- name: expect.objectContaining()
  id: expect#expectobjectcontainingobject
  summary: expect.objectContaining(object) matches any received object that recursively matches the expected properties
  belongs_to: Expect
  description: |-
    ### `expect.objectContaining(object)`

    `expect.objectContaining(object)` matches any received object that recursively matches the expected properties. That is, the expected object is a **subset** of the received object. Therefore, it matches a received object which contains properties that **are present** in the expected object.

    Instead of literal property values in the expected object, you can use matchers, `expect.anything()`, and so on.

    For example, let's say that we expect an `onPress` function to be called with an `Event` object, and all we need to verify is that the event has `event.x` and `event.y` properties. We can do that with:

    ``` typescript
    test('onPress gets called with the right thing', () => {
      const onPress = jest.fn();
      simulatePresses(onPress);
      expect(onPress).toBeCalledWith(
        expect.objectContaining({
          x: expect.any(Number),
          y: expect.any(Number),
        }),
      );
    });
    ```
- name: expect.stringContaining()
  id: expect#expectstringcontainingstring
  summary: expect.stringContaining(string) matches the received value if it is a string that contains the exact expected string
  belongs_to: Expect
  description: |-
    ### `expect.stringContaining(string)`

    `expect.stringContaining(string)` matches the received value if it is a string that contains the exact expected string.
- name: expect.stringMatching()
  id: expect#expectstringmatchingstring--regexp
  summary: expect.stringMatching(string | regexp) matches the received value if it is a string that matches the expected string or regular expression
  belongs_to: Expect
  description: |-
    ### `expect.stringMatching(string | regexp)`

    `expect.stringMatching(string | regexp)` matches the received value if it is a string that matches the expected string or regular expression.

    You can use it instead of a literal value:

    - in `toEqual` or `toBeCalledWith`
    - to match an element in `arrayContaining`
    - to match a property in `objectContaining` or `toMatchObject`

    This example also shows how you can nest multiple asymmetric matchers, with `expect.stringMatching` inside the `expect.arrayContaining`.

    ``` typescript
    describe('stringMatching in arrayContaining', () => {
      const expected = [
        expect.stringMatching(/^Alic/),
        expect.stringMatching(/^[BR]ob/),
      ];
      it('matches even if received contains additional elements', () => {
        expect(['Alicia', 'Roberto', 'Evelina']).toEqual(
          expect.arrayContaining(expected),
        );
      });
      it('does not match if received does not contain expected elements', () => {
        expect(['Roberto', 'Evelina']).not.toEqual(
          expect.arrayContaining(expected),
        );
      });
    });
    ```
- name: Globals
  id: api
  summary: In your test files, Jest puts each of these methods and objects into the global environment
  description: "# Globals\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\n## Methods\n\n- [Reference](#reference)\n  - [`afterAll(fn, timeout)`](#afterallfn-timeout)\n  - [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n  - [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n  - [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n  - [`describe(name, fn)`](#describename-fn)\n  - [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n  - [`describe.only(name, fn)`](#describeonlyname-fn)\n  - [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n  - [`describe.skip(name, fn)`](#describeskipname-fn)\n  - [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n  - [`test(name, fn, timeout)`](#testname-fn-timeout)\n  - [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n  - [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n  - [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n  - [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n  - [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n  - [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n  - [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n  - [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n  - [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n  - [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n  - [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n  - [`test.skip(name, fn)`](#testskipname-fn)\n  - [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n  - [`test.todo(name)`](#testtodoname)\n- [TypeScript Usage](#typescript-usage)\n  - [`.each`](#each)\n\n## Reference\n\n### `afterAll(fn, timeout)`\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n``` typescript\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n``` typescript\nconst globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n``` typescript\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n``` typescript\nconst globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest will wait for this promise to resolve before running tests.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n``` typescript\nconst myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n``` typescript\nconst binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrowError(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrowError(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n```\n\n### `describe.each(table)(name, fn, timeout)`\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1. `describe.each(table)(name, fn, timeout)`\n\n- `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row.\n  - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n- `name`: `String` the title of the test suite.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n  - Or generate unique test titles by injecting properties of test case object with `$variable`\n    - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n    - You can use `$#` to inject the index of the test case\n    - You cannot use `$variable` with the `printf` formatting except for `%%`\n- `fn`: `Function` the suite of tests to be ran, this is the function that will receive the parameters in each row as function arguments.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ndescribe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n``` typescript\ndescribe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n#### 2. `` describe.each`table`(name, fn, timeout) ``\n\n- `table`: `Tagged Template Literal`\n  - First row of variable name column headings separated with `|`\n  - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n- `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- `fn`: `Function` the suite of tests to be ran, this is the function that will receive the test data object.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ndescribe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n```\n\n### `describe.only(name, fn)`\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n``` typescript\ndescribe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\n### `describe.only.each(table)(name, fn)`\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and `` fdescribe.each`table`(name, fn) ``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`\n\n``` typescript\ndescribe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` describe.only.each`table`(name, fn) ``\n\n``` typescript\ndescribe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `describe.skip(name, fn)`\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n``` typescript\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and `` xdescribe.each`table`(name, fn) ``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`\n\n``` typescript\ndescribe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be ran\n  });\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` describe.skip.each`table`(name, fn) ``\n\n``` typescript\ndescribe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', ({a, b, expected}) => {\n  test('will not be ran', () => {\n    expect(a + b).toBe(expected); // will not be ran\n  });\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `test(name, fn, timeout)`\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n``` typescript\ntest('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\n> Note: If a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. Jest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test callbacks. See how to test async code [here](asynchronous#callbacks).\n\nFor example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n``` typescript\ntest('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves as well.\n\n### `test.concurrent(name, fn, timeout)`\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\nUse `test.concurrent` if you want the test to run concurrently.\n\n> Note: `test.concurrent` is considered experimental - see [here](https://github.com/facebook/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\n``` typescript\ntest.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n```\n\n> Note: Use `maxConcurrency` in configuration to prevents Jest from executing more than the specified amount of tests at the same time\n\n### `test.concurrent.each(table)(name, fn, timeout)`\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1. `test.concurrent.each(table)(name, fn, timeout)`\n\n- `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row.\n  - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n- `name`: `String` the title of the test block.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n- `fn`: `Function` the test to be ran, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ntest.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### 2. `` test.concurrent.each`table`(name, fn, timeout) ``\n\n- `table`: `Tagged Template Literal`\n  - First row of variable name column headings separated with `|`\n  - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n- `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- `fn`: `Function` the test to be ran, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ntest.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`\n\n``` typescript\ntest.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` test.only.each`table`(name, fn) ``\n\n``` typescript\ntest.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`\n\n``` typescript\ntest.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be ran\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` test.concurrent.skip.each`table`(name, fn) ``\n\n``` typescript\ntest.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be ran\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `test.each(table)(name, fn, timeout)`\n\nAlso under the alias: `it.each(table)(name, fn)` and `` it.each`table`(name, fn) ``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1. `test.each(table)(name, fn, timeout)`\n\n- `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row.\n  - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n- `name`: `String` the title of the test block.\n  - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n    - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n    - `%s`- String.\n    - `%d`- Number.\n    - `%i` - Integer.\n    - `%f` - Floating point value.\n    - `%j` - JSON.\n    - `%o` - Object.\n    - `%#` - Index of the test case.\n    - `%%` - single percent sign ('%'). This does not consume an argument.\n  - Or generate unique test titles by injecting properties of test case object with `$variable`\n    - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n    - You can use `$#` to inject the index of the test case\n    - You cannot use `$variable` with the `printf` formatting except for `%%`\n- `fn`: `Function` the test to be ran, this is the function that will receive the parameters in each row as function arguments.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n``` typescript\ntest.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n#### 2. `` test.each`table`(name, fn, timeout) ``\n\n- `table`: `Tagged Template Literal`\n  - First row of variable name column headings separated with `|`\n  - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n- `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n  - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n- `fn`: `Function` the test to be ran, this is the function that will receive the test data object.\n- Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*\n\nExample:\n\n``` typescript\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n### `test.failing(name, fn, timeout)`\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of tests i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n``` typescript\ntest.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n```\n\n### `test.failing.each(name, fn, timeout)`\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and `` it.failing.each`table`(name, fn) ``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n``` typescript\ntest.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n```\n\n### `test.only.failing(name, fn, timeout)`\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*\n\nFor example, let's say you had these tests:\n\n``` typescript\ntest.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, `` it.only.each`table`(name, fn) `` and `` fit.each`table`(name, fn) ``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`\n\n``` typescript\ntest.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` test.only.each`table`(name, fn) ``\n\n``` typescript\ntest.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `test.skip(name, fn)`\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n``` typescript\ntest('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, `` it.skip.each`table`(name, fn) ``, `` xit.each`table`(name, fn) `` and `` xtest.each`table`(name, fn) ``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`\n\n``` typescript\ntest.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be ran\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n#### `` test.skip.each`table`(name, fn) ``\n\n``` typescript\ntest.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be ran\n});\n\ntest('will be ran', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n```\n\n### `test.todo(name)`\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n*Note*: If you supply a test callback function then the `test.todo` will throw an error. If you have already implemented the test and it is broken and you do not want it to run, then use `test.skip` instead.\n\n#### API\n\n- `name`: `String` the title of the test plan.\n\nExample:\n\n``` typescript\nconst add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n```\n\n## TypeScript Usage\n\ninfo\n\nThese TypeScript usage tips and caveats are only applicable if you import from `'@jest/globals'`:\n\n``` typescript\nimport {describe, test} from '@jest/globals';\n```\n\n### `.each`\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n``` typescript\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n```\n\nOr declared separately as a variable:\n\n``` typescript\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\n#### Array of arrays\n\nThe array of arrays style will work smoothly with inlined tables:\n\n``` typescript\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n``` typescript\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n```\n\n#### Template literal\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n``` typescript\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n```\n\nOtherwise it will require a generic type argument:\n\n``` typescript\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n```\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/api](https://jestjs.io/docs/api)"
- name: jest
  id: cli#jest-regexfortestfiles
  summary: When you run jest with an argument, that argument is treated as a regular expression to match against files in your project
  belongs_to: Jest CLI Options
  description: |-
    ### `jest <regexForTestFiles>`

    When you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest "my.*(complex)?pattern"`. On Windows, you will need to use `/` as a path separator or escape `\` as `\\`.
- name: jest --bail[
  id: cli#--bailn
  summary: 'Alias: -b'
  belongs_to: Jest CLI Options
  description: |-
    ### `--bail[=<n>]`

    Alias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.
- name: jest --cache
  id: cli#--cache
  summary: Whether to use the cache
  belongs_to: Jest CLI Options
  description: |-
    ### `--cache`

    Whether to use the cache. Defaults to true. Disable the cache using `--no-cache`.

    caution

    The cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.

    If you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.
- name: jest --changedFilesWithAncestor
  id: cli#--changedfileswithancestor
  summary: Runs tests related to the current changes and the changes made in the last commit
  belongs_to: Jest CLI Options
  description: |-
    ### `--changedFilesWithAncestor`

    Runs tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.
- name: jest --changedSince
  id: cli#--changedsince
  summary: Runs tests related to the changes since the provided branch or commit hash
  belongs_to: Jest CLI Options
  description: |-
    ### `--changedSince`

    Runs tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.
- name: jest --ci
  id: cli#--ci
  summary: When this option is provided, Jest will assume it is running in a CI environment
  belongs_to: Jest CLI Options
  description: |-
    ### `--ci`

    When this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.
- name: jest --clearCache
  id: cli#--clearcache
  summary: Deletes the Jest cache directory and then exits without running tests
  belongs_to: Jest CLI Options
  description: |-
    ### `--clearCache`

    Deletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.

    caution

    Clearing the cache will reduce performance.
- name: jest --clearMocks
  id: cli#--clearmocks
  summary: Automatically clear mock calls, instances, contexts and results before every test
  belongs_to: Jest CLI Options
  description: |-
    ### `--clearMocks`

    Automatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.
- name: jest --collectCoverageFrom
  id: cli#--collectcoveragefromglob
  summary: A glob pattern relative to rootDir matching the files that coverage info needs to be collected from
  belongs_to: Jest CLI Options
  description: |-
    ### `--collectCoverageFrom=<glob>`

    A glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.
- name: jest --colors
  id: cli#--colors
  summary: Forces test results output highlighting even if stdout is not a TTY
  belongs_to: Jest CLI Options
  description: |-
    ### `--colors`

    Forces test results output highlighting even if stdout is not a TTY.
- name: jest --config
  id: cli#--configpath
  summary: 'Alias: -c'
  belongs_to: Jest CLI Options
  description: |-
    ### `--config=<path>`

    Alias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.
- name: jest --coverage[
  id: cli#--coverageboolean
  summary: 'Alias: --collectCoverage'
  belongs_to: Jest CLI Options
  description: |-
    ### `--coverage[=<boolean>]`

    Alias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.
- name: jest --coverageProvider
  id: cli#--coverageproviderprovider
  summary: Indicates which provider should be used to instrument code for coverage
  belongs_to: Jest CLI Options
  description: |-
    ### `--coverageProvider=<provider>`

    Indicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.

    Note that using `v8` is considered experimental. This uses V8's builtin code coverage rather than one based on Babel. It is not as well tested, and it has also improved in the last few releases of Node. Using the latest versions of node (v14 at the time of this writing) will yield better results.
- name: jest --debug
  id: cli#--debug
  summary: Print debugging info about your Jest config
  belongs_to: Jest CLI Options
  description: |-
    ### `--debug`

    Print debugging info about your Jest config.
- name: jest --detectOpenHandles
  id: cli#--detectopenhandles
  summary: Attempt to collect and print open handles preventing Jest from exiting cleanly
  belongs_to: Jest CLI Options
  description: |-
    ### `--detectOpenHandles`

    Attempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.
- name: jest --env
  id: cli#--envenvironment
  summary: The test environment used for all tests
  belongs_to: Jest CLI Options
  description: |-
    ### `--env=<environment>`

    The test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.
- name: jest --errorOnDeprecated
  id: cli#--errorondeprecated
  summary: Make calling deprecated APIs throw helpful error messages
  belongs_to: Jest CLI Options
  description: |-
    ### `--errorOnDeprecated`

    Make calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.
- name: jest --expand
  id: cli#--expand
  summary: 'Alias: -e'
  belongs_to: Jest CLI Options
  description: |-
    ### `--expand`

    Alias: `-e`. Use this flag to show full diffs and errors instead of a patch.
- name: jest --filter
  id: cli#--filterfile
  summary: Path to a module exporting a filtering function
  belongs_to: Jest CLI Options
  description: |-
    ### `--filter=<file>`

    Path to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with the "filtered" property. Especially useful when used in conjunction with a testing infrastructure to filter known broken, e.g.

    ``` typescript
    module.exports = testPaths => {
      const allowedPaths = testPaths.filter(filteringFunction); // ["path1.spec.js", "path2.spec.js", etc]
      return {
        filtered: allowedPaths,
      };
    };
    ```

    my-filter.js
- name: jest --findRelatedTests
  id: cli#--findrelatedtests-spaceseparatedlistofsourcefiles
  summary: Find and run the tests that cover a space separated list of source files that were passed in as arguments
  belongs_to: Jest CLI Options
  description: |-
    ### `--findRelatedTests <spaceSeparatedListOfSourceFiles>`

    Find and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.
- name: jest --forceExit
  id: cli#--forceexit
  summary: Force Jest to exit after all tests have completed running
  belongs_to: Jest CLI Options
  description: |-
    ### `--forceExit`

    Force Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.

    caution

    This feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.
- name: jest --help
  id: cli#--help
  summary: Show the help information, similar to this page
  belongs_to: Jest CLI Options
  description: |-
    ### `--help`

    Show the help information, similar to this page.
- name: jest --ignoreProjects
  id: cli#--ignoreprojects-project1--projectn
  summary: Ignore the tests of the specified projects
  belongs_to: Jest CLI Options
  description: |-
    ### `--ignoreProjects <project1> ... <projectN>`

    Ignore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.
- name: jest --init
  id: cli#--init
  summary: Generate a basic configuration file
  belongs_to: Jest CLI Options
  description: |-
    ### `--init`

    Generate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.
- name: jest --injectGlobals
  id: cli#--injectglobals
  summary: Insert Jest's globals (expect, test, describe, beforeEach etc.) into the global environment
  belongs_to: Jest CLI Options
  description: |-
    ### `--injectGlobals`

    Insert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.

    ``` typescript
    import {expect, jest, test} from '@jest/globals';

    jest.useFakeTimers();

    test('some test', () => {
      expect(Date.now()).toBe(0);
    });
    ```

    note

    This option is only supported using the default `jest-circus` test runner.
- name: jest --json
  id: cli#--json
  summary: Prints the test results in JSON
  belongs_to: Jest CLI Options
  description: |-
    ### `--json`

    Prints the test results in JSON. This mode will send all other test output and user messages to stderr.
- name: jest --lastCommit
  id: cli#--lastcommit
  summary: Run all tests affected by file changes in the last commit made
  belongs_to: Jest CLI Options
  description: |-
    ### `--lastCommit`

    Run all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.
- name: jest --listTests
  id: cli#--listtests
  summary: Lists all test files that Jest will run given the arguments, and exits
  belongs_to: Jest CLI Options
  description: |-
    ### `--listTests`

    Lists all test files that Jest will run given the arguments, and exits.
- name: jest --logHeapUsage
  id: cli#--logheapusage
  summary: Logs the heap usage after every test
  belongs_to: Jest CLI Options
  description: |-
    ### `--logHeapUsage`

    Logs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.
- name: jest --maxConcurrency
  id: cli#--maxconcurrencynum
  summary: Prevents Jest from executing more than the specified amount of tests at the same time
  belongs_to: Jest CLI Options
  description: |-
    ### `--maxConcurrency=<num>`

    Prevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.
- name: jest --maxWorkers
  id: cli#--maxworkersnumstring
  summary: 'Alias: -w'
  belongs_to: Jest CLI Options
  description: |-
    ### `--maxWorkers=<num>|<string>`

    Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.

    For environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`
- name: jest --noStackTrace
  id: cli#--nostacktrace
  summary: Disables stack trace in test results output
  belongs_to: Jest CLI Options
  description: |-
    ### `--noStackTrace`

    Disables stack trace in test results output.
- name: jest --notify
  id: cli#--notify
  summary: Activates notifications for test results
  belongs_to: Jest CLI Options
  description: |-
    ### `--notify`

    Activates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.
- name: jest --onlyChanged
  id: cli#--onlychanged
  summary: 'Alias: -o'
  belongs_to: Jest CLI Options
  description: |-
    ### `--onlyChanged`

    Alias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).
- name: jest --outputFile
  id: cli#--outputfilefilename
  summary: Write test results to a file when the --json option is also specified
  belongs_to: Jest CLI Options
  description: |-
    ### `--outputFile=<filename>`

    Write test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](configuration#testresultsprocessor-string).
- name: jest --passWithNoTests
  id: cli#--passwithnotests
  summary: Allows the test suite to pass when no files are found
  belongs_to: Jest CLI Options
  description: |-
    ### `--passWithNoTests`

    Allows the test suite to pass when no files are found.
- name: jest --projects
  id: cli#--projects-path1--pathn
  summary: Run tests from one or more projects, found in the specified paths; also takes path globs
  belongs_to: Jest CLI Options
  description: |-
    ### `--projects <path1> ... <pathN>`

    Run tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](configuration#projects-arraystring--projectconfig) configuration option. Note that if configuration files are found in the specified paths, *all* projects specified within those configuration files will be run.
- name: jest --reporters
  id: cli#--reporters
  summary: Run tests with specified reporters
  belongs_to: Jest CLI Options
  description: |-
    ### `--reporters`

    Run tests with specified reporters. [Reporter options](configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:

    `jest --reporters="default" --reporters="jest-junit"`
- name: jest --resetMocks
  id: cli#--resetmocks
  summary: Automatically reset mock state before every test
  belongs_to: Jest CLI Options
  description: |-
    ### `--resetMocks`

    Automatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.
- name: jest --restoreMocks
  id: cli#--restoremocks
  summary: Automatically restore mock state and implementation before every test
  belongs_to: Jest CLI Options
  description: |-
    ### `--restoreMocks`

    Automatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.
- name: jest --roots
  id: cli#--roots
  summary: A list of paths to directories that Jest should use to search for files in
  belongs_to: Jest CLI Options
  description: |-
    ### `--roots`

    A list of paths to directories that Jest should use to search for files in.
- name: jest --runInBand
  id: cli#--runinband
  summary: 'Alias: -i'
  belongs_to: Jest CLI Options
  description: |-
    ### `--runInBand`

    Alias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.
- name: jest --runTestsByPath
  id: cli#--runtestsbypath
  summary: Run only the tests that were specified with their exact paths
  belongs_to: Jest CLI Options
  description: |-
    ### `--runTestsByPath`

    Run only the tests that were specified with their exact paths.

    tip

    The default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.
- name: jest --selectProjects
  id: cli#--selectprojects-project1--projectn
  summary: Run the tests of the specified projects
  belongs_to: Jest CLI Options
  description: |-
    ### `--selectProjects <project1> ... <projectN>`

    Run the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.
- name: jest --setupFilesAfterEnv
  id: cli#--setupfilesafterenv-path1--pathn
  summary: A list of paths to modules that run some code to configure or to set up the testing framework before each test
  belongs_to: Jest CLI Options
  description: |-
    ### `--setupFilesAfterEnv <path1> ... <pathN>`

    A list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.
- name: jest --shard
  id: cli#--shard
  summary: The test suite shard to execute in a format of (?<shardIndex>\d+)/(?<shardCount>\d+)
  belongs_to: Jest CLI Options
  description: |-
    ### `--shard`

    The test suite shard to execute in a format of `(?<shardIndex>\d+)/(?<shardCount>\d+)`.

    `shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.

    `shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.

    When `shard` is specified the configured [`testSequencer`](configuration#testsequencer-string) has to implement a `shard` method.

    For example, to split the suite into three shards, each running one third of the tests:

    ``` typescript
    jest --shard=1/3
    jest --shard=2/3
    jest --shard=3/3
    ```
- name: jest --showConfig
  id: cli#--showconfig
  summary: Print your Jest config and then exits
  belongs_to: Jest CLI Options
  description: |-
    ### `--showConfig`

    Print your Jest config and then exits.
- name: jest --silent
  id: cli#--silent
  summary: Prevent tests from printing messages through the console
  belongs_to: Jest CLI Options
  description: |-
    ### `--silent`

    Prevent tests from printing messages through the console.
- name: jest --testEnvironmentOptions
  id: cli#--testenvironmentoptionsjson-string
  summary: A JSON string with options that will be passed to the testEnvironment
  belongs_to: Jest CLI Options
  description: |-
    ### `--testEnvironmentOptions=<json string>`

    A JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.
- name: jest --testLocationInResults
  id: cli#--testlocationinresults
  summary: Adds a location field to test results
  belongs_to: Jest CLI Options
  description: |-
    ### `--testLocationInResults`

    Adds a `location` field to test results. Useful if you want to report the location of a test in a reporter.

    Note that `column` is 0-indexed while `line` is not.

    ``` typescript
    {
      "column": 4,
      "line": 5
    }
    ```
- name: jest --testMatch
  id: cli#--testmatch-glob1--globn
  summary: The glob patterns Jest uses to detect test files
  belongs_to: Jest CLI Options
  description: |-
    ### `--testMatch glob1 ... globN`

    The glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](configuration#testmatch-arraystring) for details.
- name: jest --testNamePattern
  id: cli#--testnamepatternregex
  summary: 'Alias: -t'
  belongs_to: Jest CLI Options
  description: |-
    ### `--testNamePattern=<regex>`

    Alias: -t. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like "GET /api/posts with auth", then you can use jest -t=auth.

    tip

    The regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.
- name: jest --testPathIgnorePatterns
  id: cli#--testpathignorepatternsregexarray
  summary: A single or array of regexp pattern strings that are tested against all tests paths before executing the test
  belongs_to: Jest CLI Options
  description: |-
    ### `--testPathIgnorePatterns=<regex>|[array]`

    A single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.

    To pass as an array use escaped parentheses and space delimited regexps such as `\(/node_modules/ /tests/e2e/\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.
- name: jest --testPathPattern
  id: cli#--testpathpatternregex
  summary: A regexp pattern string that is matched against all tests paths before executing the test
  belongs_to: Jest CLI Options
  description: |-
    ### `--testPathPattern=<regex>`

    A regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\` as `\\`.
- name: jest --testRunner
  id: cli#--testrunnerpath
  summary: Lets you specify a custom test runner
  belongs_to: Jest CLI Options
  description: |-
    ### `--testRunner=<path>`

    Lets you specify a custom test runner.
- name: jest --testSequencer
  id: cli#--testsequencerpath
  summary: Lets you specify a custom test sequencer
  belongs_to: Jest CLI Options
  description: |-
    ### `--testSequencer=<path>`

    Lets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](configuration#testsequencer-string) for details.
- name: jest --testTimeout
  id: cli#--testtimeoutnumber
  summary: Default timeout of a test in milliseconds
  belongs_to: Jest CLI Options
  description: |-
    ### `--testTimeout=<number>`

    Default timeout of a test in milliseconds. Default value: 5000.
- name: jest --updateSnapshot
  id: cli#--updatesnapshot
  summary: 'Alias: -u'
  belongs_to: Jest CLI Options
  description: |-
    ### `--updateSnapshot`

    Alias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.
- name: jest --useStderr
  id: cli#--usestderr
  summary: Divert all output to stderr
  belongs_to: Jest CLI Options
  description: |-
    ### `--useStderr`

    Divert all output to stderr.
- name: jest --verbose
  id: cli#--verbose
  summary: Display individual test results with the test suite hierarchy
  belongs_to: Jest CLI Options
  description: |-
    ### `--verbose`

    Display individual test results with the test suite hierarchy.
- name: jest --version
  id: cli#--version
  summary: 'Alias: -v'
  belongs_to: Jest CLI Options
  description: |-
    ### `--version`

    Alias: `-v`. Print the version and exit.
- name: jest --watch
  id: cli#--watch
  summary: Watch files for changes and rerun tests related to changed files
  belongs_to: Jest CLI Options
  description: |-
    ### `--watch`

    Watch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.
- name: jest --watchAll
  id: cli#--watchall
  summary: Watch files for changes and rerun all tests when something changes
  belongs_to: Jest CLI Options
  description: |-
    ### `--watchAll`

    Watch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.

    Use `--watchAll=false` to explicitly disable the watch mode. Note that in most CI environments, this is automatically handled for you.
- name: jest --watchman
  id: cli#--watchman
  summary: Whether to use watchman for file crawling
  belongs_to: Jest CLI Options
  description: "### `--watchman`\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/cli](https://jestjs.io/docs/cli)"
- name: Jest CLI Options
  id: cli
  summary: The jest command line runner has a number of useful options
  description: "# Jest CLI Options\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line\n\nRun all tests (default):\n\n``` typescript\njest\n```\n\nRun only the tests that were specified with a pattern or filename:\n\n``` typescript\njest my-test #or\njest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\n``` typescript\njest -o\n```\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n``` typescript\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\n``` typescript\njest -t name-of-spec\n```\n\nRun watch mode:\n\n``` typescript\njest --watch #runs jest -o by default\njest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with yarn\n\nIf you run Jest via `yarn test`, you can pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\n``` typescript\njest -u -t=\"ColorPicker\"\n```\n\nyou can use:\n\n``` typescript\nyarn test -u -t=\"ColorPicker\"\n```\n\n## Using with npm scripts\n\nIf you run Jest via `npm test`, you can still use the command line arguments by inserting a `--` between `npm test` and the Jest arguments.\n\nInstead of:\n\n``` typescript\njest -u -t=\"ColorPicker\"\n```\n\nyou can use:\n\n``` typescript\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n``` typescript\njest --collect-coverage\njest --collectCoverage\n```\n\nArguments can also be mixed:\n\n``` typescript\njest --update-snapshot --detectOpenHandles\n```\n\n## Options\n\nnote\n\nCLI options take precedence over values from the [Configuration](configuration).\n\n- [Using with npm scripts](#using-with-npm-scripts)\n- [Camelcase & dashed args support](#camelcase--dashed-args-support)\n- [Options](#options)\n- [Reference](#reference)\n  - [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n  - [`--bail[=<n>]`](#--bailn)\n  - [`--cache`](#--cache)\n  - [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n  - [`--changedSince`](#--changedsince)\n  - [`--ci`](#--ci)\n  - [`--clearCache`](#--clearcache)\n  - [`--clearMocks`](#--clearmocks)\n  - [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n  - [`--colors`](#--colors)\n  - [`--config=<path>`](#--configpath)\n  - [`--coverage[=<boolean>]`](#--coverageboolean)\n  - [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n  - [`--debug`](#--debug)\n  - [`--detectOpenHandles`](#--detectopenhandles)\n  - [`--env=<environment>`](#--envenvironment)\n  - [`--errorOnDeprecated`](#--errorondeprecated)\n  - [`--expand`](#--expand)\n  - [`--filter=<file>`](#--filterfile)\n  - [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n  - [`--forceExit`](#--forceexit)\n  - [`--help`](#--help)\n  - [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n  - [`--init`](#--init)\n  - [`--injectGlobals`](#--injectglobals)\n  - [`--json`](#--json)\n  - [`--lastCommit`](#--lastcommit)\n  - [`--listTests`](#--listtests)\n  - [`--logHeapUsage`](#--logheapusage)\n  - [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n  - [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n  - [`--noStackTrace`](#--nostacktrace)\n  - [`--notify`](#--notify)\n  - [`--onlyChanged`](#--onlychanged)\n  - [`--outputFile=<filename>`](#--outputfilefilename)\n  - [`--passWithNoTests`](#--passwithnotests)\n  - [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n  - [`--reporters`](#--reporters)\n  - [`--resetMocks`](#--resetmocks)\n  - [`--restoreMocks`](#--restoremocks)\n  - [`--roots`](#--roots)\n  - [`--runInBand`](#--runinband)\n  - [`--runTestsByPath`](#--runtestsbypath)\n  - [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n  - [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n  - [`--shard`](#--shard)\n  - [`--showConfig`](#--showconfig)\n  - [`--silent`](#--silent)\n  - [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n  - [`--testLocationInResults`](#--testlocationinresults)\n  - [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n  - [`--testNamePattern=<regex>`](#--testnamepatternregex)\n  - [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n  - [`--testPathPattern=<regex>`](#--testpathpatternregex)\n  - [`--testRunner=<path>`](#--testrunnerpath)\n  - [`--testSequencer=<path>`](#--testsequencerpath)\n  - [`--testTimeout=<number>`](#--testtimeoutnumber)\n  - [`--updateSnapshot`](#--updatesnapshot)\n  - [`--useStderr`](#--usestderr)\n  - [`--verbose`](#--verbose)\n  - [`--version`](#--version)\n  - [`--watch`](#--watch)\n  - [`--watchAll`](#--watchall)\n  - [`--watchman`](#--watchman)\n\n## Reference\n\n### `jest <regexForTestFiles>`\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`\n\nForces test results output highlighting even if stdout is not a TTY.\n\n### `--config=<path>`\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageProvider=<provider>`\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\nNote that using `v8` is considered experimental. This uses V8's builtin code coverage rather than one based on Babel. It is not as well tested, and it has also improved in the last few releases of Node. Using the latest versions of node (v14 at the time of this writing) will yield better results.\n\n### `--debug`\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with the \"filtered\" property. Especially useful when used in conjunction with a testing infrastructure to filter known broken, e.g.\n\n``` typescript\nmodule.exports = testPaths => {\n  const allowedPaths = testPaths.filter(filteringFunction); // [\"path1.spec.js\", \"path2.spec.js\", etc]\n  return {\n    filtered: allowedPaths,\n  };\n};\n```\n\nmy-filter.js\n\n### `--findRelatedTests <spaceSeparatedListOfSourceFiles>`\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--init`\n\nGenerate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.\n\n### `--injectGlobals`\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\n\njest.useFakeTimers();\n\ntest('some test', () => {\n  expect(Date.now()).toBe(0);\n});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`\n\nDisables stack trace in test results output.\n\n### `--notify`\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--outputFile=<filename>`\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](configuration#projects-arraystring--projectconfig) configuration option. Note that if configuration files are found in the specified paths, *all* projects specified within those configuration files will be run.\n\n### `--reporters`\n\nRun tests with specified reporters. [Reporter options](configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`\n\nRun only the tests that were specified with their exact paths.\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--selectProjects <project1> ... <projectN>`\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n``` typescript\njest --shard=1/3\njest --shard=2/3\njest --shard=3/3\n```\n\n### `--showConfig`\n\nPrint your Jest config and then exits.\n\n### `--silent`\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nNote that `column` is 0-indexed while `line` is not.\n\n``` typescript\n{\n  \"column\": 4,\n  \"line\": 5\n}\n```\n\n### `--testMatch glob1 ... globN`\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`\n\nAlias: -t. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like \"GET /api/posts with auth\", then you can use jest -t=auth.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPattern=<regex>`\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`\n\nDivert all output to stderr.\n\n### `--verbose`\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`\n\nAlias: `-v`. Print the version and exit.\n\n### `--watch`\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\n### `--watchAll`\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\nUse `--watchAll=false` to explicitly disable the watch mode. Note that in most CI environments, this is automatically handled for you.\n\n### `--watchman`\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/cli](https://jestjs.io/docs/cli)"
- name: Jest Community
  id: jest-community
  summary: The community around Jest is working hard to make the testing experience even greater
  description: "# Jest Community\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n- [vscode-jest](https://github.com/jest-community/vscode-jest)\n- [jest-extended](https://github.com/jest-community/jest-extended)\n- [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n- [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/jest-community](https://jestjs.io/docs/jest-community)"
- name: Jest Platform
  id: jest-platform
  summary: You can cherry pick specific features of Jest and use them as standalone packages
  description: "# Jest Platform\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n- `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n- `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example\n\n``` typescript\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// print the set of modified files since last commit in the current repo\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/facebook/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example\n\n``` typescript\nconst {diff} = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n## jest-docblock\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example\n\n``` typescript\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/facebook/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example\n\n``` typescript\nconst {getType} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n## jest-validate\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n- `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n- `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example\n\n``` typescript\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/facebook/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example\n\n``` typescript\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n```\n\nheavy-task.js\n\n``` typescript\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\nmain.js\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/facebook/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example\n\n``` typescript\nconst {format: prettyFormat} = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/facebook/jest/blob/main/packages/pretty-format/README.md).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/jest-platform](https://jestjs.io/docs/jest-platform)"
- name: jest.advanceTimersByTime()
  id: jest-object#jestadvancetimersbytimemstorun
  summary: Executes only the macro task queue (i.e
  belongs_to: The Jest Object
  description: |-
    ### `jest.advanceTimersByTime(msToRun)`

    Executes only the macro task queue (i.e. all tasks queued by `setTimeout()` or `setInterval()` and `setImmediate()`).

    When this API is called, all timers are advanced by `msToRun` milliseconds. All pending "macro-tasks" that have been queued via `setTimeout()` or `setInterval()`, and would be executed within this time frame will be executed. Additionally, if those macro-tasks schedule new macro-tasks that would be executed within the same time frame, those will be executed until there are no more macro-tasks remaining in the queue, that should be run within `msToRun` milliseconds.
- name: jest.advanceTimersToNextTimer()
  id: jest-object#jestadvancetimerstonexttimersteps
  summary: Advances all timers by the needed milliseconds so that only the next timeouts/intervals will run
  belongs_to: The Jest Object
  description: |-
    ### `jest.advanceTimersToNextTimer(steps)`

    Advances all timers by the needed milliseconds so that only the next timeouts/intervals will run.

    Optionally, you can provide `steps`, so it will run `steps` amount of next timeouts/intervals.
- name: jest.clearAllMocks()
  id: jest-object#jestclearallmocks
  summary: Clears the mock.calls, mock.instances, mock.contexts and mock.results properties of all mocks
  belongs_to: The Jest Object
  description: |-
    ### `jest.clearAllMocks()`

    Clears the `mock.calls`, `mock.instances`, `mock.contexts` and `mock.results` properties of all mocks. Equivalent to calling [`.mockClear()`](mock-function-api#mockfnmockclear) on every mocked function.

    Returns the `jest` object for chaining.
- name: jest.clearAllTimers()
  id: jest-object#jestclearalltimers
  summary: Removes any pending timers from the timer system
  belongs_to: The Jest Object
  description: |-
    ### `jest.clearAllTimers()`

    Removes any pending timers from the timer system.

    This means, if any timers have been scheduled (but have not yet executed), they will be cleared and will never have the opportunity to execute in the future.
- name: jest.createMockFromModule()
  id: jest-object#jestcreatemockfrommodulemodulename
  summary: Given the name of a module, use the automatic mocking system to generate a mocked version of the module for you
  belongs_to: The Jest Object
  description: |-
    ### `jest.createMockFromModule(moduleName)`

    ##### renamed in Jest **26.0.0+**

    Also under the alias: `.genMockFromModule(moduleName)`

    Given the name of a module, use the automatic mocking system to generate a mocked version of the module for you.

    This is useful when you want to create a [manual mock](manual-mocks) that extends the automatic mock's behavior.

    Example:

    ``` typescript
    export default {
      authorize: () => {
        return 'token';
      },
      isAuthorized: secret => secret === 'wizard',
    };
    ```

    utils.js

    ``` typescript
    const utils = jest.createMockFromModule('../utils').default;
    utils.isAuthorized = jest.fn(secret => secret === 'not wizard');

    test('implementation created by jest.createMockFromModule', () => {
      expect(utils.authorize.mock).toBeTruthy();
      expect(utils.isAuthorized('not wizard')).toEqual(true);
    });
    ```

    \_\_tests\_\_/createMockFromModule.test.js

    This is how `createMockFromModule` will mock the following data types:

    #### `Function`

    Creates a new [mock function](mock-functions). The new function has no formal parameters and when called will return `undefined`. This functionality also applies to `async` functions.

    #### `Class`

    Creates a new class. The interface of the original class is maintained, all of the class member functions and properties will be mocked.

    #### `Object`

    Creates a new deeply cloned object. The object keys are maintained and their values are mocked.

    #### `Array`

    Creates a new empty array, ignoring the original.

    #### `Primitives`

    Creates a new property with the same primitive value as the original property.

    Example:

    ``` typescript
    module.exports = {
      function: function square(a, b) {
        return a * b;
      },
      asyncFunction: async function asyncSquare(a, b) {
        const result = (await a) * b;
        return result;
      },
      class: new (class Bar {
        constructor() {
          this.array = [1, 2, 3];
        }
        foo() {}
      })(),
      object: {
        baz: 'foo',
        bar: {
          fiz: 1,
          buzz: [1, 2, 3],
        },
      },
      array: [1, 2, 3],
      number: 123,
      string: 'baz',
      boolean: true,
      symbol: Symbol.for('a.b.c'),
    };
    ```

    example.js

    ``` typescript
    const example = jest.createMockFromModule('./example');

    test('should run example code', () => {
      // creates a new mocked function with no formal arguments.
      expect(example.function.name).toEqual('square');
      expect(example.function.length).toEqual(0);

      // async functions get the same treatment as standard synchronous functions.
      expect(example.asyncFunction.name).toEqual('asyncSquare');
      expect(example.asyncFunction.length).toEqual(0);

      // creates a new class with the same interface, member functions and properties are mocked.
      expect(example.class.constructor.name).toEqual('Bar');
      expect(example.class.foo.name).toEqual('foo');
      expect(example.class.array.length).toEqual(0);

      // creates a deeply cloned version of the original object.
      expect(example.object).toEqual({
        baz: 'foo',
        bar: {
          fiz: 1,
          buzz: [],
        },
      });

      // creates a new empty array, ignoring the original array.
      expect(example.array.length).toEqual(0);

      // creates a new property with the same primitive value as the original property.
      expect(example.number).toEqual(123);
      expect(example.string).toEqual('baz');
      expect(example.boolean).toEqual(true);
      expect(example.symbol).toEqual(Symbol.for('a.b.c'));
    });
    ```

    \_\_tests\_\_/example.test.js
- name: jest.disableAutomock()
  id: jest-object#jestdisableautomock
  summary: Disables automatic mocking in the module loader
  belongs_to: The Jest Object
  description: |-
    ### `jest.disableAutomock()`

    Disables automatic mocking in the module loader.

    > See `automock` section of [configuration](configuration#automock-boolean) for more information

    After this method is called, all `require()`s will return the real versions of each module (rather than a mocked version).

    Jest configuration:

    ``` typescript
    {
      "automock": true
    }
    ```

    Example:

    ``` typescript
    export default {
      authorize: () => {
        return 'token';
      },
    };
    ```

    utils.js

    ``` typescript
    import utils from '../utils';

    jest.disableAutomock();

    test('original implementation', () => {
      // now we have the original implementation,
      // even if we set the automocking in a jest configuration
      expect(utils.authorize()).toBe('token');
    });
    ```

    \_\_tests\_\_/disableAutomocking.js

    This is usually useful when you have a scenario where the number of dependencies you want to mock is far less than the number of dependencies that you don't. For example, if you're writing a test for a module that uses a large number of dependencies that can be reasonably classified as "implementation details" of the module, then you likely do not want to mock them.

    Examples of dependencies that might be considered "implementation details" are things ranging from language built-ins (e.g. Array.prototype methods) to highly common utility methods (e.g. underscore/lo-dash, array utilities, etc) and entire libraries like React.js.

    Returns the `jest` object for chaining.

    *Note: this method was previously called `autoMockOff`. When using `babel-jest`, calls to `disableAutomock` will automatically be hoisted to the top of the code block. Use `autoMockOff` if you want to explicitly avoid this behavior.*
- name: jest.doMock()
  id: jest-object#jestdomockmodulename-factory-options
  summary: When using babel-jest, calls to mock will automatically be hoisted to the top of the code block
  belongs_to: The Jest Object
  description: |-
    ### `jest.doMock(moduleName, factory, options)`

    When using `babel-jest`, calls to `mock` will automatically be hoisted to the top of the code block. Use this method if you want to explicitly avoid this behavior.

    One example when this is useful is when you want to mock a module differently within the same file:

    ``` typescript
    beforeEach(() => {
      jest.resetModules();
    });

    test('moduleName 1', () => {
      jest.doMock('../moduleName', () => {
        return jest.fn(() => 1);
      });
      const moduleName = require('../moduleName');
      expect(moduleName()).toEqual(1);
    });

    test('moduleName 2', () => {
      jest.doMock('../moduleName', () => {
        return jest.fn(() => 2);
      });
      const moduleName = require('../moduleName');
      expect(moduleName()).toEqual(2);
    });
    ```

    Using `jest.doMock()` with ES6 imports requires additional steps. Follow these if you don't want to use `require` in your tests:

    - We have to specify the `__esModule: true` property (see the [`jest.mock()`](#jestmockmodulename-factory-options) API for more information).
    - Static ES6 module imports are hoisted to the top of the file, so instead we have to import them dynamically using `import()`.
    - Finally, we need an environment which supports dynamic importing. Please see [Using Babel](getting-started#using-babel) for the initial setup. Then add the plugin [babel-plugin-dynamic-import-node](https://www.npmjs.com/package/babel-plugin-dynamic-import-node), or an equivalent, to your Babel config to enable dynamic importing in Node.

    ``` typescript
    beforeEach(() => {
      jest.resetModules();
    });

    test('moduleName 1', () => {
      jest.doMock('../moduleName', () => {
        return {
          __esModule: true,
          default: 'default1',
          foo: 'foo1',
        };
      });
      return import('../moduleName').then(moduleName => {
        expect(moduleName.default).toEqual('default1');
        expect(moduleName.foo).toEqual('foo1');
      });
    });

    test('moduleName 2', () => {
      jest.doMock('../moduleName', () => {
        return {
          __esModule: true,
          default: 'default2',
          foo: 'foo2',
        };
      });
      return import('../moduleName').then(moduleName => {
        expect(moduleName.default).toEqual('default2');
        expect(moduleName.foo).toEqual('foo2');
      });
    });
    ```

    Returns the `jest` object for chaining.
- name: jest.dontMock()
  id: jest-object#jestdontmockmodulename
  summary: When using babel-jest, calls to unmock will automatically be hoisted to the top of the code block
  belongs_to: The Jest Object
  description: |-
    ### `jest.dontMock(moduleName)`

    When using `babel-jest`, calls to `unmock` will automatically be hoisted to the top of the code block. Use this method if you want to explicitly avoid this behavior.

    Returns the `jest` object for chaining.
- name: jest.enableAutomock()
  id: jest-object#jestenableautomock
  summary: Enables automatic mocking in the module loader
  belongs_to: The Jest Object
  description: |-
    ### `jest.enableAutomock()`

    Enables automatic mocking in the module loader.

    Returns the `jest` object for chaining.

    > See `automock` section of [configuration](configuration#automock-boolean) for more information

    Example:

    ``` typescript
    export default {
      authorize: () => {
        return 'token';
      },
      isAuthorized: secret => secret === 'wizard',
    };
    ```

    utils.js

    ``` typescript
    jest.enableAutomock();

    import utils from '../utils';

    test('original implementation', () => {
      // now we have the mocked implementation,
      expect(utils.authorize._isMockFunction).toBeTruthy();
      expect(utils.isAuthorized._isMockFunction).toBeTruthy();
    });
    ```

    \_\_tests\_\_/enableAutomocking.js

    *Note: this method was previously called `autoMockOn`. When using `babel-jest`, calls to `enableAutomock` will automatically be hoisted to the top of the code block. Use `autoMockOn` if you want to explicitly avoid this behavior.*
- name: jest.fn()
  id: mock-function-api#jestfnimplementation
  summary: Correct mock typings will be inferred if implementation is passed to jest.fn()
  belongs_to: Mock Functions
  description: |-
    ### `jest.fn(implementation?)`

    Correct mock typings will be inferred if implementation is passed to [`jest.fn()`](jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):

    ``` typescript
    import {expect, jest, test} from '@jest/globals';
    import type add from './add';
    import calculate from './calc';

    test('calculate calls add', () => {
      // Create a new mock that can be used in place of `add`.
      const mockAdd = jest.fn<typeof add>();

      // `.mockImplementation()` now can infer that `a` and `b` are `number`
      // and that the returned value is a `number`.
      mockAdd.mockImplementation((a, b) => {
        // Yes, this mock is still adding two numbers but imagine this
        // was a complex function we are mocking.
        return a + b;
      });

      // `mockAdd` is properly typed and therefore accepted by anything
      // requiring `add`.
      calculate(mockAdd, 1, 2);

      expect(mockAdd).toBeCalledTimes(1);
      expect(mockAdd).toBeCalledWith(1, 2);
    });
    ```
- name: jest.fn()
  id: jest-object#jestfnimplementation
  summary: Returns a new, unused mock function
  belongs_to: The Jest Object
  description: |-
    ### `jest.fn(implementation?)`

    Returns a new, unused [mock function](mock-function-api). Optionally takes a mock implementation.

    ``` typescript
    const mockFn = jest.fn();
    mockFn();
    expect(mockFn).toHaveBeenCalled();

    // With a mock implementation:
    const returnsTrue = jest.fn(() => true);
    console.log(returnsTrue()); // true;
    ```

    tip

    See [Mock Functions](mock-function-api#jestfnimplementation) page for details on TypeScript usage.
- name: jest.fn()
  id: mock-function-api/index#jestfnimplementation
  summary: Correct mock typings will be inferred if implementation is passed to jest.fn()
  belongs_to: Mock Functions
  description: |-
    ### `jest.fn(implementation?)`

    Correct mock typings will be inferred if implementation is passed to [`jest.fn()`](../jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):

    ``` typescript
    import {expect, jest, test} from '@jest/globals';
    import type add from './add';
    import calculate from './calc';

    test('calculate calls add', () => {
      // Create a new mock that can be used in place of `add`.
      const mockAdd = jest.fn<typeof add>();

      // `.mockImplementation()` now can infer that `a` and `b` are `number`
      // and that the returned value is a `number`.
      mockAdd.mockImplementation((a, b) => {
        // Yes, this mock is still adding two numbers but imagine this
        // was a complex function we are mocking.
        return a + b;
      });

      // `mockAdd` is properly typed and therefore accepted by anything
      // requiring `add`.
      calculate(mockAdd, 1, 2);

      expect(mockAdd).toBeCalledTimes(1);
      expect(mockAdd).toBeCalledWith(1, 2);
    });
    ```
- name: jest.getRealSystemTime()
  id: jest-object#jestgetrealsystemtime
  summary: When mocking time, Date.now() will also be mocked
  belongs_to: The Jest Object
  description: |-
    ### `jest.getRealSystemTime()`

    When mocking time, `Date.now()` will also be mocked. If you for some reason need access to the real current time, you can invoke this function.

    info

    This function is not available when using legacy fake timers implementation.

    ## Misc
- name: jest.getTimerCount()
  id: jest-object#jestgettimercount
  summary: Returns the number of fake timers still left to run
  belongs_to: The Jest Object
  description: |-
    ### `jest.getTimerCount()`

    Returns the number of fake timers still left to run.
- name: jest.isMockFunction()
  id: jest-object#jestismockfunctionfn
  summary: Determines if the given function is a mocked function
  belongs_to: The Jest Object
  description: |-
    ### `jest.isMockFunction(fn)`

    Determines if the given function is a mocked function.
- name: jest.isolateModules()
  id: jest-object#jestisolatemodulesfn
  summary: jest.isolateModules(fn) goes a step further than jest.resetModules() and creates a sandbox registry for the modules that are loaded inside the callback function
  belongs_to: The Jest Object
  description: |-
    ### `jest.isolateModules(fn)`

    `jest.isolateModules(fn)` goes a step further than `jest.resetModules()` and creates a sandbox registry for the modules that are loaded inside the callback function. This is useful to isolate specific modules for every test so that local module state doesn't conflict between tests.

    ``` typescript
    let myModule;
    jest.isolateModules(() => {
      myModule = require('myModule');
    });

    const otherCopyOfMyModule = require('myModule');
    ```

    ## Mock Functions
- name: jest.mock()
  id: jest-object#jestmockmodulename-factory-options
  summary: Mocks a module with an auto-mocked version when it is being required
  belongs_to: The Jest Object
  description: |-
    ### `jest.mock(moduleName, factory, options)`

    Mocks a module with an auto-mocked version when it is being required. `factory` and `options` are optional. For example:

    ``` typescript
    module.exports = () => 'banana';
    ```

    banana.js

    ``` typescript
    jest.mock('../banana');

    const banana = require('../banana'); // banana will be explicitly mocked.

    banana(); // will return 'undefined' because the function is auto-mocked.
    ```

    \_\_tests\_\_/test.js

    The second argument can be used to specify an explicit module factory that is being run instead of using Jest's automocking feature:

    ``` typescript
    jest.mock('../moduleName', () => {
      return jest.fn(() => 42);
    });

    // This runs the function specified as second argument to `jest.mock`.
    const moduleName = require('../moduleName');
    moduleName(); // Will return '42';
    ```

    When using the `factory` parameter for an ES6 module with a default export, the `__esModule: true` property needs to be specified. This property is normally generated by Babel / TypeScript, but here it needs to be set manually. When importing a default export, it's an instruction to import the property named `default` from the export object:

    ``` typescript
    import moduleName, {foo} from '../moduleName';

    jest.mock('../moduleName', () => {
      return {
        __esModule: true,
        default: jest.fn(() => 42),
        foo: jest.fn(() => 43),
      };
    });

    moduleName(); // Will return 42
    foo(); // Will return 43
    ```

    The third argument can be used to create virtual mocks – mocks of modules that don't exist anywhere in the system:

    ``` typescript
    jest.mock(
      '../moduleName',
      () => {
        /*
         * Custom implementation of a module that doesn't exist in JS,
         * like a generated module or a native module in react-native.
         */
      },
      {virtual: true},
    );
    ```

    > **Warning:** Importing a module in a setup file (as specified by `setupFilesAfterEnv`) will prevent mocking for the module in question, as well as all the modules that it imports.

    Modules that are mocked with `jest.mock` are mocked only for the file that calls `jest.mock`. Another file that imports the module will get the original implementation even if it runs after the test file that mocks the module.

    Returns the `jest` object for chaining.

    tip

    Writing tests in TypeScript? Use [`jest.Mocked`](mock-function-api/index#jestmockedsource) utility type or [`jest.mocked()`](mock-function-api/index#jestmockedsource-options) helper method to have your mocked modules typed.
- name: jest.Mocked
  id: mock-function-api#jestmockedsource
  summary: The jest.Mocked<Source> utility type returns the Source type wrapped with type definitions of Jest mock function
  belongs_to: Mock Functions
  description: |-
    ### `jest.Mocked<Source>`

    The `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.

    ``` typescript
    import {expect, jest, test} from '@jest/globals';
    import type {fetch} from 'node-fetch';

    jest.mock('node-fetch');

    let mockedFetch: jest.Mocked<typeof fetch>;

    afterEach(() => {
      mockedFetch.mockClear();
    });

    test('makes correct call', () => {
      mockedFetch = getMockedFetch();
      // ...
    });

    test('returns correct data', () => {
      mockedFetch = getMockedFetch();
      // ...
    });
    ```

    Types of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.
- name: jest.Mocked
  id: mock-function-api/index#jestmockedsource
  summary: The jest.Mocked<Source> utility type returns the Source type wrapped with type definitions of Jest mock function
  belongs_to: Mock Functions
  description: |-
    ### `jest.Mocked<Source>`

    The `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.

    ``` typescript
    import {expect, jest, test} from '@jest/globals';
    import type {fetch} from 'node-fetch';

    jest.mock('node-fetch');

    let mockedFetch: jest.Mocked<typeof fetch>;

    afterEach(() => {
      mockedFetch.mockClear();
    });

    test('makes correct call', () => {
      mockedFetch = getMockedFetch();
      // ...
    });

    test('returns correct data', () => {
      mockedFetch = getMockedFetch();
      // ...
    });
    ```

    Types of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.
- name: jest.Mocked
  id: jest-object#jestmockedsource
  summary: See TypeScript Usage chapter of Mock Functions page for documentation
  belongs_to: The Jest Object
  description: |-
    ### `jest.Mocked<Source>`

    See [TypeScript Usage](mock-function-api/index#jestmockedsource) chapter of Mock Functions page for documentation.
- name: jest.mocked()
  id: jest-object#jestmockedsource-options
  summary: See TypeScript Usage chapter of Mock Functions page for documentation
  belongs_to: The Jest Object
  description: |-
    ### `jest.mocked(source, options?)`

    See [TypeScript Usage](mock-function-api/index#jestmockedsource-options) chapter of Mock Functions page for documentation.
- name: jest.mocked()
  id: mock-function-api#jestmockedsource-options
  summary: The mocked() helper method wraps types of the source object and its deep nested members with type definitions of Jest mock function
  belongs_to: Mock Functions
  description: "### `jest.mocked(source, options?)`\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\n``` typescript\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\nsong.ts\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\nsong.test.ts\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mock-function-api](https://jestjs.io/docs/mock-function-api)"
- name: jest.mocked()
  id: mock-function-api/index#jestmockedsource-options
  summary: The mocked() helper method wraps types of the source object and its deep nested members with type definitions of Jest mock function
  belongs_to: Mock Functions
  description: "### `jest.mocked(source, options?)`\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\n``` typescript\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\nsong.ts\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\nsong.test.ts\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mock-function-api/](https://jestjs.io/docs/mock-function-api/)"
- name: jest.requireActual()
  id: jest-object#jestrequireactualmodulename
  summary: Returns the actual module instead of a mock, bypassing all checks on whether the module should receive a mock implementation or not
  belongs_to: The Jest Object
  description: |-
    ### `jest.requireActual(moduleName)`

    Returns the actual module instead of a mock, bypassing all checks on whether the module should receive a mock implementation or not.

    Example:

    ``` typescript
    jest.mock('../myModule', () => {
      // Require the original module to not be mocked...
      const originalModule = jest.requireActual('../myModule');

      return {
        __esModule: true, // Use it when dealing with esModules
        ...originalModule,
        getRandom: jest.fn().mockReturnValue(10),
      };
    });

    const getRandom = require('../myModule').getRandom;

    getRandom(); // Always returns 10
    ```
- name: jest.requireMock()
  id: jest-object#jestrequiremockmodulename
  summary: Returns a mock module instead of the actual module, bypassing all checks on whether the module should be required normally or not
  belongs_to: The Jest Object
  description: |-
    ### `jest.requireMock(moduleName)`

    Returns a mock module instead of the actual module, bypassing all checks on whether the module should be required normally or not.
- name: jest.resetAllMocks()
  id: jest-object#jestresetallmocks
  summary: Resets the state of all mocks
  belongs_to: The Jest Object
  description: |-
    ### `jest.resetAllMocks()`

    Resets the state of all mocks. Equivalent to calling [`.mockReset()`](mock-function-api#mockfnmockreset) on every mocked function.

    Returns the `jest` object for chaining.
- name: jest.resetModules()
  id: jest-object#jestresetmodules
  summary: Resets the module registry - the cache of all required modules
  belongs_to: The Jest Object
  description: |-
    ### `jest.resetModules()`

    Resets the module registry - the cache of all required modules. This is useful to isolate modules where local state might conflict between tests.

    Example:

    ``` typescript
    const sum1 = require('../sum');
    jest.resetModules();
    const sum2 = require('../sum');
    sum1 === sum2;
    // > false (Both sum modules are separate "instances" of the sum module.)
    ```

    Example in a test:

    ``` typescript
    beforeEach(() => {
      jest.resetModules();
    });

    test('works', () => {
      const sum = require('../sum');
    });

    test('works too', () => {
      const sum = require('../sum');
      // sum is a different copy of the sum module from the previous test.
    });
    ```

    Returns the `jest` object for chaining.
- name: jest.restoreAllMocks()
  id: jest-object#jestrestoreallmocks
  summary: Restores all mocks back to their original value
  belongs_to: The Jest Object
  description: |-
    ### `jest.restoreAllMocks()`

    Restores all mocks back to their original value. Equivalent to calling [`.mockRestore()`](mock-function-api#mockfnmockrestore) on every mocked function. Beware that `jest.restoreAllMocks()` only works when the mock was created with `jest.spyOn`; other mocks will require you to manually restore them.

    ## Fake Timers
- name: jest.retryTimes()
  id: jest-object#jestretrytimesnumretries-options
  summary: Runs failed tests n-times until they pass or until the max number of retries is exhausted
  belongs_to: The Jest Object
  description: "### `jest.retryTimes(numRetries, options)`\n\nRuns failed tests n-times until they pass or until the max number of retries is exhausted. `options` are optional. This only works with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner! This must live at the top-level of a test file or in a describe block. Retries *will not* work if `jest.retryTimes()` is called in a `beforeEach` or a `test` block.\n\nExample in a test:\n\n``` typescript\njest.retryTimes(3);\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\nIf `logErrorsBeforeRetry` is enabled, Jest will log the error(s) that caused the test to fail to the console, providing visibility on why a retry occurred.\n\n``` typescript\njest.retryTimes(3, {logErrorsBeforeRetry: true});\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\nReturns the `jest` object for chaining.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/jest-object](https://jestjs.io/docs/jest-object)"
- name: jest.runAllImmediates()
  id: jest-object#jestrunallimmediates
  summary: Exhausts all tasks queued by setImmediate()
  belongs_to: The Jest Object
  description: |-
    ### `jest.runAllImmediates()`

    Exhausts all tasks queued by `setImmediate()`.

    info

    This function is only available when using legacy fake timers implementation.
- name: jest.runAllTicks()
  id: jest-object#jestrunallticks
  summary: Exhausts the micro-task queue (usually interfaced in node via process.nextTick)
  belongs_to: The Jest Object
  description: |-
    ### `jest.runAllTicks()`

    Exhausts the **micro**-task queue (usually interfaced in node via `process.nextTick`).

    When this API is called, all pending micro-tasks that have been queued via `process.nextTick` will be executed. Additionally, if those micro-tasks themselves schedule new micro-tasks, those will be continually exhausted until there are no more micro-tasks remaining in the queue.
- name: jest.runAllTimers()
  id: jest-object#jestrunalltimers
  summary: Exhausts both the macro-task queue (i.e., all tasks queued by setTimeout(), setInterval(), and setImmediate()) and the micro-task queue (usually interfaced in node via process.nextTick)
  belongs_to: The Jest Object
  description: |-
    ### `jest.runAllTimers()`

    Exhausts both the **macro**-task queue (i.e., all tasks queued by `setTimeout()`, `setInterval()`, and `setImmediate()`) and the **micro**-task queue (usually interfaced in node via `process.nextTick`).

    When this API is called, all pending macro-tasks and micro-tasks will be executed. If those tasks themselves schedule new tasks, those will be continually exhausted until there are no more tasks remaining in the queue.

    This is often useful for synchronously executing setTimeouts during a test in order to synchronously assert about some behavior that would only happen after the `setTimeout()` or `setInterval()` callbacks executed. See the [Timer mocks](timer-mocks) doc for more information.
- name: jest.runOnlyPendingTimers()
  id: jest-object#jestrunonlypendingtimers
  summary: Executes only the macro-tasks that are currently pending (i.e., only the tasks that have been queued by setTimeout() or setInterval() up to this point)
  belongs_to: The Jest Object
  description: |-
    ### `jest.runOnlyPendingTimers()`

    Executes only the macro-tasks that are currently pending (i.e., only the tasks that have been queued by `setTimeout()` or `setInterval()` up to this point). If any of the currently pending macro-tasks schedule new macro-tasks, those new tasks will not be executed by this call.

    This is useful for scenarios such as one where the module being tested schedules a `setTimeout()` whose callback schedules another `setTimeout()` recursively (meaning the scheduling never stops). In these scenarios, it's useful to be able to run forward in time by a single step at a time.
- name: jest.setMock()
  id: jest-object#jestsetmockmodulename-moduleexports
  summary: Explicitly supplies the mock object that the module system should return for the specified module
  belongs_to: The Jest Object
  description: |-
    ### `jest.setMock(moduleName, moduleExports)`

    Explicitly supplies the mock object that the module system should return for the specified module.

    On occasion, there are times where the automatically generated mock the module system would normally provide you isn't adequate enough for your testing needs. Normally under those circumstances you should write a [manual mock](manual-mocks) that is more adequate for the module in question. However, on extremely rare occasions, even a manual mock isn't suitable for your purposes and you need to build the mock yourself inside your test.

    In these rare scenarios you can use this API to manually fill the slot in the module system's mock-module registry.

    Returns the `jest` object for chaining.

    *Note It is recommended to use [`jest.mock()`](#jestmockmodulename-factory-options) instead. The `jest.mock` API's second argument is a module factory instead of the expected exported module object.*
- name: jest.setSystemTime()
  id: jest-object#jestsetsystemtimenow-number--date
  summary: Set the current system time used by fake timers
  belongs_to: The Jest Object
  description: |-
    ### `jest.setSystemTime(now?: number | Date)`

    Set the current system time used by fake timers. Simulates a user changing the system clock while your program is running. It affects the current time but it does not in itself cause e.g. timers to fire; they will fire exactly as they would have done without the call to `jest.setSystemTime()`.

    info

    This function is not available when using legacy fake timers implementation.
- name: jest.setTimeout()
  id: jest-object#jestsettimeouttimeout
  summary: Set the default timeout interval (in milliseconds) for all tests and before/after hooks in the test file
  belongs_to: The Jest Object
  description: |-
    ### `jest.setTimeout(timeout)`

    Set the default timeout interval (in milliseconds) for all tests and before/after hooks in the test file. This only affects the test file from which this function is called.

    To set timeout intervals on different tests in the same file, use the [`timeout` option on each individual test](api#testname-fn-timeout).

    *Note: The default timeout interval is 5 seconds if this method is not called.*

    *Note: If you want to set the timeout for all test files, a good place to do this is in `setupFilesAfterEnv`.*

    Example:

    ``` typescript
    jest.setTimeout(1000); // 1 second
    ```
- name: jest.spyOn()
  id: jest-object#jestspyonobject-methodname-accesstype
  summary: Since Jest 22.1.0+, the jest.spyOn method takes an optional third argument of accessType that can be either 'get' or 'set', which proves to be useful when you want to spy on a getter or a setter, respectively
  belongs_to: The Jest Object
  description: |-
    ### `jest.spyOn(object, methodName, accessType?)`

    Since Jest 22.1.0+, the `jest.spyOn` method takes an optional third argument of `accessType` that can be either `'get'` or `'set'`, which proves to be useful when you want to spy on a getter or a setter, respectively.

    Example:

    ``` typescript
    const video = {
      // it's a getter!
      get play() {
        return true;
      },
    };

    module.exports = video;

    const audio = {
      _volume: false,
      // it's a setter!
      set volume(value) {
        this._volume = value;
      },
      get volume() {
        return this._volume;
      },
    };

    module.exports = audio;
    ```

    Example test:

    ``` typescript
    const audio = require('./audio');
    const video = require('./video');

    afterEach(() => {
      // restore the spy created with spyOn
      jest.restoreAllMocks();
    });

    test('plays video', () => {
      const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'
      const isPlaying = video.play;

      expect(spy).toHaveBeenCalled();
      expect(isPlaying).toBe(true);
    });

    test('plays audio', () => {
      const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'
      audio.volume = 100;

      expect(spy).toHaveBeenCalled();
      expect(audio.volume).toBe(100);
    });
    ```
- name: jest.spyOn()
  id: jest-object#jestspyonobject-methodname
  summary: Creates a mock function similar to jest.fn but also tracks calls to object[methodName]
  belongs_to: The Jest Object
  description: |-
    ### `jest.spyOn(object, methodName)`

    Creates a mock function similar to `jest.fn` but also tracks calls to `object[methodName]`. Returns a Jest [mock function](mock-function-api).

    note

    By default, `jest.spyOn` also calls the **spied** method. This is different behavior from most other test libraries. If you want to overwrite the original function, you can use `jest.spyOn(object, methodName).mockImplementation(() => customImplementation)` or `object[methodName] = jest.fn(() => customImplementation);`

    tip

    Since `jest.spyOn` is a mock. You could restore the initial state calling [jest.restoreAllMocks](#jestrestoreallmocks) on [afterEach](api#aftereachfn-timeout) method.

    Example:

    ``` typescript
    const video = {
      play() {
        return true;
      },
    };

    module.exports = video;
    ```

    Example test:

    ``` typescript
    const video = require('./video');

    afterEach(() => {
      // restore the spy created with spyOn
      jest.restoreAllMocks();
    });

    test('plays video', () => {
      const spy = jest.spyOn(video, 'play');
      const isPlaying = video.play();

      expect(spy).toHaveBeenCalled();
      expect(isPlaying).toBe(true);
    });
    ```
- name: jest.unmock()
  id: jest-object#jestunmockmodulename
  summary: Indicates that the module system should never return a mocked version of the specified module from require() (e.g
  belongs_to: The Jest Object
  description: |-
    ### `jest.unmock(moduleName)`

    Indicates that the module system should never return a mocked version of the specified module from `require()` (e.g. that it should always return the real module).

    The most common use of this API is for specifying the module a given test intends to be testing (and thus doesn't want automatically mocked).

    Returns the `jest` object for chaining.
- name: jest.useFakeTimers()
  id: jest-object#jestusefaketimersfaketimersconfig
  summary: Instructs Jest to use fake versions of the global date, performance, time and timer APIs
  belongs_to: The Jest Object
  description: |-
    ### `jest.useFakeTimers(fakeTimersConfig?)`

    Instructs Jest to use fake versions of the global date, performance, time and timer APIs. Fake timers implementation is backed by [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).

    Fake timers will swap out `Date`, `performance.now()`, `queueMicrotask()`, `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with an implementation that gets its time from the fake clock.

    In Node environment `process.hrtime`, `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()`, `requestIdleCallback()`, `cancelIdleCallback()` will be replaced as well.

    Configuration options:

    ``` typescript
    type FakeableAPI =
      | 'Date'
      | 'hrtime'
      | 'nextTick'
      | 'performance'
      | 'queueMicrotask'
      | 'requestAnimationFrame'
      | 'cancelAnimationFrame'
      | 'requestIdleCallback'
      | 'cancelIdleCallback'
      | 'setImmediate'
      | 'clearImmediate'
      | 'setInterval'
      | 'clearInterval'
      | 'setTimeout'
      | 'clearTimeout';

    type FakeTimersConfig = {
      /**
       * If set to `true` all timers will be advanced automatically by 20 milliseconds
       * every 20 milliseconds. A custom time delta may be provided by passing a number.
       * The default is `false`.
       */
      advanceTimers?: boolean | number;
      /**
       * List of names of APIs that should not be faked. The default is `[]`, meaning
       * all APIs are faked.
       */
      doNotFake?: Array<FakeableAPI>;
      /**
       * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.
       * The default is `false`.
       */
      legacyFakeTimers?: boolean;
      /** Sets current system time to be used by fake timers. The default is `Date.now()`. */
      now?: number | Date;
      /**
       * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.
       * The default is `100_000` timers.
       */
      timerLimit?: number;
    };
    ```

    Calling `jest.useFakeTimers()` will use fake timers for all tests within the file, until original timers are restored with `jest.useRealTimers()`.

    You can call `jest.useFakeTimers()` or `jest.useRealTimers()` from anywhere: top level, inside an `test` block, etc. Keep in mind that this is a **global operation** and will affect other tests within the same file. Calling `jest.useFakeTimers()` once again in the same test file would reset the internal state (e.g. timer count) and reinstall fake timers using the provided options:

    ``` typescript
    test('advance the timers automatically', () => {
      jest.useFakeTimers({advanceTimers: true});
      // ...
    });

    test('do not advance the timers and do not fake `performance`', () => {
      jest.useFakeTimers({doNotFake: ['performance']});
      // ...
    });

    test('uninstall fake timers for the rest of tests in the file', () => {
      jest.useRealTimers();
      // ...
    });
    ```

    Legacy Fake Timers

    For some reason you might have to use legacy implementation of fake timers. It can be enabled like this (additional options are not supported):

    ``` typescript
    jest.useFakeTimers({
      legacyFakeTimers: true,
    });
    ```

    Legacy fake timers will swap out `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with Jest [mock functions](mock-function-api). In Node environment `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()` will be also replaced.

    Returns the `jest` object for chaining.
- name: jest.useRealTimers()
  id: jest-object#jestuserealtimers
  summary: Instructs Jest to restore the original implementations of the global date, performance, time and timer APIs
  belongs_to: The Jest Object
  description: |-
    ### `jest.useRealTimers()`

    Instructs Jest to restore the original implementations of the global date, performance, time and timer APIs. For example, you may call `jest.useRealTimers()` inside `afterEach` hook to restore timers after each test:

    ``` typescript
    afterEach(() => {
      jest.useRealTimers();
    });

    test('do something with fake timers', () => {
      jest.useFakeTimers();
      // ...
    });

    test('do something with real timers', () => {
      // ...
    });
    ```

    Returns the `jest` object for chaining.
- name: Manual Mocks
  id: manual-mocks
  summary: Manual mocks are used to stub out functionality with mock data
  description: "# Manual Mocks\n\nManual mocks are used to stub out functionality with mock data. For example, instead of accessing a remote resource like a website or a database, you might want to create a manual mock that allows you to use fake data. This ensures your tests will be fast and not flaky.\n\n## Mocking user modules\n\nManual mocks are defined by writing a module in a `__mocks__/` subdirectory immediately adjacent to the module. For example, to mock a module called `user` in the `models` directory, create a file called `user.js` and put it in the `models/__mocks__` directory. Note that the `__mocks__` folder is case-sensitive, so naming the directory `__MOCKS__` will break on some systems.\n\n> When we require that module in our tests (meaning we want to use the manual mock instead of the real implementation), explicitly calling `jest.mock('./moduleName')` is **required**.\n\n## Mocking Node modules\n\nIf the module you are mocking is a Node module (e.g.: `lodash`), the mock should be placed in the `__mocks__` directory adjacent to `node_modules` (unless you configured [`roots`](configuration#roots-arraystring) to point to a folder other than the project root) and will be **automatically** mocked. There's no need to explicitly call `jest.mock('module_name')`.\n\nScoped modules (also known as [scoped packages](https://docs.npmjs.com/cli/v6/using-npm/scope)) can be mocked by creating a file in a directory structure that matches the name of the scoped module. For example, to mock a scoped module called `@scope/project-name`, create a file at `__mocks__/@scope/project-name.js`, creating the `@scope/` directory accordingly.\n\n> Warning: If we want to mock Node's core modules (e.g.: `fs` or `path`), then explicitly calling e.g. `jest.mock('path')` is **required**, because core Node modules are not mocked by default.\n\n## Examples\n\n``` typescript\n.\n├── config\n├── __mocks__\n│   └── fs.js\n├── models\n│   ├── __mocks__\n│   │   └── user.js\n│   └── user.js\n├── node_modules\n└── views\n```\n\nWhen a manual mock exists for a given module, Jest's module system will use that module when explicitly calling `jest.mock('moduleName')`. However, when `automock` is set to `true`, the manual mock implementation will be used instead of the automatically created mock, even if `jest.mock('moduleName')` is not called. To opt out of this behavior you will need to explicitly call `jest.unmock('moduleName')` in tests that should use the actual module implementation.\n\n> Note: In order to mock properly, Jest needs `jest.mock('moduleName')` to be in the same scope as the `require/import` statement.\n\nHere's a contrived example where we have a module that provides a summary of all the files in a given directory. In this case, we use the core (built in) `fs` module.\n\n``` typescript\n'use strict';\n\nconst fs = require('fs');\n\nfunction summarizeFilesInDirectorySync(directory) {\n  return fs.readdirSync(directory).map(fileName => ({\n    directory,\n    fileName,\n  }));\n}\n\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\n```\n\nFileSummarizer.js\n\nSince we'd like our tests to avoid actually hitting the disk (that's pretty slow and fragile), we create a manual mock for the `fs` module by extending an automatic mock. Our manual mock will implement custom versions of the `fs` APIs that we can build on for our tests:\n\n``` typescript\n'use strict';\n\nconst path = require('path');\n\nconst fs = jest.createMockFromModule('fs');\n\n// This is a custom function that our tests can use during setup to specify\n// what the files on the \"mock\" filesystem should look like when any of the\n// `fs` APIs are used.\nlet mockFiles = Object.create(null);\nfunction __setMockFiles(newMockFiles) {\n  mockFiles = Object.create(null);\n  for (const file in newMockFiles) {\n    const dir = path.dirname(file);\n\n    if (!mockFiles[dir]) {\n      mockFiles[dir] = [];\n    }\n    mockFiles[dir].push(path.basename(file));\n  }\n}\n\n// A custom version of `readdirSync` that reads from the special mocked out\n// file list set via __setMockFiles\nfunction readdirSync(directoryPath) {\n  return mockFiles[directoryPath] || [];\n}\n\nfs.__setMockFiles = __setMockFiles;\nfs.readdirSync = readdirSync;\n\nmodule.exports = fs;\n```\n\n\\_\\_mocks\\_\\_/fs.js\n\nNow we write our test. Note that we need to explicitly tell that we want to mock the `fs` module because it’s a core Node module:\n\n``` typescript\n'use strict';\n\njest.mock('fs');\n\ndescribe('listFilesInDirectorySync', () => {\n  const MOCK_FILE_INFO = {\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\n    '/path/to/file2.txt': 'file2 contents',\n  };\n\n  beforeEach(() => {\n    // Set up some mocked out file info before each test\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\n  });\n\n  test('includes all files in the directory in the summary', () => {\n    const FileSummarizer = require('../FileSummarizer');\n    const fileSummary =\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\n\n    expect(fileSummary.length).toBe(2);\n  });\n});\n```\n\n\\_\\_tests\\_\\_/FileSummarizer-test.js\n\nThe example mock shown here uses [`jest.createMockFromModule`](jest-object#jestcreatemockfrommodulemodulename) to generate an automatic mock, and overrides its default behavior. This is the recommended approach, but is completely optional. If you do not want to use the automatic mock at all, you can export your own functions from the mock file. One downside to fully manual mocks is that they're manual – meaning you have to manually update them any time the module they are mocking changes. Because of this, it's best to use or extend the automatic mock when it works for your needs.\n\nTo ensure that a manual mock and its real implementation stay in sync, it might be useful to require the real module using [`jest.requireActual(moduleName)`](jest-object#jestrequireactualmodulename) in your manual mock and amending it with mock functions before exporting it.\n\nThe code for this example is available at [examples/manual-mocks](https://github.com/facebook/jest/tree/main/examples/manual-mocks).\n\n## Using with ES module imports\n\nIf you're using [ES module imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) then you'll normally be inclined to put your `import` statements at the top of the test file. But often you need to instruct Jest to use a mock before modules use it. For this reason, Jest will automatically hoist `jest.mock` calls to the top of the module (before any imports). To learn more about this and see it in action, see [this repo](https://github.com/kentcdodds/how-jest-mocking-works).\n\n## Mocking methods which are not implemented in JSDOM\n\nIf some code uses a method which JSDOM (the DOM implementation used by Jest) hasn't implemented yet, testing it is not easily possible. This is e.g. the case with `window.matchMedia()`. Jest returns `TypeError: window.matchMedia is not a function` and doesn't properly execute the test.\n\nIn this case, mocking `matchMedia` in the test file should solve the issue:\n\n``` typescript\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n```\n\nThis works if `window.matchMedia()` is used in a function (or method) which is invoked in the test. If `window.matchMedia()` is executed directly in the tested file, Jest reports the same error. In this case, the solution is to move the manual mock into a separate file and include this one in the test **before** the tested file:\n\n``` typescript\nimport './matchMedia.mock'; // Must be imported before the tested file\nimport {myMethod} from './file-to-test';\n\ndescribe('myMethod()', () => {\n  // Test the method here...\n});\n```\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/manual-mocks](https://jestjs.io/docs/manual-mocks)"
- name: Migrating to Jest
  id: migration-guide
  summary: If you are using AVA, Chai, Expect.js (by Automattic), Jasmine, Mocha, proxyquire, Should.js, Tape, or Sinon you can use the third-party jest-codemods to do most of the dirty migration work
  description: "# Migrating to Jest\n\nIf you'd like to try out Jest with an existing codebase, there are a number of ways to convert to Jest:\n\n- If you are using Jasmine, or a Jasmine like API (for example [Mocha](https://mochajs.org)), Jest should be mostly compatible, which makes it less complicated to migrate to.\n- If you are using AVA, Expect.js (by Automattic), Jasmine, Mocha, proxyquire, Should.js or Tape you can automatically migrate with Jest Codemods (see below).\n- If you like [chai](http://chaijs.com/), you can upgrade to Jest and continue using chai. However, we recommend trying out Jest's assertions and their failure messages. Jest Codemods can migrate from chai (see below).\n\n## jest-codemods\n\nIf you are using [AVA](https://github.com/avajs/ava), [Chai](https://github.com/chaijs/chai), [Expect.js (by Automattic)](https://github.com/Automattic/expect.js), [Jasmine](https://github.com/jasmine/jasmine), [Mocha](https://github.com/mochajs/mocha), [proxyquire](https://github.com/thlorenz/proxyquire), [Should.js](https://github.com/shouldjs/should.js), [Tape](https://github.com/substack/tape), or [Sinon](https://sinonjs.org/) you can use the third-party [jest-codemods](https://github.com/skovhus/jest-codemods) to do most of the dirty migration work. It runs a code transformation on your codebase using [jscodeshift](https://github.com/facebook/jscodeshift).\n\nTo transform your existing tests, navigate to the project containing the tests and run:\n\n``` typescript\nnpx jest-codemods\n```\n\nMore information can be found at [https://github.com/skovhus/jest-codemods](https://github.com/skovhus/jest-codemods).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/migration-guide](https://jestjs.io/docs/migration-guide)"
- name: Mock Functions
  id: mock-functions
  summary: Mock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with new, and allowing test-time configuration of return values
  description: "# Mock Functions\n\nMock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with `new`, and allowing test-time configuration of return values.\n\nThere are two ways to mock functions: Either by creating a mock function to use in test code, or writing a [`manual mock`](manual-mocks) to override a module dependency.\n\n## Using a mock function\n\nLet's imagine we're testing an implementation of a function `forEach`, which invokes a callback for each item in a supplied array.\n\n``` typescript\nfunction forEach(items, callback) {\n  for (let index = 0; index < items.length; index++) {\n    callback(items[index]);\n  }\n}\n```\n\nTo test this function, we can use a mock function, and inspect the mock's state to ensure the callback is invoked as expected.\n\n``` typescript\nconst mockCallback = jest.fn(x => 42 + x);\nforEach([0, 1], mockCallback);\n\n// The mock function is called twice\nexpect(mockCallback.mock.calls.length).toBe(2);\n\n// The first argument of the first call to the function was 0\nexpect(mockCallback.mock.calls[0][0]).toBe(0);\n\n// The first argument of the second call to the function was 1\nexpect(mockCallback.mock.calls[1][0]).toBe(1);\n\n// The return value of the first call to the function was 42\nexpect(mockCallback.mock.results[0].value).toBe(42);\n```\n\n## `.mock` property\n\nAll mock functions have this special `.mock` property, which is where data about how the function has been called and what the function returned is kept. The `.mock` property also tracks the value of `this` for each call, so it is possible to inspect this as well:\n\n``` typescript\nconst myMock1 = jest.fn();\nconst a = new myMock1();\nconsole.log(myMock1.mock.instances);\n// > [ <a> ]\n\nconst myMock2 = jest.fn();\nconst b = {};\nconst bound = myMock2.bind(b);\nbound();\nconsole.log(myMock2.mock.contexts);\n// > [ <b> ]\n```\n\nThese mock members are very useful in tests to assert how these functions get called, instantiated, or what they returned:\n\n``` typescript\n// The function was called exactly once\nexpect(someMockFunction.mock.calls.length).toBe(1);\n\n// The first arg of the first call to the function was 'first arg'\nexpect(someMockFunction.mock.calls[0][0]).toBe('first arg');\n\n// The second arg of the first call to the function was 'second arg'\nexpect(someMockFunction.mock.calls[0][1]).toBe('second arg');\n\n// The return value of the first call to the function was 'return value'\nexpect(someMockFunction.mock.results[0].value).toBe('return value');\n\n// The function was called with a certain `this` context: the `element` object.\nexpect(someMockFunction.mock.contexts[0]).toBe(element);\n\n// This function was instantiated exactly twice\nexpect(someMockFunction.mock.instances.length).toBe(2);\n\n// The object returned by the first instantiation of this function\n// had a `name` property whose value was set to 'test'\nexpect(someMockFunction.mock.instances[0].name).toEqual('test');\n\n// The first argument of the last call to the function was 'test'\nexpect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n## Mock Return Values\n\nMock functions can also be used to inject test values into your code during a test:\n\n``` typescript\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n```\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n``` typescript\nconst filterTestFn = jest.fn();\n\n// Make the mock return `true` for the first call,\n// and `false` for the second call\nfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);\n\nconst result = [11, 12].filter(num => filterTestFn(num));\n\nconsole.log(result);\n// > [11]\nconsole.log(filterTestFn.mock.calls[0][0]); // 11\nconsole.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n\n## Mocking Modules\n\nSuppose we have a class that fetches users from our API. The class uses [axios](https://github.com/axios/axios) to call the API then returns the `data` attribute which contains all the users:\n\n``` typescript\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\nexport default Users;\n```\n\nusers.js\n\nNow, in order to test this method without actually hitting the API (and thus creating slow and fragile tests), we can use the `jest.mock(...)` function to automatically mock the axios module.\n\nOnce we mock the module we can provide a `mockResolvedValue` for `.get` that returns the data we want our test to assert against. In effect, we are saying that we want `axios.get('/users.json')` to return a fake response.\n\n``` typescript\nimport axios from 'axios';\nimport Users from './users';\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  // or you could use the following depending on your use case:\n  // axios.get.mockImplementation(() => Promise.resolve(resp))\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n```\n\nusers.test.js\n\n## Mocking Partials\n\nSubsets of a module can be mocked and the rest of the module can keep their actual implementation:\n\n``` typescript\nexport const foo = 'foo';\nexport const bar = () => 'bar';\nexport default () => 'baz';\n```\n\nfoo-bar-baz.js\n\n``` typescript\n//test.js\nimport defaultExport, {bar, foo} from '../foo-bar-baz';\n\njest.mock('../foo-bar-baz', () => {\n  const originalModule = jest.requireActual('../foo-bar-baz');\n\n  //Mock the default export and named export 'foo'\n  return {\n    __esModule: true,\n    ...originalModule,\n    default: jest.fn(() => 'mocked baz'),\n    foo: 'mocked foo',\n  };\n});\n\ntest('should do a partial mock', () => {\n  const defaultExportResult = defaultExport();\n  expect(defaultExportResult).toBe('mocked baz');\n  expect(defaultExport).toHaveBeenCalled();\n\n  expect(foo).toBe('mocked foo');\n  expect(bar()).toBe('bar');\n});\n```\n\n## Mock Implementations\n\nStill, there are cases where it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with `jest.fn` or the `mockImplementationOnce` method on mock functions.\n\n``` typescript\nconst myMockFn = jest.fn(cb => cb(null, true));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n```\n\nThe `mockImplementation` method is useful when you need to define the default implementation of a mock function that is created from another module:\n\n``` typescript\nmodule.exports = function () {\n  // some implementation;\n};\n```\n\nfoo.js\n\n``` typescript\njest.mock('../foo'); // this happens automatically with automocking\nconst foo = require('../foo');\n\n// foo is a mock function\nfoo.mockImplementation(() => 42);\nfoo();\n// > 42\n```\n\ntest.js\n\nWhen you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the `mockImplementationOnce` method:\n\n``` typescript\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\nWhen the mocked function runs out of implementations defined with `mockImplementationOnce`, it will execute the default implementation set with `jest.fn` (if it is defined):\n\n``` typescript\nconst myMockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());\n// > 'first call', 'second call', 'default', 'default'\n```\n\nFor cases where we have methods that are typically chained (and thus always need to return `this`), we have a sugary API to simplify this in the form of a `.mockReturnThis()` function that also sits on all mocks:\n\n``` typescript\nconst myObj = {\n  myMethod: jest.fn().mockReturnThis(),\n};\n\n// is the same as\n\nconst otherObj = {\n  myMethod: jest.fn(function () {\n    return this;\n  }),\n};\n```\n\n## Mock Names\n\nYou can optionally provide a name for your mock functions, which will be displayed instead of \"jest.fn()\" in the test error output. Use this if you want to be able to quickly identify the mock function reporting an error in your test output.\n\n``` typescript\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n## Custom Matchers\n\nFinally, in order to make it less demanding to assert how mock functions have been called, we've added some custom matcher functions for you:\n\n``` typescript\n// The mock function was called at least once\nexpect(mockFunc).toHaveBeenCalled();\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);\n\n// All calls and the name of the mock is written as a snapshot\nexpect(mockFunc).toMatchSnapshot();\n```\n\nThese matchers are sugar for common forms of inspecting the `.mock` property. You can always do this manually yourself if that's more to your taste or if you need to do something more specific:\n\n``` typescript\n// The mock function was called at least once\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// The mock function was called at least once with the specified args\nexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);\n\n// The last call to the mock function was called with the specified args\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n// The first arg of the last call to the mock function was `42`\n// (note that there is no sugar helper for this specific of an assertion)\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// A snapshot will check that a mock was invoked the same number of times,\n// in the same order, with the same arguments. It will also assert on the name.\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\nFor a complete list of matchers, check out the [reference docs](expect).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mock-functions](https://jestjs.io/docs/mock-functions)"
- name: Mock Functions
  id: mock-function-api
  summary: Mock functions are also known as "spies", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output
  description: "# Mock Functions\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you import `jest` from `'@jest/globals'`:\n\n``` typescript\nimport {jest} from '@jest/globals';\n```\n\n## Methods\n\n- [Reference](#reference)\n  - [`mockFn.getMockName()`](#mockfngetmockname)\n  - [`mockFn.mock.calls`](#mockfnmockcalls)\n  - [`mockFn.mock.results`](#mockfnmockresults)\n  - [`mockFn.mock.instances`](#mockfnmockinstances)\n  - [`mockFn.mock.contexts`](#mockfnmockcontexts)\n  - [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n  - [`mockFn.mockClear()`](#mockfnmockclear)\n  - [`mockFn.mockReset()`](#mockfnmockreset)\n  - [`mockFn.mockRestore()`](#mockfnmockrestore)\n  - [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n  - [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n  - [`mockFn.mockName(name)`](#mockfnmocknamename)\n  - [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n  - [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n  - [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n  - [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n  - [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n  - [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n  - [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n- [TypeScript Usage](#typescript-usage)\n  - [`jest.fn(implementation?)`](#jestfnimplementation)\n  - [`jest.Mocked<Source>`](#jestmockedsource)\n  - [`jest.mocked(source, options?)`](#jestmockedsource-options)\n\n## Reference\n\n### `mockFn.getMockName()`\n\nReturns the mock name string set by calling `mockFn.mockName(value)`.\n\n### `mockFn.mock.calls`\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n``` typescript\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n### `mockFn.mock.results`\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n- `'return'` - Indicates that the call completed by returning normally.\n- `'throw'` - Indicates that the call completed by throwing a value.\n- `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n``` typescript\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n### `mockFn.mock.instances`\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n``` typescript\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n``` typescript\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n``` typescript\n['arg3', 'arg4'];\n```\n\n### `mockFn.mockClear()`\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\nThe [`clearMocks`](configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\n### `mockFn.mockReset()`\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also removes any mocked return values or implementations.\n\nThis is useful when you want to completely reset a *mock* back to its initial state. (Note that resetting a *spy* will result in a function with no return value).\n\nThe [`mockReset`](configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nBeware that `mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\nThe [`restoreMocks`](configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\n### `mockFn.mockImplementation(fn)`\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n``` typescript\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n- JavaScript\n- TypeScript\n\n``` typescript\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\nSomeClass.js\n\n``` typescript\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n```\n\nSomeClass.test.js\n\n``` typescript\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\nSomeClass.ts\n\n``` typescript\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n```\n\nSomeClass.test.ts\n\n### `mockFn.mockImplementationOnce(fn)`\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n``` typescript\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n``` typescript\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n``` typescript\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n``` typescript\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected mock function \"mockedFunction\" to have been called, but it was not called.\n```\n\n### `mockFn.mockReturnThis()`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn(function () {\n  return this;\n});\n```\n\n### `mockFn.mockReturnValue(value)`\n\nAccepts a value that will be returned whenever the mock function is called.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n``` typescript\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n``` typescript\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n### `mockFn.mockRejectedValue(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n## TypeScript Usage\n\ntip\n\nPlease consult the [Getting Started](getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toBeCalledTimes(1);\n  expect(mockAdd).toBeCalledWith(1, 2);\n});\n```\n\n### `jest.Mocked<Source>`\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.mocked(source, options?)`\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\n``` typescript\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\nsong.ts\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\nsong.test.ts\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mock-function-api](https://jestjs.io/docs/mock-function-api)"
- name: Mock Functions
  id: mock-function-api/index
  summary: Mock functions are also known as "spies", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output
  description: "# Mock Functions\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you import `jest` from `'@jest/globals'`:\n\n``` typescript\nimport {jest} from '@jest/globals';\n```\n\n## Methods\n\n- [Reference](#reference)\n  - [`mockFn.getMockName()`](#mockfngetmockname)\n  - [`mockFn.mock.calls`](#mockfnmockcalls)\n  - [`mockFn.mock.results`](#mockfnmockresults)\n  - [`mockFn.mock.instances`](#mockfnmockinstances)\n  - [`mockFn.mock.contexts`](#mockfnmockcontexts)\n  - [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n  - [`mockFn.mockClear()`](#mockfnmockclear)\n  - [`mockFn.mockReset()`](#mockfnmockreset)\n  - [`mockFn.mockRestore()`](#mockfnmockrestore)\n  - [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n  - [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n  - [`mockFn.mockName(name)`](#mockfnmocknamename)\n  - [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n  - [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n  - [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n  - [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n  - [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n  - [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n  - [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n- [TypeScript Usage](#typescript-usage)\n  - [`jest.fn(implementation?)`](#jestfnimplementation)\n  - [`jest.Mocked<Source>`](#jestmockedsource)\n  - [`jest.mocked(source, options?)`](#jestmockedsource-options)\n\n## Reference\n\n### `mockFn.getMockName()`\n\nReturns the mock name string set by calling `mockFn.mockName(value)`.\n\n### `mockFn.mock.calls`\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n``` typescript\n[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n```\n\n### `mockFn.mock.results`\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n- `'return'` - Indicates that the call completed by returning normally.\n- `'throw'` - Indicates that the call completed by throwing a value.\n- `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n``` typescript\n[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n```\n\n### `mockFn.mock.instances`\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n``` typescript\nconst mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n``` typescript\nconst mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n``` typescript\n['arg3', 'arg4'];\n```\n\n### `mockFn.mockClear()`\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\nThe [`clearMocks`](../configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\n### `mockFn.mockReset()`\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also removes any mocked return values or implementations.\n\nThis is useful when you want to completely reset a *mock* back to its initial state. (Note that resetting a *spy* will result in a function with no return value).\n\nThe [`mockReset`](../configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nBeware that `mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\nThe [`restoreMocks`](../configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\n### `mockFn.mockImplementation(fn)`\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n``` typescript\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n- JavaScript\n- TypeScript\n\n``` typescript\nmodule.exports = class SomeClass {\n  method(a, b) {}\n};\n```\n\nSomeClass.js\n\n``` typescript\nconst SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n```\n\nSomeClass.test.js\n\n``` typescript\nexport class SomeClass {\n  method(a: string, b: string): void {}\n}\n```\n\nSomeClass.ts\n\n``` typescript\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n```\n\nSomeClass.test.ts\n\n### `mockFn.mockImplementationOnce(fn)`\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\n``` typescript\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n``` typescript\nconst mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n``` typescript\nconst mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n``` typescript\nexpect(mockedFunction).toHaveBeenCalled()\n\nExpected mock function \"mockedFunction\" to have been called, but it was not called.\n```\n\n### `mockFn.mockReturnThis()`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn(function () {\n  return this;\n});\n```\n\n### `mockFn.mockReturnValue(value)`\n\nAccepts a value that will be returned whenever the mock function is called.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n``` typescript\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n- JavaScript\n- TypeScript\n\n``` typescript\nconst mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n``` typescript\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n```\n\n### `mockFn.mockRejectedValue(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`\n\nSyntactic sugar function for:\n\n``` typescript\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n- JavaScript\n- TypeScript\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n``` typescript\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n```\n\n## TypeScript Usage\n\ntip\n\nPlease consult the [Getting Started](../getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](../jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toBeCalledTimes(1);\n  expect(mockAdd).toBeCalledWith(1, 2);\n});\n```\n\n### `jest.Mocked<Source>`\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.mocked(source, options?)`\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\n``` typescript\nexport const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n```\n\nsong.ts\n\n``` typescript\nimport {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n```\n\nsong.test.ts\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mock-function-api/](https://jestjs.io/docs/mock-function-api/)"
- name: mockFn.getMockName()
  id: mock-function-api#mockfngetmockname
  summary: Returns the mock name string set by calling mockFn.mockName(value)
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.getMockName()`

    Returns the mock name string set by calling `mockFn.mockName(value)`.
- name: mockFn.getMockName()
  id: mock-function-api/index#mockfngetmockname
  summary: Returns the mock name string set by calling mockFn.mockName(value)
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.getMockName()`

    Returns the mock name string set by calling `mockFn.mockName(value)`.
- name: mockFn.mock.calls
  id: mock-function-api/index#mockfnmockcalls
  summary: An array containing the call arguments of all calls that have been made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.calls`

    An array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.

    For example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:

    ``` typescript
    [
      ['arg1', 'arg2'],
      ['arg3', 'arg4'],
    ];
    ```
- name: mockFn.mock.calls
  id: mock-function-api#mockfnmockcalls
  summary: An array containing the call arguments of all calls that have been made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.calls`

    An array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.

    For example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:

    ``` typescript
    [
      ['arg1', 'arg2'],
      ['arg3', 'arg4'],
    ];
    ```
- name: mockFn.mock.contexts
  id: mock-function-api#mockfnmockcontexts
  summary: An array that contains the contexts for all calls of the mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.contexts`

    An array that contains the contexts for all calls of the mock function.

    A context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.

    For example:

    ``` typescript
    const mockFn = jest.fn();

    const boundMockFn = mockFn.bind(thisContext0);
    boundMockFn('a', 'b');
    mockFn.call(thisContext1, 'a', 'b');
    mockFn.apply(thisContext2, ['a', 'b']);

    mockFn.mock.contexts[0] === thisContext0; // true
    mockFn.mock.contexts[1] === thisContext1; // true
    mockFn.mock.contexts[2] === thisContext2; // true
    ```
- name: mockFn.mock.contexts
  id: mock-function-api/index#mockfnmockcontexts
  summary: An array that contains the contexts for all calls of the mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.contexts`

    An array that contains the contexts for all calls of the mock function.

    A context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.

    For example:

    ``` typescript
    const mockFn = jest.fn();

    const boundMockFn = mockFn.bind(thisContext0);
    boundMockFn('a', 'b');
    mockFn.call(thisContext1, 'a', 'b');
    mockFn.apply(thisContext2, ['a', 'b']);

    mockFn.mock.contexts[0] === thisContext0; // true
    mockFn.mock.contexts[1] === thisContext1; // true
    mockFn.mock.contexts[2] === thisContext2; // true
    ```
- name: mockFn.mock.instances
  id: mock-function-api/index#mockfnmockinstances
  summary: An array that contains all the object instances that have been instantiated from this mock function using new
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.instances`

    An array that contains all the object instances that have been instantiated from this mock function using `new`.

    For example: A mock function that has been instantiated twice would have the following `mock.instances` array:

    ``` typescript
    const mockFn = jest.fn();

    const a = new mockFn();
    const b = new mockFn();

    mockFn.mock.instances[0] === a; // true
    mockFn.mock.instances[1] === b; // true
    ```
- name: mockFn.mock.instances
  id: mock-function-api#mockfnmockinstances
  summary: An array that contains all the object instances that have been instantiated from this mock function using new
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.instances`

    An array that contains all the object instances that have been instantiated from this mock function using `new`.

    For example: A mock function that has been instantiated twice would have the following `mock.instances` array:

    ``` typescript
    const mockFn = jest.fn();

    const a = new mockFn();
    const b = new mockFn();

    mockFn.mock.instances[0] === a; // true
    mockFn.mock.instances[1] === b; // true
    ```
- name: mockFn.mock.lastCall
  id: mock-function-api#mockfnmocklastcall
  summary: An array containing the call arguments of the last call that was made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.lastCall`

    An array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.

    For example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:

    ``` typescript
    ['arg3', 'arg4'];
    ```
- name: mockFn.mock.lastCall
  id: mock-function-api/index#mockfnmocklastcall
  summary: An array containing the call arguments of the last call that was made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.lastCall`

    An array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.

    For example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:

    ``` typescript
    ['arg3', 'arg4'];
    ```
- name: mockFn.mock.results
  id: mock-function-api#mockfnmockresults
  summary: An array containing the results of all calls that have been made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.results`

    An array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:

    - `'return'` - Indicates that the call completed by returning normally.
    - `'throw'` - Indicates that the call completed by throwing a value.
    - `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.

    The `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.

    For example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:

    ``` typescript
    [
      {
        type: 'return',
        value: 'result1',
      },
      {
        type: 'throw',
        value: {
          /* Error instance */
        },
      },
      {
        type: 'return',
        value: 'result2',
      },
    ];
    ```
- name: mockFn.mock.results
  id: mock-function-api/index#mockfnmockresults
  summary: An array containing the results of all calls that have been made to this mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mock.results`

    An array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:

    - `'return'` - Indicates that the call completed by returning normally.
    - `'throw'` - Indicates that the call completed by throwing a value.
    - `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.

    The `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.

    For example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:

    ``` typescript
    [
      {
        type: 'return',
        value: 'result1',
      },
      {
        type: 'throw',
        value: {
          /* Error instance */
        },
      },
      {
        type: 'return',
        value: 'result2',
      },
    ];
    ```
- name: mockFn.mockClear()
  id: mock-function-api#mockfnmockclear
  summary: Clears all information stored in the mockFn.mock.calls, mockFn.mock.instances, mockFn.mock.contexts and mockFn.mock.results arrays
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockClear()`

    Clears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.

    Beware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.

    The [`clearMocks`](configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.
- name: mockFn.mockClear()
  id: mock-function-api/index#mockfnmockclear
  summary: Clears all information stored in the mockFn.mock.calls, mockFn.mock.instances, mockFn.mock.contexts and mockFn.mock.results arrays
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockClear()`

    Clears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.

    Beware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.

    The [`clearMocks`](../configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.
- name: mockFn.mockImplementation()
  id: mock-function-api#mockfnmockimplementationfn
  summary: Accepts a function that should be used as the implementation of the mock
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockImplementation(fn)`

    Accepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.

    tip

    `jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest.fn(scalar => 42 + scalar);

    mockFn(0); // 42
    mockFn(1); // 43

    mockFn.mockImplementation(scalar => 36 + scalar);

    mockFn(2); // 38
    mockFn(3); // 39
    ```

    ``` typescript
    const mockFn = jest.fn((scalar: number) => 42 + scalar);

    mockFn(0); // 42
    mockFn(1); // 43

    mockFn.mockImplementation(scalar => 36 + scalar);

    mockFn(2); // 38
    mockFn(3); // 39
    ```

    `.mockImplementation()` can also be used to mock class constructors:

    - JavaScript
    - TypeScript

    ``` typescript
    module.exports = class SomeClass {
      method(a, b) {}
    };
    ```

    SomeClass.js

    ``` typescript
    const SomeClass = require('./SomeClass');

    jest.mock('./SomeClass'); // this happens automatically with automocking

    const mockMethod = jest.fn();
    SomeClass.mockImplementation(() => {
      return {
        method: mockMethod,
      };
    });

    const some = new SomeClass();
    some.method('a', 'b');

    console.log('Calls to method: ', mockMethod.mock.calls);
    ```

    SomeClass.test.js

    ``` typescript
    export class SomeClass {
      method(a: string, b: string): void {}
    }
    ```

    SomeClass.ts

    ``` typescript
    import {SomeClass} from './SomeClass';

    jest.mock('./SomeClass'); // this happens automatically with automocking

    const mockMethod = jest.fn<(a: string, b: string) => void>();
    SomeClass.mockImplementation(() => {
      return {
        method: mockMethod,
      };
    });

    const some = new SomeClass();
    some.method('a', 'b');

    console.log('Calls to method: ', mockMethod.mock.calls);
    ```

    SomeClass.test.ts
- name: mockFn.mockImplementation()
  id: mock-function-api/index#mockfnmockimplementationfn
  summary: Accepts a function that should be used as the implementation of the mock
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockImplementation(fn)`

    Accepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.

    tip

    `jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest.fn(scalar => 42 + scalar);

    mockFn(0); // 42
    mockFn(1); // 43

    mockFn.mockImplementation(scalar => 36 + scalar);

    mockFn(2); // 38
    mockFn(3); // 39
    ```

    ``` typescript
    const mockFn = jest.fn((scalar: number) => 42 + scalar);

    mockFn(0); // 42
    mockFn(1); // 43

    mockFn.mockImplementation(scalar => 36 + scalar);

    mockFn(2); // 38
    mockFn(3); // 39
    ```

    `.mockImplementation()` can also be used to mock class constructors:

    - JavaScript
    - TypeScript

    ``` typescript
    module.exports = class SomeClass {
      method(a, b) {}
    };
    ```

    SomeClass.js

    ``` typescript
    const SomeClass = require('./SomeClass');

    jest.mock('./SomeClass'); // this happens automatically with automocking

    const mockMethod = jest.fn();
    SomeClass.mockImplementation(() => {
      return {
        method: mockMethod,
      };
    });

    const some = new SomeClass();
    some.method('a', 'b');

    console.log('Calls to method: ', mockMethod.mock.calls);
    ```

    SomeClass.test.js

    ``` typescript
    export class SomeClass {
      method(a: string, b: string): void {}
    }
    ```

    SomeClass.ts

    ``` typescript
    import {SomeClass} from './SomeClass';

    jest.mock('./SomeClass'); // this happens automatically with automocking

    const mockMethod = jest.fn<(a: string, b: string) => void>();
    SomeClass.mockImplementation(() => {
      return {
        method: mockMethod,
      };
    });

    const some = new SomeClass();
    some.method('a', 'b');

    console.log('Calls to method: ', mockMethod.mock.calls);
    ```

    SomeClass.test.ts
- name: mockFn.mockImplementationOnce()
  id: mock-function-api/index#mockfnmockimplementationoncefn
  summary: Accepts a function that will be used as an implementation of the mock for one call to the mocked function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockImplementationOnce(fn)`

    Accepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest
      .fn()
      .mockImplementationOnce(cb => cb(null, true))
      .mockImplementationOnce(cb => cb(null, false));

    mockFn((err, val) => console.log(val)); // true
    mockFn((err, val) => console.log(val)); // false
    ```

    ``` typescript
    const mockFn = jest
      .fn<(cb: (a: null, b: boolean) => void) => void>()
      .mockImplementationOnce(cb => cb(null, true))
      .mockImplementationOnce(cb => cb(null, false));

    mockFn((err, val) => console.log(val)); // true
    mockFn((err, val) => console.log(val)); // false
    ```

    When the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:

    ``` typescript
    const mockFn = jest
      .fn(() => 'default')
      .mockImplementationOnce(() => 'first call')
      .mockImplementationOnce(() => 'second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```
- name: mockFn.mockImplementationOnce()
  id: mock-function-api#mockfnmockimplementationoncefn
  summary: Accepts a function that will be used as an implementation of the mock for one call to the mocked function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockImplementationOnce(fn)`

    Accepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest
      .fn()
      .mockImplementationOnce(cb => cb(null, true))
      .mockImplementationOnce(cb => cb(null, false));

    mockFn((err, val) => console.log(val)); // true
    mockFn((err, val) => console.log(val)); // false
    ```

    ``` typescript
    const mockFn = jest
      .fn<(cb: (a: null, b: boolean) => void) => void>()
      .mockImplementationOnce(cb => cb(null, true))
      .mockImplementationOnce(cb => cb(null, false));

    mockFn((err, val) => console.log(val)); // true
    mockFn((err, val) => console.log(val)); // false
    ```

    When the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:

    ``` typescript
    const mockFn = jest
      .fn(() => 'default')
      .mockImplementationOnce(() => 'first call')
      .mockImplementationOnce(() => 'second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```
- name: mockFn.mockName()
  id: mock-function-api/index#mockfnmocknamename
  summary: Accepts a string to use in test result output in place of 'jest.fn()' to indicate which mock function is being referenced
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockName(name)`

    Accepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.

    For example:

    ``` typescript
    const mockFn = jest.fn().mockName('mockedFunction');

    // mockFn();
    expect(mockFn).toHaveBeenCalled();
    ```

    Will result in this error:

    ``` typescript
    expect(mockedFunction).toHaveBeenCalled()

    Expected mock function "mockedFunction" to have been called, but it was not called.
    ```
- name: mockFn.mockName()
  id: mock-function-api#mockfnmocknamename
  summary: Accepts a string to use in test result output in place of 'jest.fn()' to indicate which mock function is being referenced
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockName(name)`

    Accepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.

    For example:

    ``` typescript
    const mockFn = jest.fn().mockName('mockedFunction');

    // mockFn();
    expect(mockFn).toHaveBeenCalled();
    ```

    Will result in this error:

    ``` typescript
    expect(mockedFunction).toHaveBeenCalled()

    Expected mock function "mockedFunction" to have been called, but it was not called.
    ```
- name: mockFn.mockRejectedValue()
  id: mock-function-api/index#mockfnmockrejectedvaluevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRejectedValue(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementation(() => Promise.reject(value));
    ```

    Useful to create async mock functions that will always reject:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockRejectedValue(new Error('Async error message'));

      await asyncMock(); // throws 'Async error message'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<never>>()
        .mockRejectedValue(new Error('Async error message'));

      await asyncMock(); // throws 'Async error message'
    });
    ```
- name: mockFn.mockRejectedValue()
  id: mock-function-api#mockfnmockrejectedvaluevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRejectedValue(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementation(() => Promise.reject(value));
    ```

    Useful to create async mock functions that will always reject:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockRejectedValue(new Error('Async error message'));

      await asyncMock(); // throws 'Async error message'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<never>>()
        .mockRejectedValue(new Error('Async error message'));

      await asyncMock(); // throws 'Async error message'
    });
    ```
- name: mockFn.mockRejectedValueOnce()
  id: mock-function-api/index#mockfnmockrejectedvalueoncevalue
  summary: Please consult the Getting Started guide for details on how to setup Jest with TypeScript
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRejectedValueOnce(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementationOnce(() => Promise.reject(value));
    ```

    Useful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockResolvedValueOnce('first call')
        .mockRejectedValueOnce(new Error('Async error message'));

      await asyncMock(); // 'first call'
      await asyncMock(); // throws 'Async error message'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<string>>()
        .mockResolvedValueOnce('first call')
        .mockRejectedValueOnce(new Error('Async error message'));

      await asyncMock(); // 'first call'
      await asyncMock(); // throws 'Async error message'
    });
    ```

    ## TypeScript Usage

    tip

    Please consult the [Getting Started](../getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.
- name: mockFn.mockRejectedValueOnce()
  id: mock-function-api#mockfnmockrejectedvalueoncevalue
  summary: Please consult the Getting Started guide for details on how to setup Jest with TypeScript
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRejectedValueOnce(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementationOnce(() => Promise.reject(value));
    ```

    Useful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockResolvedValueOnce('first call')
        .mockRejectedValueOnce(new Error('Async error message'));

      await asyncMock(); // 'first call'
      await asyncMock(); // throws 'Async error message'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<string>>()
        .mockResolvedValueOnce('first call')
        .mockRejectedValueOnce(new Error('Async error message'));

      await asyncMock(); // 'first call'
      await asyncMock(); // throws 'Async error message'
    });
    ```

    ## TypeScript Usage

    tip

    Please consult the [Getting Started](getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.
- name: mockFn.mockReset()
  id: mock-function-api#mockfnmockreset
  summary: Does everything that mockFn.mockClear() does, and also removes any mocked return values or implementations
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReset()`

    Does everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also removes any mocked return values or implementations.

    This is useful when you want to completely reset a *mock* back to its initial state. (Note that resetting a *spy* will result in a function with no return value).

    The [`mockReset`](configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.
- name: mockFn.mockReset()
  id: mock-function-api/index#mockfnmockreset
  summary: Does everything that mockFn.mockClear() does, and also removes any mocked return values or implementations
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReset()`

    Does everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also removes any mocked return values or implementations.

    This is useful when you want to completely reset a *mock* back to its initial state. (Note that resetting a *spy* will result in a function with no return value).

    The [`mockReset`](../configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.
- name: mockFn.mockResolvedValue()
  id: mock-function-api/index#mockfnmockresolvedvaluevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockResolvedValue(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementation(() => Promise.resolve(value));
    ```

    Useful to mock async functions in async tests:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest.fn().mockResolvedValue(43);

      await asyncMock(); // 43
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);

      await asyncMock(); // 43
    });
    ```
- name: mockFn.mockResolvedValue()
  id: mock-function-api#mockfnmockresolvedvaluevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockResolvedValue(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementation(() => Promise.resolve(value));
    ```

    Useful to mock async functions in async tests:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest.fn().mockResolvedValue(43);

      await asyncMock(); // 43
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);

      await asyncMock(); // 43
    });
    ```
- name: mockFn.mockResolvedValueOnce()
  id: mock-function-api#mockfnmockresolvedvalueoncevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockResolvedValueOnce(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementationOnce(() => Promise.resolve(value));
    ```

    Useful to resolve different values over multiple async calls:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockResolvedValue('default')
        .mockResolvedValueOnce('first call')
        .mockResolvedValueOnce('second call');

      await asyncMock(); // 'first call'
      await asyncMock(); // 'second call'
      await asyncMock(); // 'default'
      await asyncMock(); // 'default'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<string>>()
        .mockResolvedValue('default')
        .mockResolvedValueOnce('first call')
        .mockResolvedValueOnce('second call');

      await asyncMock(); // 'first call'
      await asyncMock(); // 'second call'
      await asyncMock(); // 'default'
      await asyncMock(); // 'default'
    });
    ```
- name: mockFn.mockResolvedValueOnce()
  id: mock-function-api/index#mockfnmockresolvedvalueoncevalue
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockResolvedValueOnce(value)`

    Syntactic sugar function for:

    ``` typescript
    jest.fn().mockImplementationOnce(() => Promise.resolve(value));
    ```

    Useful to resolve different values over multiple async calls:

    - JavaScript
    - TypeScript

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn()
        .mockResolvedValue('default')
        .mockResolvedValueOnce('first call')
        .mockResolvedValueOnce('second call');

      await asyncMock(); // 'first call'
      await asyncMock(); // 'second call'
      await asyncMock(); // 'default'
      await asyncMock(); // 'default'
    });
    ```

    ``` typescript
    test('async test', async () => {
      const asyncMock = jest
        .fn<() => Promise<string>>()
        .mockResolvedValue('default')
        .mockResolvedValueOnce('first call')
        .mockResolvedValueOnce('second call');

      await asyncMock(); // 'first call'
      await asyncMock(); // 'second call'
      await asyncMock(); // 'default'
      await asyncMock(); // 'default'
    });
    ```
- name: mockFn.mockRestore()
  id: mock-function-api/index#mockfnmockrestore
  summary: Does everything that mockFn.mockReset() does, and also restores the original (non-mocked) implementation
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRestore()`

    Does everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.

    This is useful when you want to mock functions in certain test cases and restore the original implementation in others.

    Beware that `mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.

    The [`restoreMocks`](../configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.
- name: mockFn.mockRestore()
  id: mock-function-api#mockfnmockrestore
  summary: Does everything that mockFn.mockReset() does, and also restores the original (non-mocked) implementation
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockRestore()`

    Does everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.

    This is useful when you want to mock functions in certain test cases and restore the original implementation in others.

    Beware that `mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.

    The [`restoreMocks`](configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.
- name: mockFn.mockReturnThis()
  id: mock-function-api#mockfnmockreturnthis
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnThis()`

    Syntactic sugar function for:

    ``` typescript
    jest.fn(function () {
      return this;
    });
    ```
- name: mockFn.mockReturnThis()
  id: mock-function-api/index#mockfnmockreturnthis
  summary: null
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnThis()`

    Syntactic sugar function for:

    ``` typescript
    jest.fn(function () {
      return this;
    });
    ```
- name: mockFn.mockReturnValue()
  id: mock-function-api#mockfnmockreturnvaluevalue
  summary: Accepts a value that will be returned whenever the mock function is called
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnValue(value)`

    Accepts a value that will be returned whenever the mock function is called.

    - JavaScript
    - TypeScript

    ``` typescript
    const mock = jest.fn();

    mock.mockReturnValue(42);
    mock(); // 42

    mock.mockReturnValue(43);
    mock(); // 43
    ```

    ``` typescript
    const mock = jest.fn<() => number>();

    mock.mockReturnValue(42);
    mock(); // 42

    mock.mockReturnValue(43);
    mock(); // 43
    ```
- name: mockFn.mockReturnValue()
  id: mock-function-api/index#mockfnmockreturnvaluevalue
  summary: Accepts a value that will be returned whenever the mock function is called
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnValue(value)`

    Accepts a value that will be returned whenever the mock function is called.

    - JavaScript
    - TypeScript

    ``` typescript
    const mock = jest.fn();

    mock.mockReturnValue(42);
    mock(); // 42

    mock.mockReturnValue(43);
    mock(); // 43
    ```

    ``` typescript
    const mock = jest.fn<() => number>();

    mock.mockReturnValue(42);
    mock(); // 42

    mock.mockReturnValue(43);
    mock(); // 43
    ```
- name: mockFn.mockReturnValueOnce()
  id: mock-function-api#mockfnmockreturnvalueoncevalue
  summary: Accepts a value that will be returned for one call to the mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnValueOnce(value)`

    Accepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest
      .fn()
      .mockReturnValue('default')
      .mockReturnValueOnce('first call')
      .mockReturnValueOnce('second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```

    ``` typescript
    const mockFn = jest
      .fn<() => string>()
      .mockReturnValue('default')
      .mockReturnValueOnce('first call')
      .mockReturnValueOnce('second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```
- name: mockFn.mockReturnValueOnce()
  id: mock-function-api/index#mockfnmockreturnvalueoncevalue
  summary: Accepts a value that will be returned for one call to the mock function
  belongs_to: Mock Functions
  description: |-
    ### `mockFn.mockReturnValueOnce(value)`

    Accepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.

    - JavaScript
    - TypeScript

    ``` typescript
    const mockFn = jest
      .fn()
      .mockReturnValue('default')
      .mockReturnValueOnce('first call')
      .mockReturnValueOnce('second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```

    ``` typescript
    const mockFn = jest
      .fn<() => string>()
      .mockReturnValue('default')
      .mockReturnValueOnce('first call')
      .mockReturnValueOnce('second call');

    mockFn(); // 'first call'
    mockFn(); // 'second call'
    mockFn(); // 'default'
    mockFn(); // 'default'
    ```
- name: More Resources
  id: more-resources
  summary: By now you should have a good idea of how Jest can help you test your applications
  description: "# More Resources\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs\n\n- Learn about [Snapshot Testing](snapshot-testing), [Mock Functions](mock-functions), and more in our in-depth guides.\n- Migrate your existing tests to Jest by following our [migration guide](migration-guide).\n- Learn how to [configure Jest](configuration).\n- Look at the full [API Reference](api).\n- [Troubleshoot](troubleshooting) problems with Jest.\n\n## Learn by example\n\nYou will find a number of example test cases in the [`examples`](https://github.com/facebook/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\n## Join the community\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/fbjest) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/more-resources](https://jestjs.io/docs/more-resources)"
- name: Setup and Teardown
  id: setup-teardown
  summary: Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run
  description: "# Setup and Teardown\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n``` typescript\nbeforeEach(() => {\n  initializeCityDatabase();\n});\n\nafterEach(() => {\n  clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n``` typescript\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n```\n\n## One-Time Setup\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n``` typescript\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n## Scoping\n\nBy default, the `beforeAll` and `afterAll` blocks apply to every test in a file. You can also group tests together using a `describe` block. When they are inside a `describe` block, the `beforeAll` and `afterAll` blocks only apply to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n``` typescript\n// Applies to all tests in this file\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n``` typescript\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\n\ntest('', () => console.log('1 - test'));\n\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n## Order of Execution\n\nJest executes all describe handlers in a test file *before* it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n``` typescript\ndescribe('describe outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n\n    test('test 1', () => console.log('test 1'));\n  });\n\n  console.log('describe outer-b');\n\n  test('test 2', () => console.log('test 2'));\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n\n    test('test 3', () => console.log('test 3'));\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test 1\n// test 2\n// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n``` typescript\nbeforeEach(() => console.log('connection setup'));\nbeforeEach(() => console.log('database setup'));\n\nafterEach(() => console.log('database teardown'));\nafterEach(() => console.log('connection teardown'));\n\ntest('test 1', () => console.log('test 1'));\n\ndescribe('extra', () => {\n  beforeEach(() => console.log('extra database setup'));\n  afterEach(() => console.log('extra database teardown'));\n\n  test('test 2', () => console.log('test 2'));\n});\n\n// connection setup\n// database setup\n// test 1\n// database teardown\n// connection teardown\n\n// connection setup\n// database setup\n// extra database setup\n// test 2\n// extra database teardown\n// database teardown\n// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n``` typescript\n  beforeEach(() => console.log('connection setup'));\n+ afterEach(() => console.log('connection teardown'));\n\n  beforeEach(() => console.log('database setup'));\n+ afterEach(() => console.log('database teardown'));\n\n- afterEach(() => console.log('database teardown'));\n- afterEach(() => console.log('connection teardown'));\n\n  // ...\n```\n\n## General Advice\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n``` typescript\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/setup-teardown](https://jestjs.io/docs/setup-teardown)"
- name: Snapshot Testing
  id: snapshot-testing
  summary: Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly
  description: "# Snapshot Testing\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/facebook/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/facebook/jest/blob/main/examples/snapshot/Link.js):\n\n``` typescript\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/facebook/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n``` typescript\nexports[`renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/facebook/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\n> Note: The snapshot is directly scoped to the data you render – in our example the `<Link />` component with `page` prop passed to it. This implies that even if any other file has missing props (Say, `App.js`) in the `<Link />` component, it will still pass the test as the test doesn't know the usage of `<Link />` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n``` typescript\n// Updated test case with a Link to a different address\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\nIn that case, Jest will print this output:\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\n``` typescript\njest --updateSnapshot\n```\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/facebook/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode\n\nFailed snapshots can also be updated interactively in watch mode:\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n### Inline Snapshots\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\n**Example:**\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n``` typescript\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot();\n});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n``` typescript\nit('renders correctly', () => {\n  const tree = renderer\n    .create(<Link page=\"https://example.com\">Example Site</Link>)\n    .toJSON();\n  expect(tree).toMatchInlineSnapshot(`\n<a\n  className=\"normal\"\n  href=\"https://example.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Example Site\n</a>\n`);\n});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n``` typescript\nit('will fail every time', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot();\n});\n\n// Snapshot\nexports[`will fail every time 1`] = `\nObject {\n  \"createdAt\": 2018-05-19T23:36:09.816Z,\n  \"id\": 3,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n``` typescript\nit('will check the matchers and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    id: Math.floor(Math.random() * 20),\n    name: 'LeBron James',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    id: expect.any(Number),\n  });\n});\n\n// Snapshot\nexports[`will check the matchers and pass 1`] = `\nObject {\n  \"createdAt\": Any<Date>,\n  \"id\": Any<Number>,\n  \"name\": \"LeBron James\",\n}\n`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n``` typescript\nit('will check the values and pass', () => {\n  const user = {\n    createdAt: new Date(),\n    name: 'Bond... James Bond',\n  };\n\n  expect(user).toMatchSnapshot({\n    createdAt: expect.any(Date),\n    name: 'Bond... James Bond',\n  });\n});\n\n// Snapshot\nexports[`will check the values and pass 1`] = `\nObject {\n  \"createdAt\": Any<Date>,\n  \"name\": 'Bond... James Bond',\n}\n`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n``` typescript\nconst randomNumber = Math.round(Math.random() * 100);\nconst stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;\nconst stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);\nexpect(stringWithConstantData).toMatchSnapshot();\n```\n\nAnother way is to [mock](mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1. Treat snapshots as code\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2. Tests should be deterministic\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/facebook/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](mock-functions) to return a consistent value every time the test is run:\n\n``` typescript\nDate.now = jest.fn(() => 1482363367071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3. Use descriptive snapshot names\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n``` typescript\nexports[`<UserName /> should handle some test case`] = `null`;\n\nexports[`<UserName /> should handle some other test case`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\nTo:\n\n``` typescript\nexports[`<UserName /> should render null`] = `null`;\n\nexports[`<UserName /> should render Alan Turing`] = `\n<div>\n  Alan Turing\n</div>\n`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n``` typescript\nexports[`<UserName /> should render null`] = `\n<div>\n  Alan Turing\n</div>\n`;\n\nexports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?\n\n[React](tutorial-react) and [React Native](tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/facebook/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?\n\nYes, as well as with any other test.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/snapshot-testing](https://jestjs.io/docs/snapshot-testing)"
- name: test()
  id: api#testname-fn-timeout
  summary: All you need in a test file is the test method which runs a test
  belongs_to: Globals
  description: |-
    ### `test(name, fn, timeout)`

    Also under the alias: `it(name, fn, timeout)`

    All you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:

    ``` typescript
    test('did not rain', () => {
      expect(inchesOfRain()).toBe(0);
    });
    ```

    The first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    > Note: If a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. Jest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test callbacks. See how to test async code [here](asynchronous#callbacks).

    For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:

    ``` typescript
    test('has lemon in it', () => {
      return fetchBeverageList().then(list => {
        expect(list).toContain('lemon');
      });
    });
    ```

    Even though the call to `test` will return right away, the test doesn't complete until the promise resolves as well.
- name: test.concurrent()
  id: api#testconcurrentname-fn-timeout
  summary: Use test.concurrent if you want the test to run concurrently
  belongs_to: Globals
  description: |-
    ### `test.concurrent(name, fn, timeout)`

    Also under the alias: `it.concurrent(name, fn, timeout)`

    Use `test.concurrent` if you want the test to run concurrently.

    > Note: `test.concurrent` is considered experimental - see [here](https://github.com/facebook/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues

    The first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    ``` typescript
    test.concurrent('addition of 2 numbers', async () => {
      expect(5 + 3).toBe(8);
    });

    test.concurrent('subtraction 2 numbers', async () => {
      expect(5 - 3).toBe(2);
    });
    ```

    > Note: Use `maxConcurrency` in configuration to prevents Jest from executing more than the specified amount of tests at the same time
- name: test.concurrent.each()
  id: api#testconcurrenteachtablename-fn-timeout
  summary: Use test.concurrent.each if you keep duplicating the same test with different data
  belongs_to: Globals
  description: |-
    ### `test.concurrent.each(table)(name, fn, timeout)`

    Also under the alias: `it.concurrent.each(table)(name, fn, timeout)`

    Use `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.

    `test.concurrent.each` is available with two APIs:

    #### 1. `test.concurrent.each(table)(name, fn, timeout)`

    - `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row.
      - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`
    - `name`: `String` the title of the test block.
      - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):
        - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).
        - `%s`- String.
        - `%d`- Number.
        - `%i` - Integer.
        - `%f` - Floating point value.
        - `%j` - JSON.
        - `%o` - Object.
        - `%#` - Index of the test case.
        - `%%` - single percent sign ('%'). This does not consume an argument.
    - `fn`: `Function` the test to be ran, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    test.concurrent.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', async (a, b, expected) => {
      expect(a + b).toBe(expected);
    });
    ```

    #### 2. `` test.concurrent.each`table`(name, fn, timeout) ``

    - `table`: `Tagged Template Literal`
      - First row of variable name column headings separated with `|`
      - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.
    - `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.
      - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`
    - `fn`: `Function` the test to be ran, this is the function that will receive the test data object, **this will have to be an asynchronous function**.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    test.concurrent.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', async ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });
    ```
- name: test.concurrent.only.each()
  id: api#testconcurrentonlyeachtablename-fn
  summary: Use test.concurrent.only.each if you want to only run specific tests with different test data concurrently
  belongs_to: Globals
  description: |-
    ### `test.concurrent.only.each(table)(name, fn)`

    Also under the alias: `it.concurrent.only.each(table)(name, fn)`

    Use `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.

    `test.concurrent.only.each` is available with two APIs:

    #### `test.concurrent.only.each(table)(name, fn)`

    ``` typescript
    test.concurrent.only.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', async (a, b, expected) => {
      expect(a + b).toBe(expected);
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` test.only.each`table`(name, fn) ``

    ``` typescript
    test.concurrent.only.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', async ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: test.concurrent.skip.each()
  id: api#testconcurrentskipeachtablename-fn
  summary: Use test.concurrent.skip.each if you want to stop running a collection of asynchronous data driven tests
  belongs_to: Globals
  description: |-
    ### `test.concurrent.skip.each(table)(name, fn)`

    Also under the alias: `it.concurrent.skip.each(table)(name, fn)`

    Use `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.

    `test.concurrent.skip.each` is available with two APIs:

    #### `test.concurrent.skip.each(table)(name, fn)`

    ``` typescript
    test.concurrent.skip.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', async (a, b, expected) => {
      expect(a + b).toBe(expected); // will not be ran
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` test.concurrent.skip.each`table`(name, fn) ``

    ``` typescript
    test.concurrent.skip.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', async ({a, b, expected}) => {
      expect(a + b).toBe(expected); // will not be ran
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: test.each()
  id: api#testeachtablename-fn-timeout
  summary: Use test.each if you keep duplicating the same test with different data
  belongs_to: Globals
  description: |-
    ### `test.each(table)(name, fn, timeout)`

    Also under the alias: `it.each(table)(name, fn)` and `` it.each`table`(name, fn) ``

    Use `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.

    `test.each` is available with two APIs:

    #### 1. `test.each(table)(name, fn, timeout)`

    - `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row.
      - *Note* If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`
    - `name`: `String` the title of the test block.
      - Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):
        - `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).
        - `%s`- String.
        - `%d`- Number.
        - `%i` - Integer.
        - `%f` - Floating point value.
        - `%j` - JSON.
        - `%o` - Object.
        - `%#` - Index of the test case.
        - `%%` - single percent sign ('%'). This does not consume an argument.
      - Or generate unique test titles by injecting properties of test case object with `$variable`
        - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`
        - You can use `$#` to inject the index of the test case
        - You cannot use `$variable` with the `printf` formatting except for `%%`
    - `fn`: `Function` the test to be ran, this is the function that will receive the parameters in each row as function arguments.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    test.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      expect(a + b).toBe(expected);
    });
    ```

    ``` typescript
    test.each([
      {a: 1, b: 1, expected: 2},
      {a: 1, b: 2, expected: 3},
      {a: 2, b: 1, expected: 3},
    ])('.add($a, $b)', ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });
    ```

    #### 2. `` test.each`table`(name, fn, timeout) ``

    - `table`: `Tagged Template Literal`
      - First row of variable name column headings separated with `|`
      - One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.
    - `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.
      - To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`
    - `fn`: `Function` the test to be ran, this is the function that will receive the test data object.
    - Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. *Note: The default timeout is 5 seconds.*

    Example:

    ``` typescript
    test.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });
    ```
- name: test.failing()
  id: api#testfailingname-fn-timeout
  summary: This is only available with the default jest-circus runner
  belongs_to: Globals
  description: |-
    ### `test.failing(name, fn, timeout)`

    Also under the alias: `it.failing(name, fn, timeout)`

    note

    This is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.

    Use `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.

    tip

    You can use this type of tests i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.

    It can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.

    Example:

    ``` typescript
    test.failing('it is not equal', () => {
      expect(5).toBe(6); // this test will pass
    });

    test.failing('it is equal', () => {
      expect(10).toBe(10); // this test will fail
    });
    ```
- name: test.failing.each()
  id: api#testfailingeachname-fn-timeout
  summary: This is only available with the default jest-circus runner
  belongs_to: Globals
  description: |-
    ### `test.failing.each(name, fn, timeout)`

    Also under the alias: `it.failing.each(table)(name, fn)` and `` it.failing.each`table`(name, fn) ``

    note

    This is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.

    You can also run multiple tests at once by adding `each` after `failing`.

    Example:

    ``` typescript
    test.failing.each([
      {a: 1, b: 1, expected: 2},
      {a: 1, b: 2, expected: 3},
      {a: 2, b: 1, expected: 3},
    ])('.add($a, $b)', ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });
    ```
- name: test.only()
  id: api#testonlyname-fn-timeout
  summary: When you are debugging a large test file, you will often only want to run a subset of tests
  belongs_to: Globals
  description: |-
    ### `test.only(name, fn, timeout)`

    Also under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`

    When you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.

    Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. *Note: The default timeout is 5 seconds.*

    For example, let's say you had these tests:

    ``` typescript
    test.only('it is raining', () => {
      expect(inchesOfRain()).toBeGreaterThan(0);
    });

    test('it is not snowing', () => {
      expect(inchesOfSnow()).toBe(0);
    });
    ```

    Only the "it is raining" test will run in that test file, since it is run with `test.only`.

    Usually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.
- name: test.only.each()
  id: api#testonlyeachtablename-fn-1
  summary: Use test.only.each if you want to only run specific tests with different test data
  belongs_to: Globals
  description: |-
    ### `test.only.each(table)(name, fn)`

    Also under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, `` it.only.each`table`(name, fn) `` and `` fit.each`table`(name, fn) ``

    Use `test.only.each` if you want to only run specific tests with different test data.

    `test.only.each` is available with two APIs:

    #### `test.only.each(table)(name, fn)`

    ``` typescript
    test.only.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      expect(a + b).toBe(expected);
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` test.only.each`table`(name, fn) ``

    ``` typescript
    test.only.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', ({a, b, expected}) => {
      expect(a + b).toBe(expected);
    });

    test('will not be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: test.only.failing()
  id: api#testonlyfailingname-fn-timeout
  summary: This is only available with the default jest-circus runner
  belongs_to: Globals
  description: |-
    ### `test.only.failing(name, fn, timeout)`

    Also under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`

    note

    This is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.

    Use `test.only.failing` if you want to only run a specific failing test.
- name: test.skip()
  id: api#testskipname-fn
  summary: When you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason
  belongs_to: Globals
  description: |-
    ### `test.skip(name, fn)`

    Also under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`

    When you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.

    For example, let's say you had these tests:

    ``` typescript
    test('it is raining', () => {
      expect(inchesOfRain()).toBeGreaterThan(0);
    });

    test.skip('it is not snowing', () => {
      expect(inchesOfSnow()).toBe(0);
    });
    ```

    Only the "it is raining" test will run, since the other test is run with `test.skip`.

    You could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.
- name: test.skip.each()
  id: api#testskipeachtablename-fn
  summary: Use test.skip.each if you want to stop running a collection of data driven tests
  belongs_to: Globals
  description: |-
    ### `test.skip.each(table)(name, fn)`

    Also under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, `` it.skip.each`table`(name, fn) ``, `` xit.each`table`(name, fn) `` and `` xtest.each`table`(name, fn) ``

    Use `test.skip.each` if you want to stop running a collection of data driven tests.

    `test.skip.each` is available with two APIs:

    #### `test.skip.each(table)(name, fn)`

    ``` typescript
    test.skip.each([
      [1, 1, 2],
      [1, 2, 3],
      [2, 1, 3],
    ])('.add(%i, %i)', (a, b, expected) => {
      expect(a + b).toBe(expected); // will not be ran
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```

    #### `` test.skip.each`table`(name, fn) ``

    ``` typescript
    test.skip.each`
      a    | b    | expected
      ${1} | ${1} | ${2}
      ${1} | ${2} | ${3}
      ${2} | ${1} | ${3}
    `('returns $expected when $a is added $b', ({a, b, expected}) => {
      expect(a + b).toBe(expected); // will not be ran
    });

    test('will be ran', () => {
      expect(1 / 0).toBe(Infinity);
    });
    ```
- name: test.skip.failing()
  id: api#testskipfailingname-fn-timeout
  summary: This is only available with the default jest-circus runner
  belongs_to: Globals
  description: |-
    ### `test.skip.failing(name, fn, timeout)`

    Also under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`

    note

    This is only available with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner.

    Use `test.skip.failing` if you want to skip running a specific failing test.
- name: test.todo()
  id: api#testtodoname
  summary: Use test.todo when you are planning on writing tests
  belongs_to: Globals
  description: |-
    ### `test.todo(name)`

    Also under the alias: `it.todo(name)`

    Use `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.

    *Note*: If you supply a test callback function then the `test.todo` will throw an error. If you have already implemented the test and it is broken and you do not want it to run, then use `test.skip` instead.

    #### API

    - `name`: `String` the title of the test plan.

    Example:

    ``` typescript
    const add = (a, b) => a + b;

    test.todo('add should be associative');
    ```

    ## TypeScript Usage

    info

    These TypeScript usage tips and caveats are only applicable if you import from `'@jest/globals'`:

    ``` typescript
    import {describe, test} from '@jest/globals';
    ```
- name: Testing Asynchronous Code
  id: asynchronous
  summary: It's common in JavaScript for code to run asynchronously
  description: "# Testing Asynchronous Code\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n``` typescript\ntest('the data is peanut butter', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n```\n\n## Async/Await\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n``` typescript\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (e) {\n    expect(e).toMatch('error');\n  }\n});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n``` typescript\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n``` typescript\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(e => expect(e).toMatch('error'));\n});\n```\n\n## Callbacks\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will *not* work as intended:\n\n``` typescript\n// Don't do this!\ntest('the data is peanut butter', () => {\n  function callback(error, data) {\n    if (error) {\n      throw error;\n    }\n    expect(data).toBe('peanut butter');\n  }\n\n  fetchData(callback);\n});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n``` typescript\ntest('the data is peanut butter', done => {\n  function callback(error, data) {\n    if (error) {\n      done(error);\n      return;\n    }\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\n*Note: `done()` should not be mixed with Promises as this tends to lead to memory leaks in your tests.*\n\n## `.resolves` / `.rejects`\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n``` typescript\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n``` typescript\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/asynchronous](https://jestjs.io/docs/asynchronous)"
- name: Testing React Apps
  id: tutorial-react
  summary: At Facebook, we use Jest to test React applications
  description: "# Testing React Apps\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup\n\n### Setup with Create React App\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev react-test-renderer\n```\n\n``` typescript\nyarn add --dev react-test-renderer\n```\n\n### Setup without Create React App\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](getting-started#using-babel).\n\nRun\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\n``` typescript\nyarn add --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n``` typescript\n{\n  \"dependencies\": {\n    \"react\": \"<current-version>\",\n    \"react-dom\": \"<current-version>\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"<current-version>\",\n    \"@babel/preset-react\": \"<current-version>\",\n    \"babel-jest\": \"<current-version>\",\n    \"jest\": \"<current-version>\",\n    \"react-test-renderer\": \"<current-version>\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n``` typescript\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    ['@babel/preset-react', {runtime: 'automatic'}],\n  ],\n};\n```\n\nbabel.config.js\n\n**And you're good to go!**\n\n### Snapshot Testing\n\nLet's create a [snapshot test](snapshot-testing) for a Link component that renders hyperlinks:\n\n``` typescript\nimport {useState} from 'react';\n\nconst STATUS = {\n  HOVERED: 'hovered',\n  NORMAL: 'normal',\n};\n\nexport default function Link({page, children}) {\n  const [status, setStatus] = useState(STATUS.NORMAL);\n\n  const onMouseEnter = () => {\n    setStatus(STATUS.HOVERED);\n  };\n\n  const onMouseLeave = () => {\n    setStatus(STATUS.NORMAL);\n  };\n\n  return (\n    <a\n      className={status}\n      href={page || '#'}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </a>\n  );\n}\n```\n\nLink.js\n\n> Note: Examples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\n``` typescript\nimport renderer from 'react-test-renderer';\nimport Link from '../Link';\n\nit('changes the class when hovered', () => {\n  const component = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>,\n  );\n  let tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseEnter();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n\n  // manually trigger the callback\n  renderer.act(() => {\n    tree.props.onMouseLeave();\n  });\n  // re-rendering\n  tree = component.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\nLink.test.js\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n``` typescript\nexports[`changes the class when hovered 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 2`] = `\n<a\n  className=\"hovered\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n\nexports[`changes the class when hovered 3`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  Facebook\n</a>\n`;\n```\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/facebook/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n``` typescript\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n``` typescript\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.\n\n# Or:\nWarning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n\n    ``` typescript\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n\n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n\n    ``` typescript\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n\n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n\n4.  Disable warnings all together (should be done in your jest setup file):\n\n    ``` typescript\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n\n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing\n\nIf you'd like to assert, and manipulate your rendered components you can use [react-testing-library](https://github.com/kentcdodds/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following two examples use react-testing-library and Enzyme.\n\n#### react-testing-library\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev @testing-library/react\n```\n\n``` typescript\nyarn add --dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\n``` typescript\nimport {useState} from 'react';\n\nexport default function CheckboxWithLabel({labelOn, labelOff}) {\n  const [isChecked, setIsChecked] = useState(false);\n\n  const onChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n      {isChecked ? labelOn : labelOff}\n    </label>\n  );\n}\n```\n\nCheckboxWithLabel.js\n\n``` typescript\nimport {cleanup, fireEvent, render} from '@testing-library/react';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\n// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher\n// unmount and cleanup DOM after the test is finished.\nafterEach(cleanup);\n\nit('CheckboxWithLabel changes the text after click', () => {\n  const {queryByLabelText, getByLabelText} = render(\n    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,\n  );\n\n  expect(queryByLabelText(/off/i)).toBeTruthy();\n\n  fireEvent.click(getByLabelText(/off/i));\n\n  expect(queryByLabelText(/on/i)).toBeTruthy();\n});\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/facebook/jest/tree/main/examples/react-testing-library).\n\n#### Enzyme\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev enzyme\n```\n\n``` typescript\nyarn add --dev enzyme\n```\n\nIf you are using a React version below 15.5.0, you will also need to install `react-addons-test-utils`.\n\nLet's rewrite the test from above using Enzyme instead of react-testing-library. We use Enzyme's [shallow renderer](https://enzymejs.github.io/enzyme/docs/api/shallow.html) in this example.\n\n``` typescript\nimport Enzyme, {shallow} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport CheckboxWithLabel from '../CheckboxWithLabel';\n\nEnzyme.configure({adapter: new Adapter()});\n\nit('CheckboxWithLabel changes the text after click', () => {\n  // Render a checkbox with label in the document\n  const checkbox = shallow(<CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />);\n\n  expect(checkbox.text()).toEqual('Off');\n\n  checkbox.find('input').simulate('change');\n\n  expect(checkbox.text()).toEqual('On');\n});\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\nThe code for this example is available at [examples/enzyme](https://github.com/facebook/jest/tree/main/examples/enzyme).\n\n### Custom transformers\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\n``` typescript\n'use strict';\n\nconst {transform} = require('@babel/core');\nconst jestPreset = require('babel-preset-jest');\n\nmodule.exports = {\n  process(src, filename) {\n    const result = transform(src, {\n      filename,\n      presets: [jestPreset],\n    });\n\n    return result || src;\n  },\n};\n```\n\ncustom-transformer.js\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n``` typescript\nconst babelJest = require('babel-jest');\n\nmodule.exports = babelJest.createTransformer({\n  presets: ['my-custom-preset'],\n});\n```\n\nSee [dedicated docs](code-transformation#writing-custom-transformers) for more details.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/tutorial-react](https://jestjs.io/docs/tutorial-react)"
- name: Testing React Native Apps
  id: tutorial-react-native
  summary: At Facebook, we use Jest to test React Native applications
  description: "# Testing React Native Apps\n\nAt Facebook, we use Jest to test [React Native](https://reactnative.dev/) applications.\n\nGet a deeper insight into testing a working React Native app example by reading the following series: [Part 1: Jest – Snapshot come into play](https://callstack.com/blog/testing-react-native-with-the-new-jest-part-1-snapshots-come-into-play/) and [Part 2: Jest – Redux Snapshots for your Actions and Reducers](https://callstack.com/blog/testing-react-native-with-the-new-jest-part-2-redux-snapshots-for-your-actions-and-reducers/).\n\n## Setup\n\nStarting from react-native version 0.38, a Jest setup is included by default when running `react-native init`. The following configuration should be automatically added to your package.json file:\n\n``` typescript\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```\n\n*Note: If you are upgrading your react-native application and previously used the `jest-react-native` preset, remove the dependency from your `package.json` file and change the preset to `react-native` instead.*\n\nRun `yarn test` to run tests with Jest.\n\n## Snapshot Test\n\nLet's create a [snapshot test](snapshot-testing) for a small intro component with a few views and text components and some styles:\n\n``` typescript\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nclass Intro extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n        <Text style={styles.instructions}>\n          This is a React Native snapshot test.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  instructions: {\n    color: '#333333',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  welcome: {\n    fontSize: 20,\n    margin: 10,\n    textAlign: 'center',\n  },\n});\n\nexport default Intro;\n```\n\nIntro.js\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\n``` typescript\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Intro from '../Intro';\n\ntest('renders correctly', () => {\n  const tree = renderer.create(<Intro />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n\\_\\_tests\\_\\_/Intro-test.js\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n``` typescript\nexports[`Intro renders correctly 1`] = `\n<View\n  style={\n    Object {\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#F5FCFF\",\n      \"flex\": 1,\n      \"justifyContent\": \"center\",\n    }\n  }>\n  <Text\n    style={\n      Object {\n        \"fontSize\": 20,\n        \"margin\": 10,\n        \"textAlign\": \"center\",\n      }\n    }>\n    Welcome to React Native!\n  </Text>\n  <Text\n    style={\n      Object {\n        \"color\": \"#333333\",\n        \"marginBottom\": 5,\n        \"textAlign\": \"center\",\n      }\n    }>\n    This is a React Native snapshot test.\n  </Text>\n</View>\n`;\n```\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Intro-test.js.snap\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/react-native](https://github.com/facebook/jest/tree/main/examples/react-native).\n\n## Preset configuration\n\nThe preset sets up the environment and is very opinionated and based on what we found to be useful at Facebook. All of the configuration options can be overwritten just as they can be customized when no preset is used.\n\n### Environment\n\n`react-native` ships with a Jest preset, so the `jest.preset` field of your `package.json` should point to `react-native`. The preset is a node environment that mimics the environment of a React Native app. Because it doesn't load any DOM or browser APIs, it greatly improves Jest's startup time.\n\n### transformIgnorePatterns customization\n\nThe [`transformIgnorePatterns`](configuration#transformignorepatterns-arraystring) option can be used to specify which files shall be transformed by Babel. Many `react-native` npm modules unfortunately don't pre-compile their source code before publishing.\n\nBy default the `jest-react-native` preset only processes the project's own source files and `react-native`. If you have npm dependencies that have to be transformed you can customize this configuration option by including modules other than `react-native` by grouping them and separating them with the `|` operator:\n\n``` typescript\n{\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"\n  ]\n}\n```\n\nYou can test which paths would match (and thus be excluded from transformation) with a tool [like this](https://regex101.com/r/JsLIDM/1).\n\n`transformIgnorePatterns` will exclude a file from transformation if the path matches against **any** pattern provided. Splitting into multiple patterns could therefore have unintended results if you are not careful. In the example below, the exclusion (also known as a negative lookahead assertion) for `foo` and `bar` cancel each other out:\n\n``` typescript\n{\n  \"transformIgnorePatterns\": [\"node_modules/(?!foo/)\", \"node_modules/(?!bar/)\"] // not what you want\n}\n```\n\n### setupFiles\n\nIf you'd like to provide additional configuration for every test file, the [`setupFiles` configuration option](configuration#setupfiles-array) can be used to specify setup scripts.\n\n### moduleNameMapper\n\nThe [`moduleNameMapper`](configuration#modulenamemapper-objectstring-string--arraystring) can be used to map a module path to a different module. By default the preset maps all images to an image stub module but if a module cannot be found this configuration option can help:\n\n``` typescript\n{\n  \"moduleNameMapper\": {\n    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"\n  }\n}\n```\n\n## Tips\n\n### Mock native modules using jest.mock\n\nThe Jest preset built into `react-native` comes with a few default mocks that are applied on a react-native repository. However, some react-native components or third party components rely on native code to be rendered. In such cases, Jest's manual mocking system can help to mock out the underlying implementation.\n\nFor example, if your code depends on a third party native video component called `react-native-video` you might want to stub it out with a manual mock like this:\n\n``` typescript\njest.mock('react-native-video', () => 'Video');\n```\n\nThis will render the component as `<Video {...props} />` with all of its props in the snapshot output. See also [caveats around Enzyme and React 16](tutorial-react#snapshot-testing-with-mocks-enzyme-and-react-16).\n\nSometimes you need to provide a more complex manual mock. For example if you'd like to forward the prop types or static fields of a native component to a mock, you can return a different React component from a mock through this helper from jest-react-native:\n\n``` typescript\njest.mock('path/to/MyNativeComponent', () => {\n  const mockComponent = require('react-native/jest/mockComponent');\n  return mockComponent('path/to/MyNativeComponent');\n});\n```\n\nOr if you'd like to create your own manual mock, you can do something like this:\n\n``` typescript\njest.mock('Text', () => {\n  const RealComponent = jest.requireActual('Text');\n  const React = require('react');\n  class Text extends React.Component {\n    render() {\n      return React.createElement('Text', this.props, this.props.children);\n    }\n  }\n  Text.propTypes = RealComponent.propTypes;\n  return Text;\n});\n```\n\nIn other cases you may want to mock a native module that isn't a React component. The same technique can be applied. We recommend inspecting the native module's source code and logging the module when running a react native app on a real device and then modeling a manual mock after the real module.\n\nIf you end up mocking the same modules over and over it is recommended to define these mocks in a separate file and add it to the list of `setupFiles`.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/tutorial-react-native](https://jestjs.io/docs/tutorial-react-native)"
- name: Testing Web Frameworks
  id: testing-frameworks
  summary: Jest is a universal testing platform, with the ability to adapt to any JavaScript library or framework
  description: "# Testing Web Frameworks\n\nJest is a universal testing platform, with the ability to adapt to any JavaScript library or framework. In this section, we'd like to link to community posts and articles about integrating Jest into popular JS libraries.\n\n## React\n\n- [Testing ReactJS components with Jest](https://testing-library.com/docs/react-testing-library/example-intro) by Kent C. Dodds ([@kentcdodds](https://twitter.com/kentcdodds))\n\n## Vue.js\n\n- [Testing Vue.js components with Jest](https://alexjoverm.github.io/series/Unit-Testing-Vue-js-Components-with-the-Official-Vue-Testing-Tools-and-Jest/) by Alex Jover Morales ([@alexjoverm](https://twitter.com/alexjoverm))\n- [Jest for all: Episode 1 — Vue.js](https://medium.com/@kentaromiura_the_js_guy/jest-for-all-episode-1-vue-js-d616bccbe186#.d573vrce2) by Cristian Carlesso ([@kentaromiura](https://twitter.com/kentaromiura))\n\n## AngularJS\n\n- [Testing an AngularJS app with Jest](https://medium.com/aya-experience/testing-an-angularjs-app-with-jest-3029a613251) by Matthieu Lux ([@Swiip](https://twitter.com/Swiip))\n- [Running AngularJS Tests with Jest](https://engineering.talentpair.com/running-angularjs-tests-with-jest-49d0cc9c6d26) by Ben Brandt ([@benjaminbrandt](https://twitter.com/benjaminbrandt))\n- [AngularJS Unit Tests with Jest Actions (Traditional Chinese)](https://dwatow.github.io/2019/08-14-angularjs/angular-jest/?fbclid=IwAR2SrqYg_o6uvCQ79FdNPeOxs86dUqB6pPKgd9BgnHt1kuIDRyRM-ch11xg) by Chris Wang ([@dwatow](https://github.com/dwatow))\n\n## Angular\n\n- [Testing Angular faster with Jest](https://www.xfive.co/blog/testing-angular-faster-jest/) by Michał Pierzchała ([@thymikee](https://twitter.com/thymikee))\n\n## MobX\n\n- [How to Test React and MobX with Jest](https://semaphoreci.com/community/tutorials/how-to-test-react-and-mobx-with-jest) by Will Stern ([@willsterndev](https://twitter.com/willsterndev))\n\n## Redux\n\n- [Writing Tests](https://redux.js.org/recipes/writing-tests) by Redux docs\n\n## Express.js\n\n- [How to test Express.js with Jest and Supertest](http://www.albertgao.xyz/2017/05/24/how-to-test-expressjs-with-jest-and-supertest/) by Albert Gao ([@albertgao](https://twitter.com/albertgao))\n\n## GatsbyJS\n\n- [Unit Testing](https://www.gatsbyjs.org/docs/unit-testing/) by GatsbyJS docs\n\n## Hapi.js\n\n- [Testing Hapi.js With Jest](https://github.com/sivasankars/testing-hapi.js-with-jest) by Niralar\n\n## Next.js\n\n- [Jest and React Testing Library](https://nextjs.org/docs/testing#jest-and-react-testing-library) by Next.js docs\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/testing-frameworks](https://jestjs.io/docs/testing-frameworks)"
- name: The Jest Object
  id: jest-object
  summary: The jest object is automatically in scope within every test file
  description: "# The Jest Object\n\nThe `jest` object is automatically in scope within every test file. The methods in the `jest` object help create mocks and let you control Jest's overall behavior. It can also be imported explicitly by via `import {jest} from '@jest/globals'`.\n\n## Methods\n\n- [Mock Modules](#mock-modules)\n  - [`jest.disableAutomock()`](#jestdisableautomock)\n  - [`jest.enableAutomock()`](#jestenableautomock)\n  - [`jest.createMockFromModule(moduleName)`](#jestcreatemockfrommodulemodulename)\n  - [`jest.mock(moduleName, factory, options)`](#jestmockmodulename-factory-options)\n  - [`jest.Mocked<Source>`](#jestmockedsource)\n  - [`jest.mocked(source, options?)`](#jestmockedsource-options)\n  - [`jest.unmock(moduleName)`](#jestunmockmodulename)\n  - [`jest.doMock(moduleName, factory, options)`](#jestdomockmodulename-factory-options)\n  - [`jest.dontMock(moduleName)`](#jestdontmockmodulename)\n  - [`jest.setMock(moduleName, moduleExports)`](#jestsetmockmodulename-moduleexports)\n  - [`jest.requireActual(moduleName)`](#jestrequireactualmodulename)\n  - [`jest.requireMock(moduleName)`](#jestrequiremockmodulename)\n  - [`jest.resetModules()`](#jestresetmodules)\n  - [`jest.isolateModules(fn)`](#jestisolatemodulesfn)\n- [Mock Functions](#mock-functions)\n  - [`jest.fn(implementation?)`](#jestfnimplementation)\n  - [`jest.isMockFunction(fn)`](#jestismockfunctionfn)\n  - [`jest.spyOn(object, methodName)`](#jestspyonobject-methodname)\n  - [`jest.spyOn(object, methodName, accessType?)`](#jestspyonobject-methodname-accesstype)\n  - [`jest.clearAllMocks()`](#jestclearallmocks)\n  - [`jest.resetAllMocks()`](#jestresetallmocks)\n  - [`jest.restoreAllMocks()`](#jestrestoreallmocks)\n- [Fake Timers](#fake-timers)\n  - [`jest.useFakeTimers(fakeTimersConfig?)`](#jestusefaketimersfaketimersconfig)\n  - [`jest.useRealTimers()`](#jestuserealtimers)\n  - [`jest.runAllTicks()`](#jestrunallticks)\n  - [`jest.runAllTimers()`](#jestrunalltimers)\n  - [`jest.runAllImmediates()`](#jestrunallimmediates)\n  - [`jest.advanceTimersByTime(msToRun)`](#jestadvancetimersbytimemstorun)\n  - [`jest.runOnlyPendingTimers()`](#jestrunonlypendingtimers)\n  - [`jest.advanceTimersToNextTimer(steps)`](#jestadvancetimerstonexttimersteps)\n  - [`jest.clearAllTimers()`](#jestclearalltimers)\n  - [`jest.getTimerCount()`](#jestgettimercount)\n  - [`jest.setSystemTime(now?: number | Date)`](#jestsetsystemtimenow-number--date)\n  - [`jest.getRealSystemTime()`](#jestgetrealsystemtime)\n- [Misc](#misc)\n  - [`jest.setTimeout(timeout)`](#jestsettimeouttimeout)\n  - [`jest.retryTimes(numRetries, options)`](#jestretrytimesnumretries-options)\n\n## Mock Modules\n\n### `jest.disableAutomock()`\n\nDisables automatic mocking in the module loader.\n\n> See `automock` section of [configuration](configuration#automock-boolean) for more information\n\nAfter this method is called, all `require()`s will return the real versions of each module (rather than a mocked version).\n\nJest configuration:\n\n``` typescript\n{\n  \"automock\": true\n}\n```\n\nExample:\n\n``` typescript\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n};\n```\n\nutils.js\n\n``` typescript\nimport utils from '../utils';\n\njest.disableAutomock();\n\ntest('original implementation', () => {\n  // now we have the original implementation,\n  // even if we set the automocking in a jest configuration\n  expect(utils.authorize()).toBe('token');\n});\n```\n\n\\_\\_tests\\_\\_/disableAutomocking.js\n\nThis is usually useful when you have a scenario where the number of dependencies you want to mock is far less than the number of dependencies that you don't. For example, if you're writing a test for a module that uses a large number of dependencies that can be reasonably classified as \"implementation details\" of the module, then you likely do not want to mock them.\n\nExamples of dependencies that might be considered \"implementation details\" are things ranging from language built-ins (e.g. Array.prototype methods) to highly common utility methods (e.g. underscore/lo-dash, array utilities, etc) and entire libraries like React.js.\n\nReturns the `jest` object for chaining.\n\n*Note: this method was previously called `autoMockOff`. When using `babel-jest`, calls to `disableAutomock` will automatically be hoisted to the top of the code block. Use `autoMockOff` if you want to explicitly avoid this behavior.*\n\n### `jest.enableAutomock()`\n\nEnables automatic mocking in the module loader.\n\nReturns the `jest` object for chaining.\n\n> See `automock` section of [configuration](configuration#automock-boolean) for more information\n\nExample:\n\n``` typescript\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\nutils.js\n\n``` typescript\njest.enableAutomock();\n\nimport utils from '../utils';\n\ntest('original implementation', () => {\n  // now we have the mocked implementation,\n  expect(utils.authorize._isMockFunction).toBeTruthy();\n  expect(utils.isAuthorized._isMockFunction).toBeTruthy();\n});\n```\n\n\\_\\_tests\\_\\_/enableAutomocking.js\n\n*Note: this method was previously called `autoMockOn`. When using `babel-jest`, calls to `enableAutomock` will automatically be hoisted to the top of the code block. Use `autoMockOn` if you want to explicitly avoid this behavior.*\n\n### `jest.createMockFromModule(moduleName)`\n\n##### renamed in Jest **26.0.0+**\n\nAlso under the alias: `.genMockFromModule(moduleName)`\n\nGiven the name of a module, use the automatic mocking system to generate a mocked version of the module for you.\n\nThis is useful when you want to create a [manual mock](manual-mocks) that extends the automatic mock's behavior.\n\nExample:\n\n``` typescript\nexport default {\n  authorize: () => {\n    return 'token';\n  },\n  isAuthorized: secret => secret === 'wizard',\n};\n```\n\nutils.js\n\n``` typescript\nconst utils = jest.createMockFromModule('../utils').default;\nutils.isAuthorized = jest.fn(secret => secret === 'not wizard');\n\ntest('implementation created by jest.createMockFromModule', () => {\n  expect(utils.authorize.mock).toBeTruthy();\n  expect(utils.isAuthorized('not wizard')).toEqual(true);\n});\n```\n\n\\_\\_tests\\_\\_/createMockFromModule.test.js\n\nThis is how `createMockFromModule` will mock the following data types:\n\n#### `Function`\n\nCreates a new [mock function](mock-functions). The new function has no formal parameters and when called will return `undefined`. This functionality also applies to `async` functions.\n\n#### `Class`\n\nCreates a new class. The interface of the original class is maintained, all of the class member functions and properties will be mocked.\n\n#### `Object`\n\nCreates a new deeply cloned object. The object keys are maintained and their values are mocked.\n\n#### `Array`\n\nCreates a new empty array, ignoring the original.\n\n#### `Primitives`\n\nCreates a new property with the same primitive value as the original property.\n\nExample:\n\n``` typescript\nmodule.exports = {\n  function: function square(a, b) {\n    return a * b;\n  },\n  asyncFunction: async function asyncSquare(a, b) {\n    const result = (await a) * b;\n    return result;\n  },\n  class: new (class Bar {\n    constructor() {\n      this.array = [1, 2, 3];\n    }\n    foo() {}\n  })(),\n  object: {\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [1, 2, 3],\n    },\n  },\n  array: [1, 2, 3],\n  number: 123,\n  string: 'baz',\n  boolean: true,\n  symbol: Symbol.for('a.b.c'),\n};\n```\n\nexample.js\n\n``` typescript\nconst example = jest.createMockFromModule('./example');\n\ntest('should run example code', () => {\n  // creates a new mocked function with no formal arguments.\n  expect(example.function.name).toEqual('square');\n  expect(example.function.length).toEqual(0);\n\n  // async functions get the same treatment as standard synchronous functions.\n  expect(example.asyncFunction.name).toEqual('asyncSquare');\n  expect(example.asyncFunction.length).toEqual(0);\n\n  // creates a new class with the same interface, member functions and properties are mocked.\n  expect(example.class.constructor.name).toEqual('Bar');\n  expect(example.class.foo.name).toEqual('foo');\n  expect(example.class.array.length).toEqual(0);\n\n  // creates a deeply cloned version of the original object.\n  expect(example.object).toEqual({\n    baz: 'foo',\n    bar: {\n      fiz: 1,\n      buzz: [],\n    },\n  });\n\n  // creates a new empty array, ignoring the original array.\n  expect(example.array.length).toEqual(0);\n\n  // creates a new property with the same primitive value as the original property.\n  expect(example.number).toEqual(123);\n  expect(example.string).toEqual('baz');\n  expect(example.boolean).toEqual(true);\n  expect(example.symbol).toEqual(Symbol.for('a.b.c'));\n});\n```\n\n\\_\\_tests\\_\\_/example.test.js\n\n### `jest.mock(moduleName, factory, options)`\n\nMocks a module with an auto-mocked version when it is being required. `factory` and `options` are optional. For example:\n\n``` typescript\nmodule.exports = () => 'banana';\n```\n\nbanana.js\n\n``` typescript\njest.mock('../banana');\n\nconst banana = require('../banana'); // banana will be explicitly mocked.\n\nbanana(); // will return 'undefined' because the function is auto-mocked.\n```\n\n\\_\\_tests\\_\\_/test.js\n\nThe second argument can be used to specify an explicit module factory that is being run instead of using Jest's automocking feature:\n\n``` typescript\njest.mock('../moduleName', () => {\n  return jest.fn(() => 42);\n});\n\n// This runs the function specified as second argument to `jest.mock`.\nconst moduleName = require('../moduleName');\nmoduleName(); // Will return '42';\n```\n\nWhen using the `factory` parameter for an ES6 module with a default export, the `__esModule: true` property needs to be specified. This property is normally generated by Babel / TypeScript, but here it needs to be set manually. When importing a default export, it's an instruction to import the property named `default` from the export object:\n\n``` typescript\nimport moduleName, {foo} from '../moduleName';\n\njest.mock('../moduleName', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => 42),\n    foo: jest.fn(() => 43),\n  };\n});\n\nmoduleName(); // Will return 42\nfoo(); // Will return 43\n```\n\nThe third argument can be used to create virtual mocks – mocks of modules that don't exist anywhere in the system:\n\n``` typescript\njest.mock(\n  '../moduleName',\n  () => {\n    /*\n     * Custom implementation of a module that doesn't exist in JS,\n     * like a generated module or a native module in react-native.\n     */\n  },\n  {virtual: true},\n);\n```\n\n> **Warning:** Importing a module in a setup file (as specified by `setupFilesAfterEnv`) will prevent mocking for the module in question, as well as all the modules that it imports.\n\nModules that are mocked with `jest.mock` are mocked only for the file that calls `jest.mock`. Another file that imports the module will get the original implementation even if it runs after the test file that mocks the module.\n\nReturns the `jest` object for chaining.\n\ntip\n\nWriting tests in TypeScript? Use [`jest.Mocked`](mock-function-api/index#jestmockedsource) utility type or [`jest.mocked()`](mock-function-api/index#jestmockedsource-options) helper method to have your mocked modules typed.\n\n### `jest.Mocked<Source>`\n\nSee [TypeScript Usage](mock-function-api/index#jestmockedsource) chapter of Mock Functions page for documentation.\n\n### `jest.mocked(source, options?)`\n\nSee [TypeScript Usage](mock-function-api/index#jestmockedsource-options) chapter of Mock Functions page for documentation.\n\n### `jest.unmock(moduleName)`\n\nIndicates that the module system should never return a mocked version of the specified module from `require()` (e.g. that it should always return the real module).\n\nThe most common use of this API is for specifying the module a given test intends to be testing (and thus doesn't want automatically mocked).\n\nReturns the `jest` object for chaining.\n\n### `jest.doMock(moduleName, factory, options)`\n\nWhen using `babel-jest`, calls to `mock` will automatically be hoisted to the top of the code block. Use this method if you want to explicitly avoid this behavior.\n\nOne example when this is useful is when you want to mock a module differently within the same file:\n\n``` typescript\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 1);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toEqual(1);\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return jest.fn(() => 2);\n  });\n  const moduleName = require('../moduleName');\n  expect(moduleName()).toEqual(2);\n});\n```\n\nUsing `jest.doMock()` with ES6 imports requires additional steps. Follow these if you don't want to use `require` in your tests:\n\n- We have to specify the `__esModule: true` property (see the [`jest.mock()`](#jestmockmodulename-factory-options) API for more information).\n- Static ES6 module imports are hoisted to the top of the file, so instead we have to import them dynamically using `import()`.\n- Finally, we need an environment which supports dynamic importing. Please see [Using Babel](getting-started#using-babel) for the initial setup. Then add the plugin [babel-plugin-dynamic-import-node](https://www.npmjs.com/package/babel-plugin-dynamic-import-node), or an equivalent, to your Babel config to enable dynamic importing in Node.\n\n``` typescript\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('moduleName 1', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default1',\n      foo: 'foo1',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toEqual('default1');\n    expect(moduleName.foo).toEqual('foo1');\n  });\n});\n\ntest('moduleName 2', () => {\n  jest.doMock('../moduleName', () => {\n    return {\n      __esModule: true,\n      default: 'default2',\n      foo: 'foo2',\n    };\n  });\n  return import('../moduleName').then(moduleName => {\n    expect(moduleName.default).toEqual('default2');\n    expect(moduleName.foo).toEqual('foo2');\n  });\n});\n```\n\nReturns the `jest` object for chaining.\n\n### `jest.dontMock(moduleName)`\n\nWhen using `babel-jest`, calls to `unmock` will automatically be hoisted to the top of the code block. Use this method if you want to explicitly avoid this behavior.\n\nReturns the `jest` object for chaining.\n\n### `jest.setMock(moduleName, moduleExports)`\n\nExplicitly supplies the mock object that the module system should return for the specified module.\n\nOn occasion, there are times where the automatically generated mock the module system would normally provide you isn't adequate enough for your testing needs. Normally under those circumstances you should write a [manual mock](manual-mocks) that is more adequate for the module in question. However, on extremely rare occasions, even a manual mock isn't suitable for your purposes and you need to build the mock yourself inside your test.\n\nIn these rare scenarios you can use this API to manually fill the slot in the module system's mock-module registry.\n\nReturns the `jest` object for chaining.\n\n*Note It is recommended to use [`jest.mock()`](#jestmockmodulename-factory-options) instead. The `jest.mock` API's second argument is a module factory instead of the expected exported module object.*\n\n### `jest.requireActual(moduleName)`\n\nReturns the actual module instead of a mock, bypassing all checks on whether the module should receive a mock implementation or not.\n\nExample:\n\n``` typescript\njest.mock('../myModule', () => {\n  // Require the original module to not be mocked...\n  const originalModule = jest.requireActual('../myModule');\n\n  return {\n    __esModule: true, // Use it when dealing with esModules\n    ...originalModule,\n    getRandom: jest.fn().mockReturnValue(10),\n  };\n});\n\nconst getRandom = require('../myModule').getRandom;\n\ngetRandom(); // Always returns 10\n```\n\n### `jest.requireMock(moduleName)`\n\nReturns a mock module instead of the actual module, bypassing all checks on whether the module should be required normally or not.\n\n### `jest.resetModules()`\n\nResets the module registry - the cache of all required modules. This is useful to isolate modules where local state might conflict between tests.\n\nExample:\n\n``` typescript\nconst sum1 = require('../sum');\njest.resetModules();\nconst sum2 = require('../sum');\nsum1 === sum2;\n// > false (Both sum modules are separate \"instances\" of the sum module.)\n```\n\nExample in a test:\n\n``` typescript\nbeforeEach(() => {\n  jest.resetModules();\n});\n\ntest('works', () => {\n  const sum = require('../sum');\n});\n\ntest('works too', () => {\n  const sum = require('../sum');\n  // sum is a different copy of the sum module from the previous test.\n});\n```\n\nReturns the `jest` object for chaining.\n\n### `jest.isolateModules(fn)`\n\n`jest.isolateModules(fn)` goes a step further than `jest.resetModules()` and creates a sandbox registry for the modules that are loaded inside the callback function. This is useful to isolate specific modules for every test so that local module state doesn't conflict between tests.\n\n``` typescript\nlet myModule;\njest.isolateModules(() => {\n  myModule = require('myModule');\n});\n\nconst otherCopyOfMyModule = require('myModule');\n```\n\n## Mock Functions\n\n### `jest.fn(implementation?)`\n\nReturns a new, unused [mock function](mock-function-api). Optionally takes a mock implementation.\n\n``` typescript\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled();\n\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\n```\n\ntip\n\nSee [Mock Functions](mock-function-api#jestfnimplementation) page for details on TypeScript usage.\n\n### `jest.isMockFunction(fn)`\n\nDetermines if the given function is a mocked function.\n\n### `jest.spyOn(object, methodName)`\n\nCreates a mock function similar to `jest.fn` but also tracks calls to `object[methodName]`. Returns a Jest [mock function](mock-function-api).\n\nnote\n\nBy default, `jest.spyOn` also calls the **spied** method. This is different behavior from most other test libraries. If you want to overwrite the original function, you can use `jest.spyOn(object, methodName).mockImplementation(() => customImplementation)` or `object[methodName] = jest.fn(() => customImplementation);`\n\ntip\n\nSince `jest.spyOn` is a mock. You could restore the initial state calling [jest.restoreAllMocks](#jestrestoreallmocks) on [afterEach](api#aftereachfn-timeout) method.\n\nExample:\n\n``` typescript\nconst video = {\n  play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n```\n\nExample test:\n\n``` typescript\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n  const isPlaying = video.play();\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n```\n\n### `jest.spyOn(object, methodName, accessType?)`\n\nSince Jest 22.1.0+, the `jest.spyOn` method takes an optional third argument of `accessType` that can be either `'get'` or `'set'`, which proves to be useful when you want to spy on a getter or a setter, respectively.\n\nExample:\n\n``` typescript\nconst video = {\n  // it's a getter!\n  get play() {\n    return true;\n  },\n};\n\nmodule.exports = video;\n\nconst audio = {\n  _volume: false,\n  // it's a setter!\n  set volume(value) {\n    this._volume = value;\n  },\n  get volume() {\n    return this._volume;\n  },\n};\n\nmodule.exports = audio;\n```\n\nExample test:\n\n``` typescript\nconst audio = require('./audio');\nconst video = require('./video');\n\nafterEach(() => {\n  // restore the spy created with spyOn\n  jest.restoreAllMocks();\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play', 'get'); // we pass 'get'\n  const isPlaying = video.play;\n\n  expect(spy).toHaveBeenCalled();\n  expect(isPlaying).toBe(true);\n});\n\ntest('plays audio', () => {\n  const spy = jest.spyOn(audio, 'volume', 'set'); // we pass 'set'\n  audio.volume = 100;\n\n  expect(spy).toHaveBeenCalled();\n  expect(audio.volume).toBe(100);\n});\n```\n\n### `jest.clearAllMocks()`\n\nClears the `mock.calls`, `mock.instances`, `mock.contexts` and `mock.results` properties of all mocks. Equivalent to calling [`.mockClear()`](mock-function-api#mockfnmockclear) on every mocked function.\n\nReturns the `jest` object for chaining.\n\n### `jest.resetAllMocks()`\n\nResets the state of all mocks. Equivalent to calling [`.mockReset()`](mock-function-api#mockfnmockreset) on every mocked function.\n\nReturns the `jest` object for chaining.\n\n### `jest.restoreAllMocks()`\n\nRestores all mocks back to their original value. Equivalent to calling [`.mockRestore()`](mock-function-api#mockfnmockrestore) on every mocked function. Beware that `jest.restoreAllMocks()` only works when the mock was created with `jest.spyOn`; other mocks will require you to manually restore them.\n\n## Fake Timers\n\n### `jest.useFakeTimers(fakeTimersConfig?)`\n\nInstructs Jest to use fake versions of the global date, performance, time and timer APIs. Fake timers implementation is backed by [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).\n\nFake timers will swap out `Date`, `performance.now()`, `queueMicrotask()`, `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with an implementation that gets its time from the fake clock.\n\nIn Node environment `process.hrtime`, `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()`, `requestIdleCallback()`, `cancelIdleCallback()` will be replaced as well.\n\nConfiguration options:\n\n``` typescript\ntype FakeableAPI =\n  | 'Date'\n  | 'hrtime'\n  | 'nextTick'\n  | 'performance'\n  | 'queueMicrotask'\n  | 'requestAnimationFrame'\n  | 'cancelAnimationFrame'\n  | 'requestIdleCallback'\n  | 'cancelIdleCallback'\n  | 'setImmediate'\n  | 'clearImmediate'\n  | 'setInterval'\n  | 'clearInterval'\n  | 'setTimeout'\n  | 'clearTimeout';\n\ntype FakeTimersConfig = {\n  /**\n   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n   * The default is `false`.\n   */\n  advanceTimers?: boolean | number;\n  /**\n   * List of names of APIs that should not be faked. The default is `[]`, meaning\n   * all APIs are faked.\n   */\n  doNotFake?: Array<FakeableAPI>;\n  /**\n   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n   * The default is `false`.\n   */\n  legacyFakeTimers?: boolean;\n  /** Sets current system time to be used by fake timers. The default is `Date.now()`. */\n  now?: number | Date;\n  /**\n   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n   * The default is `100_000` timers.\n   */\n  timerLimit?: number;\n};\n```\n\nCalling `jest.useFakeTimers()` will use fake timers for all tests within the file, until original timers are restored with `jest.useRealTimers()`.\n\nYou can call `jest.useFakeTimers()` or `jest.useRealTimers()` from anywhere: top level, inside an `test` block, etc. Keep in mind that this is a **global operation** and will affect other tests within the same file. Calling `jest.useFakeTimers()` once again in the same test file would reset the internal state (e.g. timer count) and reinstall fake timers using the provided options:\n\n``` typescript\ntest('advance the timers automatically', () => {\n  jest.useFakeTimers({advanceTimers: true});\n  // ...\n});\n\ntest('do not advance the timers and do not fake `performance`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n  // ...\n});\n\ntest('uninstall fake timers for the rest of tests in the file', () => {\n  jest.useRealTimers();\n  // ...\n});\n```\n\nLegacy Fake Timers\n\nFor some reason you might have to use legacy implementation of fake timers. It can be enabled like this (additional options are not supported):\n\n``` typescript\njest.useFakeTimers({\n  legacyFakeTimers: true,\n});\n```\n\nLegacy fake timers will swap out `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with Jest [mock functions](mock-function-api). In Node environment `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()` will be also replaced.\n\nReturns the `jest` object for chaining.\n\n### `jest.useRealTimers()`\n\nInstructs Jest to restore the original implementations of the global date, performance, time and timer APIs. For example, you may call `jest.useRealTimers()` inside `afterEach` hook to restore timers after each test:\n\n``` typescript\nafterEach(() => {\n  jest.useRealTimers();\n});\n\ntest('do something with fake timers', () => {\n  jest.useFakeTimers();\n  // ...\n});\n\ntest('do something with real timers', () => {\n  // ...\n});\n```\n\nReturns the `jest` object for chaining.\n\n### `jest.runAllTicks()`\n\nExhausts the **micro**-task queue (usually interfaced in node via `process.nextTick`).\n\nWhen this API is called, all pending micro-tasks that have been queued via `process.nextTick` will be executed. Additionally, if those micro-tasks themselves schedule new micro-tasks, those will be continually exhausted until there are no more micro-tasks remaining in the queue.\n\n### `jest.runAllTimers()`\n\nExhausts both the **macro**-task queue (i.e., all tasks queued by `setTimeout()`, `setInterval()`, and `setImmediate()`) and the **micro**-task queue (usually interfaced in node via `process.nextTick`).\n\nWhen this API is called, all pending macro-tasks and micro-tasks will be executed. If those tasks themselves schedule new tasks, those will be continually exhausted until there are no more tasks remaining in the queue.\n\nThis is often useful for synchronously executing setTimeouts during a test in order to synchronously assert about some behavior that would only happen after the `setTimeout()` or `setInterval()` callbacks executed. See the [Timer mocks](timer-mocks) doc for more information.\n\n### `jest.runAllImmediates()`\n\nExhausts all tasks queued by `setImmediate()`.\n\ninfo\n\nThis function is only available when using legacy fake timers implementation.\n\n### `jest.advanceTimersByTime(msToRun)`\n\nExecutes only the macro task queue (i.e. all tasks queued by `setTimeout()` or `setInterval()` and `setImmediate()`).\n\nWhen this API is called, all timers are advanced by `msToRun` milliseconds. All pending \"macro-tasks\" that have been queued via `setTimeout()` or `setInterval()`, and would be executed within this time frame will be executed. Additionally, if those macro-tasks schedule new macro-tasks that would be executed within the same time frame, those will be executed until there are no more macro-tasks remaining in the queue, that should be run within `msToRun` milliseconds.\n\n### `jest.runOnlyPendingTimers()`\n\nExecutes only the macro-tasks that are currently pending (i.e., only the tasks that have been queued by `setTimeout()` or `setInterval()` up to this point). If any of the currently pending macro-tasks schedule new macro-tasks, those new tasks will not be executed by this call.\n\nThis is useful for scenarios such as one where the module being tested schedules a `setTimeout()` whose callback schedules another `setTimeout()` recursively (meaning the scheduling never stops). In these scenarios, it's useful to be able to run forward in time by a single step at a time.\n\n### `jest.advanceTimersToNextTimer(steps)`\n\nAdvances all timers by the needed milliseconds so that only the next timeouts/intervals will run.\n\nOptionally, you can provide `steps`, so it will run `steps` amount of next timeouts/intervals.\n\n### `jest.clearAllTimers()`\n\nRemoves any pending timers from the timer system.\n\nThis means, if any timers have been scheduled (but have not yet executed), they will be cleared and will never have the opportunity to execute in the future.\n\n### `jest.getTimerCount()`\n\nReturns the number of fake timers still left to run.\n\n### `jest.setSystemTime(now?: number | Date)`\n\nSet the current system time used by fake timers. Simulates a user changing the system clock while your program is running. It affects the current time but it does not in itself cause e.g. timers to fire; they will fire exactly as they would have done without the call to `jest.setSystemTime()`.\n\ninfo\n\nThis function is not available when using legacy fake timers implementation.\n\n### `jest.getRealSystemTime()`\n\nWhen mocking time, `Date.now()` will also be mocked. If you for some reason need access to the real current time, you can invoke this function.\n\ninfo\n\nThis function is not available when using legacy fake timers implementation.\n\n## Misc\n\n### `jest.setTimeout(timeout)`\n\nSet the default timeout interval (in milliseconds) for all tests and before/after hooks in the test file. This only affects the test file from which this function is called.\n\nTo set timeout intervals on different tests in the same file, use the [`timeout` option on each individual test](api#testname-fn-timeout).\n\n*Note: The default timeout interval is 5 seconds if this method is not called.*\n\n*Note: If you want to set the timeout for all test files, a good place to do this is in `setupFilesAfterEnv`.*\n\nExample:\n\n``` typescript\njest.setTimeout(1000); // 1 second\n```\n\n### `jest.retryTimes(numRetries, options)`\n\nRuns failed tests n-times until they pass or until the max number of retries is exhausted. `options` are optional. This only works with the default [jest-circus](https://github.com/facebook/jest/tree/main/packages/jest-circus) runner! This must live at the top-level of a test file or in a describe block. Retries *will not* work if `jest.retryTimes()` is called in a `beforeEach` or a `test` block.\n\nExample in a test:\n\n``` typescript\njest.retryTimes(3);\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\nIf `logErrorsBeforeRetry` is enabled, Jest will log the error(s) that caused the test to fail to the console, providing visibility on why a retry occurred.\n\n``` typescript\njest.retryTimes(3, {logErrorsBeforeRetry: true});\ntest('will fail', () => {\n  expect(true).toBe(false);\n});\n```\n\nReturns the `jest` object for chaining.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/jest-object](https://jestjs.io/docs/jest-object)"
- name: Timer Mocks
  id: timer-mocks
  summary: The native timer functions (i.e., setTimeout(), setInterval(), clearTimeout(), clearInterval()) are less than ideal for a testing environment since they depend on real time to elapse
  description: "# Timer Mocks\n\nThe native timer functions (i.e., `setTimeout()`, `setInterval()`, `clearTimeout()`, `clearInterval()`) are less than ideal for a testing environment since they depend on real time to elapse. Jest can swap out timers with functions that allow you to control the passage of time. [Great Scott!](https://www.youtube.com/watch?v=QZoJ2Pt27BY)\n\ninfo\n\nAlso see [Fake Timers API](jest-object#fake-timers) documentation.\n\n## Enable Fake Timers\n\nIn the following example we enable fake timers by calling `jest.useFakeTimers()`. This is replacing the original implementation of `setTimeout()` and other timer functions. Timers can be restored to their normal behavior with `jest.useRealTimers()`.\n\n``` typescript\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\ntimerGame.js\n\n``` typescript\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ntest('waits 1 second before ending the game', () => {\n  const timerGame = require('../timerGame');\n  timerGame();\n\n  expect(setTimeout).toHaveBeenCalledTimes(1);\n  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n});\n```\n\n\\_\\_tests\\_\\_/timerGame-test.js\n\n## Run All Timers\n\nAnother test we might want to write for this module is one that asserts that the callback is called after 1 second. To do this, we're going to use Jest's timer control APIs to fast-forward time right in the middle of the test:\n\n``` typescript\njest.useFakeTimers();\ntest('calls the callback after 1 second', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toBeCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers();\n\n  // Now our callback should have been called!\n  expect(callback).toBeCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n## Run Pending Timers\n\nThere are also scenarios where you might have a recursive timer – that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop, throwing the following error: \"Aborting after running 100000 timers, assuming an infinite loop!\"\n\nIf that is your case, using `jest.runOnlyPendingTimers()` will solve the problem:\n\n``` typescript\nfunction infiniteTimerGame(callback) {\n  console.log('Ready....go!');\n\n  setTimeout(() => {\n    console.log(\"Time's up! 10 seconds before the next game starts...\");\n    callback && callback();\n\n    // Schedule the next game in 10 seconds\n    setTimeout(() => {\n      infiniteTimerGame(callback);\n    }, 10000);\n  }, 1000);\n}\n\nmodule.exports = infiniteTimerGame;\n```\n\ninfiniteTimerGame.js\n\n``` typescript\njest.useFakeTimers();\njest.spyOn(global, 'setTimeout');\n\ndescribe('infiniteTimerGame', () => {\n  test('schedules a 10-second timer after 1 second', () => {\n    const infiniteTimerGame = require('../infiniteTimerGame');\n    const callback = jest.fn();\n\n    infiniteTimerGame(callback);\n\n    // At this point in time, there should have been a single call to\n    // setTimeout to schedule the end of the game in 1 second.\n    expect(setTimeout).toHaveBeenCalledTimes(1);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\n\n    // Fast forward and exhaust only currently pending timers\n    // (but not any new timers that get created during that process)\n    jest.runOnlyPendingTimers();\n\n    // At this point, our 1-second timer should have fired its callback\n    expect(callback).toBeCalled();\n\n    // And it should have created a new timer to start the game over in\n    // 10 seconds\n    expect(setTimeout).toHaveBeenCalledTimes(2);\n    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);\n  });\n});\n```\n\n\\_\\_tests\\_\\_/infiniteTimerGame-test.js\n\nnote\n\nFor debugging or any other reason you can change the limit of timers that will be run before throwing an error:\n\n``` typescript\njest.useFakeTimers({timerLimit: 100});\n```\n\n## Advance Timers by Time\n\nAnother possibility is use `jest.advanceTimersByTime(msToRun)`. When this API is called, all timers are advanced by `msToRun` milliseconds. All pending \"macro-tasks\" that have been queued via setTimeout() or setInterval(), and would be executed during this time frame, will be executed. Additionally, if those macro-tasks schedule new macro-tasks that would be executed within the same time frame, those will be executed until there are no more macro-tasks remaining in the queue that should be run within msToRun milliseconds.\n\n``` typescript\nfunction timerGame(callback) {\n  console.log('Ready....go!');\n  setTimeout(() => {\n    console.log(\"Time's up -- stop!\");\n    callback && callback();\n  }, 1000);\n}\n\nmodule.exports = timerGame;\n```\n\ntimerGame.js\n\n``` typescript\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  const timerGame = require('../timerGame');\n  const callback = jest.fn();\n\n  timerGame(callback);\n\n  // At this point in time, the callback should not have been called yet\n  expect(callback).not.toBeCalled();\n\n  // Fast-forward until all timers have been executed\n  jest.advanceTimersByTime(1000);\n\n  // Now our callback should have been called!\n  expect(callback).toBeCalled();\n  expect(callback).toHaveBeenCalledTimes(1);\n});\n```\n\n\\_\\_tests\\_\\_/timerGame-test.js\n\nLastly, it may occasionally be useful in some tests to be able to clear all of the pending timers. For this, we have `jest.clearAllTimers()`.\n\n## Selective Faking\n\nSometimes your code may require to avoid overwriting the original implementation of one or another API. If that is the case, you can use `doNotFake` option. For example, here is how you could provide a custom mock function for `performance.mark()` in jsdom environment:\n\n``` typescript\n/**\n * @jest-environment jsdom\n */\n\nconst mockPerformanceMark = jest.fn();\nwindow.performance.mark = mockPerformanceMark;\n\ntest('allows mocking `performance.mark()`', () => {\n  jest.useFakeTimers({doNotFake: ['performance']});\n\n  expect(window.performance.mark).toBe(mockPerformanceMark);\n});\n```\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/timer-mocks](https://jestjs.io/docs/timer-mocks)"
- name: Troubleshooting
  id: troubleshooting
  summary: Uh oh, something went wrong? Use this guide to resolve issues with Jest
  description: "# Troubleshooting\n\nUh oh, something went wrong? Use this guide to resolve issues with Jest.\n\n## Tests are Failing and You Don't Know Why\n\nTry using the debugging support built into Node. Note: This will only work in Node.js 8+.\n\nPlace a `debugger;` statement in any of your tests, and then, in your project's directory, run:\n\n``` typescript\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\nThis will run Jest in a Node process that an external debugger can connect to. Note that the process will pause until the debugger has connected to it.\n\nTo debug in Google Chrome (or any Chromium-based browser), open your browser and go to `chrome://inspect` and click on \"Open Dedicated DevTools for Node\", which will give you a list of available node instances you can connect to. Click on the address displayed in the terminal (usually something like `localhost:9229`) after running the above command, and you will be able to debug Jest using Chrome's DevTools.\n\nThe Chrome Developer Tools will be displayed, and a breakpoint will be set at the first line of the Jest CLI script (this is done to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a \"play\" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the `debugger` statement, execution will pause and you can examine the current scope and call stack.\n\n> Note: the `--runInBand` cli option makes sure Jest runs the test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.\n\n## Debugging in VS Code\n\nThere are multiple ways to debug Jest tests with [Visual Studio Code's](https://code.visualstudio.com) built-in [debugger](https://code.visualstudio.com/docs/nodejs/nodejs-debugging).\n\nTo attach the built-in debugger, run your tests as aforementioned:\n\n``` typescript\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]\nor on Windows\nnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\nThen attach VS Code's debugger using the following `launch.json` config:\n\n``` typescript\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach\",\n      \"port\": 9229\n    }\n  ]\n}\n```\n\nTo automatically launch and attach to a process running your tests, use the following configuration:\n\n``` typescript\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\nor the following for Windows:\n\n``` typescript\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",\n        \"--runInBand\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\nIf you are using Facebook's [`create-react-app`](https://github.com/facebookincubator/create-react-app), you can debug your Jest tests with the following configuration:\n\n``` typescript\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",\n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\",\n        \"--watchAll=false\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\nMore information on Node debugging can be found [here](https://nodejs.org/api/debugger.html).\n\n## Debugging in WebStorm\n\n[WebStorm](https://www.jetbrains.com/webstorm/) has built-in support for Jest. Read [Testing With Jest in WebStorm](https://blog.jetbrains.com/webstorm/2018/10/testing-with-jest-in-webstorm/) to learn more.\n\n## Caching Issues\n\nThe transform script was changed or Babel was updated and the changes aren't being recognized by Jest?\n\nRetry with [`--no-cache`](cli#--cache). Jest caches transformed module files to speed up test execution. If you are using your own custom transformer, consider adding a `getCacheKey` function to it: [getCacheKey in Relay](https://github.com/facebook/relay/blob/58cf36c73769690f0bbf90562707eadb062b029d/scripts/jest/preprocessor.js#L56-L61).\n\n## Unresolved Promises\n\nIf a promise doesn't resolve at all, this error might be thrown:\n\n``` typescript\n- Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.`\n```\n\nMost commonly this is being caused by conflicting Promise implementations. Consider replacing the global promise implementation with your own, for example `globalThis.Promise = jest.requireActual('promise');` and/or consolidate the used Promise libraries to a single one.\n\nIf your test is long running, you may want to consider to increase the timeout by calling `jest.setTimeout`\n\n``` typescript\njest.setTimeout(10000); // 10 second timeout\n```\n\n## Watchman Issues\n\nTry running Jest with [`--no-watchman`](cli#--watchman) or set the `watchman` configuration option to `false`.\n\nAlso see [watchman troubleshooting](https://facebook.github.io/watchman/docs/troubleshooting).\n\n## Tests are Extremely Slow on Docker and/or Continuous Integration (CI) server.\n\nWhile Jest is most of the time extremely fast on modern multi-core computers with fast SSDs, it may be slow on certain setups as our users [have](https://github.com/facebook/jest/issues/1395) [discovered](https://github.com/facebook/jest/issues/1524#issuecomment-260246008).\n\nBased on the [findings](https://github.com/facebook/jest/issues/1524#issuecomment-262366820), one way to mitigate this issue and improve the speed by up to 50% is to run tests sequentially.\n\nIn order to do this you can run tests in the same thread using [`--runInBand`](cli#--runinband):\n\n``` typescript\n# Using Jest CLI\njest --runInBand\n\n# Using yarn test (e.g. with create-react-app)\nyarn test --runInBand\n```\n\nAnother alternative to expediting test execution time on Continuous Integration Servers such as Travis-CI is to set the max worker pool to ~*4*. Specifically on Travis-CI, this can reduce test execution time in half. Note: The Travis CI *free* plan available for open source projects only includes 2 CPU cores.\n\n``` typescript\n# Using Jest CLI\njest --maxWorkers=4\n\n# Using yarn test (e.g. with create-react-app)\nyarn test --maxWorkers=4\n```\n\nIf you use GitHub Actions, you can use [`github-actions-cpu-cores`](https://github.com/SimenB/github-actions-cpu-cores) to detect number of CPUs, and pass that to Jest.\n\n``` typescript\n- name: Get number of CPU cores\n  id: cpu-cores\n  uses: SimenB/github-actions-cpu-cores@v1\n- name: run tests\n  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\nAnother thing you can do is use the [`shard`](cli#--shard) flag to parallelize the test run across multiple machines.\n\n## `coveragePathIgnorePatterns` seems to not have any effect.\n\nMake sure you are not using the `babel-plugin-istanbul` plugin. Jest wraps Istanbul, and therefore also tells Istanbul what files to instrument with coverage collection. When using `babel-plugin-istanbul`, every file that is processed by Babel will have coverage collection code, hence it is not being ignored by `coveragePathIgnorePatterns`.\n\n## Defining Tests\n\nTests must be defined synchronously for Jest to be able to collect your tests.\n\nAs an example to show why this is the case, imagine we wrote a test like so:\n\n``` typescript\n// Don't do this it will not work\nsetTimeout(() => {\n  it('passes', () => expect(1).toBe(1));\n}, 0);\n```\n\nWhen Jest runs your test to collect the `test`s it will not find any because we have set the definition to happen asynchronously on the next tick of the event loop.\n\n*Note:* This means when you are using `test.each` you cannot set the table asynchronously within a `beforeEach` / `beforeAll`.\n\n## Still unresolved?\n\nSee [Help](https://jestjs.io/help).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/troubleshooting](https://jestjs.io/docs/troubleshooting)"
- name: Using Matchers
  id: using-matchers
  summary: Jest uses "matchers" to let you test values in different ways
  description: "# Using Matchers\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](expect).\n\n## Common Matchers\n\nThe simplest way to test a value is with exact equality.\n\n``` typescript\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual` instead:\n\n``` typescript\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\nYou can also test for the opposite of a matcher:\n\n``` typescript\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n## Truthiness\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n- `toBeNull` matches only `null`\n- `toBeUndefined` matches only `undefined`\n- `toBeDefined` is the opposite of `toBeUndefined`\n- `toBeTruthy` matches anything that an `if` statement treats as true\n- `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n``` typescript\ntest('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers\n\nMost ways of comparing numbers have matcher equivalents.\n\n``` typescript\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n``` typescript\ntest('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n## Strings\n\nYou can check strings against regular expressions with `toMatch`:\n\n``` typescript\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n## Arrays and iterables\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n``` typescript\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n```\n\n## Exceptions\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n``` typescript\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use the exact error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n});\n```\n\n> Note: the function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](asynchronous).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/using-matchers](https://jestjs.io/docs/using-matchers)"
- name: Using with DynamoDB
  id: dynamodb
  summary: With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with DynamoDB
  description: "# Using with DynamoDB\n\nWith the [Global Setup/Teardown](configuration#globalsetup-string) and [Async Test Environment](configuration#testenvironment-string) APIs, Jest can work smoothly with [DynamoDB](https://aws.amazon.com/dynamodb/).\n\n## Use jest-dynamodb Preset\n\n[Jest DynamoDB](https://github.com/shelfio/jest-dynamodb) provides all required configuration to run your tests using DynamoDB.\n\n1.  First, install `@shelf/jest-dynamodb`\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev @shelf/jest-dynamodb\n```\n\n``` typescript\nyarn add --dev @shelf/jest-dynamodb\n```\n\n2.  Specify preset in your Jest configuration:\n\n``` typescript\n{\n  \"preset\": \"@shelf/jest-dynamodb\"\n}\n```\n\n3.  Create `jest-dynamodb-config.js` and define DynamoDB tables\n\nSee [Create Table API](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#createTable-property)\n\n``` typescript\nmodule.exports = {\n  tables: [\n    {\n      TableName: `files`,\n      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],\n      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n    },\n    // etc\n  ],\n};\n```\n\n4.  Configure DynamoDB client\n\n``` typescript\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');\n\nconst isTest = process.env.JEST_WORKER_ID;\nconst config = {\n  convertEmptyValues: true,\n  ...(isTest && {\n    endpoint: 'localhost:8000',\n    sslEnabled: false,\n    region: 'local-env',\n  }),\n};\n\nconst ddb = new DocumentClient(config);\n```\n\n5.  Write tests\n\n``` typescript\nit('should insert item into table', async () => {\n  await ddb\n    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})\n    .promise();\n\n  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();\n\n  expect(Item).toEqual({\n    id: '1',\n    hello: 'world',\n  });\n});\n```\n\nThere's no need to load any dependencies.\n\nSee [documentation](https://github.com/shelfio/jest-dynamodb) for details.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/dynamodb](https://jestjs.io/docs/dynamodb)"
- name: Using with MongoDB
  id: mongodb
  summary: With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with MongoDB
  description: "# Using with MongoDB\n\nWith the [Global Setup/Teardown](configuration#globalsetup-string) and [Async Test Environment](configuration#testenvironment-string) APIs, Jest can work smoothly with [MongoDB](https://www.mongodb.com/).\n\n## Use jest-mongodb Preset\n\n[Jest MongoDB](https://github.com/shelfio/jest-mongodb) provides all required configuration to run your tests using MongoDB.\n\n1.  First install `@shelf/jest-mongodb`\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev @shelf/jest-mongodb\n```\n\n``` typescript\nyarn add --dev @shelf/jest-mongodb\n```\n\n2.  Specify preset in your Jest configuration:\n\n``` typescript\n{\n  \"preset\": \"@shelf/jest-mongodb\"\n}\n```\n\n3.  Write your test\n\n``` typescript\nconst {MongoClient} = require('mongodb');\n\ndescribe('insert', () => {\n  let connection;\n  let db;\n\n  beforeAll(async () => {\n    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    db = await connection.db(globalThis.__MONGO_DB_NAME__);\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  it('should insert a doc into collection', async () => {\n    const users = db.collection('users');\n\n    const mockUser = {_id: 'some-user-id', name: 'John'};\n    await users.insertOne(mockUser);\n\n    const insertedUser = await users.findOne({_id: 'some-user-id'});\n    expect(insertedUser).toEqual(mockUser);\n  });\n});\n```\n\nThere's no need to load any dependencies.\n\nSee [documentation](https://github.com/shelfio/jest-mongodb) for details (configuring MongoDB version, etc).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/mongodb](https://jestjs.io/docs/mongodb)"
- name: Using with puppeteer
  id: puppeteer
  summary: With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with puppeteer
  description: "# Using with puppeteer\n\nWith the [Global Setup/Teardown](configuration#globalsetup-string) and [Async Test Environment](configuration#testenvironment-string) APIs, Jest can work smoothly with [puppeteer](https://github.com/GoogleChrome/puppeteer).\n\n> Generating code coverage for test files using Puppeteer is currently not possible if your test uses `page.$eval`, `page.$$eval` or `page.evaluate` as the passed function is executed outside of Jest's scope. Check out [issue \\#7962](https://github.com/facebook/jest/issues/7962#issuecomment-495272339) on GitHub for a workaround.\n\n## Use jest-puppeteer Preset\n\n[Jest Puppeteer](https://github.com/smooth-code/jest-puppeteer) provides all required configuration to run your tests using Puppeteer.\n\n1.  First, install `jest-puppeteer`\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev jest-puppeteer\n```\n\n``` typescript\nyarn add --dev jest-puppeteer\n```\n\n2.  Specify preset in your [Jest configuration](configuration):\n\n``` typescript\n{\n  \"preset\": \"jest-puppeteer\"\n}\n```\n\n3.  Write your test\n\n``` typescript\ndescribe('Google', () => {\n  beforeAll(async () => {\n    await page.goto('https://google.com');\n  });\n\n  it('should be titled \"Google\"', async () => {\n    await expect(page.title()).resolves.toMatch('Google');\n  });\n});\n```\n\nThere's no need to load any dependencies. Puppeteer's `page` and `browser` classes will automatically be exposed\n\nSee [documentation](https://github.com/smooth-code/jest-puppeteer).\n\n## Custom example without jest-puppeteer preset\n\nYou can also hook up puppeteer from scratch. The basic idea is to:\n\n1.  launch & file the websocket endpoint of puppeteer with Global Setup\n2.  connect to puppeteer from each Test Environment\n3.  close puppeteer with Global Teardown\n\nHere's an example of the GlobalSetup script\n\n``` typescript\nconst {mkdir, writeFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nmodule.exports = async function () {\n  const browser = await puppeteer.launch();\n  // store the browser instance so we can teardown it later\n  // this global is only available in the teardown but not in TestEnvironments\n  globalThis.__BROWSER_GLOBAL__ = browser;\n\n  // use the file system to expose the wsEndpoint for TestEnvironments\n  await mkdir(DIR, {recursive: true});\n  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());\n};\n```\n\nsetup.js\n\nThen we need a custom Test Environment for puppeteer\n\n``` typescript\nconst {readFile} = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\nconst puppeteer = require('puppeteer');\nconst NodeEnvironment = require('jest-environment-node').default;\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\n\nclass PuppeteerEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config);\n  }\n\n  async setup() {\n    await super.setup();\n    // get the wsEndpoint\n    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');\n    if (!wsEndpoint) {\n      throw new Error('wsEndpoint not found');\n    }\n\n    // connect to puppeteer\n    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({\n      browserWSEndpoint: wsEndpoint,\n    });\n  }\n\n  async teardown() {\n    await super.teardown();\n  }\n\n  getVmContext() {\n    return super.getVmContext();\n  }\n}\n\nmodule.exports = PuppeteerEnvironment;\n```\n\npuppeteer_environment.js\n\nFinally, we can close the puppeteer instance and clean-up the file\n\n``` typescript\nconst fs = require('fs').promises;\nconst os = require('os');\nconst path = require('path');\n\nconst DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');\nmodule.exports = async function () {\n  // close the browser instance\n  await globalThis.__BROWSER_GLOBAL__.close();\n\n  // clean-up the wsEndpoint file\n  await fs.rm(DIR, {recursive: true, force: true});\n};\n```\n\nteardown.js\n\nWith all the things set up, we can now write our tests like this:\n\n``` typescript\nconst timeout = 5000;\n\ndescribe(\n  '/ (Home Page)',\n  () => {\n    let page;\n    beforeAll(async () => {\n      page = await globalThis.__BROWSER_GLOBAL__.newPage();\n      await page.goto('https://google.com');\n    }, timeout);\n\n    it('should load without error', async () => {\n      const text = await page.evaluate(() => document.body.textContent);\n      expect(text).toContain('google');\n    });\n  },\n  timeout,\n);\n```\n\ntest.js\n\nFinally, set `jest.config.js` to read from these files. (The `jest-puppeteer` preset does something like this under the hood.)\n\n``` typescript\nmodule.exports = {\n  globalSetup: './setup.js',\n  globalTeardown: './teardown.js',\n  testEnvironment: './puppeteer_environment.js',\n};\n```\n\nHere's the code of [full working example](https://github.com/xfumihiro/jest-puppeteer-example).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/puppeteer](https://jestjs.io/docs/puppeteer)"
- name: Using with webpack
  id: webpack
  summary: Jest can be used in projects that use webpack to manage assets, styles, and compilation
  description: "# Using with webpack\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack *does* offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\n``` typescript\nmodule.exports = {\n  module: {\n    loaders: [\n      {exclude: ['node_modules'], loader: 'babel', test: /\\.jsx?$/},\n      {loader: 'style-loader!css-loader', test: /\\.css$/},\n      {loader: 'url-loader', test: /\\.gif$/},\n      {loader: 'file-loader', test: /\\.(ttf|eot|svg)$/},\n    ],\n  },\n  resolve: {\n    alias: {\n      config$: './configs/app-config.js',\n      react: './vendor/react-master',\n    },\n    extensions: ['', 'js', 'jsx'],\n    modules: [\n      'node_modules',\n      'bower_components',\n      'shared',\n      '/shared/vendor/modules',\n    ],\n  },\n};\n```\n\nwebpack.config.js\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\n``` typescript\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/__mocks__/fileMock.js\",\n      \"\\\\.(css|less)$\": \"<rootDir>/__mocks__/styleMock.js\"\n    }\n  }\n}\n```\n\npackage.json\n\nAnd the mock files themselves:\n\n``` typescript\nmodule.exports = {};\n```\n\n\\_\\_mocks\\_\\_/styleMock.js\n\n``` typescript\nmodule.exports = 'test-file-stub';\n```\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n### Mocking CSS Modules\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n- npm\n- Yarn\n\n``` typescript\nnpm install --save-dev identity-obj-proxy\n```\n\n``` typescript\nyarn add --dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](snapshot-testing).\n\n``` typescript\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/__mocks__/fileMock.js\",\n      \"\\\\.(css|less)$\": \"identity-obj-proxy\"\n    }\n  }\n}\n```\n\npackage.json (for CSS Modules)\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\n``` typescript\nconst path = require('path');\n\nmodule.exports = {\n  process(sourceText, sourcePath, options) {\n    return {\n      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,\n    };\n  },\n};\n```\n\nfileTransformer.js\n\n``` typescript\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less)$\": \"identity-obj-proxy\"\n    },\n    \"transform\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/fileTransformer.js\"\n    }\n  }\n}\n```\n\npackage.json (for custom transformers and CSS Modules)\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n``` typescript\n\"transform\": {\n  \"\\\\.[jt]sx?$\": \"babel-jest\",\n  \"\\\\.css$\": \"some-css-transformer\",\n}\n```\n\n### Configuring Jest to find our files\n\nNow that Jest knows how to process our files, we need to tell it how to *find* them. For webpack's `modulesDirectories`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\n``` typescript\n{\n  \"jest\": {\n    \"moduleFileExtensions\": [\"js\", \"jsx\"],\n    \"moduleDirectories\": [\"node_modules\", \"bower_components\", \"shared\"],\n\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less)$\": \"<rootDir>/__mocks__/styleMock.js\",\n      \"\\\\.(gif|ttf|eot|svg)$\": \"<rootDir>/__mocks__/fileMock.js\"\n    }\n  }\n}\n```\n\npackage.json\n\n> Note: `<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom `rootDir` option in your configuration.\n\nSimilarly, webpack's `resolve.root` option functions like setting the `NODE_PATH` env variable, which you can set, or make use of the `modulePaths` option.\n\n``` typescript\n{\n  \"jest\": {\n    \"modulePaths\": [\"/shared/vendor/modules\"],\n    \"moduleFileExtensions\": [\"js\", \"jsx\"],\n    \"moduleDirectories\": [\"node_modules\", \"bower_components\", \"shared\"],\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less)$\": \"<rootDir>/__mocks__/styleMock.js\",\n      \"\\\\.(gif|ttf|eot|svg)$\": \"<rootDir>/__mocks__/fileMock.js\"\n    }\n  }\n}\n```\n\npackage.json\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\n``` typescript\n{\n  \"jest\": {\n    \"modulePaths\": [\"/shared/vendor/modules\"],\n    \"moduleFileExtensions\": [\"js\", \"jsx\"],\n    \"moduleDirectories\": [\"node_modules\", \"bower_components\", \"shared\"],\n\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less)$\": \"<rootDir>/__mocks__/styleMock.js\",\n      \"\\\\.(gif|ttf|eot|svg)$\": \"<rootDir>/__mocks__/fileMock.js\",\n\n      \"^react(.*)$\": \"<rootDir>/vendor/react-master$1\",\n      \"^config$\": \"<rootDir>/configs/app-config.js\"\n    }\n  }\n}\n```\n\npackage.json\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n> Note: For more complex webpack configurations, you may also want to investigate projects such as: [babel-plugin-webpack-loaders](https://github.com/istarkov/babel-plugin-webpack-loaders).\n\n## Using with webpack 2\n\nwebpack 2 offers native support for ES modules. However, Jest runs in Node, and thus requires ES modules to be transpiled to CommonJS modules. As such, if you are using webpack 2, you most likely will want to configure Babel to transpile ES modules to CommonJS modules only in the `test` environment.\n\n``` typescript\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"transform-es2015-modules-commonjs\"]\n    }\n  }\n}\n```\n\n.babelrc\n\n> Note: Jest caches files to speed up test execution. If you updated .babelrc and Jest is still not working, try running Jest with `--no-cache`.\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n``` typescript\n{\n  \"presets\": [[\"env\", {\"modules\": false}]],\n\n  \"plugins\": [\"syntax-dynamic-import\"],\n\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\"dynamic-import-node\"]\n    }\n  }\n}\n```\n\n.babelrc\n\nFor an example of how to use Jest with webpack with React, Redux, and Node, you can view one [here](https://github.com/jenniferabowd/jest_react_redux_node_webpack_complex_example).\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/webpack](https://jestjs.io/docs/webpack)"
- name: Watch Plugins
  id: watch-plugins
  summary: The Jest watch plugin system provides a way to hook into specific parts of Jest and to define watch mode menu prompts that execute code on key press
  description: "# Watch Plugins\n\nThe Jest watch plugin system provides a way to hook into specific parts of Jest and to define watch mode menu prompts that execute code on key press. Combined, these features allow you to develop interactive experiences custom for your workflow.\n\n## Watch Plugin Interface\n\n``` typescript\nclass MyWatchPlugin {\n  // Add hooks to Jest lifecycle events\n  apply(jestHooks) {}\n\n  // Get the prompt information for interactive plugins\n  getUsageInfo(globalConfig) {}\n\n  // Executed when the key from `getUsageInfo` is input\n  run(globalConfig, updateConfigAndRun) {}\n}\n```\n\n## Hooking into Jest\n\nTo connect your watch plugin to Jest, add its path under `watchPlugins` in your Jest configuration:\n\n``` typescript\nmodule.exports = {\n  // ...\n  watchPlugins: ['path/to/yourWatchPlugin'],\n};\n```\n\njest.config.js\n\nCustom watch plugins can add hooks to Jest events. These hooks can be added either with or without having an interactive key in the watch mode menu.\n\n### `apply(jestHooks)`\n\nJest hooks can be attached by implementing the `apply` method. This method receives a `jestHooks` argument that allows the plugin to hook into specific parts of the lifecycle of a test run.\n\n``` typescript\nclass MyWatchPlugin {\n  apply(jestHooks) {}\n}\n```\n\nBelow are the hooks available in Jest.\n\n#### `jestHooks.shouldRunTestSuite(testSuiteInfo)`\n\nReturns a boolean (or `Promise<boolean>` for handling asynchronous operations) to specify if a test should be run or not.\n\nFor example:\n\n``` typescript\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return testSuiteInfo.testPath.includes('my-keyword');\n    });\n\n    // or a promise\n    jestHooks.shouldRunTestSuite(testSuiteInfo => {\n      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));\n    });\n  }\n}\n```\n\n#### `jestHooks.onTestRunComplete(results)`\n\nGets called at the end of every test run. It has the test results as an argument.\n\nFor example:\n\n``` typescript\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onTestRunComplete(results => {\n      this._hasSnapshotFailure = results.snapshot.failure;\n    });\n  }\n}\n```\n\n#### `jestHooks.onFileChange({projects})`\n\nGets called whenever there is a change in the file system\n\n- `projects: Array<config: ProjectConfig, testPaths: Array<string>`: Includes all the test paths that Jest is watching.\n\nFor example:\n\n``` typescript\nclass MyWatchPlugin {\n  apply(jestHooks) {\n    jestHooks.onFileChange(({projects}) => {\n      this._projects = projects;\n    });\n  }\n}\n```\n\n## Watch Menu Integration\n\nCustom watch plugins can also add or override functionality to the watch menu by specifying a key/prompt pair in `getUsageInfo` method and a `run` method for the execution of the key.\n\n### `getUsageInfo(globalConfig)`\n\nTo add a key to the watch menu, implement the `getUsageInfo` method, returning a key and the prompt:\n\n``` typescript\nclass MyWatchPlugin {\n  getUsageInfo(globalConfig) {\n    return {\n      key: 's',\n      prompt: 'do something',\n    };\n  }\n}\n```\n\nThis will add a line in the watch mode menu *(`› Press s to do something.`)*\n\n``` typescript\nWatch Usage\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a test name regex pattern.\n › Press q to quit watch mode.\n › Press s to do something. // <-- This is our plugin\n › Press Enter to trigger a test run.\n```\n\n**Note**: If the key for your plugin already exists as a default key, your plugin will override that key.\n\n### `run(globalConfig, updateConfigAndRun)`\n\nTo handle key press events from the key returned by `getUsageInfo`, you can implement the `run` method. This method returns a `Promise<boolean>` that can be resolved when the plugin wants to return control to Jest. The `boolean` specifies if Jest should rerun the tests after it gets the control back.\n\n- `globalConfig`: A representation of Jest's current global configuration\n- `updateConfigAndRun`: Allows you to trigger a test run while the interactive plugin is running.\n\n``` typescript\nclass MyWatchPlugin {\n  run(globalConfig, updateConfigAndRun) {\n    // do something.\n  }\n}\n```\n\n**Note**: If you do call `updateConfigAndRun`, your `run` method should not resolve to a truthy value, as that would trigger a double-run.\n\n#### Authorized configuration keys\n\nFor stability and safety reasons, only part of the global configuration keys can be updated with `updateConfigAndRun`. The current white list is as follows:\n\n- [`bail`](configuration#bail-number--boolean)\n- [`changedSince`](cli#--changedsince)\n- [`collectCoverage`](configuration#collectcoverage-boolean)\n- [`collectCoverageFrom`](configuration#collectcoveragefrom-array)\n- [`coverageDirectory`](configuration#coveragedirectory-string)\n- [`coverageReporters`](configuration#coveragereporters-arraystring)\n- [`notify`](configuration#notify-boolean)\n- [`notifyMode`](configuration#notifymode-string)\n- [`onlyFailures`](configuration#onlyfailures-boolean)\n- [`reporters`](configuration#reporters-arraymodulename--modulename-options)\n- [`testNamePattern`](cli#--testnamepatternregex)\n- [`testPathPattern`](cli#--testpathpatternregex)\n- [`updateSnapshot`](cli#--updatesnapshot)\n- [`verbose`](configuration#verbose-boolean)\n\n## Customization\n\nPlugins can be customized via your Jest configuration.\n\n``` typescript\nmodule.exports = {\n  // ...\n  watchPlugins: [\n    [\n      'path/to/yourWatchPlugin',\n      {\n        key: 'k', // <- your custom key\n        prompt: 'show a custom prompt',\n      },\n    ],\n  ],\n};\n```\n\njest.config.js\n\nRecommended config names:\n\n- `key`: Modifies the plugin key.\n- `prompt`: Allows user to customize the text in the plugin prompt.\n\nIf the user provided a custom configuration, it will be passed as an argument to the plugin constructor.\n\n``` typescript\nclass MyWatchPlugin {\n  constructor({config}) {}\n}\n```\n\n## Choosing a good key\n\nJest allows third-party plugins to override some of its built-in feature keys, but not all. Specifically, the following keys are **not overwritable** :\n\n- `c` (clears filter patterns)\n- `i` (updates non-matching snapshots interactively)\n- `q` (quits)\n- `u` (updates all non-matching snapshots)\n- `w` (displays watch mode usage / available actions)\n\nThe following keys for built-in functionality **can be overwritten** :\n\n- `p` (test filename pattern)\n- `t` (test name pattern)\n\nAny key not used by built-in functionality can be claimed, as you would expect. Try to avoid using keys that are difficult to obtain on various keyboards (e.g. `é`, `€`), or not visible by default (e.g. many Mac keyboards do not have visual hints for characters such as `|`, `\\`, `[`, etc.)\n\n### When a conflict happens\n\nShould your plugin attempt to overwrite a reserved key, Jest will error out with a descriptive message, something like:\n\n> Watch plugin YourFaultyPlugin attempted to register key `q`, that is reserved internally for quitting watch mode. Please change the configuration key for this plugin.\n\nThird-party plugins are also forbidden to overwrite a key reserved already by another third-party plugin present earlier in the configured plugins list (`watchPlugins` array setting). When this happens, you’ll also get an error message that tries to help you fix that:\n\n> Watch plugins YourFaultyPlugin and TheirFaultyPlugin both attempted to register key `x`. Please change the key configuration for one of the conflicting plugins to avoid overlap.\n\n© 2022 Facebook, Inc.  \nLicensed under the MIT License.  \n[https://jestjs.io/docs/watch-plugins](https://jestjs.io/docs/watch-plugins)"
