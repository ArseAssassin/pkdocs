---
name: ESLint
slug: eslint
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © OpenJS Foundation and other contributors
  Licensed under the MIT License.
  https://eslint.org/docs/latest/user-guide/getting-started
homepage: https://eslint.org/
generator_command: doc src:devdocs use eslint

---
- name: accessor-pairs
  id: rules/accessor-pairs
  summary: It’s a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it
  description: "# accessor-pairs\n\nEnforce getter and setter pairs in objects and classes\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [setWithoutGet](#setwithoutget)\n    2.  [getWithoutSet](#getwithoutset)\n    3.  [enforceForClassMembers](#enforceforclassmembers)\n3.  [Known Limitations](#known-limitations)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Further Reading](#further-reading)\n8.  [Resources](#resources)\n\nIt’s a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it. Without a getter, you cannot read the property, so it ends up not being used.\n\nHere are some examples:\n\n``` language-js\n// Bad\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\n\n// Good\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n```\n\nThis rule warns if setters are defined without getters. Using an option `getWithoutSet`, it will warn if you have a getter without a setter also.\n\n## Rule Details\n\nThis rule enforces a style where it requires to have a getter for every property which has a setter defined.\n\nBy activating the option `getWithoutSet` it enforces the presence of a setter for every property which has a getter defined.\n\nThis rule always checks object literals and property descriptors. By default, it also checks class declarations and class expressions.\n\n## Options\n\n- `setWithoutGet` set to `true` will warn for setters without getters (Default `true`).\n- `getWithoutSet` set to `true` will warn for getters without setters (Default `false`).\n- `enforceForClassMembers` set to `true` additionally applies this rule to class getters/setters (Default `true`). Set `enforceForClassMembers` to `false` if you want this rule to ignore class declarations and class expressions.\n\n### setWithoutGet\n\nExamples of **incorrect** code for the default `{ \"setWithoutGet\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBcImVycm9yXCIqL1xuXG52YXIgbyA9IHtcbiAgICBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn07XG5cblxudmFyIG8gPSB7ZDogMX07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgJ2MnLCB7XG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn0pOyJ9)\n\n``` language-js\n/*eslint accessor-pairs: \"error\"*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n```\n\nExamples of **correct** code for the default `{ \"setWithoutGet\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBcImVycm9yXCIqL1xuXG52YXIgbyA9IHtcbiAgICBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59O1xuXG52YXIgbyA9IHtkOiAxfTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAnYycsIHtcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxufSk7XG4ifQ==)\n\n``` language-js\n/*eslint accessor-pairs: \"error\"*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n```\n\n### getWithoutSet\n\nExamples of **incorrect** code for the `{ \"getWithoutSet\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBbXCJlcnJvclwiLCB7IFwiZ2V0V2l0aG91dFNldFwiOiB0cnVlIH1dKi9cblxudmFyIG8gPSB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG52YXIgbyA9IHtcbiAgICBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn07XG5cbnZhciBvID0ge2Q6IDF9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICdjJywge1xuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59KTtcblxudmFyIG8gPSB7ZDogMX07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgJ2MnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn0pOyJ9)\n\n``` language-js\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nvar o = {\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    get: function() {\n        return this.val;\n    }\n});\n```\n\nExamples of **correct** code for the `{ \"getWithoutSet\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBbXCJlcnJvclwiLCB7IFwiZ2V0V2l0aG91dFNldFwiOiB0cnVlIH1dKi9cbnZhciBvID0ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn07XG5cbnZhciBvID0ge2Q6IDF9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICdjJywge1xuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59KTtcbiJ9)\n\n``` language-js\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n```\n\n### enforceForClassMembers\n\nWhen `enforceForClassMembers` is set to `true` (default):\n\n- `\"getWithoutSet\": true` will also warn for getters without setters in classes.\n- `\"setWithoutGet\": true` will also warn for setters without getters in classes.\n\nExamples of **incorrect** code for `{ \"getWithoutSet\": true, \"enforceForClassMembers\": true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBbXCJlcnJvclwiLCB7IFwiZ2V0V2l0aG91dFNldFwiOiB0cnVlLCBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogdHJ1ZSB9XSovXG5cbmNsYXNzIEZvbyB7XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59XG5cbmNsYXNzIEJhciB7XG4gICAgc3RhdGljIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxufVxuXG5jb25zdCBCYXogPSBjbGFzcyB7XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG4gICAgc3RhdGljIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true, \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n}\n\nclass Bar {\n    static get a() {\n        return this.val;\n    }\n}\n\nconst Baz = class {\n    get a() {\n        return this.val;\n    }\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\nExamples of **incorrect** code for `{ \"setWithoutGet\": true, \"enforceForClassMembers\": true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBbXCJlcnJvclwiLCB7IFwic2V0V2l0aG91dEdldFwiOiB0cnVlLCBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogdHJ1ZSB9XSovXG5cbmNsYXNzIEZvbyB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgICBzdGF0aWMgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint accessor-pairs: [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    set a(value) {\n        this.val = value;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\nWhen `enforceForClassMembers` is set to `false`, this rule ignores classes.\n\nExamples of **correct** code for `{ \"getWithoutSet\": true, \"setWithoutGet\": true, \"enforceForClassMembers\": false }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFjY2Vzc29yLXBhaXJzOiBbXCJlcnJvclwiLCB7XG4gICAgXCJnZXRXaXRob3V0U2V0XCI6IHRydWUsIFwic2V0V2l0aG91dEdldFwiOiB0cnVlLCBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogZmFsc2Vcbn1dKi9cblxuY2xhc3MgRm9vIHtcbiAgICBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn1cblxuY2xhc3MgQmFyIHtcbiAgICBzdGF0aWMgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmNvbnN0IEJheiA9IGNsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59XG5cbmNvbnN0IFF1dXggPSBjbGFzcyB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint accessor-pairs: [\"error\", {\n    \"getWithoutSet\": true, \"setWithoutGet\": true, \"enforceForClassMembers\": false\n}]*/\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n}\n\nclass Bar {\n    static set a(value) {\n        this.val = value;\n    }\n}\n\nconst Baz = class {\n    static get a() {\n        return this.val;\n    }\n}\n\nconst Quux = class {\n    set a(value) {\n        this.val = value;\n    }\n}\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule does not account for possible side effects and in certain cases might not report a missing pair for a getter/setter that has a computed key, like in the following example:\n\n``` language-js\n/*eslint accessor-pairs: \"error\"*/\n\nvar a = 1;\n\n// no warnings\nvar o = {\n    get [a++]() {\n        return this.val;\n    },\n    set [a++](value) {\n        this.val = value;\n    }\n};\n```\n\nAlso, this rule does not disallow duplicate keys in object literals and class definitions, and in certain cases with duplicate keys might not report a missing pair for a getter/setter, like in the following example:\n\n``` language-js\n/*eslint accessor-pairs: \"error\"*/\n\n// no warnings\nvar o = {\n    get a() {\n        return this.val;\n    },\n    a: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n```\n\nThe code above creates an object with just a setter for the property `\"a\"`.\n\nSee [no-dupe-keys](accessor-pairsno-dupe-keys) if you also want to disallow duplicate keys in object literals.\n\nSee [no-dupe-class-members](accessor-pairsno-dupe-class-members) if you also want to disallow duplicate names in class definitions.\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the simultaneous presence of setters and getters on objects.\n\n## Related Rules\n\n- [no-dupe-keys](no-dupe-keys)\n- [no-dupe-class-members](no-dupe-class-members)\n\n## Version\n\nThis rule was introduced in ESLint v0.22.0.\n\n## Further Reading\n\n[setter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)  \n\n[getter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)  \n\n[Working with objects - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/accessor-pairs.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/accessor-pairs.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/accessor-pairs](https://eslint.org/docs/latest/rules/accessor-pairs)"
- name: Architecture
  id: contribute/architecture/index
  summary: The cli object is the API for the command line interface
  description: "# Architecture\n\n## Table of Contents\n\n1.  [The cli object](#the-cli-object)\n2.  [The CLIEngine object](#the-cliengine-object)\n3.  [The Linter object](#the-linter-object)\n4.  [Rules](#rules)\n\nAt a high level, there are a few key parts to ESLint:\n\n- `bin/eslint.js` - this is the file that actually gets executed with the command line utility. It’s a dumb wrapper that does nothing more than bootstrap ESLint, passing the command line arguments to `cli`. This is intentionally small so as not to require heavy testing.\n- `lib/api.js` - this is the entry point of `require(\"eslint\")`. This file exposes an object that contains public classes `Linter`, `ESLint`, `RuleTester`, and `SourceCode`.\n- `lib/cli.js` - this is the heart of the ESLint CLI. It takes an array of arguments and then uses `eslint` to execute the commands. By keeping this as a separate utility, it allows others to effectively call ESLint from within another Node.js program as if it were done on the command line. The main call is `cli.execute()`. This is also the part that does all the file reading, directory traversing, input, and output.\n- `lib/cli-engine/` - this module is `CLIEngine` class that finds source code files and configuration files then does code verifying with the `Linter` class. This includes the loading logic of configuration files, parsers, plugins, and formatters.\n- `lib/linter/` - this module is the core `Linter` class that does code verifying based on configuration options. This file does no file I/O and does not interact with the `console` at all. For other Node.js programs that have JavaScript text to verify, they would be able to use this interface directly.\n- `lib/rule-tester/` - this module is `RuleTester` class that is a wrapper around Mocha so that rules can be unit tested. This class lets us write consistently formatted tests for each rule that is implemented and be confident that each of the rules work. The RuleTester interface was modeled after Mocha and works with Mocha’s global testing methods. RuleTester can also be modified to work with other testing frameworks.\n- `lib/source-code/` - this module is `SourceCode` class that is used to represent the parsed source code. It takes in source code and the Program node of the AST representing the code.\n- `lib/rules/` - this contains built-in rules that verify source code.\n\n## The `cli` object\n\nThe `cli` object is the API for the command line interface. Literally, the `bin/eslint.js` file simply passes arguments to the `cli` object and then sets `process.exitCode` to the returned exit code.\n\nThe main method is `cli.execute()`, which accepts an array of strings that represent the command line options (as if `process.argv` were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then `cli` is the object to use.\n\nThis object’s responsibilities include:\n\n- Interpreting command line arguments\n- Reading from the file system\n- Outputting to the console\n- Outputting to the filesystem\n- Use a formatter\n- Returning the correct exit code\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n\n## The `CLIEngine` object\n\nThe `CLIEngine` type represents the core functionality of the CLI except that it reads nothing from the command line and doesn’t output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the `Linter` object.\n\nThe main method of the `CLIEngine` is `executeOnFiles()`, which accepts an array of file and directory names to run the linter on.\n\nThis object’s responsibilities include:\n\n- Managing the execution environment for `Linter`\n- Reading from the file system\n- Reading configuration information from config files (including `.eslintrc` and `package.json`)\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Output to the console\n- Use formatters\n\n## The `Linter` object\n\nThe main method of the `Linter` object is `verify()` and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with `espree` (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.\n\nOnce the AST is available, `estraverse` is used to traverse the AST from top to bottom. At each node, the `Linter` object emits an event that has the same name as the node type (i.e., “Identifier”, “WithStatement”, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with “:exit”, such as “Identifier:exit” - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.\n\nThis object’s responsibilities include:\n\n- Inspecting JavaScript code strings\n- Creating an AST for the code\n- Executing rules on the AST\n- Reporting back the results of the execution\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Use Node.js-specific features\n- Access the file system\n- Call `console.log()` or any other similar method\n\n## Rules\n\nIndividual rules are the most specialized part of the ESLint architecture. Rules can do very little, they are simply a set of instructions executed against an AST that is provided. They do get some context information passed in, but the primary responsibility of a rule is to inspect the AST and report warnings.\n\nThese objects’ responsibilities are:\n\n- Inspect the AST for specific patterns\n- Reporting warnings when certain patterns are found\n\nThese objects may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Use Node.js-specific features\n- Access the file system\n- Call `console.log()` or any other similar method\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/architecture/](https://eslint.org/docs/latest/contribute/architecture/)"
- name: Architecture
  id: contribute/architecture
  summary: The cli object is the API for the command line interface
  description: "# Architecture\n\n## Table of Contents\n\n1.  [The cli object](#the-cli-object)\n2.  [The CLIEngine object](#the-cliengine-object)\n3.  [The Linter object](#the-linter-object)\n4.  [Rules](#rules)\n\nAt a high level, there are a few key parts to ESLint:\n\n- `bin/eslint.js` - this is the file that actually gets executed with the command line utility. It’s a dumb wrapper that does nothing more than bootstrap ESLint, passing the command line arguments to `cli`. This is intentionally small so as not to require heavy testing.\n- `lib/api.js` - this is the entry point of `require(\"eslint\")`. This file exposes an object that contains public classes `Linter`, `ESLint`, `RuleTester`, and `SourceCode`.\n- `lib/cli.js` - this is the heart of the ESLint CLI. It takes an array of arguments and then uses `eslint` to execute the commands. By keeping this as a separate utility, it allows others to effectively call ESLint from within another Node.js program as if it were done on the command line. The main call is `cli.execute()`. This is also the part that does all the file reading, directory traversing, input, and output.\n- `lib/cli-engine/` - this module is `CLIEngine` class that finds source code files and configuration files then does code verifying with the `Linter` class. This includes the loading logic of configuration files, parsers, plugins, and formatters.\n- `lib/linter/` - this module is the core `Linter` class that does code verifying based on configuration options. This file does no file I/O and does not interact with the `console` at all. For other Node.js programs that have JavaScript text to verify, they would be able to use this interface directly.\n- `lib/rule-tester/` - this module is `RuleTester` class that is a wrapper around Mocha so that rules can be unit tested. This class lets us write consistently formatted tests for each rule that is implemented and be confident that each of the rules work. The RuleTester interface was modeled after Mocha and works with Mocha’s global testing methods. RuleTester can also be modified to work with other testing frameworks.\n- `lib/source-code/` - this module is `SourceCode` class that is used to represent the parsed source code. It takes in source code and the Program node of the AST representing the code.\n- `lib/rules/` - this contains built-in rules that verify source code.\n\n## The `cli` object\n\nThe `cli` object is the API for the command line interface. Literally, the `bin/eslint.js` file simply passes arguments to the `cli` object and then sets `process.exitCode` to the returned exit code.\n\nThe main method is `cli.execute()`, which accepts an array of strings that represent the command line options (as if `process.argv` were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then `cli` is the object to use.\n\nThis object’s responsibilities include:\n\n- Interpreting command line arguments\n- Reading from the file system\n- Outputting to the console\n- Outputting to the filesystem\n- Use a formatter\n- Returning the correct exit code\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n\n## The `CLIEngine` object\n\nThe `CLIEngine` type represents the core functionality of the CLI except that it reads nothing from the command line and doesn’t output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the `Linter` object.\n\nThe main method of the `CLIEngine` is `executeOnFiles()`, which accepts an array of file and directory names to run the linter on.\n\nThis object’s responsibilities include:\n\n- Managing the execution environment for `Linter`\n- Reading from the file system\n- Reading configuration information from config files (including `.eslintrc` and `package.json`)\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Output to the console\n- Use formatters\n\n## The `Linter` object\n\nThe main method of the `Linter` object is `verify()` and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with `espree` (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.\n\nOnce the AST is available, `estraverse` is used to traverse the AST from top to bottom. At each node, the `Linter` object emits an event that has the same name as the node type (i.e., “Identifier”, “WithStatement”, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with “:exit”, such as “Identifier:exit” - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.\n\nThis object’s responsibilities include:\n\n- Inspecting JavaScript code strings\n- Creating an AST for the code\n- Executing rules on the AST\n- Reporting back the results of the execution\n\nThis object may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Use Node.js-specific features\n- Access the file system\n- Call `console.log()` or any other similar method\n\n## Rules\n\nIndividual rules are the most specialized part of the ESLint architecture. Rules can do very little, they are simply a set of instructions executed against an AST that is provided. They do get some context information passed in, but the primary responsibility of a rule is to inspect the AST and report warnings.\n\nThese objects’ responsibilities are:\n\n- Inspect the AST for specific patterns\n- Reporting warnings when certain patterns are found\n\nThese objects may not:\n\n- Call `process.exit()` directly\n- Perform any asynchronous operations\n- Use Node.js-specific features\n- Access the file system\n- Call `console.log()` or any other similar method\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/architecture](https://eslint.org/docs/latest/contribute/architecture)"
- name: array-bracket-spacing
  id: rules/array-bracket-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# array-bracket-spacing\n\nEnforce consistent spacing inside array brackets\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](array-bracket-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [always](#always)\n    3.  [singleValue](#singlevalue)\n    4.  [objectsInArrays](#objectsinarrays)\n    5.  [arraysInArrays](#arraysinarrays)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/array-bracket-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nA number of style guides require or disallow spaces between array brackets and other tokens. This rule applies to both array literals and destructuring assignments (ECMAScript 6).\n\n``` language-js\n/*eslint-env es6*/\n\nvar arr = [ 'foo', 'bar' ];\nvar [ x, y ] = z;\n\nvar arr = ['foo', 'bar'];\nvar [x,y] = z;\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside array brackets.\n\n## Options\n\nThis rule has a string option:\n\n- `\"never\"` (default) disallows spaces inside array brackets\n- `\"always\"` requires one or more spaces or newlines inside array brackets\n\nThis rule has an object option for exceptions to the `\"never\"` option:\n\n- `\"singleValue\": true` requires one or more spaces or newlines inside brackets of array literals that contain a single element\n- `\"objectsInArrays\": true` requires one or more spaces or newlines between brackets of array literals and braces of their object literal elements `[ {` or `} ]`\n- `\"arraysInArrays\": true` requires one or more spaces or newlines between brackets of array literals and brackets of their array literal elements `[ [` or `] ]`\n\nThis rule has an object option for exceptions to the `\"always\"` option:\n\n- `\"singleValue\": false` disallows spaces inside brackets of array literals that contain a single element\n- `\"objectsInArrays\": false` disallows spaces between brackets of array literals and braces of their object literal elements `[{` or `}]`\n- `\"arraysInArrays\": false` disallows spaces between brackets of array literals and brackets of their array literal elements `[[` or `]]`\n\nThis rule has built-in exceptions:\n\n- `\"never\"` (and also the exceptions to the `\"always\"` option) allows newlines inside array brackets, because this is a common pattern\n- `\"always\"` does not require spaces or newlines in empty array literals `[]`\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIGFyciA9IFsgJ2ZvbycsICdiYXInIF07XG52YXIgYXJyID0gWydmb28nLCAnYmFyJyBdO1xudmFyIGFyciA9IFsgWydmb28nXSwgJ2JhciddO1xudmFyIGFyciA9IFtbICdmb28nIF0sICdiYXInXTtcbnZhciBhcnIgPSBbICdmb28nLFxuICAnYmFyJ1xuXTtcbnZhciBbIHgsIHkgXSA9IHo7XG52YXIgWyB4LHkgXSA9IHo7XG52YXIgWyB4LCAuLi55IF0gPSB6O1xudmFyIFsgLCx4LCBdID0gejsifQ==)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar arr = [ 'foo', 'bar' ];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar'];\nvar arr = [[ 'foo' ], 'bar'];\nvar arr = [ 'foo',\n  'bar'\n];\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIGFyciA9IFtdO1xudmFyIGFyciA9IFsnZm9vJywgJ2JhcicsICdiYXonXTtcbnZhciBhcnIgPSBbWydmb28nXSwgJ2JhcicsICdiYXonXTtcbnZhciBhcnIgPSBbXG4gICdmb28nLFxuICAnYmFyJyxcbiAgJ2Jheidcbl07XG52YXIgYXJyID0gWydmb28nLFxuICAnYmFyJ1xuXTtcbnZhciBhcnIgPSBbXG4gICdmb28nLFxuICAnYmFyJ107XG5cbnZhciBbeCwgeV0gPSB6O1xudmFyIFt4LHldID0gejtcbnZhciBbeCwgLi4ueV0gPSB6O1xudmFyIFssLHgsXSA9IHo7In0=)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar arr = [];\nvar arr = ['foo', 'bar', 'baz'];\nvar arr = [['foo'], 'bar', 'baz'];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBhcnIgPSBbJ2ZvbycsICdiYXInXTtcbnZhciBhcnIgPSBbJ2ZvbycsICdiYXInIF07XG52YXIgYXJyID0gWyBbJ2ZvbyddLCAnYmFyJyBdO1xudmFyIGFyciA9IFsnZm9vJyxcbiAgJ2Jhcidcbl07XG52YXIgYXJyID0gW1xuICAnZm9vJyxcbiAgJ2JhciddO1xuXG52YXIgW3gsIHldID0gejtcbnZhciBbeCx5XSA9IHo7XG52YXIgW3gsIC4uLnldID0gejtcbnZhciBbLCx4LF0gPSB6OyJ9)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar arr = ['foo', 'bar'];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar' ];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBhcnIgPSBbXTtcbnZhciBhcnIgPSBbICdmb28nLCAnYmFyJywgJ2JheicgXTtcbnZhciBhcnIgPSBbIFsgJ2ZvbycgXSwgJ2JhcicsICdiYXonIF07XG52YXIgYXJyID0gWyAnZm9vJyxcbiAgJ2Jhcidcbl07XG52YXIgYXJyID0gW1xuICAnZm9vJyxcbiAgJ2JhcicgXTtcbnZhciBhcnIgPSBbXG4gICdmb28nLFxuICAnYmFyJyxcbiAgJ2Jheidcbl07XG5cbnZhciBbIHgsIHkgXSA9IHo7XG52YXIgWyB4LHkgXSA9IHo7XG52YXIgWyB4LCAuLi55IF0gPSB6O1xudmFyIFsgLCx4LCBdID0gejsifQ==)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar arr = [];\nvar arr = [ 'foo', 'bar', 'baz' ];\nvar arr = [ [ 'foo' ], 'bar', 'baz' ];\nvar arr = [ 'foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar' ];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\n### singleValue\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"singleValue\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcInNpbmdsZVZhbHVlXCI6IGZhbHNlIH1dKi9cblxudmFyIGZvbyA9IFsgJ2ZvbycgXTtcbnZhciBmb28gPSBbICdmb28nXTtcbnZhciBmb28gPSBbJ2ZvbycgXTtcbnZhciBmb28gPSBbIDEgXTtcbnZhciBmb28gPSBbIDFdO1xudmFyIGZvbyA9IFsxIF07XG52YXIgZm9vID0gWyBbIDEsIDIgXSBdO1xudmFyIGZvbyA9IFsgeyAnZm9vJzogJ2JhcicgfSBdOyJ9)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = [ 'foo' ];\nvar foo = [ 'foo'];\nvar foo = ['foo' ];\nvar foo = [ 1 ];\nvar foo = [ 1];\nvar foo = [1 ];\nvar foo = [ [ 1, 2 ] ];\nvar foo = [ { 'foo': 'bar' } ];\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"singleValue\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcInNpbmdsZVZhbHVlXCI6IGZhbHNlIH1dKi9cblxudmFyIGZvbyA9IFsnZm9vJ107XG52YXIgZm9vID0gWzFdO1xudmFyIGZvbyA9IFtbIDEsIDEgXV07XG52YXIgZm9vID0gW3sgJ2Zvbyc6ICdiYXInIH1dOyJ9)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = ['foo'];\nvar foo = [1];\nvar foo = [[ 1, 1 ]];\nvar foo = [{ 'foo': 'bar' }];\n```\n\n### objectsInArrays\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"objectsInArrays\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcIm9iamVjdHNJbkFycmF5c1wiOiBmYWxzZSB9XSovXG5cbnZhciBhcnIgPSBbIHsgJ2Zvbyc6ICdiYXInIH0gXTtcbnZhciBhcnIgPSBbIHtcbiAgJ2Zvbyc6ICdiYXInXG59IF0ifQ==)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [ { 'foo': 'bar' } ];\nvar arr = [ {\n  'foo': 'bar'\n} ]\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"objectsInArrays\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcIm9iamVjdHNJbkFycmF5c1wiOiBmYWxzZSB9XSovXG5cbnZhciBhcnIgPSBbeyAnZm9vJzogJ2JhcicgfV07XG52YXIgYXJyID0gW3tcbiAgJ2Zvbyc6ICdiYXInXG59XTsifQ==)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [{ 'foo': 'bar' }];\nvar arr = [{\n  'foo': 'bar'\n}];\n```\n\n### arraysInArrays\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"arraysInArrays\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImFycmF5c0luQXJyYXlzXCI6IGZhbHNlIH1dKi9cblxudmFyIGFyciA9IFsgWyAxLCAyIF0sIDIsIDMsIDQgXTtcbnZhciBhcnIgPSBbIFsgMSwgMiBdLCAyLCBbIDMsIDQgXSBdOyJ9)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [ [ 1, 2 ], 2, 3, 4 ];\nvar arr = [ [ 1, 2 ], 2, [ 3, 4 ] ];\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"arraysInArrays\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWJyYWNrZXQtc3BhY2luZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImFycmF5c0luQXJyYXlzXCI6IGZhbHNlIH1dKi9cblxudmFyIGFyciA9IFtbIDEsIDIgXSwgMiwgMywgNCBdO1xudmFyIGFyciA9IFtbIDEsIDIgXSwgMiwgWyAzLCA0IF1dOyJ9)\n\n``` language-js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [[ 1, 2 ], 2, 3, 4 ];\nvar arr = [[ 1, 2 ], 2, [ 3, 4 ]];\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between array brackets.\n\n## Related Rules\n\n- [space-in-parens](space-in-parens)\n- [object-curly-spacing](object-curly-spacing)\n- [computed-property-spacing](computed-property-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.24.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/array-bracket-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/array-bracket-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/array-bracket-spacing](https://eslint.org/docs/latest/rules/array-bracket-spacing)"
- name: array-callback-return
  id: rules/array-callback-return
  summary: Array has several methods for filtering, mapping, and folding
  description: "# array-callback-return\n\nEnforce `return` statements in callbacks of array methods\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](array-callback-return../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowImplicit](#allowimplicit)\n    2.  [checkForEach](#checkforeach)\n    3.  [allowVoid](#allowvoid)\n3.  [Known Limitations](#known-limitations)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\n`Array` has several methods for filtering, mapping, and folding. If we forget to write `return` statement in a callback of those, it’s probably a mistake. If you don’t want to use a return or don’t need the returned results, consider using [.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) instead.\n\n``` language-js\n// example: convert ['a', 'b', 'c'] --> {a: 0, b: 1, c: 2}\nvar indexMap = myArray.reduce(function(memo, item, index) {\n  memo[item] = index;\n}, {}); // Error: cannot set property 'b' of undefined\n```\n\n## Rule Details\n\nThis rule enforces usage of `return` statement in callbacks of array’s methods. Additionally, it may also enforce the `forEach` array method callback to **not** return a value by using the `checkForEach` option.\n\nThis rule finds callback functions of the following methods, then checks usage of `return` statement.\n\n- [`Array.from`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.from)\n- [`Array.prototype.every`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.every)\n- [`Array.prototype.filter`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.filter)\n- [`Array.prototype.find`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.find)\n- [`Array.prototype.findIndex`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.findindex)\n- [`Array.prototype.findLast`](https://tc39.es/ecma262/#sec-array.prototype.findlast)\n- [`Array.prototype.findLastIndex`](https://tc39.es/ecma262/#sec-array.prototype.findlastindex)\n- [`Array.prototype.flatMap`](https://www.ecma-international.org/ecma-262/10.0/#sec-array.prototype.flatmap)\n- [`Array.prototype.forEach`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach) (optional, based on `checkForEach` parameter)\n- [`Array.prototype.map`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.map)\n- [`Array.prototype.reduce`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduce)\n- [`Array.prototype.reduceRight`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduceright)\n- [`Array.prototype.some`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.some)\n- [`Array.prototype.sort`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.sort)\n- [`Array.prototype.toSorted`](https://tc39.es/ecma262/#sec-array.prototype.tosorted)\n- And above of typed arrays.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogXCJlcnJvclwiKi9cblxudmFyIGluZGV4TWFwID0gbXlBcnJheS5yZWR1Y2UoZnVuY3Rpb24obWVtbywgaXRlbSwgaW5kZXgpIHtcbiAgICBtZW1vW2l0ZW1dID0gaW5kZXg7XG59LCB7fSk7XG5cbnZhciBmb28gPSBBcnJheS5mcm9tKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gXCJESVZcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59KTtcblxudmFyIGJhciA9IGZvby5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59KTsifQ==)\n\n``` language-js\n/*eslint array-callback-return: \"error\"*/\n\nvar indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n}, {});\n\nvar foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n});\n\nvar bar = foo.filter(function(x) {\n    if (x) {\n        return true;\n    } else {\n        return;\n    }\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogXCJlcnJvclwiKi9cblxudmFyIGluZGV4TWFwID0gbXlBcnJheS5yZWR1Y2UoZnVuY3Rpb24obWVtbywgaXRlbSwgaW5kZXgpIHtcbiAgICBtZW1vW2l0ZW1dID0gaW5kZXg7XG4gICAgcmV0dXJuIG1lbW87XG59LCB7fSk7XG5cbnZhciBmb28gPSBBcnJheS5mcm9tKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gXCJESVZcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufSk7XG5cbnZhciBiYXIgPSBmb28ubWFwKG5vZGUgPT4gbm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk7In0=)\n\n``` language-js\n/*eslint array-callback-return: \"error\"*/\n\nvar indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n    return memo;\n}, {});\n\nvar foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n    return false;\n});\n\nvar bar = foo.map(node => node.getAttribute(\"id\"));\n```\n\n## Options\n\nThis rule accepts a configuration object with three options:\n\n- `\"allowImplicit\": false` (default) When set to `true`, allows callbacks of methods that require a return value to implicitly return `undefined` with a `return` statement containing no expression.\n- `\"checkForEach\": false` (default) When set to `true`, rule will also report `forEach` callbacks that return a value.\n- `\"allowVoid\": false` (default) When set to `true`, allows `void` in `forEach` callbacks, so rule will not report the return value with a `void` operator.\n\n**Note:** `{ \"allowVoid\": true }` works only if `checkForEach` option is set to `true`.\n\n### allowImplicit\n\nExamples of **correct** code for the `{ \"allowImplicit\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogW1wiZXJyb3JcIiwgeyBhbGxvd0ltcGxpY2l0OiB0cnVlIH1dKi9cbnZhciB1bmRlZkFsbFRoZVRoaW5ncyA9IG15QXJyYXkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm47XG59KTsifQ==)\n\n``` language-js\n/*eslint array-callback-return: [\"error\", { allowImplicit: true }]*/\nvar undefAllTheThings = myArray.map(function(item) {\n    return;\n});\n```\n\n### checkForEach\n\nExamples of **incorrect** code for the `{ \"checkForEach\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogW1wiZXJyb3JcIiwgeyBjaGVja0ZvckVhY2g6IHRydWUgfV0qL1xuXG5teUFycmF5LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBoYW5kbGVJdGVtKGl0ZW0pO1xufSk7XG5cbm15QXJyYXkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKGl0ZW0gPCAwKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgICBoYW5kbGVJdGVtKGl0ZW0pO1xufSk7XG5cbm15QXJyYXkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKGl0ZW0gPCAwKSB7XG4gICAgICAgIHJldHVybiB2b2lkIHg7XG4gICAgfVxuICAgIGhhbmRsZUl0ZW0oaXRlbSk7XG59KTtcblxubXlBcnJheS5mb3JFYWNoKGl0ZW0gPT4gaGFuZGxlSXRlbShpdGVtKSk7XG5cbm15QXJyYXkuZm9yRWFjaChpdGVtID0+IHZvaWQgaGFuZGxlSXRlbShpdGVtKSk7XG5cbm15QXJyYXkuZm9yRWFjaChpdGVtID0+IHtcbiAgICByZXR1cm4gaGFuZGxlSXRlbShpdGVtKTtcbn0pO1xuXG5teUFycmF5LmZvckVhY2goaXRlbSA9PiB7XG4gICAgcmV0dXJuIHZvaWQgaGFuZGxlSXRlbShpdGVtKTtcbn0pOyJ9)\n\n``` language-js\n/*eslint array-callback-return: [\"error\", { checkForEach: true }]*/\n\nmyArray.forEach(function(item) {\n    return handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return x;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return void x;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(item => handleItem(item));\n\nmyArray.forEach(item => void handleItem(item));\n\nmyArray.forEach(item => {\n    return handleItem(item);\n});\n\nmyArray.forEach(item => {\n    return void handleItem(item);\n});\n```\n\nExamples of **correct** code for the `{ \"checkForEach\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogW1wiZXJyb3JcIiwgeyBjaGVja0ZvckVhY2g6IHRydWUgfV0qL1xuXG5teUFycmF5LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGhhbmRsZUl0ZW0oaXRlbSlcbn0pO1xuXG5teUFycmF5LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpdGVtIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGhhbmRsZUl0ZW0oaXRlbSk7XG59KTtcblxubXlBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBoYW5kbGVJdGVtKGl0ZW0pO1xuICAgIHJldHVybjtcbn0pO1xuXG5teUFycmF5LmZvckVhY2goaXRlbSA9PiB7XG4gICAgaGFuZGxlSXRlbShpdGVtKTtcbn0pOyJ9)\n\n``` language-js\n/*eslint array-callback-return: [\"error\", { checkForEach: true }]*/\n\nmyArray.forEach(function(item) {\n    handleItem(item)\n});\n\nmyArray.forEach(function(item) {\n    if (item < 0) {\n        return;\n    }\n    handleItem(item);\n});\n\nmyArray.forEach(function(item) {\n    handleItem(item);\n    return;\n});\n\nmyArray.forEach(item => {\n    handleItem(item);\n});\n```\n\n### allowVoid\n\nExamples of **correct** code for the `{ \"allowVoid\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycmF5LWNhbGxiYWNrLXJldHVybjogW1wiZXJyb3JcIiwgeyBjaGVja0ZvckVhY2g6IHRydWUsIGFsbG93Vm9pZDogdHJ1ZSB9XSovXG5cbm15QXJyYXkuZm9yRWFjaChpdGVtID0+IHZvaWQgaGFuZGxlSXRlbShpdGVtKSk7XG5cbm15QXJyYXkuZm9yRWFjaChpdGVtID0+IHtcbiAgICByZXR1cm4gdm9pZCBoYW5kbGVJdGVtKGl0ZW0pO1xufSk7XG5cbm15QXJyYXkuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAoaXRlbSA8IDApIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgeDtcbiAgICB9XG4gICAgaGFuZGxlSXRlbShpdGVtKTtcbn0pOyJ9)\n\n``` language-js\n/*eslint array-callback-return: [\"error\", { checkForEach: true, allowVoid: true }]*/\n\nmyArray.forEach(item => void handleItem(item));\n\nmyArray.forEach(item => {\n    return void handleItem(item);\n});\n\nmyArray.forEach(item => {\n    if (item < 0) {\n        return void x;\n    }\n    handleItem(item);\n});\n```\n\n## Known Limitations\n\nThis rule checks callback functions of methods with the given names, *even if* the object which has the method is *not* an array.\n\n## When Not To Use It\n\nIf you don’t want to warn about usage of `return` statement in callbacks of array’s methods, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/array-callback-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/array-callback-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/array-callback-return](https://eslint.org/docs/latest/rules/array-callback-return)"
- name: arrow-body-style
  id: rules/arrow-body-style
  summary: Arrow functions have two syntactic forms for their function bodies
  description: "# arrow-body-style\n\nRequire braces around arrow function bodies\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](arrow-body-style../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [as-needed](#as-needed)\n        1.  [requireReturnForObjectLiteral](#requirereturnforobjectliteral)\n    3.  [never](#never)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nArrow functions have two syntactic forms for their function bodies. They may be defined with a *block* body (denoted by curly braces) `() => { ... }` or with a single expression `() => ...`, whose value is implicitly returned.\n\n## Rule Details\n\nThis rule can enforce or disallow the use of braces around arrow function body.\n\n## Options\n\nThe rule takes one or two options. The first is a string, which can be:\n\n- `\"always\"` enforces braces around the function body\n- `\"as-needed\"` enforces no braces where they can be omitted (default)\n- `\"never\"` enforces no braces around the function body (constrains arrow functions to the role of returning an expression)\n\nThe second one is an object for more fine-grained configuration when the first option is `\"as-needed\"`. Currently, the only available option is `requireReturnForObjectLiteral`, a boolean property. It’s `false` by default. If set to `true`, it requires braces and an explicit return for object literals.\n\n``` language-json\n\"arrow-body-style\": [\"error\", \"always\"]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgZm9vID0gKCkgPT4gMDsifQ==)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nlet foo = () => 0;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgZm9vID0gKCkgPT4ge1xuICAgIHJldHVybiAwO1xufTtcbmxldCBiYXIgPSAocmV0diwgbmFtZSkgPT4ge1xuICAgIHJldHZbbmFtZV0gPSB0cnVlO1xuICAgIHJldHVybiByZXR2O1xufTsifQ==)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nlet foo = () => {\n    return 0;\n};\nlet bar = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the default `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgZm9vID0gKCkgPT4ge1xuICAgIHJldHVybiAwO1xufTtcbmxldCBiYXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICBiYXI6IHtcbiAgICAgICAgICAgIGZvbzogMSxcbiAgICAgICAgICAgIGJhcjogMixcbiAgICAgICAgfVxuICAgIH07XG59OyJ9)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nlet foo = () => {\n    return 0;\n};\nlet bar = () => {\n    return {\n       bar: {\n            foo: 1,\n            bar: 2,\n        }\n    };\n};\n```\n\nExamples of **correct** code for this rule with the default `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgZm9vMSA9ICgpID0+IDA7XG5sZXQgZm9vMiA9IChyZXR2LCBuYW1lKSA9PiB7XG4gICAgcmV0dltuYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIHJldHY7XG59O1xubGV0IGZvbzMgPSAoKSA9PiAoe1xuICAgIGJhcjoge1xuICAgICAgICBmb286IDEsXG4gICAgICAgIGJhcjogMixcbiAgICB9XG59KTtcbmxldCBmb280ID0gKCkgPT4geyBiYXIoKTsgfTtcbmxldCBmb281ID0gKCkgPT4ge307XG5sZXQgZm9vNiA9ICgpID0+IHsgLyogZG8gbm90aGluZyAqLyB9O1xubGV0IGZvbzcgPSAoKSA9PiB7XG4gICAgLy8gZG8gbm90aGluZy5cbn07XG5sZXQgZm9vOCA9ICgpID0+ICh7IGJhcjogMCB9KTsifQ==)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nlet foo1 = () => 0;\nlet foo2 = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\nlet foo3 = () => ({\n    bar: {\n        foo: 1,\n        bar: 2,\n    }\n});\nlet foo4 = () => { bar(); };\nlet foo5 = () => {};\nlet foo6 = () => { /* do nothing */ };\nlet foo7 = () => {\n    // do nothing.\n};\nlet foo8 = () => ({ bar: 0 });\n```\n\n#### requireReturnForObjectLiteral\n\n> This option is only applicable when used in conjunction with the `\"as-needed\"` option.\n\nExamples of **incorrect** code for this rule with the `{ \"requireReturnForObjectLiteral\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCIsIHsgXCJyZXF1aXJlUmV0dXJuRm9yT2JqZWN0TGl0ZXJhbFwiOiB0cnVlIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xubGV0IGZvbyA9ICgpID0+ICh7fSk7XG5sZXQgYmFyID0gKCkgPT4gKHsgYmFyOiAwIH0pOyJ9)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n/*eslint-env es6*/\nlet foo = () => ({});\nlet bar = () => ({ bar: 0 });\n```\n\nExamples of **correct** code for this rule with the `{ \"requireReturnForObjectLiteral\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCIsIHsgXCJyZXF1aXJlUmV0dXJuRm9yT2JqZWN0TGl0ZXJhbFwiOiB0cnVlIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgZm9vID0gKCkgPT4ge307XG5sZXQgYmFyID0gKCkgPT4geyByZXR1cm4geyBiYXI6IDAgfTsgfTsifQ==)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n/*eslint-env es6*/\n\nlet foo = () => {};\nlet bar = () => { return { bar: 0 }; };\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmxldCBmb28gPSAoKSA9PiB7XG4gICAgcmV0dXJuIDA7XG59O1xubGV0IGJhciA9IChyZXR2LCBuYW1lKSA9PiB7XG4gICAgcmV0dltuYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIHJldHY7XG59OyJ9)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet foo = () => {\n    return 0;\n};\nlet bar = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LWJvZHktc3R5bGU6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmxldCBmb28gPSAoKSA9PiAwO1xubGV0IGJhciA9ICgpID0+ICh7IGZvbzogMCB9KTsifQ==)\n\n``` language-js\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet foo = () => 0;\nlet bar = () => ({ foo: 0 });\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.8.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/arrow-body-style.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/arrow-body-style.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/arrow-body-style](https://eslint.org/docs/latest/rules/arrow-body-style)"
- name: arrow-parens
  id: rules/arrow-parens
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# arrow-parens\n\nRequire parentheses around arrow function arguments\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](arrow-parens../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n        1.  [If Statements](#if-statements)\n    2.  [as-needed](#as-needed)\n    3.  [requireForBlockBody](#requireforblockbody)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/arrow-parens) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nArrow functions can omit parentheses when they have exactly one parameter. In all other cases the parameter(s) must be wrapped in parentheses. This rule enforces the consistent use of parentheses in arrow functions.\n\n## Rule Details\n\nThis rule enforces parentheses around arrow function parameters regardless of arity. For example:\n\n``` language-js\n/*eslint-env es6*/\n\n// Bad\na => {}\n\n// Good\n(a) => {}\n```\n\nFollowing this style will help you find arrow functions (`=>`) which may be mistakenly included in a condition when a comparison such as `>=` was the intent.\n\n``` language-js\n/*eslint-env es6*/\n\n// Bad\nif (a => 2) {\n}\n\n// Good\nif (a >= 2) {\n}\n```\n\nThe rule can also be configured to discourage the use of parens when they are not required:\n\n``` language-js\n/*eslint-env es6*/\n\n// Bad\n(a) => {}\n\n// Good\na => {}\n```\n\n## Options\n\nThis rule has a string option and an object one.\n\nString options are:\n\n- `\"always\"` (default) requires parens around arguments in all cases.\n- `\"as-needed\"` enforces no parens where they can be omitted.\n\nObject properties for variants of the `\"as-needed\"` option:\n\n- `\"requireForBlockBody\": true` modifies the as-needed rule in order to require parens if the function body is in an instructions block (surrounded by braces).\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmEgPT4ge307XG5hID0+IGE7XG5hID0+IHsnXFxuJ307XG5hLnRoZW4oZm9vID0+IHt9KTtcbmEudGhlbihmb28gPT4gYSk7XG5hKGZvbyA9PiB7IGlmICh0cnVlKSB7fSB9KTsifQ==)\n\n``` language-js\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => a);\na(foo => { if (true) {} });\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbigpID0+IHt9O1xuKGEpID0+IHt9O1xuKGEpID0+IGE7XG4oYSkgPT4geydcXG4nfVxuYS50aGVuKChmb28pID0+IHt9KTtcbmEudGhlbigoZm9vKSA9PiB7IGlmICh0cnVlKSB7fSB9KTsifQ==)\n\n``` language-js\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\n() => {};\n(a) => {};\n(a) => a;\n(a) => {'\\n'}\na.then((foo) => {});\na.then((foo) => { if (true) {} });\n```\n\n#### If Statements\n\nOne of the benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:\n\n``` language-js\n/*eslint-env es6*/\n\nvar a = 1;\nvar b = 2;\n// ...\nif (a => b) {\n console.log('bigger');\n} else {\n console.log('smaller');\n}\n// outputs 'bigger', not smaller as expected\n```\n\nThe contents of the `if` statement is an arrow function, not a comparison.\n\nIf the arrow function is intentional, it should be wrapped in parens to remove ambiguity.\n\n``` language-js\n/*eslint-env es6*/\n\nvar a = 1;\nvar b = 0;\n// ...\nif ((a) => b) {\n console.log('truthy value returned');\n} else {\n console.log('falsy value returned');\n}\n// outputs 'truthy value returned'\n```\n\nThe following is another example of this behavior:\n\n``` language-js\n/*eslint-env es6*/\n\nvar a = 1, b = 2, c = 3, d = 4;\nvar f = a => b ? c: d;\n// f = ?\n```\n\n`f` is an arrow function which takes `a` as an argument and returns the result of `b ? c: d`.\n\nThis should be rewritten like so:\n\n``` language-js\n/*eslint-env es6*/\n\nvar a = 1, b = 2, c = 3, d = 4;\nvar f = (a) => b ? c: d;\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbihhKSA9PiB7fTtcbihhKSA9PiBhO1xuKGEpID0+IHsnXFxuJ307XG5hLnRoZW4oKGZvbykgPT4ge30pO1xuYS50aGVuKChmb28pID0+IGEpO1xuYSgoZm9vKSA9PiB7IGlmICh0cnVlKSB7fSB9KTtcbmNvbnN0IGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8oYSkgPT4gYSArIGE7XG5jb25zdCBnID0gLyogY29tbWVudCAqLyAoYSkgPT4gYSArIGE7XG5jb25zdCBoID0gKGEpIC8qIGNvbW1lbnQgKi8gPT4gYSArIGE7In0=)\n\n``` language-js\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\n(a) => {};\n(a) => a;\n(a) => {'\\n'};\na.then((foo) => {});\na.then((foo) => a);\na((foo) => { if (true) {} });\nconst f = /** @type {number} */(a) => a + a;\nconst g = /* comment */ (a) => a + a;\nconst h = (a) /* comment */ => a + a;\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbigpID0+IHt9O1xuYSA9PiB7fTtcbmEgPT4gYTtcbmEgPT4geydcXG4nfTtcbmEudGhlbihmb28gPT4ge30pO1xuYS50aGVuKGZvbyA9PiB7IGlmICh0cnVlKSB7fSB9KTtcbihhLCBiLCBjKSA9PiBhO1xuKGEgPSAxMCkgPT4gYTtcbihbYSwgYl0pID0+IGE7XG4oe2EsIGJ9KSA9PiBhO1xuY29uc3QgZiA9ICgvKiogQHR5cGUge251bWJlcn0gKi9hKSA9PiBhICsgYTtcbmNvbnN0IGcgPSAoLyogY29tbWVudCAqLyBhKSA9PiBhICsgYTtcbmNvbnN0IGggPSAoYSAvKiBjb21tZW50ICovKSA9PiBhICsgYTsifQ==)\n\n``` language-js\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\n() => {};\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\nconst f = (/** @type {number} */a) => a + a;\nconst g = (/* comment */ a) => a + a;\nconst h = (a /* comment */) => a + a;\n```\n\n### requireForBlockBody\n\nExamples of **incorrect** code for the `{ \"requireForBlockBody\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogWzIsIFwiYXMtbmVlZGVkXCIsIHsgXCJyZXF1aXJlRm9yQmxvY2tCb2R5XCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbihhKSA9PiBhO1xuYSA9PiB7fTtcbmEgPT4geydcXG4nfTtcbmEubWFwKCh4KSA9PiB4ICogeCk7XG5hLm1hcCh4ID0+IHtcbiAgcmV0dXJuIHggKiB4O1xufSk7XG5hLnRoZW4oZm9vID0+IHt9KTsifQ==)\n\n``` language-js\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n/*eslint-env es6*/\n\n(a) => a;\na => {};\na => {'\\n'};\na.map((x) => x * x);\na.map(x => {\n  return x * x;\n});\na.then(foo => {});\n```\n\nExamples of **correct** code for the `{ \"requireForBlockBody\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXBhcmVuczogWzIsIFwiYXMtbmVlZGVkXCIsIHsgXCJyZXF1aXJlRm9yQmxvY2tCb2R5XCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbihhKSA9PiB7fTtcbihhKSA9PiB7J1xcbid9O1xuYSA9PiAoe30pO1xuKCkgPT4ge307XG5hID0+IGE7XG5hLnRoZW4oKGZvbykgPT4ge30pO1xuYS50aGVuKChmb28pID0+IHsgaWYgKHRydWUpIHt9IH0pO1xuYSgoZm9vKSA9PiB7IGlmICh0cnVlKSB7fSB9KTtcbihhLCBiLCBjKSA9PiBhO1xuKGEgPSAxMCkgPT4gYTtcbihbYSwgYl0pID0+IGE7XG4oe2EsIGJ9KSA9PiBhOyJ9)\n\n``` language-js\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n/*eslint-env es6*/\n\n(a) => {};\n(a) => {'\\n'};\na => ({});\n() => {};\na => a;\na.then((foo) => {});\na.then((foo) => { if (true) {} });\na((foo) => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Further Reading\n\n[GitHub - airbnb/javascript: JavaScript Style Guide](https://github.com/airbnb/javascript#arrows--one-arg-parens)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/arrow-parens.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/arrow-parens.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/arrow-parens](https://eslint.org/docs/latest/rules/arrow-parens)"
- name: arrow-spacing
  id: rules/arrow-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# arrow-spacing\n\nEnforce consistent spacing before and after the arrow in arrow functions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](arrow-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/arrow-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nThis rule normalize style of spacing before/after an arrow function’s arrow(`=>`).\n\n``` language-js\n/*eslint-env es6*/\n\n// { \"before\": true, \"after\": true }\n(a) => {}\n\n// { \"before\": false, \"after\": false }\n(a)=>{}\n```\n\n## Rule Details\n\nThis rule takes an object argument with `before` and `after` properties, each with a Boolean value.\n\nThe default configuration is `{ \"before\": true, \"after\": true }`.\n\n`true` means there should be **one or more spaces** and `false` means **no spaces**.\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": true, \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuKCk9PiB7fTtcbigpID0+e307XG4oYSk9PiB7fTtcbihhKSA9Pnt9O1xuYSA9PmE7XG5hPT4gYTtcbigpPT4geydcXG4nfTtcbigpID0+eydcXG4nfTsifQ==)\n\n``` language-js\n/*eslint arrow-spacing: \"error\"*/\n/*eslint-env es6*/\n\n()=> {};\n() =>{};\n(a)=> {};\n(a) =>{};\na =>a;\na=> a;\n()=> {'\\n'};\n() =>{'\\n'};\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": true, \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuKCkgPT4ge307XG4oYSkgPT4ge307XG5hID0+IGE7XG4oKSA9PiB7J1xcbid9OyJ9)\n\n``` language-js\n/*eslint arrow-spacing: \"error\"*/\n/*eslint-env es6*/\n\n() => {};\n(a) => {};\na => a;\n() => {'\\n'};\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false, \"after\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogZmFsc2UgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbigpID0+e307XG4oYSkgPT4ge307XG4oKT0+IHsnXFxuJ307In0=)\n\n``` language-js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n/*eslint-env es6*/\n\n() =>{};\n(a) => {};\n()=> {'\\n'};\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false, \"after\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogZmFsc2UgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbigpPT57fTtcbihhKT0+e307XG4oKT0+eydcXG4nfTsifQ==)\n\n``` language-js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n/*eslint-env es6*/\n\n()=>{};\n(a)=>{};\n()=>{'\\n'};\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false, \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuKCkgPT57fTtcbihhKSA9PiB7fTtcbigpPT57J1xcbid9OyJ9)\n\n``` language-js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n/*eslint-env es6*/\n\n() =>{};\n(a) => {};\n()=>{'\\n'};\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false, \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGFycm93LXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuKCk9PiB7fTtcbihhKT0+IHt9O1xuKCk9PiB7J1xcbid9OyJ9)\n\n``` language-js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n/*eslint-env es6*/\n\n()=> {};\n(a)=> {};\n()=> {'\\n'};\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/arrow-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/arrow-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/arrow-spacing](https://eslint.org/docs/latest/rules/arrow-spacing)"
- name: block-scoped-var
  id: rules/block-scoped-var
  summary: The block-scoped-var rule generates warnings when variables are used outside of the block in which they were defined
  description: "# block-scoped-var\n\nEnforce the use of variables within the scope they are defined\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Further Reading](#further-reading)\n4.  [Resources](#resources)\n\nThe `block-scoped-var` rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.\n\n## Rule Details\n\nThis rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNjb3BlZC12YXI6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGRvSWYoKSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgdmFyIGJ1aWxkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhidWlsZCk7XG59XG5cbmZ1bmN0aW9uIGRvSWZFbHNlKCkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICAgIHZhciBidWlsZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJ1aWxkID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkb1RyeUNhdGNoKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBidWlsZCA9IDE7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgZiA9IGJ1aWxkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZG9Gb3IoKSB7XG4gICAgZm9yICh2YXIgeCA9IDE7IHggPCAxMDsgeCsrKSB7XG4gICAgICAgIHZhciB5ID0gZih4KTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coeSk7XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGlmIChzb21ldGhpbmcpIHtcbiAgICAgICAgICAgIHZhciBidWlsZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGQgPSBmYWxzZTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    if (true) {\n        var build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    if (true) {\n        var build = true;\n    } else {\n        var build = false;\n    }\n}\n\nfunction doTryCatch() {\n    try {\n        var build = 1;\n    } catch (e) {\n        var f = build;\n    }\n}\n\nfunction doFor() {\n    for (var x = 1; x < 10; x++) {\n        var y = f(x);\n    }\n    console.log(y);\n}\n\nclass C {\n    static {\n        if (something) {\n            var build = true;\n        }\n        build = false;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNjb3BlZC12YXI6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGRvSWYoKSB7XG4gICAgdmFyIGJ1aWxkO1xuXG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgYnVpbGQgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGJ1aWxkKTtcbn1cblxuZnVuY3Rpb24gZG9JZkVsc2UoKSB7XG4gICAgdmFyIGJ1aWxkO1xuXG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgYnVpbGQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1aWxkID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkb1RyeUNhdGNoKCkge1xuICAgIHZhciBidWlsZDtcbiAgICB2YXIgZjtcblxuICAgIHRyeSB7XG4gICAgICAgIGJ1aWxkID0gMTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGYgPSBidWlsZDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvRm9yKCkge1xuICAgIGZvciAodmFyIHggPSAxOyB4IDwgMTA7IHgrKykge1xuICAgICAgICB2YXIgeSA9IGYoeCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgIH1cbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGJ1aWxkID0gZmFsc2U7XG4gICAgICAgIGlmIChzb21ldGhpbmcpIHtcbiAgICAgICAgICAgIGJ1aWxkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    var build;\n\n    if (true) {\n        build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    var build;\n\n    if (true) {\n        build = true;\n    } else {\n        build = false;\n    }\n}\n\nfunction doTryCatch() {\n    var build;\n    var f;\n\n    try {\n        build = 1;\n    } catch (e) {\n        f = build;\n    }\n}\n\nfunction doFor() {\n    for (var x = 1; x < 10; x++) {\n        var y = f(x);\n        console.log(y);\n    }\n}\n\nclass C {\n    static {\n        var build = false;\n        if (something) {\n            build = true;\n        }\n    }\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.1.0.\n\n## Further Reading\n\n[JavaScript Scoping and Hoisting](https://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)  \n\n[var - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/block-scoped-var.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/block-scoped-var.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/block-scoped-var](https://eslint.org/docs/latest/rules/block-scoped-var)"
- name: block-spacing
  id: rules/block-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# block-spacing\n\nDisallow or enforce spaces inside of blocks after opening block and before closing block\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](block-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/block-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\n## Rule Details\n\nThis rule enforces consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.\n\n## Options\n\nThis rule has a string option:\n\n- `\"always\"` (default) requires one or more spaces\n- `\"never\"` disallows spaces\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNwYWNpbmc6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGZvbygpIHtyZXR1cm4gdHJ1ZTt9XG5pZiAoZm9vKSB7IGJhciA9IDA7fVxuZnVuY3Rpb24gYmF6KCkge2xldCBpID0gMDtcbiAgICByZXR1cm4gaTtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHt0aGlzLmJhciA9IDA7fVxufSJ9)\n\n``` language-js\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() {return true;}\nif (foo) { bar = 0;}\nfunction baz() {let i = 0;\n    return i;\n}\n\nclass C {\n    static {this.bar = 0;}\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNwYWNpbmc6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGZvbygpIHsgcmV0dXJuIHRydWU7IH1cbmlmIChmb28pIHsgYmFyID0gMDsgfVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMgeyB0aGlzLmJhciA9IDA7IH1cbn0ifQ==)\n\n``` language-js\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n\nclass C {\n    static { this.bar = 0; }\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7IHJldHVybiB0cnVlOyB9XG5pZiAoZm9vKSB7IGJhciA9IDA7fVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMgeyB0aGlzLmJhciA9IDA7IH1cbn0ifQ==)\n\n``` language-js\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0;}\n\nclass C {\n    static { this.bar = 0; }\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJsb2NrLXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7cmV0dXJuIHRydWU7fVxuaWYgKGZvbykge2JhciA9IDA7fVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge3RoaXMuYmFyID0gMDt9XG59In0=)\n\n``` language-js\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() {return true;}\nif (foo) {bar = 0;}\n\nclass C {\n    static {this.bar = 0;}\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about spacing style inside of blocks, you can safely disable this rule.\n\n## Related Rules\n\n- [space-before-blocks](space-before-blocks)\n- [brace-style](brace-style)\n\n## Version\n\nThis rule was introduced in ESLint v1.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/block-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/block-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/block-spacing](https://eslint.org/docs/latest/rules/block-spacing)"
- name: brace-style
  id: rules/brace-style
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# brace-style\n\nEnforce consistent brace style for blocks\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](brace-style../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [1tbs](#1tbs)\n    2.  [stroustrup](#stroustrup)\n    3.  [allman](#allman)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/brace-style) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nBrace style is closely related to [indent style](https://en.wikipedia.org/wiki/Indent_style) in programming and describes the placement of braces relative to their control statement and body. There are probably a dozen, if not more, brace styles in the world.\n\nThe *one true brace style* is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:\n\n``` language-js\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nOne common variant of one true brace style is called Stroustrup, in which the `else` statements in an `if-else` construct, as well as `catch` and `finally`, must be on its own line after the preceding closing brace. For example:\n\n``` language-js\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n```\n\nAnother style is called [Allman](https://en.wikipedia.org/wiki/Indent_style#Allman_style), in which all the braces are expected to be on their own lines without any extra indentation. For example:\n\n``` language-js\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n```\n\nWhile no style is considered better than the other, most developers agree that having a consistent style throughout a project is important for its long-term maintainability.\n\n## Rule Details\n\nThis rule enforces consistent brace style for blocks.\n\n## Options\n\nThis rule has a string option:\n\n- `\"1tbs\"` (default) enforces one true brace style\n- `\"stroustrup\"` enforces Stroustrup style\n- `\"allman\"` enforces Allman style\n\nThis rule has an object option for an exception:\n\n- `\"allowSingleLine\": true` (default `false`) allows the opening and closing braces for a block to be on the *same* line\n\n### 1tbs\n\nExamples of **incorrect** code for this rule with the default `\"1tbs\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28oKVxue1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuaWYgKGZvbylcbntcbiAgYmFyKCk7XG59XG5cbnRyeVxue1xuICBzb21ldGhpbmdSaXNreSgpO1xufSBjYXRjaChlKVxue1xuICBoYW5kbGVFcnJvcigpO1xufVxuXG5pZiAoZm9vKSB7XG4gIGJhcigpO1xufVxuZWxzZSB7XG4gIGJheigpO1xufVxuXG5jbGFzcyBDXG57XG4gICAgc3RhdGljXG4gICAge1xuICAgICAgICBmb28oKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint brace-style: \"error\"*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n\nclass C\n{\n    static\n    {\n        foo();\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `\"1tbs\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5pZiAoZm9vKSB7XG4gIGJhcigpO1xufVxuXG5pZiAoZm9vKSB7XG4gIGJhcigpO1xufSBlbHNlIHtcbiAgYmF6KCk7XG59XG5cbnRyeSB7XG4gIHNvbWV0aGluZ1Jpc2t5KCk7XG59IGNhdGNoKGUpIHtcbiAgaGFuZGxlRXJyb3IoKTtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgZm9vKCk7XG4gICAgfVxufVxuXG4vLyB3aGVuIHRoZXJlIGFyZSBubyBicmFjZXMsIHRoZXJlIGFyZSBubyBwcm9ibGVtc1xuaWYgKGZvbykgYmFyKCk7XG5lbHNlIGlmIChiYXopIGJvb20oKTsifQ==)\n\n``` language-js\n/*eslint brace-style: \"error\"*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo) {\n  bar();\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n\ntry {\n  somethingRisky();\n} catch(e) {\n  handleError();\n}\n\nclass C {\n    static {\n        foo();\n    }\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"1tbs\", { \"allowSingleLine\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcIjF0YnNcIiwgeyBcImFsbG93U2luZ2xlTGluZVwiOiB0cnVlIH1dKi9cblxuZnVuY3Rpb24gbm9wKCkgeyByZXR1cm47IH1cblxuaWYgKGZvbykgeyBiYXIoKTsgfVxuXG5pZiAoZm9vKSB7IGJhcigpOyB9IGVsc2UgeyBiYXooKTsgfVxuXG50cnkgeyBzb21ldGhpbmdSaXNreSgpOyB9IGNhdGNoKGUpIHsgaGFuZGxlRXJyb3IoKTsgfVxuXG5pZiAoZm9vKSB7IGJheigpOyB9IGVsc2Uge1xuICBib29tKCk7XG59XG5cbmlmIChmb28pIHsgYmF6KCk7IH0gZWxzZSBpZiAoYmFyKSB7XG4gIGJvb20oKTtcbn1cblxuaWYgKGZvbykgeyBiYXooKTsgfSBlbHNlXG5pZiAoYmFyKSB7XG4gIGJvb20oKTtcbn1cblxuaWYgKGZvbykgeyBiYXooKTsgfSBlbHNlIGlmIChiYXIpIHtcbiAgYm9vbSgpO1xufVxuXG50cnkgeyBzb21ldGhpbmdSaXNreSgpOyB9IGNhdGNoKGUpIHtcbiAgaGFuZGxlRXJyb3IoKTtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHsgZm9vKCk7IH1cbn1cblxuY2xhc3MgRCB7IHN0YXRpYyB7IGZvbygpOyB9IH0ifQ==)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"1tbs\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); } else { baz(); }\n\ntry { somethingRisky(); } catch(e) { handleError(); }\n\nif (foo) { baz(); } else {\n  boom();\n}\n\nif (foo) { baz(); } else if (bar) {\n  boom();\n}\n\nif (foo) { baz(); } else\nif (bar) {\n  boom();\n}\n\nif (foo) { baz(); } else if (bar) {\n  boom();\n}\n\ntry { somethingRisky(); } catch(e) {\n  handleError();\n}\n\nclass C {\n    static { foo(); }\n}\n\nclass D { static { foo(); } }\n```\n\n### stroustrup\n\nExamples of **incorrect** code for this rule with the `\"stroustrup\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcInN0cm91c3RydXBcIl0qL1xuXG5mdW5jdGlvbiBmb28oKVxue1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuaWYgKGZvbylcbntcbiAgYmFyKCk7XG59XG5cbnRyeVxue1xuICBzb21ldGhpbmdSaXNreSgpO1xufSBjYXRjaChlKVxue1xuICBoYW5kbGVFcnJvcigpO1xufVxuXG5jbGFzcyBDXG57XG4gICAgc3RhdGljXG4gICAge1xuICAgICAgICBmb28oKTtcbiAgICB9XG59XG5cbmlmIChmb28pIHtcbiAgYmFyKCk7XG59IGVsc2Uge1xuICBiYXooKTtcbn0ifQ==)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"stroustrup\"]*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nclass C\n{\n    static\n    {\n        foo();\n    }\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule with the `\"stroustrup\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcInN0cm91c3RydXBcIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5pZiAoZm9vKSB7XG4gIGJhcigpO1xufVxuXG5pZiAoZm9vKSB7XG4gIGJhcigpO1xufVxuZWxzZSB7XG4gIGJheigpO1xufVxuXG50cnkge1xuICBzb21ldGhpbmdSaXNreSgpO1xufVxuY2F0Y2goZSkge1xuICBoYW5kbGVFcnJvcigpO1xufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBmb28oKTtcbiAgICB9XG59XG5cbi8vIHdoZW4gdGhlcmUgYXJlIG5vIGJyYWNlcywgdGhlcmUgYXJlIG5vIHByb2JsZW1zXG5pZiAoZm9vKSBiYXIoKTtcbmVsc2UgaWYgKGJheikgYm9vbSgpOyJ9)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"stroustrup\"]*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo) {\n  bar();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n\ntry {\n  somethingRisky();\n}\ncatch(e) {\n  handleError();\n}\n\nclass C {\n    static {\n        foo();\n    }\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"stroustrup\", { \"allowSingleLine\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcInN0cm91c3RydXBcIiwgeyBcImFsbG93U2luZ2xlTGluZVwiOiB0cnVlIH1dKi9cblxuZnVuY3Rpb24gbm9wKCkgeyByZXR1cm47IH1cblxuaWYgKGZvbykgeyBiYXIoKTsgfVxuXG5pZiAoZm9vKSB7IGJhcigpOyB9XG5lbHNlIHsgYmF6KCk7IH1cblxudHJ5IHsgc29tZXRoaW5nUmlza3koKTsgfVxuY2F0Y2goZSkgeyBoYW5kbGVFcnJvcigpOyB9XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7IGZvbygpOyB9XG59XG5cbmNsYXNzIEQgeyBzdGF0aWMgeyBmb28oKTsgfSB9In0=)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"stroustrup\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); }\nelse { baz(); }\n\ntry { somethingRisky(); }\ncatch(e) { handleError(); }\n\nclass C {\n    static { foo(); }\n}\n\nclass D { static { foo(); } }\n```\n\n### allman\n\nExamples of **incorrect** code for this rule with the `\"allman\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcImFsbG1hblwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmlmIChmb28pXG57XG4gIGJhcigpOyB9XG5cbnRyeVxue1xuICBzb21ldGhpbmdSaXNreSgpO1xufSBjYXRjaChlKVxue1xuICBoYW5kbGVFcnJvcigpO1xufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBmb28oKTtcbiAgICB9XG59XG5cbmlmIChmb28pIHtcbiAgYmFyKCk7XG59IGVsc2Uge1xuICBiYXooKTtcbn0ifQ==)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"allman\"]*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo)\n{\n  bar(); }\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nclass C {\n    static {\n        foo();\n    }\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule with the `\"allman\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcImFsbG1hblwiXSovXG5cbmZ1bmN0aW9uIGZvbygpXG57XG4gIHJldHVybiB0cnVlO1xufVxuXG5pZiAoZm9vKVxue1xuICBiYXIoKTtcbn1cblxuaWYgKGZvbylcbntcbiAgYmFyKCk7XG59XG5lbHNlXG57XG4gIGJheigpO1xufVxuXG50cnlcbntcbiAgc29tZXRoaW5nUmlza3koKTtcbn1cbmNhdGNoKGUpXG57XG4gIGhhbmRsZUVycm9yKCk7XG59XG5cbmNsYXNzIENcbntcbiAgICBzdGF0aWNcbiAgICB7XG4gICAgICAgIGZvbygpO1xuICAgIH1cbn1cblxuLy8gd2hlbiB0aGVyZSBhcmUgbm8gYnJhY2VzLCB0aGVyZSBhcmUgbm8gcHJvYmxlbXNcbmlmIChmb28pIGJhcigpO1xuZWxzZSBpZiAoYmF6KSBib29tKCk7In0=)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"allman\"]*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n\ntry\n{\n  somethingRisky();\n}\ncatch(e)\n{\n  handleError();\n}\n\nclass C\n{\n    static\n    {\n        foo();\n    }\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"allman\", { \"allowSingleLine\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGJyYWNlLXN0eWxlOiBbXCJlcnJvclwiLCBcImFsbG1hblwiLCB7IFwiYWxsb3dTaW5nbGVMaW5lXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBub3AoKSB7IHJldHVybjsgfVxuXG5pZiAoZm9vKSB7IGJhcigpOyB9XG5cbmlmIChmb28pIHsgYmFyKCk7IH1cbmVsc2UgeyBiYXooKTsgfVxuXG50cnkgeyBzb21ldGhpbmdSaXNreSgpOyB9XG5jYXRjaChlKSB7IGhhbmRsZUVycm9yKCk7IH1cblxuY2xhc3MgQ1xue1xuICAgIHN0YXRpYyB7IGZvbygpOyB9XG5cbiAgICBzdGF0aWNcbiAgICB7IGZvbygpOyB9XG59XG5cbmNsYXNzIEQgeyBzdGF0aWMgeyBmb28oKTsgfSB9In0=)\n\n``` language-js\n/*eslint brace-style: [\"error\", \"allman\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); }\nelse { baz(); }\n\ntry { somethingRisky(); }\ncatch(e) { handleError(); }\n\nclass C\n{\n    static { foo(); }\n\n    static\n    { foo(); }\n}\n\nclass D { static { foo(); } }\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce a particular brace style, don’t enable this rule.\n\n## Related Rules\n\n- [block-spacing](block-spacing)\n- [space-before-blocks](space-before-blocks)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Further Reading\n\n[Indentation style - Wikipedia](https://en.wikipedia.org/wiki/Indent_style)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/brace-style.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/brace-style.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/brace-style](https://eslint.org/docs/latest/rules/brace-style)"
- name: camelcase
  id: rules/camelcase
  summary: 'When it comes to naming variables, style guides generally fall into one of two camps: camelcase (variableName) and underscores (variable_name)'
  description: "# camelcase\n\nEnforce camelcase naming convention\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [properties: “always”](#properties-always)\n    2.  [properties: “never”](#properties-never)\n    3.  [ignoreDestructuring: false](#ignoredestructuring-false)\n    4.  [ignoreDestructuring: true](#ignoredestructuring-true)\n    5.  [ignoreImports: false](#ignoreimports-false)\n    6.  [ignoreImports: true](#ignoreimports-true)\n    7.  [ignoreGlobals: false](#ignoreglobals-false)\n    8.  [ignoreGlobals: true](#ignoreglobals-true)\n    9.  [allow](#allow)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nWhen it comes to naming variables, style guides generally fall into one of two camps: camelcase (`variableName`) and underscores (`variable_name`). This rule focuses on using the camelcase approach. If your style guide calls for camelCasing your variable names, then this rule is for you!\n\n## Rule Details\n\nThis rule looks for any underscores (`_`) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 `import` statements, this rule only targets the name of the variable that will be imported into the local module scope.\n\n## Options\n\nThis rule has an object option:\n\n- `\"properties\": \"always\"` (default) enforces camelcase style for property names\n- `\"properties\": \"never\"` does not check property names\n- `\"ignoreDestructuring\": false` (default) enforces camelcase style for destructured identifiers\n- `\"ignoreDestructuring\": true` does not check destructured identifiers (but still checks any use of those identifiers later in the code)\n- `\"ignoreImports\": false` (default) enforces camelcase style for ES2015 imports\n- `\"ignoreImports\": true` does not check ES2015 imports (but still checks any use of the imports later in the code except function arguments)\n- `\"ignoreGlobals\": false` (default) enforces camelcase style for global variables\n- `\"ignoreGlobals\": true` does not enforce camelcase style for global variables\n- `allow` (`string[]`) list of properties to accept. Accept regex.\n\n### properties: “always”\n\nExamples of **incorrect** code for this rule with the default `{ \"properties\": \"always\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogXCJlcnJvclwiKi9cblxuaW1wb3J0IHsgbm9fY2FtZWxjYXNlZCB9IGZyb20gXCJleHRlcm5hbC1tb2R1bGVcIlxuXG52YXIgbXlfZmF2b3JpdGVfY29sb3IgPSBcIiMxMTJDODVcIjtcblxuZnVuY3Rpb24gZG9fc29tZXRoaW5nKCkge1xuICAgIC8vIC4uLlxufVxuXG5vYmouZG9fc29tZXRoaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG5mdW5jdGlvbiBmb28oeyBub19jYW1lbGNhc2VkIH0pIHtcbiAgICAvLyAuLi5cbn07XG5cbmZ1bmN0aW9uIGJhcih7IGlzQ2FtZWxjYXNlZDogbm9fY2FtZWxjYXNlZCB9KSB7XG4gICAgLy8gLi4uXG59XG5cbmZ1bmN0aW9uIGJheih7IG5vX2NhbWVsY2FzZWQgPSAnZGVmYXVsdCB2YWx1ZScgfSkge1xuICAgIC8vIC4uLlxufTtcblxudmFyIG9iaiA9IHtcbiAgICBteV9wcmVmOiAxXG59O1xuXG52YXIgeyBjYXRlZ29yeV9pZCA9IDEgfSA9IHF1ZXJ5O1xuXG52YXIgeyBmb286IHNuYWtlX2Nhc2VkIH0gPSBiYXI7XG5cbnZhciB7IGZvbzogYmFyX2JheiA9IDEgfSA9IHF1ejsifQ==)\n\n``` language-js\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased } from \"external-module\"\n\nvar my_favorite_color = \"#112C85\";\n\nfunction do_something() {\n    // ...\n}\n\nobj.do_something = function() {\n    // ...\n};\n\nfunction foo({ no_camelcased }) {\n    // ...\n};\n\nfunction bar({ isCamelcased: no_camelcased }) {\n    // ...\n}\n\nfunction baz({ no_camelcased = 'default value' }) {\n    // ...\n};\n\nvar obj = {\n    my_pref: 1\n};\n\nvar { category_id = 1 } = query;\n\nvar { foo: snake_cased } = bar;\n\nvar { foo: bar_baz = 1 } = quz;\n```\n\nExamples of **correct** code for this rule with the default `{ \"properties\": \"always\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogXCJlcnJvclwiKi9cblxuaW1wb3J0IHsgbm9fY2FtZWxjYXNlZCBhcyBjYW1lbENhc2VkIH0gZnJvbSBcImV4dGVybmFsLW1vZHVsZVwiO1xuXG52YXIgbXlGYXZvcml0ZUNvbG9yICAgPSBcIiMxMTJDODVcIjtcbnZhciBfbXlGYXZvcml0ZUNvbG9yICA9IFwiIzExMkM4NVwiO1xudmFyIG15RmF2b3JpdGVDb2xvcl8gID0gXCIjMTEyQzg1XCI7XG52YXIgTVlfRkFWT1JJVEVfQ09MT1IgPSBcIiMxMTJDODVcIjtcbnZhciBmb28xID0gYmFyLmJhel9ib29tO1xudmFyIGZvbzIgPSB7IHF1eDogYmFyLmJhel9ib29tIH07XG5cbm9iai5kb19zb21ldGhpbmcoKTtcbmRvX3NvbWV0aGluZygpO1xubmV3IGRvX3NvbWV0aGluZygpO1xuXG52YXIgeyBjYXRlZ29yeV9pZDogY2F0ZWdvcnkgfSA9IHF1ZXJ5O1xuXG5mdW5jdGlvbiBmb28oeyBpc0NhbWVsQ2FzZWQgfSkge1xuICAgIC8vIC4uLlxufTtcblxuZnVuY3Rpb24gYmFyKHsgaXNDYW1lbENhc2VkOiBpc0Fsc29DYW1lbENhc2VkIH0pIHtcbiAgICAvLyAuLi5cbn1cblxuZnVuY3Rpb24gYmF6KHsgaXNDYW1lbENhc2VkID0gJ2RlZmF1bHQgdmFsdWUnIH0pIHtcbiAgICAvLyAuLi5cbn07XG5cbnZhciB7IGNhdGVnb3J5SWQgPSAxIH0gPSBxdWVyeTtcblxudmFyIHsgZm9vOiBpc0NhbWVsQ2FzZWQgfSA9IGJhcjtcblxudmFyIHsgZm9vOiBpc0NhbWVsQ2FzZWQgPSAxIH0gPSBxdXo7XG4ifQ==)\n\n``` language-js\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased as camelCased } from \"external-module\";\n\nvar myFavoriteColor   = \"#112C85\";\nvar _myFavoriteColor  = \"#112C85\";\nvar myFavoriteColor_  = \"#112C85\";\nvar MY_FAVORITE_COLOR = \"#112C85\";\nvar foo1 = bar.baz_boom;\nvar foo2 = { qux: bar.baz_boom };\n\nobj.do_something();\ndo_something();\nnew do_something();\n\nvar { category_id: category } = query;\n\nfunction foo({ isCamelCased }) {\n    // ...\n};\n\nfunction bar({ isCamelCased: isAlsoCamelCased }) {\n    // ...\n}\n\nfunction baz({ isCamelCased = 'default value' }) {\n    // ...\n};\n\nvar { categoryId = 1 } = query;\n\nvar { foo: isCamelCased } = bar;\n\nvar { foo: isCamelCased = 1 } = quz;\n```\n\n### properties: “never”\n\nExamples of **correct** code for this rule with the `{ \"properties\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge3Byb3BlcnRpZXM6IFwibmV2ZXJcIn1dKi9cblxudmFyIG9iaiA9IHtcbiAgICBteV9wcmVmOiAxXG59O1xuXG5vYmouZm9vX2JhciA9IFwiYmF6XCI7In0=)\n\n``` language-js\n/*eslint camelcase: [\"error\", {properties: \"never\"}]*/\n\nvar obj = {\n    my_pref: 1\n};\n\nobj.foo_bar = \"baz\";\n```\n\n### ignoreDestructuring: false\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreDestructuring\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogXCJlcnJvclwiKi9cblxudmFyIHsgY2F0ZWdvcnlfaWQgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9uYW1lID0gMSB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkOiBjYXRlZ29yeV90aXRsZSB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkOiBjYXRlZ29yeV9hbGlhcyB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkOiBjYXRlZ29yeUlkLCAuLi5vdGhlcl9wcm9wcyB9ID0gcXVlcnk7In0=)\n\n``` language-js\n/*eslint camelcase: \"error\"*/\n\nvar { category_id } = query;\n\nvar { category_name = 1 } = query;\n\nvar { category_id: category_title } = query;\n\nvar { category_id: category_alias } = query;\n\nvar { category_id: categoryId, ...other_props } = query;\n```\n\n### ignoreDestructuring: true\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZURlc3RydWN0dXJpbmc6IHRydWV9XSovXG5cbnZhciB7IGNhdGVnb3J5X2lkOiBjYXRlZ29yeV9hbGlhcyB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkLCAuLi5vdGhlcl9wcm9wcyB9ID0gcXVlcnk7In0=)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { category_id: category_alias } = query;\n\nvar { category_id, ...other_props } = query;\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZURlc3RydWN0dXJpbmc6IHRydWV9XSovXG5cbnZhciB7IGNhdGVnb3J5X2lkIH0gPSBxdWVyeTtcblxudmFyIHsgY2F0ZWdvcnlfaWQgPSAxIH0gPSBxdWVyeTtcblxudmFyIHsgY2F0ZWdvcnlfaWQ6IGNhdGVnb3J5X2lkIH0gPSBxdWVyeTsifQ==)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n```\n\nPlease note that this option applies only to identifiers inside destructuring patterns. It doesn’t additionally allow any particular use of the created variables later in the code apart from the use that is already allowed by default or by other options.\n\nExamples of additional **incorrect** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZURlc3RydWN0dXJpbmc6IHRydWV9XSovXG5cbnZhciB7IHNvbWVfcHJvcGVydHkgfSA9IG9iajsgLy8gYWxsb3dlZCBieSB7aWdub3JlRGVzdHJ1Y3R1cmluZzogdHJ1ZX1cbnZhciBmb28gPSBzb21lX3Byb3BlcnR5ICsgMTsgLy8gZXJyb3IsIGlnbm9yZURlc3RydWN0dXJpbmcgZG9lcyBub3QgYXBwbHkgdG8gdGhpcyBzdGF0ZW1lbnQifQ==)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { some_property } = obj; // allowed by {ignoreDestructuring: true}\nvar foo = some_property + 1; // error, ignoreDestructuring does not apply to this statement\n```\n\nA common use case for this option is to avoid useless renaming when the identifier is not intended to be used later in the code.\n\nExamples of additional **correct** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZURlc3RydWN0dXJpbmc6IHRydWV9XSovXG5cbnZhciB7IHNvbWVfcHJvcGVydHksIC4uLnJlc3QgfSA9IG9iajtcbi8vIGRvIHNvbWV0aGluZyB3aXRoICdyZXN0Jywgbm90aGluZyB3aXRoICdzb21lX3Byb3BlcnR5JyJ9)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { some_property, ...rest } = obj;\n// do something with 'rest', nothing with 'some_property'\n```\n\nAnother common use case for this option is in combination with `{ \"properties\": \"never\" }`, when the identifier is intended to be used only as a property shorthand.\n\nExamples of additional **correct** code for this rule with the `{ \"properties\": \"never\", \"ignoreDestructuring\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge1wicHJvcGVydGllc1wiOiBcIm5ldmVyXCIsIGlnbm9yZURlc3RydWN0dXJpbmc6IHRydWV9XSovXG5cbnZhciB7IHNvbWVfcHJvcGVydHkgfSA9IG9iajtcbmRvU29tZXRoaW5nKHsgc29tZV9wcm9wZXJ0eSB9KTsifQ==)\n\n``` language-js\n/*eslint camelcase: [\"error\", {\"properties\": \"never\", ignoreDestructuring: true}]*/\n\nvar { some_property } = obj;\ndoSomething({ some_property });\n```\n\n### ignoreImports: false\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreImports\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogXCJlcnJvclwiKi9cblxuaW1wb3J0IHsgc25ha2VfY2FzZWQgfSBmcm9tICdtb2QnOyJ9)\n\n``` language-js\n/*eslint camelcase: \"error\"*/\n\nimport { snake_cased } from 'mod';\n```\n\n### ignoreImports: true\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreImports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZUltcG9ydHM6IHRydWV9XSovXG5cbmltcG9ydCBkZWZhdWx0X2ltcG9ydCBmcm9tICdtb2QnO1xuXG5pbXBvcnQgKiBhcyBuYW1lc3BhY2VkX2ltcG9ydCBmcm9tICdtb2QnOyJ9)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreImports: true}]*/\n\nimport default_import from 'mod';\n\nimport * as namespaced_import from 'mod';\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreImports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZUltcG9ydHM6IHRydWV9XSovXG5cbmltcG9ydCB7IHNuYWtlX2Nhc2VkIH0gZnJvbSAnbW9kJzsifQ==)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreImports: true}]*/\n\nimport { snake_cased } from 'mod';\n```\n\n### ignoreGlobals: false\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreGlobals\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZUdsb2JhbHM6IGZhbHNlfV0qL1xuLyogZ2xvYmFsIG5vX2NhbWVsY2FzZWQgKi9cblxuY29uc3QgZm9vID0gbm9fY2FtZWxjYXNlZDsifQ==)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreGlobals: false}]*/\n/* global no_camelcased */\n\nconst foo = no_camelcased;\n```\n\n### ignoreGlobals: true\n\nExamples of **correct** code for this rule with the `{ \"ignoreGlobals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2lnbm9yZUdsb2JhbHM6IHRydWV9XSovXG4vKiBnbG9iYWwgbm9fY2FtZWxjYXNlZCAqL1xuXG5jb25zdCBmb28gPSBub19jYW1lbGNhc2VkOyJ9)\n\n``` language-js\n/*eslint camelcase: [\"error\", {ignoreGlobals: true}]*/\n/* global no_camelcased */\n\nconst foo = no_camelcased;\n```\n\n### allow\n\nExamples of **correct** code for this rule with the `allow` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2FsbG93OiBbXCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50XCJdfV0qL1xuXG5mdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIC8vIC4uLlxufSJ9)\n\n``` language-js\n/*eslint camelcase: [\"error\", {allow: [\"UNSAFE_componentWillMount\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNhbWVsY2FzZTogW1wiZXJyb3JcIiwge2FsbG93OiBbXCJeVU5TQUZFX1wiXX1dKi9cblxuZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAvLyAuLi5cbn1cblxuZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKSB7XG4gICAgLy8gLi4uXG59In0=)\n\n``` language-js\n/*eslint camelcase: [\"error\", {allow: [\"^UNSAFE_\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n\nfunction UNSAFE_componentWillReceiveProps() {\n    // ...\n}\n```\n\n## When Not To Use It\n\nIf you have established coding standards using a different naming convention (separating words with underscores), turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/camelcase.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/camelcase.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/camelcase](https://eslint.org/docs/latest/rules/camelcase)"
- name: capitalized-comments
  id: rules/capitalized-comments
  summary: Comments are useful for leaving information for future developers
  description: "# capitalized-comments\n\nEnforce or disallow capitalization of the first letter of a comment\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](capitalized-comments../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Options](#options)\n        1.  [\"always\"](#always)\n        2.  [\"never\"](#never)\n        3.  [ignorePattern](#ignorepattern)\n        4.  [ignoreInlineComments](#ignoreinlinecomments)\n        5.  [ignoreConsecutiveComments](#ignoreconsecutivecomments)\n    2.  [Using Different Options for Line and Block Comments](#using-different-options-for-line-and-block-comments)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nComments are useful for leaving information for future developers. In order for that information to be useful and not distracting, it is sometimes desirable for comments to follow a particular style. One element of comment formatting styles is whether the first word of a comment should be capitalized or lowercase.\n\nIn general, no comment style is any more or less valid than any others, but many developers would agree that a consistent style can improve a project’s maintainability.\n\n## Rule Details\n\nThis rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.\n\nBy default, this rule will require a non-lowercase letter at the beginning of comments.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIl0gKi9cblxuLy8gbG93ZXJjYXNlIGNvbW1lbnRcbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\"] */\n\n// lowercase comment\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogZXJyb3IgKi9cblxuLy8gQ2FwaXRhbGl6ZWQgY29tbWVudFxuXG4vLyAxLiBOb24tbGV0dGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG5cbi8vIOS4iCBOb24tTGF0aW4gY2hhcmFjdGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG5cbi8qIGVzbGludCBzZW1pOm9mZiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogZXNsaW50LWVuYWJsZSAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qIGpzY3M6ZW5hYmxlICovXG4vKiBqc2hpbnQgYXNpOnRydWUgKi9cbi8qIGdsb2JhbCBmb28gKi9cbi8qIGdsb2JhbHMgZm9vICovXG4vKiBleHBvcnRlZCBteVZhciAqL1xuLy8gZXNsaW50LWRpc2FibGUtbGluZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4vLyBodHRwczovL2dpdGh1Yi5jb21cbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: error */\n\n// Capitalized comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n/* eslint semi:off */\n/* eslint-env node */\n/* eslint-disable */\n/* eslint-enable */\n/* istanbul ignore next */\n/* jscs:enable */\n/* jshint asi:true */\n/* global foo */\n/* globals foo */\n/* exported myVar */\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com\n```\n\n### Options\n\nThis rule has two options: a string value `\"always\"` or `\"never\"` which determines whether capitalization of the first word of a comment should be required or forbidden, and optionally an object containing more configuration parameters for the rule.\n\nHere are the supported object options:\n\n- `ignorePattern`: A string representing a regular expression pattern of words that should be ignored by this rule. If the first word of a comment matches the pattern, this rule will not report that comment.\n  - Note that the following words are always ignored by this rule: `[\"jscs\", \"jshint\", \"eslint\", \"istanbul\", \"global\", \"globals\", \"exported\"]`.\n- `ignoreInlineComments`: If this is `true`, the rule will not report on comments in the middle of code. By default, this is `false`.\n- `ignoreConsecutiveComments`: If this is `true`, the rule will not report on a comment which violates the rule, as long as the comment immediately follows another comment. By default, this is `false`.\n\nHere is an example configuration:\n\n``` language-json\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"ignorePattern\": \"pragma|ignored\",\n            \"ignoreInlineComments\": true\n        }\n    ]\n}\n```\n\n#### `\"always\"`\n\nUsing the `\"always\"` option means that this rule will report any comments which start with a lowercase letter. This is the default configuration for this rule.\n\nNote that configuration comments and comments which start with URLs are never reported.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0gKi9cblxuLy8gbG93ZXJjYXNlIGNvbW1lbnRcbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\"] */\n\n// lowercase comment\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0gKi9cblxuLy8gQ2FwaXRhbGl6ZWQgY29tbWVudFxuXG4vLyAxLiBOb24tbGV0dGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG5cbi8vIOS4iCBOb24tTGF0aW4gY2hhcmFjdGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG5cbi8qIGVzbGludCBzZW1pOm9mZiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogZXNsaW50LWVuYWJsZSAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qIGpzY3M6ZW5hYmxlICovXG4vKiBqc2hpbnQgYXNpOnRydWUgKi9cbi8qIGdsb2JhbCBmb28gKi9cbi8qIGdsb2JhbHMgZm9vICovXG4vKiBleHBvcnRlZCBteVZhciAqL1xuLy8gZXNsaW50LWRpc2FibGUtbGluZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4vLyBodHRwczovL2dpdGh1Yi5jb21cbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\"] */\n\n// Capitalized comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n/* eslint semi:off */\n/* eslint-env node */\n/* eslint-disable */\n/* eslint-enable */\n/* istanbul ignore next */\n/* jscs:enable */\n/* jshint asi:true */\n/* global foo */\n/* globals foo */\n/* exported myVar */\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com\n```\n\n#### `\"never\"`\n\nUsing the `\"never\"` option means that this rule will report any comments which start with an uppercase letter.\n\nExamples of **incorrect** code with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSAqL1xuXG4vLyBDYXBpdGFsaXplZCBjb21tZW50XG4ifQ==)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"never\"] */\n\n// Capitalized comment\n```\n\nExamples of **correct** code with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSAqL1xuXG4vLyBsb3dlcmNhc2UgY29tbWVudFxuXG4vLyAxLiBOb24tbGV0dGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG5cbi8vIOS4iCBOb24tTGF0aW4gY2hhcmFjdGVyIGF0IGJlZ2lubmluZyBvZiBjb21tZW50XG4ifQ==)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"never\"] */\n\n// lowercase comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n```\n\n#### `ignorePattern`\n\nThe `ignorePattern` object takes a string value, which is used as a regular expression applied to the first word of a comment.\n\nExamples of **correct** code with the `\"ignorePattern\"` option set to `\"pragma\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJwcmFnbWFcIiB9XSAqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgLyogcHJhZ21hIHdyYXAodHJ1ZSkgKi9cbn1cbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignorePattern\": \"pragma\" }] */\n\nfunction foo() {\n    /* pragma wrap(true) */\n}\n```\n\n#### `ignoreInlineComments`\n\nSetting the `ignoreInlineComments` option to `true` means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.\n\nExamples of **correct** code with the `\"ignoreInlineComments\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImlnbm9yZUlubGluZUNvbW1lbnRzXCI6IHRydWUgfV0gKi9cblxuZnVuY3Rpb24gZm9vKC8qIGlnbm9yZWQgKi8gYSkge1xufVxuIn0=)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreInlineComments\": true }] */\n\nfunction foo(/* ignored */ a) {\n}\n```\n\n#### `ignoreConsecutiveComments`\n\nIf the `ignoreConsecutiveComments` option is set to `true`, then comments which otherwise violate the rule will not be reported as long as they immediately follow another comment. This can be applied more than once.\n\nExamples of **correct** code with `ignoreConsecutiveComments` set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImlnbm9yZUNvbnNlY3V0aXZlQ29tbWVudHNcIjogdHJ1ZSB9XSAqL1xuXG5mb28oKTtcbi8vIFRoaXMgY29tbWVudCBpcyB2YWxpZCBzaW5jZSBpdCBoYXMgdGhlIGNvcnJlY3QgY2FwaXRhbGl6YXRpb24uXG4vLyB0aGlzIGNvbW1lbnQgaXMgaWdub3JlZCBzaW5jZSBpdCBmb2xsb3dzIGFub3RoZXIgY29tbWVudCxcbi8vIGFuZCB0aGlzIG9uZSBhcyB3ZWxsIGJlY2F1c2UgaXQgZm9sbG93cyB5ZXQgYW5vdGhlciBjb21tZW50LlxuXG5iYXIoKTtcbi8qIEhlcmUgaXMgYSBibG9jayBjb21tZW50IHdoaWNoIGhhcyB0aGUgY29ycmVjdCBjYXBpdGFsaXphdGlvbiwgKi9cbi8qIGJ1dCB0aGlzIG9uZSBpcyBpZ25vcmVkIGR1ZSB0byBiZWluZyBjb25zZWN1dGl2ZTsgKi9cbi8qXG4gKiBpbiBmYWN0LCBldmVuIGlmIGFueSBvZiB0aGVzZSBhcmUgbXVsdGktbGluZSwgdGhhdCBpcyBmaW5lIHRvby5cbiAqLyJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreConsecutiveComments\": true }] */\n\nfoo();\n// This comment is valid since it has the correct capitalization.\n// this comment is ignored since it follows another comment,\n// and this one as well because it follows yet another comment.\n\nbar();\n/* Here is a block comment which has the correct capitalization, */\n/* but this one is ignored due to being consecutive; */\n/*\n * in fact, even if any of these are multi-line, that is fine too.\n */\n```\n\nExamples of **incorrect** code with `ignoreConsecutiveComments` set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImlnbm9yZUNvbnNlY3V0aXZlQ29tbWVudHNcIjogdHJ1ZSB9XSAqL1xuXG5mb28oKTtcbi8vIHRoaXMgY29tbWVudCBpcyBpbnZhbGlkLCBidXQgb25seSBvbiB0aGlzIGxpbmUuXG4vLyB0aGlzIGNvbW1lbnQgZG9lcyBOT1QgZ2V0IHJlcG9ydGVkLCBzaW5jZSBpdCBpcyBhIGNvbnNlY3V0aXZlIGNvbW1lbnQuIn0=)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreConsecutiveComments\": true }] */\n\nfoo();\n// this comment is invalid, but only on this line.\n// this comment does NOT get reported, since it is a consecutive comment.\n```\n\n### Using Different Options for Line and Block Comments\n\nIf you wish to have a different configuration for line comments and block comments, you can do so by using two different object configurations (note that the capitalization option will be enforced consistently for line and block comments):\n\n``` language-json\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"line\": {\n                \"ignorePattern\": \"pragma|ignored\",\n            },\n            \"block\": {\n                \"ignoreInlineComments\": true,\n                \"ignorePattern\": \"ignored\"\n            }\n        }\n    ]\n}\n```\n\nExamples of **incorrect** code with different line and block comment configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJpZ25vcmVQYXR0ZXJuXCI6IFwiYmxvY2tpZ25vcmVcIiB9IH1dICovXG5cbi8vIGNhcGl0YWxpemVkIGxpbmUgY29tbWVudCwgdGhpcyBpcyBpbmNvcnJlY3QsIGJsb2NraWdub3JlIGRvZXMgbm90IGhlbHAgaGVyZVxuLyogbG93ZXJjYXNlZCBibG9jayBjb21tZW50LCB0aGlzIGlzIGluY29ycmVjdCB0b28gKi9cbiJ9)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"block\": { \"ignorePattern\": \"blockignore\" } }] */\n\n// capitalized line comment, this is incorrect, blockignore does not help here\n/* lowercased block comment, this is incorrect too */\n```\n\nExamples of **correct** code with different line and block comment configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBjYXBpdGFsaXplZC1jb21tZW50czogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJpZ25vcmVQYXR0ZXJuXCI6IFwiYmxvY2tpZ25vcmVcIiB9IH1dICovXG5cbi8vIFVwcGVyY2FzZSBsaW5lIGNvbW1lbnQsIHRoaXMgaXMgY29ycmVjdFxuLyogYmxvY2tpZ25vcmUgbG93ZXJjYXNlIGJsb2NrIGNvbW1lbnQsIHRoaXMgaXMgY29ycmVjdCBkdWUgdG8gaWdub3JlUGF0dGVybiAqL1xuIn0=)\n\n``` language-js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"block\": { \"ignorePattern\": \"blockignore\" } }] */\n\n// Uppercase line comment, this is correct\n/* blockignore lowercase block comment, this is correct due to ignorePattern */\n```\n\n## When Not To Use It\n\nThis rule can be disabled if you do not care about the grammatical style of comments in your codebase.\n\n## Compatibility\n\n- **JSCS**: [requireCapitalizedComments](https://jscs-dev.github.io/rule/requireCapitalizedComments)\n- **JSCS**: [disallowCapitalizedComments](https://jscs-dev.github.io/rule/disallowCapitalizedComments)\n\n## Version\n\nThis rule was introduced in ESLint v3.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/capitalized-comments.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/capitalized-comments.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/capitalized-comments](https://eslint.org/docs/latest/rules/capitalized-comments)"
- name: class-methods-use-this
  id: rules/class-methods-use-this
  summary: If a class method does not use this, it can sometimes be made into a static function
  description: "# class-methods-use-this\n\nEnforce that class methods utilize `this`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [exceptMethods](#exceptmethods)\n    2.  [enforceForClassFields](#enforceforclassfields)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nIf a class method does not use `this`, it can *sometimes* be made into a static function. If you do convert the method into a static function, instances of the class that call that particular method have to be converted to a static call as well (`MyClass.callStaticMethod()`)\n\nIt’s possible to have a class method which doesn’t use `this`, such as:\n\n``` language-js\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nlet a = new A();\na.sayHi(); // => \"hi\"\n```\n\nIn the example above, the `sayHi` method doesn’t use `this`, so we can make it a static method:\n\n``` language-js\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    static sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nA.sayHi(); // => \"hi\"\n```\n\nAlso note in the above examples that if you switch a method to a static method, *instances* of the class that call the static method (`let a = new A(); a.sayHi();`) have to be updated to being a static call (`A.sayHi();`) instead of having the instance of the *class* call the method\n\n## Rule Details\n\nThis rule is aimed to flag class methods that do not use `this`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY2xhc3MgQSB7XG4gICAgZm9vKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkhlbGxvIFdvcmxkXCIpOyAgICAgLyplcnJvciBFeHBlY3RlZCAndGhpcycgdG8gYmUgdXNlZCBieSBjbGFzcyBtZXRob2QgJ2ZvbycuKi9cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint class-methods-use-this: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    foo() {\n        console.log(\"Hello World\");     /*error Expected 'this' to be used by class method 'foo'.*/\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cbmNsYXNzIEEge1xuICAgIGZvbygpIHtcbiAgICAgICAgdGhpcy5iYXIgPSBcIkhlbGxvIFdvcmxkXCI7IC8vIE9LLCB0aGlzIGlzIHVzZWRcbiAgICB9XG59XG5cbmNsYXNzIEIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBPSy4gY29uc3RydWN0b3IgaXMgZXhlbXB0XG4gICAgfVxufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMgZm9vKCkge1xuICAgICAgICAvLyBPSy4gc3RhdGljIG1ldGhvZHMgYXJlbid0IGV4cGVjdGVkIHRvIHVzZSB0aGlzLlxuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIC8vIE9LLiBzdGF0aWMgYmxvY2tzIGFyZSBleGVtcHQuXG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint class-methods-use-this: \"error\"*/\n/*eslint-env es6*/\nclass A {\n    foo() {\n        this.bar = \"Hello World\"; // OK, this is used\n    }\n}\n\nclass B {\n    constructor() {\n        // OK. constructor is exempt\n    }\n}\n\nclass C {\n    static foo() {\n        // OK. static methods aren't expected to use this.\n    }\n\n    static {\n        // OK. static blocks are exempt.\n    }\n}\n```\n\n## Options\n\nThis rule has two options:\n\n- `\"exceptMethods\"` allows specified method names to be ignored with this rule.\n- `\"enforceForClassFields\"` enforces that functions used as instance field initializers utilize `this`. (default: `true`)\n\n### exceptMethods\n\n``` language-js\n\"class-methods-use-this\": [<enabled>, { \"exceptMethods\": [<...exceptions>] }]\n```\n\nThe `\"exceptMethods\"` option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use `this` inside the function body. In this case, you can add that method to ignore in the warnings.\n\nExamples of **incorrect** code for this rule when used without `\"exceptMethods\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFwiZXJyb3JcIiovXG5cbmNsYXNzIEEge1xuICAgIGZvbygpIHtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint class-methods-use-this: \"error\"*/\n\nclass A {\n    foo() {\n    }\n}\n```\n\nExamples of **correct** code for this rule when used with exceptMethods:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFtcImVycm9yXCIsIHsgXCJleGNlcHRNZXRob2RzXCI6IFtcImZvb1wiLCBcIiNiYXJcIl0gfV0gKi9cblxuY2xhc3MgQSB7XG4gICAgZm9vKCkge1xuICAgIH1cbiAgICAjYmFyKCkge1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"foo\", \"#bar\"] }] */\n\nclass A {\n    foo() {\n    }\n    #bar() {\n    }\n}\n```\n\n### enforceForClassFields\n\n``` language-js\n\"class-methods-use-this\": [<enabled>, { \"enforceForClassFields\": true | false }]\n```\n\nThe `enforceForClassFields` option enforces that arrow functions and function expressions used as instance field initializers utilize `this`. (default: `true`)\n\nExamples of **incorrect** code for this rule with the `{ \"enforceForClassFields\": true }` option (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlRm9yQ2xhc3NGaWVsZHNcIjogdHJ1ZSB9XSAqL1xuXG5jbGFzcyBBIHtcbiAgICBmb28gPSAoKSA9PiB7fVxufSJ9)\n\n``` language-js\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": true }] */\n\nclass A {\n    foo = () => {}\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"enforceForClassFields\": true }` option (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlRm9yQ2xhc3NGaWVsZHNcIjogdHJ1ZSB9XSAqL1xuXG5jbGFzcyBBIHtcbiAgICBmb28gPSAoKSA9PiB7dGhpczt9XG59In0=)\n\n``` language-js\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": true }] */\n\nclass A {\n    foo = () => {this;}\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"enforceForClassFields\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlRm9yQ2xhc3NGaWVsZHNcIjogZmFsc2UgfV0gKi9cblxuY2xhc3MgQSB7XG4gICAgZm9vID0gKCkgPT4ge31cbn0ifQ==)\n\n``` language-js\n/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": false }] */\n\nclass A {\n    foo = () => {}\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v3.4.0.\n\n## Further Reading\n\n[Classes - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)  \n\n[static - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/class-methods-use-this.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/class-methods-use-this.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/class-methods-use-this](https://eslint.org/docs/latest/rules/class-methods-use-this)"
- name: Code of Conduct
  id: contribute/code-of-conduct
  summary: ESLint welcomes contributions from everyone and adheres to the OpenJS Foundation Code of Conduct
  description: "# Code of Conduct\n\nESLint welcomes contributions from everyone and adheres to the [OpenJS Foundation Code of Conduct](https://eslint.org/conduct). We kindly request that you read over this code of conduct before contributing.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/code-of-conduct](https://eslint.org/docs/latest/contribute/code-of-conduct)"
- name: comma-dangle
  id: rules/comma-dangle
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# comma-dangle\n\nRequire or disallow trailing commas\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](comma-dangle../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [always](#always)\n    3.  [always-multiline](#always-multiline)\n    4.  [only-multiline](#only-multiline)\n    5.  [functions](#functions)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/comma-dangle) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n``` language-js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched. Another argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n``` language-diff\nvar foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n};\n```\n\nMore clear:\n\n``` language-diff\nvar foo = {\n    bar: \"baz\",\n-    qux: \"quux\",\n};\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n``` language-json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"never\"\n    }]\n}\n```\n\n- `\"never\"` (default) disallows trailing commas\n- `\"always\"` requires trailing commas\n- `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n- `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nYou can also use an object option to configure this rule for each type of syntax. Each of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`. The default for each option is `\"never\"` unless otherwise specified.\n\n- `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n- `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n- `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n- `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n- `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)\n  - `functions` should only be enabled when linting ECMAScript 2017 or higher.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbnZhciBmb28gPSB7XG4gICAgYmFyOiBcImJhelwiLFxuICAgIHF1eDogXCJxdXV4XCIsXG59O1xuXG52YXIgYXJyID0gWzEsMixdO1xuXG5mb28oe1xuICBiYXI6IFwiYmF6XCIsXG4gIHF1eDogXCJxdXV4XCIsXG59KTsifQ==)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbnZhciBmb28gPSB7XG4gICAgYmFyOiBcImJhelwiLFxuICAgIHF1eDogXCJxdXV4XCJcbn07XG5cbnZhciBhcnIgPSBbMSwyXTtcblxuZm9vKHtcbiAgYmFyOiBcImJhelwiLFxuICBxdXg6IFwicXV1eFwiXG59KTsifQ==)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG52YXIgZm9vID0ge1xuICAgIGJhcjogXCJiYXpcIixcbiAgICBxdXg6IFwicXV1eFwiXG59O1xuXG52YXIgYXJyID0gWzEsMl07XG5cbmZvbyh7XG4gIGJhcjogXCJiYXpcIixcbiAgcXV4OiBcInF1dXhcIlxufSk7In0=)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG52YXIgZm9vID0ge1xuICAgIGJhcjogXCJiYXpcIixcbiAgICBxdXg6IFwicXV1eFwiLFxufTtcblxudmFyIGFyciA9IFsxLDIsXTtcblxuZm9vKHtcbiAgYmFyOiBcImJhelwiLFxuICBxdXg6IFwicXV1eFwiLFxufSk7In0=)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJhbHdheXMtbXVsdGlsaW5lXCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBiYXI6IFwiYmF6XCIsXG4gICAgcXV4OiBcInF1dXhcIlxufTtcblxudmFyIGZvbyA9IHsgYmFyOiBcImJhelwiLCBxdXg6IFwicXV1eFwiLCB9O1xuXG52YXIgYXJyID0gWzEsMixdO1xuXG52YXIgYXJyID0gWzEsXG4gICAgMixdO1xuXG52YXIgYXJyID0gW1xuICAgIDEsXG4gICAgMlxuXTtcblxuZm9vKHtcbiAgYmFyOiBcImJhelwiLFxuICBxdXg6IFwicXV1eFwiXG59KTsifQ==)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJhbHdheXMtbXVsdGlsaW5lXCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBiYXI6IFwiYmF6XCIsXG4gICAgcXV4OiBcInF1dXhcIixcbn07XG5cbnZhciBmb28gPSB7YmFyOiBcImJhelwiLCBxdXg6IFwicXV1eFwifTtcbnZhciBhcnIgPSBbMSwyXTtcblxudmFyIGFyciA9IFsxLFxuICAgIDJdO1xuXG52YXIgYXJyID0gW1xuICAgIDEsXG4gICAgMixcbl07XG5cbmZvbyh7XG4gIGJhcjogXCJiYXpcIixcbiAgcXV4OiBcInF1dXhcIixcbn0pOyJ9)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJvbmx5LW11bHRpbGluZVwiXSovXG5cbnZhciBmb28gPSB7IGJhcjogXCJiYXpcIiwgcXV4OiBcInF1dXhcIiwgfTtcblxudmFyIGFyciA9IFsxLDIsXTtcblxudmFyIGFyciA9IFsxLFxuICAgIDIsXTtcbiJ9)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwgXCJvbmx5LW11bHRpbGluZVwiXSovXG5cbnZhciBmb28gPSB7XG4gICAgYmFyOiBcImJhelwiLFxuICAgIHF1eDogXCJxdXV4XCIsXG59O1xuXG52YXIgZm9vID0ge1xuICAgIGJhcjogXCJiYXpcIixcbiAgICBxdXg6IFwicXV1eFwiXG59O1xuXG52YXIgZm9vID0ge2JhcjogXCJiYXpcIiwgcXV4OiBcInF1dXhcIn07XG52YXIgYXJyID0gWzEsMl07XG5cbnZhciBhcnIgPSBbMSxcbiAgICAyXTtcblxudmFyIGFyciA9IFtcbiAgICAxLFxuICAgIDIsXG5dO1xuXG52YXIgYXJyID0gW1xuICAgIDEsXG4gICAgMlxuXTtcblxuZm9vKHtcbiAgYmFyOiBcImJhelwiLFxuICBxdXg6IFwicXV1eFwiLFxufSk7XG5cbmZvbyh7XG4gIGJhcjogXCJiYXpcIixcbiAgcXV4OiBcInF1dXhcIlxufSk7In0=)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwge1wiZnVuY3Rpb25zXCI6IFwibmV2ZXJcIn1dKi9cblxuZnVuY3Rpb24gZm9vKGEsIGIsKSB7XG59XG5cbmZvbyhhLCBiLCk7XG5uZXcgZm9vKGEsIGIsKTsifQ==)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwge1wiZnVuY3Rpb25zXCI6IFwibmV2ZXJcIn1dKi9cblxuZnVuY3Rpb24gZm9vKGEsIGIpIHtcbn1cblxuZm9vKGEsIGIpO1xubmV3IGZvbyhhLCBiKTsifQ==)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwge1wiZnVuY3Rpb25zXCI6IFwiYWx3YXlzXCJ9XSovXG5cbmZ1bmN0aW9uIGZvbyhhLCBiKSB7XG59XG5cbmZvbyhhLCBiKTtcbm5ldyBmb28oYSwgYik7In0=)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLWRhbmdsZTogW1wiZXJyb3JcIiwge1wiZnVuY3Rpb25zXCI6IFwiYWx3YXlzXCJ9XSovXG5cbmZ1bmN0aW9uIGZvbyhhLCBiLCkge1xufVxuXG5mb28oYSwgYiwpO1xubmV3IGZvbyhhLCBiLCk7In0=)\n\n``` language-js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\n\n## Version\n\nThis rule was introduced in ESLint v0.16.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/comma-dangle.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/comma-dangle.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/comma-dangle](https://eslint.org/docs/latest/rules/comma-dangle)"
- name: comma-spacing
  id: rules/comma-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# comma-spacing\n\nEnforce consistent spacing before and after commas\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](comma-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [after](#after)\n    2.  [before](#before)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/comma-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nSpacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.\n\n``` language-js\nvar foo = 1, bar = 2;\nvar foo = 1 ,bar = 2;\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.\n\nThis rule does not apply in either of the following cases:\n\n- between two commas\n- between opening bracket `[` and comma, to avoid conflicts with the [`array-bracket-spacing`](comma-spacingarray-bracket-spacing) rule\n- between comma and closing bracket `]`, to avoid conflicts with the [`array-bracket-spacing`](comma-spacingarray-bracket-spacing) rule\n- between comma and closing brace `}`, to avoid conflicts with the [`object-curly-spacing`](comma-spacingobject-curly-spacing) rule\n- between comma and closing parentheses `)`, to avoid conflicts with the [`space-in-parens`](comma-spacingspace-in-parens) rule\n\n## Options\n\nThis rule has an object option:\n\n- `\"before\": false` (default) disallows spaces before commas\n- `\"before\": true` requires one or more spaces before commas\n- `\"after\": true` (default) requires one or more spaces after commas\n- `\"after\": false` disallows spaces after commas\n\n### after\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": false, \"after\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogdHJ1ZSB9XSovXG5cbnZhciBmb28gPSAxICxiYXIgPSAyO1xudmFyIGFyciA9IFsxICwgMl07XG52YXIgb2JqID0ge1wiZm9vXCI6IFwiYmFyXCIgLFwiYmF6XCI6IFwicXVyXCJ9O1xuZm9vKGEgLGIpO1xubmV3IEZvbyhhICxiKTtcbmZ1bmN0aW9uIGJheihhICxiKXt9XG5hICxiIn0=)\n\n``` language-js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1 ,bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction baz(a ,b){}\na ,b\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": false, \"after\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogdHJ1ZSB9XSovXG5cbnZhciBmb28gPSAxLCBiYXIgPSAyXG4gICAgLCBiYXogPSAzO1xudmFyIGFyciA9IFsxLCAyXTtcbnZhciBhcnIgPSBbMSwsIDNdXG52YXIgb2JqID0ge1wiZm9vXCI6IFwiYmFyXCIsIFwiYmF6XCI6IFwicXVyXCJ9O1xuZm9vKGEsIGIpO1xubmV3IEZvbyhhLCBiKTtcbmZ1bmN0aW9uIHF1cihhLCBiKXt9XG5hLCBiIn0=)\n\n``` language-js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1, bar = 2\n    , baz = 3;\nvar arr = [1, 2];\nvar arr = [1,, 3]\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nfoo(a, b);\nnew Foo(a, b);\nfunction qur(a, b){}\na, b\n```\n\nAdditional examples of **correct** code for this rule with the default `{ \"before\": false, \"after\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogZmFsc2UsIFwiYWZ0ZXJcIjogdHJ1ZSB9XSovXG5cbi8vIHRoaXMgcnVsZSBkb2VzIG5vdCBlbmZvcmNlIHNwYWNpbmcgYmV0d2VlbiB0d28gY29tbWFzXG52YXIgYXJyID0gW1xuICAgICwsXG4gICAgLCAsXG5dO1xuXG4vLyB0aGlzIHJ1bGUgZG9lcyBub3QgZW5mb3JjZSBzcGFjaW5nIGFmdGVyIGBbYCBhbmQgYmVmb3JlIGBdYFxudmFyIGFyciA9IFssXTtcbnZhciBhcnIgPSBbICwgXTtcbnZhciBhcnIgPSBbYSwgYixdO1xuWyxdID0gYXJyO1xuWyAsIF0gPSBhcnI7XG5bYSwgYixdID0gYXJyO1xuXG4vLyB0aGlzIHJ1bGUgZG9lcyBub3QgZW5mb3JjZSBzcGFjaW5nIGJlZm9yZSBgfWBcbnZhciBvYmogPSB7eCwgeSx9O1xudmFyIHt6LCBxLH0gPSBvYmo7XG5pbXBvcnQge2ZvbywgYmFyLH0gZnJvbSBcIm1vZFwiO1xuXG4vLyB0aGlzIHJ1bGUgZG9lcyBub3QgZW5mb3JjZSBzcGFjaW5nIGJlZm9yZSBgKWBcbmZvbyhhLCBiLCkifQ==)\n\n``` language-js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\n// this rule does not enforce spacing between two commas\nvar arr = [\n    ,,\n    , ,\n];\n\n// this rule does not enforce spacing after `[` and before `]`\nvar arr = [,];\nvar arr = [ , ];\nvar arr = [a, b,];\n[,] = arr;\n[ , ] = arr;\n[a, b,] = arr;\n\n// this rule does not enforce spacing before `}`\nvar obj = {x, y,};\nvar {z, q,} = obj;\nimport {foo, bar,} from \"mod\";\n\n// this rule does not enforce spacing before `)`\nfoo(a, b,)\n```\n\n### before\n\nExamples of **incorrect** code for this rule with the `{ \"before\": true, \"after\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogdHJ1ZSwgXCJhZnRlclwiOiBmYWxzZSB9XSovXG5cbnZhciBmb28gPSAxLCBiYXIgPSAyO1xudmFyIGFyciA9IFsxICwgMl07XG52YXIgb2JqID0ge1wiZm9vXCI6IFwiYmFyXCIsIFwiYmF6XCI6IFwicXVyXCJ9O1xubmV3IEZvbyhhLGIpO1xuZnVuY3Rpb24gYmF6KGEsYil7fVxuYSwgYiJ9)\n\n``` language-js\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1, bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nnew Foo(a,b);\nfunction baz(a,b){}\na, b\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": true, \"after\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogdHJ1ZSwgXCJhZnRlclwiOiBmYWxzZSB9XSovXG5cbnZhciBmb28gPSAxICxiYXIgPSAyICxcbiAgICBiYXogPSB0cnVlO1xudmFyIGFyciA9IFsxICwyXTtcbnZhciBhcnIgPSBbMSAsLDNdXG52YXIgb2JqID0ge1wiZm9vXCI6IFwiYmFyXCIgLFwiYmF6XCI6IFwicXVyXCJ9O1xuZm9vKGEgLGIpO1xubmV3IEZvbyhhICxiKTtcbmZ1bmN0aW9uIHF1cihhICxiKXt9XG5hICxiIn0=)\n\n``` language-js\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1 ,bar = 2 ,\n    baz = true;\nvar arr = [1 ,2];\nvar arr = [1 ,,3]\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction qur(a ,b){}\na ,b\n```\n\n## When Not To Use It\n\nIf your project will not be following a consistent comma-spacing pattern, turn this rule off.\n\n## Related Rules\n\n- [array-bracket-spacing](array-bracket-spacing)\n- [comma-style](comma-style)\n- [object-curly-spacing](object-curly-spacing)\n- [space-in-brackets](space-in-brackets)\n- [space-in-parens](space-in-parens)\n- [space-infix-ops](space-infix-ops)\n- [space-after-keywords](space-after-keywords)\n- [space-unary-ops](space-unary-ops)\n- [space-return-throw-case](space-return-throw-case)\n\n## Version\n\nThis rule was introduced in ESLint v0.9.0.\n\n## Further Reading\n\n[Code Conventions for the JavaScript Programming Language](https://www.crockford.com/code.html)  \n\n[Dojo Style Guide — The Dojo Toolkit - Reference Guide](https://dojotoolkit.org/reference-guide/1.9/developer/styleguide.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/comma-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/comma-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/comma-spacing](https://eslint.org/docs/latest/rules/comma-spacing)"
- name: comma-style
  id: rules/comma-style
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# comma-style\n\nEnforce consistent comma style\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](comma-style../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [last](#last)\n    2.  [first](#first)\n    3.  [exceptions](#exceptions)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/comma-style) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nThe Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:\n\n- The standard style, in which commas are placed at the end of the current line\n- Comma First style, in which commas are placed at the start of the next line\n\nOne of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.\n\n## Rule Details\n\nThis rule enforce consistent comma style in array literals, object literals, and variable declarations.\n\nThis rule does not apply in either of the following cases:\n\n- comma preceded and followed by linebreak (lone comma)\n- single-line array literals, object literals, and variable declarations\n\n## Options\n\nThis rule has a string option:\n\n- `\"last\"` (default) requires a comma after and on the same line as an array element, object property, or variable declaration\n- `\"first\"` requires a comma before and on the same line as an array element, object property, or variable declaration\n\nThis rule also accepts an additional `exceptions` object:\n\n- `\"exceptions\"` has properties whose names correspond to node types in the abstract syntax tree (AST) of JavaScript code:\n\n  - `\"ArrayExpression\": true` ignores comma style in array literals\n  - `\"ArrayPattern\": true` ignores comma style in array patterns of destructuring\n  - `\"ArrowFunctionExpression\": true` ignores comma style in the parameters of arrow function expressions\n  - `\"CallExpression\": true` ignores comma style in the arguments of function calls\n  - `\"FunctionDeclaration\": true` ignores comma style in the parameters of function declarations\n  - `\"FunctionExpression\": true` ignores comma style in the parameters of function expressions\n  - `\"ImportDeclaration\": true` ignores comma style in the specifiers of import declarations\n  - `\"ObjectExpression\": true` ignores comma style in object literals\n  - `\"ObjectPattern\": true` ignores comma style in object patterns of destructuring\n  - `\"VariableDeclaration\": true` ignores comma style in variable declarations\n  - `\"NewExpression\": true` ignores comma style in the parameters of constructor expressions\n\nA way to determine the node types as defined by [ESTree](https://github.com/estree/estree) is to use [AST Explorer](https://astexplorer.net/) with the espree parser.\n\n### last\n\nExamples of **incorrect** code for this rule with the default `\"last\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImxhc3RcIl0qL1xuXG52YXIgZm9vID0gMVxuLFxuYmFyID0gMjtcblxudmFyIGZvbyA9IDFcbiAgLCBiYXIgPSAyO1xuXG52YXIgZm9vID0gW1wiYXBwbGVzXCJcbiAgICAgICAgICAgLCBcIm9yYW5nZXNcIl07XG5cbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImFcIjogMVxuICAgICAgICAsXCJiOlwiOiAyXG4gICAgfTtcbn0ifQ==)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1\n,\nbar = 2;\n\nvar foo = 1\n  , bar = 2;\n\nvar foo = [\"apples\"\n           , \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\nExamples of **correct** code for this rule with the default `\"last\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImxhc3RcIl0qL1xuXG52YXIgZm9vID0gMSwgYmFyID0gMjtcblxudmFyIGZvbyA9IDEsXG4gICAgYmFyID0gMjtcblxudmFyIGZvbyA9IFtcImFwcGxlc1wiLFxuICAgICAgICAgICBcIm9yYW5nZXNcIl07XG5cbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImFcIjogMSxcbiAgICAgICAgXCJiOlwiOiAyXG4gICAgfTtcbn0ifQ==)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\n### first\n\nExamples of **incorrect** code for this rule with the `\"first\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImZpcnN0XCJdKi9cblxudmFyIGZvbyA9IDEsXG4gICAgYmFyID0gMjtcblxudmFyIGZvbyA9IFtcImFwcGxlc1wiLFxuICAgICAgICAgICBcIm9yYW5nZXNcIl07XG5cbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImFcIjogMSxcbiAgICAgICAgXCJiOlwiOiAyXG4gICAgfTtcbn0ifQ==)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\nExamples of **correct** code for this rule with the `\"first\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImZpcnN0XCJdKi9cblxudmFyIGZvbyA9IDEsIGJhciA9IDI7XG5cbnZhciBmb28gPSAxXG4gICAgLGJhciA9IDI7XG5cbnZhciBmb28gPSBbXCJhcHBsZXNcIlxuICAgICAgICAgICxcIm9yYW5nZXNcIl07XG5cbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImFcIjogMVxuICAgICAgICAsXCJiOlwiOiAyXG4gICAgfTtcbn0ifQ==)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1\n    ,bar = 2;\n\nvar foo = [\"apples\"\n          ,\"oranges\"];\n\nfunction baz() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\n### exceptions\n\nAn example use case is to enforce comma style *only* in var statements.\n\nExamples of **incorrect** code for this rule with sample `\"first\", { \"exceptions\": { … } }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImZpcnN0XCIsIHsgXCJleGNlcHRpb25zXCI6IHsgXCJBcnJheUV4cHJlc3Npb25cIjogdHJ1ZSwgXCJPYmplY3RFeHByZXNzaW9uXCI6IHRydWUgfSB9XSovXG5cbnZhciBvID0ge30sXG4gICAgYSA9IFtdOyJ9)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {},\n    a = [];\n```\n\nExamples of **correct** code for this rule with sample `\"first\", { \"exceptions\": { … } }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbW1hLXN0eWxlOiBbXCJlcnJvclwiLCBcImZpcnN0XCIsIHsgXCJleGNlcHRpb25zXCI6IHsgXCJBcnJheUV4cHJlc3Npb25cIjogdHJ1ZSwgXCJPYmplY3RFeHByZXNzaW9uXCI6IHRydWUgfSB9XSovXG5cbnZhciBvID0ge2ZzdDoxLFxuICAgICAgICAgc25kOiBbMSxcbiAgICAgICAgICAgICAgIDJdfVxuICAsIGEgPSBbXTsifQ==)\n\n``` language-js\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {fst:1,\n         snd: [1,\n               2]}\n  , a = [];\n```\n\n## When Not To Use It\n\nThis rule can safely be turned off if your project does not care about enforcing a consistent comma style.\n\n## Related Rules\n\n- [operator-linebreak](operator-linebreak)\n\n## Version\n\nThis rule was introduced in ESLint v0.9.0.\n\n## Further Reading\n\n[A better coding convention for lists and object literals in JavaScript](https://gist.github.com/isaacs/357981)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/comma-style.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/comma-style.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/comma-style](https://eslint.org/docs/latest/rules/comma-style)"
- name: Command Line Interface Reference
  id: use/command-line-interface
  summary: The ESLint Command Line Interface (CLI) lets you execute linting from the terminal
  description: "# Command Line Interface Reference\n\n## Table of Contents\n\n1.  [Run the CLI](#run-the-cli)\n2.  [Pass Multiple Values to an Option](#pass-multiple-values-to-an-option)\n3.  [Options](#options)\n    1.  [Basic Configuration](#basic-configuration)\n        1.  [--no-eslintrc](#--no-eslintrc)\n        2.  [-c, --config](#-c---config)\n        3.  [--env](#--env)\n        4.  [--ext](#--ext)\n        5.  [--global](#--global)\n        6.  [--parser](#--parser)\n        7.  [--parser-options](#--parser-options)\n        8.  [--resolve-plugins-relative-to](#--resolve-plugins-relative-to)\n    2.  [Specify Rules and Plugins](#specify-rules-and-plugins)\n        1.  [--plugin](#--plugin)\n        2.  [--rule](#--rule)\n        3.  [--rulesdir](#--rulesdir)\n    3.  [Fix Problems](#fix-problems)\n        1.  [--fix](#--fix)\n        2.  [--fix-dry-run](#--fix-dry-run)\n        3.  [--fix-type](#--fix-type)\n    4.  [Ignore Files](#ignore-files)\n        1.  [--ignore-path](#--ignore-path)\n        2.  [--no-ignore](#--no-ignore)\n        3.  [--ignore-pattern](#--ignore-pattern)\n    5.  [Use stdin](#use-stdin)\n        1.  [--stdin](#--stdin)\n        2.  [--stdin-filename](#--stdin-filename)\n    6.  [Handle Warnings](#handle-warnings)\n        1.  [--quiet](#--quiet)\n        2.  [--max-warnings](#--max-warnings)\n    7.  [Output](#output)\n        1.  [-o, --output-file](#-o---output-file)\n        2.  [-f, --format](#-f---format)\n        3.  [--color and --no-color](#--color-and---no-color)\n    8.  [Inline Configuration Comments](#inline-configuration-comments)\n        1.  [--no-inline-config](#--no-inline-config)\n        2.  [--report-unused-disable-directives](#--report-unused-disable-directives)\n        3.  [--report-unused-disable-directives-severity](#--report-unused-disable-directives-severity)\n    9.  [Caching](#caching)\n        1.  [--cache](#--cache)\n        2.  [--cache-file](#--cache-file)\n        3.  [--cache-location](#--cache-location)\n        4.  [--cache-strategy](#--cache-strategy)\n    10. [Miscellaneous](#miscellaneous)\n        1.  [--init](#--init)\n        2.  [--env-info](#--env-info)\n        3.  [--no-error-on-unmatched-pattern](#--no-error-on-unmatched-pattern)\n        4.  [--exit-on-fatal-error](#--exit-on-fatal-error)\n        5.  [--no-warn-ignored](#--no-warn-ignored)\n        6.  [--debug](#--debug)\n        7.  [-h, --help](#-h---help)\n        8.  [-v, --version](#-v---version)\n        9.  [--print-config](#--print-config)\n4.  [Exit Codes](#exit-codes)\n\nThe ESLint Command Line Interface (CLI) lets you execute linting from the terminal. The CLI has a variety of options that you can pass to configure ESLint.\n\n## Run the CLI\n\nESLint requires Node.js for installation. Follow the instructions in the [Getting Started Guide](command-line-interfacegetting-started) to install ESLint.\n\nMost users use [`npx`](https://docs.npmjs.com/cli/v8/commands/npx) to run ESLint on the command line like this:\n\n``` language-shell\nnpx eslint [options] [file|dir|glob]*\n```\n\nSuch as:\n\n``` language-shell\n# Run on two files\nnpx eslint file1.js file2.js\n\n# Run on multiple files\nnpx eslint lib/**\n```\n\nPlease note that when passing a glob as a parameter, it is expanded by your shell. The results of the expansion can vary depending on your shell, and its configuration. If you want to use node `glob` syntax, you have to quote your parameter (using double quotes if you need it to run in Windows), as follows:\n\n``` language-shell\nnpx eslint \"lib/**\"\n```\n\n**Note:** You can also use alternative package managers such as [Yarn](https://yarnpkg.com/) or [pnpm](https://pnpm.io/) to run ESLint. Please refer to your package manager’s documentation for the correct syntax.\n\n## Pass Multiple Values to an Option\n\nOptions that accept multiple values can be specified by repeating the option or with a comma-delimited list (other than [`--ignore-pattern`](#--ignore-pattern), which does not allow the second style).\n\nExamples of options that accept multiple values:\n\n``` language-shell\nnpx eslint --ext .jsx --ext .js lib/\n# OR\nnpx eslint --ext .jsx,.js lib/\n```\n\n## Options\n\nYou can view all the CLI options by running `npx eslint -h`.\n\n``` language-txt\neslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                   Disable use of configuration from .eslintrc.*\n  -c, --config path::String       Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                  Specify environments\n  --ext [String]                  Specify JavaScript file extensions\n  --global [String]               Define global variables\n  --parser String                 Specify the parser to be used\n  --parser-options Object         Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify rules and plugins:\n  --plugin [String]               Specify plugins\n  --rule Object                   Specify rules\n  --rulesdir [path::String]       Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix problems:\n  --fix                           Automatically fix problems\n  --fix-dry-run                   Automatically fix problems without saving the changes to the file system\n  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore files:\n  --ignore-path path::String      Specify path of ignore file\n  --no-ignore                     Disable use of ignore files and patterns\n  --ignore-pattern [String]       Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                         Lint code provided on <STDIN> - default: false\n  --stdin-filename String         Specify filename to process STDIN as\n\nHandle warnings:\n  --quiet                         Report errors only - default: false\n  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String  Specify file to write report to\n  -f, --format String             Use a specific output format - default: stylish\n  --color, --no-color             Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config              Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                         Only check changed files - default: false\n  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String   Path to the cache file or directory\n  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                          Run config initialization wizard - default: false\n  --env-info                      Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false\n  --no-warn-ignored               Suppress warnings when the file list includes ignored files. *Flat Config Mode Only*\n  --debug                         Output debugging information\n  -h, --help                      Show help\n  -v, --version                   Output the version number\n  --print-config path::String     Print the configuration for the given file\n```\n\n### Basic Configuration\n\n#### `--no-eslintrc`\n\n**eslintrc Mode Only.** Disables use of configuration from `.eslintrc.*` and `package.json` files. For flat config mode, use `--no-config-lookup` instead.\n\n- **Argument Type**: No argument.\n\n##### `--no-eslintrc` example\n\n``` language-shell\nnpx eslint --no-eslintrc file.js\n```\n\n#### `-c`, `--config`\n\nThis option allows you to specify an additional configuration file for ESLint (see [Configure ESLint](command-line-interfaceconfigure/index) for more).\n\n- **Argument Type**: String. Path to file.\n- **Multiple Arguments**: No\n\n##### `-c`, `--config` example\n\n``` language-shell\nnpx eslint -c ~/my-eslint.json file.js\n```\n\nThis example uses the configuration file at `~/my-eslint.json`.\n\nIf `.eslintrc.*` and/or `package.json` files are also used for configuration (i.e., `--no-eslintrc` was not specified), the configurations are merged. Options from this configuration file have precedence over the options from `.eslintrc.*` and `package.json` files.\n\n#### `--env`\n\n**eslintrc Mode Only.** This option enables specific environments.\n\n- **Argument Type**: String. One of the available environments.\n- **Multiple Arguments**: Yes\n\nDetails about the global variables defined by each environment are available in the [Specifying Environments](command-line-interfaceconfigure/language-options#specifying-environments) documentation. This option only enables environments. It does not disable environments set in other configuration files. To specify multiple environments, separate them using commas, or use the option multiple times.\n\n##### `--env` example\n\n``` language-shell\nnpx eslint --env browser,node file.js\nnpx eslint --env browser --env node file.js\n```\n\n#### `--ext`\n\n**eslintrc Mode Only.** This option allows you to specify which file extensions ESLint uses when searching for target files in the directories you specify.\n\n- **Argument Type**: String. File extension.\n- **Multiple Arguments**: Yes\n- **Default Value**: `.js` and the files that match the `overrides` entries of your configuration.\n\n`--ext` is only used when the patterns to lint are directories. If you use glob patterns or file names, then `--ext` is ignored. For example, `npx eslint \"lib/*\" --ext .js` matches all files within the `lib/` directory, regardless of extension.\n\n##### `--ext` example\n\n``` language-shell\n# Use only .ts extension\nnpx eslint . --ext .ts\n\n# Use both .js and .ts\nnpx eslint . --ext .js --ext .ts\n\n# Also use both .js and .ts\nnpx eslint . --ext .js,.ts\n```\n\n#### `--global`\n\nThis option defines global variables so that they are not flagged as undefined by the [`no-undef`](command-line-interface../rules/no-undef) rule.\n\n- **Argument Type**: String. Name of the global variable. Any specified global variables are assumed to be read-only by default, but appending `:true` to a variable’s name ensures that `no-undef` also allows writes.\n- **Multiple Arguments**: Yes\n\n##### `--global` example\n\n``` language-shell\nnpx eslint --global require,exports:true file.js\nnpx eslint --global require --global exports:true\n```\n\n#### `--parser`\n\nThis option allows you to specify a parser to be used by ESLint.\n\n- **Argument Type**: String. Parser to be used by ESLint.\n- **Multiple Arguments**: No\n- **Default Value**: `espree`\n\n##### `--parser` example\n\n``` language-shell\n# Use TypeScript ESLint parser\nnpx eslint --parser @typescript-eslint/parser file.ts\n```\n\n#### `--parser-options`\n\nThis option allows you to specify parser options to be used by ESLint. The available parser options are determined by the parser being used.\n\n- **Argument Type**: Key/value pair separated by colon (`:`).\n- **Multiple Arguments**: Yes\n\n##### `--parser-options` example\n\n``` language-shell\necho '3 ** 4' | npx eslint --stdin --parser-options ecmaVersion:6 # fails with a parsing error\necho '3 ** 4' | npx eslint --stdin --parser-options ecmaVersion:7 # succeeds, yay!\n```\n\n#### `--resolve-plugins-relative-to`\n\n**eslintrc Mode Only.** Changes the directory where plugins are resolved from.\n\n- **Argument Type**: String. Path to directory.\n- **Multiple Arguments**: No\n- **Default Value**: By default, plugins are resolved from the directory in which your configuration file is found.\n\nThis option should be used when plugins were installed by someone other than the end user. It should be set to the project directory of the project that has a dependency on the necessary plugins.\n\nFor example:\n\n- When using a config file that is located outside of the current project (with the `--config` flag), if the config uses plugins which are installed locally to itself, `--resolve-plugins-relative-to` should be set to the directory containing the config file.\n- If an integration has dependencies on ESLint and a set of plugins, and the tool invokes ESLint on behalf of the user with a preset configuration, the tool should set `--resolve-plugins-relative-to` to the top-level directory of the tool.\n\n##### `--resolve-plugins-relative-to` example\n\n``` language-shell\nnpx eslint --config ~/personal-eslintrc.js \\\n--resolve-plugins-relative-to /usr/local/lib/\n```\n\n### Specify Rules and Plugins\n\n#### `--plugin`\n\nThis option specifies a plugin to load.\n\n- **Argument Type**: String. Plugin name. You can optionally omit the prefix `eslint-plugin-` from the plugin name.\n- **Multiple Arguments**: Yes\n\nBefore using the plugin, you have to install it using npm.\n\n##### `--plugin` example\n\n``` language-shell\nnpx eslint --plugin jquery file.js\nnpx eslint --plugin eslint-plugin-mocha file.js\n```\n\n#### `--rule`\n\nThis option specifies the rules to be used.\n\n- **Argument Type**: Rules and their configuration specified with [levn](https://github.com/gkz/levn#levn--) format.\n- **Multiple Arguments**: Yes\n\nThese rules are merged with any rules specified with configuration files. If the rule is defined in a plugin, you have to prefix the rule ID with the plugin name and a `/`.\n\nTo ignore rules in `.eslintrc` configuration files and only run rules specified in the command line, use the `--rule` flag in combination with the [`--no-eslintrc`](#--no-eslintrc) flag.\n\n##### `--rule` example\n\n``` language-shell\n# Apply single rule\nnpx eslint --rule 'quotes: [error, double]'\n# Apply multiple rules\nnpx eslint --rule 'guard-for-in: error' --rule 'brace-style: [error, 1tbs]'\n# Apply rule from jquery plugin\nnpx eslint --rule 'jquery/dollar-sign: error'\n# Only apply rule from the command line\nnpx eslint --rule 'quotes: [error, double]' --no-eslintrc\n```\n\n#### `--rulesdir`\n\n**Deprecated**: Use rules from plugins instead.\n\nThis option allows you to specify another directory from which to load rules files. This allows you to dynamically load new rules at run time. This is useful when you have custom rules that aren’t suitable for being bundled with ESLint.\n\n- **Argument Type**: String. Path to directory. The rules in your custom rules directory must follow the same format as bundled rules to work properly.\n- **Multiple Arguments**: Yes.\n\nNote that, as with core rules and plugin rules, you still need to enable the rules in configuration or via the `--rule` CLI option in order to actually run those rules during linting. Specifying a rules directory with `--rulesdir` does not automatically enable the rules within that directory.\n\n##### `--rulesdir` example\n\n``` language-shell\nnpx eslint --rulesdir my-rules/ file.js\nnpx eslint --rulesdir my-rules/ --rulesdir my-other-rules/ file.js\n```\n\n### Fix Problems\n\n#### `--fix`\n\nThis option instructs ESLint to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output.\n\n- **Argument Type**: No argument.\n\nNot all problems are fixable using this option, and the option does not work in these situations:\n\n1.  This option throws an error when code is piped to ESLint.\n2.  This option has no effect on code that uses a processor, unless the processor opts into allowing autofixes.\n\nIf you want to fix code from `stdin` or otherwise want to get the fixes without actually writing them to the file, use the [`--fix-dry-run`](#--fix-dry-run) option.\n\n##### `--fix` example\n\n``` language-shell\nnpx eslint --fix file.js\n```\n\n#### `--fix-dry-run`\n\nThis option has the same effect as `--fix` with the difference that the fixes are not saved to the file system. Because the default formatter does not output the fixed code, you’ll have to use another formatter (e.g. `--format json`) to get the fixes.\n\n- **Argument Type**: No argument.\n\nThis makes it possible to fix code from `stdin` when used with the `--stdin` flag.\n\nThis flag can be useful for integrations (e.g. editor plugins) which need to autofix text from the command line without saving it to the filesystem.\n\n##### `--fix-dry-run` example\n\n``` language-shell\ngetSomeText | npx eslint --stdin --fix-dry-run --format json\n```\n\n#### `--fix-type`\n\nThis option allows you to specify the type of fixes to apply when using either `--fix` or `--fix-dry-run`.\n\n- **Argument Type**: String. One of the following fix types:\n  1.  `problem` - fix potential errors in the code\n  2.  `suggestion` - apply fixes to the code that improve it\n  3.  `layout` - apply fixes that do not change the program structure (AST)\n  4.  `directive` - apply fixes to inline directives such as `// eslint-disable`\n- **Multiple Arguments**: Yes\n\nThis option is helpful if you are using another program to format your code, but you would still like ESLint to apply other types of fixes.\n\n##### `--fix-type` example\n\n``` language-shell\nnpx eslint --fix --fix-type suggestion .\nnpx eslint --fix --fix-type suggestion --fix-type problem .\nnpx eslint --fix --fix-type suggestion,layout .\n```\n\n### Ignore Files\n\n#### `--ignore-path`\n\n**eslintrc Mode Only.** This option allows you to specify the file to use as your `.eslintignore`.\n\n- **Argument Type**: String. Path to file.\n- **Multiple Arguments**: No\n- **Default Value**: By default, ESLint looks for `.eslintignore` in the current working directory.\n\n**Note:** `--ignore-path` is not supported when using [flat configuration](command-line-interface./configure/configuration-files-new) (`eslint.config.js`).\n\n##### `--ignore-path` example\n\n``` language-shell\nnpx eslint --ignore-path tmp/.eslintignore file.js\nnpx eslint --ignore-path .gitignore file.js\n```\n\n#### `--no-ignore`\n\nDisables excluding of files from `.eslintignore` files, `--ignore-path` flags, `--ignore-pattern` flags, and the `ignorePatterns` property in config files.\n\n- **Argument Type**: No argument.\n\n##### `--no-ignore` example\n\n``` language-shell\nnpx eslint --no-ignore file.js\n```\n\n#### `--ignore-pattern`\n\nThis option allows you to specify patterns of files to ignore (in addition to those in `.eslintignore`).\n\n- **Argument Type**: String. The supported syntax is the same as for [`.eslintignore` files](command-line-interfaceconfigure/ignore#the-eslintignore-file), which use the same patterns as the [`.gitignore` specification](https://git-scm.com/docs/gitignore). You should quote your patterns in order to avoid shell interpretation of glob patterns.\n- **Multiple Arguments**: Yes\n\n##### `--ignore-pattern` example\n\n``` language-shell\nnpx eslint --ignore-pattern \"/lib/\" --ignore-pattern \"/src/vendor/*\" .\n```\n\n### Use stdin\n\n#### `--stdin`\n\nThis option tells ESLint to read and lint source code from STDIN instead of from files. You can use this to pipe code to ESLint.\n\n- **Argument Type**: No argument.\n\n##### `--stdin` example\n\n``` language-shell\ncat myfile.js | npx eslint --stdin\n```\n\n#### `--stdin-filename`\n\nThis option allows you to specify a filename to process STDIN as.\n\n- **Argument Type**: String. Path to file.\n- **Multiple Arguments**: No\n\nThis is useful when processing files from STDIN and you have rules which depend on the filename.\n\n##### `--stdin-filename` example\n\n``` language-shell\ncat myfile.js | npx eslint --stdin --stdin-filename myfile.js\n```\n\n### Handle Warnings\n\n#### `--quiet`\n\nThis option allows you to disable reporting on warnings. If you enable this option, only errors are reported by ESLint.\n\n- **Argument Type**: No argument.\n\n##### `--quiet` example\n\n``` language-shell\nnpx eslint --quiet file.js\n```\n\n#### `--max-warnings`\n\nThis option allows you to specify a warning threshold, which can be used to force ESLint to exit with an error status if there are too many warning-level rule violations in your project.\n\n- **Argument Type**: Integer. The maximum number of warnings to allow. To prevent this behavior, do not use this option or specify `-1` as the argument.\n- **Multiple Arguments**: No\n\nNormally, if ESLint runs and finds no errors (only warnings), it exits with a success exit status. However, if `--max-warnings` is specified and the total warning count is greater than the specified threshold, ESLint exits with an error status.\n\n##### `--max-warnings` example\n\n``` language-shell\nnpx eslint --max-warnings 10 file.js\n```\n\n### Output\n\n#### `-o`, `--output-file`\n\nWrite the output of linting results to a specified file.\n\n- **Argument Type**: String. Path to file.\n- **Multiple Arguments**: No\n\n##### `-o`, `--output-file` example\n\n``` language-shell\nnpx eslint -o ./test/test.html\n```\n\n#### `-f`, `--format`\n\nThis option specifies the output format for the console.\n\n- **Argument Type**: String. One of the [built-in formatters](command-line-interfaceformatters/index) or a custom formatter.\n- **Multiple Arguments**: No\n- **Default Value**: [`stylish`](command-line-interfaceformatters/index#stylish)\n\nIf you are using a custom formatter defined in a local file, you can specify the path to the custom formatter file.\n\nAn npm-installed formatter is resolved with or without `eslint-formatter-` prefix.\n\nWhen specified, the given format is output to the console. If you’d like to save that output into a file, you can do so on the command line like so:\n\n``` language-shell\n# Saves the output into the `results.txt` file.\nnpx eslint -f compact file.js > results.txt\n```\n\n##### `-f`, `--format` example\n\nUse the built-in `compact` formatter:\n\n``` language-shell\nnpx eslint --format compact file.js\n```\n\nUse a local custom formatter:\n\n``` language-shell\nnpx eslint -f ./customformat.js file.js\n```\n\nUse an npm-installed formatter:\n\n``` language-shell\nnpm install eslint-formatter-pretty\n\n# Then run one of the following commands\nnpx eslint -f pretty file.js\n# or alternatively\nnpx eslint -f eslint-formatter-pretty file.js\n```\n\n#### `--color` and `--no-color`\n\nThese options force the enabling/disabling of colorized output.\n\n- **Argument Type**: No argument.\n\nYou can use these options to override the default behavior, which is to enable colorized output unless no TTY is detected, such as when piping `eslint` through `cat` or `less`.\n\n##### `--color` and `--no-color` example\n\n``` language-shell\nnpx eslint --color file.js | cat\nnpx eslint --no-color file.js\n```\n\n### Inline Configuration Comments\n\n#### `--no-inline-config`\n\nThis option prevents inline comments like `/*eslint-disable*/` or `/*global foo*/` from having any effect.\n\n- **Argument Type**: No argument.\n\nThis allows you to set an ESLint config without files modifying it. All inline config comments are ignored, such as:\n\n- `/*eslint-disable*/`\n- `/*eslint-enable*/`\n- `/*global*/`\n- `/*eslint*/`\n- `/*eslint-env*/`\n- `// eslint-disable-line`\n- `// eslint-disable-next-line`\n\n##### `--no-inline-config` example\n\n``` language-shell\nnpx eslint --no-inline-config file.js\n```\n\n#### `--report-unused-disable-directives`\n\nThis option causes ESLint to report directive comments like `// eslint-disable-line` when no errors would have been reported on that line anyway.\n\n- **Argument Type**: No argument.\n\nThis can be useful to prevent future errors from unexpectedly being suppressed, by cleaning up old `eslint-disable` and `eslint-enable` comments which are no longer applicable.\n\nWarning\n\nWhen using this option, it is possible that new errors start being reported whenever ESLint or custom rules are upgraded.\n\nFor example, suppose a rule has a bug that causes it to report a false positive, and an `eslint-disable` comment is added to suppress the incorrect report. If the bug is then fixed in a patch release of ESLint, the `eslint-disable` comment becomes unused since ESLint is no longer generating an incorrect report. This results in a new reported error for the unused directive if the `--report-unused-disable-directives` option is used.\n\n##### `--report-unused-disable-directives` example\n\n``` language-shell\nnpx eslint --report-unused-disable-directives file.js\n```\n\n#### `--report-unused-disable-directives-severity`\n\nSame as [`--report-unused-disable-directives`](#--report-unused-disable-directives), but allows you to specify the severity level (`error`, `warn`, `off`) of the reported errors. Only one of these two options can be used at a time.\n\n- **Argument Type**: String. One of the following values:\n  1.  `off` (or `0`)\n  2.  `warn` (or `1`)\n  3.  `error` (or `2`)\n- **Multiple Arguments**: No\n- **Default Value**: By default, `linterOptions.reportUnusedDisableDirectives` configuration setting is used.\n\n##### `--report-unused-disable-directives-severity` example\n\n``` language-shell\nnpx eslint --report-unused-disable-directives-severity warn file.js\n```\n\n### Caching\n\n#### `--cache`\n\nStore the info about processed files in order to only operate on the changed ones. Enabling this option can dramatically improve ESLint’s run time performance by ensuring that only changed files are linted. The cache is stored in `.eslintcache` by default.\n\n- **Argument Type**: No argument.\n\nIf you run ESLint with `--cache` and then run ESLint without `--cache`, the `.eslintcache` file will be deleted. This is necessary because the results of the lint might change and make `.eslintcache` invalid. If you want to control when the cache file is deleted, then use `--cache-location` to specify an alternate location for the cache file.\n\nAutofixed files are not placed in the cache. Subsequent linting that does not trigger an autofix will place it in the cache.\n\n##### `--cache` example\n\n``` language-shell\nnpx eslint --cache file.js\n```\n\n#### `--cache-file`\n\n**Deprecated**: Use `--cache-location` instead.\n\nPath to the cache file. If none specified `.eslintcache` is used. The file is created in the directory where the `eslint` command is executed.\n\n#### `--cache-location`\n\nSpecify the path to the cache location. Can be a file or a directory.\n\n- **Argument Type**: String. Path to file or directory. If a directory is specified, a cache file is created inside the specified folder. The name of the file is based on the hash of the current working directory, e.g.: `.cache_hashOfCWD`.\n- **Multiple Arguments**: No\n- **Default Value**: If no location is specified, `.eslintcache` is used. The file is created in the directory where the `eslint` command is executed.\n\nIf the directory for the cache does not exist make sure you add a trailing `/` on \\*nix systems or `\\` on Windows. Otherwise, the path is assumed to be a file.\n\n##### `--cache-location` example\n\n``` language-shell\nnpx eslint \"src/**/*.js\" --cache --cache-location \"/Users/user/.eslintcache/\"\n```\n\n#### `--cache-strategy`\n\nStrategy for the cache to use for detecting changed files.\n\n- **Argument Type**: String. One of the following values:\n  1.  `metadata`\n  2.  `content`\n- **Multiple Arguments**: No\n- **Default Value**: `metadata`\n\nThe `content` strategy can be useful in cases where the modification time of your files changes even if their contents have not. For example, this can happen during git operations like `git clone` because git does not track file modification time.\n\n##### `--cache-strategy` example\n\n``` language-shell\nnpx eslint \"src/**/*.js\" --cache --cache-strategy content\n```\n\n### Miscellaneous\n\n#### `--init`\n\nThis option runs `npm init @eslint/config` to start the config initialization wizard. It’s designed to help new users quickly create an `.eslintrc` file by answering a few questions. When you use this flag, the CLI does not perform linting.\n\n- **Argument Type**: No argument.\n\nThe resulting configuration file is created in the current directory.\n\n##### `--init` example\n\n``` language-shell\nnpx eslint --init\n```\n\n#### `--env-info`\n\nThis option outputs information about the execution environment, including the version of Node.js, npm, and local and global installations of ESLint.\n\n- **Argument Type**: No argument.\n\nThe ESLint team may ask for this information to help solve bugs. When you use this flag, the CLI does not perform linting.\n\n##### `--env-info` example\n\n``` language-shell\nnpx eslint --env-info\n```\n\n#### `--no-error-on-unmatched-pattern`\n\nThis option prevents errors when a quoted glob pattern or `--ext` is unmatched. This does not prevent errors when your shell can’t match a glob.\n\n- **Argument Type**: No argument.\n\n##### `--no-error-on-unmatched-pattern` example\n\n``` language-shell\nnpx eslint --no-error-on-unmatched-pattern --ext .ts \"lib/*\"\n```\n\n#### `--exit-on-fatal-error`\n\nThis option causes ESLint to exit with exit code 2 if one or more fatal parsing errors occur. Without this option, ESLint reports fatal parsing errors as rule violations.\n\n- **Argument Type**: No argument.\n\n##### `--exit-on-fatal-error` example\n\n``` language-shell\nnpx eslint --exit-on-fatal-error file.js\n```\n\n#### `--no-warn-ignored`\n\n**Flat Config Mode Only.** This option suppresses both `File ignored by default` and `File ignored because of a matching ignore pattern` warnings when an ignored filename is passed explicitly. It is useful when paired with `--max-warnings 0` as it will prevent exit code 1 due to the aforementioned warning.\n\n- **Argument Type**: No argument.\n\n##### `--no-warn-ignored` example\n\n``` language-shell\nnpx eslint --no-warn-ignored --max-warnings 0 ignored-file.js\n```\n\n#### `--debug`\n\nThis option outputs debugging information to the console. Add this flag to an ESLint command line invocation in order to get extra debugging information while the command runs.\n\n- **Argument Type**: No argument.\n\nThis information is useful when you’re seeing a problem and having a hard time pinpointing it. The ESLint team may ask for this debugging information to help solve bugs.\n\n##### `--debug` example\n\n``` language-shell\nnpx eslint --debug test.js\n```\n\n#### `-h`, `--help`\n\nThis option outputs the help menu, displaying all of the available options. All other options are ignored when this is present. When you use this flag, the CLI does not perform linting.\n\n- **Argument Type**: No argument.\n\n##### `-h`, `--help` example\n\n``` language-shell\nnpx eslint --help\n```\n\n#### `-v`, `--version`\n\nThis option outputs the current ESLint version onto the console. All other options are ignored when this is present. When you use this flag, the CLI does not perform linting.\n\n- **Argument Type**: No argument.\n\n##### `-v`, `--version` example\n\n``` language-shell\nnpx eslint --version\n```\n\n#### `--print-config`\n\nThis option outputs the configuration to be used for the file passed. When present, no linting is performed and only config-related options are valid. When you use this flag, the CLI does not perform linting.\n\n- **Argument Type**: String. Path to file.\n- **Multiple Arguments**: No\n\n##### `--print-config` example\n\n``` language-shell\nnpx eslint --print-config file.js\n```\n\n## Exit Codes\n\nWhen linting files, ESLint exits with one of the following exit codes:\n\n- `0`: Linting was successful and there are no linting errors. If the [`--max-warnings`](#--max-warnings) flag is set to `n`, the number of linting warnings is at most `n`.\n- `1`: Linting was successful and there is at least one linting error, or there are more linting warnings than allowed by the `--max-warnings` option.\n- `2`: Linting was unsuccessful due to a configuration problem or an internal error.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/command-line-interface](https://eslint.org/docs/latest/use/command-line-interface)"
- name: complexity
  id: rules/complexity
  summary: Cyclomatic complexity measures the number of linearly independent paths through a program’s source code
  description: "# complexity\n\nEnforce a maximum cyclomatic complexity allowed in a program\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nCyclomatic complexity measures the number of linearly independent paths through a program’s source code. This rule allows setting a cyclomatic complexity threshold.\n\n``` language-js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXBsZXhpdHk6IFtcImVycm9yXCIsIDJdKi9cblxuZnVuY3Rpb24gYSh4KSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfSBlbHNlIGlmIChmYWxzZSkge1xuICAgICAgICByZXR1cm4geCsxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA0OyAvLyAzcmQgcGF0aFxuICAgIH1cbn1cblxuZnVuY3Rpb24gYigpIHtcbiAgICBmb28gfHw9IDE7XG4gICAgYmFyICYmPSAxO1xufSJ9)\n\n``` language-js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n\nfunction b() {\n    foo ||= 1;\n    bar &&= 1;\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXBsZXhpdHk6IFtcImVycm9yXCIsIDJdKi9cblxuZnVuY3Rpb24gYSh4KSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiKCkge1xuICAgIGZvbyB8fD0gMTtcbn0ifQ==)\n\n``` language-js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n\nfunction b() {\n    foo ||= 1;\n}\n```\n\nClass field initializers and class static blocks are implicit functions. Therefore, their complexity is calculated separately for each initializer and each static block, and it doesn’t contribute to the complexity of the enclosing code.\n\nExamples of additional **incorrect** code for a maximum of 2:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXBsZXhpdHk6IFtcImVycm9yXCIsIDJdKi9cblxuY2xhc3MgQyB7XG4gICAgeCA9IGEgfHwgYiB8fCBjOyAvLyB0aGlzIGluaXRpYWxpemVyIGhhcyBjb21wbGV4aXR5ID0gM1xufVxuXG5jbGFzcyBEIHsgLy8gdGhpcyBzdGF0aWMgYmxvY2sgaGFzIGNvbXBsZXhpdHkgPSAzXG4gICAgc3RhdGljIHtcbiAgICAgICAgaWYgKGZvbykge1xuICAgICAgICAgICAgYmFyID0gYmF6IHx8IHF1eDtcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint complexity: [\"error\", 2]*/\n\nclass C {\n    x = a || b || c; // this initializer has complexity = 3\n}\n\nclass D { // this static block has complexity = 3\n    static {\n        if (foo) {\n            bar = baz || qux;\n        }\n    }\n}\n```\n\nExamples of additional **correct** code for a maximum of 2:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXBsZXhpdHk6IFtcImVycm9yXCIsIDJdKi9cblxuZnVuY3Rpb24gZm9vKCkgeyAvLyB0aGlzIGZ1bmN0aW9uIGhhcyBjb21wbGV4aXR5ID0gMVxuICAgIGNsYXNzIEMge1xuICAgICAgICB4ID0gYSArIGI7IC8vIHRoaXMgaW5pdGlhbGl6ZXIgaGFzIGNvbXBsZXhpdHkgPSAxXG4gICAgICAgIHkgPSBjIHx8IGQ7IC8vIHRoaXMgaW5pdGlhbGl6ZXIgaGFzIGNvbXBsZXhpdHkgPSAyXG4gICAgICAgIHogPSBlICYmIGY7IC8vIHRoaXMgaW5pdGlhbGl6ZXIgaGFzIGNvbXBsZXhpdHkgPSAyXG5cbiAgICAgICAgc3RhdGljIHAgPSBnIHx8IGg7IC8vIHRoaXMgaW5pdGlhbGl6ZXIgaGFzIGNvbXBsZXhpdHkgPSAyXG4gICAgICAgIHN0YXRpYyBxID0gaSA/IGogOiBrOyAvLyB0aGlzIGluaXRpYWxpemVyIGhhcyBjb21wbGV4aXR5ID0gMlxuXG4gICAgICAgIHN0YXRpYyB7IC8vIHRoaXMgc3RhdGljIGJsb2NrIGhhcyBjb21wbGV4aXR5ID0gMlxuICAgICAgICAgICAgaWYgKGZvbykge1xuICAgICAgICAgICAgICAgIGJheiA9IGJhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyB7IC8vIHRoaXMgc3RhdGljIGJsb2NrIGhhcyBjb21wbGV4aXR5ID0gMlxuICAgICAgICAgICAgcXV4ID0gYmF6IHx8IHF1dXg7XG4gICAgICAgIH1cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction foo() { // this function has complexity = 1\n    class C {\n        x = a + b; // this initializer has complexity = 1\n        y = c || d; // this initializer has complexity = 2\n        z = e && f; // this initializer has complexity = 2\n\n        static p = g || h; // this initializer has complexity = 2\n        static q = i ? j : k; // this initializer has complexity = 2\n\n        static { // this static block has complexity = 2\n            if (foo) {\n                baz = bar;\n            }\n        }\n\n        static { // this static block has complexity = 2\n            qux = baz || quux;\n        }\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n``` language-json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n``` language-json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can’t determine an appropriate complexity limit for your code, then it’s best to disable this rule.\n\n## Related Rules\n\n- [max-depth](max-depth)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[Cyclomatic complexity - Wikipedia](https://en.wikipedia.org/wiki/Cyclomatic_complexity)  \n\n[Complexity Analysis of JavaScript Code](https://ariya.io/2012/12/complexity-analysis-of-javascript-code)  \n\n[Complexity for JavaScript](https://craftsmanshipforsoftware.com/2015/05/25/complexity-for-javascript/)  \n\n[About complexity \\| JSComplexity.org](https://web.archive.org/web/20160808115119/http://jscomplexity.org/complexity)  \n\n[Complexity has no default · Issue \\#4808 · eslint/eslint](https://github.com/eslint/eslint/issues/4808#issuecomment-167795140)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/complexity.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/complexity.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/complexity](https://eslint.org/docs/latest/rules/complexity)"
- name: computed-property-spacing
  id: rules/computed-property-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# computed-property-spacing\n\nEnforce consistent spacing inside computed property brackets\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](computed-property-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [always](#always)\n        1.  [enforceForClassMembers](#enforceforclassmembers)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/computed-property-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhile formatting preferences are very personal, a number of style guides require or disallow spaces between computed properties in the following situations:\n\n``` language-js\n/*eslint-env es6*/\n\nvar obj = { prop: \"value\" };\nvar a = \"prop\";\nvar x = obj[a]; // computed property in object member expression\n\nvar a = \"prop\";\nvar obj = {\n  [a]: \"value\" // computed property key in object literal (ECMAScript 6)\n};\n\nvar obj = { prop: \"value\" };\nvar a = \"prop\";\nvar { [a]: x } = obj; // computed property key in object destructuring pattern (ECMAScript 6)\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside computed property brackets.\n\nIt either requires or disallows spaces between the brackets and the values inside of them. This rule does not apply to brackets that are separated from the adjacent value by a newline.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"never\"` (default) disallows spaces inside computed property brackets\n- `\"always\"` requires one or more spaces inside computed property brackets\n\nObject option:\n\n- `\"enforceForClassMembers\": true` (default) additionally applies this rule to class members.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbm9ialtmb28gXVxub2JqWyAnZm9vJ11cbnZhciB4ID0ge1sgYiBdOiBhfVxub2JqW2Zvb1sgYmFyIF1dXG5cbmNvbnN0IHsgWyBhIF06IHNvbWVQcm9wIH0gPSBvYmo7XG4oeyBbIGIgXTogYW5vdGhlclByb3AgfSA9IGFub3RoZXJPYmopOyJ9)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n\nconst { [ a ]: someProp } = obj;\n({ [ b ]: anotherProp } = anotherObj);\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbm9ialtmb29dXG5vYmpbJ2ZvbyddXG52YXIgeCA9IHtbYl06IGF9XG5vYmpbZm9vW2Jhcl1dXG5cbmNvbnN0IHsgW2FdOiBzb21lUHJvcCB9ID0gb2JqO1xuKHsgW2JdOiBhbm90aGVyUHJvcCB9ID0gYW5vdGhlck9iaik7In0=)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nobj[foo]\nobj['foo']\nvar x = {[b]: a}\nobj[foo[bar]]\n\nconst { [a]: someProp } = obj;\n({ [b]: anotherProp } = anotherObj);\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5vYmpbZm9vXVxudmFyIHggPSB7W2JdOiBhfVxub2JqWyBmb29dXG5vYmpbJ2ZvbycgXVxub2JqW2Zvb1sgYmFyIF1dXG52YXIgeCA9IHtbIGJdOiBhfVxuY29uc3QgeyBbYV06IHNvbWVQcm9wIH0gPSBvYmo7XG4oeyBbYiBdOiBhbm90aGVyUHJvcCB9ID0gYW5vdGhlck9iaik7In0=)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nobj[foo]\nvar x = {[b]: a}\nobj[ foo]\nobj['foo' ]\nobj[foo[ bar ]]\nvar x = {[ b]: a}\nconst { [a]: someProp } = obj;\n({ [b ]: anotherProp } = anotherObj);\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5vYmpbIGZvbyBdXG5vYmpbICdmb28nIF1cbnZhciB4ID0ge1sgYiBdOiBhfVxub2JqWyBmb29bIGJhciBdIF1cbmNvbnN0IHsgWyBhIF06IHNvbWVQcm9wIH0gPSBvYmo7XG4oeyBbIGIgXTogYW5vdGhlclByb3AgfSA9IGFub3RoZXJPYmopOyJ9)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nobj[ foo ]\nobj[ 'foo' ]\nvar x = {[ b ]: a}\nobj[ foo[ bar ] ]\nconst { [ a ]: someProp } = obj;\n({ [ b ]: anotherProp } = anotherObj);\n```\n\n#### enforceForClassMembers\n\nWith `enforceForClassMembers` set to `true` (default), the rule also disallows/enforces spaces inside of computed keys of class methods, getters and setters.\n\nExamples of **incorrect** code for this rule with `\"never\"` and `{ \"enforceForClassMembers\": true }` (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY2xhc3MgRm9vIHtcbiAgW2EgXSgpIHt9XG4gIGdldCBbYiBdKCkge31cbiAgc2V0IFtiIF0odmFsdWUpIHt9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgWyBhXSgpe31cbiAgc3RhdGljIFsgYl0oKSB7fVxuICBzdGF0aWMgZ2V0IFsgYyBdKCkge31cbiAgc3RhdGljIHNldCBbIGMgXSh2YWx1ZSkge31cbn0ifQ==)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"never\", { \"enforceForClassMembers\": true }]*/\n/*eslint-env es6*/\n\nclass Foo {\n  [a ]() {}\n  get [b ]() {}\n  set [b ](value) {}\n}\n\nconst Bar = class {\n  [ a](){}\n  static [ b]() {}\n  static get [ c ]() {}\n  static set [ c ](value) {}\n}\n```\n\nExamples of **correct** code for this rule with `\"never\"` and `{ \"enforceForClassMembers\": true }` (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY2xhc3MgRm9vIHtcbiAgW2FdKCkge31cbiAgZ2V0IFtiXSgpIHt9XG4gIHNldCBbYl0odmFsdWUpIHt9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgW2FdKCl7fVxuICBzdGF0aWMgW2JdKCkge31cbiAgc3RhdGljIGdldCBbY10oKSB7fVxuICBzdGF0aWMgc2V0IFtjXSh2YWx1ZSkge31cbn0ifQ==)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"never\", { \"enforceForClassMembers\": true }]*/\n/*eslint-env es6*/\n\nclass Foo {\n  [a]() {}\n  get [b]() {}\n  set [b](value) {}\n}\n\nconst Bar = class {\n  [a](){}\n  static [b]() {}\n  static get [c]() {}\n  static set [c](value) {}\n}\n```\n\nExamples of **correct** code for this rule with `\"never\"` and `{ \"enforceForClassMembers\": false }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbXB1dGVkLXByb3BlcnR5LXNwYWNpbmc6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImVuZm9yY2VGb3JDbGFzc01lbWJlcnNcIjogZmFsc2UgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEZvbyB7XG4gIFthIF0oKSB7fVxuICBnZXQgW2IgXSgpIHt9XG4gIHNldCBbYiBdKHZhbHVlKSB7fVxufVxuXG5jb25zdCBCYXIgPSBjbGFzcyB7XG4gIFsgYV0oKXt9XG4gIHN0YXRpYyBbIGJdKCkge31cbiAgc3RhdGljIGdldCBbIGMgXSgpIHt9XG4gIHN0YXRpYyBzZXQgWyBjIF0odmFsdWUpIHt9XG59In0=)\n\n``` language-js\n/*eslint computed-property-spacing: [\"error\", \"never\", { \"enforceForClassMembers\": false }]*/\n/*eslint-env es6*/\n\nclass Foo {\n  [a ]() {}\n  get [b ]() {}\n  set [b ](value) {}\n}\n\nconst Bar = class {\n  [ a](){}\n  static [ b]() {}\n  static get [ c ]() {}\n  static set [ c ](value) {}\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of computed properties.\n\n## Related Rules\n\n- [array-bracket-spacing](array-bracket-spacing)\n- [comma-spacing](comma-spacing)\n- [space-in-parens](space-in-parens)\n\n## Version\n\nThis rule was introduced in ESLint v0.23.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/computed-property-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/computed-property-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/computed-property-spacing](https://eslint.org/docs/latest/rules/computed-property-spacing)"
- name: Configuration Files
  id: use/configure/configuration-files
  summary: We are transitioning to a new config system in ESLint v9.0.0
  description: "# Configuration Files\n\n## Table of Contents\n\n1.  [Configuration File Formats](#configuration-file-formats)\n2.  [Using Configuration Files](#using-configuration-files)\n    1.  [Comments in configuration files](#comments-in-configuration-files)\n3.  [Adding Shared Settings](#adding-shared-settings)\n4.  [Cascading and Hierarchy](#cascading-and-hierarchy)\n5.  [Extending Configuration Files](#extending-configuration-files)\n    1.  [Using a shareable configuration package](#using-a-shareable-configuration-package)\n    2.  [Using eslint:recommended](#using-eslintrecommended)\n    3.  [Using a configuration from a plugin](#using-a-configuration-from-a-plugin)\n    4.  [Using a configuration file](#using-a-configuration-file)\n    5.  [Using \"eslint:all\"](#using-eslintall)\n6.  [Configuration Based on Glob Patterns](#configuration-based-on-glob-patterns)\n    1.  [How do overrides work?](#how-do-overrides-work)\n    2.  [Relative glob patterns](#relative-glob-patterns)\n    3.  [Specifying target files to lint](#specifying-target-files-to-lint)\n7.  [Personal Configuration Files (deprecated)](#personal-configuration-files-deprecated)\n    1.  [How does ESLint find personal configuration files?](#how-does-eslint-find-personal-configuration-files)\n    2.  [How do personal configuration files behave?](#how-do-personal-configuration-files-behave)\n\nWarning\n\nWe are transitioning to a new config system in ESLint v9.0.0. The config system shared on this page is currently the default but will be deprecated in v9.0.0. You can opt-in to the new config system by following the instructions in the [documentation](configuration-filesconfiguration-files-new).\n\nYou can put your ESLint project configuration in a configuration file. You can include built-in rules, how you want them enforced, plugins with custom rules, shareable configurations, which files you want rules to apply to, and more.\n\n## Configuration File Formats\n\nESLint supports configuration files in several formats:\n\n- **JavaScript** - use `.eslintrc.js` and export an object containing your configuration.\n- **JavaScript (ESM)** - use `.eslintrc.cjs` when running ESLint in JavaScript packages that specify `\"type\":\"module\"` in their `package.json`. Note that ESLint does not support ESM configuration at this time.\n- **YAML** - use `.eslintrc.yaml` or `.eslintrc.yml` to define the configuration structure.\n- **JSON** - use `.eslintrc.json` to define the configuration structure. ESLint’s JSON files also allow JavaScript-style comments.\n- **package.json** - create an `eslintConfig` property in your `package.json` file and define your configuration there.\n\nIf there are multiple configuration files in the same directory, ESLint only uses one. The priority order is as follows:\n\n1.  `.eslintrc.js`\n2.  `.eslintrc.cjs`\n3.  `.eslintrc.yaml`\n4.  `.eslintrc.yml`\n5.  `.eslintrc.json`\n6.  `package.json`\n\n## Using Configuration Files\n\nThere are two ways to use configuration files.\n\nThe first way to use configuration files is via `.eslintrc.*` and `package.json` files. ESLint automatically looks for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (`/`), the home directory of the current user (`~/`), or when `root: true` is specified. See [Cascading and Hierarchy](#cascading-and-hierarchy) below for more details on this. Configuration files can be useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.\n\nThe second way to use configuration files is to save the file wherever you would like and pass its location to the CLI using the `--config` option, such as:\n\n``` language-shell\neslint -c myconfig.json myfiletotest.js\n```\n\nIf you are using one configuration file and want ESLint to ignore any `.eslintrc.*` files, make sure to use [`--no-eslintrc`](configuration-files../command-line-interface#--no-eslintrc) along with the [`--config`](use/command-line-interface#-c---config) flag.\n\nHere’s an example JSON configuration file that uses the `typescript-eslint` parser to support TypeScript syntax:\n\n``` language-json\n{\n    \"root\": true,\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:@typescript-eslint/recommended\"\n    ],\n    \"parser\": \"@typescript-eslint/parser\",\n    \"parserOptions\": { \"project\": [\"./tsconfig.json\"] },\n    \"plugins\": [\n        \"@typescript-eslint\"\n    ],\n    \"rules\": {\n        \"@typescript-eslint/strict-boolean-expressions\": [\n            2,\n            {\n                \"allowString\" : false,\n                \"allowNumber\" : false\n            }\n        ]\n    },\n    \"ignorePatterns\": [\"src/**/*.test.ts\", \"src/frontend/generated/*\"]\n}\n```\n\n### Comments in configuration files\n\nBoth the JSON and YAML configuration file formats support comments (`package.json` files should not include them). You can use JavaScript-style comments for JSON files and YAML-style comments for YAML files. ESLint safely ignores comments in configuration files. This allows your configuration files to be more human-friendly.\n\nFor JavaScript-style comments:\n\n``` language-js\n{\n    \"env\": {\n        \"browser\": true\n    },\n    \"rules\": {\n        // Override our default settings just for this directory\n        \"eqeqeq\": \"warn\",\n        \"strict\": \"off\"\n    }\n}\n```\n\nFor YAML-style comments:\n\n``` language-yaml\nenv:\n    browser: true\nrules:\n    # Override default settings\n    eqeqeq: warn\n    strict: off\n```\n\n## Adding Shared Settings\n\nESLint supports adding shared settings into configuration files. Plugins use `settings` to specify the information that should be shared across all of its rules. You can add a `settings` object to the ESLint configuration file and it is supplied to every executed rule. This may be useful if you are adding custom rules and want them to have access to the same information and be easily configurable.\n\nIn JSON:\n\n``` language-json\n{\n    \"settings\": {\n        \"sharedData\": \"Hello\"\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\n  settings:\n    sharedData: \"Hello\"\n```\n\n## Cascading and Hierarchy\n\nWhen using `.eslintrc.*` and `package.json` files for configuration, you can take advantage of configuration cascading. Suppose your project has the following structure:\n\n``` language-text\nyour-project\n├── .eslintrc.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc.json\n  └── test.js\n```\n\nThe configuration cascade works based on the location of the file being linted. If there is an `.eslintrc` file in the same directory as the file being linted, then that configuration takes precedence. ESLint then searches up the directory structure, merging any `.eslintrc` files it finds along the way until reaching either an `.eslintrc` file with `root: true` or the root directory.\n\nIn the same way, if there is a `package.json` file in the root directory with an `eslintConfig` field, the configuration it describes is applied to all subdirectories beneath it. However, the configuration described by the `.eslintrc` file in the `tests/` directory overrides conflicting specifications.\n\n``` language-text\nyour-project\n├── package.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc.json\n  └── test.js\n```\n\nIf there is an `.eslintrc` and a `package.json` file found in the same directory, `.eslintrc` takes priority and the `package.json` file is not used.\n\nBy default, ESLint looks for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place `\"root\": true` inside the `.eslintrc.*` file or `eslintConfig` field of the `package.json` file or in the `.eslintrc.*` file at your project’s root level. ESLint stops looking in parent folders once it finds a configuration with `\"root\": true`.\n\n``` language-js\n{\n    \"root\": true\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\n  root: true\n```\n\nFor example, consider `projectA` which has `\"root\": true` set in the `.eslintrc` file in the `lib/` directory. In this case, while linting `main.js`, the configurations within `lib/` are used, but the `.eslintrc` file in `projectA/` is not.\n\n``` language-text\nhome\n└── user\n    └── projectA\n        ├── .eslintrc.json  <- Not used\n        └── lib\n            ├── .eslintrc.json  <- { \"root\": true }\n            └── main.js\n```\n\nThe complete configuration hierarchy, from highest to lowest precedence, is as follows:\n\n1.  Inline configuration\n    1.  `/*eslint-disable*/` and `/*eslint-enable*/`\n    2.  `/*global*/`\n    3.  `/*eslint*/`\n    4.  `/*eslint-env*/`\n2.  Command line options (or CLIEngine equivalents):\n    1.  `--global`\n    2.  `--rule`\n    3.  `--env`\n    4.  `-c`, `--config`\n3.  Project-level configuration:\n    1.  `.eslintrc.*` or `package.json` file in the same directory as the linted file\n    2.  Continue searching for `.eslintrc.*` and `package.json` files in ancestor directories up to and including the root directory or until a config with `\"root\": true` is found.\n\nPlease note that the [home directory of the current user on your preferred operating system](https://nodejs.org/api/os.html#os_os_homedir) (`~/`) is also considered a root directory in this context and searching for configuration files stops there as well. And with the [removal of support for Personal Configuration Files](configuration-filesconfiguration-files#personal-configuration-files-deprecated) from the 8.0.0 release forward, configuration files present in that directory are ignored.\n\n## Extending Configuration Files\n\nA configuration file, once extended, can inherit all the traits of another configuration file (including rules, plugins, and language options) and modify all the options. As a result, there are three configurations, as defined below:\n\n- Base config: the configuration that is extended.\n- Derived config: the configuration that extends the base configuration.\n- Resulting actual config: the result of merging the derived configuration into the base configuration.\n\nThe `extends` property value is either:\n\n- a string that specifies a configuration (either a path to a config file, the name of a shareable config, `eslint:recommended`, or `eslint:all`)\n- an array of strings where each additional configuration extends the preceding configurations\n\nESLint extends configurations recursively, so a base configuration can also have an `extends` property. Relative paths and shareable config names in an `extends` property are resolved from the location of the config file where they appear.\n\nThe `eslint-config-` prefix can be omitted from the configuration name. For example, `airbnb` resolves as `eslint-config-airbnb`.\n\nThe `rules` property can do any of the following to extend (or override) the set of rules:\n\n- enable additional rules\n- change an inherited rule’s severity without changing its options:\n  - Base config: `\"eqeqeq\": [\"error\", \"allow-null\"]`\n  - Derived config: `\"eqeqeq\": \"warn\"`\n  - Resulting actual config: `\"eqeqeq\": [\"warn\", \"allow-null\"]`\n- override options for rules from base configurations:\n  - Base config: `\"quotes\": [\"error\", \"single\", \"avoid-escape\"]`\n  - Derived config: `\"quotes\": [\"error\", \"single\"]`\n  - Resulting actual config: `\"quotes\": [\"error\", \"single\"]`\n- override options for rules given as object from base configurations:\n  - Base config: `\"max-lines\": [\"error\", { \"max\": 200, \"skipBlankLines\": true, \"skipComments\": true }]`\n  - Derived config: `\"max-lines\": [\"error\", { \"max\": 100 }]`\n  - Resulting actual config: `\"max-lines\": [\"error\", { \"max\": 100 }]` where `skipBlankLines` and `skipComments` default to `false`\n\n### Using a shareable configuration package\n\nA [sharable configuration](extend/shareable-configs) is an npm package that exports a configuration object. Make sure that you have installed the package in your project root directory, so that ESLint can require it.\n\nThe `extends` property value can omit the `eslint-config-` prefix of the package name.\n\nThe `npm init @eslint/config` command can create a configuration so you can extend a popular style guide (for example, `eslint-config-standard`).\n\nExample of a configuration file in YAML format:\n\n``` language-yaml\nextends: standard\nrules:\n  comma-dangle:\n    - error\n    - always\n  no-empty: warn\n```\n\n### Using `eslint:recommended`\n\nUsing `\"eslint:recommended\"` in the `extends` property enables a subset of core rules that report common problems (these rules are identified with a checkmark (recommended) on the [rules page](rules/index)).\n\nHere’s an example of extending `eslint:recommended` and overriding some of the set configuration options:\n\nExample of a configuration file in JavaScript format:\n\n``` language-js\nmodule.exports = {\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        // enable additional rules\n        \"indent\": [\"error\", 4],\n        \"linebreak-style\": [\"error\", \"unix\"],\n        \"quotes\": [\"error\", \"double\"],\n        \"semi\": [\"error\", \"always\"],\n\n        // override configuration set by extending \"eslint:recommended\"\n        \"no-empty\": \"warn\",\n        \"no-cond-assign\": [\"error\", \"always\"],\n\n        // disable rules from base configurations\n         \"for-direction\": \"off\",\n    }\n}\n```\n\n### Using a configuration from a plugin\n\nA [plugin](extend/plugins) is an npm package that can add various extensions to ESLint. A plugin can perform numerous functions, including but not limited to adding new rules and exporting [shareable configurations](extend/plugins#configs-in-plugins). Make sure the package has been installed in a directory where ESLint can require it.\n\nThe `plugins` [property value](configuration-files./plugins#configure-plugins) can omit the `eslint-plugin-` prefix of the package name.\n\nThe `extends` property value can consist of:\n\n- `plugin:`\n- the package name (from which you can omit the prefix, for example, `react` is short for `eslint-plugin-react`)\n- `/`\n- the configuration name (for example, `recommended`)\n\nExample of a configuration file in JSON format:\n\n``` language-json\n{\n    \"plugins\": [\n        \"react\"\n    ],\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\"\n    ],\n    \"rules\": {\n       \"react/no-set-state\": \"off\"\n    }\n}\n```\n\n### Using a configuration file\n\nThe `extends` property value can be an absolute or relative path to a base [configuration file](#using-configuration-files). ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.\n\nExample of a configuration file in JSON format:\n\n``` language-json\n{\n    \"extends\": [\n        \"./node_modules/coding-standard/eslintDefaults.js\",\n        \"./node_modules/coding-standard/.eslintrc-es6\",\n        \"./node_modules/coding-standard/.eslintrc-jsx\"\n    ],\n    \"rules\": {\n        \"eqeqeq\": \"warn\"\n    }\n}\n```\n\n### Using `\"eslint:all\"`\n\nThe `extends` property value can be `\"eslint:all\"` to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.\n\n**Important:** This configuration is **not recommended for production use** because it changes with every minor and major version of ESLint. Use it at your own risk.\n\nYou might enable all core rules as a shortcut to explore rules and options while you decide on the configuration for a project, especially if you rarely override options or disable rules. The default options for rules are not endorsements by ESLint (for example, the default option for the [`quotes`](rules/quotes) rule does not mean double quotes are better than single quotes).\n\nIf your configuration extends `eslint:all`, after you upgrade to a newer major or minor version of ESLint, review the reported problems before you use the `--fix` option on the [command line](configuration-files../command-line-interface#--fix), so you know if a new fixable rule will make changes to the code.\n\nExample of a configuration file in JavaScript format:\n\n``` language-js\nmodule.exports = {\n    \"extends\": \"eslint:all\",\n    \"rules\": {\n        // override default options\n        \"comma-dangle\": [\"error\", \"always\"],\n        \"indent\": [\"error\", 2],\n        \"no-cond-assign\": [\"error\", \"always\"],\n\n        // disable now, but enable in the future\n        \"one-var\": \"off\", // [\"error\", \"never\"]\n\n        // disable\n        \"init-declarations\": \"off\",\n        \"no-console\": \"off\",\n        \"no-inline-comments\": \"off\",\n    }\n}\n```\n\n## Configuration Based on Glob Patterns\n\n**v4.1.0+.** Sometimes a more fine-controlled configuration is necessary, like if the configuration for files within the same directory has to be different. In this case, you can provide configurations under the `overrides` key that only apply to files that match specific glob patterns, using the same format you would pass on the command line (e.g., `app/**/*.test.js`).\n\nGlob patterns in overrides use [minimatch syntax](https://github.com/isaacs/minimatch).\n\n### How do overrides work?\n\nIt is possible to override settings based on file glob patterns in your configuration by using the `overrides` key. An example of using the `overrides` key is as follows:\n\nIn your `.eslintrc.json`:\n\n``` language-json\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"double\"]\n  },\n\n  \"overrides\": [\n    {\n      \"files\": [\"bin/*.js\", \"lib/*.js\"],\n      \"excludedFiles\": \"*.test.js\",\n      \"rules\": {\n        \"quotes\": [\"error\", \"single\"]\n      }\n    }\n  ]\n}\n```\n\nHere is how overrides work in a configuration file:\n\n- The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path `/Users/john/workspace/any-project/.eslintrc.js` and the file you want to lint has the path `/Users/john/workspace/any-project/lib/util.js`, then the pattern provided in `.eslintrc.js` is executed against the relative path `lib/util.js`.\n- Glob pattern overrides have higher precedence than the regular configuration in the same config file. Multiple overrides within the same config are applied in order. That is, the last override block in a config file always has the highest precedence.\n- A glob specific configuration works almost the same as any other ESLint config. Override blocks can contain any configuration options that are valid in a regular config, with the exception of `root` and `ignorePatterns`.\n  - A glob specific configuration can have an `extends` setting, but the `root` property in the extended configs is ignored. The `ignorePatterns` property in the extended configs is used only for the files the glob specific configuration matched.\n  - Nested `overrides` settings are applied only if the glob patterns of both the parent config and the child config are matched. This is the same when the extended configs have an `overrides` setting.\n- Multiple glob patterns can be provided within a single override block. A file must match at least one of the supplied patterns for the configuration to apply.\n- Override blocks can also specify patterns to exclude from matches. If a file matches any of the excluded patterns, the configuration won’t apply.\n\n### Relative glob patterns\n\n``` language-txt\nproject-root\n├── app\n│   ├── lib\n│   │   ├── foo.js\n│   │   ├── fooSpec.js\n│   ├── components\n│   │   ├── bar.js\n│   │   ├── barSpec.js\n│   ├── .eslintrc.json\n├── server\n│   ├── server.js\n│   ├── serverSpec.js\n├── .eslintrc.json\n```\n\nThe config in `app/.eslintrc.json` defines the glob pattern `**/*Spec.js`. This pattern is relative to the base directory of `app/.eslintrc.json`. So, this pattern would match `app/lib/fooSpec.js` and `app/components/barSpec.js` but **NOT** `server/serverSpec.js`. If you defined the same pattern in the `.eslintrc.json` file within in the `project-root` folder, it would match all three of the `*Spec` files.\n\nIf a config is provided via the `--config` CLI option, the glob patterns in the config are relative to the current working directory rather than the base directory of the given config. For example, if `--config configs/.eslintrc.json` is present, the glob patterns in the config are relative to `.` rather than `./configs`.\n\n### Specifying target files to lint\n\nIf you specified directories with CLI (e.g., `eslint lib`), ESLint searches target files in the directory to lint. The target files are `*.js` or the files that match any of `overrides` entries (but exclude entries that are any of `files` end with `*`).\n\nIf you specified the [`--ext`](configuration-files../command-line-interface#--ext) command line option along with directories, the target files are only the files that have specified file extensions regardless of `overrides` entries.\n\n## Personal Configuration Files (deprecated)\n\n⚠️ **This feature has been deprecated**. This feature was removed in the 8.0.0 release. If you want to continue to use personal configuration files, please use the [`--config` CLI option](configuration-files../command-line-interface#-c---config). For more information regarding this decision, please see [RFC 28](https://github.com/eslint/rfcs/pull/28) and [RFC 32](https://github.com/eslint/rfcs/pull/32).\n\n`~/` refers to [the home directory of the current user on your preferred operating system](https://nodejs.org/api/os.html#os_os_homedir). The personal configuration file being referred to here is `~/.eslintrc.*` file, which is currently handled differently than other configuration files.\n\n### How does ESLint find personal configuration files?\n\nIf `eslint` could not find any configuration file in the project, `eslint` loads `~/.eslintrc.*` file.\n\nIf `eslint` could find configuration files in the project, `eslint` ignores `~/.eslintrc.*` file even if it’s in an ancestor directory of the project directory.\n\n### How do personal configuration files behave?\n\n`~/.eslintrc.*` files behave similarly to regular configuration files, with some exceptions:\n\n`~/.eslintrc.*` files load shareable configs and custom parsers from `~/node_modules/` – similarly to `require()` – in the user’s home directory. Please note that it doesn’t load global-installed packages.\n\n`~/.eslintrc.*` files load plugins from `$CWD/node_modules` by default in order to identify plugins uniquely. If you want to use plugins with `~/.eslintrc.*` files, plugins must be installed locally per project. Alternatively, you can use the [`--resolve-plugins-relative-to` CLI option](configuration-files../command-line-interface#--resolve-plugins-relative-to) to change the location from which ESLint loads plugins.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/configuration-files](https://eslint.org/docs/latest/use/configure/configuration-files)"
- name: Configuration Files (New)
  id: use/configure/configuration-files-new
  summary: This config system is feature complete but not enabled by default
  description: "# Configuration Files (New)\n\n## Table of Contents\n\n1.  [Configuration File](#configuration-file)\n2.  [Configuration Objects](#configuration-objects)\n    1.  [Specifying files and ignores](#specifying-files-and-ignores)\n        1.  [Excluding files with ignores](#excluding-files-with-ignores)\n        2.  [Globally ignoring files with ignores](#globally-ignoring-files-with-ignores)\n        3.  [Cascading configuration objects](#cascading-configuration-objects)\n    2.  [Configuring linter options](#configuring-linter-options)\n        1.  [Disabling inline configuration](#disabling-inline-configuration)\n        2.  [Reporting unused disable directives](#reporting-unused-disable-directives)\n    3.  [Configuring language options](#configuring-language-options)\n        1.  [Configuring the JavaScript version](#configuring-the-javascript-version)\n        2.  [Configuring the JavaScript source type](#configuring-the-javascript-source-type)\n        3.  [Configuring a custom parser and its options](#configuring-a-custom-parser-and-its-options)\n        4.  [Configuring global variables](#configuring-global-variables)\n    4.  [Using plugins in your configuration](#using-plugins-in-your-configuration)\n        1.  [Using plugin rules](#using-plugin-rules)\n        2.  [Using configurations included in plugins](#using-configurations-included-in-plugins)\n    5.  [Using processors](#using-processors)\n    6.  [Configuring rules](#configuring-rules)\n        1.  [Rule severities](#rule-severities)\n        2.  [Rule configuration cascade](#rule-configuration-cascade)\n    7.  [Configuring shared settings](#configuring-shared-settings)\n    8.  [Using predefined configurations](#using-predefined-configurations)\n3.  [Configuration File Resolution](#configuration-file-resolution)\n\nWarning\n\nThis config system is feature complete but not enabled by default. To opt-in, place an `eslint.config.js` file in the root of your project or set the `ESLINT_USE_FLAT_CONFIG` environment variable to `true`. To opt-out, even in the presence of an `eslint.config.js` file, set the environment variable to `false`. If you are using the API, you can use the configuration system described on this page by using the `FlatESLint` class, the `FlatRuleTester` class, or by setting `configType: \"flat\"` in the `Linter` class.\n\nYou can put your ESLint project configuration in a configuration file. You can include built-in rules, how you want them enforced, plugins with custom rules, shareable configurations, which files you want rules to apply to, and more.\n\n## Configuration File\n\nThe ESLint configuration file is named `eslint.config.js`. It should be placed in the root directory of your project and export an array of [configuration objects](#configuration-objects). Here’s an example:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: \"error\",\n            \"prefer-const\": \"error\"\n        }\n    }\n];\n```\n\nIn this example, the configuration array contains just one configuration object. The configuration object enables two rules: `semi` and `prefer-const`. These rules are applied to all of the files ESLint processes using this config file.\n\nIf your project does not specify `\"type\":\"module\"` in its `package.json` file, then `eslint.config.js` must be in CommonJS format, such as:\n\n``` language-js\nmodule.exports = [\n    {\n        rules: {\n            semi: \"error\",\n            \"prefer-const\": \"error\"\n        }\n    }\n];\n```\n\nThe configuration file can also export a promise that resolves to the configuration array. This can be useful for using ESM dependencies in CommonJS configuration files, as in this example:\n\n``` language-js\nmodule.exports = (async () => {\n\n    const someDependency = await import(\"some-esm-dependency\");\n\n    return [\n        // ... use `someDependency` here\n    ];\n\n})();\n```\n\nWarning\n\nESLint only automatically looks for a config file named `eslint.config.js` and does not look for `eslint.config.cjs` or `eslint.config.mjs`. If you’d like to specify a different config filename than the default, use the `--config` command line option.\n\n## Configuration Objects\n\nEach configuration object contains all of the information ESLint needs to execute on a set of files. Each configuration object is made up of these properties:\n\n- `files` - An array of glob patterns indicating the files that the configuration object should apply to. If not specified, the configuration object applies to all files matched by any other configuration object.\n- `ignores` - An array of glob patterns indicating the files that the configuration object should not apply to. If not specified, the configuration object applies to all files matched by `files`.\n- `languageOptions` - An object containing settings related to how JavaScript is configured for linting.\n  - `ecmaVersion` - The version of ECMAScript to support. May be any year (i.e., `2022`) or version (i.e., `5`). Set to `\"latest\"` for the most recent supported version. (default: `\"latest\"`)\n  - `sourceType` - The type of JavaScript source code. Possible values are `\"script\"` for traditional script files, `\"module\"` for ECMAScript modules (ESM), and `\"commonjs\"` for CommonJS files. (default: `\"module\"` for `.js` and `.mjs` files; `\"commonjs\"` for `.cjs` files)\n  - `globals` - An object specifying additional objects that should be added to the global scope during linting.\n  - `parser` - An object containing a `parse()` method or a `parseForESLint()` method. (default: [`espree`](https://github.com/eslint/espree))\n  - `parserOptions` - An object specifying additional options that are passed directly to the `parse()` or `parseForESLint()` method on the parser. The available options are parser-dependent.\n- `linterOptions` - An object containing settings related to the linting process.\n  - `noInlineConfig` - A Boolean value indicating if inline configuration is allowed.\n  - `reportUnusedDisableDirectives` - A severity string indicating if and how unused disable and enable directives should be tracked and reported. For legacy compatibility, `true` is equivalent to `\"warn\"` and `false` is equivalent to `\"off\"`. (default: `\"off\"`)\n- `processor` - Either an object containing `preprocess()` and `postprocess()` methods or a string indicating the name of a processor inside of a plugin (i.e., `\"pluginName/processorName\"`).\n- `plugins` - An object containing a name-value mapping of plugin names to plugin objects. When `files` is specified, these plugins are only available to the matching files.\n- `rules` - An object containing the configured rules. When `files` or `ignores` are specified, these rule configurations are only available to the matching files.\n- `settings` - An object containing name-value pairs of information that should be available to all rules.\n\n### Specifying `files` and `ignores`\n\nTip\n\nPatterns specified in `files` and `ignores` use [`minimatch`](https://www.npmjs.com/package/minimatch) syntax and are evaluated relative to the location of the `eslint.config.js` file.\n\nYou can use a combination of `files` and `ignores` to determine which files should apply the configuration object and which should not. By default, ESLint matches `**/*.js`, `**/*.cjs`, and `**/*.mjs`. Because config objects that don’t specify `files` or `ignores` apply to all files that have been matched by any other configuration object, those config objects apply to any JavaScript files passed to ESLint by default. For example:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nWith this configuration, the `semi` rule is enabled for all files that match the default files in ESLint. So if you pass `example.js` to ESLint, the `semi` rule is applied. If you pass a non-JavaScript file, like `example.txt`, the `semi` rule is not applied because there are no other configuration objects that match that filename. (ESLint outputs an error message letting you know that the file was ignored due to missing configuration.)\n\n#### Excluding files with `ignores`\n\nYou can limit which files a configuration object applies to by specifying a combination of `files` and `ignores` patterns. For example, you may want certain rules to apply only to files in your `src` directory:\n\n``` language-js\nexport default [\n    {\n        files: [\"src/**/*.js\"],\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nHere, only the JavaScript files in the `src` directory have the `semi` rule applied. If you run ESLint on files in another directory, this configuration object is skipped. By adding `ignores`, you can also remove some of the files in `src` from this configuration object:\n\n``` language-js\nexport default [\n    {\n        files: [\"src/**/*.js\"],\n        ignores: [\"**/*.config.js\"],\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nThis configuration object matches all JavaScript files in the `src` directory except those that end with `.config.js`. You can also use negation patterns in `ignores` to exclude files from the ignore patterns, such as:\n\n``` language-js\nexport default [\n    {\n        files: [\"src/**/*.js\"],\n        ignores: [\"**/*.config.js\", \"!**/eslint.config.js\"],\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nHere, the configuration object excludes files ending with `.config.js` except for `eslint.config.js`. That file still has `semi` applied.\n\nNon-global `ignores` patterns can only match file names. A pattern like `\"dir-to-exclude/\"` will not ignore anything. To ignore everything in a particular directory, a pattern like `\"dir-to-exclude/**\"` should be used instead.\n\nIf `ignores` is used without `files` and there are other keys (such as `rules`), then the configuration object applies to all files except the ones specified in `ignores`, for example:\n\n``` language-js\nexport default [\n    {\n        ignores: [\"**/*.config.js\"],\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nThis configuration object applies to all files except those ending with `.config.js`. Effectively, this is like having `files` set to `**/*`. In general, it’s a good idea to always include `files` if you are specifying `ignores`.\n\n#### Globally ignoring files with `ignores`\n\nIf `ignores` is used without any other keys in the configuration object, then the patterns act as global ignores. Here’s an example:\n\n``` language-js\nexport default [\n    {\n        ignores: [\".config/*\"]\n    }\n];\n```\n\nThis configuration specifies that all of the files in the `.config` directory should be ignored. This pattern is added after the default patterns, which are `[\"**/node_modules/\", \".git/\"]`.\n\nYou can also unignore files and directories that are ignored by the default patterns. For example, this config unignores `node_modules/mylibrary`:\n\n``` language-js\nexport default [\n    {\n        ignores: [\n            \"!node_modules/\",           // unignore `node_modules/` directory\n            \"node_modules/*\",           // ignore its content\n            \"!node_modules/mylibrary/\"  // unignore `node_modules/mylibrary` directory\n        ]\n    }\n];\n```\n\nNote that only global `ignores` patterns can match directories. `ignores` patterns that are specific to a configuration will only match file names.\n\n#### Cascading configuration objects\n\nWhen more than one configuration object matches a given filename, the configuration objects are merged with later objects overriding previous objects when there is a conflict. For example:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        languageOptions: {\n            globals: {\n                MY_CUSTOM_GLOBAL: \"readonly\"\n            }\n        }\n    },\n    {\n        files: [\"tests/**/*.js\"],\n        languageOptions: {\n            globals: {\n                it: \"readonly\",\n                describe: \"readonly\"\n            }\n        }\n    }\n];\n```\n\nUsing this configuration, all JavaScript files define a custom global object defined called `MY_CUSTOM_GLOBAL` while those JavaScript files in the `tests` directory have `it` and `describe` defined as global objects in addition to `MY_CUSTOM_GLOBAL`. For any JavaScript file in the tests directory, both configuration objects are applied, so `languageOptions.globals` are merged to create a final result.\n\n### Configuring linter options\n\nOptions specific to the linting process can be configured using the `linterOptions` object. These effect how linting proceeds and does not affect how the source code of the file is interpreted.\n\n#### Disabling inline configuration\n\nInline configuration is implemented using an `/*eslint*/` comment, such as `/*eslint semi: error*/`. You can disallow inline configuration by setting `noInlineConfig` to `true`. When enabled, all inline configuration is ignored. Here’s an example:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        linterOptions: {\n            noInlineConfig: true\n        }\n    }\n];\n```\n\n#### Reporting unused disable directives\n\nDisable and enable directives such as `/*eslint-disable*/`, `/*eslint-enable*/` and `/*eslint-disable-next-line*/` are used to disable ESLint rules around certain portions of code. As code changes, it’s possible for these directives to no longer be needed because the code has changed in such a way that the rule is no longer triggered. You can enable reporting of these unused disable directives by setting the `reportUnusedDisableDirectives` option to a severity string, as in this example:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        linterOptions: {\n            reportUnusedDisableDirectives: \"error\"\n        }\n    }\n];\n```\n\nYou can override this setting using the [`--report-unused-disable-directives`](configuration-files-new../command-line-interface#--report-unused-disable-directives) or the [`--report-unused-disable-directives-severity`](configuration-files-new../command-line-interface#--report-unused-disable-directives-severity) command line options.\n\nFor legacy compatibility, `true` is equivalent to `\"warn\"` and `false` is equivalent to `\"off\"`.\n\n### Configuring language options\n\nOptions specific to how ESLint evaluates your JavaScript code can be configured using the `languageOptions` object.\n\n#### Configuring the JavaScript version\n\nTo configure the version of JavaScript (ECMAScript) that ESLint uses to evaluate your JavaScript, use the `ecmaVersion` property. This property determines which global variables and syntax are valid in your code and can be set to the version number (such as `6`), the year number (such as `2022`), or `\"latest\"` (for the most recent version that ESLint supports). By default, `ecmaVersion` is set to `\"latest\"` and it’s recommended to keep this default unless you need to ensure that your JavaScript code is evaluated as an older version. For example, some older runtimes might only allow ECMAScript 5, in which case you can configure ESLint like this:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        languageOptions: {\n            ecmaVersion: 5\n        }\n    }\n];\n```\n\n#### Configuring the JavaScript source type\n\nESLint can evaluate your code in one of three ways:\n\n1.  ECMAScript module (ESM) - Your code has a module scope and is run in strict mode.\n2.  CommonJS - Your code has a top-level function scope and runs in non-strict mode.\n3.  Script - Your code has a shared global scope and runs in non-strict mode.\n\nYou can specify which of these modes your code is intended to run in by specifying the `sourceType` property. This property can be set to `\"module\"`, `\"commonjs\"`, or `\"script\"`. By default, `sourceType` is set to `\"module\"` for `.js` and `.mjs` files and is set to `\"commonjs\"` for `.cjs` files. Here’s an example:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        languageOptions: {\n            sourceType: \"script\"\n        }\n    }\n];\n```\n\n#### Configuring a custom parser and its options\n\nIn many cases, you can use the default parser that ESLint ships with for parsing your JavaScript code. You can optionally override the default parser by using the `parser` property. The `parser` property must be an object containing either a `parse()` method or a `parseForESLint()` method. For example, you can use the [`@babel/eslint-parser`](https://www.npmjs.com/package/@babel/eslint-parser) package to allow ESLint to parse experimental syntax:\n\n``` language-js\nimport babelParser from \"@babel/eslint-parser\";\n\nexport default [\n    {\n        files: [\"**/*.js\", \"**/*.mjs\"],\n        languageOptions: {\n            parser: babelParser\n        }\n    }\n];\n```\n\nThis configuration ensures that the Babel parser, rather than the default Espree parser, is used to parse all files ending with `.js` and `.mjs`.\n\nYou can also pass options directly to the custom parser by using the `parserOptions` property. This property is an object whose name-value pairs are specific to the parser that you are using. For the Babel parser, you might pass in options like this:\n\n``` language-js\nimport babelParser from \"@babel/eslint-parser\";\n\nexport default [\n    {\n        files: [\"**/*.js\", \"**/*.mjs\"],\n        languageOptions: {\n            parser: babelParser,\n            parserOptions: {\n                requireConfigFile: false,\n                babelOptions: {\n                    babelrc: false,\n                    configFile: false,\n                    // your babel options\n                    presets: [\"@babel/preset-env\"],\n                }\n            }\n        }\n    }\n];\n```\n\n#### Configuring global variables\n\nTo configure global variables inside of a configuration object, set the `globals` configuration property to an object containing keys named for each of the global variables you want to use. For each global variable key, set the corresponding value equal to `\"writable\"` to allow the variable to be overwritten or `\"readonly\"` to disallow overwriting. For example:\n\n``` language-js\nexport default [\n    {\n        files: [\"**/*.js\"],\n        languageOptions: {\n            globals: {\n                var1: \"writable\",\n                var2: \"readonly\"\n            }\n        }\n    }\n];\n```\n\nThese examples allow `var1` to be overwritten in your code, but disallow it for `var2`.\n\nGlobals can be disabled with the string `\"off\"`. For example, in an environment where most ES2015 globals are available but `Promise` is unavailable, you might use this config:\n\n``` language-js\nexport default [\n    {\n        languageOptions: {\n            globals: {\n                Promise: \"off\"\n            }\n        }\n    }\n];\n```\n\nFor historical reasons, the boolean value `false` and the string value `\"readable\"` are equivalent to `\"readonly\"`. Similarly, the boolean value `true` and the string value `\"writeable\"` are equivalent to `\"writable\"`. However, the use of older values is deprecated.\n\n##### Predefined global variables\n\nApart from the ECMAScript standard built-in globals, which are automatically enabled based on the configured `languageOptions.ecmaVersion`, ESLint doesn’t provide predefined sets of global variables. You can use the [`globals`](https://www.npmjs.com/package/globals) package to additionally enable all globals for a specific environment. For example, here is how you can add `console`, amongst other browser globals, into your configuration.\n\n``` language-js\nimport globals from \"globals\";\nexport default [\n    {\n        languageOptions: {\n            globals: {\n                ...globals.browser\n            }\n        }\n    }\n];\n```\n\n### Using plugins in your configuration\n\nPlugins are used to share rules, processors, configurations, parsers, and more across ESLint projects.\n\n#### Using plugin rules\n\nYou can use specific rules included in a plugin. To do this, specify the plugin in a configuration object using the `plugins` key. The value for the `plugin` key is an object where the name of the plugin is the property name and the value is the plugin object itself. Here’s an example:\n\n``` language-js\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n    {\n        files: [\"**/*.js\"],\n        plugins: {\n            jsdoc: jsdoc\n        },\n        rules: {\n            \"jsdoc/require-description\": \"error\",\n            \"jsdoc/check-values\": \"error\"\n        }\n    }\n];\n```\n\nIn this configuration, the JSDoc plugin is defined to have the name `jsdoc`. The prefix `jsdoc/` in each rule name indicates that the rule is coming from the plugin with that name rather than from ESLint itself.\n\nBecause the name of the plugin and the plugin object are both `jsdoc`, you can also shorten the configuration to this:\n\n``` language-js\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n    {\n        files: [\"**/*.js\"],\n        plugins: {\n            jsdoc\n        },\n        rules: {\n            \"jsdoc/require-description\": \"error\",\n            \"jsdoc/check-values\": \"error\"\n        }\n    }\n];\n```\n\nWhile this is the most common convention, you don’t need to use the same name that the plugin prescribes. You can specify any prefix that you’d like, such as:\n\n``` language-js\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n    {\n        files: [\"**/*.js\"],\n        plugins: {\n            jsd: jsdoc\n        },\n        rules: {\n            \"jsd/require-description\": \"error\",\n            \"jsd/check-values\": \"error\"\n        }\n    }\n];\n```\n\nThis configuration object uses `jsd` as the prefix plugin instead of `jsdoc`.\n\n#### Using configurations included in plugins\n\nYou can use a configuration included in a plugin by adding that configuration directly to the `eslint.config.js` configurations array. Often, you do this for a plugin’s recommended configuration. Here’s an example:\n\n``` language-js\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n    // configuration included in plugin\n    jsdoc.configs[\"flat/recommended\"],\n    // other configuration objects...\n    {\n        files: [\"**/*.js\"],\n        plugins: {\n            jsdoc: jsdoc\n        },\n        rules: {\n            \"jsdoc/require-description\": \"warn\",\n        }\n    }\n];\n```\n\n### Using processors\n\nProcessors allow ESLint to transform text into pieces of code that ESLint can lint. You can specify the processor to use for a given file type by defining a `processor` property that contains either the processor name in the format `\"pluginName/processorName\"` to reference a processor in a plugin or an object containing both a `preprocess()` and a `postprocess()` method. For example, to extract JavaScript code blocks from a Markdown file, you might add this to your configuration:\n\n``` language-js\nimport markdown from \"eslint-plugin-markdown\";\n\nexport default [\n    {\n        files: [\"**/*.md\"],\n        plugins: {\n            markdown\n        },\n        processor: \"markdown/markdown\",\n        settings: {\n            sharedData: \"Hello\"\n        }\n    }\n];\n```\n\nThis configuration object specifies that there is a processor called `\"markdown\"` contained in the plugin named `\"markdown\"`. The configuration applies the processor to all files ending with `.md`.\n\nProcessors may make named code blocks that function as filenames in configuration objects, such as `0.js` and `1.js`. ESLint handles such a named code block as a child of the original file. You can specify additional configuration objects for named code blocks. For example, the following disables the `strict` rule for the named code blocks which end with `.js` in markdown files.\n\n``` language-js\nimport markdown from \"eslint-plugin-markdown\";\n\nexport default [\n    {\n        files: [\"**/*.md\"],\n        plugins: {\n            markdown\n        },\n        processor: \"markdown/markdown\",\n        settings: {\n            sharedData: \"Hello\"\n        }\n    },\n\n    // applies only to code blocks\n    {\n        files: [\"**/*.md/*.js\"],\n        rules: {\n            strict: \"off\"\n        }\n    }\n];\n```\n\n### Configuring rules\n\nYou can configure any number of rules in a configuration object by add a `rules` property containing an object with your rule configurations. The names in this object are the names of the rules and the values are the configurations for each of those rules. Here’s an example:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: \"error\"\n        }\n    }\n];\n```\n\nThis configuration object specifies that the [`semi`](rules/semi) rule should be enabled with a severity of `\"error\"`. You can also provide options to a rule by specifying an array where the first item is the severity and each item after that is an option for the rule. For example, you can switch the `semi` rule to disallow semicolons by passing `\"never\"` as an option:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: [\"error\", \"never\"]\n        }\n    }\n];\n```\n\nEach rule specifies its own options and can be any valid JSON data type. Please check the documentation for the rule you want to configure for more information about its available options.\n\n#### Rule severities\n\nThere are three possible severities you can specify for a rule\n\n- `\"error\"` (or `2`) - the reported problem should be treated as an error. When using the ESLint CLI, errors cause the CLI to exit with a nonzero code.\n- `\"warn\"` (or `1`) - the reported problem should be treated as a warning. When using the ESLint CLI, warnings are reported but do not change the exit code. If only warnings are reported, the exit code is 0.\n- `\"off\"` (or `0`) - the rule should be turned off completely.\n\n#### Rule configuration cascade\n\nWhen more than one configuration object specifies the same rule, the rule configuration is merged with the later object taking precedence over any previous objects. For example:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: [\"error\", \"never\"]\n        }\n    },\n    {\n        rules: {\n            semi: [\"warn\", \"always\"]\n        }\n    }\n];\n```\n\nUsing this configuration, the final rule configuration for `semi` is `[\"warn\", \"always\"]` because it appears last in the array. The array indicates that the configuration is for the severity and any options. You can change just the severity by defining only a string or number, as in this example:\n\n``` language-js\nexport default [\n    {\n        rules: {\n            semi: [\"error\", \"never\"]\n        }\n    },\n    {\n        rules: {\n            semi: \"warn\"\n        }\n    }\n];\n```\n\nHere, the second configuration object only overrides the severity, so the final configuration for `semi` is `[\"warn\", \"never\"]`.\n\n### Configuring shared settings\n\nESLint supports adding shared settings into configuration files. When you add a `settings` object to a configuration object, it is supplied to every rule. By convention, plugins namespace the settings they are interested in to avoid collisions with others. Plugins can use `settings` to specify the information that should be shared across all of their rules. This may be useful if you are adding custom rules and want them to have access to the same information. Here’s an example:\n\n``` language-js\nexport default [\n    {\n        settings: {\n            sharedData: \"Hello\"\n        }\n    }\n];\n```\n\n### Using predefined configurations\n\nESLint has two predefined configurations for JavaScript:\n\n- `js.configs.recommended` - enables the rules that ESLint recommends everyone use to avoid potential errors\n- `js.configs.all` - enables all of the rules shipped with ESLint\n\nTo include these predefined configurations, install the `@eslint/js` package and then make any modifications to other properties in subsequent configuration objects:\n\n``` language-js\nimport js from \"@eslint/js\";\n\nexport default [\n    js.configs.recommended,\n    {\n        rules: {\n            semi: [\"warn\", \"always\"]\n        }\n    }\n];\n```\n\nHere, the `js.configs.recommended` predefined configuration is applied first and then another configuration object adds the desired configuration for `semi`.\n\nYou can apply these predefined configs to just a subset of files by specifying a config object with a `files` key, like this:\n\n``` language-js\nimport js from \"@eslint/js\";\n\nexport default [\n    {\n        files: [\"**/src/safe/*.js\"],\n        ...js.configs.recommended\n    }\n];\n```\n\n## Configuration File Resolution\n\nWhen ESLint is run on the command line, it first checks the current working directory for `eslint.config.js`. If the file is not found, it looks to the next parent directory for the file. This search continues until either the file is found or the root directory is reached.\n\nYou can prevent this search for `eslint.config.js` by setting the `ESLINT_USE_FLAT_CONFIG` environment variable to `true` and using the `-c` or `--config` option on the command line to specify an alternate configuration file, such as:\n\n``` language-shell\nESLINT_USE_FLAT_CONFIG=true npx eslint --config some-other-file.js **/*.js\n```\n\nIn this case, ESLint does not search for `eslint.config.js` and instead uses `some-other-file.js`.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/configuration-files-new](https://eslint.org/docs/latest/use/configure/configuration-files-new)"
- name: Configuration Migration Guide
  id: use/configure/migration-guide
  summary: This guide provides an overview of how you can migrate your ESLint configuration file from the eslintrc format (typically configured in .eslintrc.js or .eslintrc.json files) to the new flat config format (typically configured in an eslint.config.js file)
  description: "# Configuration Migration Guide\n\n## Table of Contents\n\n1.  [Start Using Flat Config Files](#start-using-flat-config-files)\n2.  [Things That Haven’t Changed between Configuration File Formats](#things-that-havent-changed-between-configuration-file-formats)\n3.  [Key Differences between Configuration Formats](#key-differences-between-configuration-formats)\n    1.  [Importing Plugins and Custom Parsers](#importing-plugins-and-custom-parsers)\n    2.  [Custom Parsers](#custom-parsers)\n    3.  [Processors](#processors)\n    4.  [Glob-Based Configs](#glob-based-configs)\n        1.  [eslintrc Examples](#eslintrc-examples)\n    5.  [Configuring Language Options](#configuring-language-options)\n    6.  [eslint-env Configuration Comments](#eslint-env-configuration-comments)\n    7.  [Predefined and Shareable Configs](#predefined-and-shareable-configs)\n        1.  [Using eslintrc Configs in Flat Config](#using-eslintrc-configs-in-flat-config)\n    8.  [Ignoring Files](#ignoring-files)\n    9.  [Linter Options](#linter-options)\n    10. [CLI Flag Changes](#cli-flag-changes)\n    11. [Additional Changes](#additional-changes)\n4.  [TypeScript Types for Flat Config Files](#typescript-types-for-flat-config-files)\n5.  [Further Reading](#further-reading)\n\nThis guide provides an overview of how you can migrate your ESLint configuration file from the eslintrc format (typically configured in `.eslintrc.js` or `.eslintrc.json` files) to the new flat config format (typically configured in an `eslint.config.js` file).\n\nTo learn more about the flat config format, refer to [this blog post](https://eslint.org/blog/2022/08/new-config-system-part-2/).\n\nFor reference information on these configuration formats, refer to the following documentation:\n\n- [eslintrc configuration files](migration-guideconfiguration-files)\n- [flat configuration files](migration-guideconfiguration-files-new)\n\n## Start Using Flat Config Files\n\nStarting with ESLint v9.0.0, the flat config file format will be the default configuration file format. Once ESLint v9.0.0 is released, you can start using the flat config file format without any additional configuration.\n\nTo use flat config with ESLint v8, place a `eslint.config.js` file in the root of your project **or** set the `ESLINT_USE_FLAT_CONFIG` environment variable to `true`.\n\n## Things That Haven’t Changed between Configuration File Formats\n\nWhile the configuration file format has changed from eslintrc to flat config, the following has stayed the same:\n\n- Syntax for configuring rules\n- Syntax for configuring processors\n- The CLI, except for the flag changes noted in [CLI Flag Changes](#cli-flag-changes).\n- Global variables are configured the same way, but on a different property (see [Configuring Language Options](#configuring-language-options)).\n\n## Key Differences between Configuration Formats\n\nA few of the most notable differences between the eslintrc and flat config formats are the following:\n\n### Importing Plugins and Custom Parsers\n\nEslintrc files use string-based import system inside the `plugins` property to load plugins and inside the `extends` property to load external configurations.\n\nFlat config files represent plugins and parsers as JavaScript objects. This means you can use CommonJS `require()` or ES module `import` statements to load plugins and custom parsers from external files.\n\nFor example, this eslintrc config file loads `eslint-plugin-jsdoc` and configures rules from that plugin:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    plugins: [\"jsdoc\"],\n    rules: {\n        \"jsdoc/require-description\": \"error\",\n        \"jsdoc/check-values\": \"error\"\n    }\n    // ...other config\n};\n```\n\nIn flat config, you would do the same thing like this:\n\n``` language-javascript\n// eslint.config.js\n\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n    {\n        files: [\"**/*.js\"],\n        plugins: {\n            jsdoc: jsdoc\n        },\n        rules: {\n            \"jsdoc/require-description\": \"error\",\n            \"jsdoc/check-values\": \"error\"\n        }\n    }\n];\n```\n\n### Custom Parsers\n\nIn eslintrc files, importing a custom parser is similar to importing a plugin: you use a string to specify the name of the parser.\n\nIn flat config files, import a custom parser as a module, then assign it to the `languageOptions.parser` property of a configuration object.\n\nFor example, this eslintrc config file uses the `@babel/eslint-parser` parser:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    parser: \"@babel/eslint-parser\",\n    // ...other config\n};\n```\n\nIn flat config, you would do the same thing like this:\n\n``` language-javascript\n// eslint.config.js\n\nimport babelParser from \"@babel/eslint-parser\";\n\nexport default [\n    {\n        // ...other config\n        languageOptions: {\n            parser: babelParser\n        }\n        // ...other config\n    }\n];\n```\n\n### Processors\n\nIn eslintrc files, processors had to be defined in a plugin, and then referenced by name in the configuration. Processors beginning with a dot indicated a [file extension-named processor](extend/custom-processors#file-extension-named-processor) which ESLint would automatically configure for that file extension.\n\nIn flat config files, processors can still be referenced from plugins by their name, but they can now also be inserted directly into the configuration. Processors will *never* be automatically configured, and must be explicitly set in the configuration.\n\nAs an example with a custom plugin with processors:\n\n``` language-javascript\n// node_modules/eslint-plugin-someplugin/index.js\nmodule.exports = {\n    processors: {\n        \".md\": {\n            preprocess() {},\n            postprocess() {}\n        },\n        \"someProcessor\": {\n            preprocess() {},\n            postprocess() {}\n        }\n    }\n};\n```\n\nIn eslintrc, you would configure as follows:\n\n``` language-javascript\n// .eslintrc.js\nmodule.exports = {\n    plugins: [\"someplugin\"],\n    processor: \"someplugin/someProcessor\"\n};\n```\n\nESLint would also automatically add the equivalent of the following:\n\n``` language-javascript\n{\n     overrides: [{\n        files: [\"**/*.md\"],\n        processor: \"someplugin/.md\"\n     }]\n}\n```\n\nIn flat config, the following are all valid ways to express the same:\n\n``` language-javascript\n// eslint.config.js\nimport somePlugin from \"eslint-plugin-someplugin\";\n\nexport default [\n    {\n        plugins: { somePlugin },\n        processor: \"somePlugin/someProcessor\"\n    },\n    {\n        plugins: { somePlugin },\n        // We can embed the processor object in the config directly\n        processor: somePlugin.processors.someProcessor\n    },\n    {\n        // We don't need the plugin to be present in the config to use the processor directly\n        processor: somePlugin.processors.someProcessor\n    }\n];\n```\n\nNote that because the `.md` processor is *not* automatically added by flat config, you also need to specify an extra configuration element:\n\n``` language-javascript\n{\n    files: [\"**/*.md\"],\n    processor: somePlugin.processors[\".md\"]\n}\n```\n\n### Glob-Based Configs\n\nBy default, eslintrc files lint all files (except those covered by `.eslintignore`) in the directory in which they’re placed and its child directories. If you want to have different configurations for different file glob patterns, you can specify them in the `overrides` property.\n\nBy default, flat config files support different glob pattern-based configs in exported array. You can include the glob pattern in a config object’s `files` property. If you don’t specify a `files` property, the config defaults to the glob pattern `\"**/*.{js,mjs,cjs}\"`. Basically, all configuration in the flat config file is like the eslintrc `overrides` property.\n\n#### eslintrc Examples\n\nFor example, this eslintrc file applies to all files in the directory where it is placed and its child directories:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    rules: {\n        semi: [\"warn\", \"always\"]\n    }\n};\n```\n\nThis eslintrc file supports multiple configs with overrides:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    overrides: [\n        {\n            files: [\"src/**/*\"],\n            rules: {\n                semi: [\"warn\", \"always\"]\n            }\n        },\n        {\n            files:[\"test/**/*\"],\n            rules: {\n                \"no-console\": \"off\"\n            }\n        }\n    ]\n};\n```\n\nFor flat config, here is a configuration with the default glob pattern:\n\n``` language-javascript\n// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n    js.configs.recommended, // Recommended config applied to all files\n    // Override the recommended config\n    {\n        rules: {\n            indent: [\"error\", 2],\n            \"no-unused-vars\": \"warn\"\n        }\n        // ...other configuration\n    }\n];\n```\n\nA flag config example configuration supporting multiple configs for different glob patterns:\n\n``` language-javascript\n// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n    js.configs.recommended, // Recommended config applied to all files\n    // File-pattern specific overrides\n    {\n        files: [\"src/**/*\", \"test/**/*\"],\n        rules: {\n            semi: [\"warn\", \"always\"]\n        }\n    },\n    {\n        files:[\"test/**/*\"],\n        rules: {\n            \"no-console\": \"off\"\n        }\n    }\n    // ...other configurations\n];\n```\n\n### Configuring Language Options\n\nIn eslintrc files, you configure various language options across the `env`, `globals` and `parserOptions` properties. Groups of global variables for specific runtimes (e.g. `document` and `window` for browser JavaScript; `process` and `require` for Node.js) are configured with the `env` property.\n\nIn flat config files, the `globals`, and `parserOptions` are consolidated under the `languageOptions` key; the `env` property doesn’t exist. Groups of global variables for specific runtimes are imported from the [globals](https://www.npmjs.com/package/globals) npm package and included in the `globals` property. You can use the spread operator (`...`) to import multiple globals at once.\n\nFor example, here’s an eslintrc file with language options:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    env: {\n        browser: true,\n    },\n    globals: {\n        myCustomGlobal: \"readonly\",\n    },\n    parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: \"module\"\n    }\n    // ...other config\n}\n```\n\nHere’s the same configuration in flat config:\n\n``` language-javascript\n// eslint.config.js\n\nimport globals from \"globals\";\n\nexport default [\n    {\n        languageOptions: {\n            ecmaVersion: 2022,\n            sourceType: \"module\",\n            globals: {\n                ...globals.browser,\n                myCustomGlobal: \"readonly\"\n            }\n        }\n        // ...other config\n    }\n];\n```\n\n### `eslint-env` Configuration Comments\n\nIn the eslintrc config system it was possible to use `eslint-env` configuration comments to define globals for a file. These comments are no longer recognized when linting with flat config: in a future version of ESLint, `eslint-env` comments will be reported as errors. For this reason, when migrating from eslintrc to flat config, `eslint-env` configuration comments should be removed from all files. They can be either replaced with equivalent but more verbose `global` configuration comments, or dropped in favor of `globals` definitions in the config file.\n\nFor example, when using eslintrc, a file to be linted could look like this:\n\n``` language-javascript\n// tests/my-file.js\n\n/* eslint-env mocha */\n\ndescribe(\"unit tests\", () => {\n    it(\"should pass\", () => {\n        // ...\n    });\n});\n```\n\nIn the above example, `describe` and `it` would be recognized as global identifiers because of the `/* eslint-env mocha */` comment.\n\nThe same effect can be achieved with flat config with a `global` configuration comment, e.g.:\n\n``` language-javascript\n// tests/my-file.js\n\n/* global describe, it -- Globals defined by Mocha */\n\ndescribe(\"unit tests\", () => {\n    it(\"should pass\", () => {\n        // ...\n    });\n});\n```\n\nAnother option is to remove the comment from the file being linted and define the globals in the configuration, for example:\n\n``` language-javascript\n// eslint.config.js\n\nimport globals from \"globals\";\n\nexport default [\n    // ...other config\n    {\n        files: [\n            \"tests/**\"\n        ],\n        languageOptions: {\n            globals: {\n                ...globals.mocha\n            }\n        }\n    }\n];\n```\n\n### Predefined and Shareable Configs\n\nIn eslintrc files, use the `extends` property to use predefined and shareable configs. ESLint comes with two predefined configs that you can access as strings:\n\n- `\"eslint:recommended\"`: the rules recommended by ESLint\n- `\"eslint:all\"`: all rules shipped with ESLint\n\nYou can also use the `extends` property to extend a shareable config. Shareable configs can either be paths to local config files or npm package names.\n\nIn flat config files, predefined configs are imported from separate modules into flat config files. The `recommended` and `all` rules configs are located in the [`@eslint/js`](https://www.npmjs.com/package/@eslint/js) package. You must import this package to use these configs:\n\n``` language-shell\nnpm install @eslint/js --save-dev\n```\n\nYou can add each of these configs to the exported array or expose specific rules from them. You must import the modules for local config files and npm package configs with flat config.\n\nFor example, here’s an eslintrc file using the built-in `eslint:recommended` config:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    extends: \"eslint:recommended\",\n    rules: {\n        semi: [\"warn\", \"always\"]\n    },\n    // ...other config\n}\n```\n\nThis eslintrc file uses built-in config, local custom config, and shareable config from an npm package:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    extends: [\"eslint:recommended\", \"./custom-config.js\", \"eslint-config-my-config\"],\n    rules: {\n        semi: [\"warn\", \"always\"]\n    },\n    // ...other config\n}\n```\n\nTo use the same configs in flat config, you would do the following:\n\n``` language-javascript\n// eslint.config.js\n\nimport js from \"@eslint/js\";\nimport customConfig from \"./custom-config.js\";\nimport myConfig from \"eslint-config-my-config\";\n\nexport default [\n    js.configs.recommended,\n    customConfig,\n    myConfig,\n    {\n        rules: {\n            semi: [\"warn\", \"always\"]\n        },\n        // ...other config\n    }\n];\n```\n\nNote that because you are just importing JavaScript modules, you can mutate the config objects before ESLint uses them. For example, you might want to have a certain config object only apply to your test files:\n\n``` language-javascript\n// eslint.config.js\n\nimport js from \"@eslint/js\";\nimport customTestConfig from \"./custom-test-config.js\";\n\nexport default [\n    js.configs.recommended,\n    {\n        ...customTestConfig,\n        files: [\"**/*.test.js\"],\n    },\n];\n```\n\n#### Using eslintrc Configs in Flat Config\n\nYou may find that there’s a shareable config you rely on that hasn’t yet been updated to flat config format. In that case, you can use the `FlatCompat` utility to translate the eslintrc format into flat config format. First, install the `@eslint/eslintrc` package:\n\n``` language-shell\nnpm install @eslint/eslintrc --save-dev\n```\n\nThen, import `FlatCompat` and create a new instance to convert an existing eslintrc config. For example, if the npm package `eslint-config-my-config` is in eslintrc format, you can write this:\n\n``` language-js\nimport { FlatCompat } from \"@eslint/eslintrc\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// mimic CommonJS variables -- not needed if using CommonJS\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst compat = new FlatCompat({\n    baseDirectory: __dirname\n});\n\nexport default [\n\n    // mimic ESLintRC-style extends\n    ...compat.extends(\"eslint-config-my-config\"),\n];\n```\n\nThis example uses the `FlatCompat#extends()` method to insert the `eslint-config-my-config` into the flat config array.\n\nFor more information about the `FlatCompat` class, please see the [package README](https://github.com/eslint/eslintrc#usage).\n\n### Ignoring Files\n\nWith eslintrc, you can make ESLint ignore files by creating a separate `.eslintignore` file in the root of your project. The `.eslintignore` file uses the same glob pattern syntax as `.gitignore` files. Alternatively, you can use an `ignorePatterns` property in your eslintrc file.\n\nTo ignore files with flat config, you can use the `ignores` property in a config object. The `ignores` property accepts an array of glob patterns. Flat config does not support loading ignore patterns from `.eslintignore` files, so you’ll need to migrate those patterns directly into flat config.\n\nFor example, here’s a `.eslintignore` example you can use with an eslintrc config:\n\n``` language-shell\n# .eslintignore\ntemp.js\nconfig/*\n# ...other ignored files\n```\n\n`ignorePatterns` example:\n\n``` language-javascript\n// .eslintrc.js\nmodule.exports = {\n    // ...other config\n    ignorePatterns: [\"temp.js\", \"config/*\"],\n};\n```\n\nHere are the same files ignore patterns in flat config:\n\n``` language-javascript\nexport default [\n    // ...other config\n    {\n        ignores: [\"**/temp.js\", \"config/*\"]\n    }\n];\n```\n\nAlso, with flat config, dotfiles (e.g. `.dotfile.js`) are no longer ignored by default. If you want to ignore dotfiles, add files ignore pattern `\"**/.*\"`.\n\n### Linter Options\n\nESlintrc files let you configure the linter itself with the `noInlineConfig` and `reportUnusedDisableDirectives` properties.\n\nThe flat config system introduces a new top-level property `linterOptions` that you can use to configure the linter. In the `linterOptions` object, you can include `noInlineConfig` and `reportUnusedDisableDirectives`.\n\nFor example, here’s an eslintrc file with linter options enabled:\n\n``` language-javascript\n// .eslintrc.js\n\nmodule.exports = {\n    // ...other config\n    noInlineConfig: true,\n    reportUnusedDisableDirectives: true\n}\n```\n\nHere’s the same options in flat config:\n\n``` language-javascript\n// eslint.config.js\n\nexport default [\n    {\n        // ...other config\n        linterOptions: {\n            noInlineConfig: true,\n            reportUnusedDisableDirectives: \"warn\"\n        }\n    }\n];\n```\n\n### CLI Flag Changes\n\nThe following CLI flags are no longer supported with the flat config file format:\n\n- `--rulesdir`\n- `--ext`\n- `--resolve-plugins-relative-to`\n\nThe flag `--no-eslintrc` has been replaced with `--no-config-lookup`.\n\n### Additional Changes\n\nThe following changes have been made from the eslintrc to the flat config file format:\n\n- The `root` option no longer exists. (Flat config files act as if `root: true` is set.)\n- The `files` option cannot be a single string anymore, it must be an array.\n- The `sourceType` option now supports the new value `\"commonjs\"` (`.eslintrc` supports it too, but it was never documented).\n\n## TypeScript Types for Flat Config Files\n\nYou can see the TypeScript types for the flat config file format in the DefinitelyTyped project. The interface for the objects in the config’s array is called the `FlatConfig`.\n\nYou can view the type definitions in the [DefinitelyTyped repository on Github](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/eslint/index.d.ts).\n\n## Further Reading\n\n- [Overview of the flat config file format blog post](https://eslint.org/blog/2022/08/new-config-system-part-2/)\n- [API usage of new configuration system blog post](https://eslint.org/blog/2022/08/new-config-system-part-3/)\n- [Background to new configuration system blog post](https://eslint.org/blog/2022/08/new-config-system-part-1/)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/migration-guide](https://eslint.org/docs/latest/use/configure/migration-guide)"
- name: Configure a Parser
  id: use/configure/parser
  summary: You can use custom parsers to convert JavaScript code into an abstract syntax tree for ESLint to evaluate
  description: "# Configure a Parser\n\n## Table of Contents\n\n1.  [Configure a Custom Parser](#configure-a-custom-parser)\n\nYou can use custom parsers to convert JavaScript code into an abstract syntax tree for ESLint to evaluate. You might want to add a custom parser if your code isn’t compatible with ESLint’s default parser, Espree.\n\n## Configure a Custom Parser\n\nBy default, ESLint uses [Espree](https://github.com/eslint/espree) as its parser. You can optionally specify that a different parser should be used in your configuration file if the parser meets the following requirements:\n\n1.  It must be a Node module loadable from the config file where the parser is used. Usually, this means you should install the parser package separately using npm.\n2.  It must conform to the [parser interface](extend/custom-parsers).\n\nNote that even with these compatibilities, there are no guarantees that an external parser works correctly with ESLint. ESLint does not fix bugs related to incompatibilities with other parsers.\n\nTo indicate the npm module to use as your parser, specify it using the `parser` option in your `.eslintrc` file. For example, the following specifies to use Esprima instead of Espree:\n\n``` language-json\n{\n    \"parser\": \"esprima\",\n    \"rules\": {\n        \"semi\": \"error\"\n    }\n}\n```\n\nThe following parsers are compatible with ESLint:\n\n- [Esprima](https://www.npmjs.com/package/esprima)\n- [@babel/eslint-parser](https://www.npmjs.com/package/@babel/eslint-parser) - A wrapper around the [Babel](https://babeljs.io) parser that makes it compatible with ESLint.\n- [@typescript-eslint/parser](https://www.npmjs.com/package/@typescript-eslint/parser) - A parser that converts TypeScript into an ESTree-compatible form so it can be used in ESLint.\n\nNote that when using a custom parser, the `parserOptions` configuration property is still required for ESLint to work properly with features not in ECMAScript 5 by default. Parsers are all passed `parserOptions` and may or may not use them to determine which features to enable.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/parser](https://eslint.org/docs/latest/use/configure/parser)"
- name: Configure ESLint
  id: use/configure/index
  summary: ESLint is designed to be flexible and configurable for your use case
  description: "# Configure ESLint\n\n## Table of Contents\n\n1.  [Table of Contents](#table-of-contents)\n\nESLint is designed to be flexible and configurable for your use case. You can turn off every rule and run only with basic syntax validation or mix and match the bundled rules and your custom rules to fit the needs of your project. There are two primary ways to configure ESLint:\n\n1.  **Configuration Comments** - use JavaScript comments to embed configuration information directly into a file.\n2.  **Configuration Files** - use a JavaScript, JSON, or YAML file to specify configuration information for an entire directory and all of its subdirectories. This can be in the form of a [`.eslintrc.*`](configuration-files#configuration-file-formats) file or an `eslintConfig` field in a [`package.json`](https://docs.npmjs.com/files/package.json) file, both of which ESLint will look for and read automatically, or you can specify a configuration file on the [command line](../command-line-interface).\n\nHere are some of the options that you can configure in ESLint:\n\n- [**Environments**](language-options#specifying-environments) - which environments your script is designed to run in. Each environment brings with it a certain set of predefined global variables.\n- [**Globals**](language-options#specifying-globals) - the additional global variables your script accesses during execution.\n- [**Rules**](rules) - which rules are enabled and at what error level.\n- [**Plugins**](plugins) - which third-party plugins define additional rules, environments, configs, etc. for ESLint to use.\n\nAll of these options give you fine-grained control over how ESLint treats your code.\n\n## Table of Contents\n\n[**Configuration Files**](configuration-files)\n\n- [Configuration File Formats](configuration-files#configuration-file-formats)\n- [Using Configuration Files](configuration-files#using-configuration-files)\n- [Adding Shared Settings](configuration-files#adding-shared-settings)\n- [Cascading and Hierarchy](configuration-files#cascading-and-hierarchy)\n- [Extending Configuration Files](configuration-files#extending-configuration-files)\n- [Configuration Based on Glob Patterns](configuration-files#configuration-based-on-glob-patterns)\n- [Personal Configuration Files](configuration-files#personal-configuration-files-deprecated)\n\n[**Configure Language Options**](language-options)\n\n- [Specifying Environments](language-options#specifying-environments)\n- [Specifying Globals](language-options#specifying-globals)\n- [Specifying Parser Options](language-options#specifying-parser-options)\n\n[**Configure Rules**](rules)\n\n- [Configuring Rules](rules)\n- [Disabling Rules](rules#disabling-rules)\n\n[**Configure Plugins**](plugins)\n\n- [Configure Plugins](plugins#configure-plugins)\n- [Specify a Processor](plugins#specify-a-processor)\n\n[**Configure a Parser**](parser)\n\n- [Configure a Custom Parser](parser#configure-a-custom-parser)\n\n[**Ignore Files**](ignore)\n\n- [`ignorePatterns` in Config Files](ignore#ignorepatterns-in-config-files)\n- [The `.eslintignore` File](ignore#the-eslintignore-file)\n- [Using an Alternate File](ignore#using-an-alternate-file)\n- [Using eslintIgnore in package.json](ignore#using-eslintignore-in-packagejson)\n- [Ignored File Warnings](ignore#ignored-file-warnings)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/](https://eslint.org/docs/latest/use/configure/)"
- name: Configure Language Options
  id: use/configure/language-options
  summary: The JavaScript ecosystem has a variety of runtimes, versions, extensions, and frameworks
  description: "# Configure Language Options\n\n## Table of Contents\n\n1.  [Specifying Environments](#specifying-environments)\n    1.  [Using configuration comments](#using-configuration-comments)\n    2.  [Using configuration files](#using-configuration-files)\n    3.  [Using a plugin](#using-a-plugin)\n2.  [Specifying Globals](#specifying-globals)\n    1.  [Using configuration comments](#using-configuration-comments-1)\n    2.  [Using configuration files](#using-configuration-files-1)\n3.  [Specifying Parser Options](#specifying-parser-options)\n\nThe JavaScript ecosystem has a variety of runtimes, versions, extensions, and frameworks. Each of these can have different supported syntax and global variables. ESLint lets you configure language options specific to the JavaScript used in your project, like custom global variables. You can also use plugins to extend ESLint to support your project’s language options.\n\n## Specifying Environments\n\nAn environment provides predefined global variables. The available environments are:\n\n- `browser` - browser global variables.\n- `node` - Node.js global variables and Node.js scoping.\n- `commonjs` - CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).\n- `shared-node-browser` - Globals common to both Node.js and Browser.\n- `es6` - enable all ECMAScript 6 features except for modules (this automatically sets the `ecmaVersion` parser option to 6).\n- `es2016` - adds all ECMAScript 2016 globals and automatically sets the `ecmaVersion` parser option to 7.\n- `es2017` - adds all ECMAScript 2017 globals and automatically sets the `ecmaVersion` parser option to 8.\n- `es2018` - adds all ECMAScript 2018 globals and automatically sets the `ecmaVersion` parser option to 9.\n- `es2019` - adds all ECMAScript 2019 globals and automatically sets the `ecmaVersion` parser option to 10.\n- `es2020` - adds all ECMAScript 2020 globals and automatically sets the `ecmaVersion` parser option to 11.\n- `es2021` - adds all ECMAScript 2021 globals and automatically sets the `ecmaVersion` parser option to 12.\n- `es2022` - adds all ECMAScript 2022 globals and automatically sets the `ecmaVersion` parser option to 13.\n- `es2023` - adds all ECMAScript 2023 globals and automatically sets the `ecmaVersion` parser option to 14.\n- `es2024` - adds all ECMAScript 2024 globals and automatically sets the `ecmaVersion` parser option to 15.\n- `worker` - web workers global variables.\n- `amd` - defines `require()` and `define()` as global variables as per the [amd](https://github.com/amdjs/amdjs-api/blob/master/AMD.md) spec.\n- `mocha` - adds all of the Mocha testing global variables.\n- `jasmine` - adds all of the Jasmine testing global variables for version 1.3 and 2.0.\n- `jest` - Jest global variables.\n- `phantomjs` - PhantomJS global variables.\n- `protractor` - Protractor global variables.\n- `qunit` - QUnit global variables.\n- `jquery` - jQuery global variables.\n- `prototypejs` - Prototype.js global variables.\n- `shelljs` - ShellJS global variables.\n- `meteor` - Meteor global variables.\n- `mongo` - MongoDB global variables.\n- `applescript` - AppleScript global variables.\n- `nashorn` - Java 8 Nashorn global variables.\n- `serviceworker` - Service Worker global variables.\n- `atomtest` - Atom test helper globals.\n- `embertest` - Ember test helper globals.\n- `webextensions` - WebExtensions globals.\n- `greasemonkey` - GreaseMonkey globals.\n\nThese environments are not mutually exclusive, so you can define more than one at a time.\n\nEnvironments can be specified inside of a file, in configuration files or using the `--env` [command line](language-options../command-line-interface) flag.\n\n### Using configuration comments\n\nTo specify environments with a comment inside of a JavaScript file, use the following format:\n\n``` language-js\n/* eslint-env node, mocha */\n```\n\nThis enables Node.js and Mocha environments.\n\n### Using configuration files\n\nTo specify environments in a configuration file, use the `env` key. Specify which environments you want to enable by setting each to `true`. For example, the following enables the browser and Node.js environments:\n\n``` language-json\n{\n    \"env\": {\n        \"browser\": true,\n        \"node\": true\n    }\n}\n```\n\nOr in a `package.json` file\n\n``` language-json\n{\n    \"name\": \"mypackage\",\n    \"version\": \"0.0.1\",\n    \"eslintConfig\": {\n        \"env\": {\n            \"browser\": true,\n            \"node\": true\n        }\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\n  env:\n    browser: true\n    node: true\n```\n\n### Using a plugin\n\nIf you want to use an environment from a plugin, be sure to specify the plugin name in the `plugins` array and then use the unprefixed plugin name, followed by a slash, followed by the environment name. For example:\n\n``` language-json\n{\n    \"plugins\": [\"example\"],\n    \"env\": {\n        \"example/custom\": true\n    }\n}\n```\n\nOr in a `package.json` file\n\n``` language-json\n{\n    \"name\": \"mypackage\",\n    \"version\": \"0.0.1\",\n    \"eslintConfig\": {\n        \"plugins\": [\"example\"],\n        \"env\": {\n            \"example/custom\": true\n        }\n    }\n}\n```\n\n## Specifying Globals\n\nSome of ESLint’s core rules rely on knowledge of the global variables available to your code at runtime. Since these can vary greatly between different environments as well as be modified at runtime, ESLint makes no assumptions about what global variables exist in your execution environment. If you would like to use rules that require knowledge of what global variables are available, you can define global variables in your configuration file or by using configuration comments in your source code.\n\n### Using configuration comments\n\nTo specify globals using a comment inside of your JavaScript file, use the following format:\n\n``` language-js\n/* global var1, var2 */\n```\n\nThis defines two global variables, `var1` and `var2`. If you want to optionally specify that these global variables can be written to (rather than only being read), then you can set each with a `\"writable\"` flag:\n\n``` language-js\n/* global var1:writable, var2:writable */\n```\n\n### Using configuration files\n\nTo configure global variables inside of a configuration file, set the `globals` configuration property to an object containing keys named for each of the global variables you want to use. For each global variable key, set the corresponding value equal to `\"writable\"` to allow the variable to be overwritten or `\"readonly\"` to disallow overwriting. For example:\n\n``` language-json\n{\n    \"globals\": {\n        \"var1\": \"writable\",\n        \"var2\": \"readonly\"\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\n  globals:\n    var1: writable\n    var2: readonly\n```\n\nThese examples allow `var1` to be overwritten in your code, but disallow it for `var2`.\n\nGlobals can be disabled by setting their value to `\"off\"`. For example, in an environment where most ES2015 globals are available but `Promise` is unavailable, you might use this config:\n\n``` language-json\n{\n    \"env\": {\n        \"es6\": true\n    },\n    \"globals\": {\n        \"Promise\": \"off\"\n    }\n}\n```\n\nFor historical reasons, the boolean value `false` and the string value `\"readable\"` are equivalent to `\"readonly\"`. Similarly, the boolean value `true` and the string value `\"writeable\"` are equivalent to `\"writable\"`. However, the use of these older values is deprecated.\n\n## Specifying Parser Options\n\nESLint allows you to specify the JavaScript language options you want to support. By default, ESLint expects ECMAScript 5 syntax. You can override that setting to enable support for other ECMAScript versions and JSX using parser options.\n\nPlease note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn’t recognize. We recommend using [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) if you are using React.\n\nBy the same token, supporting ES6 syntax is not the same as supporting new ES6 globals (e.g., new types such as `Set`). For ES6 syntax, use `{ \"parserOptions\": { \"ecmaVersion\": 6 } }`; for new ES6 global variables, use `{ \"env\": { \"es6\": true } }`. Setting `{ \"env\": { \"es6\": true } }` enables ES6 syntax automatically, but `{ \"parserOptions\": { \"ecmaVersion\": 6 } }` does not enable ES6 globals automatically. In summary, to support only ES6 syntax, use `{ \"parserOptions\": { \"ecmaVersion\": 6 } }`, and to support both ES6 syntax and new ES6 global variables, such as `Set` and others, use `{ \"env\": { \"es6\": true } }`.\n\nParser options are set in your `.eslintrc.*` file with the `parserOptions` property. The available options are:\n\n- `ecmaVersion` - set to 3, 5 (default), 6, 7, 8, 9, 10, 11, 12, 13, 14, or 15 to specify the version of ECMAScript syntax you want to use. You can also set it to 2015 (same as 6), 2016 (same as 7), 2017 (same as 8), 2018 (same as 9), 2019 (same as 10), 2020 (same as 11), 2021 (same as 12), 2022 (same as 13), 2023 (same as 14), or 2024 (same as 15) to use the year-based naming. You can also set `\"latest\"` to use the most recently supported version.\n- `sourceType` - set to `\"script\"` (default) or `\"module\"` if your code is in ECMAScript modules.\n- `allowReserved` - allow the use of reserved words as identifiers (if `ecmaVersion` is 3).\n- `ecmaFeatures` - an object indicating which additional language features you’d like to use:\n  - `globalReturn` - allow `return` statements in the global scope\n  - `impliedStrict` - enable global [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) (if `ecmaVersion` is 5 or greater)\n  - `jsx` - enable [JSX](https://facebook.github.io/jsx/)\n\nHere’s an example `.eslintrc.json` file:\n\n``` language-json\n{\n    \"parserOptions\": {\n        \"ecmaVersion\": \"latest\",\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        }\n    },\n    \"rules\": {\n        \"semi\": \"error\"\n    }\n}\n```\n\nSetting parser options helps ESLint determine what is a parsing error. All language options are `false` by default.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/language-options](https://eslint.org/docs/latest/use/configure/language-options)"
- name: Configure Plugins
  id: use/configure/plugins
  summary: You can extend ESLint with plugins in a variety of different ways
  description: "# Configure Plugins\n\n## Table of Contents\n\n1.  [Configure Plugins](#configure-plugins)\n    1.  [Naming convention](#naming-convention)\n        1.  [Include a plugin](#include-a-plugin)\n        2.  [Use a plugin](#use-a-plugin)\n    2.  [Specify a Processor](#specify-a-processor)\n\nYou can extend ESLint with plugins in a variety of different ways. Plugins can include:\n\n- Custom rules to validate if your code meets a certain expectation, and what to do if it does not meet that expectation.\n- Custom configurations.\n- Custom environments.\n- Custom processors to extract JavaScript code from other kinds of files or preprocess code before linting.\n\n## Configure Plugins\n\nESLint supports the use of third-party plugins. Before using a plugin, you have to install it using npm.\n\nTo configure plugins inside of a configuration file, use the `plugins` key, which contains a list of plugin names. The `eslint-plugin-` prefix can be omitted from the plugin name.\n\n``` language-json\n{\n    \"plugins\": [\n        \"plugin1\",\n        \"eslint-plugin-plugin2\"\n    ]\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\n  plugins:\n    - plugin1\n    - eslint-plugin-plugin2\n```\n\n**Notes:**\n\n1.  Plugins are resolved relative to the config file. In other words, ESLint loads the plugin as a user would obtain by running `require('eslint-plugin-pluginname')` in the config file.\n2.  Plugins in the base configuration (loaded by `extends` setting) are relative to the derived config file. For example, if `./.eslintrc` has `extends: [\"foo\"]` and the `eslint-config-foo` has `plugins: [\"bar\"]`, ESLint finds the `eslint-plugin-bar` from `./node_modules/` (rather than `./node_modules/eslint-config-foo/node_modules/`) or ancestor directories. Thus every plugin in the config file and base configurations is resolved uniquely.\n\n### Naming convention\n\n#### Include a plugin\n\nThe `eslint-plugin-` prefix can be omitted for both non-scoped and scoped packages.\n\nA non-scoped package:\n\n``` language-js\n{\n    // ...\n    \"plugins\": [\n        \"jquery\", // means eslint-plugin-jquery\n    ]\n    // ...\n}\n```\n\nA scoped package:\n\n``` language-js\n{\n    // ...\n    \"plugins\": [\n        \"@jquery/jquery\", // means @jquery/eslint-plugin-jquery\n        \"@foobar\" // means @foobar/eslint-plugin\n    ]\n    // ...\n}\n```\n\n#### Use a plugin\n\nRules, environments, and configurations defined in plugins must be referenced with the following convention:\n\n- `eslint-plugin-foo` → `foo/a-rule`\n- `@foo/eslint-plugin` → `@foo/a-config`\n- `@foo/eslint-plugin-bar` → `@foo/bar/a-environment`\n\nFor example:\n\n``` language-js\n{\n    // ...\n    \"plugins\": [\n        \"jquery\",   // eslint-plugin-jquery\n        \"@foo/foo\", // @foo/eslint-plugin-foo\n        \"@bar\"      // @bar/eslint-plugin\n    ],\n    \"extends\": [\n        \"plugin:@foo/foo/recommended\",\n        \"plugin:@bar/recommended\"\n    ],\n    \"rules\": {\n        \"jquery/a-rule\": \"error\",\n        \"@foo/foo/some-rule\": \"error\",\n        \"@bar/another-rule\": \"error\"\n    },\n    \"env\": {\n        \"jquery/jquery\": true,\n        \"@foo/foo/env-foo\": true,\n        \"@bar/env-bar\": true,\n    }\n    // ...\n}\n```\n\n### Specify a Processor\n\nPlugins may provide processors. Processors can extract JavaScript code from other kinds of files, then let ESLint lint the JavaScript code. Alternatively, processors can convert JavaScript code during preprocessing.\n\nTo specify processors in a configuration file, use the `processor` key with the concatenated string of a plugin name and a processor name by a slash. For example, the following enables the processor `a-processor` that the plugin `a-plugin` provided:\n\n``` language-json\n{\n    \"plugins\": [\"a-plugin\"],\n    \"processor\": \"a-plugin/a-processor\"\n}\n```\n\nTo specify processors for specific kinds of files, use the combination of the `overrides` key and the `processor` key. For example, the following uses the processor `a-plugin/markdown` for `*.md` files.\n\n``` language-json\n{\n    \"plugins\": [\"a-plugin\"],\n    \"overrides\": [\n        {\n            \"files\": [\"*.md\"],\n            \"processor\": \"a-plugin/markdown\"\n        }\n    ]\n}\n```\n\nProcessors may make named code blocks such as `0.js` and `1.js`. ESLint handles such a named code block as a child file of the original file. You can specify additional configurations for named code blocks in the `overrides` section of the config. For example, the following disables the `strict` rule for the named code blocks which end with `.js` in markdown files.\n\n``` language-json\n{\n    \"plugins\": [\"a-plugin\"],\n    \"overrides\": [\n        {\n            \"files\": [\"*.md\"],\n            \"processor\": \"a-plugin/markdown\"\n        },\n        {\n            \"files\": [\"**/*.md/*.js\"],\n            \"rules\": {\n                \"strict\": \"off\"\n            }\n        }\n    ]\n}\n```\n\nESLint checks the file path of named code blocks then ignores those if any `overrides` entry didn’t match the file path. Be sure to add an `overrides` entry if you want to lint named code blocks other than `*.js`.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/plugins](https://eslint.org/docs/latest/use/configure/plugins)"
- name: Configure Rules
  id: use/configure/rules
  summary: Rules are the core building block of ESLint
  description: "# Configure Rules\n\n## Table of Contents\n\n1.  [Rule Severities](#rule-severities)\n    1.  [Using configuration comments](#using-configuration-comments)\n        1.  [Configuration Comment Descriptions](#configuration-comment-descriptions)\n    2.  [Using configuration files](#using-configuration-files)\n2.  [Rules from Plugins](#rules-from-plugins)\n3.  [Disabling Rules](#disabling-rules)\n    1.  [Using configuration comments](#using-configuration-comments-1)\n        1.  [Comment descriptions](#comment-descriptions)\n    2.  [Using configuration files](#using-configuration-files-1)\n    3.  [Disabling Inline Comments](#disabling-inline-comments)\n        1.  [Report unused eslint-disable comments](#report-unused-eslint-disable-comments)\n\nRules are the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule.\n\nESLint comes with a large number of [built-in rules](rules/index) and you can add more rules through plugins. You can modify which rules your project uses with either configuration comments or configuration files.\n\n## Rule Severities\n\nTo change a rule’s severity, set the rule ID equal to one of these values:\n\n- `\"off\"` or `0` - turn the rule off\n- `\"warn\"` or `1` - turn the rule on as a warning (doesn’t affect exit code)\n- `\"error\"` or `2` - turn the rule on as an error (exit code is 1 when triggered)\n\nRules are typically set to `\"error\"` to enforce compliance with the rule during continuous integration testing, pre-commit checks, and pull request merging because doing so causes ESLint to exit with a non-zero exit code.\n\nIf you don’t want to enforce compliance with a rule but would still like ESLint to report the rule’s violations, set the severity to `\"warn\"`. This is typically used when introducing a new rule that will eventually be set to `\"error\"`, when a rule is flagging something other than a potential buildtime or runtime error (such as an unused variable), or when a rule cannot determine with certainty that a problem has been found (when a rule might have false positives and need manual review).\n\n### Using configuration comments\n\nTo configure rules inside of a file using configuration comments, use a comment in the following format:\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\" */\n```\n\nIn this example, [`eqeqeq`](rules/eqeqeq) is turned off and [`curly`](rules/curly) is turned on as an error. You can also use the numeric equivalent for the rule severity:\n\n``` language-js\n/* eslint eqeqeq: 0, curly: 2 */\n```\n\nThis example is the same as the last example, only it uses the numeric codes instead of the string values. The `eqeqeq` rule is off and the `curly` rule is set to be an error.\n\nIf a rule has additional options, you can specify them using array literal syntax, such as:\n\n``` language-js\n/* eslint quotes: [\"error\", \"double\"], curly: 2 */\n```\n\nThis comment specifies the “double” option for the [`quotes`](rules/quotes) rule. The first item in the array is always the rule severity (number or string).\n\n#### Configuration Comment Descriptions\n\nConfiguration comments can include descriptions to explain why the comment is necessary. The description must occur after the configuration and is separated from the configuration by two or more consecutive `-` characters. For example:\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\" -- Here's a description about why this configuration is necessary. */\n```\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\"\n    --------\n    Here's a description about why this configuration is necessary. */\n```\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\"\n * --------\n * This will not work due to the line above starting with a '*' character.\n */\n```\n\n### Using configuration files\n\nTo configure rules inside of a configuration file, use the `rules` key along with an error level and any options you want to use. For example:\n\n``` language-json\n{\n    \"rules\": {\n        \"eqeqeq\": \"off\",\n        \"curly\": \"error\",\n        \"quotes\": [\"error\", \"double\"]\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\nrules:\n  eqeqeq: off\n  curly: error\n  quotes:\n    - error\n    - double\n```\n\n## Rules from Plugins\n\nTo configure a rule that is defined within a plugin, prefix the rule ID with the plugin name and `/`.\n\nIn a configuration file, for example:\n\n``` language-json\n{\n    \"plugins\": [\n        \"plugin1\"\n    ],\n    \"rules\": {\n        \"eqeqeq\": \"off\",\n        \"curly\": \"error\",\n        \"quotes\": [\"error\", \"double\"],\n        \"plugin1/rule1\": \"error\"\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\nplugins:\n  - plugin1\nrules:\n  eqeqeq: 0\n  curly: error\n  quotes:\n    - error\n    - \"double\"\n  plugin1/rule1: error\n```\n\nIn these configuration files, the rule `plugin1/rule1` comes from the plugin named `plugin1`, which is contained in an npm package named `eslint-plugin-plugin1`.\n\nYou can also use this format with configuration comments, such as:\n\n``` language-js\n/* eslint \"plugin1/rule1\": \"error\" */\n```\n\n**Note:** When specifying rules from plugins, make sure to omit `eslint-plugin-`. ESLint uses only the unprefixed name internally to locate rules.\n\n## Disabling Rules\n\n### Using configuration comments\n\n- **Use with Caution.** Disabling ESLint rules inline should be restricted and used only in situations with a clear and valid reason for doing so. Disabling rules inline should not be the default solution to resolve linting errors.\n- **Document the Reason.** Provide a comment explaining the reason for disabling a particular rule after the `--` section of the comment. This documentation should clarify why the rule is being disabled and why it is necessary in that specific situation.\n- **Temporary Solutions.** If a disable comment is added as a temporary measure to address a pressing issue, create a follow-up task to address the underlying problem adequately. This ensures that the disable comment is revisited and resolved at a later stage.\n- **Code Reviews and Pair Programming.** Encourage team members to review each other’s code regularly. Code reviews can help identify the reasons behind disable comments and ensure that they are used appropriately.\n- **Configurations.** Whenever possible, prefer using ESLint configuration files over disable comments. Configuration files allow for consistent and project-wide rule handling.\n\nTo disable rule warnings in a part of a file, use block comments in the following format:\n\n``` language-js\n/* eslint-disable */\n\nalert('foo');\n\n/* eslint-enable */\n```\n\nYou can also disable or enable warnings for specific rules:\n\n``` language-js\n/* eslint-disable no-alert, no-console */\n\nalert('foo');\nconsole.log('bar');\n\n/* eslint-enable no-alert, no-console */\n```\n\n**Note:** `/* eslint-enable */` without any specific rules listed causes all disabled rules to be re-enabled.\n\nTo disable rule warnings in an entire file, put a `/* eslint-disable */` block comment at the top of the file:\n\n``` language-js\n/* eslint-disable */\n\nalert('foo');\n```\n\nYou can also disable or enable specific rules for an entire file:\n\n``` language-js\n/* eslint-disable no-alert */\n\nalert('foo');\n```\n\nTo ensure that a rule is never applied (regardless of any future enable/disable lines):\n\n``` language-js\n/* eslint no-alert: \"off\" */\n\nalert('foo');\n```\n\nTo disable all rules on a specific line, use a line or block comment in one of the following formats:\n\n``` language-js\nalert('foo'); // eslint-disable-line\n\n// eslint-disable-next-line\nalert('foo');\n\n/* eslint-disable-next-line */\nalert('foo');\n\nalert('foo'); /* eslint-disable-line */\n```\n\nTo disable a specific rule on a specific line:\n\n``` language-js\nalert('foo'); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert('foo');\n\nalert('foo'); /* eslint-disable-line no-alert */\n\n/* eslint-disable-next-line no-alert */\nalert('foo');\n```\n\nTo disable multiple rules on a specific line:\n\n``` language-js\nalert('foo'); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert('foo');\n\nalert('foo'); /* eslint-disable-line no-alert, quotes, semi */\n\n/* eslint-disable-next-line no-alert, quotes, semi */\nalert('foo');\n\n/* eslint-disable-next-line\n  no-alert,\n  quotes,\n  semi\n*/\nalert('foo');\n```\n\nAll of the above methods also work for plugin rules. For example, to disable `eslint-plugin-example`’s `rule-name` rule, combine the plugin’s name (`example`) and the rule’s name (`rule-name`) into `example/rule-name`:\n\n``` language-js\nfoo(); // eslint-disable-line example/rule-name\nfoo(); /* eslint-disable-line example/rule-name */\n```\n\n**Note:** Comments that disable warnings for a portion of a file tell ESLint not to report rule violations for the disabled code. ESLint still parses the entire file, however, so disabled code still needs to be syntactically valid JavaScript.\n\n#### Comment descriptions\n\nConfiguration comments can include descriptions to explain why disabling or re-enabling the rule is necessary. The description must come after the configuration and needs to be separated from the configuration by two or more consecutive `-` characters. For example:\n\n``` language-js\n// eslint-disable-next-line no-console -- Here's a description about why this configuration is necessary.\nconsole.log('hello');\n\n/* eslint-disable-next-line no-console --\n * Here's a very long description about why this configuration is necessary\n * along with some additional information\n**/\nconsole.log('hello');\n```\n\n### Using configuration files\n\nTo disable rules inside of a configuration file for a group of files, use the `overrides` key along with a `files` key. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"overrides\": [\n    {\n      \"files\": [\"*-test.js\",\"*.spec.js\"],\n      \"rules\": {\n        \"no-unused-expressions\": \"off\"\n      }\n    }\n  ]\n}\n```\n\n### Disabling Inline Comments\n\nTo disable all inline config comments, use the `noInlineConfig` setting in your configuration file. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"noInlineConfig\": true\n}\n```\n\nYou can also use the [–no-inline-config](rules../command-line-interface#--no-inline-config) CLI option to disable rule comments, in addition to other in-line configuration.\n\n#### Report unused `eslint-disable` comments\n\nTo report unused `eslint-disable` comments, use the `reportUnusedDisableDirectives` setting. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"reportUnusedDisableDirectives\": true\n}\n```\n\nThis setting is similar to [–report-unused-disable-directives](rules../command-line-interface#--report-unused-disable-directives) and [–report-unused-disable-directives-severity](rules../command-line-interface#--report-unused-disable-directives-severity) CLI options.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/rules](https://eslint.org/docs/latest/use/configure/rules)"
- name: Configure Rules
  id: use/configure/rules/index
  summary: Rules are the core building block of ESLint
  description: "# Configure Rules\n\n## Table of Contents\n\n1.  [Rule Severities](#rule-severities)\n    1.  [Using configuration comments](#using-configuration-comments)\n        1.  [Configuration Comment Descriptions](#configuration-comment-descriptions)\n    2.  [Using configuration files](#using-configuration-files)\n2.  [Rules from Plugins](#rules-from-plugins)\n3.  [Disabling Rules](#disabling-rules)\n    1.  [Using configuration comments](#using-configuration-comments-1)\n        1.  [Comment descriptions](#comment-descriptions)\n    2.  [Using configuration files](#using-configuration-files-1)\n    3.  [Disabling Inline Comments](#disabling-inline-comments)\n        1.  [Report unused eslint-disable comments](#report-unused-eslint-disable-comments)\n\nRules are the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule.\n\nESLint comes with a large number of [built-in rules](index) and you can add more rules through plugins. You can modify which rules your project uses with either configuration comments or configuration files.\n\n## Rule Severities\n\nTo change a rule’s severity, set the rule ID equal to one of these values:\n\n- `\"off\"` or `0` - turn the rule off\n- `\"warn\"` or `1` - turn the rule on as a warning (doesn’t affect exit code)\n- `\"error\"` or `2` - turn the rule on as an error (exit code is 1 when triggered)\n\nRules are typically set to `\"error\"` to enforce compliance with the rule during continuous integration testing, pre-commit checks, and pull request merging because doing so causes ESLint to exit with a non-zero exit code.\n\nIf you don’t want to enforce compliance with a rule but would still like ESLint to report the rule’s violations, set the severity to `\"warn\"`. This is typically used when introducing a new rule that will eventually be set to `\"error\"`, when a rule is flagging something other than a potential buildtime or runtime error (such as an unused variable), or when a rule cannot determine with certainty that a problem has been found (when a rule might have false positives and need manual review).\n\n### Using configuration comments\n\nTo configure rules inside of a file using configuration comments, use a comment in the following format:\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\" */\n```\n\nIn this example, [`eqeqeq`](eqeqeq) is turned off and [`curly`](curly) is turned on as an error. You can also use the numeric equivalent for the rule severity:\n\n``` language-js\n/* eslint eqeqeq: 0, curly: 2 */\n```\n\nThis example is the same as the last example, only it uses the numeric codes instead of the string values. The `eqeqeq` rule is off and the `curly` rule is set to be an error.\n\nIf a rule has additional options, you can specify them using array literal syntax, such as:\n\n``` language-js\n/* eslint quotes: [\"error\", \"double\"], curly: 2 */\n```\n\nThis comment specifies the “double” option for the [`quotes`](quotes) rule. The first item in the array is always the rule severity (number or string).\n\n#### Configuration Comment Descriptions\n\nConfiguration comments can include descriptions to explain why the comment is necessary. The description must occur after the configuration and is separated from the configuration by two or more consecutive `-` characters. For example:\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\" -- Here's a description about why this configuration is necessary. */\n```\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\"\n    --------\n    Here's a description about why this configuration is necessary. */\n```\n\n``` language-js\n/* eslint eqeqeq: \"off\", curly: \"error\"\n * --------\n * This will not work due to the line above starting with a '*' character.\n */\n```\n\n### Using configuration files\n\nTo configure rules inside of a configuration file, use the `rules` key along with an error level and any options you want to use. For example:\n\n``` language-json\n{\n    \"rules\": {\n        \"eqeqeq\": \"off\",\n        \"curly\": \"error\",\n        \"quotes\": [\"error\", \"double\"]\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\nrules:\n  eqeqeq: off\n  curly: error\n  quotes:\n    - error\n    - double\n```\n\n## Rules from Plugins\n\nTo configure a rule that is defined within a plugin, prefix the rule ID with the plugin name and `/`.\n\nIn a configuration file, for example:\n\n``` language-json\n{\n    \"plugins\": [\n        \"plugin1\"\n    ],\n    \"rules\": {\n        \"eqeqeq\": \"off\",\n        \"curly\": \"error\",\n        \"quotes\": [\"error\", \"double\"],\n        \"plugin1/rule1\": \"error\"\n    }\n}\n```\n\nAnd in YAML:\n\n``` language-yaml\n---\nplugins:\n  - plugin1\nrules:\n  eqeqeq: 0\n  curly: error\n  quotes:\n    - error\n    - \"double\"\n  plugin1/rule1: error\n```\n\nIn these configuration files, the rule `plugin1/rule1` comes from the plugin named `plugin1`, which is contained in an npm package named `eslint-plugin-plugin1`.\n\nYou can also use this format with configuration comments, such as:\n\n``` language-js\n/* eslint \"plugin1/rule1\": \"error\" */\n```\n\n**Note:** When specifying rules from plugins, make sure to omit `eslint-plugin-`. ESLint uses only the unprefixed name internally to locate rules.\n\n## Disabling Rules\n\n### Using configuration comments\n\n- **Use with Caution.** Disabling ESLint rules inline should be restricted and used only in situations with a clear and valid reason for doing so. Disabling rules inline should not be the default solution to resolve linting errors.\n- **Document the Reason.** Provide a comment explaining the reason for disabling a particular rule after the `--` section of the comment. This documentation should clarify why the rule is being disabled and why it is necessary in that specific situation.\n- **Temporary Solutions.** If a disable comment is added as a temporary measure to address a pressing issue, create a follow-up task to address the underlying problem adequately. This ensures that the disable comment is revisited and resolved at a later stage.\n- **Code Reviews and Pair Programming.** Encourage team members to review each other’s code regularly. Code reviews can help identify the reasons behind disable comments and ensure that they are used appropriately.\n- **Configurations.** Whenever possible, prefer using ESLint configuration files over disable comments. Configuration files allow for consistent and project-wide rule handling.\n\nTo disable rule warnings in a part of a file, use block comments in the following format:\n\n``` language-js\n/* eslint-disable */\n\nalert('foo');\n\n/* eslint-enable */\n```\n\nYou can also disable or enable warnings for specific rules:\n\n``` language-js\n/* eslint-disable no-alert, no-console */\n\nalert('foo');\nconsole.log('bar');\n\n/* eslint-enable no-alert, no-console */\n```\n\n**Note:** `/* eslint-enable */` without any specific rules listed causes all disabled rules to be re-enabled.\n\nTo disable rule warnings in an entire file, put a `/* eslint-disable */` block comment at the top of the file:\n\n``` language-js\n/* eslint-disable */\n\nalert('foo');\n```\n\nYou can also disable or enable specific rules for an entire file:\n\n``` language-js\n/* eslint-disable no-alert */\n\nalert('foo');\n```\n\nTo ensure that a rule is never applied (regardless of any future enable/disable lines):\n\n``` language-js\n/* eslint no-alert: \"off\" */\n\nalert('foo');\n```\n\nTo disable all rules on a specific line, use a line or block comment in one of the following formats:\n\n``` language-js\nalert('foo'); // eslint-disable-line\n\n// eslint-disable-next-line\nalert('foo');\n\n/* eslint-disable-next-line */\nalert('foo');\n\nalert('foo'); /* eslint-disable-line */\n```\n\nTo disable a specific rule on a specific line:\n\n``` language-js\nalert('foo'); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert('foo');\n\nalert('foo'); /* eslint-disable-line no-alert */\n\n/* eslint-disable-next-line no-alert */\nalert('foo');\n```\n\nTo disable multiple rules on a specific line:\n\n``` language-js\nalert('foo'); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert('foo');\n\nalert('foo'); /* eslint-disable-line no-alert, quotes, semi */\n\n/* eslint-disable-next-line no-alert, quotes, semi */\nalert('foo');\n\n/* eslint-disable-next-line\n  no-alert,\n  quotes,\n  semi\n*/\nalert('foo');\n```\n\nAll of the above methods also work for plugin rules. For example, to disable `eslint-plugin-example`’s `rule-name` rule, combine the plugin’s name (`example`) and the rule’s name (`rule-name`) into `example/rule-name`:\n\n``` language-js\nfoo(); // eslint-disable-line example/rule-name\nfoo(); /* eslint-disable-line example/rule-name */\n```\n\n**Note:** Comments that disable warnings for a portion of a file tell ESLint not to report rule violations for the disabled code. ESLint still parses the entire file, however, so disabled code still needs to be syntactically valid JavaScript.\n\n#### Comment descriptions\n\nConfiguration comments can include descriptions to explain why disabling or re-enabling the rule is necessary. The description must come after the configuration and needs to be separated from the configuration by two or more consecutive `-` characters. For example:\n\n``` language-js\n// eslint-disable-next-line no-console -- Here's a description about why this configuration is necessary.\nconsole.log('hello');\n\n/* eslint-disable-next-line no-console --\n * Here's a very long description about why this configuration is necessary\n * along with some additional information\n**/\nconsole.log('hello');\n```\n\n### Using configuration files\n\nTo disable rules inside of a configuration file for a group of files, use the `overrides` key along with a `files` key. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"overrides\": [\n    {\n      \"files\": [\"*-test.js\",\"*.spec.js\"],\n      \"rules\": {\n        \"no-unused-expressions\": \"off\"\n      }\n    }\n  ]\n}\n```\n\n### Disabling Inline Comments\n\nTo disable all inline config comments, use the `noInlineConfig` setting in your configuration file. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"noInlineConfig\": true\n}\n```\n\nYou can also use the [–no-inline-config](../rules../command-line-interface#--no-inline-config) CLI option to disable rule comments, in addition to other in-line configuration.\n\n#### Report unused `eslint-disable` comments\n\nTo report unused `eslint-disable` comments, use the `reportUnusedDisableDirectives` setting. For example:\n\n``` language-json\n{\n  \"rules\": {...},\n  \"reportUnusedDisableDirectives\": true\n}\n```\n\nThis setting is similar to [–report-unused-disable-directives](../rules../command-line-interface#--report-unused-disable-directives) and [–report-unused-disable-directives-severity](../rules../command-line-interface#--report-unused-disable-directives-severity) CLI options.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/rules/](https://eslint.org/docs/latest/use/configure/rules/)"
- name: consistent-return
  id: rules/consistent-return
  summary: Unlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values
  description: "# consistent-return\n\nRequire `return` statements to either always or never specify values\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [treatUndefinedAsUnspecified](#treatundefinedasunspecified)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n- it does not execute a `return` statement before it exits\n- it executes `return` which does not specify a value explicitly\n- it executes `return undefined`\n- it executes `return void` followed by an expression (for example, a function call)\n- it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n- a code path through the function returns a Boolean value `true`\n- another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n``` language-js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBkb1NvbWV0aGluZyhjb25kaXRpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nRWxzZShjb25kaXRpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomethingElse(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBkb1NvbWV0aGluZyhjb25kaXRpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEZvbygpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRm9vKSkge1xuICAgICAgICByZXR1cm4gbmV3IEZvbygpO1xuICAgIH1cblxuICAgIHRoaXMuYSA9IDA7XG59In0=)\n\n``` language-js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n- `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOiBbXCJlcnJvclwiLCB7IFwidHJlYXRVbmRlZmluZWRBc1Vuc3BlY2lmaWVkXCI6IGZhbHNlIH1dKi9cblxuZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB2b2lkIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIC8vIG5vIHJldHVybiBzdGF0ZW1lbnRcbn1cblxuZnVuY3Rpb24gYmFyKGNvbmRpdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gbm8gcmV0dXJuIHN0YXRlbWVudFxufSJ9)\n\n``` language-js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOiBbXCJlcnJvclwiLCB7IFwidHJlYXRVbmRlZmluZWRBc1Vuc3BlY2lmaWVkXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGJhcihjb25kaXRpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufSJ9)\n\n``` language-js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOiBbXCJlcnJvclwiLCB7IFwidHJlYXRVbmRlZmluZWRBc1Vuc3BlY2lmaWVkXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgLy8gbm8gcmV0dXJuIHN0YXRlbWVudFxufVxuXG5mdW5jdGlvbiBiYXIoY29uZGl0aW9uKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBubyByZXR1cm4gc3RhdGVtZW50XG59In0=)\n\n``` language-js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/consistent-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/consistent-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/consistent-return](https://eslint.org/docs/latest/rules/consistent-return)"
- name: consistent-this
  id: rules/consistent-this
  summary: It is often necessary to capture the current execution context in order to make it available subsequently
  description: "# consistent-this\n\nEnforce consistent naming when capturing the current execution context\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIt is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks:\n\n``` language-js\nvar that = this;\njQuery('li').click(function (event) {\n    // here, \"this\" is the HTMLElement where the click event occurred\n    that.setFoo(42);\n});\n```\n\nThere are many commonly used aliases for `this` such as `that`, `self` or `me`. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.\n\n## Rule Details\n\nThis rule enforces two things about variables with the designated alias names for `this`:\n\n- If a variable with a designated name is declared, it *must* be either initialized (in the declaration) or assigned (in the same scope as the declaration) the value `this`.\n- If a variable is initialized or assigned the value `this`, the name of the variable *must* be a designated alias.\n\n## Options\n\nThis rule has one or more string options:\n\n- designated alias names for `this` (default `\"that\"`)\n\nExamples of **incorrect** code for this rule with the default `\"that\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtdGhpczogW1wiZXJyb3JcIiwgXCJ0aGF0XCJdKi9cblxudmFyIHRoYXQgPSA0MjtcblxudmFyIHNlbGYgPSB0aGlzO1xuXG50aGF0ID0gNDI7XG5cbnNlbGYgPSB0aGlzOyJ9)\n\n``` language-js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that = 42;\n\nvar self = this;\n\nthat = 42;\n\nself = this;\n```\n\nExamples of **correct** code for this rule with the default `\"that\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtdGhpczogW1wiZXJyb3JcIiwgXCJ0aGF0XCJdKi9cblxudmFyIHRoYXQgPSB0aGlzO1xuXG52YXIgc2VsZiA9IDQyO1xuXG52YXIgc2VsZjtcblxudGhhdCA9IHRoaXM7XG5cbmZvby5iYXIgPSB0aGlzOyJ9)\n\n``` language-js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that = this;\n\nvar self = 42;\n\nvar self;\n\nthat = this;\n\nfoo.bar = this;\n```\n\nExamples of **incorrect** code for this rule with the default `\"that\"` option, if the variable is not initialized:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtdGhpczogW1wiZXJyb3JcIiwgXCJ0aGF0XCJdKi9cblxudmFyIHRoYXQ7XG5mdW5jdGlvbiBmKCkge1xuICAgIHRoYXQgPSB0aGlzO1xufSJ9)\n\n``` language-js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that;\nfunction f() {\n    that = this;\n}\n```\n\nExamples of **correct** code for this rule with the default `\"that\"` option, if the variable is not initialized:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnNpc3RlbnQtdGhpczogW1wiZXJyb3JcIiwgXCJ0aGF0XCJdKi9cblxudmFyIHRoYXQ7XG50aGF0ID0gdGhpcztcblxudmFyIGZvbywgdGhhdDtcbmZvbyA9IDQyO1xudGhhdCA9IHRoaXM7In0=)\n\n``` language-js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that;\nthat = this;\n\nvar foo, that;\nfoo = 42;\nthat = this;\n```\n\n## When Not To Use It\n\nIf you need to capture nested context, `consistent-this` is going to be problematic. Code of that nature is usually difficult to read and maintain and you should consider refactoring it.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/consistent-this.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/consistent-this.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/consistent-this](https://eslint.org/docs/latest/rules/consistent-this)"
- name: constructor-super
  id: rules/constructor-super
  summary: Constructors of derived classes must call super()
  description: "# constructor-super\n\nRequire `super()` calls in constructors\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](constructor-super../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Handled by TypeScript](#handled_by_typescript)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nConstructors of derived classes must call `super()`. Constructors of non derived classes must not call `super()`. If this is not observed, the JavaScript engine will raise a runtime error.\n\nThis rule checks whether or not there is a valid `super()` call.\n\n## Rule Details\n\nThis rule is aimed to flag invalid/missing `super()` calls.\n\nThis is a syntax error because there is no `extends` clause in the class:\n\n``` language-js\nclass A {\n    constructor() {\n        super();\n    }\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnN0cnVjdG9yLXN1cGVyOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEEgZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfSAgLy8gV291bGQgdGhyb3cgYSBSZWZlcmVuY2VFcnJvci5cbn1cblxuLy8gQ2xhc3NlcyB3aGljaCBpbmhlcml0cyBmcm9tIGEgbm9uIGNvbnN0cnVjdG9yIGFyZSBhbHdheXMgcHJvYmxlbXMuXG5jbGFzcyBDIGV4dGVuZHMgbnVsbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7ICAvLyBXb3VsZCB0aHJvdyBhIFR5cGVFcnJvci5cbiAgICB9XG59XG5cbmNsYXNzIEQgZXh0ZW5kcyBudWxsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfSAgLy8gV291bGQgdGhyb3cgYSBSZWZlcmVuY2VFcnJvci5cbn0ifQ==)\n\n``` language-js\n/*eslint constructor-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A extends B {\n    constructor() { }  // Would throw a ReferenceError.\n}\n\n// Classes which inherits from a non constructor are always problems.\nclass C extends null {\n    constructor() {\n        super();  // Would throw a TypeError.\n    }\n}\n\nclass D extends null {\n    constructor() { }  // Would throw a ReferenceError.\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGNvbnN0cnVjdG9yLXN1cGVyOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEEge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG59XG5cbmNsYXNzIEIgZXh0ZW5kcyBDIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint constructor-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() { }\n}\n\nclass B extends C {\n    constructor() {\n        super();\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about invalid/missing `super()` callings in constructors, you can safely disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.24.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/constructor-super.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/constructor-super.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/constructor-super](https://eslint.org/docs/latest/rules/constructor-super)"
- name: Contribute to Core Rules
  id: contribute/core-rules
  summary: The ESLint core rules are the rules included in the ESLint package
  description: "# Contribute to Core Rules\n\n## Table of Contents\n\n1.  [Rule Writing Documentation](#rule-writing-documentation)\n2.  [File Structure](#file-structure)\n3.  [Rule Unit Tests](#rule-unit-tests)\n4.  [Performance Testing](#performance-testing)\n5.  [Rule Naming Conventions](#rule-naming-conventions)\n\nThe ESLint core rules are the rules included in the ESLint package.\n\n## Rule Writing Documentation\n\nFor full reference information on writing rules, refer to [Custom Rules](core-rules../extend/custom-rules). Both custom rules and core rules have the same API. The primary difference between core and custom rules are:\n\n1.  Core rules are included in the `eslint` package.\n2.  Core rules must adhere to the conventions documented on this page.\n\n## File Structure\n\nEach core rule in ESLint has three files named with its identifier (for example, `no-extra-semi`).\n\n- in the `lib/rules` directory: a source file (for example, `no-extra-semi.js`)\n- in the `tests/lib/rules` directory: a test file (for example, `no-extra-semi.js`)\n- in the `docs/src/rules` directory: a Markdown documentation file (for example, `no-extra-semi.md`)\n\n**Important:** If you submit a core rule to the ESLint repository, you **must** follow the conventions explained below.\n\nHere is the basic format of the source file for a rule:\n\n``` language-js\n/**\n * @fileoverview Rule to disallow unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary semicolons\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\n        },\n        fixable: \"code\",\n        schema: [] // no options\n    },\n    create: function(context) {\n        return {\n            // callback functions\n        };\n    }\n};\n```\n\n## Rule Unit Tests\n\nEach bundled rule for ESLint core must have a set of unit tests submitted with it to be accepted. The test file is named the same as the source file but lives in `tests/lib/`. For example, if the rule source file is `lib/rules/foo.js` then the test file should be `tests/lib/rules/foo.js`.\n\nESLint provides the [`RuleTester`](core-rules../integrate/nodejs-api#ruletester) utility to make it easy to write tests for rules.\n\n## Performance Testing\n\nTo keep the linting process efficient and unobtrusive, it is useful to verify the performance impact of new rules or modifications to existing rules.\n\nTo learn how to profile the performance of individual rules, refer to [Profile Rule Performance](core-rules../extend/custom-rules#profile-rule-performance) in the custom rules documentation.\n\nWhen developing in the ESLint core repository, the `npm run perf` command gives a high-level overview of ESLint running time with all core rules enabled.\n\n``` language-bash\n$ git checkout main\nSwitched to branch 'main'\n\n$ npm run perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1394.689313ms\nPerformance Run #2:  1423.295351ms\nPerformance Run #3:  1385.09515ms\nPerformance Run #4:  1382.406982ms\nPerformance Run #5:  1409.68566ms\nPerformance budget ok:  1394.689313ms (limit: 3409.090909090909ms)\n\n$ git checkout my-rule-branch\nSwitched to branch 'my-rule-branch'\n\n$ npm run perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1443.736547ms\nPerformance Run #2:  1419.193291ms\nPerformance Run #3:  1436.018228ms\nPerformance Run #4:  1473.605485ms\nPerformance Run #5:  1457.455283ms\nPerformance budget ok:  1443.736547ms (limit: 3409.090909090909ms)\n```\n\n## Rule Naming Conventions\n\nThe rule naming conventions for ESLint are as follows:\n\n- Use dashes between words.\n- If your rule only disallows something, prefix it with `no-` such as `no-eval` for disallowing `eval()` and `no-debugger` for disallowing `debugger`.\n- If your rule is enforcing the inclusion of something, use a short name without a special prefix.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/core-rules](https://eslint.org/docs/latest/contribute/core-rules)"
- name: Contribute to ESLint
  id: contribute/index
  summary: One of the great things about open source projects is that anyone can contribute in any number of meaningful ways
  description: "# Contribute to ESLint\n\n## Table of Contents\n\n1.  [Read the Code of Conduct](#read-the-code-of-conduct)\n2.  [Report Bugs](#report-bugs)\n3.  [Propose a New Rule](#propose-a-new-rule)\n4.  [Propose a Rule Change](#propose-a-rule-change)\n5.  [Request a Change](#request-a-change)\n6.  [Architecture](#architecture)\n7.  [Set up a Development Environment](#set-up-a-development-environment)\n8.  [Run the Tests](#run-the-tests)\n9.  [Work on Issues](#work-on-issues)\n10. [Submit a Pull Request](#submit-a-pull-request)\n11. [Contribute to Core Rules](#contribute-to-core-rules)\n12. [Governance](#governance)\n13. [Report a Security Vulnerability](#report-a-security-vulnerability)\n14. [Sign the CLA](#sign-the-cla)\n\nOne of the great things about open source projects is that anyone can contribute in any number of meaningful ways. ESLint couldn’t exist without the help of the many contributors it’s had since the project began, and we want you to feel like you can contribute and make a difference as well.\n\nThis guide is intended for anyone who wants to contribute to an ESLint project. Please read it carefully as it answers a lot of the questions many newcomers have when first working with our projects.\n\n## Read the [Code of Conduct](https://eslint.org/conduct)\n\nESLint welcomes contributions from everyone and adheres to the [OpenJS Foundation Code of Conduct](https://eslint.org/conduct). We kindly request that you read over our code of conduct before contributing.\n\n## [Report Bugs](report-bugs)\n\nThink you found a problem? We’d love to hear about it. This section explains how to submit a bug, the type of information we need to properly verify it, and the overall process.\n\n## [Propose a New Rule](propose-new-rule)\n\nWe get a lot of proposals for new rules in ESLint. This section explains how we determine which rules are accepted and what information you should provide to help us evaluate your proposal.\n\n## [Propose a Rule Change](propose-rule-change)\n\nWant to make a change to an existing rule? This section explains the process and how we evaluate such proposals.\n\n## [Request a Change](request-change)\n\nIf you’d like to request a change other than a bug fix or new rule, this section explains that process.\n\n## [Architecture](architecture)\n\nLearn about the architecture of the ESLint project.\n\n## [Set up a Development Environment](development-environment)\n\nDeveloping for ESLint is a bit different than running it on the command line. This section shows you how to set up a development environment and get you ready to write code.\n\n## [Run the Tests](tests)\n\nThere are a lot of unit tests included with ESLint to make sure that we’re keeping on top of code quality. This section explains how to run the unit tests.\n\n## [Work on Issues](work-on-issue)\n\nHave some extra time and want to contribute? This section talks about the process of working on issues.\n\n## [Submit a Pull Request](pull-requests)\n\nWe’re always looking for contributions from the community. This section explains the requirements for pull requests and the process of contributing code.\n\n## [Contribute to Core Rules](core-rules)\n\nThis section explains how to add to the core rules of ESLint.\n\n## [Governance](governance)\n\nDescribes the governance policy for ESLint, including the rights and privileges of individuals inside the project.\n\n## [Report a Security Vulnerability](report-security-vulnerability)\n\nTo report a security vulnerability in ESLint, please create an advisory on Github.\n\n## Sign the CLA\n\nIn order to submit code or documentation to an ESLint project, you will need to electronically sign our Contributor License Agreement. The CLA is the commonly used Apache-style template, and is you giving us permission to use your contribution. You only need to sign the CLA once for any OpenJS Foundation projects that use EasyCLA. You will be asked to sign the CLA in the first pull request you open.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/](https://eslint.org/docs/latest/contribute/)"
- name: Core Concepts
  id: use/core-concepts
  summary: This page contains a high-level overview of some of the core concepts of ESLint
  description: "# Core Concepts\n\n## Table of Contents\n\n1.  [What is ESLint?](#what-is-eslint)\n2.  [Rules](#rules)\n    1.  [Rule Fixes](#rule-fixes)\n    2.  [Rule Suggestions](#rule-suggestions)\n3.  [Configuration Files](#configuration-files)\n4.  [Shareable Configurations](#shareable-configurations)\n5.  [Plugins](#plugins)\n6.  [Parsers](#parsers)\n7.  [Custom Processors](#custom-processors)\n8.  [Formatters](#formatters)\n9.  [Integrations](#integrations)\n10. [CLI & Node.js API](#cli--nodejs-api)\n\nThis page contains a high-level overview of some of the core concepts of ESLint.\n\n## What is ESLint?\n\nESLint is a configurable JavaScript linter. It helps you find and fix problems in your JavaScript code. Problems can be anything from potential runtime bugs, to not following best practices, to styling issues.\n\n## Rules\n\nRules are the core building block of ESLint. A rule validates if your code meets a certain expectation, and what to do if it does not meet that expectation. Rules can also contain additional configuration options specific to that rule.\n\nFor example, the [`semi`](core-concepts../rules/semi) rule lets you specify whether or not JavaScript statements should end with a semicolon (`;`). You can set the rule to either always require semicolons or require that a statement never ends with a semicolon.\n\nESLint contains hundreds of built-in rules that you can use. You can also create custom rules or use rules that others have created with [plugins](#plugins).\n\nFor more information, refer to [Rules](core-concepts../rules/index).\n\n### Rule Fixes\n\nRules may optionally provide fixes for violations that they find. Fixes safely correct the violation without changing application logic.\n\nFixes may be applied automatically with the [`--fix` command line option](command-line-interface#--fix) and via editor extensions.\n\nRules that may provide fixes are marked with 🔧 in [Rules](core-concepts../rules/index).\n\n### Rule Suggestions\n\nRules may optionally provide suggestions in addition to or instead of providing fixes. Suggestions differ from fixes in two ways:\n\n1.  Suggestions may change application logic and so cannot be automatically applied.\n2.  Suggestions cannot be applied through the ESLint CLI and are only available through editor integrations.\n\nRules that may provide suggestions are marked with 💡 in [Rules](core-concepts../rules/index).\n\n## Configuration Files\n\nAn ESLint configuration file is a place where you put the configuration for ESLint in your project. You can include built-in rules, how you want them enforced, plugins with custom rules, shareable configurations, which files you want rules to apply to, and more.\n\nFor more information, refer to [Configuration Files](core-concepts./configure/configuration-files).\n\n## Shareable Configurations\n\nShareable configurations are ESLint configurations that are shared via npm.\n\nOften shareable configurations are used to enforce style guides using ESLint’s built-in rules. For example the sharable configuration [eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base) implements the popular Airbnb JavaScript style guide.\n\nFor more information, refer to [Using a shareable configuration package](core-concepts./configure/configuration-files#using-a-shareable-configuration-package).\n\n## Plugins\n\nAn ESLint plugin is an npm module that can contain a set of ESLint rules, configurations, processors, and environments. Often plugins include custom rules. Plugins can be used to enforce a style guide and support JavaScript extensions (like TypeScript), libraries (like React), and frameworks (Angular).\n\nA popular use case for plugins is to enforce best practices for a framework. For example, [@angular-eslint/eslint-plugin](https://www.npmjs.com/package/@angular-eslint/eslint-plugin) contains best practices for using the Angular framework.\n\nFor more information, refer to [Configure Plugins](core-concepts./configure/plugins).\n\n## Parsers\n\nAn ESLint parser converts code into an abstract syntax tree that ESLint can evaluate. By default, ESLint uses the built-in [Espree](https://github.com/eslint/espree) parser, which is compatible with standard JavaScript runtimes and versions.\n\nCustom parsers let ESLint parse non-standard JavaScript syntax. Often custom parsers are included as part of shareable configurations or plugins, so you don’t have to use them directly.\n\nFor example, [@typescript-eslint/parser](https://www.npmjs.com/package/@typescript-eslint/parser) is a custom parser included in the [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint) project that lets ESLint parse TypeScript code.\n\n## Custom Processors\n\nAn ESLint processor extracts JavaScript code from other kinds of files, then lets ESLint lint the JavaScript code. Alternatively, you can use a processor to manipulate JavaScript code before parsing it with ESLint.\n\nFor example, [eslint-plugin-markdown](https://github.com/eslint/eslint-plugin-markdown) contains a custom processor that lets you lint JavaScript code inside of Markdown code blocks.\n\n## Formatters\n\nAn ESLint formatter controls the appearance of the linting results in the CLI.\n\nFor more information, refer to [Formatters](core-concepts./formatters/index).\n\n## Integrations\n\nOne of the things that makes ESLint such a useful tool is the ecosystem of integrations that surrounds it. For example, many code editors have ESLint extensions that show you the ESLint results of your code in the file as you work so that you don’t need to use the ESLint CLI to see linting results.\n\nFor more information, refer to [Integrations](core-concepts./integrations).\n\n## CLI & Node.js API\n\nThe ESLint CLI is a command line interface that lets you execute linting from the terminal. The CLI has a variety of options that you can pass to its commands.\n\nThe ESLint Node.js API lets you use ESLint programmatically from Node.js code. The API is useful when developing plugins, integrations, and other tools related to ESLint.\n\nUnless you are extending ESLint in some way, you should use the CLI.\n\nFor more information, refer to [Command Line Interface](core-concepts./command-line-interface) and [Node.js API](core-concepts../integrate/nodejs-api).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/core-concepts](https://eslint.org/docs/latest/use/core-concepts)"
- name: Create Plugins
  id: extend/plugins
  summary: An ESLint plugin is an extension for ESLint that adds additional rules and configuration options
  description: "# Create Plugins\n\n## Table of Contents\n\n1.  [Name a Plugin](#name-a-plugin)\n2.  [Create a Plugin](#create-a-plugin)\n    1.  [Rules in Plugins](#rules-in-plugins)\n    2.  [Environments in Plugins](#environments-in-plugins)\n    3.  [Processors in Plugins](#processors-in-plugins)\n    4.  [Configs in Plugins](#configs-in-plugins)\n    5.  [Meta Data in Plugins](#meta-data-in-plugins)\n    6.  [Peer Dependency](#peer-dependency)\n3.  [Testing](#testing)\n4.  [Linting](#linting)\n5.  [Share Plugins](#share-plugins)\n\nAn ESLint plugin is an extension for ESLint that adds additional rules and configuration options. Plugins let you customize your ESLint configuration to enforce rules that are not included in the core ESLint package. Plugins can also provide additional environments, custom processors, and configurations.\n\n## Name a Plugin\n\nEach plugin is an npm module with a name in the format of `eslint-plugin-<plugin-name>`, such as `eslint-plugin-jquery`. You can also use scoped packages in the format of `@<scope>/eslint-plugin-<plugin-name>` such as `@jquery/eslint-plugin-jquery` or even `@<scope>/eslint-plugin` such as `@jquery/eslint-plugin`.\n\n## Create a Plugin\n\nThe easiest way to start creating a plugin is to use the [Yeoman generator](https://www.npmjs.com/package/generator-eslint). The generator will guide you through setting up the skeleton of a plugin.\n\n### Rules in Plugins\n\nPlugins can expose custom rules for use in ESLint. To do so, the plugin must export a `rules` object containing a key-value mapping of rule ID to rule. The rule ID does not have to follow any naming convention (so it can just be `dollar-sign`, for instance). To learn more about creating custom rules in plugins, refer to [Custom Rules](pluginscustom-rules).\n\n``` language-js\nmodule.exports = {\n    rules: {\n        \"dollar-sign\": {\n            create: function (context) {\n                // rule implementation ...\n            }\n        }\n    }\n};\n```\n\nTo use the rule in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the rule name. So if this plugin were named `eslint-plugin-myplugin`, then in your configuration you’d refer to the rule by the name `myplugin/dollar-sign`. Example: `\"rules\": {\"myplugin/dollar-sign\": 2}`.\n\n### Environments in Plugins\n\nPlugins can expose additional environments for use in ESLint. To do so, the plugin must export an `environments` object. The keys of the `environments` object are the names of the different environments provided and the values are the environment settings. For example:\n\n``` language-js\nmodule.exports = {\n    environments: {\n        jquery: {\n            globals: {\n                $: false\n            }\n        }\n    }\n};\n```\n\nThere’s a `jquery` environment defined in this plugin. To use the environment in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the environment name. So if this plugin were named `eslint-plugin-myplugin`, then you would set the environment in your configuration to be `\"myplugin/jquery\"`.\n\nPlugin environments can define the following objects:\n\n1.  `globals` - acts the same `globals` in a configuration file. The keys are the names of the globals and the values are `true` to allow the global to be overwritten and `false` to disallow.\n2.  `parserOptions` - acts the same as `parserOptions` in a configuration file.\n\n### Processors in Plugins\n\nWarning\n\nFile extension-named processors are deprecated and only work in eslintrc-style configuration files. Flat config files do not automatically apply processors; you need to explicitly set the `processor` property.\n\nYou can add processors to plugins by including the processor functions in the `processors` key. For more information on defining custom processors, refer to [Custom Processors](pluginscustom-processors).\n\n``` language-js\nmodule.exports = {\n    processors: {\n        // This processor will be applied to `*.md` files automatically.\n        \".md\": {\n            preprocess(text, filename) { /* ... */ },\n            postprocess(messages, filename) { /* ... */ }\n        }\n        \"processor-name\": {\n            preprocess: function(text, filename) {/* ... */},\n\n            postprocess: function(messages, filename) { /* ... */ },\n        }\n    }\n}\n```\n\n### Configs in Plugins\n\nYou can bundle configurations inside a plugin by specifying them under the `configs` key. This can be useful when you want to bundle a set of custom rules with additional configuration. Multiple configurations are supported per plugin.\n\nYou can include individual rules from a plugin in a config that’s also included in the plugin. In the config, you must specify your plugin name in the `plugins` array as well as any rules you want to enable that are part of the plugin. Any plugin rules must be prefixed with the short or long plugin name.\n\n``` language-js\n// eslint-plugin-myPlugin\n\nmodule.exports = {\n    configs: {\n        myConfig: {\n            plugins: [\"myPlugin\"],\n            env: [\"browser\"],\n            rules: {\n                semi: \"error\",\n                \"myPlugin/my-rule\": \"error\",\n                \"eslint-plugin-myPlugin/another-rule\": \"error\"\n            }\n        },\n        myOtherConfig: {\n            plugins: [\"myPlugin\"],\n            env: [\"node\"],\n            rules: {\n                \"myPlugin/my-rule\": \"off\",\n                \"eslint-plugin-myPlugin/another-rule\": \"off\",\n                \"eslint-plugin-myPlugin/yet-another-rule\": \"error\"\n            }\n        }\n    },\n    rules: {\n        \"my-rule\": {/* rule definition */},\n        \"another-rule\": {/* rule definition */},\n        \"yet-another-rule\": {/* rule definition */}\n    }\n};\n```\n\nPlugins cannot force a specific configuration to be used. Users must manually include a plugin’s configurations in their configuration file.\n\nIf the example plugin above were called `eslint-plugin-myPlugin`, the `myConfig` and `myOtherConfig` configurations would then be usable in a configuration file by extending `\"plugin:myPlugin/myConfig\"` and `\"plugin:myPlugin/myOtherConfig\"`, respectively.\n\n``` language-json\n// .eslintrc.json\n\n{\n    \"extends\": [\"plugin:myPlugin/myConfig\"]\n}\n```\n\n### Meta Data in Plugins\n\nFor easier debugging and more effective caching of plugins, it’s recommended to provide a name and version in a `meta` object at the root of your plugin, like this:\n\n``` language-js\n// preferred location of name and version\nmodule.exports = {\n    meta: {\n        name: \"eslint-plugin-custom\",\n        version: \"1.2.3\"\n    }\n};\n```\n\nThe `meta.name` property should match the npm package name for your plugin and the `meta.version` property should match the npm package version for your plugin. The easiest way to accomplish this is by reading this information from your `package.json`.\n\nAs an alternative, you can also expose `name` and `version` properties at the root of your plugin, such as:\n\n``` language-js\n// alternate location of name and version\nmodule.exports = {\n    name: \"eslint-plugin-custom\",\n    version: \"1.2.3\"\n};\n```\n\nWhile the `meta` object is the preferred way to provide the plugin name and version, this format is also acceptable and is provided for backward compatibility.\n\n### Peer Dependency\n\nTo make clear that the plugin requires ESLint to work correctly, you must declare ESLint as a peer dependency by mentioning it in the `peerDependencies` field of your plugin’s `package.json`.\n\nPlugin support was introduced in ESLint version `0.8.0`. Ensure the `peerDependencies` points to ESLint `0.8.0` or later.\n\n``` language-json\n{\n    \"peerDependencies\": {\n        \"eslint\": \">=0.8.0\"\n    }\n}\n```\n\n## Testing\n\nESLint provides the [`RuleTester`](plugins../integrate/nodejs-api#ruletester) utility to make it easy to test the rules of your plugin.\n\n## Linting\n\nESLint plugins should be linted too! It’s suggested to lint your plugin with the `recommended` configurations of:\n\n- [eslint](https://www.npmjs.com/package/eslint)\n- [eslint-plugin-eslint-plugin](https://www.npmjs.com/package/eslint-plugin-eslint-plugin)\n- [eslint-plugin-n](https://www.npmjs.com/package/eslint-plugin-n)\n\n## Share Plugins\n\nIn order to make your plugin available to the community you have to publish it on npm.\n\nTo make it easy for others to find your plugin, add these [keywords](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#keywords) to your `package.json` file:\n\n- `eslint`\n- `eslintplugin`\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/plugins](https://eslint.org/docs/latest/extend/plugins)"
- name: curly
  id: rules/curly
  summary: JavaScript allows the omission of curly braces when a block contains only one statement
  description: "# curly\n\nEnforce consistent brace style for all control statements\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](curly../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [all](#all)\n    2.  [multi](#multi)\n    3.  [multi-line](#multi-line)\n    4.  [multi-or-nest](#multi-or-nest)\n    5.  [consistent](#consistent)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nJavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to *never* omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity. So the following:\n\n``` language-js\nif (foo) foo++;\n```\n\nCan be rewritten as:\n\n``` language-js\nif (foo) {\n    foo++;\n}\n```\n\nThere are, however, some who prefer to only use braces when there is more than one statement to be executed.\n\n## Rule Details\n\nThis rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.\n\n## Options\n\n### all\n\nExamples of **incorrect** code for the default `\"all\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBcImVycm9yXCIqL1xuXG5pZiAoZm9vKSBmb28rKztcblxud2hpbGUgKGJhcilcbiAgICBiYXooKTtcblxuaWYgKGZvbykge1xuICAgIGJheigpO1xufSBlbHNlIHF1eCgpOyJ9)\n\n``` language-js\n/*eslint curly: \"error\"*/\n\nif (foo) foo++;\n\nwhile (bar)\n    baz();\n\nif (foo) {\n    baz();\n} else qux();\n```\n\nExamples of **correct** code for the default `\"all\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBcImVycm9yXCIqL1xuXG5pZiAoZm9vKSB7XG4gICAgZm9vKys7XG59XG5cbndoaWxlIChiYXIpIHtcbiAgICBiYXooKTtcbn1cblxuaWYgKGZvbykge1xuICAgIGJheigpO1xufSBlbHNlIHtcbiAgICBxdXgoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint curly: \"error\"*/\n\nif (foo) {\n    foo++;\n}\n\nwhile (bar) {\n    baz();\n}\n\nif (foo) {\n    baz();\n} else {\n    qux();\n}\n```\n\n### multi\n\nBy default, this rule warns whenever `if`, `else`, `for`, `while`, or `do` are used without block statements as their body. However, you can specify that block statements should be used only when there are multiple statements in the block and warn when there is only one statement in the block.\n\nExamples of **incorrect** code for the `\"multi\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpXCJdKi9cblxuaWYgKGZvbykge1xuICAgIGZvbysrO1xufVxuXG5pZiAoZm9vKSBiYXIoKTtcbmVsc2Uge1xuICAgIGZvbysrO1xufVxuXG53aGlsZSAodHJ1ZSkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbmZvciAodmFyIGk9MDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) {\n    foo++;\n}\n\nif (foo) bar();\nelse {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (var i=0; i < items.length; i++) {\n    doSomething();\n}\n```\n\nExamples of **correct** code for the `\"multi\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpXCJdKi9cblxuaWYgKGZvbykgZm9vKys7XG5cbmVsc2UgZm9vKCk7XG5cbndoaWxlICh0cnVlKSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbiAgICBkb1NvbWV0aGluZ0Vsc2UoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) foo++;\n\nelse foo();\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n### multi-line\n\nAlternatively, you can relax the rule to allow brace-less single-line `if`, `else if`, `else`, `for`, `while`, or `do`, while still enforcing the use of curly braces for other instances.\n\nExamples of **incorrect** code for the `\"multi-line\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpLWxpbmVcIl0qL1xuXG5pZiAoZm9vKVxuICBkb1NvbWV0aGluZygpO1xuZWxzZVxuICBkb1NvbWV0aGluZ0Vsc2UoKTtcblxuaWYgKGZvbykgZm9vKFxuICBiYXIsXG4gIGJheik7In0=)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo)\n  doSomething();\nelse\n  doSomethingElse();\n\nif (foo) foo(\n  bar,\n  baz);\n```\n\nExamples of **correct** code for the `\"multi-line\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpLWxpbmVcIl0qL1xuXG5pZiAoZm9vKSBmb28rKzsgZWxzZSBkb1NvbWV0aGluZygpO1xuXG5pZiAoZm9vKSBmb28rKztcbmVsc2UgaWYgKGJhcikgYmF6KClcbmVsc2UgZG9Tb21ldGhpbmcoKTtcblxuZG8gc29tZXRoaW5nKCk7XG53aGlsZSAoZm9vKTtcblxud2hpbGUgKGZvb1xuICAmJiBiYXIpIGJheigpO1xuXG5pZiAoZm9vKSB7XG4gICAgZm9vKys7XG59XG5cbmlmIChmb28pIHsgZm9vKys7IH1cblxud2hpbGUgKHRydWUpIHtcbiAgICBkb1NvbWV0aGluZygpO1xuICAgIGRvU29tZXRoaW5nRWxzZSgpO1xufSJ9)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo) foo++; else doSomething();\n\nif (foo) foo++;\nelse if (bar) baz()\nelse doSomething();\n\ndo something();\nwhile (foo);\n\nwhile (foo\n  && bar) baz();\n\nif (foo) {\n    foo++;\n}\n\nif (foo) { foo++; }\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n### multi-or-nest\n\nYou can use another configuration that forces brace-less `if`, `else if`, `else`, `for`, `while`, or `do` if their body contains only one single-line statement. And forces braces in all other cases.\n\nExamples of **incorrect** code for the `\"multi-or-nest\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpLW9yLW5lc3RcIl0qL1xuXG5pZiAoIWZvbylcbiAgICBmb28gPSB7XG4gICAgICAgIGJhcjogYmF6LFxuICAgICAgICBxdXg6IGZvb1xuICAgIH07XG5cbndoaWxlICh0cnVlKVxuICBpZihmb28pXG4gICAgICBkb1NvbWV0aGluZygpO1xuICBlbHNlXG4gICAgICBkb1NvbWV0aGluZ0Vsc2UoKTtcblxuaWYgKGZvbykge1xuICAgIGZvbysrO1xufVxuXG53aGlsZSAodHJ1ZSkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbmZvciAodmFyIGkgPSAwOyBmb287IGkrKykge1xuICAgIGRvU29tZXRoaW5nKCk7XG59In0=)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo)\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n\nwhile (true)\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n\nif (foo) {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (var i = 0; foo; i++) {\n    doSomething();\n}\n```\n\nExamples of **correct** code for the `\"multi-or-nest\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpLW9yLW5lc3RcIl0qL1xuXG5pZiAoIWZvbykge1xuICAgIGZvbyA9IHtcbiAgICAgICAgYmFyOiBiYXosXG4gICAgICAgIHF1eDogZm9vXG4gICAgfTtcbn1cblxud2hpbGUgKHRydWUpIHtcbiAgaWYoZm9vKVxuICAgICAgZG9Tb21ldGhpbmcoKTtcbiAgZWxzZVxuICAgICAgZG9Tb21ldGhpbmdFbHNlKCk7XG59XG5cbmlmIChmb28pXG4gICAgZm9vKys7XG5cbndoaWxlICh0cnVlKVxuICAgIGRvU29tZXRoaW5nKCk7XG5cbmZvciAodmFyIGkgPSAwOyBmb287IGkrKylcbiAgICBkb1NvbWV0aGluZygpOyJ9)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo) {\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n}\n\nwhile (true) {\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n}\n\nif (foo)\n    foo++;\n\nwhile (true)\n    doSomething();\n\nfor (var i = 0; foo; i++)\n    doSomething();\n```\n\nFor single-line statements preceded by a comment, braces are allowed but not required.\n\nExamples of additional **correct** code for the `\"multi-or-nest\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpLW9yLW5lc3RcIl0qL1xuXG5pZiAoZm9vKVxuICAgIC8vIHNvbWUgY29tbWVudFxuICAgIGJhcigpO1xuXG5pZiAoZm9vKSB7XG4gICAgLy8gc29tZSBjb21tZW50XG4gICAgYmFyKCk7XG59In0=)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (foo)\n    // some comment\n    bar();\n\nif (foo) {\n    // some comment\n    bar();\n}\n```\n\n### consistent\n\nWhen using any of the `multi*` options, you can add an option to enforce all bodies of a `if`, `else if` and `else` chain to be with or without braces.\n\nExamples of **incorrect** code for the `\"multi\", \"consistent\"` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpXCIsIFwiY29uc2lzdGVudFwiXSovXG5cbmlmIChmb28pIHtcbiAgICBiYXIoKTtcbiAgICBiYXooKTtcbn0gZWxzZVxuICAgIGJ1eigpO1xuXG5pZiAoZm9vKVxuICAgIGJhcigpO1xuZWxzZSBpZiAoZmFhKVxuICAgIGJvcigpO1xuZWxzZSB7XG4gICAgb3RoZXIoKTtcbiAgICB0aGluZ3MoKTtcbn1cblxuaWYgKHRydWUpXG4gICAgZm9vKCk7XG5lbHNlIHtcbiAgICBiYXooKTtcbn1cblxuaWYgKGZvbykge1xuICAgIGZvbysrO1xufSJ9)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else\n    buz();\n\nif (foo)\n    bar();\nelse if (faa)\n    bor();\nelse {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse {\n    baz();\n}\n\nif (foo) {\n    foo++;\n}\n```\n\nExamples of **correct** code for the `\"multi\", \"consistent\"` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGN1cmx5OiBbXCJlcnJvclwiLCBcIm11bHRpXCIsIFwiY29uc2lzdGVudFwiXSovXG5cbmlmIChmb28pIHtcbiAgICBiYXIoKTtcbiAgICBiYXooKTtcbn0gZWxzZSB7XG4gICAgYnV6KCk7XG59XG5cbmlmIChmb28pIHtcbiAgICBiYXIoKTtcbn0gZWxzZSBpZiAoZmFhKSB7XG4gICAgYm9yKCk7XG59IGVsc2Uge1xuICAgIG90aGVyKCk7XG4gICAgdGhpbmdzKCk7XG59XG5cbmlmICh0cnVlKVxuICAgIGZvbygpO1xuZWxzZVxuICAgIGJheigpO1xuXG5pZiAoZm9vKVxuICAgIGZvbysrO1xuIn0=)\n\n``` language-js\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else {\n    buz();\n}\n\nif (foo) {\n    bar();\n} else if (faa) {\n    bor();\n} else {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse\n    baz();\n\nif (foo)\n    foo++;\n```\n\n## When Not To Use It\n\nIf you have no strict conventions about when to use block statements and when not to, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/curly.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/curly.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/curly](https://eslint.org/docs/latest/rules/curly)"
- name: Custom Formatters
  id: extend/custom-formatters
  summary: Custom formatters let you display linting results in a format that best fits your needs, whether that’s in a specific file format, a certain display style, or a format optimized for a particular tool
  description: "# Custom Formatters\n\n## Table of Contents\n\n1.  [Creating a Custom Formatter](#creating-a-custom-formatter)\n    1.  [The results Argument](#the-results-argument)\n        1.  [The result Object](#the-result-object)\n    2.  [The context Argument](#the-context-argument)\n    3.  [Passing Arguments to Formatters](#passing-arguments-to-formatters)\n        1.  [Using Environment Variables](#using-environment-variables)\n        2.  [Complex Argument Passing](#complex-argument-passing)\n    4.  [Formatting for Terminals](#formatting-for-terminals)\n2.  [Packaging a Custom Formatter](#packaging-a-custom-formatter)\n3.  [Examples](#examples)\n    1.  [Summary Formatter](#summary-formatter)\n    2.  [Detailed Formatter](#detailed-formatter)\n\nCustom formatters let you display linting results in a format that best fits your needs, whether that’s in a specific file format, a certain display style, or a format optimized for a particular tool.\n\nESLint also has [built-in formatters](custom-formatters../use/formatters/index) that you can use.\n\nYou can include custom formatters in your project directly or create an npm package to distribute them separately.\n\n## Creating a Custom Formatter\n\nEach formatter is a function that receives a `results` object and a `context` as arguments and returns a string. For example, the following is how the built-in [JSON formatter](custom-formatters../use/formatters/index#json) is implemented:\n\n``` language-js\n//my-awesome-formatter.js\nmodule.exports = function(results, context) {\n    return JSON.stringify(results, null, 2);\n};\n```\n\nA formatter can also be an async function (from ESLint v8.4.0), the following shows a simple example:\n\n``` language-js\n//my-awesome-formatter.js\nmodule.exports = async function(results) {\n    const formatted = await asyncTask();\n    return formatted;\n};\n```\n\nTo run ESLint with this formatter, you can use the [`-f` (or `--format`)](custom-formatters../use/command-line-interface#-f---format) command line flag. You must begin the path to a locally defined custom formatter with a period (`.`), such as `./my-awesome-formatter.js` or `../formatters/my-awesome-formatter.js`.\n\n``` language-bash\neslint -f ./my-awesome-formatter.js src/\n```\n\nThe remainder of this section contains reference information on how to work with custom formatter functions.\n\n### The `results` Argument\n\nThe `results` object passed into a formatter is an array of [`result`](#the-result-object) objects containing the linting results for individual files. Here’s an example output:\n\n``` language-js\n[\n    {\n        filePath: \"/path/to/a/file.js\",\n        messages: [\n            {\n                ruleId: \"curly\",\n                severity: 2,\n                message: \"Expected { after 'if' condition.\",\n                line: 2,\n                column: 1,\n                nodeType: \"IfStatement\"\n            },\n            {\n                ruleId: \"no-process-exit\",\n                severity: 2,\n                message: \"Don't use process.exit(); throw an error instead.\",\n                line: 3,\n                column: 1,\n                nodeType: \"CallExpression\"\n            }\n        ],\n        errorCount: 2,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0,\n        source:\n            \"var err = doStuff();\\nif (err) console.log('failed tests: ' + err);\\nprocess.exit(1);\\n\"\n    },\n    {\n        filePath: \"/path/to/Gruntfile.js\",\n        messages: [],\n        errorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    }\n]\n```\n\n#### The `result` Object\n\nEach object in the `results` array is a `result` object. Each `result` object contains the path of the file that was linted and information about linting issues that were encountered. Here are the properties available on each `result` object:\n\n- **filePath**: The absolute path to the file that was linted.\n- **messages**: An array of [`message`](#the-message-object) objects. See below for more info about messages.\n- **errorCount**: The number of errors for the given file.\n- **warningCount**: The number of warnings for the given file.\n- **source**: The source code for the given file. This property is omitted if this file has no errors/warnings or if the `output` property is present.\n- **output**: The source code for the given file with as many fixes applied as possible. This property is omitted if no fix is available.\n\n##### The `message` Object\n\nEach `message` object contains information about the ESLint rule that was triggered by some source code. The properties available on each `message` object are:\n\n- **ruleId**: the ID of the rule that produced the error or warning.\n- **severity**: the severity of the failure, `1` for warnings and `2` for errors.\n- **message**: the human readable description of the error.\n- **line**: the line where the issue is located.\n- **column**: the column where the issue is located.\n- **nodeType**: the type of the node in the [AST](https://github.com/estree/estree/blob/master/es5.md#node-objects)\n\n### The `context` Argument\n\nThe formatter function receives a `context` object as its second argument. The object has the following properties:\n\n- `cwd`: The current working directory. This value comes from the `cwd` constructor option of the [ESLint](custom-formatters../integrate/nodejs-api#-new-eslintoptions) class.\n- `maxWarningsExceeded` (optional): If `--max-warnings` was set and the number of warnings exceeded the limit, this property’s value is an object containing two properties:\n  - `maxWarnings`: the value of the `--max-warnings` option\n  - `foundWarnings`: the number of lint warnings\n- `rulesMeta`: The `meta` property values of rules. See the [Custom Rules](custom-formatterscustom-rules) page for more information about rules.\n\nFor example, here’s what the object would look like if the rule `no-extra-semi` had been run:\n\n``` language-js\n{\n    cwd: \"/path/to/cwd\",\n    maxWarningsExceeded: {\n        maxWarnings: 5,\n        foundWarnings: 6\n    },\n    rulesMeta: {\n        \"no-extra-semi\": {\n            type: \"suggestion\",\n            docs: {\n                description: \"disallow unnecessary semicolons\",\n                recommended: true,\n                url: \"https://eslint.org/docs/rules/no-extra-semi\"\n            },\n            fixable: \"code\",\n            schema: [],\n            messages: {\n                unexpected: \"Unnecessary semicolon.\"\n            }\n        }\n    },\n}\n```\n\n**Note:** if a linting is executed by the deprecated `CLIEngine` class, the `context` argument may be a different value because it is up to the API users. Please check whether the `context` argument is an expected value or not if you want to support legacy environments.\n\n### Passing Arguments to Formatters\n\nWhile formatter functions do not receive arguments in addition to the results object and the context, it is possible to pass additional data into custom formatters using the methods described below.\n\n#### Using Environment Variables\n\nCustom formatters have access to environment variables and so can change their behavior based on environment variable data.\n\nHere’s an example that uses a `FORMATTER_SKIP_WARNINGS` environment variable to determine whether to show warnings in the results:\n\n``` language-js\nmodule.exports = function(results) {\n    var skipWarnings = process.env.FORMATTER_SKIP_WARNINGS === \"true\";\n\n    var results = results || [];\n    var summary = results.reduce(\n        function(seq, current) {\n            current.messages.forEach(function(msg) {\n                var logMessage = {\n                    filePath: current.filePath,\n                    ruleId: msg.ruleId,\n                    message: msg.message,\n                    line: msg.line,\n                    column: msg.column\n                };\n\n                if (msg.severity === 1) {\n                    logMessage.type = \"warning\";\n                    seq.warnings.push(logMessage);\n                }\n                if (msg.severity === 2) {\n                    logMessage.type = \"error\";\n                    seq.errors.push(logMessage);\n                }\n            });\n            return seq;\n        },\n        {\n            errors: [],\n            warnings: []\n        }\n    );\n\n    if (summary.errors.length > 0 || summary.warnings.length > 0) {\n        var warnings = !skipWarnings ? summary.warnings : []; // skip the warnings in that case\n\n        var lines = summary.errors\n            .concat(warnings)\n            .map(function(msg) {\n                return (\n                    \"\\n\" +\n                    msg.type +\n                    \" \" +\n                    msg.ruleId +\n                    \"\\n  \" +\n                    msg.filePath +\n                    \":\" +\n                    msg.line +\n                    \":\" +\n                    msg.column\n                );\n            })\n            .join(\"\\n\");\n\n        return lines + \"\\n\";\n    }\n};\n```\n\nYou would run ESLint with this custom formatter and an environment variable set like this:\n\n``` language-bash\nFORMATTER_SKIP_WARNINGS=true eslint -f ./my-awesome-formatter.js src/\n```\n\nThe output would be:\n\n``` language-bash\nerror space-infix-ops\n  src/configs/bundler.js:6:8\n\nerror semi\n  src/configs/bundler.js:6:10\n```\n\n#### Complex Argument Passing\n\nIf you find the custom formatter pattern doesn’t provide enough options for the way you’d like to format ESLint results, the best option is to use ESLint’s built-in [JSON formatter](custom-formatters../use/formatters/index#json) and pipe the output to a second program. For example:\n\n``` language-bash\neslint -f json src/ | your-program-that-reads-JSON --option\n```\n\nIn this example, the `your-program-that-reads-json` program can accept the raw JSON of ESLint results and process it before outputting its own format of the results. You can pass as many command line arguments to that program as are necessary to customize the output.\n\n### Formatting for Terminals\n\nModern terminals like [iTerm2](https://www.iterm2.com/) or [Guake](http://guake-project.org/) expect a specific results format to automatically open filenames when they are clicked. Most terminals support this format for that purpose:\n\n``` language-bash\nfile:line:column\n```\n\n## Packaging a Custom Formatter\n\nCustom formatters can be distributed through npm packages. To do so, create an npm package with a name in the format `eslint-formatter-*`, where `*` is the name of your formatter (such as `eslint-formatter-awesome`). Projects should then install the package and use the custom formatter with the [`-f` (or `--format`)](custom-formatters../use/command-line-interface#-f---format) flag like this:\n\n``` language-bash\neslint -f awesome src/\n```\n\nBecause ESLint knows to look for packages beginning with `eslint-formatter-` when the specified formatter doesn’t begin with a period, you do not need to type `eslint-formatter-` when using a packaged custom formatter.\n\nTips for the `package.json` of a custom formatter:\n\n- The [`main`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#main) entry point must be the JavaScript file implementing your custom formatter.\n- Add these [`keywords`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#keywords) to help users find your formatter:\n  - `\"eslint\"`\n  - `\"eslint-formatter\"`\n  - `\"eslintformatter\"`\n\nSee all [custom formatters on npm](https://www.npmjs.com/search?q=eslint-formatter).\n\n## Examples\n\n### Summary Formatter\n\nA formatter that only reports on the total count of errors and warnings will look like this:\n\n``` language-javascript\nmodule.exports = function(results, context) {\n    // accumulate the errors and warnings\n    var summary = results.reduce(\n        function(seq, current) {\n            seq.errors += current.errorCount;\n            seq.warnings += current.warningCount;\n            return seq;\n        },\n        { errors: 0, warnings: 0 }\n    );\n\n    if (summary.errors > 0 || summary.warnings > 0) {\n        return (\n            \"Errors: \" +\n            summary.errors +\n            \", Warnings: \" +\n            summary.warnings +\n            \"\\n\"\n        );\n    }\n\n    return \"\";\n};\n```\n\nRun `eslint` with the above summary formatter:\n\n``` language-bash\neslint -f ./my-awesome-formatter.js src/\n```\n\nWill produce the following output:\n\n``` language-bash\nErrors: 2, Warnings: 4\n```\n\n### Detailed Formatter\n\nA more complex report could look like this:\n\n``` language-javascript\nmodule.exports = function(results, context) {\n    var results = results || [];\n\n    var summary = results.reduce(\n        function(seq, current) {\n            current.messages.forEach(function(msg) {\n                var logMessage = {\n                    filePath: current.filePath,\n                    ruleId: msg.ruleId,\n                    ruleUrl: context.rulesMeta[msg.ruleId].docs.url,\n                    message: msg.message,\n                    line: msg.line,\n                    column: msg.column\n                };\n\n                if (msg.severity === 1) {\n                    logMessage.type = \"warning\";\n                    seq.warnings.push(logMessage);\n                }\n                if (msg.severity === 2) {\n                    logMessage.type = \"error\";\n                    seq.errors.push(logMessage);\n                }\n            });\n            return seq;\n        },\n        {\n            errors: [],\n            warnings: []\n        }\n    );\n\n    if (summary.errors.length > 0 || summary.warnings.length > 0) {\n        var lines = summary.errors\n            .concat(summary.warnings)\n            .map(function(msg) {\n                return (\n                    \"\\n\" +\n                    msg.type +\n                    \" \" +\n                    msg.ruleId + (msg.ruleUrl ? \" (\" + msg.ruleUrl + \")\" : \"\") +\n                    \"\\n  \" +\n                    msg.filePath +\n                    \":\" +\n                    msg.line +\n                    \":\" +\n                    msg.column\n                );\n            })\n            .join(\"\\n\");\n\n        return lines + \"\\n\";\n    }\n};\n```\n\nWhen you run ESLint with this custom formatter:\n\n``` language-bash\neslint -f ./my-awesome-formatter.js src/\n```\n\nThe output is:\n\n``` language-bash\nerror space-infix-ops (https://eslint.org/docs/rules/space-infix-ops)\n  src/configs/bundler.js:6:8\nerror semi (https://eslint.org/docs/rules/semi)\n  src/configs/bundler.js:6:10\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/bundler.js:5:6\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/bundler.js:6:6\nwarning no-shadow (https://eslint.org/docs/rules/no-shadow)\n  src/configs/bundler.js:65:32\nwarning no-unused-vars (https://eslint.org/docs/rules/no-unused-vars)\n  src/configs/clean.js:3:6\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/custom-formatters](https://eslint.org/docs/latest/extend/custom-formatters)"
- name: Custom Parsers
  id: extend/custom-parsers
  summary: ESLint custom parsers let you extend ESLint to support linting new non-standard JavaScript language features or custom syntax in your code
  description: "# Custom Parsers\n\n## Table of Contents\n\n1.  [Creating a Custom Parser](#creating-a-custom-parser)\n    1.  [Methods in Custom Parsers](#methods-in-custom-parsers)\n    2.  [parse Return Object](#parse-return-object)\n    3.  [parseForESLint Return Object](#parseforeslint-return-object)\n    4.  [Meta Data in Custom Parsers](#meta-data-in-custom-parsers)\n2.  [AST Specification](#ast-specification)\n    1.  [All Nodes](#all-nodes)\n    2.  [The Program Node](#the-program-node)\n    3.  [The Literal Node](#the-literal-node)\n3.  [Packaging a Custom Parser](#packaging-a-custom-parser)\n4.  [Example](#example)\n\nESLint custom parsers let you extend ESLint to support linting new non-standard JavaScript language features or custom syntax in your code. A parser is responsible for taking your code and transforming it into an abstract syntax tree (AST) that ESLint can then analyze and lint.\n\n## Creating a Custom Parser\n\n### Methods in Custom Parsers\n\nA custom parser is a JavaScript object with either a `parse` or `parseForESLint` method. The `parse` method only returns the AST, whereas `parseForESLint` also returns additional values that let the parser customize the behavior of ESLint even more.\n\nBoth methods should take in the source code as the first argument, and an optional configuration object as the second argument, which is provided as [`parserOptions`](custom-parsers../use/configure/language-options#specifying-parser-options) in a configuration file.\n\n``` language-javascript\n// customParser.js\n\nconst espree = require(\"espree\");\n\n// Logs the duration it takes to parse each file.\nfunction parse(code, options) {\n    const label = `Parsing file \"${options.filePath}\"`;\n    console.time(label);\n    const ast = espree.parse(code, options);\n    console.timeEnd(label);\n    return ast; // Only the AST is returned.\n};\n\nmodule.exports = { parse };\n```\n\n### `parse` Return Object\n\nThe `parse` method should simply return the [AST](#ast-specification) object.\n\n### `parseForESLint` Return Object\n\nThe `parseForESLint` method should return an object that contains the required property `ast` and optional properties `services`, `scopeManager`, and `visitorKeys`.\n\n- `ast` should contain the [AST](#ast-specification) object.\n- `services` can contain any parser-dependent services (such as type checkers for nodes). The value of the `services` property is available to rules as `context.sourceCode.parserServices`. Default is an empty object.\n- `scopeManager` can be a [ScopeManager](custom-parsers./scope-manager-interface) object. Custom parsers can use customized scope analysis for experimental/enhancement syntaxes. The default is the `ScopeManager` object which is created by [eslint-scope](https://github.com/eslint/eslint-scope).\n  - Support for `scopeManager` was added in ESLint v4.14.0. ESLint versions that support `scopeManager` will provide an `eslintScopeManager: true` property in `parserOptions`, which can be used for feature detection.\n- `visitorKeys` can be an object to customize AST traversal. The keys of the object are the type of AST nodes. Each value is an array of the property names which should be traversed. The default is [KEYS of `eslint-visitor-keys`](https://github.com/eslint/eslint-visitor-keys#evkkeys).\n  - Support for `visitorKeys` was added in ESLint v4.14.0. ESLint versions that support `visitorKeys` will provide an `eslintVisitorKeys: true` property in `parserOptions`, which can be used for feature detection.\n\n### Meta Data in Custom Parsers\n\nFor easier debugging and more effective caching of custom parsers, it’s recommended to provide a name and version in a `meta` object at the root of your custom parsers, like this:\n\n``` language-js\n// preferred location of name and version\nmodule.exports = {\n    meta: {\n        name: \"eslint-parser-custom\",\n        version: \"1.2.3\"\n    }\n};\n```\n\nThe `meta.name` property should match the npm package name for your custom parser and the `meta.version` property should match the npm package version for your custom parser. The easiest way to accomplish this is by reading this information from your `package.json`.\n\n## AST Specification\n\nThe AST that custom parsers should create is based on [ESTree](https://github.com/estree/estree). The AST requires some additional properties about detail information of the source code.\n\n### All Nodes\n\nAll nodes must have `range` property.\n\n- `range` (`number[]`) is an array of two numbers. Both numbers are a 0-based index which is the position in the array of source code characters. The first is the start position of the node, the second is the end position of the node. `code.slice(node.range[0], node.range[1])` must be the text of the node. This range does not include spaces/parentheses which are around the node.\n- `loc` (`SourceLocation`) must not be `null`. [The `loc` property is defined as nullable by ESTree](https://github.com/estree/estree/blob/25834f7247d44d3156030f8e8a2d07644d771fdb/es5.md#node-objects), but ESLint requires this property. The `SourceLocation#source` property can be `undefined`. ESLint does not use the `SourceLocation#source` property.\n\nThe `parent` property of all nodes must be rewritable. Before any rules have access to the AST, ESLint sets each node’s `parent` property to its parent node while traversing.\n\n### The `Program` Node\n\nThe `Program` node must have `tokens` and `comments` properties. Both properties are an array of the below `Token` interface.\n\n``` language-ts\ninterface Token {\n    type: string;\n    loc: SourceLocation;\n    // See the \"All Nodes\" section for details of the `range` property.\n    range: [number, number];\n    value: string;\n}\n```\n\n- `tokens` (`Token[]`) is the array of tokens which affect the behavior of programs. Arbitrary spaces can exist between tokens, so rules check the `Token#range` to detect spaces between tokens. This must be sorted by `Token#range[0]`.\n- `comments` (`Token[]`) is the array of comment tokens. This must be sorted by `Token#range[0]`.\n\nThe range indexes of all tokens and comments must not overlap with the range of other tokens and comments.\n\n### The `Literal` Node\n\nThe `Literal` node must have `raw` property.\n\n- `raw` (`string`) is the source code of this literal. This is the same as `code.slice(node.range[0], node.range[1])`.\n\n## Packaging a Custom Parser\n\nTo publish your custom parser to npm, perform the following:\n\n1.  Create a custom parser following the [Creating a Custom Parser](#creating-a-custom-parser) section above.\n2.  [Create an npm package](https://docs.npmjs.com/creating-node-js-modules) for the custom parser.\n3.  In your `package.json` file, set the [`main`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#main) field as the file that exports your custom parser.\n4.  [Publish the npm package.](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages)\n\nFor more information on publishing an npm package, refer to the [npm documentation](https://docs.npmjs.com/).\n\nOnce you’ve published the npm package, you can use it by adding the package to your project. For example:\n\n``` language-shell\nnpm install eslint-parser-myparser --save-dev\n```\n\nThen add the custom parser to your ESLint configuration file with the `parser` property. For example:\n\n``` language-js\n// .eslintrc.js\n\nmodule.exports = {\n  parser: 'eslint-parser-myparser',\n  // ... rest of configuration\n};\n```\n\nTo learn more about using ESLint parsers in your project, refer to [Configure a Parser](custom-parsers../use/configure/parser).\n\n## Example\n\nFor a complex example of a custom parser, refer to the [`@typescript-eslint/parser`](https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser) source code.\n\nA simple custom parser that provides a `context.sourceCode.parserServices.foo()` method to rules.\n\n``` language-javascript\n// awesome-custom-parser.js\nvar espree = require(\"espree\");\nfunction parseForESLint(code, options) {\n    return {\n        ast: espree.parse(code, options),\n        services: {\n            foo: function() {\n                console.log(\"foo\");\n            }\n        },\n        scopeManager: null,\n        visitorKeys: null\n    };\n};\n\nmodule.exports = { parseForESLint };\n```\n\nInclude the custom parser in an ESLint configuration file:\n\n``` language-js\n// .eslintrc.json\n{\n    \"parser\": \"./path/to/awesome-custom-parser.js\"\n}\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/custom-parsers](https://eslint.org/docs/latest/extend/custom-parsers)"
- name: Custom Processors
  id: extend/custom-processors
  summary: You can also create custom processors that tell ESLint how to process files other than standard JavaScript
  description: "# Custom Processors\n\n## Table of Contents\n\n1.  [Custom Processor Specification](#custom-processor-specification)\n2.  [Specifying Processor in Config Files](#specifying-processor-in-config-files)\n3.  [File Extension-named Processor](#file-extension-named-processor)\n\nYou can also create custom processors that tell ESLint how to process files other than standard JavaScript. For example, you could write a custom processor to extract and process JavaScript from Markdown files ([eslint-plugin-markdown](https://www.npmjs.com/package/eslint-plugin-markdown) includes a custom processor for this).\n\n## Custom Processor Specification\n\nIn order to create a custom processor, the object exported from your module has to conform to the following interface:\n\n``` language-js\nmodule.exports = {\n    processors: {\n        \"processor-name\": {\n            meta: {\n                name: \"eslint-processor-name\",\n                version: \"1.2.3\"\n            },\n            // takes text of the file and filename\n            preprocess: function(text, filename) {\n                // here, you can strip out any non-JS content\n                // and split into multiple strings to lint\n\n                return [ // return an array of code blocks to lint\n                    { text: code1, filename: \"0.js\" },\n                    { text: code2, filename: \"1.js\" },\n                ];\n            },\n\n            // takes a Message[][] and filename\n            postprocess: function(messages, filename) {\n                // `messages` argument contains two-dimensional array of Message objects\n                // where each top-level array item contains array of lint messages related\n                // to the text that was returned in array from preprocess() method\n\n                // you need to return a one-dimensional array of the messages you want to keep\n                return [].concat(...messages);\n            },\n\n            supportsAutofix: true // (optional, defaults to false)\n        }\n    }\n};\n```\n\n**The `preprocess` method** takes the file contents and filename as arguments, and returns an array of code blocks to lint. The code blocks will be linted separately but still be registered to the filename.\n\nA code block has two properties `text` and `filename`. The `text` property is the content of the block and the `filename` property is the name of the block. The name of the block can be anything, but should include the file extension, which tells the linter how to process the current block. The linter checks the [`--ext` CLI option](custom-processors../use/command-line-interface#--ext) to see if the current block should be linted and resolves `overrides` configs to check how to process the current block.\n\nIt’s up to the plugin to decide if it needs to return just one part of the non-JavaScript file or multiple pieces. For example in the case of processing `.html` files, you might want to return just one item in the array by combining all scripts. However, for `.md` files, you can return multiple items because each JavaScript block might be independent.\n\n**The `postprocess` method** takes a two-dimensional array of arrays of lint messages and the filename. Each item in the input array corresponds to the part that was returned from the `preprocess` method. The `postprocess` method must adjust the locations of all errors to correspond to locations in the original, unprocessed code, and aggregate them into a single flat array and return it.\n\nReported problems have the following location information in each lint message:\n\n``` language-typescript\ntype LintMessage = {\n\n  /// The 1-based line number where the message occurs.\n  line?: number;\n\n   /// The 1-based column number where the message occurs.\n  column?: number;\n\n  /// The 1-based line number of the end location.\n  endLine?: number;\n\n  /// The 1-based column number of the end location.\n  endColumn?: number;\n\n  /// If `true`, this is a fatal error.\n  fatal?: boolean;\n\n  /// Information for an autofix.\n  fix: Fix;\n\n  /// The error message.\n  message: string;\n\n  /// The ID of the rule which generated the message, or `null` if not applicable.\n  ruleId: string | null;\n\n  /// The severity of the message.\n  severity: 0 | 1 | 2;\n\n  /// Information for suggestions.\n  suggestions?: Suggestion[];\n};\n\ntype Fix = {\n    range: [number, number];\n    text: string;\n}\n\ntype Suggestion = {\n    desc?: string;\n    messageId?: string;\n    fix: Fix;\n}\n```\n\nBy default, ESLint does not perform autofixes when a custom processor is used, even when the `--fix` flag is enabled on the command line. To allow ESLint to autofix code when using your processor, you should take the following additional steps:\n\n1.  Update the `postprocess` method to additionally transform the `fix` property of reported problems. All autofixable problems have a `fix` property, which is an object with the following schema:\n\n    ``` language-typescript\n    {\n        range: [number, number],\n        text: string\n    }\n    ```\n\n    The `range` property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The `text` property refers to the text that will replace the given range.\n\n    In the initial list of problems, the `fix` property will refer to a fix in the processed JavaScript. The `postprocess` method should transform the object to refer to a fix in the original, unprocessed file.\n\n2.  Add a `supportsAutofix: true` property to the processor.\n\nYou can have both rules and custom processors in a single plugin. You can also have multiple processors in one plugin. To support multiple extensions, add each one to the `processors` element and point them to the same object.\n\n**The `meta` object** helps ESLint cache the processor and provide more friendly debug message. The `meta.name` property should match the processor name and the `meta.version` property should match the npm package version for your processors. The easiest way to accomplish this is by reading this information from your `package.json`.\n\n## Specifying Processor in Config Files\n\nTo use a processor, add its ID to a `processor` section in the config file. Processor ID is a concatenated string of plugin name and processor name with a slash as a separator. This can also be added to a `overrides` section of the config, to specify which processors should handle which files.\n\nFor example:\n\n``` language-yml\nplugins:\n  - a-plugin\noverrides:\n  - files: \"*.md\"\n    processor: a-plugin/markdown\n```\n\nSee [Specify a Processor](custom-processors../use/configure/plugins#specify-a-processor) in the Plugin Configuration documentation for more details.\n\n## File Extension-named Processor\n\nWarning\n\nThis feature is deprecated and only works in eslintrc-style configuration files. Flat config files do not automatically apply processors; you need to explicitly set the `processor` property.\n\nIf a custom processor name starts with `.`, ESLint handles the processor as a **file extension-named processor**. ESLint applies the processor to files with that filename extension automatically. Users don’t need to specify the file extension-named processors in their config files.\n\nFor example:\n\n``` language-js\nmodule.exports = {\n    processors: {\n        // This processor will be applied to `*.md` files automatically.\n        // Also, you can use this processor as \"plugin-id/.md\" explicitly.\n        \".md\": {\n            preprocess(text, filename) { /* ... */ },\n            postprocess(messageLists, filename) { /* ... */ }\n        }\n        // This processor will not be applied to any files automatically.\n        // To use this processor, you must explicitly specify it\n        // in your configuration as \"plugin-id/markdown\".\n       \"markdown\": {\n            preprocess(text, filename) { /* ... */ },\n            postprocess(messageLists, filename) { /* ... */ }\n        }\n    }\n}\n```\n\nYou can also use the same custom processor with multiple filename extensions. The following example shows using the same processor for both `.md` and `.mdx` files:\n\n``` language-js\nconst myCustomProcessor = { /* processor methods */ };\n\nmodule.exports = {\n    // The same custom processor is applied to both\n    // `.md` and `.mdx` files.\n    processors: {\n        \".md\": myCustomProcessor,\n        \".mdx\": myCustomProcessor\n    }\n}\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/custom-processors](https://eslint.org/docs/latest/extend/custom-processors)"
- name: Custom Rule Tutorial
  id: extend/custom-rule-tutorial
  summary: This tutorial covers how to create a custom rule for ESLint and distribute it with a plugin
  description: "# Custom Rule Tutorial\n\n## Table of Contents\n\n1.  [Why Create a Custom Rule?](#why-create-a-custom-rule)\n2.  [Prerequisites](#prerequisites)\n3.  [The Custom Rule](#the-custom-rule)\n4.  [Step 1: Set up Your Project](#step-1-set-up-your-project)\n5.  [Step 2: Stub Out the Rule File](#step-2-stub-out-the-rule-file)\n6.  [Step 3: Add Rule Metadata](#step-3-add-rule-metadata)\n7.  [Step 4: Add Rule Visitor Methods](#step-4-add-rule-visitor-methods)\n8.  [Step 5: Set up Testing](#step-5-set-up-testing)\n9.  [Step 6: Write the Test](#step-6-write-the-test)\n10. [Step 7: Bundle the Custom Rule in a Plugin](#step-7-bundle-the-custom-rule-in-a-plugin)\n11. [Step 8: Use the Plugin Locally](#step-8-use-the-plugin-locally)\n12. [Step 9: Publish the Plugin](#step-9-publish-the-plugin)\n13. [Step 10: Use the Published Custom Rule](#step-10-use-the-published-custom-rule)\n14. [Summary](#summary)\n15. [View the Tutorial Code](#view-the-tutorial-code)\n\nThis tutorial covers how to create a custom rule for ESLint and distribute it with a plugin.\n\nYou can create custom rules to validate if your code meets a certain expectation, and determine what to do if it does not meet that expectation. Plugins package custom rules and other configuration, allowing you to easily share and reuse them in different projects.\n\nTo learn more about custom rules and plugins refer to the following documentation:\n\n- [Custom Rules](custom-rule-tutorialcustom-rules)\n- [Plugins](custom-rule-tutorialplugins)\n\n## Why Create a Custom Rule?\n\nCreate a custom rule if the ESLint [built-in rules](custom-rule-tutorial../rules/index) and community-published custom rules do not meet your needs. You might create a custom rule to enforce a best practice for your company or project, prevent a particular bug from recurring, or ensure compliance with a style guide.\n\nBefore creating a custom rule that isn’t specific to your company or project, it’s worth searching the web to see if someone has published a plugin with a custom rule that solves your use case. It’s quite possible the rule may already exist.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following installed in your development environment:\n\n- [Node.js](https://nodejs.org/en/download/)\n- [npm](https://www.npmjs.com/)\n\nThis tutorial also assumes that you have a basic understanding of ESLint and ESLint rules.\n\n## The Custom Rule\n\nThe custom rule in this tutorial requires that all `const` variables named `foo` are assigned the string literal `\"bar\"`. The rule is defined in the file `enforce-foo-bar.js`. The rule also suggests replacing any other value assigned to `const foo` with `\"bar\"`.\n\nFor example, say you had the following `foo.js` file:\n\n``` language-javascript\n// foo.js\n\nconst foo = \"baz123\";\n```\n\nRunning ESLint with the rule would flag `\"baz123\"` as an incorrect value for variable `foo`. If ESLint is running in autofix mode, then ESLint would fix the file to contain the following:\n\n``` language-javascript\n// foo.js\n\nconst foo = \"bar\";\n```\n\n## Step 1: Set up Your Project\n\nFirst, create a new project for your custom rule. Create a new directory, initiate a new npm project in it, and create a new file for the custom rule:\n\n``` language-shell\nmkdir eslint-custom-rule-example # create directory\ncd eslint-custom-rule-example # enter the directory\nnpm init -y # init new npm project\ntouch enforce-foo-bar.js # create file enforce-foo-bar.js\n```\n\n## Step 2: Stub Out the Rule File\n\nIn the `enforce-foo-bar.js` file, add some scaffolding for the `enforce-foo-bar` custom rule. Also, add a `meta` object with some basic information about the rule.\n\n``` language-javascript\n// enforce-foo-bar.js\n\nmodule.exports = {\n    meta: {\n       // TODO: add metadata\n    },\n    create(context) {\n        return {\n            // TODO: add callback function(s)\n        };\n    }\n};\n```\n\n## Step 3: Add Rule Metadata\n\nBefore writing the rule, add some metadata to the rule object. ESLint uses this information when running the rule.\n\nStart by exporting an object with a `meta` property containing the rule’s metadata, such as the rule type, documentation, and fixability. In this case, the rule type is “problem,” the description is “Enforce that a variable named `foo` can only be assigned a value of ‘bar’.”, and the rule is fixable by modifying the code.\n\n``` language-javascript\n// enforce-foo-bar.js\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n        docs: {\n            description: \"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\",\n        },\n        fixable: \"code\",\n        schema: []\n    },\n    create(context) {\n        return {\n            // TODO: add callback function(s)\n        };\n    }\n};\n```\n\nTo learn more about rule metadata, refer to [Rule Structure](custom-rule-tutorialcustom-rules#rule-structure).\n\n## Step 4: Add Rule Visitor Methods\n\nDefine the rule’s `create` function, which accepts a `context` object and returns an object with a property for each syntax node type you want to handle. In this case, you want to handle `VariableDeclarator` nodes. You can choose any [ESTree node type](https://github.com/estree/estree) or [selector](custom-rule-tutorialselectors).\n\nInside the `VariableDeclarator` visitor method, check if the node represents a `const` variable declaration, if its name is `foo`, and if it’s not assigned to the string `\"bar\"`. You do this by evaluating the `node` passed to the `VariableDeclaration` method.\n\nIf the `const foo` declaration is assigned a value of `\"bar\"`, then the rule does nothing. If `const foo` **is not** assigned a value of `\"bar\"`, then `context.report()` reports an error to ESLint. The error report includes information about the error and how to fix it.\n\n``` language-javascript\n// enforce-foo-bar.js\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n        docs: {\n            description: \"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\"\n        },\n        fixable: \"code\",\n        schema: []\n    },\n    create(context) {\n        return {\n\n            // Performs action in the function on every variable declarator\n            VariableDeclarator(node) {\n\n                // Check if a `const` variable declaration\n                if (node.parent.kind === \"const\") {\n\n                    // Check if variable name is `foo`\n                    if (node.id.type === \"Identifier\" && node.id.name === \"foo\") {\n\n                        // Check if value of variable is \"bar\"\n                        if (node.init && node.init.type === \"Literal\" && node.init.value !== \"bar\") {\n\n                            /*\n                             * Report error to ESLint. Error message uses\n                             * a message placeholder to include the incorrect value\n                             * in the error message.\n                             * Also includes a `fix(fixer)` function that replaces\n                             * any values assigned to `const foo` with \"bar\".\n                             */\n                            context.report({\n                                node,\n                                message: 'Value other than \"bar\" assigned to `const foo`. Unexpected value: {{ notBar }}.',\n                                data: {\n                                    notBar: node.init.value\n                                },\n                                fix(fixer) {\n                                    return fixer.replaceText(node.init, '\"bar\"');\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n```\n\n## Step 5: Set up Testing\n\nWith the rule written, you can test it to make sure it’s working as expected.\n\nESLint provides the built-in [`RuleTester`](custom-rule-tutorial../integrate/nodejs-api#ruletester) class to test rules. You do not need to use third-party testing libraries to test ESLint rules, but `RuleTester` works seamlessly with tools like Mocha and Jest.\n\nNext, create the file for the tests, `enforce-foo-bar.test.js`:\n\n``` language-shell\ntouch enforce-foo-bar.test.js\n```\n\nYou will use the `eslint` package in the test file. Install it as a development dependency:\n\n``` language-shell\nnpm install eslint --save-dev\n```\n\nAnd add a test script to your `package.json` file to run the tests:\n\n``` language-javascript\n// package.json\n{\n    // ...other configuration\n    \"scripts\": {\n        \"test\": \"node enforce-foo-bar.test.js\"\n    },\n    // ...other configuration\n}\n```\n\n## Step 6: Write the Test\n\nTo write the test using `RuleTester`, import the class and your custom rule into the `enforce-foo-bar.test.js` file.\n\nThe `RuleTester#run()` method tests the rule against valid and invalid test cases. If the rule fails to pass any of the test scenarios, this method throws an error. `RuleTester` requires that at least one valid and one invalid test scenario be present.\n\n``` language-javascript\n// enforce-foo-bar.test.js\nconst {RuleTester} = require(\"eslint\");\nconst fooBarRule = require(\"./enforce-foo-bar\");\n\nconst ruleTester = new RuleTester({\n  // Must use at least ecmaVersion 2015 because\n  // that's when `const` variables were introduced.\n  parserOptions: { ecmaVersion: 2015 }\n});\n\n// Throws error if the tests in ruleTester.run() do not pass\nruleTester.run(\n  \"enforce-foo-bar\", // rule name\n  fooBarRule, // rule code\n  { // checks\n    // 'valid' checks cases that should pass\n    valid: [{\n      code: \"const foo = 'bar';\",\n    }],\n    // 'invalid' checks cases that should not pass\n    invalid: [{\n      code: \"const foo = 'baz';\",\n      output: 'const foo = \"bar\";',\n      errors: 1,\n    }],\n  }\n);\n\nconsole.log(\"All tests passed!\");\n```\n\nRun the test with the following command:\n\n``` language-shell\nnpm test\n```\n\nIf the test passes, you should see the following in your console:\n\n``` language-shell\nAll tests passed!\n```\n\n## Step 7: Bundle the Custom Rule in a Plugin\n\nNow that you’ve written the custom rule and validated that it works, you can include it in a plugin. Using a plugin, you can share the rule in an npm package to use in other projects.\n\nCreate the file for the plugin:\n\n``` language-shell\ntouch eslint-plugin-example.js\n```\n\nAnd now write the plugin code. Plugins are just exported JavaScript objects. To include a rule in a plugin, include it in the plugin’s `rules` object, which contains key-value pairs of rule names and their source code.\n\nTo learn more about creating plugins, refer to [Create Plugins](custom-rule-tutorialplugins).\n\n``` language-javascript\n// eslint-plugin-example.js\n\nconst fooBarRule = require(\"./enforce-foo-bar\");\nconst plugin = { rules: { \"enforce-foo-bar\": fooBarRule } };\nmodule.exports = plugin;\n```\n\n## Step 8: Use the Plugin Locally\n\nYou can use a locally defined plugin to execute the custom rule in your project. To use a local plugin, specify the path to the plugin in the `plugins` property of your ESLint configuration file.\n\nYou might want to use a locally defined plugin in one of the following scenarios:\n\n- You want to test the plugin before publishing it to npm.\n- You want to use a plugin, but do not want to publish it to npm.\n\nBefore you can add the plugin to the project, create an ESLint configuration for your project using a [flat configuration file](custom-rule-tutorial../use/configure/configuration-files-new), `eslint.config.js`:\n\n``` language-shell\ntouch eslint.config.js\n```\n\nThen, add the following code to `eslint.config.js`:\n\n``` language-javascript\n// eslint.config.js\n\"use strict\";\n\n// Import the ESLint plugin locally\nconst eslintPluginExample = require(\"./eslint-plugin-example\");\n\nmodule.exports = [\n    {\n        files: [\"**/*.js\"],\n        languageOptions: {\n            sourceType: \"commonjs\",\n            ecmaVersion: \"latest\",\n        },\n        // Using the eslint-plugin-example plugin defined locally\n        plugins: {\"example\": eslintPluginExample},\n        rules: {\n            \"example/enforce-foo-bar\": \"error\",\n        },\n    }\n]\n```\n\nBefore you can test the rule, you must create a file to test the rule on.\n\nCreate a file `example.js`:\n\n``` language-shell\ntouch example.js\n```\n\nAdd the following code to `example.js`:\n\n``` language-javascript\n// example.js\n\nfunction correctFooBar() {\n  const foo = \"bar\";\n}\n\nfunction incorrectFoo(){\n  const foo = \"baz\"; // Problem!\n}\n```\n\nNow you’re ready to test the custom rule with the locally defined plugin.\n\nRun ESLint on `example.js`:\n\n``` language-shell\nnpx eslint example.js\n```\n\nThis produces the following output in the terminal:\n\n``` language-text\n/<path-to-directory>/eslint-custom-rule-example/example.js\n  8:11  error  Value other than \"bar\" assigned to `const foo`. Unexpected value: baz  example/enforce-foo-bar\n\n✖ 1 problem (1 error, 0 warnings)\n  1 error and 0 warnings potentially fixable with the `--fix` option.\n```\n\n## Step 9: Publish the Plugin\n\nTo publish a plugin containing a rule to npm, you need to configure the `package.json`. Add the following in the corresponding fields:\n\n1.  `\"name\"`: A unique name for the package. No other package on npm can have the same name.\n2.  `\"main\"`: The relative path to the plugin file. Following this example, the path is `\"eslint-plugin-example.js\"`.\n3.  `\"description\"`: A description of the package that’s viewable on npm.\n4.  `\"peerDependencies\"`: Add `\"eslint\": \">=8.0.0\"` as a peer dependency. Any version greater than or equal to that is necessary to use the plugin. Declaring `eslint` as a peer dependency requires that users add the package to the project separately from the plugin.\n5.  `\"keywords\"`: Include the standard keywords `[\"eslint\", \"eslintplugin\", \"eslint-plugin\"]` to make the package easy to find. You can add any other keywords that might be relevant to your plugin as well.\n\nA complete annotated example of what a plugin’s `package.json` file should look like:\n\n``` language-javascript\n// package.json\n{\n  // Name npm package.\n  // Add your own package name. eslint-plugin-example is taken!\n  \"name\": \"eslint-plugin-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"ESLint plugin for enforce-foo-bar rule.\",\n  \"main\": \"eslint-plugin-example.js\", // plugin entry point\n  \"scripts\": {\n    \"test\": \"node enforce-foo-bar.test.js\"\n  },\n  // Add eslint>=8.0.0 as a peer dependency.\n  \"peerDependencies\": {\n    \"eslint\": \">=8.0.0\"\n  },\n  // Add these standard keywords to make plugin easy to find!\n  \"keywords\": [\n    \"eslint\",\n    \"eslintplugin\",\n    \"eslint-plugin\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"eslint\": \"^8.36.0\"\n  }\n}\n```\n\nTo publish the package, run `npm publish` and follow the CLI prompts.\n\nYou should see the package live on npm!\n\n## Step 10: Use the Published Custom Rule\n\nNext, you can use the published plugin.\n\nRun the following command in your project to download the package:\n\n``` language-shell\nnpm install --save-dev eslint-plugin-example # Add your package name here\n```\n\nUpdate the `eslint.config.js` to use the packaged version of the plugin:\n\n``` language-javascript\n// eslint.config.js\n\"use strict\";\n\n// Import the plugin downloaded from npm\nconst eslintPluginExample = require(\"eslint-plugin-example\");\n\n// ... rest of configuration\n```\n\nNow you’re ready to test the custom rule.\n\nRun ESLint on the `example.js` file you created in step 8, now with the downloaded plugin:\n\n``` language-shell\nnpx eslint example.js\n```\n\nThis produces the following output in the terminal:\n\n``` language-text\n/<path-to-directory>/eslint-custom-rule-example/example.js\n  8:11  error  Value other than \"bar\" assigned to `const foo`. Unexpected value: baz  example/enforce-foo-bar\n\n✖ 1 problem (1 error, 0 warnings)\n  1 error and 0 warnings potentially fixable with the `--fix` option.\n```\n\nAs you can see in the above message, you can actually fix the issue with the `--fix` flag, correcting the variable assignment to be `\"bar\"`.\n\nRun ESLint again with the `--fix` flag:\n\n``` language-shell\nnpx eslint example.js --fix\n```\n\nThere is no error output in the terminal when you run this, but you can see the fix applied in `example.js`. You should see the following:\n\n``` language-javascript\n// example.js\n\n// ... rest of file\n\nfunction incorrectFoo(){\n  const foo = \"bar\"; // Fixed!\n}\n```\n\n## Summary\n\nIn this tutorial, you’ve made a custom rule that requires all `const` variables named `foo` to be assigned the string `\"bar\"` and suggests replacing any other value assigned to `const foo` with `\"bar\"`. You’ve also added the rule to a plugin, and published the plugin on npm.\n\nThrough doing this, you’ve learned the following practices which you can apply to create other custom rules and plugins:\n\n1.  Creating a custom ESLint rule\n2.  Testing the custom rule\n3.  Bundling the rule in a plugin\n4.  Publishing the plugin\n5.  Using the rule from the plugin\n\n## View the Tutorial Code\n\nYou can view the annotated source code for the tutorial [here](https://github.com/eslint/eslint/tree/main/docs/_examples/custom-rule-tutorial-code).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/custom-rule-tutorial](https://eslint.org/docs/latest/extend/custom-rule-tutorial)"
- name: Custom Rules
  id: extend/custom-rules
  summary: You can create custom rules to use with ESLint
  description: "# Custom Rules\n\n## Table of Contents\n\n1.  [Rule Structure](#rule-structure)\n2.  [The Context Object](#the-context-object)\n    1.  [Reporting Problems](#reporting-problems)\n        1.  [Using Message Placeholders](#using-message-placeholders)\n        2.  [messageIds](#messageids)\n        3.  [Applying Fixes](#applying-fixes)\n        4.  [Conflicting Fixes](#conflicting-fixes)\n        5.  [Providing Suggestions](#providing-suggestions)\n        6.  [Suggestion messageIds](#suggestion-messageids)\n        7.  [Placeholders in Suggestion Messages](#placeholders-in-suggestion-messages)\n    2.  [Accessing Options Passed to a Rule](#accessing-options-passed-to-a-rule)\n    3.  [Accessing the Source Code](#accessing-the-source-code)\n        1.  [Accessing the Source Text](#accessing-the-source-text)\n        2.  [Accessing Comments](#accessing-comments)\n    4.  [Options Schemas](#options-schemas)\n    5.  [Accessing Shebangs](#accessing-shebangs)\n    6.  [Accessing Variable Scopes](#accessing-variable-scopes)\n        1.  [Scope types](#scope-types)\n        2.  [Scope Variables](#scope-variables)\n    7.  [Marking Variables as Used](#marking-variables-as-used)\n    8.  [Accessing Code Paths](#accessing-code-paths)\n    9.  [Deprecated SourceCode Methods](#deprecated-sourcecode-methods)\n3.  [Rule Unit Tests](#rule-unit-tests)\n4.  [Rule Naming Conventions](#rule-naming-conventions)\n5.  [Runtime Rules](#runtime-rules)\n6.  [Profile Rule Performance](#profile-rule-performance)\n\nYou can create custom rules to use with ESLint. You might want to create a custom rule if the [core rules](custom-rules../rules/index) do not cover your use case.\n\n**Note:** This page covers the most recent rule format for ESLint \\>= 3.0.0. There is also a [deprecated rule format](custom-rules./custom-rules-deprecated).\n\nHere’s the basic format of a custom rule:\n\n``` language-js\n// customRule.js\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n        docs: {\n            description: \"Description of the rule\",\n        },\n        fixable: \"code\",\n        schema: [] // no options\n    },\n    create: function(context) {\n        return {\n            // callback functions\n        };\n    }\n};\n```\n\n## Rule Structure\n\nThe source file for a rule exports an object with the following properties. Both custom rules and core rules follow this format.\n\n`meta`: (`object`) Contains metadata for the rule:\n\n- `type`: (`string`) Indicates the type of rule, which is one of `\"problem\"`, `\"suggestion\"`, or `\"layout\"`:\n\n  - `\"problem\"`: The rule is identifying code that either will cause an error or may cause a confusing behavior. Developers should consider this a high priority to resolve.\n  - `\"suggestion\"`: The rule is identifying something that could be done in a better way but no errors will occur if the code isn’t changed.\n  - `\"layout\"`: The rule cares primarily about whitespace, semicolons, commas, and parentheses, all the parts of the program that determine how the code looks rather than how it executes. These rules work on parts of the code that aren’t specified in the AST.\n\n- `docs`: (`object`) Required for core rules and optional for custom rules. Core rules have specific entries inside of `docs` while custom rules can include any properties that you need. The following properties are only relevant when working on core rules.\n\n  - `description`: (`string`) Provides the short description of the rule in the [rules index](custom-rules../rules/index).\n  - `recommended`: (`boolean`) Specifies whether the `\"extends\": \"eslint:recommended\"` property in a [configuration file](custom-rules../use/configure/configuration-files#extending-configuration-files) enables the rule.\n  - `url`: (`string`) Specifies the URL at which the full documentation can be accessed (enabling code editors to provide a helpful link on highlighted rule violations).\n\n- `fixable`: (`string`) Either `\"code\"` or `\"whitespace\"` if the `--fix` option on the [command line](custom-rules../use/command-line-interface#--fix) automatically fixes problems reported by the rule.\n\n  **Important:** the `fixable` property is mandatory for fixable rules. If this property isn’t specified, ESLint will throw an error whenever the rule attempts to produce a fix. Omit the `fixable` property if the rule is not fixable.\n\n- `hasSuggestions`: (`boolean`) Specifies whether rules can return suggestions (defaults to `false` if omitted).\n\n  **Important:** the `hasSuggestions` property is mandatory for rules that provide suggestions. If this property isn’t set to `true`, ESLint will throw an error whenever the rule attempts to produce a suggestion. Omit the `hasSuggestions` property if the rule does not provide suggestions.\n\n- `schema`: (`object | array`) Specifies the [options](#options-schemas) so ESLint can prevent invalid [rule configurations](custom-rules../use/configure/rules).\n\n- `deprecated`: (`boolean`) Indicates whether the rule has been deprecated. You may omit the `deprecated` property if the rule has not been deprecated.\n\n- `replacedBy`: (`array`) In the case of a deprecated rule, specify replacement rule(s).\n\n`create()`: Returns an object with methods that ESLint calls to “visit” nodes while traversing the abstract syntax tree (AST as defined by [ESTree](https://github.com/estree/estree)) of JavaScript code:\n\n- If a key is a node type or a [selector](custom-rules./selectors), ESLint calls that **visitor** function while going **down** the tree.\n- If a key is a node type or a [selector](custom-rules./selectors) plus `:exit`, ESLint calls that **visitor** function while going **up** the tree.\n- If a key is an event name, ESLint calls that **handler** function for [code path analysis](custom-rulescode-path-analysis).\n\nA rule can use the current node and its surrounding tree to report or fix problems.\n\nHere are methods for the [array-callback-return](custom-rules../rules/array-callback-return) rule:\n\n``` language-js\nfunction checkLastSegment (node) {\n    // report problem for function if last code path segment is reachable\n}\n\nmodule.exports = {\n    meta: { ... },\n    create: function(context) {\n        // declare the state of the rule\n        return {\n            ReturnStatement: function(node) {\n                // at a ReturnStatement node while going down\n            },\n            // at a function expression node while going up:\n            \"FunctionExpression:exit\": checkLastSegment,\n            \"ArrowFunctionExpression:exit\": checkLastSegment,\n            onCodePathStart: function (codePath, node) {\n                // at the start of analyzing a code path\n            },\n            onCodePathEnd: function(codePath, node) {\n                // at the end of analyzing a code path\n            }\n        };\n    }\n};\n```\n\n## The Context Object\n\nThe `context` object is the only argument of the `create` method in a rule. For example:\n\n``` language-js\n// customRule.js\n\nmodule.exports = {\n    meta: { ... },\n    // `context` object is the argument\n    create(context) {\n       // ...\n    }\n};\n```\n\nAs the name implies, the `context` object contains information that is relevant to the context of the rule.\n\nThe `context` object has the following properties:\n\n- `id`: (`string`) The rule ID.\n- `filename`: (`string`) The filename associated with the source.\n- `physicalFilename`: (`string`) When linting a file, it provides the full path of the file on disk without any code block information. When linting text, it provides the value passed to `—stdin-filename` or `<text>` if not specified.\n- `cwd`: (`string`) The `cwd` option passed to the [Linter](custom-rules../integrate/nodejs-api#linter). It is a path to a directory that should be considered the current working directory.\n- `options`: (`array`) An array of the [configured options](custom-rules../use/configure/rules) for this rule. This array does not include the rule severity (see the [dedicated section](#accessing-options-passed-to-a-rule)).\n- `sourceCode`: (`object`) A `SourceCode` object that you can use to work with the source that was passed to ESLint (see [Accessing the Source Code](#accessing-the-source-code)).\n- `settings`: (`object`) The [shared settings](custom-rules../use/configure/configuration-files#adding-shared-settings) from the configuration.\n- `parserPath`: (`string`) The name of the `parser` from the configuration.\n- `parserServices`: (**Deprecated:** Use `SourceCode#parserServices` instead.) Contains parser-provided services for rules. The default parser does not provide any services. However, if a rule is intended to be used with a custom parser, it could use `parserServices` to access anything provided by that parser. (For example, a TypeScript parser could provide the ability to get the computed type of a given node.)\n- `parserOptions`: The parser options configured for this run (more details [here](custom-rules../use/configure/language-options#specifying-parser-options)).\n\nAdditionally, the `context` object has the following methods:\n\n- `getAncestors()`: (**Deprecated:** Use `SourceCode#getAncestors(node)` instead.) Returns an array of the ancestors of the currently-traversed node, starting at the root of the AST and continuing through the direct parent of the current node. This array does not include the currently-traversed node itself.\n- `getCwd()`: (**Deprecated:** Use `context.cwd` instead.) Returns the `cwd` option passed to the [Linter](custom-rules../integrate/nodejs-api#linter). It is a path to a directory that should be considered the current working directory.\n- `getDeclaredVariables(node)`: (**Deprecated:** Use `SourceCode#getDeclaredVariables(node)` instead.) Returns a list of [variables](custom-rules./scope-manager-interface#variable-interface) declared by the given node. This information can be used to track references to variables.\n  - If the node is a `VariableDeclaration`, all variables declared in the declaration are returned.\n  - If the node is a `VariableDeclarator`, all variables declared in the declarator are returned.\n  - If the node is a `FunctionDeclaration` or `FunctionExpression`, the variable for the function name is returned, in addition to variables for the function parameters.\n  - If the node is an `ArrowFunctionExpression`, variables for the parameters are returned.\n  - If the node is a `ClassDeclaration` or a `ClassExpression`, the variable for the class name is returned.\n  - If the node is a `CatchClause`, the variable for the exception is returned.\n  - If the node is an `ImportDeclaration`, variables for all of its specifiers are returned.\n  - If the node is an `ImportSpecifier`, `ImportDefaultSpecifier`, or `ImportNamespaceSpecifier`, the declared variable is returned.\n  - Otherwise, if the node does not declare any variables, an empty array is returned.\n- `getFilename()`: (**Deprecated:** Use `context.filename` instead.) Returns the filename associated with the source.\n- `getPhysicalFilename()`: (**Deprecated:** Use `context.physicalFilename` instead.) When linting a file, it returns the full path of the file on disk without any code block information. When linting text, it returns the value passed to `—stdin-filename` or `<text>` if not specified.\n- `getScope()`: (**Deprecated:** Use `SourceCode#getScope(node)` instead.) Returns the [scope](custom-rules./scope-manager-interface#scope-interface) of the currently-traversed node. This information can be used to track references to variables.\n- `getSourceCode()`: (**Deprecated:** Use `context.sourceCode` instead.) Returns a `SourceCode` object that you can use to work with the source that was passed to ESLint (see [Accessing the Source Code](#accessing-the-source-code)).\n- `markVariableAsUsed(name)`: (**Deprecated:** Use `SourceCode#markVariableAsUsed(name, node)` instead.) Marks a variable with the given name in the current scope as used. This affects the [no-unused-vars](custom-rules../rules/no-unused-vars) rule. Returns `true` if a variable with the given name was found and marked as used, otherwise `false`.\n- `report(descriptor)`. Reports a problem in the code (see the [dedicated section](#reporting-problems)).\n\n**Note:** Earlier versions of ESLint supported additional methods on the `context` object. Those methods were removed in the new format and should not be relied upon.\n\n### Reporting Problems\n\nThe main method you’ll use when writing custom rules is `context.report()`, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:\n\n- `message`: (`string`) The problem message.\n- `node`: (optional `object`) The AST node related to the problem. If present and `loc` is not specified, then the starting location of the node is used as the location of the problem.\n- `loc`: (optional `object`) Specifies the location of the problem. If both `loc` and `node` are specified, then the location is used from `loc` instead of `node`.\n  - `start`: An object of the start location.\n    - `line`: (`number`) The 1-based line number at which the problem occurred.\n    - `column`: (`number`) The 0-based column number at which the problem occurred.\n  - `end`: An object of the end location.\n    - `line`: (`number`) The 1-based line number at which the problem occurred.\n    - `column`: (`number`) The 0-based column number at which the problem occurred.\n- `data`: (optional `object`) [Placeholder](#using-message-placeholders) data for `message`.\n- `fix(fixer)`: (optional `function`) Applies a [fix](#applying-fixes) to resolve the problem.\n\nNote that at least one of `node` or `loc` is required.\n\nThe simplest example is to use just `node` and `message`:\n\n``` language-js\ncontext.report({\n    node: node,\n    message: \"Unexpected identifier\"\n});\n```\n\nThe node contains all the information necessary to figure out the line and column number of the offending text as well as the source text representing the node.\n\n#### Using Message Placeholders\n\nYou can also use placeholders in the message and provide `data`:\n\n``` language-js\ncontext.report({\n    node: node,\n    message: \"Unexpected identifier: {{ identifier }}\",\n    data: {\n        identifier: node.name\n    }\n});\n```\n\nNote that leading and trailing whitespace is optional in message parameters.\n\nThe node contains all the information necessary to figure out the line and column number of the offending text as well as the source text representing the node.\n\n#### `messageId`s\n\nInstead of typing out messages in both the `context.report()` call and your tests, you can use `messageId`s instead.\n\nThis allows you to avoid retyping error messages. It also prevents errors reported in different sections of your rule from having out-of-date messages.\n\nRule file:\n\n``` language-js\n// avoid-name.js\n\nmodule.exports = {\n    meta: {\n        messages: {\n            avoidName: \"Avoid using variables named '{{ name }}'\"\n        }\n    },\n    create(context) {\n        return {\n            Identifier(node) {\n                if (node.name === \"foo\") {\n                    context.report({\n                        node,\n                        messageId: \"avoidName\",\n                        data: {\n                            name: \"foo\",\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n```\n\nIn the file to lint:\n\n``` language-javascript\n// someFile.js\n\nvar foo = 2;\n//  ^ error: Avoid using variables named 'foo'\n```\n\nIn your tests:\n\n``` language-javascript\n// avoid-name.test.js\n\nvar rule = require(\"../../../lib/rules/avoid-name\");\nvar RuleTester = require(\"eslint\").RuleTester;\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"avoid-name\", rule, {\n    valid: [\"bar\", \"baz\"],\n    invalid: [\n        {\n            code: \"foo\",\n            errors: [\n                {\n                    messageId: \"avoidName\"\n                }\n            ]\n        }\n    ]\n});\n```\n\n#### Applying Fixes\n\nIf you’d like ESLint to attempt to fix the problem you’re reporting, you can do so by specifying the `fix` function when using `context.report()`. The `fix` function receives a single argument, a `fixer` object, that you can use to apply a fix. For example:\n\n``` language-js\ncontext.report({\n    node: node,\n    message: \"Missing semicolon\",\n    fix(fixer) {\n        return fixer.insertTextAfter(node, \";\");\n    }\n});\n```\n\nHere, the `fix()` function is used to insert a semicolon after the node. Note that a fix is not immediately applied, and may not be applied at all if there are conflicts with other fixes. After applying fixes, ESLint will run all the enabled rules again on the fixed code, potentially applying more fixes. This process will repeat up to 10 times, or until no more fixable problems are found. Afterward, any remaining problems will be reported as usual.\n\n**Important:** The `meta.fixable` property is mandatory for fixable rules. ESLint will throw an error if a rule that implements `fix` functions does not [export](#rule-structure) the `meta.fixable` property.\n\nThe `fixer` object has the following methods:\n\n- `insertTextAfter(nodeOrToken, text)`: Insert text after the given node or token.\n- `insertTextAfterRange(range, text)`: Insert text after the given range.\n- `insertTextBefore(nodeOrToken, text)`: Insert text before the given node or token.\n- `insertTextBeforeRange(range, text)`: Insert text before the given range.\n- `remove(nodeOrToken)`: Remove the given node or token.\n- `removeRange(range)`: Remove text in the given range.\n- `replaceText(nodeOrToken, text)`: Replace the text in the given node or token.\n- `replaceTextRange(range, text)`: Replace the text in the given range.\n\nA `range` is a two-item array containing character indices inside the source code. The first item is the start of the range (inclusive) and the second item is the end of the range (exclusive). Every node and token has a `range` property to identify the source code range they represent.\n\nThe above methods return a `fixing` object. The `fix()` function can return the following values:\n\n- A `fixing` object.\n- An array which includes `fixing` objects.\n- An iterable object which enumerates `fixing` objects. Especially, the `fix()` function can be a generator.\n\nIf you make a `fix()` function which returns multiple `fixing` objects, those `fixing` objects must not overlap.\n\nBest practices for fixes:\n\n1.  Avoid any fixes that could change the runtime behavior of code and cause it to stop working.\n2.  Make fixes as small as possible. Fixes that are unnecessarily large could conflict with other fixes, and prevent them from being applied.\n3.  Only make one fix per message. This is enforced because you must return the result of the fixer operation from `fix()`.\n4.  Since all rules are run again after the initial round of fixes is applied, it’s not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.\n    - For example, suppose a fixer would like to surround an object key with quotes, but it’s not sure whether the user would prefer single or double quotes.\n\n      ``` language-js\n      ({ foo : 1 })\n\n      // should get fixed to either\n\n      ({ 'foo': 1 })\n\n      // or\n\n      ({ \"foo\": 1 })\n      ```\n\n    - This fixer can just select a quote type arbitrarily. If it guesses wrong, the resulting code will be automatically reported and fixed by the [`quotes`](custom-rules../rules/quotes) rule.\n\nNote: Making fixes as small as possible is a best practice, but in some cases it may be correct to extend the range of the fix in order to intentionally prevent other rules from making fixes in a surrounding range in the same pass. For instance, if replacement text declares a new variable, it can be useful to prevent other changes in the scope of the variable as they might cause name collisions.\n\nThe following example replaces `node` and also ensures that no other fixes will be applied in the range of `node.parent` in the same pass:\n\n``` language-js\ncontext.report({\n    node,\n    message,\n    *fix(fixer) {\n        yield fixer.replaceText(node, replacementText);\n\n        // extend range of the fix to the range of `node.parent`\n        yield fixer.insertTextBefore(node.parent, \"\");\n        yield fixer.insertTextAfter(node.parent, \"\");\n    }\n});\n```\n\n#### Conflicting Fixes\n\nConflicting fixes are fixes that apply different changes to the same part of the source code. There is no way to specify which of the conflicting fixes is applied.\n\nFor example, if two fixes want to modify characters 0 through 5, only one is applied.\n\n#### Providing Suggestions\n\nIn some cases fixes aren’t appropriate to be automatically applied, for example, if a fix potentially changes functionality or if there are multiple valid ways to fix a rule depending on the implementation intent (see the best practices for [applying fixes](#applying-fixes) listed above). In these cases, there is an alternative `suggest` option on `context.report()` that allows other tools, such as editors, to expose helpers for users to manually apply a suggestion.\n\nTo provide suggestions, use the `suggest` key in the report argument with an array of suggestion objects. The suggestion objects represent individual suggestions that could be applied and require either a `desc` key string that describes what applying the suggestion would do or a `messageId` key (see [below](#suggestion-messageids)), and a `fix` key that is a function defining the suggestion result. This `fix` function follows the same API as regular fixes (described above in [applying fixes](#applying-fixes)).\n\n``` language-js\ncontext.report({\n    node: node,\n    message: \"Unnecessary escape character: \\\\{{character}}.\",\n    data: { character },\n    suggest: [\n        {\n            desc: \"Remove the `\\\\`. This maintains the current functionality.\",\n            fix: function(fixer) {\n                return fixer.removeRange(range);\n            }\n        },\n        {\n            desc: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\",\n            fix: function(fixer) {\n                return fixer.insertTextBeforeRange(range, \"\\\\\");\n            }\n        }\n    ]\n});\n```\n\n**Important:** The `meta.hasSuggestions` property is mandatory for rules that provide suggestions. ESLint will throw an error if a rule attempts to produce a suggestion but does not [export](#rule-structure) this property.\n\n**Note:** Suggestions are applied as stand-alone changes, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user-defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation or conform to user preferences on the presence/absence of semicolons. All of those things can be corrected by multipass autofix when the user triggers it.\n\nBest practices for suggestions:\n\n1.  Don’t try to do too much and suggest large refactors that could introduce a lot of breaking changes.\n2.  As noted above, don’t try to conform to user-defined styles.\n\nSuggestions are intended to provide fixes. ESLint will automatically remove the whole suggestion from the linting output if the suggestion’s `fix` function returned `null` or an empty array/sequence.\n\n#### Suggestion `messageId`s\n\nInstead of using a `desc` key for suggestions a `messageId` can be used instead. This works the same way as `messageId`s for the overall error (see [messageIds](#messageids)). Here is an example of how to use a suggestion `messageId` in a rule:\n\n``` language-js\nmodule.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove the `\\\\`. This maintains the current functionality.\",\n            escapeBackslash: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\"\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: 'unnecessaryEscape',\n            data: { character },\n            suggest: [\n                {\n                    messageId: \"removeEscape\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                },\n                {\n                    messageId: \"escapeBackslash\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\\\\");\n                    }\n                }\n            ]\n        });\n    }\n};\n```\n\n#### Placeholders in Suggestion Messages\n\nYou can also use placeholders in the suggestion message. This works the same way as placeholders for the overall error (see [using message placeholders](#using-message-placeholders)).\n\nPlease note that you have to provide `data` on the suggestion’s object. Suggestion messages cannot use properties from the overall error’s `data`.\n\n``` language-js\nmodule.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove `\\\\` before {{character}}.\",\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: \"unnecessaryEscape\",\n            data: { character }, // data for the unnecessaryEscape overall message\n            suggest: [\n                {\n                    messageId: \"removeEscape\",\n                    data: { character }, // data for the removeEscape suggestion message\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                }\n            ]\n        });\n    }\n};\n```\n\n### Accessing Options Passed to a Rule\n\nSome rules require options in order to function correctly. These options appear in configuration (`.eslintrc`, command line interface, or comments). For example:\n\n``` language-json\n{\n    \"quotes\": [\"error\", \"double\"]\n}\n```\n\nThe `quotes` rule in this example has one option, `\"double\"` (the `error` is the error level). You can retrieve the options for a rule by using `context.options`, which is an array containing every configured option for the rule. In this case, `context.options[0]` would contain `\"double\"`:\n\n``` language-js\nmodule.exports = {\n    create: function(context) {\n        var isDouble = (context.options[0] === \"double\");\n\n        // ...\n    }\n};\n```\n\nSince `context.options` is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of `context.options`, as the error level cannot be known or modified from inside a rule.\n\nWhen using options, make sure that your rule has some logical defaults in case the options are not provided.\n\n### Accessing the Source Code\n\nThe `SourceCode` object is the main object for getting more information about the source code being linted. You can retrieve the `SourceCode` object at any time by using the `context.sourceCode` property:\n\n``` language-js\nmodule.exports = {\n    create: function(context) {\n        var sourceCode = context.sourceCode;\n\n        // ...\n    }\n};\n```\n\n**Deprecated:** The `context.getSourceCode()` method is deprecated; make sure to use `context.sourceCode` property instead.\n\nOnce you have an instance of `SourceCode`, you can use the following methods on it to work with the code:\n\n- `getText(node)`: Returns the source code for the given node. Omit `node` to get the whole source (see the [dedicated section](#accessing-the-source-text)).\n- `getAllComments()`: Returns an array of all comments in the source (see the [dedicated section](#accessing-comments)).\n- `getCommentsBefore(nodeOrToken)`: Returns an array of comment tokens that occur directly before the given node or token (see the [dedicated section](#accessing-comments)).\n- `getCommentsAfter(nodeOrToken)`: Returns an array of comment tokens that occur directly after the given node or token (see the [dedicated section](#accessing-comments)).\n- `getCommentsInside(node)`: Returns an array of all comment tokens inside a given node (see the [dedicated section](#accessing-comments)).\n- `isSpaceBetween(nodeOrToken, nodeOrToken)`: Returns true if there is a whitespace character between the two tokens or, if given a node, the last token of the first node and the first token of the second node.\n- `getFirstToken(node, skipOptions)`: Returns the first token representing the given node.\n- `getFirstTokens(node, countOptions)`: Returns the first `count` tokens representing the given node.\n- `getLastToken(node, skipOptions)`: Returns the last token representing the given node.\n- `getLastTokens(node, countOptions)`: Returns the last `count` tokens representing the given node.\n- `getTokenAfter(nodeOrToken, skipOptions)`: Returns the first token after the given node or token.\n- `getTokensAfter(nodeOrToken, countOptions)`: Returns `count` tokens after the given node or token.\n- `getTokenBefore(nodeOrToken, skipOptions)`: Returns the first token before the given node or token.\n- `getTokensBefore(nodeOrToken, countOptions)`: Returns `count` tokens before the given node or token.\n- `getFirstTokenBetween(nodeOrToken1, nodeOrToken2, skipOptions)`: Returns the first token between two nodes or tokens.\n- `getFirstTokensBetween(nodeOrToken1, nodeOrToken2, countOptions)`: Returns the first `count` tokens between two nodes or tokens.\n- `getLastTokenBetween(nodeOrToken1, nodeOrToken2, skipOptions)`: Returns the last token between two nodes or tokens.\n- `getLastTokensBetween(nodeOrToken1, nodeOrToken2, countOptions)`: Returns the last `count` tokens between two nodes or tokens.\n- `getTokens(node)`: Returns all tokens for the given node.\n- `getTokensBetween(nodeOrToken1, nodeOrToken2)`: Returns all tokens between two nodes.\n- `getTokenByRangeStart(index, rangeOptions)`: Returns the token whose range starts at the given index in the source.\n- `getNodeByRangeIndex(index)`: Returns the deepest node in the AST containing the given source index.\n- `getLocFromIndex(index)`: Returns an object with `line` and `column` properties, corresponding to the location of the given source index. `line` is 1-based and `column` is 0-based.\n- `getIndexFromLoc(loc)`: Returns the index of a given location in the source code, where `loc` is an object with a 1-based `line` key and a 0-based `column` key.\n- `commentsExistBetween(nodeOrToken1, nodeOrToken2)`: Returns `true` if comments exist between two nodes.\n\n`skipOptions` is an object which has 3 properties; `skip`, `includeComments`, and `filter`. Default is `{skip: 0, includeComments: false, filter: null}`.\n\n- `skip`: (`number`) Positive integer, the number of skipping tokens. If `filter` option is given at the same time, it doesn’t count filtered tokens as skipped.\n- `includeComments`: (`boolean`) The flag to include comment tokens into the result.\n- `filter(token)`: Function which gets a token as the first argument. If the function returns `false` then the result excludes the token.\n\n`countOptions` is an object which has 3 properties; `count`, `includeComments`, and `filter`. Default is `{count: 0, includeComments: false, filter: null}`.\n\n- `count`: (`number`) Positive integer, the maximum number of returning tokens.\n- `includeComments`: (`boolean`) The flag to include comment tokens into the result.\n- `filter(token)`: Function which gets a token as the first argument, if the function returns `false` then the result excludes the token.\n\n`rangeOptions` is an object that has 1 property, `includeComments`. Default is `{includeComments: false}`.\n\n- `includeComments`: (`boolean`) The flag to include comment tokens into the result.\n\nThere are also some properties you can access:\n\n- `hasBOM`: (`boolean`) The flag to indicate whether the source code has Unicode BOM.\n- `text`: (`string`) The full text of the code being linted. Unicode BOM has been stripped from this text.\n- `ast`: (`object`) `Program` node of the AST for the code being linted.\n- `scopeManager`: [ScopeManager](custom-rules./scope-manager-interface#scopemanager-interface) object of the code.\n- `visitorKeys`: (`object`) Visitor keys to traverse this AST.\n- `parserServices`: (`object`) Contains parser-provided services for rules. The default parser does not provide any services. However, if a rule is intended to be used with a custom parser, it could use `parserServices` to access anything provided by that parser. (For example, a TypeScript parser could provide the ability to get the computed type of a given node.)\n- `lines`: (`array`) Array of lines, split according to the specification’s definition of line breaks.\n\nYou should use a `SourceCode` object whenever you need to get more information about the code being linted.\n\n#### Accessing the Source Text\n\nIf your rule needs to get the actual JavaScript source to work with, then use the `sourceCode.getText()` method. This method works as follows:\n\n``` language-js\n// get all source\nvar source = sourceCode.getText();\n\n// get source for just this AST node\nvar nodeSource = sourceCode.getText(node);\n\n// get source for AST node plus previous two characters\nvar nodeSourceWithPrev = sourceCode.getText(node, 2);\n\n// get source for AST node plus following two characters\nvar nodeSourceWithFollowing = sourceCode.getText(node, 0, 2);\n```\n\nIn this way, you can look for patterns in the JavaScript text itself when the AST isn’t providing the appropriate data (such as the location of commas, semicolons, parentheses, etc.).\n\n#### Accessing Comments\n\nWhile comments are not technically part of the AST, ESLint provides the `sourceCode.getAllComments()`, `sourceCode.getCommentsBefore()`, `sourceCode.getCommentsAfter()`, and `sourceCode.getCommentsInside()` to access them.\n\n`sourceCode.getCommentsBefore()`, `sourceCode.getCommentsAfter()`, and `sourceCode.getCommentsInside()` are useful for rules that need to check comments in relation to a given node or token.\n\nKeep in mind that the results of these methods are calculated on demand.\n\nYou can also access comments through many of `sourceCode`’s methods using the `includeComments` option.\n\n### Options Schemas\n\nRules may specify a `schema` property, which is a [JSON Schema](https://json-schema.org/) format description of a rule’s options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in `context.options`.\n\nNote: Prior to ESLint v9.0.0, rules without a schema are passed their options directly from the config without any validation. In ESLint v9.0.0 and later, rules without schemas will throw errors when options are passed. See the [Require schemas and object-style rules](https://github.com/eslint/rfcs/blob/main/designs/2021-schema-object-rules/README.md) RFC for further details.\n\nWhen validating a rule’s config, there are five steps:\n\n1.  If the rule config is not an array, then the value is wrapped into an array (e.g. `\"off\"` becomes `[\"off\"]`); if the rule config is an array then it is used directly.\n2.  ESLint validates the first element of the rule config array as a severity (`\"off\"`, `\"warn\"`, `\"error\"`, `0`, `1`, `2`)\n3.  If the severity is `off` or `0`, then the rule is disabled and validation stops, ignoring any other elements of the rule config array.\n4.  If the rule is enabled, then any elements of the array after the severity are copied into the `context.options` array (e.g. a config of `[\"warn\", \"never\", { someOption: 5 }]` results in `context.options = [\"never\", { someOption: 5 }]`)\n5.  The rule’s schema validation is run on the `context.options` array.\n\nNote: this means that the rule schema cannot validate the severity. The rule schema only validates the array elements *after* the severity in a rule config. There is no way for a rule to know what severity it is configured at.\n\nThere are two formats for a rule’s `schema`:\n\n- An array of JSON Schema objects\n  - Each element will be checked against the same position in the `context.options` array.\n  - If the `context.options` array has fewer elements than there are schemas, then the unmatched schemas are ignored\n  - If the `context.options` array has more elements than there are schemas, then the validation fails\n  - There are two important consequences to using this format:\n    - It is *always valid* for a user to provide no options to your rule (beyond severity)\n    - If you specify an empty array, then it is *always an error* for a user to provide any options to your rule (beyond severity)\n- A full JSON Schema object that will validate the `context.options` array\n  - The schema should assume an array of options to validate even if your rule only accepts one option.\n  - The schema can be arbitrarily complex, so you can validate completely different sets of potential options via `oneOf`, `anyOf` etc.\n  - The supported version of JSON Schemas is [Draft-04](http://json-schema.org/draft-04/schema), so some newer features such as `if` or `$data` are unavailable.\n    - At present, it is explicitly planned to not update schema support beyond this level due to ecosystem compatibility concerns. See [this comment](https://github.com/eslint/eslint/issues/13888#issuecomment-872591875) for further context.\n\nFor example, the `yoda` rule accepts a primary mode argument of `\"always\"` or `\"never\"`, as well as an extra options object with an optional property `exceptRange`:\n\n``` language-js\n// Valid configuration:\n// \"yoda\": \"warn\"\n// \"yoda\": [\"error\"]\n// \"yoda\": [\"error\", \"always\"]\n// \"yoda\": [\"error\", \"never\", { \"exceptRange\": true }]\n// Invalid configuration:\n// \"yoda\": [\"warn\", \"never\", { \"exceptRange\": true }, 5]\n// \"yoda\": [\"error\", { \"exceptRange\": true }, \"never\"]\nmodule.exports = {\n    meta: {\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    exceptRange: { type: \"boolean\" }\n                },\n                additionalProperties: false\n            }\n        ]\n    }\n};\n```\n\nAnd here is the equivalent object-based schema:\n\n``` language-js\n// Valid configuration:\n// \"yoda\": \"warn\"\n// \"yoda\": [\"error\"]\n// \"yoda\": [\"error\", \"always\"]\n// \"yoda\": [\"error\", \"never\", { \"exceptRange\": true }]\n// Invalid configuration:\n// \"yoda\": [\"warn\", \"never\", { \"exceptRange\": true }, 5]\n// \"yoda\": [\"error\", { \"exceptRange\": true }, \"never\"]\nmodule.exports = {\n    meta: {\n        schema: {\n            type: \"array\",\n            minItems: 0,\n            maxItems: 2,\n            items: [\n                {\n                    enum: [\"always\", \"never\"]\n                },\n                {\n                    type: \"object\",\n                    properties: {\n                        exceptRange: { type: \"boolean\" }\n                    },\n                    additionalProperties: false\n                }\n            ]\n        }\n    }\n};\n```\n\nObject schemas can be more precise and restrictive in what is permitted. For example, the below schema always requires the first option to be specified (a number between 0 and 10), but the second option is optional, and can either be an object with some options explicitly set, or `\"off\"` or `\"strict\"`.\n\n``` language-js\n// Valid configuration:\n// \"someRule\": [\"error\", 6]\n// \"someRule\": [\"error\", 5, \"strict\"]\n// \"someRule\": [\"warn\", 10, { someNonOptionalProperty: true }]\n// Invalid configuration:\n// \"someRule\": \"warn\"\n// \"someRule\": [\"error\"]\n// \"someRule\": [\"warn\", 15]\n// \"someRule\": [\"warn\", 7, { }]\n// \"someRule\": [\"error\", 3, \"on\"]\n// \"someRule\": [\"warn\", 7, { someOtherProperty: 5 }]\n// \"someRule\": [\"warn\", 7, { someNonOptionalProperty: false, someOtherProperty: 5 }]\nmodule.exports = {\n    meta: {\n        schema: {\n            type: \"array\",\n            minItems: 1, // Can't specify only severity!\n            maxItems: 2,\n            items: [\n                {\n                    type: \"number\",\n                    minimum: 0,\n                    maximum: 10\n                },\n                {\n                    anyOf: [\n                        {\n                            type: \"object\",\n                            properties: {\n                                someNonOptionalProperty: { type: \"boolean\" }\n                            },\n                            required: [\"someNonOptionalProperty\"],\n                            additionalProperties: false\n                        },\n                        {\n                            enum: [\"off\", \"strict\"]\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\nRemember, rule options are always an array, so be careful not to specify a schema for a non-array type at the top level. If your schema does not specify an array at the top-level, users can *never* enable your rule, as their configuration will always be invalid when the rule is enabled.\n\nHere’s an example schema that will always fail validation:\n\n``` language-js\n// Possibly trying to validate [\"error\", { someOptionalProperty: true }]\n// but when the rule is enabled, config will always fail validation because the options are an array which doesn't match \"object\"\nmodule.exports = {\n    meta: {\n        schema: {\n            type: \"object\",\n            properties: {\n                someOptionalProperty: {\n                    type: \"boolean\"\n                }\n            },\n            additionalProperties: false\n        }\n    }\n}\n```\n\n**Note:** If your rule schema uses JSON schema [`$ref`](https://json-schema.org/understanding-json-schema/structuring.html#ref) properties, you must use the full JSON Schema object rather than the array of positional property schemas. This is because ESLint transforms the array shorthand into a single schema without updating references that makes them incorrect (they are ignored).\n\nTo learn more about JSON Schema, we recommend looking at some examples on the [JSON Schema website](https://json-schema.org/learn/), or reading the free [Understanding JSON Schema](https://json-schema.org/understanding-json-schema/) ebook.\n\n### Accessing Shebangs\n\n[Shebangs (#!)](https://en.wikipedia.org/wiki/Shebang_(Unix)) are represented by the unique tokens of type `\"Shebang\"`. They are treated as comments and can be accessed by the methods outlined in the [Accessing Comments](#accessing-comments) section, such as `sourceCode.getAllComments()`.\n\n### Accessing Variable Scopes\n\nThe `SourceCode#getScope(node)` method returns the scope of the given node. It is a useful method for finding information about the variables in a given scope and how they are used in other scopes.\n\n**Deprecated:** The `context.getScope()` is deprecated; make sure to use `SourceCode#getScope(node)` instead.\n\n#### Scope types\n\nThe following table contains a list of AST node types and the scope type that they correspond to. For more information about the scope types, refer to the [`Scope` object documentation](custom-rules./scope-manager-interface#scope-interface).\n\n| AST Node Type             | Scope Type |\n|:--------------------------|:-----------|\n| `Program`                 | `global`   |\n| `FunctionDeclaration`     | `function` |\n| `FunctionExpression`      | `function` |\n| `ArrowFunctionExpression` | `function` |\n| `ClassDeclaration`        | `class`    |\n| `ClassExpression`         | `class`    |\n| `BlockStatement` ※1       | `block`    |\n| `SwitchStatement` ※1      | `switch`   |\n| `ForStatement` ※2         | `for`      |\n| `ForInStatement` ※2       | `for`      |\n| `ForOfStatement` ※2       | `for`      |\n| `WithStatement`           | `with`     |\n| `CatchClause`             | `catch`    |\n| others                    | ※3         |\n\n**※1** Only if the configured parser provided the block-scope feature. The default parser provides the block-scope feature if `parserOptions.ecmaVersion` is not less than `6`.  \n**※2** Only if the `for` statement defines the iteration variable as a block-scoped variable (E.g., `for (let i = 0;;) {}`).  \n**※3** The scope of the closest ancestor node which has own scope. If the closest ancestor node has multiple scopes then it chooses the innermost scope (E.g., the `Program` node has a `global` scope and a `module` scope if `Program#sourceType` is `\"module\"`. The innermost scope is the `module` scope.).\n\n#### Scope Variables\n\nThe `Scope#variables` property contains an array of [`Variable` objects](custom-rules./scope-manager-interface#variable-interface). These are the variables declared in current scope. You can use these `Variable` objects to track references to a variable throughout the entire module.\n\nInside of each `Variable`, the `Variable#references` property contains an array of [`Reference` objects](custom-rules./scope-manager-interface#reference-interface). The `Reference` array contains all the locations where the variable is referenced in the module’s source code.\n\nAlso inside of each `Variable`, the `Variable#defs` property contains an array of [`Definition` objects](custom-rules./scope-manager-interface#definition-interface). You can use the `Definitions` to find where the variable was defined.\n\nGlobal variables have the following additional properties:\n\n- `Variable#writeable` (`boolean | undefined`) … If `true`, this global variable can be assigned arbitrary value. If `false`, this global variable is read-only.\n- `Variable#eslintExplicitGlobal` (`boolean | undefined`) … If `true`, this global variable was defined by a `/* globals */` directive comment in the source code file.\n- `Variable#eslintExplicitGlobalComments` (`Comment[] | undefined`) … The array of `/* globals */` directive comments which defined this global variable in the source code file. This property is `undefined` if there are no `/* globals */` directive comments.\n- `Variable#eslintImplicitGlobalSetting` (`\"readonly\" | \"writable\" | undefined`) … The configured value in config files. This can be different from `variable.writeable` if there are `/* globals */` directive comments.\n\nFor examples of using `SourceCode#getScope()` to track variables, refer to the source code for the following built-in rules:\n\n- [no-shadow](https://github.com/eslint/eslint/blob/main/lib/rules/no-shadow.js): Calls `sourceCode.getScope()` at the `Program` node and inspects all child scopes to make sure a variable name is not reused at a lower scope. ([no-shadow](custom-rules../rules/no-shadow) documentation)\n- [no-redeclare](https://github.com/eslint/eslint/blob/main/lib/rules/no-redeclare.js): Calls `sourceCode.getScope()` at each scope to make sure that a variable is not declared twice in the same scope. ([no-redeclare](custom-rules../rules/no-redeclare) documentation)\n\n### Marking Variables as Used\n\n**Deprecated:** The `context.markVariableAsUsed()` method is deprecated in favor of `sourceCode.markVariableAsUsed()`.\n\nCertain ESLint rules, such as [`no-unused-vars`](custom-rules../rules/no-unused-vars), check to see if a variable has been used. ESLint itself only knows about the standard rules of variable access and so custom ways of accessing variables may not register as “used”.\n\nTo help with this, you can use the `sourceCode.markVariableAsUsed()` method. This method takes two arguments: the name of the variable to mark as used and an option reference node indicating the scope in which you are working. Here’s an example:\n\n``` language-js\nmodule.exports = {\n    create: function(context) {\n        var sourceCode = context.sourceCode;\n\n        return {\n            ReturnStatement(node) {\n\n                // look in the scope of the function for myCustomVar and mark as used\n                sourceCode.markVariableAsUsed(\"myCustomVar\", node);\n\n                // or: look in the global scope for myCustomVar and mark as used\n                sourceCode.markVariableAsUsed(\"myCustomVar\");\n            }\n        }\n        // ...\n    }\n};\n```\n\nHere, the `myCustomVar` variable is marked as used relative to a `ReturnStatement` node, which means ESLint will start searching from the scope closest to that node. If you omit the second argument, then the top-level scope is used. (For ESM files, the top-level scope is the module scope; for CommonJS files, the top-level scope is the first function scope.)\n\n### Accessing Code Paths\n\nESLint analyzes code paths while traversing AST. You can access code path objects with five events related to code paths. For more information, refer to [Code Path Analysis](custom-rulescode-path-analysis).\n\n### Deprecated `SourceCode` Methods\n\nPlease note that the following `SourceCode` methods have been deprecated and will be removed in a future version of ESLint:\n\n- `getComments()`: Replaced by `SourceCode#getCommentsBefore()`, `SourceCode#getCommentsAfter()`, and `SourceCode#getCommentsInside()`.\n- `getTokenOrCommentBefore()`: Replaced by `SourceCode#getTokenBefore()` with the `{ includeComments: true }` option.\n- `getTokenOrCommentAfter()`: Replaced by `SourceCode#getTokenAfter()` with the `{ includeComments: true }` option.\n- `isSpaceBetweenTokens()`: Replaced by `SourceCode#isSpaceBetween()`\n- `getJSDocComment()`\n\n## Rule Unit Tests\n\nESLint provides the [`RuleTester`](custom-rules../integrate/nodejs-api#ruletester) utility to make it easy to write tests for rules.\n\n## Rule Naming Conventions\n\nWhile you can give a custom rule any name you’d like, the core rules have naming conventions. It could be clearer to apply these same naming conventions to your custom rule. To learn more, refer to the [Core Rule Naming Conventions](custom-rules../contribute/core-rules#rule-naming-conventions) documentation.\n\n## Runtime Rules\n\nThe thing that makes ESLint different from other linters is the ability to define custom rules at runtime. This is perfect for rules that are specific to your project or company and wouldn’t make sense for ESLint to ship with or be included in a plugin. Just write your rules and include them at runtime.\n\nRuntime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:\n\n1.  Place all of your runtime rules in the same directory (e.g., `eslint_rules`).\n2.  Create a [configuration file](custom-rules../use/configure/index) and specify your rule ID error level under the `rules` key. Your rule will not run unless it has a value of `\"warn\"` or `\"error\"` in the configuration file.\n3.  Run the [command line interface](custom-rules../use/command-line-interface) using the `--rulesdir` option to specify the location of your runtime rules.\n\n## Profile Rule Performance\n\nESLint has a built-in method to track the performance of individual rules. Setting the `TIMING` environment variable will trigger the display, upon linting completion, of the ten longest-running rules, along with their individual running time (rule creation + rule execution) and relative performance impact as a percentage of total rule processing time (rule creation + rule execution).\n\n``` language-bash\n$ TIMING=1 eslint lib\nRule                    | Time (ms) | Relative\n:-----------------------|----------:|--------:\nno-multi-spaces         |    52.472 |     6.1%\ncamelcase               |    48.684 |     5.7%\nno-irregular-whitespace |    43.847 |     5.1%\nvalid-jsdoc             |    40.346 |     4.7%\nhandle-callback-err     |    39.153 |     4.6%\nspace-infix-ops         |    35.444 |     4.1%\nno-undefined            |    25.693 |     3.0%\nno-shadow               |    22.759 |     2.7%\nno-empty-class          |    21.976 |     2.6%\nsemi                    |    19.359 |     2.3%\n```\n\nTo test one rule explicitly, combine the `--no-eslintrc`, and `--rule` options:\n\n``` language-bash\n$ TIMING=1 eslint --no-eslintrc --rule \"quotes: [2, 'double']\" lib\nRule   | Time (ms) | Relative\n:------|----------:|--------:\nquotes |    18.066 |   100.0%\n```\n\nTo see a longer list of results (more than 10), set the environment variable to another value such as `TIMING=50` or `TIMING=all`.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/custom-rules](https://eslint.org/docs/latest/extend/custom-rules)"
- name: default-case
  id: rules/default-case
  summary: The thinking is that it’s better to always explicitly state what the default behavior should be so that it’s clear whether or not the developer forgot to include the default behavior by mistake
  description: "# default-case\n\nRequire `default` cases in `switch` statements\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [commentPattern](#commentpattern)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nSome code conventions require that all `switch` statements have a `default` case, even if the default case is empty, such as:\n\n``` language-js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    default:\n    // do nothing\n}\n```\n\nThe thinking is that it’s better to always explicitly state what the default behavior should be so that it’s clear whether or not the developer forgot to include the default behavior by mistake.\n\nOther code conventions allow you to skip the `default` case so long as there is a comment indicating the omission is intentional, such as:\n\n``` language-js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    // no default\n}\n```\n\nOnce again, the intent here is to show that the developer intended for there to be no default behavior.\n\n## Rule Details\n\nThis rule aims to require `default` case in `switch` statements. You may optionally include a `// no default` after the last `case` if there is no `default` case. The comment may be in any desired case, such as `// No Default`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRlZmF1bHQtY2FzZTogXCJlcnJvclwiKi9cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICAvKiBjb2RlICovXG4gICAgICAgIGJyZWFrO1xufVxuIn0=)\n\n``` language-js\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRlZmF1bHQtY2FzZTogXCJlcnJvclwiKi9cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICAvKiBjb2RlICovXG4gICAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgICAgLyogY29kZSAqL1xuICAgICAgICBicmVhaztcbn1cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICAvKiBjb2RlICovXG4gICAgICAgIGJyZWFrO1xuXG4gICAgLy8gbm8gZGVmYXVsdFxufVxuXG5zd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDE6XG4gICAgICAgIC8qIGNvZGUgKi9cbiAgICAgICAgYnJlYWs7XG5cbiAgICAvLyBObyBEZWZhdWx0XG59In0=)\n\n``` language-js\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    default:\n        /* code */\n        break;\n}\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // no default\n}\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // No Default\n}\n```\n\n## Options\n\nThis rule accepts a single options argument:\n\n- Set the `commentPattern` option to a regular expression string to change the default `/^no default$/i` comment test pattern\n\n### commentPattern\n\nExamples of **correct** code for the `{ \"commentPattern\": \"^skip\\\\sdefault\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRlZmF1bHQtY2FzZTogW1wiZXJyb3JcIiwgeyBcImNvbW1lbnRQYXR0ZXJuXCI6IFwiXnNraXBcXFxcc2RlZmF1bHRcIiB9XSovXG5cbnN3aXRjaChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICAvKiBjb2RlICovXG4gICAgICAgIGJyZWFrO1xuXG4gICAgLy8gc2tpcCBkZWZhdWx0XG59XG5cbnN3aXRjaChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICAvKiBjb2RlICovXG4gICAgICAgIGJyZWFrO1xuXG4gICAgLy8gc2tpcCBkZWZhdWx0IGNhc2Vcbn0ifQ==)\n\n``` language-js\n/*eslint default-case: [\"error\", { \"commentPattern\": \"^skip\\\\sdefault\" }]*/\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default\n}\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default case\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce a `default` case for `switch` statements, you can safely disable this rule.\n\n## Related Rules\n\n- [no-fallthrough](no-fallthrough)\n\n## Version\n\nThis rule was introduced in ESLint v0.6.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/default-case.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/default-case.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/default-case](https://eslint.org/docs/latest/rules/default-case)"
- name: default-case-last
  id: rules/default-case-last
  summary: A switch statement can optionally have a default clause
  description: "# default-case-last\n\nEnforce default clauses in switch statements to be last\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nA `switch` statement can optionally have a `default` clause.\n\nIf present, it’s usually the last clause, but it doesn’t need to be. It is also allowed to put the `default` clause before all `case` clauses, or anywhere between. The behavior is mostly the same as if it was the last clause. The `default` block will be still executed only if there is no match in the `case` clauses (including those defined after the `default`), but there is also the ability to “fall through” from the `default` clause to the following clause in the list. However, such flow is not common and it would be confusing to the readers.\n\nEven if there is no “fall through” logic, it’s still unexpected to see the `default` clause before or between the `case` clauses. By convention, it is expected to be the last clause.\n\nIf a `switch` statement should have a `default` clause, it’s considered a best practice to define it as the last clause.\n\n## Rule Details\n\nThis rule enforces `default` clauses in `switch` statements to be last.\n\nIt applies only to `switch` statements that already have a `default` clause.\n\nThis rule does not enforce the existence of `default` clauses. See [default-case](default-case-lastdefault-case) if you also want to enforce the existence of `default` clauses in `switch` statements.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRlZmF1bHQtY2FzZS1sYXN0OiBcImVycm9yXCIqL1xuXG5zd2l0Y2ggKGZvbykge1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIFwiYVwiOlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgYmF6KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgICAgcXV1eCgpO1xuICAgICAgICBicmVhaztcbn1cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIFwieFwiOlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICBjYXNlIFwieVwiOlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAtMTpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xufVxuXG5zd2l0Y2ggKGZvbykge1xuICBkZWZhdWx0OlxuICAgIGRvU29tZXRoaW5nSWZOb3RaZXJvKCk7XG4gIGNhc2UgMDpcbiAgICBkb1NvbWV0aGluZ0FueXdheSgpO1xufSJ9)\n\n``` language-js\n/*eslint default-case-last: \"error\"*/\n\nswitch (foo) {\n    default:\n        bar();\n        break;\n    case \"a\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n    case 2:\n        quux();\n        break;\n}\n\nswitch (foo) {\n    case \"x\":\n        bar();\n        break;\n    default:\n    case \"y\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    default:\n        break;\n    case -1:\n        bar();\n        break;\n}\n\nswitch (foo) {\n  default:\n    doSomethingIfNotZero();\n  case 0:\n    doSomethingAnyway();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRlZmF1bHQtY2FzZS1sYXN0OiBcImVycm9yXCIqL1xuXG5zd2l0Y2ggKGZvbykge1xuICAgIGNhc2UgXCJhXCI6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgICBxdXV4KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbn1cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIFwieFwiOlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInlcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSAtMTpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xufVxuXG5pZiAoZm9vICE9PSAwKSB7XG4gICAgZG9Tb21ldGhpbmdJZk5vdFplcm8oKTtcbn1cbmRvU29tZXRoaW5nQW55d2F5KCk7In0=)\n\n``` language-js\n/*eslint default-case-last: \"error\"*/\n\nswitch (foo) {\n    case \"a\":\n        baz();\n        break;\n    default:\n        bar();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    case 2:\n        quux();\n        break;\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case \"x\":\n        bar();\n        break;\n    case \"y\":\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case -1:\n        bar();\n        break;\n}\n\nif (foo !== 0) {\n    doSomethingIfNotZero();\n}\ndoSomethingAnyway();\n```\n\n## Related Rules\n\n- [default-case](default-case)\n\n## Version\n\nThis rule was introduced in ESLint v7.0.0-alpha.0.\n\n## Further Reading\n\n[switch - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/default-case-last.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/default-case-last.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/default-case-last](https://eslint.org/docs/latest/rules/default-case-last)"
- name: default-param-last
  id: rules/default-param-last
  summary: Putting default parameter at last allows function calls to omit optional tail arguments
  description: "# default-param-last\n\nEnforce default parameters to be last\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nPutting default parameter at last allows function calls to omit optional tail arguments.\n\n``` language-js\n// Correct: optional argument can be omitted\nfunction createUser(id, isAdmin = false) {}\ncreateUser(\"tabby\")\n\n// Incorrect: optional argument can **not** be omitted\nfunction createUser(isAdmin = false, id) {}\ncreateUser(undefined, \"tabby\")\n```\n\n## Rule Details\n\nThis rule enforces default parameters to be the last of parameters.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBkZWZhdWx0LXBhcmFtLWxhc3Q6IFtcImVycm9yXCJdICovXG5cbmZ1bmN0aW9uIGYoYSA9IDAsIGIpIHt9XG5cbmZ1bmN0aW9uIGcoYSwgYiA9IDAsIGMpIHt9In0=)\n\n``` language-js\n/* eslint default-param-last: [\"error\"] */\n\nfunction f(a = 0, b) {}\n\nfunction g(a, b = 0, c) {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBkZWZhdWx0LXBhcmFtLWxhc3Q6IFtcImVycm9yXCJdICovXG5cbmZ1bmN0aW9uIGYoYSwgYiA9IDApIHt9In0=)\n\n``` language-js\n/* eslint default-param-last: [\"error\"] */\n\nfunction f(a, b = 0) {}\n```\n\n## Version\n\nThis rule was introduced in ESLint v6.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/default-param-last.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/default-param-last.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/default-param-last](https://eslint.org/docs/latest/rules/default-param-last)"
- name: dot-notation
  id: rules/dot-notation
  summary: In JavaScript, one can access properties using the dot notation (foo.bar) or square-bracket notation (foo["bar"])
  description: "# dot-notation\n\nEnforce dot notation whenever possible\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](dot-notation../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowKeywords](#allowkeywords)\n    2.  [allowPattern](#allowpattern)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIn JavaScript, one can access properties using the dot notation (`foo.bar`) or square-bracket notation (`foo[\"bar\"]`). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.\n\n``` language-js\nfoo[\"bar\"];\n```\n\n## Rule Details\n\nThis rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogXCJlcnJvclwiKi9cblxudmFyIHggPSBmb29bXCJiYXJcIl07In0=)\n\n``` language-js\n/*eslint dot-notation: \"error\"*/\n\nvar x = foo[\"bar\"];\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogXCJlcnJvclwiKi9cblxudmFyIHggPSBmb28uYmFyO1xuXG52YXIgeCA9IGZvb1tiYXJdOyAgICAvLyBQcm9wZXJ0eSBuYW1lIGlzIGEgdmFyaWFibGUsIHNxdWFyZS1icmFja2V0IG5vdGF0aW9uIHJlcXVpcmVkIn0=)\n\n``` language-js\n/*eslint dot-notation: \"error\"*/\n\nvar x = foo.bar;\n\nvar x = foo[bar];    // Property name is a variable, square-bracket notation required\n```\n\n## Options\n\nThis rule accepts a single options argument:\n\n- Set the `allowKeywords` option to `false` (default is `true`) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.\n- Set the `allowPattern` option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).\n\n### allowKeywords\n\nExamples of **correct** code for the `{ \"allowKeywords\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogW1wiZXJyb3JcIiwgeyBcImFsbG93S2V5d29yZHNcIjogZmFsc2UgfV0qL1xuXG52YXIgZm9vID0geyBcImNsYXNzXCI6IFwiQ1MgMTAxXCIgfVxudmFyIHggPSBmb29bXCJjbGFzc1wiXTsgLy8gUHJvcGVydHkgbmFtZSBpcyBhIHJlc2VydmVkIHdvcmQsIHNxdWFyZS1icmFja2V0IG5vdGF0aW9uIHJlcXVpcmVkIn0=)\n\n``` language-js\n/*eslint dot-notation: [\"error\", { \"allowKeywords\": false }]*/\n\nvar foo = { \"class\": \"CS 101\" }\nvar x = foo[\"class\"]; // Property name is a reserved word, square-bracket notation required\n```\n\nExamples of additional **correct** code for the `{ \"allowKeywords\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogW1wiZXJyb3JcIiwgeyBcImFsbG93S2V5d29yZHNcIjogZmFsc2UgfV0qL1xuXG5jbGFzcyBDIHtcbiAgICAjaW47XG4gICAgZm9vKCkge1xuICAgICAgICB0aGlzLiNpbjsgLy8gRG90IG5vdGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwcml2YXRlIGlkZW50aWZpZXJzXG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint dot-notation: [\"error\", { \"allowKeywords\": false }]*/\n\nclass C {\n    #in;\n    foo() {\n        this.#in; // Dot notation is required for private identifiers\n    }\n}\n```\n\n### allowPattern\n\nFor example, when preparing data to be sent to an external API, it is often required to use property names that include underscores. If the `camelcase` rule is in effect, these [snake case](https://en.wikipedia.org/wiki/Snake_case) properties would not be allowed. By providing an `allowPattern` to the `dot-notation` rule, these snake case properties can be accessed with bracket notation.\n\nExamples of **incorrect** code for the sample `{ \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }` (pattern to find snake case named properties) option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogW1wiZXJyb3JcIiwgeyBcImFsbG93UGF0dGVyblwiOiBcIl5bYS16XSsoX1thLXpdKykrJFwiIH1dKi9cblxudmFyIGRhdGEgPSB7fTtcbmRhdGFbXCJmb29CYXJcIl0gPSA0MjsifQ==)\n\n``` language-js\n/*eslint dot-notation: [\"error\", { \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }]*/\n\nvar data = {};\ndata[\"fooBar\"] = 42;\n```\n\nExamples of **correct** code for the sample `{ \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }` (pattern to find snake case named properties) option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGRvdC1ub3RhdGlvbjogW1wiZXJyb3JcIiwgeyBcImFsbG93UGF0dGVyblwiOiBcIl5bYS16XSsoX1thLXpdKykrJFwiIH1dKi9cblxudmFyIGRhdGEgPSB7fTtcbmRhdGFbXCJmb29fYmFyXCJdID0gNDI7In0=)\n\n``` language-js\n/*eslint dot-notation: [\"error\", { \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }]*/\n\nvar data = {};\ndata[\"foo_bar\"] = 42;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/dot-notation.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/dot-notation.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/dot-notation](https://eslint.org/docs/latest/rules/dot-notation)"
- name: eqeqeq
  id: rules/eqeqeq
  summary: The reason for this is that == and != do type coercion which follows the rather obscure Abstract Equality Comparison Algorithm
  description: "# eqeqeq\n\nRequire the use of `===` and `!==`\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](eqeqeq../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [smart](#smart)\n    3.  [allow-null](#allow-null)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3). For instance, the following statements are all considered `true`:\n\n- `[] == false`\n- `[] == ![]`\n- `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGVxZXFlcTogXCJlcnJvclwiKi9cblxuaWYgKHggPT0gNDIpIHsgfVxuXG5pZiAoXCJcIiA9PSB0ZXh0KSB7IH1cblxuaWYgKG9iai5nZXRTdHVmZigpICE9IHVuZGVmaW5lZCkgeyB9In0=)\n\n``` language-js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` \\[see below\\]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGVxZXFlcTogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG5hID09IGJcbmZvbyA9PSB0cnVlXG5iYW5hbmFzICE9IDFcbnZhbHVlID09IHVuZGVmaW5lZFxudHlwZW9mIGZvbyA9PSAndW5kZWZpbmVkJ1xuJ2hlbGxvJyAhPSAnd29ybGQnXG4wID09IDBcbnRydWUgPT0gdHJ1ZVxuZm9vID09IG51bGxcbiJ9)\n\n``` language-js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGVxZXFlcTogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG5hID09PSBiXG5mb28gPT09IHRydWVcbmJhbmFuYXMgIT09IDFcbnZhbHVlID09PSB1bmRlZmluZWRcbnR5cGVvZiBmb28gPT09ICd1bmRlZmluZWQnXG4naGVsbG8nICE9PSAnd29ybGQnXG4wID09PSAwXG50cnVlID09PSB0cnVlXG5mb28gPT09IG51bGxcbiJ9)\n\n``` language-js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n- `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n  - `always` (default) - Always use === or !==.\n  - `never` - Never use === or !== with `null`.\n  - `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n- Comparing two literal values\n- Evaluating the value of `typeof`\n- Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGVxZXFlcTogW1wiZXJyb3JcIiwgXCJzbWFydFwiXSovXG5cbi8vIGNvbXBhcmluZyB0d28gdmFyaWFibGVzIHJlcXVpcmVzID09PVxuYSA9PSBiXG5cbi8vIG9ubHkgb25lIHNpZGUgaXMgYSBsaXRlcmFsXG5mb28gPT0gdHJ1ZVxuYmFuYW5hcyAhPSAxXG5cbi8vIGNvbXBhcmluZyB0byB1bmRlZmluZWQgcmVxdWlyZXMgPT09XG52YWx1ZSA9PSB1bmRlZmluZWQifQ==)\n\n``` language-js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGVxZXFlcTogW1wiZXJyb3JcIiwgXCJzbWFydFwiXSovXG5cbnR5cGVvZiBmb28gPT0gJ3VuZGVmaW5lZCdcbidoZWxsbycgIT0gJ3dvcmxkJ1xuMCA9PSAwXG50cnVlID09IHRydWVcbmZvbyA9PSBudWxsIn0=)\n\n``` language-js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use `\"always\"` and pass a `\"null\"` option property with value `\"ignore\"`. This will tell ESLint to always enforce strict equality except when comparing with the `null` literal.\n\n``` language-js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce a style for using equality operators, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/eqeqeq.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/eqeqeq.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/eqeqeq](https://eslint.org/docs/latest/rules/eqeqeq)"
- name: Extend ESLint
  id: extend/index
  summary: This guide is intended for those who wish to extend the functionality of ESLint
  description: "# Extend ESLint\n\n## Table of Contents\n\n1.  [Ways to Extend ESLint](#ways-to-extend-eslint)\n2.  [Create Plugins](#create-plugins)\n3.  [Custom Rule Tutorial](#custom-rule-tutorial)\n4.  [Custom Rules](#custom-rules)\n5.  [Custom Formatters](#custom-formatters)\n6.  [Custom Parsers](#custom-parsers)\n7.  [Custom Processors](#custom-processors)\n8.  [Share Configurations](#share-configurations)\n\nThis guide is intended for those who wish to extend the functionality of ESLint.\n\nIn order to extend ESLint, it’s recommended that:\n\n- You know JavaScript, since ESLint is written in JavaScript.\n- You have some familiarity with Node.js, since ESLint runs on it.\n- You’re comfortable with command-line programs.\n\nIf that sounds like you, then continue reading to get started.\n\n## [Ways to Extend ESLint](ways-to-extend)\n\nThis page summarizes the various ways that you can extend ESLint and how these extensions all fit together.\n\n## [Create Plugins](plugins)\n\nYou’ve developed custom rules for ESLint and you want to share them with the community. You can publish an ESLint plugin on npm.\n\n## [Custom Rule Tutorial](custom-rule-tutorial)\n\nA tutorial that walks you through creating a custom rule for ESLint.\n\n## [Custom Rules](custom-rules)\n\nThis section explains how to create custom rules to use with ESLint.\n\n## [Custom Formatters](custom-formatters)\n\nThis section explains how you can create a custom formatter to control what ESLint outputs.\n\n## [Custom Parsers](custom-parsers)\n\nIf you don’t want to use the default parser of ESLint, this section explains how to create custom parsers.\n\n## [Custom Processors](custom-processors)\n\nThis section explains how you can use a custom processor to have ESLint process files other than JavaScript.\n\n## [Share Configurations](shareable-configs)\n\nThis section explains how you can bundle and share ESLint configuration in a JavaScript package.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/](https://eslint.org/docs/latest/extend/)"
- name: for-direction
  id: rules/for-direction
  summary: A for loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely
  description: "# for-direction\n\nEnforce \"for\" loop update clause moving the counter in the right direction\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](for-direction../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nA `for` loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as `while` loops. More typically, an infinite `for` loop is a bug.\n\n## Rule Details\n\nThis rule forbids `for` loops where the counter variable changes in such a way that the stop condition will never be met. For example, if the counter variable is increasing (i.e. `i++`) and the stop condition tests that the counter is greater than zero (`i >= 0`) then the loop will never exit.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZvci1kaXJlY3Rpb246IFwiZXJyb3JcIiovXG5mb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpLS0pIHtcbn1cblxuZm9yICh2YXIgaSA9IDEwOyBpID49IDA7IGkrKykge1xufVxuXG5mb3IgKHZhciBpID0gMDsgaSA+IDEwOyBpKyspIHtcbn1cblxuZm9yICh2YXIgaSA9IDA7IDEwID4gaTsgaS0tKSB7XG59XG5cbmNvbnN0IG4gPSAtMjtcbmZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gbikge1xufSJ9)\n\n``` language-js\n/*eslint for-direction: \"error\"*/\nfor (var i = 0; i < 10; i--) {\n}\n\nfor (var i = 10; i >= 0; i++) {\n}\n\nfor (var i = 0; i > 10; i++) {\n}\n\nfor (var i = 0; 10 > i; i--) {\n}\n\nconst n = -2;\nfor (let i = 0; i < 10; i += n) {\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZvci1kaXJlY3Rpb246IFwiZXJyb3JcIiovXG5mb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbn1cblxuZm9yICh2YXIgaSA9IDA7IDEwID4gaTsgaSsrKSB7IC8vIHdpdGggY291bnRlciBcImlcIiBvbiB0aGUgcmlnaHRcbn1cblxuZm9yIChsZXQgaSA9IDEwOyBpID49IDA7IGkgKz0gdGhpcy5zdGVwKSB7IC8vIGRpcmVjdGlvbiB1bmtub3duXG59XG5cbmZvciAobGV0IGkgPSBNSU47IGkgPD0gTUFYOyBpIC09IDApIHsgLy8gbm90IGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZ1xufSJ9)\n\n``` language-js\n/*eslint for-direction: \"error\"*/\nfor (var i = 0; i < 10; i++) {\n}\n\nfor (var i = 0; 10 > i; i++) { // with counter \"i\" on the right\n}\n\nfor (let i = 10; i >= 0; i += this.step) { // direction unknown\n}\n\nfor (let i = MIN; i <= MAX; i -= 0) { // not increasing or decreasing\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v4.0.0-beta.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/for-direction.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/for-direction.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/for-direction](https://eslint.org/docs/latest/rules/for-direction)"
- name: Formatters Reference
  id: use/formatters
  summary: ESLint comes with several built-in formatters to control the appearance of the linting results, and supports third-party formatters as well
  description: "# Formatters Reference\n\n## Table of Contents\n\n1.  [Example Source](#example-source)\n2.  [Built-In Formatter Options](#built-in-formatter-options)\n    1.  [checkstyle](#checkstyle)\n    2.  [compact](#compact)\n    3.  [html](#html)\n    4.  [jslint-xml](#jslint-xml)\n    5.  [json-with-metadata](#json-with-metadata)\n    6.  [json](#json)\n    7.  [junit](#junit)\n    8.  [stylish](#stylish)\n    9.  [tap](#tap)\n    10. [unix](#unix)\n    11. [visualstudio](#visualstudio)\n\nESLint comes with several built-in formatters to control the appearance of the linting results, and supports third-party formatters as well.\n\nYou can specify a formatter using the `--format` or `-f` flag in the CLI. For example, `--format json` uses the `json` formatter.\n\nThe built-in formatter options are:\n\n- [checkstyle](#checkstyle)\n- [compact](#compact)\n- [html](#html)\n- [jslint-xml](#jslint-xml)\n- [json-with-metadata](#json-with-metadata)\n- [json](#json)\n- [junit](#junit)\n- [stylish](#stylish)\n- [tap](#tap)\n- [unix](#unix)\n- [visualstudio](#visualstudio)\n\n## Example Source\n\nExamples of each formatter were created from linting `fullOfProblems.js` using the `.eslintrc.json` configuration shown below.\n\n`fullOfProblems.js`:\n\n``` language-js\nfunction addOne(i) {\n    if (i != NaN) {\n        return i ++\n    } else {\n      return\n    }\n};\n```\n\n`.eslintrc.json`:\n\n``` language-json\n{\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"consistent-return\": 2,\n        \"indent\"           : [1, 4],\n        \"no-else-return\"   : 1,\n        \"semi\"             : [1, \"always\"],\n        \"space-unary-ops\"  : 2\n    }\n}\n```\n\nTests the formatters with the CLI:\n\n``` language-shell\nnpx eslint --format <Add formatter here> fullOfProblems.js\n```\n\n## Built-In Formatter Options\n\n### checkstyle\n\nOutputs results to the [Checkstyle](https://checkstyle.sourceforge.io/) format.\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><checkstyle version=\"4.3\"><file name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\"><error line=\"1\" column=\"10\" severity=\"error\" message=\"&apos;addOne&apos; is defined but never used. (no-unused-vars)\" source=\"eslint.rules.no-unused-vars\" /><error line=\"2\" column=\"9\" severity=\"error\" message=\"Use the isNaN function to compare with NaN. (use-isnan)\" source=\"eslint.rules.use-isnan\" /><error line=\"3\" column=\"16\" severity=\"error\" message=\"Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)\" source=\"eslint.rules.space-unary-ops\" /><error line=\"3\" column=\"20\" severity=\"warning\" message=\"Missing semicolon. (semi)\" source=\"eslint.rules.semi\" /><error line=\"4\" column=\"12\" severity=\"warning\" message=\"Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)\" source=\"eslint.rules.no-else-return\" /><error line=\"5\" column=\"1\" severity=\"warning\" message=\"Expected indentation of 8 spaces but found 6. (indent)\" source=\"eslint.rules.indent\" /><error line=\"5\" column=\"7\" severity=\"error\" message=\"Function &apos;addOne&apos; expected a return value. (consistent-return)\" source=\"eslint.rules.consistent-return\" /><error line=\"5\" column=\"13\" severity=\"warning\" message=\"Missing semicolon. (semi)\" source=\"eslint.rules.semi\" /><error line=\"7\" column=\"2\" severity=\"error\" message=\"Unnecessary semicolon. (no-extra-semi)\" source=\"eslint.rules.no-extra-semi\" /></file></checkstyle>\n```\n\n### compact\n\nHuman-readable output format. Mimics the default output of JSHint.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 1, col 10, Error - 'addOne' is defined but never used. (no-unused-vars)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 2, col 9, Error - Use the isNaN function to compare with NaN. (use-isnan)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 3, col 16, Error - Unexpected space before unary operator '++'. (space-unary-ops)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 3, col 20, Warning - Missing semicolon. (semi)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 4, col 12, Warning - Unnecessary 'else' after 'return'. (no-else-return)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 1, Warning - Expected indentation of 8 spaces but found 6. (indent)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 7, Error - Function 'addOne' expected a return value. (consistent-return)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 13, Warning - Missing semicolon. (semi)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 7, col 2, Error - Unnecessary semicolon. (no-extra-semi)\n\n9 problems\n```\n\n### html\n\nOutputs results to HTML. The `html` formatter is useful for visual presentation in the browser.\n\nExample output:\n\n### jslint-xml\n\nOutputs results to format compatible with the [JSLint Jenkins plugin](https://plugins.jenkins.io/jslint/).\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><jslint><file name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\"><issue line=\"1\" char=\"10\" evidence=\"\" reason=\"&apos;addOne&apos; is defined but never used. (no-unused-vars)\" /><issue line=\"2\" char=\"9\" evidence=\"\" reason=\"Use the isNaN function to compare with NaN. (use-isnan)\" /><issue line=\"3\" char=\"16\" evidence=\"\" reason=\"Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)\" /><issue line=\"3\" char=\"20\" evidence=\"\" reason=\"Missing semicolon. (semi)\" /><issue line=\"4\" char=\"12\" evidence=\"\" reason=\"Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)\" /><issue line=\"5\" char=\"1\" evidence=\"\" reason=\"Expected indentation of 8 spaces but found 6. (indent)\" /><issue line=\"5\" char=\"7\" evidence=\"\" reason=\"Function &apos;addOne&apos; expected a return value. (consistent-return)\" /><issue line=\"5\" char=\"13\" evidence=\"\" reason=\"Missing semicolon. (semi)\" /><issue line=\"7\" char=\"2\" evidence=\"\" reason=\"Unnecessary semicolon. (no-extra-semi)\" /></file></jslint>\n```\n\n### json-with-metadata\n\nOutputs JSON-serialized results. The `json-with-metadata` provides the same linting results as the [`json`](#json) formatter with additional metadata about the rules applied. The linting results are included in the `results` property and the rules metadata is included in the `metadata` property.\n\nAlternatively, you can use the [ESLint Node.js API](../integrate/nodejs-api) to programmatically use ESLint.\n\nExample output (formatted for easier reading):\n\n``` language-json\n{\n    \"results\": [\n        {\n            \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n            \"messages\": [\n                {\n                    \"ruleId\": \"no-unused-vars\",\n                    \"severity\": 2,\n                    \"message\": \"'addOne' is defined but never used.\",\n                    \"line\": 1,\n                    \"column\": 10,\n                    \"nodeType\": \"Identifier\",\n                    \"messageId\": \"unusedVar\",\n                    \"endLine\": 1,\n                    \"endColumn\": 16\n                },\n                {\n                    \"ruleId\": \"use-isnan\",\n                    \"severity\": 2,\n                    \"message\": \"Use the isNaN function to compare with NaN.\",\n                    \"line\": 2,\n                    \"column\": 9,\n                    \"nodeType\": \"BinaryExpression\",\n                    \"messageId\": \"comparisonWithNaN\",\n                    \"endLine\": 2,\n                    \"endColumn\": 17\n                },\n                {\n                    \"ruleId\": \"space-unary-ops\",\n                    \"severity\": 2,\n                    \"message\": \"Unexpected space before unary operator '++'.\",\n                    \"line\": 3,\n                    \"column\": 16,\n                    \"nodeType\": \"UpdateExpression\",\n                    \"messageId\": \"unexpectedBefore\",\n                    \"endLine\": 3,\n                    \"endColumn\": 20,\n                    \"fix\": {\n                        \"range\": [\n                            57,\n                            58\n                        ],\n                        \"text\": \"\"\n                    }\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 3,\n                    \"column\": 20,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 4,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            60,\n                            60\n                        ],\n                        \"text\": \";\"\n                    }\n                },\n                {\n                    \"ruleId\": \"no-else-return\",\n                    \"severity\": 1,\n                    \"message\": \"Unnecessary 'else' after 'return'.\",\n                    \"line\": 4,\n                    \"column\": 12,\n                    \"nodeType\": \"BlockStatement\",\n                    \"messageId\": \"unexpected\",\n                    \"endLine\": 6,\n                    \"endColumn\": 6,\n                    \"fix\": {\n                        \"range\": [\n                            0,\n                            94\n                        ],\n                        \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                    }\n                },\n                {\n                    \"ruleId\": \"indent\",\n                    \"severity\": 1,\n                    \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                    \"line\": 5,\n                    \"column\": 1,\n                    \"nodeType\": \"Keyword\",\n                    \"messageId\": \"wrongIndentation\",\n                    \"endLine\": 5,\n                    \"endColumn\": 7,\n                    \"fix\": {\n                        \"range\": [\n                            74,\n                            80\n                        ],\n                        \"text\": \"        \"\n                    }\n                },\n                {\n                    \"ruleId\": \"consistent-return\",\n                    \"severity\": 2,\n                    \"message\": \"Function 'addOne' expected a return value.\",\n                    \"line\": 5,\n                    \"column\": 7,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingReturnValue\",\n                    \"endLine\": 5,\n                    \"endColumn\": 13\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 5,\n                    \"column\": 13,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 6,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            86,\n                            86\n                        ],\n                        \"text\": \";\"\n                    }\n                },\n                {\n                    \"ruleId\": \"no-extra-semi\",\n                    \"severity\": 2,\n                    \"message\": \"Unnecessary semicolon.\",\n                    \"line\": 7,\n                    \"column\": 2,\n                    \"nodeType\": \"EmptyStatement\",\n                    \"messageId\": \"unexpected\",\n                    \"endLine\": 7,\n                    \"endColumn\": 3,\n                    \"fix\": {\n                        \"range\": [\n                            93,\n                            95\n                        ],\n                        \"text\": \"}\"\n                    }\n                }\n            ],\n            \"suppressedMessages\": [],\n            \"errorCount\": 5,\n            \"fatalErrorCount\": 0,\n            \"warningCount\": 4,\n            \"fixableErrorCount\": 2,\n            \"fixableWarningCount\": 4,\n            \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n        }\n    ],\n    \"metadata\": {\n        \"rulesMeta\": {\n            \"no-else-return\": {\n                \"type\": \"suggestion\",\n                \"docs\": {\n                    \"description\": \"Disallow `else` blocks after `return` statements in `if` statements\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/no-else-return\"\n                },\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"allowElseIf\": {\n                                \"type\": \"boolean\",\n                                \"default\": true\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"fixable\": \"code\",\n                \"messages\": {\n                    \"unexpected\": \"Unnecessary 'else' after 'return'.\"\n                }\n            },\n            \"indent\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Enforce consistent indentation\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/indent\"\n                },\n                \"fixable\": \"whitespace\",\n                \"schema\": [\n                    {\n                        \"oneOf\": [\n                            {\n                                \"enum\": [\n                                    \"tab\"\n                                ]\n                            },\n                            {\n                                \"type\": \"integer\",\n                                \"minimum\": 0\n                            }\n                        ]\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"SwitchCase\": {\n                                \"type\": \"integer\",\n                                \"minimum\": 0,\n                                \"default\": 0\n                            },\n                            \"VariableDeclarator\": {\n                                \"oneOf\": [\n                                    {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"var\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            },\n                                            \"let\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            },\n                                            \"const\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            }\n                                        },\n                                        \"additionalProperties\": false\n                                    }\n                                ]\n                            },\n                            \"outerIIFEBody\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"MemberExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"FunctionDeclaration\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"parameters\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"FunctionExpression\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"parameters\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"StaticBlock\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"CallExpression\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"arguments\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"ArrayExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"ObjectExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"ImportDeclaration\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"flatTernaryExpressions\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"offsetTernaryExpressions\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"ignoredNodes\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"not\": {\n                                        \"pattern\": \":exit$\"\n                                    }\n                                }\n                            },\n                            \"ignoreComments\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"wrongIndentation\": \"Expected indentation of  but found .\"\n                }\n            },\n            \"space-unary-ops\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Enforce consistent spacing before or after unary operators\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/space-unary-ops\"\n                },\n                \"fixable\": \"whitespace\",\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"words\": {\n                                \"type\": \"boolean\",\n                                \"default\": true\n                            },\n                            \"nonwords\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"overrides\": {\n                                \"type\": \"object\",\n                                \"additionalProperties\": {\n                                    \"type\": \"boolean\"\n                                }\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"unexpectedBefore\": \"Unexpected space before unary operator ''.\",\n                    \"unexpectedAfter\": \"Unexpected space after unary operator ''.\",\n                    \"unexpectedAfterWord\": \"Unexpected space after unary word operator ''.\",\n                    \"wordOperator\": \"Unary word operator '' must be followed by whitespace.\",\n                    \"operator\": \"Unary operator '' must be followed by whitespace.\",\n                    \"beforeUnaryExpressions\": \"Space is required before unary expressions ''.\"\n                }\n            },\n            \"semi\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Require or disallow semicolons instead of ASI\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/semi\"\n                },\n                \"fixable\": \"code\",\n                \"schema\": {\n                    \"anyOf\": [\n                        {\n                            \"type\": \"array\",\n                            \"items\": [\n                                {\n                                    \"enum\": [\n                                        \"never\"\n                                    ]\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"beforeStatementContinuationChars\": {\n                                            \"enum\": [\n                                                \"always\",\n                                                \"any\",\n                                                \"never\"\n                                            ]\n                                        }\n                                    },\n                                    \"additionalProperties\": false\n                                }\n                            ],\n                            \"minItems\": 0,\n                            \"maxItems\": 2\n                        },\n                        {\n                            \"type\": \"array\",\n                            \"items\": [\n                                {\n                                    \"enum\": [\n                                        \"always\"\n                                    ]\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"omitLastInOneLineBlock\": {\n                                            \"type\": \"boolean\"\n                                        },\n                                        \"omitLastInOneLineClassBody\": {\n                                            \"type\": \"boolean\"\n                                        }\n                                    },\n                                    \"additionalProperties\": false\n                                }\n                            ],\n                            \"minItems\": 0,\n                            \"maxItems\": 2\n                        }\n                    ]\n                },\n                \"messages\": {\n                    \"missingSemi\": \"Missing semicolon.\",\n                    \"extraSemi\": \"Extra semicolon.\"\n                }\n            },\n            \"consistent-return\": {\n                \"type\": \"suggestion\",\n                \"docs\": {\n                    \"description\": \"Require `return` statements to either always or never specify values\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/consistent-return\"\n                },\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"treatUndefinedAsUnspecified\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"missingReturn\": \"Expected to return a value at the end of .\",\n                    \"missingReturnValue\": \" expected a return value.\",\n                    \"unexpectedReturnValue\": \" expected no return value.\"\n                }\n            }\n        }\n    }\n}\n```\n\n### json\n\nOutputs JSON-serialized results. The `json` formatter is useful when you want to programmatically work with the CLI's linting results.\n\nAlternatively, you can use the [ESLint Node.js API](../integrate/nodejs-api) to programmatically use ESLint.\n\nExample output (formatted for easier reading):\n\n``` language-json\n[\n    {\n        \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n        \"messages\": [\n            {\n                \"ruleId\": \"no-unused-vars\",\n                \"severity\": 2,\n                \"message\": \"'addOne' is defined but never used.\",\n                \"line\": 1,\n                \"column\": 10,\n                \"nodeType\": \"Identifier\",\n                \"messageId\": \"unusedVar\",\n                \"endLine\": 1,\n                \"endColumn\": 16\n            },\n            {\n                \"ruleId\": \"use-isnan\",\n                \"severity\": 2,\n                \"message\": \"Use the isNaN function to compare with NaN.\",\n                \"line\": 2,\n                \"column\": 9,\n                \"nodeType\": \"BinaryExpression\",\n                \"messageId\": \"comparisonWithNaN\",\n                \"endLine\": 2,\n                \"endColumn\": 17\n            },\n            {\n                \"ruleId\": \"space-unary-ops\",\n                \"severity\": 2,\n                \"message\": \"Unexpected space before unary operator '++'.\",\n                \"line\": 3,\n                \"column\": 16,\n                \"nodeType\": \"UpdateExpression\",\n                \"messageId\": \"unexpectedBefore\",\n                \"endLine\": 3,\n                \"endColumn\": 20,\n                \"fix\": {\n                    \"range\": [\n                        57,\n                        58\n                    ],\n                    \"text\": \"\"\n                }\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 3,\n                \"column\": 20,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 4,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        60,\n                        60\n                    ],\n                    \"text\": \";\"\n                }\n            },\n            {\n                \"ruleId\": \"no-else-return\",\n                \"severity\": 1,\n                \"message\": \"Unnecessary 'else' after 'return'.\",\n                \"line\": 4,\n                \"column\": 12,\n                \"nodeType\": \"BlockStatement\",\n                \"messageId\": \"unexpected\",\n                \"endLine\": 6,\n                \"endColumn\": 6,\n                \"fix\": {\n                    \"range\": [\n                        0,\n                        94\n                    ],\n                    \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                }\n            },\n            {\n                \"ruleId\": \"indent\",\n                \"severity\": 1,\n                \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                \"line\": 5,\n                \"column\": 1,\n                \"nodeType\": \"Keyword\",\n                \"messageId\": \"wrongIndentation\",\n                \"endLine\": 5,\n                \"endColumn\": 7,\n                \"fix\": {\n                    \"range\": [\n                        74,\n                        80\n                    ],\n                    \"text\": \"        \"\n                }\n            },\n            {\n                \"ruleId\": \"consistent-return\",\n                \"severity\": 2,\n                \"message\": \"Function 'addOne' expected a return value.\",\n                \"line\": 5,\n                \"column\": 7,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingReturnValue\",\n                \"endLine\": 5,\n                \"endColumn\": 13\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 5,\n                \"column\": 13,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 6,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        86,\n                        86\n                    ],\n                    \"text\": \";\"\n                }\n            },\n            {\n                \"ruleId\": \"no-extra-semi\",\n                \"severity\": 2,\n                \"message\": \"Unnecessary semicolon.\",\n                \"line\": 7,\n                \"column\": 2,\n                \"nodeType\": \"EmptyStatement\",\n                \"messageId\": \"unexpected\",\n                \"endLine\": 7,\n                \"endColumn\": 3,\n                \"fix\": {\n                    \"range\": [\n                        93,\n                        95\n                    ],\n                    \"text\": \"}\"\n                }\n            }\n        ],\n        \"suppressedMessages\": [],\n        \"errorCount\": 5,\n        \"fatalErrorCount\": 0,\n        \"warningCount\": 4,\n        \"fixableErrorCount\": 2,\n        \"fixableWarningCount\": 4,\n        \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n    }\n]\n```\n\n### junit\n\nOutputs results to format compatible with the [JUnit Jenkins plugin](https://plugins.jenkins.io/junit/).\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuites>\n<testsuite package=\"org.eslint\" time=\"0\" tests=\"9\" errors=\"9\" name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\">\n<testcase time=\"0\" name=\"org.eslint.no-unused-vars\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"&apos;addOne&apos; is defined but never used.\"><![CDATA[line 1, col 10, Error - &apos;addOne&apos; is defined but never used. (no-unused-vars)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.use-isnan\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Use the isNaN function to compare with NaN.\"><![CDATA[line 2, col 9, Error - Use the isNaN function to compare with NaN. (use-isnan)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.space-unary-ops\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unexpected space before unary operator &apos;++&apos;.\"><![CDATA[line 3, col 16, Error - Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Missing semicolon.\"><![CDATA[line 3, col 20, Warning - Missing semicolon. (semi)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.no-else-return\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unnecessary &apos;else&apos; after &apos;return&apos;.\"><![CDATA[line 4, col 12, Warning - Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.indent\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Expected indentation of 8 spaces but found 6.\"><![CDATA[line 5, col 1, Warning - Expected indentation of 8 spaces but found 6. (indent)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.consistent-return\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Function &apos;addOne&apos; expected a return value.\"><![CDATA[line 5, col 7, Error - Function &apos;addOne&apos; expected a return value. (consistent-return)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Missing semicolon.\"><![CDATA[line 5, col 13, Warning - Missing semicolon. (semi)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.no-extra-semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unnecessary semicolon.\"><![CDATA[line 7, col 2, Error - Unnecessary semicolon. (no-extra-semi)]]></failure></testcase>\n</testsuite>\n</testsuites>\n```\n\n### stylish\n\nHuman-readable output format. This is the default formatter.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\n  1:10  error    'addOne' is defined but never used            no-unused-vars\n  2:9   error    Use the isNaN function to compare with NaN    use-isnan\n  3:16  error    Unexpected space before unary operator '++'   space-unary-ops\n  3:20  warning  Missing semicolon                             semi\n  4:12  warning  Unnecessary 'else' after 'return'             no-else-return\n  5:1   warning  Expected indentation of 8 spaces but found 6  indent\n  5:7   error    Function 'addOne' expected a return value     consistent-return\n  5:13  warning  Missing semicolon                             semi\n  7:2   error    Unnecessary semicolon                         no-extra-semi\n\n✖ 9 problems (5 errors, 4 warnings)\n  2 errors and 4 warnings potentially fixable with the `--fix` option.\n```\n\n### tap\n\nOutputs results to the [Test Anything Protocol (TAP)](https://testanything.org/) specification format.\n\nExample output:\n\n``` language-text\nTAP version 13\n1..1\nnot ok 1 - /var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\n  ---\n  message: '''addOne'' is defined but never used.'\n  severity: error\n  data:\n    line: 1\n    column: 10\n    ruleId: no-unused-vars\n  messages:\n    - message: Use the isNaN function to compare with NaN.\n      severity: error\n      data:\n        line: 2\n        column: 9\n        ruleId: use-isnan\n    - message: Unexpected space before unary operator '++'.\n      severity: error\n      data:\n        line: 3\n        column: 16\n        ruleId: space-unary-ops\n    - message: Missing semicolon.\n      severity: warning\n      data:\n        line: 3\n        column: 20\n        ruleId: semi\n    - message: Unnecessary 'else' after 'return'.\n      severity: warning\n      data:\n        line: 4\n        column: 12\n        ruleId: no-else-return\n    - message: Expected indentation of 8 spaces but found 6.\n      severity: warning\n      data:\n        line: 5\n        column: 1\n        ruleId: indent\n    - message: Function 'addOne' expected a return value.\n      severity: error\n      data:\n        line: 5\n        column: 7\n        ruleId: consistent-return\n    - message: Missing semicolon.\n      severity: warning\n      data:\n        line: 5\n        column: 13\n        ruleId: semi\n    - message: Unnecessary semicolon.\n      severity: error\n      data:\n        line: 7\n        column: 2\n        ruleId: no-extra-semi\n  ...\n```\n\n### unix\n\nOutputs results to a format similar to many commands in UNIX-like systems. Parsable with tools such as [grep](https://www.gnu.org/software/grep/manual/grep.html), [sed](https://www.gnu.org/software/sed/manual/sed.html), and [awk](https://www.gnu.org/software/gawk/manual/gawk.html).\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:1:10: 'addOne' is defined but never used. [Error/no-unused-vars]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:2:9: Use the isNaN function to compare with NaN. [Error/use-isnan]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:3:16: Unexpected space before unary operator '++'. [Error/space-unary-ops]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:3:20: Missing semicolon. [Warning/semi]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:4:12: Unnecessary 'else' after 'return'. [Warning/no-else-return]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:1: Expected indentation of 8 spaces but found 6. [Warning/indent]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:7: Function 'addOne' expected a return value. [Error/consistent-return]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:13: Missing semicolon. [Warning/semi]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:7:2: Unnecessary semicolon. [Error/no-extra-semi]\n\n9 problems\n```\n\n### visualstudio\n\nOutputs results to format compatible with the integrated terminal of the [Visual Studio](https://visualstudio.microsoft.com/) IDE. When using Visual Studio, you can click on the linting results in the integrated terminal to go to the issue in the source code.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(1,10): error no-unused-vars : 'addOne' is defined but never used.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(2,9): error use-isnan : Use the isNaN function to compare with NaN.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(3,16): error space-unary-ops : Unexpected space before unary operator '++'.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(3,20): warning semi : Missing semicolon.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(4,12): warning no-else-return : Unnecessary 'else' after 'return'.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,1): warning indent : Expected indentation of 8 spaces but found 6.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,7): error consistent-return : Function 'addOne' expected a return value.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,13): warning semi : Missing semicolon.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(7,2): error no-extra-semi : Unnecessary semicolon.\n\n9 problems\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/formatters](https://eslint.org/docs/latest/use/formatters)"
- name: Formatters Reference
  id: use/formatters/index
  summary: ESLint comes with several built-in formatters to control the appearance of the linting results, and supports third-party formatters as well
  description: "# Formatters Reference\n\n## Table of Contents\n\n1.  [Example Source](#example-source)\n2.  [Built-In Formatter Options](#built-in-formatter-options)\n    1.  [checkstyle](#checkstyle)\n    2.  [compact](#compact)\n    3.  [html](#html)\n    4.  [jslint-xml](#jslint-xml)\n    5.  [json-with-metadata](#json-with-metadata)\n    6.  [json](#json)\n    7.  [junit](#junit)\n    8.  [stylish](#stylish)\n    9.  [tap](#tap)\n    10. [unix](#unix)\n    11. [visualstudio](#visualstudio)\n\nESLint comes with several built-in formatters to control the appearance of the linting results, and supports third-party formatters as well.\n\nYou can specify a formatter using the `--format` or `-f` flag in the CLI. For example, `--format json` uses the `json` formatter.\n\nThe built-in formatter options are:\n\n- [checkstyle](#checkstyle)\n- [compact](#compact)\n- [html](#html)\n- [jslint-xml](#jslint-xml)\n- [json-with-metadata](#json-with-metadata)\n- [json](#json)\n- [junit](#junit)\n- [stylish](#stylish)\n- [tap](#tap)\n- [unix](#unix)\n- [visualstudio](#visualstudio)\n\n## Example Source\n\nExamples of each formatter were created from linting `fullOfProblems.js` using the `.eslintrc.json` configuration shown below.\n\n`fullOfProblems.js`:\n\n``` language-js\nfunction addOne(i) {\n    if (i != NaN) {\n        return i ++\n    } else {\n      return\n    }\n};\n```\n\n`.eslintrc.json`:\n\n``` language-json\n{\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"consistent-return\": 2,\n        \"indent\"           : [1, 4],\n        \"no-else-return\"   : 1,\n        \"semi\"             : [1, \"always\"],\n        \"space-unary-ops\"  : 2\n    }\n}\n```\n\nTests the formatters with the CLI:\n\n``` language-shell\nnpx eslint --format <Add formatter here> fullOfProblems.js\n```\n\n## Built-In Formatter Options\n\n### checkstyle\n\nOutputs results to the [Checkstyle](https://checkstyle.sourceforge.io/) format.\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><checkstyle version=\"4.3\"><file name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\"><error line=\"1\" column=\"10\" severity=\"error\" message=\"&apos;addOne&apos; is defined but never used. (no-unused-vars)\" source=\"eslint.rules.no-unused-vars\" /><error line=\"2\" column=\"9\" severity=\"error\" message=\"Use the isNaN function to compare with NaN. (use-isnan)\" source=\"eslint.rules.use-isnan\" /><error line=\"3\" column=\"16\" severity=\"error\" message=\"Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)\" source=\"eslint.rules.space-unary-ops\" /><error line=\"3\" column=\"20\" severity=\"warning\" message=\"Missing semicolon. (semi)\" source=\"eslint.rules.semi\" /><error line=\"4\" column=\"12\" severity=\"warning\" message=\"Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)\" source=\"eslint.rules.no-else-return\" /><error line=\"5\" column=\"1\" severity=\"warning\" message=\"Expected indentation of 8 spaces but found 6. (indent)\" source=\"eslint.rules.indent\" /><error line=\"5\" column=\"7\" severity=\"error\" message=\"Function &apos;addOne&apos; expected a return value. (consistent-return)\" source=\"eslint.rules.consistent-return\" /><error line=\"5\" column=\"13\" severity=\"warning\" message=\"Missing semicolon. (semi)\" source=\"eslint.rules.semi\" /><error line=\"7\" column=\"2\" severity=\"error\" message=\"Unnecessary semicolon. (no-extra-semi)\" source=\"eslint.rules.no-extra-semi\" /></file></checkstyle>\n```\n\n### compact\n\nHuman-readable output format. Mimics the default output of JSHint.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 1, col 10, Error - 'addOne' is defined but never used. (no-unused-vars)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 2, col 9, Error - Use the isNaN function to compare with NaN. (use-isnan)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 3, col 16, Error - Unexpected space before unary operator '++'. (space-unary-ops)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 3, col 20, Warning - Missing semicolon. (semi)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 4, col 12, Warning - Unnecessary 'else' after 'return'. (no-else-return)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 1, Warning - Expected indentation of 8 spaces but found 6. (indent)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 7, Error - Function 'addOne' expected a return value. (consistent-return)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 5, col 13, Warning - Missing semicolon. (semi)\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js: line 7, col 2, Error - Unnecessary semicolon. (no-extra-semi)\n\n9 problems\n```\n\n### html\n\nOutputs results to HTML. The `html` formatter is useful for visual presentation in the browser.\n\nExample output:\n\n### jslint-xml\n\nOutputs results to format compatible with the [JSLint Jenkins plugin](https://plugins.jenkins.io/jslint/).\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><jslint><file name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\"><issue line=\"1\" char=\"10\" evidence=\"\" reason=\"&apos;addOne&apos; is defined but never used. (no-unused-vars)\" /><issue line=\"2\" char=\"9\" evidence=\"\" reason=\"Use the isNaN function to compare with NaN. (use-isnan)\" /><issue line=\"3\" char=\"16\" evidence=\"\" reason=\"Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)\" /><issue line=\"3\" char=\"20\" evidence=\"\" reason=\"Missing semicolon. (semi)\" /><issue line=\"4\" char=\"12\" evidence=\"\" reason=\"Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)\" /><issue line=\"5\" char=\"1\" evidence=\"\" reason=\"Expected indentation of 8 spaces but found 6. (indent)\" /><issue line=\"5\" char=\"7\" evidence=\"\" reason=\"Function &apos;addOne&apos; expected a return value. (consistent-return)\" /><issue line=\"5\" char=\"13\" evidence=\"\" reason=\"Missing semicolon. (semi)\" /><issue line=\"7\" char=\"2\" evidence=\"\" reason=\"Unnecessary semicolon. (no-extra-semi)\" /></file></jslint>\n```\n\n### json-with-metadata\n\nOutputs JSON-serialized results. The `json-with-metadata` provides the same linting results as the [`json`](#json) formatter with additional metadata about the rules applied. The linting results are included in the `results` property and the rules metadata is included in the `metadata` property.\n\nAlternatively, you can use the [ESLint Node.js API](../../integrate/nodejs-api) to programmatically use ESLint.\n\nExample output (formatted for easier reading):\n\n``` language-json\n{\n    \"results\": [\n        {\n            \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n            \"messages\": [\n                {\n                    \"ruleId\": \"no-unused-vars\",\n                    \"severity\": 2,\n                    \"message\": \"'addOne' is defined but never used.\",\n                    \"line\": 1,\n                    \"column\": 10,\n                    \"nodeType\": \"Identifier\",\n                    \"messageId\": \"unusedVar\",\n                    \"endLine\": 1,\n                    \"endColumn\": 16\n                },\n                {\n                    \"ruleId\": \"use-isnan\",\n                    \"severity\": 2,\n                    \"message\": \"Use the isNaN function to compare with NaN.\",\n                    \"line\": 2,\n                    \"column\": 9,\n                    \"nodeType\": \"BinaryExpression\",\n                    \"messageId\": \"comparisonWithNaN\",\n                    \"endLine\": 2,\n                    \"endColumn\": 17\n                },\n                {\n                    \"ruleId\": \"space-unary-ops\",\n                    \"severity\": 2,\n                    \"message\": \"Unexpected space before unary operator '++'.\",\n                    \"line\": 3,\n                    \"column\": 16,\n                    \"nodeType\": \"UpdateExpression\",\n                    \"messageId\": \"unexpectedBefore\",\n                    \"endLine\": 3,\n                    \"endColumn\": 20,\n                    \"fix\": {\n                        \"range\": [\n                            57,\n                            58\n                        ],\n                        \"text\": \"\"\n                    }\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 3,\n                    \"column\": 20,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 4,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            60,\n                            60\n                        ],\n                        \"text\": \";\"\n                    }\n                },\n                {\n                    \"ruleId\": \"no-else-return\",\n                    \"severity\": 1,\n                    \"message\": \"Unnecessary 'else' after 'return'.\",\n                    \"line\": 4,\n                    \"column\": 12,\n                    \"nodeType\": \"BlockStatement\",\n                    \"messageId\": \"unexpected\",\n                    \"endLine\": 6,\n                    \"endColumn\": 6,\n                    \"fix\": {\n                        \"range\": [\n                            0,\n                            94\n                        ],\n                        \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                    }\n                },\n                {\n                    \"ruleId\": \"indent\",\n                    \"severity\": 1,\n                    \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                    \"line\": 5,\n                    \"column\": 1,\n                    \"nodeType\": \"Keyword\",\n                    \"messageId\": \"wrongIndentation\",\n                    \"endLine\": 5,\n                    \"endColumn\": 7,\n                    \"fix\": {\n                        \"range\": [\n                            74,\n                            80\n                        ],\n                        \"text\": \"        \"\n                    }\n                },\n                {\n                    \"ruleId\": \"consistent-return\",\n                    \"severity\": 2,\n                    \"message\": \"Function 'addOne' expected a return value.\",\n                    \"line\": 5,\n                    \"column\": 7,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingReturnValue\",\n                    \"endLine\": 5,\n                    \"endColumn\": 13\n                },\n                {\n                    \"ruleId\": \"semi\",\n                    \"severity\": 1,\n                    \"message\": \"Missing semicolon.\",\n                    \"line\": 5,\n                    \"column\": 13,\n                    \"nodeType\": \"ReturnStatement\",\n                    \"messageId\": \"missingSemi\",\n                    \"endLine\": 6,\n                    \"endColumn\": 1,\n                    \"fix\": {\n                        \"range\": [\n                            86,\n                            86\n                        ],\n                        \"text\": \";\"\n                    }\n                },\n                {\n                    \"ruleId\": \"no-extra-semi\",\n                    \"severity\": 2,\n                    \"message\": \"Unnecessary semicolon.\",\n                    \"line\": 7,\n                    \"column\": 2,\n                    \"nodeType\": \"EmptyStatement\",\n                    \"messageId\": \"unexpected\",\n                    \"endLine\": 7,\n                    \"endColumn\": 3,\n                    \"fix\": {\n                        \"range\": [\n                            93,\n                            95\n                        ],\n                        \"text\": \"}\"\n                    }\n                }\n            ],\n            \"suppressedMessages\": [],\n            \"errorCount\": 5,\n            \"fatalErrorCount\": 0,\n            \"warningCount\": 4,\n            \"fixableErrorCount\": 2,\n            \"fixableWarningCount\": 4,\n            \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n        }\n    ],\n    \"metadata\": {\n        \"rulesMeta\": {\n            \"no-else-return\": {\n                \"type\": \"suggestion\",\n                \"docs\": {\n                    \"description\": \"Disallow `else` blocks after `return` statements in `if` statements\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/no-else-return\"\n                },\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"allowElseIf\": {\n                                \"type\": \"boolean\",\n                                \"default\": true\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"fixable\": \"code\",\n                \"messages\": {\n                    \"unexpected\": \"Unnecessary 'else' after 'return'.\"\n                }\n            },\n            \"indent\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Enforce consistent indentation\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/indent\"\n                },\n                \"fixable\": \"whitespace\",\n                \"schema\": [\n                    {\n                        \"oneOf\": [\n                            {\n                                \"enum\": [\n                                    \"tab\"\n                                ]\n                            },\n                            {\n                                \"type\": \"integer\",\n                                \"minimum\": 0\n                            }\n                        ]\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"SwitchCase\": {\n                                \"type\": \"integer\",\n                                \"minimum\": 0,\n                                \"default\": 0\n                            },\n                            \"VariableDeclarator\": {\n                                \"oneOf\": [\n                                    {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"var\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            },\n                                            \"let\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            },\n                                            \"const\": {\n                                                \"oneOf\": [\n                                                    {\n                                                        \"type\": \"integer\",\n                                                        \"minimum\": 0\n                                                    },\n                                                    {\n                                                        \"enum\": [\n                                                            \"first\",\n                                                            \"off\"\n                                                        ]\n                                                    }\n                                                ]\n                                            }\n                                        },\n                                        \"additionalProperties\": false\n                                    }\n                                ]\n                            },\n                            \"outerIIFEBody\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"MemberExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"FunctionDeclaration\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"parameters\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"FunctionExpression\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"parameters\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"StaticBlock\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"body\": {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"CallExpression\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"arguments\": {\n                                        \"oneOf\": [\n                                            {\n                                                \"type\": \"integer\",\n                                                \"minimum\": 0\n                                            },\n                                            {\n                                                \"enum\": [\n                                                    \"first\",\n                                                    \"off\"\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            },\n                            \"ArrayExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"ObjectExpression\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"ImportDeclaration\": {\n                                \"oneOf\": [\n                                    {\n                                        \"type\": \"integer\",\n                                        \"minimum\": 0\n                                    },\n                                    {\n                                        \"enum\": [\n                                            \"first\",\n                                            \"off\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"flatTernaryExpressions\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"offsetTernaryExpressions\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"ignoredNodes\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"not\": {\n                                        \"pattern\": \":exit$\"\n                                    }\n                                }\n                            },\n                            \"ignoreComments\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"wrongIndentation\": \"Expected indentation of  but found .\"\n                }\n            },\n            \"space-unary-ops\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Enforce consistent spacing before or after unary operators\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/space-unary-ops\"\n                },\n                \"fixable\": \"whitespace\",\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"words\": {\n                                \"type\": \"boolean\",\n                                \"default\": true\n                            },\n                            \"nonwords\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            },\n                            \"overrides\": {\n                                \"type\": \"object\",\n                                \"additionalProperties\": {\n                                    \"type\": \"boolean\"\n                                }\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"unexpectedBefore\": \"Unexpected space before unary operator ''.\",\n                    \"unexpectedAfter\": \"Unexpected space after unary operator ''.\",\n                    \"unexpectedAfterWord\": \"Unexpected space after unary word operator ''.\",\n                    \"wordOperator\": \"Unary word operator '' must be followed by whitespace.\",\n                    \"operator\": \"Unary operator '' must be followed by whitespace.\",\n                    \"beforeUnaryExpressions\": \"Space is required before unary expressions ''.\"\n                }\n            },\n            \"semi\": {\n                \"deprecated\": true,\n                \"replacedBy\": [],\n                \"type\": \"layout\",\n                \"docs\": {\n                    \"description\": \"Require or disallow semicolons instead of ASI\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/semi\"\n                },\n                \"fixable\": \"code\",\n                \"schema\": {\n                    \"anyOf\": [\n                        {\n                            \"type\": \"array\",\n                            \"items\": [\n                                {\n                                    \"enum\": [\n                                        \"never\"\n                                    ]\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"beforeStatementContinuationChars\": {\n                                            \"enum\": [\n                                                \"always\",\n                                                \"any\",\n                                                \"never\"\n                                            ]\n                                        }\n                                    },\n                                    \"additionalProperties\": false\n                                }\n                            ],\n                            \"minItems\": 0,\n                            \"maxItems\": 2\n                        },\n                        {\n                            \"type\": \"array\",\n                            \"items\": [\n                                {\n                                    \"enum\": [\n                                        \"always\"\n                                    ]\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"omitLastInOneLineBlock\": {\n                                            \"type\": \"boolean\"\n                                        },\n                                        \"omitLastInOneLineClassBody\": {\n                                            \"type\": \"boolean\"\n                                        }\n                                    },\n                                    \"additionalProperties\": false\n                                }\n                            ],\n                            \"minItems\": 0,\n                            \"maxItems\": 2\n                        }\n                    ]\n                },\n                \"messages\": {\n                    \"missingSemi\": \"Missing semicolon.\",\n                    \"extraSemi\": \"Extra semicolon.\"\n                }\n            },\n            \"consistent-return\": {\n                \"type\": \"suggestion\",\n                \"docs\": {\n                    \"description\": \"Require `return` statements to either always or never specify values\",\n                    \"recommended\": false,\n                    \"url\": \"https://eslint.org/docs/latest/rules/consistent-return\"\n                },\n                \"schema\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"treatUndefinedAsUnspecified\": {\n                                \"type\": \"boolean\",\n                                \"default\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                ],\n                \"messages\": {\n                    \"missingReturn\": \"Expected to return a value at the end of .\",\n                    \"missingReturnValue\": \" expected a return value.\",\n                    \"unexpectedReturnValue\": \" expected no return value.\"\n                }\n            }\n        }\n    }\n}\n```\n\n### json\n\nOutputs JSON-serialized results. The `json` formatter is useful when you want to programmatically work with the CLI's linting results.\n\nAlternatively, you can use the [ESLint Node.js API](../../integrate/nodejs-api) to programmatically use ESLint.\n\nExample output (formatted for easier reading):\n\n``` language-json\n[\n    {\n        \"filePath\": \"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\",\n        \"messages\": [\n            {\n                \"ruleId\": \"no-unused-vars\",\n                \"severity\": 2,\n                \"message\": \"'addOne' is defined but never used.\",\n                \"line\": 1,\n                \"column\": 10,\n                \"nodeType\": \"Identifier\",\n                \"messageId\": \"unusedVar\",\n                \"endLine\": 1,\n                \"endColumn\": 16\n            },\n            {\n                \"ruleId\": \"use-isnan\",\n                \"severity\": 2,\n                \"message\": \"Use the isNaN function to compare with NaN.\",\n                \"line\": 2,\n                \"column\": 9,\n                \"nodeType\": \"BinaryExpression\",\n                \"messageId\": \"comparisonWithNaN\",\n                \"endLine\": 2,\n                \"endColumn\": 17\n            },\n            {\n                \"ruleId\": \"space-unary-ops\",\n                \"severity\": 2,\n                \"message\": \"Unexpected space before unary operator '++'.\",\n                \"line\": 3,\n                \"column\": 16,\n                \"nodeType\": \"UpdateExpression\",\n                \"messageId\": \"unexpectedBefore\",\n                \"endLine\": 3,\n                \"endColumn\": 20,\n                \"fix\": {\n                    \"range\": [\n                        57,\n                        58\n                    ],\n                    \"text\": \"\"\n                }\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 3,\n                \"column\": 20,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 4,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        60,\n                        60\n                    ],\n                    \"text\": \";\"\n                }\n            },\n            {\n                \"ruleId\": \"no-else-return\",\n                \"severity\": 1,\n                \"message\": \"Unnecessary 'else' after 'return'.\",\n                \"line\": 4,\n                \"column\": 12,\n                \"nodeType\": \"BlockStatement\",\n                \"messageId\": \"unexpected\",\n                \"endLine\": 6,\n                \"endColumn\": 6,\n                \"fix\": {\n                    \"range\": [\n                        0,\n                        94\n                    ],\n                    \"text\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } \\n      return\\n    \\n}\"\n                }\n            },\n            {\n                \"ruleId\": \"indent\",\n                \"severity\": 1,\n                \"message\": \"Expected indentation of 8 spaces but found 6.\",\n                \"line\": 5,\n                \"column\": 1,\n                \"nodeType\": \"Keyword\",\n                \"messageId\": \"wrongIndentation\",\n                \"endLine\": 5,\n                \"endColumn\": 7,\n                \"fix\": {\n                    \"range\": [\n                        74,\n                        80\n                    ],\n                    \"text\": \"        \"\n                }\n            },\n            {\n                \"ruleId\": \"consistent-return\",\n                \"severity\": 2,\n                \"message\": \"Function 'addOne' expected a return value.\",\n                \"line\": 5,\n                \"column\": 7,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingReturnValue\",\n                \"endLine\": 5,\n                \"endColumn\": 13\n            },\n            {\n                \"ruleId\": \"semi\",\n                \"severity\": 1,\n                \"message\": \"Missing semicolon.\",\n                \"line\": 5,\n                \"column\": 13,\n                \"nodeType\": \"ReturnStatement\",\n                \"messageId\": \"missingSemi\",\n                \"endLine\": 6,\n                \"endColumn\": 1,\n                \"fix\": {\n                    \"range\": [\n                        86,\n                        86\n                    ],\n                    \"text\": \";\"\n                }\n            },\n            {\n                \"ruleId\": \"no-extra-semi\",\n                \"severity\": 2,\n                \"message\": \"Unnecessary semicolon.\",\n                \"line\": 7,\n                \"column\": 2,\n                \"nodeType\": \"EmptyStatement\",\n                \"messageId\": \"unexpected\",\n                \"endLine\": 7,\n                \"endColumn\": 3,\n                \"fix\": {\n                    \"range\": [\n                        93,\n                        95\n                    ],\n                    \"text\": \"}\"\n                }\n            }\n        ],\n        \"suppressedMessages\": [],\n        \"errorCount\": 5,\n        \"fatalErrorCount\": 0,\n        \"warningCount\": 4,\n        \"fixableErrorCount\": 2,\n        \"fixableWarningCount\": 4,\n        \"source\": \"function addOne(i) {\\n    if (i != NaN) {\\n        return i ++\\n    } else {\\n      return\\n    }\\n};\"\n    }\n]\n```\n\n### junit\n\nOutputs results to format compatible with the [JUnit Jenkins plugin](https://plugins.jenkins.io/junit/).\n\nExample output:\n\n``` language-xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuites>\n<testsuite package=\"org.eslint\" time=\"0\" tests=\"9\" errors=\"9\" name=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\">\n<testcase time=\"0\" name=\"org.eslint.no-unused-vars\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"&apos;addOne&apos; is defined but never used.\"><![CDATA[line 1, col 10, Error - &apos;addOne&apos; is defined but never used. (no-unused-vars)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.use-isnan\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Use the isNaN function to compare with NaN.\"><![CDATA[line 2, col 9, Error - Use the isNaN function to compare with NaN. (use-isnan)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.space-unary-ops\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unexpected space before unary operator &apos;++&apos;.\"><![CDATA[line 3, col 16, Error - Unexpected space before unary operator &apos;++&apos;. (space-unary-ops)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Missing semicolon.\"><![CDATA[line 3, col 20, Warning - Missing semicolon. (semi)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.no-else-return\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unnecessary &apos;else&apos; after &apos;return&apos;.\"><![CDATA[line 4, col 12, Warning - Unnecessary &apos;else&apos; after &apos;return&apos;. (no-else-return)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.indent\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Expected indentation of 8 spaces but found 6.\"><![CDATA[line 5, col 1, Warning - Expected indentation of 8 spaces but found 6. (indent)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.consistent-return\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Function &apos;addOne&apos; expected a return value.\"><![CDATA[line 5, col 7, Error - Function &apos;addOne&apos; expected a return value. (consistent-return)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Missing semicolon.\"><![CDATA[line 5, col 13, Warning - Missing semicolon. (semi)]]></failure></testcase>\n<testcase time=\"0\" name=\"org.eslint.no-extra-semi\" classname=\"/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems\"><failure message=\"Unnecessary semicolon.\"><![CDATA[line 7, col 2, Error - Unnecessary semicolon. (no-extra-semi)]]></failure></testcase>\n</testsuite>\n</testsuites>\n```\n\n### stylish\n\nHuman-readable output format. This is the default formatter.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\n  1:10  error    'addOne' is defined but never used            no-unused-vars\n  2:9   error    Use the isNaN function to compare with NaN    use-isnan\n  3:16  error    Unexpected space before unary operator '++'   space-unary-ops\n  3:20  warning  Missing semicolon                             semi\n  4:12  warning  Unnecessary 'else' after 'return'             no-else-return\n  5:1   warning  Expected indentation of 8 spaces but found 6  indent\n  5:7   error    Function 'addOne' expected a return value     consistent-return\n  5:13  warning  Missing semicolon                             semi\n  7:2   error    Unnecessary semicolon                         no-extra-semi\n\n✖ 9 problems (5 errors, 4 warnings)\n  2 errors and 4 warnings potentially fixable with the `--fix` option.\n```\n\n### tap\n\nOutputs results to the [Test Anything Protocol (TAP)](https://testanything.org/) specification format.\n\nExample output:\n\n``` language-text\nTAP version 13\n1..1\nnot ok 1 - /var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js\n  ---\n  message: '''addOne'' is defined but never used.'\n  severity: error\n  data:\n    line: 1\n    column: 10\n    ruleId: no-unused-vars\n  messages:\n    - message: Use the isNaN function to compare with NaN.\n      severity: error\n      data:\n        line: 2\n        column: 9\n        ruleId: use-isnan\n    - message: Unexpected space before unary operator '++'.\n      severity: error\n      data:\n        line: 3\n        column: 16\n        ruleId: space-unary-ops\n    - message: Missing semicolon.\n      severity: warning\n      data:\n        line: 3\n        column: 20\n        ruleId: semi\n    - message: Unnecessary 'else' after 'return'.\n      severity: warning\n      data:\n        line: 4\n        column: 12\n        ruleId: no-else-return\n    - message: Expected indentation of 8 spaces but found 6.\n      severity: warning\n      data:\n        line: 5\n        column: 1\n        ruleId: indent\n    - message: Function 'addOne' expected a return value.\n      severity: error\n      data:\n        line: 5\n        column: 7\n        ruleId: consistent-return\n    - message: Missing semicolon.\n      severity: warning\n      data:\n        line: 5\n        column: 13\n        ruleId: semi\n    - message: Unnecessary semicolon.\n      severity: error\n      data:\n        line: 7\n        column: 2\n        ruleId: no-extra-semi\n  ...\n```\n\n### unix\n\nOutputs results to a format similar to many commands in UNIX-like systems. Parsable with tools such as [grep](https://www.gnu.org/software/grep/manual/grep.html), [sed](https://www.gnu.org/software/sed/manual/sed.html), and [awk](https://www.gnu.org/software/gawk/manual/gawk.html).\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:1:10: 'addOne' is defined but never used. [Error/no-unused-vars]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:2:9: Use the isNaN function to compare with NaN. [Error/use-isnan]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:3:16: Unexpected space before unary operator '++'. [Error/space-unary-ops]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:3:20: Missing semicolon. [Warning/semi]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:4:12: Unnecessary 'else' after 'return'. [Warning/no-else-return]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:1: Expected indentation of 8 spaces but found 6. [Warning/indent]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:7: Function 'addOne' expected a return value. [Error/consistent-return]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:5:13: Missing semicolon. [Warning/semi]\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js:7:2: Unnecessary semicolon. [Error/no-extra-semi]\n\n9 problems\n```\n\n### visualstudio\n\nOutputs results to format compatible with the integrated terminal of the [Visual Studio](https://visualstudio.microsoft.com/) IDE. When using Visual Studio, you can click on the linting results in the integrated terminal to go to the issue in the source code.\n\nExample output:\n\n``` language-text\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(1,10): error no-unused-vars : 'addOne' is defined but never used.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(2,9): error use-isnan : Use the isNaN function to compare with NaN.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(3,16): error space-unary-ops : Unexpected space before unary operator '++'.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(3,20): warning semi : Missing semicolon.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(4,12): warning no-else-return : Unnecessary 'else' after 'return'.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,1): warning indent : Expected indentation of 8 spaces but found 6.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,7): error consistent-return : Function 'addOne' expected a return value.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(5,13): warning semi : Missing semicolon.\n/var/lib/jenkins/workspace/eslint Release/eslint/fullOfProblems.js(7,2): error no-extra-semi : Unnecessary semicolon.\n\n9 problems\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/formatters/](https://eslint.org/docs/latest/use/formatters/)"
- name: func-call-spacing
  id: rules/func-call-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# func-call-spacing\n\nRequire or disallow spacing between function identifiers and their invocations\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](func-call-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [always](#always)\n        1.  [allowNewlines](#allownewlines)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/function-call-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhen calling a function, developers may insert optional whitespace between the function’s name and the parentheses that invoke it. The following pairs of function calls are equivalent:\n\n``` language-js\nalert('Hello');\nalert ('Hello');\n\nconsole.log(42);\nconsole.log (42);\n\nnew Date();\nnew Date ();\n```\n\n## Rule Details\n\nThis rule requires or disallows spaces between the function name and the opening parenthesis that calls it.\n\n## Options\n\nThis rule has a string option:\n\n- `\"never\"` (default) disallows space between the function name and the opening parenthesis.\n- `\"always\"` requires space between the function name and the opening parenthesis.\n\nFurther, in `\"always\"` mode, a second object option is available that contains a single boolean `allowNewlines` property.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxuZm4gKCk7XG5cbmZuXG4oKTsifQ==)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn ();\n\nfn\n();\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxuZm4oKTsifQ==)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn();\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbmZuKCk7XG5cbmZuXG4oKTsifQ==)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn();\n\nfn\n();\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbmZuICgpOyJ9)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn ();\n```\n\n#### allowNewlines\n\nBy default, `\"always\"` does not allow newlines. To permit newlines when in `\"always\"` mode, set the `allowNewlines` option to `true`. Newlines are never required.\n\nExamples of **incorrect** code for this rule with `allowNewlines` option enabled:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiYWxsb3dOZXdsaW5lc1wiOiB0cnVlIH1dKi9cblxuZm4oKTsifQ==)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn();\n```\n\nExamples of **correct** code for this rule with the `allowNewlines` option enabled:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtY2FsbC1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiYWxsb3dOZXdsaW5lc1wiOiB0cnVlIH1dKi9cblxuZm4gKCk7IC8vIE5ld2xpbmVzIGFyZSBuZXZlciByZXF1aXJlZC5cblxuZm5cbigpOyJ9)\n\n``` language-js\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn (); // Newlines are never required.\n\nfn\n();\n```\n\n## When Not To Use It\n\nThis rule can safely be turned off if your project does not care about enforcing a consistent style for spacing within function calls.\n\n## Compatibility\n\n- **JSCS**: [disallowSpacesInCallExpression](https://jscs-dev.github.io/rule/disallowSpacesInCallExpression)\n- **JSCS**: [requireSpacesInCallExpression](https://jscs-dev.github.io/rule/requireSpacesInCallExpression)\n\n## Related Rules\n\n- [no-spaced-func](no-spaced-func)\n\n## Version\n\nThis rule was introduced in ESLint v3.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/func-call-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/func-call-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/func-call-spacing](https://eslint.org/docs/latest/rules/func-call-spacing)"
- name: func-name-matching
  id: rules/func-name-matching
  summary: This rule requires function names to match the name of the variable or property to which they are assigned
  description: "# func-name-matching\n\nRequire function names to match the name of the variable or property to which they are assigned\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [considerPropertyDescriptor](#considerpropertydescriptor)\n    2.  [includeCommonJSModuleExports](#includecommonjsmoduleexports)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\n## Rule Details\n\nThis rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IGZ1bmN0aW9uIGJhcigpIHt9O1xuZm9vID0gZnVuY3Rpb24gYmFyKCkge307XG5vYmouZm9vID0gZnVuY3Rpb24gYmFyKCkge307XG5vYmpbJ2ZvbyddID0gZnVuY3Rpb24gYmFyKCkge307XG52YXIgb2JqID0ge2ZvbzogZnVuY3Rpb24gYmFyKCkge319O1xuKHtbJ2ZvbyddOiBmdW5jdGlvbiBiYXIoKSB7fX0pO1xuXG5jbGFzcyBDIHtcbiAgICBmb28gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbn0ifQ==)\n\n``` language-js\n/*eslint func-name-matching: \"error\"*/\n\nvar foo = function bar() {};\nfoo = function bar() {};\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\nvar obj = {foo: function bar() {}};\n({['foo']: function bar() {}});\n\nclass C {\n    foo = function bar() {};\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSAqL1xuXG52YXIgZm9vID0gZnVuY3Rpb24gZm9vKCkge307XG5mb28gPSBmdW5jdGlvbiBmb28oKSB7fTtcbm9iai5mb28gPSBmdW5jdGlvbiBmb28oKSB7fTtcbm9ialsnZm9vJ10gPSBmdW5jdGlvbiBmb28oKSB7fTtcbnZhciBvYmogPSB7Zm9vOiBmdW5jdGlvbiBmb28oKSB7fX07XG4oe1snZm9vJ106IGZ1bmN0aW9uIGZvbygpIHt9fSk7XG5cbmNsYXNzIEMge1xuICAgIGZvbyA9IGZ1bmN0aW9uIGZvbygpIHt9O1xufSJ9)\n\n``` language-js\n/*eslint func-name-matching: [\"error\", \"never\"] */\n\nvar foo = function foo() {};\nfoo = function foo() {};\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\nvar obj = {foo: function foo() {}};\n({['foo']: function foo() {}});\n\nclass C {\n    foo = function foo() {};\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogXCJlcnJvclwiKi9cbi8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qLyAvLyB0aGVzZSBhcmUgZXF1aXZhbGVudFxuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSBmdW5jdGlvbiBmb28oKSB7fTtcbnZhciBmb28gPSBmdW5jdGlvbigpIHt9O1xudmFyIGZvbyA9ICgpID0+IHt9O1xuZm9vID0gZnVuY3Rpb24gZm9vKCkge307XG5cbm9iai5mb28gPSBmdW5jdGlvbiBmb28oKSB7fTtcbm9ialsnZm9vJ10gPSBmdW5jdGlvbiBmb28oKSB7fTtcbm9ialsnZm9vLy9iYXInXSA9IGZ1bmN0aW9uIGZvbygpIHt9O1xub2JqW2Zvb10gPSBmdW5jdGlvbiBiYXIoKSB7fTtcblxudmFyIG9iaiA9IHtmb286IGZ1bmN0aW9uIGZvbygpIHt9fTtcbnZhciBvYmogPSB7W2Zvb106IGZ1bmN0aW9uIGJhcigpIHt9fTtcbnZhciBvYmogPSB7J2Zvby8vYmFyJzogZnVuY3Rpb24gZm9vKCkge319O1xudmFyIG9iaiA9IHtmb286IGZ1bmN0aW9uKCkge319O1xuXG5vYmpbJ3gnICsgMl0gPSBmdW5jdGlvbiBiYXIoKXt9O1xudmFyIFsgYmFyIF0gPSBbIGZ1bmN0aW9uIGJhcigpe30gXTtcbih7W2Zvb106IGZ1bmN0aW9uIGJhcigpIHt9fSlcblxuY2xhc3MgQyB7XG4gICAgZm9vID0gZnVuY3Rpb24gZm9vKCkge307XG4gICAgYmF6ID0gZnVuY3Rpb24oKSB7fTtcbn1cblxuLy8gcHJpdmF0ZSBuYW1lcyBhcmUgaWdub3JlZFxuY2xhc3MgRCB7XG4gICAgI2ZvbyA9IGZ1bmN0aW9uIGZvbygpIHt9O1xuICAgICNiYXIgPSBmdW5jdGlvbiBmb28oKSB7fTtcbiAgICBiYXooKSB7XG4gICAgICAgIHRoaXMuI2ZvbyA9IGZ1bmN0aW9uIGZvbygpIHt9O1xuICAgICAgICB0aGlzLiNmb28gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9vKG5hbWUpIHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBmdW5jdGlvbiBmb28obmFtZSkge307In0=)\n\n``` language-js\n/*eslint func-name-matching: \"error\"*/\n/*eslint func-name-matching: [\"error\", \"always\"]*/ // these are equivalent\n/*eslint-env es6*/\n\nvar foo = function foo() {};\nvar foo = function() {};\nvar foo = () => {};\nfoo = function foo() {};\n\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function bar() {};\n\nvar obj = {foo: function foo() {}};\nvar obj = {[foo]: function bar() {}};\nvar obj = {'foo//bar': function foo() {}};\nvar obj = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nvar [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nclass C {\n    foo = function foo() {};\n    baz = function() {};\n}\n\n// private names are ignored\nclass D {\n    #foo = function foo() {};\n    #bar = function foo() {};\n    baz() {\n        this.#foo = function foo() {};\n        this.#foo = function bar() {};\n    }\n}\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSAqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbnZhciBmb28gPSBmdW5jdGlvbigpIHt9O1xudmFyIGZvbyA9ICgpID0+IHt9O1xuZm9vID0gZnVuY3Rpb24gYmFyKCkge307XG5cbm9iai5mb28gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbm9ialsnZm9vJ10gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbm9ialsnZm9vLy9iYXInXSA9IGZ1bmN0aW9uIGZvbygpIHt9O1xub2JqW2Zvb10gPSBmdW5jdGlvbiBmb28oKSB7fTtcblxudmFyIG9iaiA9IHtmb286IGZ1bmN0aW9uIGJhcigpIHt9fTtcbnZhciBvYmogPSB7W2Zvb106IGZ1bmN0aW9uIGZvbygpIHt9fTtcbnZhciBvYmogPSB7J2Zvby8vYmFyJzogZnVuY3Rpb24gZm9vKCkge319O1xudmFyIG9iaiA9IHtmb286IGZ1bmN0aW9uKCkge319O1xuXG5vYmpbJ3gnICsgMl0gPSBmdW5jdGlvbiBiYXIoKXt9O1xudmFyIFsgYmFyIF0gPSBbIGZ1bmN0aW9uIGJhcigpe30gXTtcbih7W2Zvb106IGZ1bmN0aW9uIGJhcigpIHt9fSlcblxuY2xhc3MgQyB7XG4gICAgZm9vID0gZnVuY3Rpb24gYmFyKCkge307XG4gICAgYmF6ID0gZnVuY3Rpb24oKSB7fTtcbn1cblxuLy8gcHJpdmF0ZSBuYW1lcyBhcmUgaWdub3JlZFxuY2xhc3MgRCB7XG4gICAgI2ZvbyA9IGZ1bmN0aW9uIGZvbygpIHt9O1xuICAgICNiYXIgPSBmdW5jdGlvbiBmb28oKSB7fTtcbiAgICBiYXooKSB7XG4gICAgICAgIHRoaXMuI2ZvbyA9IGZ1bmN0aW9uIGZvbygpIHt9O1xuICAgICAgICB0aGlzLiNmb28gPSBmdW5jdGlvbiBiYXIoKSB7fTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9vKG5hbWUpIHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBmdW5jdGlvbiBmb28obmFtZSkge307In0=)\n\n``` language-js\n/*eslint func-name-matching: [\"error\", \"never\"] */\n/*eslint-env es6*/\n\nvar foo = function bar() {};\nvar foo = function() {};\nvar foo = () => {};\nfoo = function bar() {};\n\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function foo() {};\n\nvar obj = {foo: function bar() {}};\nvar obj = {[foo]: function foo() {}};\nvar obj = {'foo//bar': function foo() {}};\nvar obj = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nvar [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nclass C {\n    foo = function bar() {};\n    baz = function() {};\n}\n\n// private names are ignored\nclass D {\n    #foo = function foo() {};\n    #bar = function foo() {};\n    baz() {\n        this.#foo = function foo() {};\n        this.#foo = function bar() {};\n    }\n}\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n## Options\n\nThis rule takes an optional string of `\"always\"` or `\"never\"` (when omitted, it defaults to `\"always\"`), and an optional options object with two properties `considerPropertyDescriptor` and `includeCommonJSModuleExports`.\n\n### considerPropertyDescriptor\n\nA boolean value that defaults to `false`. If `considerPropertyDescriptor` is set to true, the check will take into account the use of `Object.create`, `Object.defineProperty`, `Object.defineProperties`, and `Reflect.defineProperty`.\n\nExamples of **correct** code for the `{ considerPropertyDescriptor: true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgeyBcImNvbnNpZGVyUHJvcGVydHlEZXNjcmlwdG9yXCI6IHRydWUgfV0qL1xuLyplc2xpbnQgZnVuYy1uYW1lLW1hdGNoaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiY29uc2lkZXJQcm9wZXJ0eURlc2NyaXB0b3JcIjogdHJ1ZSB9XSovIC8vIHRoZXNlIGFyZSBlcXVpdmFsZW50XG52YXIgb2JqID0ge307XG5PYmplY3QuY3JlYXRlKG9iaiwge2Zvbzp7dmFsdWU6IGZ1bmN0aW9uIGZvbygpIHt9fX0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ2JhcicsIHt2YWx1ZTogZnVuY3Rpb24gYmFyKCkge319KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge2Jhejp7dmFsdWU6IGZ1bmN0aW9uIGJheigpIHt9IH19KTtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnZm9vJywge3ZhbHVlOiBmdW5jdGlvbiBmb28oKSB7fX0pOyJ9)\n\n``` language-js\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/ // these are equivalent\nvar obj = {};\nObject.create(obj, {foo:{value: function foo() {}}});\nObject.defineProperty(obj, 'bar', {value: function bar() {}});\nObject.defineProperties(obj, {baz:{value: function baz() {} }});\nReflect.defineProperty(obj, 'foo', {value: function foo() {}});\n```\n\nExamples of **incorrect** code for the `{ considerPropertyDescriptor: true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgeyBcImNvbnNpZGVyUHJvcGVydHlEZXNjcmlwdG9yXCI6IHRydWUgfV0qL1xuLyplc2xpbnQgZnVuYy1uYW1lLW1hdGNoaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiY29uc2lkZXJQcm9wZXJ0eURlc2NyaXB0b3JcIjogdHJ1ZSB9XSovIC8vIHRoZXNlIGFyZSBlcXVpdmFsZW50XG52YXIgb2JqID0ge307XG5PYmplY3QuY3JlYXRlKG9iaiwge2Zvbzp7dmFsdWU6IGZ1bmN0aW9uIGJhcigpIHt9fX0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ2JhcicsIHt2YWx1ZTogZnVuY3Rpb24gYmF6KCkge319KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge2Jhejp7dmFsdWU6IGZ1bmN0aW9uIGZvbygpIHt9IH19KTtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnZm9vJywge3ZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHt9fSk7In0=)\n\n``` language-js\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/ // these are equivalent\nvar obj = {};\nObject.create(obj, {foo:{value: function bar() {}}});\nObject.defineProperty(obj, 'bar', {value: function baz() {}});\nObject.defineProperties(obj, {baz:{value: function foo() {} }});\nReflect.defineProperty(obj, 'foo', {value: function value() {}});\n```\n\n### includeCommonJSModuleExports\n\nA boolean value that defaults to `false`. If `includeCommonJSModuleExports` is set to true, `module.exports` and `module[\"exports\"]` will be checked by this rule.\n\nExamples of **incorrect** code for the `{ includeCommonJSModuleExports: true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZS1tYXRjaGluZzogW1wiZXJyb3JcIiwgeyBcImluY2x1ZGVDb21tb25KU01vZHVsZUV4cG9ydHNcIjogdHJ1ZSB9XSovXG4vKmVzbGludCBmdW5jLW5hbWUtbWF0Y2hpbmc6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJpbmNsdWRlQ29tbW9uSlNNb2R1bGVFeHBvcnRzXCI6IHRydWUgfV0qLyAvLyB0aGVzZSBhcmUgZXF1aXZhbGVudFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvbyhuYW1lKSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gZnVuY3Rpb24gZm9vKG5hbWUpIHt9OyJ9)\n\n``` language-js\n/*eslint func-name-matching: [\"error\", { \"includeCommonJSModuleExports\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"includeCommonJSModuleExports\": true }]*/ // these are equivalent\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n## When Not To Use It\n\nDo not use this rule if you want to allow named functions to have different names from the variable or property to which they are assigned.\n\n## Compatibility\n\n- **JSCS**: [requireMatchingFunctionName](https://jscs-dev.github.io/rule/requireMatchingFunctionName)\n\n## Version\n\nThis rule was introduced in ESLint v3.8.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/func-name-matching.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/func-name-matching.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/func-name-matching](https://eslint.org/docs/latest/rules/func-name-matching)"
- name: func-names
  id: rules/func-names
  summary: A pattern that’s becoming more common is to give function expressions names to aid in debugging
  description: "# func-names\n\nRequire or disallow named `function` expressions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [as-needed](#as-needed)\n    3.  [never](#never)\n    4.  [generators](#generators)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nA pattern that’s becoming more common is to give function expressions names to aid in debugging. For example:\n\n``` language-js\nFoo.prototype.bar = function bar() {};\n```\n\nAdding the second `bar` in the above example is optional. If you leave off the function name then when the function throws an exception you are likely to get something similar to `anonymous function` in the stack trace. If you provide the optional name for a function expression then you will get the name of the function expression in the stack trace.\n\n## Rule Details\n\nThis rule can enforce or disallow the use of named function expressions.\n\n## Options\n\nThis rule has a string option:\n\n- `\"always\"` (default) requires function expressions to have a name\n- `\"as-needed\"` requires function expressions to have a name, if the name isn’t assigned automatically per the ECMAScript specification.\n- `\"never\"` disallows named function expressions, except in recursive functions, where a name is needed\n\nThis rule has an object option:\n\n- `\"generators\": \"always\" | \"as-needed\" | \"never\"`\n  - `\"always\"` require named generators\n  - `\"as-needed\"` require named generators if the name isn’t assigned automatically per the ECMAScript specification.\n  - `\"never\"` disallow named generators where possible.\n\nWhen a value for `generators` is not provided the behavior for generator functions falls back to the base option.\n\nPlease note that `\"always\"` and `\"as-needed\"` require function expressions and function declarations in `export default` declarations to have a name.\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuRm9vLnByb3RvdHlwZS5iYXIgPSBmdW5jdGlvbigpIHt9O1xuXG5jb25zdCBjYXQgPSB7XG4gIG1lb3c6IGZ1bmN0aW9uKCkge31cbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9In0=)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\n(function() {\n    // ...\n}())\n\nexport default function() {}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuRm9vLnByb3RvdHlwZS5iYXIgPSBmdW5jdGlvbiBiYXIoKSB7fTtcblxuY29uc3QgY2F0ID0ge1xuICBtZW93KCkge31cbn1cblxuKGZ1bmN0aW9uIGJhcigpIHtcbiAgICAvLyAuLi5cbn0oKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9vKCkge30ifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function bar() {};\n\nconst cat = {\n  meow() {}\n}\n\n(function bar() {\n    // ...\n}())\n\nexport default function foo() {}\n```\n\n### as-needed\n\nECMAScript 6 introduced a `name` property on all functions. The value of `name` is determined by evaluating the code around the function to see if a name can be inferred. For example, a function assigned to a variable will automatically have a `name` property equal to the name of the variable. The value of `name` is then used in stack traces for easier debugging.\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdKi9cblxuRm9vLnByb3RvdHlwZS5iYXIgPSBmdW5jdGlvbigpIHt9O1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59KCkpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge30ifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"as-needed\"]*/\n\nFoo.prototype.bar = function() {};\n\n(function() {\n    // ...\n}())\n\nexport default function() {}\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdKi9cblxudmFyIGJhciA9IGZ1bmN0aW9uKCkge307XG5cbmNvbnN0IGNhdCA9IHtcbiAgbWVvdzogZnVuY3Rpb24oKSB7fVxufVxuXG5jbGFzcyBDIHtcbiAgICAjYmFyID0gZnVuY3Rpb24oKSB7fTtcbiAgICBiYXogPSBmdW5jdGlvbigpIHt9O1xufVxuXG5xdXV4ID8/PSBmdW5jdGlvbigpIHt9O1xuXG4oZnVuY3Rpb24gYmFyKCkge1xuICAgIC8vIC4uLlxufSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb28oKSB7fSJ9)\n\n``` language-js\n/*eslint func-names: [\"error\", \"as-needed\"]*/\n\nvar bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\nclass C {\n    #bar = function() {};\n    baz = function() {};\n}\n\nquux ??= function() {};\n\n(function bar() {\n    // ...\n}())\n\nexport default function foo() {}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5Gb28ucHJvdG90eXBlLmJhciA9IGZ1bmN0aW9uIGJhcigpIHt9O1xuXG4oZnVuY3Rpb24gYmFyKCkge1xuICAgIC8vIC4uLlxufSgpKSJ9)\n\n``` language-js\n/*eslint func-names: [\"error\", \"never\"]*/\n\nFoo.prototype.bar = function bar() {};\n\n(function bar() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5Gb28ucHJvdG90eXBlLmJhciA9IGZ1bmN0aW9uKCkge307XG5cbihmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn0oKSkifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"never\"]*/\n\nFoo.prototype.bar = function() {};\n\n(function() {\n    // ...\n}())\n```\n\n### generators\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"generators\": \"as-needed\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwiYXMtbmVlZGVkXCIgfV0qL1xuXG4oZnVuY3Rpb24qKCkge1xuICAgIC8vIC4uLlxufSgpKSJ9)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"as-needed\" }]*/\n\n(function*() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"generators\": \"as-needed\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwiYXMtbmVlZGVkXCIgfV0qL1xuXG52YXIgZm9vID0gZnVuY3Rpb24qKCkge307In0=)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"as-needed\" }]*/\n\nvar foo = function*() {};\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"generators\": \"never\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwibmV2ZXJcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKmJheigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"generators\": \"never\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwibmV2ZXJcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **incorrect** code for this rule with the `\"as-needed\", { \"generators\": \"never\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwibmV2ZXJcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKmJheigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"as-needed\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\", { \"generators\": \"never\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCIsIHsgXCJnZW5lcmF0b3JzXCI6IFwibmV2ZXJcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"as-needed\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"generators\": \"always\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImdlbmVyYXRvcnNcIjogXCJhbHdheXNcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"never\", { \"generators\": \"always\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"generators\": \"always\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtbmFtZXM6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImdlbmVyYXRvcnNcIjogXCJhbHdheXNcIiB9XSovXG5cbnZhciBmb28gPSBiYXIoZnVuY3Rpb24gKmJheigpIHt9KTsifQ==)\n\n``` language-js\n/*eslint func-names: [\"error\", \"never\", { \"generators\": \"always\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\n## Compatibility\n\n- **JSCS**: [requireAnonymousFunctions](https://jscs-dev.github.io/rule/requireAnonymousFunctions)\n- **JSCS**: [disallowAnonymousFunctions](https://jscs-dev.github.io/rule/disallowAnonymousFunctions)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Further Reading\n\n[Functions Explained - Mark Daggett’s Blog](https://web.archive.org/web/20201112040809/http://markdaggett.com/blog/2013/02/15/functions-explained/)  \n\n[The names of functions in ES6](https://2ality.com/2015/09/function-names-es6.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/func-names.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/func-names.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/func-names](https://eslint.org/docs/latest/rules/func-names)"
- name: func-style
  id: rules/func-style
  summary: 'There are two ways of defining functions in JavaScript: function declarations and function expressions'
  description: "# func-style\n\nEnforce the consistent use of either `function` declarations or expressions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [expression](#expression)\n    2.  [declaration](#declaration)\n    3.  [allowArrowFunctions](#allowarrowfunctions)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThere are two ways of defining functions in JavaScript: `function` declarations and `function` expressions. Declarations contain the `function` keyword first, followed by a name and then its arguments and the function body, for example:\n\n``` language-js\nfunction doSomething() {\n    // ...\n}\n```\n\nEquivalent function expressions begin with the `var` keyword, followed by a name and then the function itself, such as:\n\n``` language-js\nvar doSomething = function() {\n    // ...\n};\n```\n\nThe primary difference between `function` declarations and `function expressions` is that declarations are *hoisted* to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:\n\n``` language-js\ndoSomething();\n\nfunction doSomething() {\n    // ...\n}\n```\n\nAlthough this code might seem like an error, it actually works fine because JavaScript engines hoist the `function` declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.\n\nFor `function` expressions, you must define the function before it is used, otherwise it causes an error. Example:\n\n``` language-js\ndoSomething();  // error!\n\nvar doSomething = function() {\n    // ...\n};\n```\n\nIn this case, `doSomething()` is undefined at the time of invocation and so causes a runtime error.\n\nDue to these different behaviors, it is common to have guidelines as to which style of function should be used. There is really no correct or incorrect choice here, it is just a preference.\n\n## Rule Details\n\nThis rule enforces a particular type of `function` style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.\n\n## Options\n\nThis rule has a string option:\n\n- `\"expression\"` (default) requires the use of function expressions instead of function declarations\n- `\"declaration\"` requires the use of function declarations instead of function expressions\n\nThis rule has an object option for an exception:\n\n- `\"allowArrowFunctions\"`: `true` (default `false`) allows the use of arrow functions. This option applies only when the string option is set to `\"declaration\"` (arrow functions are always allowed when the string option is set to `\"expression\"`, regardless of this option)\n\n### expression\n\nExamples of **incorrect** code for this rule with the default `\"expression\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtc3R5bGU6IFtcImVycm9yXCIsIFwiZXhwcmVzc2lvblwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyAuLi5cbn0ifQ==)\n\n``` language-js\n/*eslint func-style: [\"error\", \"expression\"]*/\n\nfunction foo() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"expression\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtc3R5bGU6IFtcImVycm9yXCIsIFwiZXhwcmVzc2lvblwiXSovXG5cbnZhciBmb28gPSBmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn07XG5cbnZhciBmb28gPSAoKSA9PiB7fTtcblxuLy8gYWxsb3dlZCBhcyBhbGxvd0Fycm93RnVuY3Rpb25zIDogZmFsc2UgaXMgYXBwbGllZCBvbmx5IGZvciBkZWNsYXJhdGlvbiJ9)\n\n``` language-js\n/*eslint func-style: [\"error\", \"expression\"]*/\n\nvar foo = function() {\n    // ...\n};\n\nvar foo = () => {};\n\n// allowed as allowArrowFunctions : false is applied only for declaration\n```\n\n### declaration\n\nExamples of **incorrect** code for this rule with the `\"declaration\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtc3R5bGU6IFtcImVycm9yXCIsIFwiZGVjbGFyYXRpb25cIl0qL1xuXG52YXIgZm9vID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG52YXIgZm9vID0gKCkgPT4ge307In0=)\n\n``` language-js\n/*eslint func-style: [\"error\", \"declaration\"]*/\n\nvar foo = function() {\n    // ...\n};\n\nvar foo = () => {};\n```\n\nExamples of **correct** code for this rule with the `\"declaration\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtc3R5bGU6IFtcImVycm9yXCIsIFwiZGVjbGFyYXRpb25cIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgLy8gLi4uXG59XG5cbi8vIE1ldGhvZHMgKGZ1bmN0aW9ucyBhc3NpZ25lZCB0byBvYmplY3RzKSBhcmUgbm90IGNoZWNrZWQgYnkgdGhpcyBydWxlXG5Tb21lT2JqZWN0LmZvbyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufTsifQ==)\n\n``` language-js\n/*eslint func-style: [\"error\", \"declaration\"]*/\n\nfunction foo() {\n    // ...\n}\n\n// Methods (functions assigned to objects) are not checked by this rule\nSomeObject.foo = function() {\n    // ...\n};\n```\n\n### allowArrowFunctions\n\nExamples of additional **correct** code for this rule with the `\"declaration\", { \"allowArrowFunctions\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGZ1bmMtc3R5bGU6IFtcImVycm9yXCIsIFwiZGVjbGFyYXRpb25cIiwgeyBcImFsbG93QXJyb3dGdW5jdGlvbnNcIjogdHJ1ZSB9XSovXG5cbnZhciBmb28gPSAoKSA9PiB7fTsifQ==)\n\n``` language-js\n/*eslint func-style: [\"error\", \"declaration\", { \"allowArrowFunctions\": true }]*/\n\nvar foo = () => {};\n```\n\n## When Not To Use It\n\nIf you want to allow developers to each decide how they want to write functions on their own, then you can disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.2.0.\n\n## Further Reading\n\n[JavaScript Scoping and Hoisting](https://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/func-style.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/func-style.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/func-style](https://eslint.org/docs/latest/rules/func-style)"
- name: generator-star-spacing
  id: rules/generator-star-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# generator-star-spacing\n\nEnforce consistent spacing around `*` operators in generator functions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](generator-star-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Examples](#examples)\n    1.  [before](#before)\n    2.  [after](#after)\n    3.  [both](#both)\n    4.  [neither](#neither)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/generator-star-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nGenerators are a new type of function in ECMAScript 6 that can return multiple values over time. These special functions are indicated by placing an `*` after the `function` keyword.\n\nHere is an example of a generator function:\n\n``` language-js\n/*eslint-env es6*/\n\nfunction* generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nThis is also valid:\n\n``` language-js\n/*eslint-env es6*/\n\nfunction *generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nThis is valid as well:\n\n``` language-js\n/*eslint-env es6*/\n\nfunction * generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nTo keep a sense of consistency when using generators this rule enforces a single position for the `*`.\n\n## Rule Details\n\nThis rule aims to enforce spacing around the `*` of generator functions.\n\n## Options\n\nThe rule takes one option, an object, which has two keys `\"before\"` and `\"after\"` having boolean values `true` or `false`.\n\n- `\"before\"` enforces spacing between the `*` and the `function` keyword. If it is `true`, a space is required, otherwise spaces are disallowed.\n\n  In object literal shorthand methods, spacing before the `*` is not checked, as they lack a `function` keyword.\n\n- `\"after\"` enforces spacing between the `*` and the function name (or the opening parenthesis for anonymous generator functions). If it is `true`, a space is required, otherwise spaces are disallowed.\n\nThe default is `{\"before\": true, \"after\": false}`.\n\nAn example configuration:\n\n``` language-json\n\"generator-star-spacing\": [\"error\", {\"before\": true, \"after\": false}]\n```\n\nAnd the option has shorthand as a string keyword:\n\n- `{\"before\": true, \"after\": false}` → `\"before\"`\n- `{\"before\": false, \"after\": true}` → `\"after\"`\n- `{\"before\": true, \"after\": true}` → `\"both\"`\n- `{\"before\": false, \"after\": false}` → `\"neither\"`\n\nAn example of shorthand configuration:\n\n``` language-json\n\"generator-star-spacing\": [\"error\", \"after\"]\n```\n\nAdditionally, this rule allows further configurability via overrides per function type.\n\n- `named` provides overrides for named functions\n- `anonymous` provides overrides for anonymous functions\n- `method` provides overrides for class methods or property function shorthand\n\nAn example of a configuration with overrides:\n\n``` language-json\n\"generator-star-spacing\": [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]\n```\n\nIn the example configuration above, the top level `\"before\"` and `\"after\"` options define the default behavior of the rule, while the `\"anonymous\"` and `\"method\"` options override the default behavior. Overrides can be either an object with `\"before\"` and `\"after\"`, or a shorthand string as above.\n\n## Examples\n\n### before\n\nExamples of **correct** code for this rule with the `\"before\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcImJlZm9yZVwiOiB0cnVlLCBcImFmdGVyXCI6IGZhbHNlfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uICpnZW5lcmF0b3IoKSB7fVxuXG52YXIgYW5vbnltb3VzID0gZnVuY3Rpb24gKigpIHt9O1xuXG52YXIgc2hvcnRoYW5kID0geyAqZ2VuZXJhdG9yKCkge30gfTsifQ==)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": false}]*/\n/*eslint-env es6*/\n\nfunction *generator() {}\n\nvar anonymous = function *() {};\n\nvar shorthand = { *generator() {} };\n```\n\n### after\n\nExamples of **correct** code for this rule with the `\"after\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcImJlZm9yZVwiOiBmYWxzZSwgXCJhZnRlclwiOiB0cnVlfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uKiBnZW5lcmF0b3IoKSB7fVxuXG52YXIgYW5vbnltb3VzID0gZnVuY3Rpb24qICgpIHt9O1xuXG52YXIgc2hvcnRoYW5kID0geyAqIGdlbmVyYXRvcigpIHt9IH07In0=)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": true}]*/\n/*eslint-env es6*/\n\nfunction* generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { * generator() {} };\n```\n\n### both\n\nExamples of **correct** code for this rule with the `\"both\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcImJlZm9yZVwiOiB0cnVlLCBcImFmdGVyXCI6IHRydWV9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gKiBnZW5lcmF0b3IoKSB7fVxuXG52YXIgYW5vbnltb3VzID0gZnVuY3Rpb24gKiAoKSB7fTtcblxudmFyIHNob3J0aGFuZCA9IHsgKiBnZW5lcmF0b3IoKSB7fSB9OyJ9)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": true}]*/\n/*eslint-env es6*/\n\nfunction * generator() {}\n\nvar anonymous = function * () {};\n\nvar shorthand = { * generator() {} };\n```\n\n### neither\n\nExamples of **correct** code for this rule with the `\"neither\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcImJlZm9yZVwiOiBmYWxzZSwgXCJhZnRlclwiOiBmYWxzZX1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbipnZW5lcmF0b3IoKSB7fVxuXG52YXIgYW5vbnltb3VzID0gZnVuY3Rpb24qKCkge307XG5cbnZhciBzaG9ydGhhbmQgPSB7ICpnZW5lcmF0b3IoKSB7fSB9OyJ9)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": false}]*/\n/*eslint-env es6*/\n\nfunction*generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { *generator() {} };\n```\n\nExamples of **incorrect** code for this rule with overrides present:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcbiAgICBcImJlZm9yZVwiOiBmYWxzZSxcbiAgICBcImFmdGVyXCI6IHRydWUsXG4gICAgXCJhbm9ueW1vdXNcIjogXCJuZWl0aGVyXCIsXG4gICAgXCJtZXRob2RcIjoge1wiYmVmb3JlXCI6IHRydWUsIFwiYWZ0ZXJcIjogdHJ1ZX1cbn1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiAqIGdlbmVyYXRvcigpIHt9XG5cbnZhciBhbm9ueW1vdXMgPSBmdW5jdGlvbiogKCkge307XG5cbnZhciBzaG9ydGhhbmQgPSB7ICpnZW5lcmF0b3IoKSB7fSB9O1xuXG5jbGFzcyBDbGFzcyB7IHN0YXRpYyogbWV0aG9kKCkge30gfSJ9)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n/*eslint-env es6*/\n\nfunction * generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { *generator() {} };\n\nclass Class { static* method() {} }\n```\n\nExamples of **correct** code for this rule with overrides present:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdlbmVyYXRvci1zdGFyLXNwYWNpbmc6IFtcImVycm9yXCIsIHtcbiAgICBcImJlZm9yZVwiOiBmYWxzZSxcbiAgICBcImFmdGVyXCI6IHRydWUsXG4gICAgXCJhbm9ueW1vdXNcIjogXCJuZWl0aGVyXCIsXG4gICAgXCJtZXRob2RcIjoge1wiYmVmb3JlXCI6IHRydWUsIFwiYWZ0ZXJcIjogdHJ1ZX1cbn1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiogZ2VuZXJhdG9yKCkge31cblxudmFyIGFub255bW91cyA9IGZ1bmN0aW9uKigpIHt9O1xuXG52YXIgc2hvcnRoYW5kID0geyAqIGdlbmVyYXRvcigpIHt9IH07XG5cbmNsYXNzIENsYXNzIHsgc3RhdGljICogbWV0aG9kKCkge30gfSJ9)\n\n``` language-js\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n/*eslint-env es6*/\n\nfunction* generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { * generator() {} };\n\nclass Class { static * method() {} }\n```\n\n## When Not To Use It\n\nIf your project will not be using generators or you are not concerned with spacing consistency, you do not need this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.17.0.\n\n## Further Reading\n\n[Read Understanding ECMAScript 6 \\| Leanpub](https://leanpub.com/understandinges6/read/#leanpub-auto-generators)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/generator-star-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/generator-star-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/generator-star-spacing](https://eslint.org/docs/latest/rules/generator-star-spacing)"
- name: getter-return
  id: rules/getter-return
  summary: The get syntax binds an object property to a function that will be called when that property is looked up
  description: "# getter-return\n\nEnforce `return` statements in getters\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](getter-return../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThe get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:\n\n``` language-js\nvar p = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 17;\n    }\n});\n```\n\nNote that every `getter` is expected to return a value.\n\n## Rule Details\n\nThis rule enforces that a return statement is present in property getters.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdldHRlci1yZXR1cm46IFwiZXJyb3JcIiovXG5cbnAgPSB7XG4gICAgZ2V0IG5hbWUoKXtcbiAgICAgICAgLy8gbm8gcmV0dXJucy5cbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJhZ2VcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCl7XG4gICAgICAgIC8vIG5vIHJldHVybnMuXG4gICAgfVxufSk7XG5cbmNsYXNzIFB7XG4gICAgZ2V0IG5hbWUoKXtcbiAgICAgICAgLy8gbm8gcmV0dXJucy5cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint getter-return: \"error\"*/\n\np = {\n    get name(){\n        // no returns.\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        // no returns.\n    }\n});\n\nclass P{\n    get name(){\n        // no returns.\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdldHRlci1yZXR1cm46IFwiZXJyb3JcIiovXG5cbnAgPSB7XG4gICAgZ2V0IG5hbWUoKXtcbiAgICAgICAgcmV0dXJuIFwibmljaG9sYXNcIjtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJhZ2VcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCl7XG4gICAgICAgIHJldHVybiAxODtcbiAgICB9XG59KTtcblxuY2xhc3MgUHtcbiAgICBnZXQgbmFtZSgpe1xuICAgICAgICByZXR1cm4gXCJuaWNob2xhc1wiO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint getter-return: \"error\"*/\n\np = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 18;\n    }\n});\n\nclass P{\n    get name(){\n        return \"nicholas\";\n    }\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"allowImplicit\": false` (default) disallows implicitly returning `undefined` with a `return` statement.\n\nExamples of **correct** code for the `{ \"allowImplicit\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdldHRlci1yZXR1cm46IFtcImVycm9yXCIsIHsgYWxsb3dJbXBsaWNpdDogdHJ1ZSB9XSovXG5wID0ge1xuICAgIGdldCBuYW1lKCl7XG4gICAgICAgIHJldHVybjsgLy8gcmV0dXJuIHVuZGVmaW5lZCBpbXBsaWNpdGx5LlxuICAgIH1cbn07In0=)\n\n``` language-js\n/*eslint getter-return: [\"error\", { allowImplicit: true }]*/\np = {\n    get name(){\n        return; // return undefined implicitly.\n    }\n};\n```\n\n## When Not To Use It\n\nIf your project will not be using ES5 property getters you do not need this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v4.2.0.\n\n## Further Reading\n\n[getter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)  \n\n[Read Understanding ECMAScript 6 \\| Leanpub](https://leanpub.com/understandinges6/read/#leanpub-auto-accessor-properties)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/getter-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/getter-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/getter-return](https://eslint.org/docs/latest/rules/getter-return)"
- name: Getting Started with ESLint
  id: use/getting-started
  summary: ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs
  description: "# Getting Started with ESLint\n\n## Table of Contents\n\n1.  [Prerequisites](#prerequisites)\n2.  [Quick start](#quick-start)\n3.  [Configuration](#configuration)\n4.  [Global Install](#global-install)\n5.  [Manual Set Up](#manual-set-up)\n6.  [Next Steps](#next-steps)\n\nESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.\n\nESLint is completely pluggable. Every single rule is a plugin and you can add more at runtime. You can also add community plugins, configurations, and parsers to extend the functionality of ESLint.\n\n## Prerequisites\n\nTo use ESLint, you must have [Node.js](https://nodejs.org/en/) (`^12.22.0`, `^14.17.0`, or `>=16.0.0`) installed and built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)\n\n## Quick start\n\nYou can install and configure ESLint using this command:\n\n``` language-shell\nnpm init @eslint/config\n```\n\nIf you want to use a specific shareable config that is hosted on npm, you can use the `--config` option and specify the package name:\n\n``` language-shell\n# use `eslint-config-semistandard` shared config\n\n# npm 7+\nnpm init @eslint/config -- --config semistandard\n\n# or (`eslint-config` prefix is optional)\nnpm init @eslint/config -- --config eslint-config-semistandard\n\n# ⚠️ npm 6.x no extra double-dash:\nnpm init @eslint/config --config semistandard\n```\n\nThe `--config` flag also supports passing in arrays:\n\n``` language-shell\nnpm init @eslint/config -- --config semistandard,standard\n# or\nnpm init @eslint/config -- --config semistandard --config standard\n```\n\n**Note:** `npm init @eslint/config` assumes you have a `package.json` file already. If you don’t, make sure to run `npm init` or `yarn init` beforehand.\n\nAfter that, you can run ESLint on any file or directory like this:\n\n``` language-shell\nnpx eslint yourfile.js\n\n# or\n\nyarn run eslint yourfile.js\n```\n\n## Configuration\n\n**Note:** If you are coming from a version before 1.0.0 please see the [migration guide](https://eslint.org/docs/latest/use/getting-startedmigrating-to-1.0.0).\n\nAfter running `npm init @eslint/config`, you’ll have an `.eslintrc.{js,yml,json}` file in your directory. In it, you’ll see some rules configured like this:\n\n``` language-json\n{\n    \"rules\": {\n        \"semi\": [\"error\", \"always\"],\n        \"quotes\": [\"error\", \"double\"]\n    }\n}\n```\n\nThe names `\"semi\"` and `\"quotes\"` are the names of [rules](getting-started../rules) in ESLint. The first value is the error level of the rule and can be one of these values:\n\n- `\"off\"` or `0` - turn the rule off\n- `\"warn\"` or `1` - turn the rule on as a warning (doesn’t affect exit code)\n- `\"error\"` or `2` - turn the rule on as an error (exit code will be 1)\n\nThe three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the [configuration docs](getting-startedconfigure/index)).\n\nYour `.eslintrc.{js,yml,json}` configuration file will also include the line:\n\n``` language-json\n{\n    \"extends\": \"eslint:recommended\"\n}\n```\n\nBecause of this line, all of the rules marked “(recommended)” on the [rules page](getting-started../rules) will be turned on. Alternatively, you can use configurations that others have created by searching for “eslint-config” on [npmjs.com](https://www.npmjs.com/search?q=eslint-config). ESLint will not lint your code unless you extend from a shared configuration or explicitly turn rules on in your configuration.\n\n## Global Install\n\nIt is also possible to install ESLint globally, rather than locally, using `npm install eslint --global`. However, this is not recommended, and any plugins or shareable configs that you use must still be installed locally if you install ESLint globally.\n\n## Manual Set Up\n\nYou can also manually set up ESLint in your project.\n\nBefore you begin, you must already have a `package.json` file. If you don’t, make sure to run `npm init` or `yarn init` to create the file beforehand.\n\n1.  Install the ESLint package in your project:\n\n    ``` language-shell\n    npm install --save-dev eslint\n    ```\n\n2.  Add an `.eslintrc` file in one of the [supported configuration file formats](getting-started./configure/configuration-files#configuration-file-formats).\n\n    ``` language-shell\n    # Create JavaScript configuration file\n    touch .eslintrc.js\n    ```\n\n3.  Add configuration to the `.eslintrc` file. Refer to the [Configure ESLint documentation](getting-startedconfigure/index) to learn how to add rules, environments, custom configurations, plugins, and more.\n\n    ``` language-js\n    // .eslintrc.js example\n    module.exports = {\n      \"env\": {\n          \"browser\": true,\n          \"es2021\": true\n      },\n      \"extends\": \"eslint:recommended\",\n      \"parserOptions\": {\n          \"ecmaVersion\": \"latest\",\n          \"sourceType\": \"module\"\n      },\n    }\n    ```\n\n4.  Lint code using the ESLint CLI:\n\n    ``` language-shell\n    npx eslint project-dir/ file1.js\n    ```\n\n    For more information on the available CLI options, refer to [Command Line Interface](getting-started./command-line-interface).\n\n## Next Steps\n\n- Learn about [advanced configuration](getting-startedconfigure/index) of ESLint.\n- Get familiar with the [command line options](getting-startedcommand-line-interface).\n- Explore [ESLint integrations](getting-startedintegrations) into other tools like editors, build systems, and more.\n- Can’t find just the right rule? Make your own [custom rule](getting-started../extend/custom-rules).\n- Make ESLint even better by [contributing](getting-started../contribute/index).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/getting-started](https://eslint.org/docs/latest/use/getting-started)"
- name: Governance
  id: contribute/governance
  summary: ESLint is an open source project that depends on contributions from the community
  description: "# Governance\n\n## Table of Contents\n\n1.  [Roles and Responsibilities](#roles-and-responsibilities)\n    1.  [Users](#users)\n    2.  [Contributors](#contributors)\n    3.  [Website Team Member](#website-team-member)\n    4.  [Committers](#committers)\n        1.  [Process for Adding Committers](#process-for-adding-committers)\n    5.  [Reviewers](#reviewers)\n        1.  [Process for Adding Reviewers](#process-for-adding-reviewers)\n    6.  [Technical Steering Committee (TSC)](#technical-steering-committee-tsc)\n        1.  [Process for Adding TSC Members](#process-for-adding-tsc-members)\n        2.  [TSC Meetings](#tsc-meetings)\n2.  [Consensus Seeking Process](#consensus-seeking-process)\n\nESLint is an open source project that depends on contributions from the community. Anyone may contribute to the project at any time by submitting code, participating in discussions, making suggestions, or any other contribution they see fit. This document describes how various types of contributors work within the ESLint project.\n\n## Roles and Responsibilities\n\n### Users\n\nUsers are community members who have a need for the project. Anyone can be a User; there are no special requirements. Common User contributions include evangelizing the project (e.g., display a link on a website and raise awareness through word-of-mouth), informing developers of strengths and weaknesses from a new user perspective, or providing moral support (a “thank you” goes a long way).\n\nUsers who continue to engage with the project and its community will often become more and more involved. Such Users may find themselves becoming Contributors, as described in the next section.\n\n### Contributors\n\nContributors are community members who contribute in concrete ways to the project, most often in the form of code and/or documentation. Anyone can become a Contributor, and contributions can take many forms. There is no expectation of commitment to the project, no specific skill requirements, and no selection process.\n\nContributors have read-only access to source code and so submit changes via pull requests. Contributor pull requests have their contribution reviewed and merged by a TSC member. TSC members and Committers work with Contributors to review their code and prepare it for merging.\n\nAs Contributors gain experience and familiarity with the project, their profile within, and commitment to, the community will increase. At some stage, they may find themselves being nominated as either a Website Team Member or Committer by an existing Website Team Member or Committer.\n\n### Website Team Member\n\nWebsite Team Members are community members who have shown that they are committed to the continued maintenance of [eslint.org](https://eslint.org/) through ongoing engagement with the community. Website Team Members are given push access to the `eslint.org` GitHub repository and must abide by the project’s [Contribution Guidelines](governance../contribute/index).\n\nWebsite Team Members:\n\n- Are expected to work on public branches of the source repository and submit pull requests from that branch to the master branch.\n- Are expected to delete their public branches when they are no longer necessary.\n- Must submit pull requests for all changes.\n- Have their work reviewed by Reviewers and TSC members before acceptance into the repository.\n- May label and close website-related issues (see [Manage Issues](https://eslint.org/docs/latest/contribute/governance../maintain/manage-issues))\n- May merge some pull requests (see [Review Pull Requests](https://eslint.org/docs/latest/contribute/governance../maintain/review-pull-requests))\n\nTo become a Website Team Member:\n\n- One must have shown a willingness and ability to participate in the maintenance of [eslint.org](https://eslint.org/) as a team player. Typically, a potential Website Team Member will need to show that they have an understanding of the structure of the website and how it fits into the larger ESLint project’s objectives and strategy.\n- Website Team Members are expected to be respectful of every community member and to work collaboratively in the spirit of inclusion.\n- Have submitted a minimum of 10 website-related pull requests. What’s a website-related pull request? One that is made to the `eslint.org` repository or the `docs` directory in the `eslint` repository and requires little effort to accept because it’s well documented and tested.\n\nNew Website Team Members can be nominated by any existing Website Team Member or Committer. Once they have been nominated, there will be a vote by the TSC members.\n\nIt is important to recognize that membership on the website team is a privilege, not a right. That privilege must be earned and once earned it can be removed by the TSC members by a standard TSC motion. However, under normal circumstances Website Team Members remain for as long as they wish to continue engaging with the project.\n\n### Committers\n\nCommitters are community members who have shown that they are committed to the continued development of the project through ongoing engagement with the community. Committers are given push access to the project’s GitHub repos and must abide by the project’s [Contribution Guidelines](governance../contribute/index).\n\nCommitters:\n\n- Are expected to work on public branches of the source repository and submit pull requests from that branch to the master branch.\n- Are expected to delete their public branches when they are no longer necessary.\n- Must submit pull requests for all changes.\n- Have their work reviewed by TSC members before acceptance into the repository.\n- May label and close issues (see [Manage Issues](https://eslint.org/docs/latest/contribute/governance../maintain/manage-issues))\n- May merge some pull requests (see [Review Pull Requests](https://eslint.org/docs/latest/contribute/governance../maintain/review-pull-requests))\n\nTo become a Committer:\n\n- One must have shown a willingness and ability to participate in the project as a team player. Typically, a potential Committer will need to show that they have an understanding of and alignment with the project, its objectives, and its strategy.\n- Committers are expected to be respectful of every community member and to work collaboratively in the spirit of inclusion.\n- Have submitted a minimum of 10 qualifying pull requests. What’s a qualifying pull request? One that carries significant technical weight and requires little effort to accept because it’s well documented and tested.\n\nNew Committers can be nominated by any existing Committer. Once they have been nominated, there will be a vote by the TSC members.\n\nIt is important to recognize that committership is a privilege, not a right. That privilege must be earned and once earned it can be removed by the TSC members by a standard TSC motion. However, under normal circumstances committership exists for as long as the Committer wishes to continue engaging with the project.\n\nA Committer who shows an above-average level of contribution to the project, particularly with respect to its strategic direction and long-term health, may be nominated to become a reviewer, described below.\n\n#### Process for Adding Committers\n\n1.  Send email congratulating the new committer and confirming that they would like to accept. This should also outline the responsibilities of a committer with a link to the maintainer guide.\n2.  Add the GitHub user to the “ESLint Team” team\n3.  Add committer email to the ESLint team mailing list\n4.  Invite to Discord team channel\n5.  Tweet congratulations to the new committer from the ESLint Twitter account\n\n### Reviewers\n\nReviewers are community members who have contributed a significant amount of time to the project through triaging of issues, fixing bugs, implementing enhancements/features, and are trusted community leaders.\n\nReviewers may perform all of the duties of Committers, and also:\n\n- May merge external pull requests for accepted issues upon reviewing and approving the changes.\n- May merge their own pull requests once they have collected the feedback they deem necessary. (No pull request should be merged without at least one Committer/Reviewer/TSC member comment stating they’ve looked at the code.)\n\nTo become a Reviewer:\n\n- Work in a helpful and collaborative way with the community.\n- Have given good feedback on others’ submissions and displayed an overall understanding of the code quality standards for the project.\n- Commit to being a part of the community for the long-term.\n- Have submitted a minimum of 50 qualifying pull requests.\n\nA Committer is invited to become a Reviewer by existing Reviewers and TSC members. A nomination will result in discussion and then a decision by the TSC.\n\n#### Process for Adding Reviewers\n\n1.  Add the GitHub user to the “ESLint Reviewers” GitHub team\n2.  Tweet congratulations to the new Reviewer from the ESLint Twitter account\n\n### Technical Steering Committee (TSC)\n\nThe ESLint project is jointly governed by a Technical Steering Committee (TSC) which is responsible for high-level guidance of the project.\n\nThe TSC has final authority over this project including:\n\n- Technical direction\n- Project governance and process (including this policy)\n- Contribution policy\n- GitHub repository hosting\n\nTSC seats are not time-limited. The size of the TSC can not be larger than five members. This size ensures adequate coverage of important areas of expertise balanced with the ability to make decisions efficiently.\n\nThe TSC may add additional members to the TSC by a standard TSC motion.\n\nA TSC member may be removed from the TSC by voluntary resignation, by a standard TSC motion, or by missing four consecutive TSC meetings. In all cases, the TSC member will revert to Reviewer status unless they prefer Alumni status.\n\nChanges to TSC membership should be posted in the agenda, and may be suggested as any other agenda item (see “TSC Meetings” below).\n\nNo more than 1/3 of the TSC members may be affiliated with the same employer. If removal or resignation of a TSC member, or a change of employment by a TSC member, creates a situation where more than 1/3 of the TSC membership shares an employer, then the situation must be immediately remedied by the resignation or removal of one or more TSC members affiliated with the over-represented employer(s).\n\nTSC members have additional responsibilities over and above those of a Reviewer. These responsibilities ensure the smooth running of the project. TSC members are expected to review code contributions, approve changes to this document, manage the copyrights within the project outputs, and attend regular TSC meetings.\n\nTSC members may perform all of the duties of Reviewers, and also:\n\n- May release new versions of all ESLint projects.\n- May participate in TSC meetings.\n- May propose budget items.\n- May propose new ESLint projects.\n\nThere is no specific set of requirements or qualifications for TSC members beyond those that are expected of Reviewers.\n\nA Reviewer is invited to become a TSC member by existing TSC members. A nomination will result in discussion and then a decision by the TSC.\n\n#### Process for Adding TSC Members\n\n1.  Add the GitHub user to the “ESLint TSC” GitHub team\n2.  Set the GitHub user to be have the “Owner” role for the ESLint organization\n3.  Send a welcome email with a link to the [Maintain ESLint documentation](https://eslint.org/docs/latest/contribute/governance../maintain/) and instructions for npm 2FA.\n4.  Invite to the Discord TSC channel\n5.  Make the TSC member an admin on the ESLint team mailing list\n6.  Add the TSC member to the recurring TSC meeting event on Google Calendar\n7.  Add the TSC member as an admin to ESLint Twitter Account on Tweetdeck\n8.  Add the TSC member to the ESLint TSC mailing list as an “Owner”\n9.  Tweet congratulations to the new TSC member from the ESLint Twitter account\n\n#### TSC Meetings\n\nThe TSC meets every other week in the TSC Meeting [Discord](https://eslint.org/chat) channel. The meeting is run by a designated moderator approved by the TSC.\n\nItems are added to the TSC agenda which are considered contentious or are modifications of governance, contribution policy, TSC membership, or release process.\n\nThe intention of the agenda is not to approve or review all patches. That should happen continuously on GitHub and be handled by the larger group of Committers.\n\nAny community member, Committer, or Reviewer can ask that something be added to the next meeting’s agenda by logging a GitHub Issue. Anyone can add the item to the agenda by adding the “tsc agenda” tag to the issue.\n\nPrior to each TSC meeting, the moderator will share the Agenda with members of the TSC. TSC members can add any items they like to the agenda at the beginning of each meeting. The moderator and the TSC cannot veto or remove items.\n\nNo binding votes on TSC agenda items can take place without a quorum of TSC members present in the meeting. Quorum is achieved when more than half of the TSC members (minus non-attending members) are present.\n\nThe TSC may invite persons or representatives from certain projects to participate in a non-voting capacity.\n\nThe moderator is responsible for summarizing the discussion of each agenda item and sending it as a pull request after the meeting.\n\n## Consensus Seeking Process\n\nThe TSC follows a [Consensus Seeking](https://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision making model.\n\nWhen an agenda item has appeared to reach a consensus, the moderator will ask “Does anyone object?” as a final call for dissent from the consensus.\n\nIf an agenda item cannot reach a consensus, a TSC member can call for either a closing vote or a vote to table the issue to the next meeting. The call for a vote must be approved by a majority of the TSC or else the discussion will continue. Simple majority wins.\n\nThis work is a derivative of [YUI Contributor Model](https://github.com/yui/yui3/wiki/Contributor-Model) and the [Node.js Project Governance Model](https://github.com/nodejs/node/blob/master/GOVERNANCE.md).\n\nThis work is licensed under a [Creative Commons Attribution-ShareAlike 2.0 UK: England & Wales License](https://creativecommons.org/licenses/by-sa/2.0/uk/).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/governance](https://eslint.org/docs/latest/contribute/governance)"
- name: grouped-accessor-pairs
  id: rules/grouped-accessor-pairs
  summary: A getter and setter for the same property don’t necessarily have to be defined adjacent to each other
  description: "# grouped-accessor-pairs\n\nRequire grouped accessor pairs in object literals and classes\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [getBeforeSet](#getbeforeset)\n    2.  [setBeforeGet](#setbeforeget)\n3.  [Known Limitations](#known-limitations)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nA getter and setter for the same property don’t necessarily have to be defined adjacent to each other.\n\nFor example, the following statements would create the same object:\n\n``` language-js\nvar o = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    },\n    b: 1\n};\n\nvar o = {\n    get a() {\n        return this.val;\n    },\n    b: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n```\n\nWhile it is allowed to define the pair for a getter or a setter anywhere in an object or class definition, it’s considered a best practice to group accessor functions for the same property.\n\nIn other words, if a property has a getter and a setter, the setter should be defined right after the getter, or vice versa.\n\n## Rule Details\n\nThis rule requires grouped definitions of accessor functions for the same property in object literals, class declarations and class expressions.\n\nOptionally, this rule can also enforce consistent order (`getBeforeSet` or `setBeforeGet`).\n\nThis rule does not enforce the existence of the pair for a getter or a setter. See [accessor-pairs](grouped-accessor-pairsaccessor-pairs) if you also want to enforce getter/setter pairs.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSB7XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9LFxuICAgIGI6IDEsXG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG52YXIgYmFyID0ge1xuICAgIHNldCBiKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfSxcbiAgICBhOiAxLFxuICAgIGdldCBiKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxufVxuXG5jbGFzcyBGb28ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGIoKXt9XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG4gICAgYigpe31cbiAgICBzdGF0aWMgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint grouped-accessor-pairs: \"error\"*/\n\nvar foo = {\n    get a() {\n        return this.val;\n    },\n    b: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n\nvar bar = {\n    set b(value) {\n        this.val = value;\n    },\n    a: 1,\n    get b() {\n        return this.val;\n    }\n}\n\nclass Foo {\n    set a(value) {\n        this.val = value;\n    }\n    b(){}\n    get a() {\n        return this.val;\n    }\n}\n\nconst Bar = class {\n    static get a() {\n        return this.val;\n    }\n    b(){}\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSB7XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9LFxuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfSxcbiAgICBiOiAxXG59O1xuXG52YXIgYmFyID0ge1xuICAgIHNldCBiKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgYigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH0sXG4gICAgYTogMVxufVxuXG5jbGFzcyBGb28ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIGIoKXt9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG4gICAgc3RhdGljIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGIoKXt9XG59In0=)\n\n``` language-js\n/*eslint grouped-accessor-pairs: \"error\"*/\n\nvar foo = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    },\n    b: 1\n};\n\nvar bar = {\n    set b(value) {\n        this.val = value;\n    },\n    get b() {\n        return this.val;\n    },\n    a: 1\n}\n\nclass Foo {\n    set a(value) {\n        this.val = value;\n    }\n    get a() {\n        return this.val;\n    }\n    b(){}\n}\n\nconst Bar = class {\n    static get a() {\n        return this.val;\n    }\n    static set a(value) {\n        this.val = value;\n    }\n    b(){}\n}\n```\n\n## Options\n\nThis rule has a string option:\n\n- `\"anyOrder\"` (default) does not enforce order.\n- `\"getBeforeSet\"` if a property has both getter and setter, requires the getter to be defined before the setter.\n- `\"setBeforeGet\"` if a property has both getter and setter, requires the setter to be defined before the getter.\n\n### getBeforeSet\n\nExamples of **incorrect** code for this rule with the `\"getBeforeSet\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFtcImVycm9yXCIsIFwiZ2V0QmVmb3JlU2V0XCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59O1xuXG5jbGFzcyBGb28ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxufVxuXG5jb25zdCBCYXIgPSBjbGFzcyB7XG4gICAgc3RhdGljIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint grouped-accessor-pairs: [\"error\", \"getBeforeSet\"]*/\n\nvar foo = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value;\n    }\n    get a() {\n        return this.val;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        this.val = value;\n    }\n    static get a() {\n        return this.val;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"getBeforeSet\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFtcImVycm9yXCIsIFwiZ2V0QmVmb3JlU2V0XCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH0sXG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxufVxuXG5jb25zdCBCYXIgPSBjbGFzcyB7XG4gICAgc3RhdGljIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIHN0YXRpYyBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint grouped-accessor-pairs: [\"error\", \"getBeforeSet\"]*/\n\nvar foo = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    }\n};\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n    set a(value) {\n        this.val = value;\n    }\n}\n\nconst Bar = class {\n    static get a() {\n        return this.val;\n    }\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\n### setBeforeGet\n\nExamples of **incorrect** code for this rule with the `\"setBeforeGet\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFtcImVycm9yXCIsIFwic2V0QmVmb3JlR2V0XCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH0sXG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxufVxuXG5jb25zdCBCYXIgPSBjbGFzcyB7XG4gICAgc3RhdGljIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxuICAgIHN0YXRpYyBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint grouped-accessor-pairs: [\"error\", \"setBeforeGet\"]*/\n\nvar foo = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    }\n};\n\nclass Foo {\n    get a() {\n        return this.val;\n    }\n    set a(value) {\n        this.val = value;\n    }\n}\n\nconst Bar = class {\n    static get a() {\n        return this.val;\n    }\n    static set a(value) {\n        this.val = value;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"setBeforeGet\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGdyb3VwZWQtYWNjZXNzb3ItcGFpcnM6IFtcImVycm9yXCIsIFwic2V0QmVmb3JlR2V0XCJdKi9cblxudmFyIGZvbyA9IHtcbiAgICBzZXQgYSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59O1xuXG5jbGFzcyBGb28ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWw7XG4gICAgfVxufVxuXG5jb25zdCBCYXIgPSBjbGFzcyB7XG4gICAgc3RhdGljIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint grouped-accessor-pairs: [\"error\", \"setBeforeGet\"]*/\n\nvar foo = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value;\n    }\n    get a() {\n        return this.val;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        this.val = value;\n    }\n    static get a() {\n        return this.val;\n    }\n}\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule does not account for possible side effects and in certain cases might require or miss to require grouping or order for getters/setters that have a computed key, like in the following example:\n\n``` language-js\n/*eslint grouped-accessor-pairs: \"error\"*/\n\nvar a = 1;\n\n// false warning (false positive)\nvar foo = {\n    get [a++]() {\n        return this.val;\n    },\n    b: 1,\n    set [a++](value) {\n        this.val = value;\n    }\n};\n\n// missed warning (false negative)\nvar bar = {\n    get [++a]() {\n        return this.val;\n    },\n    b: 1,\n    set [a](value) {\n        this.val = value;\n    }\n};\n```\n\nAlso, this rule does not report any warnings for properties that have duplicate getters or setters.\n\nSee [no-dupe-keys](grouped-accessor-pairsno-dupe-keys) if you also want to disallow duplicate keys in object literals.\n\nSee [no-dupe-class-members](grouped-accessor-pairsno-dupe-class-members) if you also want to disallow duplicate names in class definitions.\n\n## Related Rules\n\n- [accessor-pairs](accessor-pairs)\n- [no-dupe-keys](no-dupe-keys)\n- [no-dupe-class-members](no-dupe-class-members)\n\n## Version\n\nThis rule was introduced in ESLint v6.7.0.\n\n## Further Reading\n\n[setter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)  \n\n[getter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)  \n\n[Classes - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/grouped-accessor-pairs.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/grouped-accessor-pairs.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/grouped-accessor-pairs](https://eslint.org/docs/latest/rules/grouped-accessor-pairs)"
- name: guard-for-in
  id: rules/guard-for-in
  summary: Looping over objects with a for in loop will include properties that are inherited through the prototype chain
  description: "# guard-for-in\n\nRequire `for-in` loops to include an `if` statement\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n``` language-js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nFor codebases that do not support ES2022, `Object.prototype.hasOwnProperty.call(foo, key)` can be used as a check that the property is not inherited.\n\nFor codebases that do support ES2022, `Object.hasOwn(foo, key)` can be used as a shorter alternative; see [prefer-object-has-own](guard-for-inprefer-object-has-own).\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](guard-for-inno-prototype-builtins).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGd1YXJkLWZvci1pbjogXCJlcnJvclwiKi9cblxuZm9yIChrZXkgaW4gZm9vKSB7XG4gICAgZG9Tb21ldGhpbmcoa2V5KTtcbn0ifQ==)\n\n``` language-js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGd1YXJkLWZvci1pbjogXCJlcnJvclwiKi9cblxuZm9yIChrZXkgaW4gZm9vKSB7XG4gICAgaWYgKE9iamVjdC5oYXNPd24oZm9vLCBrZXkpKSB7XG4gICAgICAgIGRvU29tZXRoaW5nKGtleSk7XG4gICAgfVxufVxuXG5mb3IgKGtleSBpbiBmb28pIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZvbywga2V5KSkge1xuICAgICAgICBkb1NvbWV0aGluZyhrZXkpO1xuICAgIH1cbn1cblxuZm9yIChrZXkgaW4gZm9vKSB7XG4gICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwoZm9vLCBrZXkpKSB7XG4gICAgICAgIGRvU29tZXRoaW5nKGtleSk7XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.hasOwn(foo, key)) {\n        doSomething(key);\n    }\n}\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n\nfor (key in foo) {\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n- [prefer-object-has-own](prefer-object-has-own)\n- [no-prototype-builtins](no-prototype-builtins)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Further Reading\n\n[Exploring JavaScript for-in loops](https://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)  \n\n[The pitfalls of using objects as maps in JavaScript](https://2ality.com/2012/01/objects-as-maps.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/guard-for-in.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/guard-for-in.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/guard-for-in](https://eslint.org/docs/latest/rules/guard-for-in)"
- name: id-denylist
  id: rules/id-denylist
  summary: Generic names can lead to hard-to-decipher code
  description: "# id-denylist\n\nDisallow specified identifiers\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\n> “There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton\n\nGeneric names can lead to hard-to-decipher code. This rule allows you to specify a deny list of disallowed identifier names to avoid this practice.\n\n## Rule Details\n\nThis rule disallows specified identifiers in assignments and `function` definitions.\n\nThis rule will catch disallowed identifiers that are:\n\n- variable declarations\n- function declarations\n- object properties assigned to during object creation\n- class fields\n- class methods\n\nIt will not catch disallowed identifiers that are:\n\n- function calls (so you can still use functions you do not have control over)\n- object properties (so you can still use objects you do not have control over)\n\n## Options\n\nThe rule takes one or more strings as options: the names of restricted identifiers.\n\nFor example, to restrict the use of common generic identifiers:\n\n``` language-json\n{\n    \"id-denylist\": [\"error\", \"data\", \"err\", \"e\", \"cb\", \"callback\"]\n}\n```\n\n**Note:** The first element of the array is for the rule severity (see [Configure Rules](id-denylist../use/configure/rules). The other elements in the array are the identifiers that you want to disallow.\n\nExamples of **incorrect** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWRlbnlsaXN0OiBbXCJlcnJvclwiLCBcImRhdGFcIiwgXCJjYWxsYmFja1wiXSAqL1xuXG52YXIgZGF0YSA9IHsgLi4udmFsdWVzIH07XG5cbmZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgIC8vIC4uLlxufVxuXG5lbGVtZW50LmNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG52YXIgaXRlbVNldCA9IHtcbiAgICBkYXRhOiBbLi4udmFsdWVzXVxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBkYXRhID0gW107XG59XG5cbmNsYXNzIEJhciB7XG4gICAgI2RhdGEgPSBbXTtcbn1cblxuY2xhc3MgQmF6IHtcbiAgICBjYWxsYmFjaygpIHt9XG59XG5cbmNsYXNzIFF1eCB7XG4gICAgI2NhbGxiYWNrKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n\nvar data = { ...values };\n\nfunction callback() {\n    // ...\n}\n\nelement.callback = function() {\n    // ...\n};\n\nvar itemSet = {\n    data: [...values]\n};\n\nclass Foo {\n    data = [];\n}\n\nclass Bar {\n    #data = [];\n}\n\nclass Baz {\n    callback() {}\n}\n\nclass Qux {\n    #callback() {}\n}\n```\n\nExamples of **correct** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWRlbnlsaXN0OiBbXCJlcnJvclwiLCBcImRhdGFcIiwgXCJjYWxsYmFja1wiXSAqL1xuXG52YXIgZW5jb2RpbmdPcHRpb25zID0gey4uLnZhbHVlc307XG5cbmZ1bmN0aW9uIHByb2Nlc3NGaWxlUmVzdWx0KCkge1xuICAgIC8vIC4uLlxufVxuXG5lbGVtZW50LnN1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG52YXIgaXRlbVNldCA9IHtcbiAgICBlbnRpdGllczogWy4uLnZhbHVlc11cbn07XG5cbmNhbGxiYWNrKCk7IC8vIGFsbCBmdW5jdGlvbiBjYWxscyBhcmUgaWdub3JlZFxuXG5mb28uY2FsbGJhY2soKTsgLy8gYWxsIGZ1bmN0aW9uIGNhbGxzIGFyZSBpZ25vcmVkXG5cbmZvby5kYXRhOyAvLyBhbGwgcHJvcGVydHkgbmFtZXMgdGhhdCBhcmUgbm90IGFzc2lnbm1lbnRzIGFyZSBpZ25vcmVkXG5cbmNsYXNzIEZvbyB7XG4gICAgaXRlbXMgPSBbXTtcbn1cblxuY2xhc3MgQmFyIHtcbiAgICAjaXRlbXMgPSBbXTtcbn1cblxuY2xhc3MgQmF6IHtcbiAgICBtZXRob2QoKSB7fVxufVxuXG5jbGFzcyBRdXgge1xuICAgICNtZXRob2QoKSB7fVxufSJ9)\n\n``` language-js\n/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n\nvar encodingOptions = {...values};\n\nfunction processFileResult() {\n    // ...\n}\n\nelement.successHandler = function() {\n    // ...\n};\n\nvar itemSet = {\n    entities: [...values]\n};\n\ncallback(); // all function calls are ignored\n\nfoo.callback(); // all function calls are ignored\n\nfoo.data; // all property names that are not assignments are ignored\n\nclass Foo {\n    items = [];\n}\n\nclass Bar {\n    #items = [];\n}\n\nclass Baz {\n    method() {}\n}\n\nclass Qux {\n    #method() {}\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you do not want to restrict the use of certain identifiers.\n\n## Version\n\nThis rule was introduced in ESLint v7.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/id-denylist.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/id-denylist.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/id-denylist](https://eslint.org/docs/latest/rules/id-denylist)"
- name: id-length
  id: rules/id-length
  summary: Very short identifier names like e, x, _t or very long ones like hashGeneratorResultOutputContainerObject can make code harder to read and potentially less maintainable
  description: "# id-length\n\nEnforce minimum and maximum identifier lengths\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [min](#min)\n    2.  [max](#max)\n    3.  [properties](#properties)\n    4.  [exceptions](#exceptions)\n    5.  [exceptionPatterns](#exceptionpatterns)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nVery short identifier names like `e`, `x`, `_t` or very long ones like `hashGeneratorResultOutputContainerObject` can make code harder to read and potentially less maintainable. To prevent this, one may enforce a minimum and/or maximum identifier length.\n\n``` language-js\nvar x = 5; // too short; difficult to understand its purpose without context\n```\n\n## Rule Details\n\nThis rule enforces a minimum and/or maximum identifier length convention.\n\nThis rule counts [graphemes](https://unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table) instead of using [`String length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length).\n\n## Options\n\nExamples of **incorrect** code for this rule with the default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogXCJlcnJvclwiKi8gICAgIC8vIGRlZmF1bHQgaXMgbWluaW11bSAyLWNoYXJzICh7IFwibWluXCI6IDIgfSlcbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgeCA9IDU7XG5vYmouZSA9IGRvY3VtZW50LmJvZHk7XG52YXIgZm9vID0gZnVuY3Rpb24gKGUpIHsgfTtcbnRyeSB7XG4gICAgZGFuZ2Vyb3VzU3R1ZmYoKTtcbn0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpZ25vcmUgYXMgbWFueSBkb1xufVxudmFyIG15T2JqID0geyBhOiAxIH07XG4oYSkgPT4geyBhICogYSB9O1xuY2xhc3MgeSB7IH1cbmNsYXNzIEZvbyB7IHgoKSB7fSB9XG5jbGFzcyBCYXIgeyAjeCgpIHt9IH1cbmNsYXNzIEJheiB7IHggPSAxIH1cbmNsYXNzIFF1eCB7ICN4ID0gMSB9XG5mdW5jdGlvbiBiYXIoLi4ueCkgeyB9XG5mdW5jdGlvbiBiYXooW3hdKSB7IH1cbnZhciBbeF0gPSBhcnI7XG52YXIgeyBwcm9wOiBbeF19ID0ge307XG5mdW5jdGlvbiBxdXgoe3h9KSB7IH1cbnZhciB7IHggfSA9IHt9O1xudmFyIHsgcHJvcDogYX0gPSB7fTtcbih7IHByb3A6IG9iai54IH0gPSB7fSk7In0=)\n\n``` language-js\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n/*eslint-env es6*/\n\nvar x = 5;\nobj.e = document.body;\nvar foo = function (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nvar myObj = { a: 1 };\n(a) => { a * a };\nclass y { }\nclass Foo { x() {} }\nclass Bar { #x() {} }\nclass Baz { x = 1 }\nclass Qux { #x = 1 }\nfunction bar(...x) { }\nfunction baz([x]) { }\nvar [x] = arr;\nvar { prop: [x]} = {};\nfunction qux({x}) { }\nvar { x } = {};\nvar { prop: a} = {};\n({ prop: obj.x } = {});\n```\n\nExamples of **correct** code for this rule with the default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogXCJlcnJvclwiKi8gICAgIC8vIGRlZmF1bHQgaXMgbWluaW11bSAyLWNoYXJzICh7IFwibWluXCI6IDIgfSlcbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgbnVtID0gNTtcbmZ1bmN0aW9uIF9mKCkgeyByZXR1cm4gNDI7IH1cbmZ1bmN0aW9uIF9mdW5jKCkgeyByZXR1cm4gNDI7IH1cbm9iai5lbCA9IGRvY3VtZW50LmJvZHk7XG52YXIgZm9vID0gZnVuY3Rpb24gKGV2dCkgeyAvKiBkbyBzdHVmZiAqLyB9O1xudHJ5IHtcbiAgICBkYW5nZXJvdXNTdHVmZigpO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBpZ25vcmUgYXMgbWFueSBkb1xufVxudmFyIG15T2JqID0geyBhcHBsZTogMSB9O1xuKG51bSkgPT4geyBudW0gKiBudW0gfTtcbmZ1bmN0aW9uIGJhcihudW0gPSAwKSB7IH1cbmNsYXNzIE15Q2xhc3MgeyB9XG5jbGFzcyBGb28geyBtZXRob2QoKSB7fSB9XG5jbGFzcyBCYXIgeyAjbWV0aG9kKCkge30gfVxuY2xhc3MgQmF6IHsgZmllbGQgPSAxIH1cbmNsYXNzIFF1eCB7ICNmaWVsZCA9IDEgfVxuZnVuY3Rpb24gYmF6KC4uLmFyZ3MpIHsgfVxuZnVuY3Rpb24gcXV4KFtsb25nTmFtZV0pIHsgfVxudmFyIHsgcHJvcCB9ID0ge307XG52YXIgeyBwcm9wOiBbbG9uZ05hbWVdIH0gPSB7fTtcbnZhciBbbG9uZ05hbWVdID0gYXJyO1xuZnVuY3Rpb24gZm9vYmFyKHsgcHJvcCB9KSB7IH1cbmZ1bmN0aW9uIGZvb2Jheih7IGE6IHByb3AgfSkgeyB9XG52YXIgeyBwcm9wIH0gPSB7fTtcbnZhciB7IGE6IHByb3AgfSA9IHt9O1xuKHsgcHJvcDogb2JqLmxvbmdOYW1lIH0gPSB7fSk7XG52YXIgZGF0YSA9IHsgXCJ4XCI6IDEgfTsgIC8vIGV4Y3VzZWQgYmVjYXVzZSBvZiBxdW90ZXNcbmRhdGFbXCJ5XCJdID0gMzsgIC8vIGV4Y3VzZWQgYmVjYXVzZSBvZiBjYWxjdWxhdGVkIHByb3BlcnR5IGFjY2VzcyJ9)\n\n``` language-js\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n/*eslint-env es6*/\n\nvar num = 5;\nfunction _f() { return 42; }\nfunction _func() { return 42; }\nobj.el = document.body;\nvar foo = function (evt) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nvar myObj = { apple: 1 };\n(num) => { num * num };\nfunction bar(num = 0) { }\nclass MyClass { }\nclass Foo { method() {} }\nclass Bar { #method() {} }\nclass Baz { field = 1 }\nclass Qux { #field = 1 }\nfunction baz(...args) { }\nfunction qux([longName]) { }\nvar { prop } = {};\nvar { prop: [longName] } = {};\nvar [longName] = arr;\nfunction foobar({ prop }) { }\nfunction foobaz({ a: prop }) { }\nvar { prop } = {};\nvar { a: prop } = {};\n({ prop: obj.longName } = {});\nvar data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\nThis rule has an object option:\n\n- `\"min\"` (default: 2) enforces a minimum identifier length\n- `\"max\"` (default: Infinity) enforces a maximum identifier length\n- `\"properties\": always` (default) enforces identifier length convention for property names\n- `\"properties\": never` ignores identifier length convention for property names\n- `\"exceptions\"` allows an array of specified identifier names\n- `\"exceptionPatterns\"` array of strings representing regular expression patterns, allows identifiers that match any of the patterns.\n\n### min\n\nExamples of **incorrect** code for this rule with the `{ \"min\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcIm1pblwiOiA0IH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgdmFsID0gNTtcbm9iai5lID0gZG9jdW1lbnQuYm9keTtcbmZ1bmN0aW9uIGZvbyAoZSkgeyB9O1xudHJ5IHtcbiAgICBkYW5nZXJvdXNTdHVmZigpO1xufSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZSBhcyBtYW55IGRvXG59XG52YXIgbXlPYmogPSB7IGE6IDEgfTtcbih2YWwpID0+IHsgdmFsICogdmFsIH07XG5jbGFzcyB5IHsgfVxuY2xhc3MgRm9vIHsgeCgpIHt9IH1cbmZ1bmN0aW9uIGJhciguLi54KSB7IH1cbnZhciB7IHggfSA9IHt9O1xudmFyIHsgcHJvcDogYX0gPSB7fTtcbnZhciBbeF0gPSBhcnI7XG52YXIgeyBwcm9wOiBbeF19ID0ge307XG4oeyBwcm9wOiBvYmoueCB9ID0ge30pOyJ9)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar val = 5;\nobj.e = document.body;\nfunction foo (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nvar myObj = { a: 1 };\n(val) => { val * val };\nclass y { }\nclass Foo { x() {} }\nfunction bar(...x) { }\nvar { x } = {};\nvar { prop: a} = {};\nvar [x] = arr;\nvar { prop: [x]} = {};\n({ prop: obj.x } = {});\n```\n\nExamples of **correct** code for this rule with the `{ \"min\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcIm1pblwiOiA0IH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgdmFsdWUgPSA1O1xuZnVuY3Rpb24gZnVuYygpIHsgcmV0dXJuIDQyOyB9XG5vYmplY3QuZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG52YXIgZm9vYmFyID0gZnVuY3Rpb24gKGV2ZW50KSB7IC8qIGRvIHN0dWZmICovIH07XG50cnkge1xuICAgIGRhbmdlcm91c1N0dWZmKCk7XG59IGNhdGNoIChlcnJvcikge1xuICAgIC8vIGlnbm9yZSBhcyBtYW55IGRvXG59XG52YXIgbXlPYmogPSB7IGFwcGxlOiAxIH07XG4odmFsdWUpID0+IHsgdmFsdWUgKiB2YWx1ZSB9O1xuZnVuY3Rpb24gZm9vYmF6KHZhbHVlID0gMCkgeyB9XG5jbGFzcyBNeUNsYXNzIHsgfVxuY2xhc3MgRm9vYmFyIHsgbWV0aG9kKCkge30gfVxuZnVuY3Rpb24gYmFyYmF6KC4uLmFyZ3MpIHsgfVxudmFyIHsgcHJvcCB9ID0ge307XG52YXIgW2xvbmdOYW1lXSA9IGZvbztcbnZhciB7IGE6IFtwcm9wXSB9ID0ge307XG52YXIgeyBhOiBsb25nTmFtZSB9ID0ge307XG4oeyBwcm9wOiBvYmplY3QubmFtZSB9ID0ge30pO1xudmFyIGRhdGEgPSB7IFwieFwiOiAxIH07ICAvLyBleGN1c2VkIGJlY2F1c2Ugb2YgcXVvdGVzXG5kYXRhW1wieVwiXSA9IDM7ICAvLyBleGN1c2VkIGJlY2F1c2Ugb2YgY2FsY3VsYXRlZCBwcm9wZXJ0eSBhY2Nlc3MifQ==)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar value = 5;\nfunction func() { return 42; }\nobject.element = document.body;\nvar foobar = function (event) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nvar myObj = { apple: 1 };\n(value) => { value * value };\nfunction foobaz(value = 0) { }\nclass MyClass { }\nclass Foobar { method() {} }\nfunction barbaz(...args) { }\nvar { prop } = {};\nvar [longName] = foo;\nvar { a: [prop] } = {};\nvar { a: longName } = {};\n({ prop: object.name } = {});\nvar data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\n### max\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 10 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcIm1heFwiOiAxMCB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIHJlYWxseUxvbmdWYXJOYW1lID0gNTtcbmZ1bmN0aW9uIHJlYWxseUxvbmdGdW5jTmFtZSgpIHsgcmV0dXJuIDQyOyB9XG5vYmoucmVhbGx5TG9uZ1Byb3BOYW1lID0gZG9jdW1lbnQuYm9keTtcbnZhciBmb28gPSBmdW5jdGlvbiAocmVhbGx5TG9uZ0FyZ05hbWUpIHsgLyogZG8gc3R1ZmYgKi8gfTtcbnRyeSB7XG4gICAgZGFuZ2Vyb3VzU3R1ZmYoKTtcbn0gY2F0Y2ggKHJlYWxseUxvbmdFcnJvck5hbWUpIHtcbiAgICAvLyBpZ25vcmUgYXMgbWFueSBkb1xufVxuKHJlYWxseUxvbmdBcmdOYW1lKSA9PiB7IHJldHVybiAhcmVhbGx5TG9uZ0FyZ05hbWU7IH07XG52YXIgW3JlYWxseUxvbmdGaXJzdEVsZW1lbnROYW1lXSA9IGFycjsifQ==)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"max\": 10 }]*/\n/*eslint-env es6*/\n\nvar reallyLongVarName = 5;\nfunction reallyLongFuncName() { return 42; }\nobj.reallyLongPropName = document.body;\nvar foo = function (reallyLongArgName) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (reallyLongErrorName) {\n    // ignore as many do\n}\n(reallyLongArgName) => { return !reallyLongArgName; };\nvar [reallyLongFirstElementName] = arr;\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 10 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcIm1heFwiOiAxMCB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIHZhck5hbWUgPSA1O1xuZnVuY3Rpb24gZnVuY05hbWUoKSB7IHJldHVybiA0MjsgfVxub2JqLnByb3BOYW1lID0gZG9jdW1lbnQuYm9keTtcbnZhciBmb28gPSBmdW5jdGlvbiAoYXJnKSB7IC8qIGRvIHN0dWZmICovIH07XG50cnkge1xuICAgIGRhbmdlcm91c1N0dWZmKCk7XG59IGNhdGNoIChlcnJvcikge1xuICAgIC8vIGlnbm9yZSBhcyBtYW55IGRvXG59XG4oYXJnKSA9PiB7IHJldHVybiAhYXJnOyB9O1xudmFyIFtmaXJzdF0gPSBhcnI7In0=)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"max\": 10 }]*/\n/*eslint-env es6*/\n\nvar varName = 5;\nfunction funcName() { return 42; }\nobj.propName = document.body;\nvar foo = function (arg) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\n(arg) => { return !arg; };\nvar [first] = arr;\n```\n\n### properties\n\nExamples of **correct** code for this rule with the `{ \"properties\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcInByb3BlcnRpZXNcIjogXCJuZXZlclwiIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgbXlPYmogPSB7IGE6IDEgfTtcbih7IGE6IG9iai54LnkueiB9ID0ge30pO1xuKHsgcHJvcDogb2JqLmkgfSA9IHt9KTsifQ==)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"properties\": \"never\" }]*/\n/*eslint-env es6*/\n\nvar myObj = { a: 1 };\n({ a: obj.x.y.z } = {});\n({ prop: obj.i } = {});\n```\n\n### exceptions\n\nExamples of additional **correct** code for this rule with the `{ \"exceptions\": [\"x\", \"y\", \"z\", \"ζ\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wieFwiLCBcInlcIiwgXCJ6XCIsIFwizrZcIl0gfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciB4ID0gNTtcbmZ1bmN0aW9uIHkoKSB7IHJldHVybiA0MjsgfVxub2JqLnggPSBkb2N1bWVudC5ib2R5O1xudmFyIGZvbyA9IGZ1bmN0aW9uICh4KSB7IC8qIGRvIHN0dWZmICovIH07XG50cnkge1xuICAgIGRhbmdlcm91c1N0dWZmKCk7XG59IGNhdGNoICh4KSB7XG4gICAgLy8gaWdub3JlIGFzIG1hbnkgZG9cbn1cbih4KSA9PiB7IHJldHVybiB4ICogeDsgfTtcbnZhciBbeF0gPSBhcnI7XG5jb25zdCB7IHogfSA9IGZvbztcbmNvbnN0IHsgYTogzrYgfSA9IGZvbzsifQ==)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"exceptions\": [\"x\", \"y\", \"z\", \"ζ\"] }]*/\n/*eslint-env es6*/\n\nvar x = 5;\nfunction y() { return 42; }\nobj.x = document.body;\nvar foo = function (x) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (x) {\n    // ignore as many do\n}\n(x) => { return x * x; };\nvar [x] = arr;\nconst { z } = foo;\nconst { a: ζ } = foo;\n```\n\n### exceptionPatterns\n\nExamples of additional **correct** code for this rule with the `{ \"exceptionPatterns\": [\"E|S\", \"[x-z]\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLWxlbmd0aDogW1wiZXJyb3JcIiwgeyBcImV4Y2VwdGlvblBhdHRlcm5zXCI6IFtcIkV8U1wiLCBcIlt4LXpdXCJdIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgRSA9IDU7XG5mdW5jdGlvbiBTKCkgeyByZXR1cm4gNDI7IH1cbm9iai54ID0gZG9jdW1lbnQuYm9keTtcbnZhciBmb28gPSBmdW5jdGlvbiAoeCkgeyAvKiBkbyBzdHVmZiAqLyB9O1xudHJ5IHtcbiAgICBkYW5nZXJvdXNTdHVmZigpO1xufSBjYXRjaCAoeCkge1xuICAgIC8vIGlnbm9yZSBhcyBtYW55IGRvXG59XG4oeSkgPT4ge3JldHVybiAgeSAqIHl9O1xudmFyIFtFXSA9IGFycjtcbmNvbnN0IHsgeSB9ID0gZm9vO1xuY29uc3QgeyBhOiB6IH0gPSBmb287In0=)\n\n``` language-js\n/*eslint id-length: [\"error\", { \"exceptionPatterns\": [\"E|S\", \"[x-z]\"] }]*/\n/*eslint-env es6*/\n\nvar E = 5;\nfunction S() { return 42; }\nobj.x = document.body;\nvar foo = function (x) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (x) {\n    // ignore as many do\n}\n(y) => {return  y * y};\nvar [E] = arr;\nconst { y } = foo;\nconst { a: z } = foo;\n```\n\n## Related Rules\n\n- [max-len](max-len)\n- [new-cap](new-cap)\n- [func-names](func-names)\n- [camelcase](camelcase)\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/id-length.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/id-length.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/id-length](https://eslint.org/docs/latest/rules/id-length)"
- name: id-match
  id: rules/id-match
  summary: Naming things consistently in a project is an often underestimated aspect of code creation
  description: "# id-match\n\nRequire identifiers to match a specified regular expression\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [properties](#properties)\n    2.  [classFields](#classfields)\n    3.  [onlyDeclarations](#onlydeclarations)\n    4.  [ignoreDestructuring: false](#ignoredestructuring-false)\n    5.  [ignoreDestructuring: true](#ignoredestructuring-true)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\n> “There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton\n\nNaming things consistently in a project is an often underestimated aspect of code creation. When done correctly, it can save your team hours of unnecessary head scratching and misdirections. This rule allows you to precisely define and enforce the variables and function names on your team should use. No more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!\n\n## Rule Details\n\nThis rule requires identifiers in assignments and `function` definitions to match a specified regular expression.\n\n## Options\n\nThis rule has a string option for the specified regular expression.\n\nFor example, to enforce a camelcase naming convention:\n\n``` language-json\n{\n    \"id-match\": [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbXCJlcnJvclwiLCBcIl5bYS16XSsoW0EtWl1bYS16XSspKiRcIl0qL1xuXG52YXIgbXlfZmF2b3JpdGVfY29sb3IgPSBcIiMxMTJDODVcIjtcbnZhciBfbXlGYXZvcml0ZUNvbG9yICA9IFwiIzExMkM4NVwiO1xudmFyIG15RmF2b3JpdGVDb2xvcl8gID0gXCIjMTEyQzg1XCI7XG52YXIgTVlfRkFWT1JJVEVfQ09MT1IgPSBcIiMxMTJDODVcIjtcbmZ1bmN0aW9uIGRvX3NvbWV0aGluZygpIHtcbiAgICAvLyAuLi5cbn1cblxuY2xhc3MgTXlfQ2xhc3Mge31cblxuY2xhc3MgbXlDbGFzcyB7XG4gICAgZG9fc29tZXRoaW5nKCkge31cbn1cblxuY2xhc3MgYW5vdGhlckNsYXNzIHtcbiAgICAjZG9fc29tZXRoaW5nKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nvar my_favorite_color = \"#112C85\";\nvar _myFavoriteColor  = \"#112C85\";\nvar myFavoriteColor_  = \"#112C85\";\nvar MY_FAVORITE_COLOR = \"#112C85\";\nfunction do_something() {\n    // ...\n}\n\nclass My_Class {}\n\nclass myClass {\n    do_something() {}\n}\n\nclass anotherClass {\n    #do_something() {}\n}\n```\n\nExamples of **correct** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbXCJlcnJvclwiLCBcIl5bYS16XSsoW0EtWl1bYS16XSspKiRcIl0qL1xuXG52YXIgbXlGYXZvcml0ZUNvbG9yICAgPSBcIiMxMTJDODVcIjtcbnZhciBmb28gPSBiYXIuYmF6X2Jvb207XG52YXIgZm9vID0geyBxdXg6IGJhci5iYXpfYm9vbSB9O1xuZG9fc29tZXRoaW5nKCk7XG52YXIgb2JqID0ge1xuICAgIG15X3ByZWY6IDFcbn07XG5cbmNsYXNzIG15Q2xhc3Mge31cblxuY2xhc3MgYW5vdGhlckNsYXNzIHtcbiAgICBkb1NvbWV0aGluZygpIHt9XG59XG5cbmNsYXNzIG9uZU1vcmVDbGFzcyB7XG4gICAgI2RvU29tZXRoaW5nKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nvar myFavoriteColor   = \"#112C85\";\nvar foo = bar.baz_boom;\nvar foo = { qux: bar.baz_boom };\ndo_something();\nvar obj = {\n    my_pref: 1\n};\n\nclass myClass {}\n\nclass anotherClass {\n    doSomething() {}\n}\n\nclass oneMoreClass {\n    #doSomething() {}\n}\n```\n\nThis rule has an object option:\n\n- `\"properties\": false` (default) does not check object properties\n- `\"properties\": true` requires object literal properties and member expression assignment properties to match the specified regular expression\n- `\"classFields\": false` (default) does not check class field names\n- `\"classFields\": true` requires class field names to match the specified regular expression\n- `\"onlyDeclarations\": false` (default) requires all variable names to match the specified regular expression\n- `\"onlyDeclarations\": true` requires only `var`, `const`, `let`, `function`, and `class` declarations to match the specified regular expression\n- `\"ignoreDestructuring\": false` (default) enforces `id-match` for destructured identifiers\n- `\"ignoreDestructuring\": true` does not check destructured identifiers\n\n### properties\n\nExamples of **incorrect** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\", { \"properties\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbXCJlcnJvclwiLCBcIl5bYS16XSsoW0EtWl1bYS16XSspKiRcIiwgeyBcInByb3BlcnRpZXNcIjogdHJ1ZSB9XSovXG5cbnZhciBvYmogPSB7XG4gICAgbXlfcHJlZjogMVxufTtcblxub2JqLmRvX3NvbWV0aGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufTsifQ==)\n\n``` language-js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\", { \"properties\": true }]*/\n\nvar obj = {\n    my_pref: 1\n};\n\nobj.do_something = function() {\n    // ...\n};\n```\n\n### classFields\n\nExamples of **incorrect** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\", { \"classFields\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbXCJlcnJvclwiLCBcIl5bYS16XSsoW0EtWl1bYS16XSspKiRcIiwgeyBcImNsYXNzRmllbGRzXCI6IHRydWUgfV0qL1xuXG5jbGFzcyBteUNsYXNzIHtcbiAgICBteV9wcmVmID0gMTtcbn1cblxuY2xhc3MgYW5vdGhlckNsYXNzIHtcbiAgICAjbXlfcHJlZiA9IDE7XG59In0=)\n\n``` language-js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\", { \"classFields\": true }]*/\n\nclass myClass {\n    my_pref = 1;\n}\n\nclass anotherClass {\n    #my_pref = 1;\n}\n```\n\n### onlyDeclarations\n\nExamples of **correct** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\", { \"onlyDeclarations\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbMiwgXCJeW2Etel0rKFtBLVpdW2Etel0rKSokXCIsIHsgXCJvbmx5RGVjbGFyYXRpb25zXCI6IHRydWUgfV0qL1xuXG5mb28gPSBfX2Rpcm5hbWU7In0=)\n\n``` language-js\n/*eslint id-match: [2, \"^[a-z]+([A-Z][a-z]+)*$\", { \"onlyDeclarations\": true }]*/\n\nfoo = __dirname;\n```\n\n### ignoreDestructuring: false\n\nExamples of **incorrect** code for this rule with the default `\"^[^_]+$\", { \"ignoreDestructuring\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbMiwgXCJeW15fXSskXCIsIHsgXCJpZ25vcmVEZXN0cnVjdHVyaW5nXCI6IGZhbHNlIH1dKi9cblxudmFyIHsgY2F0ZWdvcnlfaWQgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9pZCA9IDEgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9pZDogY2F0ZWdvcnlfaWQgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9pZDogY2F0ZWdvcnlfYWxpYXMgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9pZDogY2F0ZWdvcnlJZCwgLi4ub3RoZXJfcHJvcHMgfSA9IHF1ZXJ5OyJ9)\n\n``` language-js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": false }]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n\nvar { category_id: category_alias } = query;\n\nvar { category_id: categoryId, ...other_props } = query;\n```\n\n### ignoreDestructuring: true\n\nExamples of **incorrect** code for this rule with the `\"^[^_]+$\", { \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbMiwgXCJeW15fXSskXCIsIHsgXCJpZ25vcmVEZXN0cnVjdHVyaW5nXCI6IHRydWUgfV0qL1xuXG52YXIgeyBjYXRlZ29yeV9pZDogY2F0ZWdvcnlfYWxpYXMgfSA9IHF1ZXJ5O1xuXG52YXIgeyBjYXRlZ29yeV9pZCwgLi4ub3RoZXJfcHJvcHMgfSA9IHF1ZXJ5OyJ9)\n\n``` language-js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nvar { category_id: category_alias } = query;\n\nvar { category_id, ...other_props } = query;\n```\n\nExamples of **correct** code for this rule with the `\"^[^_]+$\", { \"ignoreDestructuring\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGlkLW1hdGNoOiBbMiwgXCJeW15fXSskXCIsIHsgXCJpZ25vcmVEZXN0cnVjdHVyaW5nXCI6IHRydWUgfV0qL1xuXG52YXIgeyBjYXRlZ29yeV9pZCB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkID0gMSB9ID0gcXVlcnk7XG5cbnZhciB7IGNhdGVnb3J5X2lkOiBjYXRlZ29yeV9pZCB9ID0gcXVlcnk7In0=)\n\n``` language-js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce any particular naming convention for all identifiers, or your naming convention is too complex to be enforced by configuring this rule, then you should not enable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/id-match.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/id-match.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/id-match](https://eslint.org/docs/latest/rules/id-match)"
- name: Ignore Files
  id: use/configure/ignore
  summary: You can configure ESLint to ignore certain files and directories while linting by specifying one or more glob patterns
  description: "# Ignore Files\n\n## Table of Contents\n\n1.  [ignorePatterns in Config Files](#ignorepatterns-in-config-files)\n2.  [The .eslintignore File](#the-eslintignore-file)\n3.  [Using an Alternate File](#using-an-alternate-file)\n4.  [Using eslintIgnore in package.json](#using-eslintignore-in-packagejson)\n5.  [Ignored File Warnings](#ignored-file-warnings)\n\nYou can configure ESLint to ignore certain files and directories while linting by specifying one or more glob patterns. You can ignore files in the following ways:\n\n- Add `ignorePatterns` to a configuration file.\n- Create a dedicated file that contains the ignore patterns (`.eslintignore` by default).\n\n## `ignorePatterns` in Config Files\n\nYou can tell ESLint to ignore specific files and directories using `ignorePatterns` in your config files. `ignorePatterns` patterns follow the same rules as `.eslintignore`. Please see the [`.eslintignore` file documentation](#the-eslintignore-file) to learn more.\n\n``` language-json\n{\n    \"ignorePatterns\": [\"temp.js\", \"**/vendor/*.js\"],\n    \"rules\": {\n        //...\n    }\n}\n```\n\n- Glob patterns in `ignorePatterns` are relative to the directory that the config file is placed in.\n- You cannot write `ignorePatterns` property under `overrides` property.\n- Patterns defined in `.eslintignore` take precedence over the `ignorePatterns` property of config files.\n\nIf a glob pattern starts with `/`, the pattern is relative to the base directory of the config file. For example, `/foo.js` in `lib/.eslintrc.json` matches to `lib/foo.js` but not `lib/subdir/foo.js`.\n\nIf a config is provided via the `--config` CLI option, the ignore patterns that start with `/` in the config are relative to the current working directory rather than the base directory of the given config. For example, if `--config configs/.eslintrc.json` is present, the ignore patterns in the config are relative to `.` rather than `./configs`.\n\n## The `.eslintignore` File\n\nYou can tell ESLint to ignore specific files and directories by creating an `.eslintignore` file in your project’s root directory. The `.eslintignore` file is a plain text file where each line is a glob pattern indicating which paths should be omitted from linting. For example, the following omits all JavaScript files:\n\n``` language-text\n**/*.js\n```\n\nWhen ESLint is run, it looks in the current working directory to find an `.eslintignore` file before determining which files to lint. If this file is found, then those preferences are applied when traversing directories. Only one `.eslintignore` file can be used at a time, so `.eslintignore` files other than the one in the current working directory are not used.\n\nGlobs are matched using [node-ignore](https://github.com/kaelzhang/node-ignore), so a number of features are available:\n\n- Lines beginning with `#` are treated as comments and do not affect the ignore patterns.\n- Paths are relative to the current working directory. This is also true of paths passed in via the `--ignore-pattern` [command](ignore../command-line-interface#--ignore-pattern).\n- Lines preceded by `!` are negated patterns that re-include a pattern that was ignored by an earlier pattern.\n- Ignore patterns behave according to the `.gitignore` [specification](https://git-scm.com/docs/gitignore).\n\nOf particular note is that like `.gitignore` files, all paths used as patterns for both `.eslintignore` and `--ignore-pattern` must use forward slashes as their path separators.\n\n``` language-text\n# Valid\n/root/src/*.js\n\n# Invalid\n\\root\\src\\*.js\n```\n\nPlease see [`.gitignore`](https://git-scm.com/docs/gitignore)’s specification for further examples of valid syntax.\n\nIn addition to any patterns in the `.eslintignore` file, ESLint always follows a couple of implicit ignore rules even if the `--no-ignore` flag is passed. The implicit rules are as follows:\n\n- `node_modules/` is ignored.\n- dot-files (except for `.eslintrc.*`) as well as dot-folders and their contents are ignored.\n\nThere are also some exceptions to these rules:\n\n- If the path to lint is a glob pattern or directory path and contains a dot-folder, all dot-files and dot-folders are linted. This includes dot-files and dot-folders that are buried deeper in the directory structure.\n\n  For example, `eslint .config/` would lint all dot-folders and dot-files in the `.config` directory, including immediate children as well as children that are deeper in the directory structure.\n\n- If the path to lint is a specific file path and the `--no-ignore` flag has been passed, ESLint would lint the file regardless of the implicit ignore rules.\n\n  For example, `eslint .config/my-config-file.js --no-ignore` would cause `my-config-file.js` to be linted. It should be noted that the same command without the `--no-ignore` line would not lint the `my-config-file.js` file.\n\n- Allowlist and denylist rules specified via `--ignore-pattern` or `.eslintignore` are prioritized above implicit ignore rules.\n\n  For example, in this scenario, `.build/test.js` is the desired file to allowlist. Because all dot-folders and their children are ignored by default, `.build` must first be allowlisted so that eslint becomes aware of its children. Then, `.build/test.js` must be explicitly allowlisted, while the rest of the content is denylisted. This is done with the following `.eslintignore` file:\n\n  ``` language-text\n  # Allowlist 'test.js' in the '.build' folder\n  # But do not allow anything else in the '.build' folder to be linted\n  !.build\n  .build/*\n  !.build/test.js\n  ```\n\n  The following `--ignore-pattern` is also equivalent:\n\n  ``` language-shell\n  eslint --ignore-pattern '!.build' --ignore-pattern '.build/*' --ignore-pattern '!.build/test.js' parent-folder/\n  ```\n\n## Using an Alternate File\n\nIf you’d prefer to use a different file than the `.eslintignore` in the current working directory, you can specify it on the command line using the `--ignore-path` option. For example, you can use `.jshintignore` file because it has the same format:\n\n``` language-shell\neslint --ignore-path .jshintignore file.js\n```\n\nYou can also use your `.gitignore` file:\n\n``` language-shell\neslint --ignore-path .gitignore file.js\n```\n\nAny file that follows the standard ignore file format can be used. Keep in mind that specifying `--ignore-path` means that the existing `.eslintignore` file is not used. Note that globbing rules in `.eslintignore` follow those of `.gitignore`.\n\n## Using eslintIgnore in package.json\n\nIf an `.eslintignore` file is not found and an alternate file is not specified, ESLint looks in `package.json` for the `eslintIgnore` key to check for files to ignore.\n\n``` language-json\n{\n    \"name\": \"mypackage\",\n    \"version\": \"0.0.1\",\n    \"eslintConfig\": {\n        \"env\": {\n            \"browser\": true,\n            \"node\": true\n        }\n    },\n    \"eslintIgnore\": [\"hello.js\", \"world.js\"]\n}\n```\n\n## Ignored File Warnings\n\nWhen you pass directories to ESLint, files and directories are silently ignored. If you pass a specific file to ESLint, then ESLint creates a warning that the file was skipped. For example, suppose you have an `.eslintignore` file that looks like this:\n\n``` language-text\nfoo.js\n```\n\nAnd then you run:\n\n``` language-shell\neslint foo.js\n```\n\nYou’ll see this warning:\n\n``` language-text\nfoo.js\n  0:0  warning  File ignored because of a matching ignore pattern. Use \"--no-ignore\" to disable file ignore settings or use \"--no-warn-ignored\" to suppress this warning.\n\n✖ 1 problem (0 errors, 1 warning)\n```\n\nThis message occurs because ESLint is unsure if you wanted to actually lint the file or not. As the message indicates, you can use `--no-ignore` to omit using the ignore rules.\n\nConsider another scenario where you want to run ESLint on a specific dot-file or dot-folder, but have forgotten to specifically allow those files in your `.eslintignore` file. You would run something like this:\n\n``` language-shell\neslint .config/foo.js\n```\n\nYou would see this warning:\n\n``` language-text\n.config/foo.js\n  0:0  warning  File ignored by default.  Use a negated ignore pattern (like \"--ignore-pattern '!<relative/path/to/filename>'\") to override\n\n✖ 1 problem (0 errors, 1 warning)\n```\n\nThis message occurs because, normally, this file would be ignored by ESLint’s implicit ignore rules (as mentioned above). A negated ignore rule in your `.eslintignore` file would override the implicit rule and reinclude this file for linting. Additionally, in this case, `--no-ignore` could be used to lint the file as well.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/configure/ignore](https://eslint.org/docs/latest/use/configure/ignore)"
- name: indent
  id: rules/indent
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# indent\n\nEnforce consistent indentation\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](indent../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [tab](#tab)\n    2.  [ignoredNodes](#ignorednodes)\n    3.  [SwitchCase](#switchcase)\n    4.  [VariableDeclarator](#variabledeclarator)\n    5.  [outerIIFEBody](#outeriifebody)\n    6.  [MemberExpression](#memberexpression)\n    7.  [FunctionDeclaration](#functiondeclaration)\n    8.  [FunctionExpression](#functionexpression)\n    9.  [StaticBlock](#staticblock)\n    10. [CallExpression](#callexpression)\n    11. [ArrayExpression](#arrayexpression)\n    12. [ObjectExpression](#objectexpression)\n    13. [ImportDeclaration](#importdeclaration)\n    14. [flatTernaryExpressions](#flatternaryexpressions)\n    15. [offsetTernaryExpressions](#offsetternaryexpressions)\n    16. [ignoreComments](#ignorecomments)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/indent) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nThere are several common guidelines which require specific indentation of nested blocks and statements, like:\n\n``` language-js\nfunction hello(indentSize, type) {\n    if (indentSize === 4 && type !== 'tab') {\n        console.log('Each next indentation will increase on 4 spaces');\n    }\n}\n```\n\nThese are the most common scenarios recommended in different style guides:\n\n- Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix\n- Tabs: jQuery\n- Four spaces: Crockford\n\n## Rule Details\n\nThis rule enforces a consistent indentation style. The default style is `4 spaces`.\n\n## Options\n\nThis rule has a mixed option:\n\nFor example, for 2-space indentation:\n\n``` language-json\n{\n    \"indent\": [\"error\", 2]\n}\n```\n\nOr for tabbed indentation:\n\n``` language-json\n{\n    \"indent\": [\"error\", \"tab\"]\n}\n```\n\nExamples of **incorrect** code for this rule with the default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogXCJlcnJvclwiKi9cblxuaWYgKGEpIHtcbiAgYj1jO1xuICBmdW5jdGlvbiBmb28oZCkge1xuICAgIGU9ZjtcbiAgfVxufSJ9)\n\n``` language-js\n/*eslint indent: \"error\"*/\n\nif (a) {\n  b=c;\n  function foo(d) {\n    e=f;\n  }\n}\n```\n\nExamples of **correct** code for this rule with the default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogXCJlcnJvclwiKi9cblxuaWYgKGEpIHtcbiAgICBiPWM7XG4gICAgZnVuY3Rpb24gZm9vKGQpIHtcbiAgICAgICAgZT1mO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint indent: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\nThis rule has an object option:\n\n- `\"ignoredNodes\"` can be used to disable indentation checking for any AST node. This accepts an array of [selectors](indent../extend/selectors). If an AST node is matched by any of the selectors, the indentation of tokens which are direct children of that node will be ignored. This can be used as an escape hatch to relax the rule if you disagree with the indentation that it enforces for a particular syntactic pattern.\n- `\"SwitchCase\"` (default: 0) enforces indentation level for `case` clauses in `switch` statements\n- `\"VariableDeclarator\"` (default: 1) enforces indentation level for `var` declarators; can also take an object to define separate rules for `var`, `let` and `const` declarations. It can also be `\"first\"`, indicating all the declarators should be aligned with the first declarator.\n- `\"outerIIFEBody\"` (default: 1) enforces indentation level for file-level IIFEs. This can also be set to `\"off\"` to disable checking for file-level IIFEs.\n- `\"MemberExpression\"` (default: 1) enforces indentation level for multi-line property chains. This can also be set to `\"off\"` to disable checking for MemberExpression indentation.\n- `\"FunctionDeclaration\"` takes an object to define rules for function declarations.\n  - `parameters` (default: 1) enforces indentation level for parameters in a function declaration. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the declaration must be aligned with the first parameter. This can also be set to `\"off\"` to disable checking for FunctionDeclaration parameters.\n  - `body` (default: 1) enforces indentation level for the body of a function declaration.\n- `\"FunctionExpression\"` takes an object to define rules for function expressions.\n  - `parameters` (default: 1) enforces indentation level for parameters in a function expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the expression must be aligned with the first parameter. This can also be set to `\"off\"` to disable checking for FunctionExpression parameters.\n  - `body` (default: 1) enforces indentation level for the body of a function expression.\n- `\"StaticBlock\"` takes an object to define rules for class static blocks.\n  - `body` (default: 1) enforces indentation level for the body of a class static block.\n- `\"CallExpression\"` takes an object to define rules for function call expressions.\n  - `arguments` (default: 1) enforces indentation level for arguments in a call expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all arguments of the expression must be aligned with the first argument. This can also be set to `\"off\"` to disable checking for CallExpression arguments.\n- `\"ArrayExpression\"` (default: 1) enforces indentation level for elements in arrays. It can also be set to the string `\"first\"`, indicating that all the elements in the array should be aligned with the first element. This can also be set to `\"off\"` to disable checking for array elements.\n- `\"ObjectExpression\"` (default: 1) enforces indentation level for properties in objects. It can be set to the string `\"first\"`, indicating that all properties in the object should be aligned with the first property. This can also be set to `\"off\"` to disable checking for object properties.\n- `\"ImportDeclaration\"` (default: 1) enforces indentation level for import statements. It can be set to the string `\"first\"`, indicating that all imported members from a module should be aligned with the first member in the list. This can also be set to `\"off\"` to disable checking for imported module members.\n- `\"flatTernaryExpressions\": true` (`false` by default) requires no indentation for ternary expressions which are nested in other ternary expressions.\n- `\"offsetTernaryExpressions\": true` (`false` by default) requires indentation for values of ternary expressions.\n- `\"ignoreComments\"` (default: false) can be used when comments do not need to be aligned with nodes on the previous or next line.\n\nLevel of indentation denotes the multiple of the indent specified. Example:\n\n- Indent of 4 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 8 spaces.\n- Indent of 2 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 4 spaces.\n- Indent of 2 spaces with `VariableDeclarator` set to `{\"var\": 2, \"let\": 2, \"const\": 3}` will indent the multi-line variable declarations with 4 spaces for `var` and `let`, 6 spaces for `const` statements.\n- Indent of tab with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 2 tabs.\n- Indent of 2 spaces with `SwitchCase` set to `0` will not indent `case` clauses with respect to `switch` statements.\n- Indent of 2 spaces with `SwitchCase` set to `1` will indent `case` clauses with 2 spaces with respect to `switch` statements.\n- Indent of 2 spaces with `SwitchCase` set to `2` will indent `case` clauses with 4 spaces with respect to `switch` statements.\n- Indent of tab with `SwitchCase` set to `2` will indent `case` clauses with 2 tabs with respect to `switch` statements.\n- Indent of 2 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n- Indent of 2 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 2 spaces.\n- Indent of 2 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 4 spaces.\n- Indent of 4 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n- Indent of 4 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 4 spaces.\n- Indent of 4 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 8 spaces.\n\n### tab\n\nExamples of **incorrect** code for this rule with the `\"tab\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgXCJ0YWJcIl0qL1xuXG5pZiAoYSkge1xuICAgICBiPWM7XG5mdW5jdGlvbiBmb28oZCkge1xuICAgICAgICAgICBlPWY7XG4gfVxufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n     b=c;\nfunction foo(d) {\n           e=f;\n }\n}\n```\n\nExamples of **correct** code for this rule with the `\"tab\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgXCJ0YWJcIl0qL1xuXG5pZiAoYSkge1xuXHRiPWM7XG5cdGZ1bmN0aW9uIGZvbyhkKSB7XG5cdFx0ZT1mO1xuXHR9XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\n### ignoredNodes\n\nThe following configuration ignores the indentation of `ConditionalExpression` (“ternary expression”) nodes:\n\nExamples of **correct** code for this rule with the `4, { \"ignoredNodes\": [\"ConditionalExpression\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImlnbm9yZWROb2Rlc1wiOiBbXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIl0gfV0qL1xuXG52YXIgYSA9IGZvb1xuICAgICAgPyBiYXJcbiAgICAgIDogYmF6O1xuXG52YXIgYSA9IGZvb1xuICAgICAgICAgICAgICAgID8gYmFyXG46IGJhejsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"ConditionalExpression\"] }]*/\n\nvar a = foo\n      ? bar\n      : baz;\n\nvar a = foo\n                ? bar\n: baz;\n```\n\nThe following configuration ignores indentation in the body of IIFEs.\n\nExamples of **correct** code for this rule with the `4, { \"ignoredNodes\": [\"CallExpression > FunctionExpression.callee > BlockStatement.body\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImlnbm9yZWROb2Rlc1wiOiBbXCJDYWxsRXhwcmVzc2lvbiA+IEZ1bmN0aW9uRXhwcmVzc2lvbi5jYWxsZWUgPiBCbG9ja1N0YXRlbWVudC5ib2R5XCJdIH1dKi9cblxuKGZ1bmN0aW9uKCkge1xuXG5mb28oKTtcbmJhcigpO1xuXG59KSgpOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"CallExpression > FunctionExpression.callee > BlockStatement.body\"] }]*/\n\n(function() {\n\nfoo();\nbar();\n\n})();\n```\n\nAll AST node types can be found at [ESTree](https://github.com/estree/estree) specification. You can use [AST Explorer](https://astexplorer.net/) with the espree parser to examine AST tree of a code snippet.\n\n### SwitchCase\n\nExamples of **incorrect** code for this rule with the `2, { \"SwitchCase\": 1 }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN3aXRjaENhc2VcIjogMSB9XSovXG5cbnN3aXRjaChhKXtcbmNhc2UgXCJhXCI6XG4gICAgYnJlYWs7XG5jYXNlIFwiYlwiOlxuICAgIGJyZWFrO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\ncase \"a\":\n    break;\ncase \"b\":\n    break;\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"SwitchCase\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN3aXRjaENhc2VcIjogMSB9XSovXG5cbnN3aXRjaChhKXtcbiAgY2FzZSBcImFcIjpcbiAgICBicmVhaztcbiAgY2FzZSBcImJcIjpcbiAgICBicmVhaztcbn0ifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\n  case \"a\":\n    break;\n  case \"b\":\n    break;\n}\n```\n\n### VariableDeclarator\n\nExamples of **incorrect** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiAxIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSxcbiAgICBiLFxuICAgIGM7XG5sZXQgZCxcbiAgICBlLFxuICAgIGY7XG5jb25zdCBnID0gMSxcbiAgICBoID0gMixcbiAgICBpID0gMzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet d,\n    e,\n    f;\nconst g = 1,\n    h = 2,\n    i = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiAxIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSxcbiAgYixcbiAgYztcbmxldCBkLFxuICBlLFxuICBmO1xuY29uc3QgZyA9IDEsXG4gIGggPSAyLFxuICBpID0gMzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n  b,\n  c;\nlet d,\n  e,\n  f;\nconst g = 1,\n  h = 2,\n  i = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 2 }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiAyIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSxcbiAgICBiLFxuICAgIGM7XG5sZXQgZCxcbiAgICBlLFxuICAgIGY7XG5jb25zdCBnID0gMSxcbiAgICBoID0gMixcbiAgICBpID0gMzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 2 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet d,\n    e,\n    f;\nconst g = 1,\n    h = 2,\n    i = 3;\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"VariableDeclarator\": \"first\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiBcImZpcnN0XCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBhLFxuICBiLFxuICBjO1xubGV0IGQsXG4gIGUsXG4gIGY7XG5jb25zdCBnID0gMSxcbiAgaCA9IDIsXG4gIGkgPSAzOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": \"first\" }]*/\n/*eslint-env es6*/\n\nvar a,\n  b,\n  c;\nlet d,\n  e,\n  f;\nconst g = 1,\n  h = 2,\n  i = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": \"first\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiBcImZpcnN0XCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBhLFxuICAgIGIsXG4gICAgYztcbmxldCBkLFxuICAgIGUsXG4gICAgZjtcbmNvbnN0IGcgPSAxLFxuICAgICAgaCA9IDIsXG4gICAgICBpID0gMzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": \"first\" }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet d,\n    e,\n    f;\nconst g = 1,\n      h = 2,\n      i = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiB7IFwidmFyXCI6IDIsIFwibGV0XCI6IDIsIFwiY29uc3RcIjogMyB9IH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSxcbiAgICBiLFxuICAgIGM7XG5sZXQgZCxcbiAgICBlLFxuICAgIGY7XG5jb25zdCBnID0gMSxcbiAgICAgIGggPSAyLFxuICAgICAgaSA9IDM7In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet d,\n    e,\n    f;\nconst g = 1,\n      h = 2,\n      i = 3;\n```\n\n### outerIIFEBody\n\nExamples of **incorrect** code for this rule with the options `2, { \"outerIIFEBody\": 0 }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm91dGVySUlGRUJvZHlcIjogMCB9XSovXG5cbihmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBmb28oeCkge1xuICAgIHJldHVybiB4ICsgMTtcbiAgfVxuXG59KSgpO1xuXG5pZiAoeSkge1xuY29uc29sZS5sb2coJ2ZvbycpO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\n  function foo(x) {\n    return x + 1;\n  }\n\n})();\n\nif (y) {\nconsole.log('foo');\n}\n```\n\nExamples of **correct** code for this rule with the options `2, { \"outerIIFEBody\": 0 }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm91dGVySUlGRUJvZHlcIjogMCB9XSovXG5cbihmdW5jdGlvbigpIHtcblxuZnVuY3Rpb24gZm9vKHgpIHtcbiAgcmV0dXJuIHggKyAxO1xufVxuXG59KSgpO1xuXG5pZiAoeSkge1xuICBjb25zb2xlLmxvZygnZm9vJyk7XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\nif (y) {\n  console.log('foo');\n}\n```\n\nExamples of **correct** code for this rule with the options `2, { \"outerIIFEBody\": \"off\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm91dGVySUlGRUJvZHlcIjogXCJvZmZcIiB9XSovXG5cbihmdW5jdGlvbigpIHtcblxuZnVuY3Rpb24gZm9vKHgpIHtcbiAgcmV0dXJuIHggKyAxO1xufVxuXG59KSgpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgZnVuY3Rpb24gZm9vKHgpIHtcbiAgICByZXR1cm4geCArIDE7XG4gIH1cblxufSkoKTtcblxuaWYgKHkpIHtcbiAgY29uc29sZS5sb2coJ2ZvbycpO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": \"off\" }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\n(function() {\n\n  function foo(x) {\n    return x + 1;\n  }\n\n})();\n\nif (y) {\n  console.log('foo');\n}\n```\n\n### MemberExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"MemberExpression\": 1 }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIk1lbWJlckV4cHJlc3Npb25cIjogMSB9XSovXG5cbmZvb1xuLmJhclxuLmJheigpIn0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n.bar\n.baz()\n```\n\nExamples of **correct** code for this rule with the `2, { \"MemberExpression\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIk1lbWJlckV4cHJlc3Npb25cIjogMSB9XSovXG5cbmZvb1xuICAuYmFyXG4gIC5iYXooKTsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n  .bar\n  .baz();\n```\n\n### FunctionDeclaration\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjoge1wiYm9keVwiOiAxLCBcInBhcmFtZXRlcnNcIjogMn0gfV0qL1xuXG5mdW5jdGlvbiBmb28oYmFyLFxuICBiYXosXG4gIHF1eCkge1xuICAgIHF1eCgpO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjoge1wiYm9keVwiOiAxLCBcInBhcmFtZXRlcnNcIjogMn0gfV0qL1xuXG5mdW5jdGlvbiBmb28oYmFyLFxuICAgIGJheixcbiAgICBxdXgpIHtcbiAgcXV4KCk7XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiRnVuY3Rpb25EZWNsYXJhdGlvblwiOiB7XCJwYXJhbWV0ZXJzXCI6IFwiZmlyc3RcIn19XSovXG5cbmZ1bmN0aW9uIGZvbyhiYXIsIGJheixcbiAgcXV4LCBib29wKSB7XG4gIHF1eCgpO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiRnVuY3Rpb25EZWNsYXJhdGlvblwiOiB7XCJwYXJhbWV0ZXJzXCI6IFwiZmlyc3RcIn19XSovXG5cbmZ1bmN0aW9uIGZvbyhiYXIsIGJheixcbiAgICAgICAgICAgICBxdXgsIGJvb3ApIHtcbiAgcXV4KCk7XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n             qux, boop) {\n  qux();\n}\n```\n\n### FunctionExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiOiB7XCJib2R5XCI6IDEsIFwicGFyYW1ldGVyc1wiOiAyfSB9XSovXG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIsXG4gIGJheixcbiAgcXV4KSB7XG4gICAgcXV4KCk7XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiOiB7XCJib2R5XCI6IDEsIFwicGFyYW1ldGVyc1wiOiAyfSB9XSovXG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIsXG4gICAgYmF6LFxuICAgIHF1eCkge1xuICBxdXgoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiRnVuY3Rpb25FeHByZXNzaW9uXCI6IHtcInBhcmFtZXRlcnNcIjogXCJmaXJzdFwifX1dKi9cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhciwgYmF6LFxuICBxdXgsIGJvb3ApIHtcbiAgcXV4KCk7XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiRnVuY3Rpb25FeHByZXNzaW9uXCI6IHtcInBhcmFtZXRlcnNcIjogXCJmaXJzdFwifX1dKi9cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhciwgYmF6LFxuICAgICAgICAgICAgICAgICAgIHF1eCwgYm9vcCkge1xuICBxdXgoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n                   qux, boop) {\n  qux();\n}\n```\n\n### StaticBlock\n\nExamples of **incorrect** code for this rule with the `2, { \"StaticBlock\": {\"body\": 1} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN0YXRpY0Jsb2NrXCI6IHtcImJvZHlcIjogMX0gfV0qL1xuXG5jbGFzcyBDIHtcbiAgc3RhdGljIHtcbiAgICAgIGZvbygpO1xuICB9XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"StaticBlock\": {\"body\": 1} }]*/\n\nclass C {\n  static {\n      foo();\n  }\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"StaticBlock\": {\"body\": 1} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN0YXRpY0Jsb2NrXCI6IHtcImJvZHlcIjogMX0gfV0qL1xuXG5jbGFzcyBDIHtcbiAgc3RhdGljIHtcbiAgICBmb28oKTtcbiAgfVxufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"StaticBlock\": {\"body\": 1} }]*/\n\nclass C {\n  static {\n    foo();\n  }\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"StaticBlock\": {\"body\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN0YXRpY0Jsb2NrXCI6IHtcImJvZHlcIjogMn0gfV0qL1xuXG5jbGFzcyBDIHtcbiAgc3RhdGljIHtcbiAgICBmb28oKTtcbiAgfVxufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"StaticBlock\": {\"body\": 2} }]*/\n\nclass C {\n  static {\n    foo();\n  }\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"StaticBlock\": {\"body\": 2} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIlN0YXRpY0Jsb2NrXCI6IHtcImJvZHlcIjogMn0gfV0qL1xuXG5jbGFzcyBDIHtcbiAgc3RhdGljIHtcbiAgICAgIGZvbygpO1xuICB9XG59In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"StaticBlock\": {\"body\": 2} }]*/\n\nclass C {\n  static {\n      foo();\n  }\n}\n```\n\n### CallExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkNhbGxFeHByZXNzaW9uXCI6IHtcImFyZ3VtZW50c1wiOiAxfSB9XSovXG5cbmZvbyhiYXIsXG4gICAgYmF6LFxuICAgICAgcXV4XG4pOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n    baz,\n      qux\n);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkNhbGxFeHByZXNzaW9uXCI6IHtcImFyZ3VtZW50c1wiOiAxfSB9XSovXG5cbmZvbyhiYXIsXG4gIGJheixcbiAgcXV4XG4pOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiQ2FsbEV4cHJlc3Npb25cIjoge1wiYXJndW1lbnRzXCI6IFwiZmlyc3RcIn19XSovXG5cbmZvbyhiYXIsIGJheixcbiAgYmF6LCBib29wLCBiZWVwKTsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n  baz, boop, beep);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiQ2FsbEV4cHJlc3Npb25cIjoge1wiYXJndW1lbnRzXCI6IFwiZmlyc3RcIn19XSovXG5cbmZvbyhiYXIsIGJheixcbiAgICBiYXosIGJvb3AsIGJlZXApOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n    baz, boop, beep);\n```\n\n### ArrayExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkFycmF5RXhwcmVzc2lvblwiOiAxIH1dKi9cblxudmFyIGZvbyA9IFtcbiAgICBiYXIsXG5iYXosXG4gICAgICBxdXhcbl07In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n    bar,\nbaz,\n      qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIkFycmF5RXhwcmVzc2lvblwiOiAxIH1dKi9cblxudmFyIGZvbyA9IFtcbiAgYmFyLFxuICBiYXosXG4gIHF1eFxuXTsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n  bar,\n  baz,\n  qux\n];\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiQXJyYXlFeHByZXNzaW9uXCI6IFwiZmlyc3RcIn1dKi9cblxudmFyIGZvbyA9IFtiYXIsXG4gIGJheixcbiAgcXV4XG5dOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n  baz,\n  qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiQXJyYXlFeHByZXNzaW9uXCI6IFwiZmlyc3RcIn1dKi9cblxudmFyIGZvbyA9IFtiYXIsXG4gICAgICAgICAgIGJheixcbiAgICAgICAgICAgcXV4XG5dOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n           baz,\n           qux\n];\n```\n\n### ObjectExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIk9iamVjdEV4cHJlc3Npb25cIjogMSB9XSovXG5cbnZhciBmb28gPSB7XG4gICAgYmFyOiAxLFxuYmF6OiAyLFxuICAgICAgcXV4OiAzXG59OyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n    bar: 1,\nbaz: 2,\n      qux: 3\n};\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIk9iamVjdEV4cHJlc3Npb25cIjogMSB9XSovXG5cbnZhciBmb28gPSB7XG4gIGJhcjogMSxcbiAgYmF6OiAyLFxuICBxdXg6IDNcbn07In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n  bar: 1,\n  baz: 2,\n  qux: 3\n};\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiT2JqZWN0RXhwcmVzc2lvblwiOiBcImZpcnN0XCJ9XSovXG5cbnZhciBmb28gPSB7IGJhcjogMSxcbiAgYmF6OiAyIH07In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n  baz: 2 };\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwge1wiT2JqZWN0RXhwcmVzc2lvblwiOiBcImZpcnN0XCJ9XSovXG5cbnZhciBmb28gPSB7IGJhcjogMSxcbiAgICAgICAgICAgIGJhejogMiB9OyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n            baz: 2 };\n```\n\n### ImportDeclaration\n\nExamples of **correct** code for this rule with the `4, { \"ImportDeclaration\": 1 }` option (the default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcIkltcG9ydERlY2xhcmF0aW9uXCI6IDEgfV0qL1xuXG5pbXBvcnQgeyBmb28sXG4gICAgYmFyLFxuICAgIGJheixcbn0gZnJvbSAncXV4JzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": 1 }]*/\n\nimport { foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcIkltcG9ydERlY2xhcmF0aW9uXCI6IDEgfV0qL1xuXG5pbXBvcnQge1xuICAgIGZvbyxcbiAgICBiYXIsXG4gICAgYmF6LFxufSBmcm9tICdxdXgnOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": 1 }]*/\n\nimport {\n    foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\nExamples of **incorrect** code for this rule with the `4, { \"ImportDeclaration\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcIkltcG9ydERlY2xhcmF0aW9uXCI6IFwiZmlyc3RcIiB9XSovXG5cbmltcG9ydCB7IGZvbyxcbiAgICBiYXIsXG4gICAgYmF6LFxufSBmcm9tICdxdXgnOyJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": \"first\" }]*/\n\nimport { foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\nExamples of **correct** code for this rule with the `4, { \"ImportDeclaration\": \"first\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcIkltcG9ydERlY2xhcmF0aW9uXCI6IFwiZmlyc3RcIiB9XSovXG5cbmltcG9ydCB7IGZvbyxcbiAgICAgICAgIGJhcixcbiAgICAgICAgIGJheixcbn0gZnJvbSAncXV4JzsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": \"first\" }]*/\n\nimport { foo,\n         bar,\n         baz,\n} from 'qux';\n```\n\n### flatTernaryExpressions\n\nExamples of **incorrect** code for this rule with the default `4, { \"flatTernaryExpressions\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImZsYXRUZXJuYXJ5RXhwcmVzc2lvbnNcIjogZmFsc2UgfV0qL1xuXG52YXIgYSA9XG4gICAgZm9vID8gYmFyIDpcbiAgICBiYXogPyBxdXggOlxuICAgIGJvb3A7In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": false }]*/\n\nvar a =\n    foo ? bar :\n    baz ? qux :\n    boop;\n```\n\nExamples of **correct** code for this rule with the default `4, { \"flatTernaryExpressions\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImZsYXRUZXJuYXJ5RXhwcmVzc2lvbnNcIjogZmFsc2UgfV0qL1xuXG52YXIgYSA9XG4gICAgZm9vID8gYmFyIDpcbiAgICAgICAgYmF6ID8gcXV4IDpcbiAgICAgICAgICAgIGJvb3A7In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": false }]*/\n\nvar a =\n    foo ? bar :\n        baz ? qux :\n            boop;\n```\n\nExamples of **incorrect** code for this rule with the `4, { \"flatTernaryExpressions\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImZsYXRUZXJuYXJ5RXhwcmVzc2lvbnNcIjogdHJ1ZSB9XSovXG5cbnZhciBhID1cbiAgICBmb28gPyBiYXIgOlxuICAgICAgICBiYXogPyBxdXggOlxuICAgICAgICAgICAgYm9vcDsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": true }]*/\n\nvar a =\n    foo ? bar :\n        baz ? qux :\n            boop;\n```\n\nExamples of **correct** code for this rule with the `4, { \"flatTernaryExpressions\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImZsYXRUZXJuYXJ5RXhwcmVzc2lvbnNcIjogdHJ1ZSB9XSovXG5cbnZhciBhID1cbiAgICBmb28gPyBiYXIgOlxuICAgIGJheiA/IHF1eCA6XG4gICAgYm9vcDsifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": true }]*/\n\nvar a =\n    foo ? bar :\n    baz ? qux :\n    boop;\n```\n\n### offsetTernaryExpressions\n\nExamples of **incorrect** code for this rule with the default `2, { \"offsetTernaryExpressions\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm9mZnNldFRlcm5hcnlFeHByZXNzaW9uc1wiOiBmYWxzZSB9XSovXG5cbmNvbmRpdGlvblxuICA/ICgpID0+IHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICA6ICgpID0+IHtcbiAgICAgIGZhbHNlXG4gICAgfSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"offsetTernaryExpressions\": false }]*/\n\ncondition\n  ? () => {\n      return true\n    }\n  : () => {\n      false\n    }\n```\n\nExamples of **correct** code for this rule with the default `2, { \"offsetTernaryExpressions\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm9mZnNldFRlcm5hcnlFeHByZXNzaW9uc1wiOiBmYWxzZSB9XSovXG5cbmNvbmRpdGlvblxuICA/ICgpID0+IHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIDogY29uZGl0aW9uMlxuICAgID8gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgOiAoKSA9PiB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9In0=)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"offsetTernaryExpressions\": false }]*/\n\ncondition\n  ? () => {\n    return true\n  }\n  : condition2\n    ? () => {\n      return true\n    }\n    : () => {\n      return false\n    }\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"offsetTernaryExpressions\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm9mZnNldFRlcm5hcnlFeHByZXNzaW9uc1wiOiB0cnVlIH1dKi9cblxuY29uZGl0aW9uXG4gID8gKCkgPT4ge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgOiBjb25kaXRpb24yXG4gICAgPyAoKSA9PiB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICA6ICgpID0+IHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0ifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"offsetTernaryExpressions\": true }]*/\n\ncondition\n  ? () => {\n    return true\n  }\n  : condition2\n    ? () => {\n      return true\n    }\n    : () => {\n      return false\n    }\n```\n\nExamples of **correct** code for this rule with the `2, { \"offsetTernaryExpressions\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgMiwgeyBcIm9mZnNldFRlcm5hcnlFeHByZXNzaW9uc1wiOiB0cnVlIH1dKi9cblxuY29uZGl0aW9uXG4gID8gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIDogY29uZGl0aW9uMlxuICAgID8gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0ifQ==)\n\n``` language-js\n/*eslint indent: [\"error\", 2, { \"offsetTernaryExpressions\": true }]*/\n\ncondition\n  ? () => {\n      return true\n    }\n  : condition2\n    ? () => {\n        return true\n      }\n    : () => {\n        return false\n      }\n```\n\n### ignoreComments\n\nExamples of additional **correct** code for this rule with the `4, { \"ignoreComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluZGVudDogW1wiZXJyb3JcIiwgNCwgeyBcImlnbm9yZUNvbW1lbnRzXCI6IHRydWUgfV0gKi9cblxuaWYgKGZvbykge1xuICAgIGRvU29tZXRoaW5nKCk7XG5cbi8vIGNvbW1lbnQgaW50ZW50aW9uYWxseSBkZS1pbmRlbnRlZFxuICAgIGRvU29tZXRoaW5nRWxzZSgpO1xufSJ9)\n\n``` language-js\n/*eslint indent: [\"error\", 4, { \"ignoreComments\": true }] */\n\nif (foo) {\n    doSomething();\n\n// comment intentionally de-indented\n    doSomethingElse();\n}\n```\n\n## Compatibility\n\n- **JSHint**: `indent`\n- **JSCS**: [validateIndentation](https://jscs-dev.github.io/rule/validateIndentation)\n\n## Version\n\nThis rule was introduced in ESLint v0.14.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/indent.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/indent.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/indent](https://eslint.org/docs/latest/rules/indent)"
- name: init-declarations
  id: rules/init-declarations
  summary: In JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement
  description: "# init-declarations\n\nRequire or disallow initialization in variable declarations\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n    3.  [ignoreForLoopInit](#ignoreforloopinit)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement. For example, in the following code, `foo` is initialized during declaration, while `bar` is initialized later.\n\n``` language-js\nvar foo = 1;\nvar bar;\n\nif (foo) {\n    bar = 1;\n} else {\n    bar = 2;\n}\n```\n\n## Rule Details\n\nThis rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, `foo` is initialized during declaration, while `bar` is not.\n\n``` language-js\nvar foo = 1;\nvar bar;\n\nbar = 2;\n```\n\nThis rule aims to bring consistency to variable initializations and declarations.\n\n## Options\n\nThe rule takes two options:\n\n1.  A string which must be either `\"always\"` (the default), to enforce initialization at declaration, or `\"never\"` to disallow initialization during declaration. This rule applies to `var`, `let`, and `const` variables, however `\"never\"` is ignored for `const` variables, as unassigned `const`s generate a parse error.\n2.  An object that further controls the behavior of this rule. Currently, the only available parameter is `ignoreForLoopInit`, which indicates if initialization at declaration is allowed in `for` loops when `\"never\"` is set, since it is a very typical use case.\n\nYou can configure the rule as follows:\n\nVariables must be initialized at declaration (default)\n\n``` language-json\n{\n    \"init-declarations\": [\"error\", \"always\"],\n}\n```\n\nVariables must not be initialized at declaration\n\n``` language-json\n{\n    \"init-declarations\": [\"error\", \"never\"]\n}\n```\n\nVariables must not be initialized at declaration, except in for loops, where it is allowed\n\n``` language-json\n{\n    \"init-declarations\": [\"error\", \"never\", { \"ignoreForLoopInit\": true }]\n}\n```\n\n### always\n\nExamples of **incorrect** code for the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluaXQtZGVjbGFyYXRpb25zOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIHZhciBiYXI7XG4gICAgbGV0IGJhejtcbn0ifQ==)\n\n``` language-js\n/*eslint init-declarations: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    let baz;\n}\n```\n\nExamples of **correct** code for the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluaXQtZGVjbGFyYXRpb25zOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIHZhciBiYXIgPSAxO1xuICAgIGxldCBiYXogPSAyO1xuICAgIGNvbnN0IHF1eCA9IDM7XG59In0=)\n\n``` language-js\n/*eslint init-declarations: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n    const qux = 3;\n}\n```\n\n### never\n\nExamples of **incorrect** code for the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluaXQtZGVjbGFyYXRpb25zOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGJhciA9IDE7XG4gICAgbGV0IGJheiA9IDI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE7IGkrKykge31cbn0ifQ==)\n\n``` language-js\n/*eslint init-declarations: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n\n    for (var i = 0; i < 1; i++) {}\n}\n```\n\nExamples of **correct** code for the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluaXQtZGVjbGFyYXRpb25zOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGJhcjtcbiAgICBsZXQgYmF6O1xuICAgIGNvbnN0IGJ1enogPSAxO1xufSJ9)\n\n``` language-js\n/*eslint init-declarations: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    let baz;\n    const buzz = 1;\n}\n```\n\nThe `\"never\"` option ignores `const` variable initializations.\n\n### ignoreForLoopInit\n\nExamples of **correct** code for the `\"never\", { \"ignoreForLoopInit\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGluaXQtZGVjbGFyYXRpb25zOiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJpZ25vcmVGb3JMb29wSW5pdFwiOiB0cnVlIH1dKi9cbmZvciAodmFyIGkgPSAwOyBpIDwgMTsgaSsrKSB7fSJ9)\n\n``` language-js\n/*eslint init-declarations: [\"error\", \"never\", { \"ignoreForLoopInit\": true }]*/\nfor (var i = 0; i < 1; i++) {}\n```\n\n## When Not To Use It\n\nWhen you are indifferent as to how your variables are initialized.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/init-declarations.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/init-declarations.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/init-declarations](https://eslint.org/docs/latest/rules/init-declarations)"
- name: Integrate ESLint
  id: integrate/index
  summary: This guide is intended for those who wish to integrate the functionality of ESLint into other applications by using the ESLint API
  description: "# Integrate ESLint\n\n## Table of Contents\n\n1.  [Integrate with the Node.js API Tutorial](#integrate-with-the-nodejs-api-tutorial)\n2.  [Node.js API Reference](#nodejs-api-reference)\n\nThis guide is intended for those who wish to integrate the functionality of ESLint into other applications by using the ESLint API.\n\nIn order to integrate ESLint, it’s recommended that:\n\n- You know JavaScript since ESLint is written in JavaScript.\n- You have some familiarity with Node.js since ESLint runs on it.\n\nIf that sounds like you, then continue reading to get started.\n\n## [Integrate with the Node.js API Tutorial](integration-tutorial)\n\nThis tutorial walks you through the process of creating a basic integration with ESLint using the Node.js API.\n\n## [Node.js API Reference](nodejs-api)\n\nIf you’re interested in writing a tool that uses ESLint, then you can use the Node.js API to get programmatic access to functionality.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/integrate/](https://eslint.org/docs/latest/integrate/)"
- name: Integrate with the Node.js API Tutorial
  id: integrate/integration-tutorial
  summary: This guide walks you through integrating the ESLint class to lint files and retrieve results, which can be useful for creating integrations with other projects
  description: "# Integrate with the Node.js API Tutorial\n\n## Table of Contents\n\n1.  [Why Create an Integration?](#why-create-an-integration)\n2.  [What You’ll Build](#what-youll-build)\n3.  [Requirements](#requirements)\n4.  [Step 1: Setup](#step-1-setup)\n5.  [Step 2: Import and Configure the ESLint Instance](#step-2-import-and-configure-the-eslint-instance)\n6.  [Step 3: Lint and Fix Files](#step-3-lint-and-fix-files)\n7.  [Step 4: Output Results](#step-4-output-results)\n8.  [Step 5: Put It All Together](#step-5-put-it-all-together)\n9.  [Conclusion](#conclusion)\n10. [View the Tutorial Code](#view-the-tutorial-code)\n\nThis guide walks you through integrating the `ESLint` class to lint files and retrieve results, which can be useful for creating integrations with other projects.\n\n## Why Create an Integration?\n\nYou might want to create an ESLint integration if you’re creating developer tooling, such as the following:\n\n- **Code editors and IDEs**: Integrating ESLint with code editors and IDEs can provide real-time feedback on code quality and automatically highlight potential issues as you type. Many editors already have ESLint plugins available, but you may need to create a custom integration if the existing plugins do not meet your specific requirements.\n\n- **Custom linter tools**: If you’re building a custom linter tool that combines multiple linters or adds specific functionality, you may want to integrate ESLint into your tool to provide JavaScript linting capabilities.\n\n- **Code review tools**: Integrating ESLint with code review tools can help automate the process of identifying potential issues in the codebase.\n\n- **Learning platforms**: If you are developing a learning platform or coding tutorial, integrating ESLint can provide real-time feedback to users as they learn JavaScript, helping them improve their coding skills and learn best practices.\n\n- **Developer tool integration**: If you’re creating or extending a developer tool, such as a bundler or testing framework, you may want to integrate ESLint to provide linting capabilities. You can integrate ESLint directly into the tool or as a plugin.\n\n## What You’ll Build\n\nIn this guide, you’ll create a simple Node.js project that uses the `ESLint` class to lint files and retrieve results.\n\n## Requirements\n\nThis tutorial assumes you are familiar with JavaScript and Node.js.\n\nTo follow this tutorial, you’ll need to have the following:\n\n- Node.js (v12.22.0 or higher)\n- npm\n- A text editor\n\n## Step 1: Setup\n\nFirst, create a new project directory:\n\n``` language-shell\nmkdir eslint-integration\ncd eslint-integration\n```\n\nInitialize the project with a `package.json` file:\n\n``` language-shell\nnpm init -y\n```\n\nInstall the `eslint` package as a dependency (**not** as a dev dependency):\n\n``` language-shell\nnpm install eslint\n```\n\nCreate a new file called `example-eslint-integration.js` in the project root:\n\n``` language-shell\ntouch example-eslint-integration.js\n```\n\n## Step 2: Import and Configure the `ESLint` Instance\n\nImport the `ESLint` class from the `eslint` package and create a new instance.\n\nYou can customize the ESLint configuration by passing an options object to the `ESLint` constructor:\n\n``` language-javascript\n// example-eslint-integration.js\n\nconst { ESLint } = require(\"eslint\");\n\n// Create an instance of ESLint with the configuration passed to the function\nfunction createESLintInstance(overrideConfig){\n  return new ESLint({ useEslintrc: false, overrideConfig: overrideConfig, fix: true });\n}\n```\n\n## Step 3: Lint and Fix Files\n\nTo lint a file, use the `lintFiles` method of the `ESLint` instance. The `filePaths` argument passed to `ESLint#lintFiles()` can be a string or an array of strings, representing the file path(s) you want to lint. The file paths can be globs or filenames.\n\nThe static method `ESLint.outputFixes()` takes the linting results from the call to `ESLint#lintFiles()`, and then writes the fixed code back to the source files.\n\n``` language-javascript\n// example-eslint-integration.js\n\n// ... previous step's code to instantiate the ESLint instance\n\n// Lint the specified files and return the results\nasync function lintAndFix(eslint, filePaths) {\n  const results = await eslint.lintFiles(filePaths);\n\n  // Apply automatic fixes and output fixed code\n  await ESLint.outputFixes(results);\n\n  return results;\n}\n```\n\n## Step 4: Output Results\n\nDefine a function to output the linting results to the console. This should be specific to your integration’s needs. For example, you could report the linting results to a user interface.\n\nIn this example, we’ll simply log the results to the console:\n\n``` language-javascript\n// example-eslint-integration.js\n\n// ... previous step's code to instantiate the ESLint instance\n// and get linting results.\n\n// Log results to console if there are any problems\nfunction outputLintingResults(results) {\n  // Identify the number of problems found\n  const problems = results.reduce((acc, result) => acc + result.errorCount + result.warningCount, 0);\n\n  if (problems > 0) {\n    console.log(\"Linting errors found!\");\n    console.log(results);\n  } else {\n    console.log(\"No linting errors found.\");\n  }\n  return results;\n}\n```\n\n## Step 5: Put It All Together\n\nPut the above functions together in a new function called `lintFiles`. This function will be the main entry point for your integration:\n\n``` language-javascript\n// example-eslint-integration.js\n\n// Put previous functions all together\nasync function lintFiles(filePaths) {\n\n    // The ESLint configuration. Alternatively, you could load the configuration\n    // from a .eslintrc file or just use the default config.\n    const overrideConfig = {\n        env: {\n            es6: true,\n            node: true,\n        },\n        parserOptions: {\n            ecmaVersion: 2018,\n        },\n        rules: {\n            \"no-console\": \"error\",\n            \"no-unused-vars\": \"warn\",\n        },\n    };\n\n    const eslint = createESLintInstance(overrideConfig);\n    const results = await lintAndFix(eslint, filePaths);\n    return outputLintingResults(results);\n}\n\n// Export integration\nmodule.exports = { lintFiles }\n```\n\nHere’s the complete code example for `example-eslint-integration.js`:\n\n``` language-javascript\nconst { ESLint } = require(\"eslint\");\n\n// Create an instance of ESLint with the configuration passed to the function\nfunction createESLintInstance(overrideConfig){\n  return new ESLint({ useEslintrc: false, overrideConfig: overrideConfig, fix: true });\n}\n\n// Lint the specified files and return the results\nasync function lintAndFix(eslint, filePaths) {\n  const results = await eslint.lintFiles(filePaths);\n\n  // Apply automatic fixes and output fixed code\n  await ESLint.outputFixes(results);\n\n  return results;\n}\n\n// Log results to console if there are any problems\nfunction outputLintingResults(results) {\n  // Identify the number of problems found\n  const problems = results.reduce((acc, result) => acc + result.errorCount + result.warningCount, 0);\n\n  if (problems > 0) {\n    console.log(\"Linting errors found!\");\n    console.log(results);\n  } else {\n    console.log(\"No linting errors found.\");\n  }\n  return results;\n}\n\n// Put previous functions all together\nasync function lintFiles(filePaths) {\n\n    // The ESLint configuration. Alternatively, you could load the configuration\n    // from a .eslintrc file or just use the default config.\n    const overrideConfig = {\n        env: {\n            es6: true,\n            node: true,\n        },\n        parserOptions: {\n            ecmaVersion: 2018,\n        },\n        rules: {\n            \"no-console\": \"error\",\n            \"no-unused-vars\": \"warn\",\n        },\n    };\n\n    const eslint = createESLintInstance(overrideConfig);\n    const results = await lintAndFix(eslint, filePaths);\n    return outputLintingResults(results);\n}\n\n// Export integration\nmodule.exports = { lintFiles }\n```\n\n## Conclusion\n\nIn this tutorial, we have covered the essentials of using the `ESLint` class to lint files and retrieve results in your projects. This knowledge can be applied to create custom integrations, such as code editor plugins, to provide real-time feedback on code quality.\n\n## View the Tutorial Code\n\nYou can view the annotated source code for the tutorial [here](https://github.com/eslint/eslint/tree/main/docs/_examples/integration-tutorial-code).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/integrate/integration-tutorial](https://eslint.org/docs/latest/integrate/integration-tutorial)"
- name: Integrations
  id: use/integrations
  summary: This page contains community projects that have integrated ESLint
  description: "# Integrations\n\n## Table of Contents\n\n1.  [Editors](#editors)\n2.  [Build tools](#build-tools)\n3.  [Command Line Tools](#command-line-tools)\n4.  [Source Control](#source-control)\n5.  [Other Integration Lists](#other-integration-lists)\n\nThis page contains community projects that have integrated ESLint. The projects on this page are not maintained by the ESLint team.\n\nIf you would like to recommend an integration to be added to this page, [submit a pull request](integrations../contribute/pull-requests).\n\n## Editors\n\n- Sublime Text 3:\n  - [SublimeLinter-eslint](https://github.com/SublimeLinter/SublimeLinter-eslint)\n  - [Build Next](https://github.com/albertosantini/sublimetext-buildnext)\n- Vim:\n  - [ALE](https://github.com/dense-analysis/ale)\n  - [Syntastic](https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers/javascript)\n- Emacs: [Flycheck](http://www.flycheck.org/) supports ESLint with the [javascript-eslint](http://www.flycheck.org/en/latest/languages.html#javascript) checker.\n- Eclipse Orion: ESLint is the [default linter](https://dev.eclipse.org/mhonarc/lists/orion-dev/msg02718.html)\n- Eclipse IDE: [Tern ESLint linter](https://github.com/angelozerr/tern.java/wiki/Tern-Linter-ESLint)\n- TextMate 2:\n  - [eslint.tmbundle](https://github.com/ryanfitzer/eslint.tmbundle)\n  - [javascript-eslint.tmbundle](https://github.com/natesilva/javascript-eslint.tmbundle)\n- IntelliJ IDEA, WebStorm, PhpStorm, PyCharm, RubyMine, and other JetBrains IDEs: [How to use ESLint](https://www.jetbrains.com/help/webstorm/eslint.html)\n- Visual Studio: [Linting JavaScript in VS](https://learn.microsoft.com/en-us/visualstudio/javascript/linting-javascript?view=vs-2022)\n- Visual Studio Code: [ESLint Extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n- Brackets: Included and [Brackets ESLint](https://github.com/brackets-userland/brackets-eslint)\n\n## Build tools\n\n- Grunt: [grunt-eslint](https://www.npmjs.com/package/grunt-eslint)\n- Webpack: [eslint-webpack-plugin](https://www.npmjs.com/package/eslint-webpack-plugin)\n- Rollup: [@rollup/plugin-eslint](https://www.npmjs.com/package/@rollup/plugin-eslint)\n\n## Command Line Tools\n\n- [ESLint Watch](https://www.npmjs.com/package/eslint-watch)\n- [Code Climate CLI](https://github.com/codeclimate/codeclimate)\n- [ESLint Nibble](https://github.com/IanVS/eslint-nibble)\n\n## Source Control\n\n- [Git Precommit Hook](https://coderwall.com/p/zq8jlq/eslint-pre-commit-hook)\n- [Git pre-commit hook that only lints staged changes](https://gist.github.com/dahjelle/8ddedf0aebd488208a9a7c829f19b9e8)\n- [overcommit Git hook manager](https://github.com/brigade/overcommit)\n- [Mega-Linter](https://megalinter.io/latest/): Linters aggregator for CI, [embedding eslint](https://megalinter.io/latest/descriptors/javascript_eslint/)\n\n## Other Integration Lists\n\nYou can find a curated list of other popular integrations for ESLint in the [awesome-eslint](https://github.com/dustinspecker/awesome-eslint) GitHub repository.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/integrations](https://eslint.org/docs/latest/use/integrations)"
- name: keyword-spacing
  id: rules/keyword-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# keyword-spacing\n\nEnforce consistent spacing before and after keywords\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](keyword-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [before](#before)\n    2.  [after](#after)\n    3.  [overrides](#overrides)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/keyword-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nKeywords are syntax elements of JavaScript, such as `try` and `if`. These keywords have special meaning to the language and so often appear in a different color in code editors. As an important part of the language, style guides often refer to the spacing that should be used around keywords. For example, you might have a style guide that says keywords should be always surrounded by spaces, which would mean `if-else` statements must look like this:\n\n``` language-js\nif (foo) {\n    // ...\n} else {\n    // ...\n}\n```\n\nOf course, you could also have a style guide that disallows spaces around keywords.\n\nHowever, if you want to enforce the style of spacing between the `function` keyword and the following opening parenthesis, please refer to [space-before-function-paren](keyword-spacingspace-before-function-paren).\n\n## Rule Details\n\nThis rule enforces consistent spacing around keywords and keyword-like tokens: `as` (in module declarations), `async` (of async functions), `await` (of await expressions), `break`, `case`, `catch`, `class`, `const`, `continue`, `debugger`, `default`, `delete`, `do`, `else`, `export`, `extends`, `finally`, `for`, `from` (in module declarations), `function`, `get` (of getters), `if`, `import`, `in` (in for-in statements), `let`, `new`, `of` (in for-of statements), `return`, `set` (of setters), `static`, `super`, `switch`, `this`, `throw`, `try`, `typeof`, `var`, `void`, `while`, `with`, and `yield`. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.\n\n## Options\n\nThis rule has an object option:\n\n- `\"before\": true` (default) requires at least one space before keywords\n- `\"before\": false` disallows spaces before keywords\n- `\"after\": true` (default) requires at least one space after keywords\n- `\"after\": false` disallows spaces after keywords\n- `\"overrides\"` allows overriding spacing style for specified keywords\n\n### before\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImJlZm9yZVwiOiB0cnVlIH1dKi9cblxuaWYgKGZvbykge1xuICAgIC8vLi4uXG59ZWxzZSBpZiAoYmFyKSB7XG4gICAgLy8uLi5cbn1lbHNlIHtcbiAgICAvLy4uLlxufSJ9)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"before\": true }]*/\n\nif (foo) {\n    //...\n}else if (bar) {\n    //...\n}else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBrZXl3b3JkLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJiZWZvcmVcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuaWYgKGZvbykge1xuICAgIC8vLi4uXG59IGVsc2UgaWYgKGJhcikge1xuICAgIC8vLi4uXG59IGVsc2Uge1xuICAgIC8vLi4uXG59XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGFycmF5LWJyYWNrZXQtc3BhY2luZ2BcbmxldCBhID0gW3RoaXNdO1xubGV0IGIgPSBbZnVuY3Rpb24oKSB7fV07XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGFycm93LXNwYWNpbmdgXG5sZXQgYyA9ICgpPT4gdGhpcy5mb287XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGJsb2NrLXNwYWNpbmdgXG57ZnVuY3Rpb24gZm9vKCkge319XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGNvbW1hLXNwYWNpbmdgXG5sZXQgZCA9IFsxMDAsdGhpcy5mb28sIHRoaXMuYmFyXTtcblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBgY29tcHV0ZWQtcHJvcGVydHktc3BhY2luZ2Bcbm9ialt0aGlzLmZvb10gPSAwO1xuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBnZW5lcmF0b3Itc3Rhci1zcGFjaW5nYFxuZnVuY3Rpb24gKmJhcigpIHt9XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGtleS1zcGFjaW5nYFxubGV0IG9iajEgPSB7XG4gICAgZm9vOmZ1bmN0aW9uKCkge31cbn07XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYG9iamVjdC1jdXJseS1zcGFjaW5nYFxubGV0IG9iajIgPSB7Zm9vOiB0aGlzfTtcblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBgc2VtaS1zcGFjaW5nYFxubGV0IGUgPSB0aGlzO2Z1bmN0aW9uIGZvbygpIHt9XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYHNwYWNlLWluLXBhcmVuc2BcbihmdW5jdGlvbiAoKSB7fSkoKTtcblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBgc3BhY2UtaW5maXgtb3BzYFxuaWYgKFwiZm9vXCJpbiB7Zm9vOiAwfSkge31cbmlmICgxMCt0aGlzLmZvbzw9IHRoaXMuYmFyKSB7fVxuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBqc3gtY3VybHktc3BhY2luZ2BcbmxldCBmID0gPEEgZm9vPXt0aGlzLmZvb30gYmFyPXtmdW5jdGlvbigpe319IC8+In0=)\n\n``` language-jsx\n/*eslint keyword-spacing: [\"error\", { \"before\": true }]*/\n/*eslint-env es6*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n\n// Avoid conflict with `array-bracket-spacing`\nlet a = [this];\nlet b = [function() {}];\n\n// Avoid conflict with `arrow-spacing`\nlet c = ()=> this.foo;\n\n// Avoid conflict with `block-spacing`\n{function foo() {}}\n\n// Avoid conflict with `comma-spacing`\nlet d = [100,this.foo, this.bar];\n\n// Avoid conflict with `computed-property-spacing`\nobj[this.foo] = 0;\n\n// Avoid conflict with `generator-star-spacing`\nfunction *bar() {}\n\n// Avoid conflict with `key-spacing`\nlet obj1 = {\n    foo:function() {}\n};\n\n// Avoid conflict with `object-curly-spacing`\nlet obj2 = {foo: this};\n\n// Avoid conflict with `semi-spacing`\nlet e = this;function foo() {}\n\n// Avoid conflict with `space-in-parens`\n(function () {})();\n\n// Avoid conflict with `space-infix-ops`\nif (\"foo\"in {foo: 0}) {}\nif (10+this.foo<= this.bar) {}\n\n// Avoid conflict with `jsx-curly-spacing`\nlet f = <A foo={this.foo} bar={function(){}} />\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImJlZm9yZVwiOiBmYWxzZSB9XSovXG5cbmlmIChmb28pIHtcbiAgICAvLy4uLlxufSBlbHNlIGlmIChiYXIpIHtcbiAgICAvLy4uLlxufSBlbHNlIHtcbiAgICAvLy4uLlxufSJ9)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"before\": false }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImJlZm9yZVwiOiBmYWxzZSB9XSovXG5cbmlmIChmb28pIHtcbiAgICAvLy4uLlxufWVsc2UgaWYgKGJhcikge1xuICAgIC8vLi4uXG59ZWxzZSB7XG4gICAgLy8uLi5cbn0ifQ==)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"before\": false }]*/\n\nif (foo) {\n    //...\n}else if (bar) {\n    //...\n}else {\n    //...\n}\n```\n\n### after\n\nExamples of **incorrect** code for this rule with the default `{ \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImFmdGVyXCI6IHRydWUgfV0qL1xuXG5pZihmb28pIHtcbiAgICAvLy4uLlxufSBlbHNlIGlmKGJhcikge1xuICAgIC8vLi4uXG59IGVsc2V7XG4gICAgLy8uLi5cbn0ifQ==)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"after\": true }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else{\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"after\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBrZXl3b3JkLXNwYWNpbmc6IFtcImVycm9yXCIsIHsgXCJhZnRlclwiOiB0cnVlIH1dKi9cblxuaWYgKGZvbykge1xuICAgIC8vLi4uXG59IGVsc2UgaWYgKGJhcikge1xuICAgIC8vLi4uXG59IGVsc2Uge1xuICAgIC8vLi4uXG59XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGFycmF5LWJyYWNrZXQtc3BhY2luZ2BcbmxldCBhID0gW3RoaXNdO1xuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBhcnJvdy1zcGFjaW5nYFxubGV0IGIgPSAoKT0+IHRoaXMuZm9vO1xuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBjb21tYS1zcGFjaW5nYFxubGV0IGMgPSBbMTAwLCB0aGlzLmZvbywgdGhpcy5iYXJdO1xuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBjb21wdXRlZC1wcm9wZXJ0eS1zcGFjaW5nYFxub2JqW3RoaXMuZm9vXSA9IDA7XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGdlbmVyYXRvci1zdGFyLXNwYWNpbmdgXG5mdW5jdGlvbiogZm9vKCkge31cblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBga2V5LXNwYWNpbmdgXG5sZXQgb2JqMSA9IHtcbiAgICBmb286ZnVuY3Rpb24oKSB7fVxufTtcblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBgZnVuYy1jYWxsLXNwYWNpbmdgXG5jbGFzcyBBIGV4dGVuZHMgQiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBvYmplY3QtY3VybHktc3BhY2luZ2BcbmxldCBvYmoyID0ge2ZvbzogdGhpc307XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYHNlbWktc3BhY2luZ2BcbmxldCBkID0gdGhpcztmdW5jdGlvbiBiYXIoKSB7fVxuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW5gXG4oZnVuY3Rpb24oKSB7fSkoKTtcblxuLy8gQXZvaWQgY29uZmxpY3Qgd2l0aCBgc3BhY2UtaW5maXgtb3BzYFxuaWYgKFwiZm9vXCJpbntmb286IDB9KSB7fVxuaWYgKDEwK3RoaXMuZm9vPD0gdGhpcy5iYXIpIHt9XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYHNwYWNlLXVuYXJ5LW9wc2BcbmZ1bmN0aW9uKiBiYXooYSkge1xuICAgIHJldHVybiB5aWVsZCthO1xufVxuXG4vLyBBdm9pZCBjb25mbGljdCB3aXRoIGB5aWVsZC1zdGFyLXNwYWNpbmdgXG5mdW5jdGlvbiogcXV4KGEpIHtcbiAgICByZXR1cm4geWllbGQqIGE7XG59XG5cbi8vIEF2b2lkIGNvbmZsaWN0IHdpdGggYGpzeC1jdXJseS1zcGFjaW5nYFxubGV0IGUgPSA8QSBmb289e3RoaXMuZm9vfSBiYXI9e2Z1bmN0aW9uKCl7fX0gLz4ifQ==)\n\n``` language-jsx\n/*eslint keyword-spacing: [\"error\", { \"after\": true }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n\n// Avoid conflict with `array-bracket-spacing`\nlet a = [this];\n\n// Avoid conflict with `arrow-spacing`\nlet b = ()=> this.foo;\n\n// Avoid conflict with `comma-spacing`\nlet c = [100, this.foo, this.bar];\n\n// Avoid conflict with `computed-property-spacing`\nobj[this.foo] = 0;\n\n// Avoid conflict with `generator-star-spacing`\nfunction* foo() {}\n\n// Avoid conflict with `key-spacing`\nlet obj1 = {\n    foo:function() {}\n};\n\n// Avoid conflict with `func-call-spacing`\nclass A extends B {\n    constructor() {\n        super();\n    }\n}\n\n// Avoid conflict with `object-curly-spacing`\nlet obj2 = {foo: this};\n\n// Avoid conflict with `semi-spacing`\nlet d = this;function bar() {}\n\n// Avoid conflict with `space-before-function-paren`\n(function() {})();\n\n// Avoid conflict with `space-infix-ops`\nif (\"foo\"in{foo: 0}) {}\nif (10+this.foo<= this.bar) {}\n\n// Avoid conflict with `space-unary-ops`\nfunction* baz(a) {\n    return yield+a;\n}\n\n// Avoid conflict with `yield-star-spacing`\nfunction* qux(a) {\n    return yield* a;\n}\n\n// Avoid conflict with `jsx-curly-spacing`\nlet e = <A foo={this.foo} bar={function(){}} />\n```\n\nExamples of **incorrect** code for this rule with the `{ \"after\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImFmdGVyXCI6IGZhbHNlIH1dKi9cblxuaWYgKGZvbykge1xuICAgIC8vLi4uXG59IGVsc2UgaWYgKGJhcikge1xuICAgIC8vLi4uXG59IGVsc2Uge1xuICAgIC8vLi4uXG59In0=)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"after\": false }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"after\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImFmdGVyXCI6IGZhbHNlIH1dKi9cblxuaWYoZm9vKSB7XG4gICAgLy8uLi5cbn0gZWxzZSBpZihiYXIpIHtcbiAgICAvLy4uLlxufSBlbHNle1xuICAgIC8vLi4uXG59In0=)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"after\": false }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else{\n    //...\n}\n```\n\n### overrides\n\nExamples of **correct** code for this rule with the `{ \"overrides\": { \"if\": { \"after\": false }, \"for\": { \"after\": false }, \"while\": { \"after\": false }, \"static\": { \"after\": false }, \"as\": { \"after\": false } } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGtleXdvcmQtc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcIm92ZXJyaWRlc1wiOiB7XG4gIFwiaWZcIjogeyBcImFmdGVyXCI6IGZhbHNlIH0sXG4gIFwiZm9yXCI6IHsgXCJhZnRlclwiOiBmYWxzZSB9LFxuICBcIndoaWxlXCI6IHsgXCJhZnRlclwiOiBmYWxzZSB9LFxuICBcInN0YXRpY1wiOiB7IFwiYWZ0ZXJcIjogZmFsc2UgfSxcbiAgXCJhc1wiOiB7IFwiYWZ0ZXJcIjogZmFsc2UgfVxufSB9XSovXG5cbmlmKGZvbykge1xuICAgIC8vLi4uXG59IGVsc2UgaWYoYmFyKSB7XG4gICAgLy8uLi5cbn0gZWxzZSB7XG4gICAgLy8uLi5cbn1cblxuZm9yKDs7KTtcblxud2hpbGUodHJ1ZSkge1xuICAgIC8vLi4uXG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpY3tcbiAgICAgICAgLy8uLi5cbiAgICB9XG59XG5cbmV4cG9ydCB7IEMgYXNcIm15IGNsYXNzXCIgfTsifQ==)\n\n``` language-js\n/*eslint keyword-spacing: [\"error\", { \"overrides\": {\n  \"if\": { \"after\": false },\n  \"for\": { \"after\": false },\n  \"while\": { \"after\": false },\n  \"static\": { \"after\": false },\n  \"as\": { \"after\": false }\n} }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else {\n    //...\n}\n\nfor(;;);\n\nwhile(true) {\n    //...\n}\n\nclass C {\n    static{\n        //...\n    }\n}\n\nexport { C as\"my class\" };\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce consistency on keyword spacing, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-beta.1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/keyword-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/keyword-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/keyword-spacing](https://eslint.org/docs/latest/rules/keyword-spacing)"
- name: line-comment-position
  id: rules/line-comment-position
  summary: Line comments can be positioned above or beside code
  description: "# line-comment-position\n\nEnforce position of line comments\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [position](#position)\n        1.  [position: above](#position-above)\n        2.  [position: beside](#position-beside)\n    2.  [ignorePattern](#ignorepattern)\n    3.  [applyDefaultIgnorePatterns](#applydefaultignorepatterns)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nLine comments can be positioned above or beside code. This rule helps teams maintain a consistent style.\n\n``` language-js\n// above comment\nvar foo = \"bar\";  // beside comment\n```\n\n## Rule Details\n\nThis rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: `eslint`, `jshint`, `jslint`, `istanbul`, `global`, `exported`, `jscs`, `falls through`.\n\n## Options\n\nThis rule takes one argument, which can be a string or an object. The string settings are the same as those of the `position` property (explained below). The object option has the following properties:\n\n### position\n\nThe `position` option has two settings:\n\n- `above` (default) enforces line comments only above code, in its own line.\n- `beside` enforces line comments only at the end of code lines.\n\n#### position: above\n\nExamples of **correct** code for the `{ \"position\": \"above\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcInBvc2l0aW9uXCI6IFwiYWJvdmVcIiB9XSovXG4vLyB2YWxpZCBjb21tZW50XG4xICsgMTsifQ==)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n// valid comment\n1 + 1;\n```\n\nExamples of **incorrect** code for the `{ \"position\": \"above\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcInBvc2l0aW9uXCI6IFwiYWJvdmVcIiB9XSovXG4xICsgMTsgLy8gaW52YWxpZCBjb21tZW50In0=)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n1 + 1; // invalid comment\n```\n\n#### position: beside\n\nExamples of **correct** code for the `{ \"position\": \"beside\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcInBvc2l0aW9uXCI6IFwiYmVzaWRlXCIgfV0qL1xuMSArIDE7IC8vIHZhbGlkIGNvbW1lbnQifQ==)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n1 + 1; // valid comment\n```\n\nExamples of **incorrect** code for the `{ \"position\": \"beside\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcInBvc2l0aW9uXCI6IFwiYmVzaWRlXCIgfV0qL1xuLy8gaW52YWxpZCBjb21tZW50XG4xICsgMTsifQ==)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n// invalid comment\n1 + 1;\n```\n\n### ignorePattern\n\nBy default this rule ignores comments starting with the following words: `eslint`, `jshint`, `jslint`, `istanbul`, `global`, `exported`, `jscs`, `falls through`. An alternative regular expression can be provided.\n\nExamples of **correct** code for the `ignorePattern` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJwcmFnbWFcIiB9XSovXG4xICsgMTsgLy8gcHJhZ21hIHZhbGlkIGNvbW1lbnQifQ==)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // pragma valid comment\n```\n\nExamples of **incorrect** code for the `ignorePattern` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJwcmFnbWFcIiB9XSovXG4xICsgMTsgLy8gaW52YWxpZCBjb21tZW50In0=)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // invalid comment\n```\n\n### applyDefaultIgnorePatterns\n\nDefault ignore patterns are applied even when `ignorePattern` is provided. If you want to omit default patterns, set this option to `false`.\n\nExamples of **correct** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJwcmFnbWFcIiwgXCJhcHBseURlZmF1bHRJZ25vcmVQYXR0ZXJuc1wiOiBmYWxzZSB9XSovXG4xICsgMTsgLy8gcHJhZ21hIHZhbGlkIGNvbW1lbnQifQ==)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // pragma valid comment\n```\n\nExamples of **incorrect** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxpbmUtY29tbWVudC1wb3NpdGlvbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJwcmFnbWFcIiwgXCJhcHBseURlZmF1bHRJZ25vcmVQYXR0ZXJuc1wiOiBmYWxzZSB9XSovXG4xICsgMTsgLy8gZmFsbHMgdGhyb3VnaCJ9)\n\n``` language-js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // falls through\n```\n\n**Deprecated:** the object property `applyDefaultPatterns` is deprecated. Please use the property `applyDefaultIgnorePatterns` instead.\n\n## When Not To Use It\n\nIf you aren’t concerned about having different line comment styles, then you can turn off this rule.\n\n## Compatibility\n\n**JSCS**: [validateCommentPosition](https://jscs-dev.github.io/rule/validateCommentPosition)\n\n## Version\n\nThis rule was introduced in ESLint v3.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/line-comment-position.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/line-comment-position.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/line-comment-position](https://eslint.org/docs/latest/rules/line-comment-position)"
- name: logical-assignment-operators
  id: rules/logical-assignment-operators
  summary: ES2021 introduces the assignment operator shorthand for the logical operators ||, && and ??. Before, this was only allowed for mathematical operations such as + or * (see the rule operator-assignment)
  description: "# logical-assignment-operators\n\nRequire or disallow logical assignment operator shorthand\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](logical-assignment-operators../use/command-line-interface#--fix) option\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](logical-assignment-operators../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Options](#options)\n        1.  [always](#always)\n        2.  [never](#never)\n        3.  [enforceForIfStatements](#enforceforifstatements)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nES2021 introduces the assignment operator shorthand for the logical operators `||`, `&&` and `??`. Before, this was only allowed for mathematical operations such as `+` or `*` (see the rule [operator-assignment](logical-assignment-operators./operator-assignment)). The shorthand can be used if the assignment target and the left expression of a logical expression are the same. For example `a = a || b` can be shortened to `a ||= b`.\n\n## Rule Details\n\nThis rule requires or disallows logical assignment operator shorthand.\n\n### Options\n\nThis rule has a string and an object option. String option:\n\n- `\"always\"` (default)\n- `\"never\"`\n\nObject option (only available if string option is set to `\"always\"`):\n\n- `\"enforceForIfStatements\": false`(default) Do *not* check for equivalent `if` statements\n- `\"enforceForIfStatements\": true` Check for equivalent `if` statements\n\n#### always\n\nThis option checks for expressions that can be shortened using logical assignment operator. For example, `a = a || b` can be shortened to `a ||= b`. Expressions with associativity such as `a = a || b || c` are reported as being able to be shortened to `a ||= b || c` unless the evaluation order is explicitly defined using parentheses, such as `a = (a || b) || c`.\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuYSA9IGEgfHwgYlxuYSA9IGEgJiYgYlxuYSA9IGEgPz8gYlxuYSB8fCAoYSA9IGIpXG5hICYmIChhID0gYilcbmEgPz8gKGEgPSBiKVxuYSA9IGEgfHwgYiB8fCBjXG5hID0gYSAmJiBiICYmIGNcbmEgPSBhID8/IGIgPz8gYyJ9)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"always\"]*/\n\na = a || b\na = a && b\na = a ?? b\na || (a = b)\na && (a = b)\na ?? (a = b)\na = a || b || c\na = a && b && c\na = a ?? b ?? c\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuYSA9IGJcbmEgKz0gYlxuYSB8fD0gYlxuYSA9IGIgfHwgY1xuYSB8fCAoYiA9IGMpXG5cbmlmIChhKSBhID0gYlxuXG5hID0gKGEgfHwgYikgfHwgYyJ9)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"always\"]*/\n\na = b\na += b\na ||= b\na = b || c\na || (b = c)\n\nif (a) a = b\n\na = (a || b) || c\n```\n\n#### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5hIHx8PSBiXG5hICYmPSBiXG5hID8/PSBiIn0=)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"never\"]*/\n\na ||= b\na &&= b\na ??= b\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5hID0gYSB8fCBiXG5hID0gYSAmJiBiXG5hID0gYSA/PyBiIn0=)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"never\"]*/\n\na = a || b\na = a && b\na = a ?? b\n```\n\n#### enforceForIfStatements\n\nThis option checks for additional patterns with if statements which could be expressed with the logical assignment operator.\n\nExamples of **incorrect** code for this rule with the `[\"always\", { enforceForIfStatements: true }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgZW5mb3JjZUZvcklmU3RhdGVtZW50czogdHJ1ZSB9XSovXG5cbmlmIChhKSBhID0gYiAvLyA8PT4gYSAmJj0gYlxuaWYgKCFhKSBhID0gYiAvLyA8PT4gYSB8fD0gYlxuXG5pZiAoYSA9PSBudWxsKSBhID0gYiAvLyA8PT4gYSA/Pz0gYlxuaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkKSBhID0gYiAvLyA8PT4gYSA/Pz0gYiJ9)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"always\", { enforceForIfStatements: true }]*/\n\nif (a) a = b // <=> a &&= b\nif (!a) a = b // <=> a ||= b\n\nif (a == null) a = b // <=> a ??= b\nif (a === null || a === undefined) a = b // <=> a ??= b\n```\n\nExamples of **correct** code for this rule with the `[\"always\", { enforceForIfStatements: true }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IGxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnM6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgZW5mb3JjZUZvcklmU3RhdGVtZW50czogdHJ1ZSB9XSovXG5cbmlmIChhKSBiID0gY1xuaWYgKGEgPT09IDApIGEgPSBiIn0=)\n\n``` language-js\n/*eslint logical-assignment-operators: [\"error\", \"always\", { enforceForIfStatements: true }]*/\n\nif (a) b = c\nif (a === 0) a = b\n```\n\n## When Not To Use It\n\nUse of logical operator assignment shorthand is a stylistic choice. Leaving this rule turned off would allow developers to choose which style is more readable on a case-by-case basis.\n\n## Version\n\nThis rule was introduced in ESLint v8.24.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/logical-assignment-operators.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/logical-assignment-operators.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/logical-assignment-operators](https://eslint.org/docs/latest/rules/logical-assignment-operators)"
- name: max-classes-per-file
  id: rules/max-classes-per-file
  summary: Files containing multiple classes can often result in a less navigable and poorly structured codebase
  description: "# max-classes-per-file\n\nEnforce a maximum number of classes per file\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nFiles containing multiple classes can often result in a less navigable and poorly structured codebase. Best practice is to keep each file limited to a single responsibility.\n\n## Rule Details\n\nThis rule enforces that each file may contain only a particular number of classes and no more.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1jbGFzc2VzLXBlci1maWxlOiBcImVycm9yXCIqL1xuXG5jbGFzcyBGb28ge31cbmNsYXNzIEJhciB7fSJ9)\n\n``` language-js\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\nclass Bar {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1jbGFzc2VzLXBlci1maWxlOiBcImVycm9yXCIqL1xuXG5jbGFzcyBGb28ge30ifQ==)\n\n``` language-js\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\n```\n\n## Options\n\nThis rule may be configured with either an object or a number.\n\nIf the option is an object, it may contain one or both of:\n\n- `ignoreExpressions`: a boolean option (defaulted to `false`) to ignore class expressions.\n- `max`: a numeric option (defaulted to 1) to specify the maximum number of classes.\n\nFor example:\n\n``` language-json\n{\n    \"max-classes-per-file\": [\"error\", 1]\n}\n```\n\n``` language-json\n{\n    \"max-classes-per-file\": [\n        \"error\",\n        { \"ignoreExpressions\": true, \"max\": 2 }\n    ]\n}\n```\n\nExamples of **correct** code for this rule with the `max` option set to `2`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtYXgtY2xhc3Nlcy1wZXItZmlsZTogW1wiZXJyb3JcIiwgMl0gKi9cblxuY2xhc3MgRm9vIHt9XG5jbGFzcyBCYXIge30ifQ==)\n\n``` language-js\n/* eslint max-classes-per-file: [\"error\", 2] */\n\nclass Foo {}\nclass Bar {}\n```\n\nExamples of **correct** code for this rule with the `ignoreExpressions` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtYXgtY2xhc3Nlcy1wZXItZmlsZTogW1wiZXJyb3JcIiwgeyBpZ25vcmVFeHByZXNzaW9uczogdHJ1ZSB9XSAqL1xuXG5jbGFzcyBWaXNpdG9yRmFjdG9yeSB7XG4gICAgZm9yRGVzY3JpcHRvcihkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybiBjbGFzcyB7XG4gICAgICAgICAgICB2aXNpdChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBWaXNpdGluZyAke2Rlc2NyaXB0b3J9LmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufSJ9)\n\n``` language-js\n/* eslint max-classes-per-file: [\"error\", { ignoreExpressions: true }] */\n\nclass VisitorFactory {\n    forDescriptor(descriptor) {\n        return class {\n            visit(node) {\n                return `Visiting ${descriptor}.`;\n            }\n        };\n    }\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v5.0.0-alpha.3.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-classes-per-file.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-classes-per-file.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-classes-per-file](https://eslint.org/docs/latest/rules/max-classes-per-file)"
- name: max-depth
  id: rules/max-depth
  summary: Many developers consider code difficult to read if blocks are nested beyond a certain depth
  description: "# max-depth\n\nEnforce a maximum depth that blocks can be nested\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nMany developers consider code difficult to read if blocks are nested beyond a certain depth.\n\n## Rule Details\n\nThis rule enforces a maximum depth that blocks can be nested to reduce code complexity.\n\n## Options\n\nThis rule has a number or object option:\n\n- `\"max\"` (default `4`) enforces a maximum depth that blocks can be nested\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1kZXB0aDogW1wiZXJyb3JcIiwgNF0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgZm9yICg7OykgeyAvLyBOZXN0ZWQgMSBkZWVwXG4gICAgICAgIHdoaWxlICh0cnVlKSB7IC8vIE5lc3RlZCAyIGRlZXBcbiAgICAgICAgICAgIGlmICh0cnVlKSB7IC8vIE5lc3RlZCAzIGRlZXBcbiAgICAgICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyBOZXN0ZWQgNCBkZWVwXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cnVlKSB7IC8vIE5lc3RlZCA1IGRlZXBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint max-depth: [\"error\", 4]*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        while (true) { // Nested 2 deep\n            if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                    if (true) { // Nested 5 deep\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1kZXB0aDogW1wiZXJyb3JcIiwgNF0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgZm9yICg7OykgeyAvLyBOZXN0ZWQgMSBkZWVwXG4gICAgICAgIHdoaWxlICh0cnVlKSB7IC8vIE5lc3RlZCAyIGRlZXBcbiAgICAgICAgICAgIGlmICh0cnVlKSB7IC8vIE5lc3RlZCAzIGRlZXBcbiAgICAgICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyBOZXN0ZWQgNCBkZWVwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint max-depth: [\"error\", 4]*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        while (true) { // Nested 2 deep\n            if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                }\n            }\n        }\n    }\n}\n```\n\nNote that class static blocks do not count as nested blocks, and that the depth in them is calculated separately from the enclosing context.\n\nExamples of **incorrect** code for this rule with `{ \"max\": 2 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1kZXB0aDogW1wiZXJyb3JcIiwgMl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgaWYgKHRydWUpIHsgLy8gTmVzdGVkIDEgZGVlcFxuICAgICAgICBjbGFzcyBDIHtcbiAgICAgICAgICAgIHN0YXRpYyB7XG4gICAgICAgICAgICAgICAgaWYgKHRydWUpIHsgLy8gTmVzdGVkIDEgZGVlcFxuICAgICAgICAgICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyBOZXN0ZWQgMiBkZWVwXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyBOZXN0ZWQgMyBkZWVwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint max-depth: [\"error\", 2]*/\n\nfunction foo() {\n    if (true) { // Nested 1 deep\n        class C {\n            static {\n                if (true) { // Nested 1 deep\n                    if (true) { // Nested 2 deep\n                        if (true) { // Nested 3 deep\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with `{ \"max\": 2 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1kZXB0aDogW1wiZXJyb3JcIiwgMl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgaWYgKHRydWUpIHsgLy8gTmVzdGVkIDEgZGVlcFxuICAgICAgICBjbGFzcyBDIHtcbiAgICAgICAgICAgIHN0YXRpYyB7XG4gICAgICAgICAgICAgICAgaWYgKHRydWUpIHsgLy8gTmVzdGVkIDEgZGVlcFxuICAgICAgICAgICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyBOZXN0ZWQgMiBkZWVwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint max-depth: [\"error\", 2]*/\n\nfunction foo() {\n    if (true) { // Nested 1 deep\n        class C {\n            static {\n                if (true) { // Nested 1 deep\n                    if (true) { // Nested 2 deep\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-depth.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-depth.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-depth](https://eslint.org/docs/latest/rules/max-depth)"
- name: max-len
  id: rules/max-len
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# max-len\n\nEnforce a maximum line length\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [code](#code)\n    2.  [tabWidth](#tabwidth)\n    3.  [comments](#comments)\n    4.  [ignoreComments](#ignorecomments)\n    5.  [ignoreTrailingComments](#ignoretrailingcomments)\n    6.  [ignoreUrls](#ignoreurls)\n    7.  [ignoreStrings](#ignorestrings)\n    8.  [ignoreTemplateLiterals](#ignoretemplateliterals)\n    9.  [ignoreRegExpLiterals](#ignoreregexpliterals)\n    10. [ignorePattern](#ignorepattern)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/max-len) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n``` language-js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule can have up to two numbers as positional arguments (for `code` and `tabWidth` options), followed by an object option (provided positional arguments have priority):\n\n- `\"code\"` (default `80`) enforces a maximum line length\n- `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n- `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n- `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n- `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n- `\"ignoreTrailingComments\": true` ignores only trailing comments\n- `\"ignoreUrls\": true` ignores lines that contain a URL\n- `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n- `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n- `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJjb2RlXCI6IDgwIH1dKi9cblxudmFyIGZvbyA9IHsgXCJiYXJcIjogXCJUaGlzIGlzIGEgYmFyLlwiLCBcImJhelwiOiB7IFwicXV4XCI6IFwiVGhpcyBpcyBhIHF1eFwiIH0sIFwiZGlmZmljdWx0XCI6IFwidG8gcmVhZFwiIH07In0=)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJjb2RlXCI6IDgwIH1dKi9cblxudmFyIGZvbyA9IHtcbiAgXCJiYXJcIjogXCJUaGlzIGlzIGEgYmFyLlwiLFxuICBcImJhelwiOiB7IFwicXV4XCI6IFwiVGhpcyBpcyBhIHF1eFwiIH0sXG4gIFwiZWFzaWVyXCI6IFwidG8gcmVhZFwiXG59OyJ9)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJjb2RlXCI6IDgwLCBcInRhYldpZHRoXCI6IDQgfV0qL1xuXG5cdFx0dmFyIGZvbyA9IHsgXCJiYXJcIjogXCJUaGlzIGlzIGEgYmFyLlwiLCBcImJhelwiOiB7IFwicXV4XCI6IFwiVGhpcyBpcyBhIHF1eFwiIH0gfTsifQ==)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"code\": 80, \"tabWidth\": 4 }]*/\n\n        var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJjb2RlXCI6IDgwLCBcInRhYldpZHRoXCI6IDQgfV0qL1xuXG5cdFx0dmFyIGZvbyA9IHtcblx0XHRcdFx0XCJiYXJcIjogXCJUaGlzIGlzIGEgYmFyLlwiLFxuXHRcdFx0XHRcImJhelwiOiB7IFwicXV4XCI6IFwiVGhpcyBpcyBhIHF1eFwiIH1cblx0XHR9OyJ9)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"code\": 80, \"tabWidth\": 4 }]*/\n\n        var foo = {\n                \"bar\": \"This is a bar.\",\n                \"baz\": { \"qux\": \"This is a qux\" }\n        };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJjb21tZW50c1wiOiA2NSB9XSovXG5cbi8qKlxuICogVGhpcyBpcyBhIGNvbW1lbnQgdGhhdCB2aW9sYXRlcyB0aGUgbWF4aW11bSBsaW5lIGxlbmd0aCB3ZSBoYXZlIHNwZWNpZmllZFxuKiovIn0=)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVDb21tZW50c1wiOiB0cnVlIH1dKi9cblxuLyoqXG4gKiBUaGlzIGlzIGEgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBjb21tZW50XG4qKi8ifQ==)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVUcmFpbGluZ0NvbW1lbnRzXCI6IHRydWUgfV0qL1xuXG52YXIgZm9vID0gJ2Jhcic7IC8vIFRoaXMgaXMgYSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBjb21tZW50In0=)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVVcmxzXCI6IHRydWUgfV0qL1xuXG52YXIgdXJsID0gJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tL3JlYWxseS9yZWFsbHkvcmVhbGx5L3JlYWxseS9yZWFsbHkvcmVhbGx5L3JlYWxseS9sb25nJzsifQ==)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVTdHJpbmdzXCI6IHRydWUgfV0qL1xuXG52YXIgbG9uZ1N0cmluZyA9ICd0aGlzIGlzIGEgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHN0cmluZyEnOyJ9)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVUZW1wbGF0ZUxpdGVyYWxzXCI6IHRydWUgfV0qL1xuXG52YXIgbG9uZ1RlbXBsYXRlTGl0ZXJhbCA9IGB0aGlzIGlzIGEgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRlbXBsYXRlIGxpdGVyYWwhYDsifQ==)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVSZWdFeHBMaXRlcmFsc1wiOiB0cnVlIH1dKi9cblxudmFyIGxvbmdSZWdFeHBMaXRlcmFsID0gL3RoaXMgaXMgYSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgcmVndWxhciBleHByZXNzaW9uIS87In0=)\n\n``` language-js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `ignorePattern` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1sZW46XG5bXCJlcnJvclwiLCB7IFwiaWdub3JlUGF0dGVyblwiOiBcIl5cXFxccyp2YXJcXFxccy4rPVxcXFxzKnJlcXVpcmVcXFxccypcXFxcKFwiIH1dKi9cblxudmFyIGRlcCA9IHJlcXVpcmUoJ3JlYWxseS9yZWFsbHkvcmVhbGx5L3JlYWxseS9yZWFsbHkvcmVhbGx5L3JlYWxseS9yZWFsbHkvbG9uZy9tb2R1bGUnKTsifQ==)\n\n``` language-js\n/*eslint max-len:\n[\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-len.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-len.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-len](https://eslint.org/docs/latest/rules/max-len)"
- name: max-lines
  id: rules/max-lines
  summary: Some people consider large files a code smell
  description: "# max-lines\n\nEnforce a maximum number of lines per file\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n    2.  [skipBlankLines](#skipblanklines)\n    3.  [skipComments](#skipcomments)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Further Reading](#further-reading)\n8.  [Resources](#resources)\n\nSome people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what’s going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.\n\n## Rule Details\n\nThis rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.\n\nPlease note that most editors show an additional empty line at the end if the file ends with a line break. This rule does not count that extra line.\n\n## Options\n\nThis rule has a number or object option:\n\n- `\"max\"` (default `300`) enforces a maximum number of lines in a file\n\n- `\"skipBlankLines\": true` ignore lines made up purely of whitespace.\n\n- `\"skipComments\": true` ignore lines containing just comments\n\n### max\n\nExamples of **incorrect** code for this rule with a max value of `2`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xudmFyIGEsXG4gICAgYixcbiAgICBjOyJ9)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\nvar a,\n    b,\n    c;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xuXG52YXIgYSxcbiAgICBiLGM7In0=)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\n\nvar a,\n    b,c;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xuLy8gYSBjb21tZW50XG52YXIgYSxcbiAgICBiLGM7In0=)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\n// a comment\nvar a,\n    b,c;\n```\n\nExamples of **correct** code for this rule with a max value of `2`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xudmFyIGEsXG4gICAgYiwgYzsifQ==)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\nvar a,\n    b, c;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xuXG52YXIgYSwgYiwgYzsifQ==)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\n\nvar a, b, c;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwgMl0qL1xuLy8gYSBjb21tZW50XG52YXIgYSwgYiwgYzsifQ==)\n\n``` language-js\n/*eslint max-lines: [\"error\", 2]*/\n// a comment\nvar a, b, c;\n```\n\n### skipBlankLines\n\nExamples of **incorrect** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwge1wibWF4XCI6IDIsIFwic2tpcEJsYW5rTGluZXNcIjogdHJ1ZX1dKi9cblxudmFyIGEsXG4gICAgYixcbiAgICBjOyJ9)\n\n``` language-js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\n\nvar a,\n    b,\n    c;\n```\n\nExamples of **correct** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwge1wibWF4XCI6IDIsIFwic2tpcEJsYW5rTGluZXNcIjogdHJ1ZX1dKi9cblxudmFyIGEsXG4gICAgYiwgYzsifQ==)\n\n``` language-js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\n\nvar a,\n    b, c;\n```\n\n### skipComments\n\nExamples of **incorrect** code for this rule with the `{ \"skipComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwge1wibWF4XCI6IDIsIFwic2tpcENvbW1lbnRzXCI6IHRydWV9XSovXG4vLyBhIGNvbW1lbnRcbnZhciBhLFxuICAgIGIsXG4gICAgYzsifQ==)\n\n``` language-js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nvar a,\n    b,\n    c;\n```\n\nExamples of **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lczogW1wiZXJyb3JcIiwge1wibWF4XCI6IDIsIFwic2tpcENvbW1lbnRzXCI6IHRydWV9XSovXG4vLyBhIGNvbW1lbnRcbnZhciBhLFxuICAgIGIsIGM7In0=)\n\n``` language-js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nvar a,\n    b, c;\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of lines in your files.\n\n## Compatibility\n\n- **JSCS**: [maximumNumberOfLines](https://jscs-dev.github.io/rule/maximumNumberOfLines)\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v2.12.0.\n\n## Further Reading\n\n[Software Module size and file size](https://web.archive.org/web/20160725154648/http://www.mind2b.com/component/content/article/24-software-module-size-and-file-size)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-lines.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-lines.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-lines](https://eslint.org/docs/latest/rules/max-lines)"
- name: max-lines-per-function
  id: rules/max-lines-per-function
  summary: Some people consider large functions a code smell
  description: "# max-lines-per-function\n\nEnforce a maximum number of lines of code in a function\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Why not use max-statements or other complexity measurement rules instead?](#why-not-use-max-statements-or-other-complexity-measurement-rules-instead)\n2.  [Options](#options)\n    1.  [code](#code)\n    2.  [skipBlankLines](#skipblanklines)\n    3.  [skipComments](#skipcomments)\n    4.  [IIFEs](#iifes)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nSome people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what’s going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.\n\n## Rule Details\n\nThis rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.\n\n### Why not use `max-statements` or other complexity measurement rules instead?\n\nNested long method chains like the below example are often broken onto separate lines for readability:\n\n``` language-js\nfunction() {\n    return m(\"div\", [\n        m(\"table\", {className: \"table table-striped latest-data\"}, [\n            m(\"tbody\",\n                data.map(function(db) {\n                    return m(\"tr\", {key: db.dbname}, [\n                        m(\"td\", {className: \"dbname\"}, db.dbname),\n                        m(\"td\", {className: \"query-count\"},  [\n                            m(\"span\", {className: db.lastSample.countClassName}, db.lastSample.nbQueries)\n                        ])\n                    ])\n                })\n            )\n        ])\n    ])\n}\n```\n\n- `max-statements` will only report this as 1 statement, despite being 16 lines of code.\n- `complexity` will only report a complexity of 1\n- `max-nested-callbacks` will only report 1\n- `max-depth` will report a depth of 0\n\n## Options\n\nThis rule has the following options that can be specified using an object:\n\n- `\"max\"` (default `50`) enforces a maximum number of lines in a function.\n\n- `\"skipBlankLines\"` (default `false`) ignore lines made up purely of whitespace.\n\n- `\"skipComments\"` (default `false`) ignore lines containing just comments.\n\n- `\"IIFEs\"` (default `false`) include any code included in IIFEs.\n\nAlternatively, you may specify a single integer for the `max` option:\n\n``` language-json\n\"max-lines-per-function\": [\"error\", 20]\n```\n\nis equivalent to\n\n``` language-json\n\"max-lines-per-function\": [\"error\", { \"max\": 20 }]\n```\n\n### code\n\nExamples of **incorrect** code for this rule with a particular max value:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDJdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 2]*/\nfunction foo() {\n    var x = 0;\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDNdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBhIGNvbW1lbnRcbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDRdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBhIGNvbW1lbnQgZm9sbG93ZWQgYnkgYSBibGFuayBsaW5lXG5cbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 4]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with a particular max value:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDNdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    var x = 0;\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDRdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBhIGNvbW1lbnRcbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 4]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIDVdKi9cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBhIGNvbW1lbnQgZm9sbG93ZWQgYnkgYSBibGFuayBsaW5lXG5cbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", 5]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    var x = 0;\n}\n```\n\n### skipBlankLines\n\nExamples of **incorrect** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAyLCBcInNraXBCbGFua0xpbmVzXCI6IHRydWV9XSovXG5mdW5jdGlvbiBmb28oKSB7XG5cbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\nfunction foo() {\n\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAzLCBcInNraXBCbGFua0xpbmVzXCI6IHRydWV9XSovXG5mdW5jdGlvbiBmb28oKSB7XG5cbiAgICB2YXIgeCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"skipBlankLines\": true}]*/\nfunction foo() {\n\n    var x = 0;\n}\n```\n\n### skipComments\n\nExamples of **incorrect** code for this rule with the `{ \"skipComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAyLCBcInNraXBDb21tZW50c1wiOiB0cnVlfV0qL1xuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIGEgY29tbWVudFxuICAgIHZhciB4ID0gMDtcbn0ifQ==)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAzLCBcInNraXBDb21tZW50c1wiOiB0cnVlfV0qL1xuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIGEgY29tbWVudFxuICAgIHZhciB4ID0gMDtcbn0ifQ==)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"skipComments\": true}]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n### IIFEs\n\nExamples of **incorrect** code for this rule with the `{ \"IIFEs\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAyLCBcIklJRkVzXCI6IHRydWV9XSovXG4oZnVuY3Rpb24oKXtcbiAgICB2YXIgeCA9IDA7XG59KCkpO1xuXG4oKCkgPT4ge1xuICAgIHZhciB4ID0gMDtcbn0pKCk7In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"IIFEs\": true}]*/\n(function(){\n    var x = 0;\n}());\n\n(() => {\n    var x = 0;\n})();\n```\n\nExamples of **correct** code for this rule with the `{ \"IIFEs\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1saW5lcy1wZXItZnVuY3Rpb246IFtcImVycm9yXCIsIHtcIm1heFwiOiAzLCBcIklJRkVzXCI6IHRydWV9XSovXG4oZnVuY3Rpb24oKXtcbiAgICB2YXIgeCA9IDA7XG59KCkpO1xuXG4oKCkgPT4ge1xuICAgIHZhciB4ID0gMDtcbn0pKCk7In0=)\n\n``` language-js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"IIFEs\": true}]*/\n(function(){\n    var x = 0;\n}());\n\n(() => {\n    var x = 0;\n})();\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of lines in your functions.\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-lines](max-lines)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n- [max-statements-per-line](max-statements-per-line)\n\n## Version\n\nThis rule was introduced in ESLint v5.0.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-lines-per-function.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-lines-per-function.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-lines-per-function](https://eslint.org/docs/latest/rules/max-lines-per-function)"
- name: max-nested-callbacks
  id: rules/max-nested-callbacks
  summary: Many JavaScript libraries use the callback pattern to manage asynchronous operations
  description: "# max-nested-callbacks\n\nEnforce a maximum depth that callbacks can be nested\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nMany JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.\n\n``` language-js\nfoo(function () {\n    bar(function () {\n        baz(function() {\n            qux(function () {\n\n            });\n        });\n    });\n});\n```\n\n## Rule Details\n\nThis rule enforces a maximum depth that callbacks can be nested to increase code clarity.\n\n## Options\n\nThis rule has a number or object option:\n\n- `\"max\"` (default `10`) enforces a maximum depth that callbacks can be nested\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 3 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1uZXN0ZWQtY2FsbGJhY2tzOiBbXCJlcnJvclwiLCAzXSovXG5cbmZvbzEoZnVuY3Rpb24oKSB7XG4gICAgZm9vMihmdW5jdGlvbigpIHtcbiAgICAgICAgZm9vMyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvbzQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gc29tZXRoaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsifQ==)\n\n``` language-js\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(function() {\n    foo2(function() {\n        foo3(function() {\n            foo4(function() {\n                // Do something\n            });\n        });\n    });\n});\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 3 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1uZXN0ZWQtY2FsbGJhY2tzOiBbXCJlcnJvclwiLCAzXSovXG5cbmZvbzEoaGFuZGxlRm9vMSk7XG5cbmZ1bmN0aW9uIGhhbmRsZUZvbzEoKSB7XG4gICAgZm9vMihoYW5kbGVGb28yKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9vMigpIHtcbiAgICBmb28zKGhhbmRsZUZvbzMpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVGb28zKCkge1xuICAgIGZvbzQoaGFuZGxlRm9vNCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvbzQoKSB7XG4gICAgZm9vNSgpO1xufSJ9)\n\n``` language-js\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(handleFoo1);\n\nfunction handleFoo1() {\n    foo2(handleFoo2);\n}\n\nfunction handleFoo2() {\n    foo3(handleFoo3);\n}\n\nfunction handleFoo3() {\n    foo4(handleFoo4);\n}\n\nfunction handleFoo4() {\n    foo5();\n}\n```\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v0.2.0.\n\n## Further Reading\n\n[7. Control flow - Mixu’s Node book](http://book.mixu.net/node/ch7.html)  \n\n[Control Flow in Node - How To Node - NodeJS](https://web.archive.org/web/20220104141150/https://howtonode.org/control-flow)  \n\n[Control Flow in Node Part II - How To Node - NodeJS](https://web.archive.org/web/20220127215850/https://howtonode.org/control-flow-part-ii)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-nested-callbacks.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-nested-callbacks.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-nested-callbacks](https://eslint.org/docs/latest/rules/max-nested-callbacks)"
- name: max-params
  id: rules/max-params
  summary: Functions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in
  description: "# max-params\n\nEnforce a maximum number of parameters in function definitions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nFunctions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.\n\n``` language-js\nfunction foo (bar, baz, qux, qxx) { // four parameters, may be too many\n    doSomething();\n}\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of parameters allowed in function definitions.\n\n## Options\n\nThis rule has a number or object option:\n\n- `\"max\"` (default `3`) enforces a maximum number of parameters in function definitions\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 3 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1wYXJhbXM6IFtcImVycm9yXCIsIDNdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28xIChiYXIsIGJheiwgcXV4LCBxeHgpIHtcbiAgICBkb1NvbWV0aGluZygpO1xufVxuXG5sZXQgZm9vMiA9IChiYXIsIGJheiwgcXV4LCBxeHgpID0+IHtcbiAgICBkb1NvbWV0aGluZygpO1xufTsifQ==)\n\n``` language-js\n/*eslint max-params: [\"error\", 3]*/\n/*eslint-env es6*/\n\nfunction foo1 (bar, baz, qux, qxx) {\n    doSomething();\n}\n\nlet foo2 = (bar, baz, qux, qxx) => {\n    doSomething();\n};\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 3 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1wYXJhbXM6IFtcImVycm9yXCIsIDNdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28xIChiYXIsIGJheiwgcXV4KSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbn1cblxubGV0IGZvbzIgPSAoYmFyLCBiYXosIHF1eCkgPT4ge1xuICAgIGRvU29tZXRoaW5nKCk7XG59OyJ9)\n\n``` language-js\n/*eslint max-params: [\"error\", 3]*/\n/*eslint-env es6*/\n\nfunction foo1 (bar, baz, qux) {\n    doSomething();\n}\n\nlet foo2 = (bar, baz, qux) => {\n    doSomething();\n};\n```\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-params.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-params.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-params](https://eslint.org/docs/latest/rules/max-params)"
- name: max-statements
  id: rules/max-statements
  summary: The max-statements rule allows you to specify the maximum number of statements allowed in a function
  description: "# max-statements\n\nEnforce a maximum number of statements allowed in function blocks\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n    2.  [ignoreTopLevelFunctions](#ignoretoplevelfunctions)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe `max-statements` rule allows you to specify the maximum number of statements allowed in a function.\n\n``` language-js\nfunction foo() {\n  var bar = 1; // one statement\n  var baz = 2; // two statements\n  var qux = 3; // three statements\n}\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of statements allowed in function blocks.\n\n## Options\n\nThis rule has a number or object option:\n\n- `\"max\"` (default `10`) enforces a maximum number of statements allows in function blocks\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\nThis rule has an object option:\n\n- `\"ignoreTopLevelFunctions\": true` ignores top-level functions\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 10 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbXCJlcnJvclwiLCAxMF0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgdmFyIGZvbzEgPSAxO1xuICB2YXIgZm9vMiA9IDI7XG4gIHZhciBmb28zID0gMztcbiAgdmFyIGZvbzQgPSA0O1xuICB2YXIgZm9vNSA9IDU7XG4gIHZhciBmb282ID0gNjtcbiAgdmFyIGZvbzcgPSA3O1xuICB2YXIgZm9vOCA9IDg7XG4gIHZhciBmb285ID0gOTtcbiAgdmFyIGZvbzEwID0gMTA7XG5cbiAgdmFyIGZvbzExID0gMTE7IC8vIFRvbyBtYW55LlxufVxuXG5sZXQgYmFyID0gKCkgPT4ge1xuICB2YXIgZm9vMSA9IDE7XG4gIHZhciBmb28yID0gMjtcbiAgdmFyIGZvbzMgPSAzO1xuICB2YXIgZm9vNCA9IDQ7XG4gIHZhciBmb281ID0gNTtcbiAgdmFyIGZvbzYgPSA2O1xuICB2YXIgZm9vNyA9IDc7XG4gIHZhciBmb284ID0gODtcbiAgdmFyIGZvbzkgPSA5O1xuICB2YXIgZm9vMTAgPSAxMDtcblxuICB2YXIgZm9vMTEgPSAxMTsgLy8gVG9vIG1hbnkuXG59OyJ9)\n\n``` language-js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n}\n\nlet bar = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n};\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 10 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbXCJlcnJvclwiLCAxMF0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgdmFyIGZvbzEgPSAxO1xuICB2YXIgZm9vMiA9IDI7XG4gIHZhciBmb28zID0gMztcbiAgdmFyIGZvbzQgPSA0O1xuICB2YXIgZm9vNSA9IDU7XG4gIHZhciBmb282ID0gNjtcbiAgdmFyIGZvbzcgPSA3O1xuICB2YXIgZm9vOCA9IDg7XG4gIHZhciBmb285ID0gOTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgLy8gMTBcblxuICAgIC8vIFRoZSBudW1iZXIgb2Ygc3RhdGVtZW50cyBpbiB0aGUgaW5uZXIgZnVuY3Rpb24gZG9lcyBub3QgY291bnQgdG93YXJkIHRoZVxuICAgIC8vIHN0YXRlbWVudCBtYXhpbXVtLlxuXG4gICAgdmFyIGJhcjtcbiAgICB2YXIgYmF6O1xuICAgIHJldHVybiA0MjtcbiAgfTtcbn1cblxubGV0IGJhciA9ICgpID0+IHtcbiAgdmFyIGZvbzEgPSAxO1xuICB2YXIgZm9vMiA9IDI7XG4gIHZhciBmb28zID0gMztcbiAgdmFyIGZvbzQgPSA0O1xuICB2YXIgZm9vNSA9IDU7XG4gIHZhciBmb282ID0gNjtcbiAgdmFyIGZvbzcgPSA3O1xuICB2YXIgZm9vOCA9IDg7XG4gIHZhciBmb285ID0gOTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgLy8gMTBcblxuICAgIC8vIFRoZSBudW1iZXIgb2Ygc3RhdGVtZW50cyBpbiB0aGUgaW5uZXIgZnVuY3Rpb24gZG9lcyBub3QgY291bnQgdG93YXJkIHRoZVxuICAgIC8vIHN0YXRlbWVudCBtYXhpbXVtLlxuXG4gICAgdmFyIGJhcjtcbiAgICB2YXIgYmF6O1xuICAgIHJldHVybiA0MjtcbiAgfTtcbn0ifQ==)\n\n``` language-js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  return function () { // 10\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    var bar;\n    var baz;\n    return 42;\n  };\n}\n\nlet bar = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  return function () { // 10\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    var bar;\n    var baz;\n    return 42;\n  };\n}\n```\n\nNote that this rule does not apply to class static blocks, and that statements in class static blocks do not count as statements in the enclosing function.\n\nExamples of **correct** code for this rule with `{ \"max\": 2 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbXCJlcnJvclwiLCAyXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICBsZXQgb25lO1xuICAgIGxldCB0d28gPSBjbGFzcyB7XG4gICAgICAgIHN0YXRpYyB7XG4gICAgICAgICAgICBsZXQgdGhyZWU7XG4gICAgICAgICAgICBsZXQgZm91cjtcbiAgICAgICAgICAgIGxldCBmaXZlO1xuICAgICAgICAgICAgaWYgKHNpeCkge1xuICAgICAgICAgICAgICAgIGxldCBzZXZlbjtcbiAgICAgICAgICAgICAgICBsZXQgZWlnaHQ7XG4gICAgICAgICAgICAgICAgbGV0IG5pbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSJ9)\n\n``` language-js\n/*eslint max-statements: [\"error\", 2]*/\n\nfunction foo() {\n    let one;\n    let two = class {\n        static {\n            let three;\n            let four;\n            let five;\n            if (six) {\n                let seven;\n                let eight;\n                let nine;\n            }\n        }\n    };\n}\n```\n\n### ignoreTopLevelFunctions\n\nExamples of additional **correct** code for this rule with the `{ \"max\": 10 }, { \"ignoreTopLevelFunctions\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbXCJlcnJvclwiLCAxMCwgeyBcImlnbm9yZVRvcExldmVsRnVuY3Rpb25zXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gIHZhciBmb28xID0gMTtcbiAgdmFyIGZvbzIgPSAyO1xuICB2YXIgZm9vMyA9IDM7XG4gIHZhciBmb280ID0gNDtcbiAgdmFyIGZvbzUgPSA1O1xuICB2YXIgZm9vNiA9IDY7XG4gIHZhciBmb283ID0gNztcbiAgdmFyIGZvbzggPSA4O1xuICB2YXIgZm9vOSA9IDk7XG4gIHZhciBmb28xMCA9IDEwO1xuICB2YXIgZm9vMTEgPSAxMTtcbn0ifQ==)\n\n``` language-js\n/*eslint max-statements: [\"error\", 10, { \"ignoreTopLevelFunctions\": true }]*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  var foo11 = 11;\n}\n```\n\n## Related Rules\n\n- [complexity](complexity)\n- [max-depth](max-depth)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-statements.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-statements.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-statements](https://eslint.org/docs/latest/rules/max-statements)"
- name: max-statements-per-line
  id: rules/max-statements-per-line
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# max-statements-per-line\n\nEnforce a maximum number of statements allowed per line\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [max](#max)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/max-statements-per-line) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nA line of code containing too many statements can be difficult to read. Code is generally read from the top down, especially when scanning, so limiting the number of statements allowed on a single line can be very beneficial for readability and maintainability.\n\n``` language-js\nfunction foo () { var bar; if (condition) { bar = 1; } else { bar = 2; } return true; } // too many statements\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of statements allowed per line.\n\n## Options\n\n### max\n\nThe “max” object property is optional (default: 1).\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzLXBlci1saW5lOiBbXCJlcnJvclwiLCB7IFwibWF4XCI6IDEgfV0qL1xuXG52YXIgYmFyOyB2YXIgYmF6O1xuaWYgKGNvbmRpdGlvbikgeyBiYXIgPSAxOyB9XG5mb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7IGJhciA9IDE7IH1cbnN3aXRjaCAoZGlzY3JpbWluYW50KSB7IGRlZmF1bHQ6IGJyZWFrOyB9XG5mdW5jdGlvbiBmb28oKSB7IGJhciA9IDE7IH1cbnZhciBxdXggPSBmdW5jdGlvbiBxdXgoKSB7IGJhciA9IDE7IH07XG4oZnVuY3Rpb24gZm9vKCkgeyBiYXIgPSAxOyB9KSgpOyJ9)\n\n``` language-js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar; var baz;\nif (condition) { bar = 1; }\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar qux = function qux() { bar = 1; };\n(function foo() { bar = 1; })();\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 1 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzLXBlci1saW5lOiBbXCJlcnJvclwiLCB7IFwibWF4XCI6IDEgfV0qL1xuXG52YXIgYmFyLCBiYXo7XG5pZiAoY29uZGl0aW9uKSBiYXIgPSAxO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSk7XG5zd2l0Y2ggKGRpc2NyaW1pbmFudCkgeyBkZWZhdWx0OiB9XG5mdW5jdGlvbiBmb28oKSB7IH1cbnZhciBxdXggPSBmdW5jdGlvbiBxdXgoKSB7IH07XG4oZnVuY3Rpb24gZm9vKCkgeyB9KSgpOyJ9)\n\n``` language-js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar, baz;\nif (condition) bar = 1;\nfor (var i = 0; i < length; ++i);\nswitch (discriminant) { default: }\nfunction foo() { }\nvar qux = function qux() { };\n(function foo() { })();\n```\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 2 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzLXBlci1saW5lOiBbXCJlcnJvclwiLCB7IFwibWF4XCI6IDIgfV0qL1xuXG52YXIgYmFyOyB2YXIgYmF6OyB2YXIgcXV4O1xuaWYgKGNvbmRpdGlvbikgeyBiYXIgPSAxOyB9IGVsc2UgeyBiYXogPSAyOyB9XG5mb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7IGJhciA9IDE7IGJheiA9IDI7IH1cbnN3aXRjaCAoZGlzY3JpbWluYW50KSB7IGNhc2UgJ3Rlc3QnOiBicmVhazsgZGVmYXVsdDogYnJlYWs7IH1cbmZ1bmN0aW9uIGZvbygpIHsgYmFyID0gMTsgYmF6ID0gMjsgfVxudmFyIHF1eCA9IGZ1bmN0aW9uIHF1eCgpIHsgYmFyID0gMTsgYmF6ID0gMjsgfTtcbihmdW5jdGlvbiBmb28oKSB7IGJhciA9IDE7IGJheiA9IDI7IH0pKCk7In0=)\n\n``` language-js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz; var qux;\nif (condition) { bar = 1; } else { baz = 2; }\nfor (var i = 0; i < length; ++i) { bar = 1; baz = 2; }\nswitch (discriminant) { case 'test': break; default: break; }\nfunction foo() { bar = 1; baz = 2; }\nvar qux = function qux() { bar = 1; baz = 2; };\n(function foo() { bar = 1; baz = 2; })();\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 2 }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG1heC1zdGF0ZW1lbnRzLXBlci1saW5lOiBbXCJlcnJvclwiLCB7IFwibWF4XCI6IDIgfV0qL1xuXG52YXIgYmFyOyB2YXIgYmF6O1xuaWYgKGNvbmRpdGlvbikgYmFyID0gMTsgaWYgKGNvbmRpdGlvbikgYmF6ID0gMjtcbmZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsgYmFyID0gMTsgfVxuc3dpdGNoIChkaXNjcmltaW5hbnQpIHsgZGVmYXVsdDogYnJlYWs7IH1cbmZ1bmN0aW9uIGZvbygpIHsgYmFyID0gMTsgfVxudmFyIHF1eCA9IGZ1bmN0aW9uIHF1eCgpIHsgYmFyID0gMTsgfTtcbihmdW5jdGlvbiBmb28oKSB7IHZhciBiYXIgPSAxOyB9KSgpOyJ9)\n\n``` language-js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz;\nif (condition) bar = 1; if (condition) baz = 2;\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar qux = function qux() { bar = 1; };\n(function foo() { var bar = 1; })();\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of statements on each line.\n\n## Related Rules\n\n- [max-depth](max-depth)\n- [max-len](max-len)\n- [max-lines](max-lines)\n- [max-lines-per-function](max-lines-per-function)\n- [max-nested-callbacks](max-nested-callbacks)\n- [max-params](max-params)\n- [max-statements](max-statements)\n\n## Version\n\nThis rule was introduced in ESLint v2.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/max-statements-per-line.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/max-statements-per-line.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/max-statements-per-line](https://eslint.org/docs/latest/rules/max-statements-per-line)"
- name: multiline-comment-style
  id: rules/multiline-comment-style
  summary: Many style guides require a particular style for comments that span multiple lines
  description: "# multiline-comment-style\n\nEnforce a particular style for multiline comments\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](multiline-comment-style../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Options](#options)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nMany style guides require a particular style for comments that span multiple lines. For example, some style guides prefer the use of a single block comment for multiline comments, whereas other style guides prefer consecutive line comments.\n\n## Rule Details\n\nThis rule aims to enforce a particular style for multiline comments.\n\n### Options\n\nThis rule has a string option, which can have one of the following values:\n\n- `\"starred-block\"` (default): Disallows consecutive line comments in favor of block comments. Additionally, requires block comments to have an aligned `*` character before each line.\n- `\"bare-block\"`: Disallows consecutive line comments in favor of block comments, and disallows block comments from having a `\"*\"` character before each line. This option ignores JSDoc comments.\n- `\"separate-lines\"`: Disallows block comments in favor of consecutive line comments. By default, this option ignores JSDoc comments. To also apply this rule to JSDoc comments, set the `checkJSDoc` option to `true`.\n\nThe rule always ignores directive comments such as `/* eslint-disable */`.\n\nExamples of **incorrect** code for this rule with the default `\"starred-block\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6IlxuLyogZXNsaW50IG11bHRpbGluZS1jb21tZW50LXN0eWxlOiBbXCJlcnJvclwiLCBcInN0YXJyZWQtYmxvY2tcIl0gKi9cblxuLy8gdGhpcyBsaW5lXG4vLyBjYWxscyBmb28oKVxuZm9vKCk7XG5cbi8qIHRoaXMgbGluZVxuY2FsbHMgZm9vKCkgKi9cbmZvbygpO1xuXG4vKiB0aGlzIGNvbW1lbnRcbiAqIGlzIG1pc3NpbmcgYSBuZXdsaW5lIGFmdGVyIC8qXG4gKi9cblxuLypcbiAqIHRoaXMgY29tbWVudFxuICogaXMgbWlzc2luZyBhIG5ld2xpbmUgYXQgdGhlIGVuZCAqL1xuXG4vKlxuKiB0aGUgc3RhciBpbiB0aGlzIGxpbmUgc2hvdWxkIGhhdmUgYSBzcGFjZSBiZWZvcmUgaXRcbiAqL1xuXG4vKlxuICogdGhlIHN0YXIgb24gdGhlIGZvbGxvd2luZyBsaW5lIHNob3VsZCBoYXZlIGEgc3BhY2UgYmVmb3JlIGl0XG4qL1xuIn0=)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"starred-block\"] */\n\n// this line\n// calls foo()\nfoo();\n\n/* this line\ncalls foo() */\nfoo();\n\n/* this comment\n * is missing a newline after /*\n */\n\n/*\n * this comment\n * is missing a newline at the end */\n\n/*\n* the star in this line should have a space before it\n */\n\n/*\n * the star on the following line should have a space before it\n*/\n```\n\nExamples of **correct** code for this rule with the default `\"starred-block\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtdWx0aWxpbmUtY29tbWVudC1zdHlsZTogW1wiZXJyb3JcIiwgXCJzdGFycmVkLWJsb2NrXCJdICovXG5cbi8qXG4gKiB0aGlzIGxpbmVcbiAqIGNhbGxzIGZvbygpXG4gKi9cbmZvbygpO1xuXG4vLyBzaW5nbGUtbGluZSBjb21tZW50In0=)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"starred-block\"] */\n\n/*\n * this line\n * calls foo()\n */\nfoo();\n\n// single-line comment\n```\n\nExamples of **incorrect** code for this rule with the `\"bare-block\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtdWx0aWxpbmUtY29tbWVudC1zdHlsZTogW1wiZXJyb3JcIiwgXCJiYXJlLWJsb2NrXCJdICovXG5cbi8vIHRoaXMgbGluZVxuLy8gY2FsbHMgZm9vKClcbmZvbygpO1xuXG4vKlxuICogdGhpcyBsaW5lXG4gKiBjYWxscyBmb28oKVxuICovXG5mb28oKTsifQ==)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"bare-block\"] */\n\n// this line\n// calls foo()\nfoo();\n\n/*\n * this line\n * calls foo()\n */\nfoo();\n```\n\nExamples of **correct** code for this rule with the `\"bare-block\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtdWx0aWxpbmUtY29tbWVudC1zdHlsZTogW1wiZXJyb3JcIiwgXCJiYXJlLWJsb2NrXCJdICovXG5cbi8qIHRoaXMgbGluZVxuICAgY2FsbHMgZm9vKCkgKi9cbmZvbygpOyJ9)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"bare-block\"] */\n\n/* this line\n   calls foo() */\nfoo();\n```\n\nExamples of **incorrect** code for this rule with the `\"separate-lines\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6IlxuLyogZXNsaW50IG11bHRpbGluZS1jb21tZW50LXN0eWxlOiBbXCJlcnJvclwiLCBcInNlcGFyYXRlLWxpbmVzXCJdICovXG5cbi8qIFRoaXMgbGluZVxuY2FsbHMgZm9vKCkgKi9cbmZvbygpO1xuXG4vKlxuICogVGhpcyBsaW5lXG4gKiBjYWxscyBmb28oKVxuICovXG5mb28oKTtcbiJ9)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\"] */\n\n/* This line\ncalls foo() */\nfoo();\n\n/*\n * This line\n * calls foo()\n */\nfoo();\n```\n\nExamples of **correct** code for this rule with the `\"separate-lines\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtdWx0aWxpbmUtY29tbWVudC1zdHlsZTogW1wiZXJyb3JcIiwgXCJzZXBhcmF0ZS1saW5lc1wiXSAqL1xuXG4vLyBUaGlzIGxpbmVcbi8vIGNhbGxzIGZvbygpXG5mb28oKTtcbiJ9)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\"] */\n\n// This line\n// calls foo()\nfoo();\n```\n\nExamples of **incorrect** code for this rule with the `\"separate-lines\"` option and `checkJSDoc` set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6IlxuLyogZXNsaW50IG11bHRpbGluZS1jb21tZW50LXN0eWxlOiBbXCJlcnJvclwiLCBcInNlcGFyYXRlLWxpbmVzXCIsIHsgXCJjaGVja0pTRG9jXCI6IHRydWUgfV0gKi9cblxuLyoqXG4gKiBJIGFtIGEgSlNEb2MgY29tbWVudFxuICogYW5kIEknbSBub3QgYWxsb3dlZFxuICovXG5mb28oKTtcbiJ9)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\", { \"checkJSDoc\": true }] */\n\n/**\n * I am a JSDoc comment\n * and I'm not allowed\n */\nfoo();\n```\n\nExamples of **correct** code for this rule with the `\"separate-lines\"` option and `checkJSDoc` set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBtdWx0aWxpbmUtY29tbWVudC1zdHlsZTogW1wiZXJyb3JcIiwgXCJzZXBhcmF0ZS1saW5lc1wiLCB7IFwiY2hlY2tKU0RvY1wiOiB0cnVlIH1dICovXG5cbi8vIEkgYW0gYSBKU0RvYyBjb21tZW50XG4vLyBhbmQgSSdtIG5vdCBhbGxvd2VkXG5mb28oKTtcbiJ9)\n\n``` language-js\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\", { \"checkJSDoc\": true }] */\n\n// I am a JSDoc comment\n// and I'm not allowed\nfoo();\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce a particular style for multiline comments, you can disable the rule.\n\n## Version\n\nThis rule was introduced in ESLint v4.10.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/multiline-comment-style.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/multiline-comment-style.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/multiline-comment-style](https://eslint.org/docs/latest/rules/multiline-comment-style)"
- name: new-cap
  id: rules/new-cap
  summary: The new operator in JavaScript creates a new instance of a particular type of object
  description: "# new-cap\n\nRequire constructor names to begin with a capital letter\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [newIsCap](#newiscap)\n    2.  [capIsNew](#capisnew)\n    3.  [newIsCapExceptions](#newiscapexceptions)\n    4.  [newIsCapExceptionPattern](#newiscapexceptionpattern)\n    5.  [capIsNewExceptions](#capisnewexceptions)\n    6.  [capIsNewExceptionPattern](#capisnewexceptionpattern)\n    7.  [properties](#properties)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe `new` operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that `new` is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.\n\n``` language-js\nvar friend = new Person();\n```\n\n## Rule Details\n\nThis rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:\n\n- `Array`\n- `Boolean`\n- `Date`\n- `Error`\n- `Function`\n- `Number`\n- `Object`\n- `RegExp`\n- `String`\n- `Symbol`\n- `BigInt`\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGZvbyhhcmcpIHtcbiAgICByZXR1cm4gQm9vbGVhbihhcmcpO1xufSJ9)\n\n``` language-js\n/*eslint new-cap: \"error\"*/\n\nfunction foo(arg) {\n    return Boolean(arg);\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"newIsCap\": true` (default) requires all `new` operators to be called with uppercase-started functions.\n- `\"newIsCap\": false` allows `new` operators to be called with lowercase-started or uppercase-started functions.\n- `\"capIsNew\": true` (default) requires all uppercase-started functions to be called with `new` operators.\n- `\"capIsNew\": false` allows uppercase-started functions to be called without `new` operators.\n- `\"newIsCapExceptions\"` allows specified lowercase-started function names to be called with the `new` operator.\n- `\"newIsCapExceptionPattern\"` allows any lowercase-started function names that match the specified regex pattern to be called with the `new` operator.\n- `\"capIsNewExceptions\"` allows specified uppercase-started function names to be called without the `new` operator.\n- `\"capIsNewExceptionPattern\"` allows any uppercase-started function names that match the specified regex pattern to be called without the `new` operator.\n- `\"properties\": true` (default) enables checks on object properties\n- `\"properties\": false` disables checks on object properties\n\n### newIsCap\n\nExamples of **incorrect** code for this rule with the default `{ \"newIsCap\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcFwiOiB0cnVlIH1dKi9cblxudmFyIGZyaWVuZCA9IG5ldyBwZXJzb24oKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nvar friend = new person();\n```\n\nExamples of **correct** code for this rule with the default `{ \"newIsCap\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcFwiOiB0cnVlIH1dKi9cblxudmFyIGZyaWVuZCA9IG5ldyBQZXJzb24oKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nvar friend = new Person();\n```\n\nExamples of **correct** code for this rule with the `{ \"newIsCap\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcFwiOiBmYWxzZSB9XSovXG5cbnZhciBmcmllbmQgPSBuZXcgcGVyc29uKCk7In0=)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCap\": false }]*/\n\nvar friend = new person();\n```\n\n### capIsNew\n\nExamples of **incorrect** code for this rule with the default `{ \"capIsNew\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld1wiOiB0cnVlIH1dKi9cblxudmFyIGNvbGxlYWd1ZSA9IFBlcnNvbigpOyJ9)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nvar colleague = Person();\n```\n\nExamples of **correct** code for this rule with the default `{ \"capIsNew\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld1wiOiB0cnVlIH1dKi9cblxudmFyIGNvbGxlYWd1ZSA9IG5ldyBQZXJzb24oKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nvar colleague = new Person();\n```\n\nExamples of **correct** code for this rule with the `{ \"capIsNew\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld1wiOiBmYWxzZSB9XSovXG5cbnZhciBjb2xsZWFndWUgPSBQZXJzb24oKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNew\": false }]*/\n\nvar colleague = Person();\n```\n\n### newIsCapExceptions\n\nExamples of additional **correct** code for this rule with the `{ \"newIsCapExceptions\": [\"events\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcEV4Y2VwdGlvbnNcIjogW1wiZXZlbnRzXCJdIH1dKi9cblxudmFyIGV2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG52YXIgZW1pdHRlciA9IG5ldyBldmVudHMoKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCapExceptions\": [\"events\"] }]*/\n\nvar events = require('events');\n\nvar emitter = new events();\n```\n\n### newIsCapExceptionPattern\n\nExamples of additional **correct** code for this rule with the `{ \"newIsCapExceptionPattern\": \"^person\\\\..\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcEV4Y2VwdGlvblBhdHRlcm5cIjogXCJecGVyc29uXFxcXC4uXCIgfV0qL1xuXG52YXIgZnJpZW5kID0gbmV3IHBlcnNvbi5hY3F1YWludGFuY2UoKTtcblxudmFyIGJlc3RGcmllbmQgPSBuZXcgcGVyc29uLmZyaWVuZCgpOyJ9)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCapExceptionPattern\": \"^person\\\\..\" }]*/\n\nvar friend = new person.acquaintance();\n\nvar bestFriend = new person.friend();\n```\n\nExamples of additional **correct** code for this rule with the `{ \"newIsCapExceptionPattern\": \"\\\\.bar$\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJuZXdJc0NhcEV4Y2VwdGlvblBhdHRlcm5cIjogXCJcXFxcLmJhciRcIiB9XSovXG5cbnZhciBmcmllbmQgPSBuZXcgcGVyc29uLmJhcigpOyJ9)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"newIsCapExceptionPattern\": \"\\\\.bar$\" }]*/\n\nvar friend = new person.bar();\n```\n\n### capIsNewExceptions\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptions\": [\"Person\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld0V4Y2VwdGlvbnNcIjogW1wiUGVyc29uXCJdIH1dKi9cblxuZnVuY3Rpb24gZm9vKGFyZykge1xuICAgIHJldHVybiBQZXJzb24oYXJnKTtcbn0ifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptions\": [\"Person\"] }]*/\n\nfunction foo(arg) {\n    return Person(arg);\n}\n```\n\n### capIsNewExceptionPattern\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptionPattern\": \"^person\\\\..\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld0V4Y2VwdGlvblBhdHRlcm5cIjogXCJecGVyc29uXFxcXC4uXCIgfV0qL1xuXG52YXIgZnJpZW5kID0gcGVyc29uLkFjcXVhaW50YW5jZSgpO1xudmFyIGJlc3RGcmllbmQgPSBwZXJzb24uRnJpZW5kKCk7In0=)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptionPattern\": \"^person\\\\..\" }]*/\n\nvar friend = person.Acquaintance();\nvar bestFriend = person.Friend();\n```\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptionPattern\": \"\\\\.Bar$\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld0V4Y2VwdGlvblBhdHRlcm5cIjogXCJcXFxcLkJhciRcIiB9XSovXG5cbmZvby5CYXIoKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptionPattern\": \"\\\\.Bar$\" }]*/\n\nfoo.Bar();\n```\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptionPattern\": \"^Foo\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJjYXBJc05ld0V4Y2VwdGlvblBhdHRlcm5cIjogXCJeRm9vXCIgfV0qL1xuXG52YXIgeCA9IEZvbyg0Mik7XG5cbnZhciB5ID0gRm9vYmFyKDQyKTtcblxudmFyIHogPSBGb28uQmFyKDQyKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptionPattern\": \"^Foo\" }]*/\n\nvar x = Foo(42);\n\nvar y = Foobar(42);\n\nvar z = Foo.Bar(42);\n```\n\n### properties\n\nExamples of **incorrect** code for this rule with the default `{ \"properties\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJwcm9wZXJ0aWVzXCI6IHRydWUgfV0qL1xuXG52YXIgZnJpZW5kID0gbmV3IHBlcnNvbi5hY3F1YWludGFuY2UoKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"properties\": true }]*/\n\nvar friend = new person.acquaintance();\n```\n\nExamples of **correct** code for this rule with the default `{ \"properties\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJwcm9wZXJ0aWVzXCI6IHRydWUgfV0qL1xuXG52YXIgZnJpZW5kID0gbmV3IHBlcnNvbi5BY3F1YWludGFuY2UoKTsifQ==)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"properties\": true }]*/\n\nvar friend = new person.Acquaintance();\n```\n\nExamples of **correct** code for this rule with the `{ \"properties\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5ldy1jYXA6IFtcImVycm9yXCIsIHsgXCJwcm9wZXJ0aWVzXCI6IGZhbHNlIH1dKi9cblxudmFyIGZyaWVuZCA9IG5ldyBwZXJzb24uYWNxdWFpbnRhbmNlKCk7In0=)\n\n``` language-js\n/*eslint new-cap: [\"error\", { \"properties\": false }]*/\n\nvar friend = new person.acquaintance();\n```\n\n## When Not To Use It\n\nIf you have conventions that don’t require an uppercase letter for constructors, or don’t require capitalized functions be only used as constructors, turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.3-0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/new-cap.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/new-cap.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/new-cap](https://eslint.org/docs/latest/rules/new-cap)"
- name: no-alert
  id: rules/no-alert
  summary: JavaScript’s alert, confirm, and prompt functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation
  description: "# no-alert\n\nDisallow the use of `alert`, `confirm`, and `prompt`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nJavaScript’s `alert`, `confirm`, and `prompt` functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, `alert` is often used while debugging code, which should be removed before deployment to production.\n\n``` language-js\nalert(\"here!\");\n```\n\n## Rule Details\n\nThis rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters `alert`, `prompt`, and `confirm` function calls which are not shadowed.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFsZXJ0OiBcImVycm9yXCIqL1xuXG5hbGVydChcImhlcmUhXCIpO1xuXG5jb25maXJtKFwiQXJlIHlvdSBzdXJlP1wiKTtcblxucHJvbXB0KFwiV2hhdCdzIHlvdXIgbmFtZT9cIiwgXCJKb2huIERvZVwiKTsifQ==)\n\n``` language-js\n/*eslint no-alert: \"error\"*/\n\nalert(\"here!\");\n\nconfirm(\"Are you sure?\");\n\nprompt(\"What's your name?\", \"John Doe\");\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFsZXJ0OiBcImVycm9yXCIqL1xuXG5jdXN0b21BbGVydChcIlNvbWV0aGluZyBoYXBwZW5lZCFcIik7XG5cbmN1c3RvbUNvbmZpcm0oXCJBcmUgeW91IHN1cmU/XCIpO1xuXG5jdXN0b21Qcm9tcHQoXCJXaG8gYXJlIHlvdT9cIik7XG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYWxlcnQgPSBteUN1c3RvbUxpYi5jdXN0b21BbGVydDtcbiAgICBhbGVydCgpO1xufSJ9)\n\n``` language-js\n/*eslint no-alert: \"error\"*/\n\ncustomAlert(\"Something happened!\");\n\ncustomConfirm(\"Are you sure?\");\n\ncustomPrompt(\"Who are you?\");\n\nfunction foo() {\n    var alert = myCustomLib.customAlert;\n    alert();\n}\n```\n\n## Related Rules\n\n- [no-console](no-console)\n- [no-debugger](no-debugger)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.5.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-alert.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-alert.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-alert](https://eslint.org/docs/latest/rules/no-alert)"
- name: no-array-constructor
  id: rules/no-array-constructor
  summary: Use of the Array constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the Array global may be redefined
  description: "# no-array-constructor\n\nDisallow `Array` constructors\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-array-constructor../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nUse of the `Array` constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the `Array` global may be redefined. The exception is when the Array constructor is used to intentionally create sparse arrays of a specified size by giving the constructor a single numeric argument.\n\n## Rule Details\n\nThis rule disallows `Array` constructors.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFycmF5LWNvbnN0cnVjdG9yOiBcImVycm9yXCIqL1xuXG5BcnJheSgpO1xuXG5BcnJheSgwLCAxLCAyKTtcblxubmV3IEFycmF5KDAsIDEsIDIpO1xuXG5BcnJheSguLi5hcmdzKTsifQ==)\n\n``` language-js\n/*eslint no-array-constructor: \"error\"*/\n\nArray();\n\nArray(0, 1, 2);\n\nnew Array(0, 1, 2);\n\nArray(...args);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFycmF5LWNvbnN0cnVjdG9yOiBcImVycm9yXCIqL1xuXG5BcnJheSg1MDApO1xuXG5uZXcgQXJyYXkoc29tZU90aGVyQXJyYXkubGVuZ3RoKTtcblxuWzAsIDEsIDJdO1xuXG5jb25zdCBjcmVhdGVBcnJheSA9IEFycmF5ID0+IG5ldyBBcnJheSgpOyJ9)\n\n``` language-js\n/*eslint no-array-constructor: \"error\"*/\n\nArray(500);\n\nnew Array(someOtherArray.length);\n\n[0, 1, 2];\n\nconst createArray = Array => new Array();\n```\n\n## When Not To Use It\n\nThis rule enforces a nearly universal stylistic concern. That being said, this rule may be disabled if the constructor style is preferred.\n\n## Related Rules\n\n- [no-new-wrappers](no-new-wrappers)\n- [no-object-constructor](no-object-constructor)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-array-constructor.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-array-constructor.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-array-constructor](https://eslint.org/docs/latest/rules/no-array-constructor)"
- name: no-async-promise-executor
  id: rules/no-async-promise-executor
  summary: The new Promise constructor accepts an executor function as an argument, which has resolve and reject parameters that can be used to control the state of the created Promise
  description: "# no-async-promise-executor\n\nDisallow using an async function as a Promise executor\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-async-promise-executor../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThe `new Promise` constructor accepts an *executor* function as an argument, which has `resolve` and `reject` parameters that can be used to control the state of the created Promise. For example:\n\n``` language-js\nconst result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n```\n\nThe executor function can also be an `async function`. However, this is usually a mistake, for a few reasons:\n\n- If an async executor function throws an error, the error will be lost and won’t cause the newly-constructed `Promise` to reject. This could make it difficult to debug and handle some errors.\n- If a Promise executor function is using `await`, this is usually a sign that it is not actually necessary to use the `new Promise` constructor, or the scope of the `new Promise` constructor can be reduced.\n\n## Rule Details\n\nThis rule aims to disallow async Promise executor functions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3I6IFwiZXJyb3JcIiovXG5cbmNvbnN0IGZvbyA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgcmVhZEZpbGUoJ2Zvby50eHQnLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5jb25zdCByZXN1bHQgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIHJlc29sdmUoYXdhaXQgZm9vKTtcbn0pOyJ9)\n\n``` language-js\n/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise(async (resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = new Promise(async (resolve, reject) => {\n  resolve(await foo);\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3I6IFwiZXJyb3JcIiovXG5cbmNvbnN0IGZvbyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgcmVhZEZpbGUoJ2Zvby50eHQnLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5jb25zdCByZXN1bHQgPSBQcm9taXNlLnJlc29sdmUoZm9vKTsifQ==)\n\n``` language-js\n/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise((resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = Promise.resolve(foo);\n```\n\n## When Not To Use It\n\nIf your codebase doesn’t support async function syntax, there’s no need to enable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v5.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-async-promise-executor.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-async-promise-executor.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-async-promise-executor](https://eslint.org/docs/latest/rules/no-async-promise-executor)"
- name: no-await-in-loop
  id: rules/no-await-in-loop
  summary: Performing an operation on each element of an iterable is a common task
  description: "# no-await-in-loop\n\nDisallow `await` inside of loops\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nPerforming an operation on each element of an iterable is a common task. However, performing an `await` as part of each operation is an indication that the program is not taking full advantage of the parallelization benefits of `async`/`await`.\n\nUsually, the code should be refactored to create all the promises at once, then get access to the results using `Promise.all()`. Otherwise, each successive operation will not start until the previous one has completed.\n\nConcretely, the following function should be refactored as shown:\n\n``` language-js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await bar(thing));\n  }\n  return baz(results);\n}\n```\n\n``` language-js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    results.push(bar(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  return baz(await Promise.all(results));\n}\n```\n\n## Rule Details\n\nThis rule disallows the use of `await` within loop bodies.\n\n## Examples\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWF3YWl0LWluLWxvb3A6IFwiZXJyb3JcIiovXG5cbmFzeW5jIGZ1bmN0aW9uIGZvbyh0aGluZ3MpIHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGNvbnN0IHRoaW5nIG9mIHRoaW5ncykge1xuICAgIC8vIEdvb2Q6IGFsbCBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBhcmUgaW1tZWRpYXRlbHkgc3RhcnRlZC5cbiAgICByZXN1bHRzLnB1c2goYmFyKHRoaW5nKSk7XG4gIH1cbiAgLy8gTm93IHRoYXQgYWxsIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBhcmUgcnVubmluZywgaGVyZSB3ZSB3YWl0IHVudGlsIHRoZXkgYWxsIGNvbXBsZXRlLlxuICByZXR1cm4gYmF6KGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMpKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-await-in-loop: \"error\"*/\n\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    results.push(bar(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  return baz(await Promise.all(results));\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWF3YWl0LWluLWxvb3A6IFwiZXJyb3JcIiovXG5cbmFzeW5jIGZ1bmN0aW9uIGZvbyh0aGluZ3MpIHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGNvbnN0IHRoaW5nIG9mIHRoaW5ncykge1xuICAgIC8vIEJhZDogZWFjaCBsb29wIGl0ZXJhdGlvbiBpcyBkZWxheWVkIHVudGlsIHRoZSBlbnRpcmUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBjb21wbGV0ZXNcbiAgICByZXN1bHRzLnB1c2goYXdhaXQgYmFyKHRoaW5nKSk7XG4gIH1cbiAgcmV0dXJuIGJheihyZXN1bHRzKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-await-in-loop: \"error\"*/\n\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await bar(thing));\n  }\n  return baz(results);\n}\n```\n\n## When Not To Use It\n\nIn many cases the iterations of a loop are not actually independent of each-other. For example, the output of one iteration might be used as the input to another. Or, loops may be used to retry asynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending an excessive amount of requests in parallel. In such cases it makes sense to use `await` within a loop and it is recommended to disable the rule via a standard ESLint disable comment.\n\n## Version\n\nThis rule was introduced in ESLint v3.12.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-await-in-loop.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-await-in-loop.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-await-in-loop](https://eslint.org/docs/latest/rules/no-await-in-loop)"
- name: no-bitwise
  id: rules/no-bitwise
  summary: The use of bitwise operators in JavaScript is very rare and often & or | is simply a mistyped && or ||, which will lead to unexpected behavior
  description: "# no-bitwise\n\nDisallow bitwise operators\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allow](#allow)\n    2.  [int32Hint](#int32hint)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThe use of bitwise operators in JavaScript is very rare and often `&` or `|` is simply a mistyped `&&` or `||`, which will lead to unexpected behavior.\n\n``` language-js\nvar x = y | z;\n```\n\n## Rule Details\n\nThis rule disallows bitwise operators.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWJpdHdpc2U6IFwiZXJyb3JcIiovXG5cbnZhciB4ID0geSB8IHo7XG5cbnZhciB4ID0geSAmIHo7XG5cbnZhciB4ID0geSBeIHo7XG5cbnZhciB4ID0gfiB6O1xuXG52YXIgeCA9IHkgPDwgejtcblxudmFyIHggPSB5ID4+IHo7XG5cbnZhciB4ID0geSA+Pj4gejtcblxueCB8PSB5O1xuXG54ICY9IHk7XG5cbnggXj0geTtcblxueCA8PD0geTtcblxueCA+Pj0geTtcblxueCA+Pj49IHk7In0=)\n\n``` language-js\n/*eslint no-bitwise: \"error\"*/\n\nvar x = y | z;\n\nvar x = y & z;\n\nvar x = y ^ z;\n\nvar x = ~ z;\n\nvar x = y << z;\n\nvar x = y >> z;\n\nvar x = y >>> z;\n\nx |= y;\n\nx &= y;\n\nx ^= y;\n\nx <<= y;\n\nx >>= y;\n\nx >>>= y;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWJpdHdpc2U6IFwiZXJyb3JcIiovXG5cbnZhciB4ID0geSB8fCB6O1xuXG52YXIgeCA9IHkgJiYgejtcblxudmFyIHggPSB5ID4gejtcblxudmFyIHggPSB5IDwgejtcblxueCArPSB5OyJ9)\n\n``` language-js\n/*eslint no-bitwise: \"error\"*/\n\nvar x = y || z;\n\nvar x = y && z;\n\nvar x = y > z;\n\nvar x = y < z;\n\nx += y;\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"allow\"`: Allows a list of bitwise operators to be used as exceptions.\n- `\"int32Hint\"`: Allows the use of bitwise OR in `|0` pattern for type casting.\n\n### allow\n\nExamples of **correct** code for this rule with the `{ \"allow\": [\"~\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCJ+XCJdIH1dICovXG5cbn5bMSwyLDNdLmluZGV4T2YoMSkgPT09IC0xOyJ9)\n\n``` language-js\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"~\"] }] */\n\n~[1,2,3].indexOf(1) === -1;\n```\n\n### int32Hint\n\nExamples of **correct** code for this rule with the `{ \"int32Hint\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJpbnQzMkhpbnRcIjogdHJ1ZSB9XSAqL1xuXG52YXIgYiA9IGF8MDsifQ==)\n\n``` language-js\n/*eslint no-bitwise: [\"error\", { \"int32Hint\": true }] */\n\nvar b = a|0;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-bitwise.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-bitwise.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-bitwise](https://eslint.org/docs/latest/rules/no-bitwise)"
- name: no-caller
  id: rules/no-caller
  summary: The use of arguments.caller and arguments.callee make several code optimizations impossible
  description: "# no-caller\n\nDisallow the use of `arguments.caller` or `arguments.callee`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThe use of `arguments.caller` and `arguments.callee` make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.\n\n``` language-js\nfunction foo() {\n    var callee = arguments.callee;\n}\n```\n\n## Rule Details\n\nThis rule is aimed at discouraging the use of deprecated and sub-optimal code by disallowing the use of `arguments.caller` and `arguments.callee`. As such, it will warn when `arguments.caller` and `arguments.callee` are used.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNhbGxlcjogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKG4pIHtcbiAgICBpZiAobiA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhcmd1bWVudHMuY2FsbGVlKG4gLSAxKTtcbn1cblxuWzEsMiwzLDQsNV0ubWFwKGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gIShuID4gMSkgPyAxIDogYXJndW1lbnRzLmNhbGxlZShuIC0gMSkgKiBuO1xufSk7In0=)\n\n``` language-js\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    arguments.callee(n - 1);\n}\n\n[1,2,3,4,5].map(function(n) {\n    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNhbGxlcjogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKG4pIHtcbiAgICBpZiAobiA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb28obiAtIDEpO1xufVxuXG5bMSwyLDMsNCw1XS5tYXAoZnVuY3Rpb24gZmFjdG9yaWFsKG4pIHtcbiAgICByZXR1cm4gIShuID4gMSkgPyAxIDogZmFjdG9yaWFsKG4gLSAxKSAqIG47XG59KTsifQ==)\n\n``` language-js\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    foo(n - 1);\n}\n\n[1,2,3,4,5].map(function factorial(n) {\n    return !(n > 1) ? 1 : factorial(n - 1) * n;\n});\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-caller.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-caller.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-caller](https://eslint.org/docs/latest/rules/no-caller)"
- name: no-case-declarations
  id: rules/no-case-declarations
  summary: This rule disallows lexical declarations (let, const, function and class) in case/default clauses
  description: "# no-case-declarations\n\nDisallow lexical declarations in case clauses\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-case-declarations../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule disallows lexical declarations (`let`, `const`, `function` and `class`) in `case`/`default` clauses. The reason is that the lexical declaration is visible in the entire switch block but it only gets initialized when it is assigned, which will only happen if the case where it is defined is reached.\n\nTo ensure that the lexical declaration only applies to the current case clause wrap your clauses in blocks.\n\n## Rule Details\n\nThis rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNhc2UtZGVjbGFyYXRpb25zOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBsZXQgeCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgICAgY29uc3QgeSA9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgICAgZnVuY3Rpb24gZigpIHt9XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGNsYXNzIEMge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-case-declarations: \"error\"*/\n/*eslint-env es6*/\n\nswitch (foo) {\n    case 1:\n        let x = 1;\n        break;\n    case 2:\n        const y = 2;\n        break;\n    case 3:\n        function f() {}\n        break;\n    default:\n        class C {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNhc2UtZGVjbGFyYXRpb25zOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbi8vIERlY2xhcmF0aW9ucyBvdXRzaWRlIHN3aXRjaC1zdGF0ZW1lbnRzIGFyZSB2YWxpZFxuY29uc3QgYSA9IDA7XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgLy8gVGhlIGZvbGxvd2luZyBjYXNlIGNsYXVzZXMgYXJlIHdyYXBwZWQgaW50byBibG9ja3MgdXNpbmcgYnJhY2tldHNcbiAgICBjYXNlIDE6IHtcbiAgICAgICAgbGV0IHggPSAxO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAyOiB7XG4gICAgICAgIGNvbnN0IHkgPSAyO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAzOiB7XG4gICAgICAgIGZ1bmN0aW9uIGYoKSB7fVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSA0OlxuICAgICAgICAvLyBEZWNsYXJhdGlvbnMgdXNpbmcgdmFyIHdpdGhvdXQgYnJhY2tldHMgYXJlIHZhbGlkIGR1ZSB0byBmdW5jdGlvbi1zY29wZSBob2lzdGluZ1xuICAgICAgICB2YXIgeiA9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY2xhc3MgQyB7fVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-case-declarations: \"error\"*/\n/*eslint-env es6*/\n\n// Declarations outside switch-statements are valid\nconst a = 0;\n\nswitch (foo) {\n    // The following case clauses are wrapped into blocks using brackets\n    case 1: {\n        let x = 1;\n        break;\n    }\n    case 2: {\n        const y = 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4:\n        // Declarations using var without brackets are valid due to function-scope hoisting\n        var z = 4;\n        break;\n    default: {\n        class C {}\n    }\n}\n```\n\n## When Not To Use It\n\nIf you depend on fall through behavior and want access to bindings introduced in the case block.\n\n## Related Rules\n\n- [no-fallthrough](no-fallthrough)\n\n## Version\n\nThis rule was introduced in ESLint v1.9.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-case-declarations.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-case-declarations.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-case-declarations](https://eslint.org/docs/latest/rules/no-case-declarations)"
- name: no-class-assign
  id: rules/no-class-assign
  summary: ClassDeclaration creates a variable, and we can modify the variable
  description: "# no-class-assign\n\nDisallow reassigning class members\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-class-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\n`ClassDeclaration` creates a variable, and we can modify the variable.\n\n``` language-js\n/*eslint-env es6*/\n\nclass A { }\nA = 0;\n```\n\nBut the modification is a mistake in most cases.\n\n## Rule Details\n\nThis rule is aimed to flag modifying variables of class declarations.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jbGFzcyBBIHsgfVxuQSA9IDA7In0=)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nclass A { }\nA = 0;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5BID0gMDtcbmNsYXNzIEEgeyB9In0=)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nA = 0;\nclass A { }\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jbGFzcyBBIHtcbiAgICBiKCkge1xuICAgICAgICBBID0gMDtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    b() {\n        A = 0;\n    }\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgQSA9IGNsYXNzIEEge1xuICAgIGIoKSB7XG4gICAgICAgIEEgPSAwO1xuICAgICAgICAvLyBgbGV0IEFgIGlzIHNoYWRvd2VkIGJ5IHRoZSBjbGFzcyBuYW1lLlxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class A {\n    b() {\n        A = 0;\n        // `let A` is shadowed by the class name.\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgQSA9IGNsYXNzIEEgeyB9XG5BID0gMDsgLy8gQSBpcyBhIHZhcmlhYmxlLiJ9)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class A { }\nA = 0; // A is a variable.\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgQSA9IGNsYXNzIHtcbiAgICBiKCkge1xuICAgICAgICBBID0gMDsgLy8gQSBpcyBhIHZhcmlhYmxlLlxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class {\n    b() {\n        A = 0; // A is a variable.\n    }\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNsYXNzLWFzc2lnbjogMiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY2xhc3MgQSB7XG4gICAgYihBKSB7XG4gICAgICAgIEEgPSAwOyAvLyBBIGlzIGEgcGFyYW1ldGVyLlxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-class-assign: 2*/\n/*eslint-env es6*/\n\nclass A {\n    b(A) {\n        A = 0; // A is a parameter.\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about modifying variables of class declarations, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-class-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-class-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-class-assign](https://eslint.org/docs/latest/rules/no-class-assign)"
- name: no-compare-neg-zero
  id: rules/no-compare-neg-zero
  summary: The rule should warn against code that tries to compare against -0, since that will not work as intended
  description: "# no-compare-neg-zero\n\nDisallow comparing against -0\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-compare-neg-zero../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\n## Rule Details\n\nThe rule should warn against code that tries to compare against `-0`, since that will not work as intended. That is, code like `x === -0` will pass for both `+0` and `-0`. The author probably intended `Object.is(x, -0)`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb21wYXJlLW5lZy16ZXJvOiBcImVycm9yXCIgKi9cblxuaWYgKHggPT09IC0wKSB7XG4gICAgLy8gZG9Tb21ldGhpbmcoKS4uLlxufSJ9)\n\n``` language-js\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (x === -0) {\n    // doSomething()...\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb21wYXJlLW5lZy16ZXJvOiBcImVycm9yXCIgKi9cblxuaWYgKHggPT09IDApIHtcbiAgICAvLyBkb1NvbWV0aGluZygpLi4uXG59In0=)\n\n``` language-js\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (x === 0) {\n    // doSomething()...\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb21wYXJlLW5lZy16ZXJvOiBcImVycm9yXCIgKi9cblxuaWYgKE9iamVjdC5pcyh4LCAtMCkpIHtcbiAgICAvLyBkb1NvbWV0aGluZygpLi4uXG59In0=)\n\n``` language-js\n/* eslint no-compare-neg-zero: \"error\" */\n\nif (Object.is(x, -0)) {\n    // doSomething()...\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v3.17.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-compare-neg-zero.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-compare-neg-zero.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-compare-neg-zero](https://eslint.org/docs/latest/rules/no-compare-neg-zero)"
- name: no-cond-assign
  id: rules/no-cond-assign
  summary: In conditional statements, it is very easy to mistype a comparison operator (such as ==) as an assignment operator (such as =)
  description: "# no-cond-assign\n\nDisallow assignment operators in conditional expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-cond-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [except-parens](#except-parens)\n    2.  [always](#always)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn conditional statements, it is very easy to mistype a comparison operator (such as `==`) as an assignment operator (such as `=`). For example:\n\n``` language-js\n// Check the user's job title\nif (user.jobTitle = \"manager\") {\n    // user.jobTitle is now incorrect\n}\n```\n\nThere are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.\n\n## Rule Details\n\nThis rule disallows ambiguous assignment operators in test conditions of `if`, `for`, `while`, and `do...while` statements.\n\n## Options\n\nThis rule has a string option:\n\n- `\"except-parens\"` (default) allows assignments in test conditions *only if* they are enclosed in parentheses (for example, to allow reassigning a variable in the test of a `while` or `do...while` loop)\n- `\"always\"` disallows all assignments in test conditions\n\n### except-parens\n\nExamples of **incorrect** code for this rule with the default `\"except-parens\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmQtYXNzaWduOiBcImVycm9yXCIqL1xuXG4vLyBVbmludGVudGlvbmFsIGFzc2lnbm1lbnRcbnZhciB4O1xuaWYgKHggPSAwKSB7XG4gICAgdmFyIGIgPSAxO1xufVxuXG4vLyBQcmFjdGljYWwgZXhhbXBsZSB0aGF0IGlzIHNpbWlsYXIgdG8gYW4gZXJyb3JcbnZhciBzZXRIZWlnaHQgPSBmdW5jdGlvbiAoc29tZU5vZGUpIHtcbiAgICBkbyB7XG4gICAgICAgIHNvbWVOb2RlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICB9IHdoaWxlIChzb21lTm9kZSA9IHNvbWVOb2RlLnBhcmVudE5vZGUpO1xufSJ9)\n\n``` language-js\n/*eslint no-cond-assign: \"error\"*/\n\n// Unintentional assignment\nvar x;\nif (x = 0) {\n    var b = 1;\n}\n\n// Practical example that is similar to an error\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n```\n\nExamples of **correct** code for this rule with the default `\"except-parens\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmQtYXNzaWduOiBcImVycm9yXCIqL1xuXG4vLyBBc3NpZ25tZW50IHJlcGxhY2VkIGJ5IGNvbXBhcmlzb25cbnZhciB4O1xuaWYgKHggPT09IDApIHtcbiAgICB2YXIgYiA9IDE7XG59XG5cbi8vIFByYWN0aWNhbCBleGFtcGxlIHRoYXQgd3JhcHMgdGhlIGFzc2lnbm1lbnQgaW4gcGFyZW50aGVzZXNcbnZhciBzZXRIZWlnaHQgPSBmdW5jdGlvbiAoc29tZU5vZGUpIHtcbiAgICBkbyB7XG4gICAgICAgIHNvbWVOb2RlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICB9IHdoaWxlICgoc29tZU5vZGUgPSBzb21lTm9kZS5wYXJlbnROb2RlKSk7XG59XG5cbi8vIFByYWN0aWNhbCBleGFtcGxlIHRoYXQgd3JhcHMgdGhlIGFzc2lnbm1lbnQgYW5kIHRlc3RzIGZvciAnbnVsbCdcbnZhciBzZXRIZWlnaHQgPSBmdW5jdGlvbiAoc29tZU5vZGUpIHtcbiAgICBkbyB7XG4gICAgICAgIHNvbWVOb2RlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICB9IHdoaWxlICgoc29tZU5vZGUgPSBzb21lTm9kZS5wYXJlbnROb2RlKSAhPT0gbnVsbCk7XG59In0=)\n\n``` language-js\n/*eslint no-cond-assign: \"error\"*/\n\n// Assignment replaced by comparison\nvar x;\nif (x === 0) {\n    var b = 1;\n}\n\n// Practical example that wraps the assignment in parentheses\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmQtYXNzaWduOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbi8vIFVuaW50ZW50aW9uYWwgYXNzaWdubWVudFxudmFyIHg7XG5pZiAoeCA9IDApIHtcbiAgICB2YXIgYiA9IDE7XG59XG5cbi8vIFByYWN0aWNhbCBleGFtcGxlIHRoYXQgaXMgc2ltaWxhciB0byBhbiBlcnJvclxudmFyIHNldEhlaWdodCA9IGZ1bmN0aW9uIChzb21lTm9kZSkge1xuICAgIGRvIHtcbiAgICAgICAgc29tZU5vZGUuaGVpZ2h0ID0gXCIxMDBweFwiO1xuICAgIH0gd2hpbGUgKHNvbWVOb2RlID0gc29tZU5vZGUucGFyZW50Tm9kZSk7XG59XG5cbi8vIFByYWN0aWNhbCBleGFtcGxlIHRoYXQgd3JhcHMgdGhlIGFzc2lnbm1lbnQgaW4gcGFyZW50aGVzZXNcbnZhciBzZXRIZWlnaHQgPSBmdW5jdGlvbiAoc29tZU5vZGUpIHtcbiAgICBkbyB7XG4gICAgICAgIHNvbWVOb2RlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICB9IHdoaWxlICgoc29tZU5vZGUgPSBzb21lTm9kZS5wYXJlbnROb2RlKSk7XG59XG5cbi8vIFByYWN0aWNhbCBleGFtcGxlIHRoYXQgd3JhcHMgdGhlIGFzc2lnbm1lbnQgYW5kIHRlc3RzIGZvciAnbnVsbCdcbnZhciBzZXRIZWlnaHQgPSBmdW5jdGlvbiAoc29tZU5vZGUpIHtcbiAgICBkbyB7XG4gICAgICAgIHNvbWVOb2RlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICB9IHdoaWxlICgoc29tZU5vZGUgPSBzb21lTm9kZS5wYXJlbnROb2RlKSAhPT0gbnVsbCk7XG59In0=)\n\n``` language-js\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Unintentional assignment\nvar x;\nif (x = 0) {\n    var b = 1;\n}\n\n// Practical example that is similar to an error\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n\n// Practical example that wraps the assignment in parentheses\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nvar setHeight = function (someNode) {\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmQtYXNzaWduOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbi8vIEFzc2lnbm1lbnQgcmVwbGFjZWQgYnkgY29tcGFyaXNvblxudmFyIHg7XG5pZiAoeCA9PT0gMCkge1xuICAgIHZhciBiID0gMTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Assignment replaced by comparison\nvar x;\nif (x === 0) {\n    var b = 1;\n}\n```\n\n## Related Rules\n\n- [no-extra-parens](no-extra-parens)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-cond-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-cond-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-cond-assign](https://eslint.org/docs/latest/rules/no-cond-assign)"
- name: no-confusing-arrow
  id: rules/no-confusing-arrow
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# no-confusing-arrow\n\nDisallow arrow functions where they could be confused with comparisons\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-confusing-arrow../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/no-confusing-arrow) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nArrow functions (`=>`) are similar in syntax to some comparison operators (`>`, `<`, `<=`, and `>=`). This rule warns against using the arrow function syntax in places where it could be confused with a comparison operator.\n\nHere’s an example where the usage of `=>` could be confusing:\n\n``` language-js\n// The intent is not clear\nvar x = a => 1 ? 2 : 3;\n// Did the author mean this\nvar x = function (a) {\n    return 1 ? 2 : 3;\n};\n// Or this\nvar x = a <= 1 ? 2 : 3;\n```\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmZ1c2luZy1hcnJvdzogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgeCA9IGEgPT4gMSA/IDIgOiAzO1xudmFyIHggPSAoYSkgPT4gMSA/IDIgOiAzOyJ9)\n\n``` language-js\n/*eslint no-confusing-arrow: \"error\"*/\n/*eslint-env es6*/\n\nvar x = a => 1 ? 2 : 3;\nvar x = (a) => 1 ? 2 : 3;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmZ1c2luZy1hcnJvdzogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xudmFyIHggPSBhID0+ICgxID8gMiA6IDMpO1xudmFyIHggPSAoYSkgPT4gKDEgPyAyIDogMyk7XG52YXIgeCA9IChhKSA9PiB7XG4gICAgcmV0dXJuIDEgPyAyIDogMztcbn07XG52YXIgeCA9IGEgPT4geyByZXR1cm4gMSA/IDIgOiAzOyB9OyJ9)\n\n``` language-js\n/*eslint no-confusing-arrow: \"error\"*/\n/*eslint-env es6*/\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\nvar x = (a) => {\n    return 1 ? 2 : 3;\n};\nvar x = a => { return 1 ? 2 : 3; };\n```\n\n## Options\n\nThis rule accepts two options argument with the following defaults:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-confusing-arrow\": [\n            \"error\",\n            { \"allowParens\": true, \"onlyOneSimpleParam\": false }\n        ]\n    }\n}\n```\n\n`allowParens` is a boolean setting that can be `true`(default) or `false`:\n\n1.  `true` relaxes the rule and accepts parenthesis as a valid “confusion-preventing” syntax.\n2.  `false` warns even if the expression is wrapped in parenthesis\n\nExamples of **incorrect** code for this rule with the `{\"allowParens\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmZ1c2luZy1hcnJvdzogW1wiZXJyb3JcIiwge1wiYWxsb3dQYXJlbnNcIjogZmFsc2V9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cbnZhciB4ID0gYSA9PiAoMSA/IDIgOiAzKTtcbnZhciB4ID0gKGEpID0+ICgxID8gMiA6IDMpOyJ9)\n\n``` language-js\n/*eslint no-confusing-arrow: [\"error\", {\"allowParens\": false}]*/\n/*eslint-env es6*/\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\n```\n\n`onlyOneSimpleParam` is a boolean setting that can be `true` or `false`(default):\n\n1.  `true` relaxes the rule and doesn’t report errors if the arrow function has 0 or more than 1 parameters, or the parameter is not an identifier.\n2.  `false` warns regardless of parameters.\n\nExamples of **correct** code for this rule with the `{\"onlyOneSimpleParam\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbmZ1c2luZy1hcnJvdzogW1wiZXJyb3JcIiwge1wib25seU9uZVNpbXBsZVBhcmFtXCI6IHRydWV9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cbigpID0+IDEgPyAyIDogMztcbihhLCBiKSA9PiAxID8gMiA6IDM7XG4oYSA9IGIpID0+IDEgPyAyIDogMztcbih7IGEgfSkgPT4gMSA/IDIgOiAzO1xuKFthXSkgPT4gMSA/IDIgOiAzO1xuKC4uLmEpID0+IDEgPyAyIDogMzsifQ==)\n\n``` language-js\n/*eslint no-confusing-arrow: [\"error\", {\"onlyOneSimpleParam\": true}]*/\n/*eslint-env es6*/\n() => 1 ? 2 : 3;\n(a, b) => 1 ? 2 : 3;\n(a = b) => 1 ? 2 : 3;\n({ a }) => 1 ? 2 : 3;\n([a]) => 1 ? 2 : 3;\n(...a) => 1 ? 2 : 3;\n```\n\n## Related Rules\n\n- [no-constant-condition](no-constant-condition)\n- [arrow-parens](arrow-parens)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-confusing-arrow.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-confusing-arrow.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-confusing-arrow](https://eslint.org/docs/latest/rules/no-confusing-arrow)"
- name: no-console
  id: rules/no-console
  summary: In JavaScript that is designed to be executed in the browser, it’s considered a best practice to avoid using methods on console
  description: "# no-console\n\nDisallow the use of `console`\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-console../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIn JavaScript that is designed to be executed in the browser, it’s considered a best practice to avoid using methods on `console`. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using `console` should be stripped before being pushed to production.\n\n``` language-js\nconsole.log(\"Made it here.\");\nconsole.error(\"That shouldn't have happened.\");\n```\n\n## Rule Details\n\nThis rule disallows calls or assignments to methods of the `console` object.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb25zb2xlOiBcImVycm9yXCIgKi9cblxuY29uc29sZS5sb2coXCJMb2cgYSBkZWJ1ZyBsZXZlbCBtZXNzYWdlLlwiKTtcbmNvbnNvbGUud2FybihcIkxvZyBhIHdhcm4gbGV2ZWwgbWVzc2FnZS5cIik7XG5jb25zb2xlLmVycm9yKFwiTG9nIGFuIGVycm9yIGxldmVsIG1lc3NhZ2UuXCIpO1xuY29uc29sZS5sb2cgPSBmb28oKTsifQ==)\n\n``` language-js\n/* eslint no-console: \"error\" */\n\nconsole.log(\"Log a debug level message.\");\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\nconsole.log = foo();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb25zb2xlOiBcImVycm9yXCIgKi9cblxuLy8gY3VzdG9tIGNvbnNvbGVcbkNvbnNvbGUubG9nKFwiSGVsbG8gd29ybGQhXCIpOyJ9)\n\n``` language-js\n/* eslint no-console: \"error\" */\n\n// custom console\nConsole.log(\"Hello world!\");\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n- `\"allow\"` has an array of strings which are allowed methods of the `console` object\n\nExamples of additional **correct** code for this rule with a sample `{ \"allow\": [\"warn\", \"error\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1jb25zb2xlOiBbXCJlcnJvclwiLCB7IGFsbG93OiBbXCJ3YXJuXCIsIFwiZXJyb3JcIl0gfV0gKi9cblxuY29uc29sZS53YXJuKFwiTG9nIGEgd2FybiBsZXZlbCBtZXNzYWdlLlwiKTtcbmNvbnNvbGUuZXJyb3IoXCJMb2cgYW4gZXJyb3IgbGV2ZWwgbWVzc2FnZS5cIik7In0=)\n\n``` language-js\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\n```\n\n## When Not To Use It\n\nIf you’re using Node.js, however, `console` is used to output information to the user and so is not strictly used for debugging purposes. If you are developing for Node.js then you most likely do not want this rule enabled.\n\nAnother case where you might not use this rule is if you want to enforce console calls and not console overwrites. For example:\n\n``` language-js\n/* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\nconsole.error = function (message) {\n  throw new Error(message);\n};\n```\n\nWith the `no-console` rule in the above example, ESLint will report an error. For the above example, you can disable the rule:\n\n``` language-js\n// eslint-disable-next-line no-console\nconsole.error = function (message) {\n  throw new Error(message);\n};\n\n// or\n\nconsole.error = function (message) {  // eslint-disable-line no-console\n  throw new Error(message);\n};\n```\n\nHowever, you might not want to manually add `eslint-disable-next-line` or `eslint-disable-line`. You can achieve the effect of only receiving errors for console calls with the `no-restricted-syntax` rule:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-console\": \"off\",\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"CallExpression[callee.object.name='console'][callee.property.name!=/^(log|warn|error|info|trace)$/]\",\n                \"message\": \"Unexpected property on console object was called\"\n            }\n        ]\n    }\n}\n```\n\n## Related Rules\n\n- [no-alert](no-alert)\n- [no-debugger](no-debugger)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-console.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-console.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-console](https://eslint.org/docs/latest/rules/no-console)"
- name: no-const-assign
  id: rules/no-const-assign
  summary: We cannot modify variables that are declared using const keyword
  description: "# no-const-assign\n\nDisallow reassigning `const` variables\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-const-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Handled by TypeScript](#handled_by_typescript)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nWe cannot modify variables that are declared using `const` keyword. It will raise a runtime error.\n\nUnder non ES2015 environment, it might be ignored merely.\n\n## Rule Details\n\nThis rule is aimed to flag modifying variables that are declared using `const` keyword.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jb25zdCBhID0gMDtcbmEgPSAxOyJ9)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\na = 1;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jb25zdCBhID0gMDtcbmEgKz0gMTsifQ==)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\na += 1;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jb25zdCBhID0gMDtcbisrYTsifQ==)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\n++a;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jb25zdCBhID0gMDtcbmNvbnNvbGUubG9nKGEpOyJ9)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\nconsole.log(a);\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mb3IgKGNvbnN0IGEgaW4gWzEsIDIsIDNdKSB7IC8vIGBhYCBpcyByZS1kZWZpbmVkIChub3QgbW9kaWZpZWQpIG9uIGVhY2ggbG9vcCBzdGVwLlxuICAgIGNvbnNvbGUubG9nKGEpO1xufSJ9)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nfor (const a in [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0LWFzc2lnbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mb3IgKGNvbnN0IGEgb2YgWzEsIDIsIDNdKSB7IC8vIGBhYCBpcyByZS1kZWZpbmVkIChub3QgbW9kaWZpZWQpIG9uIGVhY2ggbG9vcCBzdGVwLlxuICAgIGNvbnNvbGUubG9nKGEpO1xufSJ9)\n\n``` language-js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nfor (const a of [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about modifying variables that are declared using `const` keyword, you can safely disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-const-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-const-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-const-assign](https://eslint.org/docs/latest/rules/no-const-assign)"
- name: no-constant-binary-expression
  id: rules/no-constant-binary-expression
  summary: Comparisons which will always evaluate to true or false and logical expressions (||, &&, ??) which either always short-circuit or never short-circuit are both likely indications of programmer error
  description: "# no-constant-binary-expression\n\nDisallow expressions where the operation doesn't affect the value\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nComparisons which will always evaluate to true or false and logical expressions (`||`, `&&`, `??`) which either always short-circuit or never short-circuit are both likely indications of programmer error.\n\nThese errors are especially common in complex expressions where operator precedence is easy to misjudge. For example:\n\n``` language-js\n// One might think this would evaluate as `a + (b ?? c)`:\nconst x = a + b ?? c;\n\n// But it actually evaluates as `(a + b) ?? c`. Since `a + b` can never be null,\n// the `?? c` has no effect.\n```\n\nAdditionally, this rule detects comparisons to newly constructed objects/arrays/functions/etc. In JavaScript, where objects are compared by reference, a newly constructed object can *never* `===` any other value. This can be surprising for programmers coming from languages where objects are compared by value.\n\n``` language-js\n// Programmers coming from a language where objects are compared by value might expect this to work:\nconst isEmpty = x === [];\n\n// However, this will always result in `isEmpty` being `false`.\n```\n\n## Rule Details\n\nThis rule identifies `==` and `===` comparisons which, based on the semantics of the JavaScript language, will always evaluate to `true` or `false`.\n\nIt also identifies `||`, `&&` and `??` logical expressions which will either always or never short-circuit.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0YW50LWJpbmFyeS1leHByZXNzaW9uOiBcImVycm9yXCIqL1xuXG5jb25zdCB2YWx1ZTEgPSAreCA9PSBudWxsO1xuXG5jb25zdCB2YWx1ZTIgPSBjb25kaXRpb24gPyB4IDoge30gfHwgREVGQVVMVDtcblxuY29uc3QgdmFsdWUzID0gIWZvbyA9PSBudWxsO1xuXG5jb25zdCB2YWx1ZTQgPSBuZXcgQm9vbGVhbihmb28pID09PSB0cnVlO1xuXG5jb25zdCBvYmpJc0VtcHR5ID0gc29tZU9iaiA9PT0ge307XG5cbmNvbnN0IGFycklzRW1wdHkgPSBzb21lQXJyID09PSBbXTtcblxuY29uc3Qgc2hvcnRDaXJjdWl0MSA9IGNvbmRpdGlvbjEgJiYgZmFsc2UgJiYgY29uZGl0aW9uMjtcblxuY29uc3Qgc2hvcnRDaXJjdWl0MiA9IGNvbmRpdGlvbjEgfHwgdHJ1ZSB8fCBjb25kaXRpb24yO1xuXG5jb25zdCBzaG9ydENpcmN1aXQzID0gY29uZGl0aW9uMSA/PyBcIm5vbi1udWxsaXNoXCIgPz8gY29uZGl0aW9uMjsifQ==)\n\n``` language-js\n/*eslint no-constant-binary-expression: \"error\"*/\n\nconst value1 = +x == null;\n\nconst value2 = condition ? x : {} || DEFAULT;\n\nconst value3 = !foo == null;\n\nconst value4 = new Boolean(foo) === true;\n\nconst objIsEmpty = someObj === {};\n\nconst arrIsEmpty = someArr === [];\n\nconst shortCircuit1 = condition1 && false && condition2;\n\nconst shortCircuit2 = condition1 || true || condition2;\n\nconst shortCircuit3 = condition1 ?? \"non-nullish\" ?? condition2;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0YW50LWJpbmFyeS1leHByZXNzaW9uOiBcImVycm9yXCIqL1xuXG5jb25zdCB2YWx1ZTEgPSB4ID09IG51bGw7XG5cbmNvbnN0IHZhbHVlMiA9IChjb25kaXRpb24gPyB4IDoge30pIHx8IERFRkFVTFQ7XG5cbmNvbnN0IHZhbHVlMyA9ICEoZm9vID09IG51bGwpO1xuXG5jb25zdCB2YWx1ZTQgPSBCb29sZWFuKGZvbykgPT09IHRydWU7XG5cbmNvbnN0IG9iaklzRW1wdHkgPSBPYmplY3Qua2V5cyhzb21lT2JqKS5sZW5ndGggPT09IDA7XG5cbmNvbnN0IGFycklzRW1wdHkgPSBzb21lQXJyLmxlbmd0aCA9PT0gMDsifQ==)\n\n``` language-js\n/*eslint no-constant-binary-expression: \"error\"*/\n\nconst value1 = x == null;\n\nconst value2 = (condition ? x : {}) || DEFAULT;\n\nconst value3 = !(foo == null);\n\nconst value4 = Boolean(foo) === true;\n\nconst objIsEmpty = Object.keys(someObj).length === 0;\n\nconst arrIsEmpty = someArr.length === 0;\n```\n\n## Related Rules\n\n- [no-constant-condition](no-constant-condition)\n\n## Version\n\nThis rule was introduced in ESLint v8.14.0.\n\n## Further Reading\n\n[Interesting bugs caught by no-constant-binary-expression - ESLint - Pluggable JavaScript Linter](https://eslint.org/blog/2022/07/interesting-bugs-caught-by-no-constant-binary-expression/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-constant-binary-expression.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-constant-binary-expression.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-constant-binary-expression](https://eslint.org/docs/latest/rules/no-constant-binary-expression)"
- name: no-constant-condition
  id: rules/no-constant-condition
  summary: A constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior
  description: "# no-constant-condition\n\nDisallow constant expressions in conditions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-constant-condition../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [checkLoops](#checkloops)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nA constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.\n\n``` language-js\nif (false) {\n    doSomethingUnfinished();\n}\n```\n\n## Rule Details\n\nThis rule disallows constant expressions in the test condition of:\n\n- `if`, `for`, `while`, or `do...while` statement\n- `?:` ternary expression\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0YW50LWNvbmRpdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKGZhbHNlKSB7XG4gICAgZG9Tb21ldGhpbmdVbmZpbmlzaGVkKCk7XG59XG5cbmlmICh2b2lkIHgpIHtcbiAgICBkb1NvbWV0aGluZ1VuZmluaXNoZWQoKTtcbn1cblxuaWYgKHggJiY9IGZhbHNlKSB7XG4gICAgZG9Tb21ldGhpbmdOZXZlcigpO1xufVxuXG5pZiAoY2xhc3Mge30pIHtcbiAgICBkb1NvbWV0aGluZ0Fsd2F5cygpO1xufVxuXG5pZiAobmV3IEJvb2xlYW4oeCkpIHtcbiAgICBkb1NvbWV0aGluZ0Fsd2F5cygpO1xufVxuXG5pZiAoQm9vbGVhbigxKSkge1xuICAgIGRvU29tZXRoaW5nQWx3YXlzKCk7XG59XG5cbmlmICh1bmRlZmluZWQpIHtcbiAgICBkb1NvbWV0aGluZ1VuZmluaXNoZWQoKTtcbn1cblxuaWYgKHggfHw9IHRydWUpIHtcbiAgICBkb1NvbWV0aGluZ0Fsd2F5cygpO1xufVxuXG5mb3IgKDstMjspIHtcbiAgICBkb1NvbWV0aGluZ0ZvcmV2ZXIoKTtcbn1cblxud2hpbGUgKHR5cGVvZiB4KSB7XG4gICAgZG9Tb21ldGhpbmdGb3JldmVyKCk7XG59XG5cbmRvIHtcbiAgICBkb1NvbWV0aGluZ0ZvcmV2ZXIoKTtcbn0gd2hpbGUgKHggPSAtMSk7XG5cbnZhciByZXN1bHQgPSAwID8gYSA6IGI7XG5cbmlmKGlucHV0ID09PSBcImhlbGxvXCIgfHwgXCJieWVcIil7XG4gIG91dHB1dChpbnB1dCk7XG59In0=)\n\n``` language-js\n/*eslint no-constant-condition: \"error\"*/\n\nif (false) {\n    doSomethingUnfinished();\n}\n\nif (void x) {\n    doSomethingUnfinished();\n}\n\nif (x &&= false) {\n    doSomethingNever();\n}\n\nif (class {}) {\n    doSomethingAlways();\n}\n\nif (new Boolean(x)) {\n    doSomethingAlways();\n}\n\nif (Boolean(1)) {\n    doSomethingAlways();\n}\n\nif (undefined) {\n    doSomethingUnfinished();\n}\n\nif (x ||= true) {\n    doSomethingAlways();\n}\n\nfor (;-2;) {\n    doSomethingForever();\n}\n\nwhile (typeof x) {\n    doSomethingForever();\n}\n\ndo {\n    doSomethingForever();\n} while (x = -1);\n\nvar result = 0 ? a : b;\n\nif(input === \"hello\" || \"bye\"){\n  output(input);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0YW50LWNvbmRpdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKHggPT09IDApIHtcbiAgICBkb1NvbWV0aGluZygpO1xufVxuXG5mb3IgKDs7KSB7XG4gICAgZG9Tb21ldGhpbmdGb3JldmVyKCk7XG59XG5cbndoaWxlICh0eXBlb2YgeCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbmRvIHtcbiAgICBkb1NvbWV0aGluZygpO1xufSB3aGlsZSAoeCk7XG5cbnZhciByZXN1bHQgPSB4ICE9PSAwID8gYSA6IGI7XG5cbmlmKGlucHV0ID09PSBcImhlbGxvXCIgfHwgaW5wdXQgPT09IFwiYnllXCIpe1xuICBvdXRwdXQoaW5wdXQpO1xufSJ9)\n\n``` language-js\n/*eslint no-constant-condition: \"error\"*/\n\nif (x === 0) {\n    doSomething();\n}\n\nfor (;;) {\n    doSomethingForever();\n}\n\nwhile (typeof x === \"undefined\") {\n    doSomething();\n}\n\ndo {\n    doSomething();\n} while (x);\n\nvar result = x !== 0 ? a : b;\n\nif(input === \"hello\" || input === \"bye\"){\n  output(input);\n}\n```\n\n## Options\n\n### checkLoops\n\nSet to `true` by default. Setting this option to `false` allows constant expressions in loops.\n\nExamples of **correct** code for when `checkLoops` is `false`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0YW50LWNvbmRpdGlvbjogW1wiZXJyb3JcIiwgeyBcImNoZWNrTG9vcHNcIjogZmFsc2UgfV0qL1xuXG53aGlsZSAodHJ1ZSkge1xuICAgIGRvU29tZXRoaW5nKCk7XG4gICAgaWYgKGNvbmRpdGlvbigpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn07XG5cbmZvciAoO3RydWU7KSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbiAgICBpZiAoY29uZGl0aW9uKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcblxuZG8ge1xuICAgIGRvU29tZXRoaW5nKCk7XG4gICAgaWYgKGNvbmRpdGlvbigpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn0gd2hpbGUgKHRydWUpIn0=)\n\n``` language-js\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\nfor (;true;) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\ndo {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n} while (true)\n```\n\n## Related Rules\n\n- [no-constant-binary-expression](no-constant-binary-expression)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-constant-condition.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-constant-condition.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-constant-condition](https://eslint.org/docs/latest/rules/no-constant-condition)"
- name: no-constructor-return
  id: rules/no-constructor-return
  summary: In JavaScript, returning a value in the constructor of a class may be a mistake
  description: "# no-constructor-return\n\nDisallow returning value from constructor\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nIn JavaScript, returning a value in the constructor of a class may be a mistake. Forbidding this pattern prevents mistakes resulting from unfamiliarity with the language or a copy-paste error.\n\n## Rule Details\n\nThis rule disallows return statements in the constructor of a class. Note that returning nothing with flow control is allowed.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0cnVjdG9yLXJldHVybjogXCJlcnJvclwiKi9cblxuY2xhc3MgQSB7XG4gICAgY29uc3RydWN0b3IoYSkge1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG5cbmNsYXNzIEIge1xuICAgIGNvbnN0cnVjdG9yKGYpIHtcbiAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2ZhbHN5JztcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-constructor-return: \"error\"*/\n\nclass A {\n    constructor(a) {\n        this.a = a;\n        return a;\n    }\n}\n\nclass B {\n    constructor(f) {\n        if (!f) {\n            return 'falsy';\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnN0cnVjdG9yLXJldHVybjogXCJlcnJvclwiKi9cblxuY2xhc3MgQyB7XG4gICAgY29uc3RydWN0b3IoYykge1xuICAgICAgICB0aGlzLmMgPSBjO1xuICAgIH1cbn1cblxuY2xhc3MgRCB7XG4gICAgY29uc3RydWN0b3IoZikge1xuICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgIHJldHVybjsgIC8vIEZsb3cgY29udHJvbC5cbiAgICAgICAgfVxuXG4gICAgICAgIGYoKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-constructor-return: \"error\"*/\n\nclass C {\n    constructor(c) {\n        this.c = c;\n    }\n}\n\nclass D {\n    constructor(f) {\n        if (!f) {\n            return;  // Flow control.\n        }\n\n        f();\n    }\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v6.7.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-constructor-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-constructor-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-constructor-return](https://eslint.org/docs/latest/rules/no-constructor-return)"
- name: no-continue
  id: rules/no-continue
  summary: The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration
  description: "# no-continue\n\nDisallow `continue` statements\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Compatibility](#compatibility)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThe `continue` statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as `if` should be used instead.\n\n``` language-js\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    sum += i;\n}\n```\n\n## Rule Details\n\nThis rule disallows `continue` statements.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnRpbnVlOiBcImVycm9yXCIqL1xuXG52YXIgc3VtID0gMCxcbiAgICBpO1xuXG5mb3IoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgaWYoaSA+PSA1KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHN1bSArPSBpO1xufSJ9)\n\n``` language-js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    sum += i;\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnRpbnVlOiBcImVycm9yXCIqL1xuXG52YXIgc3VtID0gMCxcbiAgICBpO1xuXG5sYWJlbGVkTG9vcDogZm9yKGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGlmKGkgPj0gNSkge1xuICAgICAgICBjb250aW51ZSBsYWJlbGVkTG9vcDtcbiAgICB9XG5cbiAgICBzdW0gKz0gaTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nlabeledLoop: for(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue labeledLoop;\n    }\n\n    sum += i;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnRpbnVlOiBcImVycm9yXCIqL1xuXG52YXIgc3VtID0gMCxcbiAgICBpO1xuXG5mb3IoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgaWYoaSA8IDUpIHtcbiAgICAgICBzdW0gKz0gaTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i < 5) {\n       sum += i;\n    }\n}\n```\n\n## Compatibility\n\n- **JSLint**: `continue`\n\n## Version\n\nThis rule was introduced in ESLint v0.19.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-continue.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-continue.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-continue](https://eslint.org/docs/latest/rules/no-continue)"
- name: no-control-regex
  id: rules/no-control-regex
  summary: Control characters are special, invisible characters in the ASCII range 0-31
  description: "# no-control-regex\n\nDisallow control characters in regular expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-control-regex../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Known Limitations](#known-limitations)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nControl characters are special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings so a regular expression containing elements that explicitly match these characters is most likely a mistake.\n\n## Rule Details\n\nThis rule disallows control characters and some escape sequences that match control characters in regular expressions.\n\nThe following elements of regular expression patterns are considered possible errors in typing and are therefore disallowed by this rule:\n\n- Hexadecimal character escapes from `\\x00` to `\\x1F`.\n- Unicode character escapes from `\\u0000` to `\\u001F`.\n- Unicode code point escapes from `\\u{0}` to `\\u{1F}`.\n- Unescaped raw characters from U+0000 to U+001F.\n\nControl escapes such as `\\t` and `\\n` are allowed by this rule.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnRyb2wtcmVnZXg6IFwiZXJyb3JcIiovXG5cbnZhciBwYXR0ZXJuMSA9IC9cXHgwMC87XG52YXIgcGF0dGVybjIgPSAvXFx4MEMvO1xudmFyIHBhdHRlcm4zID0gL1xceDFGLztcbnZhciBwYXR0ZXJuNCA9IC9cXHUwMDBDLztcbnZhciBwYXR0ZXJuNSA9IC9cXHV7Q30vdTtcbnZhciBwYXR0ZXJuNiA9IG5ldyBSZWdFeHAoXCJcXHgwQ1wiKTsgLy8gcmF3IFUrMDAwQyBjaGFyYWN0ZXIgaW4gdGhlIHBhdHRlcm5cbnZhciBwYXR0ZXJuNyA9IG5ldyBSZWdFeHAoXCJcXFxceDBDXCIpOyAvLyBcXHgwQyBwYXR0ZXJuIn0=)\n\n``` language-js\n/*eslint no-control-regex: \"error\"*/\n\nvar pattern1 = /\\x00/;\nvar pattern2 = /\\x0C/;\nvar pattern3 = /\\x1F/;\nvar pattern4 = /\\u000C/;\nvar pattern5 = /\\u{C}/u;\nvar pattern6 = new RegExp(\"\\x0C\"); // raw U+000C character in the pattern\nvar pattern7 = new RegExp(\"\\\\x0C\"); // \\x0C pattern\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWNvbnRyb2wtcmVnZXg6IFwiZXJyb3JcIiovXG5cbnZhciBwYXR0ZXJuMSA9IC9cXHgyMC87XG52YXIgcGF0dGVybjIgPSAvXFx1MDAyMC87XG52YXIgcGF0dGVybjMgPSAvXFx1ezIwfS91O1xudmFyIHBhdHRlcm40ID0gL1xcdC87XG52YXIgcGF0dGVybjUgPSAvXFxuLztcbnZhciBwYXR0ZXJuNiA9IG5ldyBSZWdFeHAoXCJcXHgyMFwiKTtcbnZhciBwYXR0ZXJuNyA9IG5ldyBSZWdFeHAoXCJcXFxcdFwiKTtcbnZhciBwYXR0ZXJuOCA9IG5ldyBSZWdFeHAoXCJcXFxcblwiKTsifQ==)\n\n``` language-js\n/*eslint no-control-regex: \"error\"*/\n\nvar pattern1 = /\\x20/;\nvar pattern2 = /\\u0020/;\nvar pattern3 = /\\u{20}/u;\nvar pattern4 = /\\t/;\nvar pattern5 = /\\n/;\nvar pattern6 = new RegExp(\"\\x20\");\nvar pattern7 = new RegExp(\"\\\\t\");\nvar pattern8 = new RegExp(\"\\\\n\");\n```\n\n## Known Limitations\n\nWhen checking `RegExp` constructor calls, this rule examines evaluated regular expression patterns. Therefore, although this rule intends to allow syntax such as `\\t`, it doesn’t allow `new RegExp(\"\\t\")` since the evaluated pattern (string value of `\"\\t\"`) contains a raw control character (the TAB character).\n\n``` language-js\n/*eslint no-control-regex: \"error\"*/\n\nnew RegExp(\"\\t\"); // disallowed since the pattern is: <TAB>\n\nnew RegExp(\"\\\\t\"); // allowed since the pattern is: \\t\n```\n\nThere is no difference in behavior between `new RegExp(\"\\t\")` and `new RegExp(\"\\\\t\")`, and the intention to match the TAB character is clear in both cases. They are equally valid for the purpose of this rule, but it only allows `new RegExp(\"\\\\t\")`.\n\n## When Not To Use It\n\nIf you need to use control character pattern matching, then you should turn this rule off.\n\n## Related Rules\n\n- [no-div-regex](no-div-regex)\n- [no-regex-spaces](no-regex-spaces)\n\n## Version\n\nThis rule was introduced in ESLint v0.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-control-regex.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-control-regex.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-control-regex](https://eslint.org/docs/latest/rules/no-control-regex)"
- name: no-debugger
  id: rules/no-debugger
  summary: The debugger statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code
  description: "# no-debugger\n\nDisallow the use of `debugger`\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-debugger../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThe `debugger` statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain `debugger`, as it will cause the browser to stop executing code and open an appropriate debugger.\n\n## Rule Details\n\nThis rule disallows `debugger` statements.\n\nExample of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWRlYnVnZ2VyOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBpc1RydXRoeSh4KSB7XG4gICAgZGVidWdnZXI7XG4gICAgcmV0dXJuIEJvb2xlYW4oeCk7XG59In0=)\n\n``` language-js\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    debugger;\n    return Boolean(x);\n}\n```\n\nExample of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWRlYnVnZ2VyOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBpc1RydXRoeSh4KSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oeCk7IC8vIHNldCBhIGJyZWFrcG9pbnQgYXQgdGhpcyBsaW5lXG59In0=)\n\n``` language-js\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    return Boolean(x); // set a breakpoint at this line\n}\n```\n\n## When Not To Use It\n\nIf your code is still very much in development and don’t want to worry about stripping `debugger` statements, then turn this rule off. You’ll generally want to turn it back on when testing code prior to deployment.\n\n## Related Rules\n\n- [no-alert](no-alert)\n- [no-console](no-console)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Further Reading\n\n[debugger - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-debugger.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-debugger.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-debugger](https://eslint.org/docs/latest/rules/no-debugger)"
- name: no-delete-var
  id: rules/no-delete-var
  summary: The purpose of the delete operator is to remove a property from an object
  description: "# no-delete-var\n\nDisallow deleting variables\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-delete-var../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThe purpose of the `delete` operator is to remove a property from an object. Using the `delete` operator on a variable might lead to unexpected behavior.\n\n## Rule Details\n\nThis rule disallows the use of the `delete` operator on variables.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWRlbGV0ZS12YXI6IFwiZXJyb3JcIiovXG5cbnZhciB4O1xuZGVsZXRlIHg7In0=)\n\n``` language-js\n/*eslint no-delete-var: \"error\"*/\n\nvar x;\ndelete x;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-delete-var.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-delete-var.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-delete-var](https://eslint.org/docs/latest/rules/no-delete-var)"
- name: no-div-regex
  id: rules/no-div-regex
  summary: Characters /= at the beginning of a regular expression literal can be confused with a division assignment operator
  description: "# no-div-regex\n\nDisallow equal signs explicitly at the beginning of regular expressions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-div-regex../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nCharacters `/=` at the beginning of a regular expression literal can be confused with a division assignment operator.\n\n``` language-js\nfunction bar() { return /=foo/; }\n```\n\n## Rule Details\n\nThis rule forbids equal signs (`=`) after the slash (`/`) at the beginning of a regular expression literal, because the characters `/=` can be confused with a division assignment operator.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWRpdi1yZWdleDogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gYmFyKCkgeyByZXR1cm4gLz1mb28vOyB9In0=)\n\n``` language-js\n/*eslint no-div-regex: \"error\"*/\n\nfunction bar() { return /=foo/; }\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWRpdi1yZWdleDogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gYmFyKCkgeyByZXR1cm4gL1s9XWZvby87IH0ifQ==)\n\n``` language-js\n/*eslint no-div-regex: \"error\"*/\n\nfunction bar() { return /[=]foo/; }\n```\n\n## Related Rules\n\n- [no-control-regex](no-control-regex)\n- [no-regex-spaces](no-regex-spaces)\n\n## Version\n\nThis rule was introduced in ESLint v0.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-div-regex.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-div-regex.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-div-regex](https://eslint.org/docs/latest/rules/no-div-regex)"
- name: no-dupe-args
  id: rules/no-dupe-args
  summary: If more than one parameter has the same name in a function definition, the last occurrence “shadows” the preceding occurrences
  description: "# no-dupe-args\n\nDisallow duplicate arguments in `function` definitions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-dupe-args../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIf more than one parameter has the same name in a function definition, the last occurrence “shadows” the preceding occurrences. A duplicated name might be a typing error.\n\n## Rule Details\n\nThis rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtYXJnczogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKGEsIGIsIGEpIHtcbiAgICBjb25zb2xlLmxvZyhcInZhbHVlIG9mIHRoZSBzZWNvbmQgYTpcIiwgYSk7XG59XG5cbnZhciBiYXIgPSBmdW5jdGlvbiAoYSwgYiwgYSkge1xuICAgIGNvbnNvbGUubG9nKFwidmFsdWUgb2YgdGhlIHNlY29uZCBhOlwiLCBhKTtcbn07In0=)\n\n``` language-js\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, a) {\n    console.log(\"value of the second a:\", a);\n}\n\nvar bar = function (a, b, a) {\n    console.log(\"value of the second a:\", a);\n};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtYXJnczogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKGEsIGIsIGMpIHtcbiAgICBjb25zb2xlLmxvZyhhLCBiLCBjKTtcbn1cblxudmFyIGJhciA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgY29uc29sZS5sb2coYSwgYiwgYyk7XG59OyJ9)\n\n``` language-js\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, c) {\n    console.log(a, b, c);\n}\n\nvar bar = function (a, b, c) {\n    console.log(a, b, c);\n};\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.16.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-dupe-args.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-dupe-args.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-dupe-args](https://eslint.org/docs/latest/rules/no-dupe-args)"
- name: no-dupe-class-members
  id: rules/no-dupe-class-members
  summary: If there are declarations of the same name in class members, the last declaration overwrites other declarations silently
  description: "# no-dupe-class-members\n\nDisallow duplicate class members\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-dupe-class-members../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIf there are declarations of the same name in class members, the last declaration overwrites other declarations silently. It can cause unexpected behaviors.\n\n``` language-js\n/*eslint-env es6*/\n\nclass Foo {\n  bar() { console.log(\"hello\"); }\n  bar() { console.log(\"goodbye\"); }\n}\n\nvar foo = new Foo();\nfoo.bar(); // goodbye\n```\n\n## Rule Details\n\nThis rule is aimed to flag the use of duplicate names in class members.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtY2xhc3MtbWVtYmVyczogXCJlcnJvclwiKi9cblxuY2xhc3MgQSB7XG4gIGJhcigpIHsgfVxuICBiYXIoKSB7IH1cbn1cblxuY2xhc3MgQiB7XG4gIGJhcigpIHsgfVxuICBnZXQgYmFyKCkgeyB9XG59XG5cbmNsYXNzIEMge1xuICBiYXI7XG4gIGJhcjtcbn1cblxuY2xhc3MgRCB7XG4gIGJhcjtcbiAgYmFyKCkgeyB9XG59XG5cbmNsYXNzIEUge1xuICBzdGF0aWMgYmFyKCkgeyB9XG4gIHN0YXRpYyBiYXIoKSB7IH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-dupe-class-members: \"error\"*/\n\nclass A {\n  bar() { }\n  bar() { }\n}\n\nclass B {\n  bar() { }\n  get bar() { }\n}\n\nclass C {\n  bar;\n  bar;\n}\n\nclass D {\n  bar;\n  bar() { }\n}\n\nclass E {\n  static bar() { }\n  static bar() { }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtY2xhc3MtbWVtYmVyczogXCJlcnJvclwiKi9cblxuY2xhc3MgQSB7XG4gIGJhcigpIHsgfVxuICBxdXgoKSB7IH1cbn1cblxuY2xhc3MgQiB7XG4gIGdldCBiYXIoKSB7IH1cbiAgc2V0IGJhcih2YWx1ZSkgeyB9XG59XG5cbmNsYXNzIEMge1xuICBiYXI7XG4gIHF1eDtcbn1cblxuY2xhc3MgRCB7XG4gIGJhcjtcbiAgcXV4KCkgeyB9XG59XG5cbmNsYXNzIEUge1xuICBzdGF0aWMgYmFyKCkgeyB9XG4gIGJhcigpIHsgfVxufSJ9)\n\n``` language-js\n/*eslint no-dupe-class-members: \"error\"*/\n\nclass A {\n  bar() { }\n  qux() { }\n}\n\nclass B {\n  get bar() { }\n  set bar(value) { }\n}\n\nclass C {\n  bar;\n  qux;\n}\n\nclass D {\n  bar;\n  qux() { }\n}\n\nclass E {\n  static bar() { }\n  bar() { }\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don’t want to be notified about duplicate names in class members, you can safely disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v1.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-dupe-class-members.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-dupe-class-members.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-dupe-class-members](https://eslint.org/docs/latest/rules/no-dupe-class-members)"
- name: no-dupe-else-if
  id: rules/no-dupe-else-if
  summary: if-else-if chains are commonly used when there is a need to execute only one branch (or at most one branch) out of several possible branches, based on certain conditions
  description: "# no-dupe-else-if\n\nDisallow duplicate conditions in if-else-if chains\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-dupe-else-if../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\n`if-else-if` chains are commonly used when there is a need to execute only one branch (or at most one branch) out of several possible branches, based on certain conditions.\n\n``` language-js\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c) {\n    baz();\n}\n```\n\nTwo identical test conditions in the same chain are almost always a mistake in the code. Unless there are side effects in the expressions, a duplicate will evaluate to the same `true` or `false` value as the identical expression earlier in the chain, meaning that its branch can never execute.\n\n``` language-js\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (b) {\n    baz();\n}\n```\n\nIn the above example, `baz()` can never execute. Obviously, `baz()` could be executed only when `b` evaluates to `true`, but in that case `bar()` would be executed instead, since it’s earlier in the chain.\n\n## Rule Details\n\nThis rule disallows duplicate conditions in the same `if-else-if` chain.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtZWxzZS1pZjogXCJlcnJvclwiKi9cblxuaWYgKGlzU29tZXRoaW5nKHgpKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGlzU29tZXRoaW5nKHgpKSB7XG4gICAgYmFyKCk7XG59XG5cbmlmIChhKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGIpIHtcbiAgICBiYXIoKTtcbn0gZWxzZSBpZiAoYyAmJiBkKSB7XG4gICAgYmF6KCk7XG59IGVsc2UgaWYgKGMgJiYgZCkge1xuICAgIHF1dXgoKTtcbn0gZWxzZSB7XG4gICAgcXV1dXgoKTtcbn1cblxuaWYgKG4gPT09IDEpIHtcbiAgICBmb28oKTtcbn0gZWxzZSBpZiAobiA9PT0gMikge1xuICAgIGJhcigpO1xufSBlbHNlIGlmIChuID09PSAzKSB7XG4gICAgYmF6KCk7XG59IGVsc2UgaWYgKG4gPT09IDIpIHtcbiAgICBxdXV4KCk7XG59IGVsc2UgaWYgKG4gPT09IDUpIHtcbiAgICBxdXV1eCgpO1xufSJ9)\n\n``` language-js\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (isSomething(x)) {\n    foo();\n} else if (isSomething(x)) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c && d) {\n    baz();\n} else if (c && d) {\n    quux();\n} else {\n    quuux();\n}\n\nif (n === 1) {\n    foo();\n} else if (n === 2) {\n    bar();\n} else if (n === 3) {\n    baz();\n} else if (n === 2) {\n    quux();\n} else if (n === 5) {\n    quuux();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtZWxzZS1pZjogXCJlcnJvclwiKi9cblxuaWYgKGlzU29tZXRoaW5nKHgpKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGlzU29tZXRoaW5nRWxzZSh4KSkge1xuICAgIGJhcigpO1xufVxuXG5pZiAoYSkge1xuICAgIGZvbygpO1xufSBlbHNlIGlmIChiKSB7XG4gICAgYmFyKCk7XG59IGVsc2UgaWYgKGMgJiYgZCkge1xuICAgIGJheigpO1xufSBlbHNlIGlmIChjICYmIGUpIHtcbiAgICBxdXV4KCk7XG59IGVsc2Uge1xuICAgIHF1dXV4KCk7XG59XG5cbmlmIChuID09PSAxKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKG4gPT09IDIpIHtcbiAgICBiYXIoKTtcbn0gZWxzZSBpZiAobiA9PT0gMykge1xuICAgIGJheigpO1xufSBlbHNlIGlmIChuID09PSA0KSB7XG4gICAgcXV1eCgpO1xufSBlbHNlIGlmIChuID09PSA1KSB7XG4gICAgcXV1dXgoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (isSomething(x)) {\n    foo();\n} else if (isSomethingElse(x)) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c && d) {\n    baz();\n} else if (c && e) {\n    quux();\n} else {\n    quuux();\n}\n\nif (n === 1) {\n    foo();\n} else if (n === 2) {\n    bar();\n} else if (n === 3) {\n    baz();\n} else if (n === 4) {\n    quux();\n} else if (n === 5) {\n    quuux();\n}\n```\n\nThis rule can also detect some cases where the conditions are not identical, but the branch can never execute due to the logic of `||` and `&&` operators.\n\nExamples of additional **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUtZWxzZS1pZjogXCJlcnJvclwiKi9cblxuaWYgKGEgfHwgYikge1xuICAgIGZvbygpO1xufSBlbHNlIGlmIChhKSB7XG4gICAgYmFyKCk7XG59XG5cbmlmIChhKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGIpIHtcbiAgICBiYXIoKTtcbn0gZWxzZSBpZiAoYSB8fCBiKSB7XG4gICAgYmF6KCk7XG59XG5cbmlmIChhKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGEgJiYgYikge1xuICAgIGJhcigpO1xufVxuXG5pZiAoYSAmJiBiKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGEgJiYgYiAmJiBjKSB7XG4gICAgYmFyKCk7XG59XG5cbmlmIChhIHx8IGIpIHtcbiAgICBmb28oKTtcbn0gZWxzZSBpZiAoYiAmJiBjKSB7XG4gICAgYmFyKCk7XG59XG5cbmlmIChhKSB7XG4gICAgZm9vKCk7XG59IGVsc2UgaWYgKGIgJiYgYykge1xuICAgIGJhcigpO1xufSBlbHNlIGlmIChkICYmIChjICYmIGUgJiYgYiB8fCBhKSkge1xuICAgIGJheigpO1xufSJ9)\n\n``` language-js\n/*eslint no-dupe-else-if: \"error\"*/\n\nif (a || b) {\n    foo();\n} else if (a) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (a || b) {\n    baz();\n}\n\nif (a) {\n    foo();\n} else if (a && b) {\n    bar();\n}\n\nif (a && b) {\n    foo();\n} else if (a && b && c) {\n    bar();\n}\n\nif (a || b) {\n    foo();\n} else if (b && c) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b && c) {\n    bar();\n} else if (d && (c && e && b || a)) {\n    baz();\n}\n```\n\nPlease note that this rule does not compare conditions from the chain with conditions inside statements, and will not warn in the cases such as follows:\n\n``` language-js\nif (a) {\n    if (a) {\n        foo();\n    }\n}\n\nif (a) {\n    foo();\n} else {\n    if (a) {\n        bar();\n    }\n}\n```\n\n## When Not To Use It\n\nIn rare cases where you really need identical test conditions in the same chain, which necessarily means that the expressions in the chain are causing and relying on side effects, you will have to turn this rule off.\n\n## Related Rules\n\n- [no-duplicate-case](no-duplicate-case)\n- [no-lonely-if](no-lonely-if)\n\n## Version\n\nThis rule was introduced in ESLint v6.7.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-dupe-else-if.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-dupe-else-if.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-dupe-else-if](https://eslint.org/docs/latest/rules/no-dupe-else-if)"
- name: no-dupe-keys
  id: rules/no-dupe-keys
  summary: Multiple properties with the same key in object literals can cause unexpected behavior in your application
  description: "# no-dupe-keys\n\nDisallow duplicate keys in object literals\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-dupe-keys../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nMultiple properties with the same key in object literals can cause unexpected behavior in your application.\n\n``` language-js\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n```\n\n## Rule Details\n\nThis rule disallows duplicate keys in object literals.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUta2V5czogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IHtcbiAgICBiYXI6IFwiYmF6XCIsXG4gICAgYmFyOiBcInF1eFwiXG59O1xuXG52YXIgZm9vID0ge1xuICAgIFwiYmFyXCI6IFwiYmF6XCIsXG4gICAgYmFyOiBcInF1eFwiXG59O1xuXG52YXIgZm9vID0ge1xuICAgIDB4MTogXCJiYXpcIixcbiAgICAxOiBcInF1eFwiXG59OyJ9)\n\n``` language-js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    \"bar\": \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    0x1: \"baz\",\n    1: \"qux\"\n};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGUta2V5czogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IHtcbiAgICBiYXI6IFwiYmF6XCIsXG4gICAgcXV4eDogXCJxdXhcIlxufTsifQ==)\n\n``` language-js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    quxx: \"qux\"\n};\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-dupe-keys.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-dupe-keys.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-dupe-keys](https://eslint.org/docs/latest/rules/no-dupe-keys)"
- name: no-duplicate-case
  id: rules/no-duplicate-case
  summary: If a switch statement has duplicate test expressions in case clauses, it is likely that a programmer copied a case clause but forgot to change the test expression
  description: "# no-duplicate-case\n\nDisallow duplicate case labels\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-duplicate-case../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIf a `switch` statement has duplicate test expressions in `case` clauses, it is likely that a programmer copied a `case` clause but forgot to change the test expression.\n\n## Rule Details\n\nThis rule disallows duplicate test expressions in `case` clauses of `switch` statements.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1jYXNlOiBcImVycm9yXCIqL1xuXG52YXIgYSA9IDEsXG4gICAgb25lID0gMTtcblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTogICAgICAgICAvLyBkdXBsaWNhdGUgdGVzdCBleHByZXNzaW9uXG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xufVxuXG5zd2l0Y2ggKGEpIHtcbiAgICBjYXNlIG9uZTpcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIG9uZTogICAgICAgICAvLyBkdXBsaWNhdGUgdGVzdCBleHByZXNzaW9uXG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xufVxuXG5zd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwiMVwiOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIFwiMlwiOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIFwiMVwiOiAgICAgICAgIC8vIGR1cGxpY2F0ZSB0ZXN0IGV4cHJlc3Npb25cbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG59In0=)\n\n``` language-js\n/*eslint no-duplicate-case: \"error\"*/\n\nvar a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 1:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case one:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"1\":         // duplicate test expression\n        break;\n    default:\n        break;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1jYXNlOiBcImVycm9yXCIqL1xuXG52YXIgYSA9IDEsXG4gICAgb25lID0gMTtcblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoYSkge1xuICAgIGNhc2Ugb25lOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG59XG5cbnN3aXRjaCAoYSkge1xuICAgIGNhc2UgXCIxXCI6XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCIyXCI6XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCIzXCI6XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xufSJ9)\n\n``` language-js\n/*eslint no-duplicate-case: \"error\"*/\n\nvar a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"3\":\n        break;\n    default:\n        break;\n}\n```\n\n## When Not To Use It\n\nIn rare cases where identical test expressions in `case` clauses produce different values, which necessarily means that the expressions are causing and relying on side effects, you will have to disable this rule.\n\n``` language-js\nswitch (a) {\n    case i++:\n        foo();\n        break;\n    case i++: // eslint-disable-line no-duplicate-case\n        bar();\n        break;\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.17.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-duplicate-case.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-duplicate-case.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-duplicate-case](https://eslint.org/docs/latest/rules/no-duplicate-case)"
- name: no-duplicate-imports
  id: rules/no-duplicate-imports
  summary: Using a single import statement per module will make the code clearer because you can see everything being imported from that module on one line
  description: "# no-duplicate-imports\n\nDisallow duplicate module imports\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nUsing a single `import` statement per module will make the code clearer because you can see everything being imported from that module on one line.\n\nIn the following example the `module` import on line 1 is repeated on line 3. These can be combined to make the list of imports more succinct.\n\n``` language-js\nimport { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';\n```\n\n## Rule Details\n\nThis rule requires that all imports from a single module that can be merged exist in a single `import` statement.\n\nExample of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBcImVycm9yXCIqL1xuXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgc29tZXRoaW5nIGZyb20gJ2Fub3RoZXItbW9kdWxlJztcbmltcG9ydCB7IGZpbmQgfSBmcm9tICdtb2R1bGUnOyJ9)\n\n``` language-js\n/*eslint no-duplicate-imports: \"error\"*/\n\nimport { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';\n```\n\nExample of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBcImVycm9yXCIqL1xuXG5pbXBvcnQgeyBtZXJnZSwgZmluZCB9IGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgc29tZXRoaW5nIGZyb20gJ2Fub3RoZXItbW9kdWxlJzsifQ==)\n\n``` language-js\n/*eslint no-duplicate-imports: \"error\"*/\n\nimport { merge, find } from 'module';\nimport something from 'another-module';\n```\n\nExample of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBcImVycm9yXCIqL1xuXG4vLyBub3QgbWVyZ2VhYmxlXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgKiBhcyBzb21ldGhpbmcgZnJvbSAnbW9kdWxlJzsifQ==)\n\n``` language-js\n/*eslint no-duplicate-imports: \"error\"*/\n\n// not mergeable\nimport { merge } from 'module';\nimport * as something from 'module';\n```\n\n## Options\n\nThis rule takes one optional argument, an object with a single key, `includeExports` which is a `boolean`. It defaults to `false`.\n\nIf re-exporting from an imported module, you should add the imports to the `import`-statement, and export that directly, not use `export ... from`.\n\nExample of **incorrect** code for this rule with the `{ \"includeExports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBbXCJlcnJvclwiLCB7IFwiaW5jbHVkZUV4cG9ydHNcIjogdHJ1ZSB9XSovXG5cbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnbW9kdWxlJztcblxuZXhwb3J0IHsgZmluZCB9IGZyb20gJ21vZHVsZSc7In0=)\n\n``` language-js\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge } from 'module';\n\nexport { find } from 'module';\n```\n\nExample of **correct** code for this rule with the `{ \"includeExports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBbXCJlcnJvclwiLCB7IFwiaW5jbHVkZUV4cG9ydHNcIjogdHJ1ZSB9XSovXG5cbmltcG9ydCB7IG1lcmdlLCBmaW5kIH0gZnJvbSAnbW9kdWxlJztcblxuZXhwb3J0IHsgZmluZCB9OyJ9)\n\n``` language-js\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\nexport { find };\n```\n\nExample of **correct** code for this rule with the `{ \"includeExports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWR1cGxpY2F0ZS1pbXBvcnRzOiBbXCJlcnJvclwiLCB7IFwiaW5jbHVkZUV4cG9ydHNcIjogdHJ1ZSB9XSovXG5cbmltcG9ydCB7IG1lcmdlLCBmaW5kIH0gZnJvbSAnbW9kdWxlJztcblxuLy8gY2Fubm90IGJlIG1lcmdlZCB3aXRoIHRoZSBhYm92ZSBpbXBvcnRcbmV4cG9ydCAqIGFzIHNvbWV0aGluZyBmcm9tICdtb2R1bGUnO1xuXG4vLyBjYW5ub3QgYmUgd3JpdHRlbiBkaWZmZXJlbnRseVxuZXhwb3J0ICogZnJvbSAnbW9kdWxlJzsifQ==)\n\n``` language-js\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\n// cannot be merged with the above import\nexport * as something from 'module';\n\n// cannot be written differently\nexport * from 'module';\n```\n\n## Version\n\nThis rule was introduced in ESLint v2.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-duplicate-imports.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-duplicate-imports.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-duplicate-imports](https://eslint.org/docs/latest/rules/no-duplicate-imports)"
- name: no-else-return
  id: rules/no-else-return
  summary: If an if block contains a return statement, the else block becomes unnecessary
  description: "# no-else-return\n\nDisallow `else` blocks after `return` statements in `if` statements\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-else-return../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowElseIf: true](#allowelseif-true)\n    2.  [allowElseIf: false](#allowelseif-false)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIf an `if` block contains a `return` statement, the `else` block becomes unnecessary. Its contents can be placed outside of the block.\n\n``` language-js\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at highlighting an unnecessary block of code following an `if` containing a return statement. As such, it will warn when it encounters an `else` following a chain of `if`s, all of them containing a `return` statement.\n\n## Options\n\nThis rule has an object option:\n\n- `allowElseIf: true` (default) allows `else if` blocks after a return\n- `allowElseIf: false` disallows `else if` blocks after a return\n\n### allowElseIf: true\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVsc2UtcmV0dXJuOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB6O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBpZiAoeCkge1xuICAgICAgICByZXR1cm4geTtcbiAgICB9IGVsc2UgaWYgKHopIHtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb28zKCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0ID0gXCJmb29cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZm9vNCgpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICdJdCBmYWlsZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJJdCdzIHN0aWxsIGxvYWRpbmdcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVHdvIHdhcm5pbmdzIGZvciBuZXN0ZWQgb2NjdXJyZW5jZXNcbmZ1bmN0aW9uIGZvbzUoKSB7XG4gICAgaWYgKHgpIHtcbiAgICAgICAgaWYgKHkpIHtcbiAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gejtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-else-return: \"error\"*/\n\nfunction foo1() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n\nfunction foo2() {\n    if (x) {\n        return y;\n    } else if (z) {\n        return w;\n    } else {\n        return t;\n    }\n}\n\nfunction foo3() {\n    if (x) {\n        return y;\n    } else {\n        var t = \"foo\";\n    }\n\n    return t;\n}\n\nfunction foo4() {\n    if (error) {\n        return 'It failed';\n    } else {\n        if (loading) {\n            return \"It's still loading\";\n        }\n    }\n}\n\n// Two warnings for nested occurrences\nfunction foo5() {\n    if (x) {\n        if (y) {\n            return y;\n        } else {\n            return x;\n        }\n    } else {\n        return z;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVsc2UtcmV0dXJuOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgIH1cblxuICAgIHJldHVybiB6O1xufVxuXG5mdW5jdGlvbiBmb28yKCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgIH0gZWxzZSBpZiAoeikge1xuICAgICAgICB2YXIgdCA9IFwiZm9vXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb28zKCkge1xuICAgIGlmICh4KSB7XG4gICAgICAgIGlmICh6KSB7XG4gICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB6O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9vNCgpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICdJdCBmYWlsZWQnO1xuICAgIH0gZWxzZSBpZiAobG9hZGluZykge1xuICAgICAgICByZXR1cm4gXCJJdCdzIHN0aWxsIGxvYWRpbmdcIjtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-else-return: \"error\"*/\n\nfunction foo1() {\n    if (x) {\n        return y;\n    }\n\n    return z;\n}\n\nfunction foo2() {\n    if (x) {\n        return y;\n    } else if (z) {\n        var t = \"foo\";\n    } else {\n        return w;\n    }\n}\n\nfunction foo3() {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\nfunction foo4() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n### allowElseIf: false\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVsc2UtcmV0dXJuOiBbXCJlcnJvclwiLCB7YWxsb3dFbHNlSWY6IGZhbHNlfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnSXQgZmFpbGVkJztcbiAgICB9IGVsc2UgaWYgKGxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwiSXQncyBzdGlsbCBsb2FkaW5nXCI7XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVsc2UtcmV0dXJuOiBbXCJlcnJvclwiLCB7YWxsb3dFbHNlSWY6IGZhbHNlfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnSXQgZmFpbGVkJztcbiAgICB9XG5cbiAgICBpZiAobG9hZGluZykge1xuICAgICAgICByZXR1cm4gXCJJdCdzIHN0aWxsIGxvYWRpbmdcIjtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    }\n\n    if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-else-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-else-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-else-return](https://eslint.org/docs/latest/rules/no-else-return)"
- name: no-empty
  id: rules/no-empty
  summary: Empty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed
  description: "# no-empty\n\nDisallow empty block statements\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-empty../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-empty../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowEmptyCatch](#allowemptycatch)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed. They can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty `catch` or `finally` block of a `try` statement to indicate that execution should continue regardless of errors).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5OiBcImVycm9yXCIqL1xuXG5pZiAoZm9vKSB7XG59XG5cbndoaWxlIChmb28pIHtcbn1cblxuc3dpdGNoKGZvbykge1xufVxuXG50cnkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59IGNhdGNoKGV4KSB7XG5cbn0gZmluYWxseSB7XG5cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n}\n\nwhile (foo) {\n}\n\nswitch(foo) {\n}\n\ntry {\n    doSomething();\n} catch(ex) {\n\n} finally {\n\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5OiBcImVycm9yXCIqL1xuXG5pZiAoZm9vKSB7XG4gICAgLy8gZW1wdHlcbn1cblxud2hpbGUgKGZvbykge1xuICAgIC8qIGVtcHR5ICovXG59XG5cbnRyeSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbn0gY2F0Y2ggKGV4KSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxufVxuXG50cnkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59IGZpbmFsbHkge1xuICAgIC8qIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3IgKi9cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n    // empty\n}\n\nwhile (foo) {\n    /* empty */\n}\n\ntry {\n    doSomething();\n} catch (ex) {\n    // continue regardless of error\n}\n\ntry {\n    doSomething();\n} finally {\n    /* continue regardless of error */\n}\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n- `\"allowEmptyCatch\": true` allows empty `catch` clauses (that is, which do not contain a comment)\n\n### allowEmptyCatch\n\nExamples of additional **correct** code for this rule with the `{ \"allowEmptyCatch\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1lbXB0eTogW1wiZXJyb3JcIiwgeyBcImFsbG93RW1wdHlDYXRjaFwiOiB0cnVlIH1dICovXG50cnkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59IGNhdGNoIChleCkge31cblxudHJ5IHtcbiAgICBkb1NvbWV0aGluZygpO1xufVxuY2F0Y2ggKGV4KSB7fVxuZmluYWxseSB7XG4gICAgLyogY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvciAqL1xufSJ9)\n\n``` language-js\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\ntry {\n    doSomething();\n} catch (ex) {}\n\ntry {\n    doSomething();\n}\ncatch (ex) {}\nfinally {\n    /* continue regardless of error */\n}\n```\n\n## When Not To Use It\n\nIf you intentionally use empty block statements then you can disable this rule.\n\n## Related Rules\n\n- [no-empty-function](no-empty-function)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-empty.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-empty.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-empty](https://eslint.org/docs/latest/rules/no-empty)"
- name: no-empty-character-class
  id: rules/no-empty-character-class
  summary: Because empty character classes in regular expressions do not match anything, they might be typing mistakes
  description: "# no-empty-character-class\n\nDisallow empty character classes in regular expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-empty-character-class../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Known Limitations](#known-limitations)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nBecause empty character classes in regular expressions do not match anything, they might be typing mistakes.\n\n``` language-js\nvar foo = /^abc[]/;\n```\n\n## Rule Details\n\nThis rule disallows empty character classes in regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWNoYXJhY3Rlci1jbGFzczogXCJlcnJvclwiKi9cblxuL15hYmNbXS8udGVzdChcImFiY2RlZmdcIik7IC8vIGZhbHNlXG5cImFiY2RlZmdcIi5tYXRjaCgvXmFiY1tdLyk7IC8vIG51bGxcblxuL15hYmNbW11dL3YudGVzdChcImFiY2RlZmdcIik7IC8vIGZhbHNlXG5cImFiY2RlZmdcIi5tYXRjaCgvXmFiY1tbXV0vdik7IC8vIG51bGxcblxuL15hYmNbW10tLVt4XV0vdi50ZXN0KFwiYWJjZGVmZ1wiKTsgLy8gZmFsc2VcblwiYWJjZGVmZ1wiLm1hdGNoKC9eYWJjW1tdLS1beF1dL3YpOyAvLyBudWxsXG5cbi9eYWJjW1tkXSYmW11dL3YudGVzdChcImFiY2RlZmdcIik7IC8vIGZhbHNlXG5cImFiY2RlZmdcIi5tYXRjaCgvXmFiY1tbZF0mJltdXS92KTsgLy8gbnVsbFxuXG5jb25zdCByZWdleCA9IC9eYWJjW2RbXV0vdjtcbnJlZ2V4LnRlc3QoXCJhYmNkZWZnXCIpOyAvLyB0cnVlLCB0aGUgbmVzdGVkIGBbXWAgaGFzIG5vIGVmZmVjdFxuXCJhYmNkZWZnXCIubWF0Y2gocmVnZXgpOyAvLyBbXCJhYmNkXCJdXG5yZWdleC50ZXN0KFwiYWJjZWZnXCIpOyAvLyBmYWxzZSwgdGhlIG5lc3RlZCBgW11gIGhhcyBubyBlZmZlY3RcblwiYWJjZWZnXCIubWF0Y2gocmVnZXgpOyAvLyBudWxsXG5yZWdleC50ZXN0KFwiYWJjXCIpOyAvLyBmYWxzZSwgdGhlIG5lc3RlZCBgW11gIGhhcyBubyBlZmZlY3RcblwiYWJjXCIubWF0Y2gocmVnZXgpOyAvLyBudWxsIn0=)\n\n``` language-js\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc[]/.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[]/); // null\n\n/^abc[[]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[]]/v); // null\n\n/^abc[[]--[x]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[]--[x]]/v); // null\n\n/^abc[[d]&&[]]/v.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[[d]&&[]]/v); // null\n\nconst regex = /^abc[d[]]/v;\nregex.test(\"abcdefg\"); // true, the nested `[]` has no effect\n\"abcdefg\".match(regex); // [\"abcd\"]\nregex.test(\"abcefg\"); // false, the nested `[]` has no effect\n\"abcefg\".match(regex); // null\nregex.test(\"abc\"); // false, the nested `[]` has no effect\n\"abc\".match(regex); // null\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWNoYXJhY3Rlci1jbGFzczogXCJlcnJvclwiKi9cblxuL15hYmMvLnRlc3QoXCJhYmNkZWZnXCIpOyAvLyB0cnVlXG5cImFiY2RlZmdcIi5tYXRjaCgvXmFiYy8pOyAvLyBbXCJhYmNcIl1cblxuL15hYmNbYS16XS8udGVzdChcImFiY2RlZmdcIik7IC8vIHRydWVcblwiYWJjZGVmZ1wiLm1hdGNoKC9eYWJjW2Etel0vKTsgLy8gW1wiYWJjZFwiXVxuXG4vXmFiY1teXS8udGVzdChcImFiY2RlZmdcIik7IC8vIHRydWVcblwiYWJjZGVmZ1wiLm1hdGNoKC9eYWJjW15dLyk7IC8vIFtcImFiY2RcIl0ifQ==)\n\n``` language-js\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc/); // [\"abc\"]\n\n/^abc[a-z]/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc[a-z]/); // [\"abcd\"]\n\n/^abc[^]/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc[^]/); // [\"abcd\"]\n```\n\n## Known Limitations\n\nThis rule does not report empty character classes in the string argument of calls to the `RegExp` constructor.\n\nExample of a *false negative* when this rule reports correct code:\n\n``` language-js\n/*eslint no-empty-character-class: \"error\"*/\n\nvar abcNeverMatches = new RegExp(\"^abc[]\");\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.22.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-empty-character-class.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-empty-character-class.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-empty-character-class](https://eslint.org/docs/latest/rules/no-empty-character-class)"
- name: no-empty-function
  id: rules/no-empty-function
  summary: Empty functions can reduce readability because readers need to guess whether it’s intentional or not
  description: "# no-empty-function\n\nDisallow empty functions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allow: functions](#allow-functions)\n    2.  [allow: arrowFunctions](#allow-arrowfunctions)\n    3.  [allow: generatorFunctions](#allow-generatorfunctions)\n    4.  [allow: methods](#allow-methods)\n    5.  [allow: generatorMethods](#allow-generatormethods)\n    6.  [allow: getters](#allow-getters)\n    7.  [allow: setters](#allow-setters)\n    8.  [allow: constructors](#allow-constructors)\n    9.  [allow: asyncFunctions](#allow-asyncfunctions)\n    10. [allow: asyncMethods](#allow-asyncmethods)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nEmpty functions can reduce readability because readers need to guess whether it’s intentional or not. So writing a clear comment for empty functions is a good practice.\n\n``` language-js\nfunction foo() {\n    // do nothing.\n}\n```\n\nEspecially, the empty block of arrow functions might be confusing developers. It’s very similar to an empty object literal.\n\n``` language-js\nlist.map(() => {});   // This is a block, would return undefined.\nlist.map(() => ({})); // This is an empty object.\n```\n\n## Rule Details\n\nThis rule is aimed at eliminating empty functions. A function will not be considered a problem if it contains a comment.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHt9XG5cbnZhciBiYXIgPSBmdW5jdGlvbigpIHt9O1xuXG52YXIgYmFyID0gKCkgPT4ge307XG5cbmZ1bmN0aW9uKiBiYXooKSB7fVxuXG52YXIgYmFyID0gZnVuY3Rpb24qKCkge307XG5cbnZhciBvYmogPSB7XG4gICAgZm9vOiBmdW5jdGlvbigpIHt9LFxuXG4gICAgZm9vOiBmdW5jdGlvbiooKSB7fSxcblxuICAgIGZvbygpIHt9LFxuXG4gICAgKmZvbygpIHt9LFxuXG4gICAgZ2V0IGZvbygpIHt9LFxuXG4gICAgc2V0IGZvbyh2YWx1ZSkge31cbn07XG5cbmNsYXNzIEEge1xuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIGZvbygpIHt9XG5cbiAgICAqZm9vKCkge31cblxuICAgIGdldCBmb28oKSB7fVxuXG4gICAgc2V0IGZvbyh2YWx1ZSkge31cblxuICAgIHN0YXRpYyBmb28oKSB7fVxuXG4gICAgc3RhdGljICpmb28oKSB7fVxuXG4gICAgc3RhdGljIGdldCBmb28oKSB7fVxuXG4gICAgc3RhdGljIHNldCBmb28odmFsdWUpIHt9XG59In0=)\n\n``` language-js\n/*eslint no-empty-function: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {}\n\nvar bar = function() {};\n\nvar bar = () => {};\n\nfunction* baz() {}\n\nvar bar = function*() {};\n\nvar obj = {\n    foo: function() {},\n\n    foo: function*() {},\n\n    foo() {},\n\n    *foo() {},\n\n    get foo() {},\n\n    set foo(value) {}\n};\n\nclass A {\n    constructor() {}\n\n    foo() {}\n\n    *foo() {}\n\n    get foo() {}\n\n    set foo(value) {}\n\n    static foo() {}\n\n    static *foo() {}\n\n    static get foo() {}\n\n    static set foo(value) {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBkbyBub3RoaW5nLlxufVxuXG52YXIgYmF6ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gYW55IGNsZWFyIGNvbW1lbnRzLlxufTtcblxudmFyIGJheiA9ICgpID0+IHtcbiAgICBiYXIoKTtcbn07XG5cbmZ1bmN0aW9uKiBmb29iYXIoKSB7XG4gICAgLy8gZG8gbm90aGluZy5cbn1cblxudmFyIGJheiA9IGZ1bmN0aW9uKigpIHtcbiAgICAvLyBkbyBub3RoaW5nLlxufTtcblxudmFyIG9iaiA9IHtcbiAgICBmb286IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH0sXG5cbiAgICBmb286IGZ1bmN0aW9uKigpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZy5cbiAgICB9LFxuXG4gICAgZm9vKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH0sXG5cbiAgICAqZm9vKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH0sXG5cbiAgICBnZXQgZm9vKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH0sXG5cbiAgICBzZXQgZm9vKHZhbHVlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcuXG4gICAgfVxufTtcblxuY2xhc3MgQSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcuXG4gICAgfVxuXG4gICAgZm9vKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH1cblxuICAgICpmb28oKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcuXG4gICAgfVxuXG4gICAgZ2V0IGZvbygpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZy5cbiAgICB9XG5cbiAgICBzZXQgZm9vKHZhbHVlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcuXG4gICAgfVxuXG4gICAgc3RhdGljIGZvbygpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZy5cbiAgICB9XG5cbiAgICBzdGF0aWMgKmZvbygpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZy5cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGZvbygpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZy5cbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGZvbyh2YWx1ZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nLlxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-function: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // do nothing.\n}\n\nvar baz = function() {\n    // any clear comments.\n};\n\nvar baz = () => {\n    bar();\n};\n\nfunction* foobar() {\n    // do nothing.\n}\n\nvar baz = function*() {\n    // do nothing.\n};\n\nvar obj = {\n    foo: function() {\n        // do nothing.\n    },\n\n    foo: function*() {\n        // do nothing.\n    },\n\n    foo() {\n        // do nothing.\n    },\n\n    *foo() {\n        // do nothing.\n    },\n\n    get foo() {\n        // do nothing.\n    },\n\n    set foo(value) {\n        // do nothing.\n    }\n};\n\nclass A {\n    constructor() {\n        // do nothing.\n    }\n\n    foo() {\n        // do nothing.\n    }\n\n    *foo() {\n        // do nothing.\n    }\n\n    get foo() {\n        // do nothing.\n    }\n\n    set foo(value) {\n        // do nothing.\n    }\n\n    static foo() {\n        // do nothing.\n    }\n\n    static *foo() {\n        // do nothing.\n    }\n\n    static get foo() {\n        // do nothing.\n    }\n\n    static set foo(value) {\n        // do nothing.\n    }\n}\n```\n\n## Options\n\nThis rule has an option to allow specific kinds of functions to be empty.\n\n- `allow` (`string[]`) - A list of kind to allow empty functions. List items are some of the following strings. An empty array (`[]`) by default.\n  - `\"functions\"` - Normal functions.\n  - `\"arrowFunctions\"` - Arrow functions.\n  - `\"generatorFunctions\"` - Generator functions.\n  - `\"methods\"` - Class methods and method shorthands of object literals.\n  - `\"generatorMethods\"` - Class methods and method shorthands of object literals with generator.\n  - `\"getters\"` - Getters.\n  - `\"setters\"` - Setters.\n  - `\"constructors\"` - Class constructors.\n  - `\"asyncFunctions\"` - Async functions.\n  - `\"asyncMethods\"` - Async class methods and method shorthands of object literals.\n\n### allow: functions\n\nExamples of **correct** code for the `{ \"allow\": [\"functions\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiZnVuY3Rpb25zXCJdIH1dKi9cblxuZnVuY3Rpb24gZm9vKCkge31cblxudmFyIGJhciA9IGZ1bmN0aW9uKCkge307XG5cbnZhciBvYmogPSB7XG4gICAgZm9vOiBmdW5jdGlvbigpIHt9XG59OyJ9)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"functions\"] }]*/\n\nfunction foo() {}\n\nvar bar = function() {};\n\nvar obj = {\n    foo: function() {}\n};\n```\n\n### allow: arrowFunctions\n\nExamples of **correct** code for the `{ \"allow\": [\"arrowFunctions\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiYXJyb3dGdW5jdGlvbnNcIl0gfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSAoKSA9PiB7fTsifQ==)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"arrowFunctions\"] }]*/\n/*eslint-env es6*/\n\nvar foo = () => {};\n```\n\n### allow: generatorFunctions\n\nExamples of **correct** code for the `{ \"allow\": [\"generatorFunctions\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiZ2VuZXJhdG9yRnVuY3Rpb25zXCJdIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiogZm9vKCkge31cblxudmFyIGJhciA9IGZ1bmN0aW9uKigpIHt9O1xuXG52YXIgb2JqID0ge1xuICAgIGZvbzogZnVuY3Rpb24qKCkge31cbn07In0=)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"generatorFunctions\"] }]*/\n/*eslint-env es6*/\n\nfunction* foo() {}\n\nvar bar = function*() {};\n\nvar obj = {\n    foo: function*() {}\n};\n```\n\n### allow: methods\n\nExamples of **correct** code for the `{ \"allow\": [\"methods\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wibWV0aG9kc1wiXSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iaiA9IHtcbiAgICBmb28oKSB7fVxufTtcblxuY2xhc3MgQSB7XG4gICAgZm9vKCkge31cbiAgICBzdGF0aWMgZm9vKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"methods\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    foo() {}\n};\n\nclass A {\n    foo() {}\n    static foo() {}\n}\n```\n\n### allow: generatorMethods\n\nExamples of **correct** code for the `{ \"allow\": [\"generatorMethods\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiZ2VuZXJhdG9yTWV0aG9kc1wiXSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iaiA9IHtcbiAgICAqZm9vKCkge31cbn07XG5cbmNsYXNzIEEge1xuICAgICpmb28oKSB7fVxuICAgIHN0YXRpYyAqZm9vKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"generatorMethods\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    *foo() {}\n};\n\nclass A {\n    *foo() {}\n    static *foo() {}\n}\n```\n\n### allow: getters\n\nExamples of **correct** code for the `{ \"allow\": [\"getters\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiZ2V0dGVyc1wiXSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iaiA9IHtcbiAgICBnZXQgZm9vKCkge31cbn07XG5cbmNsYXNzIEEge1xuICAgIGdldCBmb28oKSB7fVxuICAgIHN0YXRpYyBnZXQgZm9vKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"getters\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    get foo() {}\n};\n\nclass A {\n    get foo() {}\n    static get foo() {}\n}\n```\n\n### allow: setters\n\nExamples of **correct** code for the `{ \"allow\": [\"setters\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wic2V0dGVyc1wiXSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iaiA9IHtcbiAgICBzZXQgZm9vKHZhbHVlKSB7fVxufTtcblxuY2xhc3MgQSB7XG4gICAgc2V0IGZvbyh2YWx1ZSkge31cbiAgICBzdGF0aWMgc2V0IGZvbyh2YWx1ZSkge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"setters\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    set foo(value) {}\n};\n\nclass A {\n    set foo(value) {}\n    static set foo(value) {}\n}\n```\n\n### allow: constructors\n\nExamples of **correct** code for the `{ \"allow\": [\"constructors\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiY29uc3RydWN0b3JzXCJdIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jbGFzcyBBIHtcbiAgICBjb25zdHJ1Y3RvcigpIHt9XG59In0=)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"constructors\"] }]*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() {}\n}\n```\n\n### allow: asyncFunctions\n\nExamples of **correct** code for the `{ \"allow\": [\"asyncFunctions\"] }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiYXN5bmNGdW5jdGlvbnNcIl0gfV0qL1xuLyplc2xpbnQtZW52IGVzMjAxNyovXG5cbmFzeW5jIGZ1bmN0aW9uIGEoKXt9In0=)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"asyncFunctions\"] }]*/\n/*eslint-env es2017*/\n\nasync function a(){}\n```\n\n### allow: asyncMethods\n\nExamples of **correct** code for the `{ \"allow\": [\"asyncMethods\"] }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LWZ1bmN0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiYXN5bmNNZXRob2RzXCJdIH1dKi9cbi8qZXNsaW50LWVudiBlczIwMTcqL1xuXG52YXIgb2JqID0ge1xuICAgIGFzeW5jIGZvbygpIHt9XG59O1xuXG5jbGFzcyBBIHtcbiAgICBhc3luYyBmb28oKSB7fVxuICAgIHN0YXRpYyBhc3luYyBmb28oKSB7fVxufSJ9)\n\n``` language-js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"asyncMethods\"] }]*/\n/*eslint-env es2017*/\n\nvar obj = {\n    async foo() {}\n};\n\nclass A {\n    async foo() {}\n    static async foo() {}\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about empty functions, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [no-empty](no-empty)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-empty-function.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-empty-function.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-empty-function](https://eslint.org/docs/latest/rules/no-empty-function)"
- name: no-empty-pattern
  id: rules/no-empty-pattern
  summary: When using destructuring, it’s possible to create a pattern that has no effect
  description: "# no-empty-pattern\n\nDisallow empty destructuring patterns\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-empty-pattern../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowObjectPatternsAsParameters](#allowobjectpatternsasparameters)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nWhen using destructuring, it’s possible to create a pattern that has no effect. This happens when empty curly braces are used to the right of an embedded object destructuring pattern, such as:\n\n``` language-js\n// doesn't create any variables\nvar {a: {}} = foo;\n```\n\nIn this code, no new variables are created because `a` is just a location helper while the `{}` is expected to contain the variables to create, such as:\n\n``` language-js\n// creates variable b\nvar {a: { b }} = foo;\n```\n\nIn many cases, the empty object pattern is a mistake where the author intended to use a default value instead, such as:\n\n``` language-js\n// creates variable a\nvar {a = {}} = foo;\n```\n\nThe difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.\n\n## Rule Details\n\nThis rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXBhdHRlcm46IFwiZXJyb3JcIiovXG5cbnZhciB7fSA9IGZvbztcbnZhciBbXSA9IGZvbztcbnZhciB7YToge319ID0gZm9vO1xudmFyIHthOiBbXX0gPSBmb287XG5mdW5jdGlvbiBmb28oe30pIHt9XG5mdW5jdGlvbiBiYXIoW10pIHt9XG5mdW5jdGlvbiBiYXooe2E6IHt9fSkge31cbmZ1bmN0aW9uIHF1eCh7YTogW119KSB7fSJ9)\n\n``` language-js\n/*eslint no-empty-pattern: \"error\"*/\n\nvar {} = foo;\nvar [] = foo;\nvar {a: {}} = foo;\nvar {a: []} = foo;\nfunction foo({}) {}\nfunction bar([]) {}\nfunction baz({a: {}}) {}\nfunction qux({a: []}) {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXBhdHRlcm46IFwiZXJyb3JcIiovXG5cbnZhciB7YSA9IHt9fSA9IGZvbztcbnZhciB7YSA9IFtdfSA9IGZvbztcbmZ1bmN0aW9uIGZvbyh7YSA9IHt9fSkge31cbmZ1bmN0aW9uIGJhcih7YSA9IFtdfSkge30ifQ==)\n\n``` language-js\n/*eslint no-empty-pattern: \"error\"*/\n\nvar {a = {}} = foo;\nvar {a = []} = foo;\nfunction foo({a = {}}) {}\nfunction bar({a = []}) {}\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n### allowObjectPatternsAsParameters\n\nSet to `false` by default. Setting this option to `true` allows empty object patterns as function parameters.\n\n**Note:** This rule doesn’t allow empty array patterns as function parameters.\n\nExamples of **incorrect** code for this rule with the `{\"allowObjectPatternsAsParameters\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXBhdHRlcm46IFtcImVycm9yXCIsIHsgXCJhbGxvd09iamVjdFBhdHRlcm5zQXNQYXJhbWV0ZXJzXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oe2E6IHt9fSkge31cbnZhciBiYXIgPSBmdW5jdGlvbih7YToge319KSB7fTtcbnZhciBiYXIgPSAoe2E6IHt9fSkgPT4ge307XG52YXIgYmFyID0gKHt9ID0gYmFyKSA9PiB7fTtcbnZhciBiYXIgPSAoe30gPSB7IGJhcjogMSB9KSA9PiB7fTtcblxuZnVuY3Rpb24gYmF6KFtdKSB7fSJ9)\n\n``` language-js\n/*eslint no-empty-pattern: [\"error\", { \"allowObjectPatternsAsParameters\": true }]*/\n\nfunction foo({a: {}}) {}\nvar bar = function({a: {}}) {};\nvar bar = ({a: {}}) => {};\nvar bar = ({} = bar) => {};\nvar bar = ({} = { bar: 1 }) => {};\n\nfunction baz([]) {}\n```\n\nExamples of **correct** code for this rule with the `{\"allowObjectPatternsAsParameters\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXBhdHRlcm46IFtcImVycm9yXCIsIHsgXCJhbGxvd09iamVjdFBhdHRlcm5zQXNQYXJhbWV0ZXJzXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oe30pIHt9XG52YXIgYmFyID0gZnVuY3Rpb24oe30pIHt9O1xudmFyIGJhciA9ICh7fSkgPT4ge307XG5cbmZ1bmN0aW9uIGJheih7fSA9IHt9KSB7fSJ9)\n\n``` language-js\n/*eslint no-empty-pattern: [\"error\", { \"allowObjectPatternsAsParameters\": true }]*/\n\nfunction foo({}) {}\nvar bar = function({}) {};\nvar bar = ({}) => {};\n\nfunction baz({} = {}) {}\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.7.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-empty-pattern.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-empty-pattern.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-empty-pattern](https://eslint.org/docs/latest/rules/no-empty-pattern)"
- name: no-empty-static-block
  id: rules/no-empty-static-block
  summary: Empty static blocks, while not technically errors, usually occur due to refactoring that wasn’t completed
  description: "# no-empty-static-block\n\nDisallow empty static blocks\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nEmpty static blocks, while not technically errors, usually occur due to refactoring that wasn’t completed. They can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows empty static blocks. This rule ignores static blocks which contain a comment.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXN0YXRpYy1ibG9jazogXCJlcnJvclwiKi9cblxuY2xhc3MgRm9vIHtcbiAgICBzdGF0aWMge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-static-block: \"error\"*/\n\nclass Foo {\n    static {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVtcHR5LXN0YXRpYy1ibG9jazogXCJlcnJvclwiKi9cblxuY2xhc3MgRm9vIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBiYXIoKTtcbiAgICB9XG59XG5cbmNsYXNzIEJhciB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgLy8gY29tbWVudFxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-empty-static-block: \"error\"*/\n\nclass Foo {\n    static {\n        bar();\n    }\n}\n\nclass Bar {\n    static {\n        // comment\n    }\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in environments prior to ES2022.\n\n## Related Rules\n\n- [no-empty](no-empty)\n- [no-empty-function](no-empty-function)\n\n## Version\n\nThis rule was introduced in ESLint v8.27.0.\n\n## Further Reading\n\n[GitHub - tc39/proposal-class-static-block: ECMAScript class static initialization blocks](https://github.com/tc39/proposal-class-static-block)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-empty-static-block.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-empty-static-block.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-empty-static-block](https://eslint.org/docs/latest/rules/no-empty-static-block)"
- name: no-eq-null
  id: rules/no-eq-null
  summary: Comparing to null without a type-checking operator (== or !=), can have unintended results as the comparison will evaluate to true when comparing to not just a null, but also an undefined value
  description: "# no-eq-null\n\nDisallow `null` comparisons without type-checking operators\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n``` language-js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVxLW51bGw6IFwiZXJyb3JcIiovXG5cbmlmIChmb28gPT0gbnVsbCkge1xuICBiYXIoKTtcbn1cblxud2hpbGUgKHF1eCAhPSBudWxsKSB7XG4gIGJheigpO1xufSJ9)\n\n``` language-js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWVxLW51bGw6IFwiZXJyb3JcIiovXG5cbmlmIChmb28gPT09IG51bGwpIHtcbiAgYmFyKCk7XG59XG5cbndoaWxlIChxdXggIT09IG51bGwpIHtcbiAgYmF6KCk7XG59In0=)\n\n``` language-js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\n\n## When Not To Use It\n\nIf you want to enforce type-checking operations in general, use the more powerful [eqeqeq](no-eq-null./eqeqeq) instead.\n\n## Compatibility\n\n- **JSHint**: This rule corresponds to `eqnull` rule of JSHint.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-eq-null.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-eq-null.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-eq-null](https://eslint.org/docs/latest/rules/no-eq-null)"
- name: no-eval
  id: rules/no-eval
  summary: JavaScript’s eval() function is potentially dangerous and is often misused
  description: "# no-eval\n\nDisallow the use of `eval()`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowIndirect](#allowindirect)\n3.  [Known Limitations](#known-limitations)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nJavaScript’s `eval()` function is potentially dangerous and is often misused. Using `eval()` on untrusted code can open a program up to several different injection attacks. The use of `eval()` in most contexts can be substituted for a better, alternative approach to a problem.\n\n``` language-js\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\n## Rule Details\n\nThis rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the `eval()` function. As such, it will warn whenever the `eval()` function is used.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFwiZXJyb3JcIiovXG5cbnZhciBvYmogPSB7IHg6IFwiZm9vXCIgfSxcbiAgICBrZXkgPSBcInhcIixcbiAgICB2YWx1ZSA9IGV2YWwoXCJvYmouXCIgKyBrZXkpO1xuXG4oMCwgZXZhbCkoXCJ2YXIgYSA9IDBcIik7XG5cbnZhciBmb28gPSBldmFsO1xuZm9vKFwidmFyIGEgPSAwXCIpO1xuXG4vLyBUaGlzIGB0aGlzYCBpcyB0aGUgZ2xvYmFsIG9iamVjdC5cbnRoaXMuZXZhbChcInZhciBhID0gMFwiKTsifQ==)\n\n``` language-js\n/*eslint no-eval: \"error\"*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n\n(0, eval)(\"var a = 0\");\n\nvar foo = eval;\nfoo(\"var a = 0\");\n\n// This `this` is the global object.\nthis.eval(\"var a = 0\");\n```\n\nExample of additional **incorrect** code for this rule when `browser` environment is set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgYnJvd3NlciovXG5cbndpbmRvdy5ldmFsKFwidmFyIGEgPSAwXCIpOyJ9)\n\n``` language-js\n/*eslint no-eval: \"error\"*/\n/*eslint-env browser*/\n\nwindow.eval(\"var a = 0\");\n```\n\nExample of additional **incorrect** code for this rule when `node` environment is set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgbm9kZSovXG5cbmdsb2JhbC5ldmFsKFwidmFyIGEgPSAwXCIpOyJ9)\n\n``` language-js\n/*eslint no-eval: \"error\"*/\n/*eslint-env node*/\n\nglobal.eval(\"var a = 0\");\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iaiA9IHsgeDogXCJmb29cIiB9LFxuICAgIGtleSA9IFwieFwiLFxuICAgIHZhbHVlID0gb2JqW2tleV07XG5cbmNsYXNzIEEge1xuICAgIGZvbygpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHVzZXItZGVmaW5lZCBtZXRob2QuXG4gICAgICAgIHRoaXMuZXZhbChcInZhciBhID0gMFwiKTtcbiAgICB9XG5cbiAgICBldmFsKCkge1xuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSB1c2VyLWRlZmluZWQgc3RhdGljIG1ldGhvZC5cbiAgICAgICAgdGhpcy5ldmFsKFwidmFyIGEgPSAwXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBldmFsKCkge1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-eval: \"error\"*/\n/*eslint-env es6*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = obj[key];\n\nclass A {\n    foo() {\n        // This is a user-defined method.\n        this.eval(\"var a = 0\");\n    }\n\n    eval() {\n    }\n\n    static {\n        // This is a user-defined static method.\n        this.eval(\"var a = 0\");\n    }\n\n    static eval() {\n    }\n}\n```\n\n## Options\n\n### allowIndirect\n\nThis rule has an option to allow indirect calls to `eval`. Indirect calls to `eval` are less dangerous than direct calls to `eval` because they cannot dynamically change the scope. Because of this, they also will not negatively impact performance to the degree of direct `eval`.\n\n``` language-js\n{\n    \"no-eval\": [\"error\", {\"allowIndirect\": true}] // default is false\n}\n```\n\nExample of **incorrect** code for this rule with the `{\"allowIndirect\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFtcImVycm9yXCIsIHtcImFsbG93SW5kaXJlY3RcIjogdHJ1ZX0gXSovXG5cbnZhciBvYmogPSB7IHg6IFwiZm9vXCIgfSxcbiAgICBrZXkgPSBcInhcIixcbiAgICB2YWx1ZSA9IGV2YWwoXCJvYmouXCIgKyBrZXkpOyJ9)\n\n``` language-js\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\nExamples of **correct** code for this rule with the `{\"allowIndirect\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFtcImVycm9yXCIsIHtcImFsbG93SW5kaXJlY3RcIjogdHJ1ZX0gXSovXG5cbigwLCBldmFsKShcInZhciBhID0gMFwiKTtcblxudmFyIGZvbyA9IGV2YWw7XG5mb28oXCJ2YXIgYSA9IDBcIik7XG5cbnRoaXMuZXZhbChcInZhciBhID0gMFwiKTsifQ==)\n\n``` language-js\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n\n(0, eval)(\"var a = 0\");\n\nvar foo = eval;\nfoo(\"var a = 0\");\n\nthis.eval(\"var a = 0\");\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFtcImVycm9yXCIsIHtcImFsbG93SW5kaXJlY3RcIjogdHJ1ZX0gXSovXG4vKmVzbGludC1lbnYgYnJvd3NlciovXG5cbndpbmRvdy5ldmFsKFwidmFyIGEgPSAwXCIpOyJ9)\n\n``` language-js\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n/*eslint-env browser*/\n\nwindow.eval(\"var a = 0\");\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV2YWw6IFtcImVycm9yXCIsIHtcImFsbG93SW5kaXJlY3RcIjogdHJ1ZX0gXSovXG4vKmVzbGludC1lbnYgbm9kZSovXG5cbmdsb2JhbC5ldmFsKFwidmFyIGEgPSAwXCIpOyJ9)\n\n``` language-js\n/*eslint no-eval: [\"error\", {\"allowIndirect\": true} ]*/\n/*eslint-env node*/\n\nglobal.eval(\"var a = 0\");\n```\n\n## Known Limitations\n\n- This rule is warning every `eval()` even if the `eval` is not global’s. This behavior is in order to detect calls of direct `eval`. Such as:\n\n  ``` language-js\n  module.exports = function(eval) {\n      // If the value of this `eval` is built-in `eval` function, this is a\n      // call of direct `eval`.\n      eval(\"var a = 0\");\n  };\n  ```\n\n- This rule cannot catch renaming the global object. Such as:\n\n  ``` language-js\n  var foo = window;\n  foo.eval(\"var a = 0\");\n  ```\n\n## Related Rules\n\n- [no-implied-eval](no-implied-eval)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Further Reading\n\n[Eval is evil, part one](https://ericlippert.com/2003/11/01/eval-is-evil-part-one/)  \n\n[How evil is eval?](https://javascriptweblog.wordpress.com/2010/04/19/how-evil-is-eval/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-eval.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-eval.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-eval](https://eslint.org/docs/latest/rules/no-eval)"
- name: no-ex-assign
  id: rules/no-ex-assign
  summary: If a catch clause in a try statement accidentally (or purposely) assigns another value to the exception parameter, it is impossible to refer to the error from that point on
  description: "# no-ex-assign\n\nDisallow reassigning exceptions in `catch` clauses\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-ex-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Further Reading](#further-reading)\n4.  [Resources](#resources)\n\nIf a `catch` clause in a `try` statement accidentally (or purposely) assigns another value to the exception parameter, it is impossible to refer to the error from that point on. Since there is no `arguments` object to offer alternative access to this data, assignment of the parameter is absolutely destructive.\n\n## Rule Details\n\nThis rule disallows reassigning exceptions in `catch` clauses.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4LWFzc2lnbjogXCJlcnJvclwiKi9cblxudHJ5IHtcbiAgICAvLyBjb2RlXG59IGNhdGNoIChlKSB7XG4gICAgZSA9IDEwO1xufSJ9)\n\n``` language-js\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    e = 10;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4LWFzc2lnbjogXCJlcnJvclwiKi9cblxudHJ5IHtcbiAgICAvLyBjb2RlXG59IGNhdGNoIChlKSB7XG4gICAgdmFyIGZvbyA9IDEwO1xufSJ9)\n\n``` language-js\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    var foo = 10;\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[The](https://bocoup.com/blog/the-catch-with-try-catch)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-ex-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-ex-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-ex-assign](https://eslint.org/docs/latest/rules/no-ex-assign)"
- name: no-extend-native
  id: rules/no-extend-native
  summary: In JavaScript, you can extend any object, including builtin or “native” objects
  description: "# no-extend-native\n\nDisallow extending native types\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [exceptions](#exceptions)\n3.  [Known Limitations](#known-limitations)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Resources](#resources)\n\nIn JavaScript, you can extend any object, including builtin or “native” objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.\n\nFor example here we are overriding a builtin method that will then affect all Objects, even other builtins.\n\n``` language-js\n// seems harmless\nObject.prototype.extra = 55;\n\n// loop through some userIds\nvar users = {\n    \"123\": \"Stan\",\n    \"456\": \"David\"\n};\n\n// not what you'd expect\nfor (var id in users) {\n    console.log(id); // \"123\", \"456\", \"extra\"\n}\n```\n\nA common suggestion to avoid this problem would be to wrap the inside of the `for` loop with `users.hasOwnProperty(id)`. However, if this rule is strictly enforced throughout your codebase you won’t need to take that step.\n\n## Rule Details\n\nDisallows directly modifying the prototype of builtin objects.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dGVuZC1uYXRpdmU6IFwiZXJyb3JcIiovXG5cbk9iamVjdC5wcm90b3R5cGUuYSA9IFwiYVwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJ0aW1lc1wiLCB7IHZhbHVlOiA5OTkgfSk7In0=)\n\n``` language-js\n/*eslint no-extend-native: \"error\"*/\n\nObject.prototype.a = \"a\";\nObject.defineProperty(Array.prototype, \"times\", { value: 999 });\n```\n\n## Options\n\nThis rule accepts an `exceptions` option, which can be used to specify a list of builtins for which extensions will be allowed.\n\n### exceptions\n\nExamples of **correct** code for the sample `{ \"exceptions\": [\"Object\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dGVuZC1uYXRpdmU6IFtcImVycm9yXCIsIHsgXCJleGNlcHRpb25zXCI6IFtcIk9iamVjdFwiXSB9XSovXG5cbk9iamVjdC5wcm90b3R5cGUuYSA9IFwiYVwiOyJ9)\n\n``` language-js\n/*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }]*/\n\nObject.prototype.a = \"a\";\n```\n\n## Known Limitations\n\nThis rule *does not* report any of the following less obvious approaches to modify the prototype of builtin objects:\n\n``` language-js\nvar x = Object;\nx.prototype.thing = a;\n\neval(\"Array.prototype.forEach = 'muhahaha'\");\n\nwith(Array) {\n    prototype.thing = 'thing';\n};\n\nwindow.Function.prototype.bind = 'tight';\n```\n\n## When Not To Use It\n\nYou may want to disable this rule when working with polyfills that try to patch older versions of JavaScript with the latest spec, such as those that might `Function.prototype.bind` or `Array.prototype.forEach` in a future-friendly way.\n\n## Related Rules\n\n- [no-global-assign](no-global-assign)\n\n## Version\n\nThis rule was introduced in ESLint v0.1.4.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extend-native.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extend-native.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extend-native](https://eslint.org/docs/latest/rules/no-extend-native)"
- name: no-extra-bind
  id: rules/no-extra-bind
  summary: The bind() method is used to create functions with specific this values and, optionally, binds arguments to specific values
  description: "# no-extra-bind\n\nDisallow unnecessary calls to `.bind()`\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-extra-bind../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nThe `bind()` method is used to create functions with specific `this` values and, optionally, binds arguments to specific values. When used to specify the value of `this`, it’s important that the function actually uses `this` in its function body. For example:\n\n``` language-js\nvar boundGetName = (function getName() {\n    return this.name;\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\nThis code is an example of a good use of `bind()` for setting the value of `this`.\n\nSometimes during the course of code maintenance, the `this` value is removed from the function body. In that case, you can end up with a call to `bind()` that doesn’t accomplish anything:\n\n``` language-js\n// useless bind\nvar boundGetName = (function getName() {\n    return \"ESLint\";\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\nIn this code, the reference to `this` has been removed but `bind()` is still used. In this case, the `bind()` is unnecessary overhead (and a performance hit) and can be safely removed.\n\n## Rule Details\n\nThis rule is aimed at avoiding the unnecessary use of `bind()` and as such will warn whenever an immediately-invoked function expression (IIFE) is using `bind()` and doesn’t have an appropriate `this` value. This rule won’t flag usage of `bind()` that includes function argument binding.\n\n**Note:** Arrow functions can never have their `this` value set using `bind()`. This rule flags all uses of `bind()` with arrow functions as a problem\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJpbmQ6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIHggPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9vKCk7XG59LmJpbmQoYmFyKTtcblxudmFyIHggPSAoKCkgPT4ge1xuICAgIGZvbygpO1xufSkuYmluZChiYXIpO1xuXG52YXIgeCA9ICgoKSA9PiB7XG4gICAgdGhpcy5mb28oKTtcbn0pLmJpbmQoYmFyKTtcblxudmFyIHggPSBmdW5jdGlvbiAoKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZm9vKCk7XG4gICAgfSgpKTtcbn0uYmluZChiYXIpO1xuXG52YXIgeCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBmb28oKSB7XG4gICAgICB0aGlzLmJhcigpO1xuICAgIH1cbn0uYmluZChiYXopOyJ9)\n\n``` language-js\n/*eslint no-extra-bind: \"error\"*/\n/*eslint-env es6*/\n\nvar x = function () {\n    foo();\n}.bind(bar);\n\nvar x = (() => {\n    foo();\n}).bind(bar);\n\nvar x = (() => {\n    this.foo();\n}).bind(bar);\n\nvar x = function () {\n    (function () {\n      this.foo();\n    }());\n}.bind(bar);\n\nvar x = function () {\n    function foo() {\n      this.bar();\n    }\n}.bind(baz);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJpbmQ6IFwiZXJyb3JcIiovXG5cbnZhciB4ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZm9vKCk7XG59LmJpbmQoYmFyKTtcblxudmFyIHggPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBhICsgMTtcbn0uYmluZChmb28sIGJhcik7In0=)\n\n``` language-js\n/*eslint no-extra-bind: \"error\"*/\n\nvar x = function () {\n    this.foo();\n}.bind(bar);\n\nvar x = function (a) {\n    return a + 1;\n}.bind(foo, bar);\n```\n\n## When Not To Use It\n\nIf you are not concerned about unnecessary calls to `bind()`, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.8.0.\n\n## Further Reading\n\n[Function.prototype.bind() - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)  \n\n[Understanding JavaScript Bind () — Smashing Magazine](https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extra-bind.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extra-bind.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extra-bind](https://eslint.org/docs/latest/rules/no-extra-bind)"
- name: no-extra-boolean-cast
  id: rules/no-extra-boolean-cast
  summary: In contexts such as an if statement’s test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (!!) or a Boolean call is unnecessary
  description: "# no-extra-boolean-cast\n\nDisallow unnecessary boolean casts\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-extra-boolean-cast../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-extra-boolean-cast../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [enforceForLogicalOperands](#enforceforlogicaloperands)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIn contexts such as an `if` statement’s test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (`!!`) or a `Boolean` call is unnecessary. For example, these `if` statements are equivalent:\n\n``` language-js\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nif (foo) {\n    // ...\n}\n```\n\n## Rule Details\n\nThis rule disallows unnecessary boolean casts.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJvb2xlYW4tY2FzdDogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9ICEhIWJhcjtcblxudmFyIGZvbyA9ICEhYmFyID8gYmF6IDogYmF0O1xuXG52YXIgZm9vID0gQm9vbGVhbighIWJhcik7XG5cbnZhciBmb28gPSBuZXcgQm9vbGVhbighIWJhcik7XG5cbmlmICghIWZvbykge1xuICAgIC8vIC4uLlxufVxuXG5pZiAoQm9vbGVhbihmb28pKSB7XG4gICAgLy8gLi4uXG59XG5cbndoaWxlICghIWZvbykge1xuICAgIC8vIC4uLlxufVxuXG5kbyB7XG4gICAgLy8gLi4uXG59IHdoaWxlIChCb29sZWFuKGZvbykpO1xuXG5mb3IgKDsgISFmb287ICkge1xuICAgIC8vIC4uLlxufSJ9)\n\n``` language-js\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nvar foo = !!!bar;\n\nvar foo = !!bar ? baz : bat;\n\nvar foo = Boolean(!!bar);\n\nvar foo = new Boolean(!!bar);\n\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nwhile (!!foo) {\n    // ...\n}\n\ndo {\n    // ...\n} while (Boolean(foo));\n\nfor (; !!foo; ) {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJvb2xlYW4tY2FzdDogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9ICEhYmFyO1xudmFyIGZvbyA9IEJvb2xlYW4oYmFyKTtcblxuZnVuY3Rpb24gcXV4KCkge1xuICAgIHJldHVybiAhIWJhcjtcbn1cblxudmFyIGZvbyA9IGJhciA/ICEhYmF6IDogISFiYXQ7In0=)\n\n``` language-js\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nvar foo = !!bar;\nvar foo = Boolean(bar);\n\nfunction qux() {\n    return !!bar;\n}\n\nvar foo = bar ? !!baz : !!bat;\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"enforceForLogicalOperands\"` when set to `true`, in addition to checking default contexts, checks whether the extra boolean cast is contained within a logical expression. Default is `false`, meaning that this rule by default does not warn about extra booleans cast inside logical expression.\n\n### enforceForLogicalOperands\n\nExamples of **incorrect** code for this rule with `\"enforceForLogicalOperands\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJvb2xlYW4tY2FzdDogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvckxvZ2ljYWxPcGVyYW5kc1wiOiB0cnVlfV0qL1xuXG5pZiAoISFmb28gfHwgYmFyKSB7XG4gICAgLy8uLi5cbn1cblxud2hpbGUgKCEhZm9vICYmIGJhcikge1xuICAgIC8vLi4uXG59XG5cbmlmICgoISFmb28gfHwgYmFyKSAmJiBiYXopIHtcbiAgICAvLy4uLlxufVxuXG5mb28gJiYgQm9vbGVhbihiYXIpID8gYmF6IDogYmF0XG5cbnZhciBmb28gPSBuZXcgQm9vbGVhbighIWJhciB8fCBiYXopIn0=)\n\n``` language-js\n/*eslint no-extra-boolean-cast: [\"error\", {\"enforceForLogicalOperands\": true}]*/\n\nif (!!foo || bar) {\n    //...\n}\n\nwhile (!!foo && bar) {\n    //...\n}\n\nif ((!!foo || bar) && baz) {\n    //...\n}\n\nfoo && Boolean(bar) ? baz : bat\n\nvar foo = new Boolean(!!bar || baz)\n```\n\nExamples of **correct** code for this rule with `\"enforceForLogicalOperands\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWJvb2xlYW4tY2FzdDogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvckxvZ2ljYWxPcGVyYW5kc1wiOiB0cnVlfV0qL1xuXG5pZiAoZm9vIHx8IGJhcikge1xuICAgIC8vLi4uXG59XG5cbndoaWxlIChmb28gJiYgYmFyKSB7XG4gICAgLy8uLi5cbn1cblxuaWYgKChmb28gfHwgYmFyKSAmJiBiYXopIHtcbiAgICAvLy4uLlxufVxuXG5mb28gJiYgYmFyID8gYmF6IDogYmF0XG5cbnZhciBmb28gPSBuZXcgQm9vbGVhbihiYXIgfHwgYmF6KVxuXG52YXIgZm9vID0gISFiYXIgfHwgYmF6OyJ9)\n\n``` language-js\n/*eslint no-extra-boolean-cast: [\"error\", {\"enforceForLogicalOperands\": true}]*/\n\nif (foo || bar) {\n    //...\n}\n\nwhile (foo && bar) {\n    //...\n}\n\nif ((foo || bar) && baz) {\n    //...\n}\n\nfoo && bar ? baz : bat\n\nvar foo = new Boolean(bar || baz)\n\nvar foo = !!bar || baz;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extra-boolean-cast.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extra-boolean-cast.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extra-boolean-cast](https://eslint.org/docs/latest/rules/no-extra-boolean-cast)"
- name: no-extra-label
  id: rules/no-extra-label
  summary: If a loop contains no nested loops or switches, labeling the loop is unnecessary
  description: "# no-extra-label\n\nDisallow unnecessary labels\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-extra-label../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIf a loop contains no nested loops or switches, labeling the loop is unnecessary.\n\n``` language-js\nA: while (a) {\n    break A;\n}\n```\n\nYou can achieve the same result by removing the label and using `break` or `continue` without a label. Probably those labels would confuse developers because they expect labels to jump to further.\n\n## Rule Details\n\nThis rule is aimed at eliminating unnecessary labels.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWxhYmVsOiBcImVycm9yXCIqL1xuXG5BOiB3aGlsZSAoYSkge1xuICAgIGJyZWFrIEE7XG59XG5cbkI6IGZvciAobGV0IGkgPSAwOyBpIDwgMTA7ICsraSkge1xuICAgIGJyZWFrIEI7XG59XG5cbkM6IHN3aXRjaCAoYSkge1xuICAgIGNhc2UgMDpcbiAgICAgICAgYnJlYWsgQztcbn0ifQ==)\n\n``` language-js\n/*eslint no-extra-label: \"error\"*/\n\nA: while (a) {\n    break A;\n}\n\nB: for (let i = 0; i < 10; ++i) {\n    break B;\n}\n\nC: switch (a) {\n    case 0:\n        break C;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLWxhYmVsOiBcImVycm9yXCIqL1xuXG53aGlsZSAoYSkge1xuICAgIGJyZWFrO1xufVxuXG5mb3IgKGxldCBpID0gMDsgaSA8IDEwOyArK2kpIHtcbiAgICBicmVhaztcbn1cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAwOlxuICAgICAgICBicmVhaztcbn1cblxuQToge1xuICAgIGJyZWFrIEE7XG59XG5cbkI6IHdoaWxlIChhKSB7XG4gICAgd2hpbGUgKGIpIHtcbiAgICAgICAgYnJlYWsgQjtcbiAgICB9XG59XG5cbkM6IHN3aXRjaCAoYSkge1xuICAgIGNhc2UgMDpcbiAgICAgICAgd2hpbGUgKGIpIHtcbiAgICAgICAgICAgIGJyZWFrIEM7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG59In0=)\n\n``` language-js\n/*eslint no-extra-label: \"error\"*/\n\nwhile (a) {\n    break;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    break;\n}\n\nswitch (a) {\n    case 0:\n        break;\n}\n\nA: {\n    break A;\n}\n\nB: while (a) {\n    while (b) {\n        break B;\n    }\n}\n\nC: switch (a) {\n    case 0:\n        while (b) {\n            break C;\n        }\n        break;\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about usage of labels, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [no-labels](no-labels)\n- [no-label-var](no-label-var)\n- [no-unused-labels](no-unused-labels)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-rc.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extra-label.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extra-label.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extra-label](https://eslint.org/docs/latest/rules/no-extra-label)"
- name: no-extra-parens
  id: rules/no-extra-parens
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# no-extra-parens\n\nDisallow unnecessary parentheses\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-extra-parens../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [all](#all)\n    2.  [conditionalAssign](#conditionalassign)\n    3.  [returnAssign](#returnassign)\n    4.  [nestedBinaryExpressions](#nestedbinaryexpressions)\n    5.  [ternaryOperandBinaryExpressions](#ternaryoperandbinaryexpressions)\n    6.  [ignoreJSX](#ignorejsx)\n    7.  [enforceForArrowConditionals](#enforceforarrowconditionals)\n    8.  [enforceForSequenceExpressions](#enforceforsequenceexpressions)\n    9.  [enforceForNewInMemberExpressions](#enforcefornewinmemberexpressions)\n    10. [enforceForFunctionPrototypeMethods](#enforceforfunctionprototypemethods)\n    11. [allowParensAfterCommentPattern](#allowparensaftercommentpattern)\n    12. [functions](#functions)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/no-extra-parens) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nThis rule restricts the use of parentheses to only where they are necessary.\n\n## Rule Details\n\nThis rule always ignores extra parentheses around the following:\n\n- RegExp literals such as `(/abc/).test(var)` to avoid conflicts with the [wrap-regex](no-extra-parenswrap-regex) rule\n- immediately-invoked function expressions (also known as IIFEs) such as `var x = (function () {})();` and `var x = (function () {}());` to avoid conflicts with the [wrap-iife](no-extra-parenswrap-iife) rule\n- arrow function arguments to avoid conflicts with the [arrow-parens](no-extra-parensarrow-parens) rule\n\nProblems reported by this rule can be fixed automatically, except when removing the parentheses would create a new directive, because that could change the semantics of the code. For example, the following script prints `object` to the console, but if the parentheses around `\"use strict\"` were removed, it would print `undefined` instead.\n\n``` language-js\n<!--\n// this is a script\n// -->\n\n(\"use strict\");\n\nfunction test() {\n    console.log(typeof this);\n}\n\ntest();\n```\n\nIn this case, the rule will not try to remove the parentheses around `\"use strict\"` but will still report them as a problem.\n\n## Options\n\nThis rule has a string option:\n\n- `\"all\"` (default) disallows unnecessary parentheses around *any* expression\n- `\"functions\"` disallows unnecessary parentheses *only* around function expressions\n\nThis rule has an object option for exceptions to the `\"all\"` option:\n\n- `\"conditionalAssign\": false` allows extra parentheses around assignments in conditional test expressions\n- `\"returnAssign\": false` allows extra parentheses around assignments in `return` statements\n- `\"nestedBinaryExpressions\": false` allows extra parentheses in nested binary expressions\n- `\"ternaryOperandBinaryExpressions\": false` allows extra parentheses around binary expressions that are operands of ternary `?:`\n- `\"ignoreJSX\": \"none|all|multi-line|single-line\"` allows extra parentheses around no/all/multi-line/single-line JSX components. Defaults to `none`.\n- `\"enforceForArrowConditionals\": false` allows extra parentheses around ternary expressions which are the body of an arrow function\n- `\"enforceForSequenceExpressions\": false` allows extra parentheses around sequence expressions\n- `\"enforceForNewInMemberExpressions\": false` allows extra parentheses around `new` expressions in member expressions\n- `\"enforceForFunctionPrototypeMethods\": false` allows extra parentheses around immediate `.call` and `.apply` method calls on function expressions and around function expressions in the same context.\n- `\"allowParensAfterCommentPattern\": \"any-string-pattern\"` allows extra parentheses preceded by a comment that matches a regular expression.\n\n### all\n\nExamples of **incorrect** code for this rule with the default `\"all\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFwiZXJyb3JcIiAqL1xuXG5hID0gKGIgKiBjKTtcblxuKGEgKiBiKSArIGM7XG5cbmZvciAoYSBpbiAoYiwgYykpO1xuXG5mb3IgKGEgaW4gKGIpKTtcblxuZm9yIChhIG9mIChiKSk7XG5cbnR5cGVvZiAoYSk7XG5cbihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoKSk7XG5cbmNsYXNzIEEge1xuICAgIFsoeCldID0gMTtcbn1cblxuY2xhc3MgQiB7XG4gICAgeCA9ICh5ICsgeik7XG59In0=)\n\n``` language-js\n/* eslint no-extra-parens: \"error\" */\n\na = (b * c);\n\n(a * b) + c;\n\nfor (a in (b, c));\n\nfor (a in (b));\n\nfor (a of (b));\n\ntypeof (a);\n\n(Object.prototype.toString.call());\n\nclass A {\n    [(x)] = 1;\n}\n\nclass B {\n    x = (y + z);\n}\n```\n\nExamples of **correct** code for this rule with the default `\"all\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFwiZXJyb3JcIiAqL1xuXG4oMCkudG9TdHJpbmcoKTtcblxuKHt9LnRvU3RyaW5nLmNhbGwoKSk7XG5cbihmdW5jdGlvbigpe30pID8gYSgpIDogYigpO1xuXG4oL15hJC8pLnRlc3QoeCk7XG5cbmZvciAoYSBvZiAoYiwgYykpO1xuXG5mb3IgKGEgb2YgYik7XG5cbmZvciAoYSBpbiBiLCBjKTtcblxuZm9yIChhIGluIGIpO1xuXG5jbGFzcyBBIHtcbiAgICBbeF0gPSAxO1xufVxuXG5jbGFzcyBCIHtcbiAgICB4ID0geSArIHo7XG59In0=)\n\n``` language-js\n/* eslint no-extra-parens: \"error\" */\n\n(0).toString();\n\n({}.toString.call());\n\n(function(){}) ? a() : b();\n\n(/^a$/).test(x);\n\nfor (a of (b, c));\n\nfor (a of b);\n\nfor (a in b, c);\n\nfor (a in b);\n\nclass A {\n    [x] = 1;\n}\n\nclass B {\n    x = y + z;\n}\n```\n\n### conditionalAssign\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"conditionalAssign\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJjb25kaXRpb25hbEFzc2lnblwiOiBmYWxzZSB9XSAqL1xuXG53aGlsZSAoKGZvbyA9IGJhcigpKSkge31cblxuaWYgKChmb28gPSBiYXIoKSkpIHt9XG5cbmRvOyB3aGlsZSAoKGZvbyA9IGJhcigpKSlcblxuZm9yICg7KGEgPSBiKTspOyJ9)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"conditionalAssign\": false }] */\n\nwhile ((foo = bar())) {}\n\nif ((foo = bar())) {}\n\ndo; while ((foo = bar()))\n\nfor (;(a = b););\n```\n\n### returnAssign\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"returnAssign\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJyZXR1cm5Bc3NpZ25cIjogZmFsc2UgfV0gKi9cblxuZnVuY3Rpb24gYTEoYikge1xuICByZXR1cm4gKGIgPSAxKTtcbn1cblxuZnVuY3Rpb24gYTIoYikge1xuICByZXR1cm4gYiA/IChjID0gZCkgOiAoYyA9IGUpO1xufVxuXG5iID0+IChiID0gMSk7XG5cbmIgPT4gYiA/IChjID0gZCkgOiAoYyA9IGUpOyJ9)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"returnAssign\": false }] */\n\nfunction a1(b) {\n  return (b = 1);\n}\n\nfunction a2(b) {\n  return b ? (c = d) : (c = e);\n}\n\nb => (b = 1);\n\nb => b ? (c = d) : (c = e);\n```\n\n### nestedBinaryExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"nestedBinaryExpressions\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJuZXN0ZWRCaW5hcnlFeHByZXNzaW9uc1wiOiBmYWxzZSB9XSAqL1xuXG54ID0gYSB8fCAoYiAmJiBjKTtcbnggPSBhICsgKGIgKiBjKTtcbnggPSAoYSAqIGIpIC8gYzsifQ==)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"nestedBinaryExpressions\": false }] */\n\nx = a || (b && c);\nx = a + (b * c);\nx = (a * b) / c;\n```\n\n### ternaryOperandBinaryExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"ternaryOperandBinaryExpressions\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJ0ZXJuYXJ5T3BlcmFuZEJpbmFyeUV4cHJlc3Npb25zXCI6IGZhbHNlIH1dICovXG5cbihhICYmIGIpID8gZm9vIDogYmFyO1xuXG4oYSAtIGIgPiBhKSA/IGZvbyA6IGJhcjtcblxuZm9vID8gKGJhciB8fCBiYXopIDogcXV4O1xuXG5mb28gPyBiYXIgOiAoYmF6IHx8IHF1eCk7In0=)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"ternaryOperandBinaryExpressions\": false }] */\n\n(a && b) ? foo : bar;\n\n(a - b > a) ? foo : bar;\n\nfoo ? (bar || baz) : qux;\n\nfoo ? bar : (baz || qux);\n```\n\n### ignoreJSX\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"all\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiBbXCJlcnJvclwiLCBcImFsbFwiLCB7IGlnbm9yZUpTWDogXCJhbGxcIiB9XSAqL1xuY29uc3QgVGhpc0NvbXBvbmVudCA9ICg8ZGl2IC8+KVxuY29uc3QgVGhhdENvbXBvbmVudCA9IChcbiAgICA8ZGl2XG4gICAgICAgIHByb3A9e3RydWV9XG4gICAgLz5cbikifQ==)\n\n``` language-jsx\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"all\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **incorrect** code for this rule with the `all` and `{ \"ignoreJSX\": \"multi-line\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiBbXCJlcnJvclwiLCBcImFsbFwiLCB7IGlnbm9yZUpTWDogXCJtdWx0aS1saW5lXCIgfV0gKi9cbmNvbnN0IFRoaXNDb21wb25lbnQgPSAoPGRpdiAvPilcbmNvbnN0IFRoYXRDb21wb25lbnQgPSAoPGRpdj48cCAvPjwvZGl2PikifQ==)\n\n``` language-jsx\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (<div><p /></div>)\n```\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"multi-line\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiBbXCJlcnJvclwiLCBcImFsbFwiLCB7IGlnbm9yZUpTWDogXCJtdWx0aS1saW5lXCIgfV0gKi9cbmNvbnN0IFRoaXNDb21wb25lbnQgPSAoXG4gICAgPGRpdj5cbiAgICAgICAgPHAgLz5cbiAgICA8L2Rpdj5cbilcbmNvbnN0IFRoYXRDb21wb25lbnQgPSAoXG4gICAgPGRpdlxuICAgICAgICBwcm9wPXt0cnVlfVxuICAgIC8+XG4pIn0=)\n\n``` language-jsx\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst ThisComponent = (\n    <div><p /></div>\n)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **incorrect** code for this rule with the `all` and `{ \"ignoreJSX\": \"single-line\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiBbXCJlcnJvclwiLCBcImFsbFwiLCB7IGlnbm9yZUpTWDogXCJzaW5nbGUtbGluZVwiIH1dICovXG5jb25zdCBUaGlzQ29tcG9uZW50ID0gKFxuICAgIDxkaXY+XG4gICAgICAgIDxwIC8+XG4gICAgPC9kaXY+XG4pXG5jb25zdCBUaGF0Q29tcG9uZW50ID0gKFxuICAgIDxkaXZcbiAgICAgICAgcHJvcD17dHJ1ZX1cbiAgICAvPlxuKSJ9)\n\n``` language-jsx\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst ThisComponent = (\n    <div><p /></div>\n)\nconst ThatComponent = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"single-line\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiBbXCJlcnJvclwiLCBcImFsbFwiLCB7IGlnbm9yZUpTWDogXCJzaW5nbGUtbGluZVwiIH1dICovXG5jb25zdCBUaGlzQ29tcG9uZW50ID0gKDxkaXYgLz4pXG5jb25zdCBUaGF0Q29tcG9uZW50ID0gKDxkaXY+PHAgLz48L2Rpdj4pIn0=)\n\n``` language-jsx\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (<div><p /></div>)\n```\n\n### enforceForArrowConditionals\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForArrowConditionals\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJlbmZvcmNlRm9yQXJyb3dDb25kaXRpb25hbHNcIjogZmFsc2UgfV0gKi9cblxuY29uc3QgYiA9IGEgPT4gMSA/IDIgOiAzO1xuY29uc3QgZCA9IGMgPT4gKDEgPyAyIDogMyk7In0=)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForArrowConditionals\": false }] */\n\nconst b = a => 1 ? 2 : 3;\nconst d = c => (1 ? 2 : 3);\n```\n\n### enforceForSequenceExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForSequenceExpressions\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJlbmZvcmNlRm9yU2VxdWVuY2VFeHByZXNzaW9uc1wiOiBmYWxzZSB9XSAqL1xuXG4oYSwgYik7XG5cbmlmICgodmFsID0gZm9vKCksIHZhbCA8IDEwKSkge31cblxud2hpbGUgKCh2YWwgPSBmb28oKSwgdmFsIDwgMTApKTsifQ==)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForSequenceExpressions\": false }] */\n\n(a, b);\n\nif ((val = foo(), val < 10)) {}\n\nwhile ((val = foo(), val < 10));\n```\n\n### enforceForNewInMemberExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForNewInMemberExpressions\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJlbmZvcmNlRm9yTmV3SW5NZW1iZXJFeHByZXNzaW9uc1wiOiBmYWxzZSB9XSAqL1xuXG5jb25zdCBmb28gPSAobmV3IEJhcigpKS5iYXo7XG5cbmNvbnN0IHF1dXggPSAobmV3IEJhcigpKVtiYXpdO1xuXG4obmV3IEJhcigpKS5kb1NvbWV0aGluZygpOyJ9)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForNewInMemberExpressions\": false }] */\n\nconst foo = (new Bar()).baz;\n\nconst quux = (new Bar())[baz];\n\n(new Bar()).doSomething();\n```\n\n### enforceForFunctionPrototypeMethods\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForFunctionPrototypeMethods\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJlbmZvcmNlRm9yRnVuY3Rpb25Qcm90b3R5cGVNZXRob2RzXCI6IGZhbHNlIH1dICovXG5cbmNvbnN0IGZvbyA9IChmdW5jdGlvbiAoKSB7fSkuY2FsbCgpO1xuXG5jb25zdCBiYXIgPSAoZnVuY3Rpb24gKCkge30pLmFwcGx5KCk7XG5cbmNvbnN0IGJheiA9IChmdW5jdGlvbiAoKSB7fS5jYWxsKCkpO1xuXG5jb25zdCBxdXV4ID0gKGZ1bmN0aW9uICgpIHt9LmFwcGx5KCkpOyJ9)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForFunctionPrototypeMethods\": false }] */\n\nconst foo = (function () {}).call();\n\nconst bar = (function () {}).apply();\n\nconst baz = (function () {}.call());\n\nconst quux = (function () {}.apply());\n```\n\n### allowParensAfterCommentPattern\n\nTo make this rule allow extra parentheses preceded by specific comments, set this option to a string pattern that will be passed to the [`RegExp` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp).\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"allowParensAfterCommentPattern\": \"@type\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiYWxsXCIsIHsgXCJhbGxvd1BhcmVuc0FmdGVyQ29tbWVudFBhdHRlcm5cIjogXCJAdHlwZVwiIH1dICovXG5cbmNvbnN0IHNwYW4gPSAvKipAdHlwZSB7SFRNTFNwYW5FbGVtZW50fSovKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXG5pZiAoLyoqIEB0eXBlIHtGb28gfCBCYXJ9ICovKG9wdGlvbnMpLmJheikgY29uc29sZS5sb2coJ0xpbnQgZnJlZScpO1xuXG5mb28oLyoqIEB0eXBlIHtCYXJ9ICovIChiYXIpLCBvcHRpb25zLCB7XG4gICAgbmFtZTogXCJuYW1lXCIsXG4gICAgcGF0aDogXCJwYXRoXCIsXG59KTtcblxuaWYgKGZvbykge1xuICAgIC8qKiBAdHlwZSB7QmFyfSAqL1xuICAgIChiYXIpLnByb3AgPSBmYWxzZTtcbn0ifQ==)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"allowParensAfterCommentPattern\": \"@type\" }] */\n\nconst span = /**@type {HTMLSpanElement}*/(event.currentTarget);\n\nif (/** @type {Foo | Bar} */(options).baz) console.log('Lint free');\n\nfoo(/** @type {Bar} */ (bar), options, {\n    name: \"name\",\n    path: \"path\",\n});\n\nif (foo) {\n    /** @type {Bar} */\n    (bar).prop = false;\n}\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `\"functions\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiZnVuY3Rpb25zXCJdICovXG5cbigoZnVuY3Rpb24gZm9vKCkge30pKSgpO1xuXG52YXIgeSA9IChmdW5jdGlvbiAoKSB7cmV0dXJuIDE7fSk7In0=)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n((function foo() {}))();\n\nvar y = (function () {return 1;});\n```\n\nExamples of **correct** code for this rule with the `\"functions\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IFtcImVycm9yXCIsIFwiZnVuY3Rpb25zXCJdICovXG5cbigwKS50b1N0cmluZygpO1xuXG4oT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCkpO1xuXG4oe30udG9TdHJpbmcuY2FsbCgpKTtcblxuKGZ1bmN0aW9uKCl7fSA/IGEoKSA6IGIoKSk7XG5cbigvXmEkLykudGVzdCh4KTtcblxuYSA9IChiICogYyk7XG5cbihhICogYikgKyBjO1xuXG50eXBlb2YgKGEpOyJ9)\n\n``` language-js\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n(0).toString();\n\n(Object.prototype.toString.call());\n\n({}.toString.call());\n\n(function(){} ? a() : b());\n\n(/^a$/).test(x);\n\na = (b * c);\n\n(a * b) + c;\n\ntypeof (a);\n```\n\n## Related Rules\n\n- [arrow-parens](arrow-parens)\n- [no-cond-assign](no-cond-assign)\n- [no-return-assign](no-return-assign)\n\n## Version\n\nThis rule was introduced in ESLint v0.1.4.\n\n## Further Reading\n\n[Operator precedence - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extra-parens.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extra-parens.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extra-parens](https://eslint.org/docs/latest/rules/no-extra-parens)"
- name: no-extra-semi
  id: rules/no-extra-semi
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# no-extra-semi\n\nDisallow unnecessary semicolons\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-extra-semi../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-extra-semi../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/no-extra-semi) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nProblems reported by this rule can be fixed automatically, except when removing a semicolon would cause a following statement to become a directive such as `\"use strict\"`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLXNlbWk6IFwiZXJyb3JcIiovXG5cbnZhciB4ID0gNTs7XG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBjb2RlXG59O1xuXG5jbGFzcyBDIHtcbiAgICBmaWVsZDs7XG5cbiAgICBtZXRob2QoKSB7XG4gICAgICAgIC8vIGNvZGVcbiAgICB9O1xuXG4gICAgc3RhdGljIHtcbiAgICAgICAgLy8gY29kZVxuICAgIH07XG59OyJ9)\n\n``` language-js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\nclass C {\n    field;;\n\n    method() {\n        // code\n    };\n\n    static {\n        // code\n    };\n};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWV4dHJhLXNlbWk6IFwiZXJyb3JcIiovXG5cbnZhciB4ID0gNTtcblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIGNvZGVcbn1cblxudmFyIGJhciA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvZGVcbn07XG5cbmNsYXNzIEMge1xuICAgIGZpZWxkO1xuXG4gICAgbWV0aG9kKCkge1xuICAgICAgICAvLyBjb2RlXG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgLy8gY29kZVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nfunction foo() {\n    // code\n}\n\nvar bar = function() {\n    // code\n};\n\nclass C {\n    field;\n\n    method() {\n        // code\n    }\n\n    static {\n        // code\n    }\n}\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n- [semi](semi)\n- [semi-spacing](semi-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-extra-semi.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-extra-semi.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-extra-semi](https://eslint.org/docs/latest/rules/no-extra-semi)"
- name: no-fallthrough
  id: rules/no-fallthrough
  summary: The switch statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to “fall through” from one case to the next
  description: "# no-fallthrough\n\nDisallow fallthrough of `case` statements\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-fallthrough../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [commentPattern](#commentpattern)\n    2.  [allowEmptyCase](#allowemptycase)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThe `switch` statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to “fall through” from one `case` to the next. For example:\n\n``` language-js\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomethingElse();\n}\n```\n\nIn this example, if `foo` is `1`, then execution will flow through both cases, as the first falls through to the second. You can prevent this by using `break`, as in this example:\n\n``` language-js\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomethingElse();\n}\n```\n\nThat works fine when you don’t want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It’s considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the `/falls?\\s?through/i` regular expression but isn’t a directive:\n\n``` language-js\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fall through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fallsthrough\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1: {\n        doSomething();\n        // falls through\n    }\n\n    case 2: {\n        doSomethingElse();\n    }\n}\n```\n\nIn this example, there is no confusion as to the expected behavior. It is clear that the first case is meant to fall through to the second case.\n\n## Rule Details\n\nThis rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZhbGx0aHJvdWdoOiBcImVycm9yXCIqL1xuXG5zd2l0Y2goZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBkb1NvbWV0aGluZygpO1xuXG4gICAgY2FzZSAyOlxuICAgICAgICBkb1NvbWV0aGluZygpO1xufSJ9)\n\n``` language-js\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomething();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZhbGx0aHJvdWdoOiBcImVycm9yXCIqL1xuXG5zd2l0Y2goZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBkb1NvbWV0aGluZygpO1xuICAgICAgICBicmVhaztcblxuICAgIGNhc2UgMjpcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbn1cblxuZnVuY3Rpb24gYmFyKGZvbykge1xuICAgIHN3aXRjaChmb28pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgZG9Tb21ldGhpbmcoKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBkb1NvbWV0aGluZygpO1xuICAgIH1cbn1cblxuc3dpdGNoKGZvbykge1xuICAgIGNhc2UgMTpcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm9vIVwiKTtcblxuICAgIGNhc2UgMjpcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbn1cblxuc3dpdGNoKGZvbykge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbnN3aXRjaChmb28pIHtcbiAgICBjYXNlIDE6XG4gICAgICAgIGRvU29tZXRoaW5nKCk7XG4gICAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgIGNhc2UgMjpcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbn1cblxuc3dpdGNoKGZvbykge1xuICAgIGNhc2UgMToge1xuICAgICAgICBkb1NvbWV0aGluZygpO1xuICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgfVxuXG4gICAgY2FzZSAyOiB7XG4gICAgICAgIGRvU29tZXRoaW5nRWxzZSgpO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n}\n\nfunction bar(foo) {\n    switch(foo) {\n        case 1:\n            doSomething();\n            return;\n\n        case 2:\n            doSomething();\n    }\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        throw new Error(\"Boo!\");\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1: {\n        doSomething();\n        // falls through\n    }\n\n    case 2: {\n        doSomethingElse();\n    }\n}\n```\n\nNote that the last `case` statement in these examples does not cause a warning because there is nothing to fall through into.\n\n## Options\n\nThis rule has an object option:\n\n- Set the `commentPattern` option to a regular expression string to change the test for intentional fallthrough comment. If the fallthrough comment matches a directive, that takes precedence over `commentPattern`.\n\n- Set the `allowEmptyCase` option to `true` to allow empty cases regardless of the layout. By default, this rule does not require a fallthrough comment after an empty `case` only if the empty `case` and the next `case` are on the same line or on consecutive lines.\n\n### commentPattern\n\nExamples of **correct** code for the `{ \"commentPattern\": \"break[\\\\s\\\\w]*omitted\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZhbGx0aHJvdWdoOiBbXCJlcnJvclwiLCB7IFwiY29tbWVudFBhdHRlcm5cIjogXCJicmVha1tcXFxcc1xcXFx3XSpvbWl0dGVkXCIgfV0qL1xuXG5zd2l0Y2goZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBkb1NvbWV0aGluZygpO1xuICAgICAgICAvLyBicmVhayBvbWl0dGVkXG5cbiAgICBjYXNlIDI6XG4gICAgICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbnN3aXRjaChmb28pIHtcbiAgICBjYXNlIDE6XG4gICAgICAgIGRvU29tZXRoaW5nKCk7XG4gICAgICAgIC8vIGNhdXRpb246IGJyZWFrIGlzIG9taXR0ZWQgaW50ZW50aW9uYWxseVxuXG4gICAgZGVmYXVsdDpcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-fallthrough: [\"error\", { \"commentPattern\": \"break[\\\\s\\\\w]*omitted\" }]*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // break omitted\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // caution: break is omitted intentionally\n\n    default:\n        doSomething();\n}\n```\n\n### allowEmptyCase\n\nExamples of **correct** code for the `{ \"allowEmptyCase\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1mYWxsdGhyb3VnaDogW1wiZXJyb3JcIiwgeyBcImFsbG93RW1wdHlDYXNlXCI6IHRydWUgfV0gKi9cblxuc3dpdGNoKGZvbyl7XG4gICAgY2FzZSAxOlxuXG4gICAgY2FzZSAyOiBkb1NvbWV0aGluZygpO1xufVxuXG5zd2l0Y2goZm9vKXtcbiAgICBjYXNlIDE6XG4gICAgLypcbiAgICBQdXQgYSBtZXNzYWdlIGhlcmUgXG4gICAgKi9cbiAgICBjYXNlIDI6IGRvU29tZXRoaW5nKCk7XG59XG4ifQ==)\n\n``` language-js\n/* eslint no-fallthrough: [\"error\", { \"allowEmptyCase\": true }] */\n\nswitch(foo){\n    case 1:\n\n    case 2: doSomething();\n}\n\nswitch(foo){\n    case 1:\n    /*\n    Put a message here \n    */\n    case 2: doSomething();\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce that each `case` statement should end with a `throw`, `return`, `break`, or comment, then you can safely turn this rule off.\n\n## Related Rules\n\n- [default-case](default-case)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-fallthrough.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-fallthrough.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-fallthrough](https://eslint.org/docs/latest/rules/no-fallthrough)"
- name: no-func-assign
  id: rules/no-func-assign
  summary: JavaScript functions can be written as a FunctionDeclaration function foo() { ... } or as a FunctionExpression var foo = function() { ... };. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue
  description: "# no-func-assign\n\nDisallow reassigning `function` declarations\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-func-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n``` language-js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZ1bmMtYXNzaWduOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28oKSB7fVxuZm9vID0gYmFyO1xuXG5mdW5jdGlvbiBiYXooKSB7XG4gICAgYmF6ID0gYmFyO1xufVxuXG52YXIgYSA9IGZ1bmN0aW9uIGhlbGxvKCkge1xuICBoZWxsbyA9IDEyMztcbn07In0=)\n\n``` language-js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction baz() {\n    baz = bar;\n}\n\nvar a = function hello() {\n  hello = 123;\n};\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZ1bmMtYXNzaWduOiBcImVycm9yXCIqL1xuXG5mb28gPSBiYXI7XG5mdW5jdGlvbiBmb28oKSB7fSJ9)\n\n``` language-js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWZ1bmMtYXNzaWduOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gZnVuY3Rpb24gKCkge31cbmZvbyA9IGJhcjtcblxuZnVuY3Rpb24gYmF6KGJheikgeyAvLyBgYmF6YCBpcyBzaGFkb3dlZC5cbiAgICBiYXogPSBiYXI7XG59XG5cbmZ1bmN0aW9uIHF1eCgpIHtcbiAgICB2YXIgcXV4ID0gYmFyOyAgLy8gYHF1eGAgaXMgc2hhZG93ZWQuXG59In0=)\n\n``` language-js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction baz(baz) { // `baz` is shadowed.\n    baz = bar;\n}\n\nfunction qux() {\n    var qux = bar;  // `qux` is shadowed.\n}\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-func-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-func-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-func-assign](https://eslint.org/docs/latest/rules/no-func-assign)"
- name: no-global-assign
  id: rules/no-global-assign
  summary: JavaScript environments contain a number of built-in global variables, such as window in browsers and process in Node.js
  description: "# no-global-assign\n\nDisallow assignments to native objects or read-only global variables\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-global-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nJavaScript environments contain a number of built-in global variables, such as `window` in browsers and `process` in Node.js. In almost all cases, you don’t want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don’t want to do this in browser code:\n\n``` language-js\nwindow = {};\n```\n\nWhile examples such as `window` are obvious, there are often hundreds of built-in global objects provided by JavaScript environments. It can be hard to know if you’re assigning to a global variable or not.\n\n## Rule Details\n\nThis rule disallows modifications to read-only global variables.\n\nESLint has the capability to configure global variables as read-only.\n\n- [Specifying Environments](no-global-assign../use/configure#specifying-environments)\n- [Specifying Globals](no-global-assign../use/configure#specifying-globals)\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG5cbk9iamVjdCA9IG51bGxcbnVuZGVmaW5lZCA9IDEifQ==)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n\nObject = null\nundefined = 1\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgYnJvd3NlciovXG5cbndpbmRvdyA9IHt9XG5sZW5ndGggPSAxXG50b3AgPSAxIn0=)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n/*eslint-env browser*/\n\nwindow = {}\nlength = 1\ntop = 1\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG4vKmdsb2JhbCBhOnJlYWRvbmx5Ki9cblxuYSA9IDEifQ==)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n/*global a:readonly*/\n\na = 1\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG5cbmEgPSAxXG52YXIgYiA9IDFcbmIgPSAyIn0=)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n\na = 1\nvar b = 1\nb = 2\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgYnJvd3NlciovXG5cbm9ubG9hZCA9IGZ1bmN0aW9uKCkge30ifQ==)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n/*eslint-env browser*/\n\nonload = function() {}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWdsb2JhbC1hc3NpZ246IFwiZXJyb3JcIiovXG4vKmdsb2JhbCBhOndyaXRhYmxlKi9cblxuYSA9IDEifQ==)\n\n``` language-js\n/*eslint no-global-assign: \"error\"*/\n/*global a:writable*/\n\na = 1\n```\n\n## Options\n\nThis rule accepts an `exceptions` option, which can be used to specify a list of builtins for which reassignments will be allowed:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-global-assign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}\n```\n\n## When Not To Use It\n\nIf you are trying to override one of the native objects.\n\n## Related Rules\n\n- [no-extend-native](no-extend-native)\n- [no-redeclare](no-redeclare)\n- [no-shadow](no-shadow)\n\n## Version\n\nThis rule was introduced in ESLint v3.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-global-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-global-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-global-assign](https://eslint.org/docs/latest/rules/no-global-assign)"
- name: no-implicit-coercion
  id: rules/no-implicit-coercion
  summary: In JavaScript, there are a lot of different ways to convert value types
  description: "# no-implicit-coercion\n\nDisallow shorthand type conversions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-implicit-coercion../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [boolean](#boolean)\n    2.  [number](#number)\n    3.  [string](#string)\n    4.  [disallowTemplateShorthand](#disallowtemplateshorthand)\n    5.  [allow](#allow)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn JavaScript, there are a lot of different ways to convert value types. Some of them might be hard to read and understand.\n\nSuch as:\n\n``` language-js\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\nvar n = +foo;\nvar n = 1 * foo;\nvar s = \"\" + foo;\nfoo += ``;\n```\n\nThose can be replaced with the following code:\n\n``` language-js\nvar b = Boolean(foo);\nvar b = foo.indexOf(\".\") !== -1;\nvar n = Number(foo);\nvar n = Number(foo);\nvar s = String(foo);\nfoo = String(foo);\n```\n\n## Rule Details\n\nThis rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.\n\n## Options\n\nThis rule has three main options and one override option to allow some coercions as required.\n\n- `\"boolean\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `boolean` type.\n- `\"number\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `number` type.\n- `\"string\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `string` type.\n- `\"disallowTemplateShorthand\"` (`false` by default) - When this is `true`, this rule warns `string` type conversions using `${expression}` form.\n- `\"allow\"` (`empty` by default) - Each entry in this array can be one of `~`, `!!`, `+` or `*` that are to be allowed.\n\nNote that operator `+` in `allow` list would allow `+foo` (number coercion) as well as `\"\" + foo` (string coercion).\n\n### boolean\n\nExamples of **incorrect** code for the default `{ \"boolean\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgYiA9ICEhZm9vO1xudmFyIGIgPSB+Zm9vLmluZGV4T2YoXCIuXCIpO1xuLy8gYml0d2lzZSBub3QgaXMgaW5jb3JyZWN0IG9ubHkgd2l0aCBgaW5kZXhPZmAvYGxhc3RJbmRleE9mYCBtZXRob2QgY2FsbGluZy4ifQ==)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\n// bitwise not is incorrect only with `indexOf`/`lastIndexOf` method calling.\n```\n\nExamples of **correct** code for the default `{ \"boolean\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgYiA9IEJvb2xlYW4oZm9vKTtcbnZhciBiID0gZm9vLmluZGV4T2YoXCIuXCIpICE9PSAtMTtcblxudmFyIG4gPSB+Zm9vOyAvLyBUaGlzIGlzIGEganVzdCBiaXR3aXNlIG5vdC4ifQ==)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar b = Boolean(foo);\nvar b = foo.indexOf(\".\") !== -1;\n\nvar n = ~foo; // This is a just bitwise not.\n```\n\n### number\n\nExamples of **incorrect** code for the default `{ \"number\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgbiA9ICtmb287XG52YXIgbiA9IDEgKiBmb287In0=)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar n = +foo;\nvar n = 1 * foo;\n```\n\nExamples of **correct** code for the default `{ \"number\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgbiA9IE51bWJlcihmb28pO1xudmFyIG4gPSBwYXJzZUZsb2F0KGZvbyk7XG52YXIgbiA9IHBhcnNlSW50KGZvbywgMTApO1xuXG52YXIgbiA9IGZvbyAqIDEvNDsgLy8gYCogMWAgaXMgYWxsb3dlZCB3aGVuIGZvbGxvd2VkIGJ5IHRoZSBgL2Agb3BlcmF0b3IifQ==)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar n = Number(foo);\nvar n = parseFloat(foo);\nvar n = parseInt(foo, 10);\n\nvar n = foo * 1/4; // `* 1` is allowed when followed by the `/` operator\n```\n\n### string\n\nExamples of **incorrect** code for the default `{ \"string\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgcyA9IFwiXCIgKyBmb287XG52YXIgcyA9IGBgICsgZm9vO1xuZm9vICs9IFwiXCI7XG5mb28gKz0gYGA7In0=)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar s = \"\" + foo;\nvar s = `` + foo;\nfoo += \"\";\nfoo += ``;\n```\n\nExamples of **correct** code for the default `{ \"string\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBcImVycm9yXCIqL1xuXG52YXIgcyA9IFN0cmluZyhmb28pO1xuZm9vID0gU3RyaW5nKGZvbyk7In0=)\n\n``` language-js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar s = String(foo);\nfoo = String(foo);\n```\n\n### disallowTemplateShorthand\n\nThis option is **not** affected by the `string` option.\n\nExamples of **incorrect** code for the `{ \"disallowTemplateShorthand\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBbXCJlcnJvclwiLCB7IFwiZGlzYWxsb3dUZW1wbGF0ZVNob3J0aGFuZFwiOiB0cnVlIH1dKi9cblxudmFyIHMgPSBgJHtmb299YDsifQ==)\n\n``` language-js\n/*eslint no-implicit-coercion: [\"error\", { \"disallowTemplateShorthand\": true }]*/\n\nvar s = `${foo}`;\n```\n\nExamples of **correct** code for the `{ \"disallowTemplateShorthand\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBbXCJlcnJvclwiLCB7IFwiZGlzYWxsb3dUZW1wbGF0ZVNob3J0aGFuZFwiOiB0cnVlIH1dKi9cblxudmFyIHMgPSBTdHJpbmcoZm9vKTtcblxudmFyIHMgPSBgYSR7Zm9vfWA7XG5cbnZhciBzID0gYCR7Zm9vfWJgO1xuXG52YXIgcyA9IGAke2Zvb30ke2Jhcn1gO1xuXG52YXIgcyA9IHRhZ2Ake2Zvb31gOyJ9)\n\n``` language-js\n/*eslint no-implicit-coercion: [\"error\", { \"disallowTemplateShorthand\": true }]*/\n\nvar s = String(foo);\n\nvar s = `a${foo}`;\n\nvar s = `${foo}b`;\n\nvar s = `${foo}${bar}`;\n\nvar s = tag`${foo}`;\n```\n\nExamples of **correct** code for the default `{ \"disallowTemplateShorthand\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBbXCJlcnJvclwiLCB7IFwiZGlzYWxsb3dUZW1wbGF0ZVNob3J0aGFuZFwiOiBmYWxzZSB9XSovXG5cbnZhciBzID0gYCR7Zm9vfWA7In0=)\n\n``` language-js\n/*eslint no-implicit-coercion: [\"error\", { \"disallowTemplateShorthand\": false }]*/\n\nvar s = `${foo}`;\n```\n\n### allow\n\nUsing `allow` list, we can override and allow specific operators.\n\nExamples of **correct** code for the sample `{ \"allow\": [\"!!\", \"~\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWNvZXJjaW9uOiBbMiwgeyBcImFsbG93XCI6IFtcIiEhXCIsIFwiflwiXSB9IF0qL1xuXG52YXIgYiA9ICEhZm9vO1xudmFyIGIgPSB+Zm9vLmluZGV4T2YoXCIuXCIpOyJ9)\n\n``` language-js\n/*eslint no-implicit-coercion: [2, { \"allow\": [\"!!\", \"~\"] } ]*/\n\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about shorter notations for the type conversion, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-implicit-coercion.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-implicit-coercion.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-implicit-coercion](https://eslint.org/docs/latest/rules/no-implicit-coercion)"
- name: no-implicit-globals
  id: rules/no-implicit-globals
  summary: It is the best practice to avoid ‘polluting’ the global scope with variables that are intended to be local to the script
  description: "# no-implicit-globals\n\nDisallow declarations in the global scope\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [var and function declarations](#var-and-function-declarations)\n    2.  [Global variable leaks](#global-variable-leaks)\n    3.  [Read-only global variables](#read-only-global-variables)\n    4.  [const, let and class declarations](#const-let-and-class-declarations)\n    5.  [exported](#exported)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nIt is the best practice to avoid ‘polluting’ the global scope with variables that are intended to be local to the script.\n\nGlobal variables created from a script can produce name collisions with global variables created from another script, which will usually lead to runtime errors or unexpected behavior.\n\nThis rule disallows the following:\n\n- Declarations that create one or more variables in the global scope.\n- Global variable leaks.\n- Redeclarations of read-only global variables and assignments to read-only global variables.\n\nThere is an explicit way to create a global variable when needed, by assigning to a property of the global object.\n\nThis rule is mostly useful for browser scripts. Top-level declarations in ES modules and CommonJS modules create module-scoped variables. ES modules also have implicit `strict` mode, which prevents global variable leaks.\n\nBy default, this rule does not check `const`, `let` and `class` declarations.\n\nThis rule has an object option with one option:\n\n- Set `\"lexicalBindings\"` to `true` if you want this rule to check `const`, `let` and `class` declarations as well.\n\n## Rule Details\n\n### `var` and `function` declarations\n\nWhen working with browser scripts, developers often forget that variable and function declarations at the top-level scope become global variables on the `window` object. As opposed to modules which have their own scope. Globals should be explicitly assigned to `window` or `self` if that is the intent. Otherwise variables intended to be local to the script should be wrapped in an IIFE.\n\nThis rule disallows `var` and `function` declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSAxO1xuXG5mdW5jdGlvbiBiYXIoKSB7fSJ9)\n\n``` language-js\n/*eslint no-implicit-globals: \"error\"*/\n\nvar foo = 1;\n\nfunction bar() {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFwiZXJyb3JcIiovXG5cbi8vIGV4cGxpY2l0bHkgc2V0IG9uIHdpbmRvd1xud2luZG93LmZvbyA9IDE7XG53aW5kb3cuYmFyID0gZnVuY3Rpb24oKSB7fTtcblxuLy8gaW50ZW5kZWQgdG8gYmUgc2NvcGUgdG8gdGhpcyBmaWxlXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBmb28gPSAxO1xuXG4gIGZ1bmN0aW9uIGJhcigpIHt9XG59KSgpOyJ9)\n\n``` language-js\n/*eslint no-implicit-globals: \"error\"*/\n\n// explicitly set on window\nwindow.foo = 1;\nwindow.bar = function() {};\n\n// intended to be scope to this file\n(function() {\n  var foo = 1;\n\n  function bar() {}\n})();\n```\n\nExamples of **correct** code for this rule with `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFwiZXJyb3JcIiovXG5cbi8vIGZvbyBhbmQgYmFyIGFyZSBsb2NhbCB0byBtb2R1bGVcbnZhciBmb28gPSAxO1xuZnVuY3Rpb24gYmFyKCkge30ifQ==)\n\n``` language-js\n/*eslint no-implicit-globals: \"error\"*/\n\n// foo and bar are local to module\nvar foo = 1;\nfunction bar() {}\n```\n\n### Global variable leaks\n\nWhen the code is not in `strict` mode, an assignment to an undeclared variable creates a new global variable. This will happen even if the code is in a function.\n\nThis does not apply to ES modules since the module code is implicitly in `strict` mode.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFwiZXJyb3JcIiovXG5cbmZvbyA9IDE7XG5cbkJhci5wcm90b3R5cGUuYmF6ID0gZnVuY3Rpb24gKCkge1xuICAgIGEgPSAxOyAvLyBJbnRlbmRlZCB0byBiZSB0aGlzLmEgPSAxO1xufTsifQ==)\n\n``` language-js\n/*eslint no-implicit-globals: \"error\"*/\n\nfoo = 1;\n\nBar.prototype.baz = function () {\n    a = 1; // Intended to be this.a = 1;\n};\n```\n\n### Read-only global variables\n\nThis rule also disallows redeclarations of read-only global variables and assignments to read-only global variables.\n\nA read-only global variable can be a built-in ES global (e.g. `Array`), an environment specific global (e.g. `window` in the browser environment), or a global variable defined as `readonly` in the configuration file or in a `/*global */` comment.\n\n- [Specifying Environments](no-implicit-globals../use/configure#specifying-environments)\n- [Specifying Globals](no-implicit-globals../use/configure#specifying-globals)\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFwiZXJyb3JcIiovXG5cbi8qZ2xvYmFsIGZvbzpyZWFkb25seSovXG5cbmZvbyA9IDE7XG5cbkFycmF5ID0gW107XG52YXIgT2JqZWN0OyJ9)\n\n``` language-js\n/*eslint no-implicit-globals: \"error\"*/\n\n/*global foo:readonly*/\n\nfoo = 1;\n\nArray = [];\nvar Object;\n```\n\n### `const`, `let` and `class` declarations\n\nLexical declarations `const` and `let`, as well as `class` declarations, create variables that are block-scoped.\n\nHowever, when declared in the top-level of a browser script these variables are not ‘script-scoped’. They are actually created in the global scope and could produce name collisions with `var`, `const` and `let` variables and `function` and `class` declarations from other scripts. This does not apply to ES and CommonJS modules.\n\nIf the variable is intended to be local to the script, wrap the code with a block or with an immediately-invoked function expression (IIFE).\n\nExamples of **correct** code for this rule with `\"lexicalBindings\"` option set to `false` (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFtcImVycm9yXCIsIHtcImxleGljYWxCaW5kaW5nc1wiOiBmYWxzZX1dKi9cblxuY29uc3QgZm9vID0gMTtcblxubGV0IGJhejtcblxuY2xhc3MgQmFyIHt9In0=)\n\n``` language-js\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": false}]*/\n\nconst foo = 1;\n\nlet baz;\n\nclass Bar {}\n```\n\nExamples of **incorrect** code for this rule with `\"lexicalBindings\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFtcImVycm9yXCIsIHtcImxleGljYWxCaW5kaW5nc1wiOiB0cnVlfV0qL1xuXG5jb25zdCBmb28gPSAxO1xuXG5sZXQgYmF6O1xuXG5jbGFzcyBCYXIge30ifQ==)\n\n``` language-js\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\nconst foo = 1;\n\nlet baz;\n\nclass Bar {}\n```\n\nExamples of **correct** code for this rule with `\"lexicalBindings\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFtcImVycm9yXCIsIHtcImxleGljYWxCaW5kaW5nc1wiOiB0cnVlfV0qL1xuXG57XG4gICAgY29uc3QgZm9vID0gMTtcbiAgICBsZXQgYmF6O1xuICAgIGNsYXNzIEJhciB7fVxufVxuXG4oZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZm9vID0gMTtcbiAgICBsZXQgYmF6O1xuICAgIGNsYXNzIEJhciB7fVxufSgpKTsifQ==)\n\n``` language-js\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\n{\n    const foo = 1;\n    let baz;\n    class Bar {}\n}\n\n(function() {\n    const foo = 1;\n    let baz;\n    class Bar {}\n}());\n```\n\nIf you intend to create a global `const` or `let` variable or a global `class` declaration, to be used from other scripts, be aware that there are certain differences when compared to the traditional methods, which are `var` declarations and assigning to a property of the global `window` object:\n\n- Lexically declared variables cannot be conditionally created. A script cannot check for the existence of a variable and then create a new one. `var` variables are also always created, but redeclarations do not cause runtime exceptions.\n- Lexically declared variables do not create properties on the global object, which is what a consuming script might expect.\n- Lexically declared variables are shadowing properties of the global object, which might produce errors if a consuming script is using both the variable and the property.\n- Lexically declared variables can produce a permanent Temporal Dead Zone (TDZ) if the initialization throws an exception. Even the `typeof` check is not safe from TDZ reference exceptions.\n\nExamples of **incorrect** code for this rule with `\"lexicalBindings\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFtcImVycm9yXCIsIHtcImxleGljYWxCaW5kaW5nc1wiOiB0cnVlfV0qL1xuXG5jb25zdCBNeUdsb2JhbEZ1bmN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGEgPSAxO1xuICAgIGxldCBiID0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICB9XG59KCkpOyJ9)\n\n``` language-js\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\nconst MyGlobalFunction = (function() {\n    const a = 1;\n    let b = 2;\n    return function() {\n        return a + b;\n    }\n}());\n```\n\nExamples of **correct** code for this rule with `\"lexicalBindings\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpY2l0LWdsb2JhbHM6IFtcImVycm9yXCIsIHtcImxleGljYWxCaW5kaW5nc1wiOiB0cnVlfV0qL1xuXG53aW5kb3cuTXlHbG9iYWxGdW5jdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhID0gMTtcbiAgICBsZXQgYiA9IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgfVxufSgpKTsifQ==)\n\n``` language-js\n/*eslint no-implicit-globals: [\"error\", {\"lexicalBindings\": true}]*/\n\nwindow.MyGlobalFunction = (function() {\n    const a = 1;\n    let b = 2;\n    return function() {\n        return a + b;\n    }\n}());\n```\n\n### exported\n\nYou can use `/* exported variableName */` block comments in the same way as in [`no-unused-vars`](no-implicit-globals./no-unused-vars). See the [`no-unused-vars` exported section](no-implicit-globals./no-unused-vars#exported) for details.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1pbXBsaWNpdC1nbG9iYWxzOiBlcnJvciAqL1xuLyogZXhwb3J0ZWQgZ2xvYmFsX3ZhciAqL1xuXG52YXIgZ2xvYmFsX3ZhciA9IDQyOyJ9)\n\n``` language-js\n/* eslint no-implicit-globals: error */\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## When Not To Use It\n\nIn the case of a browser script, if you want to be able to explicitly declare variables and functions in the global scope, and your code is in strict mode or you don’t want this rule to warn you about undeclared variables, and you also don’t want this rule to warn you about read-only globals, you can disable this rule.\n\nIn the case of a CommonJS module, if your code is in strict mode or you don’t want this rule to warn you about undeclared variables, and you also don’t want this rule to warn you about the read-only globals, you can disable this rule.\n\nIn the case of an ES module, if you don’t want this rule to warn you about the read-only globals you can disable this rule.\n\n## Related Rules\n\n- [no-undef](no-undef)\n- [no-global-assign](no-global-assign)\n- [no-unused-vars](no-unused-vars)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-1.\n\n## Further Reading\n\n[Ben Alman » Immediately-Invoked Function Expression (IIFE)](https://benalman.com/news/2010/11/immediately-invoked-function-expression/)  \n\n[ReferenceError: assignment to undeclared variable “x” - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var)  \n\n[let - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-implicit-globals.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-implicit-globals.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-implicit-globals](https://eslint.org/docs/latest/rules/no-implicit-globals)"
- name: no-implied-eval
  id: rules/no-implied-eval
  summary: It’s considered a good practice to avoid using eval() in JavaScript
  description: "# no-implied-eval\n\nDisallow the use of `eval()`-like methods\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIt’s considered a good practice to avoid using `eval()` in JavaScript. There are security and performance implications involved with doing so, which is why many linters (including ESLint) recommend disallowing `eval()`. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.\n\nThe first is using `setTimeout()`, `setInterval()` or `execScript()` (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:\n\n``` language-js\nsetTimeout(\"alert('Hi!');\", 100);\n```\n\nThis is considered an implied `eval()` because a string of JavaScript code is passed in to be interpreted. The same can be done with `setInterval()` and `execScript()`. Both interpret the JavaScript code in the global scope. For both `setTimeout()` and `setInterval()`, the first argument can also be a function, and that is considered safer and is more performant:\n\n``` language-js\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\nThe best practice is to always use a function for the first argument of `setTimeout()` and `setInterval()` (and avoid `execScript()`).\n\n## Rule Details\n\nThis rule aims to eliminate implied `eval()` through the use of `setTimeout()`, `setInterval()` or `execScript()`. As such, it will warn when either function is used with a string as the first argument.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpZWQtZXZhbDogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBicm93c2VyKi9cblxuc2V0VGltZW91dChcImFsZXJ0KCdIaSEnKTtcIiwgMTAwKTtcblxuc2V0SW50ZXJ2YWwoXCJhbGVydCgnSGkhJyk7XCIsIDEwMCk7XG5cbmV4ZWNTY3JpcHQoXCJhbGVydCgnSGkhJylcIik7XG5cbndpbmRvdy5zZXRUaW1lb3V0KFwiY291bnQgPSA1XCIsIDEwKTtcblxud2luZG93LnNldEludGVydmFsKFwiZm9vID0gYmFyXCIsIDEwKTsifQ==)\n\n``` language-js\n/*eslint no-implied-eval: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(\"alert('Hi!');\", 100);\n\nsetInterval(\"alert('Hi!');\", 100);\n\nexecScript(\"alert('Hi!')\");\n\nwindow.setTimeout(\"count = 5\", 10);\n\nwindow.setInterval(\"foo = bar\", 10);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcGxpZWQtZXZhbDogXCJlcnJvclwiKi9cblxuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBhbGVydChcIkhpIVwiKTtcbn0sIDEwMCk7XG5cbnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIGFsZXJ0KFwiSGkhXCIpO1xufSwgMTAwKTsifQ==)\n\n``` language-js\n/*eslint no-implied-eval: \"error\"*/\n\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n\nsetInterval(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\n## When Not To Use It\n\nIf you want to allow `setTimeout()` and `setInterval()` with string arguments, then you can safely disable this rule.\n\n## Related Rules\n\n- [no-eval](no-eval)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-implied-eval.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-implied-eval.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-implied-eval](https://eslint.org/docs/latest/rules/no-implied-eval)"
- name: no-import-assign
  id: rules/no-import-assign
  summary: The updates of imported bindings by ES Modules cause runtime errors
  description: "# no-import-assign\n\nDisallow assigning to imported bindings\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-import-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Handled by TypeScript](#handled_by_typescript)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe updates of imported bindings by ES Modules cause runtime errors.\n\n## Rule Details\n\nThis rule warns the assignments, increments, and decrements of imported bindings.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcG9ydC1hc3NpZ246IFwiZXJyb3JcIiovXG5cbmltcG9ydCBtb2QsIHsgbmFtZWQgfSBmcm9tIFwiLi9tb2QubWpzXCJcbmltcG9ydCAqIGFzIG1vZF9ucyBmcm9tIFwiLi9tb2QubWpzXCJcblxubW9kID0gMSAgICAgICAgICAvLyBFUlJPUjogJ21vZCcgaXMgcmVhZG9ubHkuXG5uYW1lZCA9IDIgICAgICAgIC8vIEVSUk9SOiAnbmFtZWQnIGlzIHJlYWRvbmx5LlxubW9kX25zLm5hbWVkID0gMyAvLyBFUlJPUjogVGhlIG1lbWJlcnMgb2YgJ21vZF9ucycgYXJlIHJlYWRvbmx5LlxubW9kX25zID0ge30gICAgICAvLyBFUlJPUjogJ21vZF9ucycgaXMgcmVhZG9ubHkuXG4vLyBDYW4ndCBleHRlbmQgJ21vZF9ucydcbk9iamVjdC5hc3NpZ24obW9kX25zLCB7IGZvbzogXCJmb29cIiB9KSAvLyBFUlJPUjogVGhlIG1lbWJlcnMgb2YgJ21vZF9ucycgYXJlIHJlYWRvbmx5LiJ9)\n\n``` language-js\n/*eslint no-import-assign: \"error\"*/\n\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod = 1          // ERROR: 'mod' is readonly.\nnamed = 2        // ERROR: 'named' is readonly.\nmod_ns.named = 3 // ERROR: The members of 'mod_ns' are readonly.\nmod_ns = {}      // ERROR: 'mod_ns' is readonly.\n// Can't extend 'mod_ns'\nObject.assign(mod_ns, { foo: \"foo\" }) // ERROR: The members of 'mod_ns' are readonly.\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWltcG9ydC1hc3NpZ246IFwiZXJyb3JcIiovXG5cbmltcG9ydCBtb2QsIHsgbmFtZWQgfSBmcm9tIFwiLi9tb2QubWpzXCJcbmltcG9ydCAqIGFzIG1vZF9ucyBmcm9tIFwiLi9tb2QubWpzXCJcblxubW9kLnByb3AgPSAxXG5uYW1lZC5wcm9wID0gMlxubW9kX25zLm5hbWVkLnByb3AgPSAzXG5cbi8vIEtub3duIExpbWl0YXRpb25cbmZ1bmN0aW9uIHRlc3Qob2JqKSB7XG4gICAgb2JqLm5hbWVkID0gNCAvLyBOb3QgZXJyb3JlZCBiZWNhdXNlICdvYmonIGlzIG5vdCBuYW1lc3BhY2Ugb2JqZWN0cy5cbn1cbnRlc3QobW9kX25zKSAvLyBOb3QgZXJyb3JlZCBiZWNhdXNlIGl0IGRvZXNuJ3Qga25vdyB0aGF0ICd0ZXN0JyB1cGRhdGVzIHRoZSBtZW1iZXIgb2YgdGhlIGFyZ3VtZW50LiJ9)\n\n``` language-js\n/*eslint no-import-assign: \"error\"*/\n\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod.prop = 1\nnamed.prop = 2\nmod_ns.named.prop = 3\n\n// Known Limitation\nfunction test(obj) {\n    obj.named = 4 // Not errored because 'obj' is not namespace objects.\n}\ntest(mod_ns) // Not errored because it doesn't know that 'test' updates the member of the argument.\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about modifying imported bindings, you can disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\nNote that the compiler will not catch the `Object.assign()` case. Thus, if you use `Object.assign()` in your codebase, this rule will still provide some value.\n\n## Version\n\nThis rule was introduced in ESLint v6.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-import-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-import-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-import-assign](https://eslint.org/docs/latest/rules/no-import-assign)"
- name: no-inline-comments
  id: rules/no-inline-comments
  summary: Some style guides disallow comments on the same line as code
  description: "# no-inline-comments\n\nDisallow inline comments after code\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [JSX exception](#jsx-exception)\n2.  [Options](#options)\n    1.  [ignorePattern](#ignorepattern)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nSome style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.\n\n## Rule Details\n\nThis rule disallows comments on the same line as code.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubGluZS1jb21tZW50czogXCJlcnJvclwiKi9cblxudmFyIGEgPSAxOyAvLyBkZWNsYXJpbmcgYSB0byAxXG5cbmZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcigpe1xuICAgIHJldHVybiA0OyAvLyBjaG9zZW4gYnkgZmFpciBkaWNlIHJvbGwuXG4gICAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgcmFuZG9tLlxufVxuXG4vKiBBIGJsb2NrIGNvbW1lbnQgYmVmb3JlIGNvZGUgKi8gdmFyIGIgPSAyO1xuXG52YXIgYyA9IDM7IC8qIEEgYmxvY2sgY29tbWVudCBhZnRlciBjb2RlICovIn0=)\n\n``` language-js\n/*eslint no-inline-comments: \"error\"*/\n\nvar a = 1; // declaring a to 1\n\nfunction getRandomNumber(){\n    return 4; // chosen by fair dice roll.\n              // guaranteed to be random.\n}\n\n/* A block comment before code */ var b = 2;\n\nvar c = 3; /* A block comment after code */\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubGluZS1jb21tZW50czogXCJlcnJvclwiKi9cblxuLy8gVGhpcyBpcyBhIGNvbW1lbnQgYWJvdmUgYSBsaW5lIG9mIGNvZGVcbnZhciBmb28gPSA1O1xuXG52YXIgYmFyID0gNTtcbi8vVGhpcyBpcyBhIGNvbW1lbnQgYmVsb3cgYSBsaW5lIG9mIGNvZGUifQ==)\n\n``` language-js\n/*eslint no-inline-comments: \"error\"*/\n\n// This is a comment above a line of code\nvar foo = 5;\n\nvar bar = 5;\n//This is a comment below a line of code\n```\n\n### JSX exception\n\nComments inside the curly braces in JSX are allowed to be on the same line as the braces, but only if they are not on the same line with other code, and the braces do not enclose an actual expression.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBuby1pbmxpbmUtY29tbWVudHM6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSA8ZGl2PnsgLyogT24gdGhlIHNhbWUgbGluZSB3aXRoIG90aGVyIGNvZGUgKi8gfTxoMT5Tb21lIGhlYWRpbmc8L2gxPjwvZGl2PjtcblxudmFyIGJhciA9IChcbiAgICA8ZGl2PlxuICAgIHsgICAvLyBUaGVzZSBicmFjZXMgYXJlIG5vdCBqdXN0IGZvciB0aGUgY29tbWVudCwgc28gaXQgY2FuJ3QgYmUgb24gdGhlIHNhbWUgbGluZVxuICAgICAgICBiYXpcbiAgICB9XG4gICAgPC9kaXY+XG4pOyJ9)\n\n``` language-jsx\n/*eslint no-inline-comments: \"error\"*/\n\nvar foo = <div>{ /* On the same line with other code */ }<h1>Some heading</h1></div>;\n\nvar bar = (\n    <div>{   // These braces are not just for the comment, so it can't be on the same line\n        baz\n    }</div>\n);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBuby1pbmxpbmUtY29tbWVudHM6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSAoXG4gICAgPGRpdj5cbiAgICAgIHsvKiBUaGVzZSBicmFjZXMgYXJlIGp1c3QgZm9yIHRoaXMgY29tbWVudCBhbmQgdGhlcmUgaXMgbm90aGluZyBlbHNlIG9uIHRoaXMgbGluZSAqL31cbiAgICAgIDxoMT5Tb21lIGhlYWRpbmc8L2gxPlxuICAgIDwvZGl2PlxuKVxuXG52YXIgYmFyID0gKFxuICAgIDxkaXY+XG4gICAge1xuICAgICAgICAvLyBUaGVyZSBpcyBub3RoaW5nIGVsc2Ugb24gdGhpcyBsaW5lXG4gICAgICAgIGJhelxuICAgIH1cbiAgICA8L2Rpdj5cbik7XG5cbnZhciBxdXV4ID0gKFxuICAgIDxkaXY+XG4gICAgICB7LypcbiAgICAgICAgTXVsdGlsaW5lXG4gICAgICAgIGNvbW1lbnRcbiAgICAgICovfVxuICAgICAgPGgxPlNvbWUgaGVhZGluZzwvaDE+XG4gICAgPC9kaXY+XG4pIn0=)\n\n``` language-jsx\n/*eslint no-inline-comments: \"error\"*/\n\nvar foo = (\n    <div>{/* These braces are just for this comment and there is nothing else on this line */}<h1>Some heading</h1></div>\n)\n\nvar bar = (\n    <div>{\n        // There is nothing else on this line\n        baz\n    }</div>\n);\n\nvar quux = (\n    <div>{/*\n        Multiline\n        comment\n      */}<h1>Some heading</h1></div>\n)\n```\n\n## Options\n\n### ignorePattern\n\nTo make this rule ignore specific comments, set the `ignorePattern` option to a string pattern that will be passed to the [`RegExp` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp).\n\nExamples of **correct** code for the `ignorePattern` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubGluZS1jb21tZW50czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJ3ZWJwYWNrQ2h1bmtOYW1lOlxcXFxzLitcIiB9XSovXG5cbmltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcIm15LWNodW5rLW5hbWVcIiAqLyAnLi9sb2NhbGUvZW4nKTsifQ==)\n\n``` language-js\n/*eslint no-inline-comments: [\"error\", { \"ignorePattern\": \"webpackChunkName:\\\\s.+\" }]*/\n\nimport(/* webpackChunkName: \"my-chunk-name\" */ './locale/en');\n```\n\nExamples of **incorrect** code for the `ignorePattern` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubGluZS1jb21tZW50czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVBhdHRlcm5cIjogXCJzb21ldGhpbmdcIiB9XSAqL1xuXG52YXIgZm9vID0gNDsgLy8gb3RoZXIgdGhpbmcifQ==)\n\n``` language-js\n/*eslint no-inline-comments: [\"error\", { \"ignorePattern\": \"something\" }] */\n\nvar foo = 4; // other thing\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.10.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-inline-comments.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-inline-comments.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-inline-comments](https://eslint.org/docs/latest/rules/no-inline-comments)"
- name: no-inner-declarations
  id: rules/no-inner-declarations
  summary: In JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes erroneously accept them elsewhere
  description: "# no-inner-declarations\n\nDisallow variable or `function` declarations in nested blocks\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-inner-declarations../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [functions](#functions)\n    2.  [both](#both)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes [erroneously accept them elsewhere](https://code.google.com/p/esprima/issues/detail?id=422). This only applies to function declarations; named or anonymous function expressions can occur anywhere an expression is permitted.\n\n``` language-js\n// Good\nfunction doSomething() { }\n\n// Bad\nif (test) {\n    function doSomethingElse () { }\n}\n\nfunction anotherThing() {\n    var fn;\n\n    if (test) {\n\n        // Good\n        fn = function expression() { };\n\n        // Bad\n        function declaration() { }\n    }\n}\n```\n\nA variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks. This is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity. Note that [block bindings](https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings) (`let`, `const`) are not hoisted and therefore they are not affected by this rule.\n\n``` language-js\n/*eslint-env es6*/\n\n// Good\nvar foo = 42;\n\n// Good\nif (foo) {\n    let bar1;\n}\n\n// Bad\nwhile (test) {\n    var bar2;\n}\n\nfunction doSomething() {\n    // Good\n    var baz = true;\n\n    // Bad\n    if (baz) {\n        var quux;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires that function declarations and, optionally, variable declarations be in the root of a program, or in the root of the body of a function, or in the root of the body of a class static block.\n\n## Options\n\nThis rule has a string option:\n\n- `\"functions\"` (default) disallows `function` declarations in nested blocks\n- `\"both\"` disallows `function` and `var` declarations in nested blocks\n\n### functions\n\nExamples of **incorrect** code for this rule with the default `\"functions\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubmVyLWRlY2xhcmF0aW9uczogXCJlcnJvclwiKi9cblxuaWYgKHRlc3QpIHtcbiAgICBmdW5jdGlvbiBkb1NvbWV0aGluZygpIHsgfVxufVxuXG5mdW5jdGlvbiBkb1NvbWV0aGluZ0Vsc2UoKSB7XG4gICAgaWYgKHRlc3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZG9Bbm90aGVyVGhpbmcoKSB7IH1cbiAgICB9XG59XG5cbmlmIChmb28pIGZ1bmN0aW9uIGYoKXt9XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkb1NvbWV0aGluZygpIHsgfVxuICAgICAgICB9XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-inner-declarations: \"error\"*/\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomethingElse() {\n    if (test) {\n        function doAnotherThing() { }\n    }\n}\n\nif (foo) function f(){}\n\nclass C {\n    static {\n        if (test) {\n            function doSomething() { }\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `\"functions\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubmVyLWRlY2xhcmF0aW9uczogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmcoKSB7IH1cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmdFbHNlKCkge1xuICAgIGZ1bmN0aW9uIGRvQW5vdGhlclRoaW5nKCkgeyB9XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGZ1bmN0aW9uIGRvU29tZXRoaW5nKCkgeyB9XG4gICAgfVxufVxuXG5pZiAodGVzdCkge1xuICAgIGFzeW5jQ2FsbChpZCwgZnVuY3Rpb24gKGVyciwgZGF0YSkgeyB9KTtcbn1cblxudmFyIGZuO1xuaWYgKHRlc3QpIHtcbiAgICBmbiA9IGZ1bmN0aW9uIGZuRXhwcmVzc2lvbigpIHsgfTtcbn1cblxuaWYgKGZvbykgdmFyIGE7In0=)\n\n``` language-js\n/*eslint no-inner-declarations: \"error\"*/\n\nfunction doSomething() { }\n\nfunction doSomethingElse() {\n    function doAnotherThing() { }\n}\n\nclass C {\n    static {\n        function doSomething() { }\n    }\n}\n\nif (test) {\n    asyncCall(id, function (err, data) { });\n}\n\nvar fn;\nif (test) {\n    fn = function fnExpression() { };\n}\n\nif (foo) var a;\n```\n\n### both\n\nExamples of **incorrect** code for this rule with the `\"both\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubmVyLWRlY2xhcmF0aW9uczogW1wiZXJyb3JcIiwgXCJib3RoXCJdKi9cblxuaWYgKHRlc3QpIHtcbiAgICB2YXIgZm9vID0gNDI7XG59XG5cbmZ1bmN0aW9uIGRvQW5vdGhlclRoaW5nKCkge1xuICAgIGlmICh0ZXN0KSB7XG4gICAgICAgIHZhciBiYXIgPSA4MTtcbiAgICB9XG59XG5cbmlmIChmb28pIHZhciBhO1xuXG5pZiAoZm9vKSBmdW5jdGlvbiBmKCl7fVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBpZiAodGVzdCkge1xuICAgICAgICAgICAgdmFyIHNvbWV0aGluZztcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-inner-declarations: [\"error\", \"both\"]*/\n\nif (test) {\n    var foo = 42;\n}\n\nfunction doAnotherThing() {\n    if (test) {\n        var bar = 81;\n    }\n}\n\nif (foo) var a;\n\nif (foo) function f(){}\n\nclass C {\n    static {\n        if (test) {\n            var something;\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"both\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlubmVyLWRlY2xhcmF0aW9uczogW1wiZXJyb3JcIiwgXCJib3RoXCJdKi9cblxudmFyIGJhciA9IDQyO1xuXG5pZiAodGVzdCkge1xuICAgIGxldCBiYXogPSA0Mztcbn1cblxuZnVuY3Rpb24gZG9Bbm90aGVyVGhpbmcoKSB7XG4gICAgdmFyIGJheiA9IDgxO1xufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICB2YXIgc29tZXRoaW5nO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-inner-declarations: [\"error\", \"both\"]*/\n\nvar bar = 42;\n\nif (test) {\n    let baz = 43;\n}\n\nfunction doAnotherThing() {\n    var baz = 81;\n}\n\nclass C {\n    static {\n        var something;\n    }\n}\n```\n\n## When Not To Use It\n\nThe function declaration portion rule will be rendered obsolete when [block-scoped functions](https://bugzilla.mozilla.org/show_bug.cgi?id=585536) land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using [block-scoped-var](no-inner-declarationsblock-scoped-var) or if declaring variables in nested blocks is acceptable despite hoisting.\n\n## Version\n\nThis rule was introduced in ESLint v0.6.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-inner-declarations.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-inner-declarations.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-inner-declarations](https://eslint.org/docs/latest/rules/no-inner-declarations)"
- name: no-invalid-regexp
  id: rules/no-invalid-regexp
  summary: An invalid pattern in a regular expression literal is a SyntaxError when the code is parsed, but an invalid string in RegExp constructors throws a SyntaxError only when the code is executed
  description: "# no-invalid-regexp\n\nDisallow invalid regular expression strings in `RegExp` constructors\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-invalid-regexp../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowConstructorFlags](#allowconstructorflags)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nAn invalid pattern in a regular expression literal is a `SyntaxError` when the code is parsed, but an invalid string in `RegExp` constructors throws a `SyntaxError` only when the code is executed.\n\n## Rule Details\n\nThis rule disallows invalid regular expression strings in `RegExp` constructors.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtcmVnZXhwOiBcImVycm9yXCIqL1xuXG5SZWdFeHAoJ1snKVxuXG5SZWdFeHAoJy4nLCAneicpXG5cbm5ldyBSZWdFeHAoJ1xcXFwnKSJ9)\n\n``` language-js\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('[')\n\nRegExp('.', 'z')\n\nnew RegExp('\\\\')\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtcmVnZXhwOiBcImVycm9yXCIqL1xuXG5SZWdFeHAoJy4nKVxuXG5uZXcgUmVnRXhwXG5cbnRoaXMuUmVnRXhwKCdbJykifQ==)\n\n``` language-js\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('.')\n\nnew RegExp\n\nthis.RegExp('[')\n```\n\nPlease note that this rule validates regular expressions per the latest ECMAScript specification, regardless of your parser settings.\n\nIf you want to allow additional constructor flags for any reason, you can specify them using the `allowConstructorFlags` option. These flags will then be ignored by the rule.\n\n## Options\n\nThis rule has an object option for exceptions:\n\n- `\"allowConstructorFlags\"` is an array of flags\n\n### allowConstructorFlags\n\nExamples of **correct** code for this rule with the `{ \"allowConstructorFlags\": [\"a\", \"z\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtcmVnZXhwOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dDb25zdHJ1Y3RvckZsYWdzXCI6IFtcImFcIiwgXCJ6XCJdIH1dKi9cblxubmV3IFJlZ0V4cCgnLicsICdhJylcblxubmV3IFJlZ0V4cCgnLicsICdheicpIn0=)\n\n``` language-js\n/*eslint no-invalid-regexp: [\"error\", { \"allowConstructorFlags\": [\"a\", \"z\"] }]*/\n\nnew RegExp('.', 'a')\n\nnew RegExp('.', 'az')\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.1.4.\n\n## Further Reading\n\n[Annotated ES5](https://es5.github.io/#x7.8.5)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-invalid-regexp.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-invalid-regexp.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-invalid-regexp](https://eslint.org/docs/latest/rules/no-invalid-regexp)"
- name: no-invalid-this
  id: rules/no-invalid-this
  summary: Under the strict mode, this keywords outside of classes or class-like objects might be undefined and raise a TypeError
  description: "# no-invalid-this\n\nDisallow use of `this` in contexts where the value of `this` is `undefined`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [capIsConstructor](#capisconstructor)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nUnder the strict mode, `this` keywords outside of classes or class-like objects might be `undefined` and raise a `TypeError`.\n\n## Rule Details\n\nThis rule aims to flag usage of `this` keywords in contexts where the value of `this` is `undefined`.\n\nTop-level `this` in scripts is always considered valid because it refers to the global object regardless of the strict mode.\n\nTop-level `this` in ECMAScript modules is always considered invalid because its value is `undefined`.\n\nFor `this` inside functions, this rule basically checks whether or not the function containing `this` keyword is a constructor or a method. Note that arrow functions have lexical `this`, and that therefore this rule checks their enclosing contexts.\n\nThis rule judges from following conditions whether or not the function is a constructor:\n\n- The name of the function starts with uppercase.\n- The function is assigned to a variable which starts with an uppercase letter.\n- The function is a constructor of ES2015 Classes.\n\nThis rule judges from following conditions whether or not the function is a method:\n\n- The function is on an object literal.\n- The function is assigned to a property.\n- The function is a method/getter/setter of ES2015 Classes.\n\nAnd this rule allows `this` keywords in functions below:\n\n- The `call/apply/bind` method of the function is called directly.\n- The function is a callback of array methods (such as `.forEach()`) if `thisArg` is given.\n- The function has `@this` tag in its JSDoc comment.\n\nAnd this rule always allows `this` keywords in the following contexts:\n\n- At the top level of scripts.\n- In class field initializers.\n- In class static blocks.\n\nOtherwise are considered problems.\n\nThis rule applies **only** in strict mode. With `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration, your code is in strict mode even without a `\"use strict\"` directive.\n\nExamples of **incorrect** code for this rule in strict mode:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtdGhpczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYSA9IDA7XG4gICAgYmF6KCgpID0+IHRoaXMpO1xufSkoKTtcblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIHRoaXMuYSA9IDA7XG4gICAgYmF6KCgpID0+IHRoaXMpO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hID0gMDtcbiAgICBiYXooKCkgPT4gdGhpcyk7XG59O1xuXG5mb28oZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hID0gMDtcbiAgICBiYXooKCkgPT4gdGhpcyk7XG59KTtcblxudmFyIG9iaiA9IHtcbiAgICBhYWE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgaW4gYSBtZXRob2QgYGFhYWAsIGJ1dCBgZm9vYCBpcyBub3QgYSBtZXRob2QuXG4gICAgICAgICAgICB0aGlzLmEgPSAwO1xuICAgICAgICAgICAgYmF6KCgpID0+IHRoaXMpO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmZvby5mb3JFYWNoKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYSA9IDA7XG4gICAgYmF6KCgpID0+IHRoaXMpO1xufSk7In0=)\n\n``` language-js\n/*eslint no-invalid-this: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\n(function() {\n    this.a = 0;\n    baz(() => this);\n})();\n\nfunction foo() {\n    this.a = 0;\n    baz(() => this);\n}\n\nvar foo = function() {\n    this.a = 0;\n    baz(() => this);\n};\n\nfoo(function() {\n    this.a = 0;\n    baz(() => this);\n});\n\nvar obj = {\n    aaa: function() {\n        return function foo() {\n            // There is in a method `aaa`, but `foo` is not a method.\n            this.a = 0;\n            baz(() => this);\n        };\n    }\n};\n\nfoo.forEach(function() {\n    this.a = 0;\n    baz(() => this);\n});\n```\n\nExamples of **correct** code for this rule in strict mode:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtdGhpczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudGhpcy5hID0gMDtcbmJheigoKSA9PiB0aGlzKTtcblxuZnVuY3Rpb24gRm9vKCkge1xuICAgIC8vIE9LLCB0aGlzIGlzIGluIGEgbGVnYWN5IHN0eWxlIGNvbnN0cnVjdG9yLlxuICAgIHRoaXMuYSA9IDA7XG4gICAgYmF6KCgpID0+IHRoaXMpO1xufVxuXG5jbGFzcyBCYXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBPSywgdGhpcyBpcyBpbiBhIGNvbnN0cnVjdG9yLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgICAgICBiYXooKCkgPT4gdGhpcyk7XG4gICAgfVxufVxuXG52YXIgb2JqID0ge1xuICAgIGZvbzogZnVuY3Rpb24gZm9vKCkge1xuICAgICAgICAvLyBPSywgdGhpcyBpcyBpbiBhIG1ldGhvZCAodGhpcyBmdW5jdGlvbiBpcyBvbiBvYmplY3QgbGl0ZXJhbCkuXG4gICAgICAgIHRoaXMuYSA9IDA7XG4gICAgfVxufTtcblxudmFyIG9iaiA9IHtcbiAgICBmb28oKSB7XG4gICAgICAgIC8vIE9LLCB0aGlzIGlzIGluIGEgbWV0aG9kICh0aGlzIGZ1bmN0aW9uIGlzIG9uIG9iamVjdCBsaXRlcmFsKS5cbiAgICAgICAgdGhpcy5hID0gMDtcbiAgICB9XG59O1xuXG52YXIgb2JqID0ge1xuICAgIGdldCBmb28oKSB7XG4gICAgICAgIC8vIE9LLCB0aGlzIGlzIGluIGEgbWV0aG9kICh0aGlzIGZ1bmN0aW9uIGlzIG9uIG9iamVjdCBsaXRlcmFsKS5cbiAgICAgICAgcmV0dXJuIHRoaXMuYTtcbiAgICB9XG59O1xuXG52YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7XG4gICAgZm9vOiB7dmFsdWU6IGZ1bmN0aW9uIGZvbygpIHtcbiAgICAgICAgLy8gT0ssIHRoaXMgaXMgaW4gYSBtZXRob2QgKHRoaXMgZnVuY3Rpb24gaXMgb24gb2JqZWN0IGxpdGVyYWwpLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgIH19XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgXCJmb29cIiwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiBmb28oKSB7XG4gICAgICAgIC8vIE9LLCB0aGlzIGlzIGluIGEgbWV0aG9kICh0aGlzIGZ1bmN0aW9uIGlzIG9uIG9iamVjdCBsaXRlcmFsKS5cbiAgICAgICAgdGhpcy5hID0gMDtcbiAgICB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCB7XG4gICAgZm9vOiB7dmFsdWU6IGZ1bmN0aW9uIGZvbygpIHtcbiAgICAgICAgLy8gT0ssIHRoaXMgaXMgaW4gYSBtZXRob2QgKHRoaXMgZnVuY3Rpb24gaXMgb24gb2JqZWN0IGxpdGVyYWwpLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgIH19XG59KTtcblxuZnVuY3Rpb24gRm9vKCkge1xuICAgIHRoaXMuZm9vID0gZnVuY3Rpb24gZm9vKCkge1xuICAgICAgICAvLyBPSywgdGhpcyBpcyBpbiBhIG1ldGhvZCAodGhpcyBmdW5jdGlvbiBhc3NpZ25zIHRvIGEgcHJvcGVydHkpLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgICAgICBiYXooKCkgPT4gdGhpcyk7XG4gICAgfTtcbn1cblxub2JqLmZvbyA9IGZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBPSywgdGhpcyBpcyBpbiBhIG1ldGhvZCAodGhpcyBmdW5jdGlvbiBhc3NpZ25zIHRvIGEgcHJvcGVydHkpLlxuICAgIHRoaXMuYSA9IDA7XG59O1xuXG5Gb28ucHJvdG90eXBlLmZvbyA9IGZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBPSywgdGhpcyBpcyBpbiBhIG1ldGhvZCAodGhpcyBmdW5jdGlvbiBhc3NpZ25zIHRvIGEgcHJvcGVydHkpLlxuICAgIHRoaXMuYSA9IDA7XG59O1xuXG5jbGFzcyBCYXoge1xuXG4gICAgLy8gT0ssIHRoaXMgaXMgaW4gYSBjbGFzcyBmaWVsZCBpbml0aWFsaXplci5cbiAgICBhID0gdGhpcy5iO1xuXG4gICAgLy8gT0ssIHN0YXRpYyBpbml0aWFsaXplcnMgYWxzbyBoYXZlIHZhbGlkIHRoaXMuXG4gICAgc3RhdGljIGEgPSB0aGlzLmI7XG5cbiAgICBmb28oKSB7XG4gICAgICAgIC8vIE9LLCB0aGlzIGlzIGluIGEgbWV0aG9kLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgICAgICBiYXooKCkgPT4gdGhpcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvbygpIHtcbiAgICAgICAgLy8gT0ssIHRoaXMgaXMgaW4gYSBtZXRob2QgKHN0YXRpYyBtZXRob2RzIGFsc28gaGF2ZSB2YWxpZCB0aGlzKS5cbiAgICAgICAgdGhpcy5hID0gMDtcbiAgICAgICAgYmF6KCgpID0+IHRoaXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIC8vIE9LLCBzdGF0aWMgYmxvY2tzIGFsc28gaGF2ZSB2YWxpZCB0aGlzLlxuICAgICAgICB0aGlzLmEgPSAwO1xuICAgICAgICBiYXooKCkgPT4gdGhpcyk7XG4gICAgfVxufVxuXG52YXIgZm9vID0gKGZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBPSywgdGhlIGBiaW5kYCBtZXRob2Qgb2YgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZGlyZWN0bHkuXG4gICAgdGhpcy5hID0gMDtcbn0pLmJpbmQob2JqKTtcblxuZm9vLmZvckVhY2goZnVuY3Rpb24oKSB7XG4gICAgLy8gT0ssIGB0aGlzQXJnYCBvZiBgLmZvckVhY2goKWAgaXMgZ2l2ZW4uXG4gICAgdGhpcy5hID0gMDtcbiAgICBiYXooKCkgPT4gdGhpcyk7XG59LCB0aGlzQXJnKTtcblxuLyoqIEB0aGlzIEZvbyAqL1xuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIE9LLCB0aGlzIGZ1bmN0aW9uIGhhcyBhIGBAdGhpc2AgdGFnIGluIGl0cyBKU0RvYyBjb21tZW50LlxuICAgIHRoaXMuYSA9IDA7XG59In0=)\n\n``` language-js\n/*eslint no-invalid-this: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\nthis.a = 0;\nbaz(() => this);\n\nfunction Foo() {\n    // OK, this is in a legacy style constructor.\n    this.a = 0;\n    baz(() => this);\n}\n\nclass Bar {\n    constructor() {\n        // OK, this is in a constructor.\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nvar obj = {\n    foo: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nvar obj = {\n    foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nvar obj = {\n    get foo() {\n        // OK, this is in a method (this function is on object literal).\n        return this.a;\n    }\n};\n\nvar obj = Object.create(null, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nObject.defineProperty(obj, \"foo\", {\n    value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n});\n\nObject.defineProperties(obj, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nfunction Foo() {\n    this.foo = function foo() {\n        // OK, this is in a method (this function assigns to a property).\n        this.a = 0;\n        baz(() => this);\n    };\n}\n\nobj.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nFoo.prototype.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nclass Baz {\n\n    // OK, this is in a class field initializer.\n    a = this.b;\n\n    // OK, static initializers also have valid this.\n    static a = this.b;\n\n    foo() {\n        // OK, this is in a method.\n        this.a = 0;\n        baz(() => this);\n    }\n\n    static foo() {\n        // OK, this is in a method (static methods also have valid this).\n        this.a = 0;\n        baz(() => this);\n    }\n\n    static {\n        // OK, static blocks also have valid this.\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nvar foo = (function foo() {\n    // OK, the `bind` method of this function is called directly.\n    this.a = 0;\n}).bind(obj);\n\nfoo.forEach(function() {\n    // OK, `thisArg` of `.forEach()` is given.\n    this.a = 0;\n    baz(() => this);\n}, thisArg);\n\n/** @this Foo */\nfunction foo() {\n    // OK, this function has a `@this` tag in its JSDoc comment.\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option, with one option:\n\n- `\"capIsConstructor\": false` (default `true`) disables the assumption that a function which name starts with an uppercase is a constructor.\n\n### capIsConstructor\n\nBy default, this rule always allows the use of `this` in functions which name starts with an uppercase and anonymous functions that are assigned to a variable which name starts with an uppercase, assuming that those functions are used as constructor functions.\n\nSet `\"capIsConstructor\"` to `false` if you want those functions to be treated as ‘regular’ functions.\n\nExamples of **incorrect** code for this rule with `\"capIsConstructor\"` option set to `false`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtdGhpczogW1wiZXJyb3JcIiwgeyBcImNhcElzQ29uc3RydWN0b3JcIjogZmFsc2UgfV0qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRm9vKCkge1xuICAgIHRoaXMuYSA9IDA7XG59XG5cbnZhciBiYXIgPSBmdW5jdGlvbiBGb28oKSB7XG4gICAgdGhpcy5hID0gMDtcbn1cblxudmFyIEJhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYSA9IDA7XG59O1xuXG5CYXogPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmEgPSAwO1xufTsifQ==)\n\n``` language-js\n/*eslint no-invalid-this: [\"error\", { \"capIsConstructor\": false }]*/\n\n\"use strict\";\n\nfunction Foo() {\n    this.a = 0;\n}\n\nvar bar = function Foo() {\n    this.a = 0;\n}\n\nvar Bar = function() {\n    this.a = 0;\n};\n\nBaz = function() {\n    this.a = 0;\n};\n```\n\nExamples of **correct** code for this rule with `\"capIsConstructor\"` option set to `false`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWludmFsaWQtdGhpczogW1wiZXJyb3JcIiwgeyBcImNhcElzQ29uc3RydWN0b3JcIjogZmFsc2UgfV0qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxub2JqLkZvbyA9IGZ1bmN0aW9uIEZvbygpIHtcbiAgICAvLyBPSywgdGhpcyBpcyBpbiBhIG1ldGhvZC5cbiAgICB0aGlzLmEgPSAwO1xufTsifQ==)\n\n``` language-js\n/*eslint no-invalid-this: [\"error\", { \"capIsConstructor\": false }]*/\n\n\"use strict\";\n\nobj.Foo = function Foo() {\n    // OK, this is in a method.\n    this.a = 0;\n};\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about usage of `this` keyword outside of classes or class-like objects, you can safely disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\nNote that, technically, TypeScript will only catch this if you have the `strict` or `noImplicitThis` flags enabled. These are enabled in most TypeScript projects, since they are considered to be best practice.\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-invalid-this.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-invalid-this.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-invalid-this](https://eslint.org/docs/latest/rules/no-invalid-this)"
- name: no-irregular-whitespace
  id: rules/no-irregular-whitespace
  summary: Invalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces
  description: "# no-irregular-whitespace\n\nDisallow irregular whitespace\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-irregular-whitespace../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [skipStrings](#skipstrings)\n    2.  [skipComments](#skipcomments)\n    3.  [skipRegExps](#skipregexps)\n    4.  [skipTemplates](#skiptemplates)\n    5.  [skipJSXText](#skipjsxtext)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nInvalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces.\n\nVarious whitespace characters can be inputted by programmers by mistake for example from copying or keyboard shortcuts. Pressing Alt + Space on macOS adds in a non breaking space character for example.\n\nA simple fix for this problem could be to rewrite the offending line from scratch. This might also be a problem introduced by the text editor: if rewriting the line does not fix it, try using a different editor.\n\nKnown issues these spaces cause:\n\n- Ogham Space Mark\n  - Is a valid token separator, but is rendered as a visible glyph in most typefaces, which may be misleading in source code.\n- Mongolian Vowel Separator\n  - Is no longer considered a space separator since Unicode 6.3. It will result in a syntax error in current parsers when used in place of a regular token separator.\n- Line Separator and Paragraph Separator\n  - These have always been valid whitespace characters and line terminators, but were considered illegal in string literals prior to ECMAScript 2019.\n- Zero Width Space\n  - Is NOT considered a separator for tokens and is often parsed as an `Unexpected token ILLEGAL`.\n  - Is NOT shown in modern browsers making code repository software expected to resolve the visualization.\n\nIn JSON, none of the characters listed as irregular whitespace by this rule may appear outside of a string.\n\n## Rule Details\n\nThis rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.\n\nThis rule disallows the following characters except where the options allow:\n\n``` language-text\n\\u000B - Line Tabulation (\\v) - <VT>\n\\u000C - Form Feed (\\f) - <FF>\n\\u00A0 - No-Break Space - <NBSP>\n\\u0085 - Next Line\n\\u1680 - Ogham Space Mark\n\\u180E - Mongolian Vowel Separator - <MVS>\n\\ufeff - Zero Width No-Break Space - <BOM>\n\\u2000 - En Quad\n\\u2001 - Em Quad\n\\u2002 - En Space - <ENSP>\n\\u2003 - Em Space - <EMSP>\n\\u2004 - Three-Per-Em\n\\u2005 - Four-Per-Em\n\\u2006 - Six-Per-Em\n\\u2007 - Figure Space\n\\u2008 - Punctuation Space - <PUNCSP>\n\\u2009 - Thin Space\n\\u200A - Hair Space\n\\u200B - Zero Width Space - <ZWSP>\n\\u2028 - Line Separator\n\\u2029 - Paragraph Separator\n\\u202F - Narrow No-Break Space\n\\u205f - Medium Mathematical Space\n\\u3000 - Ideographic Space\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n- `\"skipStrings\": true` (default) allows any whitespace characters in string literals\n- `\"skipComments\": true` allows any whitespace characters in comments\n- `\"skipRegExps\": true` allows any whitespace characters in regular expression literals\n- `\"skipTemplates\": true` allows any whitespace characters in template literals\n- `\"skipJSXText\": true` allows any whitespace characters in JSX text\n\n### skipStrings\n\nExamples of **incorrect** code for this rule with the default `{ \"skipStrings\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlycmVndWxhci13aGl0ZXNwYWNlOiBcImVycm9yXCIqL1xuXG52YXIgdGhpbmcgPSBmdW5jdGlvbigpwqAvKjxOQlNQPiove1xuICAgIHJldHVybiAndGVzdCc7XG59XG5cbnZhciB0aGluZyA9IGZ1bmN0aW9uKMKgLyo8TkJTUD4qLyl7XG4gICAgcmV0dXJuICd0ZXN0Jztcbn1cblxudmFyIHRoaW5nID0gZnVuY3Rpb27CoC8qPE5CU1A+Ki8oKXtcbiAgICByZXR1cm4gJ3Rlc3QnO1xufVxuXG52YXIgdGhpbmcgPSBmdW5jdGlvbuGagC8qPE9naGFtIFNwYWNlIE1hcms+Ki8oKXtcbiAgICByZXR1cm4gJ3Rlc3QnO1xufVxuXG52YXIgdGhpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3Rlc3QnO+KAgi8qPEVOU1A+Ki9cbn1cblxudmFyIHRoaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICd0ZXN0JzvCoC8qPE5CU1A+Ki9cbn1cblxudmFyIHRoaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gRGVzY3JpcHRpb27CoDxOQlNQPjogc29tZSBkZXNjcmlwdGl2ZSB0ZXh0XG59XG5cbi8qXG5EZXNjcmlwdGlvbsKgPE5CU1A+OiBzb21lIGRlc2NyaXB0aXZlIHRleHRcbiovXG5cbnZhciB0aGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAvwqA8TkJTUD5yZWdleHAvO1xufVxuXG4vKmVzbGludC1lbnYgZXM2Ki9cbnZhciB0aGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBgdGVtcGxhdGXigII8TkJTUD5zdHJpbmdgO1xufSJ9)\n\n``` language-js\n/*eslint no-irregular-whitespace: \"error\"*/\n\nvar thing = function() /*<NBSP>*/{\n    return 'test';\n}\n\nvar thing = function( /*<NBSP>*/){\n    return 'test';\n}\n\nvar thing = function /*<NBSP>*/(){\n    return 'test';\n}\n\nvar thing = function /*<Ogham Space Mark>*/(){\n    return 'test';\n}\n\nvar thing = function() {\n    return 'test'; /*<ENSP>*/\n}\n\nvar thing = function() {\n    return 'test'; /*<NBSP>*/\n}\n\nvar thing = function() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n\nvar thing = function() {\n    return / <NBSP>regexp/;\n}\n\n/*eslint-env es6*/\nvar thing = function() {\n    return `template <NBSP>string`;\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"skipStrings\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlycmVndWxhci13aGl0ZXNwYWNlOiBcImVycm9yXCIqL1xuXG52YXIgdGhpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ8KgPE5CU1A+dGhpbmcnO1xufVxuXG52YXIgdGhpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ+KAizxaV1NQPnRoaW5nJztcbn1cblxudmFyIHRoaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICd0aMKgPE5CU1A+aW5nJztcbn0ifQ==)\n\n``` language-js\n/*eslint no-irregular-whitespace: \"error\"*/\n\nvar thing = function() {\n    return ' <NBSP>thing';\n}\n\nvar thing = function() {\n    return '​<ZWSP>thing';\n}\n\nvar thing = function() {\n    return 'th <NBSP>ing';\n}\n```\n\n### skipComments\n\nExamples of additional **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlycmVndWxhci13aGl0ZXNwYWNlOiBbXCJlcnJvclwiLCB7IFwic2tpcENvbW1lbnRzXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiB0aGluZygpIHtcbiAgICAvLyBEZXNjcmlwdGlvbsKgPE5CU1A+OiBzb21lIGRlc2NyaXB0aXZlIHRleHRcbn1cblxuLypcbkRlc2NyaXB0aW9uwqA8TkJTUD46IHNvbWUgZGVzY3JpcHRpdmUgdGV4dFxuKi8ifQ==)\n\n``` language-js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipComments\": true }]*/\n\nfunction thing() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n```\n\n### skipRegExps\n\nExamples of additional **correct** code for this rule with the `{ \"skipRegExps\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlycmVndWxhci13aGl0ZXNwYWNlOiBbXCJlcnJvclwiLCB7IFwic2tpcFJlZ0V4cHNcIjogdHJ1ZSB9XSovXG5cbmZ1bmN0aW9uIHRoaW5nKCkge1xuICAgIHJldHVybiAvwqA8TkJTUD5yZWdleHAvO1xufSJ9)\n\n``` language-js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipRegExps\": true }]*/\n\nfunction thing() {\n    return / <NBSP>regexp/;\n}\n```\n\n### skipTemplates\n\nExamples of additional **correct** code for this rule with the `{ \"skipTemplates\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWlycmVndWxhci13aGl0ZXNwYWNlOiBbXCJlcnJvclwiLCB7IFwic2tpcFRlbXBsYXRlc1wiOiB0cnVlIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiB0aGluZygpIHtcbiAgICByZXR1cm4gYHRlbXBsYXRl4oCCPE5CU1A+c3RyaW5nYDtcbn0ifQ==)\n\n``` language-js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipTemplates\": true }]*/\n/*eslint-env es6*/\n\nfunction thing() {\n    return `template <NBSP>string`;\n}\n```\n\n### skipJSXText\n\nExamples of additional **correct** code for this rule with the `{ \"skipJSXText\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBuby1pcnJlZ3VsYXItd2hpdGVzcGFjZTogW1wiZXJyb3JcIiwgeyBcInNraXBKU1hUZXh0XCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIFRoaW5nKCkge1xuICAgIHJldHVybiA8ZGl2PnRleHQgaW7igIJKU1g8L2Rpdj47IC8vIDxOQlNQPiBiZWZvcmUgYEpTWGBcbn0ifQ==)\n\n``` language-jsx\n/*eslint no-irregular-whitespace: [\"error\", { \"skipJSXText\": true }]*/\n/*eslint-env es6*/\n\nfunction Thing() {\n    return <div>text in JSX</div>; // <NBSP> before `JSX`\n}\n```\n\n## When Not To Use It\n\nIf you decide that you wish to use whitespace other than tabs and spaces outside of strings in your application.\n\n## Version\n\nThis rule was introduced in ESLint v0.9.0.\n\n## Further Reading\n\n[Annotated ES5](https://es5.github.io/#x7.2)  \n\n[JSON: The JavaScript subset that isn’t - Timeless](https://web.archive.org/web/20200414142829/http://timelessrepo.com/json-isnt-a-javascript-subset)  \n\n[U+1680 OGHAM SPACE MARK: – Unicode – Codepoints](https://codepoints.net/U+1680)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-irregular-whitespace.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-irregular-whitespace.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-irregular-whitespace](https://eslint.org/docs/latest/rules/no-irregular-whitespace)"
- name: no-iterator
  id: rules/no-iterator
  summary: The __iterator__ property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript’s for in and for each constructs
  description: "# no-iterator\n\nDisallow the use of the `__iterator__` property\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Further Reading](#further-reading)\n4.  [Resources](#resources)\n\nThe `__iterator__` property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript’s `for in` and `for each` constructs. However, this property is now obsolete, so it should not be used. Here’s an example of how this used to work:\n\n``` language-js\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n```\n\nYou should use ECMAScript 6 iterators and generators instead.\n\n## Rule Details\n\nThis rule is aimed at preventing errors that may arise from using the `__iterator__` property, which is not implemented in several browsers. As such, it will warn whenever it encounters the `__iterator__` property.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWl0ZXJhdG9yOiBcImVycm9yXCIqL1xuXG5Gb28ucHJvdG90eXBlLl9faXRlcmF0b3JfXyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRm9vSXRlcmF0b3IodGhpcyk7XG59O1xuXG5mb28uX19pdGVyYXRvcl9fID0gZnVuY3Rpb24gKCkge307XG5cbmZvb1tcIl9faXRlcmF0b3JfX1wiXSA9IGZ1bmN0aW9uICgpIHt9O1xuIn0=)\n\n``` language-js\n/*eslint no-iterator: \"error\"*/\n\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n};\n\nfoo.__iterator__ = function () {};\n\nfoo[\"__iterator__\"] = function () {};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWl0ZXJhdG9yOiBcImVycm9yXCIqL1xuXG52YXIgX19pdGVyYXRvcl9fID0gZm9vOyAvLyBOb3QgdXNpbmcgdGhlIGBfX2l0ZXJhdG9yX19gIHByb3BlcnR5LiJ9)\n\n``` language-js\n/*eslint no-iterator: \"error\"*/\n\nvar __iterator__ = foo; // Not using the `__iterator__` property.\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[Iterators and generators - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)  \n\n[null](https://kangax.github.io/es5-compat-table/es6/#Iterators)  \n\n[Deprecated and obsolete features - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#Object_methods)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-iterator.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-iterator.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-iterator](https://eslint.org/docs/latest/rules/no-iterator)"
- name: no-label-var
  id: rules/no-label-var
  summary: This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope
  description: "# no-label-var\n\nDisallow labels that share a name with a variable\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\n## Rule Details\n\nThis rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsLXZhcjogXCJlcnJvclwiKi9cblxudmFyIHggPSBmb287XG5mdW5jdGlvbiBiYXIoKSB7XG54OlxuICBmb3IgKDs7KSB7XG4gICAgYnJlYWsgeDtcbiAgfVxufSJ9)\n\n``` language-js\n/*eslint no-label-var: \"error\"*/\n\nvar x = foo;\nfunction bar() {\nx:\n  for (;;) {\n    break x;\n  }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsLXZhcjogXCJlcnJvclwiKi9cblxuLy8gVGhlIHZhcmlhYmxlIHRoYXQgaGFzIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGxhYmVsIGlzIG5vdCBpbiBzY29wZS5cblxuZnVuY3Rpb24gZm9vKCkge1xuICB2YXIgcSA9IHQ7XG59XG5cbmZ1bmN0aW9uIGJhcigpIHtcbnE6XG4gIGZvcig7Oykge1xuICAgIGJyZWFrIHE7XG4gIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-label-var: \"error\"*/\n\n// The variable that has the same name as the label is not in scope.\n\nfunction foo() {\n  var q = t;\n}\n\nfunction bar() {\nq:\n  for(;;) {\n    break q;\n  }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about usage of labels, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [no-extra-label](no-extra-label)\n- [no-labels](no-labels)\n- [no-unused-labels](no-unused-labels)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-label-var.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-label-var.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-label-var](https://eslint.org/docs/latest/rules/no-label-var)"
- name: no-labels
  id: rules/no-labels
  summary: Labeled statements in JavaScript are used in conjunction with break and continue to control flow around multiple loops
  description: "# no-labels\n\nDisallow labeled statements\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowLoop](#allowloop)\n    2.  [allowSwitch](#allowswitch)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nLabeled statements in JavaScript are used in conjunction with `break` and `continue` to control flow around multiple loops. For example:\n\n``` language-js\nouter:\n    while (true) {\n\n        while (true) {\n            break outer;\n        }\n    }\n```\n\nThe `break outer` statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the `outer` label was applied. If this statement was changed to be just `break`, control would flow back to the outer `while` statement and an infinite loop would result.\n\nWhile convenient in some cases, labels tend to be used only rarely and are frowned upon by some as a remedial form of flow control that is more error prone and harder to understand.\n\n## Rule Details\n\nThis rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever `break` or `continue` are used with a label.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsczogXCJlcnJvclwiKi9cblxubGFiZWw6XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG5cbmxhYmVsOlxuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgYnJlYWsgbGFiZWw7XG4gICAgfVxuXG5sYWJlbDpcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlIGxhYmVsO1xuICAgIH1cblxubGFiZWw6XG4gICAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSAwOlxuICAgICAgICBicmVhayBsYWJlbDtcbiAgICB9XG5cbmxhYmVsOlxuICAgIHtcbiAgICAgICAgYnJlYWsgbGFiZWw7XG4gICAgfVxuXG5sYWJlbDpcbiAgICBpZiAoYSkge1xuICAgICAgICBicmVhayBsYWJlbDtcbiAgICB9In0=)\n\n``` language-js\n/*eslint no-labels: \"error\"*/\n\nlabel:\n    while(true) {\n        // ...\n    }\n\nlabel:\n    while(true) {\n        break label;\n    }\n\nlabel:\n    while(true) {\n        continue label;\n    }\n\nlabel:\n    switch (a) {\n    case 0:\n        break label;\n    }\n\nlabel:\n    {\n        break label;\n    }\n\nlabel:\n    if (a) {\n        break label;\n    }\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsczogXCJlcnJvclwiKi9cblxudmFyIGYgPSB7XG4gICAgbGFiZWw6IFwiZm9vXCJcbn07XG5cbndoaWxlICh0cnVlKSB7XG4gICAgYnJlYWs7XG59XG5cbndoaWxlICh0cnVlKSB7XG4gICAgY29udGludWU7XG59In0=)\n\n``` language-js\n/*eslint no-labels: \"error\"*/\n\nvar f = {\n    label: \"foo\"\n};\n\nwhile (true) {\n    break;\n}\n\nwhile (true) {\n    continue;\n}\n```\n\n## Options\n\nThe options allow labels with loop or switch statements:\n\n- `\"allowLoop\"` (`boolean`, default is `false`) - If this option was set `true`, this rule ignores labels which are sticking to loop statements.\n- `\"allowSwitch\"` (`boolean`, default is `false`) - If this option was set `true`, this rule ignores labels which are sticking to switch statements.\n\nActually labeled statements in JavaScript can be used with other than loop and switch statements. However, this way is ultra rare, not well-known, so this would be confusing developers.\n\n### allowLoop\n\nExamples of **correct** code for the `{ \"allowLoop\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsczogW1wiZXJyb3JcIiwgeyBcImFsbG93TG9vcFwiOiB0cnVlIH1dKi9cblxubGFiZWw6XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgYnJlYWsgbGFiZWw7XG4gICAgfSJ9)\n\n``` language-js\n/*eslint no-labels: [\"error\", { \"allowLoop\": true }]*/\n\nlabel:\n    while (true) {\n        break label;\n    }\n```\n\n### allowSwitch\n\nExamples of **correct** code for the `{ \"allowSwitch\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxhYmVsczogW1wiZXJyb3JcIiwgeyBcImFsbG93U3dpdGNoXCI6IHRydWUgfV0qL1xuXG5sYWJlbDpcbiAgICBzd2l0Y2ggKGEpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgYnJlYWsgbGFiZWw7XG4gICAgfSJ9)\n\n``` language-js\n/*eslint no-labels: [\"error\", { \"allowSwitch\": true }]*/\n\nlabel:\n    switch (a) {\n        case 0:\n            break label;\n    }\n```\n\n## When Not To Use It\n\nIf you need to use labeled statements everywhere, then you can safely disable this rule.\n\n## Related Rules\n\n- [no-extra-label](no-extra-label)\n- [no-label-var](no-label-var)\n- [no-unused-labels](no-unused-labels)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-labels.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-labels.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-labels](https://eslint.org/docs/latest/rules/no-labels)"
- name: no-lone-blocks
  id: rules/no-lone-blocks
  summary: In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use
  description: "# no-lone-blocks\n\nDisallow unnecessary nested blocks\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nIn JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use. For example, these curly braces do nothing to `foo`:\n\n``` language-js\n{\n    var foo = bar();\n}\n```\n\nIn ES6, code blocks may create a new scope if a block-level binding (`let` and `const`), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.\n\n## Rule Details\n\nThis rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvbmUtYmxvY2tzOiBcImVycm9yXCIqL1xuXG57fVxuXG5pZiAoZm9vKSB7XG4gICAgYmFyKCk7XG4gICAge1xuICAgICAgICBiYXooKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJhcigpIHtcbiAgICB7XG4gICAgICAgIGJheigpO1xuICAgIH1cbn1cblxue1xuICAgIGZ1bmN0aW9uIGZvbygpIHt9XG59XG5cbntcbiAgICBhTGFiZWw6IHtcbiAgICB9XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvbygpO1xuICAgICAgICB9XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-lone-blocks: \"error\"*/\n\n{}\n\nif (foo) {\n    bar();\n    {\n        baz();\n    }\n}\n\nfunction bar() {\n    {\n        baz();\n    }\n}\n\n{\n    function foo() {}\n}\n\n{\n    aLabel: {\n    }\n}\n\nclass C {\n    static {\n        {\n            foo();\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with ES6 environment:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvbmUtYmxvY2tzOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbndoaWxlIChmb28pIHtcbiAgICBiYXIoKTtcbn1cblxuaWYgKGZvbykge1xuICAgIGlmIChiYXIpIHtcbiAgICAgICAgYmF6KCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiYXIoKSB7XG4gICAgYmF6KCk7XG59XG5cbntcbiAgICBsZXQgeCA9IDE7XG59XG5cbntcbiAgICBjb25zdCB5ID0gMTtcbn1cblxue1xuICAgIGNsYXNzIEZvbyB7fVxufVxuXG5hTGFiZWw6IHtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgbGJsOiB7XG4gICAgICAgICAgICBpZiAoc29tZXRoaW5nKSB7XG4gICAgICAgICAgICAgICAgYnJlYWsgbGJsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb28oKTtcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-lone-blocks: \"error\"*/\n/*eslint-env es6*/\n\nwhile (foo) {\n    bar();\n}\n\nif (foo) {\n    if (bar) {\n        baz();\n    }\n}\n\nfunction bar() {\n    baz();\n}\n\n{\n    let x = 1;\n}\n\n{\n    const y = 1;\n}\n\n{\n    class Foo {}\n}\n\naLabel: {\n}\n\nclass C {\n    static {\n        lbl: {\n            if (something) {\n                break lbl;\n            }\n\n            foo();\n        }\n    }\n}\n```\n\nExamples of **correct** code for this rule with ES6 environment and strict mode via `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration or `\"use strict\"` directive in the code:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvbmUtYmxvY2tzOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cblwidXNlIHN0cmljdFwiO1xuXG57XG4gICAgZnVuY3Rpb24gZm9vKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-lone-blocks: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\n{\n    function foo() {}\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-lone-blocks.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-lone-blocks.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-lone-blocks](https://eslint.org/docs/latest/rules/no-lone-blocks)"
- name: no-lonely-if
  id: rules/no-lonely-if
  summary: If an if statement is the only statement in the else block, it is often clearer to use an else if form
  description: "# no-lonely-if\n\nDisallow `if` statements as the only statement in `else` blocks\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-lonely-if../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIf an `if` statement is the only statement in the `else` block, it is often clearer to use an `else if` form.\n\n``` language-js\nif (foo) {\n    // ...\n} else {\n    if (bar) {\n        // ...\n    }\n}\n```\n\nshould be rewritten as\n\n``` language-js\nif (foo) {\n    // ...\n} else if (bar) {\n    // ...\n}\n```\n\n## Rule Details\n\nThis rule disallows `if` statements as the only statement in `else` blocks.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvbmVseS1pZjogXCJlcnJvclwiKi9cblxuaWYgKGNvbmRpdGlvbikge1xuICAgIC8vIC4uLlxufSBlbHNlIHtcbiAgICBpZiAoYW5vdGhlckNvbmRpdGlvbikge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59XG5cbmlmIChjb25kaXRpb24pIHtcbiAgICAvLyAuLi5cbn0gZWxzZSB7XG4gICAgaWYgKGFub3RoZXJDb25kaXRpb24pIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    } else {\n        // ...\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvbmVseS1pZjogXCJlcnJvclwiKi9cblxuaWYgKGNvbmRpdGlvbikge1xuICAgIC8vIC4uLlxufSBlbHNlIGlmIChhbm90aGVyQ29uZGl0aW9uKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmIChjb25kaXRpb24pIHtcbiAgICAvLyAuLi5cbn0gZWxzZSBpZiAoYW5vdGhlckNvbmRpdGlvbikge1xuICAgIC8vIC4uLlxufSBlbHNlIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGNvbmRpdGlvbikge1xuICAgIC8vIC4uLlxufSBlbHNlIHtcbiAgICBpZiAoYW5vdGhlckNvbmRpdGlvbikge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG4gICAgZG9Tb21ldGhpbmcoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n} else {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n    doSomething();\n}\n```\n\n## When Not To Use It\n\nDisable this rule if the code is clearer without requiring the `else if` form.\n\n## Version\n\nThis rule was introduced in ESLint v0.6.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-lonely-if.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-lonely-if.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-lonely-if](https://eslint.org/docs/latest/rules/no-lonely-if)"
- name: no-loop-func
  id: rules/no-loop-func
  summary: Writing functions within loops tends to result in errors due to the way the function creates a closure around the loop
  description: "# no-loop-func\n\nDisallow function declarations that contain unsafe references inside loop statements\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nWriting functions within loops tends to result in errors due to the way the function creates a closure around the loop. For example:\n\n``` language-js\nfor (var i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of `i` in the scope.\n\n`let` or `const` mitigate this problem.\n\n``` language-js\n/*eslint-env es6*/\n\nfor (let i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, each function created within the loop returns a different number as expected.\n\n## Rule Details\n\nThis error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.\n\nThis rule disallows any function within a loop that contains unsafe references (e.g. to modified variables from the outer scope).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvb3AtZnVuYzogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mb3IgKHZhciBpPTEwOyBpOyBpLS0pIHtcbiAgICAoZnVuY3Rpb24oKSB7IHJldHVybiBpOyB9KSgpO1xufVxuXG52YXIgaSA9IDA7XG53aGlsZShpIDwgNSkge1xuICAgIHZhciBhID0gZnVuY3Rpb24oKSB7IHJldHVybiBpOyB9O1xuICAgIGEoKTtcblxuICAgIGkrKztcbn1cblxudmFyIGkgPSAwO1xuZG8ge1xuICAgIGZ1bmN0aW9uIGEoKSB7IHJldHVybiBpOyB9O1xuICAgIGEoKTtcblxuICAgIGkrK1xufSB3aGlsZSAoaSA8IDUpO1xuXG5sZXQgZm9vID0gMDtcbmZvciAobGV0IGkgPSAwOyBpIDwgMTA7ICsraSkge1xuICAgIC8vQmFkLCBgZm9vYCBpcyBub3QgaW4gdGhlIGxvb3AtYmxvY2sncyBzY29wZSBhbmQgYGZvb2AgaXMgbW9kaWZpZWQgaW4vYWZ0ZXIgdGhlIGxvb3BcbiAgICBzZXRUaW1lb3V0KCgpID0+IGNvbnNvbGUubG9nKGZvbykpO1xuICAgIGZvbyArPSAxO1xufVxuXG5mb3IgKGxldCBpID0gMDsgaSA8IDEwOyArK2kpIHtcbiAgICAvL0JhZCwgYGZvb2AgaXMgbm90IGluIHRoZSBsb29wLWJsb2NrJ3Mgc2NvcGUgYW5kIGBmb29gIGlzIG1vZGlmaWVkIGluL2FmdGVyIHRoZSBsb29wXG4gICAgc2V0VGltZW91dCgoKSA9PiBjb25zb2xlLmxvZyhmb28pKTtcbn1cbmZvbyA9IDEwMDsifQ==)\n\n``` language-js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nfor (var i=10; i; i--) {\n    (function() { return i; })();\n}\n\nvar i = 0;\nwhile(i < 5) {\n    var a = function() { return i; };\n    a();\n\n    i++;\n}\n\nvar i = 0;\ndo {\n    function a() { return i; };\n    a();\n\n    i++\n} while (i < 5);\n\nlet foo = 0;\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n    foo += 1;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n}\nfoo = 100;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvb3AtZnVuYzogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSA9IGZ1bmN0aW9uKCkge307XG5cbmZvciAodmFyIGk9MTA7IGk7IGktLSkge1xuICAgIGEoKTtcbn1cblxuZm9yICh2YXIgaT0xMDsgaTsgaS0tKSB7XG4gICAgdmFyIGEgPSBmdW5jdGlvbigpIHt9OyAvLyBPSywgbm8gcmVmZXJlbmNlcyB0byB2YXJpYWJsZXMgaW4gdGhlIG91dGVyIHNjb3Blcy5cbiAgICBhKCk7XG59XG5cbmZvciAobGV0IGk9MTA7IGk7IGktLSkge1xuICAgIHZhciBhID0gZnVuY3Rpb24oKSB7IHJldHVybiBpOyB9OyAvLyBPSywgYWxsIHJlZmVyZW5jZXMgYXJlIHJlZmVycmluZyB0byBibG9jayBzY29wZWQgdmFyaWFibGVzIGluIHRoZSBsb29wLlxuICAgIGEoKTtcbn1cblxudmFyIGZvbyA9IDEwMDtcbmZvciAobGV0IGk9MTA7IGk7IGktLSkge1xuICAgIHZhciBhID0gZnVuY3Rpb24oKSB7IHJldHVybiBmb287IH07IC8vIE9LLCBhbGwgcmVmZXJlbmNlcyBhcmUgcmVmZXJyaW5nIHRvIG5ldmVyIG1vZGlmaWVkIHZhcmlhYmxlcy5cbiAgICBhKCk7XG59XG4vLy4uLiBubyBtb2RpZmljYXRpb25zIG9mIGZvbyBhZnRlciB0aGlzIGxvb3AgLi4uIn0=)\n\n``` language-js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nvar a = function() {};\n\nfor (var i=10; i; i--) {\n    a();\n}\n\nfor (var i=10; i; i--) {\n    var a = function() {}; // OK, no references to variables in the outer scopes.\n    a();\n}\n\nfor (let i=10; i; i--) {\n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop.\n    a();\n}\n\nvar foo = 100;\nfor (let i=10; i; i--) {\n    var a = function() { return foo; }; // OK, all references are referring to never modified variables.\n    a();\n}\n//... no modifications of foo after this loop ...\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-loop-func.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-loop-func.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-loop-func](https://eslint.org/docs/latest/rules/no-loop-func)"
- name: no-loss-of-precision
  id: rules/no-loss-of-precision
  summary: This rule would disallow the use of number literals that lose precision at runtime when converted to a JS Number due to 64-bit floating-point rounding
  description: "# no-loss-of-precision\n\nDisallow literal numbers that lose precision\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-loss-of-precision../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThis rule would disallow the use of number literals that lose precision at runtime when converted to a JS `Number` due to 64-bit floating-point rounding.\n\n## Rule Details\n\nIn JS, `Number`s are stored as double-precision floating-point numbers according to the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_754). Because of this, numbers can only retain accuracy up to a certain amount of digits. If the programmer enters additional digits, those digits will be lost in the conversion to the `Number` type and will result in unexpected behavior.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvc3Mtb2YtcHJlY2lzaW9uOiBcImVycm9yXCIqL1xuXG5jb25zdCBhID0gOTAwNzE5OTI1NDc0MDk5M1xuY29uc3QgYiA9IDUxMjMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFcbmNvbnN0IGMgPSAxMjMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLjBcbmNvbnN0IGQgPSAuMTIzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFxuY29uc3QgZSA9IDBYMjAwMDAwMDAwMDAwMDFcbmNvbnN0IGYgPSAwWDJfMDAwMDAwMDAwXzAwMDE7In0=)\n\n``` language-js\n/*eslint no-loss-of-precision: \"error\"*/\n\nconst a = 9007199254740993\nconst b = 5123000000000000000000000000001\nconst c = 1230000000000000000000000.0\nconst d = .1230000000000000000000000\nconst e = 0X20000000000001\nconst f = 0X2_000000000_0001;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLWxvc3Mtb2YtcHJlY2lzaW9uOiBcImVycm9yXCIqL1xuXG5jb25zdCBhID0gMTIzNDVcbmNvbnN0IGIgPSAxMjMuNDU2XG5jb25zdCBjID0gMTIzZTM0XG5jb25zdCBkID0gMTIzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcbmNvbnN0IGUgPSAweDFGRkZGRkZGRkZGRkZGXG5jb25zdCBmID0gOTAwNzE5OTI1NDc0MDk5MVxuY29uc3QgZyA9IDkwMDdfMTk5MjU0NzQwOV85MSJ9)\n\n``` language-js\n/*eslint no-loss-of-precision: \"error\"*/\n\nconst a = 12345\nconst b = 123.456\nconst c = 123e34\nconst d = 12300000000000000000000000\nconst e = 0x1FFFFFFFFFFFFF\nconst f = 9007199254740991\nconst g = 9007_1992547409_91\n```\n\n## Version\n\nThis rule was introduced in ESLint v7.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-loss-of-precision.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-loss-of-precision.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-loss-of-precision](https://eslint.org/docs/latest/rules/no-loss-of-precision)"
- name: no-magic-numbers
  id: rules/no-magic-numbers
  summary: ‘Magic numbers’ are numbers that occur multiple times in code without an explicit meaning
  description: "# no-magic-numbers\n\nDisallow magic numbers\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [ignore](#ignore)\n    2.  [ignoreArrayIndexes](#ignorearrayindexes)\n    3.  [ignoreDefaultValues](#ignoredefaultvalues)\n    4.  [ignoreClassFieldInitialValues](#ignoreclassfieldinitialvalues)\n    5.  [enforceConst](#enforceconst)\n    6.  [detectObjects](#detectobjects)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\n‘Magic numbers’ are numbers that occur multiple times in code without an explicit meaning. They should preferably be replaced by named constants.\n\n``` language-js\nvar now = Date.now(),\n    inOneHour = now + (60 * 60 * 1000);\n```\n\n## Rule Details\n\nThe `no-magic-numbers` rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFwiZXJyb3JcIiovXG5cbnZhciBkdXR5RnJlZVByaWNlID0gMTAwLFxuICAgIGZpbmFsUHJpY2UgPSBkdXR5RnJlZVByaWNlICsgKGR1dHlGcmVlUHJpY2UgKiAwLjI1KTsifQ==)\n\n``` language-js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * 0.25);\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFwiZXJyb3JcIiovXG5cbnZhciBkYXRhID0gWydmb28nLCAnYmFyJywgJ2JheiddO1xuXG52YXIgZGF0YUxhc3QgPSBkYXRhWzJdOyJ9)\n\n``` language-js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar data = ['foo', 'bar', 'baz'];\n\nvar dataLast = data[2];\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFwiZXJyb3JcIiovXG5cbnZhciBTRUNPTkRTO1xuXG5TRUNPTkRTID0gNjA7In0=)\n\n``` language-js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar SECONDS;\n\nSECONDS = 60;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFwiZXJyb3JcIiovXG5cbnZhciBUQVggPSAwLjI1O1xuXG52YXIgZHV0eUZyZWVQcmljZSA9IDEwMCxcbiAgICBmaW5hbFByaWNlID0gZHV0eUZyZWVQcmljZSArIChkdXR5RnJlZVByaWNlICogVEFYKTsifQ==)\n\n``` language-js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar TAX = 0.25;\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n```\n\n## Options\n\n### ignore\n\nAn array of numbers to ignore. It’s set to `[]` by default. If provided, it must be an `Array`.\n\nThe array can contain values of `number` and `string` types. If it’s a string, the text must be parsed as `bigint` literal (e.g., `\"100n\"`).\n\nExamples of **correct** code for the sample `{ \"ignore\": [1] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzFdIH1dKi9cblxudmFyIGRhdGEgPSBbJ2ZvbycsICdiYXInLCAnYmF6J107XG52YXIgZGF0YUxhc3QgPSBkYXRhLmxlbmd0aCAmJiBkYXRhW2RhdGEubGVuZ3RoIC0gMV07In0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [1] }]*/\n\nvar data = ['foo', 'bar', 'baz'];\nvar dataLast = data.length && data[data.length - 1];\n```\n\nExamples of **correct** code for the sample `{ \"ignore\": [\"1n\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogW1wiMW5cIl0gfV0qL1xuXG5mb28oMW4pOyJ9)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [\"1n\"] }]*/\n\nfoo(1n);\n```\n\n### ignoreArrayIndexes\n\nA boolean to specify if numbers used in the context of array indexes (e.g., `data[2]`) are considered okay. `false` by default.\n\nThis option allows only valid array indexes: numbers that will be coerced to one of `\"0\"`, `\"1\"`, `\"2\"` … `\"4294967294\"`.\n\nArrays are objects, so they can have property names such as `\"-1\"` or `\"2.5\"`. However, those are just “normal” object properties that don’t represent array elements. They don’t influence the array’s `length`, and they are ignored by array methods like `.map` or `.forEach`.\n\nAdditionally, since the maximum [array length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) is 2³² - 1, all values above 2³² - 2 also represent just normal property names and are thus not considered to be array indexes.\n\nExamples of **correct** code for the `{ \"ignoreArrayIndexes\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVBcnJheUluZGV4ZXNcIjogdHJ1ZSB9XSovXG5cbnZhciBpdGVtID0gZGF0YVsyXTtcblxuZGF0YVsxMDBdID0gYTtcblxuZihkYXRhWzBdKTtcblxuYSA9IGRhdGFbLTBdOyAvLyBzYW1lIGFzIGRhdGFbMF0sIC0wIHdpbGwgYmUgY29lcmNlZCB0byBcIjBcIlxuXG5hID0gZGF0YVsweEFCXTtcblxuYSA9IGRhdGFbNS42ZTFdO1xuXG5hID0gZGF0YVsxMG5dOyAvLyBzYW1lIGFzIGRhdGFbMTBdLCAxMG4gd2lsbCBiZSBjb2VyY2VkIHRvIFwiMTBcIlxuXG5hID0gZGF0YVs0Mjk0OTY3Mjk0XTsgLy8gbWF4IGFycmF5IGluZGV4In0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreArrayIndexes\": true }]*/\n\nvar item = data[2];\n\ndata[100] = a;\n\nf(data[0]);\n\na = data[-0]; // same as data[0], -0 will be coerced to \"0\"\n\na = data[0xAB];\n\na = data[5.6e1];\n\na = data[10n]; // same as data[10], 10n will be coerced to \"10\"\n\na = data[4294967294]; // max array index\n```\n\nExamples of **incorrect** code for the `{ \"ignoreArrayIndexes\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVBcnJheUluZGV4ZXNcIjogdHJ1ZSB9XSovXG5cbmYoMik7IC8vIG5vdCB1c2VkIGFzIGFycmF5IGluZGV4XG5cbmEgPSBkYXRhWy0xXTtcblxuYSA9IGRhdGFbMi41XTtcblxuYSA9IGRhdGFbNS42N2UxXTtcblxuYSA9IGRhdGFbLTEwbl07XG5cbmEgPSBkYXRhWzQyOTQ5NjcyOTVdOyAvLyBhYm92ZSB0aGUgbWF4IGFycmF5IGluZGV4XG5cbmEgPSBkYXRhWzFlNTAwXTsgLy8gc2FtZSBhcyBkYXRhW1wiSW5maW5pdHlcIl0ifQ==)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreArrayIndexes\": true }]*/\n\nf(2); // not used as array index\n\na = data[-1];\n\na = data[2.5];\n\na = data[5.67e1];\n\na = data[-10n];\n\na = data[4294967295]; // above the max array index\n\na = data[1e500]; // same as data[\"Infinity\"]\n```\n\n### ignoreDefaultValues\n\nA boolean to specify if numbers used in default value assignments are considered okay. `false` by default.\n\nExamples of **correct** code for the `{ \"ignoreDefaultValues\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVEZWZhdWx0VmFsdWVzXCI6IHRydWUgfV0qL1xuXG5jb25zdCB7IHRheCA9IDAuMjUgfSA9IGFjY291bnRhbmN5O1xuXG5mdW5jdGlvbiBtYXBQYXJhbGxlbChjb25jdXJyZW5jeSA9IDMpIHsgLyoqKi8gfSJ9)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreDefaultValues\": true }]*/\n\nconst { tax = 0.25 } = accountancy;\n\nfunction mapParallel(concurrency = 3) { /***/ }\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVEZWZhdWx0VmFsdWVzXCI6IHRydWUgfV0qL1xuXG5sZXQgaGVhZDtcbltoZWFkID0gMTAwXSA9IFtdIn0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreDefaultValues\": true }]*/\n\nlet head;\n[head = 100] = []\n```\n\n### ignoreClassFieldInitialValues\n\nA boolean to specify if numbers used as initial values of class fields are considered okay. `false` by default.\n\nExamples of **correct** code for the `{ \"ignoreClassFieldInitialValues\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVDbGFzc0ZpZWxkSW5pdGlhbFZhbHVlc1wiOiB0cnVlIH1dKi9cblxuY2xhc3MgQyB7XG4gICAgZm9vID0gMjtcbiAgICBiYXIgPSAtMztcbiAgICAjYmF6ID0gNDtcbiAgICBzdGF0aWMgcXV4ID0gNTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreClassFieldInitialValues\": true }]*/\n\nclass C {\n    foo = 2;\n    bar = -3;\n    #baz = 4;\n    static qux = 5;\n}\n```\n\nExamples of **incorrect** code for the `{ \"ignoreClassFieldInitialValues\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVDbGFzc0ZpZWxkSW5pdGlhbFZhbHVlc1wiOiB0cnVlIH1dKi9cblxuY2xhc3MgQyB7XG4gICAgZm9vID0gMiArIDM7XG59XG5cbmNsYXNzIEQge1xuICAgIDI7XG59In0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreClassFieldInitialValues\": true }]*/\n\nclass C {\n    foo = 2 + 3;\n}\n\nclass D {\n    2;\n}\n```\n\n### enforceConst\n\nA boolean to specify if we should check for the const keyword in variable declaration of numbers. `false` by default.\n\nExamples of **incorrect** code for the `{ \"enforceConst\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlQ29uc3RcIjogdHJ1ZSB9XSovXG5cbnZhciBUQVggPSAwLjI1O1xuXG52YXIgZHV0eUZyZWVQcmljZSA9IDEwMCxcbiAgICBmaW5hbFByaWNlID0gZHV0eUZyZWVQcmljZSArIChkdXR5RnJlZVByaWNlICogVEFYKTsifQ==)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"enforceConst\": true }]*/\n\nvar TAX = 0.25;\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n```\n\n### detectObjects\n\nA boolean to specify if we should detect numbers when setting object properties for example. `false` by default.\n\nExamples of **incorrect** code for the `{ \"detectObjects\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJkZXRlY3RPYmplY3RzXCI6IHRydWUgfV0qL1xuXG52YXIgbWFnaWMgPSB7XG4gIHRheDogMC4yNVxufTtcblxudmFyIGR1dHlGcmVlUHJpY2UgPSAxMDAsXG4gICAgZmluYWxQcmljZSA9IGR1dHlGcmVlUHJpY2UgKyAoZHV0eUZyZWVQcmljZSAqIG1hZ2ljLnRheCk7In0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"detectObjects\": true }]*/\n\nvar magic = {\n  tax: 0.25\n};\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * magic.tax);\n```\n\nExamples of **correct** code for the `{ \"detectObjects\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJkZXRlY3RPYmplY3RzXCI6IHRydWUgfV0qL1xuXG52YXIgVEFYID0gMC4yNTtcblxudmFyIG1hZ2ljID0ge1xuICB0YXg6IFRBWFxufTtcblxudmFyIGR1dHlGcmVlUHJpY2UgPSAxMDAsXG4gICAgZmluYWxQcmljZSA9IGR1dHlGcmVlUHJpY2UgKyAoZHV0eUZyZWVQcmljZSAqIG1hZ2ljLnRheCk7In0=)\n\n``` language-js\n/*eslint no-magic-numbers: [\"error\", { \"detectObjects\": true }]*/\n\nvar TAX = 0.25;\n\nvar magic = {\n  tax: TAX\n};\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * magic.tax);\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.7.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-magic-numbers.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-magic-numbers.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-magic-numbers](https://eslint.org/docs/latest/rules/no-magic-numbers)"
- name: no-misleading-character-class
  id: rules/no-misleading-character-class
  summary: Unicode includes the characters which are made with multiple code points
  description: "# no-misleading-character-class\n\nDisallow characters which are made with multiple code points in character class syntax\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-misleading-character-class../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-misleading-character-class../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nUnicode includes the characters which are made with multiple code points. RegExp character class syntax (`/[abc]/`) cannot handle characters which are made by multiple code points as a character; those characters will be dissolved to each code point. For example, `❇️` is made by `❇` (`U+2747`) and VARIATION SELECTOR-16 (`U+FE0F`). If this character is in RegExp character class, it will match to either `❇` (`U+2747`) or VARIATION SELECTOR-16 (`U+FE0F`) rather than `❇️`.\n\nThis rule reports the regular expressions which include multiple code point characters in character class syntax. This rule considers the following characters as multiple code point characters.\n\n**A character with combining characters:**\n\nThe combining characters are characters which belong to one of `Mc`, `Me`, and `Mn` [Unicode general categories](http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category).\n\n``` language-js\n/^[Á]$/u.test(\"Á\"); //→ false\n/^[❇️]$/u.test(\"❇️\"); //→ false\n```\n\n**A character with Emoji modifiers:**\n\n``` language-js\n/^[👶🏻]$/u.test(\"👶🏻\"); //→ false\n/^[👶🏽]$/u.test(\"👶🏽\"); //→ false\n```\n\n**A pair of regional indicator symbols:**\n\n``` language-js\n/^[🇯🇵]$/u.test(\"🇯🇵\"); //→ false\n```\n\n**Characters that ZWJ joins:**\n\n``` language-js\n/^[👨‍👩‍👦]$/u.test(\"👨‍👩‍👦\"); //→ false\n```\n\n**A surrogate pair without Unicode flag:**\n\n``` language-js\n/^[👍]$/.test(\"👍\"); //→ false\n\n// Surrogate pair is OK if with u flag.\n/^[👍]$/u.test(\"👍\"); //→ true\n```\n\n## Rule Details\n\nThis rule reports the regular expressions which include multiple code point characters in character class syntax.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1pc2xlYWRpbmctY2hhcmFjdGVyLWNsYXNzOiBlcnJvciAqL1xuXG4vXltBzIFdJC91O1xuL15b4p2H77iPXSQvdTtcbi9eW/Cfkbbwn4+7XSQvdTtcbi9eW/Cfh6/wn4e1XSQvdTtcbi9eW/CfkajigI3wn5Gp4oCN8J+Rpl0kL3U7XG4vXlvwn5GNXSQvOyJ9)\n\n``` language-js\n/*eslint no-misleading-character-class: error */\n\n/^[Á]$/u;\n/^[❇️]$/u;\n/^[👶🏻]$/u;\n/^[🇯🇵]$/u;\n/^[👨‍👩‍👦]$/u;\n/^[👍]$/;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW1pc2xlYWRpbmctY2hhcmFjdGVyLWNsYXNzOiBlcnJvciAqL1xuXG4vXlthYmNdJC87XG4vXlvwn5GNXSQvdTtcbi9eW1xccXvwn5G28J+Pu31dJC92OyJ9)\n\n``` language-js\n/*eslint no-misleading-character-class: error */\n\n/^[abc]$/;\n/^[👍]$/u;\n/^[\\q{👶🏻}]$/v;\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you don’t want to check RegExp character class syntax for multiple code point characters.\n\n## Version\n\nThis rule was introduced in ESLint v5.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-misleading-character-class.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-misleading-character-class.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-misleading-character-class](https://eslint.org/docs/latest/rules/no-misleading-character-class)"
- name: no-multi-assign
  id: rules/no-multi-assign
  summary: Chaining the assignment of variables can lead to unexpected results and be difficult to read
  description: "# no-multi-assign\n\nDisallow use of chained assignment expressions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [ignoreNonDeclaration](#ignorenondeclaration)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nChaining the assignment of variables can lead to unexpected results and be difficult to read.\n\n``` language-js\n(function() {\n    const foo = bar = 0; // Did you mean `foo = bar == 0`?\n    bar = 1;             // This will not fail since `bar` is not constant.\n})();\nconsole.log(bar);        // This will output 1 since `bar` is not scoped.\n```\n\n## Rule Details\n\nThis rule disallows using multiple assignments within a single statement.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLWFzc2lnbjogXCJlcnJvclwiKi9cblxudmFyIGEgPSBiID0gYyA9IDU7XG5cbmNvbnN0IGZvbyA9IGJhciA9IFwiYmF6XCI7XG5cbmxldCBkID1cbiAgICBlID1cbiAgICBmO1xuXG5jbGFzcyBGb28ge1xuICAgIGEgPSBiID0gMTA7XG59XG5cbmEgPSBiID0gXCJxdXV4XCI7In0=)\n\n``` language-js\n/*eslint no-multi-assign: \"error\"*/\n\nvar a = b = c = 5;\n\nconst foo = bar = \"baz\";\n\nlet d =\n    e =\n    f;\n\nclass Foo {\n    a = b = 10;\n}\n\na = b = \"quux\";\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLWFzc2lnbjogXCJlcnJvclwiKi9cblxudmFyIGEgPSA1O1xudmFyIGIgPSA1O1xudmFyIGMgPSA1O1xuXG5jb25zdCBmb28gPSBcImJhelwiO1xuY29uc3QgYmFyID0gXCJiYXpcIjtcblxubGV0IGQgPSBjO1xubGV0IGUgPSBjO1xuXG5jbGFzcyBGb28ge1xuICAgIGEgPSAxMDtcbiAgICBiID0gMTA7XG59XG5cbmEgPSBcInF1dXhcIjtcbmIgPSBcInF1dXhcIjsifQ==)\n\n``` language-js\n/*eslint no-multi-assign: \"error\"*/\n\nvar a = 5;\nvar b = 5;\nvar c = 5;\n\nconst foo = \"baz\";\nconst bar = \"baz\";\n\nlet d = c;\nlet e = c;\n\nclass Foo {\n    a = 10;\n    b = 10;\n}\n\na = \"quux\";\nb = \"quux\";\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"ignoreNonDeclaration\"`: When set to `true`, the rule allows chains that don’t include initializing a variable in a declaration or initializing a class field. Default is `false`.\n\n### ignoreNonDeclaration\n\nExamples of **correct** code for the `{ \"ignoreNonDeclaration\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLWFzc2lnbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU5vbkRlY2xhcmF0aW9uXCI6IHRydWUgfV0qL1xuXG5sZXQgYTtcbmxldCBiO1xuYSA9IGIgPSBcImJhelwiO1xuXG5jb25zdCB4ID0ge307XG5jb25zdCB5ID0ge307XG54Lm9uZSA9IHkub25lID0gMTsifQ==)\n\n``` language-js\n/*eslint no-multi-assign: [\"error\", { \"ignoreNonDeclaration\": true }]*/\n\nlet a;\nlet b;\na = b = \"baz\";\n\nconst x = {};\nconst y = {};\nx.one = y.one = 1;\n```\n\nExamples of **incorrect** code for the `{ \"ignoreNonDeclaration\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLWFzc2lnbjogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU5vbkRlY2xhcmF0aW9uXCI6IHRydWUgfV0qL1xuXG5sZXQgYSA9IGIgPSBcImJhelwiO1xuXG5jb25zdCBmb28gPSBiYXIgPSAxO1xuXG5jbGFzcyBGb28ge1xuICAgIGEgPSBiID0gMTA7XG59In0=)\n\n``` language-js\n/*eslint no-multi-assign: [\"error\", { \"ignoreNonDeclaration\": true }]*/\n\nlet a = b = \"baz\";\n\nconst foo = bar = 1;\n\nclass Foo {\n    a = b = 10;\n}\n```\n\n## Related Rules\n\n- [max-statements-per-line](max-statements-per-line)\n\n## Version\n\nThis rule was introduced in ESLint v3.14.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-multi-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-multi-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-multi-assign](https://eslint.org/docs/latest/rules/no-multi-assign)"
- name: no-multi-str
  id: rules/no-multi-str
  summary: Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later
  description: "# no-multi-str\n\nDisallow multiline strings\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nIt’s possible to create multiline strings in JavaScript by using a slash before a newline, such as:\n\n``` language-js\nvar x = \"Line 1 \\\n         Line 2\";\n```\n\nSome consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.\n\n## Rule Details\n\nThis rule is aimed at preventing the use of multiline strings.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLXN0cjogXCJlcnJvclwiKi9cblxudmFyIHggPSBcInNvbWUgdmVyeSBcXFxubG9uZyB0ZXh0XCI7In0=)\n\n``` language-js\n/*eslint no-multi-str: \"error\"*/\n\nvar x = \"some very \\\nlong text\";\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW11bHRpLXN0cjogXCJlcnJvclwiKi9cblxudmFyIHggPSBcInNvbWUgdmVyeSBsb25nIHRleHRcIjtcblxudmFyIHggPSBcInNvbWUgdmVyeSBcIiArXG4gICAgICAgIFwibG9uZyB0ZXh0XCI7In0=)\n\n``` language-js\n/*eslint no-multi-str: \"error\"*/\n\nvar x = \"some very long text\";\n\nvar x = \"some very \" +\n        \"long text\";\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-multi-str.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-multi-str.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-multi-str](https://eslint.org/docs/latest/rules/no-multi-str)"
- name: no-negated-condition
  id: rules/no-negated-condition
  summary: Negated conditions are more difficult to understand
  description: "# no-negated-condition\n\nDisallow negated conditions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nNegated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.\n\n## Rule Details\n\nThis rule disallows negated conditions in either of the following:\n\n- `if` statements which have an `else` branch\n- ternary expressions\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5lZ2F0ZWQtY29uZGl0aW9uOiBcImVycm9yXCIqL1xuXG5pZiAoIWEpIHtcbiAgICBkb1NvbWV0aGluZygpO1xufSBlbHNlIHtcbiAgICBkb1NvbWV0aGluZ0Vsc2UoKTtcbn1cblxuaWYgKGEgIT0gYikge1xuICAgIGRvU29tZXRoaW5nKCk7XG59IGVsc2Uge1xuICAgIGRvU29tZXRoaW5nRWxzZSgpO1xufVxuXG5pZiAoYSAhPT0gYikge1xuICAgIGRvU29tZXRoaW5nKCk7XG59IGVsc2Uge1xuICAgIGRvU29tZXRoaW5nRWxzZSgpO1xufVxuXG4hYSA/IGMgOiBiIn0=)\n\n``` language-js\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a != b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a !== b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\n!a ? c : b\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5lZ2F0ZWQtY29uZGl0aW9uOiBcImVycm9yXCIqL1xuXG5pZiAoIWEpIHtcbiAgICBkb1NvbWV0aGluZygpO1xufVxuXG5pZiAoIWEpIHtcbiAgICBkb1NvbWV0aGluZygpO1xufSBlbHNlIGlmIChiKSB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbn1cblxuaWYgKGEgIT0gYikge1xuICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbmEgPyBiIDogYyJ9)\n\n``` language-js\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n}\n\nif (!a) {\n    doSomething();\n} else if (b) {\n    doSomething();\n}\n\nif (a != b) {\n    doSomething();\n}\n\na ? b : c\n```\n\n## Version\n\nThis rule was introduced in ESLint v1.6.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-negated-condition.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-negated-condition.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-negated-condition](https://eslint.org/docs/latest/rules/no-negated-condition)"
- name: no-nested-ternary
  id: rules/no-nested-ternary
  summary: Nesting ternary expressions can make code more difficult to understand
  description: "# no-nested-ternary\n\nDisallow nested ternary expressions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nNesting ternary expressions can make code more difficult to understand.\n\n``` language-js\nvar foo = bar ? baz : qux === quxx ? bing : bam;\n```\n\n## Rule Details\n\nThe `no-nested-ternary` rule disallows nested ternary expressions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiBcImVycm9yXCIqL1xuXG52YXIgdGhpbmcgPSBmb28gPyBiYXIgOiBiYXogPT09IHF1eCA/IHF1eHggOiBmb29iYXI7XG5cbmZvbyA/IGJheiA9PT0gcXV4ID8gcXV4eCgpIDogZm9vYmFyKCkgOiBiYXIoKTsifQ==)\n\n``` language-js\n/*eslint no-nested-ternary: \"error\"*/\n\nvar thing = foo ? bar : baz === qux ? quxx : foobar;\n\nfoo ? baz === qux ? quxx() : foobar() : bar();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiBcImVycm9yXCIqL1xuXG52YXIgdGhpbmcgPSBmb28gPyBiYXIgOiBmb29iYXI7XG5cbnZhciB0aGluZztcblxuaWYgKGZvbykge1xuICB0aGluZyA9IGJhcjtcbn0gZWxzZSBpZiAoYmF6ID09PSBxdXgpIHtcbiAgdGhpbmcgPSBxdXh4O1xufSBlbHNlIHtcbiAgdGhpbmcgPSBmb29iYXI7XG59In0=)\n\n``` language-js\n/*eslint no-nested-ternary: \"error\"*/\n\nvar thing = foo ? bar : foobar;\n\nvar thing;\n\nif (foo) {\n  thing = bar;\n} else if (baz === qux) {\n  thing = quxx;\n} else {\n  thing = foobar;\n}\n```\n\n## Related Rules\n\n- [no-ternary](no-ternary)\n- [no-unneeded-ternary](no-unneeded-ternary)\n\n## Version\n\nThis rule was introduced in ESLint v0.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-nested-ternary.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-nested-ternary.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-nested-ternary](https://eslint.org/docs/latest/rules/no-nested-ternary)"
- name: no-new
  id: rules/no-new
  summary: In this case, the created object is thrown away because its reference isn’t stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn’t require new to be used
  description: "# no-new\n\nDisallow `new` operators outside of assignments or comparisons\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThe goal of using `new` with a constructor is typically to create an object of a particular type and store that object in a variable, such as:\n\n``` language-js\nvar person = new Person();\n```\n\nIt’s less common to use `new` and not store the result, such as:\n\n``` language-js\nnew Person();\n```\n\nIn this case, the created object is thrown away because its reference isn’t stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn’t require `new` to be used.\n\n## Rule Details\n\nThis rule is aimed at maintaining consistency and convention by disallowing constructor calls using the `new` keyword that do not assign the resulting object to a variable.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldzogXCJlcnJvclwiKi9cblxubmV3IFRoaW5nKCk7In0=)\n\n``` language-js\n/*eslint no-new: \"error\"*/\n\nnew Thing();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldzogXCJlcnJvclwiKi9cblxudmFyIHRoaW5nID0gbmV3IFRoaW5nKCk7XG5cbkZvbygpOyJ9)\n\n``` language-js\n/*eslint no-new: \"error\"*/\n\nvar thing = new Thing();\n\nFoo();\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-new.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-new.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-new](https://eslint.org/docs/latest/rules/no-new)"
- name: no-new-func
  id: rules/no-new-func
  summary: This is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions
  description: "# no-new-func\n\nDisallow `new` operators with the `Function` object\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIt’s possible to create functions in JavaScript from strings at runtime using the `Function` constructor, such as:\n\n``` language-js\nvar x = new Function(\"a\", \"b\", \"return a + b\");\nvar x = Function(\"a\", \"b\", \"return a + b\");\nvar x = Function.call(null, \"a\", \"b\", \"return a + b\");\nvar x = Function.apply(null, [\"a\", \"b\", \"return a + b\"]);\nvar x = Function.bind(null, \"a\", \"b\", \"return a + b\")();\n```\n\nThis is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions. In addition, Content-Security-Policy (CSP) directives may disallow the use of eval() and similar methods for creating code from strings.\n\n## Rule Details\n\nThis error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the `eval` function.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1mdW5jOiBcImVycm9yXCIqL1xuXG52YXIgeCA9IG5ldyBGdW5jdGlvbihcImFcIiwgXCJiXCIsIFwicmV0dXJuIGEgKyBiXCIpO1xudmFyIHggPSBGdW5jdGlvbihcImFcIiwgXCJiXCIsIFwicmV0dXJuIGEgKyBiXCIpO1xudmFyIHggPSBGdW5jdGlvbi5jYWxsKG51bGwsIFwiYVwiLCBcImJcIiwgXCJyZXR1cm4gYSArIGJcIik7XG52YXIgeCA9IEZ1bmN0aW9uLmFwcGx5KG51bGwsIFtcImFcIiwgXCJiXCIsIFwicmV0dXJuIGEgKyBiXCJdKTtcbnZhciB4ID0gRnVuY3Rpb24uYmluZChudWxsLCBcImFcIiwgXCJiXCIsIFwicmV0dXJuIGEgKyBiXCIpKCk7XG52YXIgZiA9IEZ1bmN0aW9uLmJpbmQobnVsbCwgXCJhXCIsIFwiYlwiLCBcInJldHVybiBhICsgYlwiKTsgLy8gYXNzdW1pbmcgdGhhdCB0aGUgcmVzdWx0IG9mIEZ1bmN0aW9uLmJpbmQoLi4uKSB3aWxsIGJlIGV2ZW50dWFsbHkgY2FsbGVkLiJ9)\n\n``` language-js\n/*eslint no-new-func: \"error\"*/\n\nvar x = new Function(\"a\", \"b\", \"return a + b\");\nvar x = Function(\"a\", \"b\", \"return a + b\");\nvar x = Function.call(null, \"a\", \"b\", \"return a + b\");\nvar x = Function.apply(null, [\"a\", \"b\", \"return a + b\"]);\nvar x = Function.bind(null, \"a\", \"b\", \"return a + b\")();\nvar f = Function.bind(null, \"a\", \"b\", \"return a + b\"); // assuming that the result of Function.bind(...) will be eventually called.\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1mdW5jOiBcImVycm9yXCIqL1xuXG52YXIgeCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgKyBiO1xufTsifQ==)\n\n``` language-js\n/*eslint no-new-func: \"error\"*/\n\nvar x = function (a, b) {\n    return a + b;\n};\n```\n\n## When Not To Use It\n\nIn more advanced cases where you really need to use the `Function` constructor.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-new-func.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-new-func.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-new-func](https://eslint.org/docs/latest/rules/no-new-func)"
- name: no-new-native-nonconstructor
  id: rules/no-new-native-nonconstructor
  summary: It is a convention in JavaScript that global variables beginning with an uppercase letter typically represent classes that can be instantiated using the new operator, such as new Array and new Map
  description: "# no-new-native-nonconstructor\n\nDisallow `new` operators with global non-constructor functions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nIt is a convention in JavaScript that global variables beginning with an uppercase letter typically represent classes that can be instantiated using the `new` operator, such as `new Array` and `new Map`. Confusingly, JavaScript also provides some global variables that begin with an uppercase letter that cannot be called using the `new` operator and will throw an error if you attempt to do so. These are typically functions that are related to data types and are easy to mistake for classes. Consider the following example:\n\n``` language-js\n// throws a TypeError\nlet foo = new Symbol(\"foo\");\n\n// throws a TypeError\nlet result = new BigInt(9007199254740991);\n```\n\nBoth `new Symbol` and `new BigInt` throw a type error because they are functions and not classes. It is easy to make this mistake by assuming the uppercase letters indicate classes.\n\n## Rule Details\n\nThis rule is aimed at preventing the accidental calling of native JavaScript global functions with the `new` operator. These functions are:\n\n- `Symbol`\n- `BigInt`\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1uYXRpdmUtbm9uY29uc3RydWN0b3I6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXMyMDIyKi9cblxudmFyIGZvbyA9IG5ldyBTeW1ib2woJ2ZvbycpO1xudmFyIGJhciA9IG5ldyBCaWdJbnQoOTAwNzE5OTI1NDc0MDk5MSk7In0=)\n\n``` language-js\n/*eslint no-new-native-nonconstructor: \"error\"*/\n/*eslint-env es2022*/\n\nvar foo = new Symbol('foo');\nvar bar = new BigInt(9007199254740991);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1uYXRpdmUtbm9uY29uc3RydWN0b3I6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXMyMDIyKi9cblxudmFyIGZvbyA9IFN5bWJvbCgnZm9vJyk7XG52YXIgYmFyID0gQmlnSW50KDkwMDcxOTkyNTQ3NDA5OTEpO1xuXG4vLyBJZ25vcmVzIHNoYWRvd2VkIFN5bWJvbC5cbmZ1bmN0aW9uIGJheihTeW1ib2wpIHtcbiAgICBjb25zdCBxdXggPSBuZXcgU3ltYm9sKFwiYmF6XCIpO1xufVxuZnVuY3Rpb24gcXV1eChCaWdJbnQpIHtcbiAgICBjb25zdCBjb3JnZSA9IG5ldyBCaWdJbnQoOTAwNzE5OTI1NDc0MDk5MSk7XG59XG4ifQ==)\n\n``` language-js\n/*eslint no-new-native-nonconstructor: \"error\"*/\n/*eslint-env es2022*/\n\nvar foo = Symbol('foo');\nvar bar = BigInt(9007199254740991);\n\n// Ignores shadowed Symbol.\nfunction baz(Symbol) {\n    const qux = new Symbol(\"baz\");\n}\nfunction quux(BigInt) {\n    const corge = new BigInt(9007199254740991);\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\n## Related Rules\n\n- [no-obj-calls](no-obj-calls)\n\n## Version\n\nThis rule was introduced in ESLint v8.27.0.\n\n## Further Reading\n\n[ECMAScript® 2023 Language Specification](https://tc39.es/ecma262/#sec-symbol-constructor)  \n\n[ECMAScript® 2023 Language Specification](https://tc39.es/ecma262/#sec-bigint-constructor)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-new-native-nonconstructor.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-new-native-nonconstructor.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-new-native-nonconstructor](https://eslint.org/docs/latest/rules/no-new-native-nonconstructor)"
- name: no-new-symbol
  id: rules/no-new-symbol
  summary: Symbol is not intended to be used with the new operator, but to be called as a function
  description: "# no-new-symbol\n\nDisallow `new` operators with the `Symbol` object\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-new-symbol../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\n`Symbol` is not intended to be used with the `new` operator, but to be called as a function.\n\n``` language-js\nvar foo = new Symbol(\"foo\");\n```\n\nThis throws a `TypeError` exception.\n\n## Rule Details\n\nThis rule is aimed at preventing the accidental calling of `Symbol` with the `new` operator.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1zeW1ib2w6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIGZvbyA9IG5ldyBTeW1ib2woJ2ZvbycpOyJ9)\n\n``` language-js\n/*eslint no-new-symbol: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = new Symbol('foo');\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy1zeW1ib2w6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIGZvbyA9IFN5bWJvbCgnZm9vJyk7XG5cbi8vIElnbm9yZXMgc2hhZG93ZWQgU3ltYm9sLlxuZnVuY3Rpb24gYmFyKFN5bWJvbCkge1xuICAgIGNvbnN0IGJheiA9IG5ldyBTeW1ib2woXCJiYXpcIik7XG59XG4ifQ==)\n\n``` language-js\n/*eslint no-new-symbol: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol('foo');\n\n// Ignores shadowed Symbol.\nfunction bar(Symbol) {\n    const baz = new Symbol(\"baz\");\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-beta.1.\n\n## Further Reading\n\n[ECMAScript 2015 Language Specification – ECMA-262 6th Edition](https://www.ecma-international.org/ecma-262/6.0/#sec-symbol-objects)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-new-symbol.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-new-symbol.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-new-symbol](https://eslint.org/docs/latest/rules/no-new-symbol)"
- name: no-new-wrappers
  id: rules/no-new-wrappers
  summary: 'There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean'
  description: "# no-new-wrappers\n\nDisallow `new` operators with the `String`, `Number`, and `Boolean` objects\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThere are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors `String`, `Number`, and `Boolean`, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:\n\n``` language-js\nvar text = \"Hello world\".substring(2);\n```\n\nBehind the scenes in this example, a `String` object is constructed. The `substring()` method exists on `String.prototype` and so is accessible to the string instance.\n\nIt’s also possible to manually create a new wrapper instance:\n\n``` language-js\nvar stringObject = new String(\"Hello world\");\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);\n```\n\nAlthough possible, there aren’t any good reasons to use these primitive wrappers as constructors. They tend to confuse other developers more than anything else because they seem like they should act as primitives, but they do not. For example:\n\n``` language-js\nvar stringObject = new String(\"Hello world\");\nconsole.log(typeof stringObject);       // \"object\"\n\nvar text = \"Hello world\";\nconsole.log(typeof text);               // \"string\"\n\nvar booleanObject = new Boolean(false);\nif (booleanObject) {    // all objects are truthy!\n    console.log(\"This executes\");\n}\n```\n\nThe first problem is that primitive wrapper objects are, in fact, objects. That means `typeof` will return `\"object\"` instead of `\"string\"`, `\"number\"`, or `\"boolean\"`. The second problem comes with boolean objects. Every object is truthy, that means an instance of `Boolean` always resolves to `true` even when its actual value is `false`.\n\nFor these reasons, it’s considered a best practice to avoid using primitive wrapper types with `new`.\n\n## Rule Details\n\nThis rule aims to eliminate the use of `String`, `Number`, and `Boolean` with the `new` operator. As such, it warns whenever it sees `new String`, `new Number`, or `new Boolean`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy13cmFwcGVyczogXCJlcnJvclwiKi9cblxudmFyIHN0cmluZ09iamVjdCA9IG5ldyBTdHJpbmcoXCJIZWxsbyB3b3JsZFwiKTtcbnZhciBudW1iZXJPYmplY3QgPSBuZXcgTnVtYmVyKDMzKTtcbnZhciBib29sZWFuT2JqZWN0ID0gbmV3IEJvb2xlYW4oZmFsc2UpO1xuXG52YXIgc3RyaW5nT2JqZWN0ID0gbmV3IFN0cmluZztcbnZhciBudW1iZXJPYmplY3QgPSBuZXcgTnVtYmVyO1xudmFyIGJvb2xlYW5PYmplY3QgPSBuZXcgQm9vbGVhbjsifQ==)\n\n``` language-js\n/*eslint no-new-wrappers: \"error\"*/\n\nvar stringObject = new String(\"Hello world\");\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);\n\nvar stringObject = new String;\nvar numberObject = new Number;\nvar booleanObject = new Boolean;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5ldy13cmFwcGVyczogXCJlcnJvclwiKi9cblxudmFyIHRleHQgPSBTdHJpbmcoc29tZVZhbHVlKTtcbnZhciBudW0gPSBOdW1iZXIoc29tZVZhbHVlKTtcblxudmFyIG9iamVjdCA9IG5ldyBNeVN0cmluZygpOyJ9)\n\n``` language-js\n/*eslint no-new-wrappers: \"error\"*/\n\nvar text = String(someValue);\nvar num = Number(someValue);\n\nvar object = new MyString();\n```\n\n## When Not To Use It\n\nIf you want to allow the use of primitive wrapper objects, then you can safely disable this rule.\n\n## Related Rules\n\n- [no-array-constructor](no-array-constructor)\n- [no-object-constructor](no-object-constructor)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Further Reading\n\n[Unsupported Browser](https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-3/wrapper-objects)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-new-wrappers.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-new-wrappers.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-new-wrappers](https://eslint.org/docs/latest/rules/no-new-wrappers)"
- name: no-nonoctal-decimal-escape
  id: rules/no-nonoctal-decimal-escape
  summary: Since ECMAScript 2021, these escape sequences are specified as non-octal decimal escape sequences, retaining the same behavior
  description: "# no-nonoctal-decimal-escape\n\nDisallow `\\8` and `\\9` escape sequences in string literals\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-nonoctal-decimal-escape../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-nonoctal-decimal-escape../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nAlthough not being specified in the language until ECMAScript 2021, `\\8` and `\\9` escape sequences in string literals were allowed in most JavaScript engines, and treated as “useless” escapes:\n\n``` language-js\n\"\\8\" === \"8\"; // true\n\"\\9\" === \"9\"; // true\n```\n\nSince ECMAScript 2021, these escape sequences are specified as [non-octal decimal escape sequences](https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalEscapeSequence), retaining the same behavior.\n\nNevertheless, the ECMAScript specification treats `\\8` and `\\9` in string literals as a legacy feature. This syntax is optional if the ECMAScript host is not a web browser. Browsers still have to support it, but only in non-strict mode.\n\nRegardless of your targeted environment, these escape sequences shouldn’t be used when writing new code.\n\n## Rule Details\n\nThis rule disallows `\\8` and `\\9` escape sequences in string literals.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5vbm9jdGFsLWRlY2ltYWwtZXNjYXBlOiBcImVycm9yXCIqL1xuXG5cIlxcOFwiO1xuXG5cIlxcOVwiO1xuXG52YXIgZm9vID0gXCJ3XFw4bGVzc1wiO1xuXG52YXIgYmFyID0gXCJEZWNlbWJlciAxXFw5XCI7XG5cbnZhciBiYXogPSBcIkRvbid0IHVzZSBcXDggYW5kIFxcOSBlc2NhcGVzLlwiO1xuXG52YXIgcXV1eCA9IFwiXFwwXFw4XCI7In0=)\n\n``` language-js\n/*eslint no-nonoctal-decimal-escape: \"error\"*/\n\n\"\\8\";\n\n\"\\9\";\n\nvar foo = \"w\\8less\";\n\nvar bar = \"December 1\\9\";\n\nvar baz = \"Don't use \\8 and \\9 escapes.\";\n\nvar quux = \"\\0\\8\";\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW5vbm9jdGFsLWRlY2ltYWwtZXNjYXBlOiBcImVycm9yXCIqL1xuXG5cIjhcIjtcblxuXCI5XCI7XG5cbnZhciBmb28gPSBcInc4bGVzc1wiO1xuXG52YXIgYmFyID0gXCJEZWNlbWJlciAxOVwiO1xuXG52YXIgYmF6ID0gXCJEb24ndCB1c2UgXFxcXDggYW5kIFxcXFw5IGVzY2FwZXMuXCI7XG5cbnZhciBxdXV4ID0gXCJcXDBcXHUwMDM4XCI7In0=)\n\n``` language-js\n/*eslint no-nonoctal-decimal-escape: \"error\"*/\n\n\"8\";\n\n\"9\";\n\nvar foo = \"w8less\";\n\nvar bar = \"December 19\";\n\nvar baz = \"Don't use \\\\8 and \\\\9 escapes.\";\n\nvar quux = \"\\0\\u0038\";\n```\n\n## Related Rules\n\n- [no-octal-escape](no-octal-escape)\n\n## Version\n\nThis rule was introduced in ESLint v7.14.0.\n\n## Further Reading\n\n[ECMAScript® 2023 Language Specification](https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalEscapeSequence)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-nonoctal-decimal-escape.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-nonoctal-decimal-escape.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape](https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape)"
- name: no-obj-calls
  id: rules/no-obj-calls
  summary: ECMAScript provides several global objects that are intended to be used as-is
  description: "# no-obj-calls\n\nDisallow calling global object properties as functions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-obj-calls../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nECMAScript provides several global objects that are intended to be used as-is. Some of these objects look as if they could be constructors due their capitalization (such as `Math` and `JSON`) but will throw an error if you try to execute them as functions.\n\nThe [ECMAScript 5 specification](https://es5.github.io/#x15.8) makes it clear that both `Math` and `JSON` cannot be invoked:\n\n> The Math object does not have a `[[Call]]` internal property; it is not possible to invoke the Math object as a function.\n\nThe [ECMAScript 2015 specification](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object) makes it clear that `Reflect` cannot be invoked:\n\n> The Reflect object also does not have a `[[Call]]` internal method; it is not possible to invoke the Reflect object as a function.\n\nThe [ECMAScript 2017 specification](https://www.ecma-international.org/ecma-262/8.0/index.html#sec-atomics-object) makes it clear that `Atomics` cannot be invoked:\n\n> The Atomics object does not have a `[[Call]]` internal method; it is not possible to invoke the Atomics object as a function.\n\nAnd the [ECMAScript Internationalization API Specification](https://tc39.es/ecma402/#intl-object) makes it clear that `Intl` cannot be invoked:\n\n> The Intl object does not have a `[[Call]]` internal method; it is not possible to invoke the Intl object as a function.\n\n## Rule Details\n\nThis rule disallows calling the `Math`, `JSON`, `Reflect`, `Atomics` and `Intl` objects as functions.\n\nThis rule also disallows using these objects as constructors with the `new` operator.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9iai1jYWxsczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczIwMTcsIGJyb3dzZXIgKi9cblxudmFyIG1hdGggPSBNYXRoKCk7XG5cbnZhciBuZXdNYXRoID0gbmV3IE1hdGgoKTtcblxudmFyIGpzb24gPSBKU09OKCk7XG5cbnZhciBuZXdKU09OID0gbmV3IEpTT04oKTtcblxudmFyIHJlZmxlY3QgPSBSZWZsZWN0KCk7XG5cbnZhciBuZXdSZWZsZWN0ID0gbmV3IFJlZmxlY3QoKTtcblxudmFyIGF0b21pY3MgPSBBdG9taWNzKCk7XG5cbnZhciBuZXdBdG9taWNzID0gbmV3IEF0b21pY3MoKTtcblxudmFyIGludGwgPSBJbnRsKCk7XG5cbnZhciBuZXdJbnRsID0gbmV3IEludGwoKTsifQ==)\n\n``` language-js\n/*eslint no-obj-calls: \"error\"*/\n/*eslint-env es2017, browser */\n\nvar math = Math();\n\nvar newMath = new Math();\n\nvar json = JSON();\n\nvar newJSON = new JSON();\n\nvar reflect = Reflect();\n\nvar newReflect = new Reflect();\n\nvar atomics = Atomics();\n\nvar newAtomics = new Atomics();\n\nvar intl = Intl();\n\nvar newIntl = new Intl();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9iai1jYWxsczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczIwMTcsIGJyb3dzZXIqL1xuXG5mdW5jdGlvbiBhcmVhKHIpIHtcbiAgICByZXR1cm4gTWF0aC5QSSAqIHIgKiByO1xufVxuXG52YXIgb2JqZWN0ID0gSlNPTi5wYXJzZShcInt9XCIpO1xuXG52YXIgdmFsdWUgPSBSZWZsZWN0LmdldCh7IHg6IDEsIHk6IDIgfSwgXCJ4XCIpO1xuXG52YXIgZmlyc3QgPSBBdG9taWNzLmxvYWQoZm9vLCAwKTtcblxudmFyIHNlZ21lbnRlckZyID0gbmV3IEludGwuU2VnbWVudGVyKFwiZnJcIiwgeyBncmFudWxhcml0eTogXCJ3b3JkXCIgfSk7In0=)\n\n``` language-js\n/*eslint no-obj-calls: \"error\"*/\n/*eslint-env es2017, browser*/\n\nfunction area(r) {\n    return Math.PI * r * r;\n}\n\nvar object = JSON.parse(\"{}\");\n\nvar value = Reflect.get({ x: 1, y: 2 }, \"x\");\n\nvar first = Atomics.load(foo, 0);\n\nvar segmenterFr = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[Annotated ES5](https://es5.github.io/#x15.8)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-obj-calls.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-obj-calls.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-obj-calls](https://eslint.org/docs/latest/rules/no-obj-calls)"
- name: no-object-constructor
  id: rules/no-object-constructor
  summary: Use of the Object constructor to construct a new empty object is generally discouraged in favor of object literal notation because of conciseness and because the Object global may be redefined
  description: "# no-object-constructor\n\nDisallow calls to the `Object` constructor without an argument\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-object-constructor../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nUse of the `Object` constructor to construct a new empty object is generally discouraged in favor of object literal notation because of conciseness and because the `Object` global may be redefined. The exception is when the `Object` constructor is used to intentionally wrap a specified value which is passed as an argument.\n\n## Rule Details\n\nThis rule disallows calling the `Object` constructor without an argument.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9iamVjdC1jb25zdHJ1Y3RvcjogXCJlcnJvclwiKi9cblxuT2JqZWN0KCk7XG5cbm5ldyBPYmplY3QoKTsifQ==)\n\n``` language-js\n/*eslint no-object-constructor: \"error\"*/\n\nObject();\n\nnew Object();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9iamVjdC1jb25zdHJ1Y3RvcjogXCJlcnJvclwiKi9cblxuT2JqZWN0KFwiZm9vXCIpO1xuXG5jb25zdCBvYmogPSB7IGE6IDEsIGI6IDIgfTtcblxuY29uc3QgaXNPYmplY3QgPSB2YWx1ZSA9PiB2YWx1ZSA9PT0gT2JqZWN0KHZhbHVlKTtcblxuY29uc3QgY3JlYXRlT2JqZWN0ID0gT2JqZWN0ID0+IG5ldyBPYmplY3QoKTsifQ==)\n\n``` language-js\n/*eslint no-object-constructor: \"error\"*/\n\nObject(\"foo\");\n\nconst obj = { a: 1, b: 2 };\n\nconst isObject = value => value === Object(value);\n\nconst createObject = Object => new Object();\n```\n\n## When Not To Use It\n\nIf you wish to allow the use of the `Object` constructor, you can safely turn this rule off.\n\n## Related Rules\n\n- [no-array-constructor](no-array-constructor)\n- [no-new-wrappers](no-new-wrappers)\n\n## Version\n\nThis rule was introduced in ESLint v8.50.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-object-constructor.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-object-constructor.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-object-constructor](https://eslint.org/docs/latest/rules/no-object-constructor)"
- name: no-octal
  id: rules/no-octal
  summary: Because the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals
  description: "# no-octal\n\nDisallow octal literals\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-octal../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Compatibility](#compatibility)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nOctal literals are numerals that begin with a leading zero, such as:\n\n``` language-js\nvar num = 071;      // 57\n```\n\nBecause the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals.\n\n## Rule Details\n\nThe rule disallows octal literals.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9jdGFsOiBcImVycm9yXCIqL1xuXG52YXIgbnVtID0gMDcxO1xudmFyIHJlc3VsdCA9IDUgKyAwNzsifQ==)\n\n``` language-js\n/*eslint no-octal: \"error\"*/\n\nvar num = 071;\nvar result = 5 + 07;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9jdGFsOiBcImVycm9yXCIqL1xuXG52YXIgbnVtICA9IFwiMDcxXCI7In0=)\n\n``` language-js\n/*eslint no-octal: \"error\"*/\n\nvar num  = \"071\";\n```\n\n## Compatibility\n\n- **JSHint**: W115\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-octal.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-octal.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-octal](https://eslint.org/docs/latest/rules/no-octal)"
- name: no-octal-escape
  id: rules/no-octal-escape
  summary: As of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used
  description: "# no-octal-escape\n\nDisallow octal escape sequences in string literals\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nAs of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used. Unicode escape sequences should be used instead.\n\n``` language-js\nvar foo = \"Copyright \\251\";\n```\n\n## Rule Details\n\nThis rule disallows octal escape sequences in string literals.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9jdGFsLWVzY2FwZTogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IFwiQ29weXJpZ2h0IFxcMjUxXCI7In0=)\n\n``` language-js\n/*eslint no-octal-escape: \"error\"*/\n\nvar foo = \"Copyright \\251\";\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLW9jdGFsLWVzY2FwZTogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IFwiQ29weXJpZ2h0IFxcdTAwQTlcIjsgICAvLyB1bmljb2RlXG5cbnZhciBmb28gPSBcIkNvcHlyaWdodCBcXHhBOVwiOyAgICAgLy8gaGV4YWRlY2ltYWwifQ==)\n\n``` language-js\n/*eslint no-octal-escape: \"error\"*/\n\nvar foo = \"Copyright \\u00A9\";   // unicode\n\nvar foo = \"Copyright \\xA9\";     // hexadecimal\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-octal-escape.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-octal-escape.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-octal-escape](https://eslint.org/docs/latest/rules/no-octal-escape)"
- name: no-param-reassign
  id: rules/no-param-reassign
  summary: Assignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the arguments object when not in strict mode (see When Not To Use It below)
  description: "# no-param-reassign\n\nDisallow reassigning `function` parameters\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [props](#props)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nAssignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the `arguments` object when not in strict mode (see [When Not To Use It](#when-not-to-use-it) below). Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.\n\nThis rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.\n\n## Rule Details\n\nThis rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgYmFyID0gMTM7XG59XG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBiYXIrKztcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGZvciAoYmFyIGluIGJheikge31cbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGZvciAoYmFyIG9mIGJheikge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-param-reassign: \"error\"*/\n\nvar foo = function(bar) {\n    bar = 13;\n}\n\nvar foo = function(bar) {\n    bar++;\n}\n\nvar foo = function(bar) {\n    for (bar in baz) {}\n}\n\nvar foo = function(bar) {\n    for (bar of baz) {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgdmFyIGJheiA9IGJhcjtcbn0ifQ==)\n\n``` language-js\n/*eslint no-param-reassign: \"error\"*/\n\nvar foo = function(bar) {\n    var baz = bar;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with a boolean property `\"props\"`, and arrays `\"ignorePropertyModificationsFor\"` and `\"ignorePropertyModificationsForRegex\"`. `\"props\"` is `false` by default. If `\"props\"` is set to `true`, this rule warns against the modification of parameter properties unless they’re included in `\"ignorePropertyModificationsFor\"` or `\"ignorePropertyModificationsForRegex\"`, which is an empty array by default.\n\n### props\n\nExamples of **correct** code for the default `{ \"props\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogZmFsc2UgfV0qL1xuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgYmFyLnByb3AgPSBcInZhbHVlXCI7XG59XG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBkZWxldGUgYmFyLmFhYTtcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGJhci5hYWErKztcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGZvciAoYmFyLmFhYSBpbiBiYXopIHt9XG59XG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBmb3IgKGJhci5hYWEgb2YgYmF6KSB7fVxufSJ9)\n\n``` language-js\n/*eslint no-param-reassign: [\"error\", { \"props\": false }]*/\n\nvar foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nvar foo = function(bar) {\n    delete bar.aaa;\n}\n\nvar foo = function(bar) {\n    bar.aaa++;\n}\n\nvar foo = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nvar foo = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\nExamples of **incorrect** code for the `{ \"props\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogdHJ1ZSB9XSovXG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBiYXIucHJvcCA9IFwidmFsdWVcIjtcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGRlbGV0ZSBiYXIuYWFhO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgYmFyLmFhYSsrO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgZm9yIChiYXIuYWFhIGluIGJheikge31cbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGZvciAoYmFyLmFhYSBvZiBiYXopIHt9XG59In0=)\n\n``` language-js\n/*eslint no-param-reassign: [\"error\", { \"props\": true }]*/\n\nvar foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nvar foo = function(bar) {\n    delete bar.aaa;\n}\n\nvar foo = function(bar) {\n    bar.aaa++;\n}\n\nvar foo = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nvar foo = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\nExamples of **correct** code for the `{ \"props\": true }` option with `\"ignorePropertyModificationsFor\"` set:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogdHJ1ZSwgXCJpZ25vcmVQcm9wZXJ0eU1vZGlmaWNhdGlvbnNGb3JcIjogW1wiYmFyXCJdIH1dKi9cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcikge1xuICAgIGJhci5wcm9wID0gXCJ2YWx1ZVwiO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgZGVsZXRlIGJhci5hYWE7XG59XG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBiYXIuYWFhKys7XG59XG5cbnZhciBmb28gPSBmdW5jdGlvbihiYXIpIHtcbiAgICBmb3IgKGJhci5hYWEgaW4gYmF6KSB7fVxufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgZm9yIChiYXIuYWFhIG9mIGJheikge31cbn0ifQ==)\n\n``` language-js\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bar\"] }]*/\n\nvar foo = function(bar) {\n    bar.prop = \"value\";\n}\n\nvar foo = function(bar) {\n    delete bar.aaa;\n}\n\nvar foo = function(bar) {\n    bar.aaa++;\n}\n\nvar foo = function(bar) {\n    for (bar.aaa in baz) {}\n}\n\nvar foo = function(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\nExamples of **correct** code for the `{ \"props\": true }` option with `\"ignorePropertyModificationsForRegex\"` set:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogdHJ1ZSwgXCJpZ25vcmVQcm9wZXJ0eU1vZGlmaWNhdGlvbnNGb3JSZWdleFwiOiBbXCJeYmFyXCJdIH1dKi9cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhclZhcikge1xuICAgIGJhclZhci5wcm9wID0gXCJ2YWx1ZVwiO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFycml0bykge1xuICAgIGRlbGV0ZSBiYXJyaXRvLmFhYTtcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhcl8pIHtcbiAgICBiYXJfLmFhYSsrO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oYmFyQmF6KSB7XG4gICAgZm9yIChiYXJCYXouYWFhIGluIGJheikge31cbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKGJhckJheikge1xuICAgIGZvciAoYmFyQmF6LmFhYSBvZiBiYXopIHt9XG59In0=)\n\n``` language-js\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsForRegex\": [\"^bar\"] }]*/\n\nvar foo = function(barVar) {\n    barVar.prop = \"value\";\n}\n\nvar foo = function(barrito) {\n    delete barrito.aaa;\n}\n\nvar foo = function(bar_) {\n    bar_.aaa++;\n}\n\nvar foo = function(barBaz) {\n    for (barBaz.aaa in baz) {}\n}\n\nvar foo = function(barBaz) {\n    for (barBaz.aaa of baz) {}\n}\n```\n\n## When Not To Use It\n\nIf you want to allow assignment to function parameters, then you can safely disable this rule.\n\nStrict mode code doesn’t sync indices of the arguments object with each parameter binding. Therefore, this rule is not necessary to protect against arguments object mutation in ESM modules or other strict mode functions.\n\n## Version\n\nThis rule was introduced in ESLint v0.18.0.\n\n## Further Reading\n\n[JavaScript: Don’t Reassign Your Function Arguments](https://spin.atomicobject.com/2011/04/10/javascript-don-t-reassign-your-function-arguments/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-param-reassign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-param-reassign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-param-reassign](https://eslint.org/docs/latest/rules/no-param-reassign)"
- name: no-plusplus
  id: rules/no-plusplus
  summary: Because the unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code
  description: "# no-plusplus\n\nDisallow the unary operators `++` and `--`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowForLoopAfterthoughts](#allowforloopafterthoughts)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nBecause the unary `++` and `--` operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code.\n\n``` language-js\nvar i = 10;\nvar j = 20;\n\ni ++\nj\n// i = 11, j = 20\n```\n\n``` language-js\nvar i = 10;\nvar j = 20;\n\ni\n++\nj\n// i = 10, j = 21\n```\n\n## Rule Details\n\nThis rule disallows the unary operators `++` and `--`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBsdXNwbHVzOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gMDtcbmZvbysrO1xuXG52YXIgYmFyID0gNDI7XG5iYXItLTtcblxuZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGRvU29tZXRoaW5nKGkpO1xufSJ9)\n\n``` language-js\n/*eslint no-plusplus: \"error\"*/\n\nvar foo = 0;\nfoo++;\n\nvar bar = 42;\nbar--;\n\nfor (i = 0; i < l; i++) {\n    doSomething(i);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBsdXNwbHVzOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gMDtcbmZvbyArPSAxO1xuXG52YXIgYmFyID0gNDI7XG5iYXIgLT0gMTtcblxuZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgIGRvU29tZXRoaW5nKGkpO1xufSJ9)\n\n``` language-js\n/*eslint no-plusplus: \"error\"*/\n\nvar foo = 0;\nfoo += 1;\n\nvar bar = 42;\nbar -= 1;\n\nfor (i = 0; i < l; i += 1) {\n    doSomething(i);\n}\n```\n\n## Options\n\nThis rule has an object option.\n\n- `\"allowForLoopAfterthoughts\": true` allows unary operators `++` and `--` in the afterthought (final expression) of a `for` loop.\n\n### allowForLoopAfterthoughts\n\nExamples of **correct** code for this rule with the `{ \"allowForLoopAfterthoughts\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBsdXNwbHVzOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dGb3JMb29wQWZ0ZXJ0aG91Z2h0c1wiOiB0cnVlIH1dKi9cblxuZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGRvU29tZXRoaW5nKGkpO1xufVxuXG5mb3IgKGkgPSBsOyBpID49IDA7IGktLSkge1xuICAgIGRvU29tZXRoaW5nKGkpO1xufVxuXG5mb3IgKGkgPSAwLCBqID0gbDsgaSA8IGw7IGkrKywgai0tKSB7XG4gICAgZG9Tb21ldGhpbmcoaSwgaik7XG59In0=)\n\n``` language-js\n/*eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }]*/\n\nfor (i = 0; i < l; i++) {\n    doSomething(i);\n}\n\nfor (i = l; i >= 0; i--) {\n    doSomething(i);\n}\n\nfor (i = 0, j = l; i < l; i++, j--) {\n    doSomething(i, j);\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"allowForLoopAfterthoughts\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXBsdXNwbHVzOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dGb3JMb29wQWZ0ZXJ0aG91Z2h0c1wiOiB0cnVlIH1dKi9cblxuZm9yIChpID0gMDsgaSA8IGw7IGogPSBpKyspIHtcbiAgICBkb1NvbWV0aGluZyhpLCBqKTtcbn1cblxuZm9yIChpID0gbDsgaS0tOykge1xuICAgIGRvU29tZXRoaW5nKGkpO1xufVxuXG5mb3IgKGkgPSAwOyBpIDwgbDspIGkrKzsifQ==)\n\n``` language-js\n/*eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }]*/\n\nfor (i = 0; i < l; j = i++) {\n    doSomething(i, j);\n}\n\nfor (i = l; i--;) {\n    doSomething(i);\n}\n\nfor (i = 0; i < l;) i++;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-plusplus.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-plusplus.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-plusplus](https://eslint.org/docs/latest/rules/no-plusplus)"
- name: no-promise-executor-return
  id: rules/no-promise-executor-return
  summary: The new Promise constructor accepts a single argument, called an executor
  description: "# no-promise-executor-return\n\nDisallow returning values from Promise executor functions\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-promise-executor-return../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowVoid](#allowvoid)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThe `new Promise` constructor accepts a single argument, called an *executor*.\n\n``` language-js\nconst myPromise = new Promise(function executor(resolve, reject) {\n    readFile('foo.txt', function(err, result) {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n```\n\nThe executor function usually initiates some asynchronous operation. Once it is finished, the executor should call `resolve` with the result, or `reject` if an error occurred.\n\nThe return value of the executor is ignored. Returning a value from an executor function is a possible error because the returned value cannot be used and it doesn’t affect the promise in any way.\n\n## Rule Details\n\nThis rule disallows returning values from Promise executor functions.\n\nOnly `return` without a value is allowed, as it’s a control flow statement.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb21pc2UtZXhlY3V0b3ItcmV0dXJuOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbm5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoc29tZUNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFJlc3VsdDtcbiAgICB9XG4gICAgZ2V0U29tZXRoaW5nKChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbm5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IGdldFNvbWV0aGluZygoZXJyLCBkYXRhKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH1cbn0pKTtcblxubmV3IFByb21pc2UoKCkgPT4ge1xuICAgIHJldHVybiAxO1xufSk7XG5cbm5ldyBQcm9taXNlKHIgPT4gcigxKSk7In0=)\n\n``` language-js\n/*eslint no-promise-executor-return: \"error\"*/\n/*eslint-env es6*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return defaultResult;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(() => {\n    return 1;\n});\n\nnew Promise(r => r(1));\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb21pc2UtZXhlY3V0b3ItcmV0dXJuOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbi8vIFR1cm4gcmV0dXJuIGlubGluZSBpbnRvIHR3byBsaW5lc1xubmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChzb21lQ29uZGl0aW9uKSB7XG4gICAgICAgIHJlc29sdmUoZGVmYXVsdFJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ2V0U29tZXRoaW5nKChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbi8vIEFkZCBjdXJseSBicmFjZXNcbm5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBnZXRTb21ldGhpbmcoKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5uZXcgUHJvbWlzZShyID0+IHsgcigxKSB9KTtcbi8vIG9yIGp1c3QgdXNlIFByb21pc2UucmVzb2x2ZVxuUHJvbWlzZS5yZXNvbHZlKDEpOyJ9)\n\n``` language-js\n/*eslint no-promise-executor-return: \"error\"*/\n/*eslint-env es6*/\n\n// Turn return inline into two lines\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        resolve(defaultResult);\n        return;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\n// Add curly braces\nnew Promise((resolve, reject) => {\n    getSomething((err, data) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(data);\n        }\n    });\n});\n\nnew Promise(r => { r(1) });\n// or just use Promise.resolve\nPromise.resolve(1);\n```\n\n## Options\n\nThis rule takes one option, an object, with the following properties:\n\n- `allowVoid`: If set to `true` (`false` by default), this rule will allow returning void values.\n\n### allowVoid\n\nExamples of **correct** code for this rule with the `{ \"allowVoid\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb21pc2UtZXhlY3V0b3ItcmV0dXJuOiBbXCJlcnJvclwiLCB7IGFsbG93Vm9pZDogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxubmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChzb21lQ29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiB2b2lkIHJlc29sdmUoZGVmYXVsdFJlc3VsdCk7XG4gICAgfVxuICAgIGdldFNvbWV0aGluZygoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5uZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB2b2lkIGdldFNvbWV0aGluZygoZXJyLCBkYXRhKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH1cbn0pKTtcblxubmV3IFByb21pc2UociA9PiB2b2lkIHIoMSkpOyJ9)\n\n``` language-js\n/*eslint no-promise-executor-return: [\"error\", { allowVoid: true }]*/\n/*eslint-env es6*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return void resolve(defaultResult);\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => void getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(r => void r(1));\n```\n\n## Related Rules\n\n- [no-async-promise-executor](no-async-promise-executor)\n\n## Version\n\nThis rule was introduced in ESLint v7.3.0.\n\n## Further Reading\n\n[Promise - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-promise-executor-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-promise-executor-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-promise-executor-return](https://eslint.org/docs/latest/rules/no-promise-executor-return)"
- name: no-proto
  id: rules/no-proto
  summary: __proto__ property has been deprecated as of ECMAScript 3.1 and shouldn’t be used in the code
  description: "# no-proto\n\nDisallow the use of the `__proto__` property\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\n`__proto__` property has been deprecated as of ECMAScript 3.1 and shouldn’t be used in the code. Use `Object.getPrototypeOf` and `Object.setPrototypeOf` instead.\n\n## Rule Details\n\nWhen an object is created with the `new` operator, `__proto__` is set to the original “prototype” property of the object’s constructor function. `Object.getPrototypeOf` is the preferred method of getting the object’s prototype. To change an object’s prototype, use `Object.setPrototypeOf`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb3RvOiBcImVycm9yXCIqL1xuXG52YXIgYSA9IG9iai5fX3Byb3RvX187XG5cbnZhciBhID0gb2JqW1wiX19wcm90b19fXCJdO1xuXG5vYmouX19wcm90b19fID0gYjtcblxub2JqW1wiX19wcm90b19fXCJdID0gYjsifQ==)\n\n``` language-js\n/*eslint no-proto: \"error\"*/\n\nvar a = obj.__proto__;\n\nvar a = obj[\"__proto__\"];\n\nobj.__proto__ = b;\n\nobj[\"__proto__\"] = b;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb3RvOiBcImVycm9yXCIqL1xuXG52YXIgYSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuXG5PYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBiKTtcblxudmFyIGMgPSB7IF9fcHJvdG9fXzogYSB9OyJ9)\n\n``` language-js\n/*eslint no-proto: \"error\"*/\n\nvar a = Object.getPrototypeOf(obj);\n\nObject.setPrototypeOf(obj, b);\n\nvar c = { __proto__: a };\n```\n\n## When Not To Use It\n\nYou might want to turn this rule off if you need to support legacy browsers which implement the `__proto__` property but not `Object.getPrototypeOf` or `Object.setPrototypeOf`.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[John Resig - Object.getPrototypeOf](https://johnresig.com/blog/objectgetprototypeof/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-proto.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-proto.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-proto](https://eslint.org/docs/latest/rules/no-proto)"
- name: no-prototype-builtins
  id: rules/no-prototype-builtins
  summary: In ECMAScript 5.1, Object.create was added, which enables the creation of objects with a specified [[Prototype]]
  description: "# no-prototype-builtins\n\nDisallow calling some `Object.prototype` methods directly on objects\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-prototype-builtins../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-prototype-builtins../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIn ECMAScript 5.1, `Object.create` was added, which enables the creation of objects with a specified `[[Prototype]]`. `Object.create(null)` is a common pattern used to create objects that will be used as a Map. This can lead to errors when it is assumed that objects will have properties from `Object.prototype`. This rule prevents calling some `Object.prototype` methods directly from an object.\n\nAdditionally, objects can have properties that shadow the builtins on `Object.prototype`, potentially causing unintended behavior or denial-of-service security vulnerabilities. For example, it would be unsafe for a webserver to parse JSON input from a client and call `hasOwnProperty` directly on the resulting object, because a malicious client could send a JSON value like `{\"hasOwnProperty\": 1}` and cause the server to crash.\n\nTo avoid subtle bugs like this, it’s better to always call these methods from `Object.prototype`. For example, `foo.hasOwnProperty(\"bar\")` should be replaced with `Object.prototype.hasOwnProperty.call(foo, \"bar\")`.\n\n## Rule Details\n\nThis rule disallows calling some `Object.prototype` methods directly on object instances.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb3RvdHlwZS1idWlsdGluczogXCJlcnJvclwiKi9cblxudmFyIGhhc0JhclByb3BlcnR5ID0gZm9vLmhhc093blByb3BlcnR5KFwiYmFyXCIpO1xuXG52YXIgaXNQcm90b3R5cGVPZkJhciA9IGZvby5pc1Byb3RvdHlwZU9mKGJhcik7XG5cbnZhciBiYXJJc0VudW1lcmFibGUgPSBmb28ucHJvcGVydHlJc0VudW1lcmFibGUoXCJiYXJcIik7In0=)\n\n``` language-js\n/*eslint no-prototype-builtins: \"error\"*/\n\nvar hasBarProperty = foo.hasOwnProperty(\"bar\");\n\nvar isPrototypeOfBar = foo.isPrototypeOf(bar);\n\nvar barIsEnumerable = foo.propertyIsEnumerable(\"bar\");\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXByb3RvdHlwZS1idWlsdGluczogXCJlcnJvclwiKi9cblxudmFyIGhhc0JhclByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZvbywgXCJiYXJcIik7XG5cbnZhciBpc1Byb3RvdHlwZU9mQmFyID0gT2JqZWN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mLmNhbGwoZm9vLCBiYXIpO1xuXG52YXIgYmFySXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChmb28sIFwiYmFyXCIpOyJ9)\n\n``` language-js\n/*eslint no-prototype-builtins: \"error\"*/\n\nvar hasBarProperty = Object.prototype.hasOwnProperty.call(foo, \"bar\");\n\nvar isPrototypeOfBar = Object.prototype.isPrototypeOf.call(foo, bar);\n\nvar barIsEnumerable = {}.propertyIsEnumerable.call(foo, \"bar\");\n```\n\n## When Not To Use It\n\nYou may want to turn this rule off if your code only touches objects with hardcoded keys, and you will never use an object that shadows an `Object.prototype` method or which does not inherit from `Object.prototype`.\n\n## Version\n\nThis rule was introduced in ESLint v2.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-prototype-builtins.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-prototype-builtins.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-prototype-builtins](https://eslint.org/docs/latest/rules/no-prototype-builtins)"
- name: no-redeclare
  id: rules/no-redeclare
  summary: In JavaScript, it’s possible to redeclare the same variable name using var
  description: "# no-redeclare\n\nDisallow variable redeclaration\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-redeclare../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [builtinGlobals](#builtinglobals)\n3.  [Handled by TypeScript](#handled_by_typescript)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIn JavaScript, it’s possible to redeclare the same variable name using `var`. This can lead to confusion as to where the variable is actually declared and initialized.\n\n## Rule Details\n\nThis rule is aimed at eliminating variables that have multiple declarations in the same scope.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZGVjbGFyZTogXCJlcnJvclwiKi9cblxudmFyIGEgPSAzO1xudmFyIGEgPSAxMDtcblxuY2xhc3MgQyB7XG4gICAgZm9vKCkge1xuICAgICAgICB2YXIgYiA9IDM7XG4gICAgICAgIHZhciBiID0gMTA7XG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGMgPSAzO1xuICAgICAgICB2YXIgYyA9IDEwO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\nvar a = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        var b = 10;\n    }\n\n    static {\n        var c = 3;\n        var c = 10;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZGVjbGFyZTogXCJlcnJvclwiKi9cblxudmFyIGEgPSAzO1xuYSA9IDEwO1xuXG5jbGFzcyBDIHtcbiAgICBmb28oKSB7XG4gICAgICAgIHZhciBiID0gMztcbiAgICAgICAgYiA9IDEwO1xuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIHZhciBjID0gMztcbiAgICAgICAgYyA9IDEwO1xuICAgIH1cbn1cbiJ9)\n\n``` language-js\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\na = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        b = 10;\n    }\n\n    static {\n        var c = 3;\n        c = 10;\n    }\n}\n```\n\n## Options\n\nThis rule takes one optional argument, an object with a boolean property `\"builtinGlobals\"`. It defaults to `true`. If set to `true`, this rule also checks redeclaration of built-in globals, such as `Object`, `Array`, `Number`…\n\n### builtinGlobals\n\nThe `\"builtinGlobals\"` option will check for redeclaration of built-in globals in global scope.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZGVjbGFyZTogW1wiZXJyb3JcIiwgeyBcImJ1aWx0aW5HbG9iYWxzXCI6IHRydWUgfV0qL1xuXG52YXIgT2JqZWN0ID0gMDsifQ==)\n\n``` language-js\n/*eslint no-redeclare: [\"error\", { \"builtinGlobals\": true }]*/\n\nvar Object = 0;\n```\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option and the `browser` environment:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZGVjbGFyZTogW1wiZXJyb3JcIiwgeyBcImJ1aWx0aW5HbG9iYWxzXCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGJyb3dzZXIqL1xuXG52YXIgdG9wID0gMDsifQ==)\n\n``` language-js\n/*eslint no-redeclare: [\"error\", { \"builtinGlobals\": true }]*/\n/*eslint-env browser*/\n\nvar top = 0;\n```\n\nThe `browser` environment has many built-in global variables (for example, `top`). Some of built-in global variables cannot be redeclared.\n\nNote that when using the `node` or `commonjs` environments (or `ecmaFeatures.globalReturn`, if using the default parser), the top scope of a program is not actually the global scope, but rather a “module” scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the [`no-shadow`](no-redeclareno-shadow) rule with the `\"builtinGlobals\"` option should be used.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\nNote that while TypeScript will catch `let` redeclares and `const` redeclares, it will not catch `var` redeclares. Thus, if you use the legacy `var` keyword in your TypeScript codebase, this rule will still provide some value.\n\n## Related Rules\n\n- [no-shadow](no-shadow)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-redeclare.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-redeclare.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-redeclare](https://eslint.org/docs/latest/rules/no-redeclare)"
- name: no-regex-spaces
  id: rules/no-regex-spaces
  summary: Regular expressions can be very complex and difficult to understand, which is why it’s important to keep them as simple as possible in order to avoid mistakes
  description: "# no-regex-spaces\n\nDisallow multiple spaces in regular expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-regex-spaces../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-regex-spaces../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nRegular expressions can be very complex and difficult to understand, which is why it’s important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:\n\n``` language-js\nvar re = /foo   bar/;\n```\n\nIn this regular expression, it’s very hard to tell how many spaces are intended to be matched. It’s better to use only one space and then specify how many spaces are expected, such as:\n\n``` language-js\nvar re = /foo {3}bar/;\n```\n\nNow it is very clear that three spaces are expected to be matched.\n\n## Rule Details\n\nThis rule disallows multiple spaces in regular expression literals.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZ2V4LXNwYWNlczogXCJlcnJvclwiKi9cblxudmFyIHJlID0gL2ZvbyAgIGJhci87XG52YXIgcmUgPSBuZXcgUmVnRXhwKFwiZm9vICAgYmFyXCIpOyJ9)\n\n``` language-js\n/*eslint no-regex-spaces: \"error\"*/\n\nvar re = /foo   bar/;\nvar re = new RegExp(\"foo   bar\");\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlZ2V4LXNwYWNlczogXCJlcnJvclwiKi9cblxudmFyIHJlID0gL2ZvbyB7M31iYXIvO1xudmFyIHJlID0gbmV3IFJlZ0V4cChcImZvbyB7M31iYXJcIik7In0=)\n\n``` language-js\n/*eslint no-regex-spaces: \"error\"*/\n\nvar re = /foo {3}bar/;\nvar re = new RegExp(\"foo {3}bar\");\n```\n\n## When Not To Use It\n\nIf you want to allow multiple spaces in a regular expression, then you can safely turn this rule off.\n\n## Related Rules\n\n- [no-div-regex](no-div-regex)\n- [no-control-regex](no-control-regex)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-regex-spaces.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-regex-spaces.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-regex-spaces](https://eslint.org/docs/latest/rules/no-regex-spaces)"
- name: no-restricted-exports
  id: rules/no-restricted-exports
  summary: In a project, certain names may be disallowed from being used as exported names for various reasons
  description: "# no-restricted-exports\n\nDisallow specified names in exports\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [restrictedNamedExports](#restrictednamedexports)\n        1.  [Default exports](#default-exports)\n    2.  [restrictDefaultExports](#restrictdefaultexports)\n        1.  [direct](#direct)\n        2.  [named](#named)\n        3.  [defaultFrom](#defaultfrom)\n        4.  [namedFrom](#namedfrom)\n        5.  [namespaceFrom](#namespacefrom)\n3.  [Known Limitations](#known-limitations)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn a project, certain names may be disallowed from being used as exported names for various reasons.\n\n## Rule Details\n\nThis rule disallows specified names from being used as exported names.\n\n## Options\n\nBy default, this rule doesn’t disallow any names. Only the names you specify in the configuration will be disallowed.\n\nThis rule has an object option:\n\n- `\"restrictedNamedExports\"` is an array of strings, where each string is a name to be restricted.\n- `\"restrictDefaultExports\"` is an object option with boolean properties to restrict certain default export declarations. The option works only if the `restrictedNamedExports` option does not contain the `\"default\"` value. The following properties are allowed:\n  - `direct`: restricts `export default` declarations.\n  - `named`: restricts `export { foo as default };` declarations.\n  - `defaultFrom`: restricts `export { default } from 'foo';` declarations.\n  - `namedFrom`: restricts `export { foo as default } from 'foo';` declarations.\n  - `namespaceFrom`: restricts `export * as default from 'foo';` declarations.\n\n### restrictedNamedExports\n\nExamples of **incorrect** code for the `\"restrictedNamedExports\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwge1xuICAgIFwicmVzdHJpY3RlZE5hbWVkRXhwb3J0c1wiOiBbXCJmb29cIiwgXCJiYXJcIiwgXCJCYXpcIiwgXCJhXCIsIFwiYlwiLCBcImNcIiwgXCJkXCIsIFwiZVwiLCBcIvCfkY1cIl1cbn1dKi9cblxuZXhwb3J0IGNvbnN0IGZvbyA9IDE7XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXIoKSB7fVxuXG5leHBvcnQgY2xhc3MgQmF6IHt9XG5cbmNvbnN0IGEgPSB7fTtcbmV4cG9ydCB7IGEgfTtcblxuZnVuY3Rpb24gc29tZUZ1bmN0aW9uKCkge31cbmV4cG9ydCB7IHNvbWVGdW5jdGlvbiBhcyBiIH07XG5cbmV4cG9ydCB7IGMgfSBmcm9tIFwic29tZV9tb2R1bGVcIjtcblxuZXhwb3J0IHsgXCJkXCIgfSBmcm9tIFwic29tZV9tb2R1bGVcIjtcblxuZXhwb3J0IHsgc29tZXRoaW5nIGFzIGUgfSBmcm9tIFwic29tZV9tb2R1bGVcIjtcblxuZXhwb3J0IHsgXCLwn5GNXCIgfSBmcm9tIFwic29tZV9tb2R1bGVcIjsifQ==)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExports\": [\"foo\", \"bar\", \"Baz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"👍\"]\n}]*/\n\nexport const foo = 1;\n\nexport function bar() {}\n\nexport class Baz {}\n\nconst a = {};\nexport { a };\n\nfunction someFunction() {}\nexport { someFunction as b };\n\nexport { c } from \"some_module\";\n\nexport { \"d\" } from \"some_module\";\n\nexport { something as e } from \"some_module\";\n\nexport { \"👍\" } from \"some_module\";\n```\n\nExamples of **correct** code for the `\"restrictedNamedExports\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwge1xuICAgIFwicmVzdHJpY3RlZE5hbWVkRXhwb3J0c1wiOiBbXCJmb29cIiwgXCJiYXJcIiwgXCJCYXpcIiwgXCJhXCIsIFwiYlwiLCBcImNcIiwgXCJkXCIsIFwiZVwiLCBcIvCfkY1cIl1cbn1dKi9cblxuZXhwb3J0IGNvbnN0IHF1dXggPSAxO1xuXG5leHBvcnQgZnVuY3Rpb24gbXlGdW5jdGlvbigpIHt9XG5cbmV4cG9ydCBjbGFzcyBNeUNsYXNzIHt9XG5cbmNvbnN0IGEgPSB7fTtcbmV4cG9ydCB7IGEgYXMgbXlPYmplY3QgfTtcblxuZnVuY3Rpb24gc29tZUZ1bmN0aW9uKCkge31cbmV4cG9ydCB7IHNvbWVGdW5jdGlvbiB9O1xuXG5leHBvcnQgeyBjIGFzIHNvbWVOYW1lIH0gZnJvbSBcInNvbWVfbW9kdWxlXCI7XG5cbmV4cG9ydCB7IFwiZFwiIGFzIFwiIGQgXCIgfSBmcm9tIFwic29tZV9tb2R1bGVcIjtcblxuZXhwb3J0IHsgc29tZXRoaW5nIH0gZnJvbSBcInNvbWVfbW9kdWxlXCI7XG5cbmV4cG9ydCB7IFwi8J+RjVwiIGFzIHRodW1ic1VwIH0gZnJvbSBcInNvbWVfbW9kdWxlXCI7In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", {\n    \"restrictedNamedExports\": [\"foo\", \"bar\", \"Baz\", \"a\", \"b\", \"c\", \"d\", \"e\", \"👍\"]\n}]*/\n\nexport const quux = 1;\n\nexport function myFunction() {}\n\nexport class MyClass {}\n\nconst a = {};\nexport { a as myObject };\n\nfunction someFunction() {}\nexport { someFunction };\n\nexport { c as someName } from \"some_module\";\n\nexport { \"d\" as \" d \" } from \"some_module\";\n\nexport { something } from \"some_module\";\n\nexport { \"👍\" as thumbsUp } from \"some_module\";\n```\n\n#### Default exports\n\nBy design, the `\"restrictedNamedExports\"` option doesn’t disallow `export default` declarations. If you configure `\"default\"` as a restricted name, that restriction will apply only to named export declarations.\n\nExamples of additional **incorrect** code for the `\"restrictedNamedExports\": [\"default\"]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0ZWROYW1lZEV4cG9ydHNcIjogW1wiZGVmYXVsdFwiXSB9XSovXG5cbmZ1bmN0aW9uIGZvbygpIHt9XG5cbmV4cG9ydCB7IGZvbyBhcyBkZWZhdWx0IH07In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\"] }]*/\n\nfunction foo() {}\n\nexport { foo as default };\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0ZWROYW1lZEV4cG9ydHNcIjogW1wiZGVmYXVsdFwiXSB9XSovXG5cbmV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwic29tZV9tb2R1bGVcIjsifQ==)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\"] }]*/\n\nexport { default } from \"some_module\";\n```\n\nExamples of additional **correct** code for the `\"restrictedNamedExports\": [\"default\"]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0ZWROYW1lZEV4cG9ydHNcIjogW1wiZGVmYXVsdFwiLCBcImZvb1wiXSB9XSovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvbygpIHt9In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"default\", \"foo\"] }]*/\n\nexport default function foo() {}\n```\n\n### restrictDefaultExports\n\nThis option allows you to restrict certain `default` declarations. The option works only if the `restrictedNamedExports` option does not contain the `\"default\"` value. This option accepts the following properties:\n\n#### direct\n\nExamples of **incorrect** code for the `\"restrictDefaultExports\": { \"direct\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcImRpcmVjdFwiOiB0cnVlIH0gfV0qL1xuXG5leHBvcnQgZGVmYXVsdCBmb287In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default foo;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcImRpcmVjdFwiOiB0cnVlIH0gfV0qL1xuXG5leHBvcnQgZGVmYXVsdCA0MjsifQ==)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default 42;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcImRpcmVjdFwiOiB0cnVlIH0gfV0qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb28oKSB7fSJ9)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"direct\": true } }]*/\n\nexport default function foo() {}\n```\n\n#### named\n\nExamples of **incorrect** code for the `\"restrictDefaultExports\": { \"named\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcIm5hbWVkXCI6IHRydWUgfSB9XSovXG5cbmNvbnN0IGZvbyA9IDEyMztcblxuZXhwb3J0IHsgZm9vIGFzIGRlZmF1bHQgfTsifQ==)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"named\": true } }]*/\n\nconst foo = 123;\n\nexport { foo as default };\n```\n\n#### defaultFrom\n\nExamples of **incorrect** code for the `\"restrictDefaultExports\": { \"defaultFrom\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcImRlZmF1bHRGcm9tXCI6IHRydWUgfSB9XSovXG5cbmV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICdmb28nOyJ9)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"defaultFrom\": true } }]*/\n\nexport { default } from 'foo';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcImRlZmF1bHRGcm9tXCI6IHRydWUgfSB9XSovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdCB9IGZyb20gJ2Zvbyc7In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"defaultFrom\": true } }]*/\n\nexport { default as default } from 'foo';\n```\n\n#### namedFrom\n\nExamples of **incorrect** code for the `\"restrictDefaultExports\": { \"namedFrom\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcIm5hbWVkRnJvbVwiOiB0cnVlIH0gfV0qL1xuXG5leHBvcnQgeyBmb28gYXMgZGVmYXVsdCB9IGZyb20gJ2Zvbyc7In0=)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"namedFrom\": true } }]*/\n\nexport { foo as default } from 'foo';\n```\n\n#### namespaceFrom\n\nExamples of **incorrect** code for the `\"restrictDefaultExports\": { \"namespaceFrom\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZXhwb3J0czogW1wiZXJyb3JcIiwgeyBcInJlc3RyaWN0RGVmYXVsdEV4cG9ydHNcIjogeyBcIm5hbWVzcGFjZUZyb21cIjogdHJ1ZSB9IH1dKi9cblxuZXhwb3J0ICogYXMgZGVmYXVsdCBmcm9tICdmb28nOyJ9)\n\n``` language-js\n/*eslint no-restricted-exports: [\"error\", { \"restrictDefaultExports\": { \"namespaceFrom\": true } }]*/\n\nexport * as default from 'foo';\n```\n\n## Known Limitations\n\nThis rule doesn’t inspect the content of source modules in re-export declarations. In particular, if you are re-exporting everything from another module’s export, that export may include a restricted name. This rule cannot detect such cases.\n\n``` language-js\n//----- some_module.js -----\nexport function foo() {}\n\n//----- my_module.js -----\n/*eslint no-restricted-exports: [\"error\", { \"restrictedNamedExports\": [\"foo\"] }]*/\n\nexport * from \"some_module\"; // allowed, although this declaration exports \"foo\" from my_module\n```\n\n## Version\n\nThis rule was introduced in ESLint v7.0.0-alpha.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-restricted-exports.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-restricted-exports.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-restricted-exports](https://eslint.org/docs/latest/rules/no-restricted-exports)"
- name: no-restricted-globals
  id: rules/no-restricted-globals
  summary: Disallowing usage of specific global variables can be useful if you want to allow a set of global variables by enabling an environment, but still want to disallow some of those
  description: "# no-restricted-globals\n\nDisallow specified global variables\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nDisallowing usage of specific global variables can be useful if you want to allow a set of global variables by enabling an environment, but still want to disallow some of those.\n\nFor instance, early Internet Explorer versions exposed the current DOM event as a global variable `event`, but using this variable has been considered as a bad practice for a long time. Restricting this will make sure this variable isn’t used in browser code.\n\n## Rule Details\n\nThis rule allows you to specify global variable names that you don’t want to use in your application.\n\n## Options\n\nThis rule takes a list of strings, where each string is a global to be restricted:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\"error\", \"event\", \"fdescribe\"]\n    }\n}\n```\n\nAlternatively, the rule also accepts objects, where the global name and an optional custom message are specified:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\n            \"error\",\n            {\n                \"name\": \"event\",\n                \"message\": \"Use local parameter instead.\"\n            },\n            {\n                \"name\": \"fdescribe\",\n                \"message\": \"Do not commit fdescribe. Use describe instead.\"\n            }\n        ]\n    }\n}\n```\n\nExamples of **incorrect** code for sample `\"event\", \"fdescribe\"` global variable names:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIGV2ZW50LCBmZGVzY3JpYmUqL1xuLyplc2xpbnQgbm8tcmVzdHJpY3RlZC1nbG9iYWxzOiBbXCJlcnJvclwiLCBcImV2ZW50XCIsIFwiZmRlc2NyaWJlXCJdKi9cblxuZnVuY3Rpb24gb25DbGljaygpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudCk7XG59XG5cbmZkZXNjcmliZShcImZvb1wiLCBmdW5jdGlvbigpIHtcbn0pOyJ9)\n\n``` language-js\n/*global event, fdescribe*/\n/*eslint no-restricted-globals: [\"error\", \"event\", \"fdescribe\"]*/\n\nfunction onClick() {\n    console.log(event);\n}\n\nfdescribe(\"foo\", function() {\n});\n```\n\nExamples of **correct** code for a sample `\"event\"` global variable name:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIGV2ZW50Ki9cbi8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZ2xvYmFsczogW1wiZXJyb3JcIiwgXCJldmVudFwiXSovXG5cbmltcG9ydCBldmVudCBmcm9tIFwiZXZlbnQtbW9kdWxlXCI7In0=)\n\n``` language-js\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nimport event from \"event-module\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIGV2ZW50Ki9cbi8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtZ2xvYmFsczogW1wiZXJyb3JcIiwgXCJldmVudFwiXSovXG5cbnZhciBldmVudCA9IDE7In0=)\n\n``` language-js\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nvar event = 1;\n```\n\nExamples of **incorrect** code for a sample `\"event\"` global variable name, along with a custom error message:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIGV2ZW50Ki9cbi8qIGVzbGludCBuby1yZXN0cmljdGVkLWdsb2JhbHM6IFtcImVycm9yXCIsIHsgbmFtZTogXCJldmVudFwiLCBtZXNzYWdlOiBcIlVzZSBsb2NhbCBwYXJhbWV0ZXIgaW5zdGVhZC5cIiB9XSAqL1xuXG5mdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50KTsgICAgLy8gVW5leHBlY3RlZCBnbG9iYWwgdmFyaWFibGUgJ2V2ZW50Jy4gVXNlIGxvY2FsIHBhcmFtZXRlciBpbnN0ZWFkLlxufSJ9)\n\n``` language-js\n/*global event*/\n/* eslint no-restricted-globals: [\"error\", { name: \"event\", message: \"Use local parameter instead.\" }] */\n\nfunction onClick() {\n    console.log(event);    // Unexpected global variable 'event'. Use local parameter instead.\n}\n```\n\n## Related Rules\n\n- [no-restricted-properties](no-restricted-properties)\n- [no-restricted-syntax](no-restricted-syntax)\n\n## Version\n\nThis rule was introduced in ESLint v2.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-restricted-globals.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-restricted-globals.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-restricted-globals](https://eslint.org/docs/latest/rules/no-restricted-globals)"
- name: no-restricted-imports
  id: rules/no-restricted-imports
  summary: Imports are an ES6/ES2015 standard for making the functionality of other modules available in your current module
  description: "# no-restricted-imports\n\nDisallow specified modules when loaded by `import`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Examples](#examples)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nImports are an ES6/ES2015 standard for making the functionality of other modules available in your current module. In CommonJS this is implemented through the `require()` call which makes this ESLint rule roughly equivalent to its CommonJS counterpart `no-restricted-modules`.\n\nWhy would you want to restrict imports?\n\n- Some imports might not make sense in a particular environment. For example, Node.js’ `fs` module would not make sense in an environment that didn’t have a file system.\n\n- Some modules provide similar or identical functionality, think `lodash` and `underscore`. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.\n\n## Rule Details\n\nThis rule allows you to specify imports that you don’t want to use in your application.\n\nIt applies to static imports only, not dynamic ones.\n\n## Options\n\nThe syntax to specify restricted imports looks like this:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", \"import1\", \"import2\"]\n```\n\nor like this:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", { \"paths\": [\"import1\", \"import2\"] }]\n```\n\nWhen using the object form, you can also specify an array of gitignore-style patterns:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"paths\": [\"import1\", \"import2\"],\n    \"patterns\": [\"import1/private/*\", \"import2/*\", \"!import2/good\"]\n}]\n```\n\nYou may also specify a custom message for any paths you want to restrict as follows:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"name\": \"import-foo\",\n    \"message\": \"Please use import-bar instead.\"\n}, {\n    \"name\": \"import-baz\",\n    \"message\": \"Please use import-quux instead.\"\n}]\n```\n\nor like this:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"paths\": [{\n        \"name\": \"import-foo\",\n        \"message\": \"Please use import-bar instead.\"\n    }, {\n        \"name\": \"import-baz\",\n        \"message\": \"Please use import-quux instead.\"\n    }]\n}]\n```\n\nor like this if you need to restrict only certain imports from a module:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n    \"importNames\": [\"Bar\"],\n    \"message\": \"Please use Bar from /import-bar/baz/ instead.\"\n  }]\n}]\n```\n\nor like this if you want to apply a custom message to pattern matches:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import1/private/*\"],\n      \"message\": \"usage of import1 private modules not allowed.\"\n    }, {\n      \"group\": [\"import2/*\", \"!import2/good\"],\n      \"message\": \"import2 is deprecated, except the modules in import2/good.\"\n    }]\n}]\n```\n\nThe custom message will be appended to the default error message.\n\nPattern matches can also be configured to be case-sensitive:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import1/private/prefix[A-Z]*\"],\n      \"caseSensitive\": true\n    }]\n}]\n```\n\nPattern matches can restrict specific import names only, similar to the `paths` option:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"utils/*\"],\n      \"importNames\": [\"isEmpty\"],\n      \"message\": \"Use 'isEmpty' from lodash instead.\"\n    }]\n}]\n```\n\nRegex patterns can also be used to restrict specific import Name:\n\n``` language-json\n\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"group\": [\"import-foo/*\"],\n      \"importNamePattern\": \"^foo\",\n    }]\n}]\n```\n\nTo restrict the use of all Node.js core imports (via <https://github.com/nodejs/node/tree/master/lib>):\n\n``` language-json\n    \"no-restricted-imports\": [\"error\",\n         \"assert\",\"buffer\",\"child_process\",\"cluster\",\"crypto\",\"dgram\",\"dns\",\"domain\",\"events\",\"freelist\",\"fs\",\"http\",\"https\",\"module\",\"net\",\"os\",\"path\",\"punycode\",\"querystring\",\"readline\",\"repl\",\"smalloc\",\"stream\",\"string_decoder\",\"sys\",\"timers\",\"tls\",\"tracing\",\"tty\",\"url\",\"util\",\"vm\",\"zlib\"\n    ],\n```\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgXCJmc1wiXSovXG5cbmltcG9ydCBmcyBmcm9tICdmcyc7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport fs from 'fs';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgXCJmc1wiXSovXG5cbmV4cG9ydCB7IGZzIH0gZnJvbSAnZnMnOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport { fs } from 'fs';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgXCJmc1wiXSovXG5cbmV4cG9ydCAqIGZyb20gJ2ZzJzsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport * from 'fs';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcInBhdGhzXCI6IFtcImNsdXN0ZXJcIl0gfV0qL1xuXG5pbXBvcnQgY2x1c3RlciBmcm9tICdjbHVzdGVyJzsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { \"paths\": [\"cluster\"] }]*/\n\nimport cluster from 'cluster';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcInBhdHRlcm5zXCI6IFtcImxvZGFzaC8qXCJdIH1dKi9cblxuaW1wb3J0IHBpY2sgZnJvbSAnbG9kYXNoL3BpY2snOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"lodash/*\"] }]*/\n\nimport pick from 'lodash/pick';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXRoczogW3tcbiAgICBuYW1lOiBcImZvb1wiLFxuICAgIGltcG9ydE5hbWVzOiBbXCJkZWZhdWx0XCJdLFxuICAgIG1lc3NhZ2U6IFwiUGxlYXNlIHVzZSB0aGUgZGVmYXVsdCBpbXBvcnQgZnJvbSAnL2Jhci9iYXovJyBpbnN0ZWFkLlwiXG59XX1dKi9cblxuaW1wb3J0IERpc2FsbG93ZWRPYmplY3QgZnJvbSBcImZvb1wiOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"default\"],\n    message: \"Please use the default import from '/bar/baz/' instead.\"\n}]}]*/\n\nimport DisallowedObject from \"foo\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXRoczogW3tcbiAgICBuYW1lOiBcImZvb1wiLFxuICAgIGltcG9ydE5hbWVzOiBbXCJEaXNhbGxvd2VkT2JqZWN0XCJdLFxuICAgIG1lc3NhZ2U6IFwiUGxlYXNlIGltcG9ydCAnRGlzYWxsb3dlZE9iamVjdCcgZnJvbSAnL2Jhci9iYXovJyBpbnN0ZWFkLlwiXG59XX1dKi9cblxuaW1wb3J0IHsgRGlzYWxsb3dlZE9iamVjdCB9IGZyb20gXCJmb29cIjtcblxuaW1wb3J0IHsgRGlzYWxsb3dlZE9iamVjdCBhcyBBbGxvd2VkT2JqZWN0IH0gZnJvbSBcImZvb1wiO1xuXG5pbXBvcnQgeyBcIkRpc2FsbG93ZWRPYmplY3RcIiBhcyBTb21lT2JqZWN0IH0gZnJvbSBcImZvb1wiOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport { DisallowedObject } from \"foo\";\n\nimport { DisallowedObject as AllowedObject } from \"foo\";\n\nimport { \"DisallowedObject\" as SomeObject } from \"foo\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXRoczogW3tcbiAgICBuYW1lOiBcImZvb1wiLFxuICAgIGltcG9ydE5hbWVzOiBbXCJEaXNhbGxvd2VkT2JqZWN0XCJdLFxuICAgIG1lc3NhZ2U6IFwiUGxlYXNlIGltcG9ydCAnRGlzYWxsb3dlZE9iamVjdCcgZnJvbSAnL2Jhci9iYXovJyBpbnN0ZWFkLlwiXG59XX1dKi9cblxuaW1wb3J0ICogYXMgRm9vIGZyb20gXCJmb29cIjsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport * as Foo from \"foo\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wibG9kYXNoLypcIl0sXG4gICAgbWVzc2FnZTogXCJQbGVhc2UgdXNlIHRoZSBkZWZhdWx0IGltcG9ydCBmcm9tICdsb2Rhc2gnIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgcGljayBmcm9tICdsb2Rhc2gvcGljayc7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"lodash/*\"],\n    message: \"Please use the default import from 'lodash' instead.\"\n}]}]*/\n\nimport pick from 'lodash/pick';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wiZm9vW0EtWl0qXCJdLFxuICAgIGNhc2VTZW5zaXRpdmU6IHRydWVcbn1dfV0qL1xuXG5pbXBvcnQgcGljayBmcm9tICdmb29CYXInOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo[A-Z]*\"],\n    caseSensitive: true\n}]}]*/\n\nimport pick from 'fooBar';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1widXRpbHMvKlwiXSxcbiAgICBpbXBvcnROYW1lczogWydpc0VtcHR5J10sXG4gICAgbWVzc2FnZTogXCJVc2UgJ2lzRW1wdHknIGZyb20gbG9kYXNoIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAndXRpbHMvY29sbGVjdGlvbi11dGlscyc7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNames: ['isEmpty'],\n    message: \"Use 'isEmpty' from lodash instead.\"\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1widXRpbHMvKlwiXSxcbiAgICBpbXBvcnROYW1lUGF0dGVybjogJ15pcycsXG4gICAgbWVzc2FnZTogXCJVc2UgJ2lzKicgZnVuY3Rpb25zIGZyb20gbG9kYXNoIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAndXRpbHMvY29sbGVjdGlvbi11dGlscyc7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: '^is',\n    message: \"Use 'is*' functions from lodash instead.\"\n}]}]*/\n\nimport { isEmpty } from 'utils/collection-utils';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wiZm9vLypcIl0sXG4gICAgaW1wb3J0TmFtZVBhdHRlcm46ICdeKGlzfGhhcyknLFxuICAgIG1lc3NhZ2U6IFwiVXNlICdpcyonIGFuZCAnaGFzKicgZnVuY3Rpb25zIGZyb20gYmF6L2JhciBpbnN0ZWFkXCJcbn1dfV0qL1xuXG5pbXBvcnQgeyBpc1NvbWV0aGluZywgaGFzU29tZXRoaW5nIH0gZnJvbSAnZm9vL2Jhcic7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo/*\"],\n    importNamePattern: '^(is|has)',\n    message: \"Use 'is*' and 'has*' functions from baz/bar instead\"\n}]}]*/\n\nimport { isSomething, hasSomething } from 'foo/bar';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wiZm9vLypcIl0sXG4gICAgaW1wb3J0TmFtZXM6IFtcImJhclwiXSxcbiAgICBpbXBvcnROYW1lUGF0dGVybjogJ15iYXonLFxufV19XSovXG5cbmltcG9ydCB7IGJhciwgYmF6UXV4IH0gZnJvbSAnZm9vL3F1dXgnOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo/*\"],\n    importNames: [\"bar\"],\n    importNamePattern: '^baz',\n}]}]*/\n\nimport { bar, bazQux } from 'foo/quux';\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgXCJmc1wiXSovXG5cbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmV4cG9ydCB7IGZvbyB9IGZyb20gXCJiYXJcIjsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport crypto from 'crypto';\nexport { foo } from \"bar\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcInBhdGhzXCI6IFtcImZzXCJdLCBcInBhdHRlcm5zXCI6IFtcImVzbGludC8qXCJdIH1dKi9cblxuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGVzbGludCBmcm9tICdlc2xpbnQnO1xuZXhwb3J0ICogZnJvbSBcInBhdGhcIjsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { \"paths\": [\"fs\"], \"patterns\": [\"eslint/*\"] }]*/\n\nimport crypto from 'crypto';\nimport eslint from 'eslint';\nexport * from \"path\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXRoczogW3sgbmFtZTogXCJmb29cIiwgaW1wb3J0TmFtZXM6IFtcIkRpc2FsbG93ZWRPYmplY3RcIl0gfV0gfV0qL1xuXG5pbXBvcnQgRGlzYWxsb3dlZE9iamVjdCBmcm9tIFwiZm9vXCIifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { paths: [{ name: \"foo\", importNames: [\"DisallowedObject\"] }] }]*/\n\nimport DisallowedObject from \"foo\"\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXRoczogW3tcbiAgICBuYW1lOiBcImZvb1wiLFxuICAgIGltcG9ydE5hbWVzOiBbXCJEaXNhbGxvd2VkT2JqZWN0XCJdLFxuICAgIG1lc3NhZ2U6IFwiUGxlYXNlIGltcG9ydCAnRGlzYWxsb3dlZE9iamVjdCcgZnJvbSAnL2Jhci9iYXovJyBpbnN0ZWFkLlwiXG59XX1dKi9cblxuaW1wb3J0IHsgQWxsb3dlZE9iamVjdCBhcyBEaXNhbGxvd2VkT2JqZWN0IH0gZnJvbSBcImZvb1wiOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport { AllowedObject as DisallowedObject } from \"foo\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wibG9kYXNoLypcIl0sXG4gICAgbWVzc2FnZTogXCJQbGVhc2UgdXNlIHRoZSBkZWZhdWx0IGltcG9ydCBmcm9tICdsb2Rhc2gnIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgbG9kYXNoIGZyb20gJ2xvZGFzaCc7In0=)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"lodash/*\"],\n    message: \"Please use the default import from 'lodash' instead.\"\n}]}]*/\n\nimport lodash from 'lodash';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1wiZm9vW0EtWl0qXCJdLFxuICAgIGNhc2VTZW5zaXRpdmU6IHRydWVcbn1dfV0qL1xuXG5pbXBvcnQgcGljayBmcm9tICdmb29kJzsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"foo[A-Z]*\"],\n    caseSensitive: true\n}]}]*/\n\nimport pick from 'food';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1widXRpbHMvKlwiXSxcbiAgICBpbXBvcnROYW1lczogWydpc0VtcHR5J10sXG4gICAgbWVzc2FnZTogXCJVc2UgJ2lzRW1wdHknIGZyb20gbG9kYXNoIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgeyBoYXNWYWx1ZXMgfSBmcm9tICd1dGlscy9jb2xsZWN0aW9uLXV0aWxzJzsifQ==)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNames: ['isEmpty'],\n    message: \"Use 'isEmpty' from lodash instead.\"\n}]}]*/\n\nimport { hasValues } from 'utils/collection-utils';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJlc3RyaWN0ZWQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBwYXR0ZXJuczogW3tcbiAgICBncm91cDogW1widXRpbHMvKlwiXSxcbiAgICBpbXBvcnROYW1lUGF0dGVybjogJ15pcycsXG4gICAgbWVzc2FnZTogXCJVc2UgJ2lzKicgZnVuY3Rpb25zIGZyb20gbG9kYXNoIGluc3RlYWQuXCJcbn1dfV0qL1xuXG5pbXBvcnQgaXNFbXB0eSwgeyBoYXNWYWx1ZSB9IGZyb20gJ3V0aWxzL2NvbGxlY3Rpb24tdXRpbHMnOyJ9)\n\n``` language-js\n/*eslint no-restricted-imports: [\"error\", { patterns: [{\n    group: [\"utils/*\"],\n    importNamePattern: '^is',\n    message: \"Use 'is*' functions from lodash instead.\"\n}]}]*/\n\nimport isEmpty, { hasValue } from 'utils/collection-utils';\n```\n\n## When Not To Use It\n\nDon’t use this rule or don’t include a module in the list for this rule if you want to be able to import a module in your project without an ESLint error or warning.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-restricted-imports.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-restricted-imports.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-restricted-imports](https://eslint.org/docs/latest/rules/no-restricted-imports)"
- name: no-restricted-properties
  id: rules/no-restricted-properties
  summary: Certain properties on objects may be disallowed in a codebase
  description: "# no-restricted-properties\n\nDisallow certain properties on certain objects\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Options](#options)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nCertain properties on objects may be disallowed in a codebase. This is useful for deprecating an API or restricting usage of a module’s methods. For example, you may want to disallow using `describe.only` when using Mocha or telling people to use `Object.assign` instead of `_.extend`.\n\n## Rule Details\n\nThis rule looks for accessing a given property key on a given object name, either when reading the property’s value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction. This rule applies to both properties accessed by dot notation and destructuring.\n\n### Options\n\nThis rule takes a list of objects, where the object name and property names are specified:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }]\n    }\n}\n```\n\nMultiple object/property values can be disallowed, and you can specify an optional message:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"anotherDisallowedPropertyName\",\n            \"message\": \"Please use allowedObjectName.allowedPropertyName.\"\n        }]\n    }\n}\n```\n\nIf the object name is omitted, the property is disallowed for all objects:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"property\": \"__defineGetter__\",\n            \"message\": \"Please use Object.defineProperty instead.\"\n        }]\n    }\n}\n```\n\nIf the property name is omitted, accessing any property of the given object is disallowed:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"require\",\n            \"message\": \"Please call require() directly.\"\n        }]\n    }\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXM6IFsyLCB7XG4gICAgXCJvYmplY3RcIjogXCJkaXNhbGxvd2VkT2JqZWN0TmFtZVwiLFxuICAgIFwicHJvcGVydHlcIjogXCJkaXNhbGxvd2VkUHJvcGVydHlOYW1lXCJcbn1dICovXG5cbnZhciBleGFtcGxlID0gZGlzYWxsb3dlZE9iamVjdE5hbWUuZGlzYWxsb3dlZFByb3BlcnR5TmFtZTsgLyplcnJvciBEaXNhbGxvd2VkIG9iamVjdCBwcm9wZXJ0eTogZGlzYWxsb3dlZE9iamVjdE5hbWUuZGlzYWxsb3dlZFByb3BlcnR5TmFtZS4qL1xuXG5kaXNhbGxvd2VkT2JqZWN0TmFtZS5kaXNhbGxvd2VkUHJvcGVydHlOYW1lKCk7IC8qZXJyb3IgRGlzYWxsb3dlZCBvYmplY3QgcHJvcGVydHk6IGRpc2FsbG93ZWRPYmplY3ROYW1lLmRpc2FsbG93ZWRQcm9wZXJ0eU5hbWUuKi8ifQ==)\n\n``` language-js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nvar example = disallowedObjectName.disallowedPropertyName; /*error Disallowed object property: disallowedObjectName.disallowedPropertyName.*/\n\ndisallowedObjectName.disallowedPropertyName(); /*error Disallowed object property: disallowedObjectName.disallowedPropertyName.*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXM6IFsyLCB7XG4gICAgXCJwcm9wZXJ0eVwiOiBcIl9fZGVmaW5lR2V0dGVyX19cIlxufV0gKi9cblxuZm9vLl9fZGVmaW5lR2V0dGVyX18oYmFyLCBiYXopO1xuXG5jb25zdCB7IF9fZGVmaW5lR2V0dGVyX18gfSA9IHF1eCgpO1xuXG4oeyBfX2RlZmluZUdldHRlcl9fIH0pID0+IHt9OyJ9)\n\n``` language-js\n/* eslint no-restricted-properties: [2, {\n    \"property\": \"__defineGetter__\"\n}] */\n\nfoo.__defineGetter__(bar, baz);\n\nconst { __defineGetter__ } = qux();\n\n({ __defineGetter__ }) => {};\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXM6IFsyLCB7XG4gICAgXCJvYmplY3RcIjogXCJyZXF1aXJlXCJcbn1dICovXG5cbnJlcXVpcmUucmVzb2x2ZSgnZm9vJyk7In0=)\n\n``` language-js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"require\"\n}] */\n\nrequire.resolve('foo');\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXM6IFsyLCB7XG4gICAgXCJvYmplY3RcIjogXCJkaXNhbGxvd2VkT2JqZWN0TmFtZVwiLFxuICAgIFwicHJvcGVydHlcIjogXCJkaXNhbGxvd2VkUHJvcGVydHlOYW1lXCJcbn1dICovXG5cbnZhciBleGFtcGxlID0gZGlzYWxsb3dlZE9iamVjdE5hbWUuc29tZVByb3BlcnR5TmFtZTtcblxuYWxsb3dlZE9iamVjdE5hbWUuZGlzYWxsb3dlZFByb3BlcnR5TmFtZSgpOyJ9)\n\n``` language-js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nvar example = disallowedObjectName.somePropertyName;\n\nallowedObjectName.disallowedPropertyName();\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXM6IFsyLCB7XG4gICAgXCJvYmplY3RcIjogXCJyZXF1aXJlXCJcbn1dICovXG5cbnJlcXVpcmUoJ2ZvbycpOyJ9)\n\n``` language-js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"require\"\n}] */\n\nrequire('foo');\n```\n\n## When Not To Use It\n\nIf you don’t have any object/property combinations to restrict, you should not use this rule.\n\n## Related Rules\n\n- [no-restricted-globals](no-restricted-globals)\n- [no-restricted-syntax](no-restricted-syntax)\n\n## Version\n\nThis rule was introduced in ESLint v3.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-restricted-properties.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-restricted-properties.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-restricted-properties](https://eslint.org/docs/latest/rules/no-restricted-properties)"
- name: no-restricted-syntax
  id: rules/no-restricted-syntax
  summary: JavaScript has a lot of language features, and not everyone likes all of them
  description: "# no-restricted-syntax\n\nDisallow specified syntax\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nJavaScript has a lot of language features, and not everyone likes all of them. As a result, some projects choose to disallow the use of certain language features altogether. For instance, you might decide to disallow the use of `try-catch` or `class`, or you might decide to disallow the use of the `in` operator.\n\nRather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their [ESTree](https://github.com/estree/estree) node types. For example, a function declaration is represented by `FunctionDeclaration` and the `with` statement is represented by `WithStatement`. You may find the full list of AST node names you can use [on GitHub](https://github.com/eslint/eslint-visitor-keys/blob/main/lib/visitor-keys.js) and use [AST Explorer](https://astexplorer.net/) with the espree parser to see what type of nodes your code consists of.\n\nYou can also specify [AST selectors](no-restricted-syntax../extend/selectors) to restrict, allowing much more precise control over syntax patterns.\n\n## Rule Details\n\nThis rule disallows specified (that is, user-defined) syntax.\n\n## Options\n\nThis rule takes a list of strings, where each string is an AST selector:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"]\n    }\n}\n```\n\nAlternatively, the rule also accepts objects, where the selector and an optional custom message are specified:\n\n``` language-json\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"FunctionExpression\",\n                \"message\": \"Function expressions are not allowed.\"\n            },\n            {\n                \"selector\": \"CallExpression[callee.name='setTimeout'][arguments.length!=2]\",\n                \"message\": \"setTimeout must always be invoked with two arguments.\"\n            }\n        ]\n    }\n}\n```\n\nIf a custom message is specified with the `message` property, ESLint will use that message when reporting occurrences of the syntax specified in the `selector` property.\n\nThe string and object formats can be freely mixed in the configuration as needed.\n\nExamples of **incorrect** code for this rule with the `\"FunctionExpression\", \"WithStatement\", BinaryExpression[operator='in']` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogW1wiZXJyb3JcIiwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiwgXCJXaXRoU3RhdGVtZW50XCIsIFwiQmluYXJ5RXhwcmVzc2lvbltvcGVyYXRvcj0naW4nXVwiXSAqL1xuXG53aXRoIChtZSkge1xuICAgIGRvbnRNZXNzKCk7XG59XG5cbnZhciBkb1NvbWV0aGluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG5mb28gaW4gYmFyOyJ9)\n\n``` language-js\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nwith (me) {\n    dontMess();\n}\n\nvar doSomething = function () {};\n\nfoo in bar;\n```\n\nExamples of **correct** code for this rule with the `\"FunctionExpression\", \"WithStatement\", BinaryExpression[operator='in']` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogW1wiZXJyb3JcIiwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIiwgXCJXaXRoU3RhdGVtZW50XCIsIFwiQmluYXJ5RXhwcmVzc2lvbltvcGVyYXRvcj0naW4nXVwiXSAqL1xuXG5tZS5kb250TWVzcygpO1xuXG5mdW5jdGlvbiBkb1NvbWV0aGluZygpIHt9O1xuXG5mb28gaW5zdGFuY2VvZiBiYXI7In0=)\n\n``` language-js\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nme.dontMess();\n\nfunction doSomething() {};\n\nfoo instanceof bar;\n```\n\n## When Not To Use It\n\nIf you don’t want to restrict your code from using any JavaScript features or syntax, you should not use this rule.\n\n## Related Rules\n\n- [no-alert](no-alert)\n- [no-console](no-console)\n- [no-debugger](no-debugger)\n- [no-restricted-properties](no-restricted-properties)\n\n## Version\n\nThis rule was introduced in ESLint v1.4.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-restricted-syntax.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-restricted-syntax.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-restricted-syntax](https://eslint.org/docs/latest/rules/no-restricted-syntax)"
- name: no-return-assign
  id: rules/no-return-assign
  summary: One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point
  description: "# no-return-assign\n\nDisallow assignment operators in `return` statements\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [except-parens](#except-parens)\n    2.  [always](#always)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nOne of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a `return` statement. For example:\n\n``` language-js\nfunction doSomething() {\n    return foo = bar + 2;\n}\n```\n\nIt is difficult to tell the intent of the `return` statement here. It’s possible that the function is meant to return the result of `bar + 2`, but then why is it assigning to `foo`? It’s also possible that the intent was to use a comparison operator such as `==` and that this code is an error.\n\nBecause of this ambiguity, it’s considered a best practice to not use assignment in `return` statements.\n\n## Rule Details\n\nThis rule aims to eliminate assignments from `return` statements. As such, it will warn whenever an assignment is found as part of `return`.\n\n## Options\n\nThe rule takes one option, a string, which must contain one of the following values:\n\n- `except-parens` (default): Disallow assignments unless they are enclosed in parentheses.\n- `always`: Disallow all assignments.\n\n### except-parens\n\nThis is the default option. It disallows assignments unless they are enclosed in parentheses.\n\nExamples of **incorrect** code for the default `\"except-parens\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJldHVybi1hc3NpZ246IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nKCkge1xuICAgIHJldHVybiBmb28gPSBiYXIgKyAyO1xufVxuXG5mdW5jdGlvbiBkb1NvbWV0aGluZ0Vsc2UoKSB7XG4gICAgcmV0dXJuIGZvbyArPSAyO1xufVxuXG5jb25zdCBmb28gPSAoYSwgYikgPT4gYSA9IGJcblxuY29uc3QgYmFyID0gKGEsIGIsIGMpID0+IChhID0gYiwgYyA9PSBiKVxuXG5mdW5jdGlvbiBkb1NvbWV0aGluZ01vcmUoKSB7XG4gICAgcmV0dXJuIGZvbyA9IGJhciAmJiBmb28gPiAwO1xufSJ9)\n\n``` language-js\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo += 2;\n}\n\nconst foo = (a, b) => a = b\n\nconst bar = (a, b, c) => (a = b, c == b)\n\nfunction doSomethingMore() {\n    return foo = bar && foo > 0;\n}\n```\n\nExamples of **correct** code for the default `\"except-parens\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJldHVybi1hc3NpZ246IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nKCkge1xuICAgIHJldHVybiBmb28gPT0gYmFyICsgMjtcbn1cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmdFbHNlKCkge1xuICAgIHJldHVybiBmb28gPT09IGJhciArIDI7XG59XG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nTW9yZSgpIHtcbiAgICByZXR1cm4gKGZvbyA9IGJhciArIDIpO1xufVxuXG5jb25zdCBmb28gPSAoYSwgYikgPT4gKGEgPSBiKVxuXG5jb25zdCBiYXIgPSAoYSwgYiwgYykgPT4gKChhID0gYiksIGMgPT0gYilcblxuZnVuY3Rpb24gZG9Bbm90aGVyVGhpbmcoKSB7XG4gICAgcmV0dXJuIChmb28gPSBiYXIpICYmIGZvbyA+IDA7XG59In0=)\n\n``` language-js\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo === bar + 2;\n}\n\nfunction doSomethingMore() {\n    return (foo = bar + 2);\n}\n\nconst foo = (a, b) => (a = b)\n\nconst bar = (a, b, c) => ((a = b), c == b)\n\nfunction doAnotherThing() {\n    return (foo = bar) && foo > 0;\n}\n```\n\n### always\n\nThis option disallows all assignments in `return` statements. All assignments are treated as problems.\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJldHVybi1hc3NpZ246IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmcoKSB7XG4gICAgcmV0dXJuIGZvbyA9IGJhciArIDI7XG59XG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nRWxzZSgpIHtcbiAgICByZXR1cm4gZm9vICs9IDI7XG59XG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nTW9yZSgpIHtcbiAgICByZXR1cm4gKGZvbyA9IGJhciArIDIpO1xufSJ9)\n\n``` language-js\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo += 2;\n}\n\nfunction doSomethingMore() {\n    return (foo = bar + 2);\n}\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXJldHVybi1hc3NpZ246IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmcoKSB7XG4gICAgcmV0dXJuIGZvbyA9PSBiYXIgKyAyO1xufVxuXG5mdW5jdGlvbiBkb1NvbWV0aGluZ0Vsc2UoKSB7XG4gICAgcmV0dXJuIGZvbyA9PT0gYmFyICsgMjtcbn0ifQ==)\n\n``` language-js\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomethingElse() {\n    return foo === bar + 2;\n}\n```\n\n## When Not To Use It\n\nIf you want to allow the use of assignment operators in a `return` statement, then you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-return-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-return-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-return-assign](https://eslint.org/docs/latest/rules/no-return-assign)"
- name: no-script-url
  id: rules/no-script-url
  summary: 'Using javascript: URLs is considered by some as a form of eval'
  description: "# no-script-url\n\nDisallow `javascript:` urls\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Compatibility](#compatibility)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nUsing `javascript:` URLs is considered by some as a form of `eval`. Code passed in `javascript:` URLs has to be parsed and evaluated by the browser in the same way that `eval` is processed.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNjcmlwdC11cmw6IFwiZXJyb3JcIiovXG5cbmxvY2F0aW9uLmhyZWYgPSBcImphdmFzY3JpcHQ6dm9pZCgwKVwiO1xuXG5sb2NhdGlvbi5ocmVmID0gYGphdmFzY3JpcHQ6dm9pZCgwKWA7In0=)\n\n``` language-js\n/*eslint no-script-url: \"error\"*/\n\nlocation.href = \"javascript:void(0)\";\n\nlocation.href = `javascript:void(0)`;\n```\n\n## Compatibility\n\n- **JSHint**: This rule corresponds to `scripturl` rule of JSHint.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[What is the matter with script-targeted URLs?](https://stackoverflow.com/questions/13497971/what-is-the-matter-with-script-targeted-urls)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-script-url.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-script-url.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-script-url](https://eslint.org/docs/latest/rules/no-script-url)"
- name: no-self-assign
  id: rules/no-self-assign
  summary: Self assignments have no effect, so probably those are an error due to incomplete refactoring
  description: "# no-self-assign\n\nDisallow assignments where both sides are exactly the same\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-self-assign../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [props](#props)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nSelf assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.\n\n``` language-js\nfoo = foo;\n[bar, baz] = [bar, qiz];\n```\n\n## Rule Details\n\nThis rule is aimed at eliminating self assignments.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlbGYtYXNzaWduOiBcImVycm9yXCIqL1xuXG5mb28gPSBmb287XG5cblthLCBiXSA9IFthLCBiXTtcblxuW2EsIC4uLmJdID0gW3gsIC4uLmJdO1xuXG4oe2EsIGJ9ID0ge2EsIHh9KTtcblxuZm9vICYmPSBmb287XG5mb28gfHw9IGZvbztcbmZvbyA/Pz0gZm9vOyJ9)\n\n``` language-js\n/*eslint no-self-assign: \"error\"*/\n\nfoo = foo;\n\n[a, b] = [a, b];\n\n[a, ...b] = [x, ...b];\n\n({a, b} = {a, x});\n\nfoo &&= foo;\nfoo ||= foo;\nfoo ??= foo;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlbGYtYXNzaWduOiBcImVycm9yXCIqL1xuXG5mb28gPSBiYXI7XG5bYSwgYl0gPSBbYiwgYV07XG5cbi8vIFRoaXMgcGF0dGVybiBpcyB3YXJuZWQgYnkgdGhlIGBuby11c2UtYmVmb3JlLWRlZmluZWAgcnVsZS5cbmxldCBmb28gPSBmb287XG5cbi8vIFRoZSBkZWZhdWx0IHZhbHVlcyBoYXZlIGFuIGVmZmVjdC5cbltmb28gPSAxXSA9IFtmb29dO1xuXG4vLyBub24tc2VsZi1hc3NpZ25tZW50cyB3aXRoIHByb3BlcnRpZXMuXG5vYmouYSA9IG9iai5iO1xub2JqLmEuYiA9IG9iai5jLmI7XG5vYmouYS5iID0gb2JqLmEuYztcbm9ialthXSA9IG9ialtcImFcIl07XG5cbi8vIFRoaXMgaWdub3JlcyBpZiB0aGVyZSBpcyBhIGZ1bmN0aW9uIGNhbGwuXG5vYmouYSgpLmIgPSBvYmouYSgpLmI7XG5hKCkuYiA9IGEoKS5iO1xuXG4vLyBgJj1gIGFuZCBgfD1gIGhhdmUgYW4gZWZmZWN0IG9uIG5vbi1pbnRlZ2Vycy5cbmZvbyAmPSBmb287XG5mb28gfD0gZm9vO1xuXG4vLyBLbm93biBsaW1pdGF0aW9uOiB0aGlzIGRvZXMgbm90IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyBleGNlcHQgc2luZ2xlIGxpdGVyYWwgb3Igc2luZ2xlIGlkZW50aWZpZXIuXG5vYmpbYSArIGJdID0gb2JqW2EgKyBiXTtcbm9ialtcImFcIiArIFwiYlwiXSA9IG9ialtcImFcIiArIFwiYlwiXTsifQ==)\n\n``` language-js\n/*eslint no-self-assign: \"error\"*/\n\nfoo = bar;\n[a, b] = [b, a];\n\n// This pattern is warned by the `no-use-before-define` rule.\nlet foo = foo;\n\n// The default values have an effect.\n[foo = 1] = [foo];\n\n// non-self-assignments with properties.\nobj.a = obj.b;\nobj.a.b = obj.c.b;\nobj.a.b = obj.a.c;\nobj[a] = obj[\"a\"];\n\n// This ignores if there is a function call.\nobj.a().b = obj.a().b;\na().b = a().b;\n\n// `&=` and `|=` have an effect on non-integers.\nfoo &= foo;\nfoo |= foo;\n\n// Known limitation: this does not support computed properties except single literal or single identifier.\nobj[a + b] = obj[a + b];\nobj[\"a\" + \"b\"] = obj[\"a\" + \"b\"];\n```\n\n## Options\n\nThis rule has the option to check properties as well.\n\n``` language-json\n{\n    \"no-self-assign\": [\"error\", {\"props\": true}]\n}\n```\n\n- `props` - if this is `true`, `no-self-assign` rule warns self-assignments of properties. Default is `true`.\n\n### props\n\nExamples of **correct** code with the `{ \"props\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlbGYtYXNzaWduOiBbXCJlcnJvclwiLCB7XCJwcm9wc1wiOiBmYWxzZX1dKi9cblxuLy8gc2VsZi1hc3NpZ25tZW50cyB3aXRoIHByb3BlcnRpZXMuXG5vYmouYSA9IG9iai5hO1xub2JqLmEuYiA9IG9iai5hLmI7XG5vYmpbXCJhXCJdID0gb2JqW1wiYVwiXTtcbm9ialthXSA9IG9ialthXTsifQ==)\n\n``` language-js\n/*eslint no-self-assign: [\"error\", {\"props\": false}]*/\n\n// self-assignments with properties.\nobj.a = obj.a;\nobj.a.b = obj.a.b;\nobj[\"a\"] = obj[\"a\"];\nobj[a] = obj[a];\n```\n\n## When Not To Use It\n\nIf you don’t want to notify about self assignments, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-rc.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-self-assign.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-self-assign.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-self-assign](https://eslint.org/docs/latest/rules/no-self-assign)"
- name: no-self-compare
  id: rules/no-self-compare
  summary: Comparing a variable against itself is usually an error, either a typo or refactoring error
  description: "# no-self-compare\n\nDisallow comparisons where both sides are exactly the same\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nComparing a variable against itself is usually an error, either a typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.\n\nThe only time you would compare a variable against itself is when you are testing for `NaN`. However, it is far more appropriate to use `typeof x === 'number' && isNaN(x)` or the [Number.isNaN ES2015 function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) for that use case rather than leaving the reader of the code to determine the intent of self comparison.\n\n## Rule Details\n\nThis error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlbGYtY29tcGFyZTogXCJlcnJvclwiKi9cblxudmFyIHggPSAxMDtcbmlmICh4ID09PSB4KSB7XG4gICAgeCA9IDIwO1xufSJ9)\n\n``` language-js\n/*eslint no-self-compare: \"error\"*/\n\nvar x = 10;\nif (x === x) {\n    x = 20;\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-self-compare.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-self-compare.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-self-compare](https://eslint.org/docs/latest/rules/no-self-compare)"
- name: no-sequences
  id: rules/no-sequences
  summary: The comma operator includes multiple expressions where only one is expected
  description: "# no-sequences\n\nDisallow comma operators\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Note about arrow function bodies](#note-about-arrow-function-bodies)\n2.  [Options](#options)\n    1.  [allowInParentheses](#allowinparentheses)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:\n\n``` language-js\nvar a = (3, 5); // a = 5\n\na = b += 5, a + b;\n\nwhile (a = next(), a && a.length);\n\n(0, eval)(\"doSomething();\");\n```\n\n## Rule Details\n\nThis rule forbids the use of the comma operator, with the following exceptions:\n\n- In the initialization or update portions of a `for` statement.\n- By default, if the expression sequence is explicitly wrapped in parentheses. This exception can be removed with the `allowInParentheses` option.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogXCJlcnJvclwiKi9cblxuZm9vID0gZG9Tb21ldGhpbmcoKSwgdmFsO1xuXG4wLCBldmFsKFwiZG9Tb21ldGhpbmcoKTtcIik7XG5cbmRvIHt9IHdoaWxlIChkb1NvbWV0aGluZygpLCAhIXRlc3QpO1xuXG5mb3IgKDsgZG9Tb21ldGhpbmcoKSwgISF0ZXN0OyApO1xuXG5pZiAoZG9Tb21ldGhpbmcoKSwgISF0ZXN0KTtcblxuc3dpdGNoICh2YWwgPSBmb28oKSwgdmFsKSB7fVxuXG53aGlsZSAodmFsID0gZm9vKCksIHZhbCA8IDQyKTtcblxud2l0aCAoZG9Tb21ldGhpbmcoKSwgdmFsKSB7fSJ9)\n\n``` language-js\n/*eslint no-sequences: \"error\"*/\n\nfoo = doSomething(), val;\n\n0, eval(\"doSomething();\");\n\ndo {} while (doSomething(), !!test);\n\nfor (; doSomething(), !!test; );\n\nif (doSomething(), !!test);\n\nswitch (val = foo(), val) {}\n\nwhile (val = foo(), val < 42);\n\nwith (doSomething(), val) {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogXCJlcnJvclwiKi9cblxuZm9vID0gKGRvU29tZXRoaW5nKCksIHZhbCk7XG5cbigwLCBldmFsKShcImRvU29tZXRoaW5nKCk7XCIpO1xuXG5kbyB7fSB3aGlsZSAoKGRvU29tZXRoaW5nKCksICEhdGVzdCkpO1xuXG5mb3IgKGkgPSAwLCBqID0gMTA7IGkgPCBqOyBpKyssIGotLSk7XG5cbmlmICgoZG9Tb21ldGhpbmcoKSwgISF0ZXN0KSk7XG5cbnN3aXRjaCAoKHZhbCA9IGZvbygpLCB2YWwpKSB7fVxuXG53aGlsZSAoKHZhbCA9IGZvbygpLCB2YWwgPCA0MikpO1xuXG53aXRoICgoZG9Tb21ldGhpbmcoKSwgdmFsKSkge30ifQ==)\n\n``` language-js\n/*eslint no-sequences: \"error\"*/\n\nfoo = (doSomething(), val);\n\n(0, eval)(\"doSomething();\");\n\ndo {} while ((doSomething(), !!test));\n\nfor (i = 0, j = 10; i < j; i++, j--);\n\nif ((doSomething(), !!test));\n\nswitch ((val = foo(), val)) {}\n\nwhile ((val = foo(), val < 42));\n\nwith ((doSomething(), val)) {}\n```\n\n### Note about arrow function bodies\n\nIf an arrow function body is a statement rather than a block, and that statement contains a sequence, you need to use double parentheses around the statement to indicate that the sequence is intentional.\n\nExamples of **incorrect** code for arrow functions:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogXCJlcnJvclwiKi9cbmNvbnN0IGZvbyA9ICh2YWwpID0+IChjb25zb2xlLmxvZygnYmFyJyksIHZhbCk7XG5cbmNvbnN0IGJheiA9ICgpID0+ICgoYmFyID0gMTIzKSwgMTApO1xuXG5jb25zdCBxdXggPSAoKSA9PiB7IHJldHVybiAoYmFyID0gMTIzKSwgMTAgfSJ9)\n\n``` language-js\n/*eslint no-sequences: \"error\"*/\nconst foo = (val) => (console.log('bar'), val);\n\nconst baz = () => ((bar = 123), 10);\n\nconst qux = () => { return (bar = 123), 10 }\n```\n\nExamples of **correct** code for arrow functions:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogXCJlcnJvclwiKi9cbmNvbnN0IGZvbyA9ICh2YWwpID0+ICgoY29uc29sZS5sb2coJ2JhcicpLCB2YWwpKTtcblxuY29uc3QgYmF6ID0gKCkgPT4gKCgoYmFyID0gMTIzKSwgMTApKTtcblxuY29uc3QgcXV4ID0gKCkgPT4geyByZXR1cm4gKChiYXIgPSAxMjMpLCAxMCkgfSJ9)\n\n``` language-js\n/*eslint no-sequences: \"error\"*/\nconst foo = (val) => ((console.log('bar'), val));\n\nconst baz = () => (((bar = 123), 10));\n\nconst qux = () => { return ((bar = 123), 10) }\n```\n\n## Options\n\nThis rule takes one option, an object, with the following properties:\n\n- `\"allowInParentheses\"`: If set to `true` (default), this rule allows expression sequences that are explicitly wrapped in parentheses.\n\n### allowInParentheses\n\nExamples of **incorrect** code for this rule with the `{ \"allowInParentheses\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogW1wiZXJyb3JcIiwgeyBcImFsbG93SW5QYXJlbnRoZXNlc1wiOiBmYWxzZSB9XSovXG5cbmZvbyA9IChkb1NvbWV0aGluZygpLCB2YWwpO1xuXG4oMCwgZXZhbCkoXCJkb1NvbWV0aGluZygpO1wiKTtcblxuZG8ge30gd2hpbGUgKChkb1NvbWV0aGluZygpLCAhIXRlc3QpKTtcblxuZm9yICg7IChkb1NvbWV0aGluZygpLCAhIXRlc3QpOyApO1xuXG5pZiAoKGRvU29tZXRoaW5nKCksICEhdGVzdCkpO1xuXG5zd2l0Y2ggKCh2YWwgPSBmb28oKSwgdmFsKSkge31cblxud2hpbGUgKCh2YWwgPSBmb28oKSwgdmFsIDwgNDIpKTtcblxud2l0aCAoKGRvU29tZXRoaW5nKCksIHZhbCkpIHt9XG5cbmNvbnN0IGZvbyA9ICh2YWwpID0+ICgoY29uc29sZS5sb2coJ2JhcicpLCB2YWwpKTsifQ==)\n\n``` language-js\n/*eslint no-sequences: [\"error\", { \"allowInParentheses\": false }]*/\n\nfoo = (doSomething(), val);\n\n(0, eval)(\"doSomething();\");\n\ndo {} while ((doSomething(), !!test));\n\nfor (; (doSomething(), !!test); );\n\nif ((doSomething(), !!test));\n\nswitch ((val = foo(), val)) {}\n\nwhile ((val = foo(), val < 42));\n\nwith ((doSomething(), val)) {}\n\nconst foo = (val) => ((console.log('bar'), val));\n```\n\nExamples of **correct** code for this rule with the `{ \"allowInParentheses\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNlcXVlbmNlczogW1wiZXJyb3JcIiwgeyBcImFsbG93SW5QYXJlbnRoZXNlc1wiOiBmYWxzZSB9XSovXG5cbmZvciAoaSA9IDAsIGogPSAxMDsgaSA8IGo7IGkrKywgai0tKTsifQ==)\n\n``` language-js\n/*eslint no-sequences: [\"error\", { \"allowInParentheses\": false }]*/\n\nfor (i = 0, j = 10; i < j; i++, j--);\n```\n\n## When Not To Use It\n\nDisable this rule if sequence expressions with the comma operator are acceptable. Another case is where you might want to report all usages of the comma operator, even in a for loop. You can achieve this using rule `no-restricted-syntax`:\n\n``` language-js\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\"error\", \"SequenceExpression\"]\n    }\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.5.1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-sequences.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-sequences.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-sequences](https://eslint.org/docs/latest/rules/no-sequences)"
- name: no-setter-return
  id: rules/no-setter-return
  summary: Setters cannot return values
  description: "# no-setter-return\n\nDisallow returning values from setters\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-setter-return../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nSetters cannot return values.\n\nWhile returning a value from a setter does not produce an error, the returned value is being ignored. Therefore, returning a value from a setter is either unnecessary or a possible error, since the returned value cannot be used.\n\n## Rule Details\n\nThis rule disallows returning values from setters and reports `return` statements in setter functions.\n\nOnly `return` without a value is allowed, as it’s a control flow statement.\n\nThis rule checks setters in:\n\n- Object literals.\n- Class declarations and class expressions.\n- Property descriptors in `Object.create`, `Object.defineProperty`, `Object.defineProperties`, and `Reflect.defineProperty` methods of the global objects.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNldHRlci1yZXR1cm46IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5cbmNsYXNzIEZvbyB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZSAqIDI7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59XG5cbmNvbnN0IEJhciA9IGNsYXNzIHtcbiAgICBzdGF0aWMgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhpcy52YWwgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9vLCBcImJhclwiLCB7XG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn0pOyJ9)\n\n``` language-js\n/*eslint no-setter-return: \"error\"*/\n\nvar foo = {\n    set a(value) {\n        this.val = value;\n        return value;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value * 2;\n        return this.val;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        if (value < 0) {\n            this.val = 0;\n            return 0;\n        }\n        this.val = value;\n    }\n};\n\nObject.defineProperty(foo, \"bar\", {\n    set(value) {\n        if (value < 0) {\n            return false;\n        }\n        this.val = value;\n    }\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNldHRlci1yZXR1cm46IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSB7XG4gICAgc2V0IGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5jbGFzcyBGb28ge1xuICAgIHNldCBhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsdWUgKiAyO1xuICAgIH1cbn1cblxuY29uc3QgQmFyID0gY2xhc3Mge1xuICAgIHN0YXRpYyBzZXQgYSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnZhbCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9vLCBcImJhclwiLCB7XG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5lZ2F0aXZlIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbCA9IHZhbHVlO1xuICAgIH1cbn0pOyJ9)\n\n``` language-js\n/*eslint no-setter-return: \"error\"*/\n\nvar foo = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value * 2;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        if (value < 0) {\n            this.val = 0;\n            return;\n        }\n        this.val = value;\n    }\n};\n\nObject.defineProperty(foo, \"bar\", {\n    set(value) {\n        if (value < 0) {\n            throw new Error(\"Negative value.\");\n        }\n        this.val = value;\n    }\n});\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Related Rules\n\n- [getter-return](getter-return)\n\n## Version\n\nThis rule was introduced in ESLint v6.7.0.\n\n## Further Reading\n\n[setter - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-setter-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-setter-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-setter-return](https://eslint.org/docs/latest/rules/no-setter-return)"
- name: no-shadow
  id: rules/no-shadow
  summary: Shadowing is the process by which a local variable shares the same name as a variable in its containing scope
  description: "# no-shadow\n\nDisallow variable declarations from shadowing variables declared in the outer scope\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [builtinGlobals](#builtinglobals)\n    2.  [hoist](#hoist)\n        1.  [hoist: functions](#hoist-functions)\n        2.  [hoist: all](#hoist-all)\n        3.  [hoist: never](#hoist-never)\n    3.  [allow](#allow)\n    4.  [ignoreOnInitialization](#ignoreoninitialization)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nShadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:\n\n``` language-js\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n```\n\nIn this case, the variable `a` inside of `b()` is shadowing the variable `a` in the global scope. This can cause confusion while reading the code and it’s impossible to access the global variable.\n\n## Rule Details\n\nThis rule aims to eliminate shadowed variable declarations.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgYSA9IDM7XG5mdW5jdGlvbiBiKCkge1xuICAgIHZhciBhID0gMTA7XG59XG5cbnZhciBjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhID0gMTA7XG59XG5cbmZ1bmN0aW9uIGQoYSkge1xuICAgIGEgPSAxMDtcbn1cbmQoYSk7XG5cbmlmICh0cnVlKSB7XG4gICAgbGV0IGEgPSA1O1xufSJ9)\n\n``` language-js\n/*eslint no-shadow: \"error\"*/\n/*eslint-env es6*/\n\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n\nvar c = function () {\n    var a = 10;\n}\n\nfunction d(a) {\n    a = 10;\n}\nd(a);\n\nif (true) {\n    let a = 5;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with properties `\"builtinGlobals\"`, `\"hoist\"`, `\"allow\"` and `\"ignoreOnInitialization\"`.\n\n``` language-json\n{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [], \"ignoreOnInitialization\": false }]\n}\n```\n\n### builtinGlobals\n\nThe `builtinGlobals` option is `false` by default. If it is `true`, the rule prevents shadowing of built-in global variables: `Object`, `Array`, `Number`, and so on.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImJ1aWx0aW5HbG9iYWxzXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIE9iamVjdCA9IDA7XG59In0=)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"builtinGlobals\": true }]*/\n\nfunction foo() {\n    var Object = 0;\n}\n```\n\n### hoist\n\nThe `hoist` option has three settings:\n\n- `functions` (by default) - reports shadowing before the outer functions are defined.\n- `all` - reports all shadowing before the outer variables/functions are defined.\n- `never` - never report shadowing before the outer variables/functions are defined.\n\n#### hoist: functions\n\nExamples of **incorrect** code for the default `{ \"hoist\": \"functions\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImhvaXN0XCI6IFwiZnVuY3Rpb25zXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmlmICh0cnVlKSB7XG4gICAgbGV0IGIgPSA2O1xufVxuXG5mdW5jdGlvbiBiKCkge30ifQ==)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let b = 6;\n}\n\nfunction b() {}\n```\n\nAlthough `let b` in the `if` statement is before the *function* declaration in the outer scope, it is incorrect.\n\nExamples of **correct** code for the default `{ \"hoist\": \"functions\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImhvaXN0XCI6IFwiZnVuY3Rpb25zXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmlmICh0cnVlKSB7XG4gICAgbGV0IGEgPSAzO1xufVxuXG5sZXQgYSA9IDU7In0=)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n}\n\nlet a = 5;\n```\n\nBecause `let a` in the `if` statement is before the *variable* declaration in the outer scope, it is correct.\n\n#### hoist: all\n\nExamples of **incorrect** code for the `{ \"hoist\": \"all\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImhvaXN0XCI6IFwiYWxsXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmlmICh0cnVlKSB7XG4gICAgbGV0IGEgPSAzO1xuICAgIGxldCBiID0gNjtcbn1cblxubGV0IGEgPSA1O1xuZnVuY3Rpb24gYigpIHt9In0=)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"all\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\n#### hoist: never\n\nExamples of **correct** code for the `{ \"hoist\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImhvaXN0XCI6IFwibmV2ZXJcIiB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuaWYgKHRydWUpIHtcbiAgICBsZXQgYSA9IDM7XG4gICAgbGV0IGIgPSA2O1xufVxuXG5sZXQgYSA9IDU7XG5mdW5jdGlvbiBiKCkge30ifQ==)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\nBecause `let a` and `let b` in the `if` statement are before the declarations in the outer scope, they are correct.\n\n### allow\n\nThe `allow` option is an array of identifier names for which shadowing is allowed. For example, `\"resolve\"`, `\"reject\"`, `\"done\"`, `\"cb\"`.\n\nExamples of **correct** code for the `{ \"allow\": [\"done\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImFsbG93XCI6IFtcImRvbmVcIl0gfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmltcG9ydCBhc3luYyBmcm9tICdhc3luYyc7XG5cbmZ1bmN0aW9uIGZvbyhkb25lKSB7XG4gIGFzeW5jLm1hcChbMSwgMl0sIGZ1bmN0aW9uIChlLCBkb25lKSB7XG4gICAgZG9uZShudWxsLCBlICogMilcbiAgfSwgZG9uZSk7XG59XG5cbmZvbyhmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgY29uc29sZS5sb2coeyBlcnIsIHJlc3VsdCB9KTtcbn0pOyJ9)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"allow\": [\"done\"] }]*/\n/*eslint-env es6*/\n\nimport async from 'async';\n\nfunction foo(done) {\n  async.map([1, 2], function (e, done) {\n    done(null, e * 2)\n  }, done);\n}\n\nfoo(function (err, result) {\n  console.log({ err, result });\n});\n```\n\n### ignoreOnInitialization\n\nThe `ignoreOnInitialization` option is `false` by default. If it is `true`, it prevents reporting shadowing of variables in their initializers when the shadowed variable is presumably still uninitialized.\n\nThe shadowed variable must be on the left side. The shadowing variable must be on the right side and declared in a callback function or in an IIFE.\n\nExamples of **incorrect** code for the `{ \"ignoreOnInitialization\": \"true\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU9uSW5pdGlhbGl6YXRpb25cIjogdHJ1ZSB9XSovXG5cbnZhciB4ID0geCA9PiB4OyJ9)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"ignoreOnInitialization\": true }]*/\n\nvar x = x => x;\n```\n\nBecause the shadowing variable `x` will shadow the already initialized shadowed variable `x`.\n\nExamples of **correct** code for the `{ \"ignoreOnInitialization\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdzogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU9uSW5pdGlhbGl6YXRpb25cIjogdHJ1ZSB9XSovXG5cbnZhciB4ID0gZm9vKHggPT4geClcblxudmFyIHkgPSAoeSA9PiB5KSgpIn0=)\n\n``` language-js\n/*eslint no-shadow: [\"error\", { \"ignoreOnInitialization\": true }]*/\n\nvar x = foo(x => x)\n\nvar y = (y => y)()\n```\n\nThe rationale for callback functions is the assumption that they will be called during the initialization, so that at the time when the shadowing variable will be used, the shadowed variable has not yet been initialized.\n\n## Related Rules\n\n- [no-shadow-restricted-names](no-shadow-restricted-names)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Further Reading\n\n[Variable shadowing - Wikipedia](https://en.wikipedia.org/wiki/Variable_shadowing)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-shadow.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-shadow.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-shadow](https://eslint.org/docs/latest/rules/no-shadow)"
- name: no-shadow-restricted-names
  id: rules/no-shadow-restricted-names
  summary: ES5 §15.1.1 Value Properties of the Global Object (NaN, Infinity, undefined) as well as strict mode restricted identifiers eval and arguments are considered to be restricted names in JavaScript
  description: "# no-shadow-restricted-names\n\nDisallow identifiers from shadowing restricted names\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-shadow-restricted-names../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nES5 §15.1.1 Value Properties of the Global Object (`NaN`, `Infinity`, `undefined`) as well as strict mode restricted identifiers `eval` and `arguments` are considered to be restricted names in JavaScript. Defining them to mean something else can have unintended consequences and confuse others reading the code. For example, there’s nothing preventing you from writing:\n\n``` language-js\nvar undefined = \"foo\";\n```\n\nThen any code used within the same scope would not get the global `undefined`, but rather the local version with a very different meaning.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBOYU4oKXt9XG5cbiFmdW5jdGlvbihJbmZpbml0eSl7fTtcblxudmFyIHVuZGVmaW5lZCA9IDU7XG5cbnRyeSB7fSBjYXRjaChldmFsKXt9In0=)\n\n``` language-js\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nfunction NaN(){}\n\n!function(Infinity){};\n\nvar undefined = 5;\n\ntry {} catch(eval){}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzOiBcImVycm9yXCIqL1xuXG52YXIgT2JqZWN0O1xuXG5mdW5jdGlvbiBmKGEsIGIpe31cblxuLy8gRXhjZXB0aW9uOiBgdW5kZWZpbmVkYCBtYXkgYmUgc2hhZG93ZWQgaWYgdGhlIHZhcmlhYmxlIGlzIG5ldmVyIGFzc2lnbmVkIGEgdmFsdWUuXG52YXIgdW5kZWZpbmVkOyJ9)\n\n``` language-js\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nvar Object;\n\nfunction f(a, b){}\n\n// Exception: `undefined` may be shadowed if the variable is never assigned a value.\nvar undefined;\n```\n\n## Related Rules\n\n- [no-shadow](no-shadow)\n\n## Version\n\nThis rule was introduced in ESLint v0.1.4.\n\n## Further Reading\n\n[Annotated ES5](https://es5.github.io/#x15.1.1)  \n\n[Annotated ES5](https://es5.github.io/#C)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-shadow-restricted-names.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-shadow-restricted-names.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-shadow-restricted-names](https://eslint.org/docs/latest/rules/no-shadow-restricted-names)"
- name: no-spaced-func
  id: rules/no-spaced-func
  summary: This rule was deprecated in ESLint v3.3.0 and replaced by the func-call-spacing rule
  description: "# no-spaced-func\n\nDisallow spacing between function identifiers and their applications (deprecated)\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-spaced-func../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v3.3.0 and replaced by the [func-call-spacing](no-spaced-funcfunc-call-spacing) rule.\n\nWhile it’s possible to have whitespace between the name of a function and the parentheses that execute it, such patterns tend to look more like errors.\n\n## Rule Details\n\nThis rule disallows spacing between function identifiers and their applications.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNwYWNlZC1mdW5jOiBcImVycm9yXCIqL1xuXG5mbiAoKVxuXG5mblxuKCkifQ==)\n\n``` language-js\n/*eslint no-spaced-func: \"error\"*/\n\nfn ()\n\nfn\n()\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNwYWNlZC1mdW5jOiBcImVycm9yXCIqL1xuXG5mbigpIn0=)\n\n``` language-js\n/*eslint no-spaced-func: \"error\"*/\n\nfn()\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.1.2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-spaced-func.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-spaced-func.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-spaced-func](https://eslint.org/docs/latest/rules/no-spaced-func)"
- name: no-sparse-arrays
  id: rules/no-sparse-arrays
  summary: While the items array in this example has a length of 2, there are actually no values in items[0] or items[1]
  description: "# no-sparse-arrays\n\nDisallow sparse arrays\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-sparse-arrays../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nSparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:\n\n``` language-js\nvar items = [,,];\n```\n\nWhile the `items` array in this example has a `length` of 2, there are actually no values in `items[0]` or `items[1]`. The fact that the array literal is valid with only commas inside, coupled with the `length` being set and actual item values not being set, make sparse arrays confusing for many developers. Consider the following:\n\n``` language-js\nvar colors = [ \"red\",, \"blue\" ];\n```\n\nIn this example, the `colors` array has a `length` of 3. But did the developer intend for there to be an empty spot in the middle of the array? Or is it a typo?\n\nThe confusion around sparse arrays defined in this manner is enough that it’s recommended to avoid using them unless you are certain that they are useful in your code.\n\n## Rule Details\n\nThis rule disallows sparse array literals which have “holes” where commas are not preceded by elements. It does not apply to a trailing comma following the last element.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNwYXJzZS1hcnJheXM6IFwiZXJyb3JcIiovXG5cbnZhciBpdGVtcyA9IFssXTtcbnZhciBjb2xvcnMgPSBbIFwicmVkXCIsLCBcImJsdWVcIiBdOyJ9)\n\n``` language-js\n/*eslint no-sparse-arrays: \"error\"*/\n\nvar items = [,];\nvar colors = [ \"red\",, \"blue\" ];\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXNwYXJzZS1hcnJheXM6IFwiZXJyb3JcIiovXG5cbnZhciBpdGVtcyA9IFtdO1xudmFyIGl0ZW1zID0gbmV3IEFycmF5KDIzKTtcblxuLy8gdHJhaWxpbmcgY29tbWEgKGFmdGVyIHRoZSBsYXN0IGVsZW1lbnQpIGlzIG5vdCBhIHByb2JsZW1cbnZhciBjb2xvcnMgPSBbIFwicmVkXCIsIFwiYmx1ZVwiLCBdOyJ9)\n\n``` language-js\n/*eslint no-sparse-arrays: \"error\"*/\n\nvar items = [];\nvar items = new Array(23);\n\n// trailing comma (after the last element) is not a problem\nvar colors = [ \"red\", \"blue\", ];\n```\n\n## When Not To Use It\n\nIf you want to use sparse arrays, then it is safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.4.0.\n\n## Further Reading\n\n[Inconsistent array literals](https://www.nczonline.net/blog/2007/09/09/inconsistent-array-literals/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-sparse-arrays.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-sparse-arrays.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-sparse-arrays](https://eslint.org/docs/latest/rules/no-sparse-arrays)"
- name: no-template-curly-in-string
  id: rules/no-template-curly-in-string
  summary: ECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like ${variable} between two backtick quotes (`)
  description: "# no-template-curly-in-string\n\nDisallow template literal placeholder syntax in regular strings\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like `${variable}` between two backtick quotes (\\`). It can be easy to use the wrong quotes when wanting to use template literals, by writing `\"${variable}\"`, and end up with the literal value `\"${variable}\"` instead of a string containing the value of the injected expressions.\n\n## Rule Details\n\nThis rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal placeholder (`${something}`) that uses either `\"` or `'` for the quotes.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZzogXCJlcnJvclwiKi9cblwiSGVsbG8gJHtuYW1lfSFcIjtcbidIZWxsbyAke25hbWV9ISc7XG5cIlRpbWU6ICR7MTIgKiA2MCAqIDYwICogMTAwMH1cIjsifQ==)\n\n``` language-js\n/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZzogXCJlcnJvclwiKi9cbmBIZWxsbyAke25hbWV9IWA7XG5gVGltZTogJHsxMiAqIDYwICogNjAgKiAxMDAwfWA7XG5cbnRlbXBsYXRlRnVuY3Rpb25gSGVsbG8gJHtuYW1lfWA7In0=)\n\n``` language-js\n/*eslint no-template-curly-in-string: \"error\"*/\n`Hello ${name}!`;\n`Time: ${12 * 60 * 60 * 1000}`;\n\ntemplateFunction`Hello ${name}`;\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\n## Version\n\nThis rule was introduced in ESLint v3.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-template-curly-in-string.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-template-curly-in-string.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-template-curly-in-string](https://eslint.org/docs/latest/rules/no-template-curly-in-string)"
- name: no-ternary
  id: rules/no-ternary
  summary: The ternary operator is used to conditionally assign a value to a variable
  description: "# no-ternary\n\nDisallow ternary operators\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThe ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.\n\n``` language-js\nvar foo = isBar ? baz : qux;\n```\n\n## Rule Details\n\nThis rule disallows ternary operators.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRlcm5hcnk6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSBpc0JhciA/IGJheiA6IHF1eDtcblxuZnVuY3Rpb24gcXV1eCgpIHtcbiAgcmV0dXJuIGZvbyA/IGJhcigpIDogYmF6KCk7XG59In0=)\n\n``` language-js\n/*eslint no-ternary: \"error\"*/\n\nvar foo = isBar ? baz : qux;\n\nfunction quux() {\n  return foo ? bar() : baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRlcm5hcnk6IFwiZXJyb3JcIiovXG5cbnZhciBmb287XG5cbmlmIChpc0Jhcikge1xuICAgIGZvbyA9IGJhejtcbn0gZWxzZSB7XG4gICAgZm9vID0gcXV4O1xufVxuXG5mdW5jdGlvbiBxdXV4KCkge1xuICAgIGlmIChmb28pIHtcbiAgICAgICAgcmV0dXJuIGJhcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiYXooKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-ternary: \"error\"*/\n\nvar foo;\n\nif (isBar) {\n    foo = baz;\n} else {\n    foo = qux;\n}\n\nfunction quux() {\n    if (foo) {\n        return bar();\n    } else {\n        return baz();\n    }\n}\n```\n\n## Related Rules\n\n- [no-nested-ternary](no-nested-ternary)\n- [no-unneeded-ternary](no-unneeded-ternary)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-ternary.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-ternary.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-ternary](https://eslint.org/docs/latest/rules/no-ternary)"
- name: no-this-before-super
  id: rules/no-this-before-super
  summary: In the constructor of derived classes, if this/super are used before super() calls, it raises a reference error
  description: "# no-this-before-super\n\nDisallow `this`/`super` before calling `super()` in constructors\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-this-before-super../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIn the constructor of derived classes, if `this`/`super` are used before `super()` calls, it raises a reference error.\n\nThis rule checks `this`/`super` keywords in constructors, then reports those that are before `super()`.\n\n## Rule Details\n\nThis rule is aimed to flag `this`/`super` keywords before `super()` callings.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRoaXMtYmVmb3JlLXN1cGVyOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEExIGV4dGVuZHMgQiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYSA9IDA7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuXG5jbGFzcyBBMiBleHRlbmRzIEIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZvbygpO1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cblxuY2xhc3MgQTMgZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIuZm9vKCk7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuXG5jbGFzcyBBNCBleHRlbmRzIEIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih0aGlzLmZvbygpKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-this-before-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A1 extends B {\n    constructor() {\n        this.a = 0;\n        super();\n    }\n}\n\nclass A2 extends B {\n    constructor() {\n        this.foo();\n        super();\n    }\n}\n\nclass A3 extends B {\n    constructor() {\n        super.foo();\n        super();\n    }\n}\n\nclass A4 extends B {\n    constructor() {\n        super(this.foo());\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRoaXMtYmVmb3JlLXN1cGVyOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEExIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hID0gMDsgLy8gT0ssIHRoaXMgY2xhc3MgZG9lc24ndCBoYXZlIGFuIGBleHRlbmRzYCBjbGF1c2UuXG4gICAgfVxufVxuXG5jbGFzcyBBMiBleHRlbmRzIEIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmEgPSAwOyAvLyBPSywgdGhpcyBpcyBhZnRlciBgc3VwZXIoKWAuXG4gICAgfVxufVxuXG5jbGFzcyBBMyBleHRlbmRzIEIge1xuICAgIGZvbygpIHtcbiAgICAgICAgdGhpcy5hID0gMDsgLy8gT0suIHRoaXMgaXMgbm90IGluIGEgY29uc3RydWN0b3IuXG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-this-before-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A1 {\n    constructor() {\n        this.a = 0; // OK, this class doesn't have an `extends` clause.\n    }\n}\n\nclass A2 extends B {\n    constructor() {\n        super();\n        this.a = 0; // OK, this is after `super()`.\n    }\n}\n\nclass A3 extends B {\n    foo() {\n        this.a = 0; // OK. this is not in a constructor.\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about using `this`/`super` before `super()` in constructors, you can safely disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.24.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-this-before-super.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-this-before-super.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-this-before-super](https://eslint.org/docs/latest/rules/no-this-before-super)"
- name: no-throw-literal
  id: rules/no-throw-literal
  summary: It is considered good practice to only throw the Error object itself or an object using the Error object as base objects for user-defined exceptions
  description: "# no-throw-literal\n\nDisallow throwing literals as exceptions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Known Limitations](#known-limitations)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIt is considered good practice to only `throw` the `Error` object itself or an object using the `Error` object as base objects for user-defined exceptions. The fundamental benefit of `Error` objects is that they automatically keep track of where they were built and originated.\n\nThis rule restricts what can be thrown as an exception. When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an `Error` object.\n\n## Rule Details\n\nThis rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an `Error` object.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRocm93LWxpdGVyYWw6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudGhyb3cgXCJlcnJvclwiO1xuXG50aHJvdyAwO1xuXG50aHJvdyB1bmRlZmluZWQ7XG5cbnRocm93IG51bGw7XG5cbnZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbnRocm93IFwiYW4gXCIgKyBlcnI7XG4vLyBlcnIgaXMgcmVjYXN0IHRvIGEgc3RyaW5nIGxpdGVyYWxcblxudmFyIGVyciA9IG5ldyBFcnJvcigpO1xudGhyb3cgYCR7ZXJyfWBcbiJ9)\n\n``` language-js\n/*eslint no-throw-literal: \"error\"*/\n/*eslint-env es6*/\n\nthrow \"error\";\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nvar err = new Error();\nthrow \"an \" + err;\n// err is recast to a string literal\n\nvar err = new Error();\nthrow `${err}`\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRocm93LWxpdGVyYWw6IFwiZXJyb3JcIiovXG5cbnRocm93IG5ldyBFcnJvcigpO1xuXG50aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKTtcblxudmFyIGUgPSBuZXcgRXJyb3IoXCJlcnJvclwiKTtcbnRocm93IGU7XG5cbnRyeSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZXJyb3JcIik7XG59IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgZTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-throw-literal: \"error\"*/\n\nthrow new Error();\n\nthrow new Error(\"error\");\n\nvar e = new Error(\"error\");\nthrow e;\n\ntry {\n    throw new Error(\"error\");\n} catch (e) {\n    throw e;\n}\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule cannot guarantee that you will only throw `Error` objects.\n\nExamples of **correct** code for this rule, but which do not throw an `Error` object:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXRocm93LWxpdGVyYWw6IFwiZXJyb3JcIiovXG5cbnZhciBlcnIgPSBcImVycm9yXCI7XG50aHJvdyBlcnI7XG5cbmZ1bmN0aW9uIGZvbyhiYXIpIHtcbiAgICBjb25zb2xlLmxvZyhiYXIpO1xufVxudGhyb3cgZm9vKFwiZXJyb3JcIik7XG5cbnRocm93IG5ldyBTdHJpbmcoXCJlcnJvclwiKTtcblxudmFyIGJheiA9IHtcbiAgICBiYXI6IFwiZXJyb3JcIlxufTtcbnRocm93IGJhei5iYXI7In0=)\n\n``` language-js\n/*eslint no-throw-literal: \"error\"*/\n\nvar err = \"error\";\nthrow err;\n\nfunction foo(bar) {\n    console.log(bar);\n}\nthrow foo(\"error\");\n\nthrow new String(\"error\");\n\nvar baz = {\n    bar: \"error\"\n};\nthrow baz.bar;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.15.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-throw-literal.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-throw-literal.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-throw-literal](https://eslint.org/docs/latest/rules/no-throw-literal)"
- name: no-undef
  id: rules/no-undef
  summary: This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer)
  description: "# no-undef\n\nDisallow the use of undeclared variables unless mentioned in `/*global */` comments\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-undef../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [typeof](#typeof)\n3.  [Environments](#environments)\n    1.  [browser](#browser)\n    2.  [Node.js](#nodejs)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Compatibility](#compatibility)\n6.  [Handled by TypeScript](#handled_by_typescript)\n7.  [Related Rules](#related-rules)\n8.  [Version](#version)\n9.  [Resources](#resources)\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).\n\n## Rule Details\n\nAny reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](no-undef../use/configure/language-options#using-configuration-files-1). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gc29tZUZ1bmN0aW9uKCk7XG52YXIgYmFyID0gYSArIDE7In0=)\n\n``` language-js\n/*eslint no-undef: \"error\"*/\n\nvar foo = someFunction();\nvar bar = a + 1;\n```\n\nExamples of **correct** code for this rule with `global` declaration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIHNvbWVGdW5jdGlvbiwgYSovXG4vKmVzbGludCBuby11bmRlZjogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IHNvbWVGdW5jdGlvbigpO1xudmFyIGJhciA9IGEgKyAxOyJ9)\n\n``` language-js\n/*global someFunction, a*/\n/*eslint no-undef: \"error\"*/\n\nvar foo = someFunction();\nvar bar = a + 1;\n```\n\nNote that this rule does not disallow assignments to read-only global variables. See [no-global-assign](no-undefno-global-assign) if you also want to disallow those assignments.\n\nThis rule also does not disallow redeclarations of global variables. See [no-redeclare](no-undefno-redeclare) if you also want to disallow those redeclarations.\n\n## Options\n\n- `typeof` set to true will warn for variables used inside typeof check (Default false).\n\n### typeof\n\nExamples of **correct** code for the default `{ \"typeof\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIqL1xuXG5pZiAodHlwZW9mIFVuZGVmaW5lZElkZW50aWZpZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBkbyBzb21ldGhpbmcgLi4uXG59In0=)\n\n``` language-js\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\nYou can use this option if you want to prevent `typeof` check on a variable which has not been declared.\n\nExamples of **incorrect** code for the `{ \"typeof\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmOiBbXCJlcnJvclwiLCB7IFwidHlwZW9mXCI6IHRydWUgfV0gKi9cblxuaWYodHlwZW9mIGEgPT09IFwic3RyaW5nXCIpe30ifQ==)\n\n``` language-js\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\nExamples of **correct** code for the `{ \"typeof\": true }` option with `global` declaration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZ2xvYmFsIGEqL1xuLyplc2xpbnQgbm8tdW5kZWY6IFtcImVycm9yXCIsIHsgXCJ0eXBlb2ZcIjogdHJ1ZSB9XSAqL1xuXG5pZih0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIil7fSJ9)\n\n``` language-js\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n## Environments\n\nFor convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](no-undef../use/configure/language-options#specifying-environments). A few examples are given below.\n\n### browser\n\nExamples of **correct** code for this rule with `browser` environment:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGJyb3dzZXIqL1xuXG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGFsZXJ0KFwiSGVsbG9cIik7XG59KTsifQ==)\n\n``` language-js\n/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(function() {\n    alert(\"Hello\");\n});\n```\n\n### Node.js\n\nExamples of **correct** code for this rule with `node` environment:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IG5vZGUqL1xuXG52YXIgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKGZzKTtcbn07In0=)\n\n``` language-js\n/*eslint no-undef: \"error\"*/\n/*eslint-env node*/\n\nvar fs = require(\"fs\");\nmodule.exports = function() {\n    console.log(fs);\n};\n```\n\n## When Not To Use It\n\nIf explicit declaration of global variables is not to your taste.\n\n## Compatibility\n\nThis rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Related Rules\n\n- [no-global-assign](no-global-assign)\n- [no-redeclare](no-redeclare)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-undef.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-undef.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-undef](https://eslint.org/docs/latest/rules/no-undef)"
- name: no-undef-init
  id: rules/no-undef-init
  summary: In JavaScript, a variable that is declared and not initialized to any value automatically gets the value of undefined
  description: "# no-undef-init\n\nDisallow initializing variables to `undefined`\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-undef-init../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n``` language-js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt’s therefore unnecessary to initialize a variable to `undefined`, such as:\n\n``` language-js\nvar foo = undefined;\n```\n\nIt’s considered a best practice to avoid initializing variables to `undefined`.\n\n## Rule Details\n\nThis rule aims to eliminate `var` and `let` variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmLWluaXQ6IFwiZXJyb3JcIiovXG5cbnZhciBmb28gPSB1bmRlZmluZWQ7XG5sZXQgYmFyID0gdW5kZWZpbmVkOyJ9)\n\n``` language-js\n/*eslint no-undef-init: \"error\"*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmLWluaXQ6IFwiZXJyb3JcIiovXG5cbnZhciBmb287XG5sZXQgYmFyOyJ9)\n\n``` language-js\n/*eslint no-undef-init: \"error\"*/\n\nvar foo;\nlet bar;\n```\n\nPlease note that this rule does not check `const` declarations, destructuring patterns, function parameters, and class fields.\n\nExamples of additional **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmLWluaXQ6IFwiZXJyb3JcIiovXG5cbmNvbnN0IGZvbyA9IHVuZGVmaW5lZDtcblxubGV0IHsgYmFyID0gdW5kZWZpbmVkIH0gPSBiYXo7XG5cbltxdXV4ID0gdW5kZWZpbmVkXSA9IHF1dXV4O1xuXG4oZm9vID0gdW5kZWZpbmVkKSA9PiB7fTtcblxuY2xhc3MgRm9vIHtcbiAgICBiYXIgPSB1bmRlZmluZWQ7XG59In0=)\n\n``` language-js\n/*eslint no-undef-init: \"error\"*/\n\nconst foo = undefined;\n\nlet { bar = undefined } = baz;\n\n[quux = undefined] = quuux;\n\n(foo = undefined) => {};\n\nclass Foo {\n    bar = undefined;\n}\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that’s when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmLWluaXQ6IFwiZXJyb3JcIiovXG5cbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgdmFyIHggPSB1bmRlZmluZWQ7XG4gICAgY29uc29sZS5sb2coeCk7XG4gICAgeCA9IGk7XG59In0=)\n\n``` language-js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n``` language-js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n``` language-js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n``` language-js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you’re using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmLWluaXQ6IFwiZXJyb3JcIiovXG5cbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgdmFyIHggPSB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYtaW5pdFxuICAgIGNvbnNvbGUubG9nKHgpO1xuICAgIHggPSBpO1xufSJ9)\n\n``` language-js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n- [no-undefined](no-undefined)\n- [no-void](no-void)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-undef-init.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-undef-init.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-undef-init](https://eslint.org/docs/latest/rules/no-undef-init)"
- name: no-undefined
  id: rules/no-undefined
  summary: The undefined variable in JavaScript is actually a property of the global object
  description: "# no-undefined\n\nDisallow the use of `undefined` as an identifier\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThe `undefined` variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of `undefined`. While ECMAScript 5 disallows overwriting `undefined`, it’s still possible to shadow `undefined`, such as:\n\n``` language-js\nfunction doSomething(data) {\n    var undefined = \"hi\";\n\n    // doesn't do what you think it does\n    if (data === undefined) {\n        // ...\n    }\n\n}\n```\n\nBecause `undefined` can be overwritten or shadowed, reading `undefined` can give an unexpected value. (This is not the case for `null`, which is a keyword that always produces the same value.) To guard against this, you can avoid all uses of `undefined`, which is what some style guides recommend and what this rule enforces. Those style guides then also recommend:\n\n- Variables that should be `undefined` are simply left uninitialized. (All uninitialized variables automatically get the value of `undefined` in JavaScript.)\n- Checking if a value is `undefined` should be done with `typeof`.\n- Using the `void` operator to generate the value of `undefined` if necessary.\n\nAs an alternative, you can use the [no-global-assign](no-undefinedno-global-assign) and [no-shadow-restricted-names](no-undefinedno-shadow-restricted-names) rules to prevent `undefined` from being shadowed or assigned a different value. This ensures that `undefined` will always hold its original, expected value.\n\n## Rule Details\n\nThis rule aims to eliminate the use of `undefined`, and as such, generates a warning whenever it is used.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmaW5lZDogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IHVuZGVmaW5lZDtcblxudmFyIHVuZGVmaW5lZCA9IFwiZm9vXCI7XG5cbmlmIChmb28gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIC4uLlxufVxuXG5mdW5jdGlvbiBiYXoodW5kZWZpbmVkKSB7XG4gICAgLy8gLi4uXG59XG5cbmJhcih1bmRlZmluZWQsIFwibG9yZW1cIik7In0=)\n\n``` language-js\n/*eslint no-undefined: \"error\"*/\n\nvar foo = undefined;\n\nvar undefined = \"foo\";\n\nif (foo === undefined) {\n    // ...\n}\n\nfunction baz(undefined) {\n    // ...\n}\n\nbar(undefined, \"lorem\");\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVmaW5lZDogXCJlcnJvclwiKi9cblxudmFyIGZvbyA9IHZvaWQgMDtcblxudmFyIFVuZGVmaW5lZCA9IFwiZm9vXCI7XG5cbmlmICh0eXBlb2YgZm9vID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gLi4uXG59XG5cbmdsb2JhbC51bmRlZmluZWQgPSBcImZvb1wiO1xuXG5iYXIodm9pZCAwLCBcImxvcmVtXCIpOyJ9)\n\n``` language-js\n/*eslint no-undefined: \"error\"*/\n\nvar foo = void 0;\n\nvar Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n    // ...\n}\n\nglobal.undefined = \"foo\";\n\nbar(void 0, \"lorem\");\n```\n\n## When Not To Use It\n\nIf you want to allow the use of `undefined` in your code, then you can safely turn this rule off.\n\n## Related Rules\n\n- [no-undef-init](no-undef-init)\n- [no-void](no-void)\n- [no-shadow-restricted-names](no-shadow-restricted-names)\n- [no-global-assign](no-global-assign)\n\n## Version\n\nThis rule was introduced in ESLint v0.7.1.\n\n## Further Reading\n\n[undefined - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)  \n\n[Understanding JavaScript’s ‘undefined’](https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/)  \n\n[Annotated ES5](https://es5.github.io/#x15.1.1.3)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-undefined.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-undefined.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-undefined](https://eslint.org/docs/latest/rules/no-undefined)"
- name: no-underscore-dangle
  id: rules/no-underscore-dangle
  summary: As far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript
  description: "# no-underscore-dangle\n\nDisallow dangling underscores in identifiers\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allow](#allow)\n    2.  [allowAfterThis](#allowafterthis)\n    3.  [allowAfterSuper](#allowaftersuper)\n    4.  [allowAfterThisConstructor](#allowafterthisconstructor)\n    5.  [enforceInMethodNames](#enforceinmethodnames)\n    6.  [enforceInClassFields](#enforceinclassfields)\n    7.  [allowInArrayDestructuring](#allowinarraydestructuring)\n    8.  [allowInObjectDestructuring](#allowinobjectdestructuring)\n    9.  [allowFunctionParams](#allowfunctionparams)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nAs far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript. Dangling underscores are underscores at either the beginning or end of an identifier, such as:\n\n``` language-js\nvar _foo;\n```\n\nThere is a long history of marking “private” members with dangling underscores in JavaScript, beginning with SpiderMonkey adding nonstandard methods such as `__defineGetter__()`. Since that time, using a single underscore prefix has become the most popular convention for indicating a member is not part of the public interface of an object.\n\nIt is recommended to use the formal [private class features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) introduced in ECMAScript 2022 for encapsulating private data and methods rather than relying on naming conventions.\n\nAllowing dangling underscores in identifiers is purely a convention and has no effect on performance, readability, or complexity. They do not have the same encapsulation benefits as private class features, even with this rule enabled.\n\n## Rule Details\n\nThis rule disallows dangling underscores in identifiers.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcImVycm9yXCIqL1xuXG52YXIgZm9vXztcbnZhciBfX3Byb3RvX18gPSB7fTtcbmZvby5fYmFyKCk7In0=)\n\n``` language-js\n/*eslint no-underscore-dangle: \"error\"*/\n\nvar foo_;\nvar __proto__ = {};\nfoo._bar();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcImVycm9yXCIqL1xuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBvYmogPSBfLmNvbnRhaW5zKGl0ZW1zLCBpdGVtKTtcbm9iai5fX3Byb3RvX18gPSB7fTtcbnZhciBmaWxlID0gX19maWxlbmFtZTtcbmZ1bmN0aW9uIGZvbyhfYmFyKSB7fTtcbmNvbnN0IGJhciA9IHsgb25DbGljayhfYmFyKSB7fSB9O1xuY29uc3QgYmF6ID0gKF9iYXIpID0+IHt9OyJ9)\n\n``` language-js\n/*eslint no-underscore-dangle: \"error\"*/\n\nvar _ = require('underscore');\nvar obj = _.contains(items, item);\nobj.__proto__ = {};\nvar file = __filename;\nfunction foo(_bar) {};\nconst bar = { onClick(_bar) {} };\nconst baz = (_bar) => {};\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"allow\"` allows specified identifiers to have dangling underscores\n- `\"allowAfterThis\": false` (default) disallows dangling underscores in members of the `this` object\n- `\"allowAfterSuper\": false` (default) disallows dangling underscores in members of the `super` object\n- `\"allowAfterThisConstructor\": false` (default) disallows dangling underscores in members of the `this.constructor` object\n- `\"enforceInMethodNames\": false` (default) allows dangling underscores in method names\n- `\"enforceInClassFields\": false` (default) allows dangling underscores in es2022 class fields names\n- `\"allowInArrayDestructuring\": true` (default) allows dangling underscores in variable names assigned by array destructuring\n- `\"allowInObjectDestructuring\": true` (default) allows dangling underscores in variable names assigned by object destructuring\n- `\"allowFunctionParams\": true` (default) allows dangling underscores in function parameter names\n\n### allow\n\nExamples of additional **correct** code for this rule with the `{ \"allow\": [\"foo_\", \"_bar\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiZm9vX1wiLCBcIl9iYXJcIl0gfV0qL1xuXG52YXIgZm9vXztcbmZvby5fYmFyKCk7In0=)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allow\": [\"foo_\", \"_bar\"] }]*/\n\nvar foo_;\nfoo._bar();\n```\n\n### allowAfterThis\n\nExamples of **correct** code for this rule with the `{ \"allowAfterThis\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dBZnRlclRoaXNcIjogdHJ1ZSB9XSovXG5cbnZhciBhID0gdGhpcy5mb29fO1xudGhpcy5fYmFyKCk7In0=)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterThis\": true }]*/\n\nvar a = this.foo_;\nthis._bar();\n```\n\n### allowAfterSuper\n\nExamples of **correct** code for this rule with the `{ \"allowAfterSuper\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dBZnRlclN1cGVyXCI6IHRydWUgfV0qL1xuXG5jbGFzcyBGb28gZXh0ZW5kcyBCYXIge1xuICBkb1NvbWV0aGluZygpIHtcbiAgICB2YXIgYSA9IHN1cGVyLmZvb187XG4gICAgc3VwZXIuX2JhcigpO1xuICB9XG59In0=)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterSuper\": true }]*/\n\nclass Foo extends Bar {\n  doSomething() {\n    var a = super.foo_;\n    super._bar();\n  }\n}\n```\n\n### allowAfterThisConstructor\n\nExamples of **correct** code for this rule with the `{ \"allowAfterThisConstructor\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dBZnRlclRoaXNDb25zdHJ1Y3RvclwiOiB0cnVlIH1dKi9cblxudmFyIGEgPSB0aGlzLmNvbnN0cnVjdG9yLmZvb187XG50aGlzLmNvbnN0cnVjdG9yLl9iYXIoKTsifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterThisConstructor\": true }]*/\n\nvar a = this.constructor.foo_;\nthis.constructor._bar();\n```\n\n### enforceInMethodNames\n\nExamples of **incorrect** code for this rule with the `{ \"enforceInMethodNames\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiZW5mb3JjZUluTWV0aG9kTmFtZXNcIjogdHJ1ZSB9XSovXG5cbmNsYXNzIEZvbyB7XG4gIF9iYXIoKSB7fVxufVxuXG5jbGFzcyBCYXIge1xuICBiYXJfKCkge31cbn1cblxuY29uc3QgbzEgPSB7XG4gIF9iYXIoKSB7fVxufTtcblxuY29uc3QgbzIgPSB7XG4gIGJhcl8oKSB7fVxufTsifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"enforceInMethodNames\": true }]*/\n\nclass Foo {\n  _bar() {}\n}\n\nclass Bar {\n  bar_() {}\n}\n\nconst o1 = {\n  _bar() {}\n};\n\nconst o2 = {\n  bar_() {}\n};\n```\n\n### enforceInClassFields\n\nExamples of **incorrect** code for this rule with the `{ \"enforceInClassFields\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiZW5mb3JjZUluQ2xhc3NGaWVsZHNcIjogdHJ1ZSB9XSovXG5cbmNsYXNzIEZvbyB7XG4gICAgX2Jhcjtcbn1cblxuY2xhc3MgQmFyIHtcbiAgICBfYmFyID0gKCkgPT4ge307XG59XG5cbmNsYXNzIEJheiB7XG4gICAgYmFyXztcbn1cblxuY2xhc3MgUXV4IHtcbiAgICAjX2Jhcjtcbn1cblxuY2xhc3MgRm9vQmFyIHtcbiAgICAjYmFyXztcbn0ifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"enforceInClassFields\": true }]*/\n\nclass Foo {\n    _bar;\n}\n\nclass Bar {\n    _bar = () => {};\n}\n\nclass Baz {\n    bar_;\n}\n\nclass Qux {\n    #_bar;\n}\n\nclass FooBar {\n    #bar_;\n}\n```\n\n### allowInArrayDestructuring\n\nExamples of **incorrect** code for this rule with the `{ \"allowInArrayDestructuring\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dJbkFycmF5RGVzdHJ1Y3R1cmluZ1wiOiBmYWxzZSB9XSovXG5cbmNvbnN0IFtfZm9vLCBfYmFyXSA9IGxpc3Q7XG5jb25zdCBbZm9vXywgLi4uX3F1eF0gPSBsaXN0O1xuY29uc3QgW2ZvbywgW2JhciwgX2Jhel1dID0gbGlzdDsifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowInArrayDestructuring\": false }]*/\n\nconst [_foo, _bar] = list;\nconst [foo_, ..._qux] = list;\nconst [foo, [bar, _baz]] = list;\n```\n\n### allowInObjectDestructuring\n\nExamples of **incorrect** code for this rule with the `{ \"allowInObjectDestructuring\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dJbk9iamVjdERlc3RydWN0dXJpbmdcIjogZmFsc2UgfV0qL1xuXG5jb25zdCB7IGZvbywgYmFyOiBfYmFyIH0gPSBjb2xsZWN0aW9uO1xuY29uc3QgeyBxdXgsIHh5eiwgX2JheiB9ID0gY29sbGVjdGlvbjsifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowInObjectDestructuring\": false }]*/\n\nconst { foo, bar: _bar } = collection;\nconst { qux, xyz, _baz } = collection;\n```\n\nExamples of **correct** code for this rule with the `{ \"allowInObjectDestructuring\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dJbk9iamVjdERlc3RydWN0dXJpbmdcIjogZmFsc2UgfV0qL1xuXG5jb25zdCB7IGZvbywgYmFyLCBfYmF6OiB7IGEsIGIgfSB9ID0gY29sbGVjdGlvbjtcbmNvbnN0IHsgcXV4LCB4eXosIF9iYXo6IGJheiB9ID0gY29sbGVjdGlvbjsifQ==)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowInObjectDestructuring\": false }]*/\n\nconst { foo, bar, _baz: { a, b } } = collection;\nconst { qux, xyz, _baz: baz } = collection;\n```\n\n### allowFunctionParams\n\nExamples of **incorrect** code for this rule with the `{ \"allowFunctionParams\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dGdW5jdGlvblBhcmFtc1wiOiBmYWxzZSB9XSovXG5cbmZ1bmN0aW9uIGZvbzEgKF9iYXIpIHt9XG5mdW5jdGlvbiBmb28yIChfYmFyID0gMCkge31cbmZ1bmN0aW9uIGZvbzMgKC4uLl9iYXIpIHt9XG5cbmNvbnN0IGZvbzQgPSBmdW5jdGlvbiBvbkNsaWNrIChfYmFyKSB7fVxuY29uc3QgZm9vNSA9IGZ1bmN0aW9uIG9uQ2xpY2sgKF9iYXIgPSAwKSB7fVxuY29uc3QgZm9vNiA9IGZ1bmN0aW9uIG9uQ2xpY2sgKC4uLl9iYXIpIHt9XG5cbmNvbnN0IGZvbzcgPSAoX2JhcikgPT4ge307XG5jb25zdCBmb284ID0gKF9iYXIgPSAwKSA9PiB7fTtcbmNvbnN0IGZvbzkgPSAoLi4uX2JhcikgPT4ge307In0=)\n\n``` language-js\n/*eslint no-underscore-dangle: [\"error\", { \"allowFunctionParams\": false }]*/\n\nfunction foo1 (_bar) {}\nfunction foo2 (_bar = 0) {}\nfunction foo3 (..._bar) {}\n\nconst foo4 = function onClick (_bar) {}\nconst foo5 = function onClick (_bar = 0) {}\nconst foo6 = function onClick (..._bar) {}\n\nconst foo7 = (_bar) => {};\nconst foo8 = (_bar = 0) => {};\nconst foo9 = (..._bar) => {};\n```\n\n## When Not To Use It\n\nIf you want to allow dangling underscores in identifiers, then you can safely turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-underscore-dangle.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-underscore-dangle.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-underscore-dangle](https://eslint.org/docs/latest/rules/no-underscore-dangle)"
- name: no-unexpected-multiline
  id: rules/no-unexpected-multiline
  summary: Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI)
  description: "# no-unexpected-multiline\n\nDisallow confusing multiline expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unexpected-multiline../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nSemicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the [semi](no-unexpected-multiline./semi) rule.\n\nThe rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, **except** where one of the following is true:\n\n- The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n- The line is `--` or `++` (in which case it will decrement/increment the next token.)\n- It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n- The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\nIn the exceptions where a newline does **not** end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.\n\n## Rule Details\n\nThis rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gYmFyXG4oMSB8fCAyKS5iYXooKTtcblxudmFyIGhlbGxvID0gJ3dvcmxkJ1xuWzEsIDIsIDNdLmZvckVhY2goYWRkTnVtYmVyKTtcblxubGV0IHggPSBmdW5jdGlvbigpIHt9XG5gaGVsbG9gXG5cbmxldCB5ID0gZnVuY3Rpb24oKSB7fVxueVxuYGhlbGxvYFxuXG5sZXQgeiA9IGZvb1xuL3JlZ2V4L2cudGVzdChiYXIpIn0=)\n\n``` language-js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar\n(1 || 2).baz();\n\nvar hello = 'world'\n[1, 2, 3].forEach(addNumber);\n\nlet x = function() {}\n`hello`\n\nlet y = function() {}\ny\n`hello`\n\nlet z = foo\n/regex/g.test(bar)\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lOiBcImVycm9yXCIqL1xuXG52YXIgZm9vID0gYmFyO1xuKDEgfHwgMikuYmF6KCk7XG5cbnZhciBmb28gPSBiYXJcbjsoMSB8fCAyKS5iYXooKVxuXG52YXIgaGVsbG8gPSAnd29ybGQnO1xuWzEsIDIsIDNdLmZvckVhY2goYWRkTnVtYmVyKTtcblxudmFyIGhlbGxvID0gJ3dvcmxkJ1xudm9pZCBbMSwgMiwgM10uZm9yRWFjaChhZGROdW1iZXIpO1xuXG5sZXQgeCA9IGZ1bmN0aW9uKCkge307XG5gaGVsbG9gXG5cbmxldCB0YWcgPSBmdW5jdGlvbigpIHt9XG50YWcgYGhlbGxvYCJ9)\n\n``` language-js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar;\n(1 || 2).baz();\n\nvar foo = bar\n;(1 || 2).baz()\n\nvar hello = 'world';\n[1, 2, 3].forEach(addNumber);\n\nvar hello = 'world'\nvoid [1, 2, 3].forEach(addNumber);\n\nlet x = function() {};\n`hello`\n\nlet tag = function() {}\ntag `hello`\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are confident that you will not accidentally introduce code like this.\n\nNote that the patterns considered problems are **not** flagged by the [semi](no-unexpected-multilinesemi) rule.\n\n## Related Rules\n\n- [func-call-spacing](func-call-spacing)\n- [semi](semi)\n- [space-unary-ops](space-unary-ops)\n\n## Version\n\nThis rule was introduced in ESLint v0.24.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unexpected-multiline.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unexpected-multiline.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unexpected-multiline](https://eslint.org/docs/latest/rules/no-unexpected-multiline)"
- name: no-unmodified-loop-condition
  id: rules/no-unmodified-loop-condition
  summary: Variables in a loop condition often are modified in the loop
  description: "# no-unmodified-loop-condition\n\nDisallow unmodified loop conditions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nVariables in a loop condition often are modified in the loop. If not, it’s possibly a mistake.\n\n``` language-js\nwhile (node) {\n    doSomething(node);\n}\n```\n\n``` language-js\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n```\n\n## Rule Details\n\nThis rule finds references which are inside of loop conditions, then checks the variables of those references are modified in the loop.\n\nIf a reference is inside of a binary expression or a ternary expression, this rule checks the result of the expression instead. If a reference is inside of a dynamic expression (e.g. `CallExpression`, `YieldExpression`, …), this rule ignores it.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb246IFwiZXJyb3JcIiovXG5cbnZhciBub2RlID0gc29tZXRoaW5nO1xuXG53aGlsZSAobm9kZSkge1xuICAgIGRvU29tZXRoaW5nKG5vZGUpO1xufVxubm9kZSA9IG90aGVyO1xuXG5mb3IgKHZhciBqID0gMDsgaiA8IDU7KSB7XG4gICAgZG9Tb21ldGhpbmcoaik7XG59XG5cbndoaWxlIChub2RlICE9PSByb290KSB7XG4gICAgZG9Tb21ldGhpbmcobm9kZSk7XG59In0=)\n\n``` language-js\n/*eslint no-unmodified-loop-condition: \"error\"*/\n\nvar node = something;\n\nwhile (node) {\n    doSomething(node);\n}\nnode = other;\n\nfor (var j = 0; j < 5;) {\n    doSomething(j);\n}\n\nwhile (node !== root) {\n    doSomething(node);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb246IFwiZXJyb3JcIiovXG5cbndoaWxlIChub2RlKSB7XG4gICAgZG9Tb21ldGhpbmcobm9kZSk7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xufVxuXG5mb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7XG4gICAgZG9Tb21ldGhpbmcoaXRlbXNbal0pO1xufVxuXG4vLyBPSywgdGhlIHJlc3VsdCBvZiB0aGlzIGJpbmFyeSBleHByZXNzaW9uIGlzIGNoYW5nZWQgaW4gdGhpcyBsb29wLlxud2hpbGUgKG5vZGUgIT09IHJvb3QpIHtcbiAgICBkb1NvbWV0aGluZyhub2RlKTtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG59XG5cbi8vIE9LLCB0aGUgcmVzdWx0IG9mIHRoaXMgdGVybmFyeSBleHByZXNzaW9uIGlzIGNoYW5nZWQgaW4gdGhpcyBsb29wLlxud2hpbGUgKG5vZGUgPyBBIDogQikge1xuICAgIGRvU29tZXRoaW5nKG5vZGUpO1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbn1cblxuLy8gQSBwcm9wZXJ0eSBtaWdodCBiZSBhIGdldHRlciB3aGljaCBoYXMgc2lkZSBlZmZlY3QuLi5cbi8vIE9yIFwiZG9Tb21ldGhpbmdcIiBjYW4gbW9kaWZ5IFwib2JqLmZvb1wiLlxud2hpbGUgKG9iai5mb28pIHtcbiAgICBkb1NvbWV0aGluZyhvYmopO1xufVxuXG4vLyBBIGZ1bmN0aW9uIGNhbGwgY2FuIHJldHVybiB2YXJpb3VzIHZhbHVlcy5cbndoaWxlIChjaGVjayhvYmopKSB7XG4gICAgZG9Tb21ldGhpbmcob2JqKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-unmodified-loop-condition: \"error\"*/\n\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n\nfor (var j = 0; j < items.length; ++j) {\n    doSomething(items[j]);\n}\n\n// OK, the result of this binary expression is changed in this loop.\nwhile (node !== root) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// OK, the result of this ternary expression is changed in this loop.\nwhile (node ? A : B) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// A property might be a getter which has side effect...\n// Or \"doSomething\" can modify \"obj.foo\".\nwhile (obj.foo) {\n    doSomething(obj);\n}\n\n// A function call can return various values.\nwhile (check(obj)) {\n    doSomething(obj);\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to notified about references inside of loop conditions, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-2.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unmodified-loop-condition.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unmodified-loop-condition.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unmodified-loop-condition](https://eslint.org/docs/latest/rules/no-unmodified-loop-condition)"
- name: no-unneeded-ternary
  id: rules/no-unneeded-ternary
  summary: It’s a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean
  description: "# no-unneeded-ternary\n\nDisallow ternary operators when simpler alternatives exist\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-unneeded-ternary../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [defaultAssignment](#defaultassignment)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIt’s a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean. Here are some examples:\n\n``` language-js\n// Bad\nvar isYes = answer === 1 ? true : false;\n\n// Good\nvar isYes = answer === 1;\n\n// Bad\nvar isNo = answer === 1 ? false : true;\n\n// Good\nvar isNo = answer !== 1;\n```\n\nAnother common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical `OR` can be used to provide the same functionality. Here is an example:\n\n``` language-js\n// Bad\nfoo(bar ? bar : 1);\n\n// Good\nfoo(bar || 1);\n```\n\n## Rule Details\n\nThis rule disallow ternary operators when simpler alternatives exist.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVubmVlZGVkLXRlcm5hcnk6IFwiZXJyb3JcIiovXG5cbnZhciBhID0geCA9PT0gMiA/IHRydWUgOiBmYWxzZTtcblxudmFyIGEgPSB4ID8gdHJ1ZSA6IGZhbHNlOyJ9)\n\n``` language-js\n/*eslint no-unneeded-ternary: \"error\"*/\n\nvar a = x === 2 ? true : false;\n\nvar a = x ? true : false;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVubmVlZGVkLXRlcm5hcnk6IFwiZXJyb3JcIiovXG5cbnZhciBhID0geCA9PT0gMiA/IFwiWWVzXCIgOiBcIk5vXCI7XG5cbnZhciBhID0geCAhPT0gZmFsc2U7XG5cbnZhciBhID0geCA/IFwiWWVzXCIgOiBcIk5vXCI7XG5cbnZhciBhID0geCA/IHkgOiB4O1xuXG5mKHggPyB4IDogMSk7IC8vIGRlZmF1bHQgYXNzaWdubWVudCAtIHdvdWxkIGJlIGRpc2FsbG93ZWQgaWYgZGVmYXVsdEFzc2lnbm1lbnQgb3B0aW9uIHNldCB0byBmYWxzZS4gU2VlIG9wdGlvbiBkZXRhaWxzIGJlbG93LiJ9)\n\n``` language-js\n/*eslint no-unneeded-ternary: \"error\"*/\n\nvar a = x === 2 ? \"Yes\" : \"No\";\n\nvar a = x !== false;\n\nvar a = x ? \"Yes\" : \"No\";\n\nvar a = x ? y : x;\n\nf(x ? x : 1); // default assignment - would be disallowed if defaultAssignment option set to false. See option details below.\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"defaultAssignment\": true` (default) allows the conditional expression as a default assignment pattern\n- `\"defaultAssignment\": false` disallows the conditional expression as a default assignment pattern\n\n### defaultAssignment\n\nWhen set to `true`, which it is by default, The defaultAssignment option allows expressions of the form `x ? x : expr` (where `x` is any identifier and `expr` is any expression).\n\nExamples of additional **incorrect** code for this rule with the `{ \"defaultAssignment\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVubmVlZGVkLXRlcm5hcnk6IFtcImVycm9yXCIsIHsgXCJkZWZhdWx0QXNzaWdubWVudFwiOiBmYWxzZSB9XSovXG5cbnZhciBhID0geCA/IHggOiAxO1xuXG5mKHggPyB4IDogMSk7In0=)\n\n``` language-js\n/*eslint no-unneeded-ternary: [\"error\", { \"defaultAssignment\": false }]*/\n\nvar a = x ? x : 1;\n\nf(x ? x : 1);\n```\n\nNote that `defaultAssignment: false` still allows expressions of the form `x ? expr : x` (where the identifier is on the right hand side of the ternary).\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with unnecessary complexity in conditional expressions.\n\n## Related Rules\n\n- [no-ternary](no-ternary)\n- [no-nested-ternary](no-nested-ternary)\n\n## Version\n\nThis rule was introduced in ESLint v0.21.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unneeded-ternary.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unneeded-ternary.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unneeded-ternary](https://eslint.org/docs/latest/rules/no-unneeded-ternary)"
- name: no-unreachable
  id: rules/no-unreachable
  summary: Because the return, throw, break, and continue statements unconditionally exit a block of code, any statements after them cannot be executed
  description: "# no-unreachable\n\nDisallow unreachable code after `return`, `throw`, `continue`, and `break` statements\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unreachable../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Handled by TypeScript](#handled_by_typescript)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nBecause the `return`, `throw`, `break`, and `continue` statements unconditionally exit a block of code, any statements after them cannot be executed. Unreachable statements are usually a mistake.\n\n``` language-js\nfunction fn() {\n    x = 1;\n    return x;\n    x = 3; // this will never execute\n}\n```\n\nAnother kind of mistake is defining instance fields in a subclass whose constructor doesn’t call `super()`. Instance fields of a subclass are only added to the instance after `super()`. If there are no `super()` calls, their definitions are never applied and therefore are unreachable code.\n\n``` language-js\nclass C extends B {\n    #x; // this will never be added to instances\n\n    constructor() {\n        return {};\n    }\n}\n```\n\n## Rule Details\n\nThis rule disallows unreachable code after `return`, `throw`, `continue`, and `break` statements. This rule also flags definitions of instance fields in subclasses whose constructors don’t have `super()` calls.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gICAgY29uc29sZS5sb2coXCJkb25lXCIpO1xufVxuXG5mdW5jdGlvbiBiYXIoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT29wcyFcIik7XG4gICAgY29uc29sZS5sb2coXCJkb25lXCIpO1xufVxuXG53aGlsZSh2YWx1ZSkge1xuICAgIGJyZWFrO1xuICAgIGNvbnNvbGUubG9nKFwiZG9uZVwiKTtcbn1cblxudGhyb3cgbmV3IEVycm9yKFwiT29wcyFcIik7XG5jb25zb2xlLmxvZyhcImRvbmVcIik7XG5cbmZ1bmN0aW9uIGJheigpIHtcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuNSkge1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiZG9uZVwiKTtcbn1cblxuZm9yICg7Oykge31cbmNvbnNvbGUubG9nKFwiZG9uZVwiKTsifQ==)\n\n``` language-js\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return true;\n    console.log(\"done\");\n}\n\nfunction bar() {\n    throw new Error(\"Oops!\");\n    console.log(\"done\");\n}\n\nwhile(value) {\n    break;\n    console.log(\"done\");\n}\n\nthrow new Error(\"Oops!\");\nconsole.log(\"done\");\n\nfunction baz() {\n    if (Math.random() < 0.5) {\n        return;\n    } else {\n        throw new Error();\n    }\n    console.log(\"done\");\n}\n\nfor (;;) {}\nconsole.log(\"done\");\n```\n\nExamples of **correct** code for this rule, because of JavaScript function and variable hoisting:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgcmV0dXJuIGJhcigpO1xuICAgIGZ1bmN0aW9uIGJhcigpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiYXIoKSB7XG4gICAgcmV0dXJuIHg7XG4gICAgdmFyIHg7XG59XG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICAgICAgdmFyIHg7XG59In0=)\n\n``` language-js\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return bar();\n    function bar() {\n        return 1;\n    }\n}\n\nfunction bar() {\n    return x;\n    var x;\n}\n\nswitch (foo) {\n    case 1:\n        break;\n        var x;\n}\n```\n\nExamples of additional **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlOiBcImVycm9yXCIqL1xuXG5jbGFzcyBDIGV4dGVuZHMgQiB7XG4gICAgI3g7IC8vIHVucmVhY2hhYmxlXG4gICAgI3kgPSAxOyAvLyB1bnJlYWNoYWJsZVxuICAgIGE7IC8vIHVucmVhY2hhYmxlXG4gICAgYiA9IDE7IC8vIHVucmVhY2hhYmxlXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-unreachable: \"error\"*/\n\nclass C extends B {\n    #x; // unreachable\n    #y = 1; // unreachable\n    a; // unreachable\n    b = 1; // unreachable\n\n    constructor() {\n        return {};\n    }\n}\n```\n\nExamples of additional **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlOiBcImVycm9yXCIqL1xuXG5jbGFzcyBEIGV4dGVuZHMgQiB7XG4gICAgI3g7XG4gICAgI3kgPSAxO1xuICAgIGE7XG4gICAgYiA9IDE7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG5cbmNsYXNzIEUgZXh0ZW5kcyBCIHtcbiAgICAjeDtcbiAgICAjeSA9IDE7XG4gICAgYTtcbiAgICBiID0gMTtcblxuICAgIC8vIGltcGxpY2l0IGNvbnN0cnVjdG9yIGFsd2F5cyBjYWxscyBgc3VwZXIoKWBcbn1cblxuY2xhc3MgRiBleHRlbmRzIEIge1xuICAgIHN0YXRpYyAjeDtcbiAgICBzdGF0aWMgI3kgPSAxO1xuICAgIHN0YXRpYyBhO1xuICAgIHN0YXRpYyBiID0gMTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-unreachable: \"error\"*/\n\nclass D extends B {\n    #x;\n    #y = 1;\n    a;\n    b = 1;\n\n    constructor() {\n        super();\n    }\n}\n\nclass E extends B {\n    #x;\n    #y = 1;\n    a;\n    b = 1;\n\n    // implicit constructor always calls `super()`\n}\n\nclass F extends B {\n    static #x;\n    static #y = 1;\n    static a;\n    static b = 1;\n\n    constructor() {\n        return {};\n    }\n}\n```\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unreachable.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unreachable.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unreachable](https://eslint.org/docs/latest/rules/no-unreachable)"
- name: no-unreachable-loop
  id: rules/no-unreachable-loop
  summary: A loop that can never reach the second iteration is a possible error in the code
  description: "# no-unreachable-loop\n\nDisallow loops with a body that allows only one iteration\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [ignore](#ignore)\n3.  [Known Limitations](#known-limitations)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nA loop that can never reach the second iteration is a possible error in the code.\n\n``` language-js\nfor (let i = 0; i < arr.length; i++) {\n    if (arr[i].name === myName) {\n        doSomething(arr[i]);\n        // break was supposed to be here\n    }\n    break;\n}\n```\n\nIn rare cases where only one iteration (or at most one iteration) is intended behavior, the code should be refactored to use `if` conditionals instead of `while`, `do-while` and `for` loops. It’s considered a best practice to avoid using loop constructs for such cases.\n\n## Rule Details\n\nThis rule aims to detect and disallow loops that can have at most one iteration, by performing static code path analysis on loop bodies.\n\nIn particular, this rule will disallow a loop with a body that exits the loop in all code paths. If all code paths in the loop’s body will end with either a `break`, `return` or a `throw` statement, the second iteration of such loop is certainly unreachable, regardless of the loop’s condition.\n\nThis rule checks `while`, `do-while`, `for`, `for-in` and `for-of` loops. You can optionally disable checks for each of these constructs.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlLWxvb3A6IFwiZXJyb3JcIiovXG5cbndoaWxlIChmb28pIHtcbiAgICBkb1NvbWV0aGluZyhmb28pO1xuICAgIGZvbyA9IGZvby5wYXJlbnQ7XG4gICAgYnJlYWs7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeUxpc3QoaGVhZCkge1xuICAgIGxldCBpdGVtID0gaGVhZDtcbiAgICBkbyB7XG4gICAgICAgIGlmICh2ZXJpZnkoaXRlbSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoaXRlbSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRTb21ldGhpbmcoYXJyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzU29tZXRoaW5nKGFycltpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJbaV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb2Vzbid0IGV4aXN0LlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKFwiX1wiKSkge1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgZmlyc3RLZXkgPSBrZXk7XG4gICAgZmlyc3RWYWx1ZSA9IG9ialtrZXldO1xuICAgIGJyZWFrO1xufVxuXG5mb3IgKGZvbyBvZiBiYXIpIHtcbiAgICBpZiAoZm9vLmlkID09PSBpZCkge1xuICAgICAgICBkb1NvbWV0aGluZyhmb28pO1xuICAgIH1cbiAgICBicmVhaztcbn0ifQ==)\n\n``` language-js\n/*eslint no-unreachable-loop: \"error\"*/\n\nwhile (foo) {\n    doSomething(foo);\n    foo = foo.parent;\n    break;\n}\n\nfunction verifyList(head) {\n    let item = head;\n    do {\n        if (verify(item)) {\n            return true;\n        } else {\n            return false;\n        }\n    } while (item);\n}\n\nfunction findSomething(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        if (isSomething(arr[i])) {\n            return arr[i];\n        } else {\n            throw new Error(\"Doesn't exist.\");\n        }\n    }\n}\n\nfor (key in obj) {\n    if (key.startsWith(\"_\")) {\n        break;\n    }\n    firstKey = key;\n    firstValue = obj[key];\n    break;\n}\n\nfor (foo of bar) {\n    if (foo.id === id) {\n        doSomething(foo);\n    }\n    break;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlLWxvb3A6IFwiZXJyb3JcIiovXG5cbndoaWxlIChmb28pIHtcbiAgICBkb1NvbWV0aGluZyhmb28pO1xuICAgIGZvbyA9IGZvby5wYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeUxpc3QoaGVhZCkge1xuICAgIGxldCBpdGVtID0gaGVhZDtcbiAgICBkbyB7XG4gICAgICAgIGlmICh2ZXJpZnkoaXRlbSkpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChpdGVtKTtcblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmaW5kU29tZXRoaW5nKGFycikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc1NvbWV0aGluZyhhcnJbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkRvZXNuJ3QgZXhpc3QuXCIpO1xufVxuXG5mb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmaXJzdEtleSA9IGtleTtcbiAgICBmaXJzdFZhbHVlID0gb2JqW2tleV07XG4gICAgYnJlYWs7XG59XG5cbmZvciAoZm9vIG9mIGJhcikge1xuICAgIGlmIChmb28uaWQgPT09IGlkKSB7XG4gICAgICAgIGRvU29tZXRoaW5nKGZvbyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-unreachable-loop: \"error\"*/\n\nwhile (foo) {\n    doSomething(foo);\n    foo = foo.parent;\n}\n\nfunction verifyList(head) {\n    let item = head;\n    do {\n        if (verify(item)) {\n            item = item.next;\n        } else {\n            return false;\n        }\n    } while (item);\n\n    return true;\n}\n\nfunction findSomething(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        if (isSomething(arr[i])) {\n            return arr[i];\n        }\n    }\n    throw new Error(\"Doesn't exist.\");\n}\n\nfor (key in obj) {\n    if (key.startsWith(\"_\")) {\n        continue;\n    }\n    firstKey = key;\n    firstValue = obj[key];\n    break;\n}\n\nfor (foo of bar) {\n    if (foo.id === id) {\n        doSomething(foo);\n        break;\n    }\n}\n```\n\nPlease note that this rule is not designed to check loop conditions, and will not warn in cases such as the following examples.\n\nExamples of additional **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlLWxvb3A6IFwiZXJyb3JcIiovXG5cbmRvIHtcbiAgICBkb1NvbWV0aGluZygpO1xufSB3aGlsZSAoZmFsc2UpXG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMTsgaSsrKSB7XG4gICAgZG9Tb21ldGhpbmcoaSk7XG59XG5cbmZvciAoY29uc3QgYSBvZiBbMV0pIHtcbiAgICBkb1NvbWV0aGluZyhhKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-unreachable-loop: \"error\"*/\n\ndo {\n    doSomething();\n} while (false)\n\nfor (let i = 0; i < 1; i++) {\n    doSomething(i);\n}\n\nfor (const a of [1]) {\n    doSomething(a);\n}\n```\n\n## Options\n\nThis rule has an object option, with one option:\n\n- `\"ignore\"` - an optional array of loop types that will be ignored by this rule.\n\n### ignore\n\nYou can specify up to 5 different elements in the `\"ignore\"` array:\n\n- `\"WhileStatement\"` - to ignore all `while` loops.\n- `\"DoWhileStatement\"` - to ignore all `do-while` loops.\n- `\"ForStatement\"` - to ignore all `for` loops (does not apply to `for-in` and `for-of` loops).\n- `\"ForInStatement\"` - to ignore all `for-in` loops.\n- `\"ForOfStatement\"` - to ignore all `for-of` loops.\n\nExamples of **correct** code for this rule with the `\"ignore\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVucmVhY2hhYmxlLWxvb3A6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogW1wiRm9ySW5TdGF0ZW1lbnRcIiwgXCJGb3JPZlN0YXRlbWVudFwiXSB9XSovXG5cbmZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgaGFzRW51bWVyYWJsZVByb3BlcnRpZXMgPSB0cnVlO1xuICBicmVhaztcbn1cblxuZm9yIChjb25zdCBhIG9mIGIpIGJyZWFrOyJ9)\n\n``` language-js\n/*eslint no-unreachable-loop: [\"error\", { \"ignore\": [\"ForInStatement\", \"ForOfStatement\"] }]*/\n\nfor (var key in obj) {\n  hasEnumerableProperties = true;\n  break;\n}\n\nfor (const a of b) break;\n```\n\n## Known Limitations\n\nStatic code path analysis, in general, does not evaluate conditions. Due to this fact, this rule might miss reporting cases such as the following:\n\n``` language-js\nfor (let i = 0; i < 10; i++) {\n    doSomething(i);\n    if (true) {\n        break;\n    }\n}\n```\n\n## Related Rules\n\n- [no-unreachable](no-unreachable)\n- [no-constant-condition](no-constant-condition)\n- [no-unmodified-loop-condition](no-unmodified-loop-condition)\n- [for-direction](for-direction)\n\n## Version\n\nThis rule was introduced in ESLint v7.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unreachable-loop.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unreachable-loop.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unreachable-loop](https://eslint.org/docs/latest/rules/no-unreachable-loop)"
- name: no-unsafe-finally
  id: rules/no-unsafe-finally
  summary: JavaScript suspends the control flow statements of try and catch blocks until the execution of finally block finishes
  description: "# no-unsafe-finally\n\nDisallow control flow statements in `finally` blocks\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unsafe-finally../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nJavaScript suspends the control flow statements of `try` and `catch` blocks until the execution of `finally` block finishes. So, when `return`, `throw`, `break`, or `continue` is used in `finally`, control flow statements inside `try` and `catch` are overwritten, which is considered as unexpected behavior. Such as:\n\n``` language-js\n// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n``` language-js\n// We expect this function to throw an error, then return\n(() => {\n    try {\n        throw new Error(\"Try\"); // error is thrown but suspended until finally block ends\n    } finally {\n        return 3; // 3 is returned before the error is thrown, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n``` language-js\n// We expect this function to throw Try(...) error from the catch block\n(() => {\n    try {\n        throw new Error(\"Try\")\n    } catch(err) {\n        throw err; // The error thrown from try block is caught and rethrown\n    } finally {\n        throw new Error(\"Finally\"); // Finally(...) is thrown, which we did not expect\n    }\n})();\n\n// > Uncaught Error: Finally(...)\n```\n\n``` language-js\n// We expect this function to return 0 from try block.\n(() => {\n  label: try {\n    return 0; // 0 is returned but suspended until finally block ends\n  } finally {\n    break label; // It breaks out the try-finally block, before 0 is returned.\n  }\n  return 1;\n})();\n\n// > 1\n```\n\n## Rule Details\n\nThis rule disallows `return`, `throw`, `break`, and `continue` statements inside `finally` blocks. It allows indirect usages, such as in `function` or `class` definitions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1maW5hbGx5OiBcImVycm9yXCIqL1xubGV0IGZvbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHJldHVybiAzO1xuICAgIH1cbn07In0=)\n\n``` language-js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3;\n    }\n};\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1maW5hbGx5OiBcImVycm9yXCIqL1xubGV0IGZvbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcjtcbiAgICB9XG59OyJ9)\n\n``` language-js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        throw new Error;\n    }\n};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1maW5hbGx5OiBcImVycm9yXCIqL1xubGV0IGZvbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaG9sYSFcIik7XG4gICAgfVxufTsifQ==)\n\n``` language-js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        console.log(\"hola!\");\n    }\n};\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1maW5hbGx5OiBcImVycm9yXCIqL1xubGV0IGZvbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGxldCBhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJob2xhIVwiO1xuICAgICAgICB9XG4gICAgfVxufTsifQ==)\n\n``` language-js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        let a = function() {\n            return \"hola!\";\n        }\n    }\n};\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1maW5hbGx5OiBcImVycm9yXCIqL1xubGV0IGZvbyA9IGZ1bmN0aW9uKGEpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgICByZXR1cm4gMjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBzd2l0Y2goYSkge1xuICAgICAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJob2xhIVwiKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTsifQ==)\n\n``` language-js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function(a) {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        switch(a) {\n            case 1: {\n                console.log(\"hola!\")\n                break;\n            }\n        }\n    }\n};\n```\n\n## When Not To Use It\n\nIf you want to allow control flow operations in `finally` blocks, you can turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v2.9.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unsafe-finally.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unsafe-finally.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unsafe-finally](https://eslint.org/docs/latest/rules/no-unsafe-finally)"
- name: no-unsafe-negation
  id: rules/no-unsafe-negation
  summary: Just as developers might type -a + b when they mean -(a + b) for the negative of a sum, they might type !key in object by mistake when they almost certainly mean !(key in object) to test that a key is not in an object
  description: "# no-unsafe-negation\n\nDisallow negating the left operand of relational operators\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unsafe-negation../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-unsafe-negation../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Exception](#exception)\n2.  [Options](#options)\n    1.  [enforceForOrderingRelations](#enforcefororderingrelations)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Handled by TypeScript](#handled_by_typescript)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nJust as developers might type `-a + b` when they mean `-(a + b)` for the negative of a sum, they might type `!key in object` by mistake when they almost certainly mean `!(key in object)` to test that a key is not in an object. `!obj instanceof Ctor` is similar.\n\n## Rule Details\n\nThis rule disallows negating the left operand of the following relational operators:\n\n- [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).\n- [`instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1uZWdhdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKCFrZXkgaW4gb2JqZWN0KSB7XG4gICAgLy8gb3BlcmF0b3IgcHJlY2VkZW5jZSBtYWtlcyBpdCBlcXVpdmFsZW50IHRvICgha2V5KSBpbiBvYmplY3RcbiAgICAvLyBhbmQgdHlwZSBjb252ZXJzaW9uIG1ha2VzIGl0IGVxdWl2YWxlbnQgdG8gKGtleSA/IFwiZmFsc2VcIiA6IFwidHJ1ZVwiKSBpbiBvYmplY3Rcbn1cblxuaWYgKCFvYmogaW5zdGFuY2VvZiBDdG9yKSB7XG4gICAgLy8gb3BlcmF0b3IgcHJlY2VkZW5jZSBtYWtlcyBpdCBlcXVpdmFsZW50IHRvICghb2JqKSBpbnN0YW5jZW9mIEN0b3JcbiAgICAvLyBhbmQgaXQgZXF1aXZhbGVudCB0byBhbHdheXMgZmFsc2Ugc2luY2UgYm9vbGVhbiB2YWx1ZXMgYXJlIG5vdCBvYmplY3RzLlxufSJ9)\n\n``` language-js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n\nif (!obj instanceof Ctor) {\n    // operator precedence makes it equivalent to (!obj) instanceof Ctor\n    // and it equivalent to always false since boolean values are not objects.\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1uZWdhdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKCEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAvLyBrZXkgaXMgbm90IGluIG9iamVjdFxufVxuXG5pZiAoIShvYmogaW5zdGFuY2VvZiBDdG9yKSkge1xuICAgIC8vIG9iaiBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQ3RvclxufSJ9)\n\n``` language-js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(key in object)) {\n    // key is not in object\n}\n\nif (!(obj instanceof Ctor)) {\n    // obj is not an instance of Ctor\n}\n```\n\n### Exception\n\nFor rare situations when negating the left operand is intended, this rule allows an exception. If the whole negation is explicitly wrapped in parentheses, the rule will not report a problem.\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1uZWdhdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKCghZm9vKSBpbiBvYmplY3QpIHtcbiAgICAvLyBhbGxvd2VkLCBiZWNhdXNlIHRoZSBuZWdhdGlvbiBpcyBleHBsaWNpdGx5IHdyYXBwZWQgaW4gcGFyZW50aGVzZXNcbiAgICAvLyBpdCBpcyBlcXVpdmFsZW50IHRvIChmb28gPyBcImZhbHNlXCIgOiBcInRydWVcIikgaW4gb2JqZWN0XG4gICAgLy8gdGhpcyBpcyBhbGxvd2VkIGFzIGFuIGV4Y2VwdGlvbiBmb3IgcmFyZSBzaXR1YXRpb25zIHdoZW4gdGhhdCBpcyB0aGUgaW50ZW5kZWQgbWVhbmluZ1xufVxuXG5pZigoXCJcIiArICFmb28pIGluIG9iamVjdCkge1xuICAgIC8vIHlvdSBjYW4gYWxzbyBtYWtlIHRoZSBpbnRlbnRpb24gbW9yZSBleHBsaWNpdCwgd2l0aCB0eXBlIGNvbnZlcnNpb25cbn0ifQ==)\n\n``` language-js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif ((!foo) in object) {\n    // allowed, because the negation is explicitly wrapped in parentheses\n    // it is equivalent to (foo ? \"false\" : \"true\") in object\n    // this is allowed as an exception for rare situations when that is the intended meaning\n}\n\nif((\"\" + !foo) in object) {\n    // you can also make the intention more explicit, with type conversion\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1uZWdhdGlvbjogXCJlcnJvclwiKi9cblxuaWYgKCEoZm9vKSBpbiBvYmplY3QpIHtcbiAgICAvLyB0aGlzIGlzIG5vdCBhbiBhbGxvd2VkIGV4Y2VwdGlvblxufSJ9)\n\n``` language-js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(foo) in object) {\n    // this is not an allowed exception\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"enforceForOrderingRelations\": false` (default) allows negation of the left-hand side of ordering relational operators (`<`, `>`, `<=`, `>=`)\n- `\"enforceForOrderingRelations\": true` disallows negation of the left-hand side of ordering relational operators\n\n### enforceForOrderingRelations\n\nWith this option set to `true` the rule is additionally enforced for:\n\n- `<` operator.\n- `>` operator.\n- `<=` operator.\n- `>=` operator.\n\nThe purpose is to avoid expressions such as `! a < b` (which is equivalent to `(a ? 0 : 1) < b`) when what is really intended is `!(a < b)`.\n\nExamples of additional **incorrect** code for this rule with the `{ \"enforceForOrderingRelations\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1uZWdhdGlvbjogW1wiZXJyb3JcIiwgeyBcImVuZm9yY2VGb3JPcmRlcmluZ1JlbGF0aW9uc1wiOiB0cnVlIH1dKi9cblxuaWYgKCEgYSA8IGIpIHt9XG5cbndoaWxlICghIGEgPiBiKSB7fVxuXG5mb28gPSAhIGEgPD0gYjtcblxuZm9vID0gISBhID49IGI7In0=)\n\n``` language-js\n/*eslint no-unsafe-negation: [\"error\", { \"enforceForOrderingRelations\": true }]*/\n\nif (! a < b) {}\n\nwhile (! a > b) {}\n\nfoo = ! a <= b;\n\nfoo = ! a >= b;\n```\n\n## When Not To Use It\n\nIf you don’t want to notify unsafe logical negations, then it’s safe to disable this rule.\n\n## Handled by TypeScript\n\nIt is safe to disable this rule when using TypeScript because TypeScript's compiler enforces this check.\n\n## Version\n\nThis rule was introduced in ESLint v3.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unsafe-negation.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unsafe-negation.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unsafe-negation](https://eslint.org/docs/latest/rules/no-unsafe-negation)"
- name: no-unsafe-optional-chaining
  id: rules/no-unsafe-optional-chaining
  summary: The optional chaining (?.) expression can short-circuit with a return value of undefined
  description: "# no-unsafe-optional-chaining\n\nDisallow use of optional chaining in contexts where the `undefined` value is not allowed\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unsafe-optional-chaining../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [disallowArithmeticOperators](#disallowarithmeticoperators)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThe optional chaining (`?.`) expression can short-circuit with a return value of `undefined`. Therefore, treating an evaluated optional chaining expression as a function, object, number, etc., can cause TypeError or unexpected results. For example:\n\n``` language-js\nvar obj = undefined;\n\n1 in obj?.foo;  // TypeError\nwith (obj?.foo);  // TypeError\nfor (bar of obj?.foo);  // TypeError\nbar instanceof obj?.foo;  // TypeError\nconst { bar } = obj?.foo;  // TypeError\n```\n\nAlso, parentheses limit the scope of short-circuiting in chains. For example:\n\n``` language-js\nvar obj = undefined;\n\n(obj?.foo)(); // TypeError\n(obj?.foo).bar; // TypeError\n```\n\n## Rule Details\n\nThis rule aims to detect some cases where the use of optional chaining doesn’t prevent runtime errors. In particular, it flags optional chaining expressions in positions where short-circuiting to `undefined` causes throwing a TypeError afterward.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1vcHRpb25hbC1jaGFpbmluZzogXCJlcnJvclwiKi9cblxuKG9iaj8uZm9vKSgpO1xuXG4ob2JqPy5mb28pLmJhcjtcblxuKGZvbz8uKCkpLmJhcjtcblxuKGZvbz8uKCkpLmJhcigpO1xuXG4ob2JqPy5mb28gPz8gb2JqPy5iYXIpKCk7XG5cbihmb28gfHwgb2JqPy5mb28pKCk7XG5cbihvYmo/LmZvbyAmJiBmb28pKCk7XG5cbihmb28gPyBvYmo/LmZvbyA6IGJhcikoKTtcblxuKGZvbywgb2JqPy5iYXIpLmJhejtcblxuKG9iaj8uZm9vKWB0ZW1wbGF0ZWA7XG5cbm5ldyAob2JqPy5mb28pKCk7XG5cblsuLi5vYmo/LmZvb107XG5cbmJhciguLi5vYmo/LmZvbyk7XG5cbjEgaW4gb2JqPy5mb287XG5cbmJhciBpbnN0YW5jZW9mIG9iaj8uZm9vO1xuXG5mb3IgKGJhciBvZiBvYmo/LmZvbyk7XG5cbmNvbnN0IHsgYmFyIH0gPSBvYmo/LmZvbztcblxuW3sgYmFyIH0gPSBvYmo/LmZvb10gPSBbXTtcblxud2l0aCAob2JqPy5mb28pO1xuXG5jbGFzcyBBIGV4dGVuZHMgb2JqPy5mb28ge31cblxudmFyIGEgPSBjbGFzcyBBIGV4dGVuZHMgb2JqPy5mb28ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGZvbyAoKSB7XG4gICAgY29uc3QgeyBiYXIgfSA9IGF3YWl0IG9iaj8uZm9vO1xuICAgKGF3YWl0IG9iaj8uZm9vKSgpO1xuICAgKGF3YWl0IG9iaj8uZm9vKS5iYXI7XG59In0=)\n\n``` language-js\n/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)();\n\n(obj?.foo).bar;\n\n(foo?.()).bar;\n\n(foo?.()).bar();\n\n(obj?.foo ?? obj?.bar)();\n\n(foo || obj?.foo)();\n\n(obj?.foo && foo)();\n\n(foo ? obj?.foo : bar)();\n\n(foo, obj?.bar).baz;\n\n(obj?.foo)`template`;\n\nnew (obj?.foo)();\n\n[...obj?.foo];\n\nbar(...obj?.foo);\n\n1 in obj?.foo;\n\nbar instanceof obj?.foo;\n\nfor (bar of obj?.foo);\n\nconst { bar } = obj?.foo;\n\n[{ bar } = obj?.foo] = [];\n\nwith (obj?.foo);\n\nclass A extends obj?.foo {}\n\nvar a = class A extends obj?.foo {};\n\nasync function foo () {\n    const { bar } = await obj?.foo;\n   (await obj?.foo)();\n   (await obj?.foo).bar;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1vcHRpb25hbC1jaGFpbmluZzogXCJlcnJvclwiKi9cblxuKG9iaj8uZm9vKT8uKCk7XG5cbm9iaj8uZm9vKCk7XG5cbihvYmo/LmZvbyA/PyBiYXIpKCk7XG5cbm9iaj8uZm9vLmJhcjtcblxub2JqLmZvbz8uYmFyO1xuXG5mb28/LigpPy5iYXI7XG5cbihvYmo/LmZvbyA/PyBiYXIpYHRlbXBsYXRlYDtcblxubmV3IChvYmo/LmZvbyA/PyBiYXIpKCk7XG5cbnZhciBiYXogPSB7Li4ub2JqPy5mb299O1xuXG5jb25zdCB7IGJhciB9ID0gb2JqPy5mb28gfHwgYmF6O1xuXG5hc3luYyBmdW5jdGlvbiBmb28gKCkge1xuICBjb25zdCB7IGJhciB9ID0gYXdhaXQgb2JqPy5mb28gfHwgYmF6O1xuICAgKGF3YWl0IG9iaj8uZm9vKT8uKCk7XG4gICAoYXdhaXQgb2JqPy5mb28pPy5iYXI7XG59In0=)\n\n``` language-js\n/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)?.();\n\nobj?.foo();\n\n(obj?.foo ?? bar)();\n\nobj?.foo.bar;\n\nobj.foo?.bar;\n\nfoo?.()?.bar;\n\n(obj?.foo ?? bar)`template`;\n\nnew (obj?.foo ?? bar)();\n\nvar baz = {...obj?.foo};\n\nconst { bar } = obj?.foo || baz;\n\nasync function foo () {\n  const { bar } = await obj?.foo || baz;\n   (await obj?.foo)?.();\n   (await obj?.foo)?.bar;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `disallowArithmeticOperators`: Disallow arithmetic operations on optional chaining expressions (Default `false`). If this is `true`, this rule warns arithmetic operations on optional chaining expressions, which possibly result in `NaN`.\n\n### disallowArithmeticOperators\n\nWith this option set to `true` the rule is enforced for:\n\n- Unary operators: `-`, `+`\n- Arithmetic operators: `+`, `-`, `/`, `*`, `%`, `**`\n- Assignment operators: `+=`, `-=`, `/=`, `*=`, `%=`, `**=`\n\nExamples of additional **incorrect** code for this rule with the `{ \"disallowArithmeticOperators\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVuc2FmZS1vcHRpb25hbC1jaGFpbmluZzogW1wiZXJyb3JcIiwgeyBcImRpc2FsbG93QXJpdGhtZXRpY09wZXJhdG9yc1wiOiB0cnVlIH1dKi9cblxuK29iaj8uZm9vO1xuLW9iaj8uZm9vO1xuXG5vYmo/LmZvbyArIGJhcjtcbm9iaj8uZm9vIC0gYmFyO1xub2JqPy5mb28gLyBiYXI7XG5vYmo/LmZvbyAqIGJhcjtcbm9iaj8uZm9vICUgYmFyO1xub2JqPy5mb28gKiogYmFyO1xuXG5iYXogKz0gb2JqPy5mb287XG5iYXogLT0gb2JqPy5mb287XG5iYXogLz0gb2JqPy5mb287XG5iYXogKj0gb2JqPy5mb287XG5iYXogJT0gb2JqPy5mb287XG5iYXogKio9IG9iaj8uZm9vO1xuXG5hc3luYyBmdW5jdGlvbiBmb28gKCkge1xuICArYXdhaXQgb2JqPy5mb287XG4gIGF3YWl0IG9iaj8uZm9vICsgYmFyO1xuICBiYXogKz0gYXdhaXQgb2JqPy5mb287XG59In0=)\n\n``` language-js\n/*eslint no-unsafe-optional-chaining: [\"error\", { \"disallowArithmeticOperators\": true }]*/\n\n+obj?.foo;\n-obj?.foo;\n\nobj?.foo + bar;\nobj?.foo - bar;\nobj?.foo / bar;\nobj?.foo * bar;\nobj?.foo % bar;\nobj?.foo ** bar;\n\nbaz += obj?.foo;\nbaz -= obj?.foo;\nbaz /= obj?.foo;\nbaz *= obj?.foo;\nbaz %= obj?.foo;\nbaz **= obj?.foo;\n\nasync function foo () {\n  +await obj?.foo;\n  await obj?.foo + bar;\n  baz += await obj?.foo;\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v7.15.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unsafe-optional-chaining.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unsafe-optional-chaining.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining](https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining)"
- name: no-unused-expressions
  id: rules/no-unused-expressions
  summary: An unused expression which has no effect on the state of the program indicates a logic error
  description: "# no-unused-expressions\n\nDisallow unused expressions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowShortCircuit](#allowshortcircuit)\n    2.  [allowTernary](#allowternary)\n    3.  [allowShortCircuit and allowTernary](#allowshortcircuit-and-allowternary)\n    4.  [allowTaggedTemplates](#allowtaggedtemplates)\n    5.  [enforceForJSX](#enforceforjsx)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nAn unused expression which has no effect on the state of the program indicates a logic error.\n\nFor example, `n + 1;` is not a syntax error, but it might be a typing mistake where a programmer meant an assignment statement `n += 1;` instead. Sometimes, such unused expressions may be eliminated by some build tools in production environment, which possibly breaks application logic.\n\n## Rule Details\n\nThis rule aims to eliminate unused expressions which have no effect on the state of the program.\n\nThis rule does not apply to function calls or constructor calls with the `new` operator, because they could have *side effects* on the state of the program.\n\n``` language-js\nvar i = 0;\nfunction increment() { i += 1; }\nincrement(); // return value is unused, but i changed as a side effect\n\nvar nThings = 0;\nfunction Thing() { nThings += 1; }\nnew Thing(); // constructed object is unused, but nThings changed as a side effect\n```\n\nThis rule does not apply to directives (which are in the form of literal string expressions such as `\"use strict\";` at the beginning of a script, module, or function).\n\nSequence expressions (those using a comma, such as `a = 1, b = 2`) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.\n\n## Options\n\nThis rule, in its default state, does not require any arguments. If you would like to enable one or more of the following you may pass an object with the options set as follows:\n\n- `allowShortCircuit` set to `true` will allow you to use short circuit evaluations in your expressions (Default: `false`).\n- `allowTernary` set to `true` will enable you to use ternary operators in your expressions similarly to short circuit evaluations (Default: `false`).\n- `allowTaggedTemplates` set to `true` will enable you to use tagged template literals in your expressions (Default: `false`).\n- `enforceForJSX` set to `true` will flag unused JSX element expressions (Default: `false`).\n\nThese options allow unused expressions *only if all* of the code paths either directly change the state (for example, assignment statement) or could have *side effects* (for example, function call).\n\nExamples of **incorrect** code for the default `{ \"allowShortCircuit\": false, \"allowTernary\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJlcnJvclwiKi9cblxuMFxuXG5pZigwKSAwXG5cbnswfVxuXG5mKDApLCB7fVxuXG5hICYmIGIoKVxuXG5hLCBiKClcblxuYyA9IGEsIGI7XG5cbmEoKSAmJiBmdW5jdGlvbiBuYW1lZEZ1bmN0aW9uSW5FeHByZXNzaW9uQ29udGV4dCAoKSB7ZigpO31cblxuKGZ1bmN0aW9uIGFuSW5jb21wbGV0ZUlJRkUgKCkge30pO1xuXG5pbmplY3RHbG9iYWxgYm9keXsgY29sb3I6IHJlZDsgfWBcbiJ9)\n\n``` language-js\n/*eslint no-unused-expressions: \"error\"*/\n\n0\n\nif(0) 0\n\n{0}\n\nf(0), {}\n\na && b()\n\na, b()\n\nc = a, b;\n\na() && function namedFunctionInExpressionContext () {f();}\n\n(function anIncompleteIIFE () {});\n\ninjectGlobal`body{ color: red; }`\n```\n\nExamples of **correct** code for the default `{ \"allowShortCircuit\": false, \"allowTernary\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJlcnJvclwiKi9cblxue30gLy8gSW4gdGhpcyBjb250ZXh0LCB0aGlzIGlzIGEgYmxvY2sgc3RhdGVtZW50LCBub3QgYW4gb2JqZWN0IGxpdGVyYWxcblxueyBteUxhYmVsOiBmb28oKSB9IC8vIEluIHRoaXMgY29udGV4dCwgdGhpcyBpcyBhIGJsb2NrIHN0YXRlbWVudCB3aXRoIGEgbGFiZWwgYW5kIGV4cHJlc3Npb24sIG5vdCBhbiBvYmplY3QgbGl0ZXJhbFxuXG5mdW5jdGlvbiBuYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24gKCkge31cblxuKGZ1bmN0aW9uIGFHZW51aW5lSUlGRSAoKSB7fSgpKTtcblxuZigpXG5cbmEgPSAwXG5cbm5ldyBDXG5cbmRlbGV0ZSBhLmJcblxudm9pZCBhIn0=)\n\n``` language-js\n/*eslint no-unused-expressions: \"error\"*/\n\n{} // In this context, this is a block statement, not an object literal\n\n{ myLabel: foo() } // In this context, this is a block statement with a label and expression, not an object literal\n\nfunction namedFunctionDeclaration () {}\n\n(function aGenuineIIFE () {}());\n\nf()\n\na = 0\n\nnew C\n\ndelete a.b\n\nvoid a\n```\n\nNote that one or more string expression statements (with or without semi-colons) will only be considered as unused if they are not in the beginning of a script, module, or function (alone and uninterrupted by other statements). Otherwise, they will be treated as part of a “directive prologue”, a section potentially usable by JavaScript engines. This includes “strict mode” directives.\n\nExamples of **correct** code for this rule in regard to directives:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJlcnJvclwiKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBhc21cIlxuXCJ1c2Ugc3RyaWN0ZXJcIjtcblwidXNlIGJhYmVsXCJcblwiYW55IG90aGVyIHN0cmluZ3MgbGlrZSB0aGlzIGluIHRoZSBkaXJlY3RpdmUgcHJvbG9ndWVcIjtcblwidGhpcyBpcyBzdGlsbCB0aGUgZGlyZWN0aXZlIHByb2xvZ3VlXCI7XG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICBcImJhclwiO1xufVxuXG5jbGFzcyBGb28ge1xuICAgIHNvbWVNZXRob2QoKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: \"error\"*/\n\n\"use strict\";\n\"use asm\"\n\"use stricter\";\n\"use babel\"\n\"any other strings like this in the directive prologue\";\n\"this is still the directive prologue\";\n\nfunction foo() {\n    \"bar\";\n}\n\nclass Foo {\n    someMethod() {\n        \"use strict\";\n    }\n}\n```\n\nExamples of **incorrect** code for this rule in regard to directives:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJlcnJvclwiKi9cblxuZG9Tb21ldGhpbmcoKTtcblwidXNlIHN0cmljdFwiOyAvLyB0aGlzIGlzbid0IGluIGEgZGlyZWN0aXZlIHByb2xvZ3VlLCBiZWNhdXNlIHRoZXJlIGlzIGEgbm9uLWRpcmVjdGl2ZSBzdGF0ZW1lbnQgYmVmb3JlIGl0XG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICBcImJhclwiICsgMTtcbn1cblxuY2xhc3MgRm9vIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjsgLy8gY2xhc3Mgc3RhdGljIGJsb2NrcyBkbyBub3QgaGF2ZSBkaXJlY3RpdmUgcHJvbG9ndWVzXG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint no-unused-expressions: \"error\"*/\n\ndoSomething();\n\"use strict\"; // this isn't in a directive prologue, because there is a non-directive statement before it\n\nfunction foo() {\n    \"bar\" + 1;\n}\n\nclass Foo {\n    static {\n        \"use strict\"; // class static blocks do not have directive prologues\n    }\n}\n```\n\n### allowShortCircuit\n\nExamples of **incorrect** code for the `{ \"allowShortCircuit\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93U2hvcnRDaXJjdWl0XCI6IHRydWUgfV0qL1xuXG5hIHx8IGIifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na || b\n```\n\nExamples of **correct** code for the `{ \"allowShortCircuit\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93U2hvcnRDaXJjdWl0XCI6IHRydWUgfV0qL1xuXG5hICYmIGIoKVxuYSgpIHx8IChiID0gYykifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na && b()\na() || (b = c)\n```\n\n### allowTernary\n\nExamples of **incorrect** code for the `{ \"allowTernary\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93VGVybmFyeVwiOiB0cnVlIH1dKi9cblxuYSA/IGIgOiAwXG5hID8gYiA6IGMoKSJ9)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b : 0\na ? b : c()\n```\n\nExamples of **correct** code for the `{ \"allowTernary\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93VGVybmFyeVwiOiB0cnVlIH1dKi9cblxuYSA/IGIoKSA6IGMoKVxuYSA/IChiID0gYykgOiBkKCkifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b() : c()\na ? (b = c) : d()\n```\n\n### allowShortCircuit and allowTernary\n\nExamples of **correct** code for the `{ \"allowShortCircuit\": true, \"allowTernary\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93U2hvcnRDaXJjdWl0XCI6IHRydWUsIFwiYWxsb3dUZXJuYXJ5XCI6IHRydWUgfV0qL1xuXG5hID8gYigpIHx8IChjID0gZCkgOiBlKCkifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true, \"allowTernary\": true }]*/\n\na ? b() || (c = d) : e()\n```\n\n### allowTaggedTemplates\n\nExamples of **incorrect** code for the `{ \"allowTaggedTemplates\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93VGFnZ2VkVGVtcGxhdGVzXCI6IHRydWUgfV0qL1xuXG5gc29tZSB1bnRhZ2dlZCB0ZW1wbGF0ZSBzdHJpbmdgOyJ9)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\n`some untagged template string`;\n```\n\nExamples of **correct** code for the `{ \"allowTaggedTemplates\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogW1wiZXJyb3JcIiwgeyBcImFsbG93VGFnZ2VkVGVtcGxhdGVzXCI6IHRydWUgfV0qL1xuXG50YWdgc29tZSB0YWdnZWQgdGVtcGxhdGUgc3RyaW5nYDsifQ==)\n\n``` language-js\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\ntag`some tagged template string`;\n```\n\n### enforceForJSX\n\nJSX is most-commonly used in the React ecosystem, where it is compiled to `React.createElement` expressions. Though free from side-effects, these calls are not automatically flagged by the `no-unused-expression` rule. If you’re using React, or any other side-effect-free JSX pragma, this option can be enabled to flag these expressions.\n\nExamples of **incorrect** code for the `{ \"enforceForJSX\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlRm9ySlNYXCI6IHRydWUgfV0qL1xuXG48TXlDb21wb25lbnQgLz47XG5cbjw+PC8+OyJ9)\n\n``` language-jsx\n/*eslint no-unused-expressions: [\"error\", { \"enforceForJSX\": true }]*/\n\n<MyComponent />;\n\n<></>;\n```\n\nExamples of **correct** code for the `{ \"enforceForJSX\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6eyJqc3giOnRydWV9fX0sInRleHQiOiIvKmVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFtcImVycm9yXCIsIHsgXCJlbmZvcmNlRm9ySlNYXCI6IHRydWUgfV0qL1xuXG52YXIgbXlDb21wb25lbnRQYXJ0aWFsID0gPE15Q29tcG9uZW50IC8+O1xuXG52YXIgbXlGcmFnbWVudCA9IDw+PC8+OyJ9)\n\n``` language-jsx\n/*eslint no-unused-expressions: [\"error\", { \"enforceForJSX\": true }]*/\n\nvar myComponentPartial = <MyComponent />;\n\nvar myFragment = <></>;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unused-expressions.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unused-expressions.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unused-expressions](https://eslint.org/docs/latest/rules/no-unused-expressions)"
- name: no-unused-labels
  id: rules/no-unused-labels
  summary: Labels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring
  description: "# no-unused-labels\n\nDisallow unused labels\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unused-labels../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-unused-labels../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nLabels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.\n\n``` language-js\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n```\n\nIn this case, probably removing `OUTER_LOOP:` had been forgotten. Such labels take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused labels.\n\nProblems reported by this rule can be fixed automatically, except when there are any comments between the label and the following statement, or when removing a label would cause the following statement to become a directive such as `\"use strict\"`.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1sYWJlbHM6IFwiZXJyb3JcIiovXG5cbkE6IHZhciBmb28gPSAwO1xuXG5COiB7XG4gICAgZm9vKCk7XG59XG5cbkM6XG5mb3IgKGxldCBpID0gMDsgaSA8IDEwOyArK2kpIHtcbiAgICBmb28oKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-unused-labels: \"error\"*/\n\nA: var foo = 0;\n\nB: {\n    foo();\n}\n\nC:\nfor (let i = 0; i < 10; ++i) {\n    foo();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1sYWJlbHM6IFwiZXJyb3JcIiovXG5cbkE6IHtcbiAgICBpZiAoZm9vKCkpIHtcbiAgICAgICAgYnJlYWsgQTtcbiAgICB9XG4gICAgYmFyKCk7XG59XG5cbkI6XG5mb3IgKGxldCBpID0gMDsgaSA8IDEwOyArK2kpIHtcbiAgICBpZiAoZm9vKCkpIHtcbiAgICAgICAgYnJlYWsgQjtcbiAgICB9XG4gICAgYmFyKCk7XG59In0=)\n\n``` language-js\n/*eslint no-unused-labels: \"error\"*/\n\nA: {\n    if (foo()) {\n        break A;\n    }\n    bar();\n}\n\nB:\nfor (let i = 0; i < 10; ++i) {\n    if (foo()) {\n        break B;\n    }\n    bar();\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unused labels, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [no-extra-label](no-extra-label)\n- [no-labels](no-labels)\n- [no-label-var](no-label-var)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-rc.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unused-labels.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unused-labels.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unused-labels](https://eslint.org/docs/latest/rules/no-unused-labels)"
- name: no-unused-private-class-members
  id: rules/no-unused-private-class-members
  summary: Private class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring
  description: "# no-unused-private-class-members\n\nDisallow unused private class members\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nPrivate class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such class members take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule reports unused private class members.\n\n- A private field or method is considered to be unused if its value is never read.\n- A private accessor is considered to be unused if it is never accessed (read or write).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1wcml2YXRlLWNsYXNzLW1lbWJlcnM6IFwiZXJyb3JcIiovXG5cbmNsYXNzIEEge1xuICAgICN1bnVzZWRNZW1iZXIgPSA1O1xufVxuXG5jbGFzcyBCIHtcbiAgICAjdXNlZE9ubHlJbldyaXRlID0gNTtcbiAgICBtZXRob2QoKSB7XG4gICAgICAgIHRoaXMuI3VzZWRPbmx5SW5Xcml0ZSA9IDQyO1xuICAgIH1cbn1cblxuY2xhc3MgQyB7XG4gICAgI3VzZWRPbmx5VG9VcGRhdGVJdHNlbGYgPSA1O1xuICAgIG1ldGhvZCgpIHtcbiAgICAgICAgdGhpcy4jdXNlZE9ubHlUb1VwZGF0ZUl0c2VsZisrO1xuICAgIH1cbn1cblxuY2xhc3MgRCB7XG4gICAgI3VudXNlZE1ldGhvZCgpIHt9XG59XG5cbmNsYXNzIEUge1xuICAgIGdldCAjdW51c2VkQWNjZXNzb3IoKSB7fVxuICAgIHNldCAjdW51c2VkQWNjZXNzb3IodmFsdWUpIHt9XG59In0=)\n\n``` language-js\n/*eslint no-unused-private-class-members: \"error\"*/\n\nclass A {\n    #unusedMember = 5;\n}\n\nclass B {\n    #usedOnlyInWrite = 5;\n    method() {\n        this.#usedOnlyInWrite = 42;\n    }\n}\n\nclass C {\n    #usedOnlyToUpdateItself = 5;\n    method() {\n        this.#usedOnlyToUpdateItself++;\n    }\n}\n\nclass D {\n    #unusedMethod() {}\n}\n\nclass E {\n    get #unusedAccessor() {}\n    set #unusedAccessor(value) {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC1wcml2YXRlLWNsYXNzLW1lbWJlcnM6IFwiZXJyb3JcIiovXG5cbmNsYXNzIEEge1xuICAgICN1c2VkTWVtYmVyID0gNDI7XG4gICAgbWV0aG9kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdXNlZE1lbWJlcjtcbiAgICB9XG59XG5cbmNsYXNzIEIge1xuICAgICN1c2VkTWV0aG9kKCkge1xuICAgICAgICByZXR1cm4gNDI7XG4gICAgfVxuICAgIGFub3RoZXJNZXRob2QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN1c2VkTWV0aG9kKCk7XG4gICAgfVxufVxuXG5jbGFzcyBDIHtcbiAgICBnZXQgI3VzZWRBY2Nlc3NvcigpIHt9XG4gICAgc2V0ICN1c2VkQWNjZXNzb3IodmFsdWUpIHt9XG4gICAgXG4gICAgbWV0aG9kKCkge1xuICAgICAgICB0aGlzLiN1c2VkQWNjZXNzb3IgPSA0MjtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-unused-private-class-members: \"error\"*/\n\nclass A {\n    #usedMember = 42;\n    method() {\n        return this.#usedMember;\n    }\n}\n\nclass B {\n    #usedMethod() {\n        return 42;\n    }\n    anotherMethod() {\n        return this.#usedMethod();\n    }\n}\n\nclass C {\n    get #usedAccessor() {}\n    set #usedAccessor(value) {}\n    \n    method() {\n        this.#usedAccessor = 42;\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unused private class members, you can safely turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v8.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unused-private-class-members.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unused-private-class-members.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unused-private-class-members](https://eslint.org/docs/latest/rules/no-unused-private-class-members)"
- name: no-unused-vars
  id: rules/no-unused-vars
  summary: Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring
  description: "# no-unused-vars\n\nDisallow unused variables\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-unused-vars../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [exported](#exported)\n2.  [Options](#options)\n    1.  [vars](#vars)\n        1.  [vars: local](#vars-local)\n    2.  [varsIgnorePattern](#varsignorepattern)\n    3.  [args](#args)\n        1.  [args: after-used](#args-after-used)\n        2.  [args: all](#args-all)\n        3.  [args: none](#args-none)\n    4.  [argsIgnorePattern](#argsignorepattern)\n    5.  [caughtErrors](#caughterrors)\n        1.  [caughtErrors: none](#caughterrors-none)\n        2.  [caughtErrors: all](#caughterrors-all)\n    6.  [caughtErrorsIgnorePattern](#caughterrorsignorepattern)\n    7.  [destructuredArrayIgnorePattern](#destructuredarrayignorepattern)\n    8.  [ignoreRestSiblings](#ignorerestsiblings)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and function parameters.\n\nA variable `foo` is considered to be used if any of the following are true:\n\n- It is called (`foo()`) or constructed (`new foo()`)\n- It is read (`var bar = foo`)\n- It is passed into a function as an argument (`doSomething(foo)`)\n- It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever declared (`var foo = 5`) or assigned to (`foo = 7`).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcImVycm9yXCIqL1xuLypnbG9iYWwgc29tZV91bnVzZWRfdmFyKi9cblxuLy8gSXQgY2hlY2tzIHZhcmlhYmxlcyB5b3UgaGF2ZSBkZWZpbmVkIGFzIGdsb2JhbFxuc29tZV91bnVzZWRfdmFyID0gNDI7XG5cbnZhciB4O1xuXG4vLyBXcml0ZS1vbmx5IHZhcmlhYmxlcyBhcmUgbm90IGNvbnNpZGVyZWQgYXMgdXNlZC5cbnZhciB5ID0gMTA7XG55ID0gNTtcblxuLy8gQSByZWFkIGZvciBhIG1vZGlmaWNhdGlvbiBvZiBpdHNlbGYgaXMgbm90IGNvbnNpZGVyZWQgYXMgdXNlZC5cbnZhciB6ID0gMDtcbnogPSB6ICsgMTtcblxuLy8gQnkgZGVmYXVsdCwgdW51c2VkIGFyZ3VtZW50cyBjYXVzZSB3YXJuaW5ncy5cbihmdW5jdGlvbihmb28pIHtcbiAgICByZXR1cm4gNTtcbn0pKCk7XG5cbi8vIFVudXNlZCByZWN1cnNpdmUgZnVuY3Rpb25zIGFsc28gY2F1c2Ugd2FybmluZ3MuXG5mdW5jdGlvbiBmYWN0KG4pIHtcbiAgICBpZiAobiA8IDIpIHJldHVybiAxO1xuICAgIHJldHVybiBuICogZmFjdChuIC0gMSk7XG59XG5cbi8vIFdoZW4gYSBmdW5jdGlvbiBkZWZpbml0aW9uIGRlc3RydWN0dXJlcyBhbiBhcnJheSwgdW51c2VkIGVudHJpZXMgZnJvbSB0aGUgYXJyYXkgYWxzbyBjYXVzZSB3YXJuaW5ncy5cbmZ1bmN0aW9uIGdldFkoW3gsIHldKSB7XG4gICAgcmV0dXJuIHk7XG59XG5nZXRZKFtcImFcIiwgXCJiXCJdKTsifQ==)\n\n``` language-js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcImVycm9yXCIqL1xuXG52YXIgeCA9IDEwO1xuYWxlcnQoeCk7XG5cbi8vIGZvbyBpcyBjb25zaWRlcmVkIHVzZWQgaGVyZVxubXlGdW5jKGZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyAuLi5cbn0uYmluZCh0aGlzKSk7XG5cbihmdW5jdGlvbihmb28pIHtcbiAgICByZXR1cm4gZm9vO1xufSkoKTtcblxudmFyIG15RnVuYztcbm15RnVuYyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgLy8gbXlGdW5jIGlzIGNvbnNpZGVyZWQgdXNlZFxuICAgIG15RnVuYygpO1xufSwgNTApO1xuXG4vLyBPbmx5IHRoZSBzZWNvbmQgYXJndW1lbnQgZnJvbSB0aGUgZGVzdHJ1Y3R1cmVkIGFycmF5IGlzIHVzZWQuXG5mdW5jdGlvbiBnZXRZKFssIHldKSB7XG4gICAgcmV0dXJuIHk7XG59XG5nZXRZKFtcImFcIiwgXCJiXCJdKTsifQ==)\n\n``` language-js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the destructured array is used.\nfunction getY([, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n- when the environment is `node` or `commonjs`\n- when `parserOptions.sourceType` is `module`\n- when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\n``` language-js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\nExamples of **correct** code for `/* exported variableName */` operation with `no-unused-vars`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcImVycm9yXCIqL1xuLyogZXhwb3J0ZWQgZ2xvYmFsX3ZhciAqL1xuXG52YXIgZ2xvYmFsX3ZhciA9IDQyOyJ9)\n\n``` language-js\n/*eslint no-unused-vars: \"error\"*/\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n``` language-json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n- `all` checks all variables for usage, including those in the global scope. This is the default setting.\n- `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc1wiOiBcImxvY2FsXCIgfV0qL1xuLypnbG9iYWwgc29tZV91bnVzZWRfdmFyICovXG5cbnNvbWVfdW51c2VkX3ZhciA9IDQyOyJ9)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJbaUldZ25vcmVkXCIgfV0qL1xuXG52YXIgZmlyc3RWYXJJZ25vcmVkID0gMTtcbnZhciBzZWNvbmRWYXIgPSAyO1xuY29uc29sZS5sb2coc2Vjb25kVmFyKTsifQ==)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n- `after-used` - unused positional arguments that occur before the last used argument will not be checked, but all named arguments and all positional arguments after the last used argument will be checked.\n- `all` - all named arguments must be used.\n- `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiYXJnc1wiOiBcImFmdGVyLXVzZWRcIiB9XSovXG5cbi8vIDIgZXJyb3JzLCBmb3IgdGhlIHBhcmFtZXRlcnMgYWZ0ZXIgdGhlIGxhc3QgdXNlZCBwYXJhbWV0ZXIgKGJhcilcbi8vIFwiYmF6XCIgaXMgZGVmaW5lZCBidXQgbmV2ZXIgdXNlZFxuLy8gXCJxdXhcIiBpcyBkZWZpbmVkIGJ1dCBuZXZlciB1c2VkXG4oZnVuY3Rpb24oZm9vLCBiYXIsIGJheiwgcXV4KSB7XG4gICAgcmV0dXJuIGJhcjtcbn0pKCk7In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 2 errors, for the parameters after the last used parameter (bar)\n// \"baz\" is defined but never used\n// \"qux\" is defined but never used\n(function(foo, bar, baz, qux) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7XCJhcmdzXCI6IFwiYWZ0ZXItdXNlZFwifV0qL1xuXG4oZnVuY3Rpb24oZm9vLCBiYXIsIGJheiwgcXV4KSB7XG4gICAgcmV0dXJuIHF1eDtcbn0pKCk7In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz, qux) {\n    return qux;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiYXJnc1wiOiBcImFsbFwiIH1dKi9cblxuLy8gMiBlcnJvcnNcbi8vIFwiZm9vXCIgaXMgZGVmaW5lZCBidXQgbmV2ZXIgdXNlZFxuLy8gXCJiYXpcIiBpcyBkZWZpbmVkIGJ1dCBuZXZlciB1c2VkXG4oZnVuY3Rpb24oZm9vLCBiYXIsIGJheikge1xuICAgIHJldHVybiBiYXI7XG59KSgpOyJ9)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiYXJnc1wiOiBcIm5vbmVcIiB9XSovXG5cbihmdW5jdGlvbihmb28sIGJhciwgYmF6KSB7XG4gICAgcmV0dXJuIGJhcjtcbn0pKCk7In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiYXJnc0lnbm9yZVBhdHRlcm5cIjogXCJeX1wiIH1dKi9cblxuZnVuY3Rpb24gZm9vKHgsIF95KSB7XG4gICAgcmV0dXJuIHggKyAxO1xufVxuZm9vKCk7In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n- `none` - do not check error objects. This is the default setting.\n- `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiY2F1Z2h0RXJyb3JzXCI6IFwibm9uZVwiIH1dKi9cblxudHJ5IHtcbiAgICAvLy4uLlxufSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcImVycm9yc1wiKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiY2F1Z2h0RXJyb3JzXCI6IFwiYWxsXCIgfV0qL1xuXG4vLyAxIGVycm9yXG4vLyBcImVyclwiIGlzIGRlZmluZWQgYnV0IG5ldmVyIHVzZWRcbnRyeSB7XG4gICAgLy8uLi5cbn0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvcnNcIik7XG59In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string ‘ignore’.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiY2F1Z2h0RXJyb3JzSWdub3JlUGF0dGVyblwiOiBcIl5pZ25vcmVcIiB9XSovXG5cbnRyeSB7XG4gICAgLy8uLi5cbn0gY2F0Y2ggKGlnbm9yZUVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvcnNcIik7XG59In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n### destructuredArrayIgnorePattern\n\nThe `destructuredArrayIgnorePattern` option specifies exceptions not to check for usage: elements of array destructuring patterns whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"destructuredArrayIgnorePattern\": \"^_\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiZGVzdHJ1Y3R1cmVkQXJyYXlJZ25vcmVQYXR0ZXJuXCI6IFwiXl9cIiB9XSovXG5cbmNvbnN0IFthLCBfYiwgY10gPSBbXCJhXCIsIFwiYlwiLCBcImNcIl07XG5jb25zb2xlLmxvZyhhK2MpO1xuXG5jb25zdCB7IHg6IFtfYSwgZm9vXSB9ID0gYmFyO1xuY29uc29sZS5sb2coZm9vKTtcblxuZnVuY3Rpb24gYmF6KFtfYywgeF0pIHtcbiAgICB4O1xufVxuYmF6KCk7XG5cbmZ1bmN0aW9uIHRlc3Qoe3A6IFtfcSwgcl19KSB7XG4gICAgcjtcbn1cbnRlc3QoKTtcblxubGV0IF9tLCBuO1xuZm9vLmZvckVhY2goaXRlbSA9PiB7XG4gICAgW19tLCBuXSA9IGl0ZW07XG4gICAgY29uc29sZS5sb2cobik7XG59KTtcblxubGV0IF9vLCBwO1xuX28gPSAxO1xuW19vLCBwXSA9IGZvbztcbnA7In0=)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"destructuredArrayIgnorePattern\": \"^_\" }]*/\n\nconst [a, _b, c] = [\"a\", \"b\", \"c\"];\nconsole.log(a+c);\n\nconst { x: [_a, foo] } = bar;\nconsole.log(foo);\n\nfunction baz([_c, x]) {\n    x;\n}\nbaz();\n\nfunction test({p: [_q, r]}) {\n    r;\n}\ntest();\n\nlet _m, n;\nfoo.forEach(item => {\n    [_m, n] = item;\n    console.log(n);\n});\n\nlet _o, p;\n_o = 1;\n[_o, p] = foo;\np;\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/tc39/proposal-object-rest-spread) it is possible to “omit” properties from an object, but by default the sibling properties are marked as “unused”. With this option enabled the rest property’s siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlUmVzdFNpYmxpbmdzXCI6IHRydWUgfV0qL1xuXG4vLyAnZm9vJyBhbmQgJ2Jhcicgd2VyZSBpZ25vcmVkIGJlY2F1c2UgdGhleSBoYXZlIGEgcmVzdCBwcm9wZXJ0eSBzaWJsaW5nLlxudmFyIHsgZm9vLCAuLi5yZXN0IH0gPSBkYXRhO1xuY29uc29sZS5sb2cocmVzdCk7XG5cbi8vIE9SXG5cbnZhciBiYXI7XG4oeyBiYXIsIC4uLnJlc3QgfSA9IGRhdGEpOyJ9)\n\n``` language-js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n\n// 'foo' and 'bar' were ignored because they have a rest property sibling.\nvar { foo, ...rest } = data;\nconsole.log(rest);\n\n// OR\n\nvar bar;\n({ bar, ...rest } = data);\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unused variables or function arguments, you can safely turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-unused-vars.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-unused-vars.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-unused-vars](https://eslint.org/docs/latest/rules/no-unused-vars)"
- name: no-use-before-define
  id: rules/no-use-before-define
  summary: In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it’s possible to use identifiers before their formal declarations in code
  description: "# no-use-before-define\n\nDisallow the use of variables before they are defined\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [functions](#functions)\n    2.  [classes](#classes)\n    3.  [variables](#variables)\n    4.  [allowNamedExports](#allownamedexports)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it’s possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a “temporal dead zone” where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBcImVycm9yXCIqL1xuXG5hbGVydChhKTtcbnZhciBhID0gMTA7XG5cbmYoKTtcbmZ1bmN0aW9uIGYoKSB7fVxuXG5mdW5jdGlvbiBnKCkge1xuICAgIHJldHVybiBiO1xufVxudmFyIGIgPSAxO1xuXG57XG4gICAgYWxlcnQoYyk7XG4gICAgbGV0IGMgPSAxO1xufVxuXG57XG4gICAgY2xhc3MgQyBleHRlbmRzIEMge31cbn1cblxue1xuICAgIGNsYXNzIEMge1xuICAgICAgICBzdGF0aWMgeCA9IFwiZm9vXCI7XG4gICAgICAgIFtDLnhdKCkge31cbiAgICB9XG59XG5cbntcbiAgICBjb25zdCBDID0gY2xhc3Mge1xuICAgICAgICBzdGF0aWMgeCA9IEM7XG4gICAgfVxufVxuXG57XG4gICAgY29uc3QgQyA9IGNsYXNzIHtcbiAgICAgICAgc3RhdGljIHtcbiAgICAgICAgICAgIEMueCA9IFwiZm9vXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGZvbyB9O1xuY29uc3QgZm9vID0gMTsifQ==)\n\n``` language-js\n/*eslint no-use-before-define: \"error\"*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n{\n    alert(c);\n    let c = 1;\n}\n\n{\n    class C extends C {}\n}\n\n{\n    class C {\n        static x = \"foo\";\n        [C.x]() {}\n    }\n}\n\n{\n    const C = class {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        static {\n            C.x = \"foo\";\n        }\n    }\n}\n\nexport { foo };\nconst foo = 1;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBcImVycm9yXCIqL1xuXG52YXIgYTtcbmEgPSAxMDtcbmFsZXJ0KGEpO1xuXG5mdW5jdGlvbiBmKCkge31cbmYoMSk7XG5cbnZhciBiID0gMTtcbmZ1bmN0aW9uIGcoKSB7XG4gICAgcmV0dXJuIGI7XG59XG5cbntcbiAgICBsZXQgYztcbiAgICBjKys7XG59XG5cbntcbiAgICBjbGFzcyBDIHtcbiAgICAgICAgc3RhdGljIHggPSBDO1xuICAgIH1cbn1cblxue1xuICAgIGNvbnN0IEMgPSBjbGFzcyBDIHtcbiAgICAgICAgc3RhdGljIHggPSBDO1xuICAgIH1cbn1cblxue1xuICAgIGNvbnN0IEMgPSBjbGFzcyB7XG4gICAgICAgIHggPSBDO1xuICAgIH1cbn1cblxue1xuICAgIGNvbnN0IEMgPSBjbGFzcyBDIHtcbiAgICAgICAgc3RhdGljIHtcbiAgICAgICAgICAgIEMueCA9IFwiZm9vXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGZvbyA9IDE7XG5leHBvcnQgeyBmb28gfTsifQ==)\n\n``` language-js\n/*eslint no-use-before-define: \"error\"*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n{\n    let c;\n    c++;\n}\n\n{\n    class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        x = C;\n    }\n}\n\n{\n    const C = class C {\n        static {\n            C.x = \"foo\";\n        }\n    }\n}\n\nconst foo = 1;\nexport { foo };\n```\n\n## Options\n\n``` language-json\n{\n    \"no-use-before-define\": [\"error\", {\n        \"functions\": true,\n        \"classes\": true,\n        \"variables\": true,\n        \"allowNamedExports\": false\n    }]\n}\n```\n\n- `functions` (`boolean`) - The flag which shows whether or not this rule checks function declarations. If this is `true`, this rule warns every reference to a function before the function declaration. Otherwise, ignores those references. Function declarations are hoisted, so it’s safe. Default is `true`.\n- `classes` (`boolean`) - The flag which shows whether or not this rule checks class declarations of upper scopes. If this is `true`, this rule warns every reference to a class before the class declaration. Otherwise, ignores those references if the declaration is in upper function scopes. Class declarations are not hoisted, so it might be danger. Default is `true`.\n- `variables` (`boolean`) - This flag determines whether or not the rule checks variable declarations in upper scopes. If this is `true`, the rule warns every reference to a variable before the variable declaration. Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it’s in the same scope as the declaration. Default is `true`.\n- `allowNamedExports` (`boolean`) - If this flag is set to `true`, the rule always allows references in `export {};` declarations. These references are safe even if the variables are declared later in the code. Default is `false`.\n\nThis rule accepts `\"nofunc\"` string as an option. `\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true, \"variables\": true, \"allowNamedExports\": false }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwiZnVuY3Rpb25zXCI6IGZhbHNlIH1dKi9cblxuZigpO1xuZnVuY3Rpb24gZigpIHt9In0=)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\nThis option allows references to function declarations. For function expressions and arrow functions, please see the [`variables`](#variables) option.\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwiY2xhc3Nlc1wiOiBmYWxzZSB9XSovXG5cbm5ldyBBKCk7XG5jbGFzcyBBIHtcbn1cblxue1xuICAgIGNsYXNzIEMgZXh0ZW5kcyBDIHt9XG59XG5cbntcbiAgICBjbGFzcyBDIGV4dGVuZHMgRCB7fVxuICAgIGNsYXNzIEQge31cbn1cblxue1xuICAgIGNsYXNzIEMge1xuICAgICAgICBzdGF0aWMgeCA9IFwiZm9vXCI7XG4gICAgICAgIFtDLnhdKCkge31cbiAgICB9XG59XG5cbntcbiAgICBjbGFzcyBDIHtcbiAgICAgICAgc3RhdGljIHtcbiAgICAgICAgICAgIG5ldyBEKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xhc3MgRCB7fVxufSJ9)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n\nnew A();\nclass A {\n}\n\n{\n    class C extends C {}\n}\n\n{\n    class C extends D {}\n    class D {}\n}\n\n{\n    class C {\n        static x = \"foo\";\n        [C.x]() {}\n    }\n}\n\n{\n    class C {\n        static {\n            new D();\n        }\n    }\n    class D {}\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwiY2xhc3Nlc1wiOiBmYWxzZSB9XSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICByZXR1cm4gbmV3IEEoKTtcbn1cblxuY2xhc3MgQSB7XG59In0=)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwidmFyaWFibGVzXCI6IGZhbHNlIH1dKi9cblxuY29uc29sZS5sb2coZm9vKTtcbnZhciBmb28gPSAxO1xuXG5mKCk7XG5jb25zdCBmID0gKCkgPT4ge307XG5cbmcoKTtcbmNvbnN0IGcgPSBmdW5jdGlvbigpIHt9O1xuXG57XG4gICAgY29uc3QgQyA9IGNsYXNzIHtcbiAgICAgICAgc3RhdGljIHggPSBDO1xuICAgIH1cbn1cblxue1xuICAgIGNvbnN0IEMgPSBjbGFzcyB7XG4gICAgICAgIHN0YXRpYyB4ID0gZm9vO1xuICAgIH1cbiAgICBjb25zdCBmb28gPSAxO1xufVxuXG57XG4gICAgY2xhc3MgQyB7XG4gICAgICAgIHN0YXRpYyB7XG4gICAgICAgICAgICB0aGlzLnggPSBmb287XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZm9vID0gMTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n\nf();\nconst f = () => {};\n\ng();\nconst g = function() {};\n\n{\n    const C = class {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        static x = foo;\n    }\n    const foo = 1;\n}\n\n{\n    class C {\n        static {\n            this.x = foo;\n        }\n    }\n    const foo = 1;\n}\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwidmFyaWFibGVzXCI6IGZhbHNlIH1dKi9cblxuZnVuY3Rpb24gYmF6KCkge1xuICAgIGNvbnNvbGUubG9nKGZvbyk7XG59XG52YXIgZm9vID0gMTtcblxuY29uc3QgYSA9ICgpID0+IGYoKTtcbmZ1bmN0aW9uIGIoKSB7IHJldHVybiBmKCk7IH1cbmNvbnN0IGMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGYoKTsgfVxuY29uc3QgZiA9ICgpID0+IHt9O1xuXG5jb25zdCBlID0gZnVuY3Rpb24oKSB7IHJldHVybiBnKCk7IH1cbmNvbnN0IGcgPSBmdW5jdGlvbigpIHt9XG5cbntcbiAgICBjb25zdCBDID0gY2xhc3Mge1xuICAgICAgICB4ID0gZm9vO1xuICAgIH1cbiAgICBjb25zdCBmb28gPSAxO1xufSJ9)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\nvar foo = 1;\n\nconst a = () => f();\nfunction b() { return f(); }\nconst c = function() { return f(); }\nconst f = () => {};\n\nconst e = function() { return g(); }\nconst g = function() {}\n\n{\n    const C = class {\n        x = foo;\n    }\n    const foo = 1;\n}\n```\n\n### allowNamedExports\n\nExamples of **correct** code for the `{ \"allowNamedExports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dOYW1lZEV4cG9ydHNcIjogdHJ1ZSB9XSovXG5cbmV4cG9ydCB7IGEsIGIsIGYsIEMgfTtcblxuY29uc3QgYSA9IDE7XG5cbmxldCBiO1xuXG5mdW5jdGlvbiBmICgpIHt9XG5cbmNsYXNzIEMge30ifQ==)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"allowNamedExports\": true }]*/\n\nexport { a, b, f, C };\n\nconst a = 1;\n\nlet b;\n\nfunction f () {}\n\nclass C {}\n```\n\nExamples of **incorrect** code for the `{ \"allowNamedExports\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dOYW1lZEV4cG9ydHNcIjogdHJ1ZSB9XSovXG5cbmV4cG9ydCBkZWZhdWx0IGE7XG5jb25zdCBhID0gMTtcblxuY29uc3QgYiA9IGM7XG5leHBvcnQgY29uc3QgYyA9IDE7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb28oKSB7XG4gICAgcmV0dXJuIGQ7XG59XG5jb25zdCBkID0gMTsifQ==)\n\n``` language-js\n/*eslint no-use-before-define: [\"error\", { \"allowNamedExports\": true }]*/\n\nexport default a;\nconst a = 1;\n\nconst b = c;\nexport const c = 1;\n\nexport function foo() {\n    return d;\n}\nconst d = 1;\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-use-before-define.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-use-before-define.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-use-before-define](https://eslint.org/docs/latest/rules/no-use-before-define)"
- name: no-useless-backreference
  id: rules/no-useless-backreference
  summary: In JavaScript regular expressions, it’s syntactically valid to define a backreference to a group that belongs to another alternative part of the pattern, a backreference to a group that appears after the backreference, a backreference to a group that contains that backreference, or a backreference to a group that is inside a negative lookaround
  description: "# no-useless-backreference\n\nDisallow useless backreferences in regular expressions\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-useless-backreference../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nIn JavaScript regular expressions, it’s syntactically valid to define a backreference to a group that belongs to another alternative part of the pattern, a backreference to a group that appears after the backreference, a backreference to a group that contains that backreference, or a backreference to a group that is inside a negative lookaround. However, by the specification, in any of these cases the backreference always ends up matching only zero-length (the empty string), regardless of the context in which the backreference and the group appear.\n\nBackreferences that always successfully match zero-length and cannot match anything else are useless. They are basically ignored and can be removed without changing the behavior of the regular expression.\n\n``` language-js\nvar regex = /^(?:(a)|\\1b)$/;\n\nregex.test(\"a\"); // true\nregex.test(\"b\"); // true!\nregex.test(\"ab\"); // false\n\nvar equivalentRegex = /^(?:(a)|b)$/;\n\nequivalentRegex.test(\"a\"); // true\nequivalentRegex.test(\"b\"); // true\nequivalentRegex.test(\"ab\"); // false\n```\n\nUseless backreference is a possible error in the code. It usually indicates that the regular expression does not work as intended.\n\n## Rule Details\n\nThis rule aims to detect and disallow the following backreferences in regular expression:\n\n- Backreference to a group that is in another alternative, e.g., `/(a)|\\1b/`. In such constructed regular expression, the backreference is expected to match what’s been captured in, at that point, a non-participating group.\n- Backreference to a group that appears later in the pattern, e.g., `/\\1(a)/`. The group hasn’t captured anything yet, and ECMAScript doesn’t support forward references. Inside lookbehinds, which match backward, the opposite applies and this rule disallows backreference to a group that appears before in the same lookbehind, e.g., `/(?<=(a)\\1)b/`.\n- Backreference to a group from within the same group, e.g., `/(\\1)/`. Similar to the previous, the group hasn’t captured anything yet, and ECMAScript doesn’t support nested references.\n- Backreference to a group that is in a negative lookaround, if the backreference isn’t in the same negative lookaround, e.g., `/a(?!(b)).\\1/`. A negative lookaround (lookahead or lookbehind) succeeds only if its pattern cannot match, meaning that the group has failed.\n\nBy the ECMAScript specification, all backreferences listed above are valid, always succeed to match zero-length, and cannot match anything else. Consequently, they don’t produce parsing or runtime errors, but also don’t affect the behavior of their regular expressions. They are syntactically valid but useless.\n\nThis might be surprising to developers coming from other languages where some of these backreferences can be used in a meaningful way.\n\n``` language-js\n// in some other languages, this pattern would successfully match \"aab\"\n\n/^(?:(a)(?=a)|\\1b)+$/.test(\"aab\"); // false\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtYmFja3JlZmVyZW5jZTogXCJlcnJvclwiKi9cblxuL14oPzooYSl8XFwxYikkLzsgLy8gcmVmZXJlbmNlIHRvIChhKSBpbnRvIGFub3RoZXIgYWx0ZXJuYXRpdmVcblxuL14oPzooYSl8Yig/OmN8XFwxKSkkLzsgLy8gcmVmZXJlbmNlIHRvIChhKSBpbnRvIGFub3RoZXIgYWx0ZXJuYXRpdmVcblxuL14oPzphfGIoPzooYyl8XFwxKSkkLzsgLy8gcmVmZXJlbmNlIHRvIChjKSBpbnRvIGFub3RoZXIgYWx0ZXJuYXRpdmVcblxuL1xcMShhKS87IC8vIGZvcndhcmQgcmVmZXJlbmNlIHRvIChhKVxuXG5SZWdFeHAoJyhhKVxcXFwyKGIpJyk7IC8vIGZvcndhcmQgcmVmZXJlbmNlIHRvIChiKVxuXG4vKD86YSkoYilcXDIoYykvOyAvLyBmb3J3YXJkIHJlZmVyZW5jZSB0byAoYylcblxuL1xcazxmb28+KD88Zm9vPmEpLzsgLy8gZm9yd2FyZCByZWZlcmVuY2UgdG8gKD88Zm9vPmEpXG5cbi8oPzw9KGEpXFwxKWIvOyAvLyBiYWNrd2FyZCByZWZlcmVuY2UgdG8gKGEpIGZyb20gd2l0aGluIHRoZSBzYW1lIGxvb2tiZWhpbmRcblxuLyg/PCEoYSlcXDEpYi87IC8vIGJhY2t3YXJkIHJlZmVyZW5jZSB0byAoYSkgZnJvbSB3aXRoaW4gdGhlIHNhbWUgbG9va2JlaGluZFxuXG5uZXcgUmVnRXhwKCcoXFxcXDEpJyk7IC8vIG5lc3RlZCByZWZlcmVuY2UgdG8gKFxcMSlcblxuL14oKGEpXFwxKSQvOyAvLyBuZXN0ZWQgcmVmZXJlbmNlIHRvICgoYSlcXDEpXG5cbi9hKD88Zm9vPiguKWJcXDEpLzsgLy8gbmVzdGVkIHJlZmVyZW5jZSB0byAoPzxmb28+KC4pYlxcMSlcblxuL2EoPyEoYikpLlxcMS87IC8vIHJlZmVyZW5jZSB0byAoYikgaW50byBhIG5lZ2F0aXZlIGxvb2thaGVhZFxuXG4vKD88IShhKSliXFwxLzsgLy8gcmVmZXJlbmNlIHRvIChhKSBpbnRvIGEgbmVnYXRpdmUgbG9va2JlaGluZCJ9)\n\n``` language-js\n/*eslint no-useless-backreference: \"error\"*/\n\n/^(?:(a)|\\1b)$/; // reference to (a) into another alternative\n\n/^(?:(a)|b(?:c|\\1))$/; // reference to (a) into another alternative\n\n/^(?:a|b(?:(c)|\\1))$/; // reference to (c) into another alternative\n\n/\\1(a)/; // forward reference to (a)\n\nRegExp('(a)\\\\2(b)'); // forward reference to (b)\n\n/(?:a)(b)\\2(c)/; // forward reference to (c)\n\n/\\k<foo>(?<foo>a)/; // forward reference to (?<foo>a)\n\n/(?<=(a)\\1)b/; // backward reference to (a) from within the same lookbehind\n\n/(?<!(a)\\1)b/; // backward reference to (a) from within the same lookbehind\n\nnew RegExp('(\\\\1)'); // nested reference to (\\1)\n\n/^((a)\\1)$/; // nested reference to ((a)\\1)\n\n/a(?<foo>(.)b\\1)/; // nested reference to (?<foo>(.)b\\1)\n\n/a(?!(b)).\\1/; // reference to (b) into a negative lookahead\n\n/(?<!(a))b\\1/; // reference to (a) into a negative lookbehind\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtYmFja3JlZmVyZW5jZTogXCJlcnJvclwiKi9cblxuL14oPzooYSl8KGIpXFwyKSQvOyAvLyByZWZlcmVuY2UgdG8gKGIpXG5cbi8oYSlcXDEvOyAvLyByZWZlcmVuY2UgdG8gKGEpXG5cblJlZ0V4cCgnKGEpXFxcXDEoYiknKTsgLy8gcmVmZXJlbmNlIHRvIChhKVxuXG4vKGEpKGIpXFwyKGMpLzsgLy8gcmVmZXJlbmNlIHRvIChiKVxuXG4vKD88Zm9vPmEpXFxrPGZvbz4vOyAvLyByZWZlcmVuY2UgdG8gKD88Zm9vPmEpXG5cbi8oPzw9XFwxKGEpKWIvOyAvLyByZWZlcmVuY2UgdG8gKGEpLCBjb3JyZWN0bHkgYmVmb3JlIHRoZSBncm91cCBhcyB0aGV5J3JlIGluIHRoZSBzYW1lIGxvb2tiZWhpbmRcblxuLyg/PD0oYSkpYlxcMS87IC8vIHJlZmVyZW5jZSB0byAoYSksIGNvcnJlY3RseSBhZnRlciB0aGUgZ3JvdXAgYXMgdGhlIGJhY2tyZWZlcmVuY2UgaXNuJ3QgaW4gdGhlIGxvb2tiZWhpbmRcblxubmV3IFJlZ0V4cCgnKC4pXFxcXDEnKTsgLy8gcmVmZXJlbmNlIHRvICguKVxuXG4vXig/OihhKVxcMSkkLzsgLy8gcmVmZXJlbmNlIHRvIChhKVxuXG4vXigoYSlcXDIpJC87IC8vIHJlZmVyZW5jZSB0byAoYSlcblxuL2EoPzxmb28+KC4pYlxcMikvOyAvLyByZWZlcmVuY2UgdG8gKC4pXG5cbi9hKD8hKGJ8YylcXDEpLi87IC8vIHJlZmVyZW5jZSB0byAoYnxjKSwgY29ycmVjdCBhcyBpdCdzIGZyb20gd2l0aGluIHRoZSBzYW1lIG5lZ2F0aXZlIGxvb2thaGVhZFxuXG4vKD88IVxcMShhKSliLzsgLy8gcmVmZXJlbmNlIHRvIChhKSwgY29ycmVjdCBhcyBpdCdzIGZyb20gd2l0aGluIHRoZSBzYW1lIG5lZ2F0aXZlIGxvb2tiZWhpbmQifQ==)\n\n``` language-js\n/*eslint no-useless-backreference: \"error\"*/\n\n/^(?:(a)|(b)\\2)$/; // reference to (b)\n\n/(a)\\1/; // reference to (a)\n\nRegExp('(a)\\\\1(b)'); // reference to (a)\n\n/(a)(b)\\2(c)/; // reference to (b)\n\n/(?<foo>a)\\k<foo>/; // reference to (?<foo>a)\n\n/(?<=\\1(a))b/; // reference to (a), correctly before the group as they're in the same lookbehind\n\n/(?<=(a))b\\1/; // reference to (a), correctly after the group as the backreference isn't in the lookbehind\n\nnew RegExp('(.)\\\\1'); // reference to (.)\n\n/^(?:(a)\\1)$/; // reference to (a)\n\n/^((a)\\2)$/; // reference to (a)\n\n/a(?<foo>(.)b\\2)/; // reference to (.)\n\n/a(?!(b|c)\\1)./; // reference to (b|c), correct as it's from within the same negative lookahead\n\n/(?<!\\1(a))b/; // reference to (a), correct as it's from within the same negative lookbehind\n```\n\nPlease note that this rule does not aim to detect and disallow a potentially erroneous use of backreference syntax in regular expressions, like the use in character classes or an attempt to reference a group that doesn’t exist. Depending on the context, a `\\1`…`\\9` sequence that is not a syntactically valid backreference may produce syntax error, or be parsed as something else (e.g., as a legacy octal escape sequence).\n\nExamples of additional **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtYmFja3JlZmVyZW5jZTogXCJlcnJvclwiKi9cblxuLy8gY29tbWVudHMgZGVzY3JpYmUgYmVoYXZpb3IgaW4gYSBicm93c2VyXG5cbi9eW1xcMV0oYSkkLy50ZXN0KFwiXFx4MDFhXCIpOyAvLyB0cnVlLiBJbiBhIGNoYXJhY3RlciBjbGFzcywgXFwxIGlzIHRyZWF0ZWQgYXMgYW4gb2N0YWwgZXNjYXBlIHNlcXVlbmNlLlxuL15cXDEkLy50ZXN0KFwiXFx4MDFcIik7IC8vIHRydWUuIFNpbmNlIHRoZSBncm91cCAxIGRvZXNuJ3QgZXhpc3QsIFxcMSBpcyB0cmVhdGVkIGFzIGFuIG9jdGFsIGVzY2FwZSBzZXF1ZW5jZS5cbi9eKGEpXFwxXFwyJC8udGVzdChcImFhXFx4MDJcIik7IC8vIHRydWUuIEluIHRoaXMgY2FzZSwgXFwxIGlzIGEgYmFja3JlZmVyZW5jZSwgXFwyIGlzIGFuIG9jdGFsIGVzY2FwZSBzZXF1ZW5jZS4ifQ==)\n\n``` language-js\n/*eslint no-useless-backreference: \"error\"*/\n\n// comments describe behavior in a browser\n\n/^[\\1](a)$/.test(\"\\x01a\"); // true. In a character class, \\1 is treated as an octal escape sequence.\n/^\\1$/.test(\"\\x01\"); // true. Since the group 1 doesn't exist, \\1 is treated as an octal escape sequence.\n/^(a)\\1\\2$/.test(\"aa\\x02\"); // true. In this case, \\1 is a backreference, \\2 is an octal escape sequence.\n```\n\n## Related Rules\n\n- [no-control-regex](no-control-regex)\n- [no-empty-character-class](no-empty-character-class)\n- [no-invalid-regexp](no-invalid-regexp)\n\n## Version\n\nThis rule was introduced in ESLint v7.0.0-alpha.0.\n\n## Further Reading\n\n[Regular expressions - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-backreference.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-backreference.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-backreference](https://eslint.org/docs/latest/rules/no-useless-backreference)"
- name: no-useless-call
  id: rules/no-useless-call
  summary: The function invocation can be written by Function.prototype.call() and Function.prototype.apply()
  description: "# no-useless-call\n\nDisallow unnecessary calls to `.call()` and `.apply()`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Known Limitations](#known-limitations)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThe function invocation can be written by `Function.prototype.call()` and `Function.prototype.apply()`. But `Function.prototype.call()` and `Function.prototype.apply()` are slower than the normal function invocation.\n\n## Rule Details\n\nThis rule is aimed to flag usage of `Function.prototype.call()` and `Function.prototype.apply()` that can be replaced with the normal function invocation.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2FsbDogXCJlcnJvclwiKi9cblxuLy8gVGhlc2UgYXJlIHNhbWUgYXMgYGZvbygxLCAyLCAzKTtgXG5mb28uY2FsbCh1bmRlZmluZWQsIDEsIDIsIDMpO1xuZm9vLmFwcGx5KHVuZGVmaW5lZCwgWzEsIDIsIDNdKTtcbmZvby5jYWxsKG51bGwsIDEsIDIsIDMpO1xuZm9vLmFwcGx5KG51bGwsIFsxLCAyLCAzXSk7XG5cbi8vIFRoZXNlIGFyZSBzYW1lIGFzIGBvYmouZm9vKDEsIDIsIDMpO2Bcbm9iai5mb28uY2FsbChvYmosIDEsIDIsIDMpO1xub2JqLmZvby5hcHBseShvYmosIFsxLCAyLCAzXSk7In0=)\n\n``` language-js\n/*eslint no-useless-call: \"error\"*/\n\n// These are same as `foo(1, 2, 3);`\nfoo.call(undefined, 1, 2, 3);\nfoo.apply(undefined, [1, 2, 3]);\nfoo.call(null, 1, 2, 3);\nfoo.apply(null, [1, 2, 3]);\n\n// These are same as `obj.foo(1, 2, 3);`\nobj.foo.call(obj, 1, 2, 3);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2FsbDogXCJlcnJvclwiKi9cblxuLy8gVGhlIGB0aGlzYCBiaW5kaW5nIGlzIGRpZmZlcmVudC5cbmZvby5jYWxsKG9iaiwgMSwgMiwgMyk7XG5mb28uYXBwbHkob2JqLCBbMSwgMiwgM10pO1xub2JqLmZvby5jYWxsKG51bGwsIDEsIDIsIDMpO1xub2JqLmZvby5hcHBseShudWxsLCBbMSwgMiwgM10pO1xub2JqLmZvby5jYWxsKG90aGVyT2JqLCAxLCAyLCAzKTtcbm9iai5mb28uYXBwbHkob3RoZXJPYmosIFsxLCAyLCAzXSk7XG5cbi8vIFRoZSBhcmd1bWVudCBsaXN0IGlzIHZhcmlhZGljLlxuLy8gVGhvc2UgYXJlIHdhcm5lZCBieSB0aGUgYHByZWZlci1zcHJlYWRgIHJ1bGUuXG5mb28uYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbmZvby5hcHBseShudWxsLCBhcmdzKTtcbm9iai5mb28uYXBwbHkob2JqLCBhcmdzKTsifQ==)\n\n``` language-js\n/*eslint no-useless-call: \"error\"*/\n\n// The `this` binding is different.\nfoo.call(obj, 1, 2, 3);\nfoo.apply(obj, [1, 2, 3]);\nobj.foo.call(null, 1, 2, 3);\nobj.foo.apply(null, [1, 2, 3]);\nobj.foo.call(otherObj, 1, 2, 3);\nobj.foo.apply(otherObj, [1, 2, 3]);\n\n// The argument list is variadic.\n// Those are warned by the `prefer-spread` rule.\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\n## Known Limitations\n\nThis rule compares code statically to check whether or not `thisArg` is changed. So if the code about `thisArg` is a dynamic expression, this rule cannot judge correctly.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2FsbDogXCJlcnJvclwiKi9cblxuYVtpKytdLmZvby5jYWxsKGFbaSsrXSwgMSwgMiwgMyk7In0=)\n\n``` language-js\n/*eslint no-useless-call: \"error\"*/\n\na[i++].foo.call(a[i++], 1, 2, 3);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2FsbDogXCJlcnJvclwiKi9cblxuYVsrK2ldLmZvby5jYWxsKGFbaV0sIDEsIDIsIDMpOyJ9)\n\n``` language-js\n/*eslint no-useless-call: \"error\"*/\n\na[++i].foo.call(a[i], 1, 2, 3);\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary `.call()` and `.apply()`, you can safely disable this rule.\n\n## Related Rules\n\n- [prefer-spread](prefer-spread)\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-call.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-call.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-call](https://eslint.org/docs/latest/rules/no-useless-call)"
- name: no-useless-catch
  id: rules/no-useless-catch
  summary: A catch clause that only rethrows the original error is redundant, and has no effect on the runtime behavior of the program
  description: "# no-useless-catch\n\nDisallow unnecessary `catch` clauses\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-useless-catch../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nA `catch` clause that only rethrows the original error is redundant, and has no effect on the runtime behavior of the program. These redundant clauses can be a source of confusion and code bloat, so it’s better to disallow these unnecessary `catch` clauses.\n\n## Rule Details\n\nThis rule reports `catch` clauses that only `throw` the caught error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2F0Y2g6IFwiZXJyb3JcIiovXG5cbnRyeSB7XG4gIGRvU29tZXRoaW5nVGhhdE1pZ2h0VGhyb3coKTtcbn0gY2F0Y2ggKGUpIHtcbiAgdGhyb3cgZTtcbn1cblxudHJ5IHtcbiAgZG9Tb21ldGhpbmdUaGF0TWlnaHRUaHJvdygpO1xufSBjYXRjaCAoZSkge1xuICB0aHJvdyBlO1xufSBmaW5hbGx5IHtcbiAgY2xlYW5VcCgpO1xufSJ9)\n\n``` language-js\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n} finally {\n  cleanUp();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY2F0Y2g6IFwiZXJyb3JcIiovXG5cbnRyeSB7XG4gIGRvU29tZXRoaW5nVGhhdE1pZ2h0VGhyb3coKTtcbn0gY2F0Y2ggKGUpIHtcbiAgZG9Tb21ldGhpbmdCZWZvcmVSZXRocm93KCk7XG4gIHRocm93IGU7XG59XG5cbnRyeSB7XG4gIGRvU29tZXRoaW5nVGhhdE1pZ2h0VGhyb3coKTtcbn0gY2F0Y2ggKGUpIHtcbiAgaGFuZGxlRXJyb3IoZSk7XG59XG5cbnRyeSB7XG4gIGRvU29tZXRoaW5nVGhhdE1pZ2h0VGhyb3coKTtcbn0gZmluYWxseSB7XG4gIGNsZWFuVXAoKTtcbn0ifQ==)\n\n``` language-js\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  doSomethingBeforeRethrow();\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  handleError(e);\n}\n\ntry {\n  doSomethingThatMightThrow();\n} finally {\n  cleanUp();\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary catch clauses, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v5.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-catch.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-catch.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-catch](https://eslint.org/docs/latest/rules/no-useless-catch)"
- name: no-useless-computed-key
  id: rules/no-useless-computed-key
  summary: This rule disallows unnecessary usage of computed property keys
  description: "# no-useless-computed-key\n\nDisallow unnecessary computed property keys in objects and classes\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-useless-computed-key../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [enforceForClassMembers](#enforceforclassmembers)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nIt’s unnecessary to use computed properties with literals such as:\n\n``` language-js\nvar foo = {[\"a\"]: \"b\"};\n```\n\nThe code can be rewritten as:\n\n``` language-js\nvar foo = {\"a\": \"b\"};\n```\n\n## Rule Details\n\nThis rule disallows unnecessary usage of computed property keys.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBcImVycm9yXCIqL1xuXG52YXIgYSA9IHsgWycwJ106IDAgfTtcbnZhciBhID0geyBbJzArMSwyMzQnXTogMCB9O1xudmFyIGEgPSB7IFswXTogMCB9O1xudmFyIGEgPSB7IFsneCddOiAwIH07XG52YXIgYSA9IHsgWyd4J10oKSB7fSB9OyJ9)\n\n``` language-js\n/*eslint no-useless-computed-key: \"error\"*/\n\nvar a = { ['0']: 0 };\nvar a = { ['0+1,234']: 0 };\nvar a = { [0]: 0 };\nvar a = { ['x']: 0 };\nvar a = { ['x']() {} };\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBcImVycm9yXCIqL1xuXG52YXIgYyA9IHsgJ2EnOiAwIH07XG52YXIgYyA9IHsgMDogMCB9O1xudmFyIGEgPSB7IHgoKSB7fSB9O1xudmFyIGMgPSB7IGE6IDAgfTtcbnZhciBjID0geyAnMCsxLDIzNCc6IDAgfTsifQ==)\n\n``` language-js\n/*eslint no-useless-computed-key: \"error\"*/\n\nvar c = { 'a': 0 };\nvar c = { 0: 0 };\nvar a = { x() {} };\nvar c = { a: 0 };\nvar c = { '0+1,234': 0 };\n```\n\nExamples of additional **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBcImVycm9yXCIqL1xuXG52YXIgYyA9IHtcbiAgICBcIl9fcHJvdG9fX1wiOiBmb28sIC8vIGRlZmluZXMgb2JqZWN0J3MgcHJvdG90eXBlXG5cbiAgICBbXCJfX3Byb3RvX19cIl06IGJhciAvLyBkZWZpbmVzIGEgcHJvcGVydHkgbmFtZWQgXCJfX3Byb3RvX19cIlxufTsifQ==)\n\n``` language-js\n/*eslint no-useless-computed-key: \"error\"*/\n\nvar c = {\n    \"__proto__\": foo, // defines object's prototype\n\n    [\"__proto__\"]: bar // defines a property named \"__proto__\"\n};\n```\n\n## Options\n\nThis rule has an object option:\n\n- `enforceForClassMembers` set to `true` additionally applies this rule to class members (Default `false`).\n\n### enforceForClassMembers\n\nBy default, this rule does not check class declarations and class expressions, as the default value for `enforceForClassMembers` is `false`.\n\nWhen `enforceForClassMembers` is set to `true`, the rule will also disallow unnecessary computed keys inside of class fields, class methods, class getters, and class setters.\n\nExamples of **incorrect** code for this rule with the `{ \"enforceForClassMembers\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBbXCJlcnJvclwiLCB7IFwiZW5mb3JjZUZvckNsYXNzTWVtYmVyc1wiOiB0cnVlIH1dKi9cblxuY2xhc3MgRm9vIHtcbiAgICBbXCJmb29cIl0gPSBcImJhclwiO1xuXG4gICAgWzBdKCkge31cbiAgICBbJ2EnXSgpIHt9XG4gICAgZ2V0IFsnYiddKCkge31cbiAgICBzZXQgWydjJ10odmFsdWUpIHt9XG5cbiAgICBzdGF0aWMgW1wiZm9vXCJdID0gXCJiYXJcIjtcblxuICAgIHN0YXRpYyBbJ2EnXSgpIHt9XG59In0=)\n\n``` language-js\n/*eslint no-useless-computed-key: [\"error\", { \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    [\"foo\"] = \"bar\";\n\n    [0]() {}\n    ['a']() {}\n    get ['b']() {}\n    set ['c'](value) {}\n\n    static [\"foo\"] = \"bar\";\n\n    static ['a']() {}\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"enforceForClassMembers\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBbXCJlcnJvclwiLCB7IFwiZW5mb3JjZUZvckNsYXNzTWVtYmVyc1wiOiB0cnVlIH1dKi9cblxuY2xhc3MgRm9vIHtcbiAgICBcImZvb1wiID0gXCJiYXJcIjtcblxuICAgIDAoKSB7fVxuICAgICdhJygpIHt9XG4gICAgZ2V0ICdiJygpIHt9XG4gICAgc2V0ICdjJyh2YWx1ZSkge31cblxuICAgIHN0YXRpYyBcImZvb1wiID0gXCJiYXJcIjtcblxuICAgIHN0YXRpYyAnYScoKSB7fVxufSJ9)\n\n``` language-js\n/*eslint no-useless-computed-key: [\"error\", { \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    \"foo\" = \"bar\";\n\n    0() {}\n    'a'() {}\n    get 'b'() {}\n    set 'c'(value) {}\n\n    static \"foo\" = \"bar\";\n\n    static 'a'() {}\n}\n```\n\nExamples of additional **correct** code for this rule with the `{ \"enforceForClassMembers\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29tcHV0ZWQta2V5OiBbXCJlcnJvclwiLCB7IFwiZW5mb3JjZUZvckNsYXNzTWVtYmVyc1wiOiB0cnVlIH1dKi9cblxuY2xhc3MgRm9vIHtcbiAgICBbXCJjb25zdHJ1Y3RvclwiXTsgLy8gaW5zdGFuY2UgZmllbGQgbmFtZWQgXCJjb25zdHJ1Y3RvclwiXG5cbiAgICBcImNvbnN0cnVjdG9yXCIoKSB7fSAvLyB0aGUgY29uc3RydWN0b3Igb2YgdGhpcyBjbGFzc1xuXG4gICAgW1wiY29uc3RydWN0b3JcIl0oKSB7fSAvLyBtZXRob2QgbmFtZWQgXCJjb25zdHJ1Y3RvclwiXG5cbiAgICBzdGF0aWMgW1wiY29uc3RydWN0b3JcIl07IC8vIHN0YXRpYyBmaWVsZCBuYW1lZCBcImNvbnN0cnVjdG9yXCJcblxuICAgIHN0YXRpYyBbXCJwcm90b3R5cGVcIl07IC8vIHJ1bnRpbWUgZXJyb3IsIGl0IHdvdWxkIGJlIGEgcGFyc2luZyBlcnJvciB3aXRob3V0IGBbXWBcbn0ifQ==)\n\n``` language-js\n/*eslint no-useless-computed-key: [\"error\", { \"enforceForClassMembers\": true }]*/\n\nclass Foo {\n    [\"constructor\"]; // instance field named \"constructor\"\n\n    \"constructor\"() {} // the constructor of this class\n\n    [\"constructor\"]() {} // method named \"constructor\"\n\n    static [\"constructor\"]; // static field named \"constructor\"\n\n    static [\"prototype\"]; // runtime error, it would be a parsing error without `[]`\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary computed property keys, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.9.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-computed-key.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-computed-key.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-computed-key](https://eslint.org/docs/latest/rules/no-useless-computed-key)"
- name: no-useless-concat
  id: rules/no-useless-concat
  summary: This code is likely the result of refactoring where a variable was removed from the concatenation (such as "a" + b + "b")
  description: "# no-useless-concat\n\nDisallow unnecessary concatenation of literals or template literals\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIt’s unnecessary to concatenate two strings together, such as:\n\n``` language-js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn’t important and the code can be rewritten as:\n\n``` language-js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29uY2F0OiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBhID0gYHNvbWVgICsgYHN0cmluZ2A7XG5cbi8vIHRoZXNlIGFyZSB0aGUgc2FtZSBhcyBcIjEwXCJcbnZhciBhID0gJzEnICsgJzAnO1xudmFyIGEgPSAnMScgKyBgMGA7XG52YXIgYSA9IGAxYCArICcwJztcbnZhciBhID0gYDFgICsgYDBgOyJ9)\n\n``` language-js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\nvar a = `some` + `string`;\n\n// these are the same as \"10\"\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29uY2F0OiBcImVycm9yXCIqL1xuXG4vLyB3aGVuIGEgbm9uIHN0cmluZyBpcyBpbmNsdWRlZFxudmFyIGMgPSBhICsgYjtcbnZhciBjID0gJzEnICsgYTtcbnZhciBhID0gMSArICcxJztcbnZhciBjID0gMSAtIDI7XG4vLyB3aGVuIHRoZSBzdHJpbmcgY29uY2F0ZW5hdGlvbiBpcyBtdWx0aWxpbmVcbnZhciBjID0gXCJmb29cIiArXG4gICAgXCJiYXJcIjsifQ==)\n\n``` language-js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary string concatenation, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v1.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-concat.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-concat.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-concat](https://eslint.org/docs/latest/rules/no-useless-concat)"
- name: no-useless-constructor
  id: rules/no-useless-constructor
  summary: ES2015 provides a default class constructor if one is not specified
  description: "# no-useless-constructor\n\nDisallow unnecessary constructors\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nES2015 provides a default class constructor if one is not specified. As such, it is unnecessary to provide an empty constructor or one that simply delegates into its parent class, as in the following examples:\n\n``` language-js\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (value) {\n      super(value);\n    }\n}\n```\n\n## Rule Details\n\nThis rule flags class constructors that can be safely removed without changing how the class works.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29uc3RydWN0b3I6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY2xhc3MgQSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgIH1cbn1cblxuY2xhc3MgQiBleHRlbmRzIEEge1xuICAgIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgICBzdXBlciguLi5hcmdzKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint no-useless-constructor: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (...args) {\n      super(...args);\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtY29uc3RydWN0b3I6IFwiZXJyb3JcIiovXG5cbmNsYXNzIEEgeyB9XG5cbmNsYXNzIEIge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgZG9Tb21ldGhpbmcoKTtcbiAgICB9XG59XG5cbmNsYXNzIEMgZXh0ZW5kcyBBIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2ZvbycpO1xuICAgIH1cbn1cblxuY2xhc3MgRCBleHRlbmRzIEEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBkb1NvbWV0aGluZygpO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint no-useless-constructor: \"error\"*/\n\nclass A { }\n\nclass B {\n    constructor () {\n        doSomething();\n    }\n}\n\nclass C extends A {\n    constructor() {\n        super('foo');\n    }\n}\n\nclass D extends A {\n    constructor() {\n        super();\n        doSomething();\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary constructors, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-beta.1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-constructor.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-constructor.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-constructor](https://eslint.org/docs/latest/rules/no-useless-constructor)"
- name: no-useless-escape
  id: rules/no-useless-escape
  summary: This rule flags escapes that can be safely removed without changing behavior
  description: "# no-useless-escape\n\nDisallow unnecessary escape characters\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-useless-escape../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](no-useless-escape../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nEscaping non-special characters in strings, template literals, and regular expressions doesn’t have any effect, as demonstrated in the following example:\n\n``` language-js\nlet foo = \"hol\\a\"; // > foo = \"hola\"\nlet bar = `${foo}\\!`; // > bar = \"hola!\"\nlet baz = /\\:/ // same functionality with /:/\n```\n\n## Rule Details\n\nThis rule flags escapes that can be safely removed without changing behavior.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtZXNjYXBlOiBcImVycm9yXCIqL1xuXG5cIlxcJ1wiO1xuJ1xcXCInO1xuXCJcXCNcIjtcblwiXFxlXCI7XG5gXFxcImA7XG5gXFxcIiR7Zm9vfVxcXCJgO1xuYFxcI3tmb299YDtcbi9cXCEvO1xuL1xcQC87XG4vW1xcW10vO1xuL1thLXpcXC1dLzsifQ==)\n\n``` language-js\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\'\";\n'\\\"';\n\"\\#\";\n\"\\e\";\n`\\\"`;\n`\\\"${foo}\\\"`;\n`\\#{foo}`;\n/\\!/;\n/\\@/;\n/[\\[]/;\n/[a-z\\-]/;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtZXNjYXBlOiBcImVycm9yXCIqL1xuXG5cIlxcXCJcIjtcbidcXCcnO1xuXCJcXHgxMlwiO1xuXCJcXHUwMGE5XCI7XG5cIlxcMzcxXCI7XG5cInhzXFx1MjExMVwiO1xuYFxcYGA7XG5gXFwkeyR7Zm9vfX1gO1xuYCRcXHske2Zvb319YDtcbi9cXFxcL2c7XG4vXFx0L2c7XG4vXFx3XFwkXFwqXFxeXFwuLztcbi9bW10vO1xuL1tcXF1dLztcbi9bYS16LV0vOyJ9)\n\n``` language-js\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\\"\";\n'\\'';\n\"\\x12\";\n\"\\u00a9\";\n\"\\371\";\n\"xs\\u2111\";\n`\\``;\n`\\${${foo}}`;\n`$\\{${foo}}`;\n/\\\\/g;\n/\\t/g;\n/\\w\\$\\*\\^\\./;\n/[[]/;\n/[\\]]/;\n/[a-z-]/;\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about unnecessary escapes, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v2.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-escape.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-escape.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-escape](https://eslint.org/docs/latest/rules/no-useless-escape)"
- name: no-useless-rename
  id: rules/no-useless-rename
  summary: ES2015 allows for the renaming of references in import and export statements as well as destructuring assignments
  description: "# no-useless-rename\n\nDisallow renaming import, export, and destructured assignments to the same name\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-useless-rename../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Resources](#resources)\n\nES2015 allows for the renaming of references in import and export statements as well as destructuring assignments. This gives programmers a concise syntax for performing these operations while renaming these references:\n\n``` language-js\nimport { foo as bar } from \"baz\";\nexport { foo as bar };\nlet { foo: bar } = baz;\n```\n\nWith this syntax, it is possible to rename a reference to the same name. This is a completely redundant operation, as this is the same as not renaming at all. For example, this:\n\n``` language-js\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nlet { foo: foo } = bar;\n```\n\nis the same as:\n\n``` language-js\nimport { foo } from \"bar\";\nexport { foo };\nlet { foo } = bar;\n```\n\n## Rule Details\n\nThis rule disallows the renaming of import, export, and destructured assignments to the same name.\n\n## Options\n\nThis rule allows for more fine-grained control with the following options:\n\n- `ignoreImport`: When set to `true`, this rule does not check imports\n- `ignoreExport`: When set to `true`, this rule does not check exports\n- `ignoreDestructuring`: When set to `true`, this rule does not check destructuring assignments\n\nBy default, all options are set to `false`:\n\n``` language-json\n\"no-useless-rename\": [\"error\", {\n    \"ignoreDestructuring\": false,\n    \"ignoreImport\": false,\n    \"ignoreExport\": false\n}]\n```\n\nExamples of **incorrect** code for this rule by default:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtcmVuYW1lOiBcImVycm9yXCIqL1xuXG5pbXBvcnQgeyBmb28xIGFzIGZvbzEgfSBmcm9tIFwiYmFyXCI7XG5pbXBvcnQgeyBcImZvbzJcIiBhcyBmb28yIH0gZnJvbSBcImJhclwiO1xuZXhwb3J0IHsgZm9vMSBhcyBmb28xIH07XG5leHBvcnQgeyBmb28yIGFzIFwiZm9vMlwiIH07XG5leHBvcnQgeyBmb28zIGFzIGZvbzMgfSBmcm9tIFwiYmFyXCI7XG5leHBvcnQgeyBcImZvbzRcIiBhcyBcImZvbzRcIiB9IGZyb20gXCJiYXJcIjtcbmxldCB7IGZvbzM6IGZvbzMgfSA9IGJhcjtcbmxldCB7ICdmb280JzogZm9vNCB9ID0gYmFyO1xuZnVuY3Rpb24gZm9vKHsgYmFyOiBiYXIgfSkge31cbih7IGZvbzogZm9vIH0pID0+IHt9In0=)\n\n``` language-js\n/*eslint no-useless-rename: \"error\"*/\n\nimport { foo1 as foo1 } from \"bar\";\nimport { \"foo2\" as foo2 } from \"bar\";\nexport { foo1 as foo1 };\nexport { foo2 as \"foo2\" };\nexport { foo3 as foo3 } from \"bar\";\nexport { \"foo4\" as \"foo4\" } from \"bar\";\nlet { foo3: foo3 } = bar;\nlet { 'foo4': foo4 } = bar;\nfunction foo({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\nExamples of **correct** code for this rule by default:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtcmVuYW1lOiBcImVycm9yXCIqL1xuXG5pbXBvcnQgKiBhcyBmb28xIGZyb20gXCJmb29cIjtcbmltcG9ydCB7IGZvbzIgfSBmcm9tIFwiYmFyXCI7XG5pbXBvcnQgeyBmb28gYXMgYmFyMSB9IGZyb20gXCJiYXpcIjtcbmltcG9ydCB7IFwiZm9vXCIgYXMgYmFyMiB9IGZyb20gXCJiYXpcIjtcblxuZXhwb3J0IHsgZm9vIH07XG5leHBvcnQgeyBmb28gYXMgYmFyMSB9O1xuZXhwb3J0IHsgZm9vIGFzIFwiYmFyMlwiIH07XG5leHBvcnQgeyBmb28gYXMgYmFyMyB9IGZyb20gXCJmb29cIjtcbmV4cG9ydCB7IFwiZm9vXCIgYXMgXCJiYXI0XCIgfSBmcm9tIFwiZm9vXCI7XG5cbmxldCB7IGZvbyB9ID0gYmFyO1xubGV0IHsgZm9vOiBiYXIgfSA9IGJhejtcbmxldCB7IFtxdXhdOiBxdXggfSA9IGJhcjtcblxuZnVuY3Rpb24gZm9vMyh7IGJhciB9KSB7fVxuZnVuY3Rpb24gZm9vNCh7IGJhcjogYmF6IH0pIHt9XG5cbih7IGZvbyB9KSA9PiB7fVxuKHsgZm9vOiBiYXIgfSkgPT4ge30ifQ==)\n\n``` language-js\n/*eslint no-useless-rename: \"error\"*/\n\nimport * as foo1 from \"foo\";\nimport { foo2 } from \"bar\";\nimport { foo as bar1 } from \"baz\";\nimport { \"foo\" as bar2 } from \"baz\";\n\nexport { foo };\nexport { foo as bar1 };\nexport { foo as \"bar2\" };\nexport { foo as bar3 } from \"foo\";\nexport { \"foo\" as \"bar4\" } from \"foo\";\n\nlet { foo } = bar;\nlet { foo: bar } = baz;\nlet { [qux]: qux } = bar;\n\nfunction foo3({ bar }) {}\nfunction foo4({ bar: baz }) {}\n\n({ foo }) => {}\n({ foo: bar }) => {}\n```\n\nExamples of **correct** code for this rule with `{ ignoreImport: true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtcmVuYW1lOiBbXCJlcnJvclwiLCB7IGlnbm9yZUltcG9ydDogdHJ1ZSB9XSovXG5cbmltcG9ydCB7IGZvbyBhcyBmb28gfSBmcm9tIFwiYmFyXCI7In0=)\n\n``` language-js\n/*eslint no-useless-rename: [\"error\", { ignoreImport: true }]*/\n\nimport { foo as foo } from \"bar\";\n```\n\nExamples of **correct** code for this rule with `{ ignoreExport: true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtcmVuYW1lOiBbXCJlcnJvclwiLCB7IGlnbm9yZUV4cG9ydDogdHJ1ZSB9XSovXG5cbmNvbnN0IGZvbyA9IDE7XG5leHBvcnQgeyBmb28gYXMgZm9vIH07XG5leHBvcnQgeyBiYXIgYXMgYmFyIH0gZnJvbSBcImJhclwiOyJ9)\n\n``` language-js\n/*eslint no-useless-rename: [\"error\", { ignoreExport: true }]*/\n\nconst foo = 1;\nexport { foo as foo };\nexport { bar as bar } from \"bar\";\n```\n\nExamples of **correct** code for this rule with `{ ignoreDestructuring: true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXVzZWxlc3MtcmVuYW1lOiBbXCJlcnJvclwiLCB7IGlnbm9yZURlc3RydWN0dXJpbmc6IHRydWUgfV0qL1xuXG5sZXQgeyBmb286IGZvbyB9ID0gYmFyO1xuZnVuY3Rpb24gYmF6KHsgYmFyOiBiYXIgfSkge31cbih7IGZvbzogZm9vIH0pID0+IHt9In0=)\n\n``` language-js\n/*eslint no-useless-rename: [\"error\", { ignoreDestructuring: true }]*/\n\nlet { foo: foo } = bar;\nfunction baz({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not care about redundantly renaming import, export, and destructuring assignments.\n\n## Compatibility\n\n- **JSCS**: [disallowIdenticalDestructuringNames](https://jscs-dev.github.io/rule/disallowIdenticalDestructuringNames)\n\n## Related Rules\n\n- [object-shorthand](object-shorthand)\n\n## Version\n\nThis rule was introduced in ESLint v2.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-rename.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-rename.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-rename](https://eslint.org/docs/latest/rules/no-useless-rename)"
- name: no-useless-return
  id: rules/no-useless-return
  summary: A return; statement with nothing after it is redundant, and has no effect on the runtime behavior of a function
  description: "# no-useless-return\n\nDisallow redundant return statements\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-useless-return../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nA `return;` statement with nothing after it is redundant, and has no effect on the runtime behavior of a function. This can be confusing, so it’s better to disallow these redundant statements.\n\n## Rule Details\n\nThis rule aims to report redundant `return` statements.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby11c2VsZXNzLXJldHVybjogXCJlcnJvclwiICovXG5cbnZhciBmb28gPSBmdW5jdGlvbigpIHsgcmV0dXJuOyB9XG5cbnZhciBmb28gPSBmdW5jdGlvbigpIHtcbiAgZG9Tb21ldGhpbmcoKTtcbiAgcmV0dXJuO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICBiYXIoKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgYmF6KCk7XG4gIH1cbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKGJhcikge1xuICAgIGNhc2UgMTpcbiAgICAgIGRvU29tZXRoaW5nKCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGRvU29tZXRoaW5nRWxzZSgpO1xuICAgICAgcmV0dXJuO1xuICB9XG59XG4ifQ==)\n\n``` language-js\n/* eslint no-useless-return: \"error\" */\n\nvar foo = function() { return; }\n\nvar foo = function() {\n  doSomething();\n  return;\n}\n\nvar foo = function() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n}\n\nvar foo = function() {\n  switch (bar) {\n    case 1:\n      doSomething();\n    default:\n      doSomethingElse();\n      return;\n  }\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBuby11c2VsZXNzLXJldHVybjogXCJlcnJvclwiICovXG5cbnZhciBmb28gPSBmdW5jdGlvbigpIHsgcmV0dXJuIDU7IH1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZG9Tb21ldGhpbmcoKTtcbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgYmFyKCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIGJheigpO1xuICB9XG4gIHF1eCgpO1xufVxuXG52YXIgZm9vID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAoYmFyKSB7XG4gICAgY2FzZSAxOlxuICAgICAgZG9Tb21ldGhpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgZG9Tb21ldGhpbmdFbHNlKCk7XG4gIH1cbn1cblxudmFyIGZvbyA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKGNvbnN0IGZvbyBvZiBiYXIpIHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJ9)\n\n``` language-js\n/* eslint no-useless-return: \"error\" */\n\nvar foo = function() { return 5; }\n\nvar foo = function() {\n  return doSomething();\n}\n\nvar foo = function() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n  qux();\n}\n\nvar foo = function() {\n  switch (bar) {\n    case 1:\n      doSomething();\n      return;\n    default:\n      doSomethingElse();\n  }\n}\n\nvar foo = function() {\n  for (const foo of bar) {\n    return;\n  }\n}\n```\n\n## When Not To Use It\n\nIf you don’t care about disallowing redundant return statements, you can turn off this rule.\n\n## Version\n\nThis rule was introduced in ESLint v3.9.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-useless-return.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-useless-return.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-useless-return](https://eslint.org/docs/latest/rules/no-useless-return)"
- name: no-var
  id: rules/no-var
  summary: ECMAScript 6 allows programmers to create variables with block scope instead of function scope using the let and const keywords
  description: "# no-var\n\nRequire `let` or `const` instead of `var`\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](no-var../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nECMAScript 6 allows programmers to create variables with block scope instead of function scope using the `let` and `const` keywords. Block scope is common in many other programming languages and helps programmers avoid mistakes such as:\n\n``` language-js\nvar count = people.length;\nvar enoughFood = count > sandwiches.length;\n\nif (enoughFood) {\n    var count = sandwiches.length; // accidentally overriding the count variable\n    console.log(\"We have \" + count + \" sandwiches for everyone. Plenty for all!\");\n}\n\n// our count variable is no longer accurate\nconsole.log(\"We have \" + count + \" people and \" + sandwiches.length + \" sandwiches!\");\n```\n\n## Rule Details\n\nThis rule is aimed at discouraging the use of `var` and encouraging the use of `const` or `let` instead.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXZhcjogXCJlcnJvclwiKi9cblxudmFyIHggPSBcInlcIjtcbnZhciBDT05GSUcgPSB7fTsifQ==)\n\n``` language-js\n/*eslint no-var: \"error\"*/\n\nvar x = \"y\";\nvar CONFIG = {};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXZhcjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgeCA9IFwieVwiO1xuY29uc3QgQ09ORklHID0ge307In0=)\n\n``` language-js\n/*eslint no-var: \"error\"*/\n/*eslint-env es6*/\n\nlet x = \"y\";\nconst CONFIG = {};\n```\n\n## When Not To Use It\n\nIn addition to non-ES6 environments, existing JavaScript projects that are beginning to introduce ES6 into their codebase may not want to apply this rule if the cost of migrating from `var` to `let` is too costly.\n\n## Version\n\nThis rule was introduced in ESLint v0.12.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-var.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-var.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-var](https://eslint.org/docs/latest/rules/no-var)"
- name: no-void
  id: rules/no-void
  summary: 'The void operator takes an operand and returns undefined: void expression will evaluate expression and return undefined'
  description: "# no-void\n\nDisallow `void` operators\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowAsStatement](#allowasstatement)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThe `void` operator takes an operand and returns `undefined`: `void expression` will evaluate `expression` and return `undefined`. It can be used to ignore any side effects `expression` may produce:\n\nThe common case of using `void` operator is to get a “pure” `undefined` value as prior to ES5 the `undefined` variable was mutable:\n\n``` language-js\n// will always return undefined\n(function(){\n    return void 0;\n})();\n\n// will return 1 in ES3 and undefined in ES5+\n(function(){\n    undefined = 1;\n    return undefined;\n})();\n\n// will throw TypeError in ES5+\n(function(){\n    'use strict';\n    undefined = 1;\n})();\n```\n\nAnother common case is to minify code as `void 0` is shorter than `undefined`:\n\n``` language-js\nfoo = void 0;\nfoo = undefined;\n```\n\nWhen used with IIFE (immediately-invoked function expression), `void` can be used to force the function keyword to be treated as an expression instead of a declaration:\n\n``` language-js\nvar foo = 1;\nvoid function(){ foo = 1; }() // will assign foo a value of 1\n+function(){ foo = 1; }() // same as above\n```\n\n``` language-js\nfunction(){ foo = 1; }() // will throw SyntaxError\n```\n\nSome code styles prohibit `void` operator, marking it as non-obvious and hard to read.\n\n## Rule Details\n\nThis rule aims to eliminate use of void operator.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXZvaWQ6IFwiZXJyb3JcIiovXG5cbnZvaWQgZm9vXG52b2lkIHNvbWVGdW5jdGlvbigpO1xuXG52YXIgZm9vID0gdm9pZCBiYXIoKTtcbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xufSJ9)\n\n``` language-js\n/*eslint no-void: \"error\"*/\n\nvoid foo\nvoid someFunction();\n\nvar foo = void bar();\nfunction baz() {\n    return void 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `allowAsStatement` set to `true` allows the void operator to be used as a statement (Default `false`).\n\n### allowAsStatement\n\nWhen `allowAsStatement` is set to true, the rule will not error on cases that the void operator is used as a statement, i.e. when it’s not used in an expression position, like in a variable assignment or a function return.\n\nExamples of **incorrect** code for `{ \"allowAsStatement\": true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXZvaWQ6IFtcImVycm9yXCIsIHsgXCJhbGxvd0FzU3RhdGVtZW50XCI6IHRydWUgfV0qL1xuXG52YXIgZm9vID0gdm9pZCBiYXIoKTtcbmZ1bmN0aW9uIGJheigpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xufSJ9)\n\n``` language-js\n/*eslint no-void: [\"error\", { \"allowAsStatement\": true }]*/\n\nvar foo = void bar();\nfunction baz() {\n    return void 0;\n}\n```\n\nExamples of **correct** code for `{ \"allowAsStatement\": true }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXZvaWQ6IFtcImVycm9yXCIsIHsgXCJhbGxvd0FzU3RhdGVtZW50XCI6IHRydWUgfV0qL1xuXG52b2lkIGZvbztcbnZvaWQgc29tZUZ1bmN0aW9uKCk7In0=)\n\n``` language-js\n/*eslint no-void: [\"error\", { \"allowAsStatement\": true }]*/\n\nvoid foo;\nvoid someFunction();\n```\n\n## When Not To Use It\n\nIf you intentionally use the `void` operator then you can disable this rule.\n\n## Related Rules\n\n- [no-undef-init](no-undef-init)\n- [no-undefined](no-undefined)\n\n## Version\n\nThis rule was introduced in ESLint v0.8.0.\n\n## Further Reading\n\n[void operator - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void)  \n\n[O’Reilly Media - Technology and Business Training](https://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-void.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-void.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-void](https://eslint.org/docs/latest/rules/no-void)"
- name: no-warning-comments
  id: rules/no-warning-comments
  summary: Developers often add comments to code which is not complete or needs review
  description: "# no-warning-comments\n\nDisallow specified warning terms in comments\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [terms and location](#terms-and-location)\n    2.  [Decoration Characters](#decoration-characters)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nDevelopers often add comments to code which is not complete or needs review. Most likely you want to fix or review the code, and then remove the comment, before you consider the code to be production ready.\n\n``` language-js\n// TODO: do something\n// FIXME: this is not a good idea\n```\n\n## Rule Details\n\nThis rule reports comments that include any of the predefined terms specified in its configuration.\n\n## Options\n\nThis rule has an options object literal:\n\n- `\"terms\"`: optional array of terms to match. Defaults to `[\"todo\", \"fixme\", \"xxx\"]`. Terms are matched case-insensitively and as whole words: `fix` would match `FIX` but not `fixing`. Terms can consist of multiple words: `really bad idea`.\n- `\"location\"`: optional string that configures where in your comments to check for matches. Defaults to `\"start\"`. The start is from the first non-decorative character, ignoring whitespace, new lines and characters specified in `decoration`. The other value is match `anywhere` in comments.\n- `\"decoration\"`: optional array of characters that are ignored at the start of a comment, when location is `\"start\"`. Defaults to `[]`. Any sequence of whitespace or the characters from this property are ignored. This option is ignored when location is `\"anywhere\"`.\n\nExample of **incorrect** code for the default `{ \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFwiZXJyb3JcIiovXG5cbi8qXG5GSVhNRVxuKi9cbmZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0cykge1xuICBpZiAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBUT0RPXG59In0=)\n\n``` language-js\n/*eslint no-warning-comments: \"error\"*/\n\n/*\nFIXME\n*/\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // TODO\n}\n```\n\nExample of **correct** code for the default `{ \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFwiZXJyb3JcIiovXG5cbmZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0cykge1xuICBpZiAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOT1QgUkVBRFkgRk9SIFBSSU1FIFRJTUVcbiAgLy8gYnV0IHRvbyBiYWQsIGl0IGlzIG5vdCBhIHByZWRlZmluZWQgd2FybmluZyB0ZXJtXG59In0=)\n\n``` language-js\n/*eslint no-warning-comments: \"error\"*/\n\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // NOT READY FOR PRIME TIME\n  // but too bad, it is not a predefined warning term\n}\n```\n\n### terms and location\n\nExamples of **incorrect** code for the `{ \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFtcImVycm9yXCIsIHsgXCJ0ZXJtc1wiOiBbXCJ0b2RvXCIsIFwiZml4bWVcIiwgXCJhbnkgb3RoZXIgdGVybVwiXSwgXCJsb2NhdGlvblwiOiBcImFueXdoZXJlXCIgfV0qL1xuXG4vLyBUT0RPOiB0aGlzXG4vLyB0b2RvOiB0aGlzIHRvb1xuLy8gRXZlbiB0aGlzOiBUT0RPXG4vKlxuICogVGhlIHNhbWUgZ29lcyBmb3IgdGhpcyBUT0RPIGNvbW1lbnRcbiAqIE9yIGEgZml4bWVcbiAqIGFzIHdlbGwgYXMgYW55IG90aGVyIHRlcm1cbiAqLyJ9)\n\n``` language-js\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// TODO: this\n// todo: this too\n// Even this: TODO\n/*\n * The same goes for this TODO comment\n * Or a fixme\n * as well as any other term\n */\n```\n\nExamples of **correct** code for the `{ \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFtcImVycm9yXCIsIHsgXCJ0ZXJtc1wiOiBbXCJ0b2RvXCIsIFwiZml4bWVcIiwgXCJhbnkgb3RoZXIgdGVybVwiXSwgXCJsb2NhdGlvblwiOiBcImFueXdoZXJlXCIgfV0qL1xuXG4vLyBUaGlzIGlzIHRvIGRvXG4vLyBldmVuIG5vdCBhbnkgb3RoZXIgICAgdGVybVxuLy8gYW55IG90aGVyIHRlcm1pbmFsXG4vKlxuICogVGhlIHNhbWUgZ29lcyBmb3IgYmxvY2sgY29tbWVudHNcbiAqIHdpdGggYW55IG90aGVyIGludGVyZXN0aW5nIHRlcm1cbiAqIG9yIGZpeCBtZSB0aGlzXG4gKi8ifQ==)\n\n``` language-js\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// This is to do\n// even not any other    term\n// any other terminal\n/*\n * The same goes for block comments\n * with any other interesting term\n * or fix me this\n */\n```\n\n### Decoration Characters\n\nExamples of **incorrect** code for the `{ \"decoration\": [\"*\"] }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFtcImVycm9yXCIsIHsgXCJkZWNvcmF0aW9uXCI6IFtcIipcIl0gfV0qL1xuXG4vLyoqKioqIHRvZG8gZGVjb3JhdGl2ZSBhc3Rlcmlza3MgYXJlIGlnbm9yZWQgKioqKiovL1xuLyoqXG4gKiBUT0RPIG5ldyBsaW5lcyBhbmQgYXN0ZXJpc2tzIGFyZSBhbHNvIGlnbm9yZWQgaW4gYmxvY2sgY29tbWVudHMuXG4gKi8ifQ==)\n\n``` language-js\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"*\"] }]*/\n\n//***** todo decorative asterisks are ignored *****//\n/**\n * TODO new lines and asterisks are also ignored in block comments.\n */\n```\n\nExamples of **incorrect** code for the `{ \"decoration\": [\"/\", \"*\"] }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFtcImVycm9yXCIsIHsgXCJkZWNvcmF0aW9uXCI6IFtcIi9cIiwgXCIqXCJdIH1dKi9cblxuLy8vLy8vIFRPRE8gZGVjb3JhdGl2ZSBzbGFzaGVzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkIC8vLy8vL1xuLy8qKioqKiB0b2RvIGRlY29yYXRpdmUgYXN0ZXJpc2tzIGFyZSBhbHNvIGlnbm9yZWQgKioqKiovL1xuLyoqXG4gKiBUT0RPIG5ldyBsaW5lcyBhcmUgYWxzbyBpZ25vcmVkIGluIGJsb2NrIGNvbW1lbnRzLlxuICovIn0=)\n\n``` language-js\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"/\", \"*\"] }]*/\n\n////// TODO decorative slashes and whitespace are ignored //////\n//***** todo decorative asterisks are also ignored *****//\n/**\n * TODO new lines are also ignored in block comments.\n */\n```\n\nExamples of **correct** code for the `{ \"decoration\": [\"/\", \"*\"] }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdhcm5pbmctY29tbWVudHM6IFtcImVycm9yXCIsIHsgXCJkZWNvcmF0aW9uXCI6IFtcIi9cIiwgXCIqXCJdIH1dKi9cblxuLy8hVE9ETyBwcmVjZWRlZCBieSBub24tZGVjb3JhdGlvbiBjaGFyYWN0ZXJcbi8qKlxuICohVE9ETyBwcmVjZWRlZCBieSBub24tZGVjb3JhdGlvbiBjaGFyYWN0ZXIgaW4gYSBibG9jayBjb21tZW50XG4gKi8ifQ==)\n\n``` language-js\n/*eslint no-warning-comments: [\"error\", { \"decoration\": [\"/\", \"*\"] }]*/\n\n//!TODO preceded by non-decoration character\n/**\n *!TODO preceded by non-decoration character in a block comment\n */\n```\n\n## When Not To Use It\n\n- If you have a large code base that was not developed with a policy to not use such warning terms, you might get hundreds of warnings / errors which might be counter-productive if you can’t fix all of them (e.g. if you don’t get the time to do it) as you might overlook other warnings / errors or get used to many of them and don’t pay attention on it anymore.\n- Same reason as the point above: You shouldn’t configure terms that are used very often (e.g. central parts of the native language used in your comments).\n\n## Version\n\nThis rule was introduced in ESLint v0.4.4.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-warning-comments.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-warning-comments.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-warning-comments](https://eslint.org/docs/latest/rules/no-warning-comments)"
- name: no-with
  id: rules/no-with
  summary: The with statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to
  description: "# no-with\n\nDisallow `with` statements\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](no-with../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nThe `with` statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.\n\n## Rule Details\n\nThis rule disallows `with` statements.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdpdGg6IFwiZXJyb3JcIiovXG5cbndpdGggKHBvaW50KSB7XG4gICAgciA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsgLy8gaXMgciBhIG1lbWJlciBvZiBwb2ludD9cbn0ifQ==)\n\n``` language-js\n/*eslint no-with: \"error\"*/\n\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IG5vLXdpdGg6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuY29uc3QgciA9ICh7eCwgeX0pID0+IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsifQ==)\n\n``` language-js\n/*eslint no-with: \"error\"*/\n/*eslint-env es6*/\n\nconst r = ({x, y}) => Math.sqrt(x * x + y * y);\n```\n\n## When Not To Use It\n\nIf you intentionally use `with` statements then you can disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.2.\n\n## Further Reading\n\n[with Statement Considered Harmful](https://web.archive.org/web/20200717110117/https://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/no-with.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/no-with.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/no-with](https://eslint.org/docs/latest/rules/no-with)"
- name: Node.js API Reference
  id: integrate/nodejs-api
  summary: While ESLint is designed to be run on the command line, it’s possible to use ESLint programmatically through the Node.js API
  description: "# Node.js API Reference\n\n## Table of Contents\n\n1.  [ESLint class](#eslint-class)\n    1.  [◆ new ESLint(options)](#-new-eslintoptions)\n        1.  [Parameters](#parameters)\n    2.  [◆ eslint.lintFiles(patterns)](#-eslintlintfilespatterns)\n        1.  [Parameters](#parameters-1)\n        2.  [Return Value](#return-value)\n    3.  [◆ eslint.lintText(code, options)](#-eslintlinttextcode-options)\n        1.  [Parameters](#parameters-2)\n        2.  [Return Value](#return-value-1)\n    4.  [◆ eslint.getRulesMetaForResults(results)](#-eslintgetrulesmetaforresultsresults)\n        1.  [Parameters](#parameters-3)\n        2.  [Return Value](#return-value-2)\n    5.  [◆ eslint.calculateConfigForFile(filePath)](#-eslintcalculateconfigforfilefilepath)\n        1.  [Parameters](#parameters-4)\n        2.  [Return Value](#return-value-3)\n    6.  [◆ eslint.isPathIgnored(filePath)](#-eslintispathignoredfilepath)\n        1.  [Parameters](#parameters-5)\n        2.  [Return Value](#return-value-4)\n    7.  [◆ eslint.loadFormatter(nameOrPath)](#-eslintloadformatternameorpath)\n        1.  [Parameters](#parameters-6)\n        2.  [Return Value](#return-value-5)\n    8.  [◆ ESLint.version](#-eslintversion)\n    9.  [◆ ESLint.outputFixes(results)](#-eslintoutputfixesresults)\n        1.  [Parameters](#parameters-7)\n        2.  [Return Value](#return-value-6)\n    10. [◆ ESLint.getErrorResults(results)](#-eslintgeterrorresultsresults)\n        1.  [Parameters](#parameters-8)\n        2.  [Return Value](#return-value-7)\n    11. [◆ LintResult type](#-lintresult-type)\n    12. [◆ LintMessage type](#-lintmessage-type)\n    13. [◆ SuppressedLintMessage type](#-suppressedlintmessage-type)\n    14. [◆ EditInfo type](#-editinfo-type)\n    15. [◆ LoadedFormatter type](#-loadedformatter-type)\n2.  [SourceCode](#sourcecode)\n    1.  [SourceCode#splitLines()](#sourcecodesplitlines)\n3.  [Linter](#linter)\n    1.  [Linter#verify](#linterverify)\n    2.  [Linter#verifyAndFix()](#linterverifyandfix)\n    3.  [Linter#defineRule](#linterdefinerule)\n    4.  [Linter#defineRules](#linterdefinerules)\n    5.  [Linter#getRules](#lintergetrules)\n    6.  [Linter#defineParser](#linterdefineparser)\n    7.  [Linter#version/Linter.version](#linterversionlinterversion)\n4.  [RuleTester](#ruletester)\n    1.  [Testing errors with messageId](#testing-errors-with-messageid)\n    2.  [Testing Suggestions](#testing-suggestions)\n    3.  [Customizing RuleTester](#customizing-ruletester)\n\nWhile ESLint is designed to be run on the command line, it’s possible to use ESLint programmatically through the Node.js API. The purpose of the Node.js API is to allow plugin and tool authors to use the ESLint functionality directly, without going through the command line interface.\n\n**Note:** Use undocumented parts of the API at your own risk. Only those parts that are specifically mentioned in this document are approved for use and will remain stable and reliable. Anything left undocumented is unstable and may change or be removed at any point.\n\n## ESLint class\n\nThe `ESLint` class is the primary class to use in Node.js applications.\n\nThis class depends on the Node.js `fs` module and the file system, so you cannot use it in browsers. If you want to lint code on browsers, use the [Linter](#linter) class instead.\n\nHere’s a simple example of using the `ESLint` class:\n\n``` language-js\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n    // 1. Create an instance.\n    const eslint = new ESLint();\n\n    // 2. Lint files.\n    const results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n    // 3. Format the results.\n    const formatter = await eslint.loadFormatter(\"stylish\");\n    const resultText = formatter.format(results);\n\n    // 4. Output it.\n    console.log(resultText);\n})().catch((error) => {\n    process.exitCode = 1;\n    console.error(error);\n});\n```\n\nHere’s an example that autofixes lint problems:\n\n``` language-js\nconst { ESLint } = require(\"eslint\");\n\n(async function main() {\n    // 1. Create an instance with the `fix` option.\n    const eslint = new ESLint({ fix: true });\n\n    // 2. Lint files. This doesn't modify target files.\n    const results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n    // 3. Modify the files with the fixed code.\n    await ESLint.outputFixes(results);\n\n    // 4. Format the results.\n    const formatter = await eslint.loadFormatter(\"stylish\");\n    const resultText = formatter.format(results);\n\n    // 5. Output it.\n    console.log(resultText);\n})().catch((error) => {\n    process.exitCode = 1;\n    console.error(error);\n});\n```\n\nAnd here is an example of using the `ESLint` class with `lintText` API:\n\n``` language-js\nconst { ESLint } = require(\"eslint\");\n\nconst testCode = `\n  const name = \"eslint\";\n  if(true) {\n    console.log(\"constant condition warning\")\n  };\n`;\n\n(async function main() {\n    // 1. Create an instance\n    const eslint = new ESLint({\n        useEslintrc: false,\n        overrideConfig: {\n            extends: [\"eslint:recommended\"],\n            parserOptions: {\n                sourceType: \"module\",\n                ecmaVersion: \"latest\",\n            },\n            env: {\n                es2022: true,\n                node: true,\n            },\n        },\n    });\n\n    // 2. Lint text.\n    const results = await eslint.lintText(testCode);\n\n    // 3. Format the results.\n    const formatter = await eslint.loadFormatter(\"stylish\");\n    const resultText = formatter.format(results);\n\n    // 4. Output it.\n    console.log(resultText);\n})().catch((error) => {\n    process.exitCode = 1;\n    console.error(error);\n});\n```\n\n### ◆ new ESLint(options)\n\n``` language-js\nconst eslint = new ESLint(options);\n```\n\nCreate a new `ESLint` instance.\n\n#### Parameters\n\nThe `ESLint` constructor takes an `options` object. If you omit the `options` object then it uses default values for all options. The `options` object has the following properties.\n\n##### File Enumeration\n\n- `options.cwd` (`string`)  \n  Default is `process.cwd()`. The working directory. This must be an absolute path.\n- `options.errorOnUnmatchedPattern` (`boolean`)  \n  Default is `true`. Unless set to `false`, the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method will throw an error when no target files are found.\n- `options.extensions` (`string[] | null`)  \n  Default is `null`. If you pass directory paths to the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method, ESLint checks the files in those directories that have the given extensions. For example, when passing the `src/` directory and `extensions` is `[\".js\", \".ts\"]`, ESLint will lint `*.js` and `*.ts` files in `src/`. If `extensions` is `null`, ESLint checks `*.js` files and files that match `overrides[].files` patterns in your configuration.  \n  **Note:** This option only applies when you pass directory paths to the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method. If you pass glob patterns like `lib/**/*`, ESLint will lint all files matching the glob pattern regardless of extension.\n- `options.globInputPaths` (`boolean`)  \n  Default is `true`. If `false` is present, the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method doesn’t interpret glob patterns.\n- `options.ignore` (`boolean`)  \n  Default is `true`. If `false` is present, the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method doesn’t respect `.eslintignore` files or `ignorePatterns` in your configuration.\n- `options.ignorePath` (`string | null`)  \n  Default is `null`. The path to a file ESLint uses instead of `$CWD/.eslintignore`. If a path is present and the file doesn’t exist, this constructor will throw an error.\n\n##### Linting\n\n- `options.allowInlineConfig` (`boolean`)  \n  Default is `true`. If `false` is present, ESLint suppresses directive comments in source code. If this option is `false`, it overrides the `noInlineConfig` setting in your configurations.\n- `options.baseConfig` (`ConfigData | null`)  \n  Default is `null`. [Configuration object](nodejs-api../use/configure/index), extended by all configurations used with this instance. You can use this option to define the default settings that will be used if your configuration files don’t configure it.\n- `options.overrideConfig` (`ConfigData | null`)  \n  Default is `null`. [Configuration object](nodejs-api../use/configure/index), overrides all configurations used with this instance. You can use this option to define the settings that will be used even if your configuration files configure it.\n- `options.overrideConfigFile` (`string | null`)  \n  Default is `null`. The path to a configuration file, overrides all configurations used with this instance. The `options.overrideConfig` option is applied after this option is applied.\n- `options.plugins` (`Record<string, Plugin> | null`)  \n  Default is `null`. The plugin implementations that ESLint uses for the `plugins` setting of your configuration. This is a map-like object. Those keys are plugin IDs and each value is implementation.\n- `options.reportUnusedDisableDirectives` (`\"error\" | \"warn\" | \"off\" | null`)  \n  Default is `null`. The severity to report unused eslint-disable and eslint-enable directives. If this option is a severity, it overrides the `reportUnusedDisableDirectives` setting in your configurations.\n- `options.resolvePluginsRelativeTo` (`string` \\| `null`)  \n  Default is `null`. The path to a directory where plugins should be resolved from. If `null` is present, ESLint loads plugins from the location of the configuration file that contains the plugin setting. If a path is present, ESLint loads all plugins from there.\n- `options.rulePaths` (`string[]`)  \n  Default is `[]`. An array of paths to directories to load custom rules from.\n- `options.useEslintrc` (`boolean`)  \n  Default is `true`. If `false` is present, ESLint doesn’t load configuration files (`.eslintrc.*` files). Only the configuration of the constructor options is valid.\n\n##### Autofix\n\n- `options.fix` (`boolean | (message: LintMessage) => boolean`)  \n  Default is `false`. If `true` is present, the [`eslint.lintFiles()`](#-eslintlintfilespatterns) and [`eslint.lintText()`](#-eslintlinttextcode-options) methods work in autofix mode. If a predicate function is present, the methods pass each lint message to the function, then use only the lint messages for which the function returned `true`.\n- `options.fixTypes` (`(\"directive\" | \"problem\" | \"suggestion\" | \"layout\")[] | null`)  \n  Default is `null`. The types of the rules that the [`eslint.lintFiles()`](#-eslintlintfilespatterns) and [`eslint.lintText()`](#-eslintlinttextcode-options) methods use for autofix.\n\n##### Cache-related\n\n- `options.cache` (`boolean`)  \n  Default is `false`. If `true` is present, the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method caches lint results and uses it if each target file is not changed. Please mind that ESLint doesn’t clear the cache when you upgrade ESLint plugins. In that case, you have to remove the cache file manually. The [`eslint.lintText()`](#-eslintlinttextcode-options) method doesn’t use caches even if you pass the `options.filePath` to the method.\n- `options.cacheLocation` (`string`)  \n  Default is `.eslintcache`. The [`eslint.lintFiles()`](#-eslintlintfilespatterns) method writes caches into this file.\n- `options.cacheStrategy` (`string`)  \n  Default is `\"metadata\"`. Strategy for the cache to use for detecting changed files. Can be either `\"metadata\"` or `\"content\"`.\n\n### ◆ eslint.lintFiles(patterns)\n\n``` language-js\nconst results = await eslint.lintFiles(patterns);\n```\n\nThis method lints the files that match the glob patterns and then returns the results.\n\n#### Parameters\n\n- `patterns` (`string | string[]`)  \n  The lint target files. This can contain any of file paths, directory paths, and glob patterns.\n\n#### Return Value\n\n- (`Promise<LintResult[]>`)  \n  The promise that will be fulfilled with an array of [LintResult](#-lintresult-type) objects.\n\n### ◆ eslint.lintText(code, options)\n\n``` language-js\nconst results = await eslint.lintText(code, options);\n```\n\nThis method lints the given source code text and then returns the results.\n\nBy default, this method uses the configuration that applies to files in the current working directory (the `cwd` constructor option). If you want to use a different configuration, pass `options.filePath`, and ESLint will load the same configuration that [`eslint.lintFiles()`](#-eslintlintfilespatterns) would use for a file at `options.filePath`.\n\nIf the `options.filePath` value is configured to be ignored, this method returns an empty array. If the `options.warnIgnored` option is set along with the `options.filePath` option, this method returns a [LintResult](#-lintresult-type) object. In that case, the result may contain a warning that indicates the file was ignored.\n\n#### Parameters\n\nThe second parameter `options` is omittable.\n\n- `code` (`string`)  \n  The source code text to check.\n- `options.filePath` (`string`)  \n  Optional. The path to the file of the source code text. If omitted, the `result.filePath` becomes the string `\"<text>\"`.\n- `options.warnIgnored` (`boolean`)  \n  Optional. If `true` is present and the `options.filePath` is a file ESLint should ignore, this method returns a lint result contains a warning message.\n\n#### Return Value\n\n- (`Promise<LintResult[]>`)  \n  The promise that will be fulfilled with an array of [LintResult](#-lintresult-type) objects. This is an array (despite there being only one lint result) in order to keep the interfaces between this and the [`eslint.lintFiles()`](#-eslintlintfilespatterns) method similar.\n\n### ◆ eslint.getRulesMetaForResults(results)\n\n``` language-js\nconst results = await eslint.lintFiles(patterns);\nconst rulesMeta = eslint.getRulesMetaForResults(results);\n```\n\nThis method returns an object containing meta information for each rule that triggered a lint error in the given `results`.\n\n#### Parameters\n\n- `results` (`LintResult[]`)  \n  An array of [LintResult](#-lintresult-type) objects returned from a call to `ESLint#lintFiles()` or `ESLint#lintText()`.\n\n#### Return Value\n\n- (`Object`)  \n  An object whose property names are the rule IDs from the `results` and whose property values are the rule’s meta information (if available).\n\n### ◆ eslint.calculateConfigForFile(filePath)\n\n``` language-js\nconst config = await eslint.calculateConfigForFile(filePath);\n```\n\nThis method calculates the configuration for a given file, which can be useful for debugging purposes.\n\n- It resolves and merges `extends` and `overrides` settings into the top level configuration.\n- It resolves the `parser` setting to absolute paths.\n- It normalizes the `plugins` setting to align short names. (e.g., `eslint-plugin-foo` → `foo`)\n- It adds the `processor` setting if a legacy file extension processor is matched.\n- It doesn’t interpret the `env` setting to the `globals` and `parserOptions` settings, so the result object contains the `env` setting as is.\n\n#### Parameters\n\n- `filePath` (`string`)  \n  The path to the file whose configuration you would like to calculate. Directory paths are forbidden because ESLint cannot handle the `overrides` setting.\n\n#### Return Value\n\n- (`Promise<Object>`)  \n  The promise that will be fulfilled with a configuration object.\n\n### ◆ eslint.isPathIgnored(filePath)\n\n``` language-js\nconst isPathIgnored = await eslint.isPathIgnored(filePath);\n```\n\nThis method checks if a given file is ignored by your configuration.\n\n#### Parameters\n\n- `filePath` (`string`)  \n  The path to the file you want to check.\n\n#### Return Value\n\n- (`Promise<boolean>`)  \n  The promise that will be fulfilled with whether the file is ignored or not. If the file is ignored, then it will return `true`.\n\n### ◆ eslint.loadFormatter(nameOrPath)\n\n``` language-js\nconst formatter = await eslint.loadFormatter(nameOrPath);\n```\n\nThis method loads a formatter. Formatters convert lint results to a human- or machine-readable string.\n\n#### Parameters\n\n- `nameOrPath` (`string | undefined`)  \n  The path to the file you want to check. The following values are allowed:\n  - `undefined`. In this case, loads the `\"stylish\"` built-in formatter.\n  - A name of [built-in formatters](nodejs-api../use/formatters/index).\n  - A name of [third-party formatters](https://www.npmjs.com/search?q=eslintformatter). For examples:\n    - `\"foo\"` will load `eslint-formatter-foo`.\n    - `\"@foo\"` will load `@foo/eslint-formatter`.\n    - `\"@foo/bar\"` will load `@foo/eslint-formatter-bar`.\n  - A path to the file that defines a formatter. The path must contain one or more path separators (`/`) in order to distinguish if it’s a path or not. For example, start with `./`.\n\n#### Return Value\n\n- (`Promise<LoadedFormatter>`)  \n  The promise that will be fulfilled with a [LoadedFormatter](#-loadedformatter-type) object.\n\n### ◆ ESLint.version\n\n``` language-js\nconst version = ESLint.version;\n```\n\nThe version string of ESLint. E.g. `\"7.0.0\"`.\n\nThis is a static property.\n\n### ◆ ESLint.outputFixes(results)\n\n``` language-js\nawait ESLint.outputFixes(results);\n```\n\nThis method writes code modified by ESLint’s autofix feature into its respective file. If any of the modified files don’t exist, this method does nothing.\n\nThis is a static method.\n\n#### Parameters\n\n- `results` (`LintResult[]`)  \n  The [LintResult](#-lintresult-type) objects to write.\n\n#### Return Value\n\n- (`Promise<void>`)  \n  The promise that will be fulfilled after all files are written.\n\n### ◆ ESLint.getErrorResults(results)\n\n``` language-js\nconst filteredResults = ESLint.getErrorResults(results);\n```\n\nThis method copies the given results and removes warnings. The returned value contains only errors.\n\nThis is a static method.\n\n#### Parameters\n\n- `results` (`LintResult[]`)  \n  The [LintResult](#-lintresult-type) objects to filter.\n\n#### Return Value\n\n- (`LintResult[]`)  \n  The filtered [LintResult](#-lintresult-type) objects.\n\n### ◆ LintResult type\n\nThe `LintResult` value is the information of the linting result of each file. The [`eslint.lintFiles()`](#-eslintlintfilespatterns) and [`eslint.lintText()`](#-eslintlinttextcode-options) methods return it. It has the following properties:\n\n- `filePath` (`string`)  \n  The absolute path to the file of this result. This is the string `\"<text>\"` if the file path is unknown (when you didn’t pass the `options.filePath` option to the [`eslint.lintText()`](#-eslintlinttextcode-options) method).\n- `messages` (`LintMessage[]`)  \n  The array of [LintMessage](#-lintmessage-type) objects.\n- `suppressedMessages` (`SuppressedLintMessage[]`)  \n  The array of [SuppressedLintMessage](#-suppressedlintmessage-type) objects.\n- `fixableErrorCount` (`number`)  \n  The number of errors that can be fixed automatically by the `fix` constructor option.\n- `fixableWarningCount` (`number`)  \n  The number of warnings that can be fixed automatically by the `fix` constructor option.\n- `errorCount` (`number`)  \n  The number of errors. This includes fixable errors and fatal errors.\n- `fatalErrorCount` (`number`)  \n  The number of fatal errors.\n- `warningCount` (`number`)  \n  The number of warnings. This includes fixable warnings.\n- `output` (`string | undefined`)  \n  The modified source code text. This property is undefined if any fixable messages didn’t exist.\n- `source` (`string | undefined`)  \n  The original source code text. This property is undefined if any messages didn’t exist or the `output` property exists.\n- `usedDeprecatedRules` (`{ ruleId: string; replacedBy: string[] }[]`)  \n  The information about the deprecated rules that were used to check this file.\n\n### ◆ LintMessage type\n\nThe `LintMessage` value is the information of each linting error. The `messages` property of the [LintResult](#-lintresult-type) type contains it. It has the following properties:\n\n- `ruleId` (`string` \\| `null`)  \n  The rule name that generates this lint message. If this message is generated by the ESLint core rather than rules, this is `null`.\n- `severity` (`1 | 2`)  \n  The severity of this message. `1` means warning and `2` means error.\n- `fatal` (`boolean | undefined`)  \n  `true` if this is a fatal error unrelated to a rule, like a parsing error.\n- `message` (`string`)  \n  The error message.\n- `line` (`number | undefined`)  \n  The 1-based line number of the begin point of this message.\n- `column` (`number | undefined`)  \n  The 1-based column number of the begin point of this message.\n- `endLine` (`number | undefined`)  \n  The 1-based line number of the end point of this message. This property is undefined if this message is not a range.\n- `endColumn` (`number | undefined`)  \n  The 1-based column number of the end point of this message. This property is undefined if this message is not a range.\n- `fix` (`EditInfo | undefined`)  \n  The [EditInfo](#-editinfo-type) object of autofix. This property is undefined if this message is not fixable.\n- `suggestions` (`{ desc: string; fix: EditInfo }[] | undefined`)  \n  The list of suggestions. Each suggestion is the pair of a description and an [EditInfo](#-editinfo-type) object to fix code. API users such as editor integrations can choose one of them to fix the problem of this message. This property is undefined if this message doesn’t have any suggestions.\n\n### ◆ SuppressedLintMessage type\n\nThe `SuppressedLintMessage` value is the information of each suppressed linting error. The `suppressedMessages` property of the [LintResult](#-lintresult-type) type contains it. It has the following properties:\n\n- `ruleId` (`string` \\| `null`)  \n  Same as `ruleId` in [LintMessage](#-lintmessage-type) type.\n- `severity` (`1 | 2`)  \n  Same as `severity` in [LintMessage](#-lintmessage-type) type.\n- `fatal` (`boolean | undefined`)  \n  Same as `fatal` in [LintMessage](#-lintmessage-type) type.\n- `message` (`string`)  \n  Same as `message` in [LintMessage](#-lintmessage-type) type.\n- `line` (`number | undefined`)  \n  Same as `line` in [LintMessage](#-lintmessage-type) type.\n- `column` (`number | undefined`)  \n  Same as `column` in [LintMessage](#-lintmessage-type) type.\n- `endLine` (`number | undefined`)  \n  Same as `endLine` in [LintMessage](#-lintmessage-type) type.\n- `endColumn` (`number | undefined`)  \n  Same as `endColumn` in [LintMessage](#-lintmessage-type) type.\n- `fix` (`EditInfo | undefined`)  \n  Same as `fix` in [LintMessage](#-lintmessage-type) type.\n- `suggestions` (`{ desc: string; fix: EditInfo }[] | undefined`)  \n  Same as `suggestions` in [LintMessage](#-lintmessage-type) type.\n- `suppressions` (`{ kind: string; justification: string}[]`)  \n  The list of suppressions. Each suppression is the pair of a kind and a justification.\n\n### ◆ EditInfo type\n\nThe `EditInfo` value is information to edit text. The `fix` and `suggestions` properties of [LintMessage](#-lintmessage-type) type contain it. It has following properties:\n\n- `range` (`[number, number]`)  \n  The pair of 0-based indices in source code text to remove.\n- `text` (`string`)  \n  The text to add.\n\nThis edit information means replacing the range of the `range` property by the `text` property value. It’s like `sourceCodeText.slice(0, edit.range[0]) + edit.text + sourceCodeText.slice(edit.range[1])`. Therefore, it’s an add if the `range[0]` and `range[1]` property values are the same value, and it’s removal if the `text` property value is empty string.\n\n### ◆ LoadedFormatter type\n\nThe `LoadedFormatter` value is the object to convert the [LintResult](#-lintresult-type) objects to text. The [eslint.loadFormatter()](#-eslintloadformatternameorpath) method returns it. It has the following method:\n\n- `format` (`(results: LintResult[], resultsMeta: ResultsMeta) => string | Promise<string>`)  \n  The method to convert the [LintResult](#-lintresult-type) objects to text. `resultsMeta` is an object that will contain a `maxWarningsExceeded` object if `--max-warnings` was set and the number of warnings exceeded the limit. The `maxWarningsExceeded` object will contain two properties: `maxWarnings`, the value of the `--max-warnings` option, and `foundWarnings`, the number of lint warnings.\n\n## SourceCode\n\nThe `SourceCode` type represents the parsed source code that ESLint executes on. It’s used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of `SourceCode` by passing in the text string representing the code and an abstract syntax tree (AST) in [ESTree](https://github.com/estree/estree) format (including location information, range information, comments, and tokens):\n\n``` language-js\nconst SourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"var foo = bar;\", ast);\n```\n\nThe `SourceCode` constructor throws an error if the AST is missing any of the required information.\n\nThe `SourceCode` constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.\n\n``` language-js\nconst SourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"\\uFEFFvar foo = bar;\", ast);\n\nassert(code.hasBOM === true);\nassert(code.text === \"var foo = bar;\");\n```\n\n### SourceCode#splitLines()\n\nThis is a static function on `SourceCode` that is used to split the source code text into an array of lines.\n\n``` language-js\nconst SourceCode = require(\"eslint\").SourceCode;\n\nconst code = \"var a = 1;\\nvar b = 2;\"\n\n// split code into an array\nconst codeLines = SourceCode.splitLines(code);\n\n/*\n    Value of codeLines will be\n    [\n        \"var a = 1;\",\n        \"var b = 2;\"\n    ]\n */\n```\n\n## Linter\n\nThe `Linter` object does the actual evaluation of the JavaScript code. It doesn’t do any filesystem operations, it simply parses and reports on the code. In particular, the `Linter` object does not process configuration objects or files. Unless you are working in the browser, you probably want to use the [ESLint class](#eslint-class) instead.\n\nThe `Linter` is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:\n\n- `cwd` - Path to a directory that should be considered as the current working directory. It is accessible to rules from `context.cwd` or by calling `context.getCwd()` (see [The Context Object](nodejs-api../extend/custom-rules#the-context-object)). If `cwd` is `undefined`, it will be normalized to `process.cwd()` if the global `process` object is defined (for example, in the Node.js runtime) , or `undefined` otherwise.\n\nFor example:\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter1 = new Linter({ cwd: 'path/to/project' });\nconst linter2 = new Linter();\n```\n\nIn this example, rules run on `linter1` will get `path/to/project` from `context.cwd` or when calling `context.getCwd()`. Those run on `linter2` will get `process.cwd()` if the global `process` object is defined or `undefined` otherwise (e.g. on the browser <https://eslint.org/demo>).\n\n### Linter#verify\n\nThe most important method on `Linter` is `verify()`, which initiates linting of the given text. This method accepts three arguments:\n\n- `code` - the source code to lint (a string or instance of `SourceCode`).\n- `config` - a configuration object that has been processed and normalized by `ESLint` using eslintrc files and/or other configuration arguments.\n  - **Note**: If you want to lint text and have your configuration be read and processed, use [`ESLint#lintFiles()`](#-eslintlintfilespatterns) or [`ESLint#lintText()`](#-eslintlinttextcode-options) instead.\n- `options` - (optional) Additional options for this run.\n  - `filename` - (optional) the filename to associate with the source code.\n  - `preprocess` - (optional) A function that [Processors in Plugins](nodejs-api../extend/plugins#processors-in-plugins) documentation describes as the `preprocess` method.\n  - `postprocess` - (optional) A function that [Processors in Plugins](nodejs-api../extend/plugins#processors-in-plugins) documentation describes as the `postprocess` method.\n  - `filterCodeBlock` - (optional) A function that decides which code blocks the linter should adopt. The function receives two arguments. The first argument is the virtual filename of a code block. The second argument is the text of the code block. If the function returned `true` then the linter adopts the code block. If the function was omitted, the linter adopts only `*.js` code blocks. If you provided a `filterCodeBlock` function, it overrides this default behavior, so the linter doesn’t adopt `*.js` code blocks automatically.\n  - `disableFixes` - (optional) when set to `true`, the linter doesn’t make either the `fix` or `suggestions` property of the lint result.\n  - `allowInlineConfig` - (optional) set to `false` to disable inline comments from changing ESLint rules.\n  - `reportUnusedDisableDirectives` - (optional) when set to `true`, adds reported errors for unused `eslint-disable` and `eslint-enable` directives when no problems would be reported in the disabled area anyway.\n\nIf the third argument is a string, it is interpreted as the `filename`.\n\nYou can call `verify()` like this:\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\"var foo;\", {\n    rules: {\n        semi: 2\n    }\n}, { filename: \"foo.js\" });\n\n// or using SourceCode\n\nconst Linter = require(\"eslint\").Linter,\n    linter = new Linter(),\n    SourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"var foo = bar;\", ast);\n\nconst messages = linter.verify(code, {\n    rules: {\n        semi: 2\n    }\n}, { filename: \"foo.js\" });\n```\n\nThe `verify()` method returns an array of objects containing information about the linting warnings and errors. Here’s an example:\n\n``` language-js\n{\n    fatal: false,\n    ruleId: \"semi\",\n    severity: 2,\n    line: 1,\n    column: 23,\n    message: \"Expected a semicolon.\",\n    fix: {\n        range: [1, 15],\n        text: \";\"\n    }\n}\n```\n\nThe information available for each linting message is:\n\n- `column` - the column on which the error occurred.\n- `fatal` - usually omitted, but will be set to true if there’s a parsing error (not related to a rule).\n- `line` - the line on which the error occurred.\n- `message` - the message that should be output.\n- `nodeType` - the node or token type that was reported with the problem.\n- `ruleId` - the ID of the rule that triggered the messages (or null if `fatal` is true).\n- `severity` - either 1 or 2, depending on your configuration.\n- `endColumn` - the end column of the range on which the error occurred (this property is omitted if it’s not range).\n- `endLine` - the end line of the range on which the error occurred (this property is omitted if it’s not range).\n- `fix` - an object describing the fix for the problem (this property is omitted if no fix is available).\n- `suggestions` - an array of objects describing possible lint fixes for editors to programmatically enable (see details in the [Working with Rules docs](nodejs-api../extend/custom-rules#providing-suggestions)).\n\nYou can get the suppressed messages from the previous run by `getSuppressedMessages()` method. If there is not a previous run, `getSuppressedMessage()` will return an empty list.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\"var foo = bar; // eslint-disable-line -- Need to suppress\", {\n    rules: {\n        semi: [\"error\", \"never\"]\n    }\n}, { filename: \"foo.js\" });\nconst suppressedMessages = linter.getSuppressedMessages();\n\nconsole.log(suppressedMessages[0].suppressions); // [{ \"kind\": \"directive\", \"justification\": \"Need to suppress\" }]\n```\n\nLinting message objects have a deprecated `source` property. This property **will be removed** from linting messages in an upcoming breaking release. If you depend on this property, you should now use the `SourceCode` instance provided by the linter.\n\nYou can also get an instance of the `SourceCode` object used inside of `linter` by using the `getSourceCode()` method:\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\"var foo = bar;\", {\n    rules: {\n        semi: 2\n    }\n}, { filename: \"foo.js\" });\n\nconst code = linter.getSourceCode();\n\nconsole.log(code.text);     // \"var foo = bar;\"\n```\n\nIn this way, you can retrieve the text and AST used for the last run of `linter.verify()`.\n\n### Linter#verifyAndFix()\n\nThis method is similar to verify except that it also runs autofixing logic, similar to the `--fix` flag on the command line. The result object will contain the autofixed code, along with any remaining linting messages for the code that were not autofixed.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verifyAndFix(\"var foo\", {\n    rules: {\n        semi: 2\n    }\n});\n```\n\nOutput object from this method:\n\n``` language-js\n{\n    fixed: true,\n    output: \"var foo;\",\n    messages: []\n}\n```\n\nThe information available is:\n\n- `fixed` - True, if the code was fixed.\n- `output` - Fixed code text (might be the same as input if no fixes were applied).\n- `messages` - Collection of all messages for the given code (It has the same information as explained above under `verify` block).\n\n### Linter#defineRule\n\nEach `Linter` instance holds a map of rule names to loaded rule objects. By default, all ESLint core rules are loaded. If you want to use `Linter` with custom rules, you should use the `defineRule` method to register your rules by ID.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.defineRule(\"my-custom-rule\", {\n    // (an ESLint rule)\n\n    create(context) {\n        // ...\n    }\n});\n\nconst results = linter.verify(\"// some source text\", { rules: { \"my-custom-rule\": \"error\" } });\n```\n\n### Linter#defineRules\n\nThis is a convenience method similar to `Linter#defineRule`, except that it allows you to define many rules at once using an object.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.defineRules({\n    \"my-custom-rule\": { /* an ESLint rule */ create() {} },\n    \"another-custom-rule\": { /* an ESLint rule */ create() {} }\n});\n\nconst results = linter.verify(\"// some source text\", {\n    rules: {\n        \"my-custom-rule\": \"error\",\n        \"another-custom-rule\": \"warn\"\n    }\n});\n```\n\n### Linter#getRules\n\nThis method returns a map of all loaded rules.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.getRules();\n\n/*\nMap {\n  'accessor-pairs' => { meta: { docs: [Object], schema: [Array] }, create: [Function: create] },\n  'array-bracket-newline' => { meta: { docs: [Object], schema: [Array] }, create: [Function: create] },\n  ...\n}\n*/\n```\n\n### Linter#defineParser\n\nEach instance of `Linter` holds a map of custom parsers. If you want to define a parser programmatically, you can add this function with the name of the parser as first argument and the [parser object](nodejs-api../extend/custom-parsers) as second argument. The default `\"espree\"` parser will already be loaded for every `Linter` instance.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.defineParser(\"my-custom-parser\", {\n    parse(code, options) {\n        // ...\n    }\n});\n\nconst results = linter.verify(\"// some source text\", { parser: \"my-custom-parser\" });\n```\n\n### Linter#version/Linter.version\n\nEach instance of `Linter` has a `version` property containing the semantic version number of ESLint that the `Linter` instance is from.\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nlinter.version; // => '4.5.0'\n```\n\nThere is also a `Linter.version` property that you can read without instantiating `Linter`:\n\n``` language-js\nconst Linter = require(\"eslint\").Linter;\n\nLinter.version; // => '4.5.0'\n```\n\n## RuleTester\n\n`eslint.RuleTester` is a utility to write tests for ESLint rules. It is used internally for the bundled rules that come with ESLint, and it can also be used by plugins.\n\nExample usage:\n\n``` language-js\n\"use strict\";\n\nconst rule = require(\"../../../lib/rules/my-rule\"),\n    RuleTester = require(\"eslint\").RuleTester;\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", rule, {\n    valid: [\n        {\n            code: \"var foo = true\",\n            options: [{ allowFoo: true }]\n        }\n    ],\n\n    invalid: [\n        {\n            code: \"var invalidVariable = true\",\n            errors: [{ message: \"Unexpected invalid variable.\" }]\n        },\n        {\n            code: \"var invalidVariable = true\",\n            errors: [{ message: /^Unexpected.+variable/ }]\n        }\n    ]\n});\n```\n\nThe `RuleTester` constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:\n\n``` language-js\nconst ruleTester = new RuleTester({ parserOptions: { ecmaVersion: 2015 } });\n```\n\nThe `RuleTester#run()` method is used to run the tests. It should be passed the following arguments:\n\n- The name of the rule (string)\n- The rule object itself (see [“working with rules”](nodejs-api../extend/custom-rules))\n- An object containing `valid` and `invalid` properties, each of which is an array containing test cases.\n\nA test case is an object with the following properties:\n\n- `name` (string, optional): The name to use for the test case, to make it easier to find\n- `code` (string, required): The source code that the rule should be run on\n- `options` (array, optional): The options passed to the rule. The rule severity should not be included in this list.\n- `filename` (string, optional): The filename for the given case (useful for rules that make assertions about filenames).\n- `only` (boolean, optional): Run this case exclusively for debugging in supported test frameworks.\n\nIn addition to the properties above, invalid test cases can also have the following properties:\n\n- `errors` (number or array, required): Asserts some properties of the errors that the rule is expected to produce when run on this code. If this is a number, asserts the number of errors produced. Otherwise, this should be a list of objects, each containing information about a single reported error. The following properties can be used for an error (all are optional):\n\n  - `message` (string/regexp): The message for the error\n  - `messageId` (string): The Id for the error. See [testing errors with messageId](#testing-errors-with-messageid) for details\n  - `data` (object): Placeholder data which can be used in combination with `messageId`\n  - `type` (string): The type of the reported AST node\n  - `line` (number): The 1-based line number of the reported location\n  - `column` (number): The 1-based column number of the reported location\n  - `endLine` (number): The 1-based line number of the end of the reported location\n  - `endColumn` (number): The 1-based column number of the end of the reported location\n  - `suggestions` (array): An array of objects with suggestion details to check. See [Testing Suggestions](#testing-suggestions) for details\n\n  If a string is provided as an error instead of an object, the string is used to assert the `message` of the error.\n\n- `output` (string, required if the rule fixes code): Asserts the output that will be produced when using this rule for a single pass of autofixing (e.g. with the `--fix` command line flag). If this is `null`, asserts that none of the reported problems suggest autofixes.\n\nAny additional properties of a test case will be passed directly to the linter as config options. For example, a test case can have a `parserOptions` property to configure parser behavior:\n\n``` language-js\n{\n    code: \"let foo;\",\n    parserOptions: { ecmaVersion: 2015 }\n}\n```\n\nIf a valid test case only uses the `code` property, it can optionally be provided as a string containing the code, rather than an object with a `code` key.\n\n### Testing errors with `messageId`\n\nIf the rule under test uses `messageId`s, you can use `messageId` property in a test case to assert reported error’s `messageId` instead of its `message`.\n\n``` language-js\n{\n    code: \"let foo;\",\n    errors: [{ messageId: \"unexpected\" }]\n}\n```\n\nFor messages with placeholders, a test case can also use `data` property to additionally assert reported error’s `message`.\n\n``` language-js\n{\n    code: \"let foo;\",\n    errors: [{ messageId: \"unexpected\", data: { name: \"foo\" } }]\n}\n```\n\nPlease note that `data` in a test case does not assert `data` passed to `context.report`. Instead, it is used to form the expected message text which is then compared with the received `message`.\n\n### Testing Suggestions\n\nSuggestions can be tested by defining a `suggestions` key on an errors object. The options to check for the suggestions are the following (all are optional):\n\n- `desc` (string): The suggestion `desc` value\n- `messageId` (string): The suggestion `messageId` value for suggestions that use `messageId`s\n- `data` (object): Placeholder data which can be used in combination with `messageId`\n- `output` (string): A code string representing the result of applying the suggestion fix to the input code\n\nExample:\n\n``` language-js\nruleTester.run(\"my-rule-for-no-foo\", rule, {\n    valid: [],\n    invalid: [{\n        code: \"var foo;\",\n        errors: [{\n            suggestions: [{\n                desc: \"Rename identifier 'foo' to 'bar'\",\n                output: \"var bar;\"\n            }]\n        }]\n    }]\n})\n```\n\n`messageId` and `data` properties in suggestion test objects work the same way as in error test objects. See [testing errors with messageId](#testing-errors-with-messageid) for details.\n\n``` language-js\nruleTester.run(\"my-rule-for-no-foo\", rule, {\n    valid: [],\n    invalid: [{\n        code: \"var foo;\",\n        errors: [{\n            suggestions: [{\n                messageId: \"renameFoo\",\n                data: { newName: \"bar\" },\n                output: \"var bar;\"\n            }]\n        }]\n    }]\n})\n```\n\n### Customizing RuleTester\n\n`RuleTester` depends on two functions to run tests: `describe` and `it`. These functions can come from various places:\n\n1.  If `RuleTester.describe` and `RuleTester.it` have been set to function values, `RuleTester` will use `RuleTester.describe` and `RuleTester.it` to run tests. You can use this to customize the behavior of `RuleTester` to match a test framework that you’re using.\n\n    If `RuleTester.itOnly` has been set to a function value, `RuleTester` will call `RuleTester.itOnly` instead of `RuleTester.it` to run cases with `only: true`. If `RuleTester.itOnly` is not set but `RuleTester.it` has an `only` function property, `RuleTester` will fall back to `RuleTester.it.only`.\n\n2.  Otherwise, if `describe` and `it` are present as globals, `RuleTester` will use `global.describe` and `global.it` to run tests and `global.it.only` to run cases with `only: true`. This allows `RuleTester` to work when using frameworks like [Mocha](https://mochajs.org/) without any additional configuration.\n\n3.  Otherwise, `RuleTester#run` will simply execute all of the tests in sequence, and will throw an error if one of them fails. This means you can simply execute a test file that calls `RuleTester.run` using `Node.js`, without needing a testing framework.\n\n`RuleTester#run` calls the `describe` function with two arguments: a string describing the rule, and a callback function. The callback calls the `it` function with a string describing the test case, and a test function. The test function will return successfully if the test passes, and throw an error if the test fails. The signature for `only` is the same as `it`. `RuleTester` calls either `it` or `only` for every case even when some cases have `only: true`, and the test framework is responsible for implementing test case exclusivity. (Note that this is the standard behavior for test suites when using frameworks like [Mocha](https://mochajs.org/); this information is only relevant if you plan to customize `RuleTester.describe`, `RuleTester.it`, or `RuleTester.itOnly`.)\n\nExample of customizing `RuleTester`:\n\n``` language-js\n\"use strict\";\n\nconst RuleTester = require(\"eslint\").RuleTester,\n    test = require(\"my-test-runner\"),\n    myRule = require(\"../../../lib/rules/my-rule\");\n\nRuleTester.describe = function(text, method) {\n    RuleTester.it.title = text;\n    return method.call(this);\n};\n\nRuleTester.it = function(text, method) {\n    test(RuleTester.it.title + \": \" + text, method);\n};\n\n// then use RuleTester as documented\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", myRule, {\n    valid: [\n        // valid test cases\n    ],\n    invalid: [\n        // invalid test cases\n    ]\n})\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/integrate/nodejs-api](https://eslint.org/docs/latest/integrate/nodejs-api)"
- name: object-curly-spacing
  id: rules/object-curly-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# object-curly-spacing\n\nEnforce consistent spacing inside braces\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](object-curly-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [always](#always)\n        1.  [arraysInObjects](#arraysinobjects)\n        2.  [objectsInObjects](#objectsinobjects)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/object-curly-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhile formatting preferences are very personal, a number of style guides require or disallow spaces between curly braces in the following situations:\n\n``` language-js\n// simple object literals\nvar obj = { foo: \"bar\" };\n\n// nested object literals\nvar obj = { foo: { zoo: \"bar\" } };\n\n// destructuring assignment (EcmaScript 6)\nvar { x, y } = y;\n\n// import/export declarations (EcmaScript 6)\nimport { foo } from \"bar\";\nexport { foo };\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"never\"` (default) disallows spacing inside of braces\n- `\"always\"` requires spacing inside of braces (except `{}`)\n\nObject option:\n\n- `\"arraysInObjects\": true` requires spacing inside of braces of objects beginning and/or ending with an array element (applies when the first option is set to `never`)\n- `\"arraysInObjects\": false` disallows spacing inside of braces of objects beginning and/or ending with an array element (applies when the first option is set to `always`)\n- `\"objectsInObjects\": true` requires spacing inside of braces of objects beginning and/or ending with an object element (applies when the first option is set to `never`)\n- `\"objectsInObjects\": false` disallows spacing inside of braces of objects beginning and/or ending with an object element (applies when the first option is set to `always`)\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxudmFyIG9iaiA9IHsgJ2Zvbyc6ICdiYXInIH07XG52YXIgb2JqID0geydmb28nOiAnYmFyJyB9O1xudmFyIG9iaiA9IHsgYmF6OiB7J2Zvbyc6ICdxdXgnfSwgYmFyfTtcbnZhciBvYmogPSB7YmF6OiB7ICdmb28nOiAncXV4J30sIGJhcn07XG52YXIge3ggfSA9IHk7XG5pbXBvcnQgeyBmb28gfSBmcm9tICdiYXInOyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = { 'foo': 'bar' };\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux'}, bar};\nvar {x } = y;\nimport { foo } from 'bar';\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxudmFyIG9iaiA9IHsnZm9vJzogJ2Jhcid9O1xudmFyIG9iaiA9IHsnZm9vJzogeydiYXInOiAnYmF6J30sICdxdXgnOiAncXV4eCd9O1xudmFyIG9iaiA9IHtcbiAgJ2Zvbyc6ICdiYXInXG59O1xudmFyIG9iaiA9IHsnZm9vJzogJ2Jhcidcbn07XG52YXIgb2JqID0ge1xuICAnZm9vJzonYmFyJ307XG52YXIgb2JqID0ge307XG52YXIge3h9ID0geTtcbmltcG9ydCB7Zm9vfSBmcm9tICdiYXInOyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar obj = {};\nvar {x} = y;\nimport {foo} from 'bar';\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbnZhciBvYmogPSB7J2Zvbyc6ICdiYXInfTtcbnZhciBvYmogPSB7J2Zvbyc6ICdiYXInIH07XG52YXIgb2JqID0geyBiYXo6IHsnZm9vJzogJ3F1eCd9LCBiYXJ9O1xudmFyIG9iaiA9IHtiYXo6IHsgJ2Zvbyc6ICdxdXgnIH0sIGJhcn07XG52YXIgb2JqID0geydmb28nOiAnYmFyJ1xufTtcbnZhciBvYmogPSB7XG4gICdmb28nOidiYXInfTtcbnZhciB7eH0gPSB5O1xuaW1wb3J0IHtmb28gfSBmcm9tICdiYXInOyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar {x} = y;\nimport {foo } from 'bar';\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbnZhciBvYmogPSB7fTtcbnZhciBvYmogPSB7ICdmb28nOiAnYmFyJyB9O1xudmFyIG9iaiA9IHsgJ2Zvbyc6IHsgJ2Jhcic6ICdiYXonIH0sICdxdXgnOiAncXV4eCcgfTtcbnZhciBvYmogPSB7XG4gICdmb28nOiAnYmFyJ1xufTtcbnZhciB7IHggfSA9IHk7XG5pbXBvcnQgeyBmb28gfSBmcm9tICdiYXInOyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {};\nvar obj = { 'foo': 'bar' };\nvar obj = { 'foo': { 'bar': 'baz' }, 'qux': 'quxx' };\nvar obj = {\n  'foo': 'bar'\n};\nvar { x } = y;\nimport { foo } from 'bar';\n```\n\n#### arraysInObjects\n\nExamples of additional **correct** code for this rule with the `\"never\", { \"arraysInObjects\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJhcnJheXNJbk9iamVjdHNcIjogdHJ1ZSB9XSovXG5cbnZhciBvYmogPSB7XCJmb29cIjogWyAxLCAyIF0gfTtcbnZhciBvYmogPSB7XCJmb29cIjogWyBcImJhelwiLCBcImJhclwiIF0gfTsifQ==)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"arraysInObjects\": true }]*/\n\nvar obj = {\"foo\": [ 1, 2 ] };\nvar obj = {\"foo\": [ \"baz\", \"bar\" ] };\n```\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"arraysInObjects\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiYXJyYXlzSW5PYmplY3RzXCI6IGZhbHNlIH1dKi9cblxudmFyIG9iaiA9IHsgXCJmb29cIjogWyAxLCAyIF19O1xudmFyIG9iaiA9IHsgXCJmb29cIjogWyBcImJhelwiLCBcImJhclwiIF19OyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"arraysInObjects\": false }]*/\n\nvar obj = { \"foo\": [ 1, 2 ]};\nvar obj = { \"foo\": [ \"baz\", \"bar\" ]};\n```\n\n#### objectsInObjects\n\nExamples of additional **correct** code for this rule with the `\"never\", { \"objectsInObjects\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJvYmplY3RzSW5PYmplY3RzXCI6IHRydWUgfV0qL1xuXG52YXIgb2JqID0ge1wiZm9vXCI6IHtcImJhelwiOiAxLCBcImJhclwiOiAyfSB9OyJ9)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"objectsInObjects\": true }]*/\n\nvar obj = {\"foo\": {\"baz\": 1, \"bar\": 2} };\n```\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"objectsInObjects\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1jdXJseS1zcGFjaW5nOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwib2JqZWN0c0luT2JqZWN0c1wiOiBmYWxzZSB9XSovXG5cbnZhciBvYmogPSB7IFwiZm9vXCI6IHsgXCJiYXpcIjogMSwgXCJiYXJcIjogMiB9fTsifQ==)\n\n``` language-js\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"objectsInObjects\": false }]*/\n\nvar obj = { \"foo\": { \"baz\": 1, \"bar\": 2 }};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between curly braces.\n\n## Related Rules\n\n- [array-bracket-spacing](array-bracket-spacing)\n- [comma-spacing](comma-spacing)\n- [computed-property-spacing](computed-property-spacing)\n- [space-in-parens](space-in-parens)\n\n## Version\n\nThis rule was introduced in ESLint v0.22.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/object-curly-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/object-curly-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/object-curly-spacing](https://eslint.org/docs/latest/rules/object-curly-spacing)"
- name: object-shorthand
  id: rules/object-shorthand
  summary: ECMAScript 6 provides a concise form for defining object literal methods and properties
  description: "# object-shorthand\n\nRequire or disallow method and property shorthand syntax for object literals\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](object-shorthand../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [avoidQuotes](#avoidquotes)\n    2.  [ignoreConstructors](#ignoreconstructors)\n    3.  [methodsIgnorePattern](#methodsignorepattern)\n    4.  [avoidExplicitReturnArrows](#avoidexplicitreturnarrows)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nECMAScript 6 provides a concise form for defining object literal methods and properties. This syntax can make defining complex object literals much cleaner.\n\nHere are a few common examples using the ES5 syntax:\n\n``` language-js\n// properties\nvar foo = {\n    x: x,\n    y: y,\n    z: z,\n};\n\n// methods\nvar foo = {\n    a: function() {},\n    b: function() {}\n};\n```\n\nNow here are ES6 equivalents:\n\n``` language-js\n/*eslint-env es6*/\n\n// properties\nvar foo = {x, y, z};\n\n// methods\nvar foo = {\n    a() {},\n    b() {}\n};\n```\n\n## Rule Details\n\nThis rule enforces the use of the shorthand syntax. This applies to all methods (including generators) defined in object literals and any properties defined where the key name matches name of the assigned variable.\n\nEach of the following properties would warn:\n\n``` language-js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    w: function() {},\n    x: function *() {},\n    [y]: function() {},\n    z: z\n};\n```\n\nIn that case the expected syntax would have been:\n\n``` language-js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    w() {},\n    *x() {},\n    [y]() {},\n    z\n};\n```\n\nThis rule does not flag arrow functions inside of object literals. The following will *not* warn:\n\n``` language-js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    x: (y) => y\n};\n```\n\n## Options\n\nThe rule takes an option which specifies when it should be applied. It can be set to one of the following values:\n\n- `\"always\"` (default) expects that the shorthand will be used whenever possible.\n- `\"methods\"` ensures the method shorthand is used (also applies to generators).\n- `\"properties\"` ensures the property shorthand is used (where the key and variable name match).\n- `\"never\"` ensures that no property or method shorthand is used in any object literal.\n- `\"consistent\"` ensures that either all shorthand or all long-form will be used in an object literal.\n- `\"consistent-as-needed\"` ensures that either all shorthand or all long-form will be used in an object literal, but ensures all shorthand whenever possible.\n\nYou can set the option in configuration like this:\n\n``` language-json\n{\n    \"object-shorthand\": [\"error\", \"always\"]\n}\n```\n\nAdditionally, the rule takes an optional object configuration:\n\n- `\"avoidQuotes\": true` indicates that long-form syntax is preferred whenever the object key is a string literal (default: `false`). Note that this option can only be enabled when the string option is set to `\"always\"`, `\"methods\"`, or `\"properties\"`.\n- `\"ignoreConstructors\": true` can be used to prevent the rule from reporting errors for constructor functions. (By default, the rule treats constructors the same way as other functions.) Note that this option can only be enabled when the string option is set to `\"always\"` or `\"methods\"`.\n- `\"methodsIgnorePattern\"` (`string`) for methods whose names match this regex pattern, the method shorthand will not be enforced. Note that this option can only be used when the string option is set to `\"always\"` or `\"methods\"`.\n- `\"avoidExplicitReturnArrows\": true` indicates that methods are preferred over explicit-return arrow functions for function properties. (By default, the rule allows either of these.) Note that this option can only be enabled when the string option is set to `\"always\"` or `\"methods\"`.\n\n### avoidQuotes\n\n``` language-json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidQuotes\": true }]\n}\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"avoidQuotes\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJhdm9pZFF1b3Rlc1wiOiB0cnVlIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgZm9vID0ge1xuICAgIFwiYmFyLWJhelwiKCkge31cbn07In0=)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    \"bar-baz\"() {}\n};\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"avoidQuotes\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJhdm9pZFF1b3Rlc1wiOiB0cnVlIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgZm9vID0ge1xuICAgIFwiYmFyLWJhelwiOiBmdW5jdGlvbigpIHt9LFxuICAgIFwicXV4XCI6IHF1eFxufTsifQ==)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    \"bar-baz\": function() {},\n    \"qux\": qux\n};\n```\n\n### ignoreConstructors\n\n``` language-json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"ignoreConstructors\": true }]\n}\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"ignoreConstructors\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJpZ25vcmVDb25zdHJ1Y3RvcnNcIjogdHJ1ZSB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIGZvbyA9IHtcbiAgICBDb25zdHJ1Y3RvckZ1bmN0aW9uOiBmdW5jdGlvbigpIHt9XG59OyJ9)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"ignoreConstructors\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    ConstructorFunction: function() {}\n};\n```\n\n### methodsIgnorePattern\n\nExample of **correct** code for this rule with the `\"always\", { \"methodsIgnorePattern\": \"^bar$\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJtZXRob2RzSWdub3JlUGF0dGVyblwiOiBcIl5iYXIkXCIgfV0qL1xuXG52YXIgZm9vID0ge1xuICAgIGJhcjogZnVuY3Rpb24oKSB7fVxufTsifQ==)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"methodsIgnorePattern\": \"^bar$\" }]*/\n\nvar foo = {\n    bar: function() {}\n};\n```\n\n### avoidExplicitReturnArrows\n\n``` language-json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]\n}\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"avoidExplicitReturnArrows\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJhdm9pZEV4cGxpY2l0UmV0dXJuQXJyb3dzXCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSB7XG4gIGZvbzogKGJhciwgYmF6KSA9PiB7XG4gICAgcmV0dXJuIGJhciArIGJhejtcbiAgfSxcblxuICBxdXg6IChmb29iYXIpID0+IHtcbiAgICByZXR1cm4gZm9vYmFyICogMjtcbiAgfVxufTsifQ==)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n  foo: (bar, baz) => {\n    return bar + baz;\n  },\n\n  qux: (foobar) => {\n    return foobar * 2;\n  }\n};\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"avoidExplicitReturnArrows\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJhdm9pZEV4cGxpY2l0UmV0dXJuQXJyb3dzXCI6IHRydWUgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSB7XG4gIGZvbyhiYXIsIGJheikge1xuICAgIHJldHVybiBiYXIgKyBiYXo7XG4gIH0sXG5cbiAgcXV4OiBmb29iYXIgPT4gZm9vYmFyICogMlxufTsifQ==)\n\n``` language-js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n  foo(bar, baz) {\n    return bar + baz;\n  },\n\n  qux: foobar => foobar * 2\n};\n```\n\nExample of **incorrect** code for this rule with the `\"consistent\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFsyLCBcImNvbnNpc3RlbnRcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSB7XG4gICAgYSxcbiAgICBiOiBcImZvb1wiLFxufTsifQ==)\n\n``` language-js\n/*eslint object-shorthand: [2, \"consistent\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a,\n    b: \"foo\",\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFsyLCBcImNvbnNpc3RlbnRcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBmb28gPSB7XG4gICAgYTogYSxcbiAgICBiOiBcImZvb1wiXG59O1xuXG52YXIgYmFyID0ge1xuICAgIGEsXG4gICAgYixcbn07In0=)\n\n``` language-js\n/*eslint object-shorthand: [2, \"consistent\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a: a,\n    b: \"foo\"\n};\n\nvar bar = {\n    a,\n    b,\n};\n```\n\nExample of **incorrect** code with the `\"consistent-as-needed\"` option, which is very similar to `\"consistent\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9iamVjdC1zaG9ydGhhbmQ6IFsyLCBcImNvbnNpc3RlbnQtYXMtbmVlZGVkXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgZm9vID0ge1xuICAgIGE6IGEsXG4gICAgYjogYixcbn07In0=)\n\n``` language-js\n/*eslint object-shorthand: [2, \"consistent-as-needed\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a: a,\n    b: b,\n};\n```\n\n## When Not To Use It\n\nAnyone not yet in an ES6 environment would not want to apply this rule. Others may find the terseness of the shorthand syntax harder to read and may not want to encourage it with this rule.\n\n## Related Rules\n\n- [no-useless-rename](no-useless-rename)\n\n## Version\n\nThis rule was introduced in ESLint v0.20.0.\n\n## Further Reading\n\n[Object initializer - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/object-shorthand.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/object-shorthand.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/object-shorthand](https://eslint.org/docs/latest/rules/object-shorthand)"
- name: one-var
  id: rules/one-var
  summary: Variables can be declared at any point in JavaScript code using var, let, or const
  description: "# one-var\n\nEnforce variables to be declared either together or separately in functions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](one-var../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n    3.  [consecutive](#consecutive)\n    4.  [var, let, and const](#var-let-and-const)\n    5.  [initialized and uninitialized](#initialized-and-uninitialized)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nVariables can be declared at any point in JavaScript code using `var`, `let`, or `const`. There are many styles and preferences related to the declaration of variables, and one of those is deciding on how many variable declarations should be allowed in a single function.\n\nThere are two schools of thought in this regard:\n\n1.  There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.\n2.  You should use one variable declaration for each variable you want to define.\n\nFor instance:\n\n``` language-js\n// one variable declaration per function\nfunction foo() {\n    var bar, baz;\n}\n\n// multiple variable declarations per function\nfunction foo() {\n    var bar;\n    var baz;\n}\n```\n\nThe single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all `var` statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.\n\n## Rule Details\n\nThis rule enforces variables to be declared either together or separately per function ( for `var`) or block (for `let` and `const`) scope.\n\n## Options\n\nThis rule has one option, which can be a string option or an object option.\n\nString option:\n\n- `\"always\"` (default) requires one variable declaration per scope\n- `\"never\"` requires multiple variable declarations per scope\n- `\"consecutive\"` allows multiple variable declarations per scope but requires consecutive variable declarations to be combined into a single declaration\n\nObject option:\n\n- `\"var\": \"always\"` requires one `var` declaration per function\n- `\"var\": \"never\"` requires multiple `var` declarations per function\n- `\"var\": \"consecutive\"` requires consecutive `var` declarations to be a single declaration\n- `\"let\": \"always\"` requires one `let` declaration per block\n- `\"let\": \"never\"` requires multiple `let` declarations per block\n- `\"let\": \"consecutive\"` requires consecutive `let` declarations to be a single declaration\n- `\"const\": \"always\"` requires one `const` declaration per block\n- `\"const\": \"never\"` requires multiple `const` declarations per block\n- `\"const\": \"consecutive\"` requires consecutive `const` declarations to be a single declaration\n- `\"separateRequires\": true` enforces `requires` to be separate from declarations\n\nAlternate object option:\n\n- `\"initialized\": \"always\"` requires one variable declaration for initialized variables per scope\n- `\"initialized\": \"never\"` requires multiple variable declarations for initialized variables per scope\n- `\"initialized\": \"consecutive\"` requires consecutive variable declarations for initialized variables to be a single declaration\n- `\"uninitialized\": \"always\"` requires one variable declaration for uninitialized variables per scope\n- `\"uninitialized\": \"never\"` requires multiple variable declarations for uninitialized variables per scope\n- `\"uninitialized\": \"consecutive\"` requires consecutive variable declarations for uninitialized variables to be a single declaration\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuZnVuY3Rpb24gZm9vMSgpIHtcbiAgICB2YXIgYmFyO1xuICAgIHZhciBiYXo7XG4gICAgbGV0IHF1eDtcbiAgICBsZXQgbm9yZjtcbn1cblxuZnVuY3Rpb24gZm9vMigpe1xuICAgIGNvbnN0IGJhciA9IGZhbHNlO1xuICAgIGNvbnN0IGJheiA9IHRydWU7XG4gICAgbGV0IHF1eDtcbiAgICBsZXQgbm9yZjtcbn1cblxuZnVuY3Rpb24gZm9vMygpIHtcbiAgICB2YXIgYmFyO1xuXG4gICAgaWYgKGJheikge1xuICAgICAgICB2YXIgcXV4ID0gdHJ1ZTtcbiAgICB9XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIHZhciBmb287XG4gICAgICAgIHZhciBiYXI7XG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGZvbztcbiAgICAgICAgaWYgKGJhcikge1xuICAgICAgICAgICAgdmFyIGJheiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMge1xuICAgICAgICBsZXQgZm9vO1xuICAgICAgICBsZXQgYmFyO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", \"always\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n    let qux;\n    let norf;\n}\n\nfunction foo2(){\n    const bar = false;\n    const baz = true;\n    let qux;\n    let norf;\n}\n\nfunction foo3() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n    }\n\n    static {\n        var foo;\n        if (bar) {\n            var baz = true;\n        }\n    }\n\n    static {\n        let foo;\n        let bar;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuZnVuY3Rpb24gZm9vMSgpIHtcbiAgICB2YXIgYmFyLFxuICAgICAgICBiYXo7XG4gICAgbGV0IHF1eCxcbiAgICAgICAgbm9yZjtcbn1cblxuZnVuY3Rpb24gZm9vMigpe1xuICAgIGNvbnN0IGJhciA9IHRydWUsXG4gICAgICAgIGJheiA9IGZhbHNlO1xuICAgIGxldCBxdXgsXG4gICAgICAgIG5vcmY7XG59XG5cbmZ1bmN0aW9uIGZvbzMoKSB7XG4gICAgdmFyIGJhcixcbiAgICAgICAgcXV4O1xuXG4gICAgaWYgKGJheikge1xuICAgICAgICBxdXggPSB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9vNCgpe1xuICAgIGxldCBiYXI7XG5cbiAgICBpZiAoYmF6KSB7XG4gICAgICAgIGxldCBxdXg7XG4gICAgfVxufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICB2YXIgZm9vLCBiYXI7XG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGZvbywgYmF6O1xuICAgICAgICBpZiAoYmFyKSB7XG4gICAgICAgICAgICBiYXogPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgbGV0IGZvbywgYmFyO1xuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIGxldCBmb287XG4gICAgICAgIGlmIChiYXIpIHtcbiAgICAgICAgICAgIGxldCBiYXo7XG4gICAgICAgIH1cbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", \"always\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    let qux,\n        norf;\n}\n\nfunction foo2(){\n    const bar = true,\n        baz = false;\n    let qux,\n        norf;\n}\n\nfunction foo3() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo4(){\n    let bar;\n\n    if (baz) {\n        let qux;\n    }\n}\n\nclass C {\n    static {\n        var foo, bar;\n    }\n\n    static {\n        var foo, baz;\n        if (bar) {\n            baz = true;\n        }\n    }\n\n    static {\n        let foo, bar;\n    }\n\n    static {\n        let foo;\n        if (bar) {\n            let baz;\n        }\n    }\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBiYXIsXG4gICAgICAgIGJhejtcbiAgICBjb25zdCBxdXggPSB0cnVlLFxuICAgICAgICBmb29iYXIgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICB2YXIgYmFyLFxuICAgICAgICBxdXg7XG5cbiAgICBpZiAoYmF6KSB7XG4gICAgICAgIHF1eCA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb28zKCl7XG4gICAgbGV0IGJhciA9IHRydWUsXG4gICAgICAgIGJheiA9IGZhbHNlO1xufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICB2YXIgZm9vLCBiYXI7XG4gICAgICAgIGxldCBiYXosIHF1eDtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", \"never\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    const qux = true,\n        foobar = false;\n}\n\nfunction foo2() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo3(){\n    let bar = true,\n        baz = false;\n}\n\nclass C {\n    static {\n        var foo, bar;\n        let baz, qux;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBiYXI7XG4gICAgdmFyIGJhejtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICB2YXIgYmFyO1xuXG4gICAgaWYgKGJheikge1xuICAgICAgICB2YXIgcXV4ID0gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvbzMoKSB7XG4gICAgbGV0IGJhcjtcblxuICAgIGlmIChiYXopIHtcbiAgICAgICAgbGV0IHF1eCA9IHRydWU7XG4gICAgfVxufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICB2YXIgZm9vO1xuICAgICAgICB2YXIgYmFyO1xuICAgICAgICBsZXQgYmF6O1xuICAgICAgICBsZXQgcXV4O1xuICAgIH1cbn1cblxuLy8gZGVjbGFyYXRpb25zIHdpdGggbXVsdGlwbGUgdmFyaWFibGVzIGFyZSBhbGxvd2VkIGluIGZvci1sb29wIGluaXRpYWxpemVyc1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGRvU29tZXRoaW5nKGFycltpXSk7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", \"never\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n}\n\nfunction foo2() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n\nfunction foo3() {\n    let bar;\n\n    if (baz) {\n        let qux = true;\n    }\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n        let baz;\n        let qux;\n    }\n}\n\n// declarations with multiple variables are allowed in for-loop initializers\nfor (var i = 0, len = arr.length; i < len; i++) {\n    doSomething(arr[i]);\n}\n```\n\n### consecutive\n\nExamples of **incorrect** code for this rule with the `\"consecutive\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwiY29uc2VjdXRpdmVcIl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBiYXI7XG4gICAgdmFyIGJhejtcbn1cblxuZnVuY3Rpb24gZm9vMigpe1xuICAgIHZhciBiYXIgPSAxO1xuICAgIHZhciBiYXogPSAyO1xuXG4gICAgcXV4KCk7XG5cbiAgICB2YXIgcXV4ID0gMztcbiAgICB2YXIgcXV1eDtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGZvbztcbiAgICAgICAgdmFyIGJhcjtcbiAgICAgICAgbGV0IGJhejtcbiAgICAgICAgbGV0IHF1eDtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n}\n\nfunction foo2(){\n    var bar = 1;\n    var baz = 2;\n\n    qux();\n\n    var qux = 3;\n    var quux;\n}\n\nclass C {\n    static {\n        var foo;\n        var bar;\n        let baz;\n        let qux;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"consecutive\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIFwiY29uc2VjdXRpdmVcIl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBiYXIsXG4gICAgICAgIGJhejtcbn1cblxuZnVuY3Rpb24gZm9vMigpe1xuICAgIHZhciBiYXIgPSAxLFxuICAgICAgICBiYXogPSAyO1xuXG4gICAgcXV4KCk7XG5cbiAgICB2YXIgcXV4ID0gMyxcbiAgICAgICAgcXV1eDtcbn1cblxuY2xhc3MgQyB7XG4gICAgc3RhdGljIHtcbiAgICAgICAgdmFyIGZvbywgYmFyO1xuICAgICAgICBsZXQgYmF6LCBxdXg7XG4gICAgICAgIGRvU29tZXRoaW5nKCk7XG4gICAgICAgIGxldCBxdXV4O1xuICAgICAgICB2YXIgcXV1dXg7XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n\nfunction foo1() {\n    var bar,\n        baz;\n}\n\nfunction foo2(){\n    var bar = 1,\n        baz = 2;\n\n    qux();\n\n    var qux = 3,\n        quux;\n}\n\nclass C {\n    static {\n        var foo, bar;\n        let baz, qux;\n        doSomething();\n        let quux;\n        var quuux;\n    }\n}\n```\n\n### var, let, and const\n\nExamples of **incorrect** code for this rule with the `{ var: \"always\", let: \"never\", const: \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcImFsd2F5c1wiLCBsZXQ6IFwibmV2ZXJcIiwgY29uc3Q6IFwibmV2ZXJcIiB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vMSgpIHtcbiAgICB2YXIgYmFyO1xuICAgIHZhciBiYXo7XG4gICAgbGV0IHF1eCxcbiAgICAgICAgbm9yZjtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBjb25zdCBiYXIgPSAxLFxuICAgICAgICAgIGJheiA9IDI7XG4gICAgbGV0IHF1eCxcbiAgICAgICAgbm9yZjtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo1() {\n    var bar;\n    var baz;\n    let qux,\n        norf;\n}\n\nfunction foo2() {\n    const bar = 1,\n          baz = 2;\n    let qux,\n        norf;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"always\", let: \"never\", const: \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcImFsd2F5c1wiLCBsZXQ6IFwibmV2ZXJcIiwgY29uc3Q6IFwibmV2ZXJcIiB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vMSgpIHtcbiAgICB2YXIgYmFyLFxuICAgICAgICBiYXo7XG4gICAgbGV0IHF1eDtcbiAgICBsZXQgbm9yZjtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBjb25zdCBiYXIgPSAxO1xuICAgIGNvbnN0IGJheiA9IDI7XG4gICAgbGV0IHF1eDtcbiAgICBsZXQgbm9yZjtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo1() {\n    var bar,\n        baz;\n    let qux;\n    let norf;\n}\n\nfunction foo2() {\n    const bar = 1;\n    const baz = 2;\n    let qux;\n    let norf;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYmFyLFxuICAgICAgICBiYXo7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYmFyO1xuICAgIHZhciBiYXo7XG5cbiAgICAvLyBgY29uc3RgIGFuZCBgbGV0YCBkZWNsYXJhdGlvbnMgYXJlIGlnbm9yZWQgaWYgdGhleSBhcmUgbm90IHNwZWNpZmllZFxuICAgIGNvbnN0IGZvb2JhciA9IDE7XG4gICAgY29uc3QgZm9vYmF6ID0gMjtcbiAgICBjb25zdCBiYXJmb28gPSAxLCBiYXpmb28gPSAyO1xuICAgIGxldCBxdXg7XG4gICAgbGV0IG5vcmY7XG4gICAgbGV0IGZvb3F1eCwgZm9vbm9yZjtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    var baz;\n\n    // `const` and `let` declarations are ignored if they are not specified\n    const foobar = 1;\n    const foobaz = 2;\n    const barfoo = 1, bazfoo = 2;\n    let qux;\n    let norf;\n    let fooqux, foonorf;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ separateRequires: true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgc2VwYXJhdGVSZXF1aXJlczogdHJ1ZSwgdmFyOiBcImFsd2F5c1wiIH1dKi9cbi8qZXNsaW50LWVudiBub2RlKi9cblxudmFyIGZvbyA9IHJlcXVpcmUoXCJmb29cIiksXG4gICAgYmFyID0gXCJiYXJcIjsifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n/*eslint-env node*/\n\nvar foo = require(\"foo\"),\n    bar = \"bar\";\n```\n\nExamples of **correct** code for this rule with the `{ separateRequires: true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgc2VwYXJhdGVSZXF1aXJlczogdHJ1ZSwgdmFyOiBcImFsd2F5c1wiIH1dKi9cbi8qZXNsaW50LWVudiBub2RlKi9cblxudmFyIGZvbyA9IHJlcXVpcmUoXCJmb29cIik7XG52YXIgYmFyID0gXCJiYXJcIjsifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n/*eslint-env node*/\n\nvar foo = require(\"foo\");\nvar bar = \"bar\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgc2VwYXJhdGVSZXF1aXJlczogdHJ1ZSwgdmFyOiBcImFsd2F5c1wiIH1dKi9cbi8qZXNsaW50LWVudiBub2RlKi9cblxudmFyIGZvbyA9IHJlcXVpcmUoXCJmb29cIiksXG4gICAgYmFyID0gcmVxdWlyZShcImJhclwiKTsifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n/*eslint-env node*/\n\nvar foo = require(\"foo\"),\n    bar = require(\"bar\");\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"never\", let: \"consecutive\", const: \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcIm5ldmVyXCIsIGxldDogXCJjb25zZWN1dGl2ZVwiLCBjb25zdDogXCJjb25zZWN1dGl2ZVwiIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIGxldCBhLFxuICAgICAgICBiO1xuICAgIGxldCBjO1xuXG4gICAgdmFyIGQsXG4gICAgICAgIGU7XG59XG5cbmZ1bmN0aW9uIGZvbzIoKSB7XG4gICAgY29uc3QgYSA9IDEsXG4gICAgICAgIGIgPSAyO1xuICAgIGNvbnN0IGMgPSAzO1xuXG4gICAgdmFyIGQsXG4gICAgICAgIGU7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo1() {\n    let a,\n        b;\n    let c;\n\n    var d,\n        e;\n}\n\nfunction foo2() {\n    const a = 1,\n        b = 2;\n    const c = 3;\n\n    var d,\n        e;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"never\", let: \"consecutive\", const: \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcIm5ldmVyXCIsIGxldDogXCJjb25zZWN1dGl2ZVwiLCBjb25zdDogXCJjb25zZWN1dGl2ZVwiIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIGxldCBhLFxuICAgICAgICBiO1xuXG4gICAgdmFyIGQ7XG4gICAgdmFyIGU7XG5cbiAgICBsZXQgZjtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBjb25zdCBhID0gMSxcbiAgICAgICAgICBiID0gMjtcblxuICAgIHZhciBjO1xuICAgIHZhciBkO1xuXG4gICAgY29uc3QgZSA9IDM7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo1() {\n    let a,\n        b;\n\n    var d;\n    var e;\n\n    let f;\n}\n\nfunction foo2() {\n    const a = 1,\n          b = 2;\n\n    var c;\n    var d;\n\n    const e = 3;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcImNvbnNlY3V0aXZlXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a;\n    var b;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgdmFyOiBcImNvbnNlY3V0aXZlXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYSxcbiAgICAgICAgYjtcbiAgICBjb25zdCBjID0gMTsgLy8gYGNvbnN0YCBhbmQgYGxldGAgZGVjbGFyYXRpb25zIGFyZSBpZ25vcmVkIGlmIHRoZXkgYXJlIG5vdCBzcGVjaWZpZWRcbiAgICBjb25zdCBkID0gMjtcbiAgICBsZXQgZTtcbiAgICBsZXQgZjtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a,\n        b;\n    const c = 1; // `const` and `let` declarations are ignored if they are not specified\n    const d = 2;\n    let e;\n    let f;\n}\n```\n\n### initialized and uninitialized\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"always\", \"uninitialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImFsd2F5c1wiLCBcInVuaW5pdGlhbGl6ZWRcIjogXCJuZXZlclwiIH1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGEsIGIsIGM7XG4gICAgdmFyIGZvbyA9IHRydWU7XG4gICAgdmFyIGJhciA9IGZhbHNlO1xufSJ9)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a, b, c;\n    var foo = true;\n    var bar = false;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"always\", \"uninitialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImFsd2F5c1wiLCBcInVuaW5pdGlhbGl6ZWRcIjogXCJuZXZlclwiIH1dKi9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIHZhciBjO1xuICAgIHZhciBmb28gPSB0cnVlLFxuICAgICAgICBiYXIgPSBmYWxzZTtcbn1cblxuZm9yIChsZXQgeiBvZiBmb28pIHtcbiAgICBkb1NvbWV0aGluZyh6KTtcbn1cblxubGV0IHo7XG5mb3IgKHogb2YgZm9vKSB7XG4gICAgZG9Tb21ldGhpbmcoeik7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a;\n    var b;\n    var c;\n    var foo = true,\n        bar = false;\n}\n\nfor (let z of foo) {\n    doSomething(z);\n}\n\nlet z;\nfor (z of foo) {\n    doSomething(z);\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgZm9vID0gdHJ1ZSxcbiAgICAgICAgYmFyID0gZmFsc2U7XG59In0=)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var foo = true,\n        bar = false;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcIm5ldmVyXCIgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGZvbyA9IHRydWU7XG4gICAgdmFyIGJhciA9IGZhbHNlO1xuICAgIHZhciBhLCBiLCBjOyAvLyBVbmluaXRpYWxpemVkIHZhcmlhYmxlcyBhcmUgaWdub3JlZFxufSJ9)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n\nfunction foo() {\n    var foo = true;\n    var bar = false;\n    var a, b, c; // Uninitialized variables are ignored\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImNvbnNlY3V0aXZlXCIsIFwidW5pbml0aWFsaXplZFwiOiBcIm5ldmVyXCIgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGEgPSAxO1xuICAgIHZhciBiID0gMjtcbiAgICB2YXIgYyxcbiAgICAgICAgZDtcbiAgICB2YXIgZSA9IDM7XG4gICAgdmFyIGYgPSA0O1xufSJ9)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n    var c,\n        d;\n    var e = 3;\n    var f = 4;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImNvbnNlY3V0aXZlXCIsIFwidW5pbml0aWFsaXplZFwiOiBcIm5ldmVyXCIgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGEgPSAxLFxuICAgICAgICBiID0gMjtcbiAgICB2YXIgYztcbiAgICB2YXIgZDtcbiAgICB2YXIgZSA9IDMsXG4gICAgICAgIGYgPSA0O1xufSJ9)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n    var c;\n    var d;\n    var e = 3,\n        f = 4;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImNvbnNlY3V0aXZlXCIgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGEgPSAxO1xuICAgIHZhciBiID0gMjtcblxuICAgIGZvbygpO1xuXG4gICAgdmFyIGMgPSAzO1xuICAgIHZhciBkID0gNDtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n\n    foo();\n\n    var c = 3;\n    var d = 4;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"consecutive\" }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9uZS12YXI6IFtcImVycm9yXCIsIHsgXCJpbml0aWFsaXplZFwiOiBcImNvbnNlY3V0aXZlXCIgfV0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgdmFyIGEgPSAxLFxuICAgICAgICBiID0gMjtcblxuICAgIGZvbygpO1xuXG4gICAgdmFyIGMgPSAzLFxuICAgICAgICBkID0gNDtcbn0ifQ==)\n\n``` language-js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n\n    foo();\n\n    var c = 3,\n        d = 4;\n}\n```\n\n## Compatibility\n\n- **JSHint**: This rule maps to the `onevar` JSHint rule, but allows `let` and `const` to be configured separately.\n- **JSCS**: This rule roughly maps to [disallowMultipleVarDecl](https://jscs-dev.github.io/rule/disallowMultipleVarDecl).\n- **JSCS**: This rule option `separateRequires` roughly maps to [requireMultipleVarDecl](https://jscs-dev.github.io/rule/requireMultipleVarDecl).\n\n## Version\n\nThis rule was introduced in ESLint v0.0.9.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/one-var.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/one-var.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/one-var](https://eslint.org/docs/latest/rules/one-var)"
- name: operator-assignment
  id: rules/operator-assignment
  summary: JavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations
  description: "# operator-assignment\n\nRequire or disallow assignment operator shorthand where possible\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](operator-assignment../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nJavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, `x = x + 4` can be shortened to `x += 4`. The supported shorthand forms are as follows:\n\n``` language-text\n Shorthand | Separate\n-----------|------------\n x += y    | x = x + y\n x -= y    | x = x - y\n x *= y    | x = x * y\n x /= y    | x = x / y\n x %= y    | x = x % y\n x **= y   | x = x ** y\n x <<= y   | x = x << y\n x >>= y   | x = x >> y\n x >>>= y  | x = x >>> y\n x &= y    | x = x & y\n x ^= y    | x = x ^ y\n x |= y    | x = x | y\n```\n\n## Rule Details\n\nThis rule requires or disallows assignment operator shorthand where possible.\n\nThe rule applies to the operators listed in the above table. It does not report the logical assignment operators `&&=`, `||=`, and `??=` because their short-circuiting behavior is different from the other assignment operators.\n\n## Options\n\nThis rule has a single string option:\n\n- `\"always\"` (default) requires assignment operator shorthand where possible\n- `\"never\"` disallows assignment operator shorthand\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWFzc2lnbm1lbnQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxueCA9IHggKyB5O1xueCA9IHkgKiB4O1xueFswXSA9IHhbMF0gLyB5O1xueC55ID0geC55IDw8IHo7In0=)\n\n``` language-js\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = x + y;\nx = y * x;\nx[0] = x[0] / y;\nx.y = x.y << z;\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWFzc2lnbm1lbnQ6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxueCA9IHk7XG54ICs9IHk7XG54ID0geSAqIHo7XG54ID0gKHggKiB5KSAqIHo7XG54WzBdIC89IHk7XG54W2ZvbygpXSA9IHhbZm9vKCldICUgMjtcbnggPSB5ICsgeDsgLy8gYCtgIGlzIG5vdCBhbHdheXMgY29tbXV0YXRpdmUgKGUuZy4geCA9IFwiYWJjXCIpIn0=)\n\n``` language-js\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = y;\nx += y;\nx = y * z;\nx = (x * y) * z;\nx[0] /= y;\nx[foo()] = x[foo()] % 2;\nx = y + x; // `+` is not always commutative (e.g. x = \"abc\")\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWFzc2lnbm1lbnQ6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG54ICo9IHk7XG54IF49ICh5ICsgeikgLyBmb28oKTsifQ==)\n\n``` language-js\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx *= y;\nx ^= (y + z) / foo();\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWFzc2lnbm1lbnQ6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG54ID0geCArIHk7XG54LnkgPSB4LnkgLyBhLmI7In0=)\n\n``` language-js\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx = x + y;\nx.y = x.y / a.b;\n```\n\n## When Not To Use It\n\nUse of operator assignment shorthand is a stylistic choice. Leaving this rule turned off would allow developers to choose which style is more readable on a case-by-case basis.\n\n## Version\n\nThis rule was introduced in ESLint v0.10.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/operator-assignment.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/operator-assignment.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/operator-assignment](https://eslint.org/docs/latest/rules/operator-assignment)"
- name: operator-linebreak
  id: rules/operator-linebreak
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# operator-linebreak\n\nEnforce consistent linebreak style for operators\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](operator-linebreak../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [after](#after)\n    2.  [before](#before)\n    3.  [none](#none)\n    4.  [overrides](#overrides)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/operator-linebreak) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhen a statement is too long to fit on a single line, line breaks are generally inserted next to the operators separating expressions. The first style coming to mind would be to place the operator at the end of the line, following the English punctuation rules.\n\n``` language-js\nvar fullHeight = borderTop +\n                 innerHeight +\n                 borderBottom;\n```\n\nSome developers find that placing operators at the beginning of the line makes the code more readable.\n\n``` language-js\nvar fullHeight = borderTop\n               + innerHeight\n               + borderBottom;\n```\n\n## Rule Details\n\nThis rule enforces a consistent linebreak style for operators.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"after\"` requires linebreaks to be placed after the operator\n- `\"before\"` requires linebreaks to be placed before the operator\n- `\"none\"` disallows linebreaks on either side of the operator\n\nObject option:\n\n- `\"overrides\"` overrides the global setting for specified operators\n\nThe default configuration is `\"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }`\n\n### after\n\nExamples of **incorrect** code for this rule with the `\"after\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiXSovXG5cbmZvbyA9IDFcbitcbjI7XG5cbmZvbyA9IDFcbiAgICArIDI7XG5cbmZvb1xuICAgID0gNTtcblxuaWYgKHNvbWVDb25kaXRpb25cbiAgICB8fCBvdGhlckNvbmRpdGlvbikge1xufVxuXG5hbnN3ZXIgPSBldmVyeXRoaW5nXG4gID8gNDJcbiAgOiBmb287XG5cbmNsYXNzIEZvbyB7XG4gICAgYVxuICAgICAgICA9IDE7XG4gICAgW2JdXG4gICAgICAgID0gMjtcbiAgICBbY1xuICAgIF1cbiAgICAgICAgPSAzO1xufSJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\"]*/\n\nfoo = 1\n+\n2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nclass Foo {\n    a\n        = 1;\n    [b]\n        = 2;\n    [c\n    ]\n        = 3;\n}\n```\n\nExamples of **correct** code for this rule with the `\"after\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiXSovXG5cbmZvbyA9IDEgKyAyO1xuXG5mb28gPSAxICtcbiAgICAgIDI7XG5cbmZvbyA9XG4gICAgNTtcblxuaWYgKHNvbWVDb25kaXRpb24gfHxcbiAgICBvdGhlckNvbmRpdGlvbikge1xufVxuXG5hbnN3ZXIgPSBldmVyeXRoaW5nID9cbiAgNDIgOlxuICBmb287XG5cbmNsYXNzIEZvbyB7XG4gICAgYSA9XG4gICAgICAgIDE7XG4gICAgW2JdID1cbiAgICAgICAgMjtcbiAgICBbY1xuICAgIF0gPVxuICAgICAgICAzO1xuICAgIGQgPSA0O1xufSJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1 +\n      2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n\nclass Foo {\n    a =\n        1;\n    [b] =\n        2;\n    [c\n    ] =\n        3;\n    d = 4;\n}\n```\n\n### before\n\nExamples of **incorrect** code for this rule with the `\"before\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJiZWZvcmVcIl0qL1xuXG5mb28gPSAxICtcbiAgICAgIDI7XG5cbmZvbyA9XG4gICAgNTtcblxuaWYgKHNvbWVDb25kaXRpb24gfHxcbiAgICBvdGhlckNvbmRpdGlvbikge1xufVxuXG5hbnN3ZXIgPSBldmVyeXRoaW5nID9cbiAgNDIgOlxuICBmb287XG5cbmNsYXNzIEZvbyB7XG4gICAgYSA9XG4gICAgICAgIDE7XG4gICAgW2JdID1cbiAgICAgICAgMjtcbiAgICBbY1xuICAgIF0gPVxuICAgICAgICAzO1xufSJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 +\n      2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n\nclass Foo {\n    a =\n        1;\n    [b] =\n        2;\n    [c\n    ] =\n        3;\n}\n```\n\nExamples of **correct** code for this rule with the `\"before\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJiZWZvcmVcIl0qL1xuXG5mb28gPSAxICsgMjtcblxuZm9vID0gMVxuICAgICsgMjtcblxuZm9vXG4gICAgPSA1O1xuXG5pZiAoc29tZUNvbmRpdGlvblxuICAgIHx8IG90aGVyQ29uZGl0aW9uKSB7XG59XG5cbmFuc3dlciA9IGV2ZXJ5dGhpbmdcbiAgPyA0MlxuICA6IGZvbztcblxuY2xhc3MgRm9vIHtcbiAgICBhXG4gICAgICAgID0gMTtcbiAgICBbYl1cbiAgICAgICAgPSAyO1xuICAgIFtjXG4gICAgXVxuICAgICAgICA9IDM7XG4gICAgZCA9IDQ7XG59In0=)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nclass Foo {\n    a\n        = 1;\n    [b]\n        = 2;\n    [c\n    ]\n        = 3;\n    d = 4;\n}\n```\n\n### none\n\nExamples of **incorrect** code for this rule with the `\"none\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJub25lXCJdKi9cblxuZm9vID0gMSArXG4gICAgICAyO1xuXG5mb28gPSAxXG4gICAgKyAyO1xuXG5pZiAoc29tZUNvbmRpdGlvbiB8fFxuICAgIG90aGVyQ29uZGl0aW9uKSB7XG59XG5cbmlmIChzb21lQ29uZGl0aW9uXG4gICAgfHwgb3RoZXJDb25kaXRpb24pIHtcbn1cblxuYW5zd2VyID0gZXZlcnl0aGluZ1xuICA/IDQyXG4gIDogZm9vO1xuXG5hbnN3ZXIgPSBldmVyeXRoaW5nID9cbiAgNDIgOlxuICBmb287XG5cbmNsYXNzIEZvbyB7XG4gICAgYSA9XG4gICAgICAgIDE7XG4gICAgW2JdID1cbiAgICAgICAgMjtcbiAgICBbY1xuICAgIF0gPVxuICAgICAgICAzO1xuICAgIGRcbiAgICAgICAgPSA0O1xuICAgIFtlXVxuICAgICAgICA9IDU7XG4gICAgW2ZcbiAgICBdXG4gICAgICAgID0gNjtcbn0ifQ==)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"none\"]*/\n\nfoo = 1 +\n      2;\n\nfoo = 1\n    + 2;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nanswer = everything ?\n  42 :\n  foo;\n\nclass Foo {\n    a =\n        1;\n    [b] =\n        2;\n    [c\n    ] =\n        3;\n    d\n        = 4;\n    [e]\n        = 5;\n    [f\n    ]\n        = 6;\n}\n```\n\nExamples of **correct** code for this rule with the `\"none\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJub25lXCJdKi9cblxuZm9vID0gMSArIDI7XG5cbmZvbyA9IDU7XG5cbmlmIChzb21lQ29uZGl0aW9uIHx8IG90aGVyQ29uZGl0aW9uKSB7XG59XG5cbmFuc3dlciA9IGV2ZXJ5dGhpbmcgPyA0MiA6IGZvbztcblxuY2xhc3MgRm9vIHtcbiAgICBhID0gMTtcbiAgICBbYl0gPSAyO1xuICAgIFtjXG4gICAgXSA9IDM7XG4gICAgZCA9IDQ7XG4gICAgW2VdID0gNTtcbiAgICBbZlxuICAgIF0gPSA2O1xufSJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"none\"]*/\n\nfoo = 1 + 2;\n\nfoo = 5;\n\nif (someCondition || otherCondition) {\n}\n\nanswer = everything ? 42 : foo;\n\nclass Foo {\n    a = 1;\n    [b] = 2;\n    [c\n    ] = 3;\n    d = 4;\n    [e] = 5;\n    [f\n    ] = 6;\n}\n```\n\n### overrides\n\nExamples of additional **incorrect** code for this rule with the `{ \"overrides\": { \"+=\": \"before\" } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiLCB7IFwib3ZlcnJpZGVzXCI6IHsgXCIrPVwiOiBcImJlZm9yZVwiIH0gfV0qL1xuXG52YXIgdGhpbmcgPSAndGhpbmcnO1xudGhpbmcgKz1cbiAgJ3MnOyJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"+=\": \"before\" } }]*/\n\nvar thing = 'thing';\nthing +=\n  's';\n```\n\nExamples of additional **correct** code for this rule with the `{ \"overrides\": { \"+=\": \"before\" } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiLCB7IFwib3ZlcnJpZGVzXCI6IHsgXCIrPVwiOiBcImJlZm9yZVwiIH0gfV0qL1xuXG52YXIgdGhpbmcgPSAndGhpbmcnO1xudGhpbmdcbiAgKz0gJ3MnOyJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"+=\": \"before\" } }]*/\n\nvar thing = 'thing';\nthing\n  += 's';\n```\n\nExamples of additional **correct** code for this rule with the `{ \"overrides\": { \"?\": \"ignore\", \":\": \"ignore\" } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiLCB7IFwib3ZlcnJpZGVzXCI6IHsgXCI/XCI6IFwiaWdub3JlXCIsIFwiOlwiOiBcImlnbm9yZVwiIH0gfV0qL1xuXG5hbnN3ZXIgPSBldmVyeXRoaW5nID9cbiAgNDJcbiAgOiBmb287XG5cbmFuc3dlciA9IGV2ZXJ5dGhpbmdcbiAgP1xuICA0MlxuICA6XG4gIGZvbzsifQ==)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"?\": \"ignore\", \":\": \"ignore\" } }]*/\n\nanswer = everything ?\n  42\n  : foo;\n\nanswer = everything\n  ?\n  42\n  :\n  foo;\n```\n\nExamples of **incorrect** code for this rule with the default `\"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiLCB7IFwib3ZlcnJpZGVzXCI6IHsgXCI/XCI6IFwiYmVmb3JlXCIsIFwiOlwiOiBcImJlZm9yZVwiIH0gfV0qL1xuXG5mb28gPSAxXG4rXG4yO1xuXG5mb28gPSAxXG4gICAgKyAyO1xuXG5mb29cbiAgICA9IDU7XG5cbmlmIChzb21lQ29uZGl0aW9uXG4gICAgfHwgb3RoZXJDb25kaXRpb24pIHtcbn1cblxuYW5zd2VyID0gZXZlcnl0aGluZyA/XG4gIDQyIDpcbiAgZm9vOyJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }]*/\n\nfoo = 1\n+\n2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n```\n\nExamples of **correct** code for this rule with the default `\"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogW1wiZXJyb3JcIiwgXCJhZnRlclwiLCB7IFwib3ZlcnJpZGVzXCI6IHsgXCI/XCI6IFwiYmVmb3JlXCIsIFwiOlwiOiBcImJlZm9yZVwiIH0gfV0qL1xuXG5mb28gPSAxICsgMjtcblxuZm9vID0gMSArXG4gICAgICAyO1xuXG5mb28gPVxuICAgIDU7XG5cbmlmIChzb21lQ29uZGl0aW9uIHx8XG4gICAgb3RoZXJDb25kaXRpb24pIHtcbn1cblxuYW5zd2VyID0gZXZlcnl0aGluZ1xuICA/IDQyXG4gIDogZm9vOyJ9)\n\n``` language-js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }]*/\n\nfoo = 1 + 2;\n\nfoo = 1 +\n      2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n```\n\n## When Not To Use It\n\nIf your project will not be using a common operator line break style, turn this rule off.\n\n## Related Rules\n\n- [comma-style](comma-style)\n\n## Version\n\nThis rule was introduced in ESLint v0.19.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/operator-linebreak.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/operator-linebreak.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/operator-linebreak](https://eslint.org/docs/latest/rules/operator-linebreak)"
- name: Package.json Conventions
  id: contribute/package-json-conventions
  summary: The following applies to the “scripts” section of package.json files
  description: "# Package.json Conventions\n\n## Table of Contents\n\n1.  [Names](#names)\n2.  [Order](#order)\n3.  [Main Script Names](#main-script-names)\n    1.  [Build](#build)\n    2.  [Fetch](#fetch)\n    3.  [Release](#release)\n    4.  [Lint](#lint)\n    5.  [Start](#start)\n    6.  [Test](#test)\n4.  [Modifiers](#modifiers)\n    1.  [Fix](#fix)\n    2.  [Target](#target)\n    3.  [Options](#options)\n    4.  [Watch](#watch)\n\nThe following applies to the “scripts” section of `package.json` files.\n\n## Names\n\nnpm script names MUST contain only lower case letters, `:` to separate parts, `-` to separate words, and `+` to separate file extensions. Each part name SHOULD be either a full English word (e.g. `coverage` not `cov`) or a well-known initialism in all lowercase (e.g. `wasm`).\n\nHere is a summary of the proposal in ABNF.\n\n``` language-abnf\nname         = life-cycle / main target? option* \":watch\"?\nlife-cycle   = \"prepare\" / \"preinstall\" / \"install\" / \"postinstall\" / \"prepublish\" / \"preprepare\" / \"prepare\" / \"postprepare\" / \"prepack\" / \"postpack\" / \"prepublishOnly\"\nmain         = \"build\" / \"lint\" \":fix\"? / \"release\" / \"start\" / \"test\" / \"fetch\"\ntarget       = \":\" word (\"-\" word)* / extension (\"+\" extension)*\noption       = \":\" word (\"-\" word)*\nword         = ALPHA +\nextension    = ( ALPHA / DIGIT )+\n```\n\n## Order\n\nThe script names MUST appear in the package.json file in alphabetical order. The other conventions outlined in this document ensure that alphabetical order will coincide with logical groupings.\n\n## Main Script Names\n\nWith the exception of [npm life cycle scripts](https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts) all script names MUST begin with one of the following names.\n\n### Build\n\nScripts that generate a set of files from source code and / or data MUST have names that begin with `build`.\n\nIf a package contains any `build:*` scripts, there MAY be a script named `build`. If so, SHOULD produce the same output as running each of the `build` scripts individually. It MUST produce a subset of the output from running those scripts.\n\n### Fetch\n\nScripts that generate a set of files from external data or resources MUST have names that begin with `fetch`.\n\nIf a package contains any `fetch:*` scripts, there MAY be a script named `fetch`. If so, it SHOULD produce the same output as running each of the `fetch` scripts individually. It MUST produce a subset of the output from running those scripts.\n\n### Release\n\nScripts that have public side effects (publishing the web site, committing to Git, etc.) MUST begin with `release`.\n\n### Lint\n\nScripts that statically analyze files (mostly, but not limited to running `eslint` itself) MUST have names that begin with `lint`.\n\nIf a package contains any `lint:*` scripts, there SHOULD be a script named `lint` and it MUST run all of the checks that would have been run if each `lint:*` script was called individually.\n\nIf fixing is available, a linter MUST NOT apply fixes UNLESS the script contains the `:fix` modifier (see below).\n\n### Start\n\nA `start` script is used to start a server. As of this writing, no ESLint package has more than one `start` script, so there’s no need `start` to have any modifiers.\n\n### Test\n\nScripts that execute code in order to ensure the actual behavior matches expected behavior MUST have names that begin with `test`.\n\nIf a package contains any `test:*` scripts, there SHOULD be a script named `test` and it MUST run of all of the tests that would have been run if each `test:*` script was called individually.\n\nA test script SHOULD NOT include linting.\n\nA test script SHOULD report test coverage when possible.\n\n## Modifiers\n\nOne or more of the following modifiers MAY be appended to the standard script names above. If a target has modifiers, they MUST be in the order in which they appear below (e.g. `lint:fix:js:watch` not `lint:watch:js:fix`)\n\n### Fix\n\nIf it’s possible for a linter to fix problems that it finds, add a copy of the script with `:fix` appended to the end that also fixes.\n\n### Target\n\nThe name of the target of the action being run. In the case of a `build` script, it SHOULD identify the build artifact(s), e.g. “javascript” or “css” or “website”. In the case of a `lint` or `test` script, it SHOULD identify the item(s) being linted or tested. In the case of a `start` script, it SHOULD identify which server is starting.\n\nA target MAY refer to a list of affected file extensions (such as `cjs` or `less`) delimited by a `+`. If there is more than one extension, the list SHOULD be alphabetized. When a file extension has variants (such as `cjs` for CommonJS and `mjs` for ESM), the common part of the extension MAY be used instead of explicitly listing out all of the variants (e.g. `js` instead of `cjs+jsx+mjs`).\n\nThe target SHOULD NOT refer to name of the name of the tool that’s performing the action (`eleventy`, `webpack`, etc.)\n\n### Options\n\nAdditional options that don’t fit under the other modifiers.\n\n### Watch\n\nIf a script watches the filesystem and responds to changes, add `:watch` to the script name.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/package-json-conventions](https://eslint.org/docs/latest/contribute/package-json-conventions)"
- name: padding-line-between-statements
  id: rules/padding-line-between-statements
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# padding-line-between-statements\n\nRequire or disallow padding lines between statements\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](padding-line-between-statements../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/padding-line-between-statements) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nThis rule requires or disallows blank lines between the given 2 kinds of statements. Properly blank lines help developers to understand the code.\n\nFor example, the following configuration requires a blank line between a variable declaration and a `return` statement.\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"var\", next: \"return\" }\n]*/\n\nfunction foo() {\n    var a = 1;\n\n    return a;\n}\n```\n\n## Rule Details\n\nThis rule does nothing if no configurations are provided.\n\nA configuration is an object which has 3 properties; `blankLine`, `prev` and `next`. For example, `{ blankLine: \"always\", prev: \"var\", next: \"return\" }` means “one or more blank lines are required between a variable declaration and a `return` statement.” You can supply any number of configurations. If a statement pair matches multiple configurations, the last matched configuration will be used.\n\n``` language-json\n{\n    \"padding-line-between-statements\": [\n        \"error\",\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        ...\n    ]\n}\n```\n\n- `LINEBREAK_TYPE` is one of the following.\n\n  - `\"any\"` just ignores the statement pair.\n  - `\"never\"` disallows blank lines.\n  - `\"always\"` requires one or more blank lines. Note it does not count lines that comments exist as blank lines.\n\n- `STATEMENT_TYPE` is one of the following, or an array of the following.\n\n  - `\"*\"` is wildcard. This matches any statements.\n  - `\"block\"` is lonely blocks.\n  - `\"block-like\"` is block like statements. This matches statements that the last token is the closing brace of blocks; e.g. `{ }`, `if (a) { }`, and `while (a) { }`. Also matches immediately invoked function expression statements.\n  - `\"break\"` is `break` statements.\n  - `\"case\"` is `case` clauses in `switch` statements.\n  - `\"cjs-export\"` is `export` statements of CommonJS; e.g. `module.exports = 0`, `module.exports.foo = 1`, and `exports.foo = 2`. This is a special case of assignment.\n  - `\"cjs-import\"` is `import` statements of CommonJS; e.g. `const foo = require(\"foo\")`. This is a special case of variable declarations.\n  - `\"class\"` is `class` declarations.\n  - `\"const\"` is `const` variable declarations, both single-line and multiline.\n  - `\"continue\"` is `continue` statements.\n  - `\"debugger\"` is `debugger` statements.\n  - `\"default\"` is `default` clauses in `switch` statements.\n  - `\"directive\"` is directive prologues. This matches directives; e.g. `\"use strict\"`.\n  - `\"do\"` is `do-while` statements. This matches all statements that the first token is `do` keyword.\n  - `\"empty\"` is empty statements.\n  - `\"export\"` is `export` declarations.\n  - `\"expression\"` is expression statements.\n  - `\"for\"` is `for` loop families. This matches all statements that the first token is `for` keyword.\n  - `\"function\"` is function declarations.\n  - `\"if\"` is `if` statements.\n  - `\"iife\"` is immediately invoked function expression statements. This matches calls on a function expression, optionally prefixed with a unary operator.\n  - `\"import\"` is `import` declarations.\n  - `\"let\"` is `let` variable declarations, both single-line and multiline.\n  - `\"multiline-block-like\"` is block like statements. This is the same as `block-like` type, but only if the block is multiline.\n  - `\"multiline-const\"` is multiline `const` variable declarations.\n  - `\"multiline-expression\"` is expression statements. This is the same as `expression` type, but only if the statement is multiline.\n  - `\"multiline-let\"` is multiline `let` variable declarations.\n  - `\"multiline-var\"` is multiline `var` variable declarations.\n  - `\"return\"` is `return` statements.\n  - `\"singleline-const\"` is single-line `const` variable declarations.\n  - `\"singleline-let\"` is single-line `let` variable declarations.\n  - `\"singleline-var\"` is single-line `var` variable declarations.\n  - `\"switch\"` is `switch` statements.\n  - `\"throw\"` is `throw` statements.\n  - `\"try\"` is `try` statements.\n  - `\"var\"` is `var` variable declarations, both single-line and multiline.\n  - `\"while\"` is `while` loop statements.\n  - `\"with\"` is `with` statements.\n\n## Examples\n\nThis configuration would require blank lines before all `return` statements, like the [newline-before-return](padding-line-between-statementsnewline-before-return) rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: \"*\", next: \"return\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFwiKlwiLCBuZXh0OiBcInJldHVyblwiIH1cbl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgYmFyKCk7XG4gICAgcmV0dXJuO1xufSJ9)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo() {\n    bar();\n    return;\n}\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: \"*\", next: \"return\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFwiKlwiLCBuZXh0OiBcInJldHVyblwiIH1cbl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIGJhcigpO1xuXG4gICAgcmV0dXJuO1xufVxuXG5mdW5jdGlvbiBmb28yKCkge1xuICAgIHJldHVybjtcbn0ifQ==)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo1() {\n    bar();\n\n    return;\n}\n\nfunction foo2() {\n    return;\n}\n```\n\nThis configuration would require blank lines after every sequence of variable declarations, like the [newline-after-var](padding-line-between-statementsnewline-after-var) rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"}, { blankLine: \"any\", prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFtcImNvbnN0XCIsIFwibGV0XCIsIFwidmFyXCJdLCBuZXh0OiBcIipcIn0sXG4gICAgeyBibGFua0xpbmU6IFwiYW55XCIsICAgIHByZXY6IFtcImNvbnN0XCIsIFwibGV0XCIsIFwidmFyXCJdLCBuZXh0OiBbXCJjb25zdFwiLCBcImxldFwiLCBcInZhclwiXX1cbl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBhID0gMDtcbiAgICBiYXIoKTtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBsZXQgYSA9IDA7XG4gICAgYmFyKCk7XG59XG5cbmZ1bmN0aW9uIGZvbzMoKSB7XG4gICAgY29uc3QgYSA9IDA7XG4gICAgYmFyKCk7XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGxldCBhID0gMDtcbiAgICAgICAgYmFyKCk7XG4gICAgfVxufSJ9)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo1() {\n    var a = 0;\n    bar();\n}\n\nfunction foo2() {\n    let a = 0;\n    bar();\n}\n\nfunction foo3() {\n    const a = 0;\n    bar();\n}\n\nclass C {\n    static {\n        let a = 0;\n        bar();\n    }\n}\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"}, { blankLine: \"any\", prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFtcImNvbnN0XCIsIFwibGV0XCIsIFwidmFyXCJdLCBuZXh0OiBcIipcIn0sXG4gICAgeyBibGFua0xpbmU6IFwiYW55XCIsICAgIHByZXY6IFtcImNvbnN0XCIsIFwibGV0XCIsIFwidmFyXCJdLCBuZXh0OiBbXCJjb25zdFwiLCBcImxldFwiLCBcInZhclwiXX1cbl0qL1xuXG5mdW5jdGlvbiBmb28xKCkge1xuICAgIHZhciBhID0gMDtcbiAgICB2YXIgYiA9IDA7XG5cbiAgICBiYXIoKTtcbn1cblxuZnVuY3Rpb24gZm9vMigpIHtcbiAgICBsZXQgYSA9IDA7XG4gICAgY29uc3QgYiA9IDA7XG5cbiAgICBiYXIoKTtcbn1cblxuZnVuY3Rpb24gZm9vMygpIHtcbiAgICBjb25zdCBhID0gMDtcbiAgICBjb25zdCBiID0gMDtcblxuICAgIGJhcigpO1xufVxuXG5jbGFzcyBDIHtcbiAgICBzdGF0aWMge1xuICAgICAgICBsZXQgYSA9IDA7XG4gICAgICAgIGxldCBiID0gMDtcblxuICAgICAgICBiYXIoKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo1() {\n    var a = 0;\n    var b = 0;\n\n    bar();\n}\n\nfunction foo2() {\n    let a = 0;\n    const b = 0;\n\n    bar();\n}\n\nfunction foo3() {\n    const a = 0;\n    const b = 0;\n\n    bar();\n}\n\nclass C {\n    static {\n        let a = 0;\n        let b = 0;\n\n        bar();\n    }\n}\n```\n\nThis configuration would require blank lines after all directive prologues, like the [lines-around-directive](padding-line-between-statementslines-around-directive) rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: \"directive\", next: \"*\" }, { blankLine: \"any\", prev: \"directive\", next: \"directive\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFwiZGlyZWN0aXZlXCIsIG5leHQ6IFwiKlwiIH0sXG4gICAgeyBibGFua0xpbmU6IFwiYW55XCIsICAgIHByZXY6IFwiZGlyZWN0aXZlXCIsIG5leHQ6IFwiZGlyZWN0aXZlXCIgfVxuXSovXG5cblwidXNlIHN0cmljdFwiO1xuZm9vKCk7In0=)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\nfoo();\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: \"directive\", next: \"*\" }, { blankLine: \"any\", prev: \"directive\", next: \"directive\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFwiZGlyZWN0aXZlXCIsIG5leHQ6IFwiKlwiIH0sXG4gICAgeyBibGFua0xpbmU6IFwiYW55XCIsICAgIHByZXY6IFwiZGlyZWN0aXZlXCIsIG5leHQ6IFwiZGlyZWN0aXZlXCIgfVxuXSovXG5cblwidXNlIHN0cmljdFwiO1xuXCJ1c2UgYXNtXCI7XG5cbmZvbygpOyJ9)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\n\"use asm\";\n\nfoo();\n```\n\nThis configuration would require blank lines between clauses in `switch` statements.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFtcImNhc2VcIiwgXCJkZWZhdWx0XCJdLCBuZXh0OiBcIipcIiB9XG5dKi9cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIDE6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgcXV1eCgpO1xufSJ9)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }\n]*/\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    case 2:\n    case 3:\n        baz();\n        break;\n    default:\n        quux();\n}\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }]` configuration:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHBhZGRpbmctbGluZS1iZXR3ZWVuLXN0YXRlbWVudHM6IFtcbiAgICBcImVycm9yXCIsXG4gICAgeyBibGFua0xpbmU6IFwiYWx3YXlzXCIsIHByZXY6IFtcImNhc2VcIiwgXCJkZWZhdWx0XCJdLCBuZXh0OiBcIipcIiB9XG5dKi9cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIDE6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcblxuICAgIGNhc2UgMjpcblxuICAgIGNhc2UgMzpcbiAgICAgICAgYmF6KCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgICAgcXV1eCgpO1xufSJ9)\n\n``` language-js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"case\", \"default\"], next: \"*\" }\n]*/\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n\n    case 2:\n\n    case 3:\n        baz();\n        break;\n\n    default:\n        quux();\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to notify warnings about linebreaks, then it’s safe to disable this rule.\n\n## Compatibility\n\n- **JSCS:** [requirePaddingNewLineAfterVariableDeclaration](https://jscs-dev.github.io/rule/requirePaddingNewLineAfterVariableDeclaration)\n- **JSCS:** [requirePaddingNewLinesAfterBlocks](https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks)\n- **JSCS:** [disallowPaddingNewLinesAfterBlocks](https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks)\n- **JSCS:** [requirePaddingNewLinesAfterUseStrict](https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict)\n- **JSCS:** [disallowPaddingNewLinesAfterUseStrict](https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict)\n- **JSCS:** [requirePaddingNewLinesBeforeExport](https://jscs-dev.github.io/rule/requirePaddingNewLinesBeforeExport)\n- **JSCS:** [disallowPaddingNewLinesBeforeExport](https://jscs-dev.github.io/rule/disallowPaddingNewLinesBeforeExport)\n- **JSCS:** [requirePaddingNewlinesBeforeKeywords](https://jscs-dev.github.io/rule/requirePaddingNewlinesBeforeKeywords)\n- **JSCS:** [disallowPaddingNewlinesBeforeKeywords](https://jscs-dev.github.io/rule/disallowPaddingNewlinesBeforeKeywords)\n\n## Version\n\nThis rule was introduced in ESLint v4.0.0-beta.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/padding-line-between-statements.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/padding-line-between-statements.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/padding-line-between-statements](https://eslint.org/docs/latest/rules/padding-line-between-statements)"
- name: Plugin Migration to Flat Config
  id: extend/plugin-migration-flat-config
  summary: Beginning in ESLint v9.0.0, the default configuration system will be the new flat config system
  description: "# Plugin Migration to Flat Config\n\n## Table of Contents\n\n1.  [Recommended Plugin Structure](#recommended-plugin-structure)\n2.  [Adding Plugin Meta Information](#adding-plugin-meta-information)\n3.  [Migrating Rules for Flat Config](#migrating-rules-for-flat-config)\n4.  [Migrating Processors for Flat Config](#migrating-processors-for-flat-config)\n5.  [Migrating Configs for Flat Config](#migrating-configs-for-flat-config)\n6.  [Migrating Environments for Flat Config](#migrating-environments-for-flat-config)\n7.  [Backwards Compatibility](#backwards-compatibility)\n8.  [Further Reading](#further-reading)\n\nBeginning in ESLint v9.0.0, the default configuration system will be the new flat config system. In order for your plugins to work with flat config files, you’ll need to make some changes to your existing plugins.\n\n## Recommended Plugin Structure\n\nTo make it easier to work with your plugin in the flat config system, it’s recommended that you switch your existing plugin entrypoint to look like this:\n\n``` language-js\nconst plugin = {\n    meta: {},\n    configs: {},\n    rules: {},\n    processors: {}\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nThis structure allows the most flexibility when making other changes discussed on this page.\n\n## Adding Plugin Meta Information\n\nWith the old eslintrc configuration system, ESLint could pull information about the plugin from the package name, but with flat config, ESLint no longer has access to the name of the plugin package. To replace that missing information, you should add a `meta` key that contains at least a `name` key, and ideally, a `version` key, such as:\n\n``` language-js\nconst plugin = {\n    meta: {\n        name: \"eslint-plugin-example\",\n        version: \"1.0.0\"\n    },\n    configs: {},\n    rules: {},\n    processors: {}\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nIf your plugin is published as an npm package, the `name` and `version` should be the same as in your `package.json` file; otherwise, you can assign any value you’d like.\n\nWithout this meta information, your plugin will not be usable with the `--cache` and `--print-config` command line options.\n\n## Migrating Rules for Flat Config\n\nNo changes are necessary for the `rules` key in your plugin. Everything works the same as with the old eslintrc configuration system.\n\n## Migrating Processors for Flat Config\n\nNo changes are necessary for the `processors` key in your plugin as long as you aren’t using file extension-named processors. If you have any [file extension-named processors](plugin-migration-flat-configcustom-processors#file-extension-named-processor), you must update the name to a valid identifier (numbers and letters). File extension-named processors were automatically applied in the old configuration system but are not automatically applied when using flat config. Here is an example of a file extension-named processor:\n\n``` language-js\nconst plugin = {\n    configs: {},\n    rules: {},\n    processors: {\n\n        // no longer supported\n        \".md\": {\n            preprocess() {},\n            postprocess() {}\n        }\n    }\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nThe name `\".md\"` is no longer valid for a processor, so it must be replaced with a valid identifier such as `markdown`:\n\n``` language-js\nconst plugin = {\n    configs: {},\n    rules: {},\n    processors: {\n\n        // works in both old and new config systems\n        \"markdown\": {\n            preprocess() {},\n            postprocess() {}\n        }\n    }\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nIn order to use this renamed processor, you’ll also need to manually specify it inside of a config, such as:\n\n``` language-js\nimport example from \"eslint-plugin-example\";\n\nexport default [\n    {\n        plugins: {\n            example\n        },\n        processor: \"example/markdown\"\n    }\n];\n```\n\nYou should update your plugin’s documentation to advise your users if you have renamed a file extension-named processor.\n\n## Migrating Configs for Flat Config\n\nIf your plugin is exporting configs that refer back to your plugin, then you’ll need to update your configs to flat config format. As part of the migration, you’ll need to reference your plugin directly in the `plugins` key. For example, here is an exported config in the old configuration system format for a plugin named `eslint-plugin-example`:\n\n``` language-js\n// plugin name: eslint-plugin-example\nmodule.exports = {\n    configs: {\n\n        // the config referenced by example/recommended\n        recommended: {\n            plugins: [\"example\"],\n            rules: {\n                \"example/rule1\": \"error\",\n                \"example/rule2\": \"error\"\n            }\n        }\n    },\n    rules: {\n        rule1: {},\n        rule2: {};\n    }\n};\n```\n\nTo migrate to flat config format, you’ll need to move the configs to after the definition of the `plugin` variable in the recommended plugin structure, like this:\n\n``` language-js\nconst plugin = {\n    configs: {},\n    rules: {},\n    processors: {}\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n    recommended: {\n        plugins: {\n            example: plugin\n        },\n        rules: {\n            \"example/rule1\": \"error\",\n            \"example/rule2\": \"error\"\n        }\n    }\n})\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nYour users can then use this exported config like this:\n\n``` language-js\nimport example from \"eslint-plugin-example\";\n\nexport default [\n\n    // use recommended config\n    example.configs.recommended,\n\n    // and provide your own overrides\n    {\n        rules: {\n            \"example/rule1\": \"warn\"\n        }\n    }\n];\n```\n\nYou should update your documentation so your plugin users know how to reference the exported configs.\n\n## Migrating Environments for Flat Config\n\nEnvironments are no longer supported in flat config, and so we recommend transitioning your environments into exported configs. For example, suppose you export a `mocha` environment like this:\n\n``` language-js\n// plugin name: eslint-plugin-example\nmodule.exports = {\n    environments: {\n        mocha: {\n            globals: {\n                it: true,\n                xit: true,\n                describe: true,\n                xdescribe: true\n            }\n        }\n    },\n    rules: {\n        rule1: {},\n        rule2: {};\n    }\n};\n```\n\nTo migrate this environment into a config, you need to add a new key in the `plugin.configs` object that has a flat config object containing the same information, like this:\n\n``` language-js\nconst plugin = {\n    configs: {},\n    rules: {},\n    processors: {}\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n    mocha: {\n        languageOptions: {\n            globals: {\n                it: \"writeable\",\n                xit: \"writeable\",\n                describe: \"writeable\",\n                xdescribe: \"writeable\"\n            }\n        }\n    }\n})\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;\n```\n\nYour users can then use this exported config like this:\n\n``` language-js\nimport example from \"eslint-plugin-example\";\n\nexport default [\n\n    // use the mocha globals\n    example.configs.mocha,\n\n    // and provide your own overrides\n    {\n        languageOptions: {\n            globals: {\n                it: \"readonly\"\n            }\n        }\n    }\n];\n```\n\nYou should update your documentation so your plugin users know how to reference the exported configs.\n\n## Backwards Compatibility\n\nIf your plugin needs to work with both the old and new configuration systems, then you’ll need to:\n\n1.  **Export a CommonJS entrypoint.** The old configuration system cannot load plugins that are published only in ESM format. If your source code is in ESM, then you’ll need to use a bundler that can generate a CommonJS version and use the [`exports`](https://nodejs.org/api/packages.html#package-entry-points) key in your `package.json` file to ensure the CommonJS version can be found by Node.js.\n2.  **Keep the `environments` key.** If your plugin exports custom environments, you should keep those as they are and also export the equivalent flat configs as described above. The `environments` key is ignored when ESLint is running in flat config mode.\n3.  **Export both eslintrc and flat configs.** The `configs` key is only validated when a config is used, so you can provide both formats of configs in the `configs` key. We recommend that you append older format configs with `-legacy` to make it clear that these configs will not be supported in the future. For example, if your primary config is called `recommended` and is in flat config format, then you can also have a config named `recommended-legacy` that is the eslintrc config format.\n\n## Further Reading\n\n- [Overview of the flat config file format blog post](https://eslint.org/blog/2022/08/new-config-system-part-2/)\n- [API usage of new configuration system blog post](https://eslint.org/blog/2022/08/new-config-system-part-3/)\n- [Background to new configuration system blog post](https://eslint.org/blog/2022/08/new-config-system-part-1/)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/plugin-migration-flat-config](https://eslint.org/docs/latest/extend/plugin-migration-flat-config)"
- name: prefer-arrow-callback
  id: rules/prefer-arrow-callback
  summary: Arrow functions can be an attractive alternative to function expressions for callbacks or function arguments
  description: "# prefer-arrow-callback\n\nRequire using arrow functions for callbacks\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-arrow-callback../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [allowNamedFunctions](#allownamedfunctions)\n    2.  [allowUnboundThis](#allowunboundthis)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nArrow functions can be an attractive alternative to function expressions for callbacks or function arguments.\n\nFor example, arrow functions are automatically bound to their surrounding scope/context. This provides an alternative to the pre-ES6 standard of explicitly binding function expressions to achieve similar behavior.\n\nAdditionally, arrow functions are:\n\n- less verbose, and easier to reason about.\n\n- bound lexically regardless of where or when they are invoked.\n\n## Rule Details\n\nThis rule locates function expressions used as callbacks or function arguments. An error will be produced for any that could be replaced by an arrow function without changing the result.\n\nThe following examples **will** be flagged:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItYXJyb3ctY2FsbGJhY2s6IFwiZXJyb3JcIiAqL1xuXG5mb28oZnVuY3Rpb24oYSkgeyByZXR1cm4gYTsgfSk7IC8vIEVSUk9SXG4vLyBwcmVmZXI6IGZvbyhhID0+IGEpXG5cbmZvbyhmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuYTsgfS5iaW5kKHRoaXMpKTsgLy8gRVJST1Jcbi8vIHByZWZlcjogZm9vKCgpID0+IHRoaXMuYSkifQ==)\n\n``` language-js\n/* eslint prefer-arrow-callback: \"error\" */\n\nfoo(function(a) { return a; }); // ERROR\n// prefer: foo(a => a)\n\nfoo(function() { return this.a; }.bind(this)); // ERROR\n// prefer: foo(() => this.a)\n```\n\nInstances where an arrow function would not produce identical results will be ignored.\n\nThe following examples **will not** be flagged:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItYXJyb3ctY2FsbGJhY2s6IFwiZXJyb3JcIiAqL1xuLyogZXNsaW50LWVudiBlczYgKi9cblxuLy8gYXJyb3cgZnVuY3Rpb24gY2FsbGJhY2tcbmZvbyhhID0+IGEpOyAvLyBPS1xuXG4vLyBnZW5lcmF0b3IgYXMgY2FsbGJhY2tcbmZvbyhmdW5jdGlvbiooKSB7IHlpZWxkOyB9KTsgLy8gT0tcblxuLy8gZnVuY3Rpb24gZXhwcmVzc2lvbiBub3QgdXNlZCBhcyBjYWxsYmFjayBvciBmdW5jdGlvbiBhcmd1bWVudFxudmFyIGZvbyA9IGZ1bmN0aW9uIGZvbyhhKSB7IHJldHVybiBhOyB9OyAvLyBPS1xuXG4vLyB1bmJvdW5kIGZ1bmN0aW9uIGV4cHJlc3Npb24gY2FsbGJhY2tcbmZvbyhmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuYTsgfSk7IC8vIE9LXG5cbi8vIHJlY3Vyc2l2ZSBuYW1lZCBmdW5jdGlvbiBjYWxsYmFja1xuZm9vKGZ1bmN0aW9uIGJhcihuKSB7IHJldHVybiBuICYmIG4gKyBiYXIobiAtIDEpOyB9KTsgLy8gT0sifQ==)\n\n``` language-js\n/* eslint prefer-arrow-callback: \"error\" */\n/* eslint-env es6 */\n\n// arrow function callback\nfoo(a => a); // OK\n\n// generator as callback\nfoo(function*() { yield; }); // OK\n\n// function expression not used as callback or function argument\nvar foo = function foo(a) { return a; }; // OK\n\n// unbound function expression callback\nfoo(function() { return this.a; }); // OK\n\n// recursive named function callback\nfoo(function bar(n) { return n && n + bar(n - 1); }); // OK\n```\n\n## Options\n\nAccess further control over this rule’s behavior via an options object.\n\nDefault: `{ allowNamedFunctions: false, allowUnboundThis: true }`\n\n### allowNamedFunctions\n\nBy default `{ \"allowNamedFunctions\": false }`, this `boolean` option prohibits using named functions as callbacks or function arguments.\n\nChanging this value to `true` will reverse this option’s behavior by allowing use of named functions without restriction.\n\n`{ \"allowNamedFunctions\": true }` **will not** flag the following example:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItYXJyb3ctY2FsbGJhY2s6IFsgXCJlcnJvclwiLCB7IFwiYWxsb3dOYW1lZEZ1bmN0aW9uc1wiOiB0cnVlIH0gXSAqL1xuXG5mb28oZnVuY3Rpb24gYmFyKCkge30pOyJ9)\n\n``` language-js\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowNamedFunctions\": true } ] */\n\nfoo(function bar() {});\n```\n\n### allowUnboundThis\n\nBy default `{ \"allowUnboundThis\": true }`, this `boolean` option allows function expressions containing `this` to be used as callbacks, as long as the function in question has not been explicitly bound.\n\nWhen set to `false` this option prohibits the use of function expressions as callbacks or function arguments entirely, without exception.\n\n`{ \"allowUnboundThis\": false }` **will** flag the following examples:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItYXJyb3ctY2FsbGJhY2s6IFsgXCJlcnJvclwiLCB7IFwiYWxsb3dVbmJvdW5kVGhpc1wiOiBmYWxzZSB9IF0gKi9cbi8qIGVzbGludC1lbnYgZXM2ICovXG5cbmZvbyhmdW5jdGlvbigpIHsgdGhpcy5hOyB9KTtcblxuZm9vKGZ1bmN0aW9uKCkgeyAoKCkgPT4gdGhpcyk7IH0pO1xuXG5zb21lQXJyYXkubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIHRoaXMuZG9Tb21ldGhpbmcoaXRlbSk7IH0sIHNvbWVPYmplY3QpOyJ9)\n\n``` language-js\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowUnboundThis\": false } ] */\n/* eslint-env es6 */\n\nfoo(function() { this.a; });\n\nfoo(function() { (() => this); });\n\nsomeArray.map(function(item) { return this.doSomething(item); }, someObject);\n```\n\n## When Not To Use It\n\n- In environments that have not yet adopted ES6 language features (ES3/5).\n\n- In ES6+ environments that allow the use of function expressions when describing callbacks or function arguments.\n\n## Version\n\nThis rule was introduced in ESLint v1.2.0.\n\n## Further Reading\n\n[Arrow function expressions - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-arrow-callback.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-arrow-callback.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-arrow-callback](https://eslint.org/docs/latest/rules/prefer-arrow-callback)"
- name: prefer-const
  id: rules/prefer-const
  summary: If a variable is never reassigned, using the const declaration is better
  description: "# prefer-const\n\nRequire `const` declarations for variables that are never reassigned after declared\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-const../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [destructuring](#destructuring)\n    2.  [ignoreReadBeforeAssign](#ignorereadbeforeassign)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIf a variable is never reassigned, using the `const` declaration is better.\n\n`const` declaration tells readers, “this variable is never reassigned,” reducing cognitive load and improving maintainability.\n\n## Rule Details\n\nThis rule is aimed at flagging variables that are declared using `let` keyword, but never reassigned after the initial assignment.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogXCJlcnJvclwiKi9cblxuLy8gaXQncyBpbml0aWFsaXplZCBhbmQgbmV2ZXIgcmVhc3NpZ25lZC5cbmxldCBhID0gMztcbmNvbnNvbGUubG9nKGEpO1xuXG5sZXQgYjtcbmIgPSAwO1xuY29uc29sZS5sb2coYik7XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGxldCBhO1xuICAgICAgICBhID0gMDtcbiAgICAgICAgY29uc29sZS5sb2coYSk7XG4gICAgfVxufVxuXG4vLyBgaWAgaXMgcmVkZWZpbmVkIChub3QgcmVhc3NpZ25lZCkgb24gZWFjaCBsb29wIHN0ZXAuXG5mb3IgKGxldCBpIGluIFsxLCAyLCAzXSkge1xuICAgIGNvbnNvbGUubG9nKGkpO1xufVxuXG4vLyBgYWAgaXMgcmVkZWZpbmVkIChub3QgcmVhc3NpZ25lZCkgb24gZWFjaCBsb29wIHN0ZXAuXG5mb3IgKGxldCBhIG9mIFsxLCAyLCAzXSkge1xuICAgIGNvbnNvbGUubG9nKGEpO1xufSJ9)\n\n``` language-js\n/*eslint prefer-const: \"error\"*/\n\n// it's initialized and never reassigned.\nlet a = 3;\nconsole.log(a);\n\nlet b;\nb = 0;\nconsole.log(b);\n\nclass C {\n    static {\n        let a;\n        a = 0;\n        console.log(a);\n    }\n}\n\n// `i` is redefined (not reassigned) on each loop step.\nfor (let i in [1, 2, 3]) {\n    console.log(i);\n}\n\n// `a` is redefined (not reassigned) on each loop step.\nfor (let a of [1, 2, 3]) {\n    console.log(a);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogXCJlcnJvclwiKi9cblxuLy8gdXNpbmcgY29uc3QuXG5jb25zdCBhID0gMDtcblxuLy8gaXQncyBuZXZlciBpbml0aWFsaXplZC5cbmxldCBiO1xuY29uc29sZS5sb2coYik7XG5cbi8vIGl0J3MgcmVhc3NpZ25lZCBhZnRlciBpbml0aWFsaXplZC5cbmxldCBjO1xuYyA9IDA7XG5jID0gMTtcbmNvbnNvbGUubG9nKGMpO1xuXG4vLyBpdCdzIGluaXRpYWxpemVkIGluIGEgZGlmZmVyZW50IGJsb2NrIGZyb20gdGhlIGRlY2xhcmF0aW9uLlxubGV0IGQ7XG5pZiAodHJ1ZSkge1xuICAgIGQgPSAwO1xufVxuY29uc29sZS5sb2coZCk7XG5cbi8vIGl0J3MgaW5pdGlhbGl6ZWQgaW4gYSBkaWZmZXJlbnQgc2NvcGUuXG5sZXQgZTtcbmNsYXNzIEMge1xuICAgICN4O1xuICAgIHN0YXRpYyB7XG4gICAgICAgIGUgPSBvYmogPT4gb2JqLiN4O1xuICAgIH1cbn1cblxuLy8gaXQncyBpbml0aWFsaXplZCBhdCBhIHBsYWNlIHRoYXQgd2UgY2Fubm90IHdyaXRlIGEgdmFyaWFibGUgZGVjbGFyYXRpb24uXG5sZXQgZjtcbmlmICh0cnVlKSBmID0gMDtcbmNvbnNvbGUubG9nKGYpO1xuXG4vLyBgaWAgZ2V0cyBhIG5ldyBiaW5kaW5nIGVhY2ggaXRlcmF0aW9uXG5mb3IgKGNvbnN0IGkgaW4gWzEsIDIsIDNdKSB7XG4gIGNvbnNvbGUubG9nKGkpO1xufVxuXG4vLyBgYWAgZ2V0cyBhIG5ldyBiaW5kaW5nIGVhY2ggaXRlcmF0aW9uXG5mb3IgKGNvbnN0IGEgb2YgWzEsIDIsIDNdKSB7XG4gIGNvbnNvbGUubG9nKGEpO1xufVxuXG4vLyBgZW5kYCBpcyBuZXZlciByZWFzc2lnbmVkLCBidXQgd2UgY2Fubm90IHNlcGFyYXRlIHRoZSBkZWNsYXJhdGlvbnMgd2l0aG91dCBtb2RpZnlpbmcgdGhlIHNjb3BlLlxuZm9yIChsZXQgaSA9IDAsIGVuZCA9IDEwOyBpIDwgZW5kOyArK2kpIHtcbiAgICBjb25zb2xlLmxvZyhpKTtcbn1cblxuLy8gYHByZWRpY2F0ZWAgaXMgb25seSBhc3NpZ25lZCBvbmNlIGJ1dCBjYW5ub3QgYmUgc2VwYXJhdGVseSBkZWNsYXJlZCBhcyBgY29uc3RgXG5sZXQgcHJlZGljYXRlO1xuW29iamVjdC50eXBlLCBwcmVkaWNhdGVdID0gZm9vKCk7XG5cbi8vIGBnYCBpcyBvbmx5IGFzc2lnbmVkIG9uY2UgYnV0IGNhbm5vdCBiZSBzZXBhcmF0ZWx5IGRlY2xhcmVkIGFzIGBjb25zdGBcbmxldCBnO1xuY29uc3QgaCA9IHt9O1xuKHsgZywgYzogaC5jIH0gPSBmdW5jKCkpO1xuXG4vLyBzdWdnZXN0IHRvIHVzZSBgbm8tdmFyYCBydWxlLlxudmFyIGkgPSAzO1xuY29uc29sZS5sb2coaSk7In0=)\n\n``` language-js\n/*eslint prefer-const: \"error\"*/\n\n// using const.\nconst a = 0;\n\n// it's never initialized.\nlet b;\nconsole.log(b);\n\n// it's reassigned after initialized.\nlet c;\nc = 0;\nc = 1;\nconsole.log(c);\n\n// it's initialized in a different block from the declaration.\nlet d;\nif (true) {\n    d = 0;\n}\nconsole.log(d);\n\n// it's initialized in a different scope.\nlet e;\nclass C {\n    #x;\n    static {\n        e = obj => obj.#x;\n    }\n}\n\n// it's initialized at a place that we cannot write a variable declaration.\nlet f;\nif (true) f = 0;\nconsole.log(f);\n\n// `i` gets a new binding each iteration\nfor (const i in [1, 2, 3]) {\n  console.log(i);\n}\n\n// `a` gets a new binding each iteration\nfor (const a of [1, 2, 3]) {\n  console.log(a);\n}\n\n// `end` is never reassigned, but we cannot separate the declarations without modifying the scope.\nfor (let i = 0, end = 10; i < end; ++i) {\n    console.log(i);\n}\n\n// `predicate` is only assigned once but cannot be separately declared as `const`\nlet predicate;\n[object.type, predicate] = foo();\n\n// `g` is only assigned once but cannot be separately declared as `const`\nlet g;\nconst h = {};\n({ g, c: h.c } = func());\n\n// suggest to use `no-var` rule.\nvar i = 3;\nconsole.log(i);\n```\n\n## Options\n\n``` language-json\n{\n    \"prefer-const\": [\"error\", {\n        \"destructuring\": \"any\",\n        \"ignoreReadBeforeAssign\": false\n    }]\n}\n```\n\n### destructuring\n\nThe kind of the way to address variables in destructuring. There are 2 values:\n\n- `\"any\"` (default) - If any variables in destructuring should be `const`, this rule warns for those variables.\n- `\"all\"` - If all variables in destructuring should be `const`, this rule warns the variables. Otherwise, ignores them.\n\nExamples of **incorrect** code for the default `{\"destructuring\": \"any\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQge2EsIGJ9ID0gb2JqOyAgICAvKmVycm9yICdiJyBpcyBuZXZlciByZWFzc2lnbmVkLCB1c2UgJ2NvbnN0JyBpbnN0ZWFkLiovXG5hID0gYSArIDE7In0=)\n\n``` language-js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\nlet {a, b} = obj;    /*error 'b' is never reassigned, use 'const' instead.*/\na = a + 1;\n```\n\nExamples of **correct** code for the default `{\"destructuring\": \"any\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG4vLyB1c2luZyBjb25zdC5cbmNvbnN0IHthOiBhMCwgYn0gPSBvYmo7XG5jb25zdCBhID0gYTAgKyAxO1xuXG4vLyBhbGwgdmFyaWFibGVzIGFyZSByZWFzc2lnbmVkLlxubGV0IHtjLCBkfSA9IG9iajtcbmMgPSBjICsgMTtcbmQgPSBkICsgMTsifQ==)\n\n``` language-js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\n// using const.\nconst {a: a0, b} = obj;\nconst a = a0 + 1;\n\n// all variables are reassigned.\nlet {c, d} = obj;\nc = c + 1;\nd = d + 1;\n```\n\nExamples of **incorrect** code for the `{\"destructuring\": \"all\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogW1wiZXJyb3JcIiwge1wiZGVzdHJ1Y3R1cmluZ1wiOiBcImFsbFwifV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbi8vIGFsbCBvZiBgYWAgYW5kIGBiYCBzaG91bGQgYmUgY29uc3QsIHNvIHRob3NlIGFyZSB3YXJuZWQuXG5sZXQge2EsIGJ9ID0gb2JqOyAgICAvKmVycm9yICdhJyBpcyBuZXZlciByZWFzc2lnbmVkLCB1c2UgJ2NvbnN0JyBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYicgaXMgbmV2ZXIgcmVhc3NpZ25lZCwgdXNlICdjb25zdCcgaW5zdGVhZC4qLyJ9)\n\n``` language-js\n/*eslint prefer-const: [\"error\", {\"destructuring\": \"all\"}]*/\n/*eslint-env es6*/\n\n// all of `a` and `b` should be const, so those are warned.\nlet {a, b} = obj;    /*error 'a' is never reassigned, use 'const' instead.\n                             'b' is never reassigned, use 'const' instead.*/\n```\n\nExamples of **correct** code for the `{\"destructuring\": \"all\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogW1wiZXJyb3JcIiwge1wiZGVzdHJ1Y3R1cmluZ1wiOiBcImFsbFwifV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbi8vICdiJyBpcyBuZXZlciByZWFzc2lnbmVkLCBidXQgYWxsIG9mIGBhYCBhbmQgYGJgIHNob3VsZCBub3QgYmUgY29uc3QsIHNvIHRob3NlIGFyZSBpZ25vcmVkLlxubGV0IHthLCBifSA9IG9iajtcbmEgPSBhICsgMTsifQ==)\n\n``` language-js\n/*eslint prefer-const: [\"error\", {\"destructuring\": \"all\"}]*/\n/*eslint-env es6*/\n\n// 'b' is never reassigned, but all of `a` and `b` should not be const, so those are ignored.\nlet {a, b} = obj;\na = a + 1;\n```\n\n### ignoreReadBeforeAssign\n\nThis is an option to avoid conflicting with `no-use-before-define` rule (without `\"nofunc\"` option). If `true` is specified, this rule will ignore variables that are read between the declaration and the first assignment. Default is `false`.\n\nExamples of **correct** code for the `{\"ignoreReadBeforeAssign\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogW1wiZXJyb3JcIiwge1wiaWdub3JlUmVhZEJlZm9yZUFzc2lnblwiOiB0cnVlfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmxldCB0aW1lcjtcbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKGZvbygpKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgIH1cbn1cbnRpbWVyID0gc2V0SW50ZXJ2YWwoaW5pdGlhbGl6ZSwgMTAwKTsifQ==)\n\n``` language-js\n/*eslint prefer-const: [\"error\", {\"ignoreReadBeforeAssign\": true}]*/\n/*eslint-env es6*/\n\nlet timer;\nfunction initialize() {\n    if (foo()) {\n        clearInterval(timer);\n    }\n}\ntimer = setInterval(initialize, 100);\n```\n\nExamples of **correct** code for the default `{\"ignoreReadBeforeAssign\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1jb25zdDogW1wiZXJyb3JcIiwge1wiaWdub3JlUmVhZEJlZm9yZUFzc2lnblwiOiBmYWxzZX1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5jb25zdCB0aW1lciA9IHNldEludGVydmFsKGluaXRpYWxpemUsIDEwMCk7XG5mdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmIChmb28oKSkge1xuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICB9XG59In0=)\n\n``` language-js\n/*eslint prefer-const: [\"error\", {\"ignoreReadBeforeAssign\": false}]*/\n/*eslint-env es6*/\n\nconst timer = setInterval(initialize, 100);\nfunction initialize() {\n    if (foo()) {\n        clearInterval(timer);\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to be notified about variables that are never reassigned after initial assignment, you can safely disable this rule.\n\n## Related Rules\n\n- [no-var](no-var)\n- [no-use-before-define](no-use-before-define)\n\n## Version\n\nThis rule was introduced in ESLint v0.23.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-const.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-const.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-const](https://eslint.org/docs/latest/rules/prefer-const)"
- name: prefer-destructuring
  id: rules/prefer-destructuring
  summary: With JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called destructuring
  description: "# prefer-destructuring\n\nRequire destructuring from arrays and/or objects\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-destructuring../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Options](#options)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading). This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\n### Options\n\nThis rule takes two sets of configuration objects. The first object parameter determines what types of destructuring the rule applies to.\n\nThe two properties, `array` and `object`, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.\n\nAlternatively, you can use separate configurations for different assignment types. It accepts 2 other keys instead of `array` and `object`.\n\nOne key is `VariableDeclarator` and the other is `AssignmentExpression`, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, `array` and `object`, which can be used to control the destructuring requirement for each of `array` and `object` independently for variable declarations and assignment expressions. By default, `array` and `object` are set to true for both `VariableDeclarator` and `AssignmentExpression`.\n\nThe rule has a second object with a single key, `enforceForRenamedProperties`, which determines whether the `object` destructuring applies to renamed variables.\n\n**Note**: It is not possible to determine if a variable will be referring to an object or an array at runtime. This rule therefore guesses the assignment type by checking whether the key being accessed is an integer. This can lead to the following possibly confusing situations:\n\n- Accessing an object property whose key is an integer will fall under the category `array` destructuring.\n- Accessing an array element through a computed index will fall under the category `object` destructuring.\n\nThe `--fix` option on the command line fixes only problems reported in variable declarations, and among them only those that fall under the category `object` destructuring. Furthermore, the name of the declared variable has to be the same as the name used for non-computed member access in the initializer. For example, `var foo = object.foo` can be automatically fixed by this rule. Problems that involve computed member access (e.g., `var foo = object[foo]`) or renamed properties (e.g., `var foo = object.bar`) are not automatically fixed.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItZGVzdHJ1Y3R1cmluZzogXCJlcnJvclwiICovXG5cbi8vIFdpdGggYGFycmF5YCBlbmFibGVkXG52YXIgZm9vID0gYXJyYXlbMF07XG5iYXIuYmF6ID0gYXJyYXlbMF07XG5cbi8vIFdpdGggYG9iamVjdGAgZW5hYmxlZFxudmFyIGZvbyA9IG9iamVjdC5mb287XG52YXIgZm9vID0gb2JqZWN0Wydmb28nXTsifQ==)\n\n``` language-javascript\n/* eslint prefer-destructuring: \"error\" */\n\n// With `array` enabled\nvar foo = array[0];\nbar.baz = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItZGVzdHJ1Y3R1cmluZzogXCJlcnJvclwiICovXG5cbi8vIFdpdGggYGFycmF5YCBlbmFibGVkXG52YXIgWyBmb28gXSA9IGFycmF5O1xudmFyIGZvbyA9IGFycmF5W3NvbWVJbmRleF07XG5bYmFyLmJhel0gPSBhcnJheTtcblxuXG4vLyBXaXRoIGBvYmplY3RgIGVuYWJsZWRcbnZhciB7IGZvbyB9ID0gb2JqZWN0O1xuXG52YXIgZm9vID0gb2JqZWN0LmJhcjtcblxubGV0IGJhcjtcbih7IGJhciB9ID0gb2JqZWN0KTsifQ==)\n\n``` language-javascript\n/* eslint prefer-destructuring: \"error\" */\n\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n[bar.baz] = array;\n\n\n// With `object` enabled\nvar { foo } = object;\n\nvar foo = object.bar;\n\nlet bar;\n({ bar } = object);\n```\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBcInByZWZlci1kZXN0cnVjdHVyaW5nXCI6IFtcImVycm9yXCIsIHsgXCJvYmplY3RcIjogdHJ1ZSB9LCB7IFwiZW5mb3JjZUZvclJlbmFtZWRQcm9wZXJ0aWVzXCI6IHRydWUgfV0gKi9cbnZhciBmb28gPSBvYmplY3QuYmFyOyJ9)\n\n``` language-javascript\n/* eslint \"prefer-destructuring\": [\"error\", { \"object\": true }, { \"enforceForRenamedProperties\": true }] */\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBcInByZWZlci1kZXN0cnVjdHVyaW5nXCI6IFtcImVycm9yXCIsIHsgXCJvYmplY3RcIjogdHJ1ZSB9LCB7IFwiZW5mb3JjZUZvclJlbmFtZWRQcm9wZXJ0aWVzXCI6IHRydWUgfV0gKi9cbnZhciB7IGJhcjogZm9vIH0gPSBvYmplY3Q7In0=)\n\n``` language-javascript\n/* eslint \"prefer-destructuring\": [\"error\", { \"object\": true }, { \"enforceForRenamedProperties\": true }] */\nvar { bar: foo } = object;\n```\n\nExamples of additional **correct** code when `enforceForRenamedProperties` is enabled:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBcInByZWZlci1kZXN0cnVjdHVyaW5nXCI6IFtcImVycm9yXCIsIHsgXCJvYmplY3RcIjogdHJ1ZSB9LCB7IFwiZW5mb3JjZUZvclJlbmFtZWRQcm9wZXJ0aWVzXCI6IHRydWUgfV0gKi9cbmNsYXNzIEMge1xuICAgICN4O1xuICAgIGZvbygpIHtcbiAgICAgICAgY29uc3QgYmFyID0gdGhpcy4jeDsgLy8gcHJpdmF0ZSBpZGVudGlmaWVycyBhcmUgbm90IGFsbG93ZWQgaW4gZGVzdHJ1Y3R1cmluZ1xuICAgIH1cbn0ifQ==)\n\n``` language-javascript\n/* eslint \"prefer-destructuring\": [\"error\", { \"object\": true }, { \"enforceForRenamedProperties\": true }] */\nclass C {\n    #x;\n    foo() {\n        const bar = this.#x; // private identifiers are not allowed in destructuring\n    }\n}\n```\n\nAn example configuration, with the defaults `array` and `object` filled in, looks like this:\n\n``` language-json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\nThe two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.\n\nFor example, the following configuration enforces only object destructuring, but not array destructuring:\n\n``` language-json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\"object\": true, \"array\": false}]\n  }\n}\n```\n\nAn example configuration, with the defaults `VariableDeclarator` and `AssignmentExpression` filled in, looks like this:\n\n``` language-json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"VariableDeclarator\": {\n        \"array\": false,\n        \"object\": true\n      },\n      \"AssignmentExpression\": {\n        \"array\": true,\n        \"object\": true\n      }\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\nThe two properties, `VariableDeclarator` and `AssignmentExpression`, which can be used to turn on or off the destructuring requirement for `array` and `object`. By default, all values are true.\n\nFor example, the following configuration enforces object destructuring in variable declarations and enforces array destructuring in assignment expressions.\n\n``` language-json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"VariableDeclarator\": {\n        \"array\": false,\n        \"object\": true\n      },\n      \"AssignmentExpression\": {\n        \"array\": true,\n        \"object\": false\n      }\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\nExamples of **correct** code when object destructuring in `VariableDeclarator` is enforced:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItZGVzdHJ1Y3R1cmluZzogW1wiZXJyb3JcIiwge1ZhcmlhYmxlRGVjbGFyYXRvcjoge29iamVjdDogdHJ1ZX19XSAqL1xudmFyIHtiYXI6IGZvb30gPSBvYmplY3Q7In0=)\n\n``` language-javascript\n/* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\nvar {bar: foo} = object;\n```\n\nExamples of **correct** code when array destructuring in `AssignmentExpression` is enforced:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBwcmVmZXItZGVzdHJ1Y3R1cmluZzogW1wiZXJyb3JcIiwge0Fzc2lnbm1lbnRFeHByZXNzaW9uOiB7YXJyYXk6IHRydWV9fV0gKi9cbltiYXJdID0gYXJyYXk7In0=)\n\n``` language-javascript\n/* eslint prefer-destructuring: [\"error\", {AssignmentExpression: {array: true}}] */\n[bar] = array;\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n``` language-javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\nOr for non-iterable ‘array-like’ objects:\n\n``` language-javascript\nvar $ = require('jquery');\nvar foo = $('body')[0];\nvar [bar] = $('body'); // fails with a TypeError\n```\n\n## Version\n\nThis rule was introduced in ESLint v3.13.0.\n\n## Further Reading\n\n[Destructuring assignment - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)  \n\n[Destructuring and parameter handling in ECMAScript 6](https://2ality.com/2015/01/es6-destructuring.html)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-destructuring.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-destructuring.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-destructuring](https://eslint.org/docs/latest/rules/prefer-destructuring)"
- name: prefer-exponentiation-operator
  id: rules/prefer-exponentiation-operator
  summary: Introduced in ES2016, the infix exponentiation operator ** is an alternative for the standard Math.pow function
  description: "# prefer-exponentiation-operator\n\nDisallow the use of `Math.pow` in favor of the `**` operator\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-exponentiation-operator../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nIntroduced in ES2016, the infix exponentiation operator `**` is an alternative for the standard `Math.pow` function.\n\nInfix notation is considered to be more readable and thus more preferable than the function notation.\n\n## Rule Details\n\nThis rule disallows calls to `Math.pow` and suggests using the `**` operator instead.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvcjogXCJlcnJvclwiKi9cblxuY29uc3QgZm9vID0gTWF0aC5wb3coMiwgOCk7XG5cbmNvbnN0IGJhciA9IE1hdGgucG93KGEsIGIpO1xuXG5sZXQgYmF6ID0gTWF0aC5wb3coYSArIGIsIGMgKyBkKTtcblxubGV0IHF1dXggPSBNYXRoLnBvdygtMSwgbik7In0=)\n\n``` language-js\n/*eslint prefer-exponentiation-operator: \"error\"*/\n\nconst foo = Math.pow(2, 8);\n\nconst bar = Math.pow(a, b);\n\nlet baz = Math.pow(a + b, c + d);\n\nlet quux = Math.pow(-1, n);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvcjogXCJlcnJvclwiKi9cblxuY29uc3QgZm9vID0gMiAqKiA4O1xuXG5jb25zdCBiYXIgPSBhICoqIGI7XG5cbmxldCBiYXogPSAoYSArIGIpICoqIChjICsgZCk7XG5cbmxldCBxdXV4ID0gKC0xKSAqKiBuOyJ9)\n\n``` language-js\n/*eslint prefer-exponentiation-operator: \"error\"*/\n\nconst foo = 2 ** 8;\n\nconst bar = a ** b;\n\nlet baz = (a + b) ** (c + d);\n\nlet quux = (-1) ** n;\n```\n\n## When Not To Use It\n\nThis rule should not be used unless ES2016 is supported in your codebase.\n\n## Version\n\nThis rule was introduced in ESLint v6.7.0.\n\n## Further Reading\n\n[Exponentiation (\\*\\*) - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)  \n\n[5848 - v8 - V8 JavaScript Engine - Monorail](https://bugs.chromium.org/p/v8/issues/detail?id=5848)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-exponentiation-operator.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-exponentiation-operator.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-exponentiation-operator](https://eslint.org/docs/latest/rules/prefer-exponentiation-operator)"
- name: prefer-named-capture-group
  id: rules/prefer-named-capture-group
  summary: With the landing of ECMAScript 2018, named capture groups can be used in regular expressions, which can improve their readability
  description: "# prefer-named-capture-group\n\nEnforce using named capture group in regular expression\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](prefer-named-capture-group../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\n## Rule Details\n\nWith the landing of ECMAScript 2018, named capture groups can be used in regular expressions, which can improve their readability. This rule is aimed at using named capture groups instead of numbered capture groups in regular expressions:\n\n``` language-js\nconst regex = /(?<year>[0-9]{4})/;\n```\n\nAlternatively, if your intention is not to *capture* the results, but only express the alternative, use a non-capturing group:\n\n``` language-js\nconst regex = /(?:cauli|sun)flower/;\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1uYW1lZC1jYXB0dXJlLWdyb3VwOiBcImVycm9yXCIqL1xuXG5jb25zdCBmb28gPSAvKGJhW3J6XSkvO1xuY29uc3QgYmFyID0gbmV3IFJlZ0V4cCgnKGJhW3J6XSknKTtcbmNvbnN0IGJheiA9IFJlZ0V4cCgnKGJhW3J6XSknKTtcblxuZm9vLmV4ZWMoJ2JhcicpWzFdOyAvLyBSZXRyaWV2ZSB0aGUgZ3JvdXAgcmVzdWx0LiJ9)\n\n``` language-js\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(ba[rz])/;\nconst bar = new RegExp('(ba[rz])');\nconst baz = RegExp('(ba[rz])');\n\nfoo.exec('bar')[1]; // Retrieve the group result.\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1uYW1lZC1jYXB0dXJlLWdyb3VwOiBcImVycm9yXCIqL1xuXG5jb25zdCBmb28gPSAvKD88aWQ+YmFbcnpdKS87XG5jb25zdCBiYXIgPSBuZXcgUmVnRXhwKCcoPzxpZD5iYVtyel0pJyk7XG5jb25zdCBiYXogPSBSZWdFeHAoJyg/PGlkPmJhW3J6XSknKTtcbmNvbnN0IHh5eiA9IC94eXooPzp6eXxhYmMpLztcblxuZm9vLmV4ZWMoJ2JhcicpLmdyb3Vwcy5pZDsgLy8gUmV0cmlldmUgdGhlIGdyb3VwIHJlc3VsdC4ifQ==)\n\n``` language-js\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(?<id>ba[rz])/;\nconst bar = new RegExp('(?<id>ba[rz])');\nconst baz = RegExp('(?<id>ba[rz])');\nconst xyz = /xyz(?:zy|abc)/;\n\nfoo.exec('bar').groups.id; // Retrieve the group result.\n```\n\n## When Not To Use It\n\nIf you are targeting ECMAScript 2017 and/or older environments, you should not use this rule, because this ECMAScript feature is only supported in ECMAScript 2018 and/or newer environments.\n\n## Related Rules\n\n- [no-invalid-regexp](no-invalid-regexp)\n\n## Version\n\nThis rule was introduced in ESLint v5.15.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-named-capture-group.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-named-capture-group.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-named-capture-group](https://eslint.org/docs/latest/rules/prefer-named-capture-group)"
- name: prefer-numeric-literals
  id: rules/prefer-numeric-literals
  summary: The parseInt() and Number.parseInt() functions can be used to turn binary, octal, and hexadecimal strings into integers
  description: "# prefer-numeric-literals\n\nDisallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-numeric-literals../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Compatibility](#compatibility)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe `parseInt()` and `Number.parseInt()` functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of `parseInt()` or `Number.parseInt()`.\n\n``` language-js\n0b111110111 === 503;\n0o767 === 503;\n```\n\n## Rule Details\n\nThis rule disallows calls to `parseInt()` or `Number.parseInt()` if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1udW1lcmljLWxpdGVyYWxzOiBcImVycm9yXCIqL1xuXG5wYXJzZUludChcIjExMTExMDExMVwiLCAyKSA9PT0gNTAzO1xucGFyc2VJbnQoYDExMTExMDExMWAsIDIpID09PSA1MDM7XG5wYXJzZUludChcIjc2N1wiLCA4KSA9PT0gNTAzO1xucGFyc2VJbnQoXCIxRjdcIiwgMTYpID09PSA1MDM7XG5OdW1iZXIucGFyc2VJbnQoXCIxMTExMTAxMTFcIiwgMikgPT09IDUwMztcbk51bWJlci5wYXJzZUludChcIjc2N1wiLCA4KSA9PT0gNTAzO1xuTnVtYmVyLnBhcnNlSW50KFwiMUY3XCIsIDE2KSA9PT0gNTAzOyJ9)\n\n``` language-js\n/*eslint prefer-numeric-literals: \"error\"*/\n\nparseInt(\"111110111\", 2) === 503;\nparseInt(`111110111`, 2) === 503;\nparseInt(\"767\", 8) === 503;\nparseInt(\"1F7\", 16) === 503;\nNumber.parseInt(\"111110111\", 2) === 503;\nNumber.parseInt(\"767\", 8) === 503;\nNumber.parseInt(\"1F7\", 16) === 503;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1udW1lcmljLWxpdGVyYWxzOiBcImVycm9yXCIqL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnBhcnNlSW50KDEpO1xucGFyc2VJbnQoMSwgMyk7XG5OdW1iZXIucGFyc2VJbnQoMSk7XG5OdW1iZXIucGFyc2VJbnQoMSwgMyk7XG5cbjBiMTExMTEwMTExID09PSA1MDM7XG4wbzc2NyA9PT0gNTAzO1xuMHgxRjcgPT09IDUwMztcblxuYVtwYXJzZUludF0oMSwyKTtcblxucGFyc2VJbnQoZm9vKTtcbnBhcnNlSW50KGZvbywgMik7XG5OdW1iZXIucGFyc2VJbnQoZm9vKTtcbk51bWJlci5wYXJzZUludChmb28sIDIpOyJ9)\n\n``` language-js\n/*eslint prefer-numeric-literals: \"error\"*/\n/*eslint-env es6*/\n\nparseInt(1);\nparseInt(1, 3);\nNumber.parseInt(1);\nNumber.parseInt(1, 3);\n\n0b111110111 === 503;\n0o767 === 503;\n0x1F7 === 503;\n\na[parseInt](1,2);\n\nparseInt(foo);\nparseInt(foo, 2);\nNumber.parseInt(foo);\nNumber.parseInt(foo, 2);\n```\n\n## When Not To Use It\n\nIf you want to allow use of `parseInt()` or `Number.parseInt()` for binary, octal, or hexadecimal integers, or if you are not using ES6 (because binary and octal literals are not supported in ES5 and below), you may wish to disable this rule.\n\n## Compatibility\n\n- **JSCS**: [requireNumericLiterals](https://jscs-dev.github.io/rule/requireNumericLiterals)\n\n## Version\n\nThis rule was introduced in ESLint v3.5.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-numeric-literals.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-numeric-literals.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-numeric-literals](https://eslint.org/docs/latest/rules/prefer-numeric-literals)"
- name: prefer-object-has-own
  id: rules/prefer-object-has-own
  summary: This is a common practice because methods on Object.prototype can sometimes be unavailable or redefined (see the no-prototype-builtins rule)
  description: "# prefer-object-has-own\n\nDisallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-object-has-own../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nIt is very common to write code like:\n\n``` language-js\nif (Object.prototype.hasOwnProperty.call(object, \"foo\")) {\n  console.log(\"has property foo\");\n}\n```\n\nThis is a common practice because methods on `Object.prototype` can sometimes be unavailable or redefined (see the [no-prototype-builtins](prefer-object-has-ownno-prototype-builtins) rule).\n\nIntroduced in ES2022, `Object.hasOwn()` is a shorter alternative to `Object.prototype.hasOwnProperty.call()`:\n\n``` language-js\nif (Object.hasOwn(object, \"foo\")) {\n  console.log(\"has property foo\")\n}\n```\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1vYmplY3QtaGFzLW93bjogXCJlcnJvclwiKi9cblxuT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgXCJhXCIpO1xuXG5PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIFwiYVwiKTtcblxuKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgXCJhXCIpO1xuXG5jb25zdCBoYXNQcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsifQ==)\n\n``` language-js\n/*eslint prefer-object-has-own: \"error\"*/\n\nObject.prototype.hasOwnProperty.call(obj, \"a\");\n\nObject.hasOwnProperty.call(obj, \"a\");\n\n({}).hasOwnProperty.call(obj, \"a\");\n\nconst hasProperty = Object.prototype.hasOwnProperty.call(object, property);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1vYmplY3QtaGFzLW93bjogXCJlcnJvclwiKi9cblxuT2JqZWN0Lmhhc093bihvYmosIFwiYVwiKTtcblxuY29uc3QgaGFzUHJvcGVydHkgPSBPYmplY3QuaGFzT3duKG9iamVjdCwgcHJvcGVydHkpOyJ9)\n\n``` language-js\n/*eslint prefer-object-has-own: \"error\"*/\n\nObject.hasOwn(obj, \"a\");\n\nconst hasProperty = Object.hasOwn(object, property);\n```\n\n## When Not To Use It\n\nThis rule should not be used unless ES2022 is supported in your codebase.\n\n## Version\n\nThis rule was introduced in ESLint v8.5.0.\n\n## Further Reading\n\n[Object.hasOwn() - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-object-has-own.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-object-has-own.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-object-has-own](https://eslint.org/docs/latest/rules/prefer-object-has-own)"
- name: prefer-object-spread
  id: rules/prefer-object-spread
  summary: When Object.assign is called using an object literal as the first argument, this rule requires using the object spread syntax instead
  description: "# prefer-object-spread\n\nDisallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-object-spread../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nWhen Object.assign is called using an object literal as the first argument, this rule requires using the object spread syntax instead. This rule also warns on cases where an `Object.assign` call is made using a single argument that is an object literal, in this case, the `Object.assign` call is not needed.\n\nIntroduced in ES2018, object spread is a declarative alternative which may perform better than the more dynamic, imperative `Object.assign`.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1vYmplY3Qtc3ByZWFkOiBcImVycm9yXCIqL1xuXG5PYmplY3QuYXNzaWduKHt9LCBmb28pO1xuXG5PYmplY3QuYXNzaWduKHt9LCB7Zm9vOiAnYmFyJ30pO1xuXG5PYmplY3QuYXNzaWduKHsgZm9vOiAnYmFyJ30sIGJheik7XG5cbk9iamVjdC5hc3NpZ24oe30sIGJheiwgeyBmb286ICdiYXInIH0pO1xuXG5PYmplY3QuYXNzaWduKHt9LCB7IC4uLmJheiB9KTtcblxuLy8gT2JqZWN0LmFzc2lnbiB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50IHRoYXQgaXMgYW4gb2JqZWN0IGxpdGVyYWxcbk9iamVjdC5hc3NpZ24oe30pO1xuXG5PYmplY3QuYXNzaWduKHsgZm9vOiBiYXIgfSk7In0=)\n\n``` language-js\n/*eslint prefer-object-spread: \"error\"*/\n\nObject.assign({}, foo);\n\nObject.assign({}, {foo: 'bar'});\n\nObject.assign({ foo: 'bar'}, baz);\n\nObject.assign({}, baz, { foo: 'bar' });\n\nObject.assign({}, { ...baz });\n\n// Object.assign with a single argument that is an object literal\nObject.assign({});\n\nObject.assign({ foo: bar });\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1vYmplY3Qtc3ByZWFkOiBcImVycm9yXCIqL1xuXG4oeyAuLi5mb28gfSk7XG5cbih7IC4uLmJheiwgZm9vOiAnYmFyJyB9KTtcblxuLy8gQW55IE9iamVjdC5hc3NpZ24gY2FsbCB3aXRob3V0IGFuIG9iamVjdCBsaXRlcmFsIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuT2JqZWN0LmFzc2lnbihmb28sIHsgYmFyOiBiYXogfSk7XG5cbk9iamVjdC5hc3NpZ24oZm9vLCBiYXIpO1xuXG5PYmplY3QuYXNzaWduKGZvbywgeyBiYXIsIGJheiB9KTtcblxuT2JqZWN0LmFzc2lnbihmb28sIHsgLi4uYmF6IH0pOyJ9)\n\n``` language-js\n/*eslint prefer-object-spread: \"error\"*/\n\n({ ...foo });\n\n({ ...baz, foo: 'bar' });\n\n// Any Object.assign call without an object literal as the first argument\nObject.assign(foo, { bar: baz });\n\nObject.assign(foo, bar);\n\nObject.assign(foo, { bar, baz });\n\nObject.assign(foo, { ...baz });\n```\n\n## When Not To Use It\n\nThis rule should not be used unless ES2018 is supported in your codebase.\n\n## Version\n\nThis rule was introduced in ESLint v5.0.0-alpha.3.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-object-spread.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-object-spread.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-object-spread](https://eslint.org/docs/latest/rules/prefer-object-spread)"
- name: prefer-promise-reject-errors
  id: rules/prefer-promise-reject-errors
  summary: It is considered good practice to only pass instances of the built-in Error object to the reject() function for user-defined errors in Promises
  description: "# prefer-promise-reject-errors\n\nRequire using Error objects as Promise rejection reasons\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Known Limitations](#known-limitations)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Further Reading](#further-reading)\n8.  [Resources](#resources)\n\nIt is considered good practice to only pass instances of the built-in `Error` object to the `reject()` function for user-defined errors in Promises. `Error` objects automatically store a stack trace, which can be used to debug an error by determining where it came from. If a Promise is rejected with a non-`Error` value, it can be difficult to determine where the rejection occurred.\n\n## Rule Details\n\nThis rule aims to ensure that Promises are only rejected with `Error` objects.\n\n## Options\n\nThis rule takes one optional object argument:\n\n- `allowEmptyReject: true` (`false` by default) allows calls to `Promise.reject()` with no arguments.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1wcm9taXNlLXJlamVjdC1lcnJvcnM6IFwiZXJyb3JcIiovXG5cblByb21pc2UucmVqZWN0KFwic29tZXRoaW5nIGJhZCBoYXBwZW5lZFwiKTtcblxuUHJvbWlzZS5yZWplY3QoNSk7XG5cblByb21pc2UucmVqZWN0KCk7XG5cbm5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICByZWplY3QoXCJzb21ldGhpbmcgYmFkIGhhcHBlbmVkXCIpO1xufSk7XG5cbm5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICByZWplY3QoKTtcbn0pO1xuIn0=)\n\n``` language-js\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(\"something bad happened\");\n\nPromise.reject(5);\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject(\"something bad happened\");\n});\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1wcm9taXNlLXJlamVjdC1lcnJvcnM6IFwiZXJyb3JcIiovXG5cblByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNvbWV0aGluZyBiYWQgaGFwcGVuZWRcIikpO1xuXG5Qcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKFwic29tZXRoaW5nIGJhZCBoYXBwZW5lZFwiKSk7XG5cbm5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICByZWplY3QobmV3IEVycm9yKFwic29tZXRoaW5nIGJhZCBoYXBwZW5lZFwiKSk7XG59KTtcblxudmFyIGZvbyA9IGdldFVua25vd25WYWx1ZSgpO1xuUHJvbWlzZS5yZWplY3QoZm9vKTsifQ==)\n\n``` language-js\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(new Error(\"something bad happened\"));\n\nPromise.reject(new TypeError(\"something bad happened\"));\n\nnew Promise(function(resolve, reject) {\n  reject(new Error(\"something bad happened\"));\n});\n\nvar foo = getUnknownValue();\nPromise.reject(foo);\n```\n\nExamples of **correct** code for this rule with the `allowEmptyReject: true` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1wcm9taXNlLXJlamVjdC1lcnJvcnM6IFtcImVycm9yXCIsIHtcImFsbG93RW1wdHlSZWplY3RcIjogdHJ1ZX1dKi9cblxuUHJvbWlzZS5yZWplY3QoKTtcblxubmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gIHJlamVjdCgpO1xufSk7In0=)\n\n``` language-js\n/*eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}]*/\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule cannot guarantee that you will only reject Promises with `Error` objects. While the rule will report cases where it can guarantee that the rejection reason is clearly not an `Error`, it will not report cases where there is uncertainty about whether a given reason is an `Error`. For more information on this caveat, see the [similar limitations](prefer-promise-reject-errorsno-throw-literal#known-limitations) in the `no-throw-literal` rule.\n\nTo avoid conflicts between rules, this rule does not report non-error values used in `throw` statements in async functions, even though these lead to Promise rejections. To lint for these cases, use the [`no-throw-literal`](prefer-promise-reject-errorsno-throw-literal) rule.\n\n## When Not To Use It\n\nIf you’re using custom non-error values as Promise rejection reasons, you can turn off this rule.\n\n## Related Rules\n\n- [no-throw-literal](no-throw-literal)\n\n## Version\n\nThis rule was introduced in ESLint v3.14.0.\n\n## Further Reading\n\n[Warning Explanations \\| bluebird](http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-rejected-with-a-non-error)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-promise-reject-errors.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-promise-reject-errors.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-promise-reject-errors](https://eslint.org/docs/latest/rules/prefer-promise-reject-errors)"
- name: prefer-regex-literals
  id: rules/prefer-regex-literals
  summary: The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments
  description: "# prefer-regex-literals\n\nDisallow use of the `RegExp` constructor in favor of regular expression literals\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](prefer-regex-literals../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [disallowRedundantWrapping](#disallowredundantwrapping)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nThere are two ways to create a regular expression:\n\n- Regular expression literals, e.g., `/abc/u`.\n- The `RegExp` constructor function, e.g., `new RegExp(\"abc\", \"u\")` or `RegExp(\"abc\", \"u\")`.\n\nThe constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.\n\nWhen using the constructor function with string literals, don’t forget that the string escaping rules still apply. If you want to put a backslash in the pattern, you need to escape it in the string literal. Thus, the following are equivalent:\n\n``` language-js\nnew RegExp(\"^\\\\d\\\\.$\");\n\n/^\\d\\.$/;\n\n// matches \"0.\", \"1.\", \"2.\" ... \"9.\"\n```\n\nIn the above example, the regular expression literal is easier to read and reason about. Also, it’s a common mistake to omit the extra `\\` in the string literal, which would produce a completely different regular expression:\n\n``` language-js\nnew RegExp(\"^\\d\\.$\");\n\n// equivalent to /^d.$/, matches \"d1\", \"d2\", \"da\", \"db\" ...\n```\n\nWhen a regular expression is known in advance, it is considered a best practice to avoid the string literal notation on top of the regular expression notation, and use regular expression literals instead of the constructor function.\n\n## Rule Details\n\nThis rule disallows the use of the `RegExp` constructor function with string literals as its arguments.\n\nThis rule also disallows the use of the `RegExp` constructor function with template literals without expressions and `String.raw` tagged template literals without expressions.\n\nThe rule does not disallow all use of the `RegExp` constructor. It should be still used for dynamically generated regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZWdleC1saXRlcmFsczogXCJlcnJvclwiKi9cblxubmV3IFJlZ0V4cChcImFiY1wiKTtcblxubmV3IFJlZ0V4cChcImFiY1wiLCBcInVcIik7XG5cblJlZ0V4cChcImFiY1wiKTtcblxuUmVnRXhwKFwiYWJjXCIsIFwidVwiKTtcblxubmV3IFJlZ0V4cChcIlxcXFxkXFxcXGRcXFxcLlxcXFxkXFxcXGRcXFxcLlxcXFxkXFxcXGRcXFxcZFxcXFxkXCIpO1xuXG5SZWdFeHAoYF5cXFxcZFxcXFwuJGApO1xuXG5uZXcgUmVnRXhwKFN0cmluZy5yYXdgXlxcZFxcLiRgKTsifQ==)\n\n``` language-js\n/*eslint prefer-regex-literals: \"error\"*/\n\nnew RegExp(\"abc\");\n\nnew RegExp(\"abc\", \"u\");\n\nRegExp(\"abc\");\n\nRegExp(\"abc\", \"u\");\n\nnew RegExp(\"\\\\d\\\\d\\\\.\\\\d\\\\d\\\\.\\\\d\\\\d\\\\d\\\\d\");\n\nRegExp(`^\\\\d\\\\.$`);\n\nnew RegExp(String.raw`^\\d\\.$`);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZWdleC1saXRlcmFsczogXCJlcnJvclwiKi9cblxuL2FiYy87XG5cbi9hYmMvdTtcblxuL1xcZFxcZFxcLlxcZFxcZFxcLlxcZFxcZFxcZFxcZC87XG5cbi9eXFxkXFwuJC87XG5cbi8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBpcyBhbGxvd2VkIGZvciBkeW5hbWljYWxseSBnZW5lcmF0ZWQgcmVndWxhciBleHByZXNzaW9uc1xuXG5uZXcgUmVnRXhwKHBhdHRlcm4pO1xuXG5SZWdFeHAoXCJhYmNcIiwgZmxhZ3MpO1xuXG5uZXcgUmVnRXhwKHByZWZpeCArIFwiYWJjXCIpO1xuXG5SZWdFeHAoYCR7cHJlZml4fWFiY2ApO1xuXG5uZXcgUmVnRXhwKFN0cmluZy5yYXdgXlxcZFxcLiAke3N1ZmZpeH1gKTsifQ==)\n\n``` language-js\n/*eslint prefer-regex-literals: \"error\"*/\n\n/abc/;\n\n/abc/u;\n\n/\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d/;\n\n/^\\d\\.$/;\n\n// RegExp constructor is allowed for dynamically generated regular expressions\n\nnew RegExp(pattern);\n\nRegExp(\"abc\", flags);\n\nnew RegExp(prefix + \"abc\");\n\nRegExp(`${prefix}abc`);\n\nnew RegExp(String.raw`^\\d\\. ${suffix}`);\n```\n\n## Options\n\nThis rule has an object option:\n\n- `disallowRedundantWrapping` set to `true` additionally checks for unnecessarily wrapped regex literals (Default `false`).\n\n### disallowRedundantWrapping\n\nBy default, this rule doesn’t check when a regex literal is unnecessarily wrapped in a `RegExp` constructor call. When the option `disallowRedundantWrapping` is set to `true`, the rule will also disallow such unnecessary patterns.\n\nExamples of `incorrect` code for `{ \"disallowRedundantWrapping\": true }`\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZWdleC1saXRlcmFsczogW1wiZXJyb3JcIiwge1wiZGlzYWxsb3dSZWR1bmRhbnRXcmFwcGluZ1wiOiB0cnVlfV0qL1xuXG5uZXcgUmVnRXhwKC9hYmMvKTtcblxubmV3IFJlZ0V4cCgvYWJjLywgJ3UnKTsifQ==)\n\n``` language-js\n/*eslint prefer-regex-literals: [\"error\", {\"disallowRedundantWrapping\": true}]*/\n\nnew RegExp(/abc/);\n\nnew RegExp(/abc/, 'u');\n```\n\nExamples of `correct` code for `{ \"disallowRedundantWrapping\": true }`\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZWdleC1saXRlcmFsczogW1wiZXJyb3JcIiwge1wiZGlzYWxsb3dSZWR1bmRhbnRXcmFwcGluZ1wiOiB0cnVlfV0qL1xuXG4vYWJjLztcblxuL2FiYy91O1xuXG5uZXcgUmVnRXhwKC9hYmMvLCBmbGFncyk7In0=)\n\n``` language-js\n/*eslint prefer-regex-literals: [\"error\", {\"disallowRedundantWrapping\": true}]*/\n\n/abc/;\n\n/abc/u;\n\nnew RegExp(/abc/, flags);\n```\n\n## Version\n\nThis rule was introduced in ESLint v6.4.0.\n\n## Further Reading\n\n[Regular expressions - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)  \n\n[RegExp - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-regex-literals.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-regex-literals.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-regex-literals](https://eslint.org/docs/latest/rules/prefer-regex-literals)"
- name: prefer-rest-params
  id: rules/prefer-rest-params
  summary: There are rest parameters in ES2015
  description: "# prefer-rest-params\n\nRequire rest parameters instead of `arguments`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThere are rest parameters in ES2015. We can use that feature for variadic functions instead of the `arguments` variable.\n\n`arguments` does not have methods of `Array.prototype`, so it’s a bit of an inconvenience.\n\n## Rule Details\n\nThis rule is aimed to flag usage of `arguments` variables.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIGNvbnNvbGUubG9nKGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZvbyhhY3Rpb24pIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgYWN0aW9uLmFwcGx5KG51bGwsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBmb28oYWN0aW9uKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgYWN0aW9uLmFwcGx5KG51bGwsIGFyZ3MpO1xufSJ9)\n\n``` language-js\n/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo() {\n    console.log(arguments);\n}\n\nfunction foo(action) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    action.apply(null, args);\n}\n\nfunction foo(action) {\n    var args = [].slice.call(arguments, 1);\n    action.apply(null, args);\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogXCJlcnJvclwiKi9cblxuZnVuY3Rpb24gZm9vKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmxvZyhhcmdzKTtcbn1cblxuZnVuY3Rpb24gZm9vKGFjdGlvbiwgLi4uYXJncykge1xuICAgIGFjdGlvbi5hcHBseShudWxsLCBhcmdzKTsgLy8gb3IgYGFjdGlvbiguLi5hcmdzKWAsIHJlbGF0ZWQgdG8gdGhlIGBwcmVmZXItc3ByZWFkYCBydWxlLlxufVxuXG4vLyBOb3RlOiB0aGUgaW1wbGljaXQgYXJndW1lbnRzIGNhbiBiZSBvdmVyd3JpdHRlbi5cbmZ1bmN0aW9uIGZvbyhhcmd1bWVudHMpIHtcbiAgICBjb25zb2xlLmxvZyhhcmd1bWVudHMpOyAvLyBUaGlzIGlzIHRoZSBmaXJzdCBhcmd1bWVudC5cbn1cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICB2YXIgYXJndW1lbnRzID0gMDtcbiAgICBjb25zb2xlLmxvZyhhcmd1bWVudHMpOyAvLyBUaGlzIGlzIGEgbG9jYWwgdmFyaWFibGUuXG59In0=)\n\n``` language-js\n/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo(...args) {\n    console.log(args);\n}\n\nfunction foo(action, ...args) {\n    action.apply(null, args); // or `action(...args)`, related to the `prefer-spread` rule.\n}\n\n// Note: the implicit arguments can be overwritten.\nfunction foo(arguments) {\n    console.log(arguments); // This is the first argument.\n}\nfunction foo() {\n    var arguments = 0;\n    console.log(arguments); // This is a local variable.\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don’t want to be notified about `arguments` variables, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [prefer-spread](prefer-spread)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-alpha-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-rest-params.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-rest-params.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-rest-params](https://eslint.org/docs/latest/rules/prefer-rest-params)"
- name: prefer-spread
  id: rules/prefer-spread
  summary: Before ES2015, one must use Function.prototype.apply() to call variadic functions
  description: "# prefer-spread\n\nRequire spread operators instead of `.apply()`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nBefore ES2015, one must use `Function.prototype.apply()` to call variadic functions.\n\n``` language-js\nvar args = [1, 2, 3, 4];\nMath.max.apply(Math, args);\n```\n\nIn ES2015, one can use spread syntax to call variadic functions.\n\n``` language-js\n/*eslint-env es6*/\n\nvar args = [1, 2, 3, 4];\nMath.max(...args);\n```\n\n## Rule Details\n\nThis rule is aimed to flag usage of `Function.prototype.apply()` in situations where spread syntax could be used instead.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1zcHJlYWQ6IFwiZXJyb3JcIiovXG5cbmZvby5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuZm9vLmFwcGx5KG51bGwsIGFyZ3MpO1xub2JqLmZvby5hcHBseShvYmosIGFyZ3MpOyJ9)\n\n``` language-js\n/*eslint prefer-spread: \"error\"*/\n\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci1zcHJlYWQ6IFwiZXJyb3JcIiovXG5cbi8vIFVzaW5nIHNwcmVhZCBzeW50YXhcbmZvbyguLi5hcmdzKTtcbm9iai5mb28oLi4uYXJncyk7XG5cbi8vIFRoZSBgdGhpc2AgYmluZGluZyBpcyBkaWZmZXJlbnQuXG5mb28uYXBwbHkob2JqLCBhcmdzKTtcbm9iai5mb28uYXBwbHkobnVsbCwgYXJncyk7XG5vYmouZm9vLmFwcGx5KG90aGVyT2JqLCBhcmdzKTtcblxuLy8gVGhlIGFyZ3VtZW50IGxpc3QgaXMgbm90IHZhcmlhZGljLlxuLy8gVGhvc2UgYXJlIHdhcm5lZCBieSB0aGUgYG5vLXVzZWxlc3MtY2FsbGAgcnVsZS5cbmZvby5hcHBseSh1bmRlZmluZWQsIFsxLCAyLCAzXSk7XG5mb28uYXBwbHkobnVsbCwgWzEsIDIsIDNdKTtcbm9iai5mb28uYXBwbHkob2JqLCBbMSwgMiwgM10pOyJ9)\n\n``` language-js\n/*eslint prefer-spread: \"error\"*/\n\n// Using spread syntax\nfoo(...args);\nobj.foo(...args);\n\n// The `this` binding is different.\nfoo.apply(obj, args);\nobj.foo.apply(null, args);\nobj.foo.apply(otherObj, args);\n\n// The argument list is not variadic.\n// Those are warned by the `no-useless-call` rule.\nfoo.apply(undefined, [1, 2, 3]);\nfoo.apply(null, [1, 2, 3]);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\nKnown limitations:\n\nThis rule analyzes code statically to check whether or not the `this` argument is changed. So, if the `this` argument is computed in a dynamic expression, this rule cannot detect a violation.\n\n``` language-js\n/*eslint prefer-spread: \"error\"*/\n\n// This warns.\na[i++].foo.apply(a[i++], args);\n\n// This does not warn.\na[++i].foo.apply(a[i], args);\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don’t want to be notified about `Function.prototype.apply()` callings, you can safely disable this rule.\n\n## Related Rules\n\n- [no-useless-call](no-useless-call)\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-spread.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-spread.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-spread](https://eslint.org/docs/latest/rules/prefer-spread)"
- name: prefer-template
  id: rules/prefer-template
  summary: In ES2015 (ES6), we can use template literals instead of string concatenation
  description: "# prefer-template\n\nRequire template literals instead of string concatenation\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](prefer-template../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nIn ES2015 (ES6), we can use template literals instead of string concatenation.\n\n``` language-js\nvar str = \"Hello, \" + name + \"!\";\n```\n\n``` language-js\n/*eslint-env es6*/\n\nvar str = `Hello, ${name}!`;\n```\n\n## Rule Details\n\nThis rule is aimed to flag usage of `+` operators with strings.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci10ZW1wbGF0ZTogXCJlcnJvclwiKi9cblxudmFyIHN0ciA9IFwiSGVsbG8sIFwiICsgbmFtZSArIFwiIVwiO1xudmFyIHN0ciA9IFwiVGltZTogXCIgKyAoMTIgKiA2MCAqIDYwICogMTAwMCk7In0=)\n\n``` language-js\n/*eslint prefer-template: \"error\"*/\n\nvar str = \"Hello, \" + name + \"!\";\nvar str = \"Time: \" + (12 * 60 * 60 * 1000);\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHByZWZlci10ZW1wbGF0ZTogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgc3RyID0gXCJIZWxsbyBXb3JsZCFcIjtcbnZhciBzdHIgPSBgSGVsbG8sICR7bmFtZX0hYDtcbnZhciBzdHIgPSBgVGltZTogJHsxMiAqIDYwICogNjAgKiAxMDAwfWA7XG5cbi8vIFRoaXMgaXMgcmVwb3J0ZWQgYnkgYG5vLXVzZWxlc3MtY29uY2F0YC5cbnZhciBzdHIgPSBcIkhlbGxvLCBcIiArIFwiV29ybGQhXCI7In0=)\n\n``` language-js\n/*eslint prefer-template: \"error\"*/\n/*eslint-env es6*/\n\nvar str = \"Hello World!\";\nvar str = `Hello, ${name}!`;\nvar str = `Time: ${12 * 60 * 60 * 1000}`;\n\n// This is reported by `no-useless-concat`.\nvar str = \"Hello, \" + \"World!\";\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don’t want to be notified about string concatenation, you can safely disable this rule.\n\n## Related Rules\n\n- [no-useless-concat](no-useless-concat)\n- [quotes](quotes)\n\n## Version\n\nThis rule was introduced in ESLint v1.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/prefer-template.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/prefer-template.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/prefer-template](https://eslint.org/docs/latest/rules/prefer-template)"
- name: Propose a New Rule
  id: contribute/propose-new-rule
  summary: ESLint is all about rules
  description: "# Propose a New Rule\n\n## Table of Contents\n\n1.  [Core Rule Guidelines](#core-rule-guidelines)\n2.  [Proposing a Rule](#proposing-a-rule)\n3.  [Accepting a Rule](#accepting-a-rule)\n4.  [Implementation is Your Responsibility](#implementation-is-your-responsibility)\n5.  [Alternative: Creating Your Own Rules](#alternative-creating-your-own-rules)\n\nESLint is all about rules. For most of the project’s lifetime, we’ve had over 200 rules, and that list continues to grow. However, we can’t just accept any proposed rule because all rules need to work cohesively together. As such, we have some guidelines around which rules can be part of the ESLint core and which are better off as custom rules and plugins.\n\n**Note:** As of 2020, we only accept rules related to new ECMAScript features. We prefer that new rules be implemented in plugins.\n\n## Core Rule Guidelines\n\nIn general, ESLint core rules must be:\n\n1.  **Widely applicable.** The rules we distribute need to be of importance to a large number of developers. Individual preferences for uncommon patterns are not supported.\n2.  **Generic.** Rules cannot be so specific that users will have trouble understanding when to use them. A rule is typically too specific if describing what it does requires more than two \"and\"s (if a and b and c and d, then this rule warns).\n3.  **Atomic.** Rules must function completely on their own. Rules are expressly forbidden from knowing about the state or presence of other rules.\n4.  **Unique.** No two rules can produce the same warning. Overlapping rules confuse end users and there is an expectation that core ESLint rules do not overlap.\n5.  **Library agnostic.** Rules must be based solely on JavaScript runtime environments and not on specific libraries or frameworks. For example, core rules shouldn’t only apply if you’re using jQuery but we may have some rules that apply only if you’re using Node.js (a runtime).\n6.  **No conflicts.** No rule must directly conflict with another rule. For example, if we have a rule requiring semicolons, we cannot also have a rule disallowing semicolons (which is why we have one rule, `semi`, that does both).\n\nEven though these are the formal criteria for inclusion, each rule is evaluated on its own basis.\n\n## Proposing a Rule\n\nIf you want to propose a new rule, please see how to [create a pull request](propose-new-rulepull-requests) or submit an issue by filling out a [new rule template](https://github.com/eslint/eslint/issues/new/choose).\n\nWe need all of this information in order to determine whether or not the rule is a good core rule candidate.\n\n## Accepting a Rule\n\nIn order for a rule to be accepted in the ESLint core, it must:\n\n1.  Fulfill all the criteria listed in the “Core Rule Guidelines” section\n2.  Have an ESLint team member champion inclusion of the rule\n3.  Be related to an ECMAScript feature that has reached stage 4 in the preceding 12 months\n\nKeep in mind that we have over 200 rules, and that is daunting both for end users and the ESLint team (who has to maintain them). As such, any new rules must be deemed of high importance to be considered for inclusion in ESLint.\n\n## Implementation is Your Responsibility\n\nThe ESLint team doesn’t implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.\n\n## Alternative: Creating Your Own Rules\n\nRemember that ESLint is completely pluggable, which means you can create your own rules and distribute them using plugins. We did this on purpose because we don’t want to be the gatekeepers for all possible rules. Even if we don’t accept a rule into the core, that doesn’t mean you can’t have the exact rule that you want. See the [Custom Rules](propose-new-rule../extend/custom-rules) and [Create Plugins](propose-new-rule../extend/plugins) documentation for more information.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/propose-new-rule](https://eslint.org/docs/latest/contribute/propose-new-rule)"
- name: Propose a Rule Change
  id: contribute/propose-rule-change
  summary: Occasionally, a core ESLint rule needs to be changed
  description: "# Propose a Rule Change\n\n## Table of Contents\n\n1.  [Proposing a Rule Change](#proposing-a-rule-change)\n2.  [Accepting a Rule Change](#accepting-a-rule-change)\n3.  [Implementation is Your Responsibility](#implementation-is-your-responsibility)\n\nOccasionally, a core ESLint rule needs to be changed. This is not necessarily a bug, but rather, an enhancement that makes a rule more configurable. In those situations, we will consider making changes to rules.\n\n## Proposing a Rule Change\n\nTo propose a change to an existing rule, [create a pull request](propose-rule-changepull-requests) or [new issue](https://github.com/eslint/eslint/issues/new/choose) and fill out the template.\n\nWe need all of this information in order to determine whether or not the change is a good candidate for inclusion.\n\n## Accepting a Rule Change\n\nIn order for a rule change to be accepted into ESLint, it must:\n\n1.  Adhere to the [Core Rule Guidelines](propose-rule-changepropose-new-rule#core-rule-guidelines)\n2.  Have an ESLint team member champion the change\n3.  Be important enough that rule is deemed incomplete without this change\n\n## Implementation is Your Responsibility\n\nThe ESLint team doesn’t implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/propose-rule-change](https://eslint.org/docs/latest/contribute/propose-rule-change)"
- name: quote-props
  id: rules/quote-props
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# quote-props\n\nRequire quotes around object literal property names\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](quote-props../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [as-needed](#as-needed)\n    3.  [consistent](#consistent)\n    4.  [consistent-as-needed](#consistent-as-needed)\n    5.  [keywords](#keywords)\n    6.  [unnecessary](#unnecessary)\n    7.  [numbers](#numbers)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/quote-props) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nObject literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:\n\n``` language-js\nvar object1 = {\n    property: true\n};\n\nvar object2 = {\n    \"property\": true\n};\n```\n\nIn many cases, it doesn’t matter if you choose to use an identifier instead of a string or vice-versa. Even so, you might decide to enforce a consistent style in your code.\n\nThere are, however, some occasions when you must use quotes:\n\n1.  If you are using an ECMAScript 3 JavaScript engine (such as IE8) and you want to use a keyword (such as `if`) as a property name. This restriction was removed in ECMAScript 5.\n2.  You want to use a non-identifier character in your property name, such as having a property with a space like `\"one two\"`.\n\nAnother example where quotes do matter is when using numeric literals as property keys:\n\n``` language-js\nvar object = {\n    1e2: 1,\n    100: 2\n};\n```\n\nThis may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because `1e2` and `100` are coerced into strings before getting used as the property name. Both `String(1e2)` and `String(100)` happen to be equal to `\"100\"`, which causes the “Duplicate data property in object literal not allowed in strict mode” error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.\n\n## Rule Details\n\nThis rule requires quotes around object literal property names.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"always\"` (default) requires quotes around all object literal property names\n- `\"as-needed\"` disallows quotes around object literal property names that are not strictly required\n- `\"consistent\"` enforces a consistent quote style; in a given object, either all of the properties should be quoted, or none of the properties should be quoted\n- `\"consistent-as-needed\"` requires quotes around all object literal property names if any name strictly requires quotes, otherwise disallows quotes around object property names\n\nObject option:\n\n- `\"keywords\": true` requires quotes around language keywords used as object property names (only applies when using `as-needed` or `consistent-as-needed`)\n- `\"unnecessary\": true` (default) disallows quotes around object literal property names that are not strictly required (only applies when using `as-needed`)\n- `\"unnecessary\": false` allows quotes around object literal property names that are not strictly required (only applies when using `as-needed`)\n- `\"numbers\": true` requires quotes around numbers used as object property names (only applies when using `as-needed`)\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbnZhciBvYmplY3QgPSB7XG4gICAgZm9vOiBcImJhclwiLFxuICAgIGJhejogNDJcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"always\"]*/\n\nvar object = {\n    foo: \"bar\",\n    baz: 42\n};\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iamVjdDEgPSB7XG4gICAgXCJmb29cIjogXCJiYXJcIixcbiAgICBcImJhelwiOiA0MixcbiAgICBcInF1eC1sb3JlbVwiOiB0cnVlXG59O1xuXG52YXIgb2JqZWN0MiA9IHtcbiAgICAnZm9vJzogJ2JhcicsXG4gICAgJ2Jheic6IDQyLFxuICAgICdxdXgtbG9yZW0nOiB0cnVlXG59O1xuXG52YXIgb2JqZWN0MyA9IHtcbiAgICBmb28oKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59OyJ9)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42,\n    'qux-lorem': true\n};\n\nvar object3 = {\n    foo() {\n        return;\n    }\n};\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSovXG5cbnZhciBvYmplY3QgPSB7XG4gICAgXCJhXCI6IDAsXG4gICAgXCIwXCI6IDAsXG4gICAgXCJ0cnVlXCI6IDAsXG4gICAgXCJudWxsXCI6IDBcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"as-needed\"]*/\n\nvar object = {\n    \"a\": 0,\n    \"0\": 0,\n    \"true\": 0,\n    \"null\": 0\n};\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxudmFyIG9iamVjdDEgPSB7XG4gICAgXCJhLWJcIjogMCxcbiAgICBcIjB4MFwiOiAwLFxuICAgIFwiMWUyXCI6IDBcbn07XG5cbnZhciBvYmplY3QyID0ge1xuICAgIGZvbzogJ2JhcicsXG4gICAgYmF6OiA0MixcbiAgICB0cnVlOiAwLFxuICAgIDA6IDAsXG4gICAgJ3F1eC1sb3JlbSc6IHRydWVcbn07XG5cbnZhciBvYmplY3QzID0ge1xuICAgIGZvbygpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nvar object1 = {\n    \"a-b\": 0,\n    \"0x0\": 0,\n    \"1e2\": 0\n};\n\nvar object2 = {\n    foo: 'bar',\n    baz: 42,\n    true: 0,\n    0: 0,\n    'qux-lorem': true\n};\n\nvar object3 = {\n    foo() {\n        return;\n    }\n};\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the `\"consistent\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImNvbnNpc3RlbnRcIl0qL1xuXG52YXIgb2JqZWN0MSA9IHtcbiAgICBmb286IFwiYmFyXCIsXG4gICAgXCJiYXpcIjogNDIsXG4gICAgXCJxdXgtbG9yZW1cIjogdHJ1ZVxufTtcblxudmFyIG9iamVjdDIgPSB7XG4gICAgJ2Zvbyc6ICdiYXInLFxuICAgIGJhejogNDJcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"consistent\"]*/\n\nvar object1 = {\n    foo: \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    baz: 42\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImNvbnNpc3RlbnRcIl0qL1xuXG52YXIgb2JqZWN0MSA9IHtcbiAgICBcImZvb1wiOiBcImJhclwiLFxuICAgIFwiYmF6XCI6IDQyLFxuICAgIFwicXV4LWxvcmVtXCI6IHRydWVcbn07XG5cbnZhciBvYmplY3QyID0ge1xuICAgICdmb28nOiAnYmFyJyxcbiAgICAnYmF6JzogNDJcbn07XG5cbnZhciBvYmplY3QzID0ge1xuICAgIGZvbzogJ2JhcicsXG4gICAgYmF6OiA0MlxufTsifQ==)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"consistent\"]*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42\n};\n\nvar object3 = {\n    foo: 'bar',\n    baz: 42\n};\n```\n\n### consistent-as-needed\n\nExamples of **incorrect** code for this rule with the `\"consistent-as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImNvbnNpc3RlbnQtYXMtbmVlZGVkXCJdKi9cblxudmFyIG9iamVjdDEgPSB7XG4gICAgZm9vOiBcImJhclwiLFxuICAgIFwiYmF6XCI6IDQyLFxuICAgIFwicXV4LWxvcmVtXCI6IHRydWVcbn07XG5cbnZhciBvYmplY3QyID0ge1xuICAgICdmb28nOiAnYmFyJyxcbiAgICAnYmF6JzogNDJcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\"]*/\n\nvar object1 = {\n    foo: \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent-as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImNvbnNpc3RlbnQtYXMtbmVlZGVkXCJdKi9cblxudmFyIG9iamVjdDEgPSB7XG4gICAgXCJmb29cIjogXCJiYXJcIixcbiAgICBcImJhelwiOiA0MixcbiAgICBcInF1eC1sb3JlbVwiOiB0cnVlXG59O1xuXG52YXIgb2JqZWN0MiA9IHtcbiAgICBmb286ICdiYXInLFxuICAgIGJhejogNDJcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\"]*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    foo: 'bar',\n    baz: 42\n};\n```\n\n### keywords\n\nExamples of additional **incorrect** code for this rule with the `\"as-needed\", { \"keywords\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiLCB7IFwia2V5d29yZHNcIjogdHJ1ZSB9XSovXG5cbnZhciB4ID0ge1xuICAgIHdoaWxlOiAxLFxuICAgIHZvbGF0aWxlOiBcImZvb1wiXG59OyJ9)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"keywords\": true }]*/\n\nvar x = {\n    while: 1,\n    volatile: \"foo\"\n};\n```\n\nExamples of additional **incorrect** code for this rule with the `\"consistent-as-needed\", { \"keywords\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImNvbnNpc3RlbnQtYXMtbmVlZGVkXCIsIHsgXCJrZXl3b3Jkc1wiOiB0cnVlIH1dKi9cblxudmFyIHggPSB7XG4gICAgXCJwcm9wXCI6IDEsXG4gICAgXCJiYXJcIjogXCJmb29cIlxufTsifQ==)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\", { \"keywords\": true }]*/\n\nvar x = {\n    \"prop\": 1,\n    \"bar\": \"foo\"\n};\n```\n\n### unnecessary\n\nExamples of additional **correct** code for this rule with the `\"as-needed\", { \"unnecessary\": false }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiLCB7IFwia2V5d29yZHNcIjogdHJ1ZSwgXCJ1bm5lY2Vzc2FyeVwiOiBmYWxzZSB9XSovXG5cbnZhciB4ID0ge1xuICAgIFwid2hpbGVcIjogMSxcbiAgICBcImZvb1wiOiBcImJhclwiICAvLyBXb3VsZCBub3JtYWxseSBoYXZlIGNhdXNlZCBhIHdhcm5pbmdcbn07In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"keywords\": true, \"unnecessary\": false }]*/\n\nvar x = {\n    \"while\": 1,\n    \"foo\": \"bar\"  // Would normally have caused a warning\n};\n```\n\n### numbers\n\nExamples of additional **incorrect** code for this rule with the `\"as-needed\", { \"numbers\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiLCB7IFwibnVtYmVyc1wiOiB0cnVlIH1dKi9cblxudmFyIHggPSB7XG4gICAgMTAwOiAxXG59In0=)\n\n``` language-js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"numbers\": true }]*/\n\nvar x = {\n    100: 1\n}\n```\n\n## When Not To Use It\n\nIf you don’t care if property names are consistently wrapped in quotes or not, and you don’t target legacy ES3 environments, turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Further Reading\n\n[ECMAScript 5 compatibility table](https://kangax.github.io/compat-table/es5/#Reserved_words_as_property_names)  \n\n[Unquoted property names / object keys in JavaScript · Mathias Bynens](https://mathiasbynens.be/notes/javascript-properties)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/quote-props.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/quote-props.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/quote-props](https://eslint.org/docs/latest/rules/quote-props)"
- name: quotes
  id: rules/quotes
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# quotes\n\nEnforce the consistent use of either backticks, double, or single quotes\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](quotes../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [double](#double)\n    2.  [single](#single)\n    3.  [backticks](#backticks)\n    4.  [avoidEscape](#avoidescape)\n    5.  [allowTemplateLiterals](#allowtemplateliterals)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/quotes) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nJavaScript allows you to define strings in one of three ways: double quotes, single quotes, and backticks (as of ECMAScript 6). For example:\n\n``` language-js\n/*eslint-env es6*/\n\nvar double = \"double\";\nvar single = 'single';\nvar backtick = `backtick`;    // ES6 only\n```\n\nEach of these lines creates a string and, in some cases, can be used interchangeably. The choice of how to define strings in a codebase is a stylistic one outside of template literals (which allow embedded expressions to be interpreted).\n\nMany codebases require strings to be defined in a consistent manner.\n\n## Rule Details\n\nThis rule enforces the consistent use of either backticks, double, or single quotes.\n\nThis rule is aware of directive prologues such as `\"use strict\"` and will not flag or autofix them if doing so will change how the directive prologue is interpreted.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"double\"` (default) requires the use of double quotes wherever possible\n- `\"single\"` requires the use of single quotes wherever possible\n- `\"backtick\"` requires the use of backticks wherever possible\n\nObject option:\n\n- `\"avoidEscape\": true` allows strings to use single-quotes or double-quotes so long as the string contains a quote that would have to be escaped otherwise\n- `\"allowTemplateLiterals\": true` allows strings to use backticks\n\n**Deprecated**: The object property `avoid-escape` is deprecated; please use the object property `avoidEscape` instead.\n\n### double\n\nExamples of **incorrect** code for this rule with the default `\"double\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJkb3VibGVcIl0qL1xuXG52YXIgc2luZ2xlID0gJ3NpbmdsZSc7XG52YXIgdW5lc2NhcGVkID0gJ2Egc3RyaW5nIGNvbnRhaW5pbmcgXCJkb3VibGVcIiBxdW90ZXMnO1xudmFyIGJhY2t0aWNrID0gYGJhY2tcXG50aWNrYDsgLy8geW91IGNhbiB1c2UgXFxuIGluIHNpbmdsZSBvciBkb3VibGUgcXVvdGVkIHN0cmluZ3MifQ==)\n\n``` language-js\n/*eslint quotes: [\"error\", \"double\"]*/\n\nvar single = 'single';\nvar unescaped = 'a string containing \"double\" quotes';\nvar backtick = `back\\ntick`; // you can use \\n in single or double quoted strings\n```\n\nExamples of **correct** code for this rule with the default `\"double\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJkb3VibGVcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBkb3VibGUgPSBcImRvdWJsZVwiO1xudmFyIGJhY2t0aWNrID0gYGJhY2tcbnRpY2tgOyAgLy8gYmFja3RpY2tzIGFyZSBhbGxvd2VkIGR1ZSB0byBuZXdsaW5lXG52YXIgYmFja3RpY2sgPSB0YWdgYmFja3RpY2tgOyAvLyBiYWNrdGlja3MgYXJlIGFsbG93ZWQgZHVlIHRvIHRhZyJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"double\"]*/\n/*eslint-env es6*/\n\nvar double = \"double\";\nvar backtick = `back\ntick`;  // backticks are allowed due to newline\nvar backtick = tag`backtick`; // backticks are allowed due to tag\n```\n\n### single\n\nExamples of **incorrect** code for this rule with the `\"single\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJzaW5nbGVcIl0qL1xuXG52YXIgZG91YmxlID0gXCJkb3VibGVcIjtcbnZhciB1bmVzY2FwZWQgPSBcImEgc3RyaW5nIGNvbnRhaW5pbmcgJ3NpbmdsZScgcXVvdGVzXCI7In0=)\n\n``` language-js\n/*eslint quotes: [\"error\", \"single\"]*/\n\nvar double = \"double\";\nvar unescaped = \"a string containing 'single' quotes\";\n```\n\nExamples of **correct** code for this rule with the `\"single\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJzaW5nbGVcIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBzaW5nbGUgPSAnc2luZ2xlJztcbnZhciBiYWNrdGljayA9IGBiYWNrJHt4fXRpY2tgOyAvLyBiYWNrdGlja3MgYXJlIGFsbG93ZWQgZHVlIHRvIHN1YnN0aXR1dGlvbiJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"single\"]*/\n/*eslint-env es6*/\n\nvar single = 'single';\nvar backtick = `back${x}tick`; // backticks are allowed due to substitution\n```\n\n### backticks\n\nExamples of **incorrect** code for this rule with the `\"backtick\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJiYWNrdGlja1wiXSovXG5cbnZhciBzaW5nbGUgPSAnc2luZ2xlJztcbnZhciBkb3VibGUgPSBcImRvdWJsZVwiO1xudmFyIHVuZXNjYXBlZCA9ICdhIHN0cmluZyBjb250YWluaW5nIGBiYWNrdGlja3NgJzsifQ==)\n\n``` language-js\n/*eslint quotes: [\"error\", \"backtick\"]*/\n\nvar single = 'single';\nvar double = \"double\";\nvar unescaped = 'a string containing `backticks`';\n```\n\nExamples of **correct** code for this rule with the `\"backtick\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJiYWNrdGlja1wiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuXCJ1c2Ugc3RyaWN0XCI7IC8vIGRpcmVjdGl2ZXMgbXVzdCB1c2Ugc2luZ2xlIG9yIGRvdWJsZSBxdW90ZXNcbnZhciBiYWNrdGljayA9IGBiYWNrdGlja2A7XG52YXIgb2JqID0geyAncHJvcC1uYW1lJzogYHZhbHVlYCB9OyAvLyBiYWNrdGlja3Mgbm90IGFsbG93ZWQgZm9yIHByb3BlcnR5IG5hbWVzIn0=)\n\n``` language-js\n/*eslint quotes: [\"error\", \"backtick\"]*/\n/*eslint-env es6*/\n\n\"use strict\"; // directives must use single or double quotes\nvar backtick = `backtick`;\nvar obj = { 'prop-name': `value` }; // backticks not allowed for property names\n```\n\n### avoidEscape\n\nExamples of additional **correct** code for this rule with the `\"double\", { \"avoidEscape\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJkb3VibGVcIiwgeyBcImF2b2lkRXNjYXBlXCI6IHRydWUgfV0qL1xuXG52YXIgc2luZ2xlID0gJ2Egc3RyaW5nIGNvbnRhaW5pbmcgXCJkb3VibGVcIiBxdW90ZXMnOyJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"double\", { \"avoidEscape\": true }]*/\n\nvar single = 'a string containing \"double\" quotes';\n```\n\nExamples of additional **correct** code for this rule with the `\"single\", { \"avoidEscape\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJzaW5nbGVcIiwgeyBcImF2b2lkRXNjYXBlXCI6IHRydWUgfV0qL1xuXG52YXIgZG91YmxlID0gXCJhIHN0cmluZyBjb250YWluaW5nICdzaW5nbGUnIHF1b3Rlc1wiOyJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"single\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing 'single' quotes\";\n```\n\nExamples of additional **correct** code for this rule with the `\"backtick\", { \"avoidEscape\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJiYWNrdGlja1wiLCB7IFwiYXZvaWRFc2NhcGVcIjogdHJ1ZSB9XSovXG5cbnZhciBkb3VibGUgPSBcImEgc3RyaW5nIGNvbnRhaW5pbmcgYGJhY2t0aWNrYCBxdW90ZXNcIiJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"backtick\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing `backtick` quotes\"\n```\n\n### allowTemplateLiterals\n\nExamples of additional **correct** code for this rule with the `\"double\", { \"allowTemplateLiterals\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJkb3VibGVcIiwgeyBcImFsbG93VGVtcGxhdGVMaXRlcmFsc1wiOiB0cnVlIH1dKi9cblxudmFyIGRvdWJsZSA9IFwiZG91YmxlXCI7XG52YXIgZG91YmxlID0gYGRvdWJsZWA7In0=)\n\n``` language-js\n/*eslint quotes: [\"error\", \"double\", { \"allowTemplateLiterals\": true }]*/\n\nvar double = \"double\";\nvar double = `double`;\n```\n\nExamples of additional **correct** code for this rule with the `\"single\", { \"allowTemplateLiterals\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHF1b3RlczogW1wiZXJyb3JcIiwgXCJzaW5nbGVcIiwgeyBcImFsbG93VGVtcGxhdGVMaXRlcmFsc1wiOiB0cnVlIH1dKi9cblxudmFyIHNpbmdsZSA9ICdzaW5nbGUnO1xudmFyIHNpbmdsZSA9IGBzaW5nbGVgOyJ9)\n\n``` language-js\n/*eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n\nvar single = 'single';\nvar single = `single`;\n```\n\n`{ \"allowTemplateLiterals\": false }` will not disallow the usage of all template literals. If you want to forbid any instance of template literals, use [no-restricted-syntax](quotesno-restricted-syntax) and target the `TemplateLiteral` selector.\n\n## When Not To Use It\n\nIf you do not need consistency in your string styles, you can safely disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/quotes.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/quotes.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/quotes](https://eslint.org/docs/latest/rules/quotes)"
- name: radix
  id: rules/radix
  summary: When using the parseInt() function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is
  description: "# radix\n\nEnforce the consistent use of the radix argument when using `parseInt()`\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](radix../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [as-needed](#as-needed)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nWhen using the `parseInt()` function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is. By default, `parseInt()` will autodetect decimal and hexadecimal (via `0x` prefix). Prior to ECMAScript 5, `parseInt()` also autodetected octal literals, which caused problems because many developers assumed a leading `0` would be ignored.\n\nThis confusion led to the suggestion that you always use the radix parameter to `parseInt()` to eliminate unintended consequences. So instead of doing this:\n\n``` language-js\nvar num = parseInt(\"071\");      // 57\n```\n\nDo this:\n\n``` language-js\nvar num = parseInt(\"071\", 10);  // 71\n```\n\nECMAScript 5 changed the behavior of `parseInt()` so that it no longer autodetects octal literals and instead treats them as decimal literals. However, the differences between hexadecimal and decimal interpretation of the first parameter causes many developers to continue using the radix parameter to ensure the string is interpreted in the intended way.\n\nOn the other hand, if the code is targeting only ES5-compliant environments passing the radix `10` may be redundant. In such a case you might want to disallow using such a radix.\n\n## Rule Details\n\nThis rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant `10` radix if targeting modern environments only.\n\n## Options\n\nThere are two options for this rule:\n\n- `\"always\"` enforces providing a radix (default)\n- `\"as-needed\"` disallows providing the `10` radix\n\n### always\n\nExamples of **incorrect** code for the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJhZGl4OiBcImVycm9yXCIqL1xuXG52YXIgbnVtID0gcGFyc2VJbnQoXCIwNzFcIik7XG5cbnZhciBudW0gPSBwYXJzZUludChzb21lVmFsdWUpO1xuXG52YXIgbnVtID0gcGFyc2VJbnQoXCIwNzFcIiwgXCJhYmNcIik7XG5cbnZhciBudW0gPSBwYXJzZUludChcIjA3MVwiLCAzNyk7XG5cbnZhciBudW0gPSBwYXJzZUludCgpOyJ9)\n\n``` language-js\n/*eslint radix: \"error\"*/\n\nvar num = parseInt(\"071\");\n\nvar num = parseInt(someValue);\n\nvar num = parseInt(\"071\", \"abc\");\n\nvar num = parseInt(\"071\", 37);\n\nvar num = parseInt();\n```\n\nExamples of **correct** code for the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJhZGl4OiBcImVycm9yXCIqL1xuXG52YXIgbnVtID0gcGFyc2VJbnQoXCIwNzFcIiwgMTApO1xuXG52YXIgbnVtID0gcGFyc2VJbnQoXCIwNzFcIiwgOCk7XG5cbnZhciBudW0gPSBwYXJzZUZsb2F0KHNvbWVWYWx1ZSk7In0=)\n\n``` language-js\n/*eslint radix: \"error\"*/\n\nvar num = parseInt(\"071\", 10);\n\nvar num = parseInt(\"071\", 8);\n\nvar num = parseFloat(someValue);\n```\n\n### as-needed\n\nExamples of **incorrect** code for the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJhZGl4OiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSovXG5cbnZhciBudW0gPSBwYXJzZUludChcIjA3MVwiLCAxMCk7XG5cbnZhciBudW0gPSBwYXJzZUludChcIjA3MVwiLCBcImFiY1wiKTtcblxudmFyIG51bSA9IHBhcnNlSW50KCk7In0=)\n\n``` language-js\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nvar num = parseInt(\"071\", 10);\n\nvar num = parseInt(\"071\", \"abc\");\n\nvar num = parseInt();\n```\n\nExamples of **correct** code for the `\"as-needed\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJhZGl4OiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSovXG5cbnZhciBudW0gPSBwYXJzZUludChcIjA3MVwiKTtcblxudmFyIG51bSA9IHBhcnNlSW50KFwiMDcxXCIsIDgpO1xuXG52YXIgbnVtID0gcGFyc2VGbG9hdChzb21lVmFsdWUpOyJ9)\n\n``` language-js\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nvar num = parseInt(\"071\");\n\nvar num = parseInt(\"071\", 8);\n\nvar num = parseFloat(someValue);\n```\n\n## When Not To Use It\n\nIf you don’t want to enforce either presence or omission of the `10` radix value you can turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.7.\n\n## Further Reading\n\n[parseInt Radix](https://davidwalsh.name/parseint-radix)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/radix.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/radix.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/radix](https://eslint.org/docs/latest/rules/radix)"
- name: Report a Security Vulnerability
  id: contribute/report-security-vulnerability
  summary: To report a security vulnerability in ESLint, please use our create an advisory form on GitHub
  description: "# Report a Security Vulnerability\n\nTo report a security vulnerability in ESLint, please use our [create an advisory form](https://github.com/eslint/eslint/security/advisories/new) on GitHub.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/report-security-vulnerability](https://eslint.org/docs/latest/contribute/report-security-vulnerability)"
- name: Report Bugs
  id: contribute/report-bugs
  summary: If you think you’ve found a bug in ESLint, please create a new issue or a pull request on GitHub
  description: "# Report Bugs\n\nIf you think you’ve found a bug in ESLint, please [create a new issue](https://github.com/eslint/eslint/issues/new/choose) or a [pull request](report-bugspull-requests) on GitHub.\n\nPlease include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that’s time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.\n\n**Note:** If you just have a question that won’t necessarily result in a change to ESLint, such as asking how something works or how to contribute, please open a [discussion](https://github.com/eslint/eslint/discussions) or stop by our [Discord server](https://eslint.org/chat) instead of filing an issue.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/report-bugs](https://eslint.org/docs/latest/contribute/report-bugs)"
- name: Request a Change
  id: contribute/request-change
  summary: If you’d like to request a change to ESLint, please create a new issue on GitHub
  description: "# Request a Change\n\nIf you’d like to request a change to ESLint, please [create a new issue](https://github.com/eslint/eslint/issues/new/choose) on GitHub. Be sure to include the following information:\n\n1.  The version of ESLint you are using.\n2.  The problem you want to solve.\n3.  Your take on the correct solution to problem.\n\nIf you’re requesting a change to a rule, it’s helpful to include this information as well:\n\n1.  What you did.\n2.  What you would like to happen.\n3.  What actually happened.\n\nPlease include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that’s time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.\n\n**Note:** If you just have a question that won’t necessarily result in a change to ESLint, such as asking how something works or how to contribute, please open a [discussion](https://github.com/eslint/eslint/discussions) or stop by our [Discord server](https://eslint.org/chat) instead of filing an issue.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/request-change](https://eslint.org/docs/latest/contribute/request-change)"
- name: require-atomic-updates
  id: rules/require-atomic-updates
  summary: When writing asynchronous code, it is possible to create subtle race condition bugs
  description: "# require-atomic-updates\n\nDisallow assignments that can lead to race conditions due to usage of `await` or `yield`\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n    1.  [Variables](#variables)\n    2.  [Properties](#properties)\n2.  [Options](#options)\n    1.  [allowProperties](#allowproperties)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nWhen writing asynchronous code, it is possible to create subtle race condition bugs. Consider the following example:\n\n``` language-js\nlet totalLength = 0;\n\nasync function addLengthOfSinglePage(pageNum) {\n  totalLength += await getPageLength(pageNum);\n}\n\nPromise.all([addLengthOfSinglePage(1), addLengthOfSinglePage(2)]).then(() => {\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\nThis code looks like it will sum the results of calling `getPageLength(1)` and `getPageLength(2)`, but in reality the final value of `totalLength` will only be the length of one of the two pages. The bug is in the statement `totalLength += await getPageLength(pageNum);`. This statement first reads an initial value of `totalLength`, then calls `getPageLength(pageNum)` and waits for that Promise to fulfill. Finally, it sets the value of `totalLength` to the sum of `await getPageLength(pageNum)` and the *initial* value of `totalLength`. If the `totalLength` variable is updated in a separate function call during the time that the `getPageLength(pageNum)` Promise is pending, that update will be lost because the new value is overwritten without being read.\n\nOne way to fix this issue would be to ensure that `totalLength` is read at the same time as it’s updated, like this:\n\n``` language-js\nasync function addLengthOfSinglePage(pageNum) {\n  const lengthOfThisPage = await getPageLength(pageNum);\n\n  totalLength += lengthOfThisPage;\n}\n```\n\nAnother solution would be to avoid using a mutable variable reference at all:\n\n``` language-js\nPromise.all([getPageLength(1), getPageLength(2)]).then(pageLengths => {\n  const totalLength = pageLengths.reduce((accumulator, length) => accumulator + length, 0);\n\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\n## Rule Details\n\nThis rule aims to report assignments to variables or properties in cases where the assignments may be based on outdated values.\n\n### Variables\n\nThis rule reports an assignment to a variable when it detects the following execution flow in a generator or async function:\n\n1.  The variable is read.\n2.  A `yield` or `await` pauses the function.\n3.  After the function is resumed, a value is assigned to the variable from step 1.\n\nThe assignment in step 3 is reported because it may be incorrectly resolved because the value of the variable from step 1 may have changed between steps 2 and 3. In particular, if the variable can be accessed from other execution contexts (for example, if it is not a local variable and therefore other functions can change it), the value of the variable may have changed elsewhere while the function was paused in step 2.\n\nNote that the rule does not report the assignment in step 3 in any of the following cases:\n\n- If the variable is read again between steps 2 and 3.\n- If the variable cannot be accessed while the function is paused (for example, if it’s a local variable).\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBlcnJvciAqL1xuXG5sZXQgcmVzdWx0O1xuXG5hc3luYyBmdW5jdGlvbiBmb28oKSB7XG4gICAgcmVzdWx0ICs9IGF3YWl0IHNvbWV0aGluZztcbn1cblxuYXN5bmMgZnVuY3Rpb24gYmFyKCkge1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIGF3YWl0IHNvbWV0aGluZztcbn1cblxuYXN5bmMgZnVuY3Rpb24gYmF6KCkge1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIGRvU29tZXRoaW5nKGF3YWl0IHNvbWV0aGluZ0Vsc2UpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBxdXgoKSB7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgaW5pdGlhbGl6ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24qIGdlbmVyYXRvcigpIHtcbiAgICByZXN1bHQgKz0geWllbGQ7XG59In0=)\n\n``` language-js\n/* eslint require-atomic-updates: error */\n\nlet result;\n\nasync function foo() {\n    result += await something;\n}\n\nasync function bar() {\n    result = result + await something;\n}\n\nasync function baz() {\n    result = result + doSomething(await somethingElse);\n}\n\nasync function qux() {\n    if (!result) {\n        result = await initialize();\n    }\n}\n\nfunction* generator() {\n    result += yield;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBlcnJvciAqL1xuXG5sZXQgcmVzdWx0O1xuXG5hc3luYyBmdW5jdGlvbiBmb29iYXIoKSB7XG4gICAgcmVzdWx0ID0gYXdhaXQgc29tZXRoaW5nICsgcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBiYXooKSB7XG4gICAgY29uc3QgdG1wID0gZG9Tb21ldGhpbmcoYXdhaXQgc29tZXRoaW5nRWxzZSk7XG4gICAgcmVzdWx0ICs9IHRtcDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcXV4KCkge1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHRtcCA9IGF3YWl0IGluaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRtcDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcXV1eCgpIHtcbiAgICBsZXQgbG9jYWxWYXJpYWJsZSA9IDA7XG4gICAgbG9jYWxWYXJpYWJsZSArPSBhd2FpdCBzb21ldGhpbmc7XG59XG5cbmZ1bmN0aW9uKiBnZW5lcmF0b3IoKSB7XG4gICAgcmVzdWx0ID0gKHlpZWxkKSArIHJlc3VsdDtcbn0ifQ==)\n\n``` language-js\n/* eslint require-atomic-updates: error */\n\nlet result;\n\nasync function foobar() {\n    result = await something + result;\n}\n\nasync function baz() {\n    const tmp = doSomething(await somethingElse);\n    result += tmp;\n}\n\nasync function qux() {\n    if (!result) {\n        const tmp = await initialize();\n        if (!result) {\n            result = tmp;\n        }\n    }\n}\n\nasync function quux() {\n    let localVariable = 0;\n    localVariable += await something;\n}\n\nfunction* generator() {\n    result = (yield) + result;\n}\n```\n\n### Properties\n\nThis rule reports an assignment to a property through a variable when it detects the following execution flow in a generator or async function:\n\n1.  The variable or object property is read.\n2.  A `yield` or `await` pauses the function.\n3.  After the function is resumed, a value is assigned to a property.\n\nThis logic is similar to the logic for variables, but stricter because the property in step 3 doesn’t have to be the same as the property in step 1. It is assumed that the flow depends on the state of the object as a whole.\n\nExample of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBlcnJvciAqL1xuXG5hc3luYyBmdW5jdGlvbiBmb28ob2JqKSB7XG4gICAgaWYgKCFvYmouZG9uZSkge1xuICAgICAgICBvYmouc29tZXRoaW5nID0gYXdhaXQgZ2V0U29tZXRoaW5nKCk7XG4gICAgfVxufSJ9)\n\n``` language-js\n/* eslint require-atomic-updates: error */\n\nasync function foo(obj) {\n    if (!obj.done) {\n        obj.something = await getSomething();\n    }\n}\n```\n\nExample of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBlcnJvciAqL1xuXG5hc3luYyBmdW5jdGlvbiBmb28ob2JqKSB7XG4gICAgaWYgKCFvYmouZG9uZSkge1xuICAgICAgICBjb25zdCB0bXAgPSBhd2FpdCBnZXRTb21ldGhpbmcoKTtcbiAgICAgICAgaWYgKCFvYmouZG9uZSkge1xuICAgICAgICAgICAgb2JqLnNvbWV0aGluZyA9IHRtcDtcbiAgICAgICAgfVxuICAgIH1cbn0ifQ==)\n\n``` language-js\n/* eslint require-atomic-updates: error */\n\nasync function foo(obj) {\n    if (!obj.done) {\n        const tmp = await getSomething();\n        if (!obj.done) {\n            obj.something = tmp;\n        }\n    }\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"allowProperties\"`: When set to `true`, the rule does not report assignments to properties. Default is `false`.\n\n### allowProperties\n\nExample of **correct** code for this rule with the `{ \"allowProperties\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dQcm9wZXJ0aWVzXCI6IHRydWUgfV0gKi9cblxuYXN5bmMgZnVuY3Rpb24gZm9vKG9iaikge1xuICAgIGlmICghb2JqLmRvbmUpIHtcbiAgICAgICAgb2JqLnNvbWV0aGluZyA9IGF3YWl0IGdldFNvbWV0aGluZygpO1xuICAgIH1cbn0ifQ==)\n\n``` language-js\n/* eslint require-atomic-updates: [\"error\", { \"allowProperties\": true }] */\n\nasync function foo(obj) {\n    if (!obj.done) {\n        obj.something = await getSomething();\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don’t use async or generator functions, you don’t need to enable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v5.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/require-atomic-updates.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/require-atomic-updates.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/require-atomic-updates](https://eslint.org/docs/latest/rules/require-atomic-updates)"
- name: require-await
  id: rules/require-await
  summary: Asynchronous functions that don’t use await might not need to be asynchronous functions and could be the unintentional result of refactoring
  description: "# require-await\n\nDisallow async functions which have no `await` expression\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nAsynchronous functions in JavaScript behave differently than other functions in two important ways:\n\n1.  The return value is always a `Promise`.\n2.  You can use the `await` operator inside of them.\n\nThe primary reason to use asynchronous functions is typically to use the `await` operator, such as this:\n\n``` language-js\nasync function fetchData(processDataItem) {\n    const response = await fetch(DATA_URL);\n    const data = await response.json();\n\n    return data.map(processDataItem);\n}\n```\n\nAsynchronous functions that don’t use `await` might not need to be asynchronous functions and could be the unintentional result of refactoring.\n\nNote: this rule ignores async generator functions. This is because generators yield rather than return a value and async generators might yield all the values of another async generator without ever actually needing to use await.\n\n## Rule Details\n\nThis rule warns async functions which have no `await` expression.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUtYXdhaXQ6IFwiZXJyb3JcIiovXG5cbmFzeW5jIGZ1bmN0aW9uIGZvbygpIHtcbiAgICBkb1NvbWV0aGluZygpO1xufVxuXG5iYXIoYXN5bmMgKCkgPT4ge1xuICAgIGRvU29tZXRoaW5nKCk7XG59KTsifQ==)\n\n``` language-js\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    doSomething();\n}\n\nbar(async () => {\n    doSomething();\n});\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUtYXdhaXQ6IFwiZXJyb3JcIiovXG5cbmFzeW5jIGZ1bmN0aW9uIGZvbygpIHtcbiAgICBhd2FpdCBkb1NvbWV0aGluZygpO1xufVxuXG5iYXIoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRvU29tZXRoaW5nKCk7XG59KTtcblxuZnVuY3Rpb24gYmF6KCkge1xuICAgIGRvU29tZXRoaW5nKCk7XG59XG5cbmJhcigoKSA9PiB7XG4gICAgZG9Tb21ldGhpbmcoKTtcbn0pO1xuXG4vLyBBbGxvdyBlbXB0eSBmdW5jdGlvbnMuXG5hc3luYyBmdW5jdGlvbiBub29wKCkge30ifQ==)\n\n``` language-js\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    await doSomething();\n}\n\nbar(async () => {\n    await doSomething();\n});\n\nfunction baz() {\n    doSomething();\n}\n\nbar(() => {\n    doSomething();\n});\n\n// Allow empty functions.\nasync function noop() {}\n```\n\n## When Not To Use It\n\nAsynchronous functions are designed to work with promises such that throwing an error will cause a promise’s rejection handler (such as `catch()`) to be called. For example:\n\n``` language-js\nasync function fail() {\n    throw new Error(\"Failure!\");\n}\n\nfail().catch(error => {\n    console.log(error.message);\n});\n```\n\nIn this case, the `fail()` function throws an error that is intended to be caught by the `catch()` handler assigned later. Converting the `fail()` function into a synchronous function would require the call to `fail()` to be refactored to use a `try-catch` statement instead of a promise.\n\nIf you are throwing an error inside of an asynchronous function for this purpose, then you may want to disable this rule.\n\n## Related Rules\n\n- [require-yield](require-yield)\n\n## Version\n\nThis rule was introduced in ESLint v3.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/require-await.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/require-await.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/require-await](https://eslint.org/docs/latest/rules/require-await)"
- name: require-unicode-regexp
  id: rules/require-unicode-regexp
  summary: Make the regular expression handling UTF-16 surrogate pairs correctly
  description: "# require-unicode-regexp\n\nEnforce the use of `u` or `v` flag on RegExp\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](require-unicode-regexp../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nRegExp `u` flag has two effects:\n\n1.  **Make the regular expression handling UTF-16 surrogate pairs correctly.**\n\n    Especially, character range syntax gets the correct behavior.\n\n    ``` language-js\n    /^[👍]$/.test(\"👍\") //→ false\n    /^[👍]$/u.test(\"👍\") //→ true\n    ```\n\n2.  **Make the regular expression throwing syntax errors early as disabling [Annex B extensions](https://www.ecma-international.org/ecma-262/6.0/#sec-regular-expressions-patterns).**\n\n    Because of historical reason, JavaScript regular expressions are tolerant of syntax errors. For example, `/\\w{1, 2/` is a syntax error, but JavaScript doesn’t throw the error. It matches strings such as `\"a{1, 2\"` instead. Such a recovering logic is defined in Annex B.\n\n    The `u` flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to [the strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\nThe RegExp `v` flag, introduced in ECMAScript 2024, is a superset of the `u` flag, and offers two more features:\n\n1.  **Unicode properties of strings**\n\n    With the Unicode property escape, you can use properties of strings.\n\n    ``` language-js\n    const re = /^\\p{RGI_Emoji}$/v;\n\n    // Match an emoji that consists of just 1 code point:\n    re.test('⚽'); // '\\u26BD'\n    // → true ✅\n\n    // Match an emoji that consists of multiple code points:\n    re.test('👨🏾‍⚕️'); // '\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'\n    // → true ✅\n    ```\n\n2.  **Set notation**\n\n    It allows for set operations between character classes.\n\n    ``` language-js\n    const re = /[\\p{White_Space}&&\\p{ASCII}]/v;\n    re.test('\\n'); // → true\n    re.test('\\u2028'); // → false\n    ```\n\nTherefore, the `u` and `v` flags let us work better with regular expressions.\n\n## Rule Details\n\nThis rule aims to enforce the use of `u` or `v` flag on regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUtdW5pY29kZS1yZWdleHA6IGVycm9yICovXG5cbmNvbnN0IGEgPSAvYWFhL1xuY29uc3QgYiA9IC9iYmIvZ2lcbmNvbnN0IGMgPSBuZXcgUmVnRXhwKFwiY2NjXCIpXG5jb25zdCBkID0gbmV3IFJlZ0V4cChcImRkZFwiLCBcImdpXCIpIn0=)\n\n``` language-js\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/\nconst b = /bbb/gi\nconst c = new RegExp(\"ccc\")\nconst d = new RegExp(\"ddd\", \"gi\")\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUtdW5pY29kZS1yZWdleHA6IGVycm9yICovXG5cbmNvbnN0IGEgPSAvYWFhL3VcbmNvbnN0IGIgPSAvYmJiL2dpdVxuY29uc3QgYyA9IG5ldyBSZWdFeHAoXCJjY2NcIiwgXCJ1XCIpXG5jb25zdCBkID0gbmV3IFJlZ0V4cChcImRkZFwiLCBcImdpdVwiKVxuXG5jb25zdCBlID0gL2FhYS92XG5jb25zdCBmID0gL2JiYi9naXZcbmNvbnN0IGcgPSBuZXcgUmVnRXhwKFwiY2NjXCIsIFwidlwiKVxuY29uc3QgaCA9IG5ldyBSZWdFeHAoXCJkZGRcIiwgXCJnaXZcIilcblxuLy8gVGhpcyBydWxlIGlnbm9yZXMgUmVnRXhwIGNhbGxzIGlmIHRoZSBmbGFncyBjb3VsZCBub3QgYmUgZXZhbHVhdGVkIHRvIGEgc3RhdGljIHZhbHVlLlxuZnVuY3Rpb24gaShmbGFncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiZWVlXCIsIGZsYWdzKVxufSJ9)\n\n``` language-js\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/u\nconst b = /bbb/giu\nconst c = new RegExp(\"ccc\", \"u\")\nconst d = new RegExp(\"ddd\", \"giu\")\n\nconst e = /aaa/v\nconst f = /bbb/giv\nconst g = new RegExp(\"ccc\", \"v\")\nconst h = new RegExp(\"ddd\", \"giv\")\n\n// This rule ignores RegExp calls if the flags could not be evaluated to a static value.\nfunction i(flags) {\n    return new RegExp(\"eee\", flags)\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to warn on regular expressions without either a `u` or a `v` flag, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v5.3.0.\n\n## Further Reading\n\n[GitHub - tc39/proposal-regexp-v-flag: UTS18 set notation in regular expressions](https://github.com/tc39/proposal-regexp-v-flag)  \n\n[RegExp v flag with set notation and properties of strings · V8](https://v8.dev/features/regexp-v-flag)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/require-unicode-regexp.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/require-unicode-regexp.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/require-unicode-regexp](https://eslint.org/docs/latest/rules/require-unicode-regexp)"
- name: require-yield
  id: rules/require-yield
  summary: This rule generates warnings for generator functions that do not have the yield keyword
  description: "# require-yield\n\nRequire generator functions to contain `yield`\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](require-yield../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\n## Rule Details\n\nThis rule generates warnings for generator functions that do not have the `yield` keyword.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUteWllbGQ6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24qIGZvbygpIHtcbiAgcmV0dXJuIDEwO1xufSJ9)\n\n``` language-js\n/*eslint require-yield: \"error\"*/\n/*eslint-env es6*/\n\nfunction* foo() {\n  return 10;\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHJlcXVpcmUteWllbGQ6IFwiZXJyb3JcIiovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24qIGZvbygpIHtcbiAgeWllbGQgNTtcbiAgcmV0dXJuIDEwO1xufVxuXG5mdW5jdGlvbiBiYXIoKSB7XG4gIHJldHVybiAxMDtcbn1cblxuLy8gVGhpcyBydWxlIGRvZXMgbm90IHdhcm4gb24gZW1wdHkgZ2VuZXJhdG9yIGZ1bmN0aW9ucy5cbmZ1bmN0aW9uKiBiYXooKSB7IH0ifQ==)\n\n``` language-js\n/*eslint require-yield: \"error\"*/\n/*eslint-env es6*/\n\nfunction* foo() {\n  yield 5;\n  return 10;\n}\n\nfunction bar() {\n  return 10;\n}\n\n// This rule does not warn on empty generator functions.\nfunction* baz() { }\n```\n\n## When Not To Use It\n\nIf you don’t want to notify generator functions that have no `yield` expression, then it’s safe to disable this rule.\n\n## Related Rules\n\n- [require-await](require-await)\n\n## Version\n\nThis rule was introduced in ESLint v1.0.0-rc-1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/require-yield.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/require-yield.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/require-yield](https://eslint.org/docs/latest/rules/require-yield)"
- name: Rules Reference
  id: rules/index
  summary: Rules in ESLint are grouped by type to help you understand their purpose
  description: "# Rules Reference\n\n## Table of Contents\n\n1.  [Possible Problems](#possible-problems)\n2.  [Suggestions](#suggestions)\n3.  [Layout & Formatting](#layout--formatting)\n4.  [Deprecated](#deprecated)\n5.  [Removed](#removed)\n\nRules in ESLint are grouped by type to help you understand their purpose. Each rule has emojis denoting:\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](../use/command-line-interface#--fix) option\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](../use/core-concepts#rule-suggestions)\n\n## Possible Problems\n\nThese rules relate to possible logic errors in code:\n\n[array-callback-return](array-callback-return)\n\nEnforce `return` statements in callbacks of array methods\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[constructor-super](constructor-super)\n\nRequire `super()` calls in constructors\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[for-direction](for-direction)\n\nEnforce “for” loop update clause moving the counter in the right direction\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[getter-return](getter-return)\n\nEnforce `return` statements in getters\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-async-promise-executor](no-async-promise-executor)\n\nDisallow using an async function as a Promise executor\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-await-in-loop](no-await-in-loop)\n\nDisallow `await` inside of loops\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-class-assign](no-class-assign)\n\nDisallow reassigning class members\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-compare-neg-zero](no-compare-neg-zero)\n\nDisallow comparing against -0\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-cond-assign](no-cond-assign)\n\nDisallow assignment operators in conditional expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-const-assign](no-const-assign)\n\nDisallow reassigning `const` variables\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-constant-binary-expression](no-constant-binary-expression)\n\nDisallow expressions where the operation doesn’t affect the value\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-constant-condition](no-constant-condition)\n\nDisallow constant expressions in conditions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-constructor-return](no-constructor-return)\n\nDisallow returning value from constructor\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-control-regex](no-control-regex)\n\nDisallow control characters in regular expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-debugger](no-debugger)\n\nDisallow the use of `debugger`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-dupe-args](no-dupe-args)\n\nDisallow duplicate arguments in `function` definitions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-dupe-class-members](no-dupe-class-members)\n\nDisallow duplicate class members\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-dupe-else-if](no-dupe-else-if)\n\nDisallow duplicate conditions in if-else-if chains\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-dupe-keys](no-dupe-keys)\n\nDisallow duplicate keys in object literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-duplicate-case](no-duplicate-case)\n\nDisallow duplicate case labels\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-duplicate-imports](no-duplicate-imports)\n\nDisallow duplicate module imports\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-empty-character-class](no-empty-character-class)\n\nDisallow empty character classes in regular expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-empty-pattern](no-empty-pattern)\n\nDisallow empty destructuring patterns\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-ex-assign](no-ex-assign)\n\nDisallow reassigning exceptions in `catch` clauses\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-fallthrough](no-fallthrough)\n\nDisallow fallthrough of `case` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-func-assign](no-func-assign)\n\nDisallow reassigning `function` declarations\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-import-assign](no-import-assign)\n\nDisallow assigning to imported bindings\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-inner-declarations](no-inner-declarations)\n\nDisallow variable or `function` declarations in nested blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-invalid-regexp](no-invalid-regexp)\n\nDisallow invalid regular expression strings in `RegExp` constructors\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-irregular-whitespace](no-irregular-whitespace)\n\nDisallow irregular whitespace\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-loss-of-precision](no-loss-of-precision)\n\nDisallow literal numbers that lose precision\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-misleading-character-class](no-misleading-character-class)\n\nDisallow characters which are made with multiple code points in character class syntax\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-new-native-nonconstructor](no-new-native-nonconstructor)\n\nDisallow `new` operators with global non-constructor functions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-new-symbol](no-new-symbol)\n\nDisallow `new` operators with the `Symbol` object\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-obj-calls](no-obj-calls)\n\nDisallow calling global object properties as functions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-promise-executor-return](no-promise-executor-return)\n\nDisallow returning values from Promise executor functions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-prototype-builtins](no-prototype-builtins)\n\nDisallow calling some `Object.prototype` methods directly on objects\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-self-assign](no-self-assign)\n\nDisallow assignments where both sides are exactly the same\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-self-compare](no-self-compare)\n\nDisallow comparisons where both sides are exactly the same\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-setter-return](no-setter-return)\n\nDisallow returning values from setters\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-sparse-arrays](no-sparse-arrays)\n\nDisallow sparse arrays\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-template-curly-in-string](no-template-curly-in-string)\n\nDisallow template literal placeholder syntax in regular strings\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-this-before-super](no-this-before-super)\n\nDisallow `this`/`super` before calling `super()` in constructors\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-undef](no-undef)\n\nDisallow the use of undeclared variables unless mentioned in `/*global */` comments\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unexpected-multiline](no-unexpected-multiline)\n\nDisallow confusing multiline expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unmodified-loop-condition](no-unmodified-loop-condition)\n\nDisallow unmodified loop conditions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unreachable](no-unreachable)\n\nDisallow unreachable code after `return`, `throw`, `continue`, and `break` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unreachable-loop](no-unreachable-loop)\n\nDisallow loops with a body that allows only one iteration\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unsafe-finally](no-unsafe-finally)\n\nDisallow control flow statements in `finally` blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unsafe-negation](no-unsafe-negation)\n\nDisallow negating the left operand of relational operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unsafe-optional-chaining](no-unsafe-optional-chaining)\n\nDisallow use of optional chaining in contexts where the `undefined` value is not allowed\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unused-private-class-members](no-unused-private-class-members)\n\nDisallow unused private class members\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unused-vars](no-unused-vars)\n\nDisallow unused variables\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-use-before-define](no-use-before-define)\n\nDisallow the use of variables before they are defined\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-backreference](no-useless-backreference)\n\nDisallow useless backreferences in regular expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[require-atomic-updates](require-atomic-updates)\n\nDisallow assignments that can lead to race conditions due to usage of `await` or `yield`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[use-isnan](use-isnan)\n\nRequire calls to `isNaN()` when checking for `NaN`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[valid-typeof](valid-typeof)\n\nEnforce comparing `typeof` expressions against valid strings\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n## Suggestions\n\nThese rules suggest alternate ways of doing things:\n\n[accessor-pairs](accessor-pairs)\n\nEnforce getter and setter pairs in objects and classes\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[arrow-body-style](arrow-body-style)\n\nRequire braces around arrow function bodies\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[block-scoped-var](block-scoped-var)\n\nEnforce the use of variables within the scope they are defined\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[camelcase](camelcase)\n\nEnforce camelcase naming convention\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[capitalized-comments](capitalized-comments)\n\nEnforce or disallow capitalization of the first letter of a comment\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[class-methods-use-this](class-methods-use-this)\n\nEnforce that class methods utilize `this`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[complexity](complexity)\n\nEnforce a maximum cyclomatic complexity allowed in a program\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[consistent-return](consistent-return)\n\nRequire `return` statements to either always or never specify values\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[consistent-this](consistent-this)\n\nEnforce consistent naming when capturing the current execution context\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[curly](curly)\n\nEnforce consistent brace style for all control statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[default-case](default-case)\n\nRequire `default` cases in `switch` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[default-case-last](default-case-last)\n\nEnforce default clauses in switch statements to be last\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[default-param-last](default-param-last)\n\nEnforce default parameters to be last\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[dot-notation](dot-notation)\n\nEnforce dot notation whenever possible\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[eqeqeq](eqeqeq)\n\nRequire the use of `===` and `!==`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[func-name-matching](func-name-matching)\n\nRequire function names to match the name of the variable or property to which they are assigned\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[func-names](func-names)\n\nRequire or disallow named `function` expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[func-style](func-style)\n\nEnforce the consistent use of either `function` declarations or expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[grouped-accessor-pairs](grouped-accessor-pairs)\n\nRequire grouped accessor pairs in object literals and classes\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[guard-for-in](guard-for-in)\n\nRequire `for-in` loops to include an `if` statement\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[id-denylist](id-denylist)\n\nDisallow specified identifiers\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[id-length](id-length)\n\nEnforce minimum and maximum identifier lengths\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[id-match](id-match)\n\nRequire identifiers to match a specified regular expression\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[init-declarations](init-declarations)\n\nRequire or disallow initialization in variable declarations\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[logical-assignment-operators](logical-assignment-operators)\n\nRequire or disallow logical assignment operator shorthand\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-classes-per-file](max-classes-per-file)\n\nEnforce a maximum number of classes per file\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-depth](max-depth)\n\nEnforce a maximum depth that blocks can be nested\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-lines](max-lines)\n\nEnforce a maximum number of lines per file\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-lines-per-function](max-lines-per-function)\n\nEnforce a maximum number of lines of code in a function\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-nested-callbacks](max-nested-callbacks)\n\nEnforce a maximum depth that callbacks can be nested\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-params](max-params)\n\nEnforce a maximum number of parameters in function definitions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[max-statements](max-statements)\n\nEnforce a maximum number of statements allowed in function blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[multiline-comment-style](multiline-comment-style)\n\nEnforce a particular style for multiline comments\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[new-cap](new-cap)\n\nRequire constructor names to begin with a capital letter\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-alert](no-alert)\n\nDisallow the use of `alert`, `confirm`, and `prompt`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-array-constructor](no-array-constructor)\n\nDisallow `Array` constructors\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-bitwise](no-bitwise)\n\nDisallow bitwise operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-caller](no-caller)\n\nDisallow the use of `arguments.caller` or `arguments.callee`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-case-declarations](no-case-declarations)\n\nDisallow lexical declarations in case clauses\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-console](no-console)\n\nDisallow the use of `console`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-continue](no-continue)\n\nDisallow `continue` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-delete-var](no-delete-var)\n\nDisallow deleting variables\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-div-regex](no-div-regex)\n\nDisallow equal signs explicitly at the beginning of regular expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-else-return](no-else-return)\n\nDisallow `else` blocks after `return` statements in `if` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-empty](no-empty)\n\nDisallow empty block statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-empty-function](no-empty-function)\n\nDisallow empty functions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-empty-static-block](no-empty-static-block)\n\nDisallow empty static blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-eq-null](no-eq-null)\n\nDisallow `null` comparisons without type-checking operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-eval](no-eval)\n\nDisallow the use of `eval()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-extend-native](no-extend-native)\n\nDisallow extending native types\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-extra-bind](no-extra-bind)\n\nDisallow unnecessary calls to `.bind()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-extra-boolean-cast](no-extra-boolean-cast)\n\nDisallow unnecessary boolean casts\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-extra-label](no-extra-label)\n\nDisallow unnecessary labels\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-global-assign](no-global-assign)\n\nDisallow assignments to native objects or read-only global variables\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-implicit-coercion](no-implicit-coercion)\n\nDisallow shorthand type conversions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-implicit-globals](no-implicit-globals)\n\nDisallow declarations in the global scope\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-implied-eval](no-implied-eval)\n\nDisallow the use of `eval()`-like methods\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-inline-comments](no-inline-comments)\n\nDisallow inline comments after code\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-invalid-this](no-invalid-this)\n\nDisallow use of `this` in contexts where the value of `this` is `undefined`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-iterator](no-iterator)\n\nDisallow the use of the `__iterator__` property\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-label-var](no-label-var)\n\nDisallow labels that share a name with a variable\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-labels](no-labels)\n\nDisallow labeled statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-lone-blocks](no-lone-blocks)\n\nDisallow unnecessary nested blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-lonely-if](no-lonely-if)\n\nDisallow `if` statements as the only statement in `else` blocks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-loop-func](no-loop-func)\n\nDisallow function declarations that contain unsafe references inside loop statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-magic-numbers](no-magic-numbers)\n\nDisallow magic numbers\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-multi-assign](no-multi-assign)\n\nDisallow use of chained assignment expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-multi-str](no-multi-str)\n\nDisallow multiline strings\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-negated-condition](no-negated-condition)\n\nDisallow negated conditions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-nested-ternary](no-nested-ternary)\n\nDisallow nested ternary expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-new](no-new)\n\nDisallow `new` operators outside of assignments or comparisons\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-new-func](no-new-func)\n\nDisallow `new` operators with the `Function` object\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-new-wrappers](no-new-wrappers)\n\nDisallow `new` operators with the `String`, `Number`, and `Boolean` objects\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-nonoctal-decimal-escape](no-nonoctal-decimal-escape)\n\nDisallow `\\8` and `\\9` escape sequences in string literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-object-constructor](no-object-constructor)\n\nDisallow calls to the `Object` constructor without an argument\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-octal](no-octal)\n\nDisallow octal literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-octal-escape](no-octal-escape)\n\nDisallow octal escape sequences in string literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-param-reassign](no-param-reassign)\n\nDisallow reassigning `function` parameters\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-plusplus](no-plusplus)\n\nDisallow the unary operators `++` and `--`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-proto](no-proto)\n\nDisallow the use of the `__proto__` property\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-redeclare](no-redeclare)\n\nDisallow variable redeclaration\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-regex-spaces](no-regex-spaces)\n\nDisallow multiple spaces in regular expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-restricted-exports](no-restricted-exports)\n\nDisallow specified names in exports\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-restricted-globals](no-restricted-globals)\n\nDisallow specified global variables\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-restricted-imports](no-restricted-imports)\n\nDisallow specified modules when loaded by `import`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-restricted-properties](no-restricted-properties)\n\nDisallow certain properties on certain objects\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-restricted-syntax](no-restricted-syntax)\n\nDisallow specified syntax\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-return-assign](no-return-assign)\n\nDisallow assignment operators in `return` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-script-url](no-script-url)\n\nDisallow `javascript:` urls\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-sequences](no-sequences)\n\nDisallow comma operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-shadow](no-shadow)\n\nDisallow variable declarations from shadowing variables declared in the outer scope\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-shadow-restricted-names](no-shadow-restricted-names)\n\nDisallow identifiers from shadowing restricted names\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-ternary](no-ternary)\n\nDisallow ternary operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-throw-literal](no-throw-literal)\n\nDisallow throwing literals as exceptions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-undef-init](no-undef-init)\n\nDisallow initializing variables to `undefined`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-undefined](no-undefined)\n\nDisallow the use of `undefined` as an identifier\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-underscore-dangle](no-underscore-dangle)\n\nDisallow dangling underscores in identifiers\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unneeded-ternary](no-unneeded-ternary)\n\nDisallow ternary operators when simpler alternatives exist\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unused-expressions](no-unused-expressions)\n\nDisallow unused expressions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-unused-labels](no-unused-labels)\n\nDisallow unused labels\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-call](no-useless-call)\n\nDisallow unnecessary calls to `.call()` and `.apply()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-catch](no-useless-catch)\n\nDisallow unnecessary `catch` clauses\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-computed-key](no-useless-computed-key)\n\nDisallow unnecessary computed property keys in objects and classes\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-concat](no-useless-concat)\n\nDisallow unnecessary concatenation of literals or template literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-constructor](no-useless-constructor)\n\nDisallow unnecessary constructors\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-escape](no-useless-escape)\n\nDisallow unnecessary escape characters\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-rename](no-useless-rename)\n\nDisallow renaming import, export, and destructured assignments to the same name\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-useless-return](no-useless-return)\n\nDisallow redundant return statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-var](no-var)\n\nRequire `let` or `const` instead of `var`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-void](no-void)\n\nDisallow `void` operators\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-warning-comments](no-warning-comments)\n\nDisallow specified warning terms in comments\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[no-with](no-with)\n\nDisallow `with` statements\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[object-shorthand](object-shorthand)\n\nRequire or disallow method and property shorthand syntax for object literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[one-var](one-var)\n\nEnforce variables to be declared either together or separately in functions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[operator-assignment](operator-assignment)\n\nRequire or disallow assignment operator shorthand where possible\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-arrow-callback](prefer-arrow-callback)\n\nRequire using arrow functions for callbacks\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-const](prefer-const)\n\nRequire `const` declarations for variables that are never reassigned after declared\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-destructuring](prefer-destructuring)\n\nRequire destructuring from arrays and/or objects\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-exponentiation-operator](prefer-exponentiation-operator)\n\nDisallow the use of `Math.pow` in favor of the `**` operator\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-named-capture-group](prefer-named-capture-group)\n\nEnforce using named capture group in regular expression\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-numeric-literals](prefer-numeric-literals)\n\nDisallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-object-has-own](prefer-object-has-own)\n\nDisallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-object-spread](prefer-object-spread)\n\nDisallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-promise-reject-errors](prefer-promise-reject-errors)\n\nRequire using Error objects as Promise rejection reasons\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-regex-literals](prefer-regex-literals)\n\nDisallow use of the `RegExp` constructor in favor of regular expression literals\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-rest-params](prefer-rest-params)\n\nRequire rest parameters instead of `arguments`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-spread](prefer-spread)\n\nRequire spread operators instead of `.apply()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[prefer-template](prefer-template)\n\nRequire template literals instead of string concatenation\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[radix](radix)\n\nEnforce the consistent use of the radix argument when using `parseInt()`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[require-await](require-await)\n\nDisallow async functions which have no `await` expression\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[require-unicode-regexp](require-unicode-regexp)\n\nEnforce the use of `u` or `v` flag on RegExp\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[require-yield](require-yield)\n\nRequire generator functions to contain `yield`\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[sort-imports](sort-imports)\n\nEnforce sorted import declarations within modules\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[sort-keys](sort-keys)\n\nRequire object keys to be sorted\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[sort-vars](sort-vars)\n\nRequire variables within the same declaration block to be sorted\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[strict](strict)\n\nRequire or disallow strict mode directives\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[symbol-description](symbol-description)\n\nRequire symbol descriptions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[vars-on-top](vars-on-top)\n\nRequire `var` declarations be placed at the top of their containing scope\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[yoda](yoda)\n\nRequire or disallow “Yoda” conditions\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n## Layout & Formatting\n\nThese rules care about how the code looks rather than how it executes:\n\n[line-comment-position](line-comment-position)\n\nEnforce position of line comments\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n[unicode-bom](unicode-bom)\n\nRequire or disallow Unicode byte order mark (BOM)\n\nCategories:\n\n✅ Extends\n\n🔧 Fix\n\n💡 Suggestions\n\n## Deprecated\n\nThese rules have been deprecated in accordance with the [deprecation policy](https://eslint.org/docs/latest/use/rule-deprecation), and replaced by newer rules:\n\narray-bracket-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\narray-bracket-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\narray-element-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\narrow-parens deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\narrow-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nblock-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nbrace-style deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ncallback-return deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ncomma-dangle deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ncomma-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ncomma-style deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ncomputed-property-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ndot-location deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\neol-last deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nfunc-call-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nfunction-call-argument-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nfunction-paren-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ngenerator-star-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nglobal-require deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nhandle-callback-err deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nid-blacklist deprecated\n\nReplaced by [`id-denylist`](id-denylist)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nimplicit-arrow-linebreak deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nindent deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nindent-legacy deprecated\n\nReplaced by [`indent`](indent)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\njsx-quotes deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nkey-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nkeyword-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nlinebreak-style deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nlines-around-comment deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nlines-around-directive deprecated\n\nReplaced by [`padding-line-between-statements`](padding-line-between-statements)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nlines-between-class-members deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nmax-len deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nmax-statements-per-line deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nmultiline-ternary deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nnew-parens deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nnewline-after-var deprecated\n\nReplaced by [`padding-line-between-statements`](padding-line-between-statements)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nnewline-before-return deprecated\n\nReplaced by [`padding-line-between-statements`](padding-line-between-statements)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nnewline-per-chained-call deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-buffer-constructor deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-catch-shadow deprecated\n\nReplaced by [`no-shadow`](no-shadow)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-confusing-arrow deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-extra-parens deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-extra-semi deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-floating-decimal deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-mixed-operators deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-mixed-requires deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-mixed-spaces-and-tabs deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-multi-spaces deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-multiple-empty-lines deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-native-reassign deprecated\n\nReplaced by [`no-global-assign`](no-global-assign)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-negated-in-lhs deprecated\n\nReplaced by [`no-unsafe-negation`](no-unsafe-negation)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-new-object deprecated\n\nReplaced by [`no-object-constructor`](no-object-constructor)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-new-require deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-path-concat deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-process-env deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-process-exit deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-restricted-modules deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-return-await deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-spaced-func deprecated\n\nReplaced by [`func-call-spacing`](func-call-spacing)\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-sync deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-tabs deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-trailing-spaces deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nno-whitespace-before-property deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nnonblock-statement-body-position deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nobject-curly-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nobject-curly-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nobject-property-newline deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\none-var-declaration-per-line deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\noperator-linebreak deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\npadded-blocks deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\npadding-line-between-statements deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nprefer-reflect deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nquote-props deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nquotes deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nrequire-jsdoc deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nrest-spread-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nsemi deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nsemi-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nsemi-style deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspace-before-blocks deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspace-before-function-paren deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspace-in-parens deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspace-infix-ops deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspace-unary-ops deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nspaced-comment deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nswitch-colon-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ntemplate-curly-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\ntemplate-tag-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nvalid-jsdoc deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nwrap-iife deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nwrap-regex deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\nyield-star-spacing deprecated\n\nCategories:\n\n❌\n\n🔧 Fix\n\n💡 Suggestions\n\n## Removed\n\nThese rules from older versions of ESLint (before the [deprecation policy](https://eslint.org/docs/latest/use/rule-deprecation) existed) have been replaced by newer rules:\n\ngenerator-star removed\n\nReplaced by [`generator-star-spacing`](generator-star-spacing)\n\nglobal-strict removed\n\nReplaced by [`strict`](strict)\n\nno-arrow-condition removed\n\nReplaced by [`no-confusing-arrow`](no-confusing-arrow)[`no-constant-condition`](no-constant-condition)\n\nno-comma-dangle removed\n\nReplaced by [`comma-dangle`](comma-dangle)\n\nno-empty-class removed\n\nReplaced by [`no-empty-character-class`](no-empty-character-class)\n\nno-empty-label removed\n\nReplaced by [`no-labels`](no-labels)\n\nno-extra-strict removed\n\nReplaced by [`strict`](strict)\n\nno-reserved-keys removed\n\nReplaced by [`quote-props`](quote-props)\n\nno-space-before-semi removed\n\nReplaced by [`semi-spacing`](semi-spacing)\n\nno-wrap-func removed\n\nReplaced by [`no-extra-parens`](no-extra-parens)\n\nspace-after-function-name removed\n\nReplaced by [`space-before-function-paren`](space-before-function-paren)\n\nspace-after-keywords removed\n\nReplaced by [`keyword-spacing`](keyword-spacing)\n\nspace-before-function-parentheses removed\n\nReplaced by [`space-before-function-paren`](space-before-function-paren)\n\nspace-before-keywords removed\n\nReplaced by [`keyword-spacing`](keyword-spacing)\n\nspace-in-brackets removed\n\nReplaced by [`object-curly-spacing`](object-curly-spacing)[`array-bracket-spacing`](array-bracket-spacing)\n\nspace-return-throw-case removed\n\nReplaced by [`keyword-spacing`](keyword-spacing)\n\nspace-unary-word-ops removed\n\nReplaced by [`space-unary-ops`](space-unary-ops)\n\nspaced-line-comment removed\n\nReplaced by [`spaced-comment`](spaced-comment)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/](https://eslint.org/docs/latest/rules/)"
- name: Run the Tests
  id: contribute/tests
  summary: Most parts of ESLint have unit tests associated with them
  description: "# Run the Tests\n\n## Table of Contents\n\n1.  [Running Individual Tests](#running-individual-tests)\n2.  [More Control on Unit Testing](#more-control-on-unit-testing)\n\nMost parts of ESLint have unit tests associated with them. Unit tests are written using [Mocha](https://mochajs.org/) and are required when making contributions to ESLint. You’ll find all of the unit tests in the `tests` directory.\n\nWhen you first get the source code, you need to run `npm install` once initially to set ESLint for development. Once you’ve done that, you can run the tests via:\n\n``` language-shell\nnpm test\n```\n\nThis automatically starts Mocha and runs all tests in the `tests` directory. You need only add yours and it will automatically be picked up when running tests.\n\n## Running Individual Tests\n\nIf you want to quickly run just one test file, you can do so by running Mocha directly and passing in the filename. For example:\n\n``` language-shell\nnpm run test:cli tests/lib/rules/no-undef.js\n```\n\nIf you want to run just one or a subset of `RuleTester` test cases, add `only: true` to each test case or wrap the test case in `RuleTester.only(...)` to add it automatically:\n\n``` language-js\nruleTester.run(\"my-rule\", myRule, {\n    valid: [\n        RuleTester.only(\"const valid = 42;\"),\n        // Other valid cases\n    ],\n    invalid: [\n        {\n            code: \"const invalid = 42;\",\n            only: true,\n        },\n        // Other invalid cases\n    ]\n})\n```\n\nRunning individual tests is useful when you’re working on a specific bug and iterating on the solution. You should be sure to run `npm test` before submitting a pull request. `npm test` uses Mocha’s `--forbid-only` option to prevent `only` tests from passing full test runs.\n\n## More Control on Unit Testing\n\n`npm run test:cli` is an alias of the Mocha cli in `./node_modules/.bin/mocha`. [Options](https://mochajs.org/#command-line-usage) are available to be provided to help to better control the test to run.\n\nThe default timeout for tests in `npm test` is 10000ms. You may change the timeout by providing `ESLINT_MOCHA_TIMEOUT` environment variable, for example:\n\n``` language-shell\nESLINT_MOCHA_TIMEOUT=20000 npm test\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/tests](https://eslint.org/docs/latest/contribute/tests)"
- name: semi
  id: rules/semi
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# semi\n\nRequire or disallow semicolons instead of ASI\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](semi../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n        1.  [omitLastInOneLineBlock](#omitlastinonelineblock)\n        2.  [omitLastInOneLineClassBody](#omitlastinonelineclassbody)\n    2.  [never](#never)\n        1.  [beforeStatementContinuationChars](#beforestatementcontinuationchars)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Further Reading](#further-reading)\n7.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/semi) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nJavaScript doesn’t require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as **automatic semicolon insertion (ASI)** and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:\n\n``` language-js\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\nOn the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.\n\nIn the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn’t exist and always include semicolons manually. The rationale is that it’s easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.\n\nHowever, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:\n\n``` language-js\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\nThis may look like a `return` statement that returns an object literal, however, the JavaScript engine will interpret this code as:\n\n``` language-js\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\nEffectively, a semicolon is inserted after the `return` statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the [no-unreachable](semino-unreachable) rule will protect your code from such cases.\n\nOn the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don’t use semicolons. For example, consider this code:\n\n``` language-js\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\nIn this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it’s a function). The [no-unexpected-multiline](semino-unexpected-multiline) rule can protect your code from such cases.\n\nAlthough ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a `\\n` character always ends a statement (just like a semicolon) unless one of the following is true:\n\n1.  The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n2.  The line is `--` or `++` (in which case it will decrement/increment the next token.)\n3.  It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n4.  The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\n## Rule Details\n\nThis rule enforces consistent use of semicolons.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n- `\"always\"` (default) requires semicolons at the end of statements\n- `\"never\"` disallows semicolons at the end of statements (except to disambiguate statements beginning with `[`, `(`, `/`, `+`, or `-`)\n\nObject option (when `\"always\"`):\n\n- `\"omitLastInOneLineBlock\": true` disallows the last semicolon in a block in which its braces (and therefore the content of the block) are in the same line\n- `\"omitLastInOneLineClassBody\": true` disallows the last semicolon in a class body in which its braces (and therefore the content of the class body) are in the same line\n\nObject option (when `\"never\"`):\n\n- `\"beforeStatementContinuationChars\": \"any\"` (default) ignores semicolons (or lacking semicolon) at the end of statements if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n- `\"beforeStatementContinuationChars\": \"always\"` requires semicolons at the end of statements if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n- `\"beforeStatementContinuationChars\": \"never\"` disallows semicolons at the end of statements if it doesn’t make ASI hazard even if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n\n**Note:** `beforeStatementContinuationChars` does not apply to class fields because class fields are not statements.\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxudmFyIG5hbWUgPSBcIkVTTGludFwiXG5cbm9iamVjdC5tZXRob2QgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn1cblxuY2xhc3MgRm9vIHtcbiAgICBiYXIgPSAxXG59In0=)\n\n``` language-js\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nclass Foo {\n    bar = 1\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFwiZXJyb3JcIiovXG5cbnZhciBuYW1lID0gXCJFU0xpbnRcIjtcblxub2JqZWN0Lm1ldGhvZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBiYXIgPSAxO1xufSJ9)\n\n``` language-js\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n\nclass Foo {\n    bar = 1;\n}\n```\n\n#### omitLastInOneLineBlock\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineBlock\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJvbWl0TGFzdEluT25lTGluZUJsb2NrXCI6IHRydWV9XSAqL1xuXG5pZiAoZm9vKSB7IGJhcigpIH1cblxuaWYgKGZvbykgeyBiYXIoKTsgYmF6KCkgfVxuXG5mdW5jdGlvbiBmKCkgeyBiYXIoKTsgYmF6KCkgfVxuXG5jbGFzcyBDIHtcbiAgICBmb28oKSB7IGJhcigpOyBiYXooKSB9XG5cbiAgICBzdGF0aWMgeyBiYXIoKTsgYmF6KCkgfVxufSJ9)\n\n``` language-js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n\nfunction f() { bar(); baz() }\n\nclass C {\n    foo() { bar(); baz() }\n\n    static { bar(); baz() }\n}\n```\n\n#### omitLastInOneLineClassBody\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineClassBody\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwiYWx3YXlzXCIsIHsgXCJvbWl0TGFzdEluT25lTGluZUNsYXNzQm9keVwiOiB0cnVlfV0gKi9cblxuZXhwb3J0IGNsYXNzIFNvbWVDbGFzc3tcbiAgICBsb2dUeXBlKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMudHlwZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYW5vdGhlclR5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhcmlhbnQxIGV4dGVuZHMgU29tZUNsYXNze3R5cGU9MX1cbmV4cG9ydCBjbGFzcyBWYXJpYW50MiBleHRlbmRzIFNvbWVDbGFzc3t0eXBlPTI7IGFub3RoZXJUeXBlPTN9In0=)\n\n``` language-js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineClassBody\": true}] */\n\nexport class SomeClass{\n    logType(){\n        console.log(this.type);\n        console.log(this.anotherType);\n    }\n}\n\nexport class Variant1 extends SomeClass{type=1}\nexport class Variant2 extends SomeClass{type=2; anotherType=3}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG52YXIgbmFtZSA9IFwiRVNMaW50XCI7XG5cbm9iamVjdC5tZXRob2QgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn07XG5cbmNsYXNzIEZvbyB7XG4gICAgYmFyID0gMTtcbn0ifQ==)\n\n``` language-js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n\nclass Foo {\n    bar = 1;\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG52YXIgbmFtZSA9IFwiRVNMaW50XCJcblxub2JqZWN0Lm1ldGhvZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufVxuXG52YXIgbmFtZSA9IFwiRVNMaW50XCJcblxuOyhmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn0pKClcblxuaW1wb3J0IGEgZnJvbSBcImFcIlxuKGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufSkoKVxuXG5pbXBvcnQgYiBmcm9tIFwiYlwiXG47KGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufSkoKVxuXG5jbGFzcyBGb28ge1xuICAgIGJhciA9IDFcbn0ifQ==)\n\n``` language-js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n\nimport a from \"a\"\n(function() {\n    // ...\n})()\n\nimport b from \"b\"\n;(function() {\n    // ...\n})()\n\nclass Foo {\n    bar = 1\n}\n```\n\n#### beforeStatementContinuationChars\n\nExamples of additional **incorrect** code for this rule with the `\"never\", { \"beforeStatementContinuationChars\": \"always\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImJlZm9yZVN0YXRlbWVudENvbnRpbnVhdGlvbkNoYXJzXCI6IFwiYWx3YXlzXCJ9XSAqL1xuaW1wb3J0IGEgZnJvbSBcImFcIlxuXG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59KSgpIn0=)\n\n``` language-js\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"always\"}] */\nimport a from \"a\"\n\n(function() {\n    // ...\n})()\n```\n\nExamples of additional **incorrect** code for this rule with the `\"never\", { \"beforeStatementContinuationChars\": \"never\" }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWk6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImJlZm9yZVN0YXRlbWVudENvbnRpbnVhdGlvbkNoYXJzXCI6IFwibmV2ZXJcIn1dICovXG5pbXBvcnQgYSBmcm9tIFwiYVwiXG5cbjsoZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59KSgpIn0=)\n\n``` language-js\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"never\"}] */\nimport a from \"a\"\n\n;(function() {\n    // ...\n})()\n```\n\n## When Not To Use It\n\nIf you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.\n\n## Related Rules\n\n- [no-extra-semi](no-extra-semi)\n- [no-unexpected-multiline](no-unexpected-multiline)\n- [semi-spacing](semi-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Further Reading\n\n[An Open Letter to JavaScript Leaders Regarding Semicolons](https://blog.izs.me/2010/12/an-open-letter-to-javascript-leaders-regarding/)  \n\n[JavaScript Semicolon Insertion](https://web.archive.org/web/20200420230322/http://inimino.org/~inimino/blog/javascript_semicolons)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/semi.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/semi.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/semi](https://eslint.org/docs/latest/rules/semi)"
- name: semi-spacing
  id: rules/semi-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# semi-spacing\n\nEnforce consistent spacing before and after semicolons\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](semi-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [{\"before\": false, \"after\": true}](#before-false-after-true)\n    2.  [{\"before\": true, \"after\": false}](#before-true-after-false)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/semi-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nJavaScript allows you to place unnecessary spaces before or after a semicolon.\n\nDisallowing or enforcing space around a semicolon can improve the readability of your program.\n\n``` language-js\nvar a = \"b\" ;\n\nvar c = \"d\";var e = \"f\";\n```\n\n## Rule Details\n\nThis rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.\n\nThis rule doesn’t check spacing in the following cases:\n\n- The spacing after the semicolon if it is the first token in the line.\n\n- The spacing before the semicolon if it is after an opening parenthesis (`(` or `{`), or the spacing after the semicolon if it is before a closing parenthesis (`)` or `}`). That spacing is checked by `space-in-parens` or `block-spacing`.\n\n- The spacing around the semicolon in a for loop with an empty condition (`for(;;)`).\n\n## Options\n\nThe rule takes one option, an object, which has two keys `before` and `after` having boolean values `true` or `false`. If `before` is `true`, space is enforced before semicolons and if it’s `false`, space is disallowed before semicolons. If `after` is `true`, space is enforced after semicolons and if it’s `false`, space is disallowed after semicolons. The `after` option will be only applied if a semicolon is not at the end of line.\n\nThe default is `{\"before\": false, \"after\": true}`.\n\n``` language-json\n    \"semi-spacing\": [\"error\", {\"before\": false, \"after\": true}]\n```\n\n### `{\"before\": false, \"after\": true}`\n\nThis is the default option. It enforces spacing after semicolons and disallows spacing before semicolons.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWktc3BhY2luZzogXCJlcnJvclwiKi9cblxudmFyIGZvbyA7XG52YXIgZm9vO3ZhciBiYXI7XG50aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKSA7XG53aGlsZSAoYSkgeyBicmVhayA7IH1cbmZvciAoaSA9IDAgOyBpIDwgMTAgOyBpKyspIHt9XG5mb3IgKGkgPSAwO2kgPCAxMDtpKyspIHt9In0=)\n\n``` language-js\n/*eslint semi-spacing: \"error\"*/\n\nvar foo ;\nvar foo;var bar;\nthrow new Error(\"error\") ;\nwhile (a) { break ; }\nfor (i = 0 ; i < 10 ; i++) {}\nfor (i = 0;i < 10;i++) {}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWktc3BhY2luZzogXCJlcnJvclwiKi9cblxudmFyIGZvbztcbnZhciBmb287IHZhciBiYXI7XG50aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKTtcbndoaWxlIChhKSB7IGJyZWFrOyB9XG5mb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykge31cbmZvciAoOzspIHt9XG5pZiAodHJ1ZSkgezt9XG47Zm9vKCk7In0=)\n\n``` language-js\n/*eslint semi-spacing: \"error\"*/\n\nvar foo;\nvar foo; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0; i < 10; i++) {}\nfor (;;) {}\nif (true) {;}\n;foo();\n```\n\n### `{\"before\": true, \"after\": false}`\n\nThis option enforces spacing before semicolons and disallows spacing after semicolons.\n\nExamples of **incorrect** code for this rule with the `{\"before\": true, \"after\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWktc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImJlZm9yZVwiOiB0cnVlLCBcImFmdGVyXCI6IGZhbHNlIH1dKi9cblxudmFyIGZvbztcbnZhciBmb28gOyB2YXIgYmFyO1xudGhyb3cgbmV3IEVycm9yKFwiZXJyb3JcIik7XG53aGlsZSAoYSkgeyBicmVhazsgfVxuZm9yIChpID0gMDtpIDwgMTA7aSsrKSB7fVxuZm9yIChpID0gMDsgaSA8IDEwOyBpKyspIHt9In0=)\n\n``` language-js\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo;\nvar foo ; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0;i < 10;i++) {}\nfor (i = 0; i < 10; i++) {}\n```\n\nExamples of **correct** code for this rule with the `{\"before\": true, \"after\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNlbWktc3BhY2luZzogW1wiZXJyb3JcIiwgeyBcImJlZm9yZVwiOiB0cnVlLCBcImFmdGVyXCI6IGZhbHNlIH1dKi9cblxudmFyIGZvbyA7XG52YXIgZm9vIDt2YXIgYmFyIDtcbnRocm93IG5ldyBFcnJvcihcImVycm9yXCIpIDtcbndoaWxlIChhKSB7YnJlYWsgO31cbmZvciAoaSA9IDAgO2kgPCAxMCA7aSsrKSB7fSJ9)\n\n``` language-js\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo ;\nvar foo ;var bar ;\nthrow new Error(\"error\") ;\nwhile (a) {break ;}\nfor (i = 0 ;i < 10 ;i++) {}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before or after semicolons.\n\n## Related Rules\n\n- [semi](semi)\n- [no-extra-semi](no-extra-semi)\n- [comma-spacing](comma-spacing)\n- [block-spacing](block-spacing)\n- [space-in-parens](space-in-parens)\n\n## Version\n\nThis rule was introduced in ESLint v0.16.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/semi-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/semi-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/semi-spacing](https://eslint.org/docs/latest/rules/semi-spacing)"
- name: Set up a Development Environment
  id: contribute/development-environment
  summary: ESLint has a very lightweight development environment that makes updating code fast and easy
  description: "# Set up a Development Environment\n\n## Table of Contents\n\n1.  [Step 1: Install Node.js](#step-1-install-nodejs)\n2.  [Step 2: Fork and Checkout Your Own ESLint Repository](#step-2-fork-and-checkout-your-own-eslint-repository)\n3.  [Step 3: Add the Upstream Source](#step-3-add-the-upstream-source)\n4.  [Step 4: Install the Yeoman Generator](#step-4-install-the-yeoman-generator)\n5.  [Step 5: Run the Tests](#step-5-run-the-tests)\n6.  [Reference Information](#reference-information)\n    1.  [Directory Structure](#directory-structure)\n    2.  [Workflow](#workflow)\n    3.  [Build Scripts](#build-scripts)\n        1.  [npm test](#npm-test)\n        2.  [npm run lint](#npm-run-lint)\n        3.  [npm run webpack](#npm-run-webpack)\n\nESLint has a very lightweight development environment that makes updating code fast and easy. This is a step-by-step guide to setting up a local development environment that will let you contribute back to the project.\n\n## Step 1: Install Node.js\n\nGo to <https://nodejs.org/> to download and install the latest stable version for your operating system.\n\nMost of the installers already come with [npm](https://www.npmjs.com/) but if for some reason npm doesn’t work on your system, you can install it manually using the instructions on the site.\n\n## Step 2: Fork and Checkout Your Own ESLint Repository\n\nGo to <https://github.com/eslint/eslint> and click the “Fork” button. Follow the [GitHub documentation](https://help.github.com/articles/fork-a-repo) for forking and cloning.\n\nClone your fork:\n\n``` language-shell\ngit clone https://github.com/<Your Github Username>/eslint\n```\n\nOnce you’ve cloned the repository, run `npm install` to get all the necessary dependencies:\n\n``` language-shell\ncd eslint\nnpm install\n```\n\nYou must be connected to the Internet for this step to work. You’ll see a lot of utilities being downloaded.\n\n**Note:** It’s a good idea to re-run `npm install` whenever you pull from the main repository to ensure you have the latest development dependencies.\n\n## Step 3: Add the Upstream Source\n\nThe *upstream source* is the main ESLint repository where active development happens. While you won’t have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.\n\nTo add the upstream source for ESLint, run the following in your repository:\n\n``` language-shell\ngit remote add upstream git@github.com:eslint/eslint.git\n```\n\nNow, the remote `upstream` points to the upstream source.\n\n## Step 4: Install the Yeoman Generator\n\n[Yeoman](https://yeoman.io) is a scaffold generator that ESLint uses to help streamline development of new rules. If you don’t already have Yeoman installed, you can install it via npm:\n\n``` language-shell\nnpm install -g yo\n```\n\nThen, you can install the ESLint Yeoman generator:\n\n``` language-shell\nnpm install -g generator-eslint\n```\n\nPlease see the [generator documentation](https://github.com/eslint/generator-eslint) for instructions on how to use it.\n\n## Step 5: Run the Tests\n\nRunning the tests is the best way to ensure you have correctly set up your development environment. Make sure you’re in the `eslint` directory and run:\n\n``` language-shell\nnpm test\n```\n\nThe testing takes a few minutes to complete. If any tests fail, that likely means one or more parts of the environment setup didn’t complete correctly. The upstream tests always pass.\n\n## Reference Information\n\n### Directory Structure\n\nThe ESLint directory and file structure is as follows:\n\n- `bin` - executable files that are available when ESLint is installed\n- `conf` - default configuration information\n- `docs` - documentation for the project\n- `lib` - contains the source code\n  - `formatters` - all source files defining formatters\n  - `rules` - all source files defining rules\n- `tests` - the main unit test folder\n  - `lib` - tests for the source code\n    - `formatters` - tests for the formatters\n    - `rules` - tests for the rules\n\n### Workflow\n\nOnce you have your development environment installed, you can make and submit changes to the ESLint source files. Doing this successfully requires careful adherence to our [pull-request submission workflow](development-environment./pull-requests).\n\n### Build Scripts\n\nESLint has several build scripts that help with various parts of development.\n\n#### npm test\n\nThe primary script to use is `npm test`, which does several things:\n\n1.  Lints all JavaScript (including tests) and JSON\n2.  Runs all tests on Node.js\n3.  Checks code coverage targets\n4.  Generates `build/eslint.js` for use in a browser\n5.  Runs a subset of tests in PhantomJS\n\nBe sure to run this after making changes and before sending a pull request with your changes.\n\n**Note:** The full code coverage report is output into `/coverage`.\n\n#### npm run lint\n\nRuns just the JavaScript and JSON linting on the repository.\n\n#### npm run webpack\n\nGenerates `build/eslint.js`, a version of ESLint for use in the browser.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/development-environment](https://eslint.org/docs/latest/contribute/development-environment)"
- name: Share Configurations
  id: extend/shareable-configs
  summary: To share your ESLint configuration, create a shareable config
  description: "# Share Configurations\n\n## Table of Contents\n\n1.  [Creating a Shareable Config](#creating-a-shareable-config)\n2.  [Publishing a Shareable Config](#publishing-a-shareable-config)\n3.  [Using a Shareable Config](#using-a-shareable-config)\n    1.  [npm Scoped Modules](#npm-scoped-modules)\n    2.  [Overriding Settings from Shareable Configs](#overriding-settings-from-shareable-configs)\n4.  [Sharing Multiple Configs](#sharing-multiple-configs)\n5.  [Local Config File Resolution](#local-config-file-resolution)\n6.  [Further Reading](#further-reading)\n\nTo share your ESLint configuration, create a **shareable config**. You can publish your shareable config on [npm](https://www.npmjs.com/) so that others can download and use it in their ESLint projects.\n\nThis page explains how to create and publish a shareable config.\n\n## Creating a Shareable Config\n\nShareable configs are simply npm packages that export a configuration object. To start, [create a Node.js module](https://docs.npmjs.com/getting-started/creating-node-modules) like you normally would.\n\nThe module name must take one of the following forms:\n\n- Begin with `eslint-config-`, such as `eslint-config-myconfig`.\n- Be an npm [scoped module](https://docs.npmjs.com/misc/scope). To create a scoped module, name or prefix the module with `@scope/eslint-config`, such as `@scope/eslint-config` or `@scope/eslint-config-myconfig`.\n\nIn your module, export the shareable config from the module’s [`main`](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#main) entry point file. The default main entry point is `index.js`. For example:\n\n``` language-js\n// index.js\nmodule.exports = {\n\n    globals: {\n        MyGlobal: true\n    },\n\n    rules: {\n        semi: [2, \"always\"]\n    }\n\n};\n```\n\nSince the `index.js` file is just JavaScript, you can read these settings from a file or generate them dynamically.\n\n## Publishing a Shareable Config\n\nOnce your shareable config is ready, you can [publish it to npm](https://docs.npmjs.com/getting-started/publishing-npm-packages) to share it with others. We recommend using the `eslint` and `eslintconfig` [keywords](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#keywords) in the `package.json` file so others can easily find your module.\n\nYou should declare your dependency on ESLint in the `package.json` using the [peerDependencies](https://docs.npmjs.com/files/package.json#peerdependencies) field. The recommended way to declare a dependency for future-proof compatibility is with the “\\>=” range syntax, using the lowest required ESLint version. For example:\n\n``` language-json\n{\n    \"peerDependencies\": {\n        \"eslint\": \">= 3\"\n    }\n}\n```\n\nIf your shareable config depends on a plugin, you should also specify it as a `peerDependency` (plugins will be loaded relative to the end user’s project, so the end user is required to install the plugins they need). However, if your shareable config depends on a [custom parser](shareable-configscustom-parsers) or another shareable config, you can specify these packages as `dependencies` in the `package.json`.\n\nYou can also test your shareable config on your computer before publishing by linking your module globally. Type:\n\n``` language-bash\nnpm link\n```\n\nThen, in your project that wants to use your shareable config, type:\n\n``` language-bash\nnpm link eslint-config-myconfig\n```\n\nBe sure to replace `eslint-config-myconfig` with the actual name of your module.\n\n## Using a Shareable Config\n\nTo use a shareable config, include the config name in the `extends` field of a configuration file. For the value, use your module name. For example:\n\n``` language-json\n{\n    \"extends\": \"eslint-config-myconfig\"\n}\n```\n\nYou can also omit the `eslint-config-` and it is automatically assumed by ESLint:\n\n``` language-json\n{\n    \"extends\": \"myconfig\"\n}\n```\n\nYou cannot use shareable configs with the ESLint CLI [`--config`](shareable-configs../use/command-line-interface#-c---config) flag.\n\n### npm Scoped Modules\n\nnpm [scoped modules](https://docs.npmjs.com/misc/scope) are also supported in a number of ways.\n\nYou can use the module name:\n\n``` language-json\n{\n    \"extends\": \"@scope/eslint-config\"\n}\n```\n\nYou can also omit the `eslint-config` and it is automatically assumed by ESLint:\n\n``` language-json\n{\n    \"extends\": \"@scope\"\n}\n```\n\nThe module name can also be customized. For example, if you have a package named `@scope/eslint-config-myconfig`, the configuration can be specified as:\n\n``` language-json\n{\n    \"extends\": \"@scope/eslint-config-myconfig\"\n}\n```\n\nYou could also omit `eslint-config` to specify the configuration as:\n\n``` language-json\n{\n    \"extends\": \"@scope/myconfig\"\n}\n```\n\n### Overriding Settings from Shareable Configs\n\nYou can override settings from the shareable config by adding them directly into your `.eslintrc` file.\n\n## Sharing Multiple Configs\n\nYou can share multiple configs in the same npm package. Specify a default config for the package by following the directions in the [Creating a Shareable Config](#creating-a-shareable-config) section. You can specify additional shareable configs by adding a new file to your npm package and then referencing it from your ESLint config.\n\nAs an example, you can create a file called `my-special-config.js` in the root of your npm package and export a config, such as:\n\n``` language-js\n// my-special-config.js\nmodule.exports = {\n    rules: {\n        quotes: [2, \"double\"]\n    }\n};\n```\n\nThen, assuming you’re using the package name `eslint-config-myconfig`, you can access the additional config via:\n\n``` language-json\n{\n    \"extends\": \"myconfig/my-special-config\"\n}\n```\n\nWhen using [scoped modules](https://docs.npmjs.com/misc/scope) it is not possible to omit the `eslint-config` namespace. Doing so would result in resolution errors as explained above. Assuming the package name is `@scope/eslint-config`, the additional config can be accessed as:\n\n``` language-json\n{\n    \"extends\": \"@scope/eslint-config/my-special-config\"\n}\n```\n\nNote that you can leave off the `.js` from the filename.\n\n**Important:** We strongly recommend always including a default config for your plugin to avoid errors.\n\n## Local Config File Resolution\n\nIf you need to make multiple configs that can extend each other and live in different directories, you can create a single shareable config that handles this scenario.\n\nAs an example, let’s assume you’re using the package name `eslint-config-myconfig` and your package looks something like this:\n\n``` language-text\nmyconfig\n├── index.js\n└─┬ lib\n  ├── defaults.js\n  ├── dev.js\n  ├── ci.js\n  └─┬ ci\n    ├── frontend.js\n    ├── backend.js\n    └── common.js\n```\n\nIn the `index.js` file, you can do something like this:\n\n``` language-js\nmodule.exports = require('./lib/ci.js');\n```\n\nNow inside the package you have `/lib/defaults.js`, which contains:\n\n``` language-js\nmodule.exports = {\n    rules: {\n        'no-console': 1\n    }\n};\n```\n\nInside `/lib/ci.js` you have:\n\n``` language-js\nmodule.exports = require('./ci/backend');\n```\n\nInside `/lib/ci/common.js`:\n\n``` language-js\nmodule.exports = {\n    rules: {\n        'no-alert': 2\n    },\n    extends: 'myconfig/lib/defaults'\n};\n```\n\nDespite being in an entirely different directory, you’ll see that all `extends` must use the full package path to the config file you wish to extend.\n\nNow inside `/lib/ci/backend.js`:\n\n``` language-js\nmodule.exports = {\n    rules: {\n        'no-console': 1\n    },\n    extends: 'myconfig/lib/ci/common'\n};\n```\n\nIn the last file, once again see that to properly resolve your config, you need to include the full package path.\n\n## Further Reading\n\n- [npm Developer Guide](https://docs.npmjs.com/misc/developers)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/shareable-configs](https://eslint.org/docs/latest/extend/shareable-configs)"
- name: sort-imports
  id: rules/sort-imports
  summary: The import statement is used to import members (functions, objects or primitives) that have been exported from an external module
  description: "# sort-imports\n\nEnforce sorted import declarations within modules\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](sort-imports../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Examples](#examples)\n    1.  [Default settings](#default-settings)\n    2.  [ignoreCase](#ignorecase)\n    3.  [ignoreDeclarationSort](#ignoredeclarationsort)\n    4.  [ignoreMemberSort](#ignoremembersort)\n    5.  [memberSyntaxSortOrder](#membersyntaxsortorder)\n    6.  [allowSeparatedGroups](#allowseparatedgroups)\n4.  [When Not To Use It](#when-not-to-use-it)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Resources](#resources)\n\nThe import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:\n\n``` language-js\n// single - Import single member.\nimport myMember from \"my-module.js\";\nimport {myOtherMember} from \"my-other-module.js\";\n\n// multiple - Import multiple members.\nimport {foo, bar} from \"my-module.js\";\n\n// all - Import all members, where myModule contains all the exported bindings.\nimport * as myModule from \"my-module.js\";\n```\n\nThe import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.\n\n``` language-js\n// none - Import module without exported bindings.\nimport \"my-module.js\"\n```\n\nWhen declaring multiple imports, a sorted list of import declarations make it easier for developers to read the code and find necessary imports later. This rule is purely a matter of style.\n\n## Rule Details\n\nThis rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. `import { b, a } from 'foo.js'` is corrected to `import { a, b } from 'foo.js'`), but multiple lines are not reordered.\n\n## Options\n\nThis rule accepts an object with its properties as\n\n- `ignoreCase` (default: `false`)\n- `ignoreDeclarationSort` (default: `false`)\n- `ignoreMemberSort` (default: `false`)\n- `memberSyntaxSortOrder` (default: `[\"none\", \"all\", \"multiple\", \"single\"]`); all 4 items must be present in the array, but you can change the order:\n  - `none` = import module without exported bindings.\n  - `all` = import all members provided by exported bindings.\n  - `multiple` = import multiple members.\n  - `single` = import single member.\n- `allowSeparatedGroups` (default: `false`)\n\nDefault option settings are:\n\n``` language-json\n{\n    \"sort-imports\": [\"error\", {\n        \"ignoreCase\": false,\n        \"ignoreDeclarationSort\": false,\n        \"ignoreMemberSort\": false,\n        \"memberSyntaxSortOrder\": [\"none\", \"all\", \"multiple\", \"single\"],\n        \"allowSeparatedGroups\": false\n    }]\n}\n```\n\n## Examples\n\n### Default settings\n\nExamples of **correct** code for this rule when using default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCAnbW9kdWxlLXdpdGhvdXQtZXhwb3J0LmpzJztcbmltcG9ydCAqIGFzIGJhciBmcm9tICdiYXIuanMnO1xuaW1wb3J0ICogYXMgZm9vIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQge2FscGhhLCBiZXRhfSBmcm9tICdhbHBoYS5qcyc7XG5pbXBvcnQge2RlbHRhLCBnYW1tYX0gZnJvbSAnZGVsdGEuanMnO1xuaW1wb3J0IGEgZnJvbSAnYmF6LmpzJztcbmltcG9ydCB7Yn0gZnJvbSAncXV4LmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport 'module-without-export.js';\nimport * as bar from 'bar.js';\nimport * as foo from 'foo.js';\nimport {alpha, beta} from 'alpha.js';\nimport {delta, gamma} from 'delta.js';\nimport a from 'baz.js';\nimport {b} from 'qux.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgYiBmcm9tICdiYXIuanMnO1xuaW1wb3J0IGMgZnJvbSAnYmF6LmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport b from 'bar.js';\nimport c from 'baz.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCAnZm9vLmpzJ1xuaW1wb3J0ICogYXMgYmFyIGZyb20gJ2Jhci5qcyc7XG5pbXBvcnQge2EsIGJ9IGZyb20gJ2Jhei5qcyc7XG5pbXBvcnQgYyBmcm9tICdxdXguanMnO1xuaW1wb3J0IHtkfSBmcm9tICdxdXV4LmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport 'foo.js'\nimport * as bar from 'bar.js';\nimport {a, b} from 'baz.js';\nimport c from 'qux.js';\nimport {d} from 'quux.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCB7YSwgYiwgY30gZnJvbSAnZm9vLmpzJyJ9)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport {a, b, c} from 'foo.js'\n```\n\nExamples of **incorrect** code for this rule when using default options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBiIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgYSBmcm9tICdiYXIuanMnOyJ9)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport b from 'foo.js';\nimport a from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgQSBmcm9tICdiYXIuanMnOyJ9)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport A from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCB7YywgZH0gZnJvbSAnZm9vLmpzJztcbmltcG9ydCB7YSwgYn0gZnJvbSAnYmFyLmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport {c, d} from 'foo.js';\nimport {a, b} from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQge2IsIGN9IGZyb20gJ2Jhci5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport {b, c} from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCB7YX0gZnJvbSAnZm9vLmpzJztcbmltcG9ydCB7YiwgY30gZnJvbSAnYmFyLmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport {a} from 'foo.js';\nimport {b, c} from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgKiBhcyBiIGZyb20gJ2Jhci5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCB7YiwgYSwgY30gZnJvbSAnZm9vLmpzJyJ9)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport {b, a, c} from 'foo.js'\n```\n\n### `ignoreCase`\n\nWhen `true` the rule ignores the case-sensitivity of the imports local name.\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZUNhc2VcIjogdHJ1ZSB9XSovXG5cbmltcG9ydCBCIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgYSBmcm9tICdiYXIuanMnOyJ9)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreCase\": true }]*/\n\nimport B from 'foo.js';\nimport a from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZUNhc2VcIjogdHJ1ZSB9XSovXG5cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgQiBmcm9tICdiYXIuanMnO1xuaW1wb3J0IGMgZnJvbSAnYmF6LmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreCase\": true }]*/\n\nimport a from 'foo.js';\nimport B from 'bar.js';\nimport c from 'baz.js';\n```\n\nDefault is `false`.\n\n### `ignoreDeclarationSort`\n\nIgnores the sorting of import declaration statements.\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreDeclarationSort\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZURlY2xhcmF0aW9uU29ydFwiOiBmYWxzZSB9XSovXG5pbXBvcnQgYiBmcm9tICdmb28uanMnXG5pbXBvcnQgYSBmcm9tICdiYXIuanMnIn0=)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": false }]*/\nimport b from 'foo.js'\nimport a from 'bar.js'\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreDeclarationSort\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZURlY2xhcmF0aW9uU29ydFwiOiB0cnVlIH1dKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcydcbmltcG9ydCBiIGZyb20gJ2Jhci5qcycifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": true }]*/\nimport a from 'foo.js'\nimport b from 'bar.js'\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZURlY2xhcmF0aW9uU29ydFwiOiB0cnVlIH1dKi9cbmltcG9ydCBiIGZyb20gJ2Zvby5qcydcbmltcG9ydCBhIGZyb20gJ2Jhci5qcycifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": true }]*/\nimport b from 'foo.js'\nimport a from 'bar.js'\n```\n\nDefault is `false`.\n\n### `ignoreMemberSort`\n\nIgnores the member sorting within a `multiple` member import declaration.\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreMemberSort\": false }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU1lbWJlclNvcnRcIjogZmFsc2UgfV0qL1xuaW1wb3J0IHtiLCBhLCBjfSBmcm9tICdmb28uanMnIn0=)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreMemberSort\": false }]*/\nimport {b, a, c} from 'foo.js'\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreMemberSort\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImlnbm9yZU1lbWJlclNvcnRcIjogdHJ1ZSB9XSovXG5pbXBvcnQge2IsIGEsIGN9IGZyb20gJ2Zvby5qcycifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"ignoreMemberSort\": true }]*/\nimport {b, a, c} from 'foo.js'\n```\n\nDefault is `false`.\n\n### `memberSyntaxSortOrder`\n\nThere are four different styles and the default member syntax sort order is:\n\n- `none` - import module without exported bindings.\n- `all` - import all members provided by exported bindings.\n- `multiple` - import multiple members.\n- `single` - import single member.\n\nAll four options must be specified in the array, but you can customize their order.\n\nExamples of **incorrect** code for this rule with the default `{ \"memberSyntaxSortOrder\": [\"none\", \"all\", \"multiple\", \"single\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogXCJlcnJvclwiKi9cbmltcG9ydCBhIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgKiBhcyBiIGZyb20gJ2Jhci5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"memberSyntaxSortOrder\": ['single', 'all', 'multiple', 'none'] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcIm1lbWJlclN5bnRheFNvcnRPcmRlclwiOiBbJ3NpbmdsZScsICdhbGwnLCAnbXVsdGlwbGUnLCAnbm9uZSddIH1dKi9cblxuaW1wb3J0IGEgZnJvbSAnZm9vLmpzJztcbmltcG9ydCAqIGFzIGIgZnJvbSAnYmFyLmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"memberSyntaxSortOrder\": ['single', 'all', 'multiple', 'none'] }]*/\n\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"memberSyntaxSortOrder\": ['all', 'single', 'multiple', 'none'] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcIm1lbWJlclN5bnRheFNvcnRPcmRlclwiOiBbJ2FsbCcsICdzaW5nbGUnLCAnbXVsdGlwbGUnLCAnbm9uZSddIH1dKi9cblxuaW1wb3J0ICogYXMgZm9vIGZyb20gJ2Zvby5qcyc7XG5pbXBvcnQgeiBmcm9tICd6b28uanMnO1xuaW1wb3J0IHthLCBifSBmcm9tICdmb28uanMnOyJ9)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"memberSyntaxSortOrder\": ['all', 'single', 'multiple', 'none'] }]*/\n\nimport * as foo from 'foo.js';\nimport z from 'zoo.js';\nimport {a, b} from 'foo.js';\n```\n\nDefault is `[\"none\", \"all\", \"multiple\", \"single\"]`.\n\n### `allowSeparatedGroups`\n\nWhen `true` the rule checks the sorting of import declaration statements only for those that appear on consecutive lines.\n\nIn other words, a blank line or a comment line or line with any other statement after an import declaration statement will reset the sorting of import declaration statements.\n\nExamples of **incorrect** code for this rule with the `{ \"allowSeparatedGroups\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImFsbG93U2VwYXJhdGVkR3JvdXBzXCI6IHRydWUgfV0qL1xuXG5pbXBvcnQgYiBmcm9tICdmb28uanMnO1xuaW1wb3J0IGMgZnJvbSAnYmFyLmpzJztcbmltcG9ydCBhIGZyb20gJ2Jhei5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\nimport a from 'baz.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"allowSeparatedGroups\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImFsbG93U2VwYXJhdGVkR3JvdXBzXCI6IHRydWUgfV0qL1xuXG5pbXBvcnQgYiBmcm9tICdmb28uanMnO1xuaW1wb3J0IGMgZnJvbSAnYmFyLmpzJztcblxuaW1wb3J0IGEgZnJvbSAnYmF6LmpzJzsifQ==)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\n\nimport a from 'baz.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImFsbG93U2VwYXJhdGVkR3JvdXBzXCI6IHRydWUgfV0qL1xuXG5pbXBvcnQgYiBmcm9tICdmb28uanMnO1xuaW1wb3J0IGMgZnJvbSAnYmFyLmpzJztcbi8vIGNvbW1lbnRcbmltcG9ydCBhIGZyb20gJ2Jhei5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\n// comment\nimport a from 'baz.js';\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtaW1wb3J0czogW1wiZXJyb3JcIiwgeyBcImFsbG93U2VwYXJhdGVkR3JvdXBzXCI6IHRydWUgfV0qL1xuXG5pbXBvcnQgYiBmcm9tICdmb28uanMnO1xuaW1wb3J0IGMgZnJvbSAnYmFyLmpzJztcbnF1dXgoKTtcbmltcG9ydCBhIGZyb20gJ2Jhei5qcyc7In0=)\n\n``` language-js\n/*eslint sort-imports: [\"error\", { \"allowSeparatedGroups\": true }]*/\n\nimport b from 'foo.js';\nimport c from 'bar.js';\nquux();\nimport a from 'baz.js';\n```\n\nDefault is `false`.\n\n## When Not To Use It\n\nThis rule is a formatting preference and not following it won’t negatively affect the quality of your code. If alphabetizing imports isn’t a part of your coding standards, then you can leave this rule disabled.\n\n## Related Rules\n\n- [sort-keys](sort-keys)\n- [sort-vars](sort-vars)\n\n## Version\n\nThis rule was introduced in ESLint v2.0.0-beta.1.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/sort-imports.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/sort-imports.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/sort-imports](https://eslint.org/docs/latest/rules/sort-imports)"
- name: sort-keys
  id: rules/sort-keys
  summary: When declaring multiple properties, some developers prefer to sort property names alphabetically to more easily find and/or diff necessary properties at a later time
  description: "# sort-keys\n\nRequire object keys to be sorted\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [desc](#desc)\n    2.  [insensitive](#insensitive)\n    3.  [natural](#natural)\n    4.  [minKeys](#minkeys)\n    5.  [allowLineSeparatedGroups](#allowlineseparatedgroups)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Compatibility](#compatibility)\n5.  [Related Rules](#related-rules)\n6.  [Version](#version)\n7.  [Resources](#resources)\n\nWhen declaring multiple properties, some developers prefer to sort property names alphabetically to more easily find and/or diff necessary properties at a later time. Others feel that it adds complexity and becomes burden to maintain.\n\n## Rule Details\n\nThis rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHthOiAxLCBjOiAzLCBiOiAyfTtcbmxldCBvYmoyID0ge2E6IDEsIFwiY1wiOiAzLCBiOiAyfTtcblxuLy8gQ2FzZS1zZW5zaXRpdmUgYnkgZGVmYXVsdC5cbmxldCBvYmozID0ge2E6IDEsIGI6IDIsIEM6IDN9O1xuXG4vLyBOb24tbmF0dXJhbCBvcmRlciBieSBkZWZhdWx0LlxubGV0IG9iajQgPSB7MTogYSwgMjogYywgMTA6IGJ9O1xuXG4vLyBUaGlzIHJ1bGUgY2hlY2tzIGNvbXB1dGVkIHByb3BlcnRpZXMgd2hpY2ggaGF2ZSBhIHNpbXBsZSBuYW1lIGFzIHdlbGwuXG4vLyBTaW1wbGUgbmFtZXMgYXJlIG5hbWVzIHdoaWNoIGFyZSBleHByZXNzZWQgYnkgYW4gSWRlbnRpZmllciBub2RlIG9yIGEgTGl0ZXJhbCBub2RlLlxuY29uc3QgUyA9IFN5bWJvbChcInNcIilcbmxldCBvYmo1ID0ge2E6IDEsIFtcImNcIl06IDMsIGI6IDJ9O1xubGV0IG9iajYgPSB7YTogMSwgW1NdOiAzLCBiOiAyfTsifQ==)\n\n``` language-js\n/*eslint sort-keys: \"error\"*/\n/*eslint-env es6*/\n\nlet obj1 = {a: 1, c: 3, b: 2};\nlet obj2 = {a: 1, \"c\": 3, b: 2};\n\n// Case-sensitive by default.\nlet obj3 = {a: 1, b: 2, C: 3};\n\n// Non-natural order by default.\nlet obj4 = {1: a, 2: c, 10: b};\n\n// This rule checks computed properties which have a simple name as well.\n// Simple names are names which are expressed by an Identifier node or a Literal node.\nconst S = Symbol(\"s\")\nlet obj5 = {a: 1, [\"c\"]: 3, b: 2};\nlet obj6 = {a: 1, [S]: 3, b: 2};\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHthOiAxLCBiOiAyLCBjOiAzfTtcbmxldCBvYmoyID0ge2E6IDEsIFwiYlwiOiAyLCBjOiAzfTtcblxuLy8gQ2FzZS1zZW5zaXRpdmUgYnkgZGVmYXVsdC5cbmxldCBvYmozID0ge0M6IDMsIGE6IDEsIGI6IDJ9O1xuXG4vLyBOb24tbmF0dXJhbCBvcmRlciBieSBkZWZhdWx0LlxubGV0IG9iajQgPSB7MTogYSwgMTA6IGIsIDI6IGN9O1xuXG4vLyBUaGlzIHJ1bGUgY2hlY2tzIGNvbXB1dGVkIHByb3BlcnRpZXMgd2hpY2ggaGF2ZSBhIHNpbXBsZSBuYW1lIGFzIHdlbGwuXG5sZXQgb2JqNSA9IHthOiAxLCBbXCJiXCJdOiAyLCBjOiAzfTtcbmxldCBvYmo2ID0ge2E6IDEsIFtiXTogMiwgYzogM307XG5cbi8vIFRoaXMgcnVsZSBpZ25vcmVzIGNvbXB1dGVkIHByb3BlcnRpZXMgd2hpY2ggaGF2ZSBhIG5vbi1zaW1wbGUgbmFtZS5cbmxldCBvYmo3ID0ge2E6IDEsIFtjICsgZF06IDMsIGI6IDJ9O1xubGV0IG9iajggPSB7YTogMSwgW1wiY1wiICsgXCJkXCJdOiAzLCBiOiAyfTtcbmxldCBvYmo5ID0ge2E6IDEsIFtgJHtjfWBdOiAzLCBiOiAyfTtcbmxldCBvYmoxMCA9IHthOiAxLCBbdGFnYGNgXTogMywgYjogMn07XG5cbi8vIFRoaXMgcnVsZSBkb2VzIG5vdCByZXBvcnQgdW5zb3J0ZWQgcHJvcGVydGllcyB0aGF0IGFyZSBzZXBhcmF0ZWQgYnkgYSBzcHJlYWQgcHJvcGVydHkuXG5sZXQgb2JqMTEgPSB7YjogMSwgLi4uYywgYTogMn07In0=)\n\n``` language-js\n/*eslint sort-keys: \"error\"*/\n/*eslint-env es6*/\n\nlet obj1 = {a: 1, b: 2, c: 3};\nlet obj2 = {a: 1, \"b\": 2, c: 3};\n\n// Case-sensitive by default.\nlet obj3 = {C: 3, a: 1, b: 2};\n\n// Non-natural order by default.\nlet obj4 = {1: a, 10: b, 2: c};\n\n// This rule checks computed properties which have a simple name as well.\nlet obj5 = {a: 1, [\"b\"]: 2, c: 3};\nlet obj6 = {a: 1, [b]: 2, c: 3};\n\n// This rule ignores computed properties which have a non-simple name.\nlet obj7 = {a: 1, [c + d]: 3, b: 2};\nlet obj8 = {a: 1, [\"c\" + \"d\"]: 3, b: 2};\nlet obj9 = {a: 1, [`${c}`]: 3, b: 2};\nlet obj10 = {a: 1, [tag`c`]: 3, b: 2};\n\n// This rule does not report unsorted properties that are separated by a spread property.\nlet obj11 = {b: 1, ...c, a: 2};\n```\n\n## Options\n\n``` language-json\n{\n    \"sort-keys\": [\"error\", \"asc\", {\"caseSensitive\": true, \"natural\": false, \"minKeys\": 2}]\n}\n```\n\nThe 1st option is `\"asc\"` or `\"desc\"`.\n\n- `\"asc\"` (default) - enforce properties to be in ascending order.\n- `\"desc\"` - enforce properties to be in descending order.\n\nThe 2nd option is an object which has 3 properties.\n\n- `caseSensitive` - if `true`, enforce properties to be in case-sensitive order. Default is `true`.\n- `minKeys` - Specifies the minimum number of keys that an object should have in order for the object’s unsorted keys to produce an error. Default is `2`, which means by default all objects with unsorted keys will result in lint errors.\n- `natural` - if `true`, enforce properties to be in natural order. Default is `false`. Natural Order compares strings containing combination of letters and numbers in the way a human being would sort. It basically sorts numerically, instead of sorting alphabetically. So the number 10 comes after the number 3 in Natural Sorting.\n- `allowLineSeparatedGroups` - if `true`, the rule allows to group object keys through line breaks. In other words, a blank line after a property will reset the sorting of keys. Default is `false`.\n\nExample for a list:\n\nWith `natural` as true, the ordering would be 1 3 6 8 10\n\nWith `natural` as false, the ordering would be 1 10 3 6 8\n\n### desc\n\nExamples of **incorrect** code for the `\"desc\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJkZXNjXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHtiOiAyLCBjOiAzLCBhOiAxfTtcbmxldCBvYmoyID0ge1wiYlwiOiAyLCBjOiAzLCBhOiAxfTtcblxuLy8gQ2FzZS1zZW5zaXRpdmUgYnkgZGVmYXVsdC5cbmxldCBvYmozID0ge0M6IDEsIGI6IDMsIGE6IDJ9O1xuXG4vLyBOb24tbmF0dXJhbCBvcmRlciBieSBkZWZhdWx0LlxubGV0IG9iajQgPSB7MTA6IGIsIDI6IGMsIDE6IGF9OyJ9)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n/*eslint-env es6*/\n\nlet obj1 = {b: 2, c: 3, a: 1};\nlet obj2 = {\"b\": 2, c: 3, a: 1};\n\n// Case-sensitive by default.\nlet obj3 = {C: 1, b: 3, a: 2};\n\n// Non-natural order by default.\nlet obj4 = {10: b, 2: c, 1: a};\n```\n\nExamples of **correct** code for the `\"desc\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJkZXNjXCJdKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHtjOiAzLCBiOiAyLCBhOiAxfTtcbmxldCBvYmoyID0ge2M6IDMsIFwiYlwiOiAyLCBhOiAxfTtcblxuLy8gQ2FzZS1zZW5zaXRpdmUgYnkgZGVmYXVsdC5cbmxldCBvYmozID0ge2I6IDMsIGE6IDIsIEM6IDF9O1xuXG4vLyBOb24tbmF0dXJhbCBvcmRlciBieSBkZWZhdWx0LlxubGV0IG9iajQgPSB7MjogYywgMTA6IGIsIDE6IGF9OyJ9)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n/*eslint-env es6*/\n\nlet obj1 = {c: 3, b: 2, a: 1};\nlet obj2 = {c: 3, \"b\": 2, a: 1};\n\n// Case-sensitive by default.\nlet obj3 = {b: 3, a: 2, C: 1};\n\n// Non-natural order by default.\nlet obj4 = {2: c, 10: b, 1: a};\n```\n\n### insensitive\n\nExamples of **incorrect** code for the `{caseSensitive: false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge2Nhc2VTZW5zaXRpdmU6IGZhbHNlfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmxldCBvYmoxID0ge2E6IDEsIGM6IDMsIEM6IDQsIGI6IDJ9O1xubGV0IG9iajIgPSB7YTogMSwgQzogMywgYzogNCwgYjogMn07In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n/*eslint-env es6*/\n\nlet obj1 = {a: 1, c: 3, C: 4, b: 2};\nlet obj2 = {a: 1, C: 3, c: 4, b: 2};\n```\n\nExamples of **correct** code for the `{caseSensitive: false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge2Nhc2VTZW5zaXRpdmU6IGZhbHNlfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmxldCBvYmoxID0ge2E6IDEsIGI6IDIsIGM6IDMsIEM6IDR9O1xubGV0IG9iajIgPSB7YTogMSwgYjogMiwgQzogMywgYzogNH07In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n/*eslint-env es6*/\n\nlet obj1 = {a: 1, b: 2, c: 3, C: 4};\nlet obj2 = {a: 1, b: 2, C: 3, c: 4};\n```\n\n### natural\n\nExamples of **incorrect** code for the `{natural: true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge25hdHVyYWw6IHRydWV9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxubGV0IG9iaiA9IHsxOiBhLCAxMDogYywgMjogYn07In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n/*eslint-env es6*/\n\nlet obj = {1: a, 10: c, 2: b};\n```\n\nExamples of **correct** code for the `{natural: true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge25hdHVyYWw6IHRydWV9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxubGV0IG9iaiA9IHsxOiBhLCAyOiBiLCAxMDogY307In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n/*eslint-env es6*/\n\nlet obj = {1: a, 2: b, 10: c};\n```\n\n### minKeys\n\nExamples of **incorrect** code for the `{minKeys: 4}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge21pbktleXM6IDR9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuLy8gNCBrZXlzXG5sZXQgb2JqMSA9IHtcbiAgICBiOiAyLFxuICAgIGE6IDEsIC8vIG5vdCBzb3J0ZWQgY29ycmVjdGx5IChzaG91bGQgYmUgMXN0IGtleSlcbiAgICBjOiAzLFxuICAgIGQ6IDQsXG59O1xuXG4vLyA1IGtleXNcbmxldCBvYmoyID0ge1xuICAgIDI6ICdhJyxcbiAgICAxOiAnYicsIC8vIG5vdCBzb3J0ZWQgY29ycmVjdGx5IChzaG91bGQgYmUgMXN0IGtleSlcbiAgICAzOiAnYycsXG4gICAgNDogJ2QnLFxuICAgIDU6ICdlJyxcbn07In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*/\n/*eslint-env es6*/\n\n// 4 keys\nlet obj1 = {\n    b: 2,\n    a: 1, // not sorted correctly (should be 1st key)\n    c: 3,\n    d: 4,\n};\n\n// 5 keys\nlet obj2 = {\n    2: 'a',\n    1: 'b', // not sorted correctly (should be 1st key)\n    3: 'c',\n    4: 'd',\n    5: 'e',\n};\n```\n\nExamples of **correct** code for the `{minKeys: 4}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge21pbktleXM6IDR9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuLy8gMyBrZXlzXG5sZXQgb2JqMSA9IHtcbiAgICBiOiAyLFxuICAgIGE6IDEsXG4gICAgYzogMyxcbn07XG5cbi8vIDIga2V5c1xubGV0IG9iajIgPSB7XG4gICAgMjogJ2InLFxuICAgIDE6ICdhJyxcbn07In0=)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*/\n/*eslint-env es6*/\n\n// 3 keys\nlet obj1 = {\n    b: 2,\n    a: 1,\n    c: 3,\n};\n\n// 2 keys\nlet obj2 = {\n    2: 'b',\n    1: 'a',\n};\n```\n\n### allowLineSeparatedGroups\n\nExamples of **incorrect** code for the `{allowLineSeparatedGroups: true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge2FsbG93TGluZVNlcGFyYXRlZEdyb3VwczogdHJ1ZX1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHtcbiAgICBiOiAxLFxuICAgIGMgKCkge1xuXG4gICAgfSxcbiAgICBhOiAzXG59XG5cbmxldCBvYmoyID0ge1xuICAgIGI6IDEsXG4gICAgYzogMixcblxuICAgIHogKCkge1xuXG4gICAgfSxcbiAgICB5OiAzXG59XG5cbmxldCBvYmozID0ge1xuICAgIGI6IDEsXG4gICAgYzogMixcblxuICAgIHogKCkge1xuXG4gICAgfSxcbiAgICAvLyBjb21tZW50XG4gICAgeTogMyxcbn1cblxubGV0IG9iajQgPSB7XG4gICAgYjogMVxuICAgIC8vIGNvbW1lbnQgYmVmb3JlIGNvbW1hXG4gICAgLCBhOiAyXG59OyJ9)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {allowLineSeparatedGroups: true}]*/\n/*eslint-env es6*/\n\nlet obj1 = {\n    b: 1,\n    c () {\n\n    },\n    a: 3\n}\n\nlet obj2 = {\n    b: 1,\n    c: 2,\n\n    z () {\n\n    },\n    y: 3\n}\n\nlet obj3 = {\n    b: 1,\n    c: 2,\n\n    z () {\n\n    },\n    // comment\n    y: 3,\n}\n\nlet obj4 = {\n    b: 1\n    // comment before comma\n    , a: 2\n};\n```\n\nExamples of **correct** code for the `{allowLineSeparatedGroups: true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQta2V5czogW1wiZXJyb3JcIiwgXCJhc2NcIiwge2FsbG93TGluZVNlcGFyYXRlZEdyb3VwczogdHJ1ZX1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5sZXQgb2JqMSA9IHtcbiAgICBlOiAxLFxuICAgIGY6IDIsXG4gICAgZzogMyxcblxuICAgIGE6IDQsXG4gICAgYjogNSxcbiAgICBjOiA2XG59XG5cbmxldCBvYmoyID0ge1xuICAgIGI6IDEsXG5cbiAgICAvLyBjb21tZW50XG4gICAgYTogNCxcbiAgICBjOiA1LFxufVxuXG5sZXQgb2JqMyA9IHtcbiAgICBjOiAxLFxuICAgIGQ6IDIsXG5cbiAgICBiICgpIHtcblxuICAgIH0sIFxuICAgIGU6IDMsXG59XG5cbmxldCBvYmo0ID0ge1xuICAgIGM6IDEsXG4gICAgZDogMixcbiAgICAvLyBjb21tZW50XG5cbiAgICAvLyBjb21tZW50XG4gICAgYigpIHtcblxuICAgIH0sXG4gICAgZTogNFxufVxuXG5sZXQgb2JqNSA9IHtcbiAgICBiLFxuXG4gICAgW2ZvbyArIGJhcl06IDEsXG4gICAgYVxufVxuXG5sZXQgb2JqNiA9IHtcbiAgICBiOiAxXG4gICAgLy8gY29tbWVudCBiZWZvcmUgY29tbWFcblxuICAgICxcbiAgICBhOiAyXG59O1xuXG52YXIgb2JqNyA9IHtcbiAgICBiOiAxLFxuXG4gICAgYTogMixcbiAgICAuLi56LFxuICAgIGM6IDNcbn0ifQ==)\n\n``` language-js\n/*eslint sort-keys: [\"error\", \"asc\", {allowLineSeparatedGroups: true}]*/\n/*eslint-env es6*/\n\nlet obj1 = {\n    e: 1,\n    f: 2,\n    g: 3,\n\n    a: 4,\n    b: 5,\n    c: 6\n}\n\nlet obj2 = {\n    b: 1,\n\n    // comment\n    a: 4,\n    c: 5,\n}\n\nlet obj3 = {\n    c: 1,\n    d: 2,\n\n    b () {\n\n    }, \n    e: 3,\n}\n\nlet obj4 = {\n    c: 1,\n    d: 2,\n    // comment\n\n    // comment\n    b() {\n\n    },\n    e: 4\n}\n\nlet obj5 = {\n    b,\n\n    [foo + bar]: 1,\n    a\n}\n\nlet obj6 = {\n    b: 1\n    // comment before comma\n\n    ,\n    a: 2\n};\n\nvar obj7 = {\n    b: 1,\n\n    a: 2,\n    ...z,\n    c: 3\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to notify about properties’ order, then it’s safe to disable this rule.\n\n## Compatibility\n\n- **JSCS:** [validateOrderInObjectKeys](https://jscs-dev.github.io/rule/validateOrderInObjectKeys)\n\n## Related Rules\n\n- [sort-imports](sort-imports)\n- [sort-vars](sort-vars)\n\n## Version\n\nThis rule was introduced in ESLint v3.3.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/sort-keys.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/sort-keys.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/sort-keys](https://eslint.org/docs/latest/rules/sort-keys)"
- name: sort-vars
  id: rules/sort-vars
  summary: When declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time
  description: "# sort-vars\n\nRequire variables within the same declaration block to be sorted\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](sort-vars../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [ignoreCase](#ignorecase)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nWhen declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time. Others feel that it adds complexity and becomes burden to maintain.\n\n## Rule Details\n\nThis rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically. The default configuration of the rule is case-sensitive.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtdmFyczogXCJlcnJvclwiKi9cblxudmFyIGIsIGE7XG5cbnZhciBhLCBCLCBjO1xuXG52YXIgYSwgQTsifQ==)\n\n``` language-js\n/*eslint sort-vars: \"error\"*/\n\nvar b, a;\n\nvar a, B, c;\n\nvar a, A;\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtdmFyczogXCJlcnJvclwiKi9cblxudmFyIGEsIGIsIGMsIGQ7XG5cbnZhciBfYSA9IDEwO1xudmFyIF9iID0gMjA7XG5cbnZhciBBLCBhO1xuXG52YXIgQiwgYSwgYzsifQ==)\n\n``` language-js\n/*eslint sort-vars: \"error\"*/\n\nvar a, b, c, d;\n\nvar _a = 10;\nvar _b = 20;\n\nvar A, a;\n\nvar B, a, c;\n```\n\nAlphabetical list is maintained starting from the first variable and excluding any that are considered problems. So the following code will produce two problems:\n\n``` language-js\n/*eslint sort-vars: \"error\"*/\n\nvar c, d, a, b;\n```\n\nBut this one, will only produce one:\n\n``` language-js\n/*eslint sort-vars: \"error\"*/\n\nvar c, d, a, e;\n```\n\n## Options\n\nThis rule has an object option:\n\n- `\"ignoreCase\": true` (default `false`) ignores the case-sensitivity of the variables order\n\n### ignoreCase\n\nExamples of **correct** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNvcnQtdmFyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZUNhc2VcIjogdHJ1ZSB9XSovXG5cbnZhciBhLCBBO1xuXG52YXIgYSwgQiwgYzsifQ==)\n\n``` language-js\n/*eslint sort-vars: [\"error\", { \"ignoreCase\": true }]*/\n\nvar a, A;\n\nvar a, B, c;\n```\n\n## When Not To Use It\n\nThis rule is a formatting preference and not following it won’t negatively affect the quality of your code. If you alphabetizing variables isn’t a part of your coding standards, then you can leave this rule off.\n\n## Related Rules\n\n- [sort-keys](sort-keys)\n- [sort-imports](sort-imports)\n\n## Version\n\nThis rule was introduced in ESLint v0.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/sort-vars.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/sort-vars.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/sort-vars](https://eslint.org/docs/latest/rules/sort-vars)"
- name: space-after-keywords
  id: rules/space-after-keywords
  summary: Enforces consistent spacing after keywords
  description: "# space-after-keywords\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n\nEnforces consistent spacing after keywords.\n\nImportant\n\nThis rule was removed in ESLint v2.0.0 and replaced by the [keyword-spacing](space-after-keywordskeyword-spacing) rule.\n\nSome style guides will require or disallow spaces following the certain keywords.\n\n``` language-js\nif (condition) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif(condition) {\n    doSomething();\n}else{\n    doSomethingElse();\n}\n```\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the keywords `if`, `else`, `for`, `while`, `do`, `switch`, `try`, `catch`, `finally`, and `with`.\n\nThis rule takes one argument. If it is `\"always\"` then the keywords must be followed by at least one space. If `\"never\"` then there should be no spaces following. The default is `\"always\"`.\n\nExamples of **incorrect** code for this rule:\n\n``` language-js\n/*eslint space-after-keywords: \"error\"*/\n\nif(a) {}\n\nif (a) {} else{}\n\ndo{} while (a);\n```\n\n``` language-js\n/*eslint space-after-keywords: [\"error\", \"never\"]*/\n\nif (a) {}\n```\n\nExamples of **correct** code for this rule:\n\n``` language-js\n/*eslint space-after-keywords: \"error\"*/\n\nif (a) {}\n\nif (a) {} else {}\n```\n\n``` language-js\n/*eslint space-after-keywords: [\"error\", \"never\"]*/\n\nif(a) {}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.6.0 and removed in v2.0.0-beta.3.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-after-keywords](https://eslint.org/docs/latest/rules/space-after-keywords)"
- name: space-before-blocks
  id: rules/space-before-blocks
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# space-before-blocks\n\nEnforce consistent spacing before blocks\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](space-before-blocks../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [“always”](#always)\n    2.  [“never”](#never)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/space-before-blocks) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nConsistency is an important part of any style guide. While it is a personal preference where to put the opening brace of blocks, it should be consistent across a whole project. Having an inconsistent style distracts the reader from seeing the important parts of the code.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing before blocks. It is only applied on blocks that don’t begin on a new line.\n\n- This rule ignores spacing which is between `=>` and a block. The spacing is handled by the `arrow-spacing` rule.\n- This rule ignores spacing which is between a keyword and a block. The spacing is handled by the `keyword-spacing` rule.\n- This rule ignores spacing which is between `:` of a switch case and a block. The spacing is handled by the `switch-colon-spacing` rule.\n\n## Options\n\nThis rule takes one argument. If it is `\"always\"` then blocks must always have at least one preceding space. If `\"never\"` then all blocks should never have any preceding space. If different spacing is desired for function blocks, keyword blocks and classes, an optional configuration object can be passed as the rule argument to configure the cases separately. If any value in the configuration object is `\"off\"`, then neither style will be enforced for blocks of that kind.\n\n( e.g. `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"always\" }` )\n\nThe default is `\"always\"`.\n\n### “always”\n\nExamples of **incorrect** code for this rule with the “always” option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFwiZXJyb3JcIiovXG5cbmlmIChhKXtcbiAgICBiKCk7XG59XG5cbmZ1bmN0aW9uIGEoKXt9XG5cbmZvciAoOzspe1xuICAgIGIoKTtcbn1cblxudHJ5IHt9IGNhdGNoKGEpe31cblxuY2xhc3MgRm9ve1xuICBjb25zdHJ1Y3Rvcigpe31cbn0ifQ==)\n\n``` language-js\n/*eslint space-before-blocks: \"error\"*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFwiZXJyb3JcIiovXG5cbmlmIChhKSB7XG4gICAgYigpO1xufVxuXG5pZiAoYSkge1xuICAgIGIoKTtcbn0gZWxzZXsgLypubyBlcnJvci4gdGhpcyBpcyBjaGVja2VkIGJ5IGBrZXl3b3JkLXNwYWNpbmdgIHJ1bGUuKi9cbiAgICBjKCk7XG59XG5cbmNsYXNzIEMge1xuICAgIHN0YXRpY3t9IC8qbm8gZXJyb3IuIHRoaXMgaXMgY2hlY2tlZCBieSBga2V5d29yZC1zcGFjaW5nYCBydWxlLiovXG59XG5cbmZ1bmN0aW9uIGEoKSB7fVxuXG5mb3IgKDs7KSB7XG4gICAgYigpO1xufVxuXG50cnkge30gY2F0Y2goYSkge30ifQ==)\n\n``` language-js\n/*eslint space-before-blocks: \"error\"*/\n\nif (a) {\n    b();\n}\n\nif (a) {\n    b();\n} else{ /*no error. this is checked by `keyword-spacing` rule.*/\n    c();\n}\n\nclass C {\n    static{} /*no error. this is checked by `keyword-spacing` rule.*/\n}\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\n### “never”\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5pZiAoYSkge1xuICAgIGIoKTtcbn1cblxuZnVuY3Rpb24gYSgpIHt9XG5cbmZvciAoOzspIHtcbiAgICBiKCk7XG59XG5cbnRyeSB7fSBjYXRjaChhKSB7fSJ9)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIFwibmV2ZXJcIl0qL1xuXG5pZiAoYSl7XG4gICAgYigpO1xufVxuXG5mdW5jdGlvbiBhKCl7fVxuXG5mb3IgKDs7KXtcbiAgICBiKCk7XG59XG5cbnRyeXt9IGNhdGNoKGEpe31cblxuY2xhc3MgRm9ve1xuICBjb25zdHJ1Y3Rvcigpe31cbn0ifQ==)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry{} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJuZXZlclwiLCBcImtleXdvcmRzXCI6IFwiYWx3YXlzXCIsIFwiY2xhc3Nlc1wiOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGEoKSB7fVxuXG50cnkge30gY2F0Y2goYSl7fVxuXG5jbGFzcyBGb297XG4gIGNvbnN0cnVjdG9yKCkge31cbn0ifQ==)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction a() {}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor() {}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJuZXZlclwiLCBcImtleXdvcmRzXCI6IFwiYWx3YXlzXCIsIFwiY2xhc3Nlc1wiOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZvciAoOzspIHtcbiAgLy8gLi4uXG59XG5cbmRlc2NyaWJlKGZ1bmN0aW9uKCl7XG4gIC8vIC4uLlxufSk7XG5cbmNsYXNzIEZvb3tcbiAgY29uc3RydWN0b3IoKXt9XG59In0=)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfor (;;) {\n  // ...\n}\n\ndescribe(function(){\n  // ...\n});\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJhbHdheXNcIiwgXCJrZXl3b3Jkc1wiOiBcIm5ldmVyXCIsIFwiY2xhc3Nlc1wiOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGEoKXt9XG5cbnRyeSB7fSBjYXRjaChhKSB7fVxuXG5jbGFzcyBGb28ge1xuICBjb25zdHJ1Y3Rvcigpe31cbn0ifQ==)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction a(){}\n\ntry {} catch(a) {}\n\nclass Foo {\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJhbHdheXNcIiwgXCJrZXl3b3Jkc1wiOiBcIm5ldmVyXCIsIFwiY2xhc3Nlc1wiOiBcIm5ldmVyXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmlmIChhKXtcbiAgYigpO1xufVxuXG52YXIgYSA9IGZ1bmN0aW9uKCkge31cblxuY2xhc3MgRm9ve1xuICBjb25zdHJ1Y3RvcigpIHt9XG59In0=)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (a){\n  b();\n}\n\nvar a = function() {}\n\nclass Foo{\n  constructor() {}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJuZXZlclwiLCBcImtleXdvcmRzXCI6IFwibmV2ZXJcIiwgXCJjbGFzc2VzXCI6IFwiYWx3YXlzXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEZvb3tcbiAgY29uc3RydWN0b3IoKXt9XG59In0=)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n/*eslint-env es6*/\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1ibG9ja3M6IFtcImVycm9yXCIsIHsgXCJmdW5jdGlvbnNcIjogXCJuZXZlclwiLCBcImtleXdvcmRzXCI6IFwibmV2ZXJcIiwgXCJjbGFzc2VzXCI6IFwiYWx3YXlzXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmNsYXNzIEZvbyB7XG4gIGNvbnN0cnVjdG9yKCl7fVxufSJ9)\n\n``` language-js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n/*eslint-env es6*/\n\nclass Foo {\n  constructor(){}\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before blocks.\n\n## Related Rules\n\n- [keyword-spacing](keyword-spacing)\n- [arrow-spacing](arrow-spacing)\n- [switch-colon-spacing](switch-colon-spacing)\n- [block-spacing](block-spacing)\n- [brace-style](brace-style)\n\n## Version\n\nThis rule was introduced in ESLint v0.9.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/space-before-blocks.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/space-before-blocks.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-before-blocks](https://eslint.org/docs/latest/rules/space-before-blocks)"
- name: space-before-function-paren
  id: rules/space-before-function-paren
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# space-before-function-paren\n\nEnforce consistent spacing before `function` definition opening parenthesis\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](space-before-function-paren../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [“always”](#always)\n    2.  [“never”](#never)\n    3.  [{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}](#anonymous-always-named-never-asyncarrow-always)\n    4.  [{\"anonymous\": \"never\", \"named\": \"always\"}](#anonymous-never-named-always)\n    5.  [{\"anonymous\": \"ignore\", \"named\": \"always\"}](#anonymous-ignore-named-always)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/space-before-function-paren) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhen formatting a function, whitespace is allowed between the function name or `function` keyword and the opening paren. Named functions also require a space between the `function` keyword and the function name, but anonymous functions require no whitespace. For example:\n\n``` language-js\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n\nvar anonymousWithoutSpace = function() {};\n\nvar anonymousWithSpace = function () {};\n```\n\nStyle guides may require a space after the `function` keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.\n\n## Rule Details\n\nThis rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn’t match the preferences specified.\n\n## Options\n\nThis rule has a string option or an object option:\n\n``` language-js\n{\n    \"space-before-function-paren\": [\"error\", \"always\"],\n    // or\n    \"space-before-function-paren\": [\"error\", {\n        \"anonymous\": \"always\",\n        \"named\": \"always\",\n        \"asyncArrow\": \"always\"\n    }],\n}\n```\n\n- `always` (default) requires a space followed by the `(` of arguments.\n- `never` disallows any space followed by the `(` of arguments.\n\nThe string option does not check async arrow function expressions for backward compatibility.\n\nYou can also use a separate option for each type of function. Each of the following options can be set to `\"always\"`, `\"never\"`, or `\"ignore\"`. The default is `\"always\"`.\n\n- `anonymous` is for anonymous function expressions (e.g. `function () {}`).\n- `named` is for named function expressions (e.g. `function foo () {}`).\n- `asyncArrow` is for async arrow function expressions (e.g. `async () => {}`).\n\n### “always”\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgLy8gLi4uXG59XG5cbnZhciBiYXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn07XG5cbnZhciBiYXIgPSBmdW5jdGlvbiBmb28oKSB7XG4gICAgLy8gLi4uXG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59XG5cbnZhciBiYXogPSB7XG4gICAgYmFyKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59O1xuXG52YXIgYmF6ID0gYXN5bmMoKSA9PiAxIn0=)\n\n``` language-js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async() => 1\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28gKCkge1xuICAgIC8vIC4uLlxufVxuXG52YXIgYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIC4uLlxufTtcblxudmFyIGJhciA9IGZ1bmN0aW9uIGZvbyAoKSB7XG4gICAgLy8gLi4uXG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhciAoKSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn07XG5cbnZhciBiYXogPSBhc3luYyAoKSA9PiAxIn0=)\n\n``` language-js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async () => 1\n```\n\n### “never”\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vICgpIHtcbiAgICAvLyAuLi5cbn1cblxudmFyIGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyAuLi5cbn07XG5cbnZhciBiYXIgPSBmdW5jdGlvbiBmb28gKCkge1xuICAgIC8vIC4uLlxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn1cblxudmFyIGJheiA9IHtcbiAgICBiYXIgKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59O1xuXG52YXIgYmF6ID0gYXN5bmMgKCkgPT4gMSJ9)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async () => 1\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIC4uLlxufVxuXG52YXIgYmFyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG52YXIgYmFyID0gZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIC4uLlxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufTtcblxudmFyIGJheiA9IGFzeW5jKCkgPT4gMSJ9)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async() => 1\n```\n\n### `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwge1wiYW5vbnltb3VzXCI6IFwiYWx3YXlzXCIsIFwibmFtZWRcIjogXCJuZXZlclwiLCBcImFzeW5jQXJyb3dcIjogXCJhbHdheXNcIn1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28gKCkge1xuICAgIC8vIC4uLlxufVxuXG52YXIgYmFyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gLi4uXG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhciAoKSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn07XG5cbnZhciBiYXogPSBhc3luYyhhKSA9PiBhd2FpdCBhIn0=)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n\nvar baz = async(a) => await a\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwge1wiYW5vbnltb3VzXCI6IFwiYWx3YXlzXCIsIFwibmFtZWRcIjogXCJuZXZlclwiLCBcImFzeW5jQXJyb3dcIjogXCJhbHdheXNcIn1dKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgLy8gLi4uXG59XG5cbnZhciBiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gLi4uXG59O1xuXG5jbGFzcyBGb28ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59XG5cbnZhciBiYXogPSB7XG4gICAgYmFyKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59O1xuXG52YXIgYmF6ID0gYXN5bmMgKGEpID0+IGF3YWl0IGEifQ==)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async (a) => await a\n```\n\n### `{\"anonymous\": \"never\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgeyBcImFub255bW91c1wiOiBcIm5ldmVyXCIsIFwibmFtZWRcIjogXCJhbHdheXNcIiB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIC8vIC4uLlxufVxuXG52YXIgYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIC4uLlxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufTsifQ==)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgeyBcImFub255bW91c1wiOiBcIm5ldmVyXCIsIFwibmFtZWRcIjogXCJhbHdheXNcIiB9XSovXG4vKmVzbGludC1lbnYgZXM2Ki9cblxuZnVuY3Rpb24gZm9vICgpIHtcbiAgICAvLyAuLi5cbn1cblxudmFyIGJhciA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIC4uLlxufTtcblxuY2xhc3MgRm9vIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn1cblxudmFyIGJheiA9IHtcbiAgICBiYXIgKCkge1xuICAgICAgICAvLyAuLi5cbiAgICB9XG59OyJ9)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n```\n\n### `{\"anonymous\": \"ignore\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgeyBcImFub255bW91c1wiOiBcImlnbm9yZVwiLCBcIm5hbWVkXCI6IFwiYWx3YXlzXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyAuLi5cbn1cblxuY2xhc3MgRm9vIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhcigpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufTsifQ==)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbjogW1wiZXJyb3JcIiwgeyBcImFub255bW91c1wiOiBcImlnbm9yZVwiLCBcIm5hbWVkXCI6IFwiYWx3YXlzXCIgfV0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbnZhciBiYXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAuLi5cbn07XG5cbnZhciBiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gLi4uXG59O1xuXG5mdW5jdGlvbiBmb28gKCkge1xuICAgIC8vIC4uLlxufVxuXG5jbGFzcyBGb28ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgLy8gLi4uXG4gICAgfVxufVxuXG52YXIgYmF6ID0ge1xuICAgIGJhciAoKSB7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn07In0=)\n\n``` language-js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function () {\n    // ...\n};\n\nfunction foo () {\n    // ...\n}\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before function parenthesis.\n\n## Related Rules\n\n- [keyword-spacing](keyword-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.18.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/space-before-function-paren.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/space-before-function-paren.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-before-function-paren](https://eslint.org/docs/latest/rules/space-before-function-paren)"
- name: space-in-brackets
  id: rules/space-in-brackets
  summary: Enforces consistent spacing inside braces of object literals and brackets of array literals
  description: "# space-in-brackets\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [“never”](#never)\n    2.  [“always”](#always)\n    3.  [Exceptions](#exceptions)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n\nEnforces consistent spacing inside braces of object literals and brackets of array literals.\n\nImportant\n\nThis rule was removed in ESLint v1.0.0 and replaced by the [object-curly-spacing](space-in-bracketsobject-curly-spacing) and [array-bracket-spacing](space-in-bracketsarray-bracket-spacing) rules.\n\nWhile formatting preferences are very personal, a number of style guides require or disallow spaces between brackets:\n\n``` language-js\nvar obj = { foo: 'bar' };\nvar arr = [ 'foo', 'bar' ];\nfoo[ 'bar' ];\n\nvar obj = {foo: 'bar'};\nvar arr = ['foo', 'bar'];\nfoo['bar'];\n```\n\n## Rule Details\n\nThis rule aims to maintain consistency around the spacing inside of square brackets, either by disallowing spaces inside of brackets between the brackets and other tokens or enforcing spaces. Brackets that are separated from the adjacent value by a new line are excepted from this rule, as this is a common pattern. Object literals that are used as the first or last element in an array are also ignored.\n\n## Options\n\nThere are two options for this rule:\n\n- `\"always\"` enforces a space inside of object and array literals\n- `\"never\"` enforces zero spaces inside of object and array literals (default)\n\nDepending on your coding conventions, you can choose either option by specifying it in your configuration:\n\n``` language-json\n\"space-in-brackets\": [\"error\", \"always\"]\n```\n\n### “never”\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n``` language-js\n/*eslint-env es6*/\n\nfoo[ 'bar' ];\nfoo['bar' ];\n\nvar arr = [ 'foo', 'bar' ];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar'];\nvar arr = [[ 'foo' ], 'bar'];\nvar arr = ['foo',\n  'bar'\n];\n\nvar obj = { 'foo': 'bar' };\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n``` language-js\n// When options are [\"error\", \"never\"]\n\nfoo['bar'];\nfoo[\n  'bar'\n];\nfoo[\n  'bar'];\n\nvar arr = [];\nvar arr = ['foo', 'bar', 'baz'];\nvar arr = [['foo'], 'bar', 'baz'];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar arr = [\n  'foo',\n  'bar'];\n\nvar obj = {'foo': 'bar'};\n\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\n\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\n\nvar obj = {};\n```\n\n### “always”\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n``` language-js\n/*eslint-env es6*/\n\nfoo['bar'];\nfoo['bar' ];\nfoo[ 'bar'];\n\nvar arr = ['foo', 'bar'];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar' ];\nvar arr = ['foo',\n  'bar'\n];\n\nvar arr = [\n  'foo',\n  'bar'];\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\nvar obj = {'foo': 'bar'\n};\n\nvar obj = {\n  'foo':'bar'};\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n``` language-js\nfoo[ 'bar' ];\nfoo[\n  'bar'\n];\n\nvar arr = [];\nvar arr = [ 'foo', 'bar', 'baz' ];\nvar arr = [ [ 'foo' ], 'bar', 'baz' ];\n\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar obj = {};\nvar obj = { 'foo': 'bar' };\nvar obj = { 'foo': { 'bar': 'baz' }, 'qux': 'quxx' };\nvar obj = {\n  'foo': 'bar'\n};\n```\n\nNote that `\"always\"` has a special case where `{}` and `[]` are not considered problems.\n\n### Exceptions\n\nAn object literal may be used as a third array item to specify spacing exceptions. These exceptions work in the context of the first option. That is, if `\"always\"` is set to enforce spacing and an exception is set to `false`, it will disallow spacing for cases matching the exception. Likewise, if `\"never\"` is set to disallow spacing and an exception is set to `true`, it will enforce spacing for cases matching the exception.\n\nYou can add exceptions like so:\n\nIn case of `\"always\"` option, set an exception to `false` to enable it:\n\n``` language-json\n\"space-in-brackets\": [\"error\", \"always\", {\n  \"singleValue\": false,\n  \"objectsInArrays\": false,\n  \"arraysInArrays\": false,\n  \"arraysInObjects\": false,\n  \"objectsInObjects\": false,\n  \"propertyName\": false\n}]\n```\n\nIn case of `\"never\"` option, set an exception to `true` to enable it:\n\n``` language-json\n\"space-in-brackets\": [\"error\", \"never\", {\n  \"singleValue\": true,\n  \"objectsInArrays\": true,\n  \"arraysInArrays\": true,\n  \"arraysInObjects\": true,\n  \"objectsInObjects\": true,\n  \"propertyName\": true\n}]\n```\n\nThe following exceptions are available:\n\n- `singleValue` sets the spacing of a single value inside of square brackets of an array.\n- `objectsInArrays` sets the spacings between the curly braces and square brackets of object literals that are the first or last element in an array.\n- `arraysInArrays` sets the spacing between the square brackets of array literals that are the first or last element in an array.\n- `arraysInObjects` sets the spacing between the square bracket and the curly brace of an array literal that is the last element in an object.\n- `objectsInObjects` sets the spacing between the curly brace of an object literal that is the last element in an object and the curly brace of the containing object.\n- `propertyName` sets the spacing in square brackets of computed member expressions.\n\nIn each of the following examples, the `\"always\"` option is assumed.\n\nExamples of **incorrect** code for this rule when `\"singleValue\"` is set to `false`:\n\n``` language-js\nvar foo = [ 'foo' ];\nvar foo = [ 'foo'];\nvar foo = ['foo' ];\nvar foo = [ 1 ];\nvar foo = [ 1];\nvar foo = [1 ];\nvar foo = [ [ 1, 2 ] ];\nvar foo = [ { 'foo': 'bar' } ];\n```\n\nExamples of **correct** code for this rule when `\"singleValue\"` is set to `false`:\n\n``` language-js\nvar foo = ['foo'];\nvar foo = [1];\nvar foo = [[ 1, 1 ]];\nvar foo = [{ 'foo': 'bar' }];\n```\n\nExamples of **incorrect** code when `\"objectsInArrays\"` is set to `false`:\n\n``` language-js\nvar arr = [ { 'foo': 'bar' } ];\nvar arr = [ {\n  'foo': 'bar'\n} ]\n```\n\nExamples of **correct** code when `\"objectsInArrays\"` is set to `false`:\n\n``` language-js\nvar arr = [{ 'foo': 'bar' }];\nvar arr = [{\n  'foo': 'bar'\n}];\n```\n\nExamples of **incorrect** code when `\"arraysInArrays\"` is set to `false`:\n\n``` language-js\nvar arr = [ [ 1, 2 ], 2, 3, 4 ];\nvar arr = [ [ 1, 2 ], 2, [ 3, 4 ] ];\n```\n\nExamples of **correct** code when `\"arraysInArrays\"` is set to `false`:\n\n``` language-js\nvar arr = [[ 1, 2 ], 2, 3, 4 ];\nvar arr = [[ 1, 2 ], 2, [ 3, 4 ]];\n```\n\nExamples of **incorrect** code when `\"arraysInObjects\"` is set to `false`:\n\n``` language-js\nvar obj = { \"foo\": [ 1, 2 ] };\nvar obj = { \"foo\": [ \"baz\", \"bar\" ] };\n```\n\nExamples of **correct** code when `\"arraysInObjects\"` is set to `false`:\n\n``` language-js\nvar obj = { \"foo\": [ 1, 2 ]};\nvar obj = { \"foo\": [ \"baz\", \"bar\" ]};\n```\n\nExamples of **incorrect** code when `\"objectsInObjects\"` is set to `false`:\n\n``` language-js\nvar obj = { \"foo\": { \"baz\": 1, \"bar\": 2 } };\nvar obj = { \"foo\": [ \"baz\", \"bar\" ], \"qux\": { \"baz\": 1, \"bar\": 2 } };\n```\n\nExamples of **correct** code when `\"objectsInObjects\"` is set to `false`:\n\n``` language-js\nvar obj = { \"foo\": { \"baz\": 1, \"bar\": 2 }};\nvar obj = { \"foo\": [ \"baz\", \"bar\" ], \"qux\": { \"baz\": 1, \"bar\": 2 }};\n```\n\nExamples of **incorrect** code when `\"propertyName\"` is set to `false`:\n\n``` language-js\nvar foo = obj[ 1 ];\nvar foo = obj[ bar ];\n```\n\nExamples of **correct** code when `\"propertyName\"` is set to `false`:\n\n``` language-js\nvar foo = obj[bar];\nvar foo = obj[0, 1];\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between brackets.\n\n## Related Rules\n\n- [array-bracket-spacing](array-bracket-spacing)\n- [object-curly-spacing](object-curly-spacing)\n- [space-in-parens](space-in-parens)\n- [computed-property-spacing](computed-property-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.4.1 and removed in v1.0.0-rc-1.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-in-brackets](https://eslint.org/docs/latest/rules/space-in-brackets)"
- name: space-in-parens
  id: rules/space-in-parens
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# space-in-parens\n\nEnforce consistent spacing inside parentheses\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](space-in-parens../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [“never”](#never)\n    2.  [“always”](#always)\n    3.  [Exceptions](#exceptions)\n    4.  [Empty Exception](#empty-exception)\n    5.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Related Rules](#related-rules)\n5.  [Version](#version)\n6.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/space-in-parens) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nSome style guides require or disallow spaces inside of parentheses:\n\n``` language-js\nfoo( 'bar' );\nvar x = ( 1 + 2 ) * 3;\n\nfoo('bar');\nvar x = (1 + 2) * 3;\n```\n\n## Rule Details\n\nThis rule will enforce consistent spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of `(` and to the left of `)`.\n\nAs long as you do not explicitly disallow empty parentheses using the `\"empty\"` exception , `()` will be allowed.\n\n## Options\n\nThere are two options for this rule:\n\n- `\"never\"` (default) enforces zero spaces inside of parentheses\n- `\"always\"` enforces a space inside of parentheses\n\nDepending on your coding conventions, you can choose either option by specifying it in your configuration:\n\n``` language-json\n\"space-in-parens\": [\"error\", \"always\"]\n```\n\n### “never”\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbmZvbyggKTtcblxuZm9vKCAnYmFyJyk7XG5mb28oJ2JhcicgKTtcbmZvbyggJ2JhcicgKTtcblxuZm9vKCAvKiBiYXIgKi8gKTtcblxudmFyIGZvbyA9ICggMSArIDIgKSAqIDM7XG4oIGZ1bmN0aW9uICgpIHsgcmV0dXJuICdiYXInOyB9KCkgKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo( );\n\nfoo( 'bar');\nfoo('bar' );\nfoo( 'bar' );\n\nfoo( /* bar */ );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbmZvbygpO1xuXG5mb28oJ2JhcicpO1xuXG5mb28oLyogYmFyICovKTtcblxudmFyIGZvbyA9ICgxICsgMikgKiAzO1xuKGZ1bmN0aW9uICgpIHsgcmV0dXJuICdiYXInOyB9KCkpOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo();\n\nfoo('bar');\n\nfoo(/* bar */);\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\n### “always”\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG5mb28oICdiYXInKTtcbmZvbygnYmFyJyApO1xuZm9vKCdiYXInKTtcblxuZm9vKC8qIGJhciAqLyk7XG5cbnZhciBmb28gPSAoMSArIDIpICogMztcbihmdW5jdGlvbiAoKSB7IHJldHVybiAnYmFyJzsgfSgpKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo( 'bar');\nfoo('bar' );\nfoo('bar');\n\nfoo(/* bar */);\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0qL1xuXG5mb28oKTtcbmZvbyggKTtcblxuZm9vKCAnYmFyJyApO1xuXG5mb28oIC8qIGJhciAqLyApO1xuXG52YXIgZm9vID0gKCAxICsgMiApICogMztcbiggZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2Jhcic7IH0oKSApOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo();\nfoo( );\n\nfoo( 'bar' );\n\nfoo( /* bar */ );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\n### Exceptions\n\nAn object literal may be used as a third array item to specify exceptions, with the key `\"exceptions\"` and an array as the value. These exceptions work in the context of the first option. That is, if `\"always\"` is set to enforce spacing, then any “exception” will *disallow* spacing. Conversely, if `\"never\"` is set to disallow spacing, then any “exception” will *enforce* spacing.\n\nNote that this rule only enforces spacing within parentheses; it does not check spacing within curly or square brackets, but will enforce or disallow spacing of those brackets if and only if they are adjacent to an opening or closing parenthesis.\n\nThe following exceptions are available: `[\"{}\", \"[]\", \"()\", \"empty\"]`.\n\n### Empty Exception\n\nEmpty parens exception and behavior:\n\n- `always` allows for both `()` and `( )`\n- `never` (default) requires `()`\n- `always` excepting `empty` requires `()`\n- `never` excepting `empty` requires `( )` (empty parens without a space is here forbidden)\n\n### Examples\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"{}\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJ7fVwiXSB9XSovXG5cbmZvbyh7YmFyOiAnYmF6J30pO1xuZm9vKDEsIHtiYXI6ICdiYXonfSk7In0=)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo(1, {bar: 'baz'});\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"{}\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJ7fVwiXSB9XSovXG5cbmZvbygge2JhcjogJ2Jheid9ICk7XG5mb28oMSwge2JhcjogJ2Jheid9ICk7In0=)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo(1, {bar: 'baz'} );\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"{}\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wie31cIl0gfV0qL1xuXG5mb28oIHtiYXI6ICdiYXonfSApO1xuZm9vKCAxLCB7YmFyOiAnYmF6J30gKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo( 1, {bar: 'baz'} );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"{}\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wie31cIl0gfV0qL1xuXG5mb28oe2JhcjogJ2Jheid9KTtcbmZvbyggMSwge2JhcjogJ2Jheid9KTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo( 1, {bar: 'baz'});\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"[]\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJbXVwiXSB9XSovXG5cbmZvbyhbYmFyLCBiYXpdKTtcbmZvbyhbYmFyLCBiYXpdLCAxKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1);\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"[]\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJbXVwiXSB9XSovXG5cbmZvbyggW2JhciwgYmF6XSApO1xuZm9vKCBbYmFyLCBiYXpdLCAxKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1);\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"[]\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiW11cIl0gfV0qL1xuXG5mb28oIFtiYXIsIGJhel0gKTtcbmZvbyggW2JhciwgYmF6XSwgMSApOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1 );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"[]\"] }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiW11cIl0gfV0qL1xuXG5mb28oW2JhciwgYmF6XSk7XG5mb28oW2JhciwgYmF6XSwgMSApOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1 );\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"()\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCIoKVwiXSB9XSovXG5cbmZvbygoMSArIDIpKTtcbmZvbygoMSArIDIpLCAxKTtcbmZvbyhiYXIoKSk7In0=)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo((1 + 2));\nfoo((1 + 2), 1);\nfoo(bar());\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"()\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCIoKVwiXSB9XSovXG5cbmZvbyggKDEgKyAyKSApO1xuZm9vKCAoMSArIDIpLCAxKTtcbmZvbyhiYXIoKSApOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( (1 + 2) );\nfoo( (1 + 2), 1);\nfoo(bar() );\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"()\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiKClcIl0gfV0qL1xuXG5mb28oICggMSArIDIgKSApO1xuZm9vKCAoIDEgKyAyICksIDEgKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( ( 1 + 2 ) );\nfoo( ( 1 + 2 ), 1 );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"()\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiKClcIl0gfV0qL1xuXG5mb28oKCAxICsgMiApKTtcbmZvbygoIDEgKyAyICksIDEgKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo(( 1 + 2 ));\nfoo(( 1 + 2 ), 1 );\n```\n\nThe `\"empty\"` exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.\n\nExample of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"empty\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJlbXB0eVwiXSB9XSovXG5cbmZvbygpOyJ9)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\nExample of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"empty\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJuZXZlclwiLCB7IFwiZXhjZXB0aW9uc1wiOiBbXCJlbXB0eVwiXSB9XSovXG5cbmZvbyggKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"empty\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiZW1wdHlcIl0gfV0qL1xuXG5mb28oICk7In0=)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"empty\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiZW1wdHlcIl0gfV0qL1xuXG5mb28oKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\nYou can include multiple entries in the `\"exceptions\"` array.\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"{}\", \"[]\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wie31cIiwgXCJbXVwiXSB9XSovXG5cbmJhcigge2JhcjonYmF6J30gKTtcbmJheiggMSwgWzEsMl0gKTtcbmZvbygge2JhcjogJ2Jheid9LCBbMSwgMl0gKTsifQ==)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar( {bar:'baz'} );\nbaz( 1, [1,2] );\nfoo( {bar: 'baz'}, [1, 2] );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"{}\", \"[]\"] }]` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wie31cIiwgXCJbXVwiXSB9XSovXG5cbmJhcih7YmFyOidiYXonfSk7XG5iYXooIDEsIFsxLDJdKTtcbmZvbyh7YmFyOiAnYmF6J30sIFsxLCAyXSk7In0=)\n\n``` language-js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar({bar:'baz'});\nbaz( 1, [1,2]);\nfoo({bar: 'baz'}, [1, 2]);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between parentheses.\n\n## Related Rules\n\n- [array-bracket-spacing](array-bracket-spacing)\n- [object-curly-spacing](object-curly-spacing)\n- [computed-property-spacing](computed-property-spacing)\n\n## Version\n\nThis rule was introduced in ESLint v0.8.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/space-in-parens.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/space-in-parens.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-in-parens](https://eslint.org/docs/latest/rules/space-in-parens)"
- name: space-infix-ops
  id: rules/space-infix-ops
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# space-infix-ops\n\nRequire spacing around infix operators\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](space-infix-ops../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [int32Hint](#int32hint)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/space-infix-ops) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nWhile formatting preferences are very personal, a number of style guides require spaces around operators, such as:\n\n``` language-js\nvar sum = 1 + 2;\n```\n\nProponents of this rule believe that it makes code easier to read and can more easily highlight potential errors, such as:\n\n``` language-js\nvar sum = i+++2;\n```\n\nWhile this is valid JavaScript syntax, it is hard to determine what the author intended.\n\n## Rule Details\n\nThis rule is aimed at ensuring there are spaces around infix operators.\n\n## Options\n\nThis rule accepts a single options argument with the following defaults:\n\n``` language-json\n\"space-infix-ops\": [\"error\", { \"int32Hint\": false }]\n```\n\n### `int32Hint`\n\nSet the `int32Hint` option to `true` (default is `false`) to allow write `a|0` without space.\n\n``` language-js\nvar foo = bar|0; // `foo` is forced to be signed 32 bit integer\n```\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluZml4LW9wczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5hK2JcblxuYSsgYlxuXG5hICtiXG5cbmE/YjpjXG5cbmNvbnN0IGE9e2I6MX07XG5cbnZhciB7Yj0wfT1iYXI7XG5cbmZ1bmN0aW9uIGZvbyhhPTApIHsgfSJ9)\n\n``` language-js\n/*eslint space-infix-ops: \"error\"*/\n/*eslint-env es6*/\n\na+b\n\na+ b\n\na +b\n\na?b:c\n\nconst a={b:1};\n\nvar {b=0}=bar;\n\nfunction foo(a=0) { }\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLWluZml4LW9wczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5hICsgYlxuXG5hICAgICAgICsgYlxuXG5hID8gYiA6IGNcblxuY29uc3QgYSA9IHtiOjF9O1xuXG52YXIge2IgPSAwfSA9IGJhcjtcblxuZnVuY3Rpb24gZm9vKGEgPSAwKSB7IH0ifQ==)\n\n``` language-js\n/*eslint space-infix-ops: \"error\"*/\n/*eslint-env es6*/\n\na + b\n\na       + b\n\na ? b : c\n\nconst a = {b:1};\n\nvar {b = 0} = bar;\n\nfunction foo(a = 0) { }\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing around infix operators.\n\n## Version\n\nThis rule was introduced in ESLint v0.2.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/space-infix-ops.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/space-infix-ops.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-infix-ops](https://eslint.org/docs/latest/rules/space-infix-ops)"
- name: space-return-throw-case
  id: rules/space-return-throw-case
  summary: Requires spaces after return, throw, and case keywords
  description: "# space-return-throw-case\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n\nRequires spaces after `return`, `throw`, and `case` keywords.\n\nImportant\n\nThis rule was removed in ESLint v2.0.0 and replaced by the [keyword-spacing](space-return-throw-casekeyword-spacing) rule.\n\n(fixable) The `--fix` option on the [command line](space-return-throw-case../use/command-line-interface#--fix) automatically fixed problems reported by this rule.\n\nRequire spaces following `return`, `throw`, and `case`.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n``` language-js\n/*eslint space-return-throw-case: \"error\"*/\n\nthrow{a:0}\n\nfunction f(){ return-a; }\n\nswitch(a){ case'a': break; }\n```\n\nExamples of **correct** code for this rule:\n\n``` language-js\n/*eslint space-return-throw-case: \"error\"*/\n\nthrow {a: 0};\n\nfunction f(){ return -a; }\n\nswitch(a){ case 'a': break; }\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.1.4 and removed in v2.0.0-beta.3.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-return-throw-case](https://eslint.org/docs/latest/rules/space-return-throw-case)"
- name: space-unary-ops
  id: rules/space-unary-ops
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# space-unary-ops\n\nEnforce consistent spacing before or after unary operators\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](space-unary-ops../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/space-unary-ops) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nSome style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.\n\n## Rule Details\n\nThis rule enforces consistency regarding the spaces after `words` unary operators and after/before `nonwords` unary operators.\n\nFor `words` operators, this rule only applies when a space is not syntactically required. For instance, `delete obj.foo` requires the space and will not be considered by this rule. The equivalent `delete(obj.foo)` has an optional space (`delete (obj.foo)`), therefore this rule will apply to it.\n\nExamples of unary `words` operators:\n\n``` language-js\n// new\nvar joe = new Person();\n\n// delete\nvar obj = {\n    foo: 'bar'\n};\ndelete obj.foo;\n\n// typeof\ntypeof {} // object\n\n// void\nvoid 0 // undefined\n```\n\nExamples of unary `nonwords` operators:\n\n``` language-js\nif ([1,2,3].indexOf(1) !== -1) {};\nfoo = --foo;\nbar = bar++;\nbaz = !foo;\nqux = !!baz;\n```\n\n## Options\n\nThis rule has three options:\n\n- `words` - applies to unary word operators such as: `new`, `delete`, `typeof`, `void`, `yield`\n- `nonwords` - applies to unary operators such as: `-`, `+`, `--`, `++`, `!`, `!!`\n- `overrides` - specifies overwriting usage of spacing for each operator, word or non word. This is empty by default, but can be used to enforce or disallow spacing around operators. For example:\n\n``` language-js\n    \"space-unary-ops\": [\n        2, {\n          \"words\": true,\n          \"nonwords\": false,\n          \"overrides\": {\n            \"new\": false,\n            \"++\": true\n          }\n    }]\n```\n\nIn this case, spacing will be disallowed after a `new` operator and required before/after a `++` operator.\n\nExamples of **incorrect** code for this rule with the default `{\"words\": true, \"nonwords\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cblxudHlwZW9mIWZvbztcblxudm9pZHtmb286MH07XG5cbm5ld1tmb29dWzBdO1xuXG5kZWxldGUoZm9vLmJhcik7XG5cbisrIGZvbztcblxuZm9vIC0tO1xuXG4tIGZvbztcblxuKyBcIjNcIjsifQ==)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n\ntypeof!foo;\n\nvoid{foo:0};\n\nnew[foo][0];\n\ndelete(foo.bar);\n\n++ foo;\n\nfoo --;\n\n- foo;\n\n+ \"3\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiAqZm9vKCkge1xuICAgIHlpZWxkKDApXG59In0=)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n/*eslint-env es6*/\n\nfunction *foo() {\n    yield(0)\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cblxuYXN5bmMgZnVuY3Rpb24gZm9vKCkge1xuICAgIGF3YWl0KGJhcik7XG59In0=)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await(bar);\n}\n```\n\nExamples of **correct** code for this rule with the `{\"words\": true, \"nonwords\": false}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cblxuLy8gV29yZCB1bmFyeSBvcGVyYXRvciBcInR5cGVvZlwiIGlzIGZvbGxvd2VkIGJ5IGEgd2hpdGVzcGFjZS5cbnR5cGVvZiAhZm9vO1xuXG4vLyBXb3JkIHVuYXJ5IG9wZXJhdG9yIFwidm9pZFwiIGlzIGZvbGxvd2VkIGJ5IGEgd2hpdGVzcGFjZS5cbnZvaWQge2ZvbzowfTtcblxuLy8gV29yZCB1bmFyeSBvcGVyYXRvciBcIm5ld1wiIGlzIGZvbGxvd2VkIGJ5IGEgd2hpdGVzcGFjZS5cbm5ldyBbZm9vXVswXTtcblxuLy8gV29yZCB1bmFyeSBvcGVyYXRvciBcImRlbGV0ZVwiIGlzIGZvbGxvd2VkIGJ5IGEgd2hpdGVzcGFjZS5cbmRlbGV0ZSAoZm9vLmJhcik7XG5cbi8vIFVuYXJ5IG9wZXJhdG9yIFwiKytcIiBpcyBub3QgZm9sbG93ZWQgYnkgd2hpdGVzcGFjZS5cbisrZm9vO1xuXG4vLyBVbmFyeSBvcGVyYXRvciBcIi0tXCIgaXMgbm90IHByZWNlZGVkIGJ5IHdoaXRlc3BhY2UuXG5mb28tLTtcblxuLy8gVW5hcnkgb3BlcmF0b3IgXCItXCIgaXMgbm90IGZvbGxvd2VkIGJ5IHdoaXRlc3BhY2UuXG4tZm9vO1xuXG4vLyBVbmFyeSBvcGVyYXRvciBcIitcIiBpcyBub3QgZm9sbG93ZWQgYnkgd2hpdGVzcGFjZS5cbitcIjNcIjsifQ==)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n\n// Word unary operator \"typeof\" is followed by a whitespace.\ntypeof !foo;\n\n// Word unary operator \"void\" is followed by a whitespace.\nvoid {foo:0};\n\n// Word unary operator \"new\" is followed by a whitespace.\nnew [foo][0];\n\n// Word unary operator \"delete\" is followed by a whitespace.\ndelete (foo.bar);\n\n// Unary operator \"++\" is not followed by whitespace.\n++foo;\n\n// Unary operator \"--\" is not preceded by whitespace.\nfoo--;\n\n// Unary operator \"-\" is not followed by whitespace.\n-foo;\n\n// Unary operator \"+\" is not followed by whitespace.\n+\"3\";\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG5mdW5jdGlvbiAqZm9vKCkge1xuICAgIHlpZWxkICgwKVxufSJ9)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n/*eslint-env es6*/\n\nfunction *foo() {\n    yield (0)\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlLXVuYXJ5LW9wczogXCJlcnJvclwiKi9cblxuYXN5bmMgZnVuY3Rpb24gZm9vKCkge1xuICAgIGF3YWl0IChiYXIpO1xufSJ9)\n\n``` language-js\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await (bar);\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.10.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/space-unary-ops.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/space-unary-ops.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/space-unary-ops](https://eslint.org/docs/latest/rules/space-unary-ops)"
- name: spaced-comment
  id: rules/spaced-comment
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# spaced-comment\n\nEnforce consistent spacing after the `//` or `/*` in a comment\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](spaced-comment../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n    3.  [exceptions](#exceptions)\n    4.  [markers](#markers)\n3.  [Related Rules](#related-rules)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/spaced-comment) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment. Whitespace after the `//` or `/*` makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several exceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n- The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n  - If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n  - If `\"never\"` then there should be no whitespace following.\n\n- This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n  - The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or `*/` if the comment is a single line comment. Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n  ``` language-js\n  \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n  ```\n\n  - The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments, such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n  ``` language-js\n  \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n  ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n- If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n- If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n- If `\"balanced\": false` then balanced whitespace is not enforced.\n\n``` language-json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbi8vVGhpcyBpcyBhIGNvbW1lbnQgd2l0aCBubyB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmdcblxuLypUaGlzIGlzIGEgY29tbWVudCB3aXRoIG5vIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyAqLyJ9)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJiYWxhbmNlZFwiOiB0cnVlIH0gfV0gKi9cbi8qIFRoaXMgaXMgYSBjb21tZW50IHdpdGggd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIGJ1dCBub3QgdGhlIGVuZCovIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0gKi9cblxuLy8gVGhpcyBpcyBhIGNvbW1lbnQgd2l0aCBhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZ1xuXG4vKiBUaGlzIGlzIGEgY29tbWVudCB3aXRoIGEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nICovXG5cbi8qXG4gKiBUaGlzIGlzIGEgY29tbWVudCB3aXRoIGEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nXG4gKi9cblxuLypcblRoaXMgY29tbWVudCBoYXMgYSBuZXdsaW5lXG4qLyJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIl0gKi9cblxuLyoqXG4qIEkgYW0ganNkb2NcbiovIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxuLy8gVGhpcyBpcyBhIGNvbW1lbnQgd2l0aCBhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZ1xuXG4vKiBUaGlzIGlzIGEgY29tbWVudCB3aXRoIGEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nICovXG5cbi8qIFxcblRoaXMgaXMgYSBjb21tZW50IHdpdGggYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgKi8ifQ==)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJibG9ja1wiOiB7IFwiYmFsYW5jZWRcIjogdHJ1ZSB9IH1dKi9cbi8qVGhpcyBpcyBhIGNvbW1lbnQgd2l0aCB3aGl0ZXNwYWNlIGF0IHRoZSBlbmQgKi8ifQ==)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxuLypUaGlzIGlzIGEgY29tbWVudCB3aXRoIG5vIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyAqLyJ9)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxuLyoqXG4qIEkgYW0ganNkb2NcbiovIn0=)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJleGNlcHRpb25zXCI6IFtcIi1cIl0gfSB9XSAqL1xuXG4vLy0tLS0tLS0tLS0tLS0tXG4vLyBDb21tZW50IGJsb2NrXG4vLy0tLS0tLS0tLS0tLS0tIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiLVwiLCBcIitcIl0gfV0gKi9cblxuLy8tLS0tLS0rKysrKysrK1xuLy8gQ29tbWVudCBibG9ja1xuLy8tLS0tLS0rKysrKysrKyJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiLVwiLCBcIitcIl0gfV0gKi9cblxuLyotLS0tLS0rKysrKysrKyovXG4vKiBDb21tZW50IGJsb2NrICovXG4vKi0tLS0tLSsrKysrKysrKi8ifQ==)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImxpbmVcIjogeyBcImV4Y2VwdGlvbnNcIjogW1wiLStcIl0gfSB9XSAqL1xuXG4vKi0rLSstKy0rLSstKy0rKi9cbi8vIENvbW1lbnQgYmxvY2tcbi8qLSstKy0rLSstKy0rLSsqLyJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJleGNlcHRpb25zXCI6IFtcIipcIl0gfSB9XSAqL1xuXG4vKioqKioqKiogQ09NTUVOVCAqKioqKioqLyJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"*\"] } }] */\n\n/******** COMMENT *******/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiLVwiXSB9XSAqL1xuXG4vLy0tLS0tLS0tLS0tLS0tXG4vLyBDb21tZW50IGJsb2NrXG4vLy0tLS0tLS0tLS0tLS0tIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImxpbmVcIjogeyBcImV4Y2VwdGlvbnNcIjogW1wiLVwiXSB9IH1dICovXG5cbi8vLS0tLS0tLS0tLS0tLS1cbi8vIENvbW1lbnQgYmxvY2tcbi8vLS0tLS0tLS0tLS0tLS0ifQ==)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiKlwiXSB9XSAqL1xuXG4vKioqKioqKioqKioqKioqKlxuICogQ29tbWVudCBibG9ja1xuICoqKioqKioqKioqKioqKiovIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImV4Y2VwdGlvbnNcIjogW1wiLStcIl0gfV0gKi9cblxuLy8tKy0rLSstKy0rLSstK1xuLy8gQ29tbWVudCBibG9ja1xuLy8tKy0rLSstKy0rLSstK1xuXG4vKi0rLSstKy0rLSstKy0rKi9cbi8vIENvbW1lbnQgYmxvY2tcbi8qLSstKy0rLSstKy0rLSsqLyJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJleGNlcHRpb25zXCI6IFtcIi0rXCJdIH0gfV0gKi9cblxuLyotKy0rLSstKy0rLSstKyovXG4vLyBDb21tZW50IGJsb2NrXG4vKi0rLSstKy0rLSstKy0rKi8ifQ==)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcImJsb2NrXCI6IHsgXCJleGNlcHRpb25zXCI6IFtcIipcIl0gfSB9XSAqL1xuXG4vKioqKioqKioqKioqKioqL1xuXG4vKioqKioqKipcbkNPTU1FTlRcbioqKioqKiovIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"*\"] } }] */\n\n/***************/\n\n/********\nCOMMENT\n*******/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcIm1hcmtlcnNcIjogW1wiL1wiXSB9XSAqL1xuXG4vLy9UaGlzIGlzIGEgY29tbWVudCB3aXRoIGEgbWFya2VyIGJ1dCB3aXRob3V0IHdoaXRlc3BhY2UifQ==)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcImFsd2F5c1wiLCB7IFwiYmxvY2tcIjogeyBcIm1hcmtlcnNcIjogW1wiIVwiXSwgXCJiYWxhbmNlZFwiOiB0cnVlIH0gfV0qL1xuLyohIFRoaXMgaXMgYSBjb21tZW50IHdpdGggYSBtYXJrZXIgYnV0IHdpdGhvdXQgd2hpdGVzcGFjZSBhdCB0aGUgZW5kKi8ifQ==)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJibG9ja1wiOiB7IFwibWFya2Vyc1wiOiBbXCIhXCJdLCBcImJhbGFuY2VkXCI6IHRydWUgfSB9XSovXG4vKiFUaGlzIGlzIGEgY29tbWVudCB3aXRoIGEgbWFya2VyIGJ1dCB3aXRoIHdoaXRlc3BhY2UgYXQgdGhlIGVuZCAqLyJ9)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcIm1hcmtlcnNcIjogW1wiL1wiXSB9XSAqL1xuXG4vLy8gVGhpcyBpcyBhIGNvbW1lbnQgd2l0aCBhIG1hcmtlciJ9)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHNwYWNlZC1jb21tZW50OiBbXCJlcnJvclwiLCBcIm5ldmVyXCIsIHsgXCJtYXJrZXJzXCI6IFtcIiE8XCJdIH1dKi9cblxuLy8hPFRoaXMgaXMgYSBsaW5lIGNvbW1lbnQgd2l0aCBhIG1hcmtlclxuXG4vKiE8dGhpcyBpcyBhIGJsb2NrIGNvbW1lbnQgd2l0aCBhIG1hcmtlclxuc3Vic2VxdWVudCBsaW5lcyBhcmUgaWdub3JlZFxuKi8ifQ==)\n\n``` language-js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qIGVzbGludCBzcGFjZWQtY29tbWVudDogW1wiZXJyb3JcIiwgXCJhbHdheXNcIiwgeyBcIm1hcmtlcnNcIjogW1wiZ2xvYmFsXCJdIH1dICovXG5cbi8qZ2xvYmFsIEFCQyovIn0=)\n\n``` language-js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n## Related Rules\n\n- [spaced-line-comment](spaced-line-comment)\n\n## Version\n\nThis rule was introduced in ESLint v0.23.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/spaced-comment.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/spaced-comment.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/spaced-comment](https://eslint.org/docs/latest/rules/spaced-comment)"
- name: spaced-line-comment
  id: rules/spaced-line-comment
  summary: Enforces consistent spacing after // in line comments
  description: "# spaced-line-comment\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Related Rules](#related-rules)\n3.  [Version](#version)\n\nEnforces consistent spacing after `//` in line comments.\n\nImportant\n\nThis rule was removed in ESLint v1.0.0 and replaced by the [spaced-comment](spaced-line-commentspaced-comment) rule.\n\nSome style guides require or disallow a whitespace immediately after the initial `//` of a line comment. Whitespace after the `//` makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the `//`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a line comment `//`.\n\nThis rule takes two arguments. If the first is `\"always\"` then the `//` must be followed by at least once whitespace. If `\"never\"` then there should be no whitespace following. The default is `\"always\"`.\n\nThe second argument is an object with one key, `\"exceptions\"`. The value is an array of string patterns which are considered exceptions to the rule. It is important to note that the exceptions are ignored if the first argument is `\"never\"`. Exceptions cannot be mixed.\n\nExamples of **incorrect** code for this rule:\n\n``` language-js\n// When [\"never\"]\n// This is a comment with a whitespace at the beginning\n```\n\n``` language-js\n//When [\"always\"]\n//This is a comment with no whitespace at the beginning\nvar foo = 5;\n```\n\n``` language-js\n// When [\"always\",{\"exceptions\":[\"-\",\"+\"]}]\n//------++++++++\n// Comment block\n//------++++++++\n```\n\nExamples of **correct** code for this rule:\n\n``` language-js\n// When [\"always\"]\n// This is a comment with a whitespace at the beginning\nvar foo = 5;\n```\n\n``` language-js\n//When [\"never\"]\n//This is a comment with no whitespace at the beginning\nvar foo = 5;\n```\n\n``` language-js\n// When [\"always\",{\"exceptions\":[\"-\"]}]\n//--------------\n// Comment block\n//--------------\n```\n\n``` language-js\n// When [\"always\",{\"exceptions\":[\"-+\"]}]\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n```\n\n## Related Rules\n\n- [spaced-comment](spaced-comment)\n\n## Version\n\nThis rule was introduced in ESLint v0.9.0 and removed in v1.0.0-rc-1.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/spaced-line-comment](https://eslint.org/docs/latest/rules/spaced-line-comment)"
- name: strict
  id: rules/strict
  summary: A strict mode directive is a "use strict" literal at the beginning of a script or function body
  description: "# strict\n\nRequire or disallow strict mode directives\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](strict../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [safe](#safe)\n    2.  [global](#global)\n    3.  [function](#function)\n    4.  [never](#never)\n    5.  [earlier default (removed)](#earlier-default-removed)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nA strict mode directive is a `\"use strict\"` literal at the beginning of a script or function body. It enables strict mode semantics.\n\nWhen a directive occurs in global scope, strict mode applies to the entire script:\n\n``` language-js\n\"use strict\";\n\n// strict mode\n\nfunction foo() {\n    // strict mode\n}\n```\n\nWhen a directive occurs at the beginning of a function body, strict mode applies only to that function, including all contained functions:\n\n``` language-js\nfunction foo() {\n    \"use strict\";\n    // strict mode\n}\n\nfunction foo2() {\n    // not strict mode\n};\n\n(function() {\n    \"use strict\";\n    function bar() {\n        // strict mode\n    }\n}());\n```\n\nIn the **CommonJS** module system, a hidden function wraps each module and limits the scope of a “global” strict mode directive.\n\nIn **ECMAScript** modules, which always have strict mode semantics, the directives are unnecessary.\n\n## Rule Details\n\nThis rule requires or disallows strict mode directives.\n\nThis rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as [parser options](strict../use/configure/language-options#specifying-parser-options):\n\n- `\"sourceType\": \"module\"` that is, files are **ECMAScript** modules\n- `\"impliedStrict\": true` property in the `ecmaFeatures` object\n\nThis rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in **ECMAScript 2016** and later. See the examples of the [function](#function) option.\n\nThis rule does not apply to class static blocks, no matter which option is specified, because class static blocks do not have directives. Therefore, a `\"use strict\"` statement in a class static block is not a directive, and will be reported by the [no-unused-expressions](strictno-unused-expressions) rule.\n\nThe `--fix` option on the command line does not insert new `\"use strict\"` statements, but only removes unneeded statements.\n\n## Options\n\nThis rule has a string option:\n\n- `\"safe\"` (default) corresponds either of the following options:\n  - `\"global\"` if ESLint considers a file to be a **CommonJS** module\n  - `\"function\"` otherwise\n- `\"global\"` requires one strict mode directive in the global scope (and disallows any other strict mode directives)\n- `\"function\"` requires one strict mode directive in each top-level function declaration or expression (and disallows any other strict mode directives)\n- `\"never\"` disallows strict mode directives\n\n### safe\n\nThe `\"safe\"` option corresponds to the `\"global\"` option if ESLint considers a file to be a **Node.js** or **CommonJS** module because the configuration specifies either of the following:\n\n- `node` or `commonjs` [environments](strict../use/configure/language-options#specifying-environments)\n- `\"globalReturn\": true` property in the `ecmaFeatures` object of [parser options](strict../use/configure/language-options#specifying-parser-options)\n\nOtherwise the `\"safe\"` option corresponds to the `\"function\"` option. Note that if `\"globalReturn\": false` is explicitly specified in the configuration, the `\"safe\"` option will correspond to the `\"function\"` option regardless of the specified environment.\n\n### global\n\nExamples of **incorrect** code for this rule with the `\"global\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJnbG9iYWxcIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG59In0=)\n\n``` language-js\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJnbG9iYWxcIl0qL1xuXG5mdW5jdGlvbiBmb28oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG59In0=)\n\n``` language-js\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJnbG9iYWxcIl0qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZm9vKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xufSJ9)\n\n``` language-js\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\nExamples of **correct** code for this rule with the `\"global\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJnbG9iYWxcIl0qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZm9vKCkge1xufSJ9)\n\n``` language-js\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n### function\n\nThis option ensures that all function bodies are strict mode code, while global code is not. Particularly if a build step concatenates multiple scripts, a strict mode directive in global code of one script could unintentionally enable strict mode in another script that was not intended to be strict code.\n\nExamples of **incorrect** code for this rule with the `\"function\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJmdW5jdGlvblwiXSovXG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBmb28oKSB7XG59In0=)\n\n``` language-js\n/*eslint strict: [\"error\", \"function\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJmdW5jdGlvblwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIGJhcigpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgfVxufSgpKTsifQ==)\n\n``` language-js\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n}\n\n(function() {\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCIsImVjbWFWZXJzaW9uIjo2fX0sInRleHQiOiIvKmVzbGludCBzdHJpY3Q6IFtcImVycm9yXCIsIFwiZnVuY3Rpb25cIl0qL1xuLyplc2xpbnQtZW52IGVzNiovXG5cbi8vIElsbGVnYWwgXCJ1c2Ugc3RyaWN0XCIgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdC5cbi8vIFRoaXMgaXMgYSBzeW50YXggZXJyb3Igc2luY2UgRVMyMDE2LlxuZnVuY3Rpb24gZm9vKGEgPSAxKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG59XG5cbi8vIFdlIGNhbm5vdCB3cml0ZSBcInVzZSBzdHJpY3RcIiBkaXJlY3RpdmUgaW4gdGhpcyBmdW5jdGlvbi5cbi8vIFNvIHdlIGhhdmUgdG8gd3JhcCB0aGlzIGZ1bmN0aW9uIHdpdGggYSBmdW5jdGlvbiB3aXRoIFwidXNlIHN0cmljdFwiIGRpcmVjdGl2ZS5cbmZ1bmN0aW9uIGZvbyhhID0gMSkge1xufSJ9)\n\n``` language-js\n/*eslint strict: [\"error\", \"function\"]*/\n/*eslint-env es6*/\n\n// Illegal \"use strict\" directive in function with non-simple parameter list.\n// This is a syntax error since ES2016.\nfunction foo(a = 1) {\n    \"use strict\";\n}\n\n// We cannot write \"use strict\" directive in this function.\n// So we have to wrap this function with a function with \"use strict\" directive.\nfunction foo(a = 1) {\n}\n```\n\nExamples of **correct** code for this rule with the `\"function\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJmdW5jdGlvblwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gYmFyKCkge1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJheihhID0gMSkge1xuICAgIH1cbn0oKSk7XG5cbnZhciBmb28gPSAoZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZm9vKGEgPSAxKSB7XG4gICAgfTtcbn0oKSk7In0=)\n\n``` language-js\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n\n(function() {\n    \"use strict\";\n\n    function bar() {\n    }\n\n    function baz(a = 1) {\n    }\n}());\n\nvar foo = (function() {\n    \"use strict\";\n\n    return function foo(a = 1) {\n    };\n}());\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBmb28oKSB7XG59In0=)\n\n``` language-js\n/*eslint strict: [\"error\", \"never\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbn0ifQ==)\n\n``` language-js\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6InNjcmlwdCJ9fSwidGV4dCI6Ii8qZXNsaW50IHN0cmljdDogW1wiZXJyb3JcIiwgXCJuZXZlclwiXSovXG5cbmZ1bmN0aW9uIGZvbygpIHtcbn0ifQ==)\n\n``` language-js\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n}\n```\n\n### earlier default (removed)\n\n(removed) The default option (that is, no string option specified) for this rule was **removed** in ESLint v1.0. The `\"function\"` option is most similar to the removed option.\n\nThis option ensures that all functions are executed in strict mode. A strict mode directive must be present in global code or in every top-level function declaration or expression. It does not concern itself with unnecessary strict mode directives in nested functions that are already strict, nor with multiple strict mode directives at the same level.\n\nExamples of **incorrect** code for this rule with the earlier default option which has been removed:\n\n``` language-js\n// \"strict\": \"error\"\n\nfunction foo() {\n}\n```\n\n``` language-js\n// \"strict\": \"error\"\n\n(function() {\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\nExamples of **correct** code for this rule with the earlier default option which has been removed:\n\n``` language-js\n// \"strict\": \"error\"\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n``` language-js\n// \"strict\": \"error\"\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n``` language-js\n// \"strict\": \"error\"\n\n(function() {\n    \"use strict\";\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\n## When Not To Use It\n\nIn a codebase that has both strict and non-strict code, either turn this rule off, or [selectively disable it](strict../use/configure/rules#disabling-rules) where necessary. For example, functions referencing `arguments.callee` are invalid in strict mode. A [full list of strict mode differences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict) is available on MDN.\n\n## Version\n\nThis rule was introduced in ESLint v0.1.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/strict.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/strict.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/strict](https://eslint.org/docs/latest/rules/strict)"
- name: Submit a Pull Request
  id: contribute/pull-requests
  summary: If you want to contribute to an ESLint repo, please use a GitHub pull request
  description: "# Submit a Pull Request\n\n## Table of Contents\n\n1.  [Getting Started](#getting-started)\n2.  [Working with Code](#working-with-code)\n    1.  [Step 1: Create a new branch](#step-1-create-a-new-branch)\n    2.  [Step 2: Make your changes](#step-2-make-your-changes)\n    3.  [Step 3: Rebase onto upstream](#step-3-rebase-onto-upstream)\n    4.  [Step 4: Run the tests](#step-4-run-the-tests)\n    5.  [Step 5: Double check your submission](#step-5-double-check-your-submission)\n    6.  [Step 6: Push your changes](#step-6-push-your-changes)\n    7.  [Step 7: Send the pull request](#step-7-send-the-pull-request)\n3.  [Following Up](#following-up)\n    1.  [Updating the Pull Request Title](#updating-the-pull-request-title)\n    2.  [Updating the Code](#updating-the-code)\n    3.  [Rebasing](#rebasing)\n\nIf you want to contribute to an ESLint repo, please use a GitHub pull request. This is the fastest way for us to evaluate your code and to merge it into the code base. Please don’t file an issue with snippets of code. Doing so means that we need to manually merge the changes in and update any appropriate tests. That decreases the likelihood that your code is going to get included in a timely manner. Please use pull requests.\n\n## Getting Started\n\nIf you’d like to work on a pull request and you’ve never submitted code before, follow these steps:\n\n1.  Set up a [development environment](pull-requests./development-environment).\n2.  If you want to implement a breaking change or a change to the core, ensure there’s an issue that describes what you’re doing and the issue has been accepted. You can create a new issue or just indicate you’re [working on an existing issue](pull-requests./work-on-issue). Bug fixes, documentation changes, and other pull requests do not require an issue.\n\nAfter that, you’re ready to start working on code.\n\n## Working with Code\n\nThe process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:\n\n1.  [Create a new branch](#step1)\n2.  [Make your changes](#step2)\n3.  [Rebase onto upstream](#step3)\n4.  [Run the tests](#step4)\n5.  [Double check your submission](#step5)\n6.  [Push your changes](#step6)\n7.  [Submit the pull request](#step7)\n\nDetails about each step are found below.\n\n### Step 1: Create a new branch\n\nThe first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you’re fixing, such as:\n\n``` language-shell\ngit checkout -b issue1234\n```\n\nYou should do all of your development for the issue in this branch.\n\n**Note:** Do not combine fixes for multiple issues into one branch. Use a separate branch for each issue you’re working on.\n\n### Step 2: Make your changes\n\nMake the changes to the code and tests, following the [code conventions](pull-requests./code-conventions) as you go. Once you have finished, commit the changes to your branch:\n\n``` language-shell\ngit add -A\ngit commit\n```\n\nAll ESLint projects follow [Conventional Commits](https://www.conventionalcommits.org/) for our commit messages. (Note: we don’t support the optional scope in messages.) Here’s an example commit message:\n\n``` language-txt\ntag: Short description of what you did\n\nLonger description here if necessary\n\nFixes #1234\n```\n\nThe first line of the commit message (the summary) must have a specific format. This format is checked by our build tools. Although the commit message is not checked directly, it will be used to generate the title of a pull request, which will be checked when the pull request is submitted.\n\nThe `tag` is one of the following:\n\n- `fix` - for a bug fix.\n- `feat` - either for a backwards-compatible enhancement or for a rule change that adds reported problems.\n- `fix!` - for a backwards-incompatible bug fix.\n- `feat!` - for a backwards-incompatible enhancement or feature.\n- `docs` - changes to documentation only.\n- `chore` - for changes that aren’t user-facing.\n- `build` - changes to build process only.\n- `refactor` - a change that doesn’t affect APIs or user experience.\n- `test` - just changes to test files.\n- `ci` - changes to our CI configuration files and scripts.\n- `perf` - a code change that improves performance.\n\nUse the [labels of the issue you are working on](pull-requestswork-on-issue#issue-labels) to determine the best tag.\n\nThe message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned in the body of the commit message in the format `Fixes #1234`. If the commit doesn’t completely fix the issue, then use `Refs #1234` instead of `Fixes #1234`.\n\nHere are some good commit message summary examples:\n\n``` language-txt\nbuild: Update Travis to only test Node 0.10\nfix: Semi rule incorrectly flagging extra semicolon\nchore: Upgrade Esprima to 1.2, switch to using comment attachment\n```\n\n### Step 3: Rebase onto upstream\n\nBefore you send the pull request, be sure to rebase onto the upstream source. This ensures your code is running on the latest available code.\n\n``` language-shell\ngit fetch upstream\ngit rebase upstream/main\n```\n\n### Step 4: Run the tests\n\nAfter rebasing, be sure to run all of the tests once again to make sure nothing broke:\n\n``` language-shell\nnpm test\n```\n\nIf there are any failing tests, update your code until all tests pass.\n\n### Step 5: Double check your submission\n\nWith your code ready to go, this is a good time to double-check your submission to make sure it follows our conventions. Here are the things to check:\n\n- The commit message is properly formatted.\n- The change introduces no functional regression. Be sure to run `npm test` to verify your changes before submitting a pull request.\n- Make separate pull requests for unrelated changes. Large pull requests with multiple unrelated changes may be closed without merging.\n- All changes must be accompanied by tests, even if the feature you’re working on previously had no tests.\n- All user-facing changes must be accompanied by appropriate documentation.\n- Follow the [Code Conventions](pull-requests./code-conventions).\n\n### Step 6: Push your changes\n\nNext, push your changes to your clone:\n\n``` language-shell\ngit push origin issue1234\n```\n\nIf you are unable to push because some references are old, do a forced push instead:\n\n``` language-shell\ngit push -f origin issue1234\n```\n\n### Step 7: Send the pull request\n\nNow you’re ready to send the pull request. Go to your ESLint fork and then follow the [GitHub documentation](https://help.github.com/articles/creating-a-pull-request) on how to send a pull request.\n\nIn order to submit code or documentation to an ESLint project, you’ll be asked to sign our CLA when you send your first pull request. (Read more about the Open JS Foundation CLA process at <https://cla.openjsf.org/>.)\n\nThe pull request title is autogenerated from the summary of the first commit, but it can be edited before the pull request is submitted.\n\nThe description of a pull request should explain what you did and how its effects can be seen.\n\nWhen a pull request is merged, its commits will be squashed into one single commit. The first line of the squashed commit message will contain the title of the pull request and the pull request number. The pull request title format is important because the titles are used to create a changelog for each release. The tag and the issue number help to create more consistent and useful changelogs.\n\n## Following Up\n\nOnce your pull request is sent, it’s time for the team to review it. As such, please make sure to:\n\n1.  Monitor the status of the GitHub Actions CI build for your pull request. If it fails, please investigate why. We cannot merge pull requests that fail the CI build for any reason.\n2.  Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.\n3.  We may ask you to make changes, rebase, or squash your commits.\n\n### Updating the Pull Request Title\n\nIf your pull request title is in the incorrect format, you’ll be asked to update it. You can do so via the GitHub user interface.\n\n### Updating the Code\n\nIf we ask you to make code changes, there’s no need to close the pull request and create a new one. Just go back to the branch on your fork and make your changes. Then, when you’re ready, you can add your changes into the branch:\n\n``` language-shell\ngit add -A\ngit commit\ngit push origin issue1234\n```\n\nWhen updating the code, it’s usually better to add additional commits to your branch rather than amending the original commit, because reviewers can easily tell which changes were made in response to a particular review. When we merge pull requests, we will squash all the commits from your branch into a single commit on the `main` branch.\n\nThe commit messages in subsequent commits do not need to be in any specific format because these commits do not show up in the changelog.\n\n### Rebasing\n\nIf your code is out-of-date, we might ask you to rebase. That means we want you to apply your changes on top of the latest upstream code. Make sure you have set up a [development environment](pull-requests./development-environment) and then you can rebase using these commands:\n\n``` language-shell\ngit fetch upstream\ngit rebase upstream/main\n```\n\nYou might find that there are merge conflicts when you attempt to rebase. Please [resolve the conflicts](https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/) and then do a forced push to your branch:\n\n``` language-shell\ngit push origin issue1234 -f\n```\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/pull-requests](https://eslint.org/docs/latest/contribute/pull-requests)"
- name: switch-colon-spacing
  id: rules/switch-colon-spacing
  summary: This rule was deprecated in ESLint v8.53.0
  description: "# switch-colon-spacing\n\nEnforce spacing around colons of switch statements\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](switch-colon-spacing../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [When Not To Use It](#when-not-to-use-it)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nThis rule was **deprecated** in ESLint v8.53.0. Please use the [corresponding rule](https://eslint.style/rules/js/switch-colon-spacing) in [`@stylistic/eslint-plugin-js`](https://eslint.style/packages/js).\n\nSpacing around colons improves readability of `case`/`default` clauses.\n\n## Rule Details\n\nThis rule controls spacing around colons of `case` and `default` clauses in `switch` statements. This rule does the check only if the consecutive tokens exist on the same line.\n\nThis rule has 2 options that are boolean value.\n\n``` language-json\n{\n    \"switch-colon-spacing\": [\"error\", {\"after\": true, \"before\": false}]\n}\n```\n\n- `\"after\": true` (Default) requires one or more spaces after colons.\n- `\"after\": false` disallows spaces after colons.\n- `\"before\": true` requires one or more spaces before colons.\n- `\"before\": false` (Default) disallows before colons.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN3aXRjaC1jb2xvbi1zcGFjaW5nOiBcImVycm9yXCIqL1xuXG5zd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDAgOmJyZWFrO1xuICAgIGRlZmF1bHQgOmZvbygpO1xufSJ9)\n\n``` language-js\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0 :break;\n    default :foo();\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN3aXRjaC1jb2xvbi1zcGFjaW5nOiBcImVycm9yXCIqL1xuXG5zd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDA6IGZvbygpOyBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG59In0=)\n\n``` language-js\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0: foo(); break;\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n}\n```\n\nExamples of **incorrect** code for this rule with `{\"after\": false, \"before\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN3aXRjaC1jb2xvbi1zcGFjaW5nOiBbXCJlcnJvclwiLCB7XCJhZnRlclwiOiBmYWxzZSwgXCJiZWZvcmVcIjogdHJ1ZX1dKi9cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBkZWZhdWx0OiBmb28oKTtcbn0ifQ==)\n\n``` language-js\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0: break;\n    default: foo();\n}\n```\n\nExamples of **correct** code for this rule with `{\"after\": false, \"before\": true}` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN3aXRjaC1jb2xvbi1zcGFjaW5nOiBbXCJlcnJvclwiLCB7XCJhZnRlclwiOiBmYWxzZSwgXCJiZWZvcmVcIjogdHJ1ZX1dKi9cblxuc3dpdGNoIChhKSB7XG4gICAgY2FzZSAwIDpmb28oKTsgYnJlYWs7XG4gICAgY2FzZSAxIDpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQgOlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG59In0=)\n\n``` language-js\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0 :foo(); break;\n    case 1 :\n        bar();\n        break;\n    default :\n        baz();\n        break;\n}\n```\n\n## When Not To Use It\n\nIf you don’t want to notify spacing around colons of switch statements, then it’s safe to disable this rule.\n\n## Version\n\nThis rule was introduced in ESLint v4.0.0-beta.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/switch-colon-spacing.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/switch-colon-spacing.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/switch-colon-spacing](https://eslint.org/docs/latest/rules/switch-colon-spacing)"
- name: symbol-description
  id: rules/symbol-description
  summary: It may facilitate identifying symbols when one is observed during debugging
  description: "# symbol-description\n\nRequire symbol descriptions\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Examples](#examples)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nThe `Symbol` function may have an optional description:\n\n``` language-js\nvar foo = Symbol(\"some description\");\n\nvar someString = \"some description\";\nvar bar = Symbol(someString);\n```\n\nUsing `description` promotes easier debugging: when a symbol is logged the description is used:\n\n``` language-js\nvar foo = Symbol(\"some description\");\n\n> console.log(foo);\n// Symbol(some description)\n```\n\nIt may facilitate identifying symbols when one is observed during debugging.\n\n## Rule Details\n\nThis rules requires a description when creating symbols.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN5bWJvbC1kZXNjcmlwdGlvbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgZm9vID0gU3ltYm9sKCk7In0=)\n\n``` language-js\n/*eslint symbol-description: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol();\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHN5bWJvbC1kZXNjcmlwdGlvbjogXCJlcnJvclwiKi9cbi8qZXNsaW50LWVudiBlczYqL1xuXG52YXIgZm9vID0gU3ltYm9sKFwic29tZSBkZXNjcmlwdGlvblwiKTtcblxudmFyIHNvbWVTdHJpbmcgPSBcInNvbWUgZGVzY3JpcHRpb25cIjtcbnZhciBiYXIgPSBTeW1ib2woc29tZVN0cmluZyk7In0=)\n\n``` language-js\n/*eslint symbol-description: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol(\"some description\");\n\nvar someString = \"some description\";\nvar bar = Symbol(someString);\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments. In addition, this rule can be safely turned off if you don’t want to enforce presence of `description` when creating Symbols.\n\n## Version\n\nThis rule was introduced in ESLint v3.4.0.\n\n## Further Reading\n\n[ECMAScript 2015 Language Specification – ECMA-262 6th Edition](https://www.ecma-international.org/ecma-262/6.0/#sec-symbol-description)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/symbol-description.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/symbol-description.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/symbol-description](https://eslint.org/docs/latest/rules/symbol-description)"
- name: unicode-bom
  id: rules/unicode-bom
  summary: The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian
  description: "# unicode-bom\n\nRequire or disallow Unicode byte order mark (BOM)\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](unicode-bom../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [always](#always)\n    2.  [never](#never)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Resources](#resources)\n\nThe Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make `\"never\"` the default option.\n\n## Rule Details\n\nIf the `\"always\"` option is used, this rule requires that files always begin with the Unicode BOM character U+FEFF. If `\"never\"` is used, files must never begin with U+FEFF.\n\n## Options\n\nThis rule has a string option:\n\n- `\"always\"` files must begin with the Unicode BOM\n- `\"never\"` (default) files must not begin with the Unicode BOM\n\n### always\n\nExample of **correct** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Iu+7vy8vIFUrRkVGRiBhdCB0aGUgYmVnaW5uaW5nXG5cbi8qZXNsaW50IHVuaWNvZGUtYm9tOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbnZhciBhYmM7In0=)\n\n``` language-js\n\uFEFF// U+FEFF at the beginning\n\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nvar abc;\n```\n\nExample of **incorrect** code for this rule with the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVuaWNvZGUtYm9tOiBbXCJlcnJvclwiLCBcImFsd2F5c1wiXSovXG5cbnZhciBhYmM7In0=)\n\n``` language-js\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nvar abc;\n```\n\n### never\n\nExample of **correct** code for this rule with the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVuaWNvZGUtYm9tOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxudmFyIGFiYzsifQ==)\n\n``` language-js\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nvar abc;\n```\n\nExample of **incorrect** code for this rule with the `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Iu+7vy8vIFUrRkVGRiBhdCB0aGUgYmVnaW5uaW5nXG5cbi8qZXNsaW50IHVuaWNvZGUtYm9tOiBbXCJlcnJvclwiLCBcIm5ldmVyXCJdKi9cblxudmFyIGFiYzsifQ==)\n\n``` language-js\n\uFEFF// U+FEFF at the beginning\n\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nvar abc;\n```\n\n## When Not To Use It\n\nIf you use some UTF-16 or UTF-32 files and you want to allow a file to optionally begin with a Unicode BOM, you should turn this rule off.\n\n## Version\n\nThis rule was introduced in ESLint v2.11.0.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/unicode-bom.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/unicode-bom.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/unicode-bom](https://eslint.org/docs/latest/rules/unicode-bom)"
- name: Use ESLint in Your Project
  id: use/index
  summary: This guide is intended for those who wish to use ESLint as an end-user
  description: "# Use ESLint in Your Project\n\n## Table of Contents\n\n1.  [Getting Started](#getting-started)\n2.  [Core Concepts](#core-concepts)\n3.  [Configure ESLint](#configure-eslint)\n4.  [Command Line Interface Reference](#command-line-interface-reference)\n5.  [Rules Reference](#rules-reference)\n6.  [Formatters Reference](#formatters-reference)\n7.  [Integrations](#integrations)\n8.  [Rule Deprecation](#rule-deprecation)\n9.  [Migrating](#migrating)\n\nThis guide is intended for those who wish to use ESLint as an end-user. If you’re looking for how to extend ESLint or work with the ESLint source code, please see the [Extend ESLint documentation](../extend/index).\n\n## [Getting Started](getting-started)\n\nWant to skip ahead and just start using ESLint? This section gives a high-level overview of installation, setup, and configuration options.\n\n## [Core Concepts](core-concepts)\n\nUnderstand the main components of ESLint and how to use them in your project.\n\n## [Configure ESLint](configure/index)\n\nOnce you’ve got ESLint running, you’ll probably want to adjust the configuration to better suit your project. This section explains all the different ways you can configure ESLint.\n\n## [Command Line Interface Reference](command-line-interface)\n\nThere are a lot of command line flags for ESLint and this section explains what they do.\n\n## [Rules Reference](../rules/index)\n\nESLint has a lot of rules that you can configure to fine-tune it to your project. This section is an exhaustive list of every rule and link to each rule’s documentation.\n\n## [Formatters Reference](formatters)\n\nControl the appearance of the linting results with formatters. View all built-in formatters on this page.\n\n## [Integrations](integrations)\n\nWondering if ESLint will work with your favorite editor or build system? This page has a list of integrations (submitted by their authors).\n\n## [Rule Deprecation](https://eslint.org/docs/latest/use/rule-deprecation)\n\nThe ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.\n\n## Migrating\n\nIf you were using a prior version of ESLint, you can get help with the transition by reading:\n\n- [migrating-to-1.0.0](https://eslint.org/docs/latest/use/migrating-to-1.0.0)\n- [migrating-to-2.0.0](https://eslint.org/docs/latest/use/migrating-to-2.0.0)\n- [migrating-to-3.0.0](https://eslint.org/docs/latest/use/migrating-to-3.0.0)\n- [migrating-to-4.0.0](https://eslint.org/docs/latest/use/migrating-to-4.0.0)\n- [migrating-to-5.0.0](https://eslint.org/docs/latest/use/migrating-to-5.0.0)\n- [migrating-to-6.0.0](https://eslint.org/docs/latest/use/migrating-to-6.0.0)\n- [migrating-to-7.0.0](https://eslint.org/docs/latest/use/migrating-to-7.0.0)\n- [migrate-to-8.0.0](https://eslint.org/docs/latest/use/migrate-to-8.0.0)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/use/](https://eslint.org/docs/latest/use/)"
- name: use-isnan
  id: rules/use-isnan
  summary: In JavaScript, NaN is a special value of the Number type
  description: "# use-isnan\n\nRequire calls to `isNaN()` when checking for `NaN`\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](use-isnan../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [enforceForSwitchCase](#enforceforswitchcase)\n    2.  [enforceForIndexOf](#enforceforindexof)\n        1.  [Known Limitations](#known-limitations)\n3.  [Version](#version)\n4.  [Resources](#resources)\n\nIn JavaScript, `NaN` is a special value of the `Number` type. It’s used to represent any of the “not-a-number” values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.\n\nBecause `NaN` is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to `NaN` are confusing:\n\n- `NaN === NaN` or `NaN == NaN` evaluate to false\n- `NaN !== NaN` or `NaN != NaN` evaluate to true\n\nTherefore, use `Number.isNaN()` or global `isNaN()` functions to test whether a value is `NaN`.\n\n## Rule Details\n\nThis rule disallows comparisons to ‘NaN’.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogXCJlcnJvclwiKi9cblxuaWYgKGZvbyA9PSBOYU4pIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGZvbyAhPSBOYU4pIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGZvbyA9PSBOdW1iZXIuTmFOKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmIChmb28gIT0gTnVtYmVyLk5hTikge1xuICAgIC8vIC4uLlxufSJ9)\n\n``` language-js\n/*eslint use-isnan: \"error\"*/\n\nif (foo == NaN) {\n    // ...\n}\n\nif (foo != NaN) {\n    // ...\n}\n\nif (foo == Number.NaN) {\n    // ...\n}\n\nif (foo != Number.NaN) {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogXCJlcnJvclwiKi9cblxuaWYgKGlzTmFOKGZvbykpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKCFpc05hTihmb28pKSB7XG4gICAgLy8gLi4uXG59In0=)\n\n``` language-js\n/*eslint use-isnan: \"error\"*/\n\nif (isNaN(foo)) {\n    // ...\n}\n\nif (!isNaN(foo)) {\n    // ...\n}\n```\n\n## Options\n\nThis rule has an object option, with two options:\n\n- `\"enforceForSwitchCase\": true` (default) additionally disallows `case NaN` and `switch(NaN)` in `switch` statements.\n- `\"enforceForIndexOf\": true` additionally disallows the use of `indexOf` and `lastIndexOf` methods with `NaN`. Default is `false`, meaning that this rule by default does not warn about `indexOf(NaN)` or `lastIndexOf(NaN)` method calls.\n\n### enforceForSwitchCase\n\nThe `switch` statement internally uses the `===` comparison to match the expression’s value to a case clause. Therefore, it can never match `case NaN`. Also, `switch(NaN)` can never match a case clause.\n\nExamples of **incorrect** code for this rule with `\"enforceForSwitchCase\"` option set to `true` (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvclN3aXRjaENhc2VcIjogdHJ1ZX1dKi9cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIE5hTjpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgICAgYmF6KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIC8vIC4uLlxufVxuXG5zd2l0Y2ggKE5hTikge1xuICAgIGNhc2UgYTpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgYjpcbiAgICAgICAgYmF6KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIC8vIC4uLlxufVxuXG5zd2l0Y2ggKGZvbykge1xuICAgIGNhc2UgTnVtYmVyLk5hTjpcbiAgICAgICAgYmFyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgICAgYmF6KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIC8vIC4uLlxufVxuXG5zd2l0Y2ggKE51bWJlci5OYU4pIHtcbiAgICBjYXNlIGE6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIGI6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbiAgICAvLyAuLi5cbn0ifQ==)\n\n``` language-js\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": true}]*/\n\nswitch (foo) {\n    case NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n\nswitch (foo) {\n    case Number.NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (Number.NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with `\"enforceForSwitchCase\"` option set to `true` (default):\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvclN3aXRjaENhc2VcIjogdHJ1ZX1dKi9cblxuaWYgKE51bWJlci5pc05hTihmb28pKSB7XG4gICAgYmFyKCk7XG59IGVsc2Uge1xuICAgIHN3aXRjaCAoZm9vKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGJheigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIC4uLlxuICAgIH1cbn1cblxuaWYgKE51bWJlci5pc05hTihhKSkge1xuICAgIGJhcigpO1xufSBlbHNlIGlmIChOdW1iZXIuaXNOYU4oYikpIHtcbiAgICBiYXooKTtcbn0gLy8gLi4uIn0=)\n\n``` language-js\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": true}]*/\n\nif (Number.isNaN(foo)) {\n    bar();\n} else {\n    switch (foo) {\n        case 1:\n            baz();\n            break;\n        // ...\n    }\n}\n\nif (Number.isNaN(a)) {\n    bar();\n} else if (Number.isNaN(b)) {\n    baz();\n} // ...\n```\n\nExamples of **correct** code for this rule with `\"enforceForSwitchCase\"` option set to `false`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvclN3aXRjaENhc2VcIjogZmFsc2V9XSovXG5cbnN3aXRjaCAoZm9vKSB7XG4gICAgY2FzZSBOYU46XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbiAgICAvLyAuLi5cbn1cblxuc3dpdGNoIChOYU4pIHtcbiAgICBjYXNlIGE6XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIGI6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbiAgICAvLyAuLi5cbn1cblxuc3dpdGNoIChmb28pIHtcbiAgICBjYXNlIE51bWJlci5OYU46XG4gICAgICAgIGJhcigpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICAgIGJheigpO1xuICAgICAgICBicmVhaztcbiAgICAvLyAuLi5cbn1cblxuc3dpdGNoIChOdW1iZXIuTmFOKSB7XG4gICAgY2FzZSBhOlxuICAgICAgICBiYXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBiOlxuICAgICAgICBiYXooKTtcbiAgICAgICAgYnJlYWs7XG4gICAgLy8gLi4uXG59In0=)\n\n``` language-js\n/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": false}]*/\n\nswitch (foo) {\n    case NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n\nswitch (foo) {\n    case Number.NaN:\n        bar();\n        break;\n    case 1:\n        baz();\n        break;\n    // ...\n}\n\nswitch (Number.NaN) {\n    case a:\n        bar();\n        break;\n    case b:\n        baz();\n        break;\n    // ...\n}\n```\n\n### enforceForIndexOf\n\nThe following methods internally use the `===` comparison to match the given value with an array element:\n\n- [`Array.prototype.indexOf`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.indexof)\n- [`Array.prototype.lastIndexOf`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.lastindexof)\n\nTherefore, for any array `foo`, `foo.indexOf(NaN)` and `foo.lastIndexOf(NaN)` will always return `-1`.\n\nSet `\"enforceForIndexOf\"` to `true` if you want this rule to report `indexOf(NaN)` and `lastIndexOf(NaN)` method calls.\n\nExamples of **incorrect** code for this rule with `\"enforceForIndexOf\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvckluZGV4T2ZcIjogdHJ1ZX1dKi9cblxudmFyIGhhc05hTiA9IG15QXJyYXkuaW5kZXhPZihOYU4pID49IDA7XG5cbnZhciBmaXJzdEluZGV4ID0gbXlBcnJheS5pbmRleE9mKE5hTik7XG5cbnZhciBsYXN0SW5kZXggPSBteUFycmF5Lmxhc3RJbmRleE9mKE5hTik7In0=)\n\n``` language-js\n/*eslint use-isnan: [\"error\", {\"enforceForIndexOf\": true}]*/\n\nvar hasNaN = myArray.indexOf(NaN) >= 0;\n\nvar firstIndex = myArray.indexOf(NaN);\n\nvar lastIndex = myArray.lastIndexOf(NaN);\n```\n\nExamples of **correct** code for this rule with `\"enforceForIndexOf\"` option set to `true`:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHVzZS1pc25hbjogW1wiZXJyb3JcIiwge1wiZW5mb3JjZUZvckluZGV4T2ZcIjogdHJ1ZX1dKi9cblxuZnVuY3Rpb24gbXlJc05hTih2YWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiAmJiBpc05hTih2YWwpO1xufVxuXG5mdW5jdGlvbiBpbmRleE9mTmFOKGFycikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChteUlzTmFOKGFycltpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gbGFzdEluZGV4T2ZOYU4oYXJyKSB7XG4gICAgZm9yICh2YXIgaSA9IGFyci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAobXlJc05hTihhcnJbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbnZhciBoYXNOYU4gPSBteUFycmF5LnNvbWUobXlJc05hTik7XG5cbnZhciBoYXNOYU4gPSBpbmRleE9mTmFOKG15QXJyYXkpID49IDA7XG5cbnZhciBmaXJzdEluZGV4ID0gaW5kZXhPZk5hTihteUFycmF5KTtcblxudmFyIGxhc3RJbmRleCA9IGxhc3RJbmRleE9mTmFOKG15QXJyYXkpO1xuXG4vLyBFUzIwMTVcbnZhciBoYXNOYU4gPSBteUFycmF5LnNvbWUoTnVtYmVyLmlzTmFOKTtcblxuLy8gRVMyMDE1XG52YXIgZmlyc3RJbmRleCA9IG15QXJyYXkuZmluZEluZGV4KE51bWJlci5pc05hTik7XG5cbi8vIEVTMjAxNlxudmFyIGhhc05hTiA9IG15QXJyYXkuaW5jbHVkZXMoTmFOKTsifQ==)\n\n``` language-js\n/*eslint use-isnan: [\"error\", {\"enforceForIndexOf\": true}]*/\n\nfunction myIsNaN(val) {\n    return typeof val === \"number\" && isNaN(val);\n}\n\nfunction indexOfNaN(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        if (myIsNaN(arr[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction lastIndexOfNaN(arr) {\n    for (var i = arr.length - 1; i >= 0; i--) {\n        if (myIsNaN(arr[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar hasNaN = myArray.some(myIsNaN);\n\nvar hasNaN = indexOfNaN(myArray) >= 0;\n\nvar firstIndex = indexOfNaN(myArray);\n\nvar lastIndex = lastIndexOfNaN(myArray);\n\n// ES2015\nvar hasNaN = myArray.some(Number.isNaN);\n\n// ES2015\nvar firstIndex = myArray.findIndex(Number.isNaN);\n\n// ES2016\nvar hasNaN = myArray.includes(NaN);\n```\n\n#### Known Limitations\n\nThis option checks methods with the given names, *even if* the object which has the method is *not* an array.\n\n## Version\n\nThis rule was introduced in ESLint v0.0.6.\n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/use-isnan.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/use-isnan.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/use-isnan](https://eslint.org/docs/latest/rules/use-isnan)"
- name: valid-typeof
  id: rules/valid-typeof
  summary: 'For a vast majority of use cases, the result of the typeof operator is one of the following string literals: "undefined", "object", "boolean", "number", "string", "function", "symbol", and "bigint". It is usually a typing mistake to compare the result of a typeof operator to other string literals'
  description: "# valid-typeof\n\nEnforce comparing `typeof` expressions against valid strings\n\n✅ Recommended\n\nThe `\"extends\": \"eslint:recommended\"` property in a [configuration file](valid-typeof../use/configure/configuration-files#extending-configuration-files) enables this rule\n\n💡 hasSuggestions\n\nSome problems reported by this rule are manually fixable by editor [suggestions](valid-typeof../use/core-concepts#rule-suggestions)\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n3.  [When Not To Use It](#when-not-to-use-it)\n4.  [Version](#version)\n5.  [Further Reading](#further-reading)\n6.  [Resources](#resources)\n\nFor a vast majority of use cases, the result of the `typeof` operator is one of the following string literals: `\"undefined\"`, `\"object\"`, `\"boolean\"`, `\"number\"`, `\"string\"`, `\"function\"`, `\"symbol\"`, and `\"bigint\"`. It is usually a typing mistake to compare the result of a `typeof` operator to other string literals.\n\n## Rule Details\n\nThis rule enforces comparing `typeof` expressions to valid string literals.\n\n## Options\n\nThis rule has an object option:\n\n- `\"requireStringLiterals\": true` requires `typeof` expressions to only be compared to string literals or other `typeof` expressions, and disallows comparisons to any other value.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhbGlkLXR5cGVvZjogXCJlcnJvclwiKi9cblxudHlwZW9mIGZvbyA9PT0gXCJzdHJuaWdcIlxudHlwZW9mIGZvbyA9PSBcInVuZGVmaW1lZFwiXG50eXBlb2YgYmFyICE9IFwibnVuYmVyXCJcbnR5cGVvZiBiYXIgIT09IFwiZnVjbnRpb25cIiJ9)\n\n``` language-js\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"strnig\"\ntypeof foo == \"undefimed\"\ntypeof bar != \"nunber\"\ntypeof bar !== \"fucntion\"\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhbGlkLXR5cGVvZjogXCJlcnJvclwiKi9cblxudHlwZW9mIGZvbyA9PT0gXCJzdHJpbmdcIlxudHlwZW9mIGJhciA9PSBcInVuZGVmaW5lZFwiXG50eXBlb2YgZm9vID09PSBiYXpcbnR5cGVvZiBiYXIgPT09IHR5cGVvZiBxdXgifQ==)\n\n``` language-js\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"string\"\ntypeof bar == \"undefined\"\ntypeof foo === baz\ntypeof bar === typeof qux\n```\n\nExamples of **incorrect** code with the `{ \"requireStringLiterals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhbGlkLXR5cGVvZjogW1wiZXJyb3JcIiwgeyBcInJlcXVpcmVTdHJpbmdMaXRlcmFsc1wiOiB0cnVlIH1dKi9cblxudHlwZW9mIGZvbyA9PT0gdW5kZWZpbmVkXG50eXBlb2YgYmFyID09IE9iamVjdFxudHlwZW9mIGJheiA9PT0gXCJzdHJuaWdcIlxudHlwZW9mIHF1eCA9PT0gXCJzb21lIGludmFsaWQgdHlwZVwiXG50eXBlb2YgYmF6ID09PSBhbm90aGVyVmFyaWFibGVcbnR5cGVvZiBmb28gPT0gNSJ9)\n\n``` language-js\n/*eslint valid-typeof: [\"error\", { \"requireStringLiterals\": true }]*/\n\ntypeof foo === undefined\ntypeof bar == Object\ntypeof baz === \"strnig\"\ntypeof qux === \"some invalid type\"\ntypeof baz === anotherVariable\ntypeof foo == 5\n```\n\nExamples of **correct** code with the `{ \"requireStringLiterals\": true }` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhbGlkLXR5cGVvZjogW1wiZXJyb3JcIiwgeyBcInJlcXVpcmVTdHJpbmdMaXRlcmFsc1wiOiB0cnVlIH1dKi9cblxudHlwZW9mIGZvbyA9PT0gXCJ1bmRlZmluZWRcIlxudHlwZW9mIGJhciA9PSBcIm9iamVjdFwiXG50eXBlb2YgYmF6ID09PSBcInN0cmluZ1wiXG50eXBlb2YgYmFyID09PSB0eXBlb2YgcXV4In0=)\n\n``` language-js\n/*eslint valid-typeof: [\"error\", { \"requireStringLiterals\": true }]*/\n\ntypeof foo === \"undefined\"\ntypeof bar == \"object\"\ntypeof baz === \"string\"\ntypeof bar === typeof qux\n```\n\n## When Not To Use It\n\nYou may want to turn this rule off if you will be using the `typeof` operator on host objects.\n\n## Version\n\nThis rule was introduced in ESLint v0.5.0.\n\n## Further Reading\n\n[typeof - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/valid-typeof.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/valid-typeof.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/valid-typeof](https://eslint.org/docs/latest/rules/valid-typeof)"
- name: vars-on-top
  id: rules/vars-on-top
  summary: The vars-on-top rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program
  description: "# vars-on-top\n\nRequire `var` declarations be placed at the top of their containing scope\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Version](#version)\n3.  [Further Reading](#further-reading)\n4.  [Resources](#resources)\n\nThe `vars-on-top` rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (“hoisted”) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.\n\n## Rule Details\n\nThis rule aims to keep all variable declarations in the leading series of statements. Allowing multiple declarations helps promote maintainability and is thus allowed.\n\nExamples of **incorrect** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG4vLyBWYXJpYWJsZSBkZWNsYXJhdGlvbiBpbiBhIG5lc3RlZCBibG9jaywgYW5kIGEgdmFyaWFibGUgZGVjbGFyYXRpb24gYWZ0ZXIgb3RoZXIgc3RhdGVtZW50czpcbmZ1bmN0aW9uIGRvU29tZXRoaW5nKCkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgfVxuICAgIHZhciBzZWNvbmQ7XG59XG5cbi8vIFZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIGZvciBpbml0aWFsaXplcjpcbmZ1bmN0aW9uIGRvU29tZXRoaW5nRWxzZSgpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8MTA7IGkrKykge31cbn0ifQ==)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\n// Variable declaration in a nested block, and a variable declaration after other statements:\nfunction doSomething() {\n    if (true) {\n        var first = true;\n    }\n    var second;\n}\n\n// Variable declaration in for initializer:\nfunction doSomethingElse() {\n    for (var i=0; i<10; i++) {}\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG4vLyBWYXJpYWJsZSBkZWNsYXJhdGlvbiBhZnRlciBvdGhlciBzdGF0ZW1lbnRzOlxuZigpO1xudmFyIGE7In0=)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\n// Variable declaration after other statements:\nf();\nvar a;\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG4vLyBWYXJpYWJsZXMgaW4gY2xhc3Mgc3RhdGljIGJsb2NrcyBzaG91bGQgYmUgYXQgdGhlIHRvcCBvZiB0aGUgc3RhdGljIGJsb2Nrcy5cblxuY2xhc3MgQyB7XG5cbiAgICAvLyBWYXJpYWJsZSBkZWNsYXJhdGlvbiBpbiBhIG5lc3RlZCBibG9jazpcbiAgICBzdGF0aWMge1xuICAgICAgICBpZiAoc29tZXRoaW5nKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWYXJpYWJsZSBkZWNsYXJhdGlvbiBhZnRlciBvdGhlciBzdGF0ZW1lbnRzOlxuICAgIHN0YXRpYyB7XG4gICAgICAgIGYoKTtcbiAgICAgICAgdmFyIGE7XG4gICAgfVxuXG59In0=)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\n// Variables in class static blocks should be at the top of the static blocks.\n\nclass C {\n\n    // Variable declaration in a nested block:\n    static {\n        if (something) {\n            var a = true;\n        }\n    }\n\n    // Variable declaration after other statements:\n    static {\n        f();\n        var a;\n    }\n\n}\n```\n\nExamples of **correct** code for this rule:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG5mdW5jdGlvbiBkb1NvbWV0aGluZygpIHtcbiAgICB2YXIgZmlyc3Q7XG4gICAgdmFyIHNlY29uZDsgLy9tdWx0aXBsZSBkZWNsYXJhdGlvbnMgYXJlIGFsbG93ZWQgYXQgdGhlIHRvcFxuICAgIGlmICh0cnVlKSB7XG4gICAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvU29tZXRoaW5nRWxzZSgpIHtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGk9MDsgaTwxMDsgaSsrKSB7fVxufSJ9)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\nfunction doSomething() {\n    var first;\n    var second; //multiple declarations are allowed at the top\n    if (true) {\n        first = true;\n    }\n}\n\nfunction doSomethingElse() {\n    var i;\n    for (i=0; i<10; i++) {}\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG52YXIgYTtcbmYoKTsifQ==)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\nvar a;\nf();\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG5jbGFzcyBDIHtcblxuICAgIHN0YXRpYyB7XG4gICAgICAgIHZhciBhO1xuICAgICAgICBpZiAoc29tZXRoaW5nKSB7XG4gICAgICAgICAgICBhID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIHZhciBhO1xuICAgICAgICBmKCk7XG4gICAgfVxuXG59In0=)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\nclass C {\n\n    static {\n        var a;\n        if (something) {\n            a = true;\n        }\n    }\n\n    static {\n        var a;\n        f();\n    }\n\n}\n```\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHZhcnMtb24tdG9wOiBcImVycm9yXCIqL1xuXG4vLyBEaXJlY3RpdmVzIG1heSBwcmVjZWRlIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cblwidXNlIHN0cmljdFwiO1xudmFyIGE7XG5mKCk7XG5cbi8vIENvbW1lbnRzIGNhbiBkZXNjcmliZSB2YXJpYWJsZXMuXG5mdW5jdGlvbiBkb1NvbWV0aGluZygpIHtcbiAgICAvLyB0aGlzIGlzIHRoZSBmaXJzdCB2YXIuXG4gICAgdmFyIGZpcnN0O1xuICAgIC8vIHRoaXMgaXMgdGhlIHNlY29uZCB2YXIuXG4gICAgdmFyIHNlY29uZFxufSJ9)\n\n``` language-js\n/*eslint vars-on-top: \"error\"*/\n\n// Directives may precede variable declarations.\n\"use strict\";\nvar a;\nf();\n\n// Comments can describe variables.\nfunction doSomething() {\n    // this is the first var.\n    var first;\n    // this is the second var.\n    var second\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.8.0.\n\n## Further Reading\n\n[JavaScript Scoping and Hoisting](https://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)  \n\n[var - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)  \n\n[A criticism of the Single Var Pattern in JavaScript, and a simple alternative — Dan Hough](https://danhough.com/blog/single-var-pattern-rant/)  \n\n[Ben Alman » Multiple var statements in JavaScript, not superfluous](https://benalman.com/news/2012/05/multiple-var-statements-javascript/)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/vars-on-top.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/vars-on-top.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/vars-on-top](https://eslint.org/docs/latest/rules/vars-on-top)"
- name: Ways to Extend ESLint
  id: extend/ways-to-extend
  summary: ESLint is highly pluggable and configurable
  description: "# Ways to Extend ESLint\n\n## Table of Contents\n\n1.  [Plugins](#plugins)\n2.  [Shareable Configs](#shareable-configs)\n3.  [Custom Formatters](#custom-formatters)\n4.  [Custom Parsers](#custom-parsers)\n\nESLint is highly pluggable and configurable. There are a variety of ways that you can extend ESLint’s functionality.\n\nThis page explains the ways to extend ESLint, and how these extensions all fit together.\n\n## Plugins\n\nPlugins let you add your own ESLint custom rules and custom processors to a project. You can publish a plugin as an npm module.\n\nPlugins are useful because your project may require some ESLint configuration that isn’t included in the core `eslint` package. For example, if you’re using a frontend JavaScript library like React or framework like Vue, these tools have some features that require custom rules outside the scope of the ESLint core rules.\n\nOften a plugin is paired with a configuration for ESLint that applies a set of features from the plugin to a project. You can include configurations in a plugin as well.\n\nFor example, [`eslint-plugin-react`](https://www.npmjs.com/package/eslint-plugin-react) is an ESLint plugin that includes rules specifically for React projects. The rules include things like enforcing consistent usage of React component lifecycle methods and requiring the use of key props when rendering dynamic lists.\n\nTo learn more about creating the extensions you can include in a plugin, refer to the following documentation:\n\n- [Custom Rules](ways-to-extendcustom-rules)\n- [Custom Processors](ways-to-extendcustom-processors)\n- [Configs in Plugins](ways-to-extendplugins#configs-in-plugins)\n\nTo learn more about bundling these extensions into a plugin, refer to [Plugins](ways-to-extendplugins).\n\n## Shareable Configs\n\nESLint shareable configs are pre-defined configurations for ESLint that you can use in your projects. They bundle rules and other configuration together in an npm package. Anything that you can put in a configuration file can be put in a shareable config.\n\nYou can either publish a shareable config independently or as part of a plugin.\n\nFor example, a popular shareable config is [eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb), which contains a variety of rules in addition to some [parser options](ways-to-extend../use/configure/language-options#specifying-parser-options). This is a set of rules for ESLint that is designed to match the style guide used by the [Airbnb JavaScript style guide](https://github.com/airbnb/javascript). By using the `eslint-config-airbnb` shareable config, you can automatically enforce the Airbnb style guide in your project without having to manually configure each rule.\n\nTo learn more about creating a shareable config, refer to [Share Configuration](ways-to-extendshareable-configs).\n\n## Custom Formatters\n\nCustom formatters take ESLint linting results and output the results in a format that you define. Custom formatters let you display linting results in a format that best fits your needs, whether that’s in a specific file format, a certain display style, or a format optimized for a particular tool. You only need to create a custom formatter if the [built-in formatters](ways-to-extend../use/formatters/index) don’t serve your use case.\n\nFor example, the custom formatter [eslint-formatter-gitlab](https://www.npmjs.com/package/eslint-formatter-gitlab) can be used to display ESLint results in GitLab code quality reports.\n\nTo learn more about creating a custom formatter, refer to [Custom Formatters](ways-to-extendcustom-formatters).\n\n## Custom Parsers\n\nESLint custom parsers are a way to extend ESLint to support the linting of new language features or custom syntax in your code. A parser is responsible for taking your code and transforming it into an abstract syntax tree (AST) that ESLint can then analyze and lint.\n\nESLint ships with a built-in JavaScript parser (Espree), but custom parsers allow you to lint other languages or to extend the linting capabilities of the built-in parser.\n\nFor example, the custom parser [@typescript-eslint/parser](https://typescript-eslint.io/packages/parser) extends ESLint to lint TypeScript code.\n\nCustom parsers **cannot** be included in a plugin, unlike the other extension types.\n\nTo learn more about creating a custom parser, refer to [Custom Parsers](ways-to-extendcustom-parsers).\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/extend/ways-to-extend](https://eslint.org/docs/latest/extend/ways-to-extend)"
- name: Work on Issues
  id: contribute/work-on-issue
  summary: Our public issues tracker lists all of the things we plan on doing as well as suggestions from the community
  description: "# Work on Issues\n\n## Table of Contents\n\n1.  [Issue Labels](#issue-labels)\n2.  [Starting Work](#starting-work)\n\nOur public [issues tracker](https://github.com/eslint/eslint/issues) lists all of the things we plan on doing as well as suggestions from the community. Before starting to work on an issue, be sure you read through the rest of this page.\n\n## Issue Labels\n\nWe use labels to indicate the status of issues. The most complete documentation on the labels is found in the [Maintain ESLint documentation](https://eslint.org/docs/latest/contribute/work-on-issue../maintain/manage-issues#when-an-issue-or-pull-request-is-opened), but most contributors should find the information on this page sufficient. The most important questions that labels can help you, as a contributor, answer are:\n\n1.  Is this issue available for me to work on? If you have little or no experience contributing to ESLint, the [`good first issue`](https://github.com/eslint/eslint/labels/good%20first%20issue) label marks appropriate issues. Otherwise, the [`help wanted`](https://github.com/eslint/eslint/labels/help%20wanted) label is an invitation to work on the issue. If you have more experience, you can try working on other issues labeled [`accepted`](https://github.com/eslint/eslint/labels/accepted). Conversely, issues not yet ready to work on are labeled `triage`, `evaluating`, and/or `needs bikeshedding`, and issues that cannot currently be worked on because of something else, such as a bug in a dependency, are labeled `blocked`.\n\n2.  What is this issue about? Labels describing the nature of issues include `bug`, `enhancement`, `feature`, `question`, `rule`, `documentation`, `core`, `build`, `cli`, `infrastructure`, `breaking`, and `chore`. These are documented in [Maintain ESLint](https://eslint.org/docs/latest/contribute/work-on-issue../maintain/manage-issues#types-of-issues-and-pull-requests).\n\n3.  What is the priority of this issue? Because we have a lot of issues, we prioritize certain issues above others. The following is the list of priorities, from highest to lowest:\n\n    1.  **Bugs** - problems with the project are actively affecting users. We want to get these resolved as quickly as possible.\n    2.  **Documentation** - documentation issues are a type of bug in that they actively affect current users. As such, we want to address documentation issues as quickly as possible.\n    3.  **Features** - new functionality that will aid users in the future.\n    4.  **Enhancements** - requested improvements for existing functionality.\n    5.  **Other** - anything else.\n\n    Some issues have had monetary rewards attached to them. Those are labeled `bounty`. Bounties are assigned via [BountySource](https://www.bountysource.com/teams/eslint/issues).\n\n## Starting Work\n\nIf you’re going to work on an issue, please add a comment to that issue saying so and indicating when you think you will complete it. It will help us to avoid duplication of effort. Some examples of good comments are:\n\n- “I’ll take a look at this over the weekend.”\n- “I’m going to do this, give me two weeks.”\n- “Working on this” (as in, I’m working on it right now)\n\nIf an issue has already been claimed by someone, please be respectful of that person’s desire to complete the work and don’t work on it unless you verify that they are no longer interested.\n\nIf you find you can’t finish the work, then simply add a comment letting people know, for example:\n\n- “Sorry, it looks like I don’t have time to do this.”\n- “I thought I knew enough to fix this, but it turns out I don’t.”\n\nNo one will blame you for backing out of an issue if you are unable to complete it. We just want to keep the process moving along as efficiently as possible.\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/contribute/work-on-issue](https://eslint.org/docs/latest/contribute/work-on-issue)"
- name: yoda
  id: rules/yoda
  summary: Yoda conditions are so named because the literal value of the condition comes first while the variable comes second
  description: "# yoda\n\nRequire or disallow \"Yoda\" conditions\n\n🔧 Fixable\n\nSome problems reported by this rule are automatically fixable by the `--fix` [command line](yoda../use/command-line-interface#--fix) option\n\n## Table of Contents\n\n1.  [Rule Details](#rule-details)\n2.  [Options](#options)\n    1.  [never](#never)\n    2.  [exceptRange](#exceptrange)\n    3.  [onlyEquality](#onlyequality)\n    4.  [always](#always)\n3.  [Version](#version)\n4.  [Further Reading](#further-reading)\n5.  [Resources](#resources)\n\nYoda conditions are so named because the literal value of the condition comes first while the variable comes second. For example, the following is a Yoda condition:\n\n``` language-js\nif (\"red\" === color) {\n    // ...\n}\n```\n\nThis is called a Yoda condition because it reads as, “if red equals the color”, similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:\n\n``` language-js\nif (color === \"red\") {\n    // ...\n}\n```\n\nThis typically reads, “if the color equals red”, which is arguably a more natural way to describe the comparison.\n\nProponents of Yoda conditions highlight that it is impossible to mistakenly use `=` instead of `==` because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.\n\nOpponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of `=` instead of `==` (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn’t outweigh the readability hit the code takes while using Yoda conditions.\n\n## Rule Details\n\nThis rule aims to enforce consistent style of conditions which compare a variable to a literal value.\n\n## Options\n\nThis rule can take a string option:\n\n- If it is the default `\"never\"`, then comparisons must never be Yoda conditions.\n- If it is `\"always\"`, then the literal value must always come first.\n\nThe default `\"never\"` option can have exception options in an object literal:\n\n- If the `\"exceptRange\"` property is `true`, the rule *allows* yoda conditions in range comparisons which are wrapped directly in parentheses, including the parentheses of an `if` or `while` condition. The default value is `false`. A *range* comparison tests whether a variable is inside or outside the range between two literal values.\n- If the `\"onlyEquality\"` property is `true`, the rule reports yoda conditions *only* for the equality operators `==` and `===`. The default value is `false`.\n\nThe `onlyEquality` option allows a superset of the exceptions which `exceptRange` allows, thus both options are not useful together.\n\n### never\n\nExamples of **incorrect** code for the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFwiZXJyb3JcIiovXG5cbmlmIChcInJlZFwiID09PSBjb2xvcikge1xuICAgIC8vIC4uLlxufVxuXG5pZiAoYHJlZGAgPT09IGNvbG9yKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmIChgcmVkYCA9PT0gYCR7Y29sb3J9YCkge1xuICAgIC8vIC4uLlxufVxuXG5pZiAodHJ1ZSA9PSBmbGFnKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmICg1ID4gY291bnQpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKC0xIDwgc3RyLmluZGV4T2Yoc3Vic3RyKSkge1xuICAgIC8vIC4uLlxufVxuXG5pZiAoMCA8PSB4ICYmIHggPCAxKSB7XG4gICAgLy8gLi4uXG59In0=)\n\n``` language-js\n/*eslint yoda: \"error\"*/\n\nif (\"red\" === color) {\n    // ...\n}\n\nif (`red` === color) {\n    // ...\n}\n\nif (`red` === `${color}`) {\n    // ...\n}\n\nif (true == flag) {\n    // ...\n}\n\nif (5 > count) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n\nif (0 <= x && x < 1) {\n    // ...\n}\n```\n\nExamples of **correct** code for the default `\"never\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFwiZXJyb3JcIiovXG5cbmlmICg1ICYgdmFsdWUpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKHZhbHVlID09PSBcInJlZFwiKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmICh2YWx1ZSA9PT0gYHJlZGApIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGAke3ZhbHVlfWAgPT09IGByZWRgKSB7XG5cbn0ifQ==)\n\n``` language-js\n/*eslint yoda: \"error\"*/\n\nif (5 & value) {\n    // ...\n}\n\nif (value === \"red\") {\n    // ...\n}\n\nif (value === `red`) {\n    // ...\n}\n\nif (`${value}` === `red`) {\n\n}\n```\n\n### exceptRange\n\nExamples of **correct** code for the `\"never\", { \"exceptRange\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcImV4Y2VwdFJhbmdlXCI6IHRydWUgfV0qL1xuXG5mdW5jdGlvbiBpc1JlZGRpc2goY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yLmh1ZSA8IDYwIHx8IDMwMCA8IGNvbG9yLmh1ZSk7XG59XG5cbmlmICh4IDwgLTEgfHwgMSA8IHgpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGNvdW50IDwgMTAgJiYgKDAgPD0gcmFuZCAmJiByYW5kIDwgMSkpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGBibHVlYCA8IHggJiYgeCA8IGBncmVlbmApIHtcbiAgICAvLyAuLi5cbn1cblxuZnVuY3Rpb24gaG93TG9uZyhhcnIpIHtcbiAgICByZXR1cm4gKDAgPD0gYXJyLmxlbmd0aCAmJiBhcnIubGVuZ3RoIDwgMTApID8gXCJzaG9ydFwiIDogXCJsb25nXCI7XG59In0=)\n\n``` language-js\n/*eslint yoda: [\"error\", \"never\", { \"exceptRange\": true }]*/\n\nfunction isReddish(color) {\n    return (color.hue < 60 || 300 < color.hue);\n}\n\nif (x < -1 || 1 < x) {\n    // ...\n}\n\nif (count < 10 && (0 <= rand && rand < 1)) {\n    // ...\n}\n\nif (`blue` < x && x < `green`) {\n    // ...\n}\n\nfunction howLong(arr) {\n    return (0 <= arr.length && arr.length < 10) ? \"short\" : \"long\";\n}\n```\n\n### onlyEquality\n\nExamples of **correct** code for the `\"never\", { \"onlyEquality\": true }` options:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFtcImVycm9yXCIsIFwibmV2ZXJcIiwgeyBcIm9ubHlFcXVhbGl0eVwiOiB0cnVlIH1dKi9cblxuaWYgKHggPCAtMSB8fCA5IDwgeCkge1xufVxuXG5pZiAoeCAhPT0gJ2ZvbycgJiYgJ2JhcicgIT0geCkge1xufVxuXG5pZiAoeCAhPT0gYGZvb2AgJiYgYGJhcmAgIT0geCkge1xufSJ9)\n\n``` language-js\n/*eslint yoda: [\"error\", \"never\", { \"onlyEquality\": true }]*/\n\nif (x < -1 || 9 < x) {\n}\n\nif (x !== 'foo' && 'bar' != x) {\n}\n\nif (x !== `foo` && `bar` != x) {\n}\n```\n\n### always\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuaWYgKGNvbG9yID09IFwiYmx1ZVwiKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmIChjb2xvciA9PSBgYmx1ZWApIHtcbiAgICAvLyAuLi5cbn0ifQ==)\n\n``` language-js\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (color == \"blue\") {\n    // ...\n}\n\nif (color == `blue`) {\n    // ...\n}\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n[Open in Playground](https://eslint.org/play#eyJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsic291cmNlVHlwZSI6Im1vZHVsZSJ9fSwidGV4dCI6Ii8qZXNsaW50IHlvZGE6IFtcImVycm9yXCIsIFwiYWx3YXlzXCJdKi9cblxuaWYgKFwiYmx1ZVwiID09IHZhbHVlKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmIChgYmx1ZWAgPT0gdmFsdWUpIHtcbiAgICAvLyAuLi5cbn1cblxuaWYgKGBibHVlYCA9PSBgJHt2YWx1ZX1gKSB7XG4gICAgLy8gLi4uXG59XG5cbmlmICgtMSA8IHN0ci5pbmRleE9mKHN1YnN0cikpIHtcbiAgICAvLyAuLi5cbn0ifQ==)\n\n``` language-js\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (\"blue\" == value) {\n    // ...\n}\n\nif (`blue` == value) {\n    // ...\n}\n\nif (`blue` == `${value}`) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n```\n\n## Version\n\nThis rule was introduced in ESLint v0.7.1.\n\n## Further Reading\n\n[Yoda conditions - Wikipedia](https://en.wikipedia.org/wiki/Yoda_conditions)  \n\n[Coding in Style](http://thomas.tuerke.net/on/design/?with=1249091668#msg1146181680)  \n\n## Resources\n\n- [Rule source](https://github.com/eslint/eslint/blob/main/lib/rules/yoda.js)\n- [Tests source](https://github.com/eslint/eslint/blob/main/tests/lib/rules/yoda.js)\n\n© OpenJS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://eslint.org/docs/latest/rules/yoda](https://eslint.org/docs/latest/rules/yoda)"
