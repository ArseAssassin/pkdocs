---
name: jQuery UI
slug: jqueryui
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © The jQuery Foundation and other contributors
  Licensed under the MIT License.
  https://api.jqueryui.com/category/all
homepage: null

---
- name: .addClass()
  id: addclass
  summary: 'Description: Adds the specified class(es) to each of the set of matched elements while animating all style changes'
  description: "# .addClass()\n\n## .addClass( className \\[, duration \\] \\[, easing \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Adds the specified class(es) to each of the set of matched elements while animating all style changes.\n\n- #### [.addClass( className \\[, duration \\] \\[, easing \\] \\[, complete \\] )](#addClass-className-duration-easing-complete)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be added to the class attribute of each matched element.\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **easing** (default: `swing`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [easing](easings) function to use for the transition.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.addClass( className \\[, options \\] )](#addClass-className-options)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be added to the class attribute of each matched element.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. All properties are optional.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **easing** (default: `swing`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **children** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Whether the animation should additionally be applied to all descendants of the matched elements. This feature should be used with caution as the cost of determining which descendants to animate can be very expensive, and grows linearly with the number of descendants.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nSimilar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including `.addClass()`, support custom durations and easings, as well as provide a callback for when the animation completes.\n\nNot all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.\n\nThis plugin extends jQuery's built-in [`.addClass()`](https://api.jquery.com/addClass/) method. If jQuery UI is not loaded, calling the `.addClass()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nAdds the class \"big-blue\" to the matched elements.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>addClass demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background-color: #ccc;\n  }\n  .big-blue {\n    width: 200px;\n    height: 200px;\n    background-color: #00f;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div></div>\n \n<script>\n$( \"div\" ).click(function() {\n  $( this ).addClass( \"big-blue\", 1000, \"easeOutBounce\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/addClass](https://api.jqueryui.com/addClass)"
- name: .cssClip()
  id: cssclip
  summary: 'Description: Getter/setter for an object version of the CSS clip property'
  description: "# .cssClip()\n\n## .cssClip( \\[dimensions \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)version added: 1.12\n\n**Description:** Getter/setter for an object version of the CSS `clip` property.\n\n- #### [.cssClip( \\[dimensions \\] )](#cssClip-dimensions)\n\n  - **dimensions**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    When setting the CSS `clip` property, specify the `top`, `right`, `bottom` and `left`, properties to use the `rect()` style.\n\n## Example:\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>cssClip demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  .clipped {\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    background: #3b679e;\n    background: linear-gradient(to bottom, #3b679e 0%, #2b88d9 50%, #207cca 51%, #7db9e8 100%);\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \nClick anywhere!\n<div class=\"clipped\"></div>\n \n<script>\nvar clippings = [\n  {\n    top: 10,\n    right: 50,\n    bottom: 50,\n    left: 5\n  },\n  {\n    top: 0,\n    right: 150,\n    bottom: 150,\n    left: 0\n  }\n];\nvar index = 1;\nvar box = $( \".clipped\" ).cssClip( clippings[ 0 ] );\n \n$( document ).click(function() {\n  box.animate( {\n    clip: clippings[ index++ % 2 ]\n  }, 2000 );\n});\n \n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/cssClip](https://api.jqueryui.com/cssClip)"
- name: .disableSelection()
  id: disableselection
  summary: 'Description: Disable selection of text content within the set of matched elements'
  description: "# .disableSelection()\n\n## .disableSelection()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Disable selection of text content within the set of matched elements.\n\n- #### version added: 1.6, deprecated: 1.9[.disableSelection()](#disableSelection)\n\n  - This method does not accept any arguments.\n\nDisabling text selection is bad. Don't use this.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/disableSelection](https://api.jqueryui.com/disableSelection)"
- name: .effect()
  id: effect
  summary: 'Description: Apply an animation effect to an element'
  description: "# .effect()\n\n## .effect( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Apply an animation effect to an element.\n\n- #### [.effect( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )](#effect-effect-options-duration-complete)\n\n  - **effect**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [effect](category/effects) to use for the transition.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Effect-specific properties and [easing](easings).\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.effect( options )](#effect-options)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. The only required property is `effect`.\n\n    - **effect**\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [effect](category/effects) to use for the transition.\n\n    - **easing** (default: `\"swing\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nThe `.effect()` method applies a named animation [effect](category/effects) to an element. Many effects also support a show or hide mode, which can be accomplished with the [`.show()`](show), [`.hide()`](hide), and [`.toggle()`](toggle) methods.\n\n## Example:\n\nApply the bounce effect to a div.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>effect demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n    border: 1px solid #000;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to apply the effect.</p>\n<div></div>\n \n<script>\n$( document ).click(function() {\n  $( \"div\" ).effect( \"bounce\", \"slow\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/effect](https://api.jqueryui.com/effect)"
- name: .enableSelection()
  id: enableselection
  summary: 'Description: Enable selection of text content within the set of matched elements'
  description: "# .enableSelection()\n\n## .enableSelection()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Enable selection of text content within the set of matched elements.\n\n- #### version added: 1.6, deprecated: 1.9[.enableSelection()](#enableSelection)\n\n  - This method does not accept any arguments.\n\nThe `.enableSelection()` method can be used to re-enable selection of text that was disabled via [`.disableSelection()`](disableselection).\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/enableSelection](https://api.jqueryui.com/enableSelection)"
- name: .hide()
  id: hide
  summary: 'Description: Hide the matched elements, using custom effects'
  description: "# .hide()\n\n## .hide( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Hide the matched elements, using custom effects.\n\n- #### [.hide( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )](#hide-effect-options-duration-complete)\n\n  - **effect**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [effect](category/effects) to use for the transition.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Effect-specific properties and [easing](easings).\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.hide( options )](#hide-options)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. The only required property is `effect`.\n\n    - **effect**\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [effect](category/effects) to use for the transition.\n\n    - **easing** (default: `\"swing\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nThis plugin extends jQuery's built-in [`.hide()`](https://api.jquery.com/hide/) method. If jQuery UI is not loaded, calling the `.hide()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nHide a div using the drop effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>hide demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n    border: 1px solid #000;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<button>hide the div</button>\n<div></div>\n \n<script>\n$( \"button\" ).click(function() {\n  $( \"div\" ).hide( \"drop\", { direction: \"down\" }, \"slow\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/hide](https://api.jqueryui.com/hide)"
- name: .labels()
  id: labels
  summary: 'Description: Finds all label elements associated with the first selected element'
  description: "# .labels()\n\n## .labels()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Finds all label elements associated with the first selected element.\n\n- #### version added: 1.12[.labels()](#labels)\n\n  - This method does not accept any arguments.\n\nThis can be used to find all the `<label>` elements associated with an `<input>` element. The association can be through nesting, where the label is an ancestor of the input, or through the `for` attribute on the label, pointing at the `id` attribute of the input. If no labels are associated with the given element, an empty jQuery object is returned.\n\nThis methods mimics the native `labels` property, which isn't supported in all browsers. In addition, this method also works for document fragments.\n\n## Example:\n\nHighlight all labels of the input element\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>labels demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label>\n  Firstname\n  <input id=\"name\">\n</label>\n<label for=\"name\">Please enter your name</label>\n \n<script>\n$( \"input\" ).labels().addClass( \"ui-state-highlight\" )\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/labels](https://api.jqueryui.com/labels)"
- name: .position()
  id: position
  summary: 'Description: Position an element relative to another'
  description: "# .position()\n\n## .position( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Position an element relative to another.\n\n- #### version added: 1.8[.position( options )](#position-options)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    - **my** (default: `\"center\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Defines which position **on the element being positioned** to align with the target element: \"horizontal vertical\" alignment. A single value such as `\"right\"` will be normalized to `\"right center\"`, `\"top\"` will be normalized to `\"center top\"` (following CSS convention). Acceptable horizontal values: `\"left\"`, `\"center\"`, `\"right\"`. Acceptable vertical values: `\"top\"`, `\"center\"`, `\"bottom\"`. Example: `\"left top\"` or `\"center center\"`. Each dimension can also contain offsets, in pixels or percent, e.g., `\"right+10 top-25%\"`. Percentage offsets are relative to the element being positioned.\n\n    - **at** (default: `\"center\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      Defines which position **on the target element** to align the positioned element against: \"horizontal vertical\" alignment. See the [`my`](#option-my) option for full details on possible values. Percentage offsets are relative to the target element.\n\n    - **of** (default: `null`)\n\n      Type: [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element) or [jQuery](http://api.jquery.com/Types/#jQuery) or [Event](http://api.jquery.com/Types/#Event)\n\n      Which element to position against. If you provide a selector or jQuery object, the first matching element will be used. If you provide an event object, the `pageX` and `pageY` properties will be used. Example: `\"#top-menu\"`\n\n    - **collision** (default: `\"flip\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      When the positioned element overflows the window in some direction, move it to an alternative position. Similar to [`my`](#option-my) and [`at`](#option-at), this accepts a single value or a pair for horizontal/vertical, e.g., `\"flip\"`, `\"fit\"`, `\"fit flip\"`, `\"fit none\"`.\n\n      - `\"flip\"`: Flips the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.\n      - `\"fit\"`: Shift the element away from the edge of the window.\n      - `\"flipfit\"`: First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.\n      - `\"none\"`: Does not apply any collision detection.\n\n    - **using** (default: `null`)\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      When specified, the actual property setting is delegated to this callback. Receives two parameters: The first is a hash of `top` and `left` values for the position that should be set and can be forwarded to `.css()` or `.animate()`.\n      The second provides feedback about the position and dimensions of both elements, as well as calculations to their relative position. Both `target` and `element` have these properties: `element`, `left`, `top`, `width`, `height`. In addition, there's `horizontal`, `vertical` and `important`, giving you twelve potential directions like `{ horizontal: \"center\", vertical: \"left\", important: \"horizontal\" }`.\n\n    - **within** (default: `window`)\n\n      Type: [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element) or [jQuery](http://api.jquery.com/Types/#jQuery)\n\n      Element to position within, affecting collision detection. If you provide a selector or jQuery object, the first matching element will be used.\n\nThe jQuery UI `.position()` method allows you to position an element relative to the window, document, another element, or the cursor/mouse, without worrying about offset parents.\n\n*Note: jQuery UI does not support positioning hidden elements.*\n\nThis is a standalone jQuery plugin and has no dependencies on other jQuery UI components.\n\nThis plugin extends jQuery's built-in [`.position()`](https://api.jquery.com/position/) method. If jQuery UI is not loaded, calling the `.position()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nA simple jQuery UI Position example.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>position demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #targetElement {\n    height: 200px;\n    margin: 50px;\n    background: #9cf;\n  }\n  .positionDiv {\n    position: absolute;\n    width: 75px;\n    height: 75px;\n    background: #080;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"targetElement\">\n  <div class=\"positionDiv\" id=\"position1\"></div>\n  <div class=\"positionDiv\" id=\"position2\"></div>\n  <div class=\"positionDiv\" id=\"position3\"></div>\n  <div class=\"positionDiv\" id=\"position4\"></div>\n</div>\n \n<script>\n$( \"#position1\" ).position({\n  my: \"center\",\n  at: \"center\",\n  of: \"#targetElement\"\n});\n \n$( \"#position2\" ).position({\n  my: \"left top\",\n  at: \"left top\",\n  of: \"#targetElement\"\n});\n \n$( \"#position3\" ).position({\n  my: \"right center\",\n  at: \"right bottom\",\n  of: \"#targetElement\"\n});\n \n$( document ).mousemove(function( event ) {\n  $( \"#position4\" ).position({\n    my: \"left+3 bottom-3\",\n    of: event,\n    collision: \"fit\"\n  });\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/position](https://api.jqueryui.com/position)"
- name: .removeClass()
  id: removeclass
  summary: 'Description: Removes the specified class(es) from each of the set of matched elements while animating all style changes'
  description: "# .removeClass()\n\n## .removeClass( className \\[, duration \\] \\[, easing \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Removes the specified class(es) from each of the set of matched elements while animating all style changes.\n\n- #### [.removeClass( className \\[, duration \\] \\[, easing \\] \\[, complete \\] )](#removeClass-className-duration-easing-complete)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be removed from the class attribute of each matched element.\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **easing** (default: `swing`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [easing](easings) function to use for the transition.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.removeClass( className \\[, options \\] )](#removeClass-className-options)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be removed from the class attribute of each matched element.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. All properties are optional.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **easing** (default: `swing`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **children** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Whether the animation should additionally be applied to all descendants of the matched elements. This feature should be used with caution as the cost of determining which descendants to animate can be very expensive, and grows linearly with the number of descendants.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nSimilar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including `.removeClass()`, support custom durations and easings, as well as provide a callback for when the animation completes.\n\nNot all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.\n\nThis plugin extends jQuery's built-in [`.removeClass()`](https://api.jquery.com/removeClass/) method. If jQuery UI is not loaded, calling the `.removeClass()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nRemoves the class \"big-blue\" from the matched elements.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>removeClass demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background-color: #ccc;\n  }\n  .big-blue {\n    width: 200px;\n    height: 200px;\n    background-color: #00f;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div class=\"big-blue\"></div>\n \n<script>\n$( \"div\" ).click(function() {\n  $( this ).removeClass( \"big-blue\", 1000, \"easeInBack\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/removeClass](https://api.jqueryui.com/removeClass)"
- name: .removeUniqueId()
  id: removeuniqueid
  summary: 'Description: Remove ids that were set by .uniqueId() for the set of matched elements'
  description: "# .removeUniqueId()\n\n## .removeUniqueId()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Remove ids that were set by `.uniqueId()` for the set of matched elements.\n\n- #### version added: 1.9[.removeUniqueId()](#removeUniqueId)\n\n  - This method does not accept any arguments.\n\nThe `.removeUniqueId()` will remove ids that were set by [`.uniqueId()`](uniqueid). Calling `.removeUniqueId()` on an element that did not have its id set by `.uniqueId()` will have no affect, even if the element has an id.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/removeUniqueId](https://api.jqueryui.com/removeUniqueId)"
- name: .scrollParent()
  id: scrollparent
  summary: 'Description: Get the closest ancestor element that is scrollable'
  description: "# .scrollParent()\n\n## .scrollParent()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Get the closest ancestor element that is scrollable.\n\n- #### [.scrollParent()](#scrollParent)\n\n  - This method does not accept any arguments.\n\nThis method finds the nearest ancestor that allows scrolling. In other words, the `.scrollParent()` method finds the element that the currently selected element will scroll within.\n\n*Note: This method only works on jQuery objects containing one element.*\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/scrollParent](https://api.jqueryui.com/scrollParent)"
- name: .show()
  id: show
  summary: 'Description: Display the matched elements, using custom effects'
  description: "# .show()\n\n## .show( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Display the matched elements, using custom effects.\n\n- #### [.show( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )](#show-effect-options-duration-complete)\n\n  - **effect**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [effect](category/effects) to use for the transition.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Effect-specific properties and [easing](easings).\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.show( options )](#show-options)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. The only required property is `effect`.\n\n    - **effect**\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [effect](category/effects) to use for the transition.\n\n    - **easing** (default: `\"swing\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nThis plugin extends jQuery's built-in [`.show()`](https://api.jquery.com/show/) method. If jQuery UI is not loaded, calling the `.show()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nShow a div using the fold effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>show demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    display: none;\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n    border: 1px solid #000;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<button>show the div</button>\n<div></div>\n \n<script>\n$( \"button\" ).click(function() {\n  $( \"div\" ).show( \"fold\", 1000 );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/show](https://api.jqueryui.com/show)"
- name: .switchClass()
  id: switchclass
  summary: 'Description: Adds and removes the specified class(es) to each of the set of matched elements while animating all style changes'
  description: "# .switchClass()\n\n## .switchClass( removeClassName, addClassName \\[, duration \\] \\[, easing \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Adds and removes the specified class(es) to each of the set of matched elements while animating all style changes.\n\n- #### [.switchClass( removeClassName, addClassName \\[, duration \\] \\[, easing \\] \\[, complete \\] )](#switchClass-removeClassName-addClassName-duration-easing-complete)\n\n  - **removeClassName**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be removed from the class attribute of each matched element.\n\n  - **addClassName**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be added to the class attribute of each matched element.\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **easing** (default: `swing`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [easing](easings) function to use for the transition.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.switchClass( removeClassName, addClassName \\[, options \\] )](#switchClass-removeClassName-addClassName-options)\n\n  - **removeClassName**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be removed from the class attribute of each matched element.\n\n  - **addClassName**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be added to the class attribute of each matched element.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. All properties are optional.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **easing** (default: `swing`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **children** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Whether the animation should additionally be applied to all descendants of the matched elements. This feature should be used with caution as the cost of determining which descendants to animate can be very expensive, and grows linearly with the number of descendants.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nThe `.switchClass()` method allows you to animate the transition of adding and removing classes at the same time.\n\nSimilar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including `.switchClass()`, support custom durations and easings, as well as provide a callback for when the animation completes.\n\nNot all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.\n\n## Example:\n\nAdds the class \"blue\" and removes the class \"big\" from the matched elements.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>switchClass demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background-color: #ccc;\n  }\n  .big {\n    width: 200px;\n    height: 200px;\n  }\n  .blue {\n    background-color: #00f;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div class=\"big\"></div>\n \n<script>\n$( \"div\" ).click(function() {\n  $( this ).switchClass( \"big\", \"blue\", 1000, \"easeInOutQuad\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/switchClass](https://api.jqueryui.com/switchClass)"
- name: .toggle()
  id: toggle
  summary: 'Description: Display or hide the matched elements, using custom effects'
  description: "# .toggle()\n\n## .toggle( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Display or hide the matched elements, using custom effects.\n\n- #### [.toggle( effect \\[, options \\] \\[, duration \\] \\[, complete \\] )](#toggle-effect-options-duration-complete)\n\n  - **effect**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [effect](category/effects) to use for the transition.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Effect-specific properties and [easing](easings).\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.toggle( options )](#toggle-options)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. The only required property is `effect`.\n\n    - **effect**\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [effect](category/effects) to use for the transition.\n\n    - **easing** (default: `\"swing\"`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nThis plugin extends jQuery's built-in [`.toggle()`](https://api.jquery.com/toggle/) method. If jQuery UI is not loaded, calling the `.toggle()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nToggle a div using the fold effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>toggle demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n    border: 1px solid #000;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<button>toggle the div</button>\n<div></div>\n \n<script>\n$( \"button\" ).click(function() {\n  $( \"div\" ).toggle( \"fold\", 1000 );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/toggle](https://api.jqueryui.com/toggle)"
- name: .toggleClass()
  id: toggleclass
  summary: 'Description: Add or remove one or more classes from each element in the set of matched elements, depending on either the class''s presence or the value of the switch argument, while animating all style changes'
  description: "# .toggleClass()\n\n## .toggleClass( className \\[, switch \\] \\[, duration \\] \\[, easing \\] \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument, while animating all style changes.\n\n- #### [.toggleClass( className \\[, switch \\] \\[, duration \\] \\[, easing \\] \\[, complete \\] )](#toggleClass-className-switch-duration-easing-complete)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be toggled for each element in the matched set.\n\n  - **switch**\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    A boolean value to determine whether the class should be added or removed.\n\n  - **duration** (default: `400`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    A string or number determining how long the animation will run.\n\n  - **easing** (default: `swing`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A string indicating which [easing](easings) function to use for the transition.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\n- #### [.toggleClass( className \\[, switch \\] \\[, options \\] )](#toggleClass-className-switch-options)\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    One or more class names (space separated) to be toggled for each element in the matched set.\n\n  - **switch**\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    A boolean value to determine whether the class should be added or removed.\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    All animation settings. All properties are optional.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run.\n\n    - **easing** (default: `swing`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n    - **complete**\n\n      Type: [Function](http://api.jquery.com/Types/#Function)()\n\n      A function to call once the animation is complete, called once per matched element.\n\n    - **children** (default: `false`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n      Whether the animation should additionally be applied to all descendants of the matched elements. This feature should be used with caution as the cost of determining which descendants to animate can be very expensive, and grows linearly with the number of descendants.\n\n    - **queue** (default: `true`)\n\n      Type: [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n      A Boolean indicating whether to place the animation in the effects queue. If `false`, the animation will begin immediately. A string can also be provided, in which case the animation is added to the queue represented by that string.\n\nSimilar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including `.toggleClass()`, support custom durations and easings, as well as provide a callback for when the animation completes.\n\nNot all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.\n\nThis plugin extends jQuery's built-in [`.toggleClass()`](https://api.jquery.com/toggleClass/) method. If jQuery UI is not loaded, calling the `.toggleClass()` method may not fail directly, as the method still exists. However, the expected behavior will not occur.\n\n## Example:\n\nToggles the class \"big-blue\" for the matched elements.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>toggleClass demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    background-color: #ccc;\n  }\n  .big-blue {\n    width: 200px;\n    height: 200px;\n    background-color: #00f;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div></div>\n \n<script>\n$( \"div\" ).click(function() {\n  $( this ).toggleClass( \"big-blue\", 1000, \"easeOutSine\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/toggleClass](https://api.jqueryui.com/toggleClass)"
- name: .transfer()
  id: transfer
  summary: The target of the transfer effect
  description: "# .transfer()\n\n## .transfer( options \\[, complete \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)version added: 1.12\n\n**Description:** Transfers the outline of an element to another element\n\n- #### [.transfer( options \\[, complete \\] )](#transfer-options-complete)\n\n  - **options**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    - **to**\n\n      Type: [Selector](http://api.jquery.com/Types/#Selector)\n\n      The target of the transfer effect.\n\n    - **className** (default: `null`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A class to add to the transfer element, in addition to `ui-effects-transfer`.\n\n    - **duration** (default: `400`)\n\n      Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n      A string or number determining how long the animation will run. The strings `\"fast\"` and `\"slow\"` can be supplied to indicate durations of 200 and 600 milliseconds, respectively. The number type indicates the duration in milliseconds.\n\n    - **easing** (default: `swing`)\n\n      Type: [String](http://api.jquery.com/Types/#String)\n\n      A string indicating which [easing](easings) function to use for the transition.\n\n  - **complete**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    A function to call once the animation is complete, called once per matched element.\n\nVery useful when trying to visualize interaction between two elements.\n\nThe transfer element itself has the class `ui-effects-transfer`, and needs to be styled by you, for example by adding a background or border.\n\n## Example:\n\nClicking on the green element transfers to the other.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>transfer demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  .green {\n    width: 100px;\n    height: 80px;\n    background: green;\n    border: 1px solid black;\n  }\n  .red {\n    margin-top: 10px;\n    width: 50px;\n    height: 30px;\n    background: red;\n    border: 1px solid black;\n  }\n  .ui-effects-transfer {\n    border: 1px dotted black;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div class=\"green\"></div>\n<div class=\"red\"></div>\n \n<script>\n$( \"div\" ).click(function() {\n  var i = 1 - $( \"div\" ).index( this );\n  $( this ).transfer( {\n    to: $( \"div\" ).eq( i ),\n    duration: 1000\n  } );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/transfer](https://api.jqueryui.com/transfer)"
- name: .uniqueId()
  id: uniqueid
  summary: 'Description: Generate and apply a unique id for the set of matched elements'
  description: "# .uniqueId()\n\n## .uniqueId()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Description:** Generate and apply a unique id for the set of matched elements.\n\n- #### version added: 1.9[.uniqueId()](#uniqueId)\n\n  - This method does not accept any arguments.\n\nMany widgets need to generate unique ids for elements. `.uniqueId()` will check if the element has an id, and if not, it will generate one and set it on the element. It is safe to call `.uniqueId()` on an element without checking if it already has an id. If/when the widget needs to clean up after itself, the [`.removeUniqueId()`](removeuniqueid) method will remove the id from the element if it was added by `.uniqueId()` and leave the id alone if it was not. `.removeUniqueId()` is able to be smart about this because the generated ids have a prefix of `\"ui-id-\"`.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/uniqueId](https://api.jqueryui.com/uniqueId)"
- name: :data() selector
  id: data-selector
  summary: 'Description: Selects elements which have data stored under the specified key'
  description: "# :data() Selector\n\n## data selector\n\n**Description:** Selects elements which have data stored under the specified key.\n\n- #### jQuery( \":data(key)\" )\n\n  **key:** The data key.\n\nThe expression `$( \"div:data(foo)\")` matches a `<div>` if it has data stored via `.data( \"foo\", value )`.\n\n## Example:\n\nSelect elements with data and change their background color.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>data demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div {\n    width: 100px;\n    height: 100px;\n    border: 1px solid #000;\n    float: left;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"one\"></div>\n<div id=\"two\"></div>\n<div id=\"three\"></div>\n \n<script>\n$( \"#one\" ).data( \"color\", \"blue\" );\n$( \"#three\" ).data( \"color\", \"green\" );\n \n$( \":data(color)\" ).each(function() {\n  var element = $( this );\n  element.css( \"backgroundColor\", element.data( \"color\" ) );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/data-selector](https://api.jqueryui.com/data-selector)"
- name: :focusable selector
  id: focusable-selector
  summary: 'Description: Selects elements which can be focused'
  description: "# :focusable Selector\n\n## focusable selector\n\n**Description:** Selects elements which can be focused.\n\n- #### jQuery( \":focusable\" )\n\nSome elements are natively focusable, while others require explicitly setting a tab index. In all cases, the element must be visible in order to be focusable.\n\nElements of the following type are focusable if they are not disabled: `input`, `select`, `textarea`, `button`, and `object`. Anchors are focusable if they have an `href` or `tabindex` attribute. `area` elements are focusable if they are inside a named map, have an `href` attribute, and there is a visible image using the map. All other elements are focusable based solely on their `tabindex` attribute and visibility.\n\n*Note: Elements with a negative tab index are `:focusable`, but not [`:tabbable`](tabbable-selector).*\n\n## Example:\n\nSelect focusable elements and highlight them with a red border.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>focusable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  input, a, p {\n    border: 1px solid #000;\n  }\n  div {\n    padding: 5px;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div><input value=\"text input\"></div>\n<div><a>anchor without href</a></div>\n<div><a href=\"#\">anchor with href</a></div>\n<div><p>paragraph without tabindex</p></div>\n<div><p tabindex=\"1\">paragraph with tabindex</p></div>\n \n<script>\n$( \":focusable\" ).css( \"border-color\", \"red\" );\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/focusable-selector](https://api.jqueryui.com/focusable-selector)"
- name: :tabbable selector
  id: tabbable-selector
  summary: 'Description: Selects elements which the user can focus via tabbing'
  description: "# :tabbable Selector\n\n## tabbable selector\n\n**Description:** Selects elements which the user can focus via tabbing.\n\n- #### jQuery( \":tabbable\" )\n\nSome elements are natively tabbable, while others require explicitly setting a positive tab index. In all cases, the element must be visible in order to be tabbable.\n\nElements of the following type are tabbable if they do not have a negative tab index and are not disabled: `input`, `select`, `textarea`, `button`, and `object`. Anchors are focusable if they have an `href` or positive `tabindex` attribute. `area` elements are focusable if they are inside a named map, have an `href` attribute, and there is a visible image using the map. All other elements are tabbable based solely on their `tabindex` attribute and visibility.\n\n*Note: Elements with a negative tab index are [`:focusable`](focusable-selector), but not `:tabbable`.*\n\n## Example:\n\nSelect tabbable elements and highlight them with a red border.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>tabbable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  input {\n    border: 1px solid #000;\n  }\n  div {\n    padding: 5px;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div><input value=\"no tabindex\"></div>\n<div><input tabindex=\"5\" value=\"positive tabindex\"></div>\n<div><input tabindex=\"-1\" value=\"negative tabindex\"></div>\n \n<script>\n$( \":tabbable\" ).css( \"border-color\", \"red\" );\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/tabbable-selector](https://api.jqueryui.com/tabbable-selector)"
- name: Accordion
  id: accordion
  summary: 'Description: Convert a pair of headers and content panels into an accordion'
  description: "# Accordion Widget\n\n## Accordion Widgetversion added: 1.0\n\n**Description:** Convert a pair of headers and content panels into an accordion.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[active](#option-active)\n\n[animate](#option-animate)\n\n[classes](#option-classes)\n\n[collapsible](#option-collapsible)\n\n[disabled](#option-disabled)\n\n[event](#option-event)\n\n[header](#option-header)\n\n[heightStyle](#option-heightStyle)\n\n[icons](#option-icons)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[activate](#event-activate)\n\n[beforeActivate](#event-beforeActivate)\n\n[create](#event-create)\n\nThe markup of your accordion container needs pairs of headers and content panels:\n\n``` markup\n<div id=\"accordion\">\n  <h3>First header</h3>\n  <div>First content panel</div>\n  <h3>Second header</h3>\n  <div>Second content panel</div>\n</div>\n```\n\nAccordions support arbitrary markup, but each content panel must always be the next sibling after its associated header. See the [`header`](#option-header) option for information on how to use custom markup structures.\n\nThe panels can be activated programmatically by setting the [`active`](#option-active) option.\n\n### Keyboard interaction\n\nWhen focus is on a header, the following key commands are available:\n\n- `UP`/`LEFT`: Move focus to the previous header. If on first header, moves focus to last header.\n- `DOWN`/`RIGHT`: Move focus to the next header. If on last header, moves focus to first header.\n- `HOME`: Move focus to the first header.\n- `END`: Move focus to the last header.\n- `SPACE`/`ENTER`: Activate panel associated with focused header.\n\nWhen focus is in a panel:\n\n- `CTRL` + `UP`: Move focus to associated header.\n\n### Theming\n\nThe accordion widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If accordion specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-accordion`: The outer container of the accordion.\n  - `ui-accordion-header`: The headers of the accordion. The active header will additionally have a `ui-accordion-header-active` class, the inactive headers will have a `ui-accordion-header-collapsed` class. The headers will also have a `ui-accordion-icons` class if they contain [`icons`](#option-icons).\n    - `ui-accordion-header-icon`: Icon elements within each accordion header.\n  - `ui-accordion-content`: The content panels of the accordion. The active content panel will additionally have a `ui-accordion-content-active` class.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Effects Core](category/effects-core) (optional; for use with the [`animate`](#option-animate) option)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### active\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `0`\n\nWhich panel is currently open.\n\n**Multiple types supported:**\n\n- **Boolean**: Setting `active` to `false` will collapse all panels. This requires the [`collapsible`](#option-collapsible) option to be `true`.\n- **Integer**: The zero-based index of the panel that is active (open). A negative value selects panels going backward from the last panel.\n\n**Code examples:**\n\nInitialize the accordion with the `active` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  active: 2\n});\n```\n\nGet or set the `active` option, after initialization:\n\n``` javascript\n// Getter\nvar active = $( \".selector\" ).accordion( \"option\", \"active\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"active\", 2 );\n```\n\n### animate\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nIf and how to animate changing panels.\n\n**Multiple types supported:**\n\n- **Boolean**: A value of `false` will disable animations.\n- **Number**: Duration in milliseconds with default easing.\n- **String**: Name of [easing](easings) to use with default duration.\n- **Object**: An object containing `easing` and `duration` properties to configure animations.\n  - Can also contain a `down` property with any of the above options.\n  - \"Down\" animations occur when the panel being activated has a lower index than the currently active panel.\n\n**Code examples:**\n\nInitialize the accordion with the `animate` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  animate: 200\n});\n```\n\nGet or set the `animate` option, after initialization:\n\n``` javascript\n// Getter\nvar animate = $( \".selector\" ).accordion( \"option\", \"animate\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"animate\", 200 );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-accordion-header\": \"ui-corner-top\",\n  \"ui-accordion-header-collapsed\": \"ui-corner-all\",\n  \"ui-accordion-content\": \"ui-corner-bottom\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the accordion with the `classes` option specified, changing the theming for the `ui-accordion` class:\n\n``` javascript\n$( \".selector\" ).accordion({\n  classes: {\n    \"ui-accordion\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-accordion` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).accordion( \"option\", \"classes.ui-accordion\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"classes.ui-accordion\", \"highlight\" );\n```\n\n### collapsible\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether all the sections can be closed at once. Allows collapsing the active section.\n\n**Code examples:**\n\nInitialize the accordion with the `collapsible` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  collapsible: true\n});\n```\n\nGet or set the `collapsible` option, after initialization:\n\n``` javascript\n// Getter\nvar collapsible = $( \".selector\" ).accordion( \"option\", \"collapsible\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"collapsible\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the accordion if set to `true`.\n\n**Code examples:**\n\nInitialize the accordion with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).accordion( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"disabled\", true );\n```\n\n### event\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"click\"`\n\nThe event that accordion headers will react to in order to activate the associated panel. Multiple events can be specified, separated by a space.\n\n**Code examples:**\n\nInitialize the accordion with the `event` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  event: \"mouseover\"\n});\n```\n\nGet or set the `event` option, after initialization:\n\n``` javascript\n// Getter\nvar event = $( \".selector\" ).accordion( \"option\", \"event\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"event\", \"mouseover\" );\n```\n\n### header\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Function](http://api.jquery.com/Types/#Function)( [jQuery](http://api.jquery.com/Types/#jQuery) accordionElement )\n\n**Default:** `function( elem ) { return elem.find( \"> li > :first-child\" ).add( elem.find( \"> :not(li)\" ).even() ); }`\n\nData identifying the header element. Content panels must be the sibling immediately after their associated headers.\n\n**Multiple types supported:**\n\n- **Selector**: Selector for the header element, applied via `.find()` on the main accordion element.\n- **Function**: A function accepting the accordion element and returning the header element (added in `1.13`).\n\n**Code examples:**\n\nInitialize the accordion with the `header` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  header: \"h3\"\n});\n```\n\nGet or set the `header` option, after initialization:\n\n``` javascript\n// Getter\nvar header = $( \".selector\" ).accordion( \"option\", \"header\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"header\", \"h3\" );\n```\n\nInitialize the accordion with the `header` option specified as a function:\n\n``` javascript\n$( \".selector\" ).accordion({\n  header: function ( accordionElement ) {\n    return accordionElement.find( \"h3\" );\n  }\n});\n```\n\n### heightStyle\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"auto\"`\n\nControls the height of the accordion and each panel. Possible values:\n\n- `\"auto\"`: All panels will be set to the height of the tallest panel.\n- `\"fill\"`: Expand to the available height based on the accordion's parent height.\n- `\"content\"`: Each panel will be only as tall as its content.\n\n**Code examples:**\n\nInitialize the accordion with the `heightStyle` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  heightStyle: \"fill\"\n});\n```\n\nGet or set the `heightStyle` option, after initialization:\n\n``` javascript\n// Getter\nvar heightStyle = $( \".selector\" ).accordion( \"option\", \"heightStyle\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"heightStyle\", \"fill\" );\n```\n\n### icons\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"header\": \"ui-icon-triangle-1-e\",\n  \"activeHeader\": \"ui-icon-triangle-1-s\"\n}\n```\n\nIcons to use for headers, matching [an icon provided by the jQuery UI CSS Framework](theming/icons). Set to `false` to have no icons displayed.\n\n- header (string, default: \"ui-icon-triangle-1-e\")\n- activeHeader (string, default: \"ui-icon-triangle-1-s\")\n\n**Code examples:**\n\nInitialize the accordion with the `icons` option specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  icons: { \"header\": \"ui-icon-plus\", \"activeHeader\": \"ui-icon-minus\" }\n});\n```\n\nGet or set the `icons` option, after initialization:\n\n``` javascript\n// Getter\nvar icons = $( \".selector\" ).accordion( \"option\", \"icons\" );\n \n// Setter\n$( \".selector\" ).accordion( \"option\", \"icons\", { \"header\": \"ui-icon-plus\", \"activeHeader\": \"ui-icon-minus\" } );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the accordion functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).accordion( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the accordion.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).accordion( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the accordion.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).accordion( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the accordion's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the accordion plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).accordion( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).accordion( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current accordion options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).accordion( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the accordion option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).accordion( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the accordion.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).accordion( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nProcess any headers and panels that were added or removed directly in the DOM and recompute the height of the accordion panels. Results depend on the content and the [`heightStyle`](#option-heightStyle) option.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).accordion( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the accordion.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).accordion( \"widget\" );\n```\n\n## Events\n\n### activate( event, ui )Type: `accordionactivate`\n\nTriggered after a panel has been activated (after animation completes). If the accordion was previously collapsed, `ui.oldHeader` and `ui.oldPanel` will be empty jQuery objects. If the accordion is collapsing, `ui.newHeader` and `ui.newPanel` will be empty jQuery objects.\n\n**Note:** Since the `activate` event is only fired on panel activation, it is not fired for the initial panel when the accordion widget is created. If you need a hook for widget creation use the [`create`](#event-create) event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **newHeader**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The header that was just activated.\n\n  - **oldHeader**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The header that was just deactivated.\n\n  - **newPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that was just activated.\n\n  - **oldPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that was just deactivated.\n\n**Code examples:**\n\nInitialize the accordion with the activate callback specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  activate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the accordionactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"accordionactivate\", function( event, ui ) {} );\n```\n\n### beforeActivate( event, ui )Type: `accordionbeforeactivate`\n\nTriggered directly before a panel is activated. Can be canceled to prevent the panel from activating. If the accordion is currently collapsed, `ui.oldHeader` and `ui.oldPanel` will be empty jQuery objects. If the accordion is collapsing, `ui.newHeader` and `ui.newPanel` will be empty jQuery objects.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **newHeader**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The header that is about to be activated.\n\n  - **oldHeader**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The header that is about to be deactivated.\n\n  - **newPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that is about to be activated.\n\n  - **oldPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that is about to be deactivated.\n\n**Code examples:**\n\nInitialize the accordion with the beforeActivate callback specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  beforeActivate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the accordionbeforeactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"accordionbeforeactivate\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `accordioncreate`\n\nTriggered when the accordion is created. If the accordion is collapsed, `ui.header` and `ui.panel` will be empty jQuery objects.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **header**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The active header.\n\n  - **panel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The active panel.\n\n**Code examples:**\n\nInitialize the accordion with the create callback specified:\n\n``` javascript\n$( \".selector\" ).accordion({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the accordioncreate event:\n\n``` javascript\n$( \".selector\" ).on( \"accordioncreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Accordion\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>accordion demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"accordion\">\n  <h3>Section 1</h3>\n  <div>\n    <p>Mauris mauris ante, blandit et, ultrices a, suscipit eget.\n    Integer ut neque. Vivamus nisi metus, molestie vel, gravida in,\n    condimentum sit amet, nunc. Nam a nibh. Donec suscipit eros.\n    Nam mi. Proin viverra leo ut odio.</p>\n  </div>\n  <h3>Section 2</h3>\n  <div>\n    <p>Sed non urna. Phasellus eu ligula. Vestibulum sit amet purus.\n    Vivamus hendrerit, dolor aliquet laoreet, mauris turpis velit,\n    faucibus interdum tellus libero ac justo.</p>\n  </div>\n  <h3>Section 3</h3>\n  <div>\n    <p>Nam enim risus, molestie et, porta ac, aliquam ac, risus.\n    Quisque lobortis.Phasellus pellentesque purus in massa.</p>\n    <ul>\n      <li>List item one</li>\n      <li>List item two</li>\n      <li>List item three</li>\n    </ul>\n  </div>\n</div>\n \n<script>\n$( \"#accordion\" ).accordion();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/accordion](https://api.jqueryui.com/accordion)"
- name: Autocomplete
  id: autocomplete
  summary: 'Description: Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering'
  description: "# Autocomplete Widget\n\n## Autocomplete Widgetversion added: 1.8\n\n**Description:** Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[appendTo](#option-appendTo)\n\n[autoFocus](#option-autoFocus)\n\n[classes](#option-classes)\n\n[delay](#option-delay)\n\n[disabled](#option-disabled)\n\n[minLength](#option-minLength)\n\n[position](#option-position)\n\n[source](#option-source)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[search](#method-search)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_renderItem](#method-_renderItem)\n\n[\\_renderMenu](#method-_renderMenu)\n\n[\\_resizeMenu](#method-_resizeMenu)\n\n### Events\n\n[change](#event-change)\n\n[close](#event-close)\n\n[create](#event-create)\n\n[focus](#event-focus)\n\n[open](#event-open)\n\n[response](#event-response)\n\n[search](#event-search)\n\n[select](#event-select)\n\nAny field that can receive input can be converted into an Autocomplete, namely, `<input>` elements, `<textarea>` elements, and elements with the `contenteditable` attribute.\n\nWhen typing in the autocomplete field, the plugin starts searching for entries that match and displays a list of values to choose from. By entering more characters, the user can filter down the list to better matches.\n\nThis can be used to choose previously selected values, such as entering tags for articles or entering email addresses from an address book. Autocomplete can also be used to populate associated information, such as entering a city name and getting the zip code.\n\nYou can pull data in from a local or remote source: Local is good for small data sets, e.g., an address book with 50 entries; remote is necessary for big data sets, such as a database with hundreds or millions of entries to select from. To find out more about customizing the data source, see the documentation for the [`source`](#option-source) option.\n\n### Keyboard interaction\n\nWhen the menu is open, the following key commands are available:\n\n- `UP`: Move focus to the previous item. If on first item, move focus to the input. If on the input, move focus to last item.\n- `DOWN`: Move focus to the next item. If on last item, move focus to the input. If on the input, move focus to the first item.\n- `ESCAPE`: Close the menu.\n- `ENTER`: Select the currently focused item and close the menu.\n- `TAB`: Select the currently focused item, close the menu, and move focus to the next focusable element.\n- `PAGE UP`/`PAGE DOWN`: Scroll through a page of items (based on height of menu). *It's generally a bad idea to display so many items that users need to page.*\n\nWhen the menu is closed, the following key commands are available:\n\n- `UP`/`DOWN`: Open the menu, if the [`minLength`](#option-minLength) has been met.\n\n### Theming\n\nThe autocomplete widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If autocomplete specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-autocomplete`: The [menu](menu#theming) used to display matches to the user.\n- `ui-autocomplete-input`: The input element that the autocomplete widget was instantiated with. While requesting data to display to the user, the `ui-autocomplete-loading` class is also added to this element.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Position](position)\n- [Menu](menu)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n- This widget manipulates its element's value programmatically, therefore a native `change` event may not be fired when the element's value changes.\n\n## Options\n\n### appendTo\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `null`\n\nWhich element the menu should be appended to. When the value is `null`, the parents of the input field will be checked for a class of `ui-front`. If an element with the `ui-front` class is found, the menu will be appended to that element. Regardless of the value, if no element is found, the menu will be appended to the body.\n\n**Note:** The `appendTo` option should not be changed while the suggestions menu is open.\n\n**Code examples:**\n\nInitialize the autocomplete with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  appendTo: \"#someElem\"\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).autocomplete( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"appendTo\", \"#someElem\" );\n```\n\n### autoFocus\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf set to `true` the first item will automatically be focused when the menu is shown.\n\n**Code examples:**\n\nInitialize the autocomplete with the `autoFocus` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  autoFocus: true\n});\n```\n\nGet or set the `autoFocus` option, after initialization:\n\n``` javascript\n// Getter\nvar autoFocus = $( \".selector\" ).autocomplete( \"option\", \"autoFocus\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"autoFocus\", true );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the autocomplete with the `classes` option specified, changing the theming for the `ui-autocomplete` class:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  classes: {\n    \"ui-autocomplete\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-autocomplete` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).autocomplete( \"option\", \"classes.ui-autocomplete\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"classes.ui-autocomplete\", \"highlight\" );\n```\n\n### delay\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `300`\n\nThe delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.\n\n**Code examples:**\n\nInitialize the autocomplete with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  delay: 500\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).autocomplete( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"delay\", 500 );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the autocomplete if set to `true`.\n\n**Code examples:**\n\nInitialize the autocomplete with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).autocomplete( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"disabled\", true );\n```\n\n### minLength\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `1`\n\nThe minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items.\n\n**Code examples:**\n\nInitialize the autocomplete with the `minLength` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  minLength: 0\n});\n```\n\nGet or set the `minLength` option, after initialization:\n\n``` javascript\n// Getter\nvar minLength = $( \".selector\" ).autocomplete( \"option\", \"minLength\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"minLength\", 0 );\n```\n\n### position\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ my: \"left top\", at: \"left bottom\", collision: \"none\" }`\n\nIdentifies the position of the suggestions menu in relation to the associated input element. The `of` option defaults to the input element, but you can specify another element to position against. You can refer to the [jQuery UI Position](position) utility for more details about the various options.\n\n**Code examples:**\n\nInitialize the autocomplete with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  position: { my : \"right top\", at: \"right bottom\" }\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).autocomplete( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"position\", { my : \"right top\", at: \"right bottom\" } );\n```\n\n### source\n\n**Type:** [Array](http://api.jquery.com/Types/#Array) or [String](http://api.jquery.com/Types/#String) or [Function](http://api.jquery.com/Types/#Function)( [Object](http://api.jquery.com/Types/#Object) request, [Function](http://api.jquery.com/Types/#Function) response( [Object](http://api.jquery.com/Types/#Object) data ) )\n\n**Default:** `none; must be specified`\n\nDefines the data to use, must be specified.\n\nIndependent of the variant you use, the label is always treated as text. If you want the label to be treated as html you can use [Scott González' html extension](https://github.com/scottgonzalez/jquery-ui-extensions/blob/master/src/autocomplete/jquery.ui.autocomplete.html.js). The demos all focus on different variations of the `source` option - look for one that matches your use case, and check out the code.\n\n**Multiple types supported:**\n\n- **Array**: An array can be used for local data. There are two supported formats:\n  - An array of strings: `[ \"Choice1\", \"Choice2\" ]`\n  - An array of objects with `label` and `value` properties: `[ { label: \"Choice1\", value: \"value1\" }, ... ]`\n\n  The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only `value` properties, the value will also be used as the label.\n\n- **String**: When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must support CORS). The Autocomplete plugin does not filter the results, instead a query string is added with a `term` field, which the server-side script should use for filtering the results. For example, if the `source` option is set to `\"https://example.com\"` and the user types `foo`, a GET request would be made to `https://example.com?term=foo`. The data itself can be in the same format as the local data described above.\n\n- **Function**: The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete, including JSONP. The callback gets two arguments:\n\n  - A `request` object, with a single `term` property, which refers to the value currently in the text input. For example, if the user enters `\"new yo\"` in a city field, the Autocomplete term will equal `\"new yo\"`.\n  - A `response` callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It's important when providing a custom source callback to handle errors during the request. You must always call the `response` callback even if you encounter an error. This ensures that the widget always has the correct state.\n\n  When filtering data locally, you can make use of the built-in `$.ui.autocomplete.escapeRegex` function. It'll take a single string argument and escape all regex characters, making the result safe to pass to `new RegExp()`.\n\n**Code examples:**\n\nInitialize the autocomplete with the `source` option specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  source: [ \"c++\", \"java\", \"php\", \"coldfusion\", \"javascript\", \"asp\", \"ruby\" ]\n});\n```\n\nGet or set the `source` option, after initialization:\n\n``` javascript\n// Getter\nvar source = $( \".selector\" ).autocomplete( \"option\", \"source\" );\n \n// Setter\n$( \".selector\" ).autocomplete( \"option\", \"source\", [ \"c++\", \"java\", \"php\", \"coldfusion\", \"javascript\", \"asp\", \"ruby\" ] );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the Autocomplete menu. Useful in combination with the [`search`](#method-search) method, to close the open menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the autocomplete functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the autocomplete.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the autocomplete.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the autocomplete's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the autocomplete plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).autocomplete( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current autocomplete options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).autocomplete( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the autocomplete option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the autocomplete.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"option\", { disabled: true } );\n```\n\n### search( \\[value \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nTriggers a [`search`](#event-search) event and invokes the data source if the event is not canceled. Can be used by a selectbox-like button to open the suggestions when clicked. When invoked with no parameters, the current input's value is used. Can be called with an empty string and `minLength: 0` to display all items.\n\n- **value**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n**Code examples:**\n\nInvoke the search method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"search\", \"\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the menu element. Although the menu items are constantly created and destroyed, the menu element itself is created during initialization and is constantly reused.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\n$( \".selector\" ).autocomplete( \"widget\" );\n```\n\n## Extension Points\n\nThe autocomplete widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_renderItem( ul, item )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nMethod that controls the creation of each option in the widget's menu. The method must create a new `<li>` element, append it to the menu, and return it. See the [Menu](menu) documentation for more details about the markup.\n\n- **ul**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The `<ul>` element that the newly created `<li>` element must be appended to.\n\n- **item**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **label**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The string to display for the item.\n\n  - **value**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The value to insert into the input when the item is selected.\n\n**Code examples:**\n\nAdd the item's value as a data attribute on the `<li>`.\n\n``` javascript\n_renderItem: function( ul, item ) {\n  return $( \"<li>\" )\n    .attr( \"data-value\", item.value )\n    .append( item.label )\n    .appendTo( ul );\n}\n```\n\n### \\_renderMenu( ul, items )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMethod that controls building the widget's menu. The method is passed an empty `<ul>` and an array of items that match the user typed term. Creation of the individual `<li>` elements should be delegated to `_renderItemData()`, which in turn delegates to the [`_renderItem()`](#method-_renderItem) extension point.\n\n- **ul**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  An empty `<ul>` element to use as the widget's menu.\n\n- **items**\n\n  Type: [Array](http://api.jquery.com/Types/#Array)\n\n  An Array of items that match the user typed term. Each item is an Object with `label` and `value` properties.\n\n**Code examples:**\n\nAdd a CSS class name to the odd menu items.\n\n``` javascript\n_renderMenu: function( ul, items ) {\n  var that = this;\n  $.each( items, function( index, item ) {\n    that._renderItemData( ul, item );\n  });\n  $( ul ).find( \"li\" ).odd().addClass( \"odd\" );\n}\n```\n\n### \\_resizeMenu()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMethod responsible for sizing the menu before it is displayed. The menu element is available at `this.menu.element`.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nAlways display the menu as 500 pixels wide.\n\n``` javascript\n_resizeMenu: function() {\n  this.menu.element.outerWidth( 500 );\n}\n```\n\n## Events\n\n### change( event, ui )Type: `autocompletechange`\n\nTriggered when the field is blurred, if the value has changed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The item selected from the menu, if any. Otherwise the property is `null`.\n\n**Code examples:**\n\nInitialize the autocomplete with the change callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompletechange event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompletechange\", function( event, ui ) {} );\n```\n\n### close( event, ui )Type: `autocompleteclose`\n\nTriggered when the menu is hidden. Not every `close` event will be accompanied by a `change` event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the autocomplete with the close callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  close: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompleteclose event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompleteclose\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `autocompletecreate`\n\nTriggered when the autocomplete is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the autocomplete with the create callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompletecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompletecreate\", function( event, ui ) {} );\n```\n\n### focus( event, ui )Type: `autocompletefocus`\n\nTriggered when focus is moved to an item (not selecting). The default action is to replace the text field's value with the value of the focused item, though only if the event was triggered by a keyboard interaction.\n\nCanceling this event prevents the value from being updated, but does not prevent the menu item from being focused.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The focused item.\n\n**Code examples:**\n\nInitialize the autocomplete with the focus callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  focus: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompletefocus event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompletefocus\", function( event, ui ) {} );\n```\n\n### open( event, ui )Type: `autocompleteopen`\n\nTriggered when the suggestion menu is opened or updated.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the autocomplete with the open callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  open: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompleteopen event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompleteopen\", function( event, ui ) {} );\n```\n\n### response( event, ui )Type: `autocompleteresponse`\n\nTriggered after a search completes, before the menu is shown. Useful for local manipulation of suggestion data, where a custom [`source`](#option-source) option callback is not required. This event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **content**\n\n    Type: [Array](http://api.jquery.com/Types/#Array)\n\n    Contains the response data and can be modified to change the results that will be shown. This data is already normalized, so if you modify the data, make sure to include both `value` and `label` properties for each item.\n\n**Code examples:**\n\nInitialize the autocomplete with the response callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  response: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompleteresponse event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompleteresponse\", function( event, ui ) {} );\n```\n\n### search( event, ui )Type: `autocompletesearch`\n\nTriggered before a search is performed, after [`minLength`](#option-minLength) and [`delay`](#option-delay) are met. If canceled, then no request will be started and no items suggested.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the autocomplete with the search callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  search: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompletesearch event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompletesearch\", function( event, ui ) {} );\n```\n\n### select( event, ui )Type: `autocompleteselect`\n\nTriggered when an item is selected from the menu. The default action is to replace the text field's value with the value of the selected item.\n\nCanceling this event prevents the value from being updated, but does not prevent the menu from closing.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    An Object with `label` and `value` properties for the selected option.\n\n**Code examples:**\n\nInitialize the autocomplete with the select callback specified:\n\n``` javascript\n$( \".selector\" ).autocomplete({\n  select: function( event, ui ) {}\n});\n```\n\nBind an event listener to the autocompleteselect event:\n\n``` javascript\n$( \".selector\" ).on( \"autocompleteselect\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA simple jQuery UI Autocomplete\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>autocomplete demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label for=\"autocomplete\">Select a programming language: </label>\n<input id=\"autocomplete\">\n \n<script>\n$( \"#autocomplete\" ).autocomplete({\n  source: [ \"c++\", \"java\", \"php\", \"coldfusion\", \"javascript\", \"asp\", \"ruby\" ]\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nUsing a custom source callback to match only the beginning of terms\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>autocomplete demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label for=\"autocomplete\">Select a programming language: </label>\n<input id=\"autocomplete\">\n \n<script>\nvar tags = [ \"c++\", \"java\", \"php\", \"coldfusion\", \"javascript\", \"asp\", \"ruby\" ];\n$( \"#autocomplete\" ).autocomplete({\n  source: function( request, response ) {\n          var matcher = new RegExp( \"^\" + $.ui.autocomplete.escapeRegex( request.term ), \"i\" );\n          response( $.grep( tags, function( item ){\n              return matcher.test( item );\n          }) );\n      }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/autocomplete](https://api.jqueryui.com/autocomplete)"
- name: Blind effect
  id: blind-effect
  summary: The direction the blind will be pulled to hide the element, or the direction from which the element will be revealed
  description: "# Blind Effect\n\n## Blind Effect\n\n**Description:** The blind effect hides or shows an element by wrapping the element in a container, and \"pulling the blinds\"\n\n- #### blind\n\n  - **direction** (default: `\"up\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The direction the blind will be pulled to hide the element, or the direction from which the element will be revealed.\n\n    Possible Values: `up`, `down`, `left`, `right`, `vertical`, `horizontal`.\n\nThe container has `overflow: hidden` applied, so height changes affect what's visible.\n\n## Example:\n\nToggle a div using the blind effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>blind demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"blind\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/blind-effect](https://api.jqueryui.com/blind-effect)"
- name: Bounce effect
  id: bounce-effect
  summary: 'Description: The bounce effect bounces an element'
  description: "# Bounce Effect\n\n## Bounce Effect\n\n**Description:** The bounce effect bounces an element. When used with hide or show, the last or first bounce will also fade in/out.\n\n- #### bounce\n\n  - **distance** (default: `20`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The distance of the largest \"bounce\" in pixels.\n\n  - **times** (default: `5`)\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The number of times the element will bounce. When used with hide or show, there is an extra \"half\" bounce for the fade in/out.\n\n## Example:\n\nToggle a div using the bounce effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>bounce demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"bounce\", { times: 3 }, \"slow\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/bounce-effect](https://api.jqueryui.com/bounce-effect)"
- name: Button
  id: button
  summary: 'Description: Themeable buttons'
  description: "# Button Widget\n\n## Button Widgetversion added: 1.8, rewritten: 1.12\n\n**Description:** Themeable buttons.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[icon](#option-icon)\n\n[iconPosition](#option-iconPosition)\n\n[label](#option-label)\n\n[showLabel](#option-showLabel)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\nButton enhances standard form elements like buttons, inputs and anchors to themeable buttons with appropriate hover and active styles.\n\nWhen using an input of type button, submit or reset, support is limited to plain text labels with no icons.\n\nNote: The button widget was rewritten in 1.12. Some options changed, you can find documentation for the old options in the [1.11 button docs](https://api.jqueryui.com/1.11/button/). This widget used to bundle support for inputs of type radio and checkbox, this is now deprecated, use the [checkboxradio widget](checkboxradio) instead. It also used to bundle the buttonset widget, this is also deprecated, use the [controlgroup widget](controlgroup) instead.\n\n### Theming\n\nThe button widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If button specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-button`: The DOM element that represents the button. This element will additionally have the `ui-button-icon-only` class, depending on the [showLabel](#option-showLabel) and [icon](#option-icon) options.\n  - `ui-button-icon`: The element used to display the button icon. This will only be present if an icon is provided in the [icon](#option-icon) option.\n  - `ui-button-icon-space`: A separator element between icon and text content of the button. This will only be present if an icon is provided in the [icon](#option-icon) option and the [iconPosition](#option-iconPosition) option is set to `\"beginning\"` or `\"end\"`.\n\n### Dependencies\n\n- [jQuery.ui.keyCode](jquery.ui.keycode)\n- [Widget Factory](jquery.widget)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-button\": \"ui-corner-all\",\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the button with the `classes` option specified, changing the theming for the `ui-button` class:\n\n``` javascript\n$( \".selector\" ).button({\n  classes: {\n    \"ui-button\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-button` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).button( \"option\", \"classes.ui-button\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"classes.ui-button\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the button if set to `true`.\n\n**Code examples:**\n\nInitialize the button with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).button( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"disabled\", true );\n```\n\n### icon\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nIcon to display, with or without text (see [`showLabel`](#option-showLabel) option). By default, the icon is displayed on the left of the label text. The positioning can be controlled using the [`iconPosition`](#option-iconPosition) option.\n\nThe value for this option must match [an icon class name](theming/icons), e.g., `\"ui-icon-gear\"`.\n\nWhen using an input of type button, submit or reset, icons are not supported.\n\n**Code examples:**\n\nInitialize the button with the `icon` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  icon: \"ui-icon-gear\"\n});\n```\n\nGet or set the `icon` option, after initialization:\n\n``` javascript\n// Getter\nvar icon = $( \".selector\" ).button( \"option\", \"icon\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"icon\", \"ui-icon-gear\" );\n```\n\n### iconPosition\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"beginning\"`\n\nWhere to display the [`icon`](#option-icon): Valid values are \"beginning\", \"end\", \"top\" and \"bottom\". In a left-to-right (LTR) display, \"beginning\" refers to the left, in a right-to-left (RTL, e.g. in Hebrew or Arabic), it refers to the right.\n\n**Code examples:**\n\nInitialize the button with the `iconPosition` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  iconPosition: \"end\"\n});\n```\n\nGet or set the `iconPosition` option, after initialization:\n\n``` javascript\n// Getter\nvar iconPosition = $( \".selector\" ).button( \"option\", \"iconPosition\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"iconPosition\", \"end\" );\n```\n\n### label\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nHTML to show in the button. When not specified (`null`), the element's HTML content is used, or its `value` attribute if the element is an input element of type submit or reset, or the HTML content of the associated label element if the element is an input of type radio or checkbox.\n\nWhen using an input of type button, submit or reset, support is limited to plain text labels.\n\n**Code examples:**\n\nInitialize the button with the `label` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  label: \"custom label\"\n});\n```\n\nGet or set the `label` option, after initialization:\n\n``` javascript\n// Getter\nvar label = $( \".selector\" ).button( \"option\", \"label\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"label\", \"custom label\" );\n```\n\n### showLabel\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nWhether to show the label. When set to `false` no text will be displayed, but the [`icon`](#option-icon) option must be used, otherwise the `showLabel` option will be ignored.\n\n**Code examples:**\n\nInitialize the button with the `showLabel` option specified:\n\n``` javascript\n$( \".selector\" ).button({\n  showLabel: false\n});\n```\n\nGet or set the `showLabel` option, after initialization:\n\n``` javascript\n// Getter\nvar showLabel = $( \".selector\" ).button( \"option\", \"showLabel\" );\n \n// Setter\n$( \".selector\" ).button( \"option\", \"showLabel\", false );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the button functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).button( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the button.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).button( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the button.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).button( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the button's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the button plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).button( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).button( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current button options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).button( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the button option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).button( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the button.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).button( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefreshes the visual state of the button. Useful for updating button state after the native element's disabled state is changed programmatically.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).button( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the element visually representing the button.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).button( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `buttoncreate`\n\nTriggered when the button is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the button with the create callback specified:\n\n``` javascript\n$( \".selector\" ).button({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the buttoncreate event:\n\n``` javascript\n$( \".selector\" ).on( \"buttoncreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Button\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>button demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<button>Button label</button>\n \n<script>\n$( \"button\" ).button();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/button](https://api.jqueryui.com/button)"
- name: Buttonset
  id: buttonset
  summary: 'Description: Themeable button sets'
  description: "# Buttonset Widget\n\n## Buttonset Widgetversion added: 1.8, deprecated: 1.12\n\n**Description:** Themeable button sets.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[disabled](#option-disabled)\n\n[items](#option-items)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\nThis widget is deprecated, use [Controlgroup](controlgroup) instead.\n\n`.buttonset()` is bundled with `.button()`. Although they are separate widgets, they are combined into a single file. If you have `.button()` available, you also have `.buttonset()` available.\n\nA button set provides a visual grouping for related [buttons](button). It is recommended that a button set be used whenever you have a group of related buttons. Button sets work by selecting all appropriate descendants and applying `.button()` to them. You can enable and disable a button set, which will enable and disable all contained buttons. Destroying a button set also calls each button's `.destroy()` method. For grouped radio and checkbox buttons, it's recommended to use a `fieldset` with a `legend` to provide an accessible group label.\n\n### Theming\n\nThe buttonset widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If buttonset specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-buttonset`: The outer container of Buttonsets.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the buttonset if set to `true`.\n\n**Code examples:**\n\nInitialize the buttonset with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).buttonset({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).buttonset( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).buttonset( \"option\", \"disabled\", true );\n```\n\n### items\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)\"`\n\nWhich descendant elements to convert manage as buttons.\n\n**Code examples:**\n\nInitialize the buttonset with the `items` option specified:\n\n``` javascript\n$( \".selector\" ).buttonset({\n  items: \"button, input[type=button], input[type=submit]\"\n});\n```\n\nGet or set the `items` option, after initialization:\n\n``` javascript\n// Getter\nvar items = $( \".selector\" ).buttonset( \"option\", \"items\" );\n \n// Setter\n$( \".selector\" ).buttonset( \"option\", \"items\", \"button, input[type=button], input[type=submit]\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the buttonset functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the buttonset.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the buttonset.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the buttonset's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the buttonset plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).buttonset( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current buttonset options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).buttonset( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the buttonset option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the buttonset.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nProcess any buttons that were added or removed directly in the DOM. Results depend on the [`items`](#option-items) option.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).buttonset( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the button set element that contains the buttons.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).buttonset( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `buttonsetcreate`\n\nTriggered when the buttonset is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the buttonset with the create callback specified:\n\n``` javascript\n$( \".selector\" ).buttonset({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the buttonsetcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"buttonsetcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Buttonset\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>buttonset demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<form>\n  <fieldset>\n    <legend>Favorite jQuery Project</legend>\n    <div id=\"radio\">\n      <input type=\"radio\" id=\"sizzle\" name=\"project\">\n      <label for=\"sizzle\">Sizzle</label>\n \n      <input type=\"radio\" id=\"qunit\" name=\"project\" checked=\"checked\">\n      <label for=\"qunit\">QUnit</label>\n \n      <input type=\"radio\" id=\"color\" name=\"project\">\n      <label for=\"color\">Color</label>\n    </div>\n  </fieldset>\n</form>\n \n<script>\n$( \"#radio\" ).buttonset();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/buttonset](https://api.jqueryui.com/buttonset)"
- name: 'Category: effects'
  id: category/effects
  summary: jQuery UI adds quite a bit of functionality on top of jQuery's built-in effects
  description: "# Category: Effects\n\njQuery UI adds quite a bit of functionality on top of [jQuery's built-in effects](https://api.jquery.com/category/effects/). jQuery UI adds support for animating colors and class transitions, as well as providing several additional [easings](../easings). In addition, a full suite of custom effects are available for use when showing and hiding elements or just to add some visual appeal.\n\n# [.addClass()](../addclass \"Permalink to .addClass()\")\n\nAdds the specified class(es) to each of the set of matched elements while animating all style changes.\n\n# [Blind Effect](../blind-effect \"Permalink to Blind Effect\")\n\nThe blind effect hides or shows an element by wrapping the element in a container, and “pulling the blinds”\n\n# [Bounce Effect](../bounce-effect \"Permalink to Bounce Effect\")\n\nThe bounce effect bounces an element. When used with hide or show, the last or first bounce will also fade in/out.\n\n# [Clip Effect](../clip-effect \"Permalink to Clip Effect\")\n\nThe clip effect will hide or show an element by clipping the element vertically or horizontally.\n\n# [Color Animation](../color-animation \"Permalink to Color Animation\")\n\nAnimate colors using .animate().\n\n# [.cssClip()](../cssclip \"Permalink to .cssClip()\")\n\nGetter/setter for an object version of the CSS clip property.\n\n# [Drop Effect](../drop-effect \"Permalink to Drop Effect\")\n\nThe drop effect hides or shows an element fading in/out and sliding in a direction.\n\n# [Easings](../easings \"Permalink to Easings\")\n\nEasing functions specify the speed at which an animation progresses at different points within the animation.\n\n# [.effect()](../effect \"Permalink to .effect()\")\n\nApply an animation effect to an element.\n\n# [Explode Effect](../explode-effect \"Permalink to Explode Effect\")\n\nThe explode effect hides or shows an element by splitting it into pieces.\n\n# [Fade Effect](../fade-effect \"Permalink to Fade Effect\")\n\nThe fade effect hides or shows an element by fading it.\n\n# [Fold Effect](../fold-effect \"Permalink to Fold Effect\")\n\nThe fold effect hides or shows an element by folding it.\n\n# [.hide()](../hide \"Permalink to .hide()\")\n\nHide the matched elements, using custom effects.\n\n# [Highlight Effect](../highlight-effect \"Permalink to Highlight Effect\")\n\nThe highlight effect hides or shows an element by animating its background color first.\n\n# [jQuery.effects.clipToBox()](../jquery.effects.cliptobox \"Permalink to jQuery.effects.clipToBox()\")\n\nCalculates position and dimensions based on a clip animation.\n\n# [jQuery.effects.createPlaceholder()](../jquery.effects.createplaceholder \"Permalink to jQuery.effects.createPlaceholder()\")\n\nCreates a placeholder to support clip animations without disrupting the layout.\n\n# [jQuery.effects.define()](../jquery.effects.define \"Permalink to jQuery.effects.define()\")\n\nDefines an effect.\n\n# [jQuery.effects.removePlaceholder()](../jquery.effects.removeplaceholder \"Permalink to jQuery.effects.removePlaceholder()\")\n\nRemoves a placeholder created with jQuery.effects.createPlaceholder().\n\n# [jQuery.effects.restoreStyle()](../jquery.effects.restorestyle \"Permalink to jQuery.effects.restoreStyle()\")\n\nRestores all inline styles for an element.\n\n# [jQuery.effects.saveStyle()](../jquery.effects.savestyle \"Permalink to jQuery.effects.saveStyle()\")\n\nStores a copy of all inline styles applied to an element.\n\n# [jQuery.effects.scaledDimensions()](../jquery.effects.scaleddimensions \"Permalink to jQuery.effects.scaledDimensions()\")\n\nScales the dimensions of an element.\n\n# [Puff Effect](../puff-effect \"Permalink to Puff Effect\")\n\nCreates a puff effect by scaling the element up and hiding it at the same time.\n\n# [Pulsate Effect](../pulsate-effect \"Permalink to Pulsate Effect\")\n\nThe pulsate effect hides or shows an element by pulsing it in or out.\n\n# [.removeClass()](../removeclass \"Permalink to .removeClass()\")\n\nRemoves the specified class(es) from each of the set of matched elements while animating all style changes.\n\n# [Scale Effect](../scale-effect \"Permalink to Scale Effect\")\n\nShrink or grow an element by a percentage factor.\n\n# [Shake Effect](../shake-effect \"Permalink to Shake Effect\")\n\nShakes the element multiple times, vertically or horizontally.\n\n# [.show()](../show \"Permalink to .show()\")\n\nDisplay the matched elements, using custom effects.\n\n# [Size Effect](../size-effect \"Permalink to Size Effect\")\n\nResize an element to a specified width and height.\n\n# [Slide Effect](../slide-effect \"Permalink to Slide Effect\")\n\nSlides the element out of the viewport.\n\n# [.switchClass()](../switchclass \"Permalink to .switchClass()\")\n\nAdds and removes the specified class(es) to each of the set of matched elements while animating all style changes.\n\n# [.toggle()](../toggle \"Permalink to .toggle()\")\n\nDisplay or hide the matched elements, using custom effects.\n\n# [.toggleClass()](../toggleclass \"Permalink to .toggleClass()\")\n\nAdd or remove one or more classes from each element in the set of matched elements, depending on either the class’s presence or the value of the switch argument, while animating all style changes.\n\n# [.transfer()](../transfer \"Permalink to .transfer()\")\n\nTransfers the outline of an element to another element\n\n# [Transfer Effect](../transfer-effect \"Permalink to Transfer Effect\")\n\nTransfers the outline of an element to another element\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/effects](https://api.jqueryui.com/category/effects)"
- name: 'Category: effects core'
  id: category/effects-core
  summary: Functionality provided by effect.js
  description: "# Category: Effects Core\n\nFunctionality provided by `effect.js`. In addition to the methods listed below, `effect.js` also includes several [easings](../easings).\n\n# [.addClass()](../addclass \"Permalink to .addClass()\")\n\nAdds the specified class(es) to each of the set of matched elements while animating all style changes.\n\n# [Color Animation](../color-animation \"Permalink to Color Animation\")\n\nAnimate colors using .animate().\n\n# [.cssClip()](../cssclip \"Permalink to .cssClip()\")\n\nGetter/setter for an object version of the CSS clip property.\n\n# [.effect()](../effect \"Permalink to .effect()\")\n\nApply an animation effect to an element.\n\n# [.hide()](../hide \"Permalink to .hide()\")\n\nHide the matched elements, using custom effects.\n\n# [jQuery.effects.clipToBox()](../jquery.effects.cliptobox \"Permalink to jQuery.effects.clipToBox()\")\n\nCalculates position and dimensions based on a clip animation.\n\n# [jQuery.effects.createPlaceholder()](../jquery.effects.createplaceholder \"Permalink to jQuery.effects.createPlaceholder()\")\n\nCreates a placeholder to support clip animations without disrupting the layout.\n\n# [jQuery.effects.define()](../jquery.effects.define \"Permalink to jQuery.effects.define()\")\n\nDefines an effect.\n\n# [jQuery.effects.removePlaceholder()](../jquery.effects.removeplaceholder \"Permalink to jQuery.effects.removePlaceholder()\")\n\nRemoves a placeholder created with jQuery.effects.createPlaceholder().\n\n# [jQuery.effects.restoreStyle()](../jquery.effects.restorestyle \"Permalink to jQuery.effects.restoreStyle()\")\n\nRestores all inline styles for an element.\n\n# [jQuery.effects.saveStyle()](../jquery.effects.savestyle \"Permalink to jQuery.effects.saveStyle()\")\n\nStores a copy of all inline styles applied to an element.\n\n# [jQuery.effects.scaledDimensions()](../jquery.effects.scaleddimensions \"Permalink to jQuery.effects.scaledDimensions()\")\n\nScales the dimensions of an element.\n\n# [.removeClass()](../removeclass \"Permalink to .removeClass()\")\n\nRemoves the specified class(es) from each of the set of matched elements while animating all style changes.\n\n# [.show()](../show \"Permalink to .show()\")\n\nDisplay the matched elements, using custom effects.\n\n# [.switchClass()](../switchclass \"Permalink to .switchClass()\")\n\nAdds and removes the specified class(es) to each of the set of matched elements while animating all style changes.\n\n# [.toggle()](../toggle \"Permalink to .toggle()\")\n\nDisplay or hide the matched elements, using custom effects.\n\n# [.toggleClass()](../toggleclass \"Permalink to .toggleClass()\")\n\nAdd or remove one or more classes from each element in the set of matched elements, depending on either the class’s presence or the value of the switch argument, while animating all style changes.\n\n# [.transfer()](../transfer \"Permalink to .transfer()\")\n\nTransfers the outline of an element to another element\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/effects-core](https://api.jqueryui.com/category/effects-core)"
- name: 'Category: interactions'
  id: category/interactions
  summary: jQuery UI provides a set of mouse-based interactions as building blocks for rich interfaces and complex widgets
  description: "# Category: Interactions\n\njQuery UI provides a set of mouse-based interactions as building blocks for rich interfaces and complex widgets.\n\n# [Draggable Widget](../draggable \"Permalink to Draggable Widget\")\n\nAllow elements to be moved using the mouse.\n\n# [Droppable Widget](../droppable \"Permalink to Droppable Widget\")\n\nCreate targets for draggable elements.\n\n# [Mouse Interaction](../mouse \"Permalink to Mouse Interaction\")\n\nThe base interaction layer.\n\n# [Resizable Widget](../resizable \"Permalink to Resizable Widget\")\n\nChange the size of an element using the mouse.\n\n# [Selectable Widget](../selectable \"Permalink to Selectable Widget\")\n\nUse the mouse to select elements, individually or in a group.\n\n# [Sortable Widget](../sortable \"Permalink to Sortable Widget\")\n\nReorder elements in a list or grid using the mouse.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/interactions](https://api.jqueryui.com/category/interactions)"
- name: 'Category: method overrides'
  id: category/overrides
  summary: jQuery UI overrides several built-in jQuery methods in order to provide additional functionality
  description: "# Category: Method Overrides\n\njQuery UI overrides several built-in jQuery methods in order to provide additional functionality. When using these overrides, it's important to make sure that jQuery UI is loaded. If jQuery UI is not loaded, the methods will still exist, but the expected functionality will not be available, resulting in bugs that may be hard to track down.\n\n# [.addClass()](../addclass \"Permalink to .addClass()\")\n\nAdds the specified class(es) to each of the set of matched elements while animating all style changes.\n\n# [.cssClip()](../cssclip \"Permalink to .cssClip()\")\n\nGetter/setter for an object version of the CSS clip property.\n\n# [.hide()](../hide \"Permalink to .hide()\")\n\nHide the matched elements, using custom effects.\n\n# [.labels()](../labels \"Permalink to .labels()\")\n\nFinds all label elements associated with the first selected element.\n\n# [.position()](../position \"Permalink to .position()\")\n\nPosition an element relative to another.\n\n# [.removeClass()](../removeclass \"Permalink to .removeClass()\")\n\nRemoves the specified class(es) from each of the set of matched elements while animating all style changes.\n\n# [.show()](../show \"Permalink to .show()\")\n\nDisplay the matched elements, using custom effects.\n\n# [.toggle()](../toggle \"Permalink to .toggle()\")\n\nDisplay or hide the matched elements, using custom effects.\n\n# [.toggleClass()](../toggleclass \"Permalink to .toggleClass()\")\n\nAdd or remove one or more classes from each element in the set of matched elements, depending on either the class’s presence or the value of the switch argument, while animating all style changes.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/overrides](https://api.jqueryui.com/category/overrides)"
- name: 'Category: methods'
  id: category/methods
  summary: Although jQuery UI is mostly comprised of widgets, interactions, and effects, there are also a few simple methods that are added for convenience
  description: "# Category: Methods\n\nAlthough jQuery UI is mostly comprised of [widgets](widgets), [interactions](interactions), and [effects](effects), there are also a few simple methods that are added for convenience.\n\n# [.cssClip()](../cssclip \"Permalink to .cssClip()\")\n\nGetter/setter for an object version of the CSS clip property.\n\n# [.disableSelection()](../disableselection \"Permalink to .disableSelection()\")\n\nDisable selection of text content within the set of matched elements.\n\n# [.effect()](../effect \"Permalink to .effect()\")\n\nApply an animation effect to an element.\n\n# [.enableSelection()](../enableselection \"Permalink to .enableSelection()\")\n\nEnable selection of text content within the set of matched elements.\n\n# [.hide()](../hide \"Permalink to .hide()\")\n\nHide the matched elements, using custom effects.\n\n# [.labels()](../labels \"Permalink to .labels()\")\n\nFinds all label elements associated with the first selected element.\n\n# [.position()](../position \"Permalink to .position()\")\n\nPosition an element relative to another.\n\n# [.removeUniqueId()](../removeuniqueid \"Permalink to .removeUniqueId()\")\n\nRemove ids that were set by .uniqueId() for the set of matched elements.\n\n# [.scrollParent()](../scrollparent \"Permalink to .scrollParent()\")\n\nGet the closest ancestor element that is scrollable.\n\n# [.show()](../show \"Permalink to .show()\")\n\nDisplay the matched elements, using custom effects.\n\n# [.toggle()](../toggle \"Permalink to .toggle()\")\n\nDisplay or hide the matched elements, using custom effects.\n\n# [.uniqueId()](../uniqueid \"Permalink to .uniqueId()\")\n\nGenerate and apply a unique id for the set of matched elements.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/methods](https://api.jqueryui.com/category/methods)"
- name: 'Category: selectors'
  id: category/selectors
  summary: Selects elements which have data stored under the specified key
  description: "# Category: Selectors\n\n# [:data() Selector](../data-selector \"Permalink to :data() Selector\")\n\nSelects elements which have data stored under the specified key.\n\n# [:focusable Selector](../focusable-selector \"Permalink to :focusable Selector\")\n\nSelects elements which can be focused.\n\n# [:tabbable Selector](../tabbable-selector \"Permalink to :tabbable Selector\")\n\nSelects elements which the user can focus via tabbing.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/selectors](https://api.jqueryui.com/category/selectors)"
- name: 'Category: uI core'
  id: category/ui-core
  summary: Functionality provided by core.js
  description: "# Category: UI Core\n\nFunctionality provided by `core.js`.\n\n# [:data() Selector](../data-selector \"Permalink to :data() Selector\")\n\nSelects elements which have data stored under the specified key.\n\n# [.disableSelection()](../disableselection \"Permalink to .disableSelection()\")\n\nDisable selection of text content within the set of matched elements.\n\n# [.enableSelection()](../enableselection \"Permalink to .enableSelection()\")\n\nEnable selection of text content within the set of matched elements.\n\n# [:focusable Selector](../focusable-selector \"Permalink to :focusable Selector\")\n\nSelects elements which can be focused.\n\n# [jQuery.ui.keyCode](../jquery.ui.keycode \"Permalink to jQuery.ui.keyCode\")\n\nA mapping of key code descriptions to their numeric values.\n\n# [.removeUniqueId()](../removeuniqueid \"Permalink to .removeUniqueId()\")\n\nRemove ids that were set by .uniqueId() for the set of matched elements.\n\n# [.scrollParent()](../scrollparent \"Permalink to .scrollParent()\")\n\nGet the closest ancestor element that is scrollable.\n\n# [:tabbable Selector](../tabbable-selector \"Permalink to :tabbable Selector\")\n\nSelects elements which the user can focus via tabbing.\n\n# [.uniqueId()](../uniqueid \"Permalink to .uniqueId()\")\n\nGenerate and apply a unique id for the set of matched elements.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/ui-core](https://api.jqueryui.com/category/ui-core)"
- name: 'Category: utilities'
  id: category/utilities
  summary: Getter/setter for an object version of the CSS clip property
  description: "# Category: Utilities\n\n# [.cssClip()](../cssclip \"Permalink to .cssClip()\")\n\nGetter/setter for an object version of the CSS clip property.\n\n# [Easings](../easings \"Permalink to Easings\")\n\nEasing functions specify the speed at which an animation progresses at different points within the animation.\n\n# [Form Reset Mixin](../form-reset-mixin \"Permalink to Form Reset Mixin\")\n\nA mixin to call refresh() on an input widget when the parent form gets reset.\n\n# [Widget Factory](../jquery.widget \"Permalink to Widget Factory\")\n\nCreate stateful jQuery plugins using the same abstraction as all jQuery UI widgets.\n\n# [Widget Plugin Bridge](../jquery.widget.bridge \"Permalink to Widget Plugin Bridge\")\n\nPart of the jQuery Widget Factory is the jQuery.widget.bridge() method. This acts as the middleman between the object created by $.widget() and the jQuery API.\n\n# [.labels()](../labels \"Permalink to .labels()\")\n\nFinds all label elements associated with the first selected element.\n\n# [Mouse Interaction](../mouse \"Permalink to Mouse Interaction\")\n\nThe base interaction layer.\n\n# [.position()](../position \"Permalink to .position()\")\n\nPosition an element relative to another.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/utilities](https://api.jqueryui.com/category/utilities)"
- name: 'Category: widgets'
  id: category/widgets
  summary: Widgets are feature-rich, stateful plugins that have a full life-cycle, along with methods and events
  description: "# Category: Widgets\n\nWidgets are feature-rich, stateful plugins that have a full life-cycle, along with methods and events. Check out the [widget factory](../jquery.widget) documentation for more details.\n\n# [Accordion Widget](../accordion \"Permalink to Accordion Widget\")\n\nConvert a pair of headers and content panels into an accordion.\n\n# [Autocomplete Widget](../autocomplete \"Permalink to Autocomplete Widget\")\n\nAutocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\n# [Button Widget](../button \"Permalink to Button Widget\")\n\nThemeable buttons.\n\n# [Buttonset Widget](../buttonset \"Permalink to Buttonset Widget\")\n\nThemeable button sets.\n\n# [Checkboxradio Widget](../checkboxradio \"Permalink to Checkboxradio Widget\")\n\nConverts inputs of type radio and checkbox to themeable buttons.\n\n# [Controlgroup Widget](../controlgroup \"Permalink to Controlgroup Widget\")\n\nThemeable set of input widgets.\n\n# [Datepicker Widget](../datepicker \"Permalink to Datepicker Widget\")\n\nSelect a date from a popup or inline calendar\n\n# [Dialog Widget](../dialog \"Permalink to Dialog Widget\")\n\nOpen content in an interactive overlay.\n\n# [Form Reset Mixin](../form-reset-mixin \"Permalink to Form Reset Mixin\")\n\nA mixin to call refresh() on an input widget when the parent form gets reset.\n\n# [Widget Factory](../jquery.widget \"Permalink to Widget Factory\")\n\nCreate stateful jQuery plugins using the same abstraction as all jQuery UI widgets.\n\n# [Widget Plugin Bridge](../jquery.widget.bridge \"Permalink to Widget Plugin Bridge\")\n\nPart of the jQuery Widget Factory is the jQuery.widget.bridge() method. This acts as the middleman between the object created by $.widget() and the jQuery API.\n\n# [Menu Widget](../menu \"Permalink to Menu Widget\")\n\nThemeable menu with mouse and keyboard interactions for navigation.\n\n# [Progressbar Widget](../progressbar \"Permalink to Progressbar Widget\")\n\nDisplay status of a determinate or indeterminate process.\n\n# [Selectmenu Widget](../selectmenu \"Permalink to Selectmenu Widget\")\n\nDuplicates and extends the functionality of a native HTML select element to overcome the limitations of the native control.\n\n# [Slider Widget](../slider \"Permalink to Slider Widget\")\n\nDrag a handle to select a numeric value.\n\n# [Spinner Widget](../spinner \"Permalink to Spinner Widget\")\n\nEnhance a text input for entering numeric values, with up/down buttons and arrow key handling.\n\n# [Tabs Widget](../tabs \"Permalink to Tabs Widget\")\n\nA single content area with multiple panels, each associated with a header in a list.\n\n# [Tooltip Widget](../tooltip \"Permalink to Tooltip Widget\")\n\nCustomizable, themeable tooltips, replacing native tooltips.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/category/widgets](https://api.jqueryui.com/category/widgets)"
- name: Checkboxradio
  id: checkboxradio
  summary: 'Description: Converts inputs of type radio and checkbox to themeable buttons'
  description: "# Checkboxradio Widget\n\n## Checkboxradio Widgetversion added: 1.12\n\n**Description:** Converts inputs of type radio and checkbox to themeable buttons.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[icon](#option-icon)\n\n[label](#option-label)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\nNative HTML input elements are impossible to style consistently. This widget allows working around that limitation by positining the associated label on top of the hidden input, and emulating the checkbox or radio element itself using an (optional) icon. The original input still receives focus and all events, the label merely provides a themeable button on top.\n\n### Theming\n\nThe checkboxradio widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If checkboxradio specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-checkboxradio`: The input of type radio or checkbox. Will be hidden, with its associated label positioned on top.\n  - `ui-checkboxradio-label`: The label associated with the input. If the input is checked, this will also get the `ui-checkboxradio-checked` class. If the input is of type radio, this will also get the `ui-checkboxradio-radio-label` class.\n  - `ui-checkboxradio-icon`: If the [`icon`](#option-icon) option is enabled, the generated icon has this class.\n  - `ui-checkboxradio-icon-space`: If the [`icon`](#option-icon) option is enabled, an extra element with this class as added between the text label and the icon.\n\n### Dependencies\n\n- [.labels()](labels)\n- [Form Reset Mixin](form-reset-mixin)\n- [Widget Factory](jquery.widget)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-checkboxradio-label\": \"ui-corner-all\",\n  \"ui-checkboxradio-icon\": \"ui-corner-all\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the checkboxradio with the `classes` option specified, changing the theming for the `ui-checkboxradio` class:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  classes: {\n    \"ui-checkboxradio\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-checkboxradio` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).checkboxradio( \"option\", \"classes.ui-checkboxradio\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"classes.ui-checkboxradio\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the checkboxradio if set to `true`.\n\n**Code examples:**\n\nInitialize the checkboxradio with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).checkboxradio( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"disabled\", true );\n```\n\n### icon\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nWhether to show the checkbox or radio icon, depending on the input's type.\n\n**Code examples:**\n\nInitialize the checkboxradio with the `icon` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  icon: false\n});\n```\n\nGet or set the `icon` option, after initialization:\n\n``` javascript\n// Getter\nvar icon = $( \".selector\" ).checkboxradio( \"option\", \"icon\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"icon\", false );\n```\n\n### label\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nHTML to show in the button. When not specified (`null`), the HTML content of the associated `<label>` element is used.\n\n**Code examples:**\n\nInitialize the checkboxradio with the `label` option specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  label: \"custom label\"\n});\n```\n\nGet or set the `label` option, after initialization:\n\n``` javascript\n// Getter\nvar label = $( \".selector\" ).checkboxradio( \"option\", \"label\" );\n \n// Setter\n$( \".selector\" ).checkboxradio( \"option\", \"label\", \"custom label\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the checkboxradio functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the checkboxradio.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the checkboxradio.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the checkboxradio's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the checkboxradio plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).checkboxradio( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current checkboxradio options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).checkboxradio( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the checkboxradio option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the checkboxradio.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefreshes the visual state of the widget. Useful for updating after the native element's checked or disabled state is changed programmatically.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).checkboxradio( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the checkboxradio.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).checkboxradio( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `checkboxradiocreate`\n\nTriggered when the checkboxradio is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the checkboxradio with the create callback specified:\n\n``` javascript\n$( \".selector\" ).checkboxradio({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the checkboxradiocreate event:\n\n``` javascript\n$( \".selector\" ).on( \"checkboxradiocreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI checkboxradio\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>checkboxradio demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<fieldset>\n  <legend>Select a Location: </legend>\n  <label for=\"radio-1\">New York</label>\n  <input type=\"radio\" name=\"radio-1\" id=\"radio-1\">\n  <label for=\"radio-2\">Paris</label>\n  <input type=\"radio\" name=\"radio-1\" id=\"radio-2\">\n  <label for=\"radio-3\">London</label>\n  <input type=\"radio\" name=\"radio-1\" id=\"radio-3\">\n</fieldset>\n \n<script>\n$( \"input[type='radio']\" ).checkboxradio();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/checkboxradio](https://api.jqueryui.com/checkboxradio)"
- name: Clip effect
  id: clip-effect
  summary: 'Description: The clip effect will hide or show an element by clipping the element vertically or horizontally'
  description: "# Clip Effect\n\n## Clip Effect\n\n**Description:** The clip effect will hide or show an element by clipping the element vertically or horizontally.\n\n- #### clip\n\n  - **direction** (default: `\"up\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The plane in which the clip effect will hide or show its element.\n\n    `vertical` clips the top and bottom edges, while `horizontal` clips the right and left edges.\n\n## Example:\n\nToggle a div using the clip effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>clip demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"clip\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/clip-effect](https://api.jqueryui.com/clip-effect)"
- name: Color animation
  id: color-animation
  summary: jQuery UI effects core adds the ability to animate color properties using rgb(), rgba(), hex values, or even color names such as "aqua". Simply include the jQuery UI effects core file and .animate() will gain support for colors
  description: "# Color Animation\n\njQuery UI effects core adds the ability to animate color properties using `rgb()`, `rgba()`, hex values, or even color names such as `\"aqua\"`. Simply include the jQuery UI effects core file and [`.animate()`](https://api.jquery.com/animate/) will gain support for colors.\n\nThe following properties are supported:\n\n- `backgroundColor`\n- `borderBottomColor`\n- `borderLeftColor`\n- `borderRightColor`\n- `borderTopColor`\n- `color`\n- `columnRuleColor`\n- `outlineColor`\n- `textDecorationColor`\n- `textEmphasisColor`\n\nSupport for color animation comes from the [jQuery Color plugin](https://github.com/jquery/jquery-color). The Color plugin provides several functions for working with colors. For full documentation, please see the [jQuery Color documentation](https://github.com/jquery/jquery-color#readme).\n\n## Class Animations\n\nWhile there are use cases for directly animating individual color properties, it is often a better approach to contain the styles in a class. jQuery UI provides a few methods which will animate the addition or removal of a CSS class, specifically [`.addClass()`](addclass), [`.removeClass()`](removeclass), [`.toggleClass()`](toggleclass), and [`.switchClass()`](switchclass). These methods will automatically determine which properties need to change and apply the appropriate animations.\n\n## Example\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Color Animation Demo</title>\n  <link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.13.0/themes/smoothness/jquery-ui.css\">\n  <style>\n  #elem {\n    color: #006;\n    background-color: #aaa;\n    font-size: 25px;\n    padding: 1em;\n    text-align: center;\n  }\n  </style>\n  <script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\n  <script src=\"https://code.jquery.com/ui/1.13.0/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"elem\">color animations</div>\n<button id=\"toggle\">animate colors</button>\n \n<script>\n$( \"#toggle\" ).click(function() {\n  $( \"#elem\" ).animate({\n    color: \"green\",\n    backgroundColor: \"rgb( 20, 20, 20 )\"\n  });\n});\n</script>\n \n</body>\n</html>\n \n```\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/color-animation](https://api.jqueryui.com/color-animation)"
- name: Controlgroup
  id: controlgroup
  summary: 'Description: Themeable set of input widgets'
  description: "# Controlgroup Widget\n\n## Controlgroup Widgetversion added: 1.12\n\n**Description:** Themeable set of input widgets.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[direction](#option-direction)\n\n[disabled](#option-disabled)\n\n[items](#option-items)\n\n[onlyVisible](#option-onlyVisible)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\nA controlgroup provides a visual grouping for [button](button) and other input widgets. Controlgroup works by selecting all appropriate descendants, based on the [items](#option-items) option, and applying their respective widgets, if loaded. If the widgets already exist, their `refresh()` method is called. You can enable and disable a controlgroup, which will enable and disable all contained widgets. Destroying a controlgroup also calls each widgets's `.destroy()` method.\n\n### Theming\n\nThe controlgroup widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If controlgroup specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-controlgroup`: The outer container of controlgroups. Depending on the [direction](#option-direction) option, this element will additionally have the `ui-controlgroup-horizontal` or `ui-controlgroup-vertical` classes.\n  - `ui-controlgroup-item`: Each item inside the group.\n\n### Dependencies\n\n- [Widget Factory](jquery.widget)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the controlgroup with the `classes` option specified, changing the theming for the `ui-controlgroup` class:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  classes: {\n    \"ui-controlgroup\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-controlgroup` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).controlgroup( \"option\", \"classes.ui-controlgroup\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"classes.ui-controlgroup\", \"highlight\" );\n```\n\n### direction\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"horizontal\"`\n\nBy default, controlgroup displays its controls in a horizontal layout. Use this option to use a vertical layout instead.\n\n**Code examples:**\n\nInitialize the controlgroup with the `direction` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  direction: \"vertical\"\n});\n```\n\nGet or set the `direction` option, after initialization:\n\n``` javascript\n// Getter\nvar direction = $( \".selector\" ).controlgroup( \"option\", \"direction\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"direction\", \"vertical\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the controlgroup if set to `true`.\n\n**Code examples:**\n\nInitialize the controlgroup with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).controlgroup( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"disabled\", true );\n```\n\n### items\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"button\": \"input[type=button], input[type=submit], input[type=reset], button, a\",\n  \"controlgroupLabel\": \".ui-controlgroup-label\",\n  \"checkboxradio\": \"input[type='checkbox'], input[type='radio']\",\n  \"selectmenu\": \"select\",\n  \"spinner\": \".ui-spinner-input\"\n}\n```\n\nWhich descendant elements to initialize as their respective widgets. Two elements have special behavior:\n\n- `controlgroupLabel`: Any elements matching the selector for this will be wrapped in a span with the `ui-controlgroup-label-contents` class.\n- `spinner`: This uses a class selector as the value. Requires either adding the class manually or initializing the spinner manually. Can be overridden to use `input[type=number]`, but that also requires custom CSS to remove the native number controls.\n\n### onlyVisible\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSets whether to exclude invisible children in the assignment of rounded corners. When set to false, all children of a controlgroup are taken into account when assigning rounded corners, including hidden children. Thus, if, for example, the controlgroup's first child is hidden and the default horizontal layout is applied, the controlgroup will, in effect, not have rounded corners on the left edge. Likewise, if the controlgroup has a vertical layout and its first child is hidden, the controlgroup will not have rounded corners on the top edge.\n\n**Code examples:**\n\nInitialize the controlgroup with the `onlyVisible` option specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  onlyVisible: false\n});\n```\n\nGet or set the `onlyVisible` option, after initialization:\n\n``` javascript\n// Getter\nvar onlyVisible = $( \".selector\" ).controlgroup( \"option\", \"onlyVisible\" );\n \n// Setter\n$( \".selector\" ).controlgroup( \"option\", \"onlyVisible\", false );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the controlgroup functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the controlgroup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the controlgroup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the controlgroup's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the controlgroup plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).controlgroup( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current controlgroup options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).controlgroup( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the controlgroup option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the controlgroup.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nProcess any widgets that were added or removed directly in the DOM. Results depend on the [`items`](#option-items) option.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).controlgroup( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the controlgroup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).controlgroup( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `controlgroupcreate`\n\nTriggered when the controlgroup is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the controlgroup with the create callback specified:\n\n``` javascript\n$( \".selector\" ).controlgroup({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the controlgroupcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"controlgroupcreate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI controlgroup\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>controlgroup demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<form>\n  <fieldset>\n    <legend>Favorite jQuery Project</legend>\n    <div id=\"radio\">\n      <input type=\"radio\" id=\"sizzle\" name=\"project\">\n      <label for=\"sizzle\">Sizzle</label>\n \n      <input type=\"radio\" id=\"qunit\" name=\"project\" checked=\"checked\">\n      <label for=\"qunit\">QUnit</label>\n \n      <input type=\"radio\" id=\"color\" name=\"project\">\n      <label for=\"color\">Color</label>\n    </div>\n  </fieldset>\n</form>\n \n<script>\n$( \"#radio\" ).controlgroup();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/controlgroup](https://api.jqueryui.com/controlgroup)"
- name: CSS framework
  id: theming/css-framework
  summary: The following is a list of the class names used by jQuery UI
  description: "# CSS Framework\n\nThe following is a list of the class names used by jQuery UI. The classes are designed to create a visual consistency across an application and allow components to be themeable by [jQuery UI ThemeRoller.](http://jqueryui.com/themeroller/) The class names are split between ui.core.css and ui.theme.css, depending on whether styles are fixed and structural, or themeable (colors, fonts, backgrounds, etc) respectively.\n\n### Layout Helpers\n\n- `.ui-helper-hidden`: Hides content visually and from assistive technologies, such as screen readers.\n- `.ui-helper-hidden-accessible`: Hides content visually, but leaves it available to assistive technologies.\n- `.ui-helper-reset`: A basic style reset for DOM nodes. Resets padding, margins, text-decoration, list-style, etc.\n- `.ui-helper-clearfix`: Applies float wrapping properties to parent elements.\n- `.ui-front`: Applies z-index to manage the stacking of multiple widgets on the screen. See the page about [stacking elements](stacking-elements) for more details.\n\n### Widget Containers\n\n- `.ui-widget`: Class to be applied to the outer container of all widgets. Applies font-family and font size to widgets.\n- `.ui-widget-header`: Class to be applied to header containers. Applies header container styles to an element and its child text, links, and icons.\n- `.ui-widget-content`: Class to be applied to content containers. Applies content container styles to an element and its child text, links, and icons. (can be applied to parent or sibling of header).\n\n### Interaction States\n\n- `.ui-state-default`: Class to be applied to clickable button-like elements. Applies \"clickable default\" container styles to an element and its child text, links, and icons.\n- `.ui-state-hover`: Class to be applied on mouseover to clickable button-like elements. Applies \"clickable hover\" container styles to an element and its child text, links, and icons.\n- `.ui-state-focus`: Class to be applied on keyboard focus to clickable button-like elements. Applies \"clickable focus\" container styles to an element and its child text, links, and icons.\n- `.ui-state-active`: Class to be applied on mousedown to clickable button-like elements. Applies \"clickable active\" container styles to an element and its child text, links, and icons.\n\n### Interaction Cues\n\n- `.ui-state-highlight`: Class to be applied to highlighted or selected elements. Applies \"highlight\" container styles to an element and its child text, links, and icons.\n- `.ui-state-error`: Class to be applied to error messaging container elements. Applies \"error\" container styles to an element and its child text, links, and icons.\n- `.ui-state-error-text`: An additional class that applies just the error text color without background. Can be used on form labels for instance. Also applies error icon color to child icons.\n- `.ui-state-disabled`: Applies a dimmed opacity to disabled UI elements. Meant to be added in addition to an already-styled element.\n- `.ui-priority-primary`: Class to be applied to a priority-1 button in situations where button hierarchy is needed.\n- `.ui-priority-secondary`: Class to be applied to a priority-2 button in situations where button hierarchy is needed.\n\n### Icons\n\n#### States and images\n\n- `.ui-icon`: Base class to be applied to an icon element. Sets dimensions to a 16px square block, hides inner text, and sets background image to the \"content\" state sprite image. Note: `ui-icon` class will be given a different sprite background image depending on its parent container. For example, a `ui-icon` element within a `ui-state-default` container will get colored according to the `ui-state-default`'s icon color.\n\n#### Icon types\n\nAfter declaring a `ui-icon` class, you can follow up with a second class describing the type of icon. Icon classes generally follow a syntax of .ui-icon-{icon type}-{icon sub description}-{direction}.\n\nFor example, a single triangle icon pointing to the right looks like this: `.ui-icon-triangle-1-e`. ThemeRoller provides the full set of CSS framework icons in its preview column. Hover over them to see the class name.\n\n### Misc Visuals\n\n#### Corner Radius helpers\n\n- `.ui-corner-tl`: Applies corner-radius to top left corner of element.\n- `.ui-corner-tr`: Applies corner-radius to top right corner of element.\n- `.ui-corner-bl`: Applies corner-radius to bottom left corner of element.\n- `.ui-corner-br`: Applies corner-radius to bottom right corner of element.\n- `.ui-corner-top`: Applies corner-radius to both top corners of element.\n- `.ui-corner-bottom`: Applies corner-radius to both bottom corners of element.\n- `.ui-corner-right`: Applies corner-radius to both right corners of element.\n- `.ui-corner-left`: Applies corner-radius to both left corners of element.\n- `.ui-corner-all`: Applies corner-radius to all 4 corners of element.\n\n#### Overlay & Shadow\n\n- `.ui-widget-overlay`: Applies 100% width & height dimensions to an overlay screen, along with background color/texture, and screen opacity.\n- `.ui-widget-shadow`: Class to be applied to overlay widget shadow elements. Sets `box-shadow` x & y offset, blur radius and color.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/theming/css-framework](https://api.jqueryui.com/theming/css-framework)"
- name: Datepicker
  id: datepicker
  summary: The jQuery UI Datepicker is a highly configurable plugin that adds datepicker functionality to your pages
  description: "# Datepicker Widget\n\n## Datepicker Widgetversion added: 1.0\n\n**Description:** Select a date from a popup or inline calendar\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[altField](#option-altField)\n\n[altFormat](#option-altFormat)\n\n[appendText](#option-appendText)\n\n[autoSize](#option-autoSize)\n\n[beforeShow](#option-beforeShow)\n\n[beforeShowDay](#option-beforeShowDay)\n\n[buttonImage](#option-buttonImage)\n\n[buttonImageOnly](#option-buttonImageOnly)\n\n[buttonText](#option-buttonText)\n\n[calculateWeek](#option-calculateWeek)\n\n[changeMonth](#option-changeMonth)\n\n[changeYear](#option-changeYear)\n\n[closeText](#option-closeText)\n\n[constrainInput](#option-constrainInput)\n\n[currentText](#option-currentText)\n\n[dateFormat](#option-dateFormat)\n\n[dayNames](#option-dayNames)\n\n[dayNamesMin](#option-dayNamesMin)\n\n[dayNamesShort](#option-dayNamesShort)\n\n[defaultDate](#option-defaultDate)\n\n[duration](#option-duration)\n\n[firstDay](#option-firstDay)\n\n[gotoCurrent](#option-gotoCurrent)\n\n[hideIfNoPrevNext](#option-hideIfNoPrevNext)\n\n[isRTL](#option-isRTL)\n\n[maxDate](#option-maxDate)\n\n[minDate](#option-minDate)\n\n[monthNames](#option-monthNames)\n\n[monthNamesShort](#option-monthNamesShort)\n\n[navigationAsDateFormat](#option-navigationAsDateFormat)\n\n[nextText](#option-nextText)\n\n[numberOfMonths](#option-numberOfMonths)\n\n[onChangeMonthYear](#option-onChangeMonthYear)\n\n[onClose](#option-onClose)\n\n[onSelect](#option-onSelect)\n\n[onUpdateDatepicker](#option-onUpdateDatepicker)\n\n[prevText](#option-prevText)\n\n[selectOtherMonths](#option-selectOtherMonths)\n\n[shortYearCutoff](#option-shortYearCutoff)\n\n[showAnim](#option-showAnim)\n\n[showButtonPanel](#option-showButtonPanel)\n\n[showCurrentAtPos](#option-showCurrentAtPos)\n\n[showMonthAfterYear](#option-showMonthAfterYear)\n\n[showOn](#option-showOn)\n\n[showOptions](#option-showOptions)\n\n[showOtherMonths](#option-showOtherMonths)\n\n[showWeek](#option-showWeek)\n\n[stepMonths](#option-stepMonths)\n\n[weekHeader](#option-weekHeader)\n\n[yearRange](#option-yearRange)\n\n[yearSuffix](#option-yearSuffix)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[dialog](#method-dialog)\n\n[getDate](#method-getDate)\n\n[hide](#method-hide)\n\n[isDisabled](#method-isDisabled)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[setDate](#method-setDate)\n\n[show](#method-show)\n\n[widget](#method-widget)\n\n### Events\n\nThe jQuery UI Datepicker is a highly configurable plugin that adds datepicker functionality to your pages. You can customize the date format and language, restrict the selectable date ranges and add in buttons and other navigation options easily.\n\nBy default, the datepicker calendar opens in a small overlay when the associated text field gains focus. For an inline calendar, simply attach the datepicker to a div or span.\n\n### Keyboard interaction\n\nWhile the datepicker is open, the following key commands are available:\n\n- `PAGE UP`: Move to the previous month.\n- `PAGE DOWN`: Move to the next month.\n- `CTRL` + `PAGE UP`: Move to the previous year.\n- `CTRL` + `PAGE DOWN`: Move to the next year.\n- `CTRL` + `HOME`: Open the datepicker if closed.\n- `CTRL`/`COMMAND` + `HOME`: Move to the current month.\n- `CTRL`/`COMMAND` + `LEFT`: Move to the previous day.\n- `CTRL`/`COMMAND` + `RIGHT`: Move to the next day.\n- `CTRL`/`COMMAND` + `UP`: Move to the previous week.\n- `CTRL`/`COMMAND` + `DOWN`: Move to the next week.\n- `ENTER`: Select the focused date.\n- `CTRL`/`COMMAND` + `END`: Close the datepicker and erase the date.\n- `ESCAPE`: Close the datepicker without selection.\n\n### Utility functions\n\n#### $.datepicker.setDefaults( options )\n\nChange the default options for all date pickers.\n\nUse the [`option()`](#method-option) method to change options for individual instances.\n\n**Code examples:**\n\nSet all date pickers to open on focus or a click on an icon.\n\n``` javascript\n$.datepicker.setDefaults({\n  showOn: \"both\",\n  buttonImageOnly: true,\n  buttonImage: \"calendar.gif\",\n  buttonText: \"Calendar\"\n});\n```\n\nSet all date pickers to have French text.\n\n``` javascript\n$.datepicker.setDefaults( $.datepicker.regional[ \"fr\" ] );\n```\n\n#### $.datepicker.formatDate( format, date, options )\n\nFormat a date into a string value with a specified format.\n\nThe format can be combinations of the following:\n\n- d - day of month (no leading zero)\n- dd - day of month (two digit)\n- o - day of the year (no leading zeros)\n- oo - day of the year (three digit)\n- D - day name short\n- DD - day name long\n- m - month of year (no leading zero)\n- mm - month of year (two digit)\n- M - month name short\n- MM - month name long\n- y - year (two digit)\n- yy - year (four digit)\n- @ - Unix timestamp (ms since 01/01/1970)\n- ! - Windows ticks (100ns since 01/01/0001)\n- '...' - literal text\n- '' - single quote\n- anything else - literal text\n\nThere are also a number of predefined standard date formats available from `$.datepicker`:\n\n- ATOM - 'yy-mm-dd' (Same as RFC 3339/ISO 8601)\n- COOKIE - 'D, dd M yy'\n- ISO_8601 - 'yy-mm-dd'\n- RFC_822 - 'D, d M y' (See RFC 822)\n- RFC_850 - 'DD, dd-M-y' (See RFC 850)\n- RFC_1036 - 'D, d M y' (See RFC 1036)\n- RFC_1123 - 'D, d M yy' (See RFC 1123)\n- RFC_2822 - 'D, d M yy' (See RFC 2822)\n- RSS - 'D, d M y' (Same as RFC 822)\n- TICKS - '!'\n- TIMESTAMP - '@'\n- W3C - 'yy-mm-dd' (Same as ISO 8601)\n\n**Code examples:**\n\nDisplay the date in ISO format. Produces \"2007-01-26\".\n\n``` javascript\n$.datepicker.formatDate( \"yy-mm-dd\", new Date( 2007, 1 - 1, 26 ) );\n```\n\nDisplay the date in expanded French format. Produces \"Samedi, Juillet 14, 2007\".\n\n``` javascript\n$.datepicker.formatDate( \"DD, MM d, yy\", new Date( 2007, 7 - 1, 14 ), {\n  dayNamesShort: $.datepicker.regional[ \"fr\" ].dayNamesShort,\n  dayNames: $.datepicker.regional[ \"fr\" ].dayNames,\n  monthNamesShort: $.datepicker.regional[ \"fr\" ].monthNamesShort,\n  monthNames: $.datepicker.regional[ \"fr\" ].monthNames\n});\n```\n\n#### $.datepicker.parseDate( format, value, options )\n\nExtract a date from a string value with a specified format.\n\nThe format can be combinations of the following:\n\n- d - day of month (no leading zero)\n- dd - day of month (two digit)\n- o - day of year (no leading zeros)\n- oo - day of year (three digit)\n- D - day name short\n- DD - day name long\n- m - month of year (no leading zero)\n- mm - month of year (two digit)\n- M - month name short\n- MM - month name long\n- y - year (two digit)\n- yy - year (four digit)\n- @ - Unix timestamp (ms since 01/01/1970)\n- ! - Windows ticks (100ns since 01/01/0001)\n- '...' - literal text\n- '' - single quote\n- anything else - literal text\n\nA number of exceptions may be thrown:\n\n- 'Invalid arguments' if either format or value is null\n- 'Missing number at position nn' if format indicated a numeric value that is not then found\n- 'Unknown name at position nn' if format indicated day or month name that is not then found\n- 'Unexpected literal at position nn' if format indicated a literal value that is not then found\n- 'Invalid date' if the date is invalid, such as '31/02/2007'\n\n**Code examples:**\n\nExtract a date in ISO format.\n\n``` javascript\n$.datepicker.parseDate( \"yy-mm-dd\", \"2007-01-26\" );\n```\n\nExtract a date in expanded French format.\n\n``` javascript\n$.datepicker.parseDate( \"DD, MM d, yy\", \"Samedi, Juillet 14, 2007\", {\n  shortYearCutoff: 20,\n  dayNamesShort: $.datepicker.regional[ \"fr\" ].dayNamesShort,\n  dayNames: $.datepicker.regional[ \"fr\" ].dayNames,\n  monthNamesShort: $.datepicker.regional[ \"fr\" ].monthNamesShort,\n  monthNames: $.datepicker.regional[ \"fr\" ].monthNames\n});\n```\n\n#### $.datepicker.iso8601Week( date )\n\nDetermine the week of the year for a given date: 1 to 53.\n\nThis function uses the ISO 8601 definition of a week: weeks start on a Monday and the first week of the year contains January 4. This means that up to three days from the previous year may be included in the of first week of the current year, and that up to three days from the current year may be included in the last week of the previous year.\n\nThis function is the default implementation for the [`calculateWeek`](#option-calculateWeek) option.\n\n**Code examples:**\n\nFind the week of the year for a date.\n\n``` javascript\n$.datepicker.iso8601Week( new Date( 2007, 1 - 1, 26 ) );\n```\n\n#### $.datepicker.noWeekends\n\nSet as beforeShowDay function to prevent selection of weekends.\n\nWe can provide the `noWeekends()` function into the [`beforeShowDay`](#option-beforeShowDay) option which will calculate all the weekdays and provide an array of `true`/`false` values indicating whether a date is selectable.\n\n**Code examples:**\n\nSet the DatePicker so no weekend is selectable\n\n``` javascript\n$( \"#datepicker\" ).datepicker({\n  beforeShowDay: $.datepicker.noWeekends\n});\n```\n\n### Localization\n\nDatepicker provides support for localizing its content to cater for different languages and date formats. Each localization is contained within its own file with the language code appended to the name, e.g., `jquery.ui.datepicker-fr.js` for French. The desired localization file should be included after the main datepicker code. Each localization file adds its options to the set of available localizations and automatically applies them as defaults for all instances. Localization files can be found at <https://github.com/jquery/jquery-ui/tree/master/ui/i18n>.\n\nThe `$.datepicker.regional` attribute holds an array of localizations, indexed by language code, with `\"\"` referring to the default (English). Each entry is an object with the following attributes: `closeText`, `prevText`, `nextText`, `currentText`, `monthNames`, `monthNamesShort`, `dayNames`, `dayNamesShort`, `dayNamesMin`, `weekHeader`, `dateFormat`, `firstDay`, `isRTL`, `showMonthAfterYear`, and `yearSuffix`.\n\nYou can restore the default localizations with:\n\n`$.datepicker.setDefaults( $.datepicker.regional[ \"\" ] );`\n\nAnd can then override an individual datepicker for a specific locale:\n\n`$( selector ).datepicker( $.datepicker.regional[ \"fr\" ] );`\n\n### Theming\n\nThe datepicker widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If datepicker specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-datepicker`: The outer container of the datepicker. If the datepicker is inline, this element will additionally have a `ui-datepicker-inline` class. If the [`isRTL`](#option-isRTL) option is set, this element will additionally have a class of `ui-datepicker-rtl`.\n  - `ui-datepicker-header`: The container for the datepicker's header.\n    - `ui-datepicker-prev`: The control used to select previous months.\n    - `ui-datepicker-next`: The control used to select subsequent months.\n    - `ui-datepicker-title`: The container for the datepicker's title containing the month and year.\n      - `ui-datepicker-month`: The textual display of the month or a `<select>` element if the [`changeMonth`](#option-changeMonth) option is set.\n      - `ui-datepicker-year`: The textual display of the year or a `<select>` element if the [`changeYear`](#option-changeYear) option is set.\n  - `ui-datepicker-calendar`: The table that contains the calendar itself.\n    - `ui-datepicker-week-end`: Cells containing weekend days.\n    - `ui-datepicker-other-month`: Cells containing days that occur in a month other than the currently selected month.\n    - `ui-datepicker-unselectable`: Cells containing days that are not selectable by the user.\n    - `ui-datepicker-current-day`: The cell containing the selected day.\n    - `ui-datepicker-today`: The cell containing today's date.\n  - `ui-datepicker-buttonpane`: The buttonpane that is used when the [`showButtonPanel`](#option-showButtonPanel) option is set.\n    - `ui-datepicker-current`: The button used to select today's date.\n\nIf the [`numberOfMonths`](#option-numberOfMonths) option is used to display multiple months at once, a number of additional classes are used:\n\n- `ui-datepicker-multi`: The outermost container of a multiple month datepicker. This element can additionally have a `ui-datepicker-multi-2`, `ui-datepicker-multi-3`, or `ui-datepicker-multi-4` class name depending on the number of months to display.\n  - `ui-datepicker-group`: Individual pickers within the group. This element will additionally have a `ui-datepicker-group-first`, `ui-datepicker-group-middle`, or `ui-datepicker-group-last` class name depending on its position within the group.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Effects Core](category/effects-core) (optional; for use with the [`showAnim`](#option-showAnim) option)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n- This widget manipulates its element's value programmatically, therefore a native `change` event may not be fired when the element's value changes.\n- Creating a datepicker on an `<input type=\"date\">` is not supported due to a UI conflict with the native picker.\n\n## Options\n\n### altField\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [jQuery](http://api.jquery.com/Types/#jQuery) or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `\"\"`\n\nAn input element that is to be updated with the selected date from the datepicker. Use the [`altFormat`](#option-altFormat) option to change the format of the date within this field. Leave as blank for no alternate field.\n\n**Code examples:**\n\nInitialize the datepicker with the `altField` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  altField: \"#actualDate\"\n});\n```\n\nGet or set the `altField` option, after initialization:\n\n``` javascript\n// Getter\nvar altField = $( \".selector\" ).datepicker( \"option\", \"altField\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"altField\", \"#actualDate\" );\n```\n\n### altFormat\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nThe [`dateFormat`](#option-dateFormat) to be used for the [`altField`](#option-altField) option. This allows one date format to be shown to the user for selection purposes, while a different format is actually sent behind the scenes. For a full list of the possible formats see the [`formatDate`](#utility-formatDate) function\n\n**Code examples:**\n\nInitialize the datepicker with the `altFormat` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  altFormat: \"yy-mm-dd\"\n});\n```\n\nGet or set the `altFormat` option, after initialization:\n\n``` javascript\n// Getter\nvar altFormat = $( \".selector\" ).datepicker( \"option\", \"altFormat\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"altFormat\", \"yy-mm-dd\" );\n```\n\n### appendText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nThe text to display after each date field, e.g., to show the required format.\n\n**Code examples:**\n\nInitialize the datepicker with the `appendText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  appendText: \"(yyyy-mm-dd)\"\n});\n```\n\nGet or set the `appendText` option, after initialization:\n\n``` javascript\n// Getter\nvar appendText = $( \".selector\" ).datepicker( \"option\", \"appendText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"appendText\", \"(yyyy-mm-dd)\" );\n```\n\n### autoSize\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nSet to `true` to automatically resize the input field to accommodate dates in the current [`dateFormat`](#option-dateFormat).\n\n**Code examples:**\n\nInitialize the datepicker with the `autoSize` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  autoSize: true\n});\n```\n\nGet or set the `autoSize` option, after initialization:\n\n``` javascript\n// Getter\nvar autoSize = $( \".selector\" ).datepicker( \"option\", \"autoSize\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"autoSize\", true );\n```\n\n### beforeShow\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [Element](http://api.jquery.com/Types/#Element) input, [Object](http://api.jquery.com/Types/#Object) inst )\n\n**Default:** `null`\n\nA function that takes an input field and current datepicker instance and returns an options object to update the datepicker with. It is called just before the datepicker is displayed.\n\n### beforeShowDay\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [Date](http://api.jquery.com/Types/#Date) date )\n\n**Default:** `null`\n\nA function that takes a date as a parameter and must return an array with:\n\n- `[0]`: `true`/`false` indicating whether or not this date is selectable\n- `[1]`: a CSS class name to add to the date's cell or `\"\"` for the default presentation\n- `[2]`: an optional popup tooltip for this date\n\nThe function is called for each day in the datepicker before it is displayed.\n\n### buttonImage\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nA URL of an image to use to display the datepicker when the [`showOn`](#option-showOn) option is set to `\"button\"` or `\"both\"`. If set, the [`buttonText`](#option-buttonText) option becomes the `alt` value and is not directly displayed.\n\n**Code examples:**\n\nInitialize the datepicker with the `buttonImage` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  buttonImage: \"/images/datepicker.gif\"\n});\n```\n\nGet or set the `buttonImage` option, after initialization:\n\n``` javascript\n// Getter\nvar buttonImage = $( \".selector\" ).datepicker( \"option\", \"buttonImage\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"buttonImage\", \"/images/datepicker.gif\" );\n```\n\n### buttonImageOnly\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the button image should be rendered by itself instead of inside a button element. This option is only relevant if the [`buttonImage`](#option-buttonImage) option has also been set.\n\n**Code examples:**\n\nInitialize the datepicker with the `buttonImageOnly` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  buttonImageOnly: true\n});\n```\n\nGet or set the `buttonImageOnly` option, after initialization:\n\n``` javascript\n// Getter\nvar buttonImageOnly = $( \".selector\" ).datepicker( \"option\", \"buttonImageOnly\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"buttonImageOnly\", true );\n```\n\n### buttonText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"...\"`\n\nThe text to display on the trigger button. Use in conjunction with the [`showOn`](#option-showOn) option set to `\"button\"` or `\"both\"`.\n\n**Code examples:**\n\nInitialize the datepicker with the `buttonText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  buttonText: \"Choose\"\n});\n```\n\nGet or set the `buttonText` option, after initialization:\n\n``` javascript\n// Getter\nvar buttonText = $( \".selector\" ).datepicker( \"option\", \"buttonText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"buttonText\", \"Choose\" );\n```\n\n### calculateWeek\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `jQuery.datepicker.iso8601Week`\n\nA function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.\n\n**Code examples:**\n\nInitialize the datepicker with the `calculateWeek` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  calculateWeek: myWeekCalc\n});\n```\n\nGet or set the `calculateWeek` option, after initialization:\n\n``` javascript\n// Getter\nvar calculateWeek = $( \".selector\" ).datepicker( \"option\", \"calculateWeek\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"calculateWeek\", myWeekCalc );\n```\n\n### changeMonth\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the month should be rendered as a dropdown instead of text.\n\n**Code examples:**\n\nInitialize the datepicker with the `changeMonth` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  changeMonth: true\n});\n```\n\nGet or set the `changeMonth` option, after initialization:\n\n``` javascript\n// Getter\nvar changeMonth = $( \".selector\" ).datepicker( \"option\", \"changeMonth\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"changeMonth\", true );\n```\n\n### changeYear\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the year should be rendered as a dropdown instead of text. Use the [`yearRange`](#option-yearRange) option to control which years are made available for selection.\n\n**Code examples:**\n\nInitialize the datepicker with the `changeYear` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  changeYear: true\n});\n```\n\nGet or set the `changeYear` option, after initialization:\n\n``` javascript\n// Getter\nvar changeYear = $( \".selector\" ).datepicker( \"option\", \"changeYear\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"changeYear\", true );\n```\n\n### closeText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Done\"`\n\nThe text to display for the close link. Use the [`showButtonPanel`](#option-showButtonPanel) option to display this button.\n\n**Code examples:**\n\nInitialize the datepicker with the `closeText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  closeText: \"Close\"\n});\n```\n\nGet or set the `closeText` option, after initialization:\n\n``` javascript\n// Getter\nvar closeText = $( \".selector\" ).datepicker( \"option\", \"closeText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"closeText\", \"Close\" );\n```\n\n### constrainInput\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nWhen `true`, entry in the input field is constrained to those characters allowed by the current [`dateFormat`](#option-dateFormat) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `constrainInput` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  constrainInput: false\n});\n```\n\nGet or set the `constrainInput` option, after initialization:\n\n``` javascript\n// Getter\nvar constrainInput = $( \".selector\" ).datepicker( \"option\", \"constrainInput\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"constrainInput\", false );\n```\n\n### currentText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Today\"`\n\nThe text to display for the current day link. Use the [`showButtonPanel`](#option-showButtonPanel) option to display this button.\n\n**Code examples:**\n\nInitialize the datepicker with the `currentText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  currentText: \"Now\"\n});\n```\n\nGet or set the `currentText` option, after initialization:\n\n``` javascript\n// Getter\nvar currentText = $( \".selector\" ).datepicker( \"option\", \"currentText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"currentText\", \"Now\" );\n```\n\n### dateFormat\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"mm/dd/yy\"`\n\nThe format for parsed and displayed dates. For a full list of the possible formats see the [`formatDate`](#utility-formatDate) function.\n\n**Code examples:**\n\nInitialize the datepicker with the `dateFormat` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  dateFormat: \"yy-mm-dd\"\n});\n```\n\nGet or set the `dateFormat` option, after initialization:\n\n``` javascript\n// Getter\nvar dateFormat = $( \".selector\" ).datepicker( \"option\", \"dateFormat\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"dateFormat\", \"yy-mm-dd\" );\n```\n\n### dayNames\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ]`\n\nThe list of long day names, starting from Sunday, for use as requested via the [`dateFormat`](#option-dateFormat) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `dayNames` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  dayNames: [ \"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\" ]\n});\n```\n\nGet or set the `dayNames` option, after initialization:\n\n``` javascript\n// Getter\nvar dayNames = $( \".selector\" ).datepicker( \"option\", \"dayNames\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"dayNames\", [ \"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\" ] );\n```\n\n### dayNamesMin\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[ \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" ]`\n\nThe list of minimised day names, starting from Sunday, for use as column headers within the datepicker.\n\n**Code examples:**\n\nInitialize the datepicker with the `dayNamesMin` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  dayNamesMin: [ \"Di\", \"Lu\", \"Ma\", \"Me\", \"Je\", \"Ve\", \"Sa\" ]\n});\n```\n\nGet or set the `dayNamesMin` option, after initialization:\n\n``` javascript\n// Getter\nvar dayNamesMin = $( \".selector\" ).datepicker( \"option\", \"dayNamesMin\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"dayNamesMin\", [ \"Di\", \"Lu\", \"Ma\", \"Me\", \"Je\", \"Ve\", \"Sa\" ] );\n```\n\n### dayNamesShort\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ]`\n\nThe list of abbreviated day names, starting from Sunday, for use as requested via the [`dateFormat`](#option-dateFormat) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `dayNamesShort` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  dayNamesShort: [ \"Dim\", \"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\" ]\n});\n```\n\nGet or set the `dayNamesShort` option, after initialization:\n\n``` javascript\n// Getter\nvar dayNamesShort = $( \".selector\" ).datepicker( \"option\", \"dayNamesShort\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"dayNamesShort\", [ \"Dim\", \"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\" ] );\n```\n\n### defaultDate\n\n**Type:** [Date](http://api.jquery.com/Types/#Date) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSet the date to highlight on first opening if the field is blank. Specify either an actual date via a Date object or as a string in the current [`dateFormat`](#option-dateFormat), or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.\n\n**Multiple types supported:**\n\n- **Date**: A date object containing the default date.\n- **Number**: A number of days from today. For example `2` represents two days from today and `-1` represents yesterday.\n- **String**: A string in the format defined by the [`dateFormat`](#option-dateFormat) option, or a relative date. Relative dates must contain value and period pairs; valid periods are `\"y\"` for years, `\"m\"` for months, `\"w\"` for weeks, and `\"d\"` for days. For example, `\"+1m +7d\"` represents one month and seven days from today.\n\n**Code examples:**\n\nInitialize the datepicker with the `defaultDate` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  defaultDate: +7\n});\n```\n\nGet or set the `defaultDate` option, after initialization:\n\n``` javascript\n// Getter\nvar defaultDate = $( \".selector\" ).datepicker( \"option\", \"defaultDate\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"defaultDate\", +7 );\n```\n\n### duration\n\n**Type:** or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"normal\"`\n\nControl the speed at which the datepicker appears, it may be a time in milliseconds or a string representing one of the three predefined speeds (\"slow\", \"normal\", \"fast\").\n\n**Code examples:**\n\nInitialize the datepicker with the `duration` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  duration: \"slow\"\n});\n```\n\nGet or set the `duration` option, after initialization:\n\n``` javascript\n// Getter\nvar duration = $( \".selector\" ).datepicker( \"option\", \"duration\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"duration\", \"slow\" );\n```\n\n### firstDay\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `0`\n\nSet the first day of the week: Sunday is `0`, Monday is `1`, etc.\n\n**Code examples:**\n\nInitialize the datepicker with the `firstDay` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  firstDay: 1\n});\n```\n\nGet or set the `firstDay` option, after initialization:\n\n``` javascript\n// Getter\nvar firstDay = $( \".selector\" ).datepicker( \"option\", \"firstDay\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"firstDay\", 1 );\n```\n\n### gotoCurrent\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhen `true`, the current day link moves to the currently selected date instead of today.\n\n**Code examples:**\n\nInitialize the datepicker with the `gotoCurrent` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  gotoCurrent: true\n});\n```\n\nGet or set the `gotoCurrent` option, after initialization:\n\n``` javascript\n// Getter\nvar gotoCurrent = $( \".selector\" ).datepicker( \"option\", \"gotoCurrent\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"gotoCurrent\", true );\n```\n\n### hideIfNoPrevNext\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nNormally the previous and next links are disabled when not applicable (see the [`minDate`](#option-minDate) and [`maxDate`](#option-maxDate) options). You can hide them altogether by setting this attribute to `true`.\n\n**Code examples:**\n\nInitialize the datepicker with the `hideIfNoPrevNext` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  hideIfNoPrevNext: true\n});\n```\n\nGet or set the `hideIfNoPrevNext` option, after initialization:\n\n``` javascript\n// Getter\nvar hideIfNoPrevNext = $( \".selector\" ).datepicker( \"option\", \"hideIfNoPrevNext\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"hideIfNoPrevNext\", true );\n```\n\n### isRTL\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the current language is drawn from right to left.\n\n**Code examples:**\n\nInitialize the datepicker with the `isRTL` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  isRTL: true\n});\n```\n\nGet or set the `isRTL` option, after initialization:\n\n``` javascript\n// Getter\nvar isRTL = $( \".selector\" ).datepicker( \"option\", \"isRTL\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"isRTL\", true );\n```\n\n### maxDate\n\n**Type:** [Date](http://api.jquery.com/Types/#Date) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThe maximum selectable date. When set to `null`, there is no maximum.\n\n**Multiple types supported:**\n\n- **Date**: A date object containing the maximum date.\n- **Number**: A number of days from today. For example `2` represents two days from today and `-1` represents yesterday.\n- **String**: A string in the format defined by the [`dateFormat`](#option-dateFormat) option, or a relative date. Relative dates must contain value and period pairs; valid periods are `\"y\"` for years, `\"m\"` for months, `\"w\"` for weeks, and `\"d\"` for days. For example, `\"+1m +7d\"` represents one month and seven days from today.\n\n**Code examples:**\n\nInitialize the datepicker with the `maxDate` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  maxDate: \"+1m +1w\"\n});\n```\n\nGet or set the `maxDate` option, after initialization:\n\n``` javascript\n// Getter\nvar maxDate = $( \".selector\" ).datepicker( \"option\", \"maxDate\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"maxDate\", \"+1m +1w\" );\n```\n\n### minDate\n\n**Type:** [Date](http://api.jquery.com/Types/#Date) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThe minimum selectable date. When set to `null`, there is no minimum.\n\n**Multiple types supported:**\n\n- **Date**: A date object containing the minimum date.\n- **Number**: A number of days from today. For example `2` represents two days from today and `-1` represents yesterday.\n- **String**: A string in the format defined by the [`dateFormat`](#option-dateFormat) option, or a relative date. Relative dates must contain value and period pairs; valid periods are `\"y\"` for years, `\"m\"` for months, `\"w\"` for weeks, and `\"d\"` for days. For example, `\"+1m +7d\"` represents one month and seven days from today.\n\n**Code examples:**\n\nInitialize the datepicker with the `minDate` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  minDate: new Date(2007, 1 - 1, 1)\n});\n```\n\nGet or set the `minDate` option, after initialization:\n\n``` javascript\n// Getter\nvar minDate = $( \".selector\" ).datepicker( \"option\", \"minDate\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"minDate\", new Date(2007, 1 - 1, 1) );\n```\n\n### monthNames\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]`\n\nThe list of full month names, for use as requested via the [`dateFormat`](#option-dateFormat) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `monthNames` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  monthNames: [ \"Januar\", \"Februar\", \"Marts\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"December\" ]\n});\n```\n\nGet or set the `monthNames` option, after initialization:\n\n``` javascript\n// Getter\nvar monthNames = $( \".selector\" ).datepicker( \"option\", \"monthNames\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"monthNames\", [ \"Januar\", \"Februar\", \"Marts\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"December\" ] );\n```\n\n### monthNamesShort\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]`\n\nThe list of abbreviated month names, as used in the month header on each datepicker and as requested via the [`dateFormat`](#option-dateFormat) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `monthNamesShort` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Maj\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dec\" ]\n});\n```\n\nGet or set the `monthNamesShort` option, after initialization:\n\n``` javascript\n// Getter\nvar monthNamesShort = $( \".selector\" ).datepicker( \"option\", \"monthNamesShort\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"monthNamesShort\", [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Maj\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dec\" ] );\n```\n\n### navigationAsDateFormat\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the [`currentText`](#option-currentText), [`prevText`](#option-prevText) and [`nextText`](#option-nextText) options should be parsed as dates by the [`formatDate`](#utility-formatDate) function, allowing them to display the target month names for example.\n\n**Code examples:**\n\nInitialize the datepicker with the `navigationAsDateFormat` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  navigationAsDateFormat: true\n});\n```\n\nGet or set the `navigationAsDateFormat` option, after initialization:\n\n``` javascript\n// Getter\nvar navigationAsDateFormat = $( \".selector\" ).datepicker( \"option\", \"navigationAsDateFormat\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"navigationAsDateFormat\", true );\n```\n\n### nextText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Next\"`\n\nThe text to display for the next month link. With the standard ThemeRoller styling, this value is replaced by an icon.\n\n**Code examples:**\n\nInitialize the datepicker with the `nextText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  nextText: \"Later\"\n});\n```\n\nGet or set the `nextText` option, after initialization:\n\n``` javascript\n// Getter\nvar nextText = $( \".selector\" ).datepicker( \"option\", \"nextText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"nextText\", \"Later\" );\n```\n\n### numberOfMonths\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `1`\n\nThe number of months to show at once.\n\n**Multiple types supported:**\n\n- **Number**: The number of months to display in a single row.\n- **Array**: An array defining the number of rows and columns to display.\n\n**Code examples:**\n\nInitialize the datepicker with the `numberOfMonths` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  numberOfMonths: [ 2, 3 ]\n});\n```\n\nGet or set the `numberOfMonths` option, after initialization:\n\n``` javascript\n// Getter\nvar numberOfMonths = $( \".selector\" ).datepicker( \"option\", \"numberOfMonths\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"numberOfMonths\", [ 2, 3 ] );\n```\n\n### onChangeMonthYear\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [Integer](http://api.jquery.com/Types/#Integer) year, [Integer](http://api.jquery.com/Types/#Integer) month, [Object](http://api.jquery.com/Types/#Object) inst )\n\n**Default:** `null`\n\nCalled when the datepicker moves to a new month and/or year. The function receives the selected year, month (1-12), and the datepicker instance as parameters. `this` refers to the associated input field.\n\n### onClose\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [String](http://api.jquery.com/Types/#String) dateText, [Object](http://api.jquery.com/Types/#Object) inst )\n\n**Default:** `null`\n\nCalled when the datepicker is closed, whether or not a date is selected. The function receives the selected date as text (`\"\"` if none) and the datepicker instance as parameters. `this` refers to the associated input field.\n\n### onSelect\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [String](http://api.jquery.com/Types/#String) dateText, [Object](http://api.jquery.com/Types/#Object) inst )\n\n**Default:** `null`\n\nCalled when the datepicker is selected. The function receives the selected date as text and the datepicker instance as parameters. `this` refers to the associated input field.\n\n### onUpdateDatepicker\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)( [Object](http://api.jquery.com/Types/#Object) inst )\n\n**Default:** `null`\n\nCalled when the datepicker widget's DOM is updated. The function receives the datepicker instance as the only parameter. `this` refers to the associated input field. (version added: 1.13)\n\n### prevText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Prev\"`\n\nThe text to display for the previous month link. With the standard ThemeRoller styling, this value is replaced by an icon.\n\n**Code examples:**\n\nInitialize the datepicker with the `prevText` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  prevText: \"Earlier\"\n});\n```\n\nGet or set the `prevText` option, after initialization:\n\n``` javascript\n// Getter\nvar prevText = $( \".selector\" ).datepicker( \"option\", \"prevText\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"prevText\", \"Earlier\" );\n```\n\n### selectOtherMonths\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether days in other months shown before or after the current month are selectable. This only applies if the [`showOtherMonths`](#option-showOtherMonths) option is set to `true`.\n\n**Code examples:**\n\nInitialize the datepicker with the `selectOtherMonths` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  selectOtherMonths: true\n});\n```\n\nGet or set the `selectOtherMonths` option, after initialization:\n\n``` javascript\n// Getter\nvar selectOtherMonths = $( \".selector\" ).datepicker( \"option\", \"selectOtherMonths\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"selectOtherMonths\", true );\n```\n\n### shortYearCutoff\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"+10\"`\n\nThe cutoff year for determining the century for a date (used in conjunction with [`dateFormat`](#option-dateFormat) 'y'). Any dates entered with a year value less than or equal to the cutoff year are considered to be in the current century, while those greater than it are deemed to be in the previous century.\n\n**Multiple types supported:**\n\n- **Number**: A value between `0` and `99` indicating the cutoff year.\n- **String**: A relative number of years from the current year, e.g., `\"+3\"` or `\"-5\"`.\n\n**Code examples:**\n\nInitialize the datepicker with the `shortYearCutoff` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  shortYearCutoff: 50\n});\n```\n\nGet or set the `shortYearCutoff` option, after initialization:\n\n``` javascript\n// Getter\nvar shortYearCutoff = $( \".selector\" ).datepicker( \"option\", \"shortYearCutoff\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"shortYearCutoff\", 50 );\n```\n\n### showAnim\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"show\"`\n\nThe name of the animation used to show and hide the datepicker. Use `\"show\"` (the default), `\"slideDown\"`, `\"fadeIn\"`, any of the [jQuery UI effects](category/effects). Set to an empty string to disable animation.\n\n**Code examples:**\n\nInitialize the datepicker with the `showAnim` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showAnim: \"fold\"\n});\n```\n\nGet or set the `showAnim` option, after initialization:\n\n``` javascript\n// Getter\nvar showAnim = $( \".selector\" ).datepicker( \"option\", \"showAnim\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showAnim\", \"fold\" );\n```\n\n### showButtonPanel\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether to display a button pane underneath the calendar. The button pane contains two buttons, a Today button that links to the current day, and a Done button that closes the datepicker. The buttons' text can be customized using the [`currentText`](#option-currentText) and [`closeText`](#option-closeText) options respectively.\n\n**Code examples:**\n\nInitialize the datepicker with the `showButtonPanel` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showButtonPanel: true\n});\n```\n\nGet or set the `showButtonPanel` option, after initialization:\n\n``` javascript\n// Getter\nvar showButtonPanel = $( \".selector\" ).datepicker( \"option\", \"showButtonPanel\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showButtonPanel\", true );\n```\n\n### showCurrentAtPos\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nWhen displaying multiple months via the [`numberOfMonths`](#option-numberOfMonths) option, the `showCurrentAtPos` option defines which position to display the current month in.\n\n**Code examples:**\n\nInitialize the datepicker with the `showCurrentAtPos` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showCurrentAtPos: 3\n});\n```\n\nGet or set the `showCurrentAtPos` option, after initialization:\n\n``` javascript\n// Getter\nvar showCurrentAtPos = $( \".selector\" ).datepicker( \"option\", \"showCurrentAtPos\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showCurrentAtPos\", 3 );\n```\n\n### showMonthAfterYear\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether to show the month after the year in the header.\n\n**Code examples:**\n\nInitialize the datepicker with the `showMonthAfterYear` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showMonthAfterYear: true\n});\n```\n\nGet or set the `showMonthAfterYear` option, after initialization:\n\n``` javascript\n// Getter\nvar showMonthAfterYear = $( \".selector\" ).datepicker( \"option\", \"showMonthAfterYear\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showMonthAfterYear\", true );\n```\n\n### showOn\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"focus\"`\n\nWhen the datepicker should appear. The datepicker can appear when the field receives focus (`\"focus\"`), when a button is clicked (`\"button\"`), or when either event occurs (`\"both\"`).\n\n**Code examples:**\n\nInitialize the datepicker with the `showOn` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showOn: \"both\"\n});\n```\n\nGet or set the `showOn` option, after initialization:\n\n``` javascript\n// Getter\nvar showOn = $( \".selector\" ).datepicker( \"option\", \"showOn\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showOn\", \"both\" );\n```\n\n### showOptions\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nIf using one of the jQuery UI effects for the [`showAnim`](#option-showAnim) option, you can provide additional properties for that animation using this option.\n\n**Code examples:**\n\nInitialize the datepicker with the `showOptions` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showOptions: { direction: \"up\" }\n});\n```\n\nGet or set the `showOptions` option, after initialization:\n\n``` javascript\n// Getter\nvar showOptions = $( \".selector\" ).datepicker( \"option\", \"showOptions\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showOptions\", { direction: \"up\" } );\n```\n\n### showOtherMonths\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the [`selectOtherMonths`](#option-selectOtherMonths) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `showOtherMonths` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showOtherMonths: true\n});\n```\n\nGet or set the `showOtherMonths` option, after initialization:\n\n``` javascript\n// Getter\nvar showOtherMonths = $( \".selector\" ).datepicker( \"option\", \"showOtherMonths\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showOtherMonths\", true );\n```\n\n### showWeek\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhen `true`, a column is added to show the week of the year. The [`calculateWeek`](#option-calculateWeek) option determines how the week of the year is calculated. You may also want to change the [`firstDay`](#option-firstDay) option.\n\n**Code examples:**\n\nInitialize the datepicker with the `showWeek` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  showWeek: true\n});\n```\n\nGet or set the `showWeek` option, after initialization:\n\n``` javascript\n// Getter\nvar showWeek = $( \".selector\" ).datepicker( \"option\", \"showWeek\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"showWeek\", true );\n```\n\n### stepMonths\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nSet how many months to move when clicking the previous/next links.\n\n**Code examples:**\n\nInitialize the datepicker with the `stepMonths` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  stepMonths: 3\n});\n```\n\nGet or set the `stepMonths` option, after initialization:\n\n``` javascript\n// Getter\nvar stepMonths = $( \".selector\" ).datepicker( \"option\", \"stepMonths\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"stepMonths\", 3 );\n```\n\n### weekHeader\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"Wk\"`\n\nThe text to display for the week of the year column heading. Use the [`showWeek`](#option-showWeek) option to display this column.\n\n**Code examples:**\n\nInitialize the datepicker with the `weekHeader` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  weekHeader: \"W\"\n});\n```\n\nGet or set the `weekHeader` option, after initialization:\n\n``` javascript\n// Getter\nvar weekHeader = $( \".selector\" ).datepicker( \"option\", \"weekHeader\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"weekHeader\", \"W\" );\n```\n\n### yearRange\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"c-10:c+10\"`\n\nThe range of years displayed in the year drop-down: either relative to today's year (`\"-nn:+nn\"`), relative to the currently selected year (`\"c-nn:c+nn\"`), absolute (`\"nnnn:nnnn\"`), or combinations of these formats (`\"nnnn:-nn\"`). Note that this option only affects what appears in the drop-down, to restrict which dates may be selected use the [`minDate`](#option-minDate) and/or [`maxDate`](#option-maxDate) options.\n\n**Code examples:**\n\nInitialize the datepicker with the `yearRange` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  yearRange: \"2002:2012\"\n});\n```\n\nGet or set the `yearRange` option, after initialization:\n\n``` javascript\n// Getter\nvar yearRange = $( \".selector\" ).datepicker( \"option\", \"yearRange\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"yearRange\", \"2002:2012\" );\n```\n\n### yearSuffix\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nAdditional text to display after the year in the month headers.\n\n**Code examples:**\n\nInitialize the datepicker with the `yearSuffix` option specified:\n\n``` javascript\n$( \".selector\" ).datepicker({\n  yearSuffix: \"CE\"\n});\n```\n\nGet or set the `yearSuffix` option, after initialization:\n\n``` javascript\n// Getter\nvar yearSuffix = $( \".selector\" ).datepicker( \"option\", \"yearSuffix\" );\n \n// Setter\n$( \".selector\" ).datepicker( \"option\", \"yearSuffix\", \"CE\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the datepicker functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"destroy\" );\n```\n\n### dialog( date \\[, onSelect \\] \\[, options \\] \\[, pos \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nOpens the datepicker in a dialog box.\n\n- **date**\n\n  Type: [String](http://api.jquery.com/Types/#String) or [Date](http://api.jquery.com/Types/#Date)\n\n  The initial date.\n\n- **onSelect**\n\n  Type: [Function](http://api.jquery.com/Types/#Function)()\n\n  A callback function when a date is selected. The function receives the date text and date picker instance as parameters.\n\n- **options**\n\n  Type: [Options](http://api.jquery.com/Types/#Options)\n\n  The new options for the date picker.\n\n- **pos**\n\n  Type: [Number\\[2\\] or MouseEvent](http://api.jquery.com/Types/#Number%5B2%5D%20or%20MouseEvent)\n\n  The position of the top/left of the dialog as `[x, y]` or a `MouseEvent` that contains the coordinates. If not specified the dialog is centered on the screen.\n\n**Code examples:**\n\nInvoke the dialog method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"dialog\", \"10/12/2012\" );\n```\n\n### getDate()Returns: [Date](http://api.jquery.com/Types/#Date)\n\nReturns the current date for the datepicker or `null` if no date has been selected.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the getDate method:\n\n``` javascript\nvar currentDate = $( \".selector\" ).datepicker( \"getDate\" );\n```\n\n### hide()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nClose a previously opened date picker.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the hide method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"hide\" );\n```\n\n### isDisabled()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nDetermine whether a date picker has been disabled.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the isDisabled method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).datepicker( \"isDisabled\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).datepicker( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current datepicker options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).datepicker( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the datepicker option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the datepicker.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRedraw the date picker, after having made some external modifications.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"refresh\" );\n```\n\n### setDate( date )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the date for the datepicker. The new date may be a `Date` object or a string in the current [date format](#option-dateFormat) (e.g., `\"01/26/2009\"`), a number of days from today (e.g., `+7`) or a string of values and periods (`\"y\"` for years, `\"m\"` for months, `\"w\"` for weeks, `\"d\"` for days, e.g., `\"+1m +7d\"`), or `null` to clear the selected date.\n\n- **date**\n\n  Type: [String](http://api.jquery.com/Types/#String) or [Date](http://api.jquery.com/Types/#Date)\n\n  The new date.\n\n**Code examples:**\n\nInvoke the setDate method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"setDate\", \"10/12/2012\" );\n```\n\n### show()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nOpen the date picker. If the datepicker is attached to an input, the input must be visible for the datepicker to be shown.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the show method:\n\n``` javascript\n$( \".selector\" ).datepicker( \"show\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the datepicker.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).datepicker( \"widget\" );\n```\n\n## Example:\n\nA simple jQuery UI Datepicker.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>datepicker demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"datepicker\"></div>\n \n<script>\n$( \"#datepicker\" ).datepicker();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/datepicker](https://api.jqueryui.com/datepicker)"
- name: Dialog
  id: dialog
  summary: 'Description: Open content in an interactive overlay'
  description: "# Dialog Widget\n\n## Dialog Widgetversion added: 1.0\n\n**Description:** Open content in an interactive overlay.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[appendTo](#option-appendTo)\n\n[autoOpen](#option-autoOpen)\n\n[buttons](#option-buttons)\n\n[classes](#option-classes)\n\n[closeOnEscape](#option-closeOnEscape)\n\n[closeText](#option-closeText)\n\n[dialogClass](#option-dialogClass)\n\n[draggable](#option-draggable)\n\n[height](#option-height)\n\n[hide](#option-hide)\n\n[maxHeight](#option-maxHeight)\n\n[maxWidth](#option-maxWidth)\n\n[minHeight](#option-minHeight)\n\n[minWidth](#option-minWidth)\n\n[modal](#option-modal)\n\n[position](#option-position)\n\n[resizable](#option-resizable)\n\n[show](#option-show)\n\n[title](#option-title)\n\n[width](#option-width)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[instance](#method-instance)\n\n[isOpen](#method-isOpen)\n\n[moveToTop](#method-moveToTop)\n\n[open](#method-open)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_allowInteraction](#method-_allowInteraction)\n\n### Events\n\n[beforeClose](#event-beforeClose)\n\n[close](#event-close)\n\n[create](#event-create)\n\n[drag](#event-drag)\n\n[dragStart](#event-dragStart)\n\n[dragStop](#event-dragStop)\n\n[focus](#event-focus)\n\n[open](#event-open)\n\n[resize](#event-resize)\n\n[resizeStart](#event-resizeStart)\n\n[resizeStop](#event-resizeStop)\n\nA dialog is a floating window that contains a title bar and a content area. The dialog window can be moved, resized and closed with the 'x' icon by default.\n\nIf the content length exceeds the maximum height, a scrollbar will automatically appear.\n\nA bottom button bar and semi-transparent modal overlay layer are common options that can be added.\n\n### Focus\n\nUpon opening a dialog, focus is automatically moved to the first item that matches the following:\n\n1.  The first element within the dialog with the `autofocus` attribute\n2.  The first [`:tabbable`](tabbable-selector) element within the dialog's content\n3.  The first [`:tabbable`](tabbable-selector) element within the dialog's buttonpane\n4.  The dialog's close button\n5.  The dialog itself\n\nWhile open, the dialog widget ensures that keyboard navigation using the 'tab' key causes the focus to cycle amongst the focusable elements in the dialog, not elements outside of it. Modal dialogs additionally prevent mouse users from clicking on elements outside of the dialog.\n\nUpon closing a dialog, focus is automatically returned to the element that had focus when the dialog was opened.\n\n### Hiding the close button\n\nIn some cases, you may want to hide the close button, for instance, if you have a close button in the button pane. The best way to accomplish this is via CSS. As an example, you can define a simple rule, such as:\n\n``` javascript\n.no-close .ui-dialog-titlebar-close {\n  display: none;\n}\n```\n\nThen, you can simply add the `no-close` class to any dialog in order to hide its close button:\n\n``` javascript\n$( \"#dialog\" ).dialog({\n  dialogClass: \"no-close\",\n  buttons: [\n    {\n      text: \"OK\",\n      click: function() {\n        $( this ).dialog( \"close\" );\n      }\n    }\n  ]\n});\n```\n\n### Theming\n\nThe dialog widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If dialog specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-dialog`: The outer container of the dialog. If the [`draggable` option](#option-draggable) is set, the `ui-dialog-dragging` class is added during a drag. If the [`resizable` option](#option-resizable) is set, the `ui-dialog-resizing` class is added during a resize. If the [`buttons` option](#option-buttons) is set, the `ui-dialog-buttons` class is added.\n  - `ui-dialog-titlebar`: The title bar containing the dialog's title and close button.\n    - `ui-dialog-title`: The container around the textual title of the dialog.\n    - `ui-dialog-titlebar-close`: The dialog's close button.\n  - `ui-dialog-content`: The container around the dialog's content. This is also the element the widget was instantiated with.\n  - `ui-dialog-buttonpane`: The pane that contains the dialog's buttons. This will only be present if the [`buttons`](#option-buttons) option is set.\n    - `ui-dialog-buttonset`: The container around the buttons themselves.\n\nAdditionally, when the [`modal`](#option-modal) option is set, an element with a `ui-widget-overlay` class name is appended to the `<body>`.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Position](position)\n- [Button](button)\n- [Draggable](draggable) (optional; for use with the [`draggable`](#option-draggable) option)\n- [Resizable](resizable) (optional; for use with the [`resizable`](#option-resizable) option)\n- [Effects Core](category/effects-core) (optional; for use with the [`show`](#option-show) and [`hide`](#option-hide) options)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### appendTo\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"body\"`\n\nWhich element the dialog (and overlay, if [modal](#option-modal)) should be appended to.\n\n**Note:** The `appendTo` option should not be changed while the dialog is open.\n\n(version added: 1.10.0)\n\n**Code examples:**\n\nInitialize the dialog with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  appendTo: \"#someElem\"\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).dialog( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"appendTo\", \"#someElem\" );\n```\n\n### autoOpen\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `true`, the dialog will automatically open upon initialization. If `false`, the dialog will stay hidden until the [`open()`](#method-open) method is called.\n\n**Code examples:**\n\nInitialize the dialog with the `autoOpen` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  autoOpen: false\n});\n```\n\nGet or set the `autoOpen` option, after initialization:\n\n``` javascript\n// Getter\nvar autoOpen = $( \".selector\" ).dialog( \"option\", \"autoOpen\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"autoOpen\", false );\n```\n\n### buttons\n\n**Type:** [Object](http://api.jquery.com/Types/#Object) or [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `[]`\n\nSpecifies which buttons should be displayed on the dialog. The context of the callback is the dialog element; if you need access to the button, it is available as the target of the event object.\n\n**Multiple types supported:**\n\n- **Object**: The keys are the button labels and the values are the callbacks for when the associated button is clicked.\n- **Array**: Each element of the array must be an object defining the attributes, properties, and event handlers to set on the button. In addition, a key of `icon` can be used to control [button's `icon` option](button#option-icon), and a key of `showText` can be used to control [button's `text` option](button#option-text).\n\n**Code examples:**\n\nInitialize the dialog with the `buttons` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  buttons: [\n    {\n      text: \"Ok\",\n      icon: \"ui-icon-heart\",\n      click: function() {\n        $( this ).dialog( \"close\" );\n      }\n \n      // Uncommenting the following line would hide the text,\n      // resulting in the label being used as a tooltip\n      //showText: false\n    }\n  ]\n});\n```\n\nGet or set the `buttons` option, after initialization:\n\n``` javascript\n// Getter\nvar buttons = $( \".selector\" ).dialog( \"option\", \"buttons\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"buttons\", \n  [\n    {\n      text: \"Ok\",\n      icon: \"ui-icon-heart\",\n      click: function() {\n        $( this ).dialog( \"close\" );\n      }\n \n      // Uncommenting the following line would hide the text,\n      // resulting in the label being used as a tooltip\n      //showText: false\n    }\n  ]\n);\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-dialog\": \"ui-corner-all\",\n  \"ui-dialog-titlebar\": \"ui-corner-all\",\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the dialog with the `classes` option specified, changing the theming for the `ui-dialog` class:\n\n``` javascript\n$( \".selector\" ).dialog({\n  classes: {\n    \"ui-dialog\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-dialog` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).dialog( \"option\", \"classes.ui-dialog\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"classes.ui-dialog\", \"highlight\" );\n```\n\n### closeOnEscape\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nSpecifies whether the dialog should close when it has focus and the user presses the escape (ESC) key.\n\n**Code examples:**\n\nInitialize the dialog with the `closeOnEscape` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  closeOnEscape: false\n});\n```\n\nGet or set the `closeOnEscape` option, after initialization:\n\n``` javascript\n// Getter\nvar closeOnEscape = $( \".selector\" ).dialog( \"option\", \"closeOnEscape\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"closeOnEscape\", false );\n```\n\n### closeText\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"close\"`\n\nSpecifies the text for the close button. Note that the close text is visibly hidden when using a standard theme.\n\n**Code examples:**\n\nInitialize the dialog with the `closeText` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  closeText: \"hide\"\n});\n```\n\nGet or set the `closeText` option, after initialization:\n\n``` javascript\n// Getter\nvar closeText = $( \".selector\" ).dialog( \"option\", \"closeText\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"closeText\", \"hide\" );\n```\n\n### dialogClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"\"`\n\nThe specified class name(s) will be added to the dialog, for additional theming.\n\nThe `dialogClass` option has been deprecated in favor of the [`classes` option](#option-classes), using the `ui-dialog` property.\n\n(version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the dialog with the `dialogClass` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  dialogClass: \"alert\"\n});\n```\n\nGet or set the `dialogClass` option, after initialization:\n\n``` javascript\n// Getter\nvar dialogClass = $( \".selector\" ).dialog( \"option\", \"dialogClass\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"dialogClass\", \"alert\" );\n```\n\n### draggable\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `true`, the dialog will be draggable by the title bar. Requires the [jQuery UI Draggable widget](draggable) to be included.\n\n**Code examples:**\n\nInitialize the dialog with the `draggable` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  draggable: false\n});\n```\n\nGet or set the `draggable` option, after initialization:\n\n``` javascript\n// Getter\nvar draggable = $( \".selector\" ).dialog( \"option\", \"draggable\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"draggable\", false );\n```\n\n### height\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"auto\"`\n\nThe height of the dialog.\n\n**Multiple types supported:**\n\n- **Number**: The height in pixels.\n- **String**: The only supported string value is `\"auto\"` which will allow the dialog height to adjust based on its content.\n\n**Code examples:**\n\nInitialize the dialog with the `height` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  height: 400\n});\n```\n\nGet or set the `height` option, after initialization:\n\n``` javascript\n// Getter\nvar height = $( \".selector\" ).dialog( \"option\", \"height\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"height\", 400 );\n```\n\n### hide\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the hiding of the dialog.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the dialog will be hidden immediately. When set to `true`, the dialog will fade out with the default duration and the default easing.\n- **Number**: The dialog will fade out with the specified duration and the default easing.\n- **String**: The dialog will be hidden using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideUp\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeOut\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the dialog with the `hide` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  hide: { effect: \"explode\", duration: 1000 }\n});\n```\n\nGet or set the `hide` option, after initialization:\n\n``` javascript\n// Getter\nvar hide = $( \".selector\" ).dialog( \"option\", \"hide\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"hide\", { effect: \"explode\", duration: 1000 } );\n```\n\n### maxHeight\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nThe maximum height to which the dialog can be resized, in pixels.\n\n**Code examples:**\n\nInitialize the dialog with the `maxHeight` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  maxHeight: 600\n});\n```\n\nGet or set the `maxHeight` option, after initialization:\n\n``` javascript\n// Getter\nvar maxHeight = $( \".selector\" ).dialog( \"option\", \"maxHeight\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"maxHeight\", 600 );\n```\n\n### maxWidth\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nThe maximum width to which the dialog can be resized, in pixels.\n\n**Code examples:**\n\nInitialize the dialog with the `maxWidth` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  maxWidth: 600\n});\n```\n\nGet or set the `maxWidth` option, after initialization:\n\n``` javascript\n// Getter\nvar maxWidth = $( \".selector\" ).dialog( \"option\", \"maxWidth\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"maxWidth\", 600 );\n```\n\n### minHeight\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `150`\n\nThe minimum height to which the dialog can be resized, in pixels.\n\n**Code examples:**\n\nInitialize the dialog with the `minHeight` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  minHeight: 200\n});\n```\n\nGet or set the `minHeight` option, after initialization:\n\n``` javascript\n// Getter\nvar minHeight = $( \".selector\" ).dialog( \"option\", \"minHeight\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"minHeight\", 200 );\n```\n\n### minWidth\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `150`\n\nThe minimum width to which the dialog can be resized, in pixels.\n\n**Code examples:**\n\nInitialize the dialog with the `minWidth` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  minWidth: 200\n});\n```\n\nGet or set the `minWidth` option, after initialization:\n\n``` javascript\n// Getter\nvar minWidth = $( \".selector\" ).dialog( \"option\", \"minWidth\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"minWidth\", 200 );\n```\n\n### modal\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf set to `true`, the dialog will have modal behavior; other items on the page will be disabled, i.e., cannot be interacted with. Modal dialogs create an overlay below the dialog but above other page elements.\n\n**Code examples:**\n\nInitialize the dialog with the `modal` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  modal: true\n});\n```\n\nGet or set the `modal` option, after initialization:\n\n``` javascript\n// Getter\nvar modal = $( \".selector\" ).dialog( \"option\", \"modal\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"modal\", true );\n```\n\n### position\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ my: \"center\", at: \"center\", of: window }`\n\nSpecifies where the dialog should be displayed when opened. The dialog will handle collisions such that as much of the dialog is visible as possible.\n\nThe `of` property defaults to the window, but you can specify another element to position against. You can refer to the [jQuery UI Position](position) utility for more details about the available properties.\n\n**Code examples:**\n\nInitialize the dialog with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  position: { my: \"left top\", at: \"left bottom\", of: button }\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).dialog( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"position\", { my: \"left top\", at: \"left bottom\", of: button } );\n```\n\n### resizable\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `true`, the dialog will be resizable. Requires the [jQuery UI Resizable widget](resizable) to be included.\n\n**Code examples:**\n\nInitialize the dialog with the `resizable` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  resizable: false\n});\n```\n\nGet or set the `resizable` option, after initialization:\n\n``` javascript\n// Getter\nvar resizable = $( \".selector\" ).dialog( \"option\", \"resizable\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"resizable\", false );\n```\n\n### show\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the showing of the dialog.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the dialog will be shown immediately. When set to `true`, the dialog will fade in with the default duration and the default easing.\n- **Number**: The dialog will fade in with the specified duration and the default easing.\n- **String**: The dialog will be shown using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideDown\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeIn\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the dialog with the `show` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  show: { effect: \"blind\", duration: 800 }\n});\n```\n\nGet or set the `show` option, after initialization:\n\n``` javascript\n// Getter\nvar show = $( \".selector\" ).dialog( \"option\", \"show\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"show\", { effect: \"blind\", duration: 800 } );\n```\n\n### title\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSpecifies the title of the dialog. If the value is `null`, the `title` attribute on the dialog source element will be used.\n\n**Code examples:**\n\nInitialize the dialog with the `title` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  title: \"Dialog Title\"\n});\n```\n\nGet or set the `title` option, after initialization:\n\n``` javascript\n// Getter\nvar title = $( \".selector\" ).dialog( \"option\", \"title\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"title\", \"Dialog Title\" );\n```\n\n### width\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `300`\n\nThe width of the dialog, in pixels.\n\n**Code examples:**\n\nInitialize the dialog with the `width` option specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  width: 500\n});\n```\n\nGet or set the `width` option, after initialization:\n\n``` javascript\n// Getter\nvar width = $( \".selector\" ).dialog( \"option\", \"width\" );\n \n// Setter\n$( \".selector\" ).dialog( \"option\", \"width\", 500 );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the dialog.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).dialog( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the dialog functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).dialog( \"destroy\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the dialog's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the dialog plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).dialog( \"instance\" );\n```\n\n### isOpen()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nWhether the dialog is currently open.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the isOpen method:\n\n``` javascript\nvar isOpen = $( \".selector\" ).dialog( \"isOpen\" );\n```\n\n### moveToTop()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMoves the dialog to the top of the dialog stack.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the moveToTop method:\n\n``` javascript\n$( \".selector\" ).dialog( \"moveToTop\" );\n```\n\n### open()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nOpens the dialog.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).dialog( \"open\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).dialog( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current dialog options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).dialog( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the dialog option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).dialog( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the dialog.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).dialog( \"option\", { disabled: true } );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the generated wrapper.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).dialog( \"widget\" );\n```\n\n## Extension Points\n\nThe dialog widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_allowInteraction( event )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nModal dialogs do not allow users to interact with elements behind the dialog. This can be problematic for elements that are not children of the dialog, but are absolutely positioned to appear as though they are. The `_allowInteraction()` method determines whether the user should be allowed to interact with a given target element; therefore, it can be used to whitelist elements that are not children of the dialog but you want users to be able to use.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n**Code examples:**\n\nAllow the Select2 plugin to be used within modal dialogs. The [`_super()`](jquery.widget#method-_super) call ensures elements within the dialog can still be interacted with.\n\n``` javascript\n_allowInteraction: function( event ) {\n  return !!$( event.target ).is( \".select2-input\" ) || this._super( event );\n}\n```\n\n## Events\n\n### beforeClose( event, ui )Type: `dialogbeforeclose`\n\nTriggered when a dialog is about to close. If canceled, the dialog will not close.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the beforeClose callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  beforeClose: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogbeforeclose event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogbeforeclose\", function( event, ui ) {} );\n```\n\n### close( event, ui )Type: `dialogclose`\n\nTriggered when the dialog is closed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the close callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  close: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogclose event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogclose\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `dialogcreate`\n\nTriggered when the dialog is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the create callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogcreate\", function( event, ui ) {} );\n```\n\n### drag( event, ui )Type: `dialogdrag`\n\nTriggered while the dialog is being dragged.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current offset position of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the drag callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  drag: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogdrag event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogdrag\", function( event, ui ) {} );\n```\n\n### dragStart( event, ui )Type: `dialogdragstart`\n\nTriggered when the user starts dragging the dialog.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current offset position of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the dragStart callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  dragStart: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogdragstart event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogdragstart\", function( event, ui ) {} );\n```\n\n### dragStop( event, ui )Type: `dialogdragstop`\n\nTriggered after the dialog has been dragged.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current offset position of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the dragStop callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  dragStop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogdragstop event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogdragstop\", function( event, ui ) {} );\n```\n\n### focus( event, ui )Type: `dialogfocus`\n\nTriggered when the dialog gains focus.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the focus callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  focus: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogfocus event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogfocus\", function( event, ui ) {} );\n```\n\n### open( event, ui )Type: `dialogopen`\n\nTriggered when the dialog is opened.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the dialog with the open callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  open: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogopen event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogopen\", function( event, ui ) {} );\n```\n\n### resize( event, ui )Type: `dialogresize`\n\nTriggered while the dialog is being resized.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The CSS position of the dialog prior to being resized.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size of the dialog prior to being resized.\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the resize callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  resize: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogresize event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogresize\", function( event, ui ) {} );\n```\n\n### resizeStart( event, ui )Type: `dialogresizestart`\n\nTriggered when the user starts resizing the dialog.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The CSS position of the dialog prior to being resized.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size of the dialog prior to being resized.\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the resizeStart callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  resizeStart: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogresizestart event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogresizestart\", function( event, ui ) {} );\n```\n\n### resizeStop( event, ui )Type: `dialogresizestop`\n\nTriggered after the dialog has been resized.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The CSS position of the dialog prior to being resized.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current CSS position of the dialog.\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size of the dialog prior to being resized.\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size of the dialog.\n\n**Code examples:**\n\nInitialize the dialog with the resizeStop callback specified:\n\n``` javascript\n$( \".selector\" ).dialog({\n  resizeStop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dialogresizestop event:\n\n``` javascript\n$( \".selector\" ).on( \"dialogresizestop\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Dialog\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>dialog demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<button id=\"opener\">open the dialog</button>\n<div id=\"dialog\" title=\"Dialog Title\">I'm a dialog</div>\n \n<script>\n$( \"#dialog\" ).dialog({ autoOpen: false });\n$( \"#opener\" ).click(function() {\n  $( \"#dialog\" ).dialog( \"open\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/dialog](https://api.jqueryui.com/dialog)"
- name: Draggable
  id: draggable
  summary: 'Description: Allow elements to be moved using the mouse'
  description: "# Draggable Widget\n\n## Draggable Widgetversion added: 1.0\n\n**Description:** Allow elements to be moved using the mouse.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[addClasses](#option-addClasses)\n\n[appendTo](#option-appendTo)\n\n[axis](#option-axis)\n\n[cancel](#option-cancel)\n\n[classes](#option-classes)\n\n[connectToSortable](#option-connectToSortable)\n\n[containment](#option-containment)\n\n[cursor](#option-cursor)\n\n[cursorAt](#option-cursorAt)\n\n[delay](#option-delay)\n\n[disabled](#option-disabled)\n\n[distance](#option-distance)\n\n[grid](#option-grid)\n\n[handle](#option-handle)\n\n[helper](#option-helper)\n\n[iframeFix](#option-iframeFix)\n\n[opacity](#option-opacity)\n\n[refreshPositions](#option-refreshPositions)\n\n[revert](#option-revert)\n\n[revertDuration](#option-revertDuration)\n\n[scope](#option-scope)\n\n[scroll](#option-scroll)\n\n[scrollSensitivity](#option-scrollSensitivity)\n\n[scrollSpeed](#option-scrollSpeed)\n\n[snap](#option-snap)\n\n[snapMode](#option-snapMode)\n\n[snapTolerance](#option-snapTolerance)\n\n[stack](#option-stack)\n\n[zIndex](#option-zIndex)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\n[drag](#event-drag)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\nMake the selected elements draggable by mouse. If you want not just drag, but drag & drop, see the [jQuery UI Droppable plugin](droppable), which provides a drop target for draggables.\n\n### Theming\n\nThe draggable widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If draggable specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-draggable`: The draggable element. When the draggable is disabled, the `ui-draggable-disabled` class is added. While dragging, the `ui-draggable-dragging` class is added.\n- `ui-draggable-handle`: The handle of the draggable, specified using the [`handle` option](#option-handle). By default, the draggable element itself is also the handle.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n## Options\n\n### addClasses\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `false`, will prevent the `ui-draggable` class from being added. This may be desired as a performance optimization when calling `.draggable()` on hundreds of elements.\n\n**Code examples:**\n\nInitialize the draggable with the `addClasses` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  addClasses: false\n});\n```\n\nGet or set the `addClasses` option, after initialization:\n\n``` javascript\n// Getter\nvar addClasses = $( \".selector\" ).draggable( \"option\", \"addClasses\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"addClasses\", false );\n```\n\n### appendTo\n\n**Type:** [jQuery](http://api.jquery.com/Types/#jQuery) or [Element](http://api.jquery.com/Types/#Element) or [Selector](http://api.jquery.com/Types/#Selector) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"parent\"`\n\nWhich element the draggable helper should be appended to while dragging.\n\n**Note:** The `appendTo` option only works when the [`helper`](#option-helper) option is set to not use the original element.\n\n**Multiple types supported:**\n\n- **jQuery**: A jQuery object containing the element to append the helper to.\n- **Element**: The element to append the helper to.\n- **Selector**: A selector specifying which element to append the helper to.\n- **String**: The string `\"parent\"` will cause the helper to be a sibling of the draggable.\n\n**Code examples:**\n\nInitialize the draggable with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  appendTo: \"body\"\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).draggable( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"appendTo\", \"body\" );\n```\n\n### axis\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nConstrains dragging to either the horizontal (x) or vertical (y) axis. Possible values: `\"x\"`, `\"y\"`.\n\n**Code examples:**\n\nInitialize the draggable with the `axis` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  axis: \"x\"\n});\n```\n\nGet or set the `axis` option, after initialization:\n\n``` javascript\n// Getter\nvar axis = $( \".selector\" ).draggable( \"option\", \"axis\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"axis\", \"x\" );\n```\n\n### cancel\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"input,textarea,button,select,option\"`\n\nPrevents dragging from starting on specified elements.\n\n**Code examples:**\n\nInitialize the draggable with the `cancel` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  cancel: \".title\"\n});\n```\n\nGet or set the `cancel` option, after initialization:\n\n``` javascript\n// Getter\nvar cancel = $( \".selector\" ).draggable( \"option\", \"cancel\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"cancel\", \".title\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the draggable with the `classes` option specified, changing the theming for the `ui-draggable` class:\n\n``` javascript\n$( \".selector\" ).draggable({\n  classes: {\n    \"ui-draggable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-draggable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).draggable( \"option\", \"classes.ui-draggable\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"classes.ui-draggable\", \"highlight\" );\n```\n\n### connectToSortable\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `false`\n\nAllows the draggable to be dropped onto the specified sortables. If this option is used, a draggable can be dropped onto a sortable list and then becomes part of it. Note: The [`helper`](#option-helper) option must be set to `\"clone\"` in order to work flawlessly. Requires the [jQuery UI Sortable plugin](sortable) to be included.\n\n**Code examples:**\n\nInitialize the draggable with the `connectToSortable` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  connectToSortable: \"#my-sortable\"\n});\n```\n\nGet or set the `connectToSortable` option, after initialization:\n\n``` javascript\n// Getter\nvar connectToSortable = $( \".selector\" ).draggable( \"option\", \"connectToSortable\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"connectToSortable\", \"#my-sortable\" );\n```\n\n### containment\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element) or [String](http://api.jquery.com/Types/#String) or [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `false`\n\nConstrains dragging to within the bounds of the specified element or region.\n\n**Multiple types supported:**\n\n- **Selector**: The draggable element will be contained to the bounding box of the first element found by the selector. If no element is found, no containment will be set.\n- **Element**: The draggable element will be contained to the bounding box of this element.\n- **String**: Possible values: `\"parent\"`, `\"document\"`, `\"window\"`.\n- **Array**: An array defining a bounding box in the form `[ x1, y1, x2, y2 ]`.\n\n**Code examples:**\n\nInitialize the draggable with the `containment` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  containment: \"parent\"\n});\n```\n\nGet or set the `containment` option, after initialization:\n\n``` javascript\n// Getter\nvar containment = $( \".selector\" ).draggable( \"option\", \"containment\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"containment\", \"parent\" );\n```\n\n### cursor\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"auto\"`\n\nThe CSS cursor during the drag operation.\n\n**Code examples:**\n\nInitialize the draggable with the `cursor` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  cursor: \"crosshair\"\n});\n```\n\nGet or set the `cursor` option, after initialization:\n\n``` javascript\n// Getter\nvar cursor = $( \".selector\" ).draggable( \"option\", \"cursor\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"cursor\", \"crosshair\" );\n```\n\n### cursorAt\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `false`\n\nSets the offset of the dragging helper relative to the mouse cursor. Coordinates can be given as a hash using a combination of one or two keys: `{ top, left, right, bottom }`.\n\n**Code examples:**\n\nInitialize the draggable with the `cursorAt` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  cursorAt: { left: 5 }\n});\n```\n\nGet or set the `cursorAt` option, after initialization:\n\n``` javascript\n// Getter\nvar cursorAt = $( \".selector\" ).draggable( \"option\", \"cursorAt\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"cursorAt\", { left: 5 } );\n```\n\n### delay\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nTime in milliseconds after mousedown until dragging should start. This option can be used to prevent unwanted drags when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the draggable with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  delay: 300\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).draggable( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"delay\", 300 );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the draggable if set to `true`.\n\n**Code examples:**\n\nInitialize the draggable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).draggable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"disabled\", true );\n```\n\n### distance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nDistance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the draggable with the `distance` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  distance: 10\n});\n```\n\nGet or set the `distance` option, after initialization:\n\n``` javascript\n// Getter\nvar distance = $( \".selector\" ).draggable( \"option\", \"distance\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"distance\", 10 );\n```\n\n### grid\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `false`\n\nSnaps the dragging helper to a grid, every x and y pixels. The array must be of the form `[ x, y ]`.\n\n**Code examples:**\n\nInitialize the draggable with the `grid` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  grid: [ 50, 20 ]\n});\n```\n\nGet or set the `grid` option, after initialization:\n\n``` javascript\n// Getter\nvar grid = $( \".selector\" ).draggable( \"option\", \"grid\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"grid\", [ 50, 20 ] );\n```\n\n### handle\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `false`\n\nIf specified, restricts dragging from starting unless the mousedown occurs on the specified element(s). Only elements that descend from the draggable element are permitted.\n\n**Code examples:**\n\nInitialize the draggable with the `handle` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  handle: \"h2\"\n});\n```\n\nGet or set the `handle` option, after initialization:\n\n``` javascript\n// Getter\nvar handle = $( \".selector\" ).draggable( \"option\", \"handle\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"handle\", \"h2\" );\n```\n\n### helper\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `\"original\"`\n\nAllows for a helper element to be used for dragging display.\n\n**Multiple types supported:**\n\n- **String**: If set to `\"clone\"`, then the element will be cloned and the clone will be dragged.\n- **Function**: A function that will return a DOMElement to use while dragging.\n\n**Code examples:**\n\nInitialize the draggable with the `helper` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  helper: \"clone\"\n});\n```\n\nGet or set the `helper` option, after initialization:\n\n``` javascript\n// Getter\nvar helper = $( \".selector\" ).draggable( \"option\", \"helper\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"helper\", \"clone\" );\n```\n\n### iframeFix\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `false`\n\nPrevent iframes from capturing the mousemove events during a drag. Useful in combination with the [`cursorAt`](#option-cursorAt) option, or in any case where the mouse cursor may not be over the helper.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, transparent overlays will be placed over all iframes on the page.\n- **Selector**: Any iframes matching the selector will be covered by transparent overlays.\n\n**Code examples:**\n\nInitialize the draggable with the `iframeFix` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  iframeFix: true\n});\n```\n\nGet or set the `iframeFix` option, after initialization:\n\n``` javascript\n// Getter\nvar iframeFix = $( \".selector\" ).draggable( \"option\", \"iframeFix\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"iframeFix\", true );\n```\n\n### opacity\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nOpacity for the helper while being dragged.\n\n**Code examples:**\n\nInitialize the draggable with the `opacity` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  opacity: 0.35\n});\n```\n\nGet or set the `opacity` option, after initialization:\n\n``` javascript\n// Getter\nvar opacity = $( \".selector\" ).draggable( \"option\", \"opacity\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"opacity\", 0.35 );\n```\n\n### refreshPositions\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf set to `true`, all droppable positions are calculated on every mousemove. *Caution: This solves issues on highly dynamic pages, but dramatically decreases performance.*\n\n**Code examples:**\n\nInitialize the draggable with the `refreshPositions` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  refreshPositions: true\n});\n```\n\nGet or set the `refreshPositions` option, after initialization:\n\n``` javascript\n// Getter\nvar refreshPositions = $( \".selector\" ).draggable( \"option\", \"refreshPositions\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"refreshPositions\", true );\n```\n\n### revert\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String) or [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `false`\n\nWhether the element should revert to its start position when dragging stops.\n\n**Multiple types supported:**\n\n- **Boolean**: If set to `true` the element will always revert.\n- **String**: If set to `\"invalid\"`, revert will only occur if the draggable has not been dropped on a droppable. For `\"valid\"`, it's the other way around.\n- **Function**: A function to determine whether the element should revert to its start position. The function must return `true` to revert the element.\n\n**Code examples:**\n\nInitialize the draggable with the `revert` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  revert: true\n});\n```\n\nGet or set the `revert` option, after initialization:\n\n``` javascript\n// Getter\nvar revert = $( \".selector\" ).draggable( \"option\", \"revert\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"revert\", true );\n```\n\n### revertDuration\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `500`\n\nThe duration of the revert animation, in milliseconds. Ignored if the [`revert`](#option-revert) option is `false`.\n\n**Code examples:**\n\nInitialize the draggable with the `revertDuration` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  revertDuration: 200\n});\n```\n\nGet or set the `revertDuration` option, after initialization:\n\n``` javascript\n// Getter\nvar revertDuration = $( \".selector\" ).draggable( \"option\", \"revertDuration\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"revertDuration\", 200 );\n```\n\n### scope\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"default\"`\n\nUsed to group sets of draggable and droppable items, in addition to droppable's [`accept`](droppable#option-accept) option. A draggable with the same `scope` value as a droppable will be accepted by the droppable.\n\n**Code examples:**\n\nInitialize the draggable with the `scope` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  scope: \"tasks\"\n});\n```\n\nGet or set the `scope` option, after initialization:\n\n``` javascript\n// Getter\nvar scope = $( \".selector\" ).draggable( \"option\", \"scope\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"scope\", \"tasks\" );\n```\n\n### scroll\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `true`, container auto-scrolls while dragging.\n\n**Code examples:**\n\nInitialize the draggable with the `scroll` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  scroll: false\n});\n```\n\nGet or set the `scroll` option, after initialization:\n\n``` javascript\n// Getter\nvar scroll = $( \".selector\" ).draggable( \"option\", \"scroll\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"scroll\", false );\n```\n\n### scrollSensitivity\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `20`\n\nDistance in pixels from the edge of the viewport after which the viewport should scroll. Distance is relative to pointer, not the draggable. Ignored if the [`scroll`](#option-scroll) option is `false`.\n\n**Code examples:**\n\nInitialize the draggable with the `scrollSensitivity` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  scrollSensitivity: 100\n});\n```\n\nGet or set the `scrollSensitivity` option, after initialization:\n\n``` javascript\n// Getter\nvar scrollSensitivity = $( \".selector\" ).draggable( \"option\", \"scrollSensitivity\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"scrollSensitivity\", 100 );\n```\n\n### scrollSpeed\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `20`\n\nThe speed at which the window should scroll once the mouse pointer gets within the [`scrollSensitivity`](#option-scrollSensitivity) distance. Ignored if the [`scroll`](#option-scroll) option is `false`.\n\n**Code examples:**\n\nInitialize the draggable with the `scrollSpeed` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  scrollSpeed: 100\n});\n```\n\nGet or set the `scrollSpeed` option, after initialization:\n\n``` javascript\n// Getter\nvar scrollSpeed = $( \".selector\" ).draggable( \"option\", \"scrollSpeed\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"scrollSpeed\", 100 );\n```\n\n### snap\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `false`\n\nWhether the element should snap to other elements.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, the element will snap to all other draggable elements.\n- **Selector**: A selector specifying which elements to snap to.\n\n**Code examples:**\n\nInitialize the draggable with the `snap` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  snap: true\n});\n```\n\nGet or set the `snap` option, after initialization:\n\n``` javascript\n// Getter\nvar snap = $( \".selector\" ).draggable( \"option\", \"snap\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"snap\", true );\n```\n\n### snapMode\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"both\"`\n\nDetermines which edges of snap elements the draggable will snap to. Ignored if the [`snap`](#option-snap) option is `false`. Possible values: `\"inner\"`, `\"outer\"`, `\"both\"`.\n\n**Code examples:**\n\nInitialize the draggable with the `snapMode` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  snapMode: \"inner\"\n});\n```\n\nGet or set the `snapMode` option, after initialization:\n\n``` javascript\n// Getter\nvar snapMode = $( \".selector\" ).draggable( \"option\", \"snapMode\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"snapMode\", \"inner\" );\n```\n\n### snapTolerance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `20`\n\nThe distance in pixels from the snap element edges at which snapping should occur. Ignored if the [`snap`](#option-snap) option is `false`.\n\n**Code examples:**\n\nInitialize the draggable with the `snapTolerance` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  snapTolerance: 30\n});\n```\n\nGet or set the `snapTolerance` option, after initialization:\n\n``` javascript\n// Getter\nvar snapTolerance = $( \".selector\" ).draggable( \"option\", \"snapTolerance\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"snapTolerance\", 30 );\n```\n\n### stack\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `false`\n\nControls the z-index of the set of elements that match the selector, always brings the currently dragged item to the front. Very useful in things like window managers.\n\n**Code examples:**\n\nInitialize the draggable with the `stack` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  stack: \".products\"\n});\n```\n\nGet or set the `stack` option, after initialization:\n\n``` javascript\n// Getter\nvar stack = $( \".selector\" ).draggable( \"option\", \"stack\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"stack\", \".products\" );\n```\n\n### zIndex\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nZ-index for the helper while being dragged.\n\n**Code examples:**\n\nInitialize the draggable with the `zIndex` option specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  zIndex: 100\n});\n```\n\nGet or set the `zIndex` option, after initialization:\n\n``` javascript\n// Getter\nvar zIndex = $( \".selector\" ).draggable( \"option\", \"zIndex\" );\n \n// Setter\n$( \".selector\" ).draggable( \"option\", \"zIndex\", 100 );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the draggable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).draggable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the draggable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).draggable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the draggable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).draggable( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the draggable's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the draggable plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).draggable( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).draggable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current draggable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).draggable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the draggable option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).draggable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the draggable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).draggable( \"option\", { disabled: true } );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the draggable element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).draggable( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `dragcreate`\n\nTriggered when the draggable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the draggable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dragcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"dragcreate\", function( event, ui ) {} );\n```\n\n### drag( event, ui )Type: `drag`\n\nTriggered while the mouse is moved during the dragging, immediately before the current move happens.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the helper as `{ top, left }` object. The values may be changed to modify where the element will be positioned. This is useful for custom containment, snapping, etc.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the draggable with the drag callback specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  drag: function( event, ui ) {}\n});\n```\n\nBind an event listener to the drag event:\n\n``` javascript\n$( \".selector\" ).on( \"drag\", function( event, ui ) {} );\n```\n\nConstrain movement via `ui.position`:\n\n``` javascript\n$( \".selector\" ).draggable({\n  drag: function( event, ui ) {\n \n    // Keep the left edge of the element\n    // at least 100 pixels from the container\n    ui.position.left = Math.min( 100, ui.position.left );\n  }\n});\n```\n\n### start( event, ui )Type: `dragstart`\n\nTriggered when dragging starts.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the draggable with the start callback specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dragstart event:\n\n``` javascript\n$( \".selector\" ).on( \"dragstart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `dragstop`\n\nTriggered when dragging stops.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the draggable with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).draggable({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dragstop event:\n\n``` javascript\n$( \".selector\" ).on( \"dragstop\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Draggable\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>draggable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #draggable {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"draggable\">Drag me</div>\n \n<script>\n$( \"#draggable\" ).draggable();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/draggable](https://api.jqueryui.com/draggable)"
- name: Drop effect
  id: drop-effect
  summary: 'Description: The drop effect hides or shows an element fading in/out and sliding in a direction'
  description: "# Drop Effect\n\n## Drop Effect\n\n**Description:** The drop effect hides or shows an element fading in/out and sliding in a direction.\n\n- #### drop\n\n  - **direction** (default: `\"left\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The direction the element will fall to hide the element, or the direction from which the element will be revealed.\n\n    Possible Values: `up`, `down`, `left`, `right`.\n\n## Example:\n\nToggle a div using the drop effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>drop demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"drop\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/drop-effect](https://api.jqueryui.com/drop-effect)"
- name: Droppable
  id: droppable
  summary: 'Description: Create targets for draggable elements'
  description: "# Droppable Widget\n\n## Droppable Widgetversion added: 1.0\n\n**Description:** Create targets for draggable elements.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[accept](#option-accept)\n\n[activeClass](#option-activeClass)\n\n[addClasses](#option-addClasses)\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[greedy](#option-greedy)\n\n[hoverClass](#option-hoverClass)\n\n[scope](#option-scope)\n\n[tolerance](#option-tolerance)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n### Events\n\n[activate](#event-activate)\n\n[create](#event-create)\n\n[deactivate](#event-deactivate)\n\n[drop](#event-drop)\n\n[out](#event-out)\n\n[over](#event-over)\n\nThe jQuery UI Droppable plugin makes selected elements droppable (meaning they accept being dropped on by [draggables](draggable)). You can specify which draggables each will accept.\n\n### Theming\n\nThe droppable widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If droppable specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-droppable`: The droppable element. When a draggable that can be dropped on this dropppable is activated, the `ui-droppable-active` class is added. When dragging a draggable over this droppable, the `ui-droppable-hover` class is added.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n## Options\n\n### accept\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `\"*\"`\n\nControls which draggable elements are accepted by the droppable.\n\n**Multiple types supported:**\n\n- **Selector**: A selector indicating which draggable elements are accepted.\n- **Function**: A function that will be called for each draggable on the page (passed as the first argument to the function). The function must return `true` if the draggable should be accepted.\n\n**Code examples:**\n\nInitialize the droppable with the `accept` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  accept: \".special\"\n});\n```\n\nGet or set the `accept` option, after initialization:\n\n``` javascript\n// Getter\nvar accept = $( \".selector\" ).droppable( \"option\", \"accept\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"accept\", \".special\" );\n```\n\n### activeClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nIf specified, the class will be added to the droppable while an acceptable draggable is being dragged.\n\nThe `activeClass` option has been deprecated in favor of the [`classes` option](#option-classes), using the `ui-droppable-active` property.\n\n(version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the droppable with the `activeClass` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  activeClass: \"ui-state-highlight\"\n});\n```\n\nGet or set the `activeClass` option, after initialization:\n\n``` javascript\n// Getter\nvar activeClass = $( \".selector\" ).droppable( \"option\", \"activeClass\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"activeClass\", \"ui-state-highlight\" );\n```\n\n### addClasses\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to `false`, will prevent the `ui-droppable` class from being added. This may be desired as a performance optimization when calling `.droppable()` init on hundreds of elements.\n\n**Code examples:**\n\nInitialize the droppable with the `addClasses` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  addClasses: false\n});\n```\n\nGet or set the `addClasses` option, after initialization:\n\n``` javascript\n// Getter\nvar addClasses = $( \".selector\" ).droppable( \"option\", \"addClasses\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"addClasses\", false );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the droppable with the `classes` option specified, changing the theming for the `ui-droppable` class:\n\n``` javascript\n$( \".selector\" ).droppable({\n  classes: {\n    \"ui-droppable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-droppable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).droppable( \"option\", \"classes.ui-droppable\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"classes.ui-droppable\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the droppable if set to `true`.\n\n**Code examples:**\n\nInitialize the droppable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).droppable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"disabled\", true );\n```\n\n### greedy\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nBy default, when an element is dropped on nested droppables, each droppable will receive the element. However, by setting this option to `true`, any parent droppables will not receive the element. The `drop` event will still bubble normally, but the `event.target` can be checked to see which droppable received the draggable element.\n\n**Code examples:**\n\nInitialize the droppable with the `greedy` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  greedy: true\n});\n```\n\nGet or set the `greedy` option, after initialization:\n\n``` javascript\n// Getter\nvar greedy = $( \".selector\" ).droppable( \"option\", \"greedy\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"greedy\", true );\n```\n\n### hoverClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nIf specified, the class will be added to the droppable while an acceptable draggable is being hovered over the droppable.\n\nThe `hoverClass` option has been deprecated in favor of the [`classes` option](#option-classes), using the `ui-droppable-hover` property.\n\n(version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the droppable with the `hoverClass` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  hoverClass: \"drop-hover\"\n});\n```\n\nGet or set the `hoverClass` option, after initialization:\n\n``` javascript\n// Getter\nvar hoverClass = $( \".selector\" ).droppable( \"option\", \"hoverClass\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"hoverClass\", \"drop-hover\" );\n```\n\n### scope\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"default\"`\n\nUsed to group sets of draggable and droppable items, in addition to the [`accept`](#option-accept) option. A draggable with the same scope value as a droppable will be accepted.\n\n**Code examples:**\n\nInitialize the droppable with the `scope` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  scope: \"tasks\"\n});\n```\n\nGet or set the `scope` option, after initialization:\n\n``` javascript\n// Getter\nvar scope = $( \".selector\" ).droppable( \"option\", \"scope\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"scope\", \"tasks\" );\n```\n\n### tolerance\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"intersect\"`\n\nSpecifies which mode to use for testing whether a draggable is hovering over a droppable. Possible values:\n\n- `\"fit\"`: Draggable overlaps the droppable entirely.\n- `\"intersect\"`: Draggable overlaps the droppable at least 50% in both directions.\n- `\"pointer\"`: Mouse pointer overlaps the droppable.\n- `\"touch\"`: Draggable overlaps the droppable any amount.\n\n**Code examples:**\n\nInitialize the droppable with the `tolerance` option specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  tolerance: \"fit\"\n});\n```\n\nGet or set the `tolerance` option, after initialization:\n\n``` javascript\n// Getter\nvar tolerance = $( \".selector\" ).droppable( \"option\", \"tolerance\" );\n \n// Setter\n$( \".selector\" ).droppable( \"option\", \"tolerance\", \"fit\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the droppable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).droppable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the droppable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).droppable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the droppable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).droppable( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the droppable's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the droppable plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).droppable( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).droppable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current droppable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).droppable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the droppable option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).droppable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the droppable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).droppable( \"option\", { disabled: true } );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the droppable element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).droppable( \"widget\" );\n```\n\n## Events\n\n### activate( event, ui )Type: `dropactivate`\n\nTriggered when an accepted draggable starts dragging. This can be useful if you want to make the droppable \"light up\" when it can be dropped on.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **draggable**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the draggable element.\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the helper that is being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the draggable helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the draggable helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the droppable with the activate callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  activate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dropactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"dropactivate\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `dropcreate`\n\nTriggered when the droppable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the droppable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dropcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"dropcreate\", function( event, ui ) {} );\n```\n\n### deactivate( event, ui )Type: `dropdeactivate`\n\nTriggered when an accepted draggable stops dragging.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **draggable**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the draggable element.\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the helper that is being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the draggable helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the draggable helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the droppable with the deactivate callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  deactivate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dropdeactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"dropdeactivate\", function( event, ui ) {} );\n```\n\n### drop( event, ui )Type: `drop`\n\nTriggered when an accepted draggable is dropped on the droppable (based on the[`tolerance`](#option-tolerance) option).\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **draggable**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the draggable element.\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the helper that is being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the draggable helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the draggable helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the droppable with the drop callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  drop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the drop event:\n\n``` javascript\n$( \".selector\" ).on( \"drop\", function( event, ui ) {} );\n```\n\n### out( event, ui )Type: `dropout`\n\nTriggered when an accepted draggable is dragged out of the droppable (based on the[`tolerance`](#option-tolerance) option).\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the droppable with the out callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  out: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dropout event:\n\n``` javascript\n$( \".selector\" ).on( \"dropout\", function( event, ui ) {} );\n```\n\n### over( event, ui )Type: `dropover`\n\nTriggered when an accepted draggable is dragged over the droppable (based on the[`tolerance`](#option-tolerance) option).\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **draggable**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the draggable element.\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A jQuery object representing the helper that is being dragged.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current CSS position of the draggable helper as `{ top, left }` object.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Current offset position of the draggable helper as `{ top, left }` object.\n\n**Code examples:**\n\nInitialize the droppable with the over callback specified:\n\n``` javascript\n$( \".selector\" ).droppable({\n  over: function( event, ui ) {}\n});\n```\n\nBind an event listener to the dropover event:\n\n``` javascript\n$( \".selector\" ).on( \"dropover\", function( event, ui ) {} );\n```\n\n## Example:\n\nA pair of draggable and droppable elements.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>droppable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #draggable {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  #droppable {\n    position: absolute;\n    left: 250px;\n    top: 0;\n    width: 125px;\n    height: 125px;\n    background: #999;\n    color: #fff;\n    padding: 10px;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"droppable\">Drop here</div>\n<div id=\"draggable\">Drag me</div>\n \n<script>\n$( \"#draggable\" ).draggable();\n$( \"#droppable\" ).droppable({\n  drop: function() {\n    alert( \"dropped\" );\n  }\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/droppable](https://api.jqueryui.com/droppable)"
- name: Easings
  id: easings
  summary: Easing functions specify the speed at which an animation progresses at different points within the animation
  description: "# Easings\n\nEasing functions specify the speed at which an animation progresses at different points within the animation. jQuery core ships with two easings: `linear`, which progresses at a constant pace throughout the animation, and `swing` (jQuery core's default easing), which progresses slightly slower at the beginning and end of the animation than it does in the middle of the animation. jQuery UI provides several additional easing functions, ranging from variations on the swing behavior to customized effects such as bouncing.\n\nSome easings will result in negative values during the animation. Depending on the properties that are being animated, the actual value may be clamped at zero. For example, you can animate `left` to a negative value, but you cannot animate `height` or `opacity` to a negative value.\n\nThe best way to understand how an easing will affect an animation is to see the equation graphed over time. See below for a graph of all animations available in jQuery UI.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/easings](https://api.jqueryui.com/easings)"
- name: Explode effect
  id: explode-effect
  summary: 'Description: The explode effect hides or shows an element by splitting it into pieces'
  description: "# Explode Effect\n\n## Explode Effect\n\n**Description:** The explode effect hides or shows an element by splitting it into pieces.\n\n- #### explode\n\n  - **pieces** (default: `9`)\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The number of pieces to explode, should be a perfect square, any other values are rounded to the nearest square.\n\n## Example:\n\nToggle a div using the explode effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>explode demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"explode\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/explode-effect](https://api.jqueryui.com/explode-effect)"
- name: Fade effect
  id: fade-effect
  summary: 'Description: The fade effect hides or shows an element by fading it'
  description: "# Fade Effect\n\n## Fade Effect\n\n**Description:** The fade effect hides or shows an element by fading it.\n\n- #### fade\n\n## Example:\n\nToggle a div using the fade effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>fade demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"fade\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/fade-effect](https://api.jqueryui.com/fade-effect)"
- name: Fold effect
  id: fold-effect
  summary: 'Description: The fold effect hides or shows an element by folding it'
  description: "# Fold Effect\n\n## Fold Effect\n\n**Description:** The fold effect hides or shows an element by folding it.\n\n- #### fold\n\n  - **size** (default: `15`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n    The size of the \"folded\" element.\n\n  - **horizFirst** (default: `false`)\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether the horizontal direction happens first when hiding. Remember, showing inverts hiding.\n\n## Example:\n\nToggle a div using the fold effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>fold demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"fold\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/fold-effect](https://api.jqueryui.com/fold-effect)"
- name: Form reset mixin
  id: form-reset-mixin
  summary: 'Description: A mixin to call refresh() on an input widget when the parent form gets reset'
  description: "# Form Reset Mixin\n\n## Form Reset Mixin\n\n**Description:** A mixin to call `refresh()` on an input widget when the parent form gets reset.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n### Methods\n\n[\\_bindFormResetHandler](#method-_bindFormResetHandler)\n\n[\\_unbindFormResetHandler](#method-_unbindFormResetHandler)\n\n### Events\n\nThis only works for native input elements that have a form attribute, like an `<input>`. It doesn't work for other elements like `<label>` or `<div>`\n\n## Methods\n\n### \\_bindFormResetHandler()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCall `this._bindFormResetHandler()` inside `_create()` to initialize the mixin.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nSet the background color of the widget's element based on an option.\n\n``` javascript\n_create: function() {\n  this._bindFormResetHandler();\n}\n```\n\n### \\_unbindFormResetHandler()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCall `this._unbindFormResetHandler()` inside `_destroy()` to destroy the mixin.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\n``` javascript\n_destroy: function() {\n  this._unbindFormResetHandler();\n}\n```\n\n## Example:\n\nType colors into the input\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>jQuery.ui.formResetMixin demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  .demo-colorize-swatch {\n    width: 50px;\n    height: 50px;\n    border: 1px solid black;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<form>\n  <input id=\"colorize\">\n  <button type=\"reset\">Reset form</button>\n</form>\n \n<script>\n$.widget( \"custom.colorize\", [ $.ui.formResetMixin, {\n  _create: function() {\n    this.swatch = $(\"<div>\")\n      .addClass(\"demo-colorize-swatch\")\n      .insertAfter(this.element);\n \n    this.refresh();\n    this._bindFormResetHandler();\n \n    this._on({ keyup: \"refresh\" });\n  },\n  refresh: function() {\n    this.swatch.css( \"background-color\", this.element.val() );\n  },\n  _destroy: function() {\n    this.swatch.remove();\n    this._unbindFormResetHandler();\n  }\n} ] );\n$( \"#colorize\" ).colorize();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/form-reset-mixin](https://api.jqueryui.com/form-reset-mixin)"
- name: Highlight effect
  id: highlight-effect
  summary: 'Description: The highlight effect hides or shows an element by animating its background color first'
  description: "# Highlight Effect\n\n## Highlight Effect\n\n**Description:** The highlight effect hides or shows an element by animating its background color first.\n\n- #### highlight\n\n  - **color** (default: `\"#ffff99\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The background color used during the animation.\n\n## Example:\n\nToggle a div using the highlight effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>highlight demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"highlight\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/highlight-effect](https://api.jqueryui.com/highlight-effect)"
- name: Icons
  id: theming/icons
  summary: jQuery UI provides a number of icons that can be used by applying class names to elements
  description: "# Icons\n\njQuery UI provides a number of icons that can be used by applying class names to elements. The class names generally follow a syntax of `.ui-icon-{icon type}-{icon sub description}-{direction}`. For example, the following will display an icon of a thick arrow pointing north:\n\n``` markup\n<span class=\"ui-icon ui-icon-arrowthick-1-n\"></span>\n```\n\nThe icons are also integrated into a number of jQuery UI's widgets, such as [accordion](../accordion#option-icons), [button](../button#option-icons), [menu](../menu#option-icons).\n\nThe following is a full list of the icons provided:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/theming/icons](https://api.jqueryui.com/theming/icons)"
- name: jQuery.effects.clipToBox()
  id: jquery.effects.cliptobox
  summary: 'Description: Calculates position and dimensions based on a clip animation'
  description: "# jQuery.effects.clipToBox()\n\n## jQuery.effects.clipToBox( animationProperties )Returns: [Object](http://api.jquery.com/Types/#Object)version added: 1.12\n\n**Description:** Calculates position and dimensions based on a clip animation.\n\n- #### [jQuery.effects.clipToBox( animationProperties )](#jQuery-effects-clipToBox-animationProperties)\n\n  - **animationProperties**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    A set of properties that will eventually be passed to [`.animate()`](https://api.jquery.com/animate/). The `animationProperties` must contain a `clip` property.\n\nThis method is useful for mimicking a clip animation when using a placeholder for effects. Given a clip animation, `jQuery.effects.clipToBox()` will generate an object containing `top`, `left`, `width`, and `height` properties which can be passed to [`.css()`](https://api.jquery.com/css/) or [`.animate()`](https://api.jquery.com/animate/). This method is generally used in conjunction with [`jQuery.effects.createPlaceholder()`](jquery.effects.createplaceholder).\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.clipToBox](https://api.jqueryui.com/jQuery.effects.clipToBox)"
- name: jQuery.effects.createPlaceholder()
  id: jquery.effects.createplaceholder
  summary: 'Description: Creates a placeholder to support clip animations without disrupting the layout'
  description: "# jQuery.effects.createPlaceholder()\n\n## jQuery.effects.createPlaceholder( element )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)version added: 1.12\n\n**Description:** Creates a placeholder to support `clip` animations without disrupting the layout.\n\n- #### [jQuery.effects.createPlaceholder( element )](#jQuery-effects-createPlaceholder-element)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The element to create a placeholder for.\n\nMany effects require animating the `clip` CSS property. In order to apply clipping, the element must be absolutely positioned. As a result, if an animation that utilizes clipping is applied to an element with static or relative positioning, the layout of the page will be affected when the animated element is removed from the flow. To compensate for this, a placeholder element with the same size and position can be inserted into the document.\n\n`jQuery.effects.createPlaceholder()` will create a placeholder with the same display, position, dimensions, and margins as the original element. The placeholder is inserted into the DOM as the next sibling of the original element. When the animation is complete, [`jQuery.effects.removePlaceholder()`](jquery.effects.removeplaceholder) should be used to remove the inserted element.\n\nIf the original element is already absolutely positioned, no placeholder will be generated since the page layout isn't affected. As a result, the return value will be `undefined`.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.createPlaceholder](https://api.jqueryui.com/jQuery.effects.createPlaceholder)"
- name: jQuery.effects.define()
  id: jquery.effects.define
  summary: 'Description: Defines an effect'
  description: "# jQuery.effects.define()\n\n## jQuery.effects.define( name \\[, mode \\], effect )Returns: [Function](http://api.jquery.com/Types/#Function)version added: 1.12\n\n**Description:** Defines an effect.\n\n- #### [jQuery.effects.define( name \\[, mode \\], effect )](#jQuery-effects-define-name-mode-effect)\n\n  - **name**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The name of the effect to create.\n\n  - **mode**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The default mode for the effect. Possible values are `\"show\"`, `\"hide\"`, or `\"toggle\"`.\n\n  - **effect**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)( [Object](http://api.jquery.com/Types/#Object) options, [Function](http://api.jquery.com/Types/#Function) done() )\n\n    Defines the effect logic. The `options` argument contains `duration` and `mode` properties, as well as any effect-specific options.\n\nDefines a new effect for use with [`.effect()`](effect), [`.show()`](show), [`.hide()`](hide), and [`.toggle()`](toggle). The effect method is invoked with `this` being a single DOM element. The `done` argument must be invoked when the animation is complete.\n\n`jQuery.effects.define()` stores the new effect in `jQuery.effects.effect[ name ]` and returns the function that was provided as the `effect` parameter.\n\n## Example:\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>jQuery.effects.define demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  .elem {\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    background: #3b679e;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \nClick anywhere!\n<div class=\"elem\"></div>\n \n<script>\n$.effects.define( \"fade\", \"toggle\", function( options, done ) {\n  var show = options.mode === \"show\";\n \n  $( this )\n    .css( \"opacity\", show ? 0 : 1 )\n    .animate( {\n      opacity: show ? 1 : 0\n    }, {\n      queue: false,\n      duration: options.duration,\n      easing: options.easing,\n      complete: done\n    } );\n} );\n \n$( document ).on( \"click\", function() {\n  $( \".elem\" ).toggle( \"fade\" );\n} );\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.define](https://api.jqueryui.com/jQuery.effects.define)"
- name: jQuery.effects.removePlaceholder()
  id: jquery.effects.removeplaceholder
  summary: 'Description: Removes a placeholder created with jQuery.effects.createPlaceholder()'
  description: "# jQuery.effects.removePlaceholder()\n\n## jQuery.effects.removePlaceholder( element )version added: 1.12\n\n**Description:** Removes a placeholder created with [`jQuery.effects.createPlaceholder()`](jquery.effects.createplaceholder).\n\n- #### [jQuery.effects.removePlaceholder( element )](#jQuery-effects-removePlaceholder-element)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The original element that has an associated placeholder.\n\nRemoves the placeholder for an element. This method is safe to call even if [`jQuery.effects.createPlaceholder()`](jquery.effects.createplaceholder) did not create a placeholder.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.removePlaceholder](https://api.jqueryui.com/jQuery.effects.removePlaceholder)"
- name: jQuery.effects.restoreStyle()
  id: jquery.effects.restorestyle
  summary: 'Description: Restores all inline styles for an element'
  description: "# jQuery.effects.restoreStyle()\n\n## jQuery.effects.restoreStyle( element )version added: 1.12\n\n**Description:** Restores all inline styles for an element.\n\n- #### [jQuery.effects.restoreStyle( element )](#jQuery-effects-restoreStyle-element)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The element to restore styles for.\n\nRestores all inline styles for an element which have been saved using [`jQuery.effects.saveStyle()`](jquery.effects.savestyle).\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.restoreStyle](https://api.jqueryui.com/jQuery.effects.restoreStyle)"
- name: jQuery.effects.saveStyle()
  id: jquery.effects.savestyle
  summary: 'Description: Stores a copy of all inline styles applied to an element'
  description: "# jQuery.effects.saveStyle()\n\n## jQuery.effects.saveStyle( element )version added: 1.12\n\n**Description:** Stores a copy of all inline styles applied to an element.\n\n- #### [jQuery.effects.saveStyle( element )](#jQuery-effects-saveStyle-element)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The element to save styles for.\n\nStores a copy of the current inline styles applied to the element, which can be reapplied to the element later using [`jQuery.effects.restoreStyle()`](jquery.effects.restorestyle). This is useful when animating various styles and restoring the existing styles at the end.\n\nWhen using [`jQuery.effects.define()`](jquery.effects.define) to create an effect, if `jQuery.effects.saveStyle()` is used on the main element being animated, the styles will be restored automatically when the animation is complete.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.saveStyle](https://api.jqueryui.com/jQuery.effects.saveStyle)"
- name: jQuery.effects.scaledDimensions()
  id: jquery.effects.scaleddimensions
  summary: 'Description: Scales the dimensions of an element'
  description: "# jQuery.effects.scaledDimensions()\n\n## jQuery.effects.scaledDimensions( element, percent \\[, direction \\] )Returns: [Object](http://api.jquery.com/Types/#Object)version added: 1.12\n\n**Description:** Scales the dimensions of an element.\n\n- #### [jQuery.effects.scaledDimensions( element, percent \\[, direction \\] )](#jQuery-effects-scaledDimensions-element-percent-direction)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The element to scale.\n\n  - **percent**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The percentage of the original size that the element's dimensions should be scaled to.\n\n  - **direction**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    Which direction to scale the element's dimensions; either `\"horizontal\"` or `\"vertical\"`. If `direction` is omitted, both dimensions will be scaled.\n\nThis method scales the dimensions of an element, returning an object containing `height`, `width`, `outerHeight`, and `outerWidth` properties. The element is not actually modified.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.effects.scaledDimensions](https://api.jqueryui.com/jQuery.effects.scaledDimensions)"
- name: jQuery.ui.keyCode
  id: jquery.ui.keycode
  summary: 'Description: A mapping of key code descriptions to their numeric values'
  description: "# jQuery.ui.keyCode\n\n## jQuery.ui.keyCode\n\n**Description:** A mapping of key code descriptions to their numeric values.\n\n- #### jQuery.ui.keyCode\n\n  - **BACKSPACE**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **COMMA**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **DELETE**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **DOWN**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **END**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **ENTER**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **ESCAPE**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **HOME**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **LEFT**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **PAGE_DOWN**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **PAGE_UP**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **PERIOD**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **RIGHT**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **SPACE**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **TAB**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  - **UP**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n## Example:\n\nTest for arrow key presses.\n\n``` javascript\n$( document ).on( \"keydown\", function( event ) {\n  switch( event.keyCode ) {\n    case $.ui.keyCode.LEFT:\n      console.log( \"left\" );\n      break;\n    case $.ui.keyCode.RIGHT:\n      console.log( \"right\" );\n      break;\n    case $.ui.keyCode.UP:\n      console.log( \"up\" );\n      break;\n    case $.ui.keyCode.DOWN:\n      console.log( \"down\" );\n      break;\n  }\n});\n```\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.ui.keyCode](https://api.jqueryui.com/jQuery.ui.keyCode)"
- name: Menu
  id: menu
  summary: 'Description: Themeable menu with mouse and keyboard interactions for navigation'
  description: "# Menu Widget\n\n## Menu Widgetversion added: 1.9\n\n**Description:** Themeable menu with mouse and keyboard interactions for navigation.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[icons](#option-icons)\n\n[items](#option-items)\n\n[menus](#option-menus)\n\n[position](#option-position)\n\n[role](#option-role)\n\n### Methods\n\n[blur](#method-blur)\n\n[collapse](#method-collapse)\n\n[collapseAll](#method-collapseAll)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[expand](#method-expand)\n\n[focus](#method-focus)\n\n[instance](#method-instance)\n\n[isFirstItem](#method-isFirstItem)\n\n[isLastItem](#method-isLastItem)\n\n[next](#method-next)\n\n[nextPage](#method-nextPage)\n\n[option](#method-option)\n\n[previous](#method-previous)\n\n[previousPage](#method-previousPage)\n\n[refresh](#method-refresh)\n\n[select](#method-select)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_closeOnDocumentClick](#method-_closeOnDocumentClick)\n\n[\\_isDivider](#method-_isDivider)\n\n### Events\n\n[blur](#event-blur)\n\n[create](#event-create)\n\n[focus](#event-focus)\n\n[select](#event-select)\n\nA menu can be created from any valid markup as long as the elements have a strict parent/child relationship. The most commonly used element is the unordered list (`<ul>`). Additionally, the contents of each menu item must be wrapped with a block-level DOM element. In the example below `<div>` elements are used as wrappers:\n\n``` markup\n<ul id=\"menu\">\n  <li>\n    <div>Item 1</div>\n  </li>\n  <li>\n    <div>Item 2</div>\n  </li>\n  <li>\n    <div>Item 3</div>\n    <ul>\n      <li>\n        <div>Item 3-1</div>\n      </li>\n      <li>\n        <div>Item 3-2</div>\n      </li>\n      <li>\n        <div>Item 3-3</div>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <div>Item 4</div>\n  </li>\n  <li>\n    <div>Item 5</div>\n  </li>\n</ul>\n```\n\nIf you use a structure other than `<ul>`/`<li>`, including using the same element for the menu and the menu items, use the [`menus`](#option-menus) option to specify a way to differentiate the two elements, e.g., `menus: \"div.menuElement\"`.\n\nAny menu item can be disabled by adding the `ui-state-disabled` class to that element.\n\n### Icons\n\nTo add icons to the menu, include them in the markup:\n\n``` markup\n<ul id=\"menu\">\n  <li>\n    <div><span class=\"ui-icon ui-icon-disk\"></span>Save</div>\n  </li>\n</ul>\n```\n\nMenu automatically adds the necessary padding to items without icons.\n\n### Dividers\n\nDivider elements can be created by including menu items that contain only spaces and/or dashes:\n\n``` markup\n<ul id=\"menu\">\n  <li>\n    <div>Item 1</div>\n  </li>\n  <li>-</li>\n  <li>\n    <div>Item 2</div>\n  </li>\n</ul>\n```\n\n### Keyboard interaction\n\n- `ENTER`/`SPACE`: Invoke the focused menu item's action, which may be opening a submenu.\n- `UP`: Move focus to the previous menu item.\n- `DOWN`: Move focus to the next menu item.\n- `RIGHT`: Open the submenu, if available.\n- `LEFT`: Close the current submenu and move focus to the parent menu item. If not in a submenu, do nothing.\n- `ESCAPE`: Close the current submenu and move focus to the parent menu item. If not in a submenu, do nothing.\n\nTyping a letter moves focus to the first item whose title starts with that character. Repeating the same character cycles through matching items. Typing more characters within the one second timer matches those characters.\n\nDisabled items can receive keyboard focus, but do not allow any other interaction.\n\n### Theming\n\nThe menu widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If menu specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-menu`: The outer container of the menu, as well as any nested submenu. This top-level element will additionally have a `ui-menu-icons` class if the menu contains icons.\n  - `ui-menu-item`: The container for individual menu items. This contains the element for the item's text itself as well as the element for submenus.\n    - `ui-menu-item-wrapper`: The wrapper element inside each individual menu item, containting the text content and the icon indicating submenus.\n      - `ui-menu-icon`: The submenu icons set via the [`icons`](#option-icons) option.\n  - `ui-menu-divider`: Divider elements between menu items.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Position](position)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the menu with the `classes` option specified, changing the theming for the `ui-menu` class:\n\n``` javascript\n$( \".selector\" ).menu({\n  classes: {\n    \"ui-menu\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-menu` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).menu( \"option\", \"classes.ui-menu\" );\n \n// Setter\n$( \".selector\" ).menu( \"option\", \"classes.ui-menu\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the menu if set to `true`.\n\n**Code examples:**\n\nInitialize the menu with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).menu( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).menu( \"option\", \"disabled\", true );\n```\n\n### icons\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  submenu: \"ui-icon-carat-1-e\"\n}\n```\n\nIcons to use for submenus, matching [an icon provided by the jQuery UI CSS Framework](theming/icons).\n\n**Code examples:**\n\nInitialize the menu with the `icons` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  icons: { submenu: \"ui-icon-circle-triangle-e\" }\n});\n```\n\nGet or set the `icons` option, after initialization:\n\n``` javascript\n// Getter\nvar icons = $( \".selector\" ).menu( \"option\", \"icons\" );\n \n// Setter\n$( \".selector\" ).menu( \"option\", \"icons\", { submenu: \"ui-icon-circle-triangle-e\" } );\n```\n\n### items\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"> *\"`\n\nSelector for the elements that serve as the menu items.\n\n**Note:** The `items` option should not be changed after initialization.\n\n(version added: 1.11.0)\n\n**Code examples:**\n\nInitialize the menu with the `items` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  items: \".custom-item\"\n});\n```\n\nGet the `items` option, after initialization:\n\n``` javascript\n// Getter\nvar items = $( \".selector\" ).menu( \"option\", \"items\" );\n```\n\n### menus\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"ul\"`\n\nSelector for the elements that serve as the menu container, including sub-menus.\n\n**Note:** The `menus` option should not be changed after initialization. Existing submenus will not be updated.\n\n**Code examples:**\n\nInitialize the menu with the `menus` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  menus: \"div\"\n});\n```\n\nGet the `menus` option, after initialization:\n\n``` javascript\n// Getter\nvar menus = $( \".selector\" ).menu( \"option\", \"menus\" );\n```\n\n### position\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ my: \"left top\", at: \"right top\" }`\n\nIdentifies the position of submenus in relation to the associated parent menu item. The `of` option defaults to the parent menu item, but you can specify another element to position against. You can refer to the [jQuery UI Position](position) utility for more details about the various options.\n\n**Code examples:**\n\nInitialize the menu with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  position: { my: \"left top\", at: \"right-5 top+5\" }\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).menu( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).menu( \"option\", \"position\", { my: \"left top\", at: \"right-5 top+5\" } );\n```\n\n### role\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"menu\"`\n\nCustomize the ARIA roles used for the menu and menu items. The default uses `\"menuitem\"` for items. Setting the `role` option to `\"listbox\"` will use `\"option\"` for items. If set to `null`, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.\n\n**Note:** The `role` option should not be changed after initialization. Existing (sub)menus and menu items will not be updated.\n\n**Code examples:**\n\nInitialize the menu with the `role` option specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  role: null\n});\n```\n\nGet the `role` option, after initialization:\n\n``` javascript\n// Getter\nvar role = $( \".selector\" ).menu( \"option\", \"role\" );\n```\n\n## Methods\n\n### blur( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves focus from a menu, resets any active element styles and triggers the menu's [`blur`](#event-blur) event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the menu to blur.\n\n**Code examples:**\n\nInvoke the blur method:\n\n``` javascript\n$( \".selector\" ).menu( \"blur\" );\n```\n\n### collapse( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the currently active sub-menu.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the menu to collapse.\n\n**Code examples:**\n\nInvoke the collapse method:\n\n``` javascript\n$( \".selector\" ).menu( \"collapse\" );\n```\n\n### collapseAll( \\[event \\] \\[, all \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses all open sub-menus.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the menu to collapse.\n\n- **all**\n\n  Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n  Indicates whether all sub-menus should be closed or only sub-menus below and including the menu that is or contains the target of the triggering event.\n\n**Code examples:**\n\nInvoke the collapseAll method:\n\n``` javascript\n$( \".selector\" ).menu( \"collapseAll\", null, true );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the menu functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).menu( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).menu( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).menu( \"enable\" );\n```\n\n### expand( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nOpens the sub-menu below the currently active item, if one exists.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the menu to expand.\n\n**Code examples:**\n\nInvoke the expand method:\n\n``` javascript\n$( \".selector\" ).menu( \"expand\" );\n```\n\n### focus( \\[event \\], item )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nActivates the given menu item and triggers the menu's [`focus`](#event-focus) event. Opens the menu item's sub-menu, if one exists.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the menu item to gain focus.\n\n- **item**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The menu item to focus/activate.\n\n**Code examples:**\n\nInvoke the focus method:\n\n``` javascript\n$( \".selector\" ).menu( \"focus\", null, menu.find( \".ui-menu-item\" ).last() );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the menu's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the menu plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).menu( \"instance\" );\n```\n\n### isFirstItem()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nReturns a boolean value stating whether or not the currently active item is the first item in the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the isFirstItem method:\n\n``` javascript\nvar firstItem = $( \".selector\" ).menu( \"isFirstItem\" );\n```\n\n### isLastItem()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nReturns a boolean value stating whether or not the currently active item is the last item in the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the isLastItem method:\n\n``` javascript\nvar lastItem = $( \".selector\" ).menu( \"isLastItem\" );\n```\n\n### next( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMoves active state to next menu item.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the focus to move.\n\n**Code examples:**\n\nInvoke the next method:\n\n``` javascript\n$( \".selector\" ).menu( \"next\" );\n```\n\n### nextPage( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMoves active state to first menu item below the bottom of a scrollable menu or the last item if not scrollable.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the focus to move.\n\n**Code examples:**\n\nInvoke the nextPage method:\n\n``` javascript\n$( \".selector\" ).menu( \"nextPage\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).menu( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current menu options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).menu( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the menu option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).menu( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the menu.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).menu( \"option\", { disabled: true } );\n```\n\n### previous( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMoves active state to previous menu item.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the focus to move.\n\n**Code examples:**\n\nInvoke the previous method:\n\n``` javascript\n$( \".selector\" ).menu( \"previous\" );\n```\n\n### previousPage( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMoves active state to first menu item above the top of a scrollable menu or the first item if not scrollable.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the focus to move.\n\n**Code examples:**\n\nInvoke the previousPage method:\n\n``` javascript\n$( \".selector\" ).menu( \"previousPage\" );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nInitializes sub-menus and menu items that have not already been initialized. New menu items, including sub-menus can be added to the menu or all of the contents of the menu can be replaced and then initialized with the `refresh()` method.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).menu( \"refresh\" );\n```\n\n### select( \\[event \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSelects the currently active menu item, collapses all sub-menus and triggers the menu's [`select`](#event-select) event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  What triggered the selection.\n\n**Code examples:**\n\nInvoke the select method:\n\n``` javascript\n$( \".selector\" ).menu( \"select\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).menu( \"widget\" );\n```\n\n## Extension Points\n\nThe menu widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_closeOnDocumentClick( event )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nMethod that determines whether clicks on the document should close any open menus. By default, menus are closed unless the click occurred on the menu.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n**Code examples:**\n\nNever close menus on document click.\n\n``` javascript\n_closeOnDocumentClick: function( event ) {\n  return false;\n}\n```\n\n### \\_isDivider( item )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nDetermines whether an item should actually be represented as a divider instead of a menu item. By default any item that contains just spaces and/or dashes is considered a divider.\n\n- **item**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Code examples:**\n\nTreat all items as menu items with no dividers.\n\n``` javascript\n_isDivider: function( item ) {\n  return false;\n}\n```\n\n## Events\n\n### blur( event, ui )Type: `menublur`\n\nTriggered when the menu loses focus.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The currently active menu item.\n\n**Code examples:**\n\nInitialize the menu with the blur callback specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  blur: function( event, ui ) {}\n});\n```\n\nBind an event listener to the menublur event:\n\n``` javascript\n$( \".selector\" ).on( \"menublur\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `menucreate`\n\nTriggered when the menu is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the menu with the create callback specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the menucreate event:\n\n``` javascript\n$( \".selector\" ).on( \"menucreate\", function( event, ui ) {} );\n```\n\n### focus( event, ui )Type: `menufocus`\n\nTriggered when a menu gains focus or when any menu item is activated.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The currently active menu item.\n\n**Code examples:**\n\nInitialize the menu with the focus callback specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  focus: function( event, ui ) {}\n});\n```\n\nBind an event listener to the menufocus event:\n\n``` javascript\n$( \".selector\" ).on( \"menufocus\", function( event, ui ) {} );\n```\n\n### select( event, ui )Type: `menuselect`\n\nTriggered when a menu item is selected.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The currently active menu item.\n\n**Code examples:**\n\nInitialize the menu with the select callback specified:\n\n``` javascript\n$( \".selector\" ).menu({\n  select: function( event, ui ) {}\n});\n```\n\nBind an event listener to the menuselect event:\n\n``` javascript\n$( \".selector\" ).on( \"menuselect\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Menu\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>menu demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  .ui-menu {\n    width: 200px;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<ul id=\"menu\">\n  <li>\n    <div>Item 1</div>\n  </li>\n  <li>\n    <div>Item 2</div>\n  </li>\n  <li>\n    <div>Item 3</div>\n    <ul>\n      <li>\n        <div>Item 3-1</div>\n      </li>\n      <li>\n        <div>Item 3-2</div>\n      </li>\n      <li>\n        <div>Item 3-3</div>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <div>Item 4</div>\n  </li>\n  <li>\n    <div>Item 5</div>\n  </li>\n</ul>\n \n<script>\n$( \"#menu\" ).menu();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/menu](https://api.jqueryui.com/menu)"
- name: Mouse interaction
  id: mouse
  summary: 'Description: The base interaction layer'
  description: "# Mouse Interaction\n\n## Mouse Interaction\n\n**Description:** The base interaction layer.\n\n## QuickNav\n\n### Options\n\n[cancel](#option-cancel)\n\n[delay](#option-delay)\n\n[distance](#option-distance)\n\n### Methods\n\n[\\_mouseCapture](#method-_mouseCapture)\n\n[\\_mouseDelayMet](#method-_mouseDelayMet)\n\n[\\_mouseDestroy](#method-_mouseDestroy)\n\n[\\_mouseDistanceMet](#method-_mouseDistanceMet)\n\n[\\_mouseDown](#method-_mouseDown)\n\n[\\_mouseDrag](#method-_mouseDrag)\n\n[\\_mouseInit](#method-_mouseInit)\n\n[\\_mouseMove](#method-_mouseMove)\n\n[\\_mouseStart](#method-_mouseStart)\n\n[\\_mouseStop](#method-_mouseStop)\n\n[\\_mouseUp](#method-_mouseUp)\n\n### Events\n\nSimilar to [`jQuery.Widget`](jquery.widget#jQuery-Widget2), the mouse interaction is not intended to be used directly. It is purely a base layer for other widgets to inherit from. This page only documents what is added to `jQuery.Widget`, but it does include internal methods that are not intended to be overwritten. The intended public API is [`_mouseStart()`](#method-_mouseStart), [`_mouseDrag()`](#method-_mouseDrag), [`_mouseStop()`](#method-_mouseStop), and [`_mouseCapture()`](#method-_mouseCapture).\n\n### Dependencies\n\n- [Widget Factory](jquery.widget)\n\n## Options\n\n### cancel\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"input,textarea,button,select,option\"`\n\nPrevents interactions from starting on specified elements.\n\n**Code examples:**\n\nInitialize the mouse with the `cancel` option specified:\n\n``` javascript\n$( \".selector\" ).mouse({\n  cancel: \".title\"\n});\n```\n\nGet or set the `cancel` option, after initialization:\n\n``` javascript\n// Getter\nvar cancel = $( \".selector\" ).mouse( \"option\", \"cancel\" );\n \n// Setter\n$( \".selector\" ).mouse( \"option\", \"cancel\", \".title\" );\n```\n\n### delay\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nTime in milliseconds after mousedown until the interaction should start. This option can be used to prevent unwanted interactions when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the mouse with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).mouse({\n  delay: 300\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).mouse( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).mouse( \"option\", \"delay\", 300 );\n```\n\n### distance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nDistance in pixels after mousedown the mouse must move before the interaction should start. This option can be used to prevent unwanted interactions when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the mouse with the `distance` option specified:\n\n``` javascript\n$( \".selector\" ).mouse({\n  distance: 10\n});\n```\n\nGet or set the `distance` option, after initialization:\n\n``` javascript\n// Getter\nvar distance = $( \".selector\" ).mouse( \"option\", \"distance\" );\n \n// Setter\n$( \".selector\" ).mouse( \"option\", \"distance\", 10 );\n```\n\n## Methods\n\n### \\_mouseCapture()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nDetermines whether an interaction should start based on event target of the interaction. The default implementation always returns `true`.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseCapture method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseCapture\" );\n```\n\n### \\_mouseDelayMet()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nDetermines whether the [`delay`](#option-delay) option has been met for the current interaction.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseDelayMet method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseDelayMet\" );\n```\n\n### \\_mouseDestroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDestroys the interaction event handlers. This must be called from the extending widget's `_destroy()` method.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseDestroy method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseDestroy\" );\n```\n\n### \\_mouseDistanceMet()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nDetermines whether the [`distance`](#option-distance) option has been met for the current interaction.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseDistanceMet method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseDistanceMet\" );\n```\n\n### \\_mouseDown()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nHandles the beginning of an interaction. Verifies that the event is associated with the primary mouse button and ensures that the [`delay`](#option-delay) and [`distance`](#option-distance) options are met prior to starting the interaction. When the interaction is ready to start, invokes the [`_mouseStart()`](#method-_mouseStart) method for the extending widget to handle.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseDown method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseDown\" );\n```\n\n### \\_mouseDrag()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThe extending widget should implement a `_mouseDrag()` method to handle each movement of an interaction. This method will receive the mouse event associated with the movement.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseDrag method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseDrag\" );\n```\n\n### \\_mouseInit()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nInitializes the interaction event handlers. This must be called from the extending widget's `_create()` method.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseInit method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseInit\" );\n```\n\n### \\_mouseMove()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nHandles each movement of the interaction. Invokes the [`mouseDrag()`](#method-_mouseDrag) method for the extending widget to handle.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseMove method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseMove\" );\n```\n\n### \\_mouseStart()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThe extending widget should implement a `_mouseStart()` method to handle the beginning of an interaction. This method will receive the mouse event associated with the start of the interaction.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseStart method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseStart\" );\n```\n\n### \\_mouseStop()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThe extending widget should implement a `_mouseStop()` method to handle the end of an interaction. This method will receive the mouse event associated with the end of the interaction.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseStop method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseStop\" );\n```\n\n### \\_mouseUp()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nHandles the end of the interaction. Invokes the [`mouseStop()`](#method-_mouseStop) method for the extending widget to handle.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the \\_mouseUp method:\n\n``` javascript\n$( \".selector\" ).mouse( \"_mouseUp\" );\n```\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/mouse](https://api.jqueryui.com/mouse)"
- name: Progressbar
  id: progressbar
  summary: 'Description: Display status of a determinate or indeterminate process'
  description: "# Progressbar Widget\n\n## Progressbar Widgetversion added: 1.6\n\n**Description:** Display status of a determinate or indeterminate process.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[max](#option-max)\n\n[value](#option-value)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[value](#method-value)\n\n[widget](#method-widget)\n\n### Events\n\n[change](#event-change)\n\n[complete](#event-complete)\n\n[create](#event-create)\n\nThe progress bar is designed to display the current percent complete for a process. The bar is coded to be flexibly sized through CSS and will scale to fit inside its parent container by default.\n\nA determinate progress bar should only be used in situations where the system can accurately update the current status. A determinate progress bar should never fill from left to right, then loop back to empty for a single process — if the actual status cannot be calculated, an indeterminate progress bar should be used to provide user feedback.\n\n### Theming\n\nThe progressbar widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If progressbar specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-progressbar`: The outer container of the progressbar. This element will additionally have a class of `ui-progressbar-indeterminate` for indeterminate progressbars. For determinate progressbars, the `ui-progressbar-complete` class is added once the maximum value is reached.\n  - `ui-progressbar-value`: The element that represents the filled portion of the progressbar.\n    - `ui-progressbar-overlay`: Overlay used to display an animation for indeterminate progressbars.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-progressbar\": \"ui-corner-all\",\n  \"ui-progressbar-complete\": \"ui-corner-right\",\n  \"ui-progressbar-value\": \"ui-corner-left\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the progressbar with the `classes` option specified, changing the theming for the `ui-progressbar` class:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  classes: {\n    \"ui-progressbar\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-progressbar` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).progressbar( \"option\", \"classes.ui-progressbar\" );\n \n// Setter\n$( \".selector\" ).progressbar( \"option\", \"classes.ui-progressbar\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the progressbar if set to `true`.\n\n**Code examples:**\n\nInitialize the progressbar with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).progressbar( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).progressbar( \"option\", \"disabled\", true );\n```\n\n### max\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `100`\n\nThe maximum value of the progressbar.\n\n**Code examples:**\n\nInitialize the progressbar with the `max` option specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  max: 1024\n});\n```\n\nGet or set the `max` option, after initialization:\n\n``` javascript\n// Getter\nvar max = $( \".selector\" ).progressbar( \"option\", \"max\" );\n \n// Setter\n$( \".selector\" ).progressbar( \"option\", \"max\", 1024 );\n```\n\n### value\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `0`\n\nThe value of the progressbar.\n\n**Multiple types supported:**\n\n- **Number**: A value between `0` and the [`max`](#option-max).\n- **Boolean**: Value can be set to `false` to create an indeterminate progressbar.\n\n**Code examples:**\n\nInitialize the progressbar with the `value` option specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  value: 25\n});\n```\n\nGet or set the `value` option, after initialization:\n\n``` javascript\n// Getter\nvar value = $( \".selector\" ).progressbar( \"option\", \"value\" );\n \n// Setter\n$( \".selector\" ).progressbar( \"option\", \"value\", 25 );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the progressbar functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the progressbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the progressbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the progressbar's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the progressbar plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).progressbar( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current progressbar options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).progressbar( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the progressbar option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the progressbar.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"option\", { disabled: true } );\n```\n\n### value()Returns: [Number](http://api.jquery.com/Types/#Number) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\nGets the current value of the progressbar.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar progressSoFar = $( \".selector\" ).progressbar( \"value\" );\n```\n\n### value( value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the current value of the progressbar.\n\n- **value**\n\n  Type: [Number](http://api.jquery.com/Types/#Number) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\n  The value to set. See the [`value`](#option-value) option for details on valid values.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).progressbar( \"value\", 50 );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the progressbar.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).progressbar( \"widget\" );\n```\n\n## Events\n\n### change( event, ui )Type: `progressbarchange`\n\nTriggered when the value of the progressbar changes.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the progressbar with the change callback specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the progressbarchange event:\n\n``` javascript\n$( \".selector\" ).on( \"progressbarchange\", function( event, ui ) {} );\n```\n\n### complete( event, ui )Type: `progressbarcomplete`\n\nTriggered when the value of the progressbar reaches the maximum value.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the progressbar with the complete callback specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  complete: function( event, ui ) {}\n});\n```\n\nBind an event listener to the progressbarcomplete event:\n\n``` javascript\n$( \".selector\" ).on( \"progressbarcomplete\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `progressbarcreate`\n\nTriggered when the progressbar is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the progressbar with the create callback specified:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the progressbarcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"progressbarcreate\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA simple jQuery UI Progressbar\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>progressbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"progressbar\"></div>\n \n<script>\n$( \"#progressbar\" ).progressbar({\n  value: 37\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nA simple jQuery UI Indeterminate Progressbar\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>progressbar demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"progressbar\"></div>\n \n<script>\n$( \"#progressbar\" ).progressbar({\n  value: false\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/progressbar](https://api.jqueryui.com/progressbar)"
- name: Puff effect
  id: puff-effect
  summary: 'Description: Creates a puff effect by scaling the element up and hiding it at the same time'
  description: "# Puff Effect\n\n## Puff Effect\n\n**Description:** Creates a puff effect by scaling the element up and hiding it at the same time.\n\n- #### puff\n\n  - **percent** (default: `150`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The percentage to scale to.\n\n## Example:\n\nToggle a div using the puff effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>puff demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"puff\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/puff-effect](https://api.jqueryui.com/puff-effect)"
- name: Pulsate effect
  id: pulsate-effect
  summary: 'Description: The pulsate effect hides or shows an element by pulsing it in or out'
  description: "# Pulsate Effect\n\n## Pulsate Effect\n\n**Description:** The pulsate effect hides or shows an element by pulsing it in or out.\n\n- #### pulsate\n\n  - **times** (default: `5`)\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The number of times the element should pulse. An extra half pulse is added for hide/show.\n\n## Example:\n\nToggle a div using the pulsate effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>pulsate demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"pulsate\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/pulsate-effect](https://api.jqueryui.com/pulsate-effect)"
- name: Resizable
  id: resizable
  summary: 'Description: Change the size of an element using the mouse'
  description: "# Resizable Widget\n\n## Resizable Widgetversion added: 1.0\n\n**Description:** Change the size of an element using the mouse.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[alsoResize](#option-alsoResize)\n\n[animate](#option-animate)\n\n[animateDuration](#option-animateDuration)\n\n[animateEasing](#option-animateEasing)\n\n[aspectRatio](#option-aspectRatio)\n\n[autoHide](#option-autoHide)\n\n[cancel](#option-cancel)\n\n[classes](#option-classes)\n\n[containment](#option-containment)\n\n[delay](#option-delay)\n\n[disabled](#option-disabled)\n\n[distance](#option-distance)\n\n[ghost](#option-ghost)\n\n[grid](#option-grid)\n\n[handles](#option-handles)\n\n[helper](#option-helper)\n\n[maxHeight](#option-maxHeight)\n\n[maxWidth](#option-maxWidth)\n\n[minHeight](#option-minHeight)\n\n[minWidth](#option-minWidth)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\n[resize](#event-resize)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\nThe jQuery UI Resizable plugin makes selected elements resizable (meaning they have draggable resize handles). You can specify one or more handles as well as min and max width and height.\n\n### Theming\n\nThe resizable widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If resizable specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-resizable`: The resizable element. During a resize, the `ui-resizable-resizing` class is added. When the [`autoHide` option](#option-autoHide) is set, the `ui-resizable-autohide` class is added.\n- `ui-resizable-handle`: One of the handles of the resizable, specified using the [`handles` option](#option-handles). Each handle will also have a `ui-resizable-{direction}` class according to its position.\n- `ui-resizable-ghost`: When using the [`ghost` option](#option-ghost), this class is applied to the ghost helper element.\n- `ui-resizable-helper`: When the [`animate` option](#option-animate) is used, but the [`helper` option](#option-helper) isn't specified, this class is added to the generated helper.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### alsoResize\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [jQuery](http://api.jquery.com/Types/#jQuery) or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `false`\n\nOne or more elements to resize synchronously with the resizable element.\n\n**Code examples:**\n\nInitialize the resizable with the `alsoResize` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  alsoResize: \"#mirror\"\n});\n```\n\nGet or set the `alsoResize` option, after initialization:\n\n``` javascript\n// Getter\nvar alsoResize = $( \".selector\" ).resizable( \"option\", \"alsoResize\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"alsoResize\", \"#mirror\" );\n```\n\n### animate\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nAnimates to the final size after resizing.\n\n**Code examples:**\n\nInitialize the resizable with the `animate` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  animate: true\n});\n```\n\nGet or set the `animate` option, after initialization:\n\n``` javascript\n// Getter\nvar animate = $( \".selector\" ).resizable( \"option\", \"animate\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"animate\", true );\n```\n\n### animateDuration\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"slow\"`\n\nHow long to animate when using the [`animate`](#option-animate) option.\n\n**Multiple types supported:**\n\n- **Number**: Duration in milliseconds.\n- **String**: A named duration, such as `\"slow\"` or `\"fast\"`.\n\n**Code examples:**\n\nInitialize the resizable with the `animateDuration` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  animateDuration: \"fast\"\n});\n```\n\nGet or set the `animateDuration` option, after initialization:\n\n``` javascript\n// Getter\nvar animateDuration = $( \".selector\" ).resizable( \"option\", \"animateDuration\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"animateDuration\", \"fast\" );\n```\n\n### animateEasing\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"swing\"`\n\nWhich [easing](easings) to apply when using the [`animate`](#option-animate) option.\n\n**Code examples:**\n\nInitialize the resizable with the `animateEasing` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  animateEasing: \"easeOutBounce\"\n});\n```\n\nGet or set the `animateEasing` option, after initialization:\n\n``` javascript\n// Getter\nvar animateEasing = $( \".selector\" ).resizable( \"option\", \"animateEasing\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"animateEasing\", \"easeOutBounce\" );\n```\n\n### aspectRatio\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nWhether the element should be constrained to a specific aspect ratio.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, the element will maintain its original aspect ratio.\n- **Number**: Force the element to maintain a specific aspect ratio during resizing.\n\n**Code examples:**\n\nInitialize the resizable with the `aspectRatio` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  aspectRatio: true\n});\n```\n\nGet or set the `aspectRatio` option, after initialization:\n\n``` javascript\n// Getter\nvar aspectRatio = $( \".selector\" ).resizable( \"option\", \"aspectRatio\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"aspectRatio\", true );\n```\n\n### autoHide\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the handles should hide when the user is not hovering over the element.\n\n**Code examples:**\n\nInitialize the resizable with the `autoHide` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  autoHide: true\n});\n```\n\nGet or set the `autoHide` option, after initialization:\n\n``` javascript\n// Getter\nvar autoHide = $( \".selector\" ).resizable( \"option\", \"autoHide\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"autoHide\", true );\n```\n\n### cancel\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"input,textarea,button,select,option\"`\n\nPrevents resizing from starting on specified elements.\n\n**Code examples:**\n\nInitialize the resizable with the `cancel` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  cancel: \".cancel\"\n});\n```\n\nGet or set the `cancel` option, after initialization:\n\n``` javascript\n// Getter\nvar cancel = $( \".selector\" ).resizable( \"option\", \"cancel\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"cancel\", \".cancel\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-resizable-se\": \"ui-icon ui-icon-gripsmall-diagonal-se\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the resizable with the `classes` option specified, changing the theming for the `ui-resizable` class:\n\n``` javascript\n$( \".selector\" ).resizable({\n  classes: {\n    \"ui-resizable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-resizable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).resizable( \"option\", \"classes.ui-resizable\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"classes.ui-resizable\", \"highlight\" );\n```\n\n### containment\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nConstrains resizing to within the bounds of the specified element or region.\n\n**Multiple types supported:**\n\n- **Selector**: The resizable element will be contained to the bounding box of the first element found by the selector. If no element is found, no containment will be set.\n- **Element**: The resizable element will be contained to the bounding box of this element.\n- **String**: Possible values: `\"parent\"` and `\"document\"`.\n\n**Code examples:**\n\nInitialize the resizable with the `containment` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  containment: \"parent\"\n});\n```\n\nGet or set the `containment` option, after initialization:\n\n``` javascript\n// Getter\nvar containment = $( \".selector\" ).resizable( \"option\", \"containment\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"containment\", \"parent\" );\n```\n\n### delay\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nTolerance, in milliseconds, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond duration. This can help prevent unintended resizing when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the resizable with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  delay: 150\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).resizable( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"delay\", 150 );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the resizable if set to `true`.\n\n**Code examples:**\n\nInitialize the resizable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).resizable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"disabled\", true );\n```\n\n### distance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nTolerance, in pixels, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond distance. This can help prevent unintended resizing when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the resizable with the `distance` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  distance: 30\n});\n```\n\nGet or set the `distance` option, after initialization:\n\n``` javascript\n// Getter\nvar distance = $( \".selector\" ).resizable( \"option\", \"distance\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"distance\", 30 );\n```\n\n### ghost\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf set to `true`, a semi-transparent helper element is shown for resizing.\n\n**Code examples:**\n\nInitialize the resizable with the `ghost` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  ghost: true\n});\n```\n\nGet or set the `ghost` option, after initialization:\n\n``` javascript\n// Getter\nvar ghost = $( \".selector\" ).resizable( \"option\", \"ghost\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"ghost\", true );\n```\n\n### grid\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `false`\n\nSnaps the resizing element to a grid, every x and y pixels. Array values: `[ x, y ]`.\n\n**Code examples:**\n\nInitialize the resizable with the `grid` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  grid: [ 20, 10 ]\n});\n```\n\nGet or set the `grid` option, after initialization:\n\n``` javascript\n// Getter\nvar grid = $( \".selector\" ).resizable( \"option\", \"grid\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"grid\", [ 20, 10 ] );\n```\n\n### handles\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `\"e, s, se\"`\n\nWhich handles can be used for resizing.\n\n**Multiple types supported:**\n\n- **String**: A comma delimited list of any of the following: n, e, s, w, ne, se, sw, nw, all. The necessary handles will be auto-generated by the plugin.\n\n- **Object**:\n\n  The following keys are supported: { n, e, s, w, ne, se, sw, nw }. The value of any specified should be a jQuery selector matching the child element of the resizable to use as that handle. If the handle is not a child of the resizable, you can pass in the DOMElement or a valid jQuery object directly.\n\n  *Note: When generating your own handles, each handle must have the `ui-resizable-handle` class, as well as the appropriate `ui-resizable-{direction}` class, .e.g., `ui-resizable-s`.*\n\n**Code examples:**\n\nInitialize the resizable with the `handles` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  handles: \"n, e, s, w\"\n});\n```\n\nGet or set the `handles` option, after initialization:\n\n``` javascript\n// Getter\nvar handles = $( \".selector\" ).resizable( \"option\", \"handles\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"handles\", \"n, e, s, w\" );\n```\n\n### helper\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nA class name that will be added to a proxy element to outline the resize during the drag of the resize handle. Once the resize is complete, the original element is sized.\n\n**Code examples:**\n\nInitialize the resizable with the `helper` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  helper: \"resizable-helper\"\n});\n```\n\nGet or set the `helper` option, after initialization:\n\n``` javascript\n// Getter\nvar helper = $( \".selector\" ).resizable( \"option\", \"helper\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"helper\", \"resizable-helper\" );\n```\n\n### maxHeight\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `null`\n\nThe maximum height the resizable should be allowed to resize to.\n\n**Code examples:**\n\nInitialize the resizable with the `maxHeight` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  maxHeight: 300\n});\n```\n\nGet or set the `maxHeight` option, after initialization:\n\n``` javascript\n// Getter\nvar maxHeight = $( \".selector\" ).resizable( \"option\", \"maxHeight\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"maxHeight\", 300 );\n```\n\n### maxWidth\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `null`\n\nThe maximum width the resizable should be allowed to resize to.\n\n**Code examples:**\n\nInitialize the resizable with the `maxWidth` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  maxWidth: 300\n});\n```\n\nGet or set the `maxWidth` option, after initialization:\n\n``` javascript\n// Getter\nvar maxWidth = $( \".selector\" ).resizable( \"option\", \"maxWidth\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"maxWidth\", 300 );\n```\n\n### minHeight\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `10`\n\nThe minimum height the resizable should be allowed to resize to.\n\n**Code examples:**\n\nInitialize the resizable with the `minHeight` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  minHeight: 150\n});\n```\n\nGet or set the `minHeight` option, after initialization:\n\n``` javascript\n// Getter\nvar minHeight = $( \".selector\" ).resizable( \"option\", \"minHeight\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"minHeight\", 150 );\n```\n\n### minWidth\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `10`\n\nThe minimum width the resizable should be allowed to resize to.\n\n**Code examples:**\n\nInitialize the resizable with the `minWidth` option specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  minWidth: 150\n});\n```\n\nGet or set the `minWidth` option, after initialization:\n\n``` javascript\n// Getter\nvar minWidth = $( \".selector\" ).resizable( \"option\", \"minWidth\" );\n \n// Setter\n$( \".selector\" ).resizable( \"option\", \"minWidth\", 150 );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the resizable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).resizable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the resizable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).resizable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the resizable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).resizable( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the resizable's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the resizable plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).resizable( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).resizable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current resizable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).resizable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the resizable option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).resizable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the resizable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).resizable( \"option\", { disabled: true } );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the resizable element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).resizable( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `resizecreate`\n\nTriggered when the resizable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the resizable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the resizecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"resizecreate\", function( event, ui ) {} );\n```\n\n### resize( event, ui )Type: `resize`\n\nThis event is triggered during the resize, on the drag of the resize handler.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element to be resized\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being resized\n\n  - **originalElement**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the original element before it is wrapped\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The position represented as `{ left, top }` before the resizable is resized\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size represented as `{ width, height }` before the resizable is resized\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position represented as `{ left, top }`. The values may be changed to modify where the element will be positioned. Useful for custom resizing logic.\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size represented as `{ width, height }`. The values may be changed to modify where the element will be positioned. Useful for custom resizing logic.\n\n**Code examples:**\n\nInitialize the resizable with the resize callback specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  resize: function( event, ui ) {}\n});\n```\n\nBind an event listener to the resize event:\n\n``` javascript\n$( \".selector\" ).on( \"resize\", function( event, ui ) {} );\n```\n\nRestrict height resizing to 30 pixel increments:\n\n``` javascript\n$( \".selector\" ).resizable({\n  resize: function( event, ui ) {\n    ui.size.height = Math.round( ui.size.height / 30 ) * 30;\n  }\n});\n```\n\n### start( event, ui )Type: `resizestart`\n\nThis event is triggered at the start of a resize operation.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element to be resized\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being resized\n\n  - **originalElement**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the original element before it is wrapped\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The position represented as `{ left, top }` before the resizable is resized\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size represented as `{ width, height }` before the resizable is resized\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position represented as `{ left, top }`\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size represented as `{ width, height }`\n\n**Code examples:**\n\nInitialize the resizable with the start callback specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the resizestart event:\n\n``` javascript\n$( \".selector\" ).on( \"resizestart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `resizestop`\n\nThis event is triggered at the end of a resize operation.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element to be resized\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper that's being resized\n\n  - **originalElement**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the original element before it is wrapped\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The position represented as `{ left, top }` before the resizable is resized\n\n  - **originalSize**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The size represented as `{ width, height }` before the resizable is resized\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position represented as `{ left, top }`\n\n  - **size**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current size represented as `{ width, height }`\n\n**Code examples:**\n\nInitialize the resizable with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).resizable({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the resizestop event:\n\n``` javascript\n$( \".selector\" ).on( \"resizestop\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Resizable.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>resizable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #resizable {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n}  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"resizable\"></div>\n \n<script>\n$( \"#resizable\" ).resizable();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/resizable](https://api.jqueryui.com/resizable)"
- name: Scale effect
  id: scale-effect
  summary: 'Description: Shrink or grow an element by a percentage factor'
  description: "# Scale Effect\n\n## Scale Effect\n\n**Description:** Shrink or grow an element by a percentage factor.\n\n- #### scale\n\n  - **direction** (default: `\"both\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The direction of the effect. Possible values: `\"both\"`, `\"vertical\"` or `\"horizontal\"`.\n\n  - **origin** (default: `[ \"middle\", \"center\" ]`)\n\n    Type: [Array](http://api.jquery.com/Types/#Array)\n\n    The vanishing point.\n\n  - **percent**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The percentage to scale to.\n\n  - **scale** (default: `\"both\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    Which areas of the element will be resized: `\"both\"`, `\"box\"`, `\"content\"`. Box resizes the border and padding of the element; content resizes any content inside of the element.\n\n## Examples:\n\nToggle a div using the scale effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>scale demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"scale\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nToggle a div using the scale effect in just one direction.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>scale demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle({ effect: \"scale\", direction: \"horizontal\" });\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/scale-effect](https://api.jqueryui.com/scale-effect)"
- name: Selectable
  id: selectable
  summary: 'Description: Use the mouse to select elements, individually or in a group'
  description: "# Selectable Widget\n\n## Selectable Widgetversion added: 1.0\n\n**Description:** Use the mouse to select elements, individually or in a group.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[appendTo](#option-appendTo)\n\n[autoRefresh](#option-autoRefresh)\n\n[cancel](#option-cancel)\n\n[classes](#option-classes)\n\n[delay](#option-delay)\n\n[disabled](#option-disabled)\n\n[distance](#option-distance)\n\n[filter](#option-filter)\n\n[tolerance](#option-tolerance)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\n[selected](#event-selected)\n\n[selecting](#event-selecting)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\n[unselected](#event-unselected)\n\n[unselecting](#event-unselecting)\n\nThe jQuery UI Selectable plugin allows for elements to be selected by dragging a box (sometimes called a lasso) with the mouse over the elements. Elements can also be selected via click or drag while holding the ctrl/meta key, allowing for multiple (non-contiguous) selections.\n\n### Theming\n\nThe selectable widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If selectable specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-selectable`: The selectable element.\n  - `ui-selectee`: One of the selectable elements, as specified through the [`filter` option](#option-filter). This element can also receive one of the following classes: `ui-selecting` (when the lasso includes this element), `ui-selected` (after a successful selection), `ui-unselecting` (when the lasso lost this element).\n- `ui-selectable-helper`: The \"lasso\" element used to visualize the ongoing selection.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### appendTo\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"body\"`\n\nWhich element the selection helper (the lasso) should be appended to.\n\n**Code examples:**\n\nInitialize the selectable with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  appendTo: \"#someElem\"\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).selectable( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"appendTo\", \"#someElem\" );\n```\n\n### autoRefresh\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nThis determines whether to refresh (recalculate) the position and size of each selectee at the beginning of each select operation. If you have many items, you may want to set this to false and call the [`refresh()`](#method-refresh) method manually.\n\n**Code examples:**\n\nInitialize the selectable with the `autoRefresh` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  autoRefresh: false\n});\n```\n\nGet or set the `autoRefresh` option, after initialization:\n\n``` javascript\n// Getter\nvar autoRefresh = $( \".selector\" ).selectable( \"option\", \"autoRefresh\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"autoRefresh\", false );\n```\n\n### cancel\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"input,textarea,button,select,option\"`\n\nPrevents selecting if you start on elements matching the selector.\n\n**Code examples:**\n\nInitialize the selectable with the `cancel` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  cancel: \"a,.cancel\"\n});\n```\n\nGet or set the `cancel` option, after initialization:\n\n``` javascript\n// Getter\nvar cancel = $( \".selector\" ).selectable( \"option\", \"cancel\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"cancel\", \"a,.cancel\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the selectable with the `classes` option specified, changing the theming for the `ui-selectable` class:\n\n``` javascript\n$( \".selector\" ).selectable({\n  classes: {\n    \"ui-selectable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-selectable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).selectable( \"option\", \"classes.ui-selectable\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"classes.ui-selectable\", \"highlight\" );\n```\n\n### delay\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `0`\n\nTime in milliseconds to define when the selecting should start. This helps prevent unwanted selections when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the selectable with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  delay: 150\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).selectable( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"delay\", 150 );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the selectable if set to `true`.\n\n**Code examples:**\n\nInitialize the selectable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).selectable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"disabled\", true );\n```\n\n### distance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nTolerance, in pixels, for when selecting should start. If specified, selecting will not start until the mouse has been dragged beyond the specified distance. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the selectable with the `distance` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  distance: 30\n});\n```\n\nGet or set the `distance` option, after initialization:\n\n``` javascript\n// Getter\nvar distance = $( \".selector\" ).selectable( \"option\", \"distance\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"distance\", 30 );\n```\n\n### filter\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"*\"`\n\nThe matching child elements will be made selectees (able to be selected).\n\n**Code examples:**\n\nInitialize the selectable with the `filter` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  filter: \"li\"\n});\n```\n\nGet or set the `filter` option, after initialization:\n\n``` javascript\n// Getter\nvar filter = $( \".selector\" ).selectable( \"option\", \"filter\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"filter\", \"li\" );\n```\n\n### tolerance\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"touch\"`\n\nSpecifies which mode to use for testing whether the lasso should select an item. Possible values:\n\n- `\"fit\"`: Lasso overlaps the item entirely.\n- `\"touch\"`: Lasso overlaps the item by any amount.\n\n**Code examples:**\n\nInitialize the selectable with the `tolerance` option specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  tolerance: \"fit\"\n});\n```\n\nGet or set the `tolerance` option, after initialization:\n\n``` javascript\n// Getter\nvar tolerance = $( \".selector\" ).selectable( \"option\", \"tolerance\" );\n \n// Setter\n$( \".selector\" ).selectable( \"option\", \"tolerance\", \"fit\" );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the selectable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).selectable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the selectable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).selectable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the selectable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).selectable( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the selectable's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the selectable plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).selectable( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).selectable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current selectable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).selectable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the selectable option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the selectable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectable( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefresh the position and size of each selectee element. This method can be used to manually recalculate the position and size of each selectee when the [`autoRefresh`](#option-autoRefresh) option is set to `false`.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).selectable( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the selectable element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).selectable( \"widget\" );\n```\n\n## Events\n\n### create( event, ui )Type: `selectablecreate`\n\nTriggered when the selectable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectablecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"selectablecreate\", function( event, ui ) {} );\n```\n\n### selected( event, ui )Type: `selectableselected`\n\nTriggered at the end of the select operation, on each element added to the selection.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **selected**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The selectable item that has been selected.\n\n**Code examples:**\n\nInitialize the selectable with the selected callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  selected: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectableselected event:\n\n``` javascript\n$( \".selector\" ).on( \"selectableselected\", function( event, ui ) {} );\n```\n\n### selecting( event, ui )Type: `selectableselecting`\n\nTriggered during the select operation, on each element added to the selection.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **selecting**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The current selectable item being selected.\n\n**Code examples:**\n\nInitialize the selectable with the selecting callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  selecting: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectableselecting event:\n\n``` javascript\n$( \".selector\" ).on( \"selectableselecting\", function( event, ui ) {} );\n```\n\n### start( event, ui )Type: `selectablestart`\n\nTriggered at the beginning of the select operation.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectable with the start callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectablestart event:\n\n``` javascript\n$( \".selector\" ).on( \"selectablestart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `selectablestop`\n\nTriggered at the end of the select operation.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectable with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectablestop event:\n\n``` javascript\n$( \".selector\" ).on( \"selectablestop\", function( event, ui ) {} );\n```\n\n### unselected( event, ui )Type: `selectableunselected`\n\nTriggered at the end of the select operation, on each element removed from the selection.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **unselected**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The selectable item that has been unselected.\n\n**Code examples:**\n\nInitialize the selectable with the unselected callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  unselected: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectableunselected event:\n\n``` javascript\n$( \".selector\" ).on( \"selectableunselected\", function( event, ui ) {} );\n```\n\n### unselecting( event, ui )Type: `selectableunselecting`\n\nTriggered during the select operation, on each element removed from the selection.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **unselecting**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The current selectable item being unselected.\n\n**Code examples:**\n\nInitialize the selectable with the unselecting callback specified:\n\n``` javascript\n$( \".selector\" ).selectable({\n  unselecting: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectableunselecting event:\n\n``` javascript\n$( \".selector\" ).on( \"selectableunselecting\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Selectable.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>selectable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #selectable .ui-selecting {\n    background: #ccc;\n  }\n  #selectable .ui-selected {\n    background: #999;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<ul id=\"selectable\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n  <li>Item 5</li>\n</ul>\n \n<script>\n$( \"#selectable\" ).selectable();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/selectable](https://api.jqueryui.com/selectable)"
- name: Selectmenu
  id: selectmenu
  summary: 'Description: Duplicates and extends the functionality of a native HTML select element to overcome the limitations of the native control'
  description: "# Selectmenu Widget\n\n## Selectmenu Widgetversion added: 1.11\n\n**Description:** Duplicates and extends the functionality of a native HTML select element to overcome the limitations of the native control.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[appendTo](#option-appendTo)\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[icons](#option-icons)\n\n[position](#option-position)\n\n[width](#option-width)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[menuWidget](#method-menuWidget)\n\n[open](#method-open)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_renderButtonItem](#method-_renderButtonItem)\n\n[\\_renderItem](#method-_renderItem)\n\n[\\_renderMenu](#method-_renderMenu)\n\n[\\_resizeMenu](#method-_resizeMenu)\n\n### Events\n\n[change](#event-change)\n\n[close](#event-close)\n\n[create](#event-create)\n\n[focus](#event-focus)\n\n[open](#event-open)\n\n[select](#event-select)\n\nSelectmenu transforms a `<select>` element into a themeable and customizable control. The widget acts as a proxy to the original `<select>`; therefore the original element's state is maintained for form submission and serialization.\n\nSelectmenu supports `<optgroup>` elements and custom markup to render specific presentations like multiple lines. The `<select>` and its options can be disabled by adding a `disabled` attribute.\n\n**Note:** Support for `accesskey` on custom elements is extremely limited in browsers. As such, if there is an `accesskey` attribute on the `<select>` element, it will not work with the custom selectmenu. If there is an `accesskey` attribute on any of the `<option>` elements, using the accesskey may cause the original element and the custom element to be out of sync. However, most browsers don't support `accesskey` on `<option>` elements.\n\n### Keyboard interaction\n\nWhen the menu is open, the following key commands are available:\n\n- `UP`/`LEFT`: Move focus to the previous item.\n- `DOWN`/`RIGHT`: Move focus to the next item.\n- `END`/`PAGE DOWN`: Move focus to the last item.\n- `HOME`/`PAGE UP`: Move focus to the first item.\n- `ESCAPE`: Close the menu.\n- `ENTER`/`SPACE`: Select the currently focused item and close the menu.\n- `ALT`/`OPTION` + `UP`/`DOWN`: Toggle the visibility of the menu.\n\nWhen the menu is closed, the following key commands are available:\n\n- `UP`/`LEFT`: Select the previous item.\n- `DOWN`/`RIGHT`: Select the next item.\n- `END`/`PAGE DOWN`: Select the last item.\n- `HOME`/`PAGE UP`: Select the first item.\n- `ALT`/`OPTION` + `UP`/`DOWN`: Toggle the visibility of the menu.\n- `SPACE`: Open the menu.\n\n### Theming\n\nThe selectmenu widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If selectmenu specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-selectmenu-button`: The button-like element replacing the native selectmenu on the page. Has the `ui-selectmenu-button-closed` class when closed, the `ui-selectmenu-button-open` class when open.\n  - `ui-selectmenu-text`: The span representing the text portion of the button element.\n  - `ui-selectmenu-icon`: The icon within the selectmenu button.\n- `ui-selectmenu-menu`: The wrapper element around the [menu](menu#theming) used to display options to the user (not the menu itself). When the menu is open, the `ui-selectmenu-open` class is added.\n  - `ui-selectmenu-optgroup`: One of the elements that replicates `<optgroup>` elements from native selects.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Position](position)\n- [Menu](menu)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### appendTo\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `null`\n\nWhich element to append the menu to. When the value is `null`, the parents of the `<select>` are checked for a class name of `ui-front`. If an element with the `ui-front` class name is found, the menu is appended to that element. Regardless of the value, if no element is found, the menu is appended to the body.\n\n**Code examples:**\n\nInitialize the selectmenu with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  appendTo: \"#someElem\"\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).selectmenu( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"appendTo\", \"#someElem\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-selectmenu-button-closed\": \"ui-corner-all\",\n  \"ui-selectmenu-button-open\": \"ui-corner-top\",\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the selectmenu with the `classes` option specified, changing the theming for the `ui-selectmenu-menu` class:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  classes: {\n    \"ui-selectmenu-menu\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-selectmenu-menu` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).selectmenu( \"option\", \"classes.ui-selectmenu-menu\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"classes.ui-selectmenu-menu\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the selectmenu if set to `true`.\n\n**Code examples:**\n\nInitialize the selectmenu with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).selectmenu( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"disabled\", true );\n```\n\n### icons\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ button: \"ui-icon-triangle-1-s\" }`\n\nIcons to use for the button, matching [an icon defined by the jQuery UI CSS Framework](theming/icons).\n\n- button (string, default: \"ui-icon-triangle-1-s\")\n\n**Code examples:**\n\nInitialize the selectmenu with the `icons` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  icons: { button: \"ui-icon-circle-triangle-s\" }\n});\n```\n\nGet or set the `icons` option, after initialization:\n\n``` javascript\n// Getter\nvar icons = $( \".selector\" ).selectmenu( \"option\", \"icons\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"icons\", { button: \"ui-icon-circle-triangle-s\" } );\n```\n\n### position\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ my: \"left top\", at: \"left bottom\", collision: \"none\" }`\n\nIdentifies the position of the menu in relation to the associated button element. You can refer to the [jQuery UI Position](position) utility for more details about the various options.\n\n**Code examples:**\n\nInitialize the selectmenu with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  position: { my : \"left+10 center\", at: \"right center\" }\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).selectmenu( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"position\", { my : \"left+10 center\", at: \"right center\" } );\n```\n\n### width\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nThe width of the menu, in pixels. When the value is `null`, the width of the native select is used. When the value is `false`, no inline style will be set for the width, allowing the width to be set in a stylesheet.\n\n**Code examples:**\n\nInitialize the selectmenu with the `width` option specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  width: 200\n});\n```\n\nGet or set the `width` option, after initialization:\n\n``` javascript\n// Getter\nvar width = $( \".selector\" ).selectmenu( \"option\", \"width\" );\n \n// Setter\n$( \".selector\" ).selectmenu( \"option\", \"width\", 200 );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the selectmenu functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the selectmenu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the selectmenu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the selectmenu's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the selectmenu plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"instance\" );\n```\n\n### menuWidget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nReturns a `jQuery` object containing the menu element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the menuWidget method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"menuWidget\" );\n```\n\n### open()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nOpens the menu.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"open\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).selectmenu( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current selectmenu options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).selectmenu( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the selectmenu option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the selectmenu.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nParses the original element and re-renders the menu. Processes any `<option>` or `<optgroup>` elements that were added, removed or disabled.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nReturns a `jQuery` object containing the button element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\n$( \".selector\" ).selectmenu( \"widget\" );\n```\n\n## Extension Points\n\nThe selectmenu widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_renderButtonItem( item )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nMethod that controls the creation of the generated button content. The method must create and return a new element.\n\n- **item**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **disabled**\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether the item is disabled.\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    A reference to the item's original `<option>` element.\n\n  - **index**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The numeric index of the item.\n\n  - **label**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The string to display for the item.\n\n  - **optgroup**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    If the item is within an `<optgroup>`, this is set to that `<optgroup>`'s label.\n\n  - **value**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The `value` attribute of the item's original `<option>`.\n\n**Code examples:**\n\nStyle the button background color based on the value of the selected option.\n\n``` javascript\n_renderButtonItem: function( item ) {\n  var buttonItem = $( \"<span>\", {\n    \"class\": \"ui-selectmenu-text\"\n  })\n  this._setText( buttonItem, item.label );\n \n  buttonItem.css( \"background-color\", item.value )\n \n  return buttonItem;\n}\n```\n\n### \\_renderItem( ul, item )Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nMethod that controls the creation of each option in the widget's menu. The method must create a new `<li>` element, append it to the menu, and return it. See the [Menu](menu) documentation for more details about the markup.\n\n- **ul**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The `<ul>` element that the newly created `<li>` element must be appended to.\n\n- **item**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **element**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The original `<option>` element.\n\n  - **index**\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    The index of the `<option>` within the `<select>`.\n\n  - **value**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The value of the `<option>`.\n\n  - **label**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The label of the `<option>`.\n\n  - **optgroup**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The label for the parent `optgroup`, if any.\n\n  - **disabled**\n\n    Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n    Whether the `<option>` is disabled.\n\n**Code examples:**\n\nStyle the menu item background colors based on the value of their corresponding option elements.\n\n``` javascript\n_renderItem: function( ul, item ) {\n  var li = $( \"<li>\" )\n    .css( \"background-color\", item.value );\n \n  if ( item.disabled ) {\n    li.addClass( \"ui-state-disabled\" );\n  }\n \n  this._setText( li, item.label );\n \n  return li.appendTo( ul );\n}\n```\n\n### \\_renderMenu( ul, items )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMethod that controls building the widget's menu. The method is passed an empty `<ul>` and an array of items based on the `<option>` elements in the original `<select>`. Creation of the individual `<li>` elements should be delegated to `_renderItemData()`, which in turn delegates to the [`_renderItem()`](#method-_renderItem) extension point.\n\n- **ul**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  An empty `<ul>` element to use as the widget's menu.\n\n- **items**\n\n  Type: [Array](http://api.jquery.com/Types/#Array)\n\n  An array of items based on the `<option>` elements in the original `<select>`. See the [`_renderItem()`](#method-_renderItem) extension point for details on the format of the item objects.\n\n**Code examples:**\n\nAdd a CSS class name to the odd menu items.\n\n**Note:** For simplicity, this example does not support optgroups or disabled menu items.\n\n``` javascript\n_renderMenu: function( ul, items ) {\n  var that = this;\n  $.each( items, function( index, item ) {\n    that._renderItemData( ul, item );\n  });\n  $( ul ).find( \"li\" ).odd().addClass( \"odd\" );\n}\n```\n\n### \\_resizeMenu()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nMethod responsible for sizing the menu before it is displayed. The menu element is available at `this.menu`.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nAlways display the menu as 500 pixels wide.\n\n``` javascript\n_resizeMenu: function() {\n  this.menu.outerWidth( 500 );\n}\n```\n\n## Events\n\n### change( event, ui )Type: `selectmenuchange`\n\nTriggered when the selected item has changed. Not every [`select`](#event-select) event will fire a `change` event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The active item.\n\n**Code examples:**\n\nInitialize the selectmenu with the change callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenuchange event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenuchange\", function( event, ui ) {} );\n```\n\n### close( event )Type: `selectmenuclose`\n\nTriggered when the menu is hidden.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectmenu with the close callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  close: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenuclose event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenuclose\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `selectmenucreate`\n\nTriggered when the selectmenu is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectmenu with the create callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenucreate event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenucreate\", function( event, ui ) {} );\n```\n\n### focus( event, ui )Type: `selectmenufocus`\n\nTriggered when an items gains focus.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The focused item.\n\n**Code examples:**\n\nInitialize the selectmenu with the focus callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  focus: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenufocus event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenufocus\", function( event, ui ) {} );\n```\n\n### open( event )Type: `selectmenuopen`\n\nTriggered when the menu is opened.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the selectmenu with the open callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  open: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenuopen event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenuopen\", function( event, ui ) {} );\n```\n\n### select( event, ui )Type: `selectmenuselect`\n\nTriggered when a menu item is selected.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The selected item.\n\n**Code examples:**\n\nInitialize the selectmenu with the select callback specified:\n\n``` javascript\n$( \".selector\" ).selectmenu({\n  select: function( event, ui ) {}\n});\n```\n\nBind an event listener to the selectmenuselect event:\n\n``` javascript\n$( \".selector\" ).on( \"selectmenuselect\", function( event, ui ) {} );\n```\n\n## Examples:\n\nA simple jQuery UI Selectmenu\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>selectmenu demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  label { display: block; }\n  select { width: 200px; }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label for=\"speed\">Select a speed:</label>\n<select name=\"speed\" id=\"speed\">\n  <option value=\"Slower\">Slower</option>\n  <option value=\"Slow\">Slow</option>\n  <option value=\"Medium\" selected>Medium</option>\n  <option value=\"Fast\">Fast</option>\n  <option value=\"Faster\">Faster</option>\n</select>\n \n<script>\n$( \"#speed\" ).selectmenu();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nA simple jQuery UI Selectmenu with optgroups\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>selectmenu demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  label { display: block; }\n  select { width: 200px; }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label for=\"files\">Select a file:</label>\n<select name=\"files\" id=\"files\">\n  <optgroup label=\"Scripts\">\n    <option value=\"jquery\">jQuery.js</option>\n    <option value=\"jqueryui\">ui.jQuery.js</option>\n  </optgroup>\n  <optgroup label=\"Other files\">\n    <option value=\"somefile\">Some unknown file</option>\n    <option value=\"someotherfile\">Some other file</option>\n  </optgroup>\n</select>\n \n<script>\n$( \"#files\" ).selectmenu();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\nA jQuery UI Selectmenu with overflow\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>selectmenu demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  label { display: block; }\n  select { width: 200px; }\n  .overflow { height: 200px; }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<label for=\"number\">Select a number:</label>\n<select name=\"number\" id=\"number\">\n  <option value=\"1\">1</option>\n  <option value=\"2\" selected>2</option>\n  <option value=\"3\">3</option>\n  <option value=\"4\">4</option>\n  <option value=\"5\">5</option>\n  <option value=\"6\">6</option>\n  <option value=\"7\">7</option>\n  <option value=\"8\">8</option>\n  <option value=\"9\">9</option>\n  <option value=\"10\">10</option>\n  <option value=\"11\">11</option>\n  <option value=\"12\">12</option>\n  <option value=\"13\">13</option>\n  <option value=\"14\">14</option>\n  <option value=\"15\">15</option>\n  <option value=\"16\">16</option>\n  <option value=\"17\">17</option>\n  <option value=\"18\">18</option>\n  <option value=\"19\">19</option>\n</select>\n \n<script>\n$( \"#number\" )\n  .selectmenu()\n  .selectmenu( \"menuWidget\" )\n    .addClass( \"overflow\" );\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/selectmenu](https://api.jqueryui.com/selectmenu)"
- name: Shake effect
  id: shake-effect
  summary: 'Description: Shakes the element multiple times, vertically or horizontally'
  description: "# Shake Effect\n\n## Shake Effect\n\n**Description:** Shakes the element multiple times, vertically or horizontally.\n\n- #### shake\n\n  - **direction** (default: `\"left\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    A value of `\"left\"` or `\"right\"` will shake the element horizontally, and a value of `\"up\"` or `\"down\"` will shake the element vertically. The value specifies which direction the element should move along the axis for the first step of the effect.\n\n  - **distance** (default: `20`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    Distance to shake.\n\n  - **times** (default: `3`)\n\n    Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n    Times to shake.\n\n## Example:\n\nShake a div.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>shake demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to shake the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).effect( \"shake\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/shake-effect](https://api.jqueryui.com/shake-effect)"
- name: Size effect
  id: size-effect
  summary: 'Description: Resize an element to a specified width and height'
  description: "# Size Effect\n\n## Size Effect\n\n**Description:** Resize an element to a specified width and height.\n\n- #### size\n\n  - **to**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    Height and width to resize to.\n\n  - **origin** (default: `[ \"top\", \"left\" ]`)\n\n    Type: [Array](http://api.jquery.com/Types/#Array)\n\n    The vanishing point.\n\n  - **scale** (default: `\"both\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    Which areas of the element will be resized: `\"both\"`, `\"box\"`, `\"content\"`. Box resizes the border and padding of the element; content resizes any content inside of the element.\n\nWhen using this effect with the [`.show()`](show) and [`.toggle()`](toggle) methods, the `to` argument is used as the starting point and the original size used as the endpoint.\n\n## Example:\n\nResize the element using the size effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>size demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to resize the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).effect( \"size\", {\n    to: { width: 200, height: 60 }\n  }, 1000 );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/size-effect](https://api.jqueryui.com/size-effect)"
- name: Slide effect
  id: slide-effect
  summary: 'Description: Slides the element out of the viewport'
  description: "# Slide Effect\n\n## Slide Effect\n\n**Description:** Slides the element out of the viewport.\n\n- #### slide\n\n  - **direction** (default: `\"left\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The direction of the effect. Possible values: `\"left\"`, `\"right\"`, `\"up\"`, `\"down\"`.\n\n  - **distance** (default: `element's outerWidth`)\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The distance of the effect. Defaults to either the height or width of the element depending on the `direction` argument. Can be set to any integer less than the width/height of the element.\n\n## Example:\n\nToggle a div using the slide effect.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>slide demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  #toggle {\n    width: 100px;\n    height: 100px;\n    background: #ccc;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>Click anywhere to toggle the box.</p>\n<div id=\"toggle\"></div>\n \n<script>\n$( document ).click(function() {\n  $( \"#toggle\" ).toggle( \"slide\" );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/slide-effect](https://api.jqueryui.com/slide-effect)"
- name: Slider
  id: slider
  summary: 'Description: Drag a handle to select a numeric value'
  description: "# Slider Widget\n\n## Slider Widgetversion added: 1.5\n\n**Description:** Drag a handle to select a numeric value.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[animate](#option-animate)\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[max](#option-max)\n\n[min](#option-min)\n\n[orientation](#option-orientation)\n\n[range](#option-range)\n\n[step](#option-step)\n\n[value](#option-value)\n\n[values](#option-values)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[value](#method-value)\n\n[values](#method-values)\n\n[widget](#method-widget)\n\n### Events\n\n[change](#event-change)\n\n[create](#event-create)\n\n[slide](#event-slide)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\nThe jQuery UI Slider plugin makes selected elements into sliders. There are various options such as multiple handles and ranges. The handle can be moved with the mouse or the arrow keys.\n\nThe slider widget will create handle elements with the class `ui-slider-handle` on initialization. You can specify custom handle elements by creating and appending the elements and adding the `ui-slider-handle` class before initialization. It will only create the number of handles needed to match the length of [`value`](#option-value)/[`values`](#option-values). For example, if you specify `values: [ 1, 5, 18 ]` and create one custom handle, the plugin will create the other two.\n\n### Theming\n\nThe slider widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If slider specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-slider`: The track of the slider control. This element will additionally have a class name of `ui-slider-horizontal` or `ui-slider-vertical` depending on the [`orientation` option](#option-orientation) of the slider.\n  - `ui-slider-handle`: One of the slider handles.\n  - `ui-slider-range`: The selected range used when the [`range` option](#option-range) is set. This element can additionally have a class of `ui-slider-range-min` or `ui-slider-range-max` if the `range` option is set to `\"min\"` or `\"max\"` respectively.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### animate\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String) or [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nWhether to slide the handle smoothly when the user clicks on the slider track. Also accepts any valid [animation duration](https://api.jquery.com/animate/#duration).\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, the handle will animate with the default duration.\n- **String**: The name of a speed, such as `\"fast\"` or `\"slow\"`.\n- **Number**: The duration of the animation, in milliseconds.\n\n**Code examples:**\n\nInitialize the slider with the `animate` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  animate: \"fast\"\n});\n```\n\nGet or set the `animate` option, after initialization:\n\n``` javascript\n// Getter\nvar animate = $( \".selector\" ).slider( \"option\", \"animate\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"animate\", \"fast\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-slider\": \"ui-corner-all\",\n  \"ui-slider-handle\": \"ui-corner-all\",\n  \"ui-slider-range\": \"ui-corner-all ui-widget-header\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the slider with the `classes` option specified, changing the theming for the `ui-slider` class:\n\n``` javascript\n$( \".selector\" ).slider({\n  classes: {\n    \"ui-slider\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-slider` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).slider( \"option\", \"classes.ui-slider\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"classes.ui-slider\", \"highlight\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the slider if set to `true`.\n\n**Code examples:**\n\nInitialize the slider with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).slider( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"disabled\", true );\n```\n\n### max\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `100`\n\nThe maximum value of the slider.\n\n**Code examples:**\n\nInitialize the slider with the `max` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  max: 50\n});\n```\n\nGet or set the `max` option, after initialization:\n\n``` javascript\n// Getter\nvar max = $( \".selector\" ).slider( \"option\", \"max\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"max\", 50 );\n```\n\n### min\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nThe minimum value of the slider.\n\n**Code examples:**\n\nInitialize the slider with the `min` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  min: 10\n});\n```\n\nGet or set the `min` option, after initialization:\n\n``` javascript\n// Getter\nvar min = $( \".selector\" ).slider( \"option\", \"min\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"min\", 10 );\n```\n\n### orientation\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"horizontal\"`\n\nDetermines whether the slider handles move horizontally (min on left, max on right) or vertically (min on bottom, max on top). Possible values: `\"horizontal\"`, `\"vertical\"`.\n\n**Code examples:**\n\nInitialize the slider with the `orientation` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  orientation: \"vertical\"\n});\n```\n\nGet or set the `orientation` option, after initialization:\n\n``` javascript\n// Getter\nvar orientation = $( \".selector\" ).slider( \"option\", \"orientation\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"orientation\", \"vertical\" );\n```\n\n### range\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nWhether the slider represents a range.\n\n**Multiple types supported:**\n\n- **Boolean**: If set to `true`, the slider will detect if you have two handles and create a styleable range element between these two.\n- **String**: Either `\"min\"` or `\"max\"`. A min range goes from the slider min to one handle. A max range goes from one handle to the slider max.\n\n**Code examples:**\n\nInitialize the slider with the `range` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  range: true\n});\n```\n\nGet or set the `range` option, after initialization:\n\n``` javascript\n// Getter\nvar range = $( \".selector\" ).slider( \"option\", \"range\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"range\", true );\n```\n\n### step\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nDetermines the size or amount of each interval or step the slider takes between the min and max. The full specified value range of the slider (max - min) should be evenly divisible by the step.\n\n**Code examples:**\n\nInitialize the slider with the `step` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  step: 5\n});\n```\n\nGet or set the `step` option, after initialization:\n\n``` javascript\n// Getter\nvar step = $( \".selector\" ).slider( \"option\", \"step\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"step\", 5 );\n```\n\n### value\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `0`\n\nDetermines the value of the slider, if there's only one handle. If there is more than one handle, determines the value of the first handle.\n\n**Code examples:**\n\nInitialize the slider with the `value` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  value: 10\n});\n```\n\nGet or set the `value` option, after initialization:\n\n``` javascript\n// Getter\nvar value = $( \".selector\" ).slider( \"option\", \"value\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"value\", 10 );\n```\n\n### values\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `null`\n\nThis option can be used to specify multiple handles. If the [`range`](#option-range) option is set to `true`, the length of `values` should be 2.\n\n**Code examples:**\n\nInitialize the slider with the `values` option specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  values: [ 10, 25 ]\n});\n```\n\nGet or set the `values` option, after initialization:\n\n``` javascript\n// Getter\nvar values = $( \".selector\" ).slider( \"option\", \"values\" );\n \n// Setter\n$( \".selector\" ).slider( \"option\", \"values\", [ 10, 25 ] );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the slider functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).slider( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the slider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).slider( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the slider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).slider( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the slider's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the slider plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).slider( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).slider( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current slider options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).slider( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the slider option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the slider.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"option\", { disabled: true } );\n```\n\n### value()Returns: [Number](http://api.jquery.com/Types/#Number)\n\nGet the value of the slider.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar selection = $( \".selector\" ).slider( \"value\" );\n```\n\n### value( value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSet the value of the slider.\n\n- **value**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The value to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"value\", 55 );\n```\n\n### values()Returns: [Array](http://api.jquery.com/Types/#Array)\n\nGet the value for all handles.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar values = $( \".selector\" ).slider( \"values\" );\n```\n\n### values( index )Returns: [Number](http://api.jquery.com/Types/#Number)\n\nGet the value for the specified handle.\n\n- **index**\n\n  Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  The zero-based index of the handle.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar value = $( \".selector\" ).slider( \"values\", 0 );\n```\n\n### values( index, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSet the value for the specified handle.\n\n- **index**\n\n  Type: [Integer](http://api.jquery.com/Types/#Integer)\n\n  The zero-based index of the handle.\n\n- **value**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The value to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"values\", 0, 55 );\n```\n\n### values( values )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSet the value for all handles.\n\n- **values**\n\n  Type: [Array](http://api.jquery.com/Types/#Array)\n\n  The values to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).slider( \"values\", [ 55, 105 ] );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the slider.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).slider( \"widget\" );\n```\n\n## Events\n\n### change( event, ui )Type: `slidechange`\n\nTriggered after the user slides a handle, if the value has changed; or if the value is changed programmatically via the [`value`](#method-value) method.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **handle**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The HTML element representing the handle that was changed.\n\n  - **handleIndex**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The numeric index of the handle that was moved.\n\n  - **value**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The current value of the slider.\n\n**Code examples:**\n\nInitialize the slider with the change callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidechange event:\n\n``` javascript\n$( \".selector\" ).on( \"slidechange\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `slidecreate`\n\nTriggered when the slider is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the slider with the create callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidecreate event:\n\n``` javascript\n$( \".selector\" ).on( \"slidecreate\", function( event, ui ) {} );\n```\n\n### slide( event, ui )Type: `slide`\n\nTriggered on every mouse move during slide. The value provided in the event as `ui.value` represents the value that the handle will have as a result of the current movement. Canceling the event will prevent the handle from moving and the handle will continue to have its previous value.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **handle**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The HTML element representing the handle being moved.\n\n  - **handleIndex**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The numeric index of the handle being moved.\n\n  - **value**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The value that the handle will move to if the event is not canceled.\n\n  - **values**\n\n    Type: [Array](http://api.jquery.com/Types/#Array)\n\n    An array of the current values of a multi-handled slider.\n\n**Code examples:**\n\nInitialize the slider with the slide callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  slide: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slide event:\n\n``` javascript\n$( \".selector\" ).on( \"slide\", function( event, ui ) {} );\n```\n\n### start( event, ui )Type: `slidestart`\n\nTriggered when the user starts sliding.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **handle**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The HTML element representing the handle being moved.\n\n  - **handleIndex**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The numeric index of the handle being moved.\n\n  - **value**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The current value of the slider.\n\n**Code examples:**\n\nInitialize the slider with the start callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidestart event:\n\n``` javascript\n$( \".selector\" ).on( \"slidestart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `slidestop`\n\nTriggered after the user slides a handle.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **handle**\n\n    Type: [Element](http://api.jquery.com/Types/#Element)\n\n    The HTML element representing the handle that was moved.\n\n  - **handleIndex**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The numeric index of the handle that was moved.\n\n  - **value**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The current value of the slider.\n\n**Code examples:**\n\nInitialize the slider with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).slider({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the slidestop event:\n\n``` javascript\n$( \".selector\" ).on( \"slidestop\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Slider.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>slider demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>#slider { margin: 10px; }  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"slider\"></div>\n \n<script>\n$( \"#slider\" ).slider();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/slider](https://api.jqueryui.com/slider)"
- name: Sortable
  id: sortable
  summary: 'Description: Reorder elements in a list or grid using the mouse'
  description: "# Sortable Widget\n\n## Sortable Widgetversion added: 1.0\n\n**Description:** Reorder elements in a list or grid using the mouse.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[appendTo](#option-appendTo)\n\n[axis](#option-axis)\n\n[cancel](#option-cancel)\n\n[classes](#option-classes)\n\n[connectWith](#option-connectWith)\n\n[containment](#option-containment)\n\n[cursor](#option-cursor)\n\n[cursorAt](#option-cursorAt)\n\n[delay](#option-delay)\n\n[disabled](#option-disabled)\n\n[distance](#option-distance)\n\n[dropOnEmpty](#option-dropOnEmpty)\n\n[forceHelperSize](#option-forceHelperSize)\n\n[forcePlaceholderSize](#option-forcePlaceholderSize)\n\n[grid](#option-grid)\n\n[handle](#option-handle)\n\n[helper](#option-helper)\n\n[items](#option-items)\n\n[opacity](#option-opacity)\n\n[placeholder](#option-placeholder)\n\n[revert](#option-revert)\n\n[scroll](#option-scroll)\n\n[scrollSensitivity](#option-scrollSensitivity)\n\n[scrollSpeed](#option-scrollSpeed)\n\n[tolerance](#option-tolerance)\n\n[zIndex](#option-zIndex)\n\n### Methods\n\n[cancel](#method-cancel)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[refreshPositions](#method-refreshPositions)\n\n[serialize](#method-serialize)\n\n[toArray](#method-toArray)\n\n[widget](#method-widget)\n\n### Events\n\n[activate](#event-activate)\n\n[beforeStop](#event-beforeStop)\n\n[change](#event-change)\n\n[create](#event-create)\n\n[deactivate](#event-deactivate)\n\n[out](#event-out)\n\n[over](#event-over)\n\n[receive](#event-receive)\n\n[remove](#event-remove)\n\n[sort](#event-sort)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\n[update](#event-update)\n\nThe jQuery UI Sortable plugin makes selected elements sortable by dragging with the mouse.\n\n*Note: In order to sort table rows, the `tbody` must be made sortable, not the `table`.*\n\n### Theming\n\nThe sortable widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If sortable specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-sortable`: The sortable element.\n  - `ui-sortable-handle`: The handle of each sortable item, specified using the [`handle` option](#option-handle). By default, each sortable item itself is also the handle.\n  - `ui-sortable-placeholder`: The element used to show the future position of the item currently being sorted.\n- `ui-sortable-helper`: The element shown while dragging a sortable item. The element actually used depends on the [`helper` option](#option-helper).\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Mouse Interaction](mouse)\n\n## Options\n\n### appendTo\n\n**Type:** [jQuery](http://api.jquery.com/Types/#jQuery) or [Element](http://api.jquery.com/Types/#Element) or [Selector](http://api.jquery.com/Types/#Selector) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"parent\"`\n\nDefines where the helper that moves with the mouse is being appended to during the drag (for example, to resolve overlap/zIndex issues).\n\n**Multiple types supported:**\n\n- **jQuery**: A jQuery object containing the element to append the helper to.\n- **Element**: The element to append the helper to.\n- **Selector**: A selector specifying which element to append the helper to.\n- **String**: The string `\"parent\"` will cause the helper to be a sibling of the sortable item.\n\n**Code examples:**\n\nInitialize the sortable with the `appendTo` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  appendTo: document.body\n});\n```\n\nGet or set the `appendTo` option, after initialization:\n\n``` javascript\n// Getter\nvar appendTo = $( \".selector\" ).sortable( \"option\", \"appendTo\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"appendTo\", document.body );\n```\n\n### axis\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nIf defined, the items can be dragged only horizontally or vertically. Possible values: `\"x\"`, `\"y\"`.\n\n**Code examples:**\n\nInitialize the sortable with the `axis` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  axis: \"x\"\n});\n```\n\nGet or set the `axis` option, after initialization:\n\n``` javascript\n// Getter\nvar axis = $( \".selector\" ).sortable( \"option\", \"axis\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"axis\", \"x\" );\n```\n\n### cancel\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"input,textarea,button,select,option\"`\n\nPrevents sorting if you start on elements matching the selector.\n\n**Code examples:**\n\nInitialize the sortable with the `cancel` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  cancel: \"a,button\"\n});\n```\n\nGet or set the `cancel` option, after initialization:\n\n``` javascript\n// Getter\nvar cancel = $( \".selector\" ).sortable( \"option\", \"cancel\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"cancel\", \"a,button\" );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the sortable with the `classes` option specified, changing the theming for the `ui-sortable` class:\n\n``` javascript\n$( \".selector\" ).sortable({\n  classes: {\n    \"ui-sortable\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-sortable` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).sortable( \"option\", \"classes.ui-sortable\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"classes.ui-sortable\", \"highlight\" );\n```\n\n### connectWith\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `false`\n\nA selector of other sortable elements that the items from this list should be connected to. This is a one-way relationship, if you want the items to be connected in both directions, the `connectWith` option must be set on both sortable elements.\n\n**Code examples:**\n\nInitialize the sortable with the `connectWith` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  connectWith: \"#shopping-cart\"\n});\n```\n\nGet or set the `connectWith` option, after initialization:\n\n``` javascript\n// Getter\nvar connectWith = $( \".selector\" ).sortable( \"option\", \"connectWith\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"connectWith\", \"#shopping-cart\" );\n```\n\n### containment\n\n**Type:** [Element](http://api.jquery.com/Types/#Element) or [Selector](http://api.jquery.com/Types/#Selector) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nDefines a bounding box that the sortable items are constrained to while dragging.\n\nNote: The element specified for containment must have a calculated width and height (though it need not be explicit). For example, if you have `float: left` sortable children and specify `containment: \"parent\"` be sure to have `float: left` on the sortable/parent container as well or it will have `height: 0`, causing undefined behavior.\n\n**Multiple types supported:**\n\n- **Element**: An element to use as the container.\n- **Selector**: A selector specifying an element to use as the container.\n- **String**: A string identifying an element to use as the container. Possible values: `\"parent\"`, `\"document\"`, `\"window\"`.\n\n**Code examples:**\n\nInitialize the sortable with the `containment` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  containment: \"parent\"\n});\n```\n\nGet or set the `containment` option, after initialization:\n\n``` javascript\n// Getter\nvar containment = $( \".selector\" ).sortable( \"option\", \"containment\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"containment\", \"parent\" );\n```\n\n### cursor\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"auto\"`\n\nDefines the cursor that is being shown while sorting.\n\n**Code examples:**\n\nInitialize the sortable with the `cursor` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  cursor: \"move\"\n});\n```\n\nGet or set the `cursor` option, after initialization:\n\n``` javascript\n// Getter\nvar cursor = $( \".selector\" ).sortable( \"option\", \"cursor\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"cursor\", \"move\" );\n```\n\n### cursorAt\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `false`\n\nMoves the sorting element or helper so the cursor always appears to drag from the same position. Coordinates can be given as a hash using a combination of one or two keys: `{ top, left, right, bottom }`.\n\n**Code examples:**\n\nInitialize the sortable with the `cursorAt` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  cursorAt: { left: 5 }\n});\n```\n\nGet or set the `cursorAt` option, after initialization:\n\n``` javascript\n// Getter\nvar cursorAt = $( \".selector\" ).sortable( \"option\", \"cursorAt\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"cursorAt\", { left: 5 } );\n```\n\n### delay\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `0`\n\nTime in milliseconds to define when the sorting should start. Adding a delay helps preventing unwanted drags when clicking on an element. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the sortable with the `delay` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  delay: 150\n});\n```\n\nGet or set the `delay` option, after initialization:\n\n``` javascript\n// Getter\nvar delay = $( \".selector\" ).sortable( \"option\", \"delay\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"delay\", 150 );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the sortable if set to `true`.\n\n**Code examples:**\n\nInitialize the sortable with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).sortable( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"disabled\", true );\n```\n\n### distance\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `1`\n\nTolerance, in pixels, for when sorting should start. If specified, sorting will not start until after mouse is dragged beyond distance. Can be used to allow for clicks on elements within a handle. (version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the sortable with the `distance` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  distance: 5\n});\n```\n\nGet or set the `distance` option, after initialization:\n\n``` javascript\n// Getter\nvar distance = $( \".selector\" ).sortable( \"option\", \"distance\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"distance\", 5 );\n```\n\n### dropOnEmpty\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf `false`, items from this sortable can't be dropped on an empty connect sortable (see the [`connectWith`](#option-connectWith) option.\n\n**Code examples:**\n\nInitialize the sortable with the `dropOnEmpty` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  dropOnEmpty: false\n});\n```\n\nGet or set the `dropOnEmpty` option, after initialization:\n\n``` javascript\n// Getter\nvar dropOnEmpty = $( \".selector\" ).sortable( \"option\", \"dropOnEmpty\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"dropOnEmpty\", false );\n```\n\n### forceHelperSize\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf `true`, forces the helper to have a size.\n\n**Code examples:**\n\nInitialize the sortable with the `forceHelperSize` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  forceHelperSize: true\n});\n```\n\nGet or set the `forceHelperSize` option, after initialization:\n\n``` javascript\n// Getter\nvar forceHelperSize = $( \".selector\" ).sortable( \"option\", \"forceHelperSize\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"forceHelperSize\", true );\n```\n\n### forcePlaceholderSize\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nIf true, forces the placeholder to have a size.\n\n**Code examples:**\n\nInitialize the sortable with the `forcePlaceholderSize` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  forcePlaceholderSize: true\n});\n```\n\nGet or set the `forcePlaceholderSize` option, after initialization:\n\n``` javascript\n// Getter\nvar forcePlaceholderSize = $( \".selector\" ).sortable( \"option\", \"forcePlaceholderSize\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"forcePlaceholderSize\", true );\n```\n\n### grid\n\n**Type:** [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `false`\n\nSnaps the sorting element or helper to a grid, every x and y pixels. Array values: `[ x, y ]`.\n\n**Code examples:**\n\nInitialize the sortable with the `grid` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  grid: [ 20, 10 ]\n});\n```\n\nGet or set the `grid` option, after initialization:\n\n``` javascript\n// Getter\nvar grid = $( \".selector\" ).sortable( \"option\", \"grid\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"grid\", [ 20, 10 ] );\n```\n\n### handle\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector) or [Element](http://api.jquery.com/Types/#Element)\n\n**Default:** `false`\n\nRestricts sort start click to the specified element.\n\n**Code examples:**\n\nInitialize the sortable with the `handle` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  handle: \".handle\"\n});\n```\n\nGet or set the `handle` option, after initialization:\n\n``` javascript\n// Getter\nvar handle = $( \".selector\" ).sortable( \"option\", \"handle\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"handle\", \".handle\" );\n```\n\n### helper\n\n**Type:** [String](http://api.jquery.com/Types/#String) or [Function](http://api.jquery.com/Types/#Function)()\n\n**Default:** `\"original\"`\n\nAllows for a helper element to be used for dragging display.\n\n**Multiple types supported:**\n\n- **String**: If set to `\"clone\"`, then the element will be cloned and the clone will be dragged.\n- **Function**: A function that will return a DOMElement to use while dragging. The function receives the event and the element being sorted.\n\n**Code examples:**\n\nInitialize the sortable with the `helper` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  helper: \"clone\"\n});\n```\n\nGet or set the `helper` option, after initialization:\n\n``` javascript\n// Getter\nvar helper = $( \".selector\" ).sortable( \"option\", \"helper\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"helper\", \"clone\" );\n```\n\n### items\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `\"> *\"`\n\nSpecifies which items inside the element should be sortable.\n\n**Code examples:**\n\nInitialize the sortable with the `items` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  items: \"> li\"\n});\n```\n\nGet or set the `items` option, after initialization:\n\n``` javascript\n// Getter\nvar items = $( \".selector\" ).sortable( \"option\", \"items\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"items\", \"> li\" );\n```\n\n### opacity\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nDefines the opacity of the helper while sorting. From `0.01` to `1`.\n\n**Code examples:**\n\nInitialize the sortable with the `opacity` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  opacity: 0.5\n});\n```\n\nGet or set the `opacity` option, after initialization:\n\n``` javascript\n// Getter\nvar opacity = $( \".selector\" ).sortable( \"option\", \"opacity\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"opacity\", 0.5 );\n```\n\n### placeholder\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `false`\n\nA class name that gets applied to the otherwise white space.\n\n**Code examples:**\n\nInitialize the sortable with the `placeholder` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  placeholder: \"sortable-placeholder\"\n});\n```\n\nGet or set the `placeholder` option, after initialization:\n\n``` javascript\n// Getter\nvar placeholder = $( \".selector\" ).sortable( \"option\", \"placeholder\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"placeholder\", \"sortable-placeholder\" );\n```\n\n### revert\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `false`\n\nWhether the sortable items should revert to their new positions using a smooth animation.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, the items will animate with the default duration.\n- **Number**: The duration for the animation, in milliseconds.\n\n**Code examples:**\n\nInitialize the sortable with the `revert` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  revert: true\n});\n```\n\nGet or set the `revert` option, after initialization:\n\n``` javascript\n// Getter\nvar revert = $( \".selector\" ).sortable( \"option\", \"revert\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"revert\", true );\n```\n\n### scroll\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `true`\n\nIf set to true, the page scrolls when coming to an edge.\n\n**Code examples:**\n\nInitialize the sortable with the `scroll` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  scroll: false\n});\n```\n\nGet or set the `scroll` option, after initialization:\n\n``` javascript\n// Getter\nvar scroll = $( \".selector\" ).sortable( \"option\", \"scroll\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"scroll\", false );\n```\n\n### scrollSensitivity\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `20`\n\nDefines how near the mouse must be to an edge to start scrolling.\n\n**Code examples:**\n\nInitialize the sortable with the `scrollSensitivity` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  scrollSensitivity: 10\n});\n```\n\nGet or set the `scrollSensitivity` option, after initialization:\n\n``` javascript\n// Getter\nvar scrollSensitivity = $( \".selector\" ).sortable( \"option\", \"scrollSensitivity\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"scrollSensitivity\", 10 );\n```\n\n### scrollSpeed\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `20`\n\nThe speed at which the window should scroll once the mouse pointer gets within the [`scrollSensitivity`](#option-scrollSensitivity) distance.\n\n**Code examples:**\n\nInitialize the sortable with the `scrollSpeed` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  scrollSpeed: 40\n});\n```\n\nGet or set the `scrollSpeed` option, after initialization:\n\n``` javascript\n// Getter\nvar scrollSpeed = $( \".selector\" ).sortable( \"option\", \"scrollSpeed\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"scrollSpeed\", 40 );\n```\n\n### tolerance\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"intersect\"`\n\nSpecifies which mode to use for testing whether the item being moved is hovering over another item. Possible values:\n\n- `\"intersect\"`: The item overlaps the other item by at least 50%.\n- `\"pointer\"`: The mouse pointer overlaps the other item.\n\n**Code examples:**\n\nInitialize the sortable with the `tolerance` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  tolerance: \"pointer\"\n});\n```\n\nGet or set the `tolerance` option, after initialization:\n\n``` javascript\n// Getter\nvar tolerance = $( \".selector\" ).sortable( \"option\", \"tolerance\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"tolerance\", \"pointer\" );\n```\n\n### zIndex\n\n**Type:** [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `1000`\n\nZ-index for element/helper while being sorted.\n\n**Code examples:**\n\nInitialize the sortable with the `zIndex` option specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  zIndex: 9999\n});\n```\n\nGet or set the `zIndex` option, after initialization:\n\n``` javascript\n// Getter\nvar zIndex = $( \".selector\" ).sortable( \"option\", \"zIndex\" );\n \n// Setter\n$( \".selector\" ).sortable( \"option\", \"zIndex\", 9999 );\n```\n\n## Methods\n\n### cancel()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCancels a change in the current sortable and reverts it to the state prior to when the current sort was started. Useful in the stop and receive callback functions.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the cancel method:\n\n``` javascript\n$( \".selector\" ).sortable( \"cancel\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the sortable functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).sortable( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the sortable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).sortable( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the sortable.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).sortable( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the sortable's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the sortable plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).sortable( \"instance\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).sortable( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current sortable options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).sortable( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the sortable option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).sortable( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the sortable.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).sortable( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefresh the sortable items. Triggers the reloading of all sortable items, causing new items to be recognized.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).sortable( \"refresh\" );\n```\n\n### refreshPositions()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRefresh the cached positions of the sortable items. Calling this method refreshes the cached item positions of all sortables.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refreshPositions method:\n\n``` javascript\n$( \".selector\" ).sortable( \"refreshPositions\" );\n```\n\n### serialize( options )Returns: [String](http://api.jquery.com/Types/#String)\n\nSerializes the sortable's item `id`s into a form/ajax submittable string. Calling this method produces a hash that can be appended to any url to easily submit a new item order back to the server.\n\nIt works by default by looking at the `id` of each item in the format `\"setname_number\"`, and it spits out a hash like `\"setname[]=number&setname[]=number\"`.\n\n*Note: If serialize returns an empty string, make sure the `id` attributes include an underscore. They must be in the form: `\"set_number\"` For example, a 3 element list with `id` attributes `\"foo_1\"`, `\"foo_5\"`, `\"foo_2\"` will serialize to `\"foo[]=1&foo[]=5&foo[]=2\"`. You can use an underscore, equal sign or hyphen to separate the set and number. For example `\"foo=1\"`, `\"foo-1\"`, and `\"foo_1\"` all serialize to `\"foo[]=1\"`.*\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  Options to customize the serialization.\n\n  - **key** (default: `the part of the attribute in front of the separator`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    Replaces `part1[]` with the specified value.\n\n  - **attribute** (default: `\"id\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The name of the attribute to use for the values.\n\n  - **expression** (default: `/(.+)[-=_](.+)/`)\n\n    Type: [RegExp](http://api.jquery.com/Types/#RegExp)\n\n    A regular expression used to split the attribute value into key and value parts.\n\n**Code examples:**\n\nInvoke the serialize method:\n\n``` javascript\nvar sorted = $( \".selector\" ).sortable( \"serialize\", { key: \"sort\" } );\n```\n\n### toArray( options )Returns: [Array](http://api.jquery.com/Types/#Array)\n\nSerializes the sortable's item id's into an array of string.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  Options to customize the serialization.\n\n  - **attribute** (default: `\"id\"`)\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The name of the attribute to use for the values.\n\n**Code examples:**\n\nInvoke the toArray method:\n\n``` javascript\nvar sortedIDs = $( \".selector\" ).sortable( \"toArray\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the sortable element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).sortable( \"widget\" );\n```\n\n## Events\n\n### activate( event, ui )Type: `sortactivate`\n\nThis event is triggered when using connected lists, every connected list on drag start receives it.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the activate callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  activate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"sortactivate\", function( event, ui ) {} );\n```\n\n### beforeStop( event, ui )Type: `sortbeforestop`\n\nThis event is triggered when sorting stops, but when the placeholder/helper is still available.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the beforeStop callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  beforeStop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortbeforestop event:\n\n``` javascript\n$( \".selector\" ).on( \"sortbeforestop\", function( event, ui ) {} );\n```\n\n### change( event, ui )Type: `sortchange`\n\nThis event is triggered during sorting, but only when the DOM position has changed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the change callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortchange event:\n\n``` javascript\n$( \".selector\" ).on( \"sortchange\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `sortcreate`\n\nTriggered when the sortable is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the sortable with the create callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"sortcreate\", function( event, ui ) {} );\n```\n\n### deactivate( event, ui )Type: `sortdeactivate`\n\nThis event is triggered when sorting was stopped, is propagated to all possible connected lists.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the deactivate callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  deactivate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortdeactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"sortdeactivate\", function( event, ui ) {} );\n```\n\n### out( event, ui )Type: `sortout`\n\nThis event is triggered when a sortable item is moved away from a sortable list.\n\n*Note: This event is also triggered when a sortable item is dropped.*\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the out callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  out: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortout event:\n\n``` javascript\n$( \".selector\" ).on( \"sortout\", function( event, ui ) {} );\n```\n\n### over( event, ui )Type: `sortover`\n\nThis event is triggered when a sortable item is moved into a sortable list.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the over callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  over: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortover event:\n\n``` javascript\n$( \".selector\" ).on( \"sortover\", function( event, ui ) {} );\n```\n\n### receive( event, ui )Type: `sortreceive`\n\nThis event is triggered when an item from a connected sortable list has been dropped into another list. The latter is the event target.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the receive callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  receive: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortreceive event:\n\n``` javascript\n$( \".selector\" ).on( \"sortreceive\", function( event, ui ) {} );\n```\n\n### remove( event, ui )Type: `sortremove`\n\nThis event is triggered when a sortable item from the list has been dropped into another. The former is the event target.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the remove callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  remove: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortremove event:\n\n``` javascript\n$( \".selector\" ).on( \"sortremove\", function( event, ui ) {} );\n```\n\n### sort( event, ui )Type: `sort`\n\nThis event is triggered during sorting.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the sort callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  sort: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sort event:\n\n``` javascript\n$( \".selector\" ).on( \"sort\", function( event, ui ) {} );\n```\n\n### start( event, ui )Type: `sortstart`\n\nThis event is triggered when sorting starts.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the start callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortstart event:\n\n``` javascript\n$( \".selector\" ).on( \"sortstart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `sortstop`\n\nThis event is triggered when sorting has stopped.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortstop event:\n\n``` javascript\n$( \".selector\" ).on( \"sortstop\", function( event, ui ) {} );\n```\n\n### update( event, ui )Type: `sortupdate`\n\nThis event is triggered when the user stopped sorting and the DOM position has changed.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **helper**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the helper being sorted.\n\n  - **item**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the current dragged element.\n\n  - **offset**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current absolute position of the helper represented as `{ top, left }`.\n\n  - **position**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The current position of the helper represented as `{ top, left }`.\n\n  - **originalPosition**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The original position of the element represented as `{ top, left }`.\n\n  - **sender**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The sortable that the item comes from if moving from one sortable to another.\n\n  - **placeholder**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The jQuery object representing the element being used as a placeholder.\n\n**Code examples:**\n\nInitialize the sortable with the update callback specified:\n\n``` javascript\n$( \".selector\" ).sortable({\n  update: function( event, ui ) {}\n});\n```\n\nBind an event listener to the sortupdate event:\n\n``` javascript\n$( \".selector\" ).on( \"sortupdate\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Sortable.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>sortable demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<ul id=\"sortable\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n  <li>Item 5</li>\n</ul>\n \n<script>$(\"#sortable\").sortable();</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/sortable](https://api.jqueryui.com/sortable)"
- name: Spinner
  id: spinner
  summary: 'Description: Enhance a text input for entering numeric values, with up/down buttons and arrow key handling'
  description: "# Spinner Widget\n\n## Spinner Widgetversion added: 1.9\n\n**Description:** Enhance a text input for entering numeric values, with up/down buttons and arrow key handling.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[culture](#option-culture)\n\n[disabled](#option-disabled)\n\n[icons](#option-icons)\n\n[incremental](#option-incremental)\n\n[max](#option-max)\n\n[min](#option-min)\n\n[numberFormat](#option-numberFormat)\n\n[page](#option-page)\n\n[step](#option-step)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[isValid](#method-isValid)\n\n[option](#method-option)\n\n[pageDown](#method-pageDown)\n\n[pageUp](#method-pageUp)\n\n[stepDown](#method-stepDown)\n\n[stepUp](#method-stepUp)\n\n[value](#method-value)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_buttonHtml](#method-_buttonHtml)\n\n[\\_uiSpinnerHtml](#method-_uiSpinnerHtml)\n\n### Events\n\n[change](#event-change)\n\n[create](#event-create)\n\n[spin](#event-spin)\n\n[start](#event-start)\n\n[stop](#event-stop)\n\nThe Spinner, or number stepper widget, is perfect for handling all kinds of numeric input. It allows users to type a value directly, or modify an existing value by spinning with the keyboard, mouse or scrollwheel. When combined with [Globalize](https://github.com/jquery/globalize), you can even spin currencies and dates in a variety of locales.\n\nSpinner wraps a text input with two buttons to increment and decrement the current value. Key events are added so that the same incrementing and decrementing can be done with the keyboard. Spinner delegates to [Globalize](https://github.com/jquery/globalize) for number formatting and parsing.\n\nSpinner currently supports Globalize 0.x only. Support for Globalize 1.x is currently not planned.\n\n### Keyboard interaction\n\n- `UP`: Increment the value by one step.\n- `DOWN`: Decrement the value by one step.\n- `PAGE UP`: Increment the value by one page.\n- `PAGE DOWN`: Decrement the value by one page.\n\nFocus stays in the text field, even after using the mouse to click one of the spin buttons.\n\nWhen the spinner is not read only (`<input readonly>`), the user may enter text that causes an invalid value (below min, above max, step mismatch, non-numeric input). Whenever a step is taken, either programmatically or via the step buttons, the value will be forced to a valid value (see the description for [`stepUp()`](#method-stepUp) and [`stepDown()`](#method-stepDown) for more details).\n\n### Theming\n\nThe spinner widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If spinner specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-spinner`: The outer container of the spinner.\n  - `ui-spinner-input`: The `<input>` element that the Spinner widget was instantiated with.\n  - `ui-spinner-button`: The button controls used to increment and decrement the spinner's value. The up button will additionally have a `ui-spinner-up` class and the down button will additionally have a `ui-spinner-down` class.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Button](button)\n- [Globalize](https://github.com/jquery/globalize) (external, optional; for use with the [`culture`](#option-culture) and [`numberFormat`](#option-numberFormat) options)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n- This widget manipulates its element's value programmatically, therefore a native `change` event may not be fired when the element's value changes.\n- Creating a spinner on an `<input type=\"number\">` is not supported due to a UI conflict with the native spinner.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-spinner\": \"ui-corner-all\",\n  \"ui-spinner-down\": \"ui-corner-br\",\n  \"ui-spinner-up\": \"ui-corner-tr\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the spinner with the `classes` option specified, changing the theming for the `ui-spinner` class:\n\n``` javascript\n$( \".selector\" ).spinner({\n  classes: {\n    \"ui-spinner\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-spinner` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).spinner( \"option\", \"classes.ui-spinner\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"classes.ui-spinner\", \"highlight\" );\n```\n\n### culture\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nSets the culture to use for parsing and formatting the value. If `null`, the currently set culture in `Globalize` is used, see [Globalize docs](https://github.com/jquery/globalize) for available cultures. Only relevant if the [`numberFormat`](#option-numberFormat) option is set. Requires [Globalize](https://github.com/jquery/globalize) to be included.\n\n**Code examples:**\n\nInitialize the spinner with the `culture` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  culture: \"fr\"\n});\n```\n\nGet or set the `culture` option, after initialization:\n\n``` javascript\n// Getter\nvar culture = $( \".selector\" ).spinner( \"option\", \"culture\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"culture\", \"fr\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the spinner if set to `true`.\n\n**Code examples:**\n\nInitialize the spinner with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).spinner( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"disabled\", true );\n```\n\n### icons\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ down: \"ui-icon-triangle-1-s\", up: \"ui-icon-triangle-1-n\" }`\n\nIcons to use for buttons, matching [an icon provided by the jQuery UI CSS Framework](theming/icons).\n\n- up (string, default: \"ui-icon-triangle-1-n\")\n- down (string, default: \"ui-icon-triangle-1-s\")\n\n**Code examples:**\n\nInitialize the spinner with the `icons` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  icons: { down: \"custom-down-icon\", up: \"custom-up-icon\" }\n});\n```\n\nGet or set the `icons` option, after initialization:\n\n``` javascript\n// Getter\nvar icons = $( \".selector\" ).spinner( \"option\", \"icons\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"icons\", { down: \"custom-down-icon\", up: \"custom-up-icon\" } );\n```\n\n### incremental\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Function](http://api.jquery.com/Types/#Function)( [Integer](http://api.jquery.com/Types/#Integer) count )\n\n**Default:** `true`\n\nControls the number of steps taken when holding down a spin button.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `true`, the stepping delta will increase when spun incessantly. When set to `false`, all steps are equal (as defined by the [`step`](#option-step) option).\n- **Function**: Receives one parameter: the number of spins that have occurred. Must return the number of steps that should occur for the current spin.\n\n**Code examples:**\n\nInitialize the spinner with the `incremental` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  incremental: false\n});\n```\n\nGet or set the `incremental` option, after initialization:\n\n``` javascript\n// Getter\nvar incremental = $( \".selector\" ).spinner( \"option\", \"incremental\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"incremental\", false );\n```\n\n### max\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThe maximum allowed value. The element's `max` attribute is used if it exists and the option is not explicitly set. If `null`, there is no maximum enforced.\n\n**Multiple types supported:**\n\n- **Number**: The maximum value.\n- **String**: If [Globalize](https://github.com/jquery/globalize) is included, the `max` option can be passed as a string which will be parsed based on the [`numberFormat`](#opiton-numberFormat) and [`culture`](#option-culture) options; otherwise it will fall back to the native `parseFloat()` method.\n\n**Code examples:**\n\nInitialize the spinner with the `max` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  max: 50\n});\n```\n\nGet or set the `max` option, after initialization:\n\n``` javascript\n// Getter\nvar max = $( \".selector\" ).spinner( \"option\", \"max\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"max\", 50 );\n```\n\n### min\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nThe minimum allowed value. The element's `min` attribute is used if it exists and the option is not explicitly set. If `null`, there is no minimum enforced.\n\n**Multiple types supported:**\n\n- **Number**: The minimum value.\n- **String**: If [Globalize](https://github.com/jquery/globalize) is included, the `min` option can be passed as a string which will be parsed based on the [`numberFormat`](#opiton-numberFormat) and [`culture`](#option-culture) options; otherwise it will fall back to the native `parseFloat()` method.\n\n**Code examples:**\n\nInitialize the spinner with the `min` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  min: 0\n});\n```\n\nGet or set the `min` option, after initialization:\n\n``` javascript\n// Getter\nvar min = $( \".selector\" ).spinner( \"option\", \"min\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"min\", 0 );\n```\n\n### numberFormat\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nFormat of numbers passed to [`Globalize`](https://github.com/jquery/globalize), if available. Most common are `\"n\"` for a decimal number and `\"C\"` for a currency value. Also see the [`culture`](#option-culture) option.\n\n**Code examples:**\n\nInitialize the spinner with the `numberFormat` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  numberFormat: \"n\"\n});\n```\n\nGet or set the `numberFormat` option, after initialization:\n\n``` javascript\n// Getter\nvar numberFormat = $( \".selector\" ).spinner( \"option\", \"numberFormat\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"numberFormat\", \"n\" );\n```\n\n### page\n\n**Type:** [Number](http://api.jquery.com/Types/#Number)\n\n**Default:** `10`\n\nThe number of steps to take when paging via the [`pageUp`](#method-pageUp)/[`pageDown`](#method-pageDown) methods.\n\n**Code examples:**\n\nInitialize the spinner with the `page` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  page: 5\n});\n```\n\nGet or set the `page` option, after initialization:\n\n``` javascript\n// Getter\nvar page = $( \".selector\" ).spinner( \"option\", \"page\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"page\", 5 );\n```\n\n### step\n\n**Type:** [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n**Default:** `1`\n\nThe size of the step to take when spinning via buttons or via the [`stepUp()`](#method-stepUp)/[`stepDown()`](#method-stepDown) methods. The element's `step` attribute is used if it exists and the option is not explicitly set.\n\n**Multiple types supported:**\n\n- **Number**: The size of the step.\n- **String**: If [Globalize](https://github.com/jquery/globalize) is included, the `step` option can be passed as a string which will be parsed based on the [`numberFormat`](#opiton-numberFormat) and [`culture`](#option-culture) options, otherwise it will fall back to the native `parseFloat`.\n\n**Code examples:**\n\nInitialize the spinner with the `step` option specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  step: 2\n});\n```\n\nGet or set the `step` option, after initialization:\n\n``` javascript\n// Getter\nvar step = $( \".selector\" ).spinner( \"option\", \"step\" );\n \n// Setter\n$( \".selector\" ).spinner( \"option\", \"step\", 2 );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the spinner functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).spinner( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the spinner.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).spinner( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the spinner.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).spinner( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the spinner's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the spinner plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).spinner( \"instance\" );\n```\n\n### isValid()Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nReturns whether the Spinner's value is valid given its [`min`](#option-min), [`max`](#option-max), and [`step`](#option-step).\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the isValid method:\n\n``` javascript\nvar isValid = $( \".selector\" ).spinner( \"isValid\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).spinner( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current spinner options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).spinner( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the spinner option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).spinner( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the spinner.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).spinner( \"option\", { disabled: true } );\n```\n\n### pageDown( \\[pages \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDecrements the value by the specified number of pages, as defined by the [`page`](#option-page) option. Without the parameter, a single page is decremented.\n\nIf the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.\n\nInvoking `pageDown()` will cause [`start`](#event-start), [`spin`](#event-spin), and [`stop`](#event-stop) events to be triggered.\n\n- **pages**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  Number of pages to decrement, defaults to 1.\n\n**Code examples:**\n\nInvoke the pageDown method:\n\n``` javascript\n$( \".selector\" ).spinner( \"pageDown\" );\n```\n\n### pageUp( \\[pages \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nIncrements the value by the specified number of pages, as defined by the [`page`](#option-page) option. Without the parameter, a single page is incremented.\n\nIf the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.\n\nInvoking `pageUp()` will cause [`start`](#event-start), [`spin`](#event-spin), and [`stop`](#event-stop) events to be triggered.\n\n- **pages**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  Number of pages to increment, defaults to 1.\n\n**Code examples:**\n\nInvoke the pageUp method:\n\n``` javascript\n$( \".selector\" ).spinner( \"pageUp\", 10 );\n```\n\n### stepDown( \\[steps \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDecrements the value by the specified number of steps. Without the parameter, a single step is decremented.\n\nIf the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.\n\nInvoking `stepDown()` will cause [`start`](#event-start), [`spin`](#event-spin), and [`stop`](#event-stop) events to be triggered.\n\n- **steps**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  Number of steps to decrement, defaults to 1.\n\n**Code examples:**\n\nInvoke the stepDown method:\n\n``` javascript\n$( \".selector\" ).spinner( \"stepDown\" );\n```\n\n### stepUp( \\[steps \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nIncrements the value by the specified number of steps. Without the parameter, a single step is incremented.\n\nIf the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.\n\nInvoking `stepUp()` will cause [`start`](#event-start), [`spin`](#event-spin), and [`stop`](#event-stop) events to be triggered.\n\n- **steps**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  Number of steps to increment, defaults to 1.\n\n**Code examples:**\n\nInvoke the stepUp method:\n\n``` javascript\n$( \".selector\" ).spinner( \"stepUp\", 5 );\n```\n\n### value()Returns: [Number](http://api.jquery.com/Types/#Number)\n\nGets the current value as a number. The value is parsed based on the [`numberFormat`](#option-numberFormat) and [`culture`](#option-culture) options.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar value = $( \".selector\" ).spinner( \"value\" );\n```\n\n### value( value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\n- **value**\n\n  Type: [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String)\n\n  The value to set. If passed as a string, the value is parsed based on the [`numberFormat`](#option-numberFormat) and [`culture`](#option-culture) options.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).spinner( \"value\", 50 );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the generated wrapper.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).spinner( \"widget\" );\n```\n\n## Extension Points\n\nThe spinner widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_buttonHtml()Returns: [String](http://api.jquery.com/Types/#String)\n\nMethod that returns HTML to use for the spinner's increment and decrement buttons. Each button must be given a `ui-spinner-button` class name for the associated events to work.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nUse `<button>` elements for the increment and decrement buttons.\n\n``` javascript\n_buttonHtml: function() {\n  return \"\" +\n    \"<button class='ui-spinner-button ui-spinner-up'>\" +\n      \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" +\n    \"</button>\" +\n    \"<button class='ui-spinner-button ui-spinner-down'>\" +\n      \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" +\n    \"</button>\";\n}\n```\n\n### \\_uiSpinnerHtml()Returns: [String](http://api.jquery.com/Types/#String)\n\nMethod that determines the HTML to use to wrap the spinner's `<input>` element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nWrap the spinner with a `<div>` with no rounded corners.\n\n``` javascript\n_uiSpinnerHtml: function() {\n  return \"<div class='ui-spinner ui-widget ui-widget-content'></div>\";\n}\n```\n\n## Events\n\n### change( event, ui )Type: `spinchange`\n\nTriggered when the value of the spinner has changed and the input is no longer focused.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the spinner with the change callback specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  change: function( event, ui ) {}\n});\n```\n\nBind an event listener to the spinchange event:\n\n``` javascript\n$( \".selector\" ).on( \"spinchange\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `spincreate`\n\nTriggered when the spinner is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the spinner with the create callback specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the spincreate event:\n\n``` javascript\n$( \".selector\" ).on( \"spincreate\", function( event, ui ) {} );\n```\n\n### spin( event, ui )Type: `spin`\n\nTriggered during increment/decrement (to determine direction of spin compare current value with `ui.value`).\n\nCan be canceled, preventing the value from being updated.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **value**\n\n    Type: [Number](http://api.jquery.com/Types/#Number)\n\n    The new value to be set, unless the event is cancelled.\n\n**Code examples:**\n\nInitialize the spinner with the spin callback specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  spin: function( event, ui ) {}\n});\n```\n\nBind an event listener to the spin event:\n\n``` javascript\n$( \".selector\" ).on( \"spin\", function( event, ui ) {} );\n```\n\n### start( event, ui )Type: `spinstart`\n\nTriggered before a spin. Can be canceled, preventing the spin from occurring.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the spinner with the start callback specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  start: function( event, ui ) {}\n});\n```\n\nBind an event listener to the spinstart event:\n\n``` javascript\n$( \".selector\" ).on( \"spinstart\", function( event, ui ) {} );\n```\n\n### stop( event, ui )Type: `spinstop`\n\nTriggered after a spin.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the spinner with the stop callback specified:\n\n``` javascript\n$( \".selector\" ).spinner({\n  stop: function( event, ui ) {}\n});\n```\n\nBind an event listener to the spinstop event:\n\n``` javascript\n$( \".selector\" ).on( \"spinstop\", function( event, ui ) {} );\n```\n\n## Example:\n\nPlain number spinner\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>spinner demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<input id=\"spinner\">\n \n<script>\n$( \"#spinner\" ).spinner();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/spinner](https://api.jqueryui.com/spinner)"
- name: Stacking elements
  id: theming/stacking-elements
  summary: Widgets that stack, or move in front of other elements, often present challenges when placed into real world pages
  description: "# Stacking Elements\n\nWidgets that stack, or move in front of other elements, often present challenges when placed into real world pages. It's usually easy to either change the `z-index` or the parent of the stacked element to avoid any collisions on the page. However, jQuery UI needs a generic solution that doesn't require manually playing with `z-index` values. This is accomplished via the `ui-front` class, and usually an accompanying `appendTo` option on stacking widgets.\n\n## The `ui-front` class\n\nThe `ui-front` class is very basic. It just sets a static `z-index` value on the element. However, the existence of the class is used to indicate that an element is a stacking element, which indicates where additional stacking elements should be appended. This allows us to take advantage of nested stacking contexts, resulting in a default DOM position that works for most use cases.\n\n*Note: When using `ui-front`, you must also set `position` to `relative`, `absolute` or `fixed` in order for the `z-index` to be applied.*\n\n## The stacking technique\n\nAny widget that appends a stacking element to the page must use the `ui-front` class, and in many cases should have an `appendTo` option. The following logic should be applied to the stacking element:\n\n- If a value is provided for the `appendTo` option, then append the stacking element to the specified element.\n- If the `appendTo` option is set to `null` (default), then the widget should walk up the DOM from the associated element. For example, when the autocomplete menu is appended to the DOM, the walking starts from the associated input element.\n  - If another stacking element is found, append to that element.\n  - If no other stacking elements are found, append to the body.\n- The stacking element must also have `position` set to `relative`, `absolute`, or `fixed` in order for the `z-index` from the `ui-front` class to be applied. Using [.position()](../position) will automatically set `position`.\n\nStacking elements are defined as elements with the `ui-front` class, or any native element that creates a new stacking context. Currently, `<dialog>` is the only native element that is considered a stacking element.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/theming/stacking-elements](https://api.jqueryui.com/theming/stacking-elements)"
- name: Tabs
  id: tabs
  summary: 'Description: A single content area with multiple panels, each associated with a header in a list'
  description: "# Tabs Widget\n\n## Tabs Widgetversion added: 1.0\n\n**Description:** A single content area with multiple panels, each associated with a header in a list.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[active](#option-active)\n\n[classes](#option-classes)\n\n[collapsible](#option-collapsible)\n\n[disabled](#option-disabled)\n\n[event](#option-event)\n\n[heightStyle](#option-heightStyle)\n\n[hide](#option-hide)\n\n[show](#option-show)\n\n### Methods\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[load](#method-load)\n\n[option](#method-option)\n\n[refresh](#method-refresh)\n\n[widget](#method-widget)\n\n  \n\n### Extension Points\n\n[\\_getList](#method-_getList)\n\n### Events\n\n[activate](#event-activate)\n\n[beforeActivate](#event-beforeActivate)\n\n[beforeLoad](#event-beforeLoad)\n\n[create](#event-create)\n\n[load](#event-load)\n\nTabs are generally used to break content into multiple sections that can be swapped to save space, much like an accordion.\n\nTabs have a particular set of markup that must be used in order for them to work properly:\n\n- The tabs themselves must be in either an ordered (`<ol>`) or unordered (`<ul>`) list\n- Each tab \"title\" must be inside of a list item (`<li>`) and wrapped by an anchor (`<a>`) with an `href` attribute\n- Each tab panel may be any valid element but it must have an id which corresponds to the hash in the anchor of the associated tab.\n\nThe content for each tab panel can be defined in-page or can be loaded via Ajax; both are handled automatically based on the `href` of the anchor associated with the tab. By default tabs are activated on click, but the events can be changed to hover via the [`event`](#option-event) option.\n\nBelow is some sample markup:\n\n``` markup\n<div id=\"tabs\">\n  <ul>\n    <li><a href=\"#fragment-1\">One</a></li>\n    <li><a href=\"#fragment-2\">Two</a></li>\n    <li><a href=\"#fragment-3\">Three</a></li>\n  </ul>\n  <div id=\"fragment-1\">\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n  </div>\n  <div id=\"fragment-2\">\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n  </div>\n  <div id=\"fragment-3\">\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n  </div>\n</div>\n```\n\n### Keyboard interaction\n\nWhen focus is on a tab, the following key commands are available:\n\n- `UP`/`LEFT`: Move focus to the previous tab. If on first tab, moves focus to last tab. Activate focused tab after a short delay.\n- `DOWN`/`RIGHT`: Move focus to the next tab. If on last tab, moves focus to first tab. Activate focused tab after a short delay.\n- `CTRL` + `UP`/`LEFT`: Move focus to the previous tab. If on first tab, moves focus to last tab. The focused tab must be manually activated.\n- `CTRL` + `DOWN`/`RIGHT`: Move focus to the next tab. If on last tab, moves focus to first tab. The focused tab must be manually activated.\n- `HOME`: Move focus to the first tab. Activate focused tab after a short delay.\n- `END`: Move focus to the last tab. Activate focused tab after a short delay.\n- `CTRL` + `HOME`: Move focus to the first tab. The focused tab must be manually activated.\n- `CTRL` + `END`: Move focus to the last tab. The focused tab must be manually activated.\n- `SPACE`: Activate panel associated with focused tab.\n- `ENTER`: Activate or toggle panel associated with focused tab.\n- `ALT`/`OPTION` + `PAGE UP`: Move focus to the previous tab and immediately activate.\n- `ALT`/`OPTION` + `PAGE DOWN`: Move focus to the next tab and immediately activate.\n\nWhen focus is in a panel, the following key commands are available:\n\n- `CTRL` + `UP`: Move focus to associated tab.\n- `ALT`/`OPTION` + `PAGE UP`: Move focus to the previous tab and immediately activate.\n- `ALT`/`OPTION` + `PAGE DOWN`: Move focus to the next tab and immediately activate.\n\n### Theming\n\nThe tabs widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If tabs specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-tabs`: The outer container of the tabs. This element will additionally have a class of `ui-tabs-collapsible` when the [`collapsible` option](#option-collapsible) is set.\n  - `ui-tabs-nav`: The list of tabs.\n    - `ui-tabs-tab`: One of the items in the list of tabs.The active item will have the `ui-tabs-active` class. Any list item whose associated content is loading via an Ajax call will have the `ui-tabs-loading` class.\n      - `ui-tabs-anchor`: The anchors used to switch panels.\n  - `ui-tabs-panel`: The panels associated with the tabs. Only the panel whose corresponding tab is active will be visible.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Effects Core](category/effects-core) (optional; for use with the [`show`](#option-show) and [`hide`](#option-hide) options)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### active\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Integer](http://api.jquery.com/Types/#Integer)\n\n**Default:** `0`\n\nWhich panel is currently open.\n\n**Multiple types supported:**\n\n- **Boolean**: Setting `active` to `false` will collapse all panels. This requires the [`collapsible`](#option-collapsible) option to be `true`.\n- **Integer**: The zero-based index of the panel that is active (open). A negative value selects panels going backward from the last panel.\n\n**Code examples:**\n\nInitialize the tabs with the `active` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  active: 1\n});\n```\n\nGet or set the `active` option, after initialization:\n\n``` javascript\n// Getter\nvar active = $( \".selector\" ).tabs( \"option\", \"active\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"active\", 1 );\n```\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-tabs\": \"ui-corner-all\",\n  \"ui-tabs-nav\": \"ui-corner-all\",\n  \"ui-tabs-tab\": \"ui-corner-top\",\n  \"ui-tabs-panel\": \"ui-corner-bottom\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the tabs with the `classes` option specified, changing the theming for the `ui-tabs` class:\n\n``` javascript\n$( \".selector\" ).tabs({\n  classes: {\n    \"ui-tabs\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-tabs` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).tabs( \"option\", \"classes.ui-tabs\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"classes.ui-tabs\", \"highlight\" );\n```\n\n### collapsible\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhen set to `true`, the active panel can be closed.\n\n**Code examples:**\n\nInitialize the tabs with the `collapsible` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  collapsible: true\n});\n```\n\nGet or set the `collapsible` option, after initialization:\n\n``` javascript\n// Getter\nvar collapsible = $( \".selector\" ).tabs( \"option\", \"collapsible\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"collapsible\", true );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Array](http://api.jquery.com/Types/#Array)\n\n**Default:** `false`\n\nWhich tabs are disabled.\n\n**Multiple types supported:**\n\n- **Boolean**: Enable or disable all tabs.\n- **Array**: An array containing the zero-based indexes of the tabs that should be disabled, e.g., `[ 0, 2 ]` would disable the first and third tab.\n\n**Code examples:**\n\nInitialize the tabs with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  disabled: [ 0, 2 ]\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).tabs( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"disabled\", [ 0, 2 ] );\n```\n\n### event\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"click\"`\n\nThe type of event that the tabs should react to in order to activate the tab. To activate on hover, use `\"mouseover\"`.\n\n**Code examples:**\n\nInitialize the tabs with the `event` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  event: \"mouseover\"\n});\n```\n\nGet or set the `event` option, after initialization:\n\n``` javascript\n// Getter\nvar event = $( \".selector\" ).tabs( \"option\", \"event\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"event\", \"mouseover\" );\n```\n\n### heightStyle\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `\"content\"`\n\nControls the height of the tabs widget and each panel. Possible values:\n\n- `\"auto\"`: All panels will be set to the height of the tallest panel.\n- `\"fill\"`: Expand to the available height based on the tabs' parent height.\n- `\"content\"`: Each panel will be only as tall as its content.\n\n**Code examples:**\n\nInitialize the tabs with the `heightStyle` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  heightStyle: \"fill\"\n});\n```\n\nGet or set the `heightStyle` option, after initialization:\n\n``` javascript\n// Getter\nvar heightStyle = $( \".selector\" ).tabs( \"option\", \"heightStyle\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"heightStyle\", \"fill\" );\n```\n\n### hide\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the hiding of the panel.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the panel will be hidden immediately. When set to `true`, the panel will fade out with the default duration and the default easing.\n- **Number**: The panel will fade out with the specified duration and the default easing.\n- **String**: The panel will be hidden using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideUp\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeOut\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the tabs with the `hide` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  hide: { effect: \"explode\", duration: 1000 }\n});\n```\n\nGet or set the `hide` option, after initialization:\n\n``` javascript\n// Getter\nvar hide = $( \".selector\" ).tabs( \"option\", \"hide\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"hide\", { effect: \"explode\", duration: 1000 } );\n```\n\n### show\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the showing of the panel.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the panel will be shown immediately. When set to `true`, the panel will fade in with the default duration and the default easing.\n- **Number**: The panel will fade in with the specified duration and the default easing.\n- **String**: The panel will be shown using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideDown\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeIn\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the tabs with the `show` option specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  show: { effect: \"blind\", duration: 800 }\n});\n```\n\nGet or set the `show` option, after initialization:\n\n``` javascript\n// Getter\nvar show = $( \".selector\" ).tabs( \"option\", \"show\" );\n \n// Setter\n$( \".selector\" ).tabs( \"option\", \"show\", { effect: \"blind\", duration: 800 } );\n```\n\n## Methods\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the tabs functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).tabs( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables all tabs.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"disable\" );\n```\n\n### disable( index )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables a tab. The selected tab cannot be disabled. To disable more than one tab at once, set the [`disabled`](#option-disabled) option: `$( \"#tabs\" ).tabs( \"option\", \"disabled\", [ 1, 2, 3 ] )`.\n\n- **index**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The zero-based index of the tab to disable.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"disable\", 1 );\n```\n\n### disable( href )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables a tab. The selected tab cannot be disabled.\n\n- **href**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The `href` of the tab to disable.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"disable\", \"#foo\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables all tabs.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"enable\" );\n```\n\n### enable( index )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables a tab. To enable more than one tab at once reset the disabled property like: `$( \"#example\" ).tabs( \"option\", \"disabled\", [] );`.\n\n- **index**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The zero-based index of the tab to enable.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"enable\", 1 );\n```\n\n### enable( href )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables a tab.\n\n- **href**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The `href` of the tab to enable.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"enable\", \"#foo\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the tabs's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the tabs plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).tabs( \"instance\" );\n```\n\n### load( index )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nLoads the panel content of a remote tab.\n\n- **index**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The zero-based index of the tab to load.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"load\", 1 );\n```\n\n### load( href )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nLoads the panel content of a remote tab.\n\n- **href**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The `href` of the tab to load.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"load\", \"#foo\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).tabs( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current tabs options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).tabs( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the tabs option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the tabs.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tabs( \"option\", { disabled: true } );\n```\n\n### refresh()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nProcess any tabs that were added or removed directly in the DOM and recompute the height of the tab panels. Results depend on the content and the [`heightStyle`](#option-heightStyle) option.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the refresh method:\n\n``` javascript\n$( \".selector\" ).tabs( \"refresh\" );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the tabs container.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).tabs( \"widget\" );\n```\n\n## Extension Points\n\nThe tabs widget is built with the [widget factory](jquery.widget) and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the [plugin methods](#methods) listed above. For more information on widget extensions, see [Extending Widgets with the Widget Factory](http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/).\n\n### \\_getList()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nDetermine which list should be converted to tabs. By default the first descendant list is used.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nUse the list with the class `my-tabs` or fall back to the default implementation.\n\n``` javascript\n_getList: function() {\n  var list = this.element.find( \".my-tabs\" );\n  return list.length ? list.eq( 0 ) : this._super();\n}\n```\n\n## Events\n\n### activate( event, ui )Type: `tabsactivate`\n\nTriggered after a tab has been activated (after animation completes). If the tabs were previously collapsed, `ui.oldTab` and `ui.oldPanel` will be empty jQuery objects. If the tabs are collapsing, `ui.newTab` and `ui.newPanel` will be empty jQuery objects.\n\n**Note:** Since the `activate` event is only fired on tab activation, it is not fired for the initial tab when the tabs widget is created. If you need a hook for widget creation use the [`create`](#event-create) event.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **newTab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that was just activated.\n\n  - **oldTab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that was just deactivated.\n\n  - **newPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that was just activated.\n\n  - **oldPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that was just deactivated.\n\n**Code examples:**\n\nInitialize the tabs with the activate callback specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  activate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tabsactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"tabsactivate\", function( event, ui ) {} );\n```\n\n### beforeActivate( event, ui )Type: `tabsbeforeactivate`\n\nTriggered immediately before a tab is activated. Can be canceled to prevent the tab from activating. If the tabs are currently collapsed, `ui.oldTab` and `ui.oldPanel` will be empty jQuery objects. If the tabs are collapsing, `ui.newTab` and `ui.newPanel` will be empty jQuery objects.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **newTab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that is about to be activated.\n\n  - **oldTab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that is about to be deactivated.\n\n  - **newPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that is about to be activated.\n\n  - **oldPanel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel that is about to be deactivated.\n\n**Code examples:**\n\nInitialize the tabs with the beforeActivate callback specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  beforeActivate: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tabsbeforeactivate event:\n\n``` javascript\n$( \".selector\" ).on( \"tabsbeforeactivate\", function( event, ui ) {} );\n```\n\n### beforeLoad( event, ui )Type: `tabsbeforeload`\n\nTriggered when a remote tab is about to be loaded, after the [`beforeActivate`](#event-beforeActivate) event. Can be canceled to prevent the tab panel from loading content; though the panel will still be activated. This event is triggered just before the Ajax request is made, so modifications can be made to `ui.jqXHR` and `ui.ajaxSettings`.\n\n*Note: Although `ui.ajaxSettings` is provided and can be modified, some of these properties have already been processed by jQuery. For example, [prefilters](https://api.jquery.com/jQuery.ajaxPrefilter/) have been applied, `data` has been processed, and `type` has been determined. The `beforeLoad` event occurs at the same time, and therefore has the same restrictions, as the `beforeSend` callback from [`jQuery.ajax()`](https://api.jquery.com/jQuery.ajax/).*\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **tab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that is being loaded.\n\n  - **panel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel which will be populated by the Ajax response.\n\n  - **jqXHR**\n\n    Type: [jqXHR](http://api.jquery.com/Types/#jqXHR)\n\n    The `jqXHR` object that is requesting the content.\n\n  - **ajaxSettings**\n\n    Type: [Object](http://api.jquery.com/Types/#Object)\n\n    The properties that will be used by [`jQuery.ajax`](https://api.jquery.com/jQuery.ajax/) to request the content.\n\n**Code examples:**\n\nInitialize the tabs with the beforeLoad callback specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  beforeLoad: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tabsbeforeload event:\n\n``` javascript\n$( \".selector\" ).on( \"tabsbeforeload\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `tabscreate`\n\nTriggered when the tabs are created. If the tabs are collapsed, `ui.tab` and `ui.panel` will be empty jQuery objects.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **tab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The active tab.\n\n  - **panel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The active panel.\n\n**Code examples:**\n\nInitialize the tabs with the create callback specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tabscreate event:\n\n``` javascript\n$( \".selector\" ).on( \"tabscreate\", function( event, ui ) {} );\n```\n\n### load( event, ui )Type: `tabsload`\n\nTriggered after a remote tab has been loaded.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **tab**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The tab that was just loaded.\n\n  - **panel**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The panel which was just populated by the Ajax response.\n\n**Code examples:**\n\nInitialize the tabs with the load callback specified:\n\n``` javascript\n$( \".selector\" ).tabs({\n  load: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tabsload event:\n\n``` javascript\n$( \".selector\" ).on( \"tabsload\", function( event, ui ) {} );\n```\n\n## Example:\n\nA simple jQuery UI Tabs\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>tabs demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div id=\"tabs\">\n  <ul>\n    <li><a href=\"#fragment-1\"><span>One</span></a></li>\n    <li><a href=\"#fragment-2\"><span>Two</span></a></li>\n    <li><a href=\"#fragment-3\"><span>Three</span></a></li>\n  </ul>\n  <div id=\"fragment-1\">\n    <p>First tab is active by default:</p>\n    <pre><code>$( \"#tabs\" ).tabs(); </code></pre>\n  </div>\n  <div id=\"fragment-2\">\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n  </div>\n  <div id=\"fragment-3\">\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n  </div>\n</div>\n \n<script>\n$( \"#tabs\" ).tabs();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/tabs](https://api.jqueryui.com/tabs)"
- name: Tooltip
  id: tooltip
  summary: 'Description: Customizable, themeable tooltips, replacing native tooltips'
  description: "# Tooltip Widget\n\n## Tooltip Widgetversion added: 1.9\n\n**Description:** Customizable, themeable tooltips, replacing native tooltips.\n\n## QuickNav[Examples](#entry-examples)\n\n### Options\n\n[classes](#option-classes)\n\n[content](#option-content)\n\n[disabled](#option-disabled)\n\n[hide](#option-hide)\n\n[items](#option-items)\n\n[position](#option-position)\n\n[show](#option-show)\n\n[tooltipClass](#option-tooltipClass)\n\n[track](#option-track)\n\n### Methods\n\n[close](#method-close)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[open](#method-open)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n### Events\n\n[close](#event-close)\n\n[create](#event-create)\n\n[open](#event-open)\n\nTooltip replaces native tooltips, making them themeable as well as allowing various customizations:\n\n- Display other content than just the title, like inline footnotes or extra content retrieved via Ajax.\n- Customize the positioning, e.g., to center the tooltip above elements.\n- Add extra styling to customize the appearance, for warning or error fields.\n\nA fade animation is used by default to show and hide the tooltip, making the appearance a bit more organic, compared to just toggling the visibility. This can be customized with the [`show`](#option-show) and [`hide`](#option-hide) options.\n\nThe [`items`](#option-items) and [`content`](#option-content) options need to stay in-sync. If you change one of them, you need to change the other.\n\nIn general, disabled elements do not trigger any DOM events. Therefore, it is not possible to properly control tooltips for disabled elements, since we need to listen to events to determine when to show and hide the tooltip. As a result, jQuery UI does not guarantee any level of support for tooltips attached to disabled elements. Unfortunately, this means that if you require tooltips on disabled elements, you may end up with a mixture of native tooltips and jQuery UI tooltips.\n\n### Keyboard interaction\n\nWhen the tooltip is open and the corresponding item has focus, the following key commands are available:\n\n- `ESCAPE`: Close the tooltip.\n\n### Theming\n\nThe tooltip widget uses the [jQuery UI CSS framework](theming/css-framework) to style its look and feel. If tooltip specific styling is needed, the following CSS class names can be used for overrides or as keys for the [`classes` option](#option-classes):\n\n- `ui-tooltip`: The outer container for the tooltip.\n  - `ui-tooltip-content`: The content of the tooltip.\n\n### Dependencies\n\n- [UI Core](category/ui-core)\n- [Widget Factory](jquery.widget)\n- [Position](position)\n- [Effects Core](category/effects-core) (optional; for use with the [`show`](#option-show) and [`hide`](#option-hide) options)\n\n### Additional Notes:\n\n- This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:**\n\n``` javascript\n{\n  \"ui-tooltip\": \"ui-corner-all ui-widget-shadow\"\n}\n```\n\nSpecify additional classes to add to the widget's elements. Any of classes specified in the [Theming section](#theming) can be used as keys to override their value. To learn more about this option, check out the [learn article about the `classes` option](http://learn.jquery.com/jquery-ui/widget-factory/classes-option/).\n\n**Code examples:**\n\nInitialize the tooltip with the `classes` option specified, changing the theming for the `ui-tooltip` class:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  classes: {\n    \"ui-tooltip\": \"highlight\"\n  }\n});\n```\n\nGet or set a property of the `classes` option, after initialization, here reading and changing the theming for the `ui-tooltip` class:\n\n``` javascript\n// Getter\nvar themeClass = $( \".selector\" ).tooltip( \"option\", \"classes.ui-tooltip\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"classes.ui-tooltip\", \"highlight\" );\n```\n\n### content\n\n**Type:** [Function](http://api.jquery.com/Types/#Function)() or [String](http://api.jquery.com/Types/#String) or [Element](http://api.jquery.com/Types/#Element) or [jQuery](http://api.jquery.com/Types/#jQuery)\n\n**Default:** `function returning the title attribute`\n\nThe content of the tooltip.\n\n*When changing this option, you likely need to also change the [`items`](#option-items) option.*\n\n**Multiple types supported:**\n\n- **Function**: A callback which can either return the content directly, or call the first argument, passing in the content, e.g., for Ajax content.\n- **String**: A string of HTML to use for the tooltip content.\n- **Element**: A DOM element to use for the tooltip content.\n- **jQuery**: A jQuery object to use for the tooltip content.\n\n**Code examples:**\n\nInitialize the tooltip with the `content` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  content: \"Awesome title!\"\n});\n```\n\nGet or set the `content` option, after initialization:\n\n``` javascript\n// Getter\nvar content = $( \".selector\" ).tooltip( \"option\", \"content\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"content\", \"Awesome title!\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the tooltip if set to `true`.\n\n**Code examples:**\n\nInitialize the tooltip with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).tooltip( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"disabled\", true );\n```\n\n### hide\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `true`\n\nIf and how to animate the hiding of the tooltip.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the tooltip will be hidden immediately. When set to `true`, the tooltip will fade out with the default duration and the default easing.\n- **Number**: The tooltip will fade out with the specified duration and the default easing.\n- **String**: The tooltip will be hidden using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideUp\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeOut\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the tooltip with the `hide` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  hide: { effect: \"explode\", duration: 1000 }\n});\n```\n\nGet or set the `hide` option, after initialization:\n\n``` javascript\n// Getter\nvar hide = $( \".selector\" ).tooltip( \"option\", \"hide\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"hide\", { effect: \"explode\", duration: 1000 } );\n```\n\n### items\n\n**Type:** [Selector](http://api.jquery.com/Types/#Selector)\n\n**Default:** `[title]`\n\nA selector indicating which items should show tooltips. Customize if you're using something other than the title attribute for the tooltip content, or if you need a different selector for event delegation.\n\n*When changing this option, you likely need to also change the [`content`](#option-content) option.*\n\n**Code examples:**\n\nInitialize the tooltip with the `items` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  items: \"img[alt]\"\n});\n```\n\nGet or set the `items` option, after initialization:\n\n``` javascript\n// Getter\nvar items = $( \".selector\" ).tooltip( \"option\", \"items\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"items\", \"img[alt]\" );\n```\n\n### position\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{ my: \"left top+15\", at: \"left bottom\", collision: \"flipfit\" }`\n\nIdentifies the position of the tooltip in relation to the associated target element. The `of` option defaults to the target element, but you can specify another element to position against. You can refer to the [jQuery UI Position](position) utility for more details about the various options.\n\n**Code examples:**\n\nInitialize the tooltip with the `position` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  position: { my: \"left+15 center\", at: \"right center\" }\n});\n```\n\nGet or set the `position` option, after initialization:\n\n``` javascript\n// Getter\nvar position = $( \".selector\" ).tooltip( \"option\", \"position\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"position\", { my: \"left+15 center\", at: \"right center\" } );\n```\n\n### show\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `true`\n\nIf and how to animate the showing of the tooltip.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the tooltip will be shown immediately. When set to `true`, the tooltip will fade in with the default duration and the default easing.\n- **Number**: The tooltip will fade in with the specified duration and the default easing.\n- **String**: The tooltip will be shown using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideDown\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeIn\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the tooltip with the `show` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  show: { effect: \"blind\", duration: 800 }\n});\n```\n\nGet or set the `show` option, after initialization:\n\n``` javascript\n// Getter\nvar show = $( \".selector\" ).tooltip( \"option\", \"show\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"show\", { effect: \"blind\", duration: 800 } );\n```\n\n### tooltipClass\n\n**Type:** [String](http://api.jquery.com/Types/#String)\n\n**Default:** `null`\n\nA class to add to the widget, can be used to display various tooltip types, like warnings or errors.\n\nThe `tooltipClass` option has been deprecated in favor of the [`classes` option](#option-classes), using the `ui-tooltip` property.\n\n(version deprecated: 1.12)\n\n**Code examples:**\n\nInitialize the tooltip with the `tooltipClass` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  tooltipClass: \"custom-tooltip-styling\"\n});\n```\n\nGet or set the `tooltipClass` option, after initialization:\n\n``` javascript\n// Getter\nvar tooltipClass = $( \".selector\" ).tooltip( \"option\", \"tooltipClass\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"tooltipClass\", \"custom-tooltip-styling\" );\n```\n\n### track\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nWhether the tooltip should track (follow) the mouse.\n\n**Code examples:**\n\nInitialize the tooltip with the `track` option specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  track: true\n});\n```\n\nGet or set the `track` option, after initialization:\n\n``` javascript\n// Getter\nvar track = $( \".selector\" ).tooltip( \"option\", \"track\" );\n \n// Setter\n$( \".selector\" ).tooltip( \"option\", \"track\", true );\n```\n\n## Methods\n\n### close()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCloses a tooltip. This is only intended to be called for non-delegated tooltips.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the close method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"close\" );\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the tooltip functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the destroy method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"destroy\" );\n```\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the tooltip.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the disable method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"disable\" );\n```\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the tooltip.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the enable method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"enable\" );\n```\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the tooltip's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the tooltip plugin has loaded.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the instance method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"instance\" );\n```\n\n### open()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nProgrammatically open a tooltip. This is only intended to be called for non-delegated tooltips.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the open method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"open\" );\n```\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar isDisabled = $( \".selector\" ).tooltip( \"option\", \"disabled\" );\n```\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current tooltip options hash.\n\n- This signature does not accept any arguments.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\nvar options = $( \".selector\" ).tooltip( \"option\" );\n```\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the tooltip option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"option\", \"disabled\", true );\n```\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the tooltip.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n**Code examples:**\n\nInvoke the method:\n\n``` javascript\n$( \".selector\" ).tooltip( \"option\", { disabled: true } );\n```\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the original element.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nInvoke the widget method:\n\n``` javascript\nvar widget = $( \".selector\" ).tooltip( \"widget\" );\n```\n\n## Events\n\n### close( event, ui )Type: `tooltipclose`\n\nTriggered when a tooltip is closed, triggered on `focusout` or `mouseleave`.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **tooltip**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The generated tooltip element.\n\n**Code examples:**\n\nInitialize the tooltip with the close callback specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  close: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tooltipclose event:\n\n``` javascript\n$( \".selector\" ).on( \"tooltipclose\", function( event, ui ) {} );\n```\n\n### create( event, ui )Type: `tooltipcreate`\n\nTriggered when the tooltip is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the tooltip with the create callback specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tooltipcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"tooltipcreate\", function( event, ui ) {} );\n```\n\n### open( event, ui )Type: `tooltipopen`\n\nTriggered when a tooltip is shown, triggered on `focusin` or `mouseover`.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  - **tooltip**\n\n    Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n    The generated tooltip element.\n\n**Code examples:**\n\nInitialize the tooltip with the open callback specified:\n\n``` javascript\n$( \".selector\" ).tooltip({\n  open: function( event, ui ) {}\n});\n```\n\nBind an event listener to the tooltipopen event:\n\n``` javascript\n$( \".selector\" ).on( \"tooltipopen\", function( event, ui ) {} );\n```\n\n## Example:\n\nCreate a tooltip on the document, using event delegation for all elements with a title attribute.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>tooltip demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<p>\n  <a href=\"#\" title=\"Anchor description\">Anchor text</a>\n  <input title=\"Input help\">\n</p>\n<script>\n  $( document ).tooltip();\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/tooltip](https://api.jqueryui.com/tooltip)"
- name: Transfer effect
  id: transfer-effect
  summary: argumental class name the transfer element will receive
  description: "# Transfer Effect\n\n## Transfer Effectversion deprecated: 1.12\n\n**Description:** Transfers the outline of an element to another element\n\n- #### version deprecated: 1.12transfer\n\n  - **className**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    argumental class name the transfer element will receive.\n\n  - **to**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    jQuery selector, the element to transfer to.\n\nVery useful when trying to visualize interaction between two elements.\n\nThe transfer element itself has the class `ui-effects-transfer`, and needs to be styled by you, for example by adding a background or border.\n\nThis effect is deprecated, replaced by the [.transfer()](transfer) method.\n\n## Example:\n\nClicking on the green element transfers to the other.\n\n``` markup\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>transfer demo</title>\n  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css\">\n  <style>\n  div.green {\n    width: 100px;\n    height: 80px;\n    background: green;\n    border: 1px solid black;\n    position: relative;\n  }\n  div.red {\n    margin-top: 10px;\n    width: 50px;\n    height: 30px;\n    background: red;\n    border: 1px solid black;\n    position: relative;\n  }\n  .ui-effects-transfer {\n    border: 1px dotted black;\n  }\n  </style>\n  <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n  <script src=\"//code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>\n</head>\n<body>\n \n<div class=\"green\"></div>\n<div class=\"red\"></div>\n \n<script>\n$( \"div\" ).click(function() {\n  var i = 1 - $( \"div\" ).index( this );\n  $( this ).effect( \"transfer\", { to: $( \"div\" ).eq( i ) }, 1000 );\n});\n</script>\n \n</body>\n</html>\n```\n\n#### Demo:\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/transfer-effect](https://api.jqueryui.com/transfer-effect)"
- name: Widget factory
  id: jquery.widget
  summary: 'Description: Create stateful jQuery plugins using the same abstraction as all jQuery UI widgets'
  description: "# Widget Factory\n\n#### Contents:\n\n- [jQuery.widget( name \\[, base \\], prototype )](#jQuery-widget1)\n  - [jQuery.widget( name \\[, base \\], prototype )](#jQuery-widget-name-base-prototype)\n- [jQuery.Widget](#jQuery-Widget2)\n\n## jQuery.widget( name \\[, base \\], prototype )\n\n**Description:** Create stateful jQuery plugins using the same abstraction as all jQuery UI widgets.\n\n- #### [jQuery.widget( name \\[, base \\], prototype )](#jQuery-widget-name-base-prototype)\n\n  - **name**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The name of the widget to create, including the namespace.\n\n  - **base**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    The base widget to inherit from. This must be a constructor that can be instantiated with the \\`new\\` keyword. Defaults to `jQuery.Widget`.\n\n  - **prototype**\n\n    Type: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\n    The object to use as a prototype for the widget.\n\nYou can create new widgets from scratch, using just the `$.Widget` object as a base to inherit from, or you can explicitly inherit from existing jQuery UI or third-party widgets. Defining a widget with the same name as you inherit from even allows you to extend widgets in place.\n\njQuery UI contains many widgets that maintain state and therefore have a slightly different usage pattern than typical jQuery plugins. All of jQuery UI's widgets use the same patterns, which is defined by the widget factory. So if you learn how to use one widget, then you'll know how to use all of them.\n\nLooking for tutorials about the widget factory? Check out [the articles on the jQuery Learning Center](http://learn.jquery.com/jquery-ui/widget-factory/).\n\n*Note: This documentation shows examples using the [progressbar widget](progressbar) but the syntax is the same for every widget.*\n\n### Initialization\n\nIn order to track the state of the widget, we must introduce a full life cycle for the widget. The life cycle starts when the widget is initialized. To initialize a widget, we simply call the plugin on one or more elements.\n\n``` javascript\n$( \"#elem\" ).progressbar();\n```\n\nThis will initialize each element in the jQuery object, in this case the element with an id of `\"elem\"`.\n\n### Options\n\nBecause `progressbar()` was called with no parameters, the widget was initialized with its default options. We can pass a set of options during initialization to override the defaults:\n\n``` javascript\n$( \"#elem\" ).progressbar({ value: 20 });\n```\n\nWe can pass as many or as few options as we want during initialization. Any options that we don't pass will just use their default values.\n\nYou can pass multiple options arguments. Those arguments will be merged into one object (similar to [`$.extend( true, target, object1, objectN )`](https://api.jquery.com/jQuery.extend/)). This is useful for sharing options between instances, while overriding some properties for each one:\n\n``` javascript\nvar options = { modal: true, show: \"slow\" };\n$( \"#dialog1\" ).dialog( options );\n$( \"#dialog2\" ).dialog( options, { autoOpen: false });\n```\n\nAll options passed on init are deep-copied to ensure the objects can be modified later without affecting the widget. Arrays are the only exception, they are referenced as-is. This exception is in place to support data-binding, where the data source has to be kept as a reference.\n\nThe default values are stored on the widget's prototype, therefore we have the ability to override the values that jQuery UI sets. For example, after setting the following, all future progressbar instances will default to a value of 80:\n\n``` javascript\n$.ui.progressbar.prototype.options.value = 80;\n```\n\nThe options are part of the widget's state, so we can set options after initialization as well. We'll see this later with the option method.\n\n### Methods\n\nNow that the widget is initialized, we can query its state or perform actions on the widget. All actions after initialization take the form of a method call. To call a method on a widget, we pass the name of the method to the jQuery plugin. For example, to call the `value()` method on our progressbar widget, we would use:\n\n``` javascript\n$( \"#elem\" ).progressbar( \"value\" );\n```\n\nIf the method accepts parameters, we can pass them after the method name. For example, to pass the parameter `40` to the `value()` method, we can use:\n\n``` javascript\n$( \"#elem\" ).progressbar( \"value\", 40 );\n```\n\nJust like other methods in jQuery, most widget methods return the jQuery object for chaining.\n\n``` javascript\n$( \"#elem\" )\n  .progressbar( \"value\", 90 )\n  .addClass( \"almost-done\" );\n```\n\nEach widget will have its own set of methods based on the functionality that the widget provides. However, there are a few methods that exist on all widgets, which are documented below.\n\n### Events\n\nAll widgets have events associated with their various behaviors to notify you when the state is changing. For most widgets, when the events are triggered, the names are prefixed with the widget name and lowercased. For example, we can bind to progressbar's `change` event which is triggered whenever the value changes.\n\n``` javascript\n$( \"#elem\" ).bind( \"progressbarchange\", function() {\n  alert( \"The value has changed!\" );\n});\n```\n\nEach event has a corresponding callback, which is exposed as an option. We can hook into progressbar's `change` callback instead of binding to the `progressbarchange` event, if we want to.\n\n``` javascript\n$( \"#elem\" ).progressbar({\n  change: function() {\n    alert( \"The value has changed!\" );\n  }\n});\n```\n\nAll widgets have a `create` event which is triggered upon instantiation.\n\n### Instance\n\nThe widget's instance can be retrieved from a given element using the [`instance()`](#method-instance) method.\n\n``` javascript\n$( \"#elem\" ).progressbar( \"instance\" );\n```\n\nIf the `instance()` method is called on an element that is not associated with the widget, `undefined` is returned.\n\n``` javascript\n$( \"#not-a-progressbar\" ).progressbar( \"instance\" ); // undefined\n```\n\nThe instance is stored using [`jQuery.data()`](https://api.jquery.com/jQuery.data/) with the widget's full name as the key. Therefore, the [`:data`](data-selector) selector can also determine whether an element has a given widget bound to it.\n\n``` javascript\n$( \"#elem\" ).is( \":data('ui-progressbar')\" ); // true\n$( \"#elem\" ).is( \":data('ui-draggable')\" ); // false\n```\n\nUnlike `instance()`, `:data` can be used even if the widget being tested for has not loaded.\n\n``` javascript\n$( \"#elem\" ).nonExistentWidget( \"instance\" ); // TypeError\n$( \"#elem\" ).is( \":data('ui-nonExistentWidget')\" ); // false\n```\n\nYou can also use `:data` to get a list of all elements that are instances of a given widget.\n\n``` javascript\n$( \":data('ui-progressbar')\" );\n```\n\n### Properties\n\nAll widgets have the following set of properties:\n\n- **defaultElement**: An element to use when a widget instance is constructed without providing an element. For example, since the progressbar's `defaultElement` is `\"<div>`\", `$.ui.progressbar({ value: 50 })` instantiates a progressbar widget instance on a newly created `<div>`.\n- **document**: A jQuery object containing the `document` that the widget's element is within. Useful if you need to interact with widgets within iframes.\n- **element**: A jQuery object containing the element used to instantiate the widget. If you select multiple elements and call `.myWidget()`, a separate widget instance will be created for each element. Therefore, this property will always contain one element.\n- **namespace**: The location on the global jQuery object that the widget's prototype is stored on. For example a `namespace` of `\"ui\"` indicates that the widget's prototype is stored on `$.ui`.\n- **options**: An object containing the options currently being used by the widget. On instantiation, any options provided by the user will automatically be merged with any default values defined in `$.myNamespace.myWidget.prototype.options`. User specified options override the defaults.\n- **uuid**: A unique integer identifier for the widget.\n- **version**: The string version of the widget. For jQuery UI widgets this will be set to the version of jQuery UI the widget is using. Widget developers have to set this property in their prototype explicitly.\n- **widgetEventPrefix**: The prefix prepended to the name of events fired from this widget. For example the `widgetEventPrefix` of the [draggable widget](draggable) is `\"drag\"`, therefore when a draggable is created, the name of the event fired is `\"dragcreate\"`. By default the `widgetEventPrefix` of a widget is its name. *Note: This property is deprecated and will be removed in a later release. Event names will be changed to widgetName:eventName (e.g. `\"draggable:create\"`).*\n- **widgetFullName**: The full name of the widget including the namespace. For `$.widget( \"myNamespace.myWidget\", {} )`, `widgetFullName` will be `\"myNamespace-myWidget\"`.\n- **widgetName**: The name of the widget. For `$.widget( \"myNamespace.myWidget\", {} )`, `widgetName` will be `\"myWidget\"`.\n- **window**: A jQuery object containing the `window` that the widget's element is within. Useful if you need to interact with widgets within iframes.\n\n## Base Widget\n\n**Description:** The base widget used by the widget factory.\n\n## QuickNav\n\n### Options\n\n[classes](#option-classes)\n\n[disabled](#option-disabled)\n\n[hide](#option-hide)\n\n[show](#option-show)\n\n### Methods\n\n[\\_addClass](#method-_addClass)\n\n[\\_create](#method-_create)\n\n[\\_delay](#method-_delay)\n\n[\\_destroy](#method-_destroy)\n\n[\\_focusable](#method-_focusable)\n\n[\\_getCreateEventData](#method-_getCreateEventData)\n\n[\\_getCreateOptions](#method-_getCreateOptions)\n\n[\\_hide](#method-_hide)\n\n[\\_hoverable](#method-_hoverable)\n\n[\\_init](#method-_init)\n\n[\\_off](#method-_off)\n\n[\\_on](#method-_on)\n\n[\\_removeClass](#method-_removeClass)\n\n[\\_setOption](#method-_setOption)\n\n[\\_setOptions](#method-_setOptions)\n\n[\\_show](#method-_show)\n\n[\\_super](#method-_super)\n\n[\\_superApply](#method-_superApply)\n\n[\\_toggleClass](#method-_toggleClass)\n\n[\\_trigger](#method-_trigger)\n\n[destroy](#method-destroy)\n\n[disable](#method-disable)\n\n[enable](#method-enable)\n\n[instance](#method-instance)\n\n[option](#method-option)\n\n[widget](#method-widget)\n\n### Events\n\n[create](#event-create)\n\n## Options\n\n### classes\n\n**Type:** [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `{}`\n\nAdditional (thematic) classes to add to the widget, in addition to the structural classes. The structural classes are used as keys of this option and the thematic classes are the values. See the [`_addClass()` method](#method-_addClass) for using this in custom widgets. Check out the documentation of individual widgets to see which classes they support.\n\nThe primary motivation of this option is to map structural classes to theme classes. In other words, any class prefixed with namespace and widget, like `\"ui-progressbar-\"`, is considered a structural class. These are always added to the widget. In contrast to that, any class not specific to the widget is considered a theme class. These could be part of jQuery UI's CSS framework, but can also come from other CSS frameworks or be defined in custom stylesheets.\n\nSetting the `classes` option after creation will override all default properties. To only change specific values, use deep setters, e.g. `.option( \"classes.ui-progressbar-value\", null )`.\n\n**Code examples:**\n\nInitialize a progressbar widget with the `classes` option specified, changing the theming for the `ui-progressbar` class:\n\n``` javascript\n$( \".selector\" ).progressbar({\n  classes: {\n    \"ui-progressbar\": \"highlight\"\n  }\n});\n```\n\nGet or set the `classes` option, after initialization:\n\n``` javascript\n// Getter\nvar classes = $( \".selector\" ).widget( \"option\", \"classes\" );\n \n// Setter, override all classes\n$( \".selector\" ).widget( \"option\", \"classes\", { \"custom-header\": \"icon-warning\" } );\n \n// Setter, override just one class\n$( \".selector\" ).widget( \"option\", \"classes.custom-header\", \"icon-warning\" );\n```\n\n### disabled\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean)\n\n**Default:** `false`\n\nDisables the widget if set to `true`.\n\n**Code examples:**\n\nInitialize the widget with the `disabled` option specified:\n\n``` javascript\n$( \".selector\" ).widget({\n  disabled: true\n});\n```\n\nGet or set the `disabled` option, after initialization:\n\n``` javascript\n// Getter\nvar disabled = $( \".selector\" ).widget( \"option\", \"disabled\" );\n \n// Setter\n$( \".selector\" ).widget( \"option\", \"disabled\", true );\n```\n\n### hide\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the hiding of the element.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the element will be hidden immediately. When set to `true`, the element will fade out with the default duration and the default easing.\n- **Number**: The element will fade out with the specified duration and the default easing.\n- **String**: The element will be hidden using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideUp\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeOut\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the widget with the `hide` option specified:\n\n``` javascript\n$( \".selector\" ).widget({\n  hide: { effect: \"explode\", duration: 1000 }\n});\n```\n\nGet or set the `hide` option, after initialization:\n\n``` javascript\n// Getter\nvar hide = $( \".selector\" ).widget( \"option\", \"hide\" );\n \n// Setter\n$( \".selector\" ).widget( \"option\", \"hide\", { effect: \"explode\", duration: 1000 } );\n```\n\n### show\n\n**Type:** [Boolean](http://api.jquery.com/Types/#Boolean) or [Number](http://api.jquery.com/Types/#Number) or [String](http://api.jquery.com/Types/#String) or [Object](http://api.jquery.com/Types/#Object)\n\n**Default:** `null`\n\nIf and how to animate the showing of the element.\n\n**Multiple types supported:**\n\n- **Boolean**: When set to `false`, no animation will be used and the element will be shown immediately. When set to `true`, the element will fade in with the default duration and the default easing.\n- **Number**: The element will fade in with the specified duration and the default easing.\n- **String**: The element will be shown using the specified effect. The value can either be the name of a built-in jQuery animation method, such as `\"slideDown\"`, or the name of a [jQuery UI effect](category/effects), such as `\"fold\"`. In either case the effect will be used with the default duration and the default easing.\n- **Object**: If the value is an object, then `effect`, `delay`, `duration`, and `easing` properties may be provided. If the `effect` property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If `duration` or `easing` is omitted, then the default values will be used. If `effect` is omitted, then `\"fadeIn\"` will be used. If `delay` is omitted, then no delay is used.\n\n**Code examples:**\n\nInitialize the widget with the `show` option specified:\n\n``` javascript\n$( \".selector\" ).widget({\n  show: { effect: \"blind\", duration: 800 }\n});\n```\n\nGet or set the `show` option, after initialization:\n\n``` javascript\n// Getter\nvar show = $( \".selector\" ).widget( \"option\", \"show\" );\n \n// Setter\n$( \".selector\" ).widget( \"option\", \"show\", { effect: \"blind\", duration: 800 } );\n```\n\n## Methods\n\n### \\_addClass( \\[element \\], keys \\[, extra \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nAdd classes to an element of the widget.\n\nThis provides a hook for the user to add additional classes or replace default styling classes, through the [`classes` option](#option-classes).\n\nIt also provides automatic removal of these classes when a widget is destroyed, as long as you're using [`_addClass()`](#method-_addClass), [`_removeClass()`](#method-_removeClass) and [`_toggleClass()`](#method-_toggleClass) together. This can heavily simplify the implementation of custom [`_destroy()`](#method-_destroy) methods.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element to add the classes to. Defaults to `this.element`.\n\n- **keys**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The classes to add, as a space-delimited list. If a property of the [`classes` option](#option-classes) matches a key, the value will be added as well.\n  When you only need the `extra` argument, you can skip this argument by specifying `null`.\n\n- **extra**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  Additional classes to add, required for layout or other reasons. Unlike the `keys` argument, these aren't associated with any properties of the [`classes` option](#option-classes). Just like `keys`, they will also be automatically removed when destroying the widget.\n\n**Code examples:**\n\nAdd the `ui-progressbar` class to the widget's element (`this.element`). Will also add any additional classes specified through the [`classes` option](#option-classes) for the given class.\n\n``` javascript\nthis._addClass( \"ui-progressbar\" );\n```\n\nAdd the `demo-popup-header` class to the specified element (here referencing `this.popup`). Will also add any additional classes specified through the [`classes` option](#option-classes) for the given class. In addition, it will always add the `ui-front` class.\n\n``` javascript\nthis._addClass( this.popup, \"demo-popup-header\", \"ui-front\" );\n```\n\nAdds the `ui-helper-hidden-accessible` class to the specified element. Uses `null` for the `keys` argument to skip it.\n\n``` javascript\nthis._addClass( this.liveRegion, null, \"ui-helper-hidden-accessible\" );\n```\n\n### \\_create()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThe `_create()` method is the widget's constructor. There are no parameters, but `this.element` and `this.options` are already set.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nSet the background color of the widget's element based on an option.\n\n``` javascript\n_create: function() {\n  this.element.css( \"background-color\", this.options.color );\n}\n```\n\n### \\_delay( fn \\[, delay \\] )Returns: [Number](http://api.jquery.com/Types/#Number)\n\nInvokes the provided function after a specified delay. Keeps `this` context correct. Essentially `setTimeout()`.\n\nReturns the timeout ID for use with `clearTimeout()`.\n\n- **fn**\n\n  Type: [Function](http://api.jquery.com/Types/#Function)() or [String](http://api.jquery.com/Types/#String)\n\n  The function to invoke. Can also be the name of a method on the widget.\n\n- **delay**\n\n  Type: [Number](http://api.jquery.com/Types/#Number)\n\n  The number of milliseconds to wait before invoking the function. Defaults to `0`.\n\n**Code examples:**\n\nCall the `_foo()` method on the widget after 100 milliseconds.\n\n``` javascript\nthis._delay( this._foo, 100 );\n```\n\n### \\_destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nThe public [`destroy()`](#method-destroy) method cleans up all common data, events, etc. and then delegates out to `_destroy()` for custom, widget-specific, cleanup.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nRemove a class from the widget's element when the widget is destroyed.\n\n``` javascript\n_destroy: function() {\n  this.element.removeClass( \"my-widget\" );\n}\n```\n\n### \\_focusable( element )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets up `element` to apply the `ui-state-focus` class on focus.\n\nThe event handlers are automatically cleaned up on destroy.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element(s) to apply the focusable behavior to.\n\n**Code examples:**\n\nApply focusable styling to a set of elements within the widget.\n\n``` javascript\nthis._focusable( this.element.find( \".my-items\" ) );\n```\n\n### \\_getCreateEventData()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nAll widgets trigger the [`create`](#event-create) event. By default, no data is provided in the event, but this method can return an object which will be passed as the `create` event's data.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nPass the widget's options to `create` event handlers as an argument.\n\n``` javascript\n_getCreateEventData: function() {\n  return this.options;\n}\n```\n\n### \\_getCreateOptions()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nThis method allows the widget to define a custom method for defining options during instantiation. The user-provided options override the options returned by this method, which override the default options.\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nMake the widget element's id attribute available as an option.\n\n``` javascript\n_getCreateOptions: function() {\n  return { id: this.element.attr( \"id\" ) };\n}\n```\n\n### \\_hide( element, option \\[, callback \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nHides an element immediately, using built-in animation methods, or using custom effects. See the [hide](#option-hide) option for possible `option` values.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element(s) to hide.\n\n- **option**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  The properties defining how to hide the element.\n\n- **callback**\n\n  Type: [Function](http://api.jquery.com/Types/#Function)()\n\n  Callback to invoke after the element has been fully hidden.\n\n**Code examples:**\n\nPass along the `hide` option for custom animations.\n\n``` javascript\nthis._hide( this.element, this.options.hide, function() {\n \n  // Remove the element from the DOM when it's fully hidden.\n  $( this ).remove();\n});\n```\n\n### \\_hoverable( element )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets up `element` to apply the `ui-state-hover` class on hover.\n\nThe event handlers are automatically cleaned up on destroy.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element(s) to apply the hoverable behavior to.\n\n**Code examples:**\n\nApply hoverable styling to all `<div>`s within the element on hover.\n\n``` javascript\nthis._hoverable( this.element.find( \"div\" ) );\n```\n\n### \\_init()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nWidgets have the concept of initialization that is distinct from creation. Any time the plugin is called with no arguments or with only an option hash, the widget is initialized; this includes when the widget is created.\n\n*Note: Initialization should only be handled if there is a logical action to perform on successive calls to the widget with no arguments.*\n\n- This method does not accept any arguments.\n\n**Code examples:**\n\nCall the `open()` method if the `autoOpen` option is set.\n\n``` javascript\n_init: function() {\n  if ( this.options.autoOpen ) {\n    this.open();\n  }\n}\n```\n\n### \\_off( element, eventName )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nUnbinds event handlers from the specified element(s).\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element(s) to unbind the event handlers from. Unlike the `_on()` method, the elements are required for `_off()`.\n\n- **eventName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  One or more space-separated event types.\n\n**Code examples:**\n\nUnbind all click events from the widget's element.\n\n``` javascript\nthis._off( this.element, \"click\" );\n```\n\n### \\_on( \\[suppressDisabledCheck \\] \\[, element \\], handlers )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nBinds event handlers to the specified element(s). Delegation is supported via selectors inside the event names, e.g., \"`click .foo`\". The `_on()` method provides several benefits of direct event binding:\n\n- Maintains proper `this` context inside the handlers.\n- Automatically handles disabled widgets: If the widget is disabled or the event occurs on an element with the `ui-state-disabled` class, the event handler is not invoked. Can be overridden with the `suppressDisabledCheck` parameter.\n- Event handlers are automatically namespaced and cleaned up on destroy.\n\n- **suppressDisabledCheck** (default: `false`)\n\n  Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n  Whether or not to bypass the disabled check.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  Which element(s) to bind the event handlers to. If no element is provided, `this.element` is used for non-delegated events and [the widget element](#method-widget) is used for delegated events.\n\n- **handlers**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  An object in which the keys represent the event type and optional selector for delegation, and the values represent a handler function to be called for the event.\n\n**Code examples:**\n\nPrevent the default action of all links clicked within the widget's element.\n\n``` javascript\nthis._on( this.element, {\n  \"click a\": function( event ) {\n    event.preventDefault();\n  }\n});\n```\n\n### \\_removeClass( \\[element \\], keys \\[, extra \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemove classes from an element of the widget.\n\nThe arguments are the same as for the [`_addClass()` method](#method-_addClass), the same semantics apply, just in reverse.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element to remove the classes from. Defaults to `this.element`.\n\n- **keys**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The classes to remove, as a space-delimited list. If a property of the [`classes` option](#option-classes) matches a key, the value will be removed as well.\n  When you only need the `extra` argument, you can skip this argument by specifying `null`.\n\n- **extra**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  Additional classes to remove, required for layout or other reasons. Unlike the `keys` argument, these aren't associated with any properties of the [`classes` option](#option-classes).\n\n**Code examples:**\n\nRemove the `ui-progressbar` class from the widget's element (`this.element`). Will also remove any additional classes specified through the [`classes` option](#option-classes) for the given class.\n\n``` javascript\nthis._removeClass( \"ui-progressbar\" );\n```\n\nRemove the `demo-popup-header` class from the specified element (here referencing `this.popup`). Will also remove any additional classes specified through the [`classes` option](#option-classes) for the given class. In addition, it will also remove the `ui-front` class.\n\n``` javascript\nthis._removeClass( this.popup, \"demo-popup-header\", \"ui-front\" );\n```\n\nRemove the `ui-helper-hidden-accessible` class from the specified element. Uses `null` for the `keys` argument to skip it.\n\n``` javascript\nthis._removeClass( this.liveRegion, null, \"ui-helper-hidden-accessible\" );\n```\n\n### \\_setOption( key, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCalled from the [`_setOptions()`](#method-_setOptions) method for each individual option. Widget state should be updated based on changes.\n\n- **key**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n**Code examples:**\n\nUpdate a widget's element when its `height` or `width` option changes.\n\n``` javascript\n_setOption: function( key, value ) {\n  if ( key === \"width\" ) {\n    this.element.width( value );\n  }\n  if ( key === \"height\" ) {\n    this.element.height( value );\n  }\n  this._super( key, value );\n}\n```\n\n### \\_setOptions( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nCalled whenever the [`option()`](#method-option) method is called, regardless of the form in which the `option()` method was called.\n\nOverriding this is useful if you can defer processor-intensive changes for multiple option changes.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  An object containing options to set, with the name of the option as the key and the option value as the value.\n\n**Code examples:**\n\nCall a `resize()` method if the `height` or `width` options change.\n\n``` javascript\n_setOptions: function( options ) {\n  var that = this,\n    resize = false;\n \n  $.each( options, function( key, value ) {\n    that._setOption( key, value );\n    if ( key === \"height\" || key === \"width\" ) {\n      resize = true;\n    }\n  });\n \n  if ( resize ) {\n    this.resize();\n  }\n}\n```\n\n### \\_show( element, option \\[, callback \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nShows an element immediately, using built-in animation methods, or using custom effects. See the [show](#option-show) option for possible `option` values.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element(s) to show.\n\n- **option**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  The properties defining how to show the element.\n\n- **callback**\n\n  Type: [Function](http://api.jquery.com/Types/#Function)()\n\n  Callback to invoke after the element has been fully shown.\n\n**Code examples:**\n\nPass along the `show` option for custom animations.\n\n``` javascript\nthis._show( this.element, this.options.show, function() {\n \n  // Focus the element when it's fully visible.\n  this.focus();\n}\n```\n\n### \\_super( \\[arg \\] \\[, ... \\] )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nInvokes the method of the same name from the parent widget, with any specified arguments. Essentially `.call()`.\n\n- **arg**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  Zero to many arguments to pass to the parent widget's method.\n\n**Code examples:**\n\nHandle `title` option updates and call the parent widget's `_setOption()` to update the internal storage of the option.\n\n``` javascript\n_setOption: function( key, value ) {\n  if ( key === \"title\" ) {\n    this.element.find( \"h3\" ).text( value );\n  }\n  this._super( key, value );\n}\n```\n\n### \\_superApply( arguments )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nInvokes the method of the same name from the parent widget, with the array of arguments. Essentially `.apply()`.\n\n- **arguments**\n\n  Type: [Array](http://api.jquery.com/Types/#Array)\n\n  Array of arguments to pass to the parent method.\n\n**Code examples:**\n\nHandle `title` option updates and call the parent widget's `_setOption()` to update the internal storage of the option.\n\n``` javascript\n_setOption: function( key, value ) {\n  if ( key === \"title\" ) {\n    this.element.find( \"h3\" ).text( value );\n  }\n  this._superApply( arguments );\n}\n```\n\n### \\_toggleClass( \\[element \\], keys \\[, extra \\], add )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nToggle classes of an element of the widget.\n\nThe arguments are the same as for the [`_addClass()`](#method-_addClass) and [`_removeClass()`](#method-_removeClass) methods, except for the additional boolean argument that specifies to add or remove classes.\n\nUnlike jQuery's `.toggleClass()` method, the boolean `add` argument is always required.\n\n- **element**\n\n  Type: [jQuery](http://api.jquery.com/Types/#jQuery)\n\n  The element to toogle the classes on. Defaults to `this.element`.\n\n- **keys**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The classes to toogle, as a space-delimited list. If a property of the [`classes` option](#option-classes) matches a key, the value will be toggled as well.\n  When you only need the `extra` argument, you can skip this argument by specifying `null`.\n\n- **extra**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  Additional classes to toggle, required for layout or other reasons. Unlike the `keys` argument, these aren't associated with any properties of the [`classes` option](#option-classes). Just like `keys`, they will also be automatically removed when destroying the widget.\n\n- **add**\n\n  Type: [Boolean](http://api.jquery.com/Types/#Boolean)\n\n  Indicates whether to add or remove the specified classes, where a boolean `true` indicates that classes should be added, a boolean `false` indicates that classes should be removed.\n\n**Code examples:**\n\nToggle the `ui-state-disabled` class on the widget's element (`this.element`).\n\n``` javascript\nthis._toggleClass( null, \"ui-state-disabled\", !!value );\n```\n\n### \\_trigger( type \\[, event \\] \\[, data \\] )Returns: [Boolean](http://api.jquery.com/Types/#Boolean)\n\nTriggers an event and its associated callback.\n\nThe option with the name equal to type is invoked as the callback.\n\nThe event name is the lowercase concatenation of the widget name and type.\n\n*Note: When providing data, you must provide all three parameters. If there is no event to pass along, just pass `null`.*\n\nIf the default action is prevented, `false` will be returned, otherwise `true`. Preventing the default action happens when the handler returns `false` or calls `event.preventDefault()`.\n\n- **type**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The `type` should match the name of a callback option. The full event type will be generated automatically.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n  The original event that caused this event to occur; useful for providing context to the listener.\n\n- **data**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A hash of data associated with the event.\n\n**Code examples:**\n\nTrigger a `search` event whenever a key is pressed.\n\n``` javascript\nthis._on( this.element, {\n  keydown: function( event ) {\n \n    // Pass the original event so that the custom search event has\n    // useful information, such as keyCode\n    this._trigger( \"search\", event, {\n \n      // Pass additional information unique to this event\n      value: this.element.val()\n    });\n  }\n});\n```\n\n### destroy()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nRemoves the widget functionality completely. This will return the element back to its pre-init state.\n\n- This method does not accept any arguments.\n\n### disable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nDisables the widget.\n\n- This method does not accept any arguments.\n\n### enable()Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nEnables the widget.\n\n- This method does not accept any arguments.\n\n### instance()Returns: [Object](http://api.jquery.com/Types/#Object)\n\nRetrieves the widget's instance object. If the element does not have an associated instance, `undefined` is returned.\n\nUnlike other widget methods, `instance()` is safe to call on any element after the widget plugin has loaded.\n\n- This method does not accept any arguments.\n\n### option( optionName )Returns: [Object](http://api.jquery.com/Types/#Object)\n\nGets the value currently associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, `\"foo.bar\"` would get the value of the `bar` property on the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to get.\n\n### option()Returns: [PlainObject](http://api.jquery.com/Types/#PlainObject)\n\nGets an object containing key/value pairs representing the current widget options hash.\n\n- This signature does not accept any arguments.\n\n### option( optionName, value )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets the value of the widget option associated with the specified `optionName`.\n\n**Note:** For options that have objects as their value, you can set the value of just one property by using dot notation for `optionName`. For example, `\"foo.bar\"` would update only the `bar` property of the `foo` option.\n\n- **optionName**\n\n  Type: [String](http://api.jquery.com/Types/#String)\n\n  The name of the option to set.\n\n- **value**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A value to set for the option.\n\n### option( options )Returns: [jQuery](http://api.jquery.com/Types/#jQuery) ([plugin only](http://learn.jquery.com/jquery-ui/widget-factory/widget-method-invocation/))\n\nSets one or more options for the widget.\n\n- **options**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n  A map of option-value pairs to set.\n\n### widget()Returns: [jQuery](http://api.jquery.com/Types/#jQuery)\n\nReturns a `jQuery` object containing the original element or other relevant generated element.\n\n- This method does not accept any arguments.\n\n## Events\n\n### create( event, ui )Type: `widgetcreate`\n\nTriggered when the widget is created.\n\n- **event**\n\n  Type: [Event](http://api.jquery.com/Types/#Event)\n\n- **ui**\n\n  Type: [Object](http://api.jquery.com/Types/#Object)\n\n*Note: The `ui` object is empty but included for consistency with other events.*\n\n**Code examples:**\n\nInitialize the widget with the create callback specified:\n\n``` javascript\n$( \".selector\" ).widget({\n  create: function( event, ui ) {}\n});\n```\n\nBind an event listener to the widgetcreate event:\n\n``` javascript\n$( \".selector\" ).on( \"widgetcreate\", function( event, ui ) {} );\n```\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.widget](https://api.jqueryui.com/jQuery.widget)"
- name: Widget plugin bridge
  id: jquery.widget.bridge
  summary: 'Description: Part of the jQuery Widget Factory is the jQuery.widget.bridge() method'
  description: "# Widget Plugin Bridge\n\n## jQuery.widget.bridge( name, constructor )\n\n**Description:** Part of the [jQuery Widget Factory](jquery.widget) is the `jQuery.widget.bridge()` method. This acts as the middleman between the object created by `$.widget()` and the jQuery API.\n\n- #### [jQuery.widget.bridge( name, constructor )](#jQuery-widget-bridge-name-constructor)\n\n  - **name**\n\n    Type: [String](http://api.jquery.com/Types/#String)\n\n    The name of the plugin to create.\n\n  - **constructor**\n\n    Type: [Function](http://api.jquery.com/Types/#Function)()\n\n    The object to instantiate when the plugin is invoked.\n\n`$.widget.bridge()` does a few things:\n\n- Connects a regular JavaScript constructor to the jQuery API.\n- Automatically creates instances of said object and stores it within the element's `$.data` cache.\n- Allows calls to public methods.\n- Prevents calls to private methods.\n- Prevents method calls on uninitialized objects.\n- Protects against multiple initializations.\n\njQuery UI widgets are created using `$.widget( \"foo.bar\", {} );` syntax to define an object from which instances will be created. Given a DOM structure with five `.foo`'s, `$( \".foo\" ).bar();` will create five instances of your \"bar\" object. `$.widget.bridge()` works inside the factory by taking your base \"bar\" object and giving it a public API. Therefore, you can create instances by writing `$( \".foo\" ).bar()`, and call methods by writing `$( \".foo\" ).bar( \"baz\" )`.\n\nIf all you want is one-time initialization and calling methods, your object passed to `jQuery.widget.bridge()` can be very minimal:\n\n``` javascript\nvar Highlighter = function( options, element ) {\n  this.options = options;\n  this.element = $( element );\n  this._set( 800 );\n};\nHighlighter.prototype = {\n  toggle: function() {\n    this._set( this.element.css( \"font-weight\") === 400 ? 800 : 400 );\n  },\n  _set: function(value) {\n    this.element.css( \"font-weight\", value );\n  }\n};\n```\n\nAll you need here is a function that acts as the constructor, accepting two arguments:\n\n- `options`: an object of configuration options\n- `element`: the DOM element this instance was created on\n\nYou can then hook this object up as a jQuery plugin using the bridge and use it on any jQuery object:\n\n``` javascript\n// Hook up the plugin\n$.widget.bridge( \"colorToggle\", Highlighter );\n \n// Initialize it on divs\n$( \"div\" ).colorToggle().click(function() {\n  // Call the public method on click\n  $( this ).colorToggle( \"toggle\" );\n});\n```\n\nTo use all the features of the bridge, your object also needs to have an `_init()` method on the prototype. This will get called whenever the plugin is invoked while an instance already exists. In that case you also need to have an `option()` method. This will be invoked with the options as the first argument. If there were none, the argument will be an empty object. For a proper implementation of the `option` method, check out the implementation of [`$.Widget`](jquery.widget#jQuery-Widget2).\n\nThere is one optional property the bridge will use, if present: If your object's prototype has a `widgetFullName` property, this will be used as the key for storing and retrieving the instance. Otherwise, the name argument will be used.\n\n© The jQuery Foundation and other contributors  \nLicensed under the MIT License.  \n[https://api.jqueryui.com/jQuery.widget.bridge](https://api.jqueryui.com/jQuery.widget.bridge)"
