---
name: Puppeteer
slug: puppeteer
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Â© 2020 Google Inc
  Licensed under the Apache License 2.0.
  https://github.com/puppeteer/puppeteer/blob/v7.1.0/docs/api.md
homepage: null

---
- name: Accessibility
  id: index#class-accessibility
  summary: The Accessibility class provides methods for inspecting Chromium's accessibility tree
  description: |-
    ## class: Accessibility

    The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as [screen readers](https://en.wikipedia.org/wiki/Screen_reader) or [switches](https://en.wikipedia.org/wiki/Switch_access).

    Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output.

    Blink - Chrome's rendering engine - has a concept of "accessibility tree", which is then translated into different platform-specific APIs. Accessibility namespace gives users access to the Blink Accessibility Tree.

    Most of the accessibility tree gets filtered out when converting from Blink AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, Puppeteer tries to approximate this filtering, exposing only the "interesting" nodes of the tree.
- name: accessibility.snapshot()
  id: index#accessibilitysnapshotoptions
  summary: Captures the current state of the accessibility tree
  description: |-
    ### accessibility.snapshot(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `interestingOnly` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Prune uninteresting nodes from the tree. Defaults to `true`.
      - `root` \<[ElementHandle](#class-elementhandle "ElementHandle")\> The root DOM element for the snapshot. Defaults to the whole page.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> An [AXNode](#accessibilitysnapshotoptions "AXNode") object with the following properties:
      - `role` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The [role](https://www.w3.org/TR/wai-aria/#usage_intro).
      - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A human readable name for the node.
      - `value` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The current value of the node.
      - `description` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> An additional human readable description of the node.
      - `keyshortcuts` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Keyboard shortcuts associated with this node.
      - `roledescription` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A human readable alternative to the role.
      - `valuetext` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A description of the current value.
      - `disabled` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is disabled.
      - `expanded` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is expanded or collapsed.
      - `focused` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is focused.
      - `modal` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window).
      - `multiline` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node text input supports multiline.
      - `multiselectable` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether more than one child can be selected.
      - `readonly` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is read only.
      - `required` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is required.
      - `selected` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the node is selected in its parent node.
      - `checked` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\|"mixed"\> Whether the checkbox is checked, or "mixed".
      - `pressed` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\|"mixed"\> Whether the toggle button is checked, or "mixed".
      - `level` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The level of a heading.
      - `valuemin` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The minimum value in a node.
      - `valuemax` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The maximum value in a node.
      - `autocomplete` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> What kind of autocomplete is supported by a control.
      - `haspopup` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> What kind of popup is currently being shown for a node.
      - `invalid` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Whether and in what way this node's value is invalid.
      - `orientation` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Whether the node is oriented horizontally or vertically.
      - `children` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Child [AXNode](#accessibilitysnapshotoptions "AXNode")s of this node, if any.

    Captures the current state of the accessibility tree. The returned object represents the root accessible node of the page.

    > **NOTE** The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen readers. Puppeteer will discard them as well for an easier to process tree, unless `interestingOnly` is set to `false`.

    An example of dumping the entire accessibility tree:

    ``` js
    const snapshot = await page.accessibility.snapshot();
    console.log(snapshot);
    ```

    An example of logging the focused node's name:

    ``` js
    const snapshot = await page.accessibility.snapshot();
    const node = findFocusedNode(snapshot);
    console.log(node && node.name);

    function findFocusedNode(node) {
      if (node.focused)
        return node;
      for (const child of node.children || []) {
        const foundNode = findFocusedNode(child);
        return foundNode;
      }
      return null;
    }
    ```
- name: Browser
  id: index#class-browser
  summary: A Browser is created when Puppeteer connects to a Chromium instance, either through puppeteer.launch or puppeteer.connect
  description: |-
    ## class: Browser

    - extends: [EventEmitter](#class-eventemitter)

    A Browser is created when Puppeteer connects to a Chromium instance, either through [`puppeteer.launch`](#puppeteerlaunchoptions) or [`puppeteer.connect`](#puppeteerconnectoptions).

    An example of using a [Browser](#class-browser "Browser") to create a [Page](#class-page "Page"):

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://example.com');
      await browser.close();
    })();
    ```

    An example of disconnecting from and reconnecting to a [Browser](#class-browser "Browser"):

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      // Store the endpoint to be able to reconnect to Chromium
      const browserWSEndpoint = browser.wsEndpoint();
      // Disconnect puppeteer from Chromium
      browser.disconnect();

      // Use the endpoint to reestablish a connection
      const browser2 = await puppeteer.connect({browserWSEndpoint});
      // Close Chromium
      await browser2.close();
    })();
    ```
- name: 'Browser event: disconnected'
  id: index#event-disconnected
  summary: Emitted when Puppeteer gets disconnected from the Chromium instance
  description: |-
    ### event: 'disconnected'

    Emitted when Puppeteer gets disconnected from the Chromium instance. This might happen because of one of the following:

    - Chromium is closed or crashed
    - The [`browser.disconnect`](#browserdisconnect) method was called

    &nbsp;
- name: 'Browser event: targetchanged'
  id: index#event-targetchanged
  summary: Emitted when the url of a target changes
  description: |-
    ### event: 'targetchanged'

    - \<[Target](#class-target "Target")\>

    Emitted when the url of a target changes.

    > **NOTE** This includes target changes in incognito browser contexts.
- name: 'Browser event: targetcreated'
  id: index#event-targetcreated
  summary: Emitted when a target is created, for example when a new page is opened by window.open or browser.newPage
  description: |-
    ### event: 'targetcreated'

    - \<[Target](#class-target "Target")\>

    Emitted when a target is created, for example when a new page is opened by [`window.open`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) or [`browser.newPage`](#browsernewpage).

    > **NOTE** This includes target creations in incognito browser contexts.
- name: 'Browser event: targetdestroyed'
  id: index#event-targetdestroyed
  summary: Emitted when a target is destroyed, for example when a page is closed
  description: |-
    ### event: 'targetdestroyed'

    - \<[Target](#class-target "Target")\>

    Emitted when a target is destroyed, for example when a page is closed.

    > **NOTE** This includes target destructions in incognito browser contexts.
- name: browser.browserContexts()
  id: index#browserbrowsercontexts
  summary: Returns an array of all open browser contexts
  description: |-
    ### browser.browserContexts()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[BrowserContext](#class-browsercontext "BrowserContext")\>\>

    Returns an array of all open browser contexts. In a newly created browser, this will return a single instance of [BrowserContext](#class-browsercontext "BrowserContext").
- name: browser.close()
  id: index#browserclose
  summary: Closes Chromium and all of its pages (if any were opened)
  description: |-
    ### browser.close()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Closes Chromium and all of its pages (if any were opened). The [Browser](#class-browser "Browser") object itself is considered to be disposed and cannot be used anymore.
- name: browser.createIncognitoBrowserContext()
  id: index#browsercreateincognitobrowsercontext
  summary: Creates a new incognito browser context
  description: |-
    ### browser.createIncognitoBrowserContext()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserContext](#class-browsercontext "BrowserContext")\>\>

    Creates a new incognito browser context. This won't share cookies/cache with other browser contexts.

    ``` js
    (async () => {
      const browser = await puppeteer.launch();
      // Create a new incognito browser context.
      const context = await browser.createIncognitoBrowserContext();
      // Create a new page in a pristine context.
      const page = await context.newPage();
      // Do stuff
      await page.goto('https://example.com');
    })();
    ```
- name: browser.defaultBrowserContext()
  id: index#browserdefaultbrowsercontext
  summary: Returns the default browser context
  description: |-
    ### browser.defaultBrowserContext()

    - returns: \<[BrowserContext](#class-browsercontext "BrowserContext")\>

    Returns the default browser context. The default browser context can not be closed.
- name: browser.disconnect()
  id: index#browserdisconnect
  summary: Disconnects Puppeteer from the browser, but leaves the Chromium process running
  description: |-
    ### browser.disconnect()

    Disconnects Puppeteer from the browser, but leaves the Chromium process running. After calling `disconnect`, the [Browser](#class-browser "Browser") object is considered disposed and cannot be used anymore.
- name: browser.isConnected()
  id: index#browserisconnected
  summary: Indicates that the browser is connected
  description: |-
    ### browser.isConnected()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Indicates that the browser is connected.
- name: browser.newPage()
  id: index#browsernewpage
  summary: Promise which resolves to a new Page object
  description: |-
    ### browser.newPage()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](#class-page "Page")\>\>

    Promise which resolves to a new [Page](#class-page "Page") object. The [Page](#class-page "Page") is created in a default browser context.
- name: browser.pages()
  id: index#browserpages
  summary: An array of all pages inside the Browser
  description: |-
    ### browser.pages()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Page](#class-page "Page")\>\>\> Promise which resolves to an array of all open pages. Non visible pages, such as `"background_page"`, will not be listed here. You can find them using [target.page()](#targetpage).

    An array of all pages inside the Browser. In case of multiple browser contexts, the method will return an array with all the pages in all browser contexts.
- name: browser.process()
  id: index#browserprocess
  summary: null
  description: |-
    ### browser.process()

    - returns: \<?[ChildProcess](https://nodejs.org/api/child_process.html "ChildProcess")\> Spawned browser process. Returns `null` if the browser instance was created with [`puppeteer.connect`](#puppeteerconnectoptions) method.

    &nbsp;
- name: browser.target()
  id: index#browsertarget
  summary: A target associated with the browser
  description: |-
    ### browser.target()

    - returns: \<[Target](#class-target "Target")\>

    A target associated with the browser.
- name: browser.targets()
  id: index#browsertargets
  summary: An array of all active targets inside the Browser
  description: |-
    ### browser.targets()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Target](#class-target "Target")\>\>

    An array of all active targets inside the Browser. In case of multiple browser contexts, the method will return an array with all the targets in all browser contexts.
- name: browser.userAgent()
  id: index#browseruseragent
  summary: null
  description: |-
    ### browser.userAgent()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Promise which resolves to the browser's original user agent.

    > **NOTE** Pages can override browser user agent with [page.setUserAgent](#pagesetuseragentuseragent)
- name: browser.version()
  id: index#browserversion
  summary: NOTE the format of browser.version() might change with future releases of Chromium
  description: |-
    ### browser.version()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For non-headless, this is similar to `Chrome/61.0.3153.0`.

    > **NOTE** the format of browser.version() might change with future releases of Chromium.
- name: browser.waitForTarget()
  id: index#browserwaitfortargetpredicate-options
  summary: This searches for a target in all browser contexts
  description: |-
    ### browser.waitForTarget(predicate\[, options\])

    - `predicate` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Target](#class-target "Target")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> A function to be run for every target
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum wait time in milliseconds. Pass `0` to disable the timeout. Defaults to 30 seconds.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Target](#class-target "Target")\>\> Promise which resolves to the first target found that matches the `predicate` function.

    This searches for a target in all browser contexts.

    An example of finding a target for a page opened via `window.open`:

    ``` js
    await page.evaluate(() => window.open('https://www.example.com/'));
    const newWindowTarget = await browser.waitForTarget(target => target.url() === 'https://www.example.com/');
    ```
- name: browser.wsEndpoint()
  id: index#browserwsendpoint
  summary: Browser websocket endpoint which can be used as an argument to puppeteer.connect
  description: |-
    ### browser.wsEndpoint()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Browser websocket url.

    Browser websocket endpoint which can be used as an argument to [puppeteer.connect](#puppeteerconnectoptions). The format is `ws://${host}:${port}/devtools/browser/<id>`

    You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`. Learn more about the [devtools protocol](https://chromedevtools.github.io/devtools-protocol) and the [browser endpoint](https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target).
- name: BrowserContext
  id: index#class-browsercontext
  summary: BrowserContexts provide a way to operate multiple independent browser sessions
  description: |-
    ## class: BrowserContext

    - extends: [EventEmitter](#class-eventemitter)

    BrowserContexts provide a way to operate multiple independent browser sessions. When a browser is launched, it has a single BrowserContext used by default. The method `browser.newPage()` creates a page in the default browser context.

    If a page opens another page, e.g. with a `window.open` call, the popup will belong to the parent page's browser context.

    Puppeteer allows creation of "incognito" browser contexts with `browser.createIncognitoBrowserContext()` method. "Incognito" browser contexts don't write any browsing data to disk.

    ``` js
    // Create a new incognito browser context
    const context = await browser.createIncognitoBrowserContext();
    // Create a new page inside context.
    const page = await context.newPage();
    // ... do stuff with page ...
    await page.goto('https://example.com');
    // Dispose context once it's no longer needed.
    await context.close();
    ```
- name: 'BrowserContext event: targetchanged'
  id: index#event-targetchanged-1
  summary: Emitted when the url of a target inside the browser context changes
  description: |-
    ### event: 'targetchanged'

    - \<[Target](#class-target "Target")\>

    Emitted when the url of a target inside the browser context changes.
- name: 'BrowserContext event: targetcreated'
  id: index#event-targetcreated-1
  summary: Emitted when a new target is created inside the browser context, for example when a new page is opened by window.open or browserContext.newPage
  description: |-
    ### event: 'targetcreated'

    - \<[Target](#class-target "Target")\>

    Emitted when a new target is created inside the browser context, for example when a new page is opened by [`window.open`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) or [`browserContext.newPage`](#browsercontextnewpage).
- name: 'BrowserContext event: targetdestroyed'
  id: index#event-targetdestroyed-1
  summary: Emitted when a target inside the browser context is destroyed, for example when a page is closed
  description: |-
    ### event: 'targetdestroyed'

    - \<[Target](#class-target "Target")\>

    Emitted when a target inside the browser context is destroyed, for example when a page is closed.
- name: browserContext.browser()
  id: index#browsercontextbrowser
  summary: The browser this browser context belongs to
  description: |-
    ### browserContext.browser()

    - returns: \<[Browser](#class-browser "Browser")\>

    The browser this browser context belongs to.
- name: browserContext.clearPermissionOverrides()
  id: index#browsercontextclearpermissionoverrides
  summary: Clears all permission overrides for the browser context
  description: |-
    ### browserContext.clearPermissionOverrides()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Clears all permission overrides for the browser context.

    ``` js
    const context = browser.defaultBrowserContext();
    context.overridePermissions('https://example.com', ['clipboard-read']);
    // do stuff ..
    context.clearPermissionOverrides();
    ```
- name: browserContext.close()
  id: index#browsercontextclose
  summary: Closes the browser context
  description: |-
    ### browserContext.close()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Closes the browser context. All the targets that belong to the browser context will be closed.

    > **NOTE** only incognito browser contexts can be closed.
- name: browserContext.isIncognito()
  id: index#browsercontextisincognito
  summary: Returns whether BrowserContext is incognito
  description: |-
    ### browserContext.isIncognito()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Returns whether BrowserContext is incognito. The default browser context is the only non-incognito browser context.

    > **NOTE** the default browser context cannot be closed.
- name: browserContext.newPage()
  id: index#browsercontextnewpage
  summary: Creates a new page in the browser context
  description: |-
    ### browserContext.newPage()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](#class-page "Page")\>\>

    Creates a new page in the browser context.
- name: browserContext.overridePermissions()
  id: index#browsercontextoverridepermissionsorigin-permissions
  summary: null
  description: |-
    ### browserContext.overridePermissions(origin, permissions)

    - `origin` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin "Origin") to grant permissions to, e.g. "[https://example.com](https://example.com)".
    - `permissions` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> An array of permissions to grant. All permissions that are not listed here will be automatically denied. Permissions can be one of the following values:
      - `'geolocation'`
      - `'midi'`
      - `'midi-sysex'` (system-exclusive midi)
      - `'notifications'`
      - `'push'`
      - `'camera'`
      - `'microphone'`
      - `'background-sync'`
      - `'ambient-light-sensor'`
      - `'accelerometer'`
      - `'gyroscope'`
      - `'magnetometer'`
      - `'accessibility-events'`
      - `'clipboard-read'`
      - `'clipboard-write'`
      - `'payment-handler'`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    ``` js
    const context = browser.defaultBrowserContext();
    await context.overridePermissions('https://html5demos.com', ['geolocation']);
    ```
- name: browserContext.pages()
  id: index#browsercontextpages
  summary: An array of all pages inside the browser context
  description: |-
    ### browserContext.pages()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Page](#class-page "Page")\>\>\> Promise which resolves to an array of all open pages. Non visible pages, such as `"background_page"`, will not be listed here. You can find them using [target.page()](#targetpage).

    An array of all pages inside the browser context.
- name: browserContext.targets()
  id: index#browsercontexttargets
  summary: An array of all active targets inside the browser context
  description: |-
    ### browserContext.targets()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Target](#class-target "Target")\>\>

    An array of all active targets inside the browser context.
- name: browserContext.waitForTarget()
  id: index#browsercontextwaitfortargetpredicate-options
  summary: This searches for a target in this specific browser context
  description: |-
    ### browserContext.waitForTarget(predicate\[, options\])

    - `predicate` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Target](#class-target "Target")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> A function to be run for every target
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum wait time in milliseconds. Pass `0` to disable the timeout. Defaults to 30 seconds.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Target](#class-target "Target")\>\> Promise which resolves to the first target found that matches the `predicate` function.

    This searches for a target in this specific browser context.

    An example of finding a target for a page opened via `window.open`:

    ``` js
    await page.evaluate(() => window.open('https://www.example.com/'));
    const newWindowTarget = await browserContext.waitForTarget(target => target.url() === 'https://www.example.com/');
    ```
- name: BrowserFetcher
  id: index#class-browserfetcher
  summary: BrowserFetcher can download and manage different versions of Chromium and Firefox
  description: |-
    ## class: BrowserFetcher

    BrowserFetcher can download and manage different versions of Chromium and Firefox.

    BrowserFetcher operates on revision strings that specify a precise version of Chromium, e.g. `"533271"`. Revision strings can be obtained from [omahaproxy.appspot.com](http://omahaproxy.appspot.com/).

    In the Firefox case, BrowserFetcher downloads Firefox Nightly and operates on version numbers such as `"75"`.

    An example of using BrowserFetcher to download a specific version of Chromium and running Puppeteer against it:

    ``` js
    const browserFetcher = puppeteer.createBrowserFetcher();
    const revisionInfo = await browserFetcher.download('533271');
    const browser = await puppeteer.launch({executablePath: revisionInfo.executablePath})
    ```

    > **NOTE** BrowserFetcher is not designed to work concurrently with other instances of BrowserFetcher that share the same downloads directory.
- name: browserFetcher.canDownload()
  id: index#browserfetchercandownloadrevision
  summary: The method initiates a HEAD request to check if the revision is available
  description: |-
    ### browserFetcher.canDownload(revision)

    - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a revision to check availability.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>\> returns `true` if the revision could be downloaded from the host.

    The method initiates a HEAD request to check if the revision is available.
- name: browserFetcher.download()
  id: index#browserfetcherdownloadrevision-progresscallback
  summary: The method initiates a GET request to download the revision from the host
  description: |-
    ### browserFetcher.download(revision\[, progressCallback\])

    - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a revision to download.
    - `progressCallback` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number"), [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number"))\> A function that will be called with two arguments:
      - `downloadedBytes` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> how many bytes have been downloaded
      - `totalBytes` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> how large is the total download.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Resolves with revision information when the revision is downloaded and extracted
      - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> the revision the info was created from
      - `folderPath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> path to the extracted revision folder
      - `executablePath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> path to the revision executable
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL this revision can be downloaded from
      - `local` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> whether the revision is locally available on disk

    The method initiates a GET request to download the revision from the host.
- name: browserFetcher.host()
  id: index#browserfetcherhost
  summary: null
  description: |-
    ### browserFetcher.host()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The download host being used.

    &nbsp;
- name: browserFetcher.localRevisions()
  id: index#browserfetcherlocalrevisions
  summary: null
  description: |-
    ### browserFetcher.localRevisions()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>\> A list of all revisions (for the current `product`) available locally on disk.

    &nbsp;
- name: browserFetcher.platform()
  id: index#browserfetcherplatform
  summary: null
  description: |-
    ### browserFetcher.platform()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> One of `mac`, `linux`, `win32` or `win64`.

    &nbsp;
- name: browserFetcher.product()
  id: index#browserfetcherproduct
  summary: null
  description: |-
    ### browserFetcher.product()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> One of `chrome` or `firefox`.

    &nbsp;
- name: browserFetcher.remove()
  id: index#browserfetcherremoverevision
  summary: null
  description: |-
    ### browserFetcher.remove(revision)

    - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a revision to remove for the current `product`. The method will throw if the revision has not been downloaded.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Resolves when the revision has been removed.

    &nbsp;
- name: browserFetcher.revisionInfo()
  id: index#browserfetcherrevisioninforevision
  summary: NOTE Many BrowserFetcher methods, like remove and revisionInfo are affected by the choice of product
  description: |-
    ### browserFetcher.revisionInfo(revision)

    - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a revision to get info for.
    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `revision` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> the revision the info was created from
      - `folderPath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> path to the extracted revision folder
      - `executablePath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> path to the revision executable
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL this revision can be downloaded from
      - `local` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> whether the revision is locally available on disk
      - `product` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> one of `chrome` or `firefox`

    > **NOTE** Many BrowserFetcher methods, like `remove` and `revisionInfo` are affected by the choice of `product`. See [puppeteer.createBrowserFetcher(\[options\])](#puppeteercreatebrowserfetcheroptions).
- name: CDPSession
  id: index#class-cdpsession
  summary: null
  description: |-
    ## class: CDPSession

    - extends: [EventEmitter](#class-eventemitter)

    The `CDPSession` instances are used to talk raw Chrome Devtools Protocol:

    - protocol methods can be called with `session.send` method.
    - protocol events can be subscribed to with `session.on` method.

    Useful links:

    - Documentation on DevTools Protocol can be found here: [DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/).
    - Getting Started with DevTools Protocol: <https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md>

    ``` js
    const client = await page.target().createCDPSession();
    await client.send('Animation.enable');
    client.on('Animation.animationCreated', () => console.log('Animation created!'));
    const response = await client.send('Animation.getPlaybackRate');
    console.log('playback rate is ' + response.playbackRate);
    await client.send('Animation.setPlaybackRate', {
      playbackRate: response.playbackRate / 2
    });
    ```
- name: cdpSession.detach()
  id: index#cdpsessiondetach
  summary: Detaches the cdpSession from the target
  description: |-
    ### cdpSession.detach()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Detaches the cdpSession from the target. Once detached, the cdpSession object won't emit any events and can't be used to send messages.
- name: cdpSession.send()
  id: index#cdpsessionsendmethod-paramargs
  summary: null
  description: |-
    ### cdpSession.send(method\[, ...paramArgs\])

    - `method` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> protocol method name
    - `...paramArgs` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional method parameters
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>

    &nbsp;
- name: ConsoleMessage
  id: index#class-consolemessage
  summary: ConsoleMessage objects are dispatched by page via the 'console' event
  description: |-
    ## class: ConsoleMessage

    [ConsoleMessage](#class-consolemessage "ConsoleMessage") objects are dispatched by page via the ['console'](#event-console) event.
- name: consoleMessage.args()
  id: index#consolemessageargs
  summary: null
  description: |-
    ### consoleMessage.args()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[JSHandle](#class-jshandle "JSHandle")\>\>

    &nbsp;
- name: consoleMessage.location()
  id: index#consolemessagelocation
  summary: null
  description: |-
    ### consoleMessage.location()

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of the resource if known or `undefined` otherwise.
      - `lineNumber` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> 0-based line number in the resource if known or `undefined` otherwise.
      - `columnNumber` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> 0-based column number in the resource if known or `undefined` otherwise.

    &nbsp;
- name: consoleMessage.stackTrace()
  id: index#consolemessagestacktrace
  summary: null
  description: |-
    ### consoleMessage.stackTrace()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of the resource if known or `undefined` otherwise.
      - `lineNumber` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> 0-based line number in the resource if known or `undefined` otherwise.
      - `columnNumber` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> 0-based column number in the resource if known or `undefined` otherwise.

    &nbsp;
- name: consoleMessage.text()
  id: index#consolemessagetext
  summary: null
  description: |-
    ### consoleMessage.text()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    &nbsp;
- name: consoleMessage.type()
  id: index#consolemessagetype
  summary: null
  description: |-
    ### consoleMessage.type()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    One of the following values: `'log'`, `'debug'`, `'info'`, `'error'`, `'warning'`, `'dir'`, `'dirxml'`, `'table'`, `'trace'`, `'clear'`, `'startGroup'`, `'startGroupCollapsed'`, `'endGroup'`, `'assert'`, `'profile'`, `'profileEnd'`, `'count'`, `'timeEnd'`.
- name: Coverage
  id: index#class-coverage
  summary: Coverage gathers information about parts of JavaScript and CSS that were used by the page
  description: |-
    ## class: Coverage

    Coverage gathers information about parts of JavaScript and CSS that were used by the page.

    An example of using JavaScript and CSS coverage to get percentage of initially executed code:

    ``` js
    // Enable both JavaScript and CSS coverage
    await Promise.all([
      page.coverage.startJSCoverage(),
      page.coverage.startCSSCoverage()
    ]);
    // Navigate to page
    await page.goto('https://example.com');
    // Disable both JavaScript and CSS coverage
    const [jsCoverage, cssCoverage] = await Promise.all([
      page.coverage.stopJSCoverage(),
      page.coverage.stopCSSCoverage(),
    ]);
    let totalBytes = 0;
    let usedBytes = 0;
    const coverage = [...jsCoverage, ...cssCoverage];
    for (const entry of coverage) {
      totalBytes += entry.text.length;
      for (const range of entry.ranges)
        usedBytes += range.end - range.start - 1;
    }
    console.log(`Bytes used: ${usedBytes / totalBytes * 100}%`);
    ```

    *To output coverage in a form consumable by [Istanbul](https://github.com/istanbuljs), see [puppeteer-to-istanbul](https://github.com/istanbuljs/puppeteer-to-istanbul).*
- name: coverage.startCSSCoverage()
  id: index#coveragestartcsscoverageoptions
  summary: null
  description: |-
    ### coverage.startCSSCoverage(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Set of configurable options for coverage
      - `resetOnNavigation` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to reset coverage on every navigation. Defaults to `true`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise that resolves when coverage is started

    &nbsp;
- name: coverage.startJSCoverage()
  id: index#coveragestartjscoverageoptions
  summary: NOTE Anonymous scripts are ones that don't have an associated url
  description: |-
    ### coverage.startJSCoverage(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Set of configurable options for coverage
      - `resetOnNavigation` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to reset coverage on every navigation. Defaults to `true`.
      - `reportAnonymousScripts` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether anonymous scripts generated by the page should be reported. Defaults to `false`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise that resolves when coverage is started

    > **NOTE** Anonymous scripts are ones that don't have an associated url. These are scripts that are dynamically created on the page using `eval` or `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous scripts will have `__puppeteer_evaluation_script__` as their URL.
- name: coverage.stopCSSCoverage()
  id: index#coveragestopcsscoverage
  summary: NOTE CSS Coverage doesn't include dynamically injected style tags without sourceURLs
  description: |-
    ### coverage.stopCSSCoverage()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>\> Promise that resolves to the array of coverage reports for all stylesheets
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> StyleSheet URL
      - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> StyleSheet content
      - `ranges` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> StyleSheet ranges that were used. Ranges are sorted and non-overlapping.
        - `start` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> A start offset in text, inclusive
        - `end` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> An end offset in text, exclusive

    > **NOTE** CSS Coverage doesn't include dynamically injected style tags without sourceURLs.
- name: coverage.stopJSCoverage()
  id: index#coveragestopjscoverage
  summary: NOTE JavaScript Coverage doesn't include anonymous scripts by default
  description: |-
    ### coverage.stopJSCoverage()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>\> Promise that resolves to the array of coverage reports for all scripts
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Script URL
      - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Script content
      - `ranges` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Script ranges that were executed. Ranges are sorted and non-overlapping.
        - `start` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> A start offset in text, inclusive
        - `end` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> An end offset in text, exclusive

    > **NOTE** JavaScript Coverage doesn't include anonymous scripts by default. However, scripts with sourceURLs are reported.
- name: CustomQueryHandler
  id: index#interface-customqueryhandler
  summary: Contains two functions queryOne and queryAll that can be registered as alternative querying strategies
  description: "## interface: CustomQueryHandler\n\nContains two functions `queryOne` and `queryAll` that can be [registered](#puppeteerregistercustomqueryhandlername-queryhandler) as alternative querying strategies. The functions `queryOne` and `queryAll` are executed in the page context. `queryOne` should take an `Element` and a selector string as argument and return a single `Element` or `null` if no element is found. `queryAll` takes the same arguments but should instead return a `NodeList<Element>` or `Array<Element>` with all the elements that match the given query selector.\n\nÂ© 2020 Google Inc  \nLicensed under the Apache License 2.0.  \n[https://github.com/puppeteer/puppeteer/blob/v7.1.0/docs/api.md](https://github.com/puppeteer/puppeteer/blob/v7.1.0/docs/api.md)"
- name: Dialog
  id: index#class-dialog
  summary: Dialog objects are dispatched by page via the 'dialog' event
  description: |-
    ## class: Dialog

    [Dialog](#class-dialog "Dialog") objects are dispatched by page via the ['dialog'](#event-dialog) event.

    An example of using `Dialog` class:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('dialog', async dialog => {
        console.log(dialog.message());
        await dialog.dismiss();
        await browser.close();
      });
      page.evaluate(() => alert('1'));
    })();
    ```
- name: dialog.accept()
  id: index#dialogacceptprompttext
  summary: null
  description: |-
    ### dialog.accept(\[promptText\])

    - `promptText` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A text to enter in prompt. Does not cause any effects if the dialog's `type` is not prompt.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the dialog has been accepted.

    &nbsp;
- name: dialog.defaultValue()
  id: index#dialogdefaultvalue
  summary: null
  description: |-
    ### dialog.defaultValue()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If dialog is prompt, returns default prompt value. Otherwise, returns empty string.

    &nbsp;
- name: dialog.dismiss()
  id: index#dialogdismiss
  summary: null
  description: |-
    ### dialog.dismiss()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the dialog has been dismissed.

    &nbsp;
- name: dialog.message()
  id: index#dialogmessage
  summary: null
  description: |-
    ### dialog.message()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A message displayed in the dialog.

    &nbsp;
- name: dialog.type()
  id: index#dialogtype
  summary: null
  description: |-
    ### dialog.type()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`.

    &nbsp;
- name: ElementHandle
  id: index#class-elementhandle
  summary: ElementHandle represents an in-page DOM element
  description: |-
    ## class: ElementHandle

    - extends: [JSHandle](#class-jshandle "JSHandle")

    ElementHandle represents an in-page DOM element. ElementHandles can be created with the [page.$](#pageselector) method.

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://example.com');
      const hrefElement = await page.$('a');
      await hrefElement.click();
      // ...
    })();
    ```

    ElementHandle prevents DOM element from garbage collection unless the handle is [disposed](#elementhandledispose). ElementHandles are auto-disposed when their origin frame gets navigated.

    ElementHandle instances can be used as arguments in [`page.$eval()`](#pageevalselector-pagefunction-args) and [`page.evaluate()`](#pageevaluatepagefunction-args) methods.
- name: elementHandle.$$()
  id: index#elementhandleselector-1
  summary: The method runs element.querySelectorAll within the page
  description: |-
    ### elementHandle.$$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query element for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\>

    The method runs `element.querySelectorAll` within the page. If no elements match the selector, the return value resolves to `[]`.
- name: elementHandle.$$eval()
  id: index#elementhandleevalselector-pagefunction-args
  summary: This method runs document.querySelectorAll within the element and passes it as the first argument to pageFunction
  description: "### elementHandle.$$eval(selector, pageFunction\\[, ...args\\])\n\n- `selector` \\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"String\")\\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors \"selector\") to query page for\n- `pageFunction` \\<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element \"Element\")\\>)\\> Function to be evaluated in browser context\n- `...args` \\<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\|[JSHandle](#class-jshandle \"JSHandle\")\\> Arguments to pass to `pageFunction`\n- returns: \\<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\\> Promise which resolves to the return value of `pageFunction`\n\nThis method runs `document.querySelectorAll` within the element and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then `frame.$$eval` would wait for the promise to resolve and return its value.\n\nExamples:\n\n``` \n<div class=\"feed\">\n  <div class=\"tweet\">Hello!</div>\n  <div class=\"tweet\">Hi!</div>\n</div>\n```\n\n``` js\nconst feedHandle = await page.$('.feed');\nexpect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!']);\n```"
- name: elementHandle.$()
  id: index#elementhandleselector
  summary: The method runs element.querySelector within the page
  description: |-
    ### elementHandle.$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query element for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\>

    The method runs `element.querySelector` within the page. If no element matches the selector, the return value resolves to `null`.
- name: elementHandle.$eval()
  id: index#elementhandleevalselector-pagefunction-args-1
  summary: This method runs document.querySelector within the element and passes it as the first argument to pageFunction
  description: |-
    ### elementHandle.$eval(selector, pageFunction\[, ...args\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element"))\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method runs `document.querySelector` within the element and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `frame.$eval` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const tweetHandle = await page.$('.tweet');
    expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
    expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
    ```
- name: elementHandle.$x()
  id: index#elementhandlexexpression
  summary: The method evaluates the XPath expression relative to the elementHandle as its context node
  description: |-
    ### elementHandle.$x(expression)

    - `expression` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Expression to [evaluate](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\>

    The method evaluates the XPath expression relative to the `elementHandle` as its context node. If there are no such elements, the method resolves to an empty array.

    The `expression` should have the context node to be evaluated properly:

    ``` js
    const [childHandle] = await parentHandle.$x('./div');
    ```
- name: elementHandle.asElement()
  id: index#elementhandleaselement
  summary: null
  description: |-
    ### elementHandle.asElement()

    - returns: \<[ElementHandle](#class-elementhandle "ElementHandle")\>

    &nbsp;
- name: elementHandle.boundingBox()
  id: index#elementhandleboundingbox
  summary: This method returns the bounding box of the element (relative to the main frame), or null if the element is not visible
  description: |-
    ### elementHandle.boundingBox()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - x \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the x coordinate of the element in pixels.
      - y \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the y coordinate of the element in pixels.
      - width \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the width of the element in pixels.
      - height \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the height of the element in pixels.

    This method returns the bounding box of the element (relative to the main frame), or `null` if the element is not visible.
- name: elementHandle.boxModel()
  id: index#elementhandleboxmodel
  summary: This method returns boxes of the element, or null if the element is not visible
  description: |-
    ### elementHandle.boxModel()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - content \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Content box.
        - x \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
        - y \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
      - padding \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Padding box.
        - x \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
        - y \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
      - border \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Border box.
        - x \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
        - y \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
      - margin \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Margin box.
        - x \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
        - y \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
      - width \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Element's width.
      - height \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Element's height.

    This method returns boxes of the element, or `null` if the element is not visible. Boxes are represented as an array of points; each Point is an object `{x, y}`. Box points are sorted clock-wise.
- name: elementHandle.click()
  id: index#elementhandleclickoptions
  summary: This method scrolls element into view if needed, and then uses page.mouse to click in the center of the element
  description: |-
    ### elementHandle.click(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element is successfully clicked. Promise gets rejected if the element is detached from DOM.

    This method scrolls element into view if needed, and then uses [page.mouse](#pagemouse) to click in the center of the element. If the element is detached from DOM, the method throws an error.
- name: elementHandle.contentFrame()
  id: index#elementhandlecontentframe
  summary: null
  description: |-
    ### elementHandle.contentFrame()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[Frame](#class-frame "Frame")\>\> Resolves to the content frame for element handles referencing iframe nodes, or null otherwise

    &nbsp;
- name: elementHandle.dispose()
  id: index#elementhandledispose
  summary: The elementHandle.dispose method stops referencing the element handle
  description: |-
    ### elementHandle.dispose()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element handle is successfully disposed.

    The `elementHandle.dispose` method stops referencing the element handle.
- name: elementHandle.evaluate()
  id: index#elementhandleevaluatepagefunction-args
  summary: This method passes this handle as the first argument to pageFunction
  description: |-
    ### elementHandle.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object"))\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method passes this handle as the first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `handle.evaluate` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const tweetHandle = await page.$('.tweet .retweets');
    expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');
    ```
- name: elementHandle.evaluateHandle()
  id: index#elementhandleevaluatehandlepagefunction-args
  summary: This method passes this handle as the first argument to pageFunction
  description: |-
    ### elementHandle.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    This method passes this handle as the first argument to `pageFunction`.

    The only difference between `elementHandle.evaluate` and `elementHandle.evaluateHandle` is that `executionContext.evaluateHandle` returns in-page object (JSHandle).

    If the function returns an element, the returned handle is an [ElementHandle](#class-elementhandle "ElementHandle").

    If the function passed to the `elementHandle.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `elementHandle.evaluateHandle` would wait for the promise to resolve and return its value.

    See [Page.evaluateHandle](#pageevaluatehandlepagefunction-args) for more details.
- name: elementHandle.executionContext()
  id: index#elementhandleexecutioncontext
  summary: null
  description: |-
    ### elementHandle.executionContext()

    - returns: \<[ExecutionContext](#class-executioncontext "ExecutionContext")\>

    &nbsp;
- name: elementHandle.focus()
  id: index#elementhandlefocus
  summary: Calls focus on the element
  description: |-
    ### elementHandle.focus()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the element.
- name: elementHandle.getProperties()
  id: index#elementhandlegetproperties
  summary: The method returns a map with property names as keys and JSHandle instances for the property values
  description: |-
    ### elementHandle.getProperties()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map "Map")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String"), [JSHandle](#class-jshandle "JSHandle")\>\>\>

    The method returns a map with property names as keys and JSHandle instances for the property values.

    ``` js
    const listHandle = await page.evaluateHandle(() => document.body.children);
    const properties = await listHandle.getProperties();
    const children = [];
    for (const property of properties.values()) {
      const element = property.asElement();
      if (element)
        children.push(element);
    }
    children; // holds elementHandles to all children of document.body
    ```
- name: elementHandle.getProperty()
  id: index#elementhandlegetpropertypropertyname
  summary: Fetches a single property from the objectHandle
  description: |-
    ### elementHandle.getProperty(propertyName)

    - `propertyName` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> property to get
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\>

    Fetches a single property from the objectHandle.
- name: elementHandle.hover()
  id: index#elementhandlehover
  summary: This method scrolls element into view if needed, and then uses page.mouse to hover over the center of the element
  description: |-
    ### elementHandle.hover()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element is successfully hovered.

    This method scrolls element into view if needed, and then uses [page.mouse](#pagemouse) to hover over the center of the element. If the element is detached from DOM, the method throws an error.
- name: elementHandle.isIntersectingViewport()
  id: index#elementhandleisintersectingviewport
  summary: null
  description: |-
    ### elementHandle.isIntersectingViewport()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>\> Resolves to true if the element is visible in the current viewport.

    &nbsp;
- name: elementHandle.jsonValue()
  id: index#elementhandlejsonvalue
  summary: Returns a JSON representation of the object
  description: |-
    ### elementHandle.jsonValue()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>

    Returns a JSON representation of the object. The JSON is generated by running [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) on the object in page and consequent [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) in puppeteer.

    > **NOTE** The method will throw if the referenced object is not stringifiable.
- name: elementHandle.press()
  id: index#elementhandlepresskey-options
  summary: Focuses the element, and then uses keyboard.down and keyboard.up
  description: |-
    ### elementHandle.press(key\[, options\])

    - `key` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of key to press, such as `ArrowLeft`. See [USKeyboardLayout](https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts "USKeyboardLayout") for a list of all key names.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If specified, generates an input event with this text.
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Focuses the element, and then uses [`keyboard.down`](#keyboarddownkey-options) and [`keyboard.up`](#keyboardupkey).

    If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also be generated. The `text` option can be specified to force an input event to be generated.

    > **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift` will type the text in upper case.
- name: elementHandle.screenshot()
  id: index#elementhandlescreenshotoptions
  summary: This method scrolls element into view if needed, and then uses page.screenshot to take a screenshot of the element
  description: |-
    ### elementHandle.screenshot(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Same options as in [page.screenshot](#pagescreenshotoptions).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>\> Promise which resolves to buffer or a base64 string (depending on the value of `options.encoding`) with captured screenshot.

    This method scrolls element into view if needed, and then uses [page.screenshot](#pagescreenshotoptions) to take a screenshot of the element. If the element is detached from DOM, the method throws an error.
- name: elementHandle.select()
  id: index#elementhandleselectvalues
  summary: Triggers a change and input event once all the provided options have been selected
  description: |-
    ### elementHandle.select(...values)

    - `...values` \<...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Values of options to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>\> An array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected. If there's no `<select>` element matching `selector`, the method throws an error.

    ``` js
    handle.select('blue'); // single selection
    handle.select('red', 'green', 'blue'); // multiple selections
    ```
- name: elementHandle.tap()
  id: index#elementhandletap
  summary: This method scrolls element into view if needed, and then uses touchscreen.tap to tap in the center of the element
  description: |-
    ### elementHandle.tap()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element is successfully tapped. Promise gets rejected if the element is detached from DOM.

    This method scrolls element into view if needed, and then uses [touchscreen.tap](#touchscreentapx-y) to tap in the center of the element. If the element is detached from DOM, the method throws an error.
- name: elementHandle.toString()
  id: index#elementhandletostring
  summary: null
  description: |-
    ### elementHandle.toString()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    &nbsp;
- name: elementHandle.type()
  id: index#elementhandletypetext-options
  summary: Focuses the element, and then sends a keydown, keypress/input, and keyup event for each character in the text
  description: |-
    ### elementHandle.type(text\[, options\])

    - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A text to type into a focused element.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between key presses in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [`elementHandle.press`](#elementhandlepresskey-options).

    ``` js
    await elementHandle.type('Hello'); // Types instantly
    await elementHandle.type('World', {delay: 100}); // Types slower, like a user
    ```

    An example of typing into a text field and then submitting the form:

    ``` js
    const elementHandle = await page.$('input');
    await elementHandle.type('some text');
    await elementHandle.press('Enter');
    ```
- name: elementHandle.uploadFile()
  id: index#elementhandleuploadfilefilepaths
  summary: This method expects elementHandle to point to an input element
  description: |-
    ### elementHandle.uploadFile(...filePaths)

    - `...filePaths` \<...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Sets the value of the file input to these paths. If some of the `filePaths` are relative paths, then they are resolved relative to the [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    This method expects `elementHandle` to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).
- name: Environment Variables
  id: index#environment-variables
  summary: Puppeteer looks for certain environment variables to aid its operations
  description: |-
    ## Environment Variables

    Puppeteer looks for certain [environment variables](https://en.wikipedia.org/wiki/Environment_variable) to aid its operations. If Puppeteer doesn't find them in the environment during the installation step, a lowercased variant of these variables will be used from the [npm config](https://docs.npmjs.com/cli/config).

    - `HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY` - defines HTTP proxy settings that are used to download and run Chromium.
    - `PUPPETEER_SKIP_CHROMIUM_DOWNLOAD` - do not download bundled Chromium during installation step.
    - `PUPPETEER_DOWNLOAD_HOST` - overwrite URL prefix that is used to download Chromium. Note: this includes protocol and might even include path prefix. Defaults to `https://storage.googleapis.com`.
    - `PUPPETEER_DOWNLOAD_PATH` - overwrite the path for the downloads folder. Defaults to `<root>/.local-chromium`, where `<root>` is puppeteer's package root.
    - `PUPPETEER_CHROMIUM_REVISION` - specify a certain version of Chromium you'd like Puppeteer to use. See [puppeteer.launch(\[options\])](#puppeteerlaunchoptions) on how executable path is inferred. **BEWARE**: Puppeteer is only [guaranteed to work](https://github.com/puppeteer/puppeteer/#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy) with the bundled Chromium, use at your own risk.
    - `PUPPETEER_EXECUTABLE_PATH` - specify an executable path to be used in `puppeteer.launch`. See [puppeteer.launch(\[options\])](#puppeteerlaunchoptions) on how the executable path is inferred. **BEWARE**: Puppeteer is only [guaranteed to work](https://github.com/puppeteer/puppeteer/#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy) with the bundled Chromium, use at your own risk.
    - `PUPPETEER_PRODUCT` - specify which browser you'd like Puppeteer to use. Must be one of `chrome` or `firefox`. This can also be used during installation to fetch the recommended browser binary. Setting `product` programmatically in [puppeteer.launch(\[options\])](#puppeteerlaunchoptions) supersedes this environment variable. The product is exposed in [`puppeteer.product`](#puppeteerproduct)

    > **NOTE** PUPPETEER\_\* env variables are not accounted for in the [`puppeteer-core`](https://www.npmjs.com/package/puppeteer-core) package.
- name: EventEmitter
  id: index#class-eventemitter
  summary: A small EventEmitter class backed by Mitt
  description: |-
    ## class: EventEmitter

    A small EventEmitter class backed by [Mitt](https://github.com/developit/mitt/).
- name: eventEmitter.addListener()
  id: index#eventemitteraddlistenerevent-handler
  summary: This method is identical to on and maintained for compatibility with Node's EventEmitter
  description: |-
    ### eventEmitter.addListener(event, handler)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to remove the handler from.
    - `handler` \<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> the event listener that will be added.
    - returns: `this` so you can chain method calls

    This method is identical to `on` and maintained for compatibility with Node's EventEmitter. We recommend using `on` by default.
- name: eventEmitter.emit()
  id: index#eventemitteremitevent-eventdata
  summary: null
  description: |-
    ### eventEmitter.emit(event, \[eventData\])

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to trigger.
    - `eventData` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> additional data to send with the event.
    - returns: `boolean`; `true` if there are any listeners for the event, `false` if there are none.

    &nbsp;
- name: eventEmitter.listenerCount()
  id: index#eventemitterlistenercountevent
  summary: null
  description: |-
    ### eventEmitter.listenerCount(event)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to check for listeners.
    - returns: \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the number of listeners for the given event.

    &nbsp;
- name: eventEmitter.off()
  id: index#eventemitteroffevent-handler
  summary: null
  description: |-
    ### eventEmitter.off(event, handler)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to remove the handler from.
    - `handler` \<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> the event listener that will be removed.
    - returns: `this` so you can chain method calls

    &nbsp;
- name: eventEmitter.on()
  id: index#eventemitteronevent-handler
  summary: null
  description: |-
    ### eventEmitter.on(event, handler)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to add the handler to.
    - `handler` \<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> the event listener that will be added.
    - returns: `this` so you can chain method calls

    &nbsp;
- name: eventEmitter.once()
  id: index#eventemitteronceevent-handler
  summary: null
  description: |-
    ### eventEmitter.once(event, handler)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to add the handler to.
    - `handler` \<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> the event listener that will be added.
    - returns: `this` so you can chain method calls

    &nbsp;
- name: eventEmitter.removeAllListeners()
  id: index#eventemitterremovealllistenersevent
  summary: null
  description: |-
    ### eventEmitter.removeAllListeners(\[event\])

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> optional argument to remove all listeners for the given event. If it's not given this method will remove all listeners for all events.
    - returns: `this` so you can chain method calls

    &nbsp;
- name: eventEmitter.removeListener()
  id: index#eventemitterremovelistenerevent-handler
  summary: This method is identical to off and maintained for compatibility with Node's EventEmitter
  description: |-
    ### eventEmitter.removeListener(event, handler)

    - `event` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Symbol_type "Symbol")\> the event to remove the handler from.
    - `handler` \<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> the event listener that will be removed.
    - returns: `this` so you can chain method calls

    This method is identical to `off` and maintained for compatibility with Node's EventEmitter. We recommend using `off` by default.
- name: ExecutionContext
  id: index#class-executioncontext
  summary: The class represents a context for JavaScript execution
  description: |-
    ## class: ExecutionContext

    The class represents a context for JavaScript execution. A [Page](#class-page "Page") might have many execution contexts:

    - each [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) has "default" execution context that is always created after frame is attached to DOM. This context is returned by the [`frame.executionContext()`](#frameexecutioncontext) method.
    - [Extensions](https://developer.chrome.com/extensions)'s content scripts create additional execution contexts.

    Besides pages, execution contexts can be found in [workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).
- name: executionContext.evaluate()
  id: index#executioncontextevaluatepagefunction-args
  summary: If the function passed to the executionContext.evaluate returns a Promise, then executionContext.evaluate would wait for the promise to resolve and return its value
  description: |-
    ### executionContext.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in `executionContext`
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    If the function passed to the `executionContext.evaluate` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `executionContext.evaluate` would wait for the promise to resolve and return its value.

    If the function passed to the `executionContext.evaluate` returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then `executionContext.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.

    ``` js
    const executionContext = await page.mainFrame().executionContext();
    const result = await executionContext.evaluate(() => Promise.resolve(8 * 7));
    console.log(result); // prints "56"
    ```

    A string can also be passed in instead of a function.

    ``` js
    console.log(await executionContext.evaluate('1 + 2')); // prints "3"
    ```

    [JSHandle](#class-jshandle "JSHandle") instances can be passed as arguments to the `executionContext.evaluate`:

    ``` js
    const oneHandle = await executionContext.evaluateHandle(() => 1);
    const twoHandle = await executionContext.evaluateHandle(() => 2);
    const result = await executionContext.evaluate((a, b) => a + b, oneHandle, twoHandle);
    await oneHandle.dispose();
    await twoHandle.dispose();
    console.log(result); // prints '3'.
    ```
- name: executionContext.evaluateHandle()
  id: index#executioncontextevaluatehandlepagefunction-args
  summary: The only difference between executionContext.evaluate and executionContext.evaluateHandle is that executionContext.evaluateHandle returns in-page object (JSHandle)
  description: |-
    ### executionContext.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the `executionContext`
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    The only difference between `executionContext.evaluate` and `executionContext.evaluateHandle` is that `executionContext.evaluateHandle` returns in-page object (JSHandle).

    If the function returns an element, the returned handle is an [ElementHandle](#class-elementhandle "ElementHandle").

    If the function passed to the `executionContext.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `executionContext.evaluateHandle` would wait for the promise to resolve and return its value.

    ``` js
    const context = await page.mainFrame().executionContext();
    const aHandle = await context.evaluateHandle(() => Promise.resolve(self));
    aHandle; // Handle for the global object.
    ```

    A string can also be passed in instead of a function.

    ``` js
    const aHandle = await context.evaluateHandle('1 + 2'); // Handle for the '3' object.
    ```

    [JSHandle](#class-jshandle "JSHandle") instances can be passed as arguments to the `executionContext.evaluateHandle`:

    ``` js
    const aHandle = await context.evaluateHandle(() => document.body);
    const resultHandle = await context.evaluateHandle(body => body.innerHTML, aHandle);
    console.log(await resultHandle.jsonValue()); // prints body's innerHTML
    await aHandle.dispose();
    await resultHandle.dispose();
    ```
- name: executionContext.frame()
  id: index#executioncontextframe
  summary: NOTE Not every execution context is associated with a frame
  description: |-
    ### executionContext.frame()

    - returns: \<?[Frame](#class-frame "Frame")\> Frame associated with this execution context.

    > **NOTE** Not every execution context is associated with a frame. For example, workers and extensions have execution contexts that are not associated with frames.
- name: executionContext.queryObjects()
  id: index#executioncontextqueryobjectsprototypehandle
  summary: The method iterates the JavaScript heap and finds all the objects with the given prototype
  description: |-
    ### executionContext.queryObjects(prototypeHandle)

    - `prototypeHandle` \<[JSHandle](#class-jshandle "JSHandle")\> A handle to the object prototype.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> A handle to an array of objects with this prototype

    The method iterates the JavaScript heap and finds all the objects with the given prototype.

    ``` js
    // Create a Map object
    await page.evaluate(() => window.map = new Map());
    // Get a handle to the Map object prototype
    const mapPrototype = await page.evaluateHandle(() => Map.prototype);
    // Query all map instances into an array
    const mapInstances = await page.queryObjects(mapPrototype);
    // Count amount of map objects in heap
    const count = await page.evaluate(maps => maps.length, mapInstances);
    await mapInstances.dispose();
    await mapPrototype.dispose();
    ```
- name: FileChooser
  id: index#class-filechooser
  summary: FileChooser objects are returned via the 'page.waitForFileChooser' method
  description: |-
    ## class: FileChooser

    [FileChooser](#class-filechooser "FileChooser") objects are returned via the ['page.waitForFileChooser'](#pagewaitforfilechooseroptions) method.

    File choosers let you react to the page requesting for a file.

    An example of using [FileChooser](#class-filechooser "FileChooser"):

    ``` js
    const [fileChooser] = await Promise.all([
      page.waitForFileChooser(),
      page.click('#upload-file-button'), // some button that triggers file selection
    ]);
    await fileChooser.accept(['/tmp/myfile.pdf']);
    ```

    > **NOTE** In browsers, only one file chooser can be opened at a time. All file choosers must be accepted or canceled. Not doing so will prevent subsequent file choosers from appearing.
- name: fileChooser.accept()
  id: index#filechooseracceptfilepaths
  summary: null
  description: |-
    ### fileChooser.accept(filePaths)

    - `filePaths` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Accept the file chooser request with given paths. If some of the `filePaths` are relative paths, then they are resolved relative to the [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: fileChooser.cancel()
  id: index#filechoosercancel
  summary: Closes the file chooser without selecting any files
  description: |-
    ### fileChooser.cancel()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Closes the file chooser without selecting any files.
- name: fileChooser.isMultiple()
  id: index#filechooserismultiple
  summary: null
  description: |-
    ### fileChooser.isMultiple()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether file chooser allow for [multiple](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple) file selection.

    &nbsp;
- name: Frame
  id: index#class-frame
  summary: At every point of time, page exposes its current frame tree via the page.mainFrame() and frame.childFrames() methods
  description: |-
    ## class: Frame

    At every point of time, page exposes its current frame tree via the [page.mainFrame()](#pagemainframe) and [frame.childFrames()](#framechildframes) methods.

    [Frame](#class-frame "Frame") object's lifecycle is controlled by three events, dispatched on the page object:

    - ['frameattached'](#event-frameattached) - fired when the frame gets attached to the page. A Frame can be attached to the page only once.
    - ['framenavigated'](#event-framenavigated) - fired when the frame commits navigation to a different URL.
    - ['framedetached'](#event-framedetached) - fired when the frame gets detached from the page. A Frame can be detached from the page only once.

    An example of dumping frame tree:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://www.google.com/chrome/browser/canary.html');
      dumpFrameTree(page.mainFrame(), '');
      await browser.close();

      function dumpFrameTree(frame, indent) {
        console.log(indent + frame.url());
        for (const child of frame.childFrames()) {
          dumpFrameTree(child, indent + '  ');
        }
      }
    })();
    ```

    An example of getting text from an iframe element:

    ``` js
    const frame = page.frames().find(frame => frame.name() === 'myframe');
    const text = await frame.$eval('.selector', element => element.textContent);
    console.log(text);
    ```
- name: frame.$$()
  id: index#frameselector-1
  summary: The method runs document.querySelectorAll within the frame
  description: |-
    ### frame.$$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query frame for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\> Promise which resolves to ElementHandles pointing to the frame elements.

    The method runs `document.querySelectorAll` within the frame. If no elements match the selector, the return value resolves to `[]`.
- name: frame.$$eval()
  id: index#frameevalselector-pagefunction-args
  summary: This method runs Array.from(document.querySelectorAll(selector)) within the frame and passes it as the first argument to pageFunction
  description: |-
    ### frame.$$eval(selector, pageFunction\[, ...args\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query frame for
    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")\>)\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method runs `Array.from(document.querySelectorAll(selector))` within the frame and passes it as the first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `frame.$$eval` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const divsCounts = await frame.$$eval('div', divs => divs.length);
    ```
- name: frame.$()
  id: index#frameselector
  summary: The method queries frame for the selector
  description: |-
    ### frame.$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query frame for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to ElementHandle pointing to the frame element.

    The method queries frame for the selector. If there's no such element within the frame, the method resolves to `null`.
- name: frame.$eval()
  id: index#frameevalselector-pagefunction-args-1
  summary: This method runs document.querySelector within the frame and passes it as the first argument to pageFunction
  description: |-
    ### frame.$eval(selector, pageFunction\[, ...args\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query frame for
    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element"))\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method runs `document.querySelector` within the frame and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `frame.$eval` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const searchValue = await frame.$eval('#search', el => el.value);
    const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
    const html = await frame.$eval('.main-container', e => e.outerHTML);
    ```
- name: frame.$x()
  id: index#framexexpression
  summary: The method evaluates the XPath expression relative to the frame document as its context node
  description: |-
    ### frame.$x(expression)

    - `expression` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Expression to [evaluate](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\>

    The method evaluates the XPath expression relative to the frame document as its context node. If there are no such elements, the method resolves to an empty array.
- name: frame.addScriptTag()
  id: index#frameaddscripttagoptions
  summary: Adds a <script> tag into the page with the desired url or content
  description: |-
    ### frame.addScriptTag(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of a script to be added.
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
      - `content` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Raw JavaScript content to be injected into frame.
      - `type` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Script type. Use 'module' in order to load a Javascript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\> which resolves to the added tag when the script's onload fires or when the script content was injected into frame.

    Adds a `<script>` tag into the page with the desired url or content.
- name: frame.addStyleTag()
  id: index#frameaddstyletagoptions
  summary: Adds a <link rel="stylesheet"> tag into the page with the desired url or a <style type="text/css"> tag with the content
  description: |-
    ### frame.addStyleTag(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of the `<link>` tag.
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
      - `content` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Raw CSS content to be injected into frame.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\> which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

    Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content.
- name: frame.childFrames()
  id: index#framechildframes
  summary: null
  description: |-
    ### frame.childFrames()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Frame](#class-frame "Frame")\>\>

    &nbsp;
- name: frame.click()
  id: index#frameclickselector-options
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.mouse to click in the center of the element
  description: |-
    ### frame.click(selector\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully clicked. The Promise will be rejected if there is no element matching `selector`.

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.mouse](#pagemouse) to click in the center of the element. If there's no element matching `selector`, the method throws an error.

    Bear in mind that if `click()` triggers a navigation event and there's a separate `page.waitForNavigation()` promise to be resolved, you may end up with a race condition that yields unexpected results. The correct pattern for click and wait for navigation is the following:

    ``` js
    const [response] = await Promise.all([
      page.waitForNavigation(waitOptions),
      frame.click(selector, clickOptions),
    ]);
    ```
- name: frame.content()
  id: index#framecontent
  summary: Gets the full HTML contents of the frame, including the doctype
  description: |-
    ### frame.content()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>

    Gets the full HTML contents of the frame, including the doctype.
- name: frame.evaluate()
  id: index#frameevaluatepagefunction-args
  summary: If the function passed to the frame.evaluate returns a Promise, then frame.evaluate would wait for the promise to resolve and return its value
  description: |-
    ### frame.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    If the function passed to the `frame.evaluate` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `frame.evaluate` would wait for the promise to resolve and return its value.

    If the function passed to the `frame.evaluate` returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then `frame.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.

    ``` js
    const result = await frame.evaluate(() => {
      return Promise.resolve(8 * 7);
    });
    console.log(result); // prints "56"
    ```

    A string can also be passed in instead of a function.

    ``` js
    console.log(await frame.evaluate('1 + 2')); // prints "3"
    ```

    [ElementHandle](#class-elementhandle "ElementHandle") instances can be passed as arguments to the `frame.evaluate`:

    ``` js
    const bodyHandle = await frame.$('body');
    const html = await frame.evaluate(body => body.innerHTML, bodyHandle);
    await bodyHandle.dispose();
    ```
- name: frame.evaluateHandle()
  id: index#frameevaluatehandlepagefunction-args
  summary: The only difference between frame.evaluate and frame.evaluateHandle is that frame.evaluateHandle returns in-page object (JSHandle)
  description: |-
    ### frame.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the page context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    The only difference between `frame.evaluate` and `frame.evaluateHandle` is that `frame.evaluateHandle` returns in-page object (JSHandle).

    If the function, passed to the `frame.evaluateHandle`, returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `frame.evaluateHandle` would wait for the promise to resolve and return its value.

    If the function returns an element, the returned handle is an [ElementHandle](#class-elementhandle "ElementHandle").

    ``` js
    const aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));
    aWindowHandle; // Handle for the window object.
    ```

    A string can also be passed in instead of a function.

    ``` js
    const aHandle = await frame.evaluateHandle('document'); // Handle for the 'document'.
    ```

    [JSHandle](#class-jshandle "JSHandle") instances can be passed as arguments to the `frame.evaluateHandle`:

    ``` js
    const aHandle = await frame.evaluateHandle(() => document.body);
    const resultHandle = await frame.evaluateHandle(body => body.innerHTML, aHandle);
    console.log(await resultHandle.jsonValue());
    await resultHandle.dispose();
    ```
- name: frame.executionContext()
  id: index#frameexecutioncontext
  summary: Returns promise that resolves to the frame's default execution context
  description: |-
    ### frame.executionContext()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ExecutionContext](#class-executioncontext "ExecutionContext")\>\>

    Returns promise that resolves to the frame's default execution context.
- name: frame.focus()
  id: index#framefocusselector
  summary: This method fetches an element with selector and focuses it
  description: |-
    ### frame.focus(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to focus. If there are multiple elements satisfying the selector, the first will be focused.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully focused. The promise will be rejected if there is no element matching `selector`.

    This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the method throws an error.
- name: frame.goto()
  id: index#framegotourl-options
  summary: frame.goto will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling response.status()
  description: |-
    ### frame.goto(url\[, options\])

    - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL to navigate frame to. The url should include scheme, e.g. `https://`.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
      - `referer` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Referer header value. If provided it will take preference over the referer header value set by [page.setExtraHTTPHeaders()](#pagesetextrahttpheadersheaders).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

    `frame.goto` will throw an error if:

    - there's an SSL error (e.g. in case of self-signed certificates).
    - target URL is invalid.
    - the `timeout` is exceeded during navigation.
    - the remote server does not respond or is unreachable.
    - the main resource failed to load.

    `frame.goto` will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling [response.status()](#httpresponsestatus).

    > **NOTE**`frame.goto` either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.

    > **NOTE** Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).
- name: frame.hover()
  id: index#framehoverselector
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.mouse to hover over the center of the element
  description: |-
    ### frame.hover(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully hovered. Promise gets rejected if there's no element matching `selector`.

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.mouse](#pagemouse) to hover over the center of the element. If there's no element matching `selector`, the method throws an error.
- name: frame.isDetached()
  id: index#frameisdetached
  summary: Returns true if the frame has been detached, or false otherwise
  description: |-
    ### frame.isDetached()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Returns `true` if the frame has been detached, or `false` otherwise.
- name: frame.name()
  id: index#framename
  summary: Returns frame's name attribute as specified in the tag
  description: |-
    ### frame.name()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    Returns frame's name attribute as specified in the tag.

    If the name is empty, returns the id attribute instead.

    > **NOTE** This value is calculated once when the frame is created, and will not update if the attribute is changed later.
- name: frame.parentFrame()
  id: index#frameparentframe
  summary: null
  description: |-
    ### frame.parentFrame()

    - returns: \<?[Frame](#class-frame "Frame")\> Parent frame, if any. Detached frames and main frames return `null`.

    &nbsp;
- name: frame.select()
  id: index#frameselectselector-values
  summary: Triggers a change and input event once all the provided options have been selected
  description: |-
    ### frame.select(selector, ...values)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query frame for
    - `...values` \<...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Values of options to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>\> An array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected. If there's no `<select>` element matching `selector`, the method throws an error.

    ``` js
    frame.select('select#colors', 'blue'); // single selection
    frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections
    ```
- name: frame.setContent()
  id: index#framesetcontenthtml-options
  summary: null
  description: |-
    ### frame.setContent(html\[, options\])

    - `html` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> HTML markup to assign to the page.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum time in milliseconds for resources to load, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider setting markup succeeded, defaults to `load`. Given an array of event strings, setting content is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider setting content to be finished when the `load` event is fired.
        - `domcontentloaded` - consider setting content to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider setting content to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider setting content to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: frame.tap()
  id: index#frametapselector
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.touchscreen to tap in the center of the element
  description: |-
    ### frame.tap(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to tap. If there are multiple elements satisfying the selector, the first will be tapped.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.touchscreen](#pagetouchscreen) to tap in the center of the element. If there's no element matching `selector`, the method throws an error.
- name: frame.title()
  id: index#frametitle
  summary: null
  description: |-
    ### frame.title()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> The page's title.

    &nbsp;
- name: frame.type()
  id: index#frametypeselector-text-options
  summary: Sends a keydown, keypress/input, and keyup event for each character in the text
  description: |-
    ### frame.type(selector, text\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to type into. If there are multiple elements satisfying the selector, the first will be used.
    - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A text to type into a focused element.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between key presses in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [`keyboard.press`](#keyboardpresskey-options).

    ``` js
    await frame.type('#mytextarea', 'Hello'); // Types instantly
    await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user
    ```
- name: frame.url()
  id: index#frameurl
  summary: Returns frame's url
  description: |-
    ### frame.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    Returns frame's url.
- name: frame.waitFor()
  id: index#framewaitforselectororfunctionortimeout-options-args
  summary: This method is deprecated
  description: |-
    ### frame.waitFor(selectorOrFunctionOrTimeout\[, options\[, ...args\]\])

    - `selectorOrFunctionOrTimeout` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\|[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector"), predicate or timeout to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> Promise which resolves to a JSHandle of the success value

    **This method is deprecated**. You should use the more explicit API methods available:

    - `frame.waitForSelector`
    - `frame.waitForXPath`
    - `frame.waitForFunction`
    - `frame.waitForTimeout`

    This method behaves differently with respect to the type of the first parameter:

    - if `selectorOrFunctionOrTimeout` is a `string`, then the first argument is treated as a [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") or [xpath](https://developer.mozilla.org/en-US/docs/Web/XPath "xpath"), depending on whether or not it starts with '//', and the method is a shortcut for [frame.waitForSelector](#framewaitforselectorselector-options) or [frame.waitForXPath](#framewaitforxpathxpath-options)
    - if `selectorOrFunctionOrTimeout` is a `function`, then the first argument is treated as a predicate to wait for and the method is a shortcut for [frame.waitForFunction()](#framewaitforfunctionpagefunction-options-args).
    - if `selectorOrFunctionOrTimeout` is a `number`, then the first argument is treated as a timeout in milliseconds and the method returns a promise which resolves after the timeout
    - otherwise, an exception is thrown

    ``` js
    // wait for selector
    await page.waitFor('.foo');
    // wait for 1 second
    await page.waitFor(1000);
    // wait for predicate
    await page.waitFor(() => !!document.querySelector('.foo'));
    ```

    To pass arguments from node.js to the predicate of `page.waitFor` function:

    ``` js
    const selector = '.foo';
    await page.waitFor(selector => !!document.querySelector(selector), {}, selector);
    ```
- name: frame.waitForFunction()
  id: index#framewaitforfunctionpagefunction-options-args
  summary: null
  description: |-
    ### frame.waitForFunction(pageFunction\[, options\[, ...args\]\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in browser context
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `polling` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> An interval at which the `pageFunction` is executed, defaults to `raf`. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. If `polling` is a string, then it can be one of the following values:
        - `raf` - to constantly execute `pageFunction` in `requestAnimationFrame` callback. This is the tightest polling mode which is suitable to observe styling changes.
        - `mutation` - to execute `pageFunction` on every DOM mutation.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> Promise which resolves when the `pageFunction` returns a truthy value. It resolves to a JSHandle of the truthy value.

    The `waitForFunction` can be used to observe viewport size change:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
      page.setViewport({width: 50, height: 50});
      await watchDog;
      await browser.close();
    })();
    ```

    To pass arguments from node.js to the predicate of `page.waitForFunction` function:

    ``` js
    const selector = '.foo';
    await page.waitForFunction(selector => !!document.querySelector(selector), {}, selector);
    ```
- name: frame.waitForNavigation()
  id: index#framewaitfornavigationoptions
  summary: This resolves when the frame navigates to a new URL
  description: |-
    ### frame.waitForNavigation(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.

    This resolves when the frame navigates to a new URL. It is useful for when you run code which will indirectly cause the frame to navigate. Consider this example:

    ``` js
    const [response] = await Promise.all([
      frame.waitForNavigation(), // The navigation promise resolves after navigation has finished
      frame.click('a.my-link'), // Clicking the link will indirectly cause a navigation
    ]);
    ```

    **NOTE** Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.
- name: frame.waitForSelector()
  id: index#framewaitforselectorselector-options
  summary: Wait for the selector to appear in page
  description: |-
    ### frame.waitForSelector(selector\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `visible` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `hidden` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves when element specified by selector string is added to DOM. Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.

    Wait for the `selector` to appear in page. If at the moment of calling the method the `selector` already exists, the method will return immediately. If the selector doesn't appear after the `timeout` milliseconds of waiting, the function will throw.

    This method works across navigations:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page.mainFrame()
        .waitForSelector('img')
        .then(() => console.log('First URL with image: ' + currentURL));
      for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();
    ```
- name: frame.waitForTimeout()
  id: index#framewaitfortimeoutmilliseconds
  summary: null
  description: |-
    ### frame.waitForTimeout(milliseconds)

    - `milliseconds` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The number of milliseconds to wait for.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves after the timeout has completed.

    Pauses script execution for the given number of seconds before continuing:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.mainFrame()
        .waitForTimeout(1000)
        .then(() => console.log('Waited a second!'));

      await browser.close();
    })();
    ```
- name: frame.waitForXPath()
  id: index#framewaitforxpathxpath-options
  summary: Wait for the xpath to appear in page
  description: |-
    ### frame.waitForXPath(xpath\[, options\])

    - `xpath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [xpath](https://developer.mozilla.org/en-US/docs/Web/XPath "xpath") of an element to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `visible` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `hidden` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves when element specified by xpath string is added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.

    Wait for the `xpath` to appear in page. If at the moment of calling the method the `xpath` already exists, the method will return immediately. If the xpath doesn't appear after the `timeout` milliseconds of waiting, the function will throw.

    This method works across navigations:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page.mainFrame()
        .waitForXPath('//img')
        .then(() => console.log('First URL with image: ' + currentURL));
      for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();
    ```
- name: GeolocationOptions
  id: index#geolocationoptions
  summary: null
  description: |-
    ### GeolocationOptions

    - `latitude` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Latitude between -90 and 90.
    - `longitude` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Longitude between -180 and 180.
    - `accuracy` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Optional non-negative accuracy value.

    &nbsp;
- name: HTTPRequest
  id: index#class-httprequest
  summary: If request fails at some point, then instead of 'requestfinished' event (and possibly instead of 'response' event), the 'requestfailed' event is emitted
  description: |-
    ## class: HTTPRequest

    Whenever the page sends a request, such as for a network resource, the following events are emitted by puppeteer's page:

    - [`'request'`](#event-request) emitted when the request is issued by the page.
    - [`'response'`](#event-response) emitted when/if the response is received for the request.
    - [`'requestfinished'`](#event-requestfinished) emitted when the response body is downloaded and the request is complete.

    If request fails at some point, then instead of `'requestfinished'` event (and possibly instead of 'response' event), the [`'requestfailed'`](#event-requestfailed) event is emitted.

    > **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with `'requestfinished'` event.

    If request gets a 'redirect' response, the request is successfully finished with the 'requestfinished' event, and a new request is issued to a redirected url.
- name: httpRequest.abort()
  id: index#httprequestaborterrorcode
  summary: Aborts request
  description: |-
    ### httpRequest.abort(\[errorCode\])

    - `errorCode` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Optional error code. Defaults to `failed`, could be one of the following:
      - `aborted` - An operation was aborted (due to user action)
      - `accessdenied` - Permission to access a resource, other than the network, was denied
      - `addressunreachable` - The IP address is unreachable. This usually means that there is no route to the specified host or network.
      - `blockedbyclient` - The client chose to block the request.
      - `blockedbyresponse` - The request failed because the response was delivered along with requirements which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).
      - `connectionaborted` - A connection timed out as a result of not receiving an ACK for data sent.
      - `connectionclosed` - A connection was closed (corresponding to a TCP FIN).
      - `connectionfailed` - A connection attempt failed.
      - `connectionrefused` - A connection attempt was refused.
      - `connectionreset` - A connection was reset (corresponding to a TCP RST).
      - `internetdisconnected` - The Internet connection has been lost.
      - `namenotresolved` - The host name could not be resolved.
      - `timedout` - An operation timed out.
      - `failed` - A generic failure occurred.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Aborts request. To use this, request interception should be enabled with `page.setRequestInterception`. Exception is immediately thrown if the request interception is not enabled.
- name: httpRequest.continue()
  id: index#httprequestcontinueoverrides
  summary: Continues request with optional request overrides
  description: |-
    ### httpRequest.continue(\[overrides\])

    - `overrides` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional request overwrites, which can be one of the following:
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If set, the request url will be changed. This is not a redirect. The request will be silently forwarded to the new url. For example, the address bar will show the original url.
      - `method` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If set changes the request method (e.g. `GET` or `POST`)
      - `postData` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If set changes the post data of request
      - `headers` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> If set changes the request HTTP headers. Header values will be converted to a string.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Continues request with optional request overrides. To use this, request interception should be enabled with `page.setRequestInterception`. Exception is immediately thrown if the request interception is not enabled.

    ``` js
    await page.setRequestInterception(true);
    page.on('request', request => {
      // Override headers
      const headers = Object.assign({}, request.headers(), {
        foo: 'bar', // set "foo" header
        origin: undefined, // remove "origin" header
      });
      request.continue({headers});
    });
    ```
- name: httpRequest.failure()
  id: index#httprequestfailure
  summary: The method returns null unless this request was failed, as reported by requestfailed event
  description: |-
    ### httpRequest.failure()

    - returns: \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Object describing request failure, if any
      - `errorText` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Human-readable error message, e.g. `'net::ERR_FAILED'`.

    The method returns `null` unless this request was failed, as reported by `requestfailed` event.

    Example of logging all failed requests:

    ``` js
    page.on('requestfailed', request => {
      console.log(request.url() + ' ' + request.failure().errorText);
    });
    ```
- name: httpRequest.frame()
  id: index#httprequestframe
  summary: null
  description: |-
    ### httpRequest.frame()

    - returns: \<?[Frame](#class-frame "Frame")\> A [Frame](#class-frame "Frame") that initiated this request, or `null` if navigating to error pages.

    &nbsp;
- name: httpRequest.headers()
  id: index#httprequestheaders
  summary: null
  description: |-
    ### httpRequest.headers()

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> An object with HTTP headers associated with the request. All header names are lower-case.

    &nbsp;
- name: httpRequest.isNavigationRequest()
  id: index#httprequestisnavigationrequest
  summary: Whether this request is driving frame's navigation
  description: |-
    ### httpRequest.isNavigationRequest()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Whether this request is driving frame's navigation.
- name: httpRequest.method()
  id: index#httprequestmethod
  summary: null
  description: |-
    ### httpRequest.method()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Request's method (GET, POST, etc.)

    &nbsp;
- name: httpRequest.postData()
  id: index#httprequestpostdata
  summary: null
  description: |-
    ### httpRequest.postData()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Request's post body, if any.

    &nbsp;
- name: httpRequest.redirectChain()
  id: index#httprequestredirectchain
  summary: A redirectChain is a chain of requests initiated to fetch a resource
  description: |-
    ### httpRequest.redirectChain()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[HTTPRequest](#class-httprequest "HTTPRequest")\>\>

    A `redirectChain` is a chain of requests initiated to fetch a resource.

    - If there are no redirects and the request was successful, the chain will be empty.
    - If a server responds with at least a single redirect, then the chain will contain all the requests that were redirected.

    `redirectChain` is shared between all the requests of the same chain.

    For example, if the website `http://example.com` has a single redirect to `https://example.com`, then the chain will contain one request:

    ``` js
    const response = await page.goto('http://example.com');
    const chain = response.request().redirectChain();
    console.log(chain.length); // 1
    console.log(chain[0].url()); // 'http://example.com'
    ```

    If the website `https://google.com` has no redirects, then the chain will be empty:

    ``` js
    const response = await page.goto('https://google.com');
    const chain = response.request().redirectChain();
    console.log(chain.length); // 0
    ```
- name: httpRequest.resourceType()
  id: index#httprequestresourcetype
  summary: Contains the request's resource type as it was perceived by the rendering engine
  description: |-
    ### httpRequest.resourceType()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    Contains the request's resource type as it was perceived by the rendering engine. ResourceType will be one of the following: `document`, `stylesheet`, `image`, `media`, `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`, `manifest`, `other`.
- name: httpRequest.respond()
  id: index#httprequestrespondresponse
  summary: Fulfills request with given response
  description: |-
    ### httpRequest.respond(response)

    - `response` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Response that will fulfill this request
      - `status` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Response status code, defaults to `200`.
      - `headers` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional response headers. Header values will be converted to a string.
      - `contentType` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If set, equals to setting `Content-Type` response header
      - `body` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\> Optional response body
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Fulfills request with given response. To use this, request interception should be enabled with `page.setRequestInterception`. Exception is thrown if request interception is not enabled.

    An example of fulfilling all requests with 404 responses:

    ``` js
    await page.setRequestInterception(true);
    page.on('request', request => {
      request.respond({
        status: 404,
        contentType: 'text/plain',
        body: 'Not Found!'
      });
    });
    ```

    > **NOTE** Mocking responses for dataURL requests is not supported. Calling `request.respond` for a dataURL request is a noop.
- name: httpRequest.response()
  id: index#httprequestresponse
  summary: null
  description: |-
    ### httpRequest.response()

    - returns: \<?[HTTPResponse](#class-httpresponse "HTTPResponse")\> A matching [HTTPResponse](#class-httpresponse "HTTPResponse") object, or `null` if the response has not been received yet.

    &nbsp;
- name: httpRequest.url()
  id: index#httprequesturl
  summary: null
  description: |-
    ### httpRequest.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of the request.

    &nbsp;
- name: HTTPResponse
  id: index#class-httpresponse
  summary: HTTPResponse class represents responses which are received by page
  description: |-
    ## class: HTTPResponse

    [HTTPResponse](#class-httpresponse "HTTPResponse") class represents responses which are received by page.
- name: httpResponse.buffer()
  id: index#httpresponsebuffer
  summary: null
  description: |-
    ### httpResponse.buffer()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>\> Promise which resolves to a buffer with response body.

    &nbsp;
- name: httpResponse.frame()
  id: index#httpresponseframe
  summary: null
  description: |-
    ### httpResponse.frame()

    - returns: \<?[Frame](#class-frame "Frame")\> A [Frame](#class-frame "Frame") that initiated this response, or `null` if navigating to error pages.

    &nbsp;
- name: httpResponse.fromCache()
  id: index#httpresponsefromcache
  summary: True if the response was served from either the browser's disk cache or memory cache
  description: |-
    ### httpResponse.fromCache()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    True if the response was served from either the browser's disk cache or memory cache.
- name: httpResponse.fromServiceWorker()
  id: index#httpresponsefromserviceworker
  summary: True if the response was served by a service worker
  description: |-
    ### httpResponse.fromServiceWorker()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    True if the response was served by a service worker.
- name: httpResponse.headers()
  id: index#httpresponseheaders
  summary: null
  description: |-
    ### httpResponse.headers()

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> An object with HTTP headers associated with the response. All header names are lower-case.

    &nbsp;
- name: httpResponse.json()
  id: index#httpresponsejson
  summary: This method will throw if the response body is not parsable via JSON.parse
  description: |-
    ### httpResponse.json()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Promise which resolves to a JSON representation of response body.

    This method will throw if the response body is not parsable via `JSON.parse`.
- name: httpResponse.ok()
  id: index#httpresponseok
  summary: Contains a boolean stating whether the response was successful (status in the range 200-299) or not
  description: |-
    ### httpResponse.ok()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Contains a boolean stating whether the response was successful (status in the range 200-299) or not.
- name: httpResponse.remoteAddress()
  id: index#httpresponseremoteaddress
  summary: null
  description: |-
    ### httpResponse.remoteAddress()

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `ip` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> the IP address of the remote server
      - `port` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> the port used to connect to the remote server

    &nbsp;
- name: httpResponse.request()
  id: index#httpresponserequest
  summary: null
  description: |-
    ### httpResponse.request()

    - returns: \<[HTTPRequest](#class-httprequest "HTTPRequest")\> A matching [HTTPRequest](#class-httprequest "HTTPRequest") object.

    &nbsp;
- name: httpResponse.securityDetails()
  id: index#httpresponsesecuritydetails
  summary: null
  description: |-
    ### httpResponse.securityDetails()

    - returns: \<?[SecurityDetails](#class-securitydetails "SecurityDetails")\> Security details if the response was received over the secure connection, or `null` otherwise.

    &nbsp;
- name: httpResponse.status()
  id: index#httpresponsestatus
  summary: Contains the status code of the response (e.g., 200 for a success)
  description: |-
    ### httpResponse.status()

    - returns: \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>

    Contains the status code of the response (e.g., 200 for a success).
- name: httpResponse.statusText()
  id: index#httpresponsestatustext
  summary: Contains the status text of the response (e.g
  description: |-
    ### httpResponse.statusText()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    Contains the status text of the response (e.g. usually an "OK" for a success).
- name: httpResponse.text()
  id: index#httpresponsetext
  summary: null
  description: |-
    ### httpResponse.text()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Promise which resolves to a text representation of response body.

    &nbsp;
- name: httpResponse.url()
  id: index#httpresponseurl
  summary: Contains the URL of the response
  description: |-
    ### httpResponse.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    Contains the URL of the response.
- name: JSHandle
  id: index#class-jshandle
  summary: JSHandle represents an in-page JavaScript object
  description: |-
    ## class: JSHandle

    JSHandle represents an in-page JavaScript object. JSHandles can be created with the [page.evaluateHandle](#pageevaluatehandlepagefunction-args) method.

    ``` js
    const windowHandle = await page.evaluateHandle(() => window);
    // ...
    ```

    JSHandle prevents the referenced JavaScript object being garbage collected unless the handle is [disposed](#jshandledispose). JSHandles are auto-disposed when their origin frame gets navigated or the parent context gets destroyed.

    JSHandle instances can be used as arguments in [`page.$eval()`](#pageevalselector-pagefunction-args), [`page.evaluate()`](#pageevaluatepagefunction-args) and [`page.evaluateHandle`](#pageevaluatehandlepagefunction-args) methods.
- name: jsHandle.asElement()
  id: index#jshandleaselement
  summary: Returns either null or the object handle itself, if the object handle is an instance of ElementHandle
  description: |-
    ### jsHandle.asElement()

    - returns: \<?[ElementHandle](#class-elementhandle "ElementHandle")\>

    Returns either `null` or the object handle itself, if the object handle is an instance of [ElementHandle](#class-elementhandle "ElementHandle").
- name: jsHandle.dispose()
  id: index#jshandledispose
  summary: The jsHandle.dispose method stops referencing the element handle
  description: |-
    ### jsHandle.dispose()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the object handle is successfully disposed.

    The `jsHandle.dispose` method stops referencing the element handle.
- name: jsHandle.evaluate()
  id: index#jshandleevaluatepagefunction-args
  summary: This method passes this handle as the first argument to pageFunction
  description: |-
    ### jsHandle.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object"))\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method passes this handle as the first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `handle.evaluate` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const tweetHandle = await page.$('.tweet .retweets');
    expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');
    ```
- name: jsHandle.evaluateHandle()
  id: index#jshandleevaluatehandlepagefunction-args
  summary: This method passes this handle as the first argument to pageFunction
  description: |-
    ### jsHandle.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    This method passes this handle as the first argument to `pageFunction`.

    The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `executionContext.evaluateHandle` returns in-page object (JSHandle).

    If the function returns an element, the returned handle is an [ElementHandle](#class-elementhandle "ElementHandle").

    If the function passed to the `jsHandle.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `jsHandle.evaluateHandle` would wait for the promise to resolve and return its value.

    See [Page.evaluateHandle](#pageevaluatehandlepagefunction-args) for more details.
- name: jsHandle.executionContext()
  id: index#jshandleexecutioncontext
  summary: Returns execution context the handle belongs to
  description: |-
    ### jsHandle.executionContext()

    - returns: \<[ExecutionContext](#class-executioncontext "ExecutionContext")\>

    Returns execution context the handle belongs to.
- name: jsHandle.getProperties()
  id: index#jshandlegetproperties
  summary: The method returns a map with property names as keys and JSHandle instances for the property values
  description: |-
    ### jsHandle.getProperties()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map "Map")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String"), [JSHandle](#class-jshandle "JSHandle")\>\>\>

    The method returns a map with property names as keys and JSHandle instances for the property values.

    ``` js
    const handle = await page.evaluateHandle(() => ({window, document}));
    const properties = await handle.getProperties();
    const windowHandle = properties.get('window');
    const documentHandle = properties.get('document');
    await handle.dispose();
    ```
- name: jsHandle.getProperty()
  id: index#jshandlegetpropertypropertyname
  summary: Fetches a single property from the referenced object
  description: |-
    ### jsHandle.getProperty(propertyName)

    - `propertyName` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> property to get
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\>

    Fetches a single property from the referenced object.
- name: jsHandle.jsonValue()
  id: index#jshandlejsonvalue
  summary: Returns a JSON representation of the object
  description: |-
    ### jsHandle.jsonValue()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>

    Returns a JSON representation of the object. If the object has a [`toJSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior) function, it **will not be called**.

    > **NOTE** The method will return an empty JSON object if the referenced object is not stringifiable. It will throw an error if the object has circular references.
- name: Keyboard
  id: index#class-keyboard
  summary: Keyboard provides an api for managing a virtual keyboard
  description: |-
    ## class: Keyboard

    Keyboard provides an api for managing a virtual keyboard. The high level api is [`keyboard.type`](#keyboardtypetext-options), which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.

    For finer control, you can use [`keyboard.down`](#keyboarddownkey-options), [`keyboard.up`](#keyboardupkey), and [`keyboard.sendCharacter`](#keyboardsendcharacterchar) to manually fire events as if they were generated from a real keyboard.

    An example of holding down `Shift` in order to select and delete some text:

    ``` js
    await page.keyboard.type('Hello World!');
    await page.keyboard.press('ArrowLeft');

    await page.keyboard.down('Shift');
    for (let i = 0; i < ' World'.length; i++)
      await page.keyboard.press('ArrowLeft');
    await page.keyboard.up('Shift');

    await page.keyboard.press('Backspace');
    // Result text will end up saying 'Hello!'
    ```

    An example of pressing `A`

    ``` js
    await page.keyboard.down('Shift');
    await page.keyboard.press('KeyA');
    await page.keyboard.up('Shift');
    ```

    > **NOTE** On MacOS, keyboard shortcuts like `â A` -\> Select All do not work. See [\#1313](https://github.com/puppeteer/puppeteer/issues/1313)
- name: keyboard.down()
  id: index#keyboarddownkey-options
  summary: Dispatches a keydown event
  description: |-
    ### keyboard.down(key\[, options\])

    - `key` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of key to press, such as `ArrowLeft`. See [USKeyboardLayout](https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts "USKeyboardLayout") for a list of all key names.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If specified, generates an input event with this text.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `keydown` event.

    If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also generated. The `text` option can be specified to force an input event to be generated.

    If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that modifier active. To release the modifier key, use [`keyboard.up`](#keyboardupkey).

    After the key is pressed once, subsequent calls to [`keyboard.down`](#keyboarddownkey-options) will have [repeat](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat) set to true. To release the key, use [`keyboard.up`](#keyboardupkey).

    > **NOTE** Modifier keys DO influence `keyboard.down`. Holding down `Shift` will type the text in upper case.
- name: keyboard.press()
  id: index#keyboardpresskey-options
  summary: If key is a single character and no modifier keys besides Shift are being held down, a keypress/input event will also generated
  description: |-
    ### keyboard.press(key\[, options\])

    - `key` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of key to press, such as `ArrowLeft`. See [USKeyboardLayout](https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts "USKeyboardLayout") for a list of all key names.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> If specified, generates an input event with this text.
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    If `key` is a single character and no modifier keys besides `Shift` are being held down, a `keypress`/`input` event will also generated. The `text` option can be specified to force an input event to be generated.

    > **NOTE** Modifier keys DO affect `keyboard.press`. Holding down `Shift` will type the text in upper case.

    Shortcut for [`keyboard.down`](#keyboarddownkey-options) and [`keyboard.up`](#keyboardupkey).
- name: keyboard.sendCharacter()
  id: index#keyboardsendcharacterchar
  summary: Dispatches a keypress and input event
  description: |-
    ### keyboard.sendCharacter(char)

    - `char` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Character to send into the page.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `keypress` and `input` event. This does not send a `keydown` or `keyup` event.

    ``` js
    page.keyboard.sendCharacter('å¨');
    ```

    > **NOTE** Modifier keys DO NOT affect `keyboard.sendCharacter`. Holding down `Shift` will not type the text in upper case.
- name: keyboard.type()
  id: index#keyboardtypetext-options
  summary: Sends a keydown, keypress/input, and keyup event for each character in the text
  description: |-
    ### keyboard.type(text\[, options\])

    - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A text to type into a focused element.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between key presses in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [`keyboard.press`](#keyboardpresskey-options).

    ``` js
    await page.keyboard.type('Hello'); // Types instantly
    await page.keyboard.type('World', {delay: 100}); // Types slower, like a user
    ```

    > **NOTE** Modifier keys DO NOT affect `keyboard.type`. Holding down `Shift` will not type the text in upper case.
- name: keyboard.up()
  id: index#keyboardupkey
  summary: Dispatches a keyup event
  description: |-
    ### keyboard.up(key)

    - `key` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of key to release, such as `ArrowLeft`. See [USKeyboardLayout](https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts "USKeyboardLayout") for a list of all key names.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `keyup` event.
- name: Mouse
  id: index#class-mouse
  summary: The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport
  description: |-
    ## class: Mouse

    The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.

    Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).

    ``` js
    // Using âpage.mouseâ to trace a 100x100 square.
    await page.mouse.move(0, 0);
    await page.mouse.down();
    await page.mouse.move(0, 100);
    await page.mouse.move(100, 100);
    await page.mouse.move(100, 0);
    await page.mouse.move(0, 0);
    await page.mouse.up();
    ```

    Note that the mouse events trigger synthetic `MouseEvent`s. This means that it does not fully replicate the functionality of what a normal user would be able to do with their mouse.

    For example, dragging and selecting text is not possible using `page.mouse`. Instead, you can use the [`DocumentOrShadowRoot.getSelection()`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection) functionality implemented in the platform.

    For example, if you want to select all content between nodes:

    ``` js
    await page.evaluate((from, to) => {
      const selection = from.getRootNode().getSelection();
      const range = document.createRange();
      range.setStartBefore(from);
      range.setEndAfter(to);
      selection.removeAllRanges();
      selection.addRange(range);
    }, fromJSHandle, toJSHandle);
    ```

    If you then would want to copy-paste your selection, you can use the clipboard api:

    ``` js
    // The clipboard api does not allow you to copy, unless the tab is focused.
    await page.bringToFront();
    await page.evaluate(() => {
      // Copy the selected content to the clipboard
      document.execCommand('copy');
      // Obtain the content of the clipboard as a string
      return navigator.clipboard.readText();
    });
    ```

    Note that if you want access to the clipboard API, you have to give it permission to do so:

    ``` js
    await browser.defaultBrowserContext().overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);
    ```
- name: mouse.click()
  id: index#mouseclickx-y-options
  summary: Shortcut for mouse.move, mouse.down and mouse.up
  description: |-
    ### mouse.click(x, y\[, options\])

    - `x` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - `y` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Shortcut for [`mouse.move`](#mousemovex-y-options), [`mouse.down`](#mousedownoptions) and [`mouse.up`](#mouseupoptions).
- name: mouse.down()
  id: index#mousedownoptions
  summary: Dispatches a mousedown event
  description: |-
    ### mouse.down(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `mousedown` event.
- name: mouse.move()
  id: index#mousemovex-y-options
  summary: Dispatches a mousemove event
  description: |-
    ### mouse.move(x, y\[, options\])

    - `x` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - `y` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `steps` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. Sends intermediate `mousemove` events.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `mousemove` event.
- name: mouse.up()
  id: index#mouseupoptions
  summary: Dispatches a mouseup event
  description: |-
    ### mouse.up(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `mouseup` event.
- name: mouse.wheel()
  id: index#mousewheeloptions
  summary: Dispatches a mousewheel event
  description: |-
    ### mouse.wheel(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `deltaX` X delta in CSS pixels for mouse wheel event (default: 0). Positive values emulate a scroll right and negative values a scroll left event.
      - `deltaY` Y delta in CSS pixels for mouse wheel event (default: 0). Positive values emulate a scroll down and negative values a scroll up event.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `mousewheel` event.

    Examples:

    ``` js
    await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');

    const elem = await page.$('div');
    const boundingBox = await elem.boundingBox();
    await page.mouse.move(
      boundingBox.x + boundingBox.width / 2,
      boundingBox.y + boundingBox.height / 2
    );

    await page.mouse.wheel({ deltaY: -100 })
    ```
- name: Overview
  id: index#overview
  summary: Puppeteer is a Node library which provides a high-level API to control Chromium or Chrome over the DevTools Protocol
  description: |-
    ## Overview

    Puppeteer is a Node library which provides a high-level API to control Chromium or Chrome over the DevTools Protocol.

    The Puppeteer API is hierarchical and mirrors the browser structure.

    > **NOTE** On the following diagram, faded entities are not currently represented in Puppeteer.

    [](https://user-images.githubusercontent.com/81942/86137523-ab2ba080-baed-11ea-9d4b-30eda784585a.png)

    - [`Puppeteer`](#class-puppeteer) communicates with the browser using [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/).
    - [`Browser`](#class-browser) instance can own multiple browser contexts.
    - [`BrowserContext`](#class-browsercontext) instance defines a browsing session and can own multiple pages.
    - [`Page`](#class-page) has at least one frame: main frame. There might be other frames created by [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) or [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame) tags.
    - [`Frame`](#class-frame) has at least one execution context - the default execution context - where the frame's JavaScript is executed. A Frame might have additional execution contexts that are associated with [extensions](https://developer.chrome.com/extensions).
    - [`Worker`](#class-worker) has a single execution context and facilitates interacting with [WebWorkers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).

    (Diagram source: [link](https://docs.google.com/drawings/d/1Q_AM6KYs9kbyLZF-Lpp5mtpAWth73Cq8IKCsWYgi8MM/edit?usp=sharing))
- name: Page
  id: index#class-page
  summary: Page provides methods to interact with a single tab or extension background page in Chromium
  description: |-
    ## class: Page

    - extends: [EventEmitter](#class-eventemitter)

    Page provides methods to interact with a single tab or [extension background page](https://developer.chrome.com/extensions/background_pages) in Chromium. One [Browser](#class-browser "Browser") instance might have multiple [Page](#class-page "Page") instances.

    This example creates a page, navigates it to a URL, and then saves a screenshot:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://example.com');
      await page.screenshot({path: 'screenshot.png'});
      await browser.close();
    })();
    ```

    The Page class emits various events (described below) which can be handled using any of the [`EventEmitter`](#class-eventemitter) methods, such as `on`, `once` or `off`.

    This example logs a message for a single page `load` event:

    ``` js
    page.once('load', () => console.log('Page loaded!'));
    ```

    To unsubscribe from events use the `off` method:

    ``` js
    function logRequest(interceptedRequest) {
      console.log('A request was made:', interceptedRequest.url());
    }
    page.on('request', logRequest);
    // Sometime later...
    page.off('request', logRequest);
    ```
- name: 'Page event: close'
  id: index#event-close
  summary: Emitted when the page closes
  description: |-
    ### event: 'close'

    Emitted when the page closes.
- name: 'Page event: console'
  id: index#event-console
  summary: Emitted when JavaScript within the page calls one of console API methods, e.g
  description: |-
    ### event: 'console'

    - \<[ConsoleMessage](#class-consolemessage "ConsoleMessage")\>

    Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`. Also emitted if the page throws an error or a warning.

    The arguments passed into `console.log` appear as arguments on the event handler.

    An example of handling `console` event:

    ``` js
    page.on('console', msg => {
      for (let i = 0; i < msg.args().length; ++i)
        console.log(`${i}: ${msg.args()[i]}`);
    });
    page.evaluate(() => console.log('hello', 5, {foo: 'bar'}));
    ```
- name: 'Page event: dialog'
  id: index#event-dialog
  summary: Emitted when a JavaScript dialog appears, such as alert, prompt, confirm or beforeunload
  description: |-
    ### event: 'dialog'

    - \<[Dialog](#class-dialog "Dialog")\>

    Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Puppeteer can respond to the dialog via [Dialog](#class-dialog "Dialog")'s [accept](#dialogacceptprompttext) or [dismiss](#dialogdismiss) methods.
- name: 'Page event: domcontentloaded'
  id: index#event-domcontentloaded
  summary: Emitted when the JavaScript DOMContentLoaded event is dispatched
  description: |-
    ### event: 'domcontentloaded'

    Emitted when the JavaScript [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.
- name: 'Page event: error'
  id: index#event-error
  summary: Emitted when the page crashes
  description: |-
    ### event: 'error'

    - \<[Error](https://nodejs.org/api/errors.html#errors_class_error "Error")\>

    Emitted when the page crashes.

    > **NOTE**`error` event has a special meaning in Node, see [error events](https://nodejs.org/api/events.html#events_error_events) for details.
- name: 'Page event: frameattached'
  id: index#event-frameattached
  summary: Emitted when a frame is attached
  description: |-
    ### event: 'frameattached'

    - \<[Frame](#class-frame "Frame")\>

    Emitted when a frame is attached.
- name: 'Page event: framedetached'
  id: index#event-framedetached
  summary: Emitted when a frame is detached
  description: |-
    ### event: 'framedetached'

    - \<[Frame](#class-frame "Frame")\>

    Emitted when a frame is detached.
- name: 'Page event: framenavigated'
  id: index#event-framenavigated
  summary: Emitted when a frame is navigated to a new url
  description: |-
    ### event: 'framenavigated'

    - \<[Frame](#class-frame "Frame")\>

    Emitted when a frame is navigated to a new url.
- name: 'Page event: load'
  id: index#event-load
  summary: Emitted when the JavaScript load event is dispatched
  description: |-
    ### event: 'load'

    Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.
- name: 'Page event: metrics'
  id: index#event-metrics
  summary: Emitted when the JavaScript code makes a call to console.timeStamp
  description: |-
    ### event: 'metrics'

    - \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `title` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The title passed to `console.timeStamp`.
      - `metrics` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Object containing metrics as key/value pairs. The values of metrics are of \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> type.

    Emitted when the JavaScript code makes a call to `console.timeStamp`. For the list of metrics see `page.metrics`.
- name: 'Page event: pageerror'
  id: index#event-pageerror
  summary: Emitted when an uncaught exception happens within the page
  description: |-
    ### event: 'pageerror'

    - \<[Error](https://nodejs.org/api/errors.html#errors_class_error "Error")\> The exception message

    Emitted when an uncaught exception happens within the page.
- name: 'Page event: popup'
  id: index#event-popup
  summary: Emitted when the page opens a new tab or window
  description: |-
    ### event: 'popup'

    - \<[Page](#class-page "Page")\> Page corresponding to "popup" window

    Emitted when the page opens a new tab or window.

    ``` js
    const [popup] = await Promise.all([
      new Promise(resolve => page.once('popup', resolve)),
      page.click('a[target=_blank]'),
    ]);
    ```

    ``` js
    const [popup] = await Promise.all([
      new Promise(resolve => page.once('popup', resolve)),
      page.evaluate(() => window.open('https://example.com')),
    ]);
    ```
- name: 'Page event: request'
  id: index#event-request
  summary: Emitted when a page issues a request
  description: |-
    ### event: 'request'

    - \<[HTTPRequest](#class-httprequest "HTTPRequest")\>

    Emitted when a page issues a request. The [HTTPRequest](#class-httprequest "HTTPRequest") object is read-only. In order to intercept and mutate requests, see `page.setRequestInterception`.
- name: 'Page event: requestfailed'
  id: index#event-requestfailed
  summary: Emitted when a request fails, for example by timing out
  description: |-
    ### event: 'requestfailed'

    - \<[HTTPRequest](#class-httprequest "HTTPRequest")\>

    Emitted when a request fails, for example by timing out.

    > **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with [`'requestfinished'`](#event-requestfinished) event and not with [`'requestfailed'`](#event-requestfailed).
- name: 'Page event: requestfinished'
  id: index#event-requestfinished
  summary: Emitted when a request finishes successfully
  description: |-
    ### event: 'requestfinished'

    - \<[HTTPRequest](#class-httprequest "HTTPRequest")\>

    Emitted when a request finishes successfully.
- name: 'Page event: response'
  id: index#event-response
  summary: Emitted when a HTTPResponse is received
  description: |-
    ### event: 'response'

    - \<[HTTPResponse](#class-httpresponse "HTTPResponse")\>

    Emitted when a [HTTPResponse](#class-httpresponse "HTTPResponse") is received.
- name: 'Page event: workercreated'
  id: index#event-workercreated
  summary: Emitted when a dedicated WebWorker is spawned by the page
  description: |-
    ### event: 'workercreated'

    - \<[WebWorker](#class-webworker "Worker")\>

    Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned by the page.
- name: 'Page event: workerdestroyed'
  id: index#event-workerdestroyed
  summary: Emitted when a dedicated WebWorker is terminated
  description: |-
    ### event: 'workerdestroyed'

    - \<[WebWorker](#class-webworker "Worker")\>

    Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is terminated.
- name: page.$$()
  id: index#pageselector-1
  summary: The method runs document.querySelectorAll within the page
  description: |-
    ### page.$$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\>

    The method runs `document.querySelectorAll` within the page. If no elements match the selector, the return value resolves to `[]`.

    Shortcut for [page.mainFrame().$$(selector)](#frameselector-1).
- name: page.$$eval()
  id: index#pageevalselector-pagefunction-args
  summary: This method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction
  description: |-
    ### page.$$eval(selector, pageFunction\[, ...args\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")\>)\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method runs `Array.from(document.querySelectorAll(selector))` within the page and passes it as the first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `page.$$eval` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const divCount = await page.$$eval('div', divs => divs.length);
    ```

    ``` js
    const options = await page.$$eval('div > span.options', options => options.map(option => option.textContent));
    ```
- name: page.$()
  id: index#pageselector
  summary: The method runs document.querySelector within the page
  description: |-
    ### page.$(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\>

    The method runs `document.querySelector` within the page. If no element matches the selector, the return value resolves to `null`.

    Shortcut for [page.mainFrame().$(selector)](#frameselector).
- name: page.$eval()
  id: index#pageevalselector-pagefunction-args-1
  summary: This method runs document.querySelector within the page and passes it as the first argument to pageFunction
  description: |-
    ### page.$eval(selector, pageFunction\[, ...args\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element"))\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    This method runs `document.querySelector` within the page and passes it as the first argument to `pageFunction`. If there's no element matching `selector`, the method throws an error.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `page.$eval` would wait for the promise to resolve and return its value.

    Examples:

    ``` js
    const searchValue = await page.$eval('#search', el => el.value);
    const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
    const html = await page.$eval('.main-container', e => e.outerHTML);
    ```

    Shortcut for [page.mainFrame().$eval(selector, pageFunction)](#frameevalselector-pagefunction-args).
- name: page.$x()
  id: index#pagexexpression
  summary: The method evaluates the XPath expression relative to the page document as its context node
  description: |-
    ### page.$x(expression)

    - `expression` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Expression to [evaluate](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\>\>

    The method evaluates the XPath expression relative to the page document as its context node. If there are no such elements, the method resolves to an empty array.

    Shortcut for [page.mainFrame().$x(expression)](#framexexpression)
- name: page.accessibility
  id: index#pageaccessibility
  summary: null
  description: |-
    ### page.accessibility

    - returns: \<[Accessibility](#class-accessibility "Accessibility")\>

    &nbsp;
- name: page.addScriptTag()
  id: index#pageaddscripttagoptions
  summary: Adds a <script> tag into the page with the desired url or content
  description: |-
    ### page.addScriptTag(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of a script to be added.
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
      - `content` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Raw JavaScript content to be injected into frame.
      - `type` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Script type. Use 'module' in order to load a Javascript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\> which resolves to the added tag when the script's onload fires or when the script content was injected into frame.

    Adds a `<script>` tag into the page with the desired url or content.

    Shortcut for [page.mainFrame().addScriptTag(options)](#frameaddscripttagoptions).
- name: page.addStyleTag()
  id: index#pageaddstyletagoptions
  summary: Adds a <link rel="stylesheet"> tag into the page with the desired url or a <style type="text/css"> tag with the content
  description: |-
    ### page.addStyleTag(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL of the `<link>` tag.
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd).
      - `content` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Raw CSS content to be injected into frame.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](#class-elementhandle "ElementHandle")\>\> which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

    Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content.

    Shortcut for [page.mainFrame().addStyleTag(options)](#frameaddstyletagoptions).
- name: page.authenticate()
  id: index#pageauthenticatecredentials
  summary: Provide credentials for HTTP authentication
  description: |-
    ### page.authenticate(credentials)

    - `credentials` \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `username` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `password` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Provide credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).

    To disable authentication, pass `null`.
- name: page.bringToFront()
  id: index#pagebringtofront
  summary: Brings page to front (activates tab)
  description: |-
    ### page.bringToFront()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Brings page to front (activates tab).
- name: page.browser()
  id: index#pagebrowser
  summary: Get the browser the page belongs to
  description: |-
    ### page.browser()

    - returns: \<[Browser](#class-browser "Browser")\>

    Get the browser the page belongs to.
- name: page.browserContext()
  id: index#pagebrowsercontext
  summary: Get the browser context that the page belongs to
  description: |-
    ### page.browserContext()

    - returns: \<[BrowserContext](#class-browsercontext "BrowserContext")\>

    Get the browser context that the page belongs to.
- name: page.click()
  id: index#pageclickselector-options
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.mouse to click in the center of the element
  description: |-
    ### page.click(selector\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `button` \<"left"\|"right"\|"middle"\> Defaults to `left`.
      - `clickCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully clicked. The Promise will be rejected if there is no element matching `selector`.

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.mouse](#pagemouse) to click in the center of the element. If there's no element matching `selector`, the method throws an error.

    Bear in mind that if `click()` triggers a navigation event and there's a separate `page.waitForNavigation()` promise to be resolved, you may end up with a race condition that yields unexpected results. The correct pattern for click and wait for navigation is the following:

    ``` js
    const [response] = await Promise.all([
      page.waitForNavigation(waitOptions),
      page.click(selector, clickOptions),
    ]);
    ```

    Shortcut for [page.mainFrame().click(selector\[, options\])](#frameclickselector-options).
- name: page.close()
  id: index#pagecloseoptions
  summary: By default, page.close() does not run beforeunload handlers
  description: |-
    ### page.close(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `runBeforeUnload` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Defaults to `false`. Whether to run the [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    By default, `page.close()` **does not** run beforeunload handlers.

    > **NOTE** if `runBeforeUnload` is passed as true, a `beforeunload` dialog might be summoned and should be handled manually via page's ['dialog'](#event-dialog) event.
- name: page.content()
  id: index#pagecontent
  summary: Gets the full HTML contents of the page, including the doctype
  description: |-
    ### page.content()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>

    Gets the full HTML contents of the page, including the doctype.
- name: page.cookies()
  id: index#pagecookiesurls
  summary: If no URLs are specified, this method returns cookies for the current page URL
  description: |-
    ### page.cookies(\[...urls\])

    - `...urls` \<...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>\>
      - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `value` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `domain` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `expires` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Unix time in seconds.
      - `size` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
      - `httpOnly` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>
      - `secure` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>
      - `session` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>
      - `sameSite` \<"Strict"\|"Lax"\|"Extended"\|"None"\>

    If no URLs are specified, this method returns cookies for the current page URL. If URLs are specified, only cookies for those URLs are returned.
- name: page.coverage
  id: index#pagecoverage
  summary: null
  description: |-
    ### page.coverage

    - returns: \<[Coverage](#class-coverage "Coverage")\>

    &nbsp;
- name: page.deleteCookie()
  id: index#pagedeletecookiecookies
  summary: null
  description: |-
    ### page.deleteCookie(...cookies)

    - `...cookies` \<...[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> **required**
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `domain` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: page.emulate()
  id: index#pageemulateoptions
  summary: Emulates given device metrics and user agent
  description: |-
    ### page.emulate(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `viewport` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
        - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page width in pixels.
        - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page height in pixels.
        - `deviceScaleFactor` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Specify device scale factor (can be thought of as dpr). Defaults to `1`.
        - `isMobile` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the `meta viewport` tag is taken into account. Defaults to `false`.
        - `hasTouch`\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport supports touch events. Defaults to `false`
        - `isLandscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport is in landscape mode. Defaults to `false`.
      - `userAgent` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Emulates given device metrics and user agent. This method is a shortcut for calling two methods:

    - [page.setUserAgent(userAgent)](#pagesetuseragentuseragent)
    - [page.setViewport(viewport)](#pagesetviewportviewport)

    To aid emulation, puppeteer provides a list of device descriptors which can be obtained via the [`puppeteer.devices`](#puppeteerdevices).

    `page.emulate` will resize the page. A lot of websites don't expect phones to change size, so you should emulate before navigating to the page.

    ``` js
    const puppeteer = require('puppeteer');
    const iPhone = puppeteer.devices['iPhone 6'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulate(iPhone);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();
    ```

    List of all available devices is available in the source code: [src/common/DeviceDescriptors.ts](https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts).
- name: page.emulateIdleState()
  id: index#pageemulateidlestateoverrides
  summary: null
  description: |-
    ### page.emulateIdleState(overrides)

    - `overrides` \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> If not set, clears emulation
      - `isUserActive` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> **required**
      - `isScreenUnlocked` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> **required**
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: page.emulateMediaFeatures()
  id: index#pageemulatemediafeaturesfeatures
  summary: null
  description: |-
    ### page.emulateMediaFeatures(features)

    - `features` \<?[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Given an array of media feature objects, emulates CSS media features on the page. Each media feature object must have the following properties:
      - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The CSS media feature name. Supported names are `'prefers-colors-scheme'`, `'prefers-reduced-motion'`, and `'color-gamut'`.
      - `value` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The value for the given CSS media feature.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    ``` js
    await page.emulateMediaFeatures([{ name: 'prefers-color-scheme', value: 'dark' }]);
    await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
    // â true
    await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
    // â false

    await page.emulateMediaFeatures([{ name: 'prefers-reduced-motion', value: 'reduce' }]);
    await page.evaluate(() => matchMedia('(prefers-reduced-motion: reduce)').matches);
    // â true
    await page.evaluate(() => matchMedia('(prefers-reduced-motion: no-preference)').matches);
    // â false

    await page.emulateMediaFeatures([
      { name: 'prefers-color-scheme', value: 'dark' },
      { name: 'prefers-reduced-motion', value: 'reduce' },
    ]);
    await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
    // â true
    await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
    // â false
    await page.evaluate(() => matchMedia('(prefers-reduced-motion: reduce)').matches);
    // â true
    await page.evaluate(() => matchMedia('(prefers-reduced-motion: no-preference)').matches);
    // â false

    await page.emulateMediaFeatures([
      { name: 'color-gamut', value: 'p3' },
    ]);
    await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);
    // â true
    await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);
    // â true
    await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);
    // â false
    ```
- name: page.emulateMediaType()
  id: index#pageemulatemediatypetype
  summary: null
  description: |-
    ### page.emulateMediaType(type)

    - `type` \<?[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing `null` disables CSS media emulation.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    ``` js
    await page.evaluate(() => matchMedia('screen').matches);
    // â true
    await page.evaluate(() => matchMedia('print').matches);
    // â false

    await page.emulateMediaType('print');
    await page.evaluate(() => matchMedia('screen').matches);
    // â false
    await page.evaluate(() => matchMedia('print').matches);
    // â true

    await page.emulateMediaType(null);
    await page.evaluate(() => matchMedia('screen').matches);
    // â true
    await page.evaluate(() => matchMedia('print').matches);
    // â false
    ```
- name: page.emulateNetworkConditions()
  id: index#pageemulatenetworkconditionsnetworkconditions
  summary: null
  description: |-
    ### page.emulateNetworkConditions(networkConditions)

    - `networkConditions` \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Passing `null` disables network condition emulation.
      - `download` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Download speed (bytes/s), `-1` to disable
      - `upload` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Upload speed (bytes/s), `-1` to disable
      - `latency` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Latency (ms), `0` to disable
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    > **NOTE** This does not affect WebSockets and WebRTC PeerConnections (see [https://crbug.com/563644](https://crbug.com/563644))

    ``` js
    const puppeteer = require('puppeteer');
    const slow3G = puppeteer.networkConditions['Slow 3G'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulateNetworkConditions(slow3G);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();
    ```
- name: page.emulateTimezone()
  id: index#pageemulatetimezonetimezoneid
  summary: null
  description: |-
    ### page.emulateTimezone(timezoneId)

    - `timezoneId` \<?[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Changes the timezone of the page. See [ICUâs `metaZones.txt`](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Passing `null` disables timezone emulation.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: page.emulateVisionDeficiency()
  id: index#pageemulatevisiondeficiencytype
  summary: null
  description: |-
    ### page.emulateVisionDeficiency(type)

    - `type` \<?[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Simulates the given vision deficiency on the page. Supported vision deficiency types are `'achromatopsia'`, `'deuteranopia'`, `'protanopia'`, `'tritanopia'`, `'blurredVision'`, and `'none'`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://v8.dev/blog/10-years');

      await page.emulateVisionDeficiency('achromatopsia');
      await page.screenshot({ path: 'achromatopsia.png' });

      await page.emulateVisionDeficiency('deuteranopia');
      await page.screenshot({ path: 'deuteranopia.png' });

      await page.emulateVisionDeficiency('blurredVision');
      await page.screenshot({ path: 'blurred-vision.png' });

      await browser.close();
    })();
    ```
- name: page.evaluate()
  id: index#pageevaluatepagefunction-args
  summary: If the function passed to the page.evaluate returns a Promise, then page.evaluate would wait for the promise to resolve and return its value
  description: |-
    ### page.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the page context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    If the function passed to the `page.evaluate` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `page.evaluate` would wait for the promise to resolve and return its value.

    If the function passed to the `page.evaluate` returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then `page.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.

    Passing arguments to `pageFunction`:

    ``` js
    const result = await page.evaluate(x => {
      return Promise.resolve(8 * x);
    }, 7);
    console.log(result); // prints "56"
    ```

    A string can also be passed in instead of a function:

    ``` js
    console.log(await page.evaluate('1 + 2')); // prints "3"
    const x = 10;
    console.log(await page.evaluate(`1 + ${x}`)); // prints "11"
    ```

    [ElementHandle](#class-elementhandle "ElementHandle") instances can be passed as arguments to the `page.evaluate`:

    ``` js
    const bodyHandle = await page.$('body');
    const html = await page.evaluate(body => body.innerHTML, bodyHandle);
    await bodyHandle.dispose();
    ```

    Shortcut for [page.mainFrame().evaluate(pageFunction, ...args)](#frameevaluatepagefunction-args).
- name: page.evaluateHandle()
  id: index#pageevaluatehandlepagefunction-args
  summary: The only difference between page.evaluate and page.evaluateHandle is that page.evaluateHandle returns in-page object (JSHandle)
  description: |-
    ### page.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the page context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    The only difference between `page.evaluate` and `page.evaluateHandle` is that `page.evaluateHandle` returns in-page object (JSHandle).

    If the function passed to the `page.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `page.evaluateHandle` would wait for the promise to resolve and return its value.

    A string can also be passed in instead of a function:

    ``` js
    const aHandle = await page.evaluateHandle('document'); // Handle for the 'document'
    ```

    [JSHandle](#class-jshandle "JSHandle") instances can be passed as arguments to the `page.evaluateHandle`:

    ``` js
    const aHandle = await page.evaluateHandle(() => document.body);
    const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
    console.log(await resultHandle.jsonValue());
    await resultHandle.dispose();
    ```

    This function will return a [JSHandle](#class-jshandle "JSHandle") by default, however if your `pageFunction` returns an HTML element you will get back an `ElementHandle`:

    ``` js
    const button = await page.evaluateHandle(() => document.querySelector('button'))
    // button is an ElementHandle, so you can call methods such as click:
    await button.click();
    ```

    Shortcut for [page.mainFrame().executionContext().evaluateHandle(pageFunction, ...args)](#executioncontextevaluatehandlepagefunction-args).
- name: page.evaluateOnNewDocument()
  id: index#pageevaluateonnewdocumentpagefunction-args
  summary: The function is invoked after the document was created but before any of its scripts were run
  description: |-
    ### page.evaluateOnNewDocument(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in browser context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Adds a function which would be invoked in one of the following scenarios:

    - whenever the page is navigated
    - whenever the child frame is attached or navigated. In this case, the function is invoked in the context of the newly attached frame

    The function is invoked after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.

    An example of overriding the navigator.languages property before the page loads:

    ``` js
    // preload.js

    // overwrite the `languages` property to use a custom getter
    Object.defineProperty(navigator, "languages", {
      get: function() {
        return ["en-US", "en", "bn"];
      }
    });

    // In your puppeteer script, assuming the preload.js file is in same folder of our script
    const preloadFile = fs.readFileSync('./preload.js', 'utf8');
    await page.evaluateOnNewDocument(preloadFile);
    ```
- name: page.exposeFunction()
  id: index#pageexposefunctionname-puppeteerfunction
  summary: The method adds a function called name on the page's window object
  description: |-
    ### page.exposeFunction(name, puppeteerFunction)

    - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of the function on the window object
    - `puppeteerFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> Callback function which will be called in Puppeteer's context.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    The method adds a function called `name` on the page's `window` object. When called, the function executes `puppeteerFunction` in node.js and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of `puppeteerFunction`.

    If the `puppeteerFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

    > **NOTE** Functions installed via `page.exposeFunction` survive navigations.

    An example of adding an `md5` function into the page:

    ``` js
    const puppeteer = require('puppeteer');
    const crypto = require('crypto');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('console', msg => console.log(msg.text()));
      await page.exposeFunction('md5', text =>
        crypto.createHash('md5').update(text).digest('hex')
      );
      await page.evaluate(async () => {
        // use window.md5 to compute hashes
        const myString = 'PUPPETEER';
        const myHash = await window.md5(myString);
        console.log(`md5 of ${myString} is ${myHash}`);
      });
      await browser.close();
    })();
    ```

    An example of adding a `window.readfile` function into the page:

    ``` js
    const puppeteer = require('puppeteer');
    const fs = require('fs');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('console', msg => console.log(msg.text()));
      await page.exposeFunction('readfile', async filePath => {
        return new Promise((resolve, reject) => {
          fs.readFile(filePath, 'utf8', (err, text) => {
            if (err)
              reject(err);
            else
              resolve(text);
          });
        });
      });
      await page.evaluate(async () => {
        // use window.readfile to read contents of a file
        const content = await window.readfile('/etc/hosts');
        console.log(content);
      });
      await browser.close();
    })();
    ```
- name: page.focus()
  id: index#pagefocusselector
  summary: This method fetches an element with selector and focuses it
  description: |-
    ### page.focus(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to focus. If there are multiple elements satisfying the selector, the first will be focused.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully focused. The promise will be rejected if there is no element matching `selector`.

    This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the method throws an error.

    Shortcut for [page.mainFrame().focus(selector)](#framefocusselector).
- name: page.frames()
  id: index#pageframes
  summary: null
  description: |-
    ### page.frames()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Frame](#class-frame "Frame")\>\> An array of all frames attached to the page.

    &nbsp;
- name: page.goBack()
  id: index#pagegobackoptions
  summary: Navigate to the previous page in history
  description: |-
    ### page.goBack(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go back, resolves to `null`.

    Navigate to the previous page in history.
- name: page.goForward()
  id: index#pagegoforwardoptions
  summary: Navigate to the next page in history
  description: |-
    ### page.goForward(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If can not go forward, resolves to `null`.

    Navigate to the next page in history.
- name: page.goto()
  id: index#pagegotourl-options
  summary: page.goto will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling response.status()
  description: |-
    ### page.goto(url\[, options\])

    - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> URL to navigate page to. The url should include scheme, e.g. `https://`.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
      - `referer` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Referer header value. If provided it will take preference over the referer header value set by [page.setExtraHTTPHeaders()](#pagesetextrahttpheadersheaders).
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

    `page.goto` will throw an error if:

    - there's an SSL error (e.g. in case of self-signed certificates).
    - target URL is invalid.
    - the `timeout` is exceeded during navigation.
    - the remote server does not respond or is unreachable.
    - the main resource failed to load.

    `page.goto` will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling [response.status()](#httpresponsestatus).

    > **NOTE**`page.goto` either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.

    > **NOTE** Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).

    Shortcut for [page.mainFrame().goto(url, options)](#framegotourl-options)
- name: page.hover()
  id: index#pagehoverselector
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.mouse to hover over the center of the element
  description: |-
    ### page.hover(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the element matching `selector` is successfully hovered. Promise gets rejected if there's no element matching `selector`.

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.mouse](#pagemouse) to hover over the center of the element. If there's no element matching `selector`, the method throws an error.

    Shortcut for [page.mainFrame().hover(selector)](#framehoverselector).
- name: page.isClosed()
  id: index#pageisclosed
  summary: Indicates that the page has been closed
  description: |-
    ### page.isClosed()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Indicates that the page has been closed.
- name: page.isJavaScriptEnabled()
  id: index#pageisjavascriptenabled
  summary: Returns true if the page has JavaScript enabled, false otherwise
  description: |-
    ### page.isJavaScriptEnabled()

    - returns: \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    Returns `true` if the page has JavaScript enabled, `false` otherwise.
- name: page.keyboard
  id: index#pagekeyboard
  summary: null
  description: |-
    ### page.keyboard

    - returns: \<[Keyboard](#class-keyboard "Keyboard")\>

    &nbsp;
- name: page.mainFrame()
  id: index#pagemainframe
  summary: Page is guaranteed to have a main frame which persists during navigations
  description: |-
    ### page.mainFrame()

    - returns: \<[Frame](#class-frame "Frame")\> The page's main frame.

    Page is guaranteed to have a main frame which persists during navigations.
- name: page.metrics()
  id: index#pagemetrics
  summary: 'NOTE All timestamps are in monotonic time: monotonically increasing time in seconds since an arbitrary point in the past'
  description: |-
    ### page.metrics()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\> Object containing metrics as key/value pairs.
      - `Timestamp` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The timestamp when the metrics sample was taken.
      - `Documents` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Number of documents in the page.
      - `Frames` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Number of frames in the page.
      - `JSEventListeners` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Number of events in the page.
      - `Nodes` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Number of DOM nodes in the page.
      - `LayoutCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Total number of full or partial page layout.
      - `RecalcStyleCount` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Total number of page style recalculations.
      - `LayoutDuration` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Combined durations of all page layouts.
      - `RecalcStyleDuration` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Combined duration of all page style recalculations.
      - `ScriptDuration` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Combined duration of JavaScript execution.
      - `TaskDuration` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Combined duration of all tasks performed by the browser.
      - `JSHeapUsedSize` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Used JavaScript heap size.
      - `JSHeapTotalSize` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Total JavaScript heap size.

    > **NOTE** All timestamps are in monotonic time: monotonically increasing time in seconds since an arbitrary point in the past.
- name: page.mouse
  id: index#pagemouse
  summary: null
  description: |-
    ### page.mouse

    - returns: \<[Mouse](#class-mouse "Mouse")\>

    &nbsp;
- name: page.pdf()
  id: index#pagepdfoptions
  summary: NOTE Generating a pdf is currently only supported in Chrome headless
  description: |-
    ### page.pdf(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Options object which might have the following properties:
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The file path to save the PDF to. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd). If no path is provided, the PDF won't be saved to the disk.
      - `scale` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Scale of the webpage rendering. Defaults to `1`. Scale amount must be between 0.1 and 2.
      - `displayHeaderFooter` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Display header and footer. Defaults to `false`.
      - `headerTemplate` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:
        - `date` formatted print date
        - `title` document title
        - `url` document location
        - `pageNumber` current page number
        - `totalPages` total pages in the document
      - `footerTemplate` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> HTML template for the print footer. Should use the same format as the `headerTemplate`.
      - `printBackground` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Print background graphics. Defaults to `false`.
      - `landscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Paper orientation. Defaults to `false`.
      - `pageRanges` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
      - `format` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Paper format. If set, takes priority over `width` or `height` options. Defaults to 'Letter'.
      - `width` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Paper width, accepts values labeled with units.
      - `height` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Paper height, accepts values labeled with units.
      - `margin` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Paper margins, defaults to none.
        - `top` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Top margin, accepts values labeled with units.
        - `right` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Right margin, accepts values labeled with units.
        - `bottom` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Bottom margin, accepts values labeled with units.
        - `left` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Left margin, accepts values labeled with units.
      - `preferCSSPageSize` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Give any CSS `@page` size declared in the page priority over what is declared in `width` and `height` or `format` options. Defaults to `false`, which will scale the content to fit the paper size.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>\> Promise which resolves with PDF buffer.

    > **NOTE** Generating a pdf is currently only supported in Chrome headless.

    `page.pdf()` generates a pdf of the page with `print` css media. To generate a pdf with `screen` media, call [page.emulateMediaType('screen')](#pageemulatemediatypetype) before calling `page.pdf()`:

    > **NOTE** By default, `page.pdf()` generates a pdf with modified colors for printing. Use the [`-webkit-print-color-adjust`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust) property to force rendering of exact colors.

    ``` js
    // Generates a PDF with 'screen' media type.
    await page.emulateMediaType('screen');
    await page.pdf({path: 'page.pdf'});
    ```

    The `width`, `height`, and `margin` options accept values labeled with units. Unlabeled values are treated as pixels.

    A few examples:

    - `page.pdf({width: 100})` - prints with width set to 100 pixels
    - `page.pdf({width: '100px'})` - prints with width set to 100 pixels
    - `page.pdf({width: '10cm'})` - prints with width set to 10 centimeters.

    All possible units are:

    - `px` - pixel
    - `in` - inch
    - `cm` - centimeter
    - `mm` - millimeter

    The `format` options are:

    - `Letter`: 8.5in x 11in
    - `Legal`: 8.5in x 14in
    - `Tabloid`: 11in x 17in
    - `Ledger`: 17in x 11in
    - `A0`: 33.1in x 46.8in
    - `A1`: 23.4in x 33.1in
    - `A2`: 16.54in x 23.4in
    - `A3`: 11.7in x 16.54in
    - `A4`: 8.27in x 11.7in
    - `A5`: 5.83in x 8.27in
    - `A6`: 4.13in x 5.83in

    > **NOTE**`headerTemplate` and `footerTemplate` markup have the following limitations:
    >
    > 1.  Script tags inside templates are not evaluated.
    > 2.  Page styles are not visible inside templates.
- name: page.queryObjects()
  id: index#pagequeryobjectsprototypehandle
  summary: The method iterates the JavaScript heap and finds all the objects with the given prototype
  description: |-
    ### page.queryObjects(prototypeHandle)

    - `prototypeHandle` \<[JSHandle](#class-jshandle "JSHandle")\> A handle to the object prototype.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> Promise which resolves to a handle to an array of objects with this prototype.

    The method iterates the JavaScript heap and finds all the objects with the given prototype.

    ``` js
    // Create a Map object
    await page.evaluate(() => window.map = new Map());
    // Get a handle to the Map object prototype
    const mapPrototype = await page.evaluateHandle(() => Map.prototype);
    // Query all map instances into an array
    const mapInstances = await page.queryObjects(mapPrototype);
    // Count amount of map objects in heap
    const count = await page.evaluate(maps => maps.length, mapInstances);
    await mapInstances.dispose();
    await mapPrototype.dispose();
    ```

    Shortcut for [page.mainFrame().executionContext().queryObjects(prototypeHandle)](#executioncontextqueryobjectsprototypehandle).
- name: page.reload()
  id: index#pagereloadoptions
  summary: null
  description: |-
    ### page.reload(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

    &nbsp;
- name: page.screenshot()
  id: index#pagescreenshotoptions
  summary: NOTE Screenshots take at least 1/6 second on OS X
  description: |-
    ### page.screenshot(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Options object which might have the following properties:
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd). If no path is provided, the image won't be saved to the disk.
      - `type` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Specify screenshot type, can be either `jpeg` or `png`. Defaults to 'png'.
      - `quality` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The quality of the image, between 0-100. Not applicable to `png` images.
      - `fullPage` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> When true, takes a screenshot of the full scrollable page. Defaults to `false`.
      - `clip` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> An object which specifies clipping region of the page. Should have the following fields:
        - `x` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> x-coordinate of top-left corner of clip area
        - `y` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> y-coordinate of top-left corner of clip area
        - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> width of clipping area
        - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> height of clipping area
      - `omitBackground` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Hides default white background and allows capturing screenshots with transparency. Defaults to `false`.
      - `encoding` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The encoding of the image, can be either `base64` or `binary`. Defaults to `binary`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>\> Promise which resolves to buffer or a base64 string (depending on the value of `encoding`) with captured screenshot.

    > **NOTE** Screenshots take at least 1/6 second on OS X. See [https://crbug.com/741689](https://crbug.com/741689) for discussion.
- name: page.select()
  id: index#pageselectselector-values
  summary: Triggers a change and input event once all the provided options have been selected
  description: |-
    ### page.select(selector, ...values)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to query page for
    - `...values` \<...[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Values of options to select. If the `<select>` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>\> An array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected. If there's no `<select>` element matching `selector`, the method throws an error.

    ``` js
    page.select('select#colors', 'blue'); // single selection
    page.select('select#colors', 'red', 'green', 'blue'); // multiple selections
    ```

    Shortcut for [page.mainFrame().select()](#frameselectselector-values)
- name: page.setBypassCSP()
  id: index#pagesetbypasscspenabled
  summary: Toggles bypassing page's Content-Security-Policy
  description: |-
    ### page.setBypassCSP(enabled)

    - `enabled` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> sets bypassing of page's Content-Security-Policy.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Toggles bypassing page's Content-Security-Policy.

    > **NOTE** CSP bypassing happens at the moment of CSP initialization rather then evaluation. Usually this means that `page.setBypassCSP` should be called before navigating to the domain.
- name: page.setCacheEnabled()
  id: index#pagesetcacheenabledenabled
  summary: Toggles ignoring cache for each request based on the enabled state
  description: |-
    ### page.setCacheEnabled(\[enabled\])

    - `enabled` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> sets the `enabled` state of the cache.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Toggles ignoring cache for each request based on the enabled state. By default, caching is enabled.
- name: page.setContent()
  id: index#pagesetcontenthtml-options
  summary: null
  description: |-
    ### page.setContent(html\[, options\])

    - `html` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> HTML markup to assign to the page.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum time in milliseconds for resources to load, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider setting markup succeeded, defaults to `load`. Given an array of event strings, setting content is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider setting content to be finished when the `load` event is fired.
        - `domcontentloaded` - consider setting content to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider setting content to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider setting content to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: page.setCookie()
  id: index#pagesetcookiecookies
  summary: null
  description: |-
    ### page.setCookie(...cookies)

    - `...cookies` \<...[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> **required**
      - `value` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> **required**
      - `url` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `domain` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>
      - `expires` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Unix time in seconds.
      - `httpOnly` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>
      - `secure` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>
      - `sameSite` \<"Strict"\|"Lax"\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    ``` js
    await page.setCookie(cookieObject1, cookieObject2);
    ```
- name: page.setDefaultNavigationTimeout()
  id: index#pagesetdefaultnavigationtimeouttimeout
  summary: null
  description: |-
    ### page.setDefaultNavigationTimeout(timeout)

    - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds

    This setting will change the default maximum navigation time for the following methods and related shortcuts:

    - [page.goBack(\[options\])](#pagegobackoptions)
    - [page.goForward(\[options\])](#pagegoforwardoptions)
    - [page.goto(url\[, options\])](#pagegotourl-options)
    - [page.reload(\[options\])](#pagereloadoptions)
    - [page.setContent(html\[, options\])](#pagesetcontenthtml-options)
    - [page.waitForNavigation(\[options\])](#pagewaitfornavigationoptions)

    > **NOTE**[`page.setDefaultNavigationTimeout`](#pagesetdefaultnavigationtimeouttimeout) takes priority over [`page.setDefaultTimeout`](#pagesetdefaulttimeouttimeout)
- name: page.setDefaultTimeout()
  id: index#pagesetdefaulttimeouttimeout
  summary: null
  description: |-
    ### page.setDefaultTimeout(timeout)

    - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum time in milliseconds

    This setting will change the default maximum time for the following methods and related shortcuts:

    - [page.goBack(\[options\])](#pagegobackoptions)
    - [page.goForward(\[options\])](#pagegoforwardoptions)
    - [page.goto(url\[, options\])](#pagegotourl-options)
    - [page.reload(\[options\])](#pagereloadoptions)
    - [page.setContent(html\[, options\])](#pagesetcontenthtml-options)
    - [page.waitFor(selectorOrFunctionOrTimeout\[, options\[, ...args\]\])](#pagewaitforselectororfunctionortimeout-options-args)
    - [page.waitForFileChooser(\[options\])](#pagewaitforfilechooseroptions)
    - [page.waitForFunction(pageFunction\[, options\[, ...args\]\])](#pagewaitforfunctionpagefunction-options-args)
    - [page.waitForNavigation(\[options\])](#pagewaitfornavigationoptions)
    - [page.waitForRequest(urlOrPredicate\[, options\])](#pagewaitforrequesturlorpredicate-options)
    - [page.waitForResponse(urlOrPredicate\[, options\])](#pagewaitforresponseurlorpredicate-options)
    - [page.waitForSelector(selector\[, options\])](#pagewaitforselectorselector-options)
    - [page.waitForXPath(xpath\[, options\])](#pagewaitforxpathxpath-options)

    > **NOTE**[`page.setDefaultNavigationTimeout`](#pagesetdefaultnavigationtimeouttimeout) takes priority over [`page.setDefaultTimeout`](#pagesetdefaulttimeouttimeout)
- name: page.setExtraHTTPHeaders()
  id: index#pagesetextrahttpheadersheaders
  summary: The extra HTTP headers will be sent with every request the page initiates
  description: |-
    ### page.setExtraHTTPHeaders(headers)

    - `headers` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> An object containing additional HTTP headers to be sent with every request. All header values must be strings.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    The extra HTTP headers will be sent with every request the page initiates.

    > **NOTE** page.setExtraHTTPHeaders does not guarantee the order of headers in the outgoing requests.
- name: page.setGeolocation()
  id: index#pagesetgeolocationoptions
  summary: Sets the page's geolocation
  description: |-
    ### page.setGeolocation(options)

    - `options` \<[GeolocationOptions](#geolocationoptions)\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Sets the page's geolocation.

    ``` js
    await page.setGeolocation({latitude: 59.95, longitude: 30.31667});
    ```

    > **NOTE** Consider using [browserContext.overridePermissions](#browsercontextoverridepermissionsorigin-permissions) to grant permissions for the page to read its geolocation.
- name: page.setJavaScriptEnabled()
  id: index#pagesetjavascriptenabledenabled
  summary: NOTE changing this value won't affect scripts that have already been run
  description: |-
    ### page.setJavaScriptEnabled(enabled)

    - `enabled` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether or not to enable JavaScript on the page.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    > **NOTE** changing this value won't affect scripts that have already been run. It will take full effect on the next [navigation](#pagegotourl-options).
- name: page.setOfflineMode()
  id: index#pagesetofflinemodeenabled
  summary: null
  description: |-
    ### page.setOfflineMode(enabled)

    - `enabled` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> When `true`, enables offline mode for the page.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    &nbsp;
- name: page.setRequestInterception()
  id: index#pagesetrequestinterceptionvalue
  summary: Activating request interception enables request.abort, request.continue and request.respond methods
  description: |-
    ### page.setRequestInterception(value)

    - `value` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to enable request interception.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Activating request interception enables `request.abort`, `request.continue` and `request.respond` methods. This provides the capability to modify network requests that are made by a page.

    Once request interception is enabled, every request will stall unless it's continued, responded or aborted. An example of a naÃ¯ve request interceptor that aborts all image requests:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.setRequestInterception(true);
      page.on('request', interceptedRequest => {
        if (interceptedRequest.url().endsWith('.png') || interceptedRequest.url().endsWith('.jpg'))
          interceptedRequest.abort();
        else
          interceptedRequest.continue();
      });
      await page.goto('https://example.com');
      await browser.close();
    })();
    ```

    > **NOTE** Enabling request interception disables page caching.
- name: page.setUserAgent()
  id: index#pagesetuseragentuseragent
  summary: null
  description: |-
    ### page.setUserAgent(userAgent)

    - `userAgent` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Specific user agent to use in this page
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves when the user agent is set.

    &nbsp;
- name: page.setViewport()
  id: index#pagesetviewportviewport
  summary: NOTE in certain cases, setting viewport will reload the page in order to set the isMobile or hasTouch properties
  description: |-
    ### page.setViewport(viewport)

    - `viewport` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page width in pixels. **required**
      - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page height in pixels. **required**
      - `deviceScaleFactor` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Specify device scale factor (can be thought of as dpr). Defaults to `1`.
      - `isMobile` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the `meta viewport` tag is taken into account. Defaults to `false`.
      - `hasTouch`\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport supports touch events. Defaults to `false`
      - `isLandscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport is in landscape mode. Defaults to `false`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    > **NOTE** in certain cases, setting viewport will reload the page in order to set the `isMobile` or `hasTouch` properties.

    In the case of multiple pages in a single browser, each page can have its own viewport size.

    `page.setViewport` will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport before navigating to the page.

    ``` js
    const page = await browser.newPage();
    await page.setViewport({
      width: 640,
      height: 480,
      deviceScaleFactor: 1,
    });
    await page.goto('https://example.com');
    ```
- name: page.tap()
  id: index#pagetapselector
  summary: This method fetches an element with selector, scrolls it into view if needed, and then uses page.touchscreen to tap in the center of the element
  description: |-
    ### page.tap(selector)

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") to search for element to tap. If there are multiple elements satisfying the selector, the first will be tapped.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    This method fetches an element with `selector`, scrolls it into view if needed, and then uses [page.touchscreen](#pagetouchscreen) to tap in the center of the element. If there's no element matching `selector`, the method throws an error.

    Shortcut for [page.mainFrame().tap(selector)](#frametapselector).
- name: page.target()
  id: index#pagetarget
  summary: null
  description: |-
    ### page.target()

    - returns: \<[Target](#class-target "Target")\> a target this page was created from.

    &nbsp;
- name: page.title()
  id: index#pagetitle
  summary: Shortcut for page.mainFrame().title()
  description: |-
    ### page.title()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> The page's title.

    Shortcut for [page.mainFrame().title()](#frametitle).
- name: page.touchscreen
  id: index#pagetouchscreen
  summary: null
  description: |-
    ### page.touchscreen

    - returns: \<[Touchscreen](#class-touchscreen "Touchscreen")\>

    &nbsp;
- name: page.tracing
  id: index#pagetracing
  summary: null
  description: |-
    ### page.tracing

    - returns: \<[Tracing](#class-tracing "Tracing")\>

    &nbsp;
- name: page.type()
  id: index#pagetypeselector-text-options
  summary: Sends a keydown, keypress/input, and keyup event for each character in the text
  description: |-
    ### page.type(selector, text\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to type into. If there are multiple elements satisfying the selector, the first will be used.
    - `text` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A text to type into a focused element.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `delay` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Time to wait between key presses in milliseconds. Defaults to 0.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [`keyboard.press`](#keyboardpresskey-options).

    ``` js
    await page.type('#mytextarea', 'Hello'); // Types instantly
    await page.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user
    ```

    Shortcut for [page.mainFrame().type(selector, text\[, options\])](#frametypeselector-text-options).
- name: page.url()
  id: index#pageurl
  summary: null
  description: |-
    ### page.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    This is a shortcut for [page.mainFrame().url()](#frameurl)
- name: page.viewport()
  id: index#pageviewport
  summary: null
  description: |-
    ### page.viewport()

    - returns: \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page width in pixels.
      - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page height in pixels.
      - `deviceScaleFactor` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Specify device scale factor (can be though of as dpr). Defaults to `1`.
      - `isMobile` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the `meta viewport` tag is taken into account. Defaults to `false`.
      - `hasTouch`\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport supports touch events. Defaults to `false`
      - `isLandscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport is in landscape mode. Defaults to `false`.

    &nbsp;
- name: page.waitFor()
  id: index#pagewaitforselectororfunctionortimeout-options-args
  summary: This method is deprecated
  description: |-
    ### page.waitFor(selectorOrFunctionOrTimeout\[, options\[, ...args\]\])

    - `selectorOrFunctionOrTimeout` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\|[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector"), predicate or timeout to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `visible` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to be present in DOM and to be visible. Defaults to `false`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
      - `hidden` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to not be found in the DOM or to be hidden. Defaults to `false`.
      - `polling` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> An interval at which the `pageFunction` is executed, defaults to `raf`. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. If `polling` is a string, then it can be one of the following values:
        - `raf` - to constantly execute `pageFunction` in `requestAnimationFrame` callback. This is the tightest polling mode which is suitable to observe styling changes.
        - `mutation` - to execute `pageFunction` on every DOM mutation.
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> Promise which resolves to a JSHandle of the success value

    **This method is deprecated**. You should use the more explicit API methods available:

    - `page.waitForSelector`
    - `page.waitForXPath`
    - `page.waitForFunction`
    - `page.waitForTimeout`

    This method behaves differently with respect to the type of the first parameter:

    - if `selectorOrFunctionOrTimeout` is a `string`, then the first argument is treated as a [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") or [xpath](https://developer.mozilla.org/en-US/docs/Web/XPath "xpath"), depending on whether or not it starts with '//', and the method is a shortcut for [page.waitForSelector](#pagewaitforselectorselector-options) or [page.waitForXPath](#pagewaitforxpathxpath-options)
    - if `selectorOrFunctionOrTimeout` is a `function`, then the first argument is treated as a predicate to wait for and the method is a shortcut for [page.waitForFunction()](#pagewaitforfunctionpagefunction-options-args).
    - if `selectorOrFunctionOrTimeout` is a `number`, then the first argument is treated as a timeout in milliseconds and the method returns a promise which resolves after the timeout
    - otherwise, an exception is thrown

    ``` js
    // wait for selector
    await page.waitFor('.foo');
    // wait for 1 second
    await page.waitFor(1000);
    // wait for predicate
    await page.waitFor(() => !!document.querySelector('.foo'));
    ```

    To pass arguments from node.js to the predicate of `page.waitFor` function:

    ``` js
    const selector = '.foo';
    await page.waitFor(selector => !!document.querySelector(selector), {}, selector);
    ```

    Shortcut for [page.mainFrame().waitFor(selectorOrFunctionOrTimeout\[, options\[, ...args\]\])](#framewaitforselectororfunctionortimeout-options-args).
- name: page.waitForFileChooser()
  id: index#pagewaitforfilechooseroptions
  summary: NOTE In non-headless Chromium, this method results in the native file picker dialog not showing up for the user
  description: |-
    ### page.waitForFileChooser(\[options\])

    - `options` \<[WaitTimeoutOptions](####WaitTimeoutOptions)\> Optional waiting parameters
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[FileChooser](#class-filechooser "FileChooser")\>\> A promise that resolves after a page requests a file picker.

    > **NOTE** In non-headless Chromium, this method results in the native file picker dialog **not showing up** for the user.

    This method is typically coupled with an action that triggers file choosing. The following example clicks a button that issues a file chooser, and then responds with `/tmp/myfile.pdf` as if a user has selected this file.

    ``` js
    const [fileChooser] = await Promise.all([
      page.waitForFileChooser(),
      page.click('#upload-file-button'), // some button that triggers file selection
    ]);
    await fileChooser.accept(['/tmp/myfile.pdf']);
    ```

    > **NOTE** This must be called *before* the file chooser is launched. It will not return a currently active file chooser.
- name: page.waitForFunction()
  id: index#pagewaitforfunctionpagefunction-options-args
  summary: Shortcut for page.mainFrame().waitForFunction(pageFunction[, options[, ...args]])
  description: |-
    ### page.waitForFunction(pageFunction\[, options\[, ...args\]\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in browser context
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `polling` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> An interval at which the `pageFunction` is executed, defaults to `raf`. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. If `polling` is a string, then it can be one of the following values:
        - `raf` - to constantly execute `pageFunction` in `requestAnimationFrame` callback. This is the tightest polling mode which is suitable to observe styling changes.
        - `mutation` - to execute `pageFunction` on every DOM mutation.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\>\> Promise which resolves when the `pageFunction` returns a truthy value. It resolves to a JSHandle of the truthy value.

    The `waitForFunction` can be used to observe viewport size change:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      const watchDog = page.waitForFunction('window.innerWidth < 100');
      await page.setViewport({width: 50, height: 50});
      await watchDog;
      await browser.close();
    })();
    ```

    To pass arguments from node.js to the predicate of `page.waitForFunction` function:

    ``` js
    const selector = '.foo';
    await page.waitForFunction(selector => !!document.querySelector(selector), {}, selector);
    ```

    The predicate of `page.waitForFunction` can be asynchronous too:

    ``` js
    const username = 'github-username';
    await page.waitForFunction(async username => {
      const githubResponse = await fetch(`https://api.github.com/users/${username}`);
      const githubUser = await githubResponse.json();
      // show the avatar
      const img = document.createElement('img');
      img.src = githubUser.avatar_url;
      // wait 3 seconds
      await new Promise((resolve, reject) => setTimeout(resolve, 3000));
      img.remove();
    }, {}, username);
    ```

    Shortcut for [page.mainFrame().waitForFunction(pageFunction\[, options\[, ...args\]\])](#framewaitforfunctionpagefunction-options-args).
- name: page.waitForNavigation()
  id: index#pagewaitfornavigationoptions
  summary: This resolves when the page navigates to a new URL or reloads
  description: |-
    ### page.waitForNavigation(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Navigation parameters which might have the following properties:
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum navigation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultNavigationTimeout(timeout)](#pagesetdefaultnavigationtimeouttimeout) or [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) methods.
      - `waitUntil` \<"load"\|"domcontentloaded"\|"networkidle0"\|"networkidle2"\|Array\> When to consider navigation succeeded, defaults to `load`. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:
        - `load` - consider navigation to be finished when the `load` event is fired.
        - `domcontentloaded` - consider navigation to be finished when the `DOMContentLoaded` event is fired.
        - `networkidle0` - consider navigation to be finished when there are no more than 0 network connections for at least `500` ms.
        - `networkidle2` - consider navigation to be finished when there are no more than 2 network connections for at least `500` ms.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.

    This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. Consider this example:

    ``` js
    const [response] = await Promise.all([
      page.waitForNavigation(), // The promise resolves after navigation has finished
      page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
    ]);
    ```

    **NOTE** Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.

    Shortcut for [page.mainFrame().waitForNavigation(options)](#framewaitfornavigationoptions).
- name: page.waitForRequest()
  id: index#pagewaitforrequesturlorpredicate-options
  summary: null
  description: |-
    ### page.waitForRequest(urlOrPredicate\[, options\])

    - `urlOrPredicate` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> A URL or predicate to wait for.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[HTTPRequest](#class-httprequest "HTTPRequest")\>\> Promise which resolves to the matched request.

    ``` js
    const firstRequest = await page.waitForRequest('http://example.com/resource');
    const finalRequest = await page.waitForRequest(request => request.url() === 'http://example.com' && request.method() === 'GET');
    return firstRequest.url();
    ```
- name: page.waitForResponse()
  id: index#pagewaitforresponseurlorpredicate-options
  summary: null
  description: |-
    ### page.waitForResponse(urlOrPredicate\[, options\])

    - `urlOrPredicate` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\|[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> A URL or predicate to wait for.
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[HTTPResponse](#class-httpresponse "HTTPResponse")\>\> Promise which resolves to the matched response.

    ``` js
    const firstResponse = await page.waitForResponse('https://example.com/resource');
    const finalResponse = await page.waitForResponse(response => response.url() === 'https://example.com' && response.status() === 200);
    const finalResponse = await page.waitForResponse(async response => { return (await response.text()).includes('<html>') })
    return finalResponse.ok();
    ```
- name: page.waitForSelector()
  id: index#pagewaitforselectorselector-options
  summary: Wait for the selector to appear in page
  description: |-
    ### page.waitForSelector(selector\[, options\])

    - `selector` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors "selector") of an element to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `visible` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `hidden` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves when element specified by selector string is added to DOM. Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.

    Wait for the `selector` to appear in page. If at the moment of calling the method the `selector` already exists, the method will return immediately. If the selector doesn't appear after the `timeout` milliseconds of waiting, the function will throw.

    This method works across navigations:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page
        .waitForSelector('img')
        .then(() => console.log('First URL with image: ' + currentURL));
      for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();
    ```

    Shortcut for [page.mainFrame().waitForSelector(selector\[, options\])](#framewaitforselectorselector-options).
- name: page.waitForTimeout()
  id: index#pagewaitfortimeoutmilliseconds
  summary: null
  description: |-
    ### page.waitForTimeout(milliseconds)

    - `milliseconds` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> The number of milliseconds to wait for.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\> Promise which resolves after the timeout has completed.

    Pauses script execution for the given number of milliseconds before continuing:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.waitForTimeout(1000)
        .then(() => console.log('Waited a second!'));

      await browser.close();
    })();
    ```
- name: page.waitForXPath()
  id: index#pagewaitforxpathxpath-options
  summary: Wait for the xpath to appear in page
  description: |-
    ### page.waitForXPath(xpath\[, options\])

    - `xpath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A [xpath](https://developer.mozilla.org/en-US/docs/Web/XPath "xpath") of an element to wait for
    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Optional waiting parameters
      - `visible` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to be present in DOM and to be visible, i.e. to not have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `hidden` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> wait for element to not be found in the DOM or to be hidden, i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to `false`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves when element specified by xpath string is added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.

    Wait for the `xpath` to appear in page. If at the moment of calling the method the `xpath` already exists, the method will return immediately. If the xpath doesn't appear after the `timeout` milliseconds of waiting, the function will throw.

    This method works across navigations:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page
        .waitForXPath('//img')
        .then(() => console.log('First URL with image: ' + currentURL));
      for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();
    ```

    Shortcut for [page.mainFrame().waitForXPath(xpath\[, options\])](#framewaitforxpathxpath-options).
- name: page.workers()
  id: index#pageworkers
  summary: null
  description: |-
    ### page.workers()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[WebWorker](#class-webworker "Worker")\>\> This method returns all of the dedicated [WebWorkers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) associated with the page.

    > **NOTE** This does not contain ServiceWorkers
- name: Puppeteer
  id: index#class-puppeteer
  summary: Puppeteer module provides a method to launch a Chromium instance
  description: |-
    ## class: Puppeteer

    Puppeteer module provides a method to launch a Chromium instance. The following is a typical example of using Puppeteer to drive automation:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();
    ```
- name: puppeteer vs puppeteer-core
  id: index#puppeteer-vs-puppeteer-core
  summary: puppeteer is a product for browser automation
  description: |-
    ## puppeteer vs puppeteer-core

    Every release since v1.7.0 we publish two packages:

    - [puppeteer](https://www.npmjs.com/package/puppeteer)
    - [puppeteer-core](https://www.npmjs.com/package/puppeteer-core)

    `puppeteer` is a *product* for browser automation. When installed, it downloads a version of Chromium, which it then drives using `puppeteer-core`. Being an end-user product, `puppeteer` supports a bunch of convenient `PUPPETEER_*` env variables to tweak its behavior.

    `puppeteer-core` is a *library* to help drive anything that supports DevTools protocol. `puppeteer-core` doesn't download Chromium when installed. Being a library, `puppeteer-core` is fully driven through its programmatic interface and disregards all the `PUPPETEER_*` env variables.

    To sum up, the only differences between `puppeteer-core` and `puppeteer` are:

    - `puppeteer-core` doesn't automatically download Chromium when installed.
    - `puppeteer-core` ignores all `PUPPETEER_*` env variables.

    In most cases, you'll be fine using the `puppeteer` package.

    However, you should use `puppeteer-core` if:

    - you're building another end-user product or library atop of DevTools protocol. For example, one might build a PDF generator using `puppeteer-core` and write a custom `install.js` script that downloads [`headless_shell`](https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md) instead of Chromium to save disk space.
    - you're bundling Puppeteer to use in Chrome Extension / browser with the DevTools protocol where downloading an additional Chromium binary is unnecessary.
    - you're building a set of tools where `puppeteer-core` is one of the ingredients and you want to postpone `install.js` script execution until Chromium is about to be used.

    When using `puppeteer-core`, remember to change the *include* line:

    ``` js
    const puppeteer = require('puppeteer-core');
    ```

    You will then need to call [`puppeteer.connect([options])`](#puppeteerconnectoptions) or [`puppeteer.launch([options])`](#puppeteerlaunchoptions) with an explicit `executablePath` option.
- name: puppeteer.clearCustomQueryHandlers()
  id: index#puppeteerclearcustomqueryhandlers
  summary: Clears all registered handlers
  description: |-
    ### puppeteer.clearCustomQueryHandlers()

    Clears all registered handlers.
- name: puppeteer.connect()
  id: index#puppeteerconnectoptions
  summary: This methods attaches Puppeteer to an existing browser instance
  description: |-
    ### puppeteer.connect(options)

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `browserWSEndpoint` \<?[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a [browser websocket endpoint](#browserwsendpoint) to connect to.
      - `browserURL` \<?[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> a browser url to connect to, in format `http://${host}:${port}`. Use interchangeably with `browserWSEndpoint` to let Puppeteer fetch it from [metadata endpoint](https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target).
      - `ignoreHTTPSErrors` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to ignore HTTPS errors during navigation. Defaults to `false`.
      - `defaultViewport` \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Sets a consistent viewport for each page. Defaults to an 800x600 viewport. `null` disables the default viewport.
        - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page width in pixels.
        - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page height in pixels.
        - `deviceScaleFactor` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Specify device scale factor (can be thought of as dpr). Defaults to `1`.
        - `isMobile` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the `meta viewport` tag is taken into account. Defaults to `false`.
        - `hasTouch`\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport supports touch events. Defaults to `false`
        - `isLandscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport is in landscape mode. Defaults to `false`.
      - `slowMo` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Slows down Puppeteer operations by the specified amount of milliseconds. Useful so that you can see what is going on.
      - `transport` \<[ConnectionTransport](https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/WebSocketTransport.js "ConnectionTransport")\> **Experimental** Specify a custom transport object for Puppeteer to use.
      - `product` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Possible values are: `chrome`, `firefox`. Defaults to `chrome`.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Browser](#class-browser "Browser")\>\>

    This methods attaches Puppeteer to an existing browser instance.
- name: puppeteer.createBrowserFetcher()
  id: index#puppeteercreatebrowserfetcheroptions
  summary: null
  description: |-
    ### puppeteer.createBrowserFetcher(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `host` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A download host to be used. Defaults to `https://storage.googleapis.com`. If the `product` is `firefox`, this defaults to `https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central`.
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A path for the downloads folder. Defaults to `<root>/.local-chromium`, where `<root>` is puppeteer's package root. If the `product` is `firefox`, this defaults to `<root>/.local-firefox`.
      - `platform` \<"linux"\|"mac"\|"win32"\|"win64"\> [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String") for the current platform. Possible values are: `mac`, `win32`, `win64`, `linux`. Defaults to the current platform.
      - `product` \<"chrome"\|"firefox"\> [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String") for the product to run. Possible values are: `chrome`, `firefox`. Defaults to `chrome`.
    - returns: \<[BrowserFetcher](#class-browserfetcher "BrowserFetcher")\>
- name: puppeteer.customQueryHandlerNames()
  id: index#puppeteercustomqueryhandlernames
  summary: null
  description: |-
    ### puppeteer.customQueryHandlerNames()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\> A list with the names of all registered custom query handlers.

    &nbsp;
- name: puppeteer.defaultArgs()
  id: index#puppeteerdefaultargsoptions
  summary: The default flags that Chromium will be launched with
  description: |-
    ### puppeteer.defaultArgs(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Set of configurable options to set on the browser. Can have the following fields:
      - `headless` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to run browser in [headless mode](https://developers.google.com/web/updates/2017/04/headless-chrome). Defaults to `true` unless the `devtools` option is `true`.
      - `args` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](http://peter.sh/experiments/chromium-command-line-switches/).
      - `userDataDir` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to a [User Data Directory](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md).
      - `devtools` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to auto-open a DevTools panel for each tab. If this option is `true`, the `headless` option will be set `false`.
    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\>

    The default flags that Chromium will be launched with.
- name: puppeteer.devices
  id: index#puppeteerdevices
  summary: Returns a list of devices to be used with page.emulate(options)
  description: |-
    ### puppeteer.devices

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    Returns a list of devices to be used with [`page.emulate(options)`](#pageemulateoptions). Actual list of devices can be found in [`src/common/DeviceDescriptors.ts`](https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts).

    ``` js
    const puppeteer = require('puppeteer');
    const iPhone = puppeteer.devices['iPhone 6'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulate(iPhone);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();
    ```
- name: puppeteer.errors
  id: index#puppeteererrors
  summary: Puppeteer methods might throw errors if they are unable to fulfill a request
  description: |-
    ### puppeteer.errors

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `TimeoutError` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\> A class of [TimeoutError](#class-timeouterror "TimeoutError").

    Puppeteer methods might throw errors if they are unable to fulfill a request. For example, [page.waitForSelector(selector\[, options\])](#pagewaitforselectorselector-options) might fail if the selector doesn't match any nodes during the given timeframe.

    For certain types of errors Puppeteer uses specific error classes. These classes are available via [`puppeteer.errors`](#puppeteererrors)

    An example of handling a timeout error:

    ``` js
    try {
      await page.waitForSelector('.foo');
    } catch (e) {
      if (e instanceof puppeteer.errors.TimeoutError) {
        // Do something if this is a timeout.
      }
    }
    ```

    > **NOTE** The old way (Puppeteer versions \<= v1.14.0) errors can be obtained with `require('puppeteer/Errors')`.
- name: puppeteer.executablePath()
  id: index#puppeteerexecutablepath
  summary: NOTEpuppeteer.executablePath() is affected by the PUPPETEER_EXECUTABLE_PATH and PUPPETEER_CHROMIUM_REVISION env variables
  description: |-
    ### puppeteer.executablePath()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A path where Puppeteer expects to find the bundled browser. The browser binary might not be there if the download was skipped with [`PUPPETEER_SKIP_DOWNLOAD`](#environment-variables).

    > **NOTE**`puppeteer.executablePath()` is affected by the `PUPPETEER_EXECUTABLE_PATH` and `PUPPETEER_CHROMIUM_REVISION` env variables. See [Environment Variables](#environment-variables) for details.
- name: puppeteer.launch()
  id: index#puppeteerlaunchoptions
  summary: NOTE Puppeteer can also be used to control the Chrome browser, but it works best with the version of Chromium it is bundled with
  description: |-
    ### puppeteer.launch(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Set of configurable options to set on the browser. Can have the following fields:
      - `product` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Which browser to launch. At this time, this is either `chrome` or `firefox`. See also `PUPPETEER_PRODUCT`.
      - `ignoreHTTPSErrors` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to ignore HTTPS errors during navigation. Defaults to `false`.
      - `headless` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to run browser in [headless mode](https://developers.google.com/web/updates/2017/04/headless-chrome). Defaults to `true` unless the `devtools` option is `true`.
      - `executablePath` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to a browser executable to run instead of the bundled Chromium. If `executablePath` is a relative path, then it is resolved relative to [current working directory](https://nodejs.org/api/process.html#process_process_cwd). **BEWARE**: Puppeteer is only [guaranteed to work](https://github.com/puppeteer/puppeteer/#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy) with the bundled Chromium, use at your own risk.
      - `slowMo` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Slows down Puppeteer operations by the specified amount of milliseconds. Useful so that you can see what is going on.
      - `defaultViewport` \<?[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Sets a consistent viewport for each page. Defaults to an 800x600 viewport. `null` disables the default viewport.
        - `width` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page width in pixels.
        - `height` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> page height in pixels.
        - `deviceScaleFactor` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Specify device scale factor (can be thought of as dpr). Defaults to `1`.
        - `isMobile` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether the `meta viewport` tag is taken into account. Defaults to `false`.
        - `hasTouch`\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport supports touch events. Defaults to `false`
        - `isLandscape` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Specifies if viewport is in landscape mode. Defaults to `false`.
      - `args` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](http://peter.sh/experiments/chromium-command-line-switches/), and here is the list of [Firefox flags](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options).
      - `ignoreDefaultArgs` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\|[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> If `true`, then do not use [`puppeteer.defaultArgs()`](#puppeteerdefaultargsoptions). If an array is given, then filter out the given default arguments. Dangerous option; use with care. Defaults to `false`.
      - `handleSIGINT` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Close the browser process on Ctrl-C. Defaults to `true`.
      - `handleSIGTERM` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Close the browser process on SIGTERM. Defaults to `true`.
      - `handleSIGHUP` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Close the browser process on SIGHUP. Defaults to `true`.
      - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
      - `dumpio` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to pipe the browser process stdout and stderr into `process.stdout` and `process.stderr`. Defaults to `false`.
      - `userDataDir` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Path to a [User Data Directory](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md).
      - `env` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Specify environment variables that will be visible to the browser. Defaults to `process.env`.
      - `devtools` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Whether to auto-open a DevTools panel for each tab. If this option is `true`, the `headless` option will be set `false`.
      - `pipe` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> Connects to the browser over a pipe instead of a WebSocket. Defaults to `false`.
      - `extraPrefsFirefox` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> Additional [preferences](https://developer.mozilla.org/en-US/docs/Mozilla/Preferences/Preference_reference) that can be passed to Firefox (see `PUPPETEER_PRODUCT`)
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Browser](#class-browser "Browser")\>\> Promise which resolves to browser instance.

    You can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:

    ``` js
    const browser = await puppeteer.launch({
      ignoreDefaultArgs: ['--mute-audio']
    });
    ```

    > **NOTE** Puppeteer can also be used to control the Chrome browser, but it works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other version. Use `executablePath` option with extreme caution.
    >
    > If Google Chrome (rather than Chromium) is preferred, a [Chrome Canary](https://www.google.com/chrome/browser/canary.html) or [Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.
    >
    > In [puppeteer.launch(\[options\])](#puppeteerlaunchoptions) above, any mention of Chromium also applies to Chrome.
    >
    > See [`this article`](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for a description of the differences between Chromium and Chrome. [`This article`](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md) describes some differences for Linux users.
- name: puppeteer.networkConditions
  id: index#puppeteernetworkconditions
  summary: Returns a list of network conditions to be used with page.emulateNetworkConditions(networkConditions)
  description: |-
    ### puppeteer.networkConditions

    - returns: \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    Returns a list of network conditions to be used with [`page.emulateNetworkConditions(networkConditions)`](#pageemulatenetworkconditionsnetworkconditions). Actual list of conditions can be found in [`src/common/NetworkConditions.ts`](https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts).

    ``` js
    const puppeteer = require('puppeteer');
    const slow3G = puppeteer.networkConditions['Slow 3G'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulateNetworkConditions(slow3G);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();
    ```
- name: puppeteer.product
  id: index#puppeteerproduct
  summary: The product is set by the PUPPETEER_PRODUCT environment variable or the product option in puppeteer.launch([options]) and defaults to chrome
  description: |-
    ### puppeteer.product

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> returns the name of the browser that is under automation (`"chrome"` or `"firefox"`)

    The product is set by the `PUPPETEER_PRODUCT` environment variable or the `product` option in [puppeteer.launch(\[options\])](#puppeteerlaunchoptions) and defaults to `chrome`. Firefox support is experimental and requires to install Puppeteer via `PUPPETEER_PRODUCT=firefox npm i puppeteer`.
- name: puppeteer.registerCustomQueryHandler()
  id: index#puppeteerregistercustomqueryhandlername-queryhandler
  summary: Registers a custom query handler
  description: |-
    ### puppeteer.registerCustomQueryHandler(name, queryHandler)

    - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The name that the custom query handler will be registered under.
    - `queryHandler` \<[CustomQueryHandler](#interface-customqueryhandler "CustomQueryHandler")\> The [custom query handler](#interface-customqueryhandler) to register.

    Registers a [custom query handler](#interface-customqueryhandler). After registration, the handler can be used everywhere where a selector is expected by prepending the selection string with `<name>/`. The name is only allowed to consist of lower- and upper case latin letters.

    Example:

    ``` js
    puppeteer.registerCustomQueryHandler('getByClass', {
      queryOne: (element, selector) => {
        return element.querySelector(`.${selector}`);
      },
      queryAll: (element, selector) => {
        return element.querySelectorAll(`.${selector}`);
      },
    });
    const aHandle = await page.$('getByClass/â¦');
    ```
- name: puppeteer.unregisterCustomQueryHandler()
  id: index#puppeteerunregistercustomqueryhandlername
  summary: null
  description: |-
    ### puppeteer.unregisterCustomQueryHandler(name)

    - `name` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> The name of the query handler to unregister.

    &nbsp;
- name: SecurityDetails
  id: index#class-securitydetails
  summary: SecurityDetails class represents the security details when response was received over the secure connection
  description: |-
    ## class: SecurityDetails

    [SecurityDetails](#class-securitydetails "SecurityDetails") class represents the security details when response was received over the secure connection.
- name: securityDetails.issuer()
  id: index#securitydetailsissuer
  summary: null
  description: |-
    ### securityDetails.issuer()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A string with the name of issuer of the certificate.

    &nbsp;
- name: securityDetails.protocol()
  id: index#securitydetailsprotocol
  summary: null
  description: |-
    ### securityDetails.protocol()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> String with the security protocol, eg. "TLS 1.2".

    &nbsp;
- name: securityDetails.subjectAlternativeNames()
  id: index#securitydetailssubjectalternativenames
  summary: null
  description: |-
    ### securityDetails.subjectAlternativeNames()

    - returns: \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> Returns the list of SANs (subject alternative names) of the certificate.

    &nbsp;
- name: securityDetails.subjectName()
  id: index#securitydetailssubjectname
  summary: null
  description: |-
    ### securityDetails.subjectName()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Name of the subject to which the certificate was issued to.

    &nbsp;
- name: securityDetails.validFrom()
  id: index#securitydetailsvalidfrom
  summary: null
  description: |-
    ### securityDetails.validFrom()

    - returns: \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> [UnixTime](https://en.wikipedia.org/wiki/Unix_time "Unix Time") stating the start of validity of the certificate.

    &nbsp;
- name: securityDetails.validTo()
  id: index#securitydetailsvalidto
  summary: null
  description: |-
    ### securityDetails.validTo()

    - returns: \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> [UnixTime](https://en.wikipedia.org/wiki/Unix_time "Unix Time") stating the end of validity of the certificate.

    &nbsp;
- name: Target
  id: index#class-target
  summary: null
  description: '## class: Target'
- name: target.browser()
  id: index#targetbrowser
  summary: Get the browser the target belongs to
  description: |-
    ### target.browser()

    - returns: \<[Browser](#class-browser "Browser")\>

    Get the browser the target belongs to.
- name: target.browserContext()
  id: index#targetbrowsercontext
  summary: The browser context the target belongs to
  description: |-
    ### target.browserContext()

    - returns: \<[BrowserContext](#class-browsercontext "BrowserContext")\>

    The browser context the target belongs to.
- name: target.createCDPSession()
  id: index#targetcreatecdpsession
  summary: Creates a Chrome Devtools Protocol session attached to the target
  description: |-
    ### target.createCDPSession()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[CDPSession](#class-cdpsession "CDPSession")\>\>

    Creates a Chrome Devtools Protocol session attached to the target.
- name: target.opener()
  id: index#targetopener
  summary: Get the target that opened this target
  description: |-
    ### target.opener()

    - returns: \<?[Target](#class-target "Target")\>

    Get the target that opened this target. Top-level targets return `null`.
- name: target.page()
  id: index#targetpage
  summary: If the target is not of type "page" or "background_page", returns null
  description: |-
    ### target.page()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[Page](#class-page "Page")\>\>

    If the target is not of type `"page"` or `"background_page"`, returns `null`.
- name: target.type()
  id: index#targettype
  summary: Identifies what kind of target this is
  description: |-
    ### target.type()

    - returns: \<"page"\|"background_page"\|"service_worker"\|"shared_worker"\|"other"\|"browser"\>

    Identifies what kind of target this is. Can be `"page"`, [`"background_page"`](https://developer.chrome.com/extensions/background_pages), `"service_worker"`, `"shared_worker"`, `"browser"` or `"other"`.
- name: target.url()
  id: index#targeturl
  summary: null
  description: |-
    ### target.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    &nbsp;
- name: target.worker()
  id: index#targetworker
  summary: If the target is not of type "service_worker" or "shared_worker", returns null
  description: |-
    ### target.worker()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<?[WebWorker](#class-webworker "Worker")\>\>

    If the target is not of type `"service_worker"` or `"shared_worker"`, returns `null`.
- name: TimeoutError
  id: index#class-timeouterror
  summary: TimeoutError is emitted whenever certain operations are terminated due to timeout, e.g
  description: |-
    ## class: TimeoutError

    - extends: [Error](https://nodejs.org/api/errors.html#errors_class_error "Error")

    TimeoutError is emitted whenever certain operations are terminated due to timeout, e.g. [page.waitForSelector(selector\[, options\])](#pagewaitforselectorselector-options) or [puppeteer.launch(\[options\])](#puppeteerlaunchoptions).
- name: Touchscreen
  id: index#class-touchscreen
  summary: null
  description: '## class: Touchscreen'
- name: touchscreen.tap()
  id: index#touchscreentapx-y
  summary: Dispatches a touchstart and touchend event
  description: |-
    ### touchscreen.tap(x, y)

    - `x` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - `y` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Dispatches a `touchstart` and `touchend` event.
- name: Tracing
  id: index#class-tracing
  summary: You can use tracing.start and tracing.stop to create a trace file which can be opened in Chrome DevTools or timeline viewer
  description: |-
    ## class: Tracing

    You can use [`tracing.start`](#tracingstartoptions) and [`tracing.stop`](#tracingstop) to create a trace file which can be opened in Chrome DevTools or [timeline viewer](https://chromedevtools.github.io/timeline-viewer/).

    ``` js
    await page.tracing.start({path: 'trace.json'});
    await page.goto('https://www.google.com');
    await page.tracing.stop();
    ```
- name: tracing.start()
  id: index#tracingstartoptions
  summary: Only one trace can be active at a time per browser
  description: |-
    ### tracing.start(\[options\])

    - `options` \<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `path` \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> A path to write the trace file to.
      - `screenshots` \<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> captures screenshots in the trace.
      - `categories` \<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>\> specify custom categories to use instead of default.
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\>

    Only one trace can be active at a time per browser.
- name: tracing.stop()
  id: index#tracingstop
  summary: null
  description: |-
    ### tracing.stop()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>\> Promise which resolves to buffer with trace data.

    &nbsp;
- name: WaitTimeoutOptions
  id: index#waittimeoutoptions
  summary: null
  description: |-
    ### WaitTimeoutOptions

    - `timeout` \<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [page.setDefaultTimeout(timeout)](#pagesetdefaulttimeouttimeout) method.

    &nbsp;
- name: WebWorker
  id: index#class-webworker
  summary: The WebWorker class represents a WebWorker
  description: |-
    ## class: WebWorker

    The WebWorker class represents a [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API). The events `workercreated` and `workerdestroyed` are emitted on the page object to signal the worker lifecycle.

    ``` js
    page.on('workercreated', worker => console.log('Worker created: ' + worker.url()));
    page.on('workerdestroyed', worker => console.log('Worker destroyed: ' + worker.url()));

    console.log('Current workers:');
    for (const worker of page.workers())
      console.log('  ' + worker.url());
    ```
- name: webWorker.evaluate()
  id: index#webworkerevaluatepagefunction-args
  summary: If the function passed to the worker.evaluate returns a Promise, then worker.evaluate would wait for the promise to resolve and return its value
  description: |-
    ### webWorker.evaluate(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the worker context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>\> Promise which resolves to the return value of `pageFunction`

    If the function passed to the `worker.evaluate` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `worker.evaluate` would wait for the promise to resolve and return its value.

    If the function passed to the `worker.evaluate` returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then `worker.evaluate` resolves to `undefined`. DevTools Protocol also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.

    Shortcut for [(await worker.executionContext()).evaluate(pageFunction, ...args)](#executioncontextevaluatepagefunction-args).
- name: webWorker.evaluateHandle()
  id: index#webworkerevaluatehandlepagefunction-args
  summary: The only difference between worker.evaluate and worker.evaluateHandle is that worker.evaluateHandle returns in-page object (JSHandle)
  description: |-
    ### webWorker.evaluateHandle(pageFunction\[, ...args\])

    - `pageFunction` \<[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")\|[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\> Function to be evaluated in the page context
    - `...args` \<...[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\|[JSHandle](#class-jshandle "JSHandle")\> Arguments to pass to `pageFunction`
    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](#class-jshandle "JSHandle")\|[ElementHandle](#class-elementhandle "ElementHandle")\>\> Promise which resolves to the return value of `pageFunction` as an in-page object.

    The only difference between `worker.evaluate` and `worker.evaluateHandle` is that `worker.evaluateHandle` returns in-page object (JSHandle).

    If the function passed to the `worker.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `worker.evaluateHandle` would wait for the promise to resolve and return its value.

    If the function returns an element, the returned handle is an [ElementHandle](#class-elementhandle "ElementHandle").

    Shortcut for [(await worker.executionContext()).evaluateHandle(pageFunction, ...args)](#executioncontextevaluatehandlepagefunction-args).
- name: webWorker.executionContext()
  id: index#webworkerexecutioncontext
  summary: null
  description: |-
    ### webWorker.executionContext()

    - returns: \<[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ExecutionContext](#class-executioncontext "ExecutionContext")\>\>

    &nbsp;
- name: webWorker.url()
  id: index#webworkerurl
  summary: null
  description: |-
    ### webWorker.url()

    - returns: \<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "String")\>

    &nbsp;
- name: Working with Chrome Extensions
  id: index#working-with-chrome-extensions
  summary: Puppeteer can be used for testing Chrome Extensions
  description: |-
    ## Working with Chrome Extensions

    Puppeteer can be used for testing Chrome Extensions.

    > **NOTE** Extensions in Chrome / Chromium currently only work in non-headless mode.

    The following is code for getting a handle to the [background page](https://developer.chrome.com/extensions/background_pages) of an extension whose source is located in `./my-extension`:

    ``` js
    const puppeteer = require('puppeteer');

    (async () => {
      const pathToExtension = require('path').join(__dirname, 'my-extension');
      const browser = await puppeteer.launch({
        headless: false,
        args: [
          `--disable-extensions-except=${pathToExtension}`,
          `--load-extension=${pathToExtension}`
        ]
      });
      const targets = await browser.targets();
      const backgroundPageTarget = targets.find(target => target.type() === 'background_page');
      const backgroundPage = await backgroundPageTarget.page();
      // Test the background page as you would any other page.
      await browser.close();
    })();
    ```

    > **NOTE** It is not yet possible to test extension popups or content scripts.
