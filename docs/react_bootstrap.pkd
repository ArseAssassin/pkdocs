---
name: React Bootstrap
slug: react_bootstrap
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff
  Licensed under the MIT License (MIT).
  https://react-bootstrap.github.io//
homepage: https://react-bootstrap.github.io

---
- name: About
  id: about/index
  summary: Get to know more about the team maintaining React Bootstrap
  description: "# About\n\nGet to know more about the team maintaining React Bootstrap. Learn a little history of how, why and when the project started and how you can be a part of it.\n\n### Team\n\nReact Bootstrap is maintained by a [team of developers](https://github.com/orgs/react-bootstrap/people) on Github. We have a growing team and if you are interested in re-building the most popular front-end framework with React we would love to hear from you.\n\n### Contributors\n\nWe welcome community support with both feature and bug reporting. Please don't hesitate to jump in. Join our growing list of [contributors](https://github.com/react-bootstrap/react-bootstrap/graphs/contributors).\n\n### Get Involved\n\nGet involved with React Bootstrap [by opening an issue](https://github.com/react-bootstrap/react-bootstrap/issues/new) or submitting a pull request. See our [contributing guidelines](https://github.com/react-bootstrap/react-bootstrap/blob/master/CONTRIBUTING.md) here.\n\n### External Links\n\n- [Bootstrap](https://getbootstrap.com/)\n- [React](https://reactjs.org/)\n- [React Router Bootstrap](https://github.com/react-bootstrap/react-router-bootstrap)\n- [Awesome React Bootstrap Components](https://github.com/Hermanya/awesome-react-bootstrap-components)\n- [React Bootstrap CodeSandbox examples](https://codesandbox.io/s/github/react-bootstrap/code-sandbox-examples/tree/master/basic)\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/about/](https://react-bootstrap.github.io/about/)"
- name: Accordion
  id: components/accordion/index
  summary: Accordions provide a way to restrict Card components to only open one at a time
  description: "# Accordion\n\nAccordions provide a way to restrict Card components to only open one at a time.\n\n## Examples\n\nAccordions use Card components to provide styling of the Accordion components. Use AccordionToggle to provide a button that switches between each AccordionCollapse component.\n\n### Basic Example\n\n``` jsx\n<Accordion defaultActiveKey=\"0\">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"0\">\n      <Card.Body>Hello! I'm the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>Hello! I'm another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n```\n\n### Fully Collapsed State\n\nIf you want your Accordion to start in a fully-collapsed state, then simply don't pass in a `defaultActiveKey` prop to `Accordion`.\n\n``` jsx\n<Accordion>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"0\">\n      <Card.Body>Hello! I'm the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>Hello! I'm another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n```\n\n### Entire Header Clickable\n\nEach of the Card components in the Accordion can have their entire header clickable, by setting the AccordionToggle's underlying component to be a CardHeader component.\n\n``` jsx\n<Accordion defaultActiveKey=\"0\">\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"0\">\n      <Card.Body>Hello! I'm the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>Hello! I'm another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n```\n\n### Custom Toggle\n\nYou can now hook into the Accordion toggle functionality via `useAccordionToggle` to make custom toggle components.\n\n``` jsx\nfunction CustomToggle({ children, eventKey }) {\n  const decoratedOnClick = useAccordionToggle(eventKey, () =>\n    console.log('totally custom!'),\n  );\n\n  return (\n    <button\n      type=\"button\"\n      style={{ backgroundColor: 'pink' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey=\"0\">\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey=\"0\">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>Hello! I'm the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey=\"1\">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>Hello! I'm another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n```\n\n### Custom Toggle with Expansion Awareness\n\nYou may wish to have different styles for the toggle if it's associated section is expanded, this can be achieved with a custom toggle that is context aware and also takes advantage of the `useAccordionToggle` hook.\n\n``` jsx\nfunction ContextAwareToggle({ children, eventKey, callback }) {\n  const currentEventKey = useContext(AccordionContext);\n\n  const decoratedOnClick = useAccordionToggle(\n    eventKey,\n    () => callback && callback(eventKey),\n  );\n\n  const isCurrentEventKey = currentEventKey === eventKey;\n\n  return (\n    <button\n      type=\"button\"\n      style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey=\"0\">\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey=\"0\">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>Hello! I'm the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey=\"1\">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>Hello! I'm another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n```\n\n## API\n\n### Accordion\n\n`import`` Accordion ``from`` 'react-bootstrap/Accordion'`Copy import code for the Accordion component\n\n[TABLE]\n\n### Accordion.Toggle\n\n`import`` Accordion ``from`` 'react-bootstrap/Accordion'`Copy import code for the Accordion component\n\n[TABLE]\n\n### Accordion.Collapse\n\n`import`` Accordion ``from`` 'react-bootstrap/Accordion'`Copy import code for the Accordion component\n\n[TABLE]\n\n### useAccordionToggle\n\n    import { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\n    const decoratedOnClick = useAccordionToggle(eventKey, onClick);\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/accordion/](https://react-bootstrap.github.io/components/accordion/)"
- name: Alerts
  id: components/alerts/index
  summary: Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages
  description: "# Alerts\n\nProvide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.\n\n## Examples\n\nAlerts are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the eight `variant`s.\n\n``` jsx\n[\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n].map((variant, idx) => (\n  <Alert key={idx} variant={variant}>\n    This is a {variant} alert—check it out!\n  </Alert>\n));\n```\n\nUsing color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies – such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the `.sr-only` class.\n\n### Links\n\nFor links, use the `<Alert.Link>` component to provide matching colored links within any alert.\n\n``` jsx\n[\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n].map((variant, idx) => (\n  <Alert key={idx} variant={variant}>\n    This is a {variant} alert with{' '}\n    <Alert.Link href=\"#\">an example link</Alert.Link>. Give it a click if you\n    like.\n  </Alert>\n));\n```\n\n### Additional content\n\nAlerts can contain whatever content you like. Headers, paragraphs, dividers, go crazy.\n\n``` jsx\n<Alert variant=\"success\">\n  <Alert.Heading>Hey, nice to see you</Alert.Heading>\n  <p>\n    Aww yeah, you successfully read this important alert message. This example\n    text is going to run a bit longer so that you can see how spacing within an\n    alert works with this kind of content.\n  </p>\n  <hr />\n  <p className=\"mb-0\">\n    Whenever you need to, be sure to use margin utilities to keep things nice\n    and tidy.\n  </p>\n</Alert>\n```\n\n### Dismissing\n\nAdd the `dismissible` prop to add a functioning dismiss button to the Alert.\n\n``` jsx\nfunction AlertDismissibleExample() {\n  const [show, setShow] = useState(true);\n\n  if (show) {\n    return (\n      <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n        <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n        <p>\n          Change this and that and try again. Duis mollis, est non commodo\n          luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n          Cras mattis consectetur purus sit amet fermentum.\n        </p>\n      </Alert>\n    );\n  }\n  return <Button onClick={() => setShow(true)}>Show Alert</Button>;\n}\n\nrender(<AlertDismissibleExample />);\n```\n\nYou can also control the visual state directly which is great if you want to build more complicated alerts.\n\n``` jsx\nfunction AlertDismissible() {\n  const [show, setShow] = useState(true);\n\n  return (\n    <>\n      <Alert show={show} variant=\"success\">\n        <Alert.Heading>How's it going?!</Alert.Heading>\n        <p>\n          Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget\n          lacinia odio sem nec elit. Cras mattis consectetur purus sit amet\n          fermentum.\n        </p>\n        <hr />\n        <div className=\"d-flex justify-content-end\">\n          <Button onClick={() => setShow(false)} variant=\"outline-success\">\n            Close me y'all!\n          </Button>\n        </div>\n      </Alert>\n\n      {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\n    </>\n  );\n}\n\nrender(<AlertDismissible />);\n```\n\n## API\n\n### Alert\n\n`import`` Alert ``from`` 'react-bootstrap/Alert'`Copy import code for the Alert component\n\n[TABLE]\n\n### Alert.Heading\n\n`import`` Alert ``from`` 'react-bootstrap/Alert'`Copy import code for the Alert component\n\n[TABLE]\n\n### Alert.Link\n\n`import`` Alert ``from`` 'react-bootstrap/Alert'`Copy import code for the Alert component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/alerts/](https://react-bootstrap.github.io/components/alerts/)"
- name: Badges
  id: components/badge/index
  summary: Badges scale to match the size of the immediate parent element by using relative font sizing and em units
  description: "# Badges\n\nBadges scale to match the size of the immediate parent element by using relative font sizing and em units.\n\n``` jsx\n<div>\n  <h1>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h1>\n  <h2>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h2>\n  <h3>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h3>\n  <h4>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h4>\n  <h5>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h5>\n  <h6>\n    Example heading <Badge variant=\"secondary\">New</Badge>\n  </h6>\n</div>\n```\n\nBadges can be used as part of links or buttons to provide a counter.\n\n``` jsx\n<Button variant=\"primary\">\n  Profile <Badge variant=\"light\">9</Badge>\n  <span className=\"sr-only\">unread messages</span>\n</Button>\n```\n\nNote that depending on how they are used, badges may be confusing for users of screen readers and similar assistive technologies. While the styling of badges provides a visual cue as to their purpose, these users will simply be presented with the content of the badge. Depending on the specific situation, these badges may seem like random additional words or numbers at the end of a sentence, link, or button. Unless the context is clear, consider including additional context with a visually hidden piece of additional text.\n\n## Contextual variations\n\nAdd any of the below mentioned modifier classes to change the appearance of a badge.\n\n``` jsx\n<div>\n  <Badge variant=\"primary\">Primary</Badge>{' '}\n  <Badge variant=\"secondary\">Secondary</Badge>{' '}\n  <Badge variant=\"success\">Success</Badge>{' '}\n  <Badge variant=\"danger\">Danger</Badge>{' '}\n  <Badge variant=\"warning\">Warning</Badge> <Badge variant=\"info\">Info</Badge>{' '}\n  <Badge variant=\"light\">Light</Badge> <Badge variant=\"dark\">Dark</Badge>\n</div>\n```\n\n## Pill\n\nbadges Use the `pill` modifier class to make badges more rounded (with a larger `border-radius` and additional horizontal `padding`). Useful if you miss the badges from v3.\n\n``` jsx\n<div>\n  <Badge pill variant=\"primary\">\n    Primary\n  </Badge>{' '}\n  <Badge pill variant=\"secondary\">\n    Secondary\n  </Badge>{' '}\n  <Badge pill variant=\"success\">\n    Success\n  </Badge>{' '}\n  <Badge pill variant=\"danger\">\n    Danger\n  </Badge>{' '}\n  <Badge pill variant=\"warning\">\n    Warning\n  </Badge>{' '}\n  <Badge pill variant=\"info\">\n    Info\n  </Badge>{' '}\n  <Badge pill variant=\"light\">\n    Light\n  </Badge>{' '}\n  <Badge pill variant=\"dark\">\n    Dark\n  </Badge>\n</div>\n```\n\n## API\n\n### Badge\n\n`import`` Badge ``from`` 'react-bootstrap/Badge'`Copy import code for the Badge component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/badge/](https://react-bootstrap.github.io/components/badge/)"
- name: Base Nav
  id: components/navs/index
  summary: Navigation bits in Bootstrap all share a general Nav component and styles
  description: "# Base Nav\n\nNavigation bits in Bootstrap all share a general `Nav` component and styles. Swap `variant`s to switch between each style. The base `Nav` component is built with flexbox and provide a strong foundation for building all types of navigation components.\n\nThe basic, variant-less, `Nav` component does not include any `active` prop styling!\n\n``` jsx\n<Nav\n  activeKey=\"/home\"\n  onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\n>\n  <Nav.Item>\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"disabled\" disabled>\n      Disabled\n    </Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\n`<Nav>` markup is very flexible and styling is controlled via classes so you can use whatever elements you like to build your navs. By default `<Nav>` and `<Nav.Item>` both render `<div>`s instead of `<ul>` and `<li>` elements respectively. This because it's possible (and common) to leave off the `<Nav.Item>`'s and render a `<Nav.Link>` directly, which would create invalid markup by default (`ul > a`).\n\nWhen a `<ul>` is appropriate you can render one via the `as` prop; be sure to also set your items to `<li>` as well!\n\n``` jsx\n<Nav defaultActiveKey=\"/home\" as=\"ul\">\n  <Nav.Item as=\"li\">\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item as=\"li\">\n    <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n  </Nav.Item>\n  <Nav.Item as=\"li\">\n    <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\n## Alignment and orientation\n\nYou can control the the direction and orientation of the `Nav` by making use of the [flexbox layout](https://getbootstrap.com/docs/4.0/layout/grid/#horizontal-alignment) utility classes. By default, navs are left-aligned, but that is easily changed to center or right-aligned.\n\n``` jsx\n<>\n  <Nav className=\"justify-content-center\" activeKey=\"/home\">\n    <Nav.Item>\n      <Nav.Link href=\"/home\">Active</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"disabled\" disabled>\n        Disabled\n      </Nav.Link>\n    </Nav.Item>\n  </Nav>\n  <p className=\"text-center mt-4 mb-4\">Or right-aligned</p>\n  <Nav className=\"justify-content-end\" activeKey=\"/home\">\n    <Nav.Item>\n      <Nav.Link href=\"/home\">Active</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n    </Nav.Item>\n    <Nav.Item>\n      <Nav.Link eventKey=\"disabled\" disabled>\n        Disabled\n      </Nav.Link>\n    </Nav.Item>\n  </Nav>\n</>\n```\n\n### Vertical\n\nCreate stacked navs by changing the flex item direction with the `.flex-column` class, or your own css. You can even use the responsive versions to stack in some viewports but not others (e.g. `.flex-sm-column`).\n\n``` jsx\n<Nav defaultActiveKey=\"/home\" className=\"flex-column\">\n  <Nav.Link href=\"/home\">Active</Nav.Link>\n  <Nav.Link eventKey=\"link-1\">Link</Nav.Link>\n  <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n  <Nav.Link eventKey=\"disabled\" disabled>\n    Disabled\n  </Nav.Link>\n</Nav>\n```\n\n## Tabs\n\nVisually represent nav items as \"tabs\". This style pairs nicely with tabbable regions created by our [Tab components](../tabs/index).\n\nNote: creating a vertical nav (`.flex-column`) with tabs styling is unsupported by Bootstrap's default stylesheet.\n\n``` jsx\n<Nav variant=\"tabs\" defaultActiveKey=\"/home\">\n  <Nav.Item>\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-1\">Option 2</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"disabled\" disabled>\n      Disabled\n    </Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\n## Pills\n\nAn alternative visual variant.\n\n``` jsx\n<Nav variant=\"pills\" defaultActiveKey=\"/home\">\n  <Nav.Item>\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-1\">Option 2</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"disabled\" disabled>\n      Disabled\n    </Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\n## Fill and justify\n\nForce the contents of your nav to extend the full available width. To proportionately fill the space use `fill`. Notice that the nav is the entire width but each nav item is a different size.\n\n``` jsx\n<Nav fill variant=\"tabs\" defaultActiveKey=\"/home\">\n  <Nav.Item>\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-1\">Loooonger NavLink</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"disabled\" disabled>\n      Disabled\n    </Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\nIf you want each NavItem to be the same size use `justify`.\n\n``` jsx\n<Nav justify variant=\"tabs\" defaultActiveKey=\"/home\">\n  <Nav.Item>\n    <Nav.Link href=\"/home\">Active</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-1\">Loooonger NavLink</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"link-2\">Link</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link eventKey=\"disabled\" disabled>\n      Disabled\n    </Nav.Link>\n  </Nav.Item>\n</Nav>\n```\n\n## Using dropdowns\n\nYou can mix and match the Dropdown components with the NavLink and NavItem components to create a Dropdown that plays well in a Nav component\n\n    <Dropdown as={NavItem}>\n      <Dropdown.Toggle as={NavLink}>Click to see more…</Dropdown.Toggle>\n      <Dropdown.Menu>\n        <Dropdown.Item>Hello there!</Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>;\n\nThe above demonstrates how flexible the component model can be. But if you didn't want to roll your own versions we've included a straight-forward `<NavDropdown>` that works for most cases.\n\n``` jsx\nfunction NavDropdownExample() {\n  const handleSelect = (eventKey) => alert(`selected ${eventKey}`);\n\n  return (\n    <Nav variant=\"pills\" activeKey=\"1\" onSelect={handleSelect}>\n      <Nav.Item>\n        <Nav.Link eventKey=\"1\" href=\"#/home\">\n          NavLink 1 content\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link eventKey=\"2\" title=\"Item\">\n          NavLink 2 content\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link eventKey=\"3\" disabled>\n          NavLink 3 content\n        </Nav.Link>\n      </Nav.Item>\n      <NavDropdown title=\"Dropdown\" id=\"nav-dropdown\">\n        <NavDropdown.Item eventKey=\"4.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item eventKey=\"4.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item eventKey=\"4.3\">Something else here</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item eventKey=\"4.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n  );\n}\n\nrender(<NavDropdownExample />);\n```\n\n## API\n\n### Nav\n\n`import`` Nav ``from`` 'react-bootstrap/Nav'`Copy import code for the Nav component\n\n[TABLE]\n\n### Nav.Item\n\n`import`` Nav ``from`` 'react-bootstrap/Nav'`Copy import code for the Nav component\n\n[TABLE]\n\n### Nav.Link\n\n`import`` Nav ``from`` 'react-bootstrap/Nav'`Copy import code for the Nav component\n\n[TABLE]\n\n### NavDropdown\n\n`import`` NavDropdown ``from`` 'react-bootstrap/NavDropdown'`Copy import code for the NavDropdown component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/navs/](https://react-bootstrap.github.io/components/navs/)"
- name: Breadcrumbs
  id: components/breadcrumb/index
  summary: Indicate the current page’s location within a navigational hierarchy that automatically adds separators via CSS
  description: "## Breadcrumbs\n\nIndicate the current page’s location within a navigational hierarchy that automatically adds separators via CSS. Add `active ` prop to active `Breadcrumb.Item `. Do not set both `active ` and `href ` attributes. `active ` overrides `href ` and `span ` element is rendered instead of `a `.\n\n### Example\n\n``` jsx\n<Breadcrumb>\n  <Breadcrumb.Item href=\"#\">Home</Breadcrumb.Item>\n  <Breadcrumb.Item href=\"https://getbootstrap.com/docs/4.0/components/breadcrumb/\">\n    Library\n  </Breadcrumb.Item>\n  <Breadcrumb.Item active>Data</Breadcrumb.Item>\n</Breadcrumb>\n```\n\n## API\n\n### Breadcrumb\n\n`import`` Breadcrumb ``from`` 'react-bootstrap/Breadcrumb'`Copy import code for the Breadcrumb component\n\n[TABLE]\n\n### Breadcrumb.Item\n\n`import`` Breadcrumb ``from`` 'react-bootstrap/Breadcrumb'`Copy import code for the Breadcrumb component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/breadcrumb/](https://react-bootstrap.github.io/components/breadcrumb/)"
- name: Button groups
  id: components/button-group/index
  summary: Group a series of buttons together on a single line with the button group
  description: "# Button groups\n\nGroup a series of buttons together on a single line with the button group.\n\n## Basic example\n\nWrap a series of `<Button>`s in a `<ButtonGroup>`.\n\n``` jsx\n<ButtonGroup aria-label=\"Basic example\">\n  <Button variant=\"secondary\">Left</Button>\n  <Button variant=\"secondary\">Middle</Button>\n  <Button variant=\"secondary\">Right</Button>\n</ButtonGroup>\n```\n\n## Button toolbar\n\nCombine sets of `<ButtonGroup>`s into a `<ButtonToolbar>` for more complex components.\n\n``` jsx\n<ButtonToolbar aria-label=\"Toolbar with button groups\">\n  <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\n    <Button>1</Button> <Button>2</Button> <Button>3</Button> <Button>4</Button>\n  </ButtonGroup>\n  <ButtonGroup className=\"mr-2\" aria-label=\"Second group\">\n    <Button>5</Button> <Button>6</Button> <Button>7</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Third group\">\n    <Button>8</Button>\n  </ButtonGroup>\n</ButtonToolbar>\n```\n\nFeel free to mix input groups with button groups in your toolbars. Similar to the example above, you’ll likely need some utilities though to space things properly.\n\n``` jsx\n<>\n  <ButtonToolbar className=\"mb-3\" aria-label=\"Toolbar with Button groups\">\n    <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\n      <Button variant=\"secondary\">1</Button>{' '}\n      <Button variant=\"secondary\">2</Button>{' '}\n      <Button variant=\"secondary\">3</Button>{' '}\n      <Button variant=\"secondary\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"btnGroupAddon\">@</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        type=\"text\"\n        placeholder=\"Input group example\"\n        aria-label=\"Input group example\"\n        aria-describedby=\"btnGroupAddon\"\n      />\n    </InputGroup>\n  </ButtonToolbar>\n\n  <ButtonToolbar\n    className=\"justify-content-between\"\n    aria-label=\"Toolbar with Button groups\"\n  >\n    <ButtonGroup aria-label=\"First group\">\n      <Button variant=\"secondary\">1</Button>{' '}\n      <Button variant=\"secondary\">2</Button>{' '}\n      <Button variant=\"secondary\">3</Button>{' '}\n      <Button variant=\"secondary\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"btnGroupAddon2\">@</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        type=\"text\"\n        placeholder=\"Input group example\"\n        aria-label=\"Input group example\"\n        aria-describedby=\"btnGroupAddon2\"\n      />\n    </InputGroup>\n  </ButtonToolbar>\n</>\n```\n\n## Sizing\n\nInstead of applying button sizing props to every button in a group, just add `size ` prop to the `<ButtonGroup>`.\n\n``` jsx\n<>\n  <ButtonGroup size=\"lg\" className=\"mb-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <br />\n  <ButtonGroup className=\"mb-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <br />\n  <ButtonGroup size=\"sm\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</>\n```\n\n## Nesting\n\nYou can place other button types within the `<ButtonGroup>` like `<DropdownButton>`s.\n\n``` jsx\n<ButtonGroup>\n  <Button>1</Button>\n  <Button>2</Button>\n\n  <DropdownButton as={ButtonGroup} title=\"Dropdown\" id=\"bg-nested-dropdown\">\n    <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n    <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n  </DropdownButton>\n</ButtonGroup>\n```\n\n## Vertical variation\n\nMake a set of buttons appear vertically stacked rather than horizontally, by adding `vertical` to the `<ButtonGroup>`. **Split button dropdowns are not supported here.**\n\n``` jsx\n<ButtonGroup vertical>\n  <Button>Button</Button>\n  <Button>Button</Button>\n\n  <DropdownButton as={ButtonGroup} title=\"Dropdown\" id=\"bg-vertical-dropdown-1\">\n    <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n    <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n  </DropdownButton>\n\n  <Button>Button</Button>\n  <Button>Button</Button>\n\n  <DropdownButton as={ButtonGroup} title=\"Dropdown\" id=\"bg-vertical-dropdown-2\">\n    <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n    <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n  </DropdownButton>\n\n  <DropdownButton as={ButtonGroup} title=\"Dropdown\" id=\"bg-vertical-dropdown-3\">\n    <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n    <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n  </DropdownButton>\n</ButtonGroup>\n```\n\n## API\n\n### ButtonGroup\n\n`import`` ButtonGroup ``from`` 'react-bootstrap/ButtonGroup'`Copy import code for the ButtonGroup component\n\n[TABLE]\n\n### ButtonToolbar\n\n`import`` ButtonToolbar ``from`` 'react-bootstrap/ButtonToolbar'`Copy import code for the ButtonToolbar component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/button-group/](https://react-bootstrap.github.io/components/button-group/)"
- name: Buttons
  id: components/buttons/index
  summary: Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more
  description: "# Buttons\n\nCustom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\n\n## Examples\n\nUse any of the available button style types to quickly create a styled button. Just modify the `variant` prop.\n\n``` jsx\n<>\n  <Button variant=\"primary\">Primary</Button>{' '}\n  <Button variant=\"secondary\">Secondary</Button>{' '}\n  <Button variant=\"success\">Success</Button>{' '}\n  <Button variant=\"warning\">Warning</Button>{' '}\n  <Button variant=\"danger\">Danger</Button> <Button variant=\"info\">Info</Button>{' '}\n  <Button variant=\"light\">Light</Button> <Button variant=\"dark\">Dark</Button>{' '}\n  <Button variant=\"link\">Link</Button>\n</>\n```\n\n### Outline buttons\n\nFor a lighter touch, Buttons also come in `outline-*` variants with no background color.\n\n``` jsx\n<>\n  <Button variant=\"outline-primary\">Primary</Button>{' '}\n  <Button variant=\"outline-secondary\">Secondary</Button>{' '}\n  <Button variant=\"outline-success\">Success</Button>{' '}\n  <Button variant=\"outline-warning\">Warning</Button>{' '}\n  <Button variant=\"outline-danger\">Danger</Button>{' '}\n  <Button variant=\"outline-info\">Info</Button>{' '}\n  <Button variant=\"outline-light\">Light</Button>{' '}\n  <Button variant=\"outline-dark\">Dark</Button>\n</>\n```\n\n## Button tags\n\nNormally `<Button>` components will render a HTML `<button>` element. However you can render whatever you'd like, adding a `href` prop will automatically render an `<a />` element. You can use the `as` prop to render whatever your heart desires. React Bootstrap will take care of the proper ARIA roles for you.\n\n``` jsx\n<>\n  <Button href=\"#\">Link</Button> <Button type=\"submit\">Button</Button>{' '}\n  <Button as=\"input\" type=\"button\" value=\"Input\" />{' '}\n  <Button as=\"input\" type=\"submit\" value=\"Submit\" />{' '}\n  <Button as=\"input\" type=\"reset\" value=\"Reset\" />\n</>\n```\n\n## Sizes\n\nFancy larger or smaller buttons? Add `size=\"lg\"`, `size=\"sm\"` for additional sizes.\n\n``` jsx\n<>\n  <div className=\"mb-2\">\n    <Button variant=\"primary\" size=\"lg\">\n      Large button\n    </Button>{' '}\n    <Button variant=\"secondary\" size=\"lg\">\n      Large button\n    </Button>\n  </div>\n  <div>\n    <Button variant=\"primary\" size=\"sm\">\n      Small button\n    </Button>{' '}\n    <Button variant=\"secondary\" size=\"sm\">\n      Small button\n    </Button>\n  </div>\n</>\n```\n\nCreate block level buttons—those that span the full width of a parent—by adding `block`\n\n``` jsx\n<>\n  <Button variant=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button variant=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</>\n```\n\n## Active state\n\nTo set a button's active state simply set the component's `active` prop.\n\n``` jsx\n<>\n  <Button variant=\"primary\" size=\"lg\" active>\n    Primary button\n  </Button>{' '}\n  <Button variant=\"secondary\" size=\"lg\" active>\n    Button\n  </Button>\n</>\n```\n\n### Disabled state\n\nMake buttons look inactive by adding the `disabled` prop to.\n\n``` jsx\n<>\n  <Button variant=\"primary\" size=\"lg\" disabled>\n    Primary button\n  </Button>{' '}\n  <Button variant=\"secondary\" size=\"lg\" disabled>\n    Button\n  </Button>{' '}\n  <Button href=\"#\" variant=\"secondary\" size=\"lg\" disabled>\n    Link\n  </Button>\n</>\n```\n\nWatch out! `<a>` elements don't naturally support a `disabled` attribute. In browsers that support it this is handled with a `point-events: none` style but not all browsers support it yet.\n\nReact Bootstrap will prevent any `onClick` handlers from firing regardless of the rendered element.\n\n## Button loading state\n\nWhen activating an asynchronous action from a button it is a good UX pattern to give the user feedback as to the loading state, this can easily be done by updating your `<Button />`s props from a state change like below.\n\n``` jsx\nfunction simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? 'Loading…' : 'Click to load'}\n    </Button>\n  );\n}\n\nrender(<LoadingButton />);\n```\n\n## Checkbox / Radio\n\nButtons can also be used to style `checkbox` and `radio` form elements. This is helpful when you want a toggle button that works neatly inside an HTML form.\n\n``` jsx\nfunction ToggleButtonExample() {\n  const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState('1');\n\n  const radios = [\n    { name: 'Active', value: '1' },\n    { name: 'Radio', value: '2' },\n    { name: 'Radio', value: '3' },\n  ];\n\n  return (\n    <>\n      <ButtonGroup toggle className=\"mb-2\">\n        <ToggleButton\n          type=\"checkbox\"\n          variant=\"secondary\"\n          checked={checked}\n          value=\"1\"\n          onChange={(e) => setChecked(e.currentTarget.checked)}\n        >\n          Checked\n        </ToggleButton>\n      </ButtonGroup>\n      <br />\n      <ButtonGroup toggle>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </>\n  );\n}\n\nrender(<ToggleButtonExample />);\n```\n\nThe above handles styling, But requires manually controlling the `checked` state for each radio or checkbox in the group.\n\nFor a nicer experience with checked state management use the `<ToggleButtonGroup>` instead of a `<ButtonGroup toggle>` component. The group behaves as a form component, where the `value` is an array of the selected `value`s for a named checkbox group or the single toggled `value` in a similarly named radio group.\n\n#### Uncontrolled\n\n``` jsx\n<>\n  <ToggleButtonGroup type=\"checkbox\" defaultValue={[1, 3]} className=\"mb-2\">\n    <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\n    <ToggleButton value={2}>Checkbox 2</ToggleButton>\n    <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\n  </ToggleButtonGroup>\n  <br />\n  <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={1}>\n    <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\n    <ToggleButton value={2}>Radio 2</ToggleButton>\n    <ToggleButton value={3}>Radio 3</ToggleButton>\n  </ToggleButtonGroup>\n</>\n```\n\n#### Controlled\n\n``` jsx\nfunction ToggleButtonGroupControlled() {\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type=\"checkbox\" value={value} onChange={handleChange}>\n      <ToggleButton value={1}>Option 1</ToggleButton>\n      <ToggleButton value={2}>Option 2</ToggleButton>\n      <ToggleButton value={3}>Option 3</ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nrender(<ToggleButtonGroupControlled />);\n```\n\n## API\n\n### Button\n\n`import`` Button ``from`` 'react-bootstrap/Button'`Copy import code for the Button component\n\n[TABLE]\n\n### ToggleButtonGroup\n\n`import`` ToggleButtonGroup ``from`` 'react-bootstrap/ToggleButtonGroup'`Copy import code for the ToggleButtonGroup component\n\n[TABLE]\n\n### ToggleButton\n\n`import`` ToggleButton ``from`` 'react-bootstrap/ToggleButton'`Copy import code for the ToggleButton component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/buttons/](https://react-bootstrap.github.io/components/buttons/)"
- name: Cards
  id: components/cards/index
  summary: Bootstrap’s cards provide a flexible and extensible content container with multiple variants and options
  description: "# Cards\n\nBootstrap’s cards provide a flexible and extensible content container with multiple variants and options.\n\n## Basic Example\n\n``` jsx\n<Card style={{ width: '18rem' }}>\n  <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n  <Card.Body>\n    <Card.Title>Card Title</Card.Title>\n    <Card.Text>\n      Some quick example text to build on the card title and make up the bulk of\n      the card's content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n</Card>\n```\n\n## Content types\n\n### Body\n\nUse `<Card.Body>` to pad content inside a `<Card>`.\n\n``` jsx\n<Card>\n  <Card.Body>This is some text within a card body.</Card.Body>\n</Card>\n```\n\nAlternatively, you can use this shorthand version for Cards with body only, and no other children\n\n``` jsx\n<Card body>This is some text within a card body.</Card>\n```\n\n### Title, text, and links\n\nUsing `<Card.Title>`, `<Card.Subtitle>`, and `<Card.Text>` inside the `<Card.Body>` will line them up nicely. `<Card.Link>`s are used to line up links next to each other.\n\n`<Card.Text>` outputs `<p>` tags around the content, so you can use multiple `<Card.Text>`s to create separate paragraphs.\n\n``` jsx\n<Card style={{ width: '18rem' }}>\n  <Card.Body>\n    <Card.Title>Card Title</Card.Title>\n    <Card.Subtitle className=\"mb-2 text-muted\">Card Subtitle</Card.Subtitle>\n    <Card.Text>\n      Some quick example text to build on the card title and make up the bulk of\n      the card's content.\n    </Card.Text>\n    <Card.Link href=\"#\">Card Link</Card.Link>\n    <Card.Link href=\"#\">Another Link</Card.Link>\n  </Card.Body>\n</Card>\n```\n\n### List Groups\n\nCreate lists of content in a card with a flush list group.\n\n``` jsx\n<Card style={{ width: '18rem' }}>\n  <ListGroup variant=\"flush\">\n    <ListGroup.Item>Cras justo odio</ListGroup.Item>\n    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n  </ListGroup>\n</Card>\n```\n\n``` jsx\n<Card style={{ width: '18rem' }}>\n  <Card.Header>Featured</Card.Header>\n  <ListGroup variant=\"flush\">\n    <ListGroup.Item>Cras justo odio</ListGroup.Item>\n    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n  </ListGroup>\n</Card>\n```\n\n### Kitchen Sink\n\n``` jsx\n<Card style={{ width: '18rem' }}>\n  <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" />\n  <Card.Body>\n    <Card.Title>Card Title</Card.Title>\n    <Card.Text>\n      Some quick example text to build on the card title and make up the bulk of\n      the card's content.\n    </Card.Text>\n  </Card.Body>\n  <ListGroup className=\"list-group-flush\">\n    <ListGroupItem>Cras justo odio</ListGroupItem>\n    <ListGroupItem>Dapibus ac facilisis in</ListGroupItem>\n    <ListGroupItem>Vestibulum at eros</ListGroupItem>\n  </ListGroup>\n  <Card.Body>\n    <Card.Link href=\"#\">Card Link</Card.Link>\n    <Card.Link href=\"#\">Another Link</Card.Link>\n  </Card.Body>\n</Card>\n```\n\n### Header and Footer\n\nYou may add a header by adding a `<Card.Header>` component.\n\n``` jsx\n<Card>\n  <Card.Header>Featured</Card.Header>\n  <Card.Body>\n    <Card.Title>Special title treatment</Card.Title>\n    <Card.Text>\n      With supporting text below as a natural lead-in to additional content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n</Card>\n```\n\nA `<CardHeader>` can be styled by passing a heading element through the `<as>` prop\n\n``` jsx\n<Card>\n  <Card.Header as=\"h5\">Featured</Card.Header>\n  <Card.Body>\n    <Card.Title>Special title treatment</Card.Title>\n    <Card.Text>\n      With supporting text below as a natural lead-in to additional content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n</Card>\n```\n\n``` jsx\n<Card>\n  <Card.Header>Quote</Card.Header>\n  <Card.Body>\n    <blockquote className=\"blockquote mb-0\">\n      <p>\n        {' '}\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere\n        erat a ante.{' '}\n      </p>\n      <footer className=\"blockquote-footer\">\n        Someone famous in <cite title=\"Source Title\">Source Title</cite>\n      </footer>\n    </blockquote>\n  </Card.Body>\n</Card>\n```\n\n``` jsx\n<Card className=\"text-center\">\n  <Card.Header>Featured</Card.Header>\n  <Card.Body>\n    <Card.Title>Special title treatment</Card.Title>\n    <Card.Text>\n      With supporting text below as a natural lead-in to additional content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n  <Card.Footer className=\"text-muted\">2 days ago</Card.Footer>\n</Card>\n```\n\n## Images\n\nCards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.\n\n### Image caps\n\nSimilar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.\n\n``` jsx\n<>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n    <Card.Body>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n  <Card>\n    <Card.Body>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n    <Card.Img variant=\"bottom\" src=\"holder.js/100px180\" />\n  </Card>\n</>\n```\n\n### Image Overlays\n\nTurn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.\n\n``` jsx\n<Card className=\"bg-dark text-white\">\n  <Card.Img src=\"holder.js/100px270\" alt=\"Card image\" />\n  <Card.ImgOverlay>\n    <Card.Title>Card title</Card.Title>\n    <Card.Text>\n      This is a wider card with supporting text below as a natural lead-in to\n      additional content. This content is a little bit longer.\n    </Card.Text>\n    <Card.Text>Last updated 3 mins ago</Card.Text>\n  </Card.ImgOverlay>\n</Card>\n```\n\n## Navigation\n\nAdd some navigation to a card’s header (or block) with React Bootstrap’s [Nav](../navs/index) components.\n\n``` jsx\n<Card>\n  <Card.Header>\n    <Nav variant=\"tabs\" defaultActiveKey=\"#first\">\n      <Nav.Item>\n        <Nav.Link href=\"#first\">Active</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link href=\"#link\">Link</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link href=\"#disabled\" disabled>\n          Disabled\n        </Nav.Link>\n      </Nav.Item>\n    </Nav>\n  </Card.Header>\n  <Card.Body>\n    <Card.Title>Special title treatment</Card.Title>\n    <Card.Text>\n      With supporting text below as a natural lead-in to additional content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n</Card>\n```\n\n``` jsx\n<Card>\n  <Card.Header>\n    <Nav variant=\"pills\" defaultActiveKey=\"#first\">\n      <Nav.Item>\n        <Nav.Link href=\"#first\">Active</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link href=\"#link\">Link</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link href=\"#disabled\" disabled>\n          Disabled\n        </Nav.Link>\n      </Nav.Item>\n    </Nav>\n  </Card.Header>\n  <Card.Body>\n    <Card.Title>Special title treatment</Card.Title>\n    <Card.Text>\n      With supporting text below as a natural lead-in to additional content.\n    </Card.Text>\n    <Button variant=\"primary\">Go somewhere</Button>\n  </Card.Body>\n</Card>\n```\n\n## Card Styles\n\n### Background Color\n\nYou can change a card's appearance by changing their `<bg>`, and `<text>` props.\n\n``` jsx\n[\n  'Primary',\n  'Secondary',\n  'Success',\n  'Danger',\n  'Warning',\n  'Info',\n  'Light',\n  'Dark',\n].map((variant, idx) => (\n  <Card\n    bg={variant.toLowerCase()}\n    key={idx}\n    text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\n    style={{ width: '18rem' }}\n    className=\"mb-2\"\n  >\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>{variant} Card Title </Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n));\n```\n\n### Border Color\n\n``` jsx\n<>\n  <Card border=\"primary\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Primary Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"secondary\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Secondary Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"success\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Success Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"danger\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Danger Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"warning\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Warning Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"info\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Info Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"dark\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Dark Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n\n  <Card border=\"light\" style={{ width: '18rem' }}>\n    <Card.Header>Header</Card.Header>\n    <Card.Body>\n      <Card.Title>Light Card Title</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <br />\n</>\n```\n\n## Card layout\n\n### Card Groups\n\n``` jsx\n<CardGroup>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This is a wider card with supporting text below as a natural lead-in to\n        additional content. This content is a little bit longer.\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This card has supporting text below as a natural lead-in to additional\n        content.{' '}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This is a wider card with supporting text below as a natural lead-in to\n        additional content. This card has even longer content than the first to\n        show that equal height action.\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n</CardGroup>\n```\n\n### Card Deck\n\n``` jsx\n<CardDeck>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This is a wider card with supporting text below as a natural lead-in to\n        additional content. This content is a little bit longer.\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This card has supporting text below as a natural lead-in to additional\n        content.{' '}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This is a wider card with supporting text below as a natural lead-in to\n        additional content. This card has even longer content than the first to\n        show that equal height action.\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n```\n\n### Card Columns\n\n``` jsx\n<CardColumns>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title that wraps to a new line</Card.Title>\n      <Card.Text>\n        This is a longer card with supporting text below as a natural lead-in to\n        additional content. This content is a little bit longer.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <Card className=\"p-3\">\n    <blockquote className=\"blockquote mb-0 card-body\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere\n        erat a ante.\n      </p>\n      <footer className=\"blockquote-footer\">\n        <small className=\"text-muted\">\n          Someone famous in <cite title=\"Source Title\">Source Title</cite>\n        </small>\n      </footer>\n    </blockquote>\n  </Card>\n  <Card>\n    <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This card has supporting text below as a natural lead-in to additional\n        content.{' '}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"primary\" text=\"white\" className=\"text-center p-3\">\n    <blockquote className=\"blockquote mb-0 card-body\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere\n        erat a ante.\n      </p>\n      <footer className=\"blockquote-footer\">\n        <small className=\"text-muted\">\n          Someone famous in <cite title=\"Source Title\">Source Title</cite>\n        </small>\n      </footer>\n    </blockquote>\n  </Card>\n  <Card className=\"text-center\">\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This card has supporting text below as a natural lead-in to additional\n        content.{' '}\n      </Card.Text>\n      <Card.Text>\n        <small className=\"text-muted\">Last updated 3 mins ago</small>\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  <Card>\n    <Card.Img src=\"holder.js/100px160\" />\n  </Card>\n  <Card className=\"text-right\">\n    <blockquote className=\"blockquote mb-0 card-body\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere\n        erat a ante.\n      </p>\n      <footer className=\"blockquote-footer\">\n        <small className=\"text-muted\">\n          Someone famous in <cite title=\"Source Title\">Source Title</cite>\n        </small>\n      </footer>\n    </blockquote>\n  </Card>\n  <Card>\n    <Card.Body>\n      <Card.Title>Card title</Card.Title>\n      <Card.Text>\n        This is a wider card with supporting text below as a natural lead-in to\n        additional content. This card has even longer content than the first to\n        show that equal height action.\n      </Card.Text>\n      <Card.Text>\n        <small className=\"text-muted\">Last updated 3 mins ago</small>\n      </Card.Text>\n    </Card.Body>\n  </Card>\n</CardColumns>\n```\n\n## API\n\n### Card\n\n`import`` Card ``from`` 'react-bootstrap/Card'`Copy import code for the Card component\n\n[TABLE]\n\n### Card.Body\n\n`import`` Card ``from`` 'react-bootstrap/Card'`Copy import code for the Card component\n\n[TABLE]\n\n### Card.Img\n\n`import`` Card ``from`` 'react-bootstrap/Card'`Copy import code for the Card component\n\n[TABLE]\n\n### Card.ImgOverlay\n\n`import`` Card ``from`` 'react-bootstrap/Card'`Copy import code for the Card component\n\n[TABLE]\n\n### CardDeck\n\n`import`` CardDeck ``from`` 'react-bootstrap/CardDeck'`Copy import code for the CardDeck component\n\n[TABLE]\n\n### CardGroup\n\n`import`` CardGroup ``from`` 'react-bootstrap/CardGroup'`Copy import code for the CardGroup component\n\n[TABLE]\n\n### CardColumns\n\n`import`` CardColumns ``from`` 'react-bootstrap/CardColumns'`Copy import code for the CardColumns component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/cards/](https://react-bootstrap.github.io/components/cards/)"
- name: Carousels
  id: components/carousel/index
  summary: A slideshow component for cycling through elements—images or slides of text—like a carousel
  description: "# Carousels\n\nA slideshow component for cycling through elements—images or slides of text—like a carousel.\n\n## Example\n\nCarousels don’t automatically normalize slide dimensions. As such, you may need to use additional utilities or custom styles to appropriately size content. While carousels support previous/next controls and indicators, they’re not explicitly required. Add and customize as you see fit.\n\n``` jsx\n<Carousel>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=First slide&bg=373940\"\n      alt=\"First slide\"\n    />\n    <Carousel.Caption>\n      <h3>First slide label</h3>\n      <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=Second slide&bg=282c34\"\n      alt=\"Second slide\"\n    />\n\n    <Carousel.Caption>\n      <h3>Second slide label</h3>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=Third slide&bg=20232a\"\n      alt=\"Third slide\"\n    />\n\n    <Carousel.Caption>\n      <h3>Third slide label</h3>\n      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n</Carousel>\n```\n\n## Controlled\n\nYou can also *control* the Carousel state, via the `activeIndex` prop and `onSelect` handler.\n\n``` jsx\nfunction ControlledCarousel() {\n  const [index, setIndex] = useState(0);\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n  };\n\n  return (\n    <Carousel activeIndex={index} onSelect={handleSelect}>\n      <Carousel.Item>\n        <img\n          className=\"d-block w-100\"\n          src=\"holder.js/800x400?text=First slide&bg=373940\"\n          alt=\"First slide\"\n        />\n        <Carousel.Caption>\n          <h3>First slide label</h3>\n          <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n        </Carousel.Caption>\n      </Carousel.Item>\n      <Carousel.Item>\n        <img\n          className=\"d-block w-100\"\n          src=\"holder.js/800x400?text=Second slide&bg=282c34\"\n          alt=\"Second slide\"\n        />\n\n        <Carousel.Caption>\n          <h3>Second slide label</h3>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n        </Carousel.Caption>\n      </Carousel.Item>\n      <Carousel.Item>\n        <img\n          className=\"d-block w-100\"\n          src=\"holder.js/800x400?text=Third slide&bg=20232a\"\n          alt=\"Third slide\"\n        />\n\n        <Carousel.Caption>\n          <h3>Third slide label</h3>\n          <p>\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur.\n          </p>\n        </Carousel.Caption>\n      </Carousel.Item>\n    </Carousel>\n  );\n}\n\nrender(<ControlledCarousel />);\n```\n\n## Individual Item Intervals\n\nYou can specify individual intervals for each carousel item via the `interval` prop.\n\n``` jsx\n<Carousel>\n  <Carousel.Item interval={1000}>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=First slide&bg=373940\"\n      alt=\"First slide\"\n    />\n    <Carousel.Caption>\n      <h3>First slide label</h3>\n      <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item interval={500}>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=Second slide&bg=282c34\"\n      alt=\"Second slide\"\n    />\n    <Carousel.Caption>\n      <h3>Second slide label</h3>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n  <Carousel.Item>\n    <img\n      className=\"d-block w-100\"\n      src=\"holder.js/800x400?text=Third slide&bg=20232a\"\n      alt=\"Third slide\"\n    />\n    <Carousel.Caption>\n      <h3>Third slide label</h3>\n      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n    </Carousel.Caption>\n  </Carousel.Item>\n</Carousel>\n```\n\n## API\n\n### Carousel\n\n`import`` Carousel ``from`` 'react-bootstrap/Carousel'`Copy import code for the Carousel component\n\n[TABLE]\n\n### Carousel.Item\n\n`import`` Carousel ``from`` 'react-bootstrap/Carousel'`Copy import code for the Carousel component\n\n[TABLE]\n\n### Carousel.Caption\n\n`import`` Carousel ``from`` 'react-bootstrap/Carousel'`Copy import code for the Carousel component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/carousel/](https://react-bootstrap.github.io/components/carousel/)"
- name: Dropdowns
  id: components/dropdowns/index
  summary: Dropdowns are toggleable, contextual overlays for displaying lists of links and more
  description: "# Dropdowns\n\nToggle contextual overlays for displaying lists of links and more with the Bootstrap dropdown plugin\n\n## Overview\n\nDropdowns are toggleable, contextual overlays for displaying lists of links and more. Like overlays, Dropdowns are built using a third-party library [Popper.js](https://popper.js.org/), which provides dynamic positioning and viewport detection.\n\n## Accessibility\n\nThe [WAI ARIA](https://www.w3.org/TR/wai-aria/) standard defines a [`role=\"menu\"` widget](https://www.w3.org/TR/wai-aria-1.1/#menu), but it's very specific to a certain kind of menu. ARIA menus, must only contain `role=\"menuitem\"`, `role=\"menuitemcheckbox\"`, or `role=\"menuitemradio\"`.\n\nOn the other hand, Bootstrap's dropdowns are designed to more generic and application in a variety of situations. For this reason we don't automatically add the menu roles to the markup. We do implement some basic keyboard navigation, and if you do provide the \"menu\" role, react-bootstrap will do its best to ensure the focus management is compliant with the ARIA authoring guidelines for menus.\n\n## Examples\n\n### Single button dropdowns\n\nThe basic Dropdown is composed of a wrapping `Dropdown` and inner `<DropdownMenu>`, and `<DropdownToggle>`. By default the `<DropdownToggle>` will render a `Button` component and accepts all the same props.\n\n``` jsx\n<Dropdown>\n  <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n    Dropdown Button\n  </Dropdown.Toggle>\n\n  <Dropdown.Menu>\n    <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n```\n\nSince the above is such a common configuration react-bootstrap provides the `<DropdownButton>` component to help reduce typing. Provide a `title` prop and some `<DropdownItem>`s and you're ready to go.\n\n``` jsx\n<DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n  <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n  <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n  <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n</DropdownButton>\n```\n\nDropdownButton will forward Button props to the underlying Toggle component\n\n``` jsx\n<>\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\n    (variant) => (\n      <DropdownButton\n        as={ButtonGroup}\n        key={variant}\n        id={`dropdown-variants-${variant}`}\n        variant={variant.toLowerCase()}\n        title={variant}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\" active>\n          Active Item\n        </Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </DropdownButton>\n    ),\n  )}\n</>\n```\n\n### Split button dropdowns\n\nSimilarly, You create a split dropdown by combining the Dropdown components with another Button and a ButtonGroup.\n\n``` jsx\n<Dropdown as={ButtonGroup}>\n  <Button variant=\"success\">Split Button</Button>\n\n  <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\n\n  <Dropdown.Menu>\n    <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n    <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n```\n\nAs with DropdownButton, `SplitButton` is provided as convenience component.\n\n``` jsx\n<>\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\n    (variant) => (\n      <SplitButton\n        key={variant}\n        id={`dropdown-split-variants-${variant}`}\n        variant={variant.toLowerCase()}\n        title={variant}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\" active>\n          Active Item\n        </Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </SplitButton>\n    ),\n  )}\n</>\n```\n\n### Sizing\n\nDropdowns work with buttons of all sizes.\n\n``` jsx\n<>\n  <div className=\"mb-2\">\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\n      <DropdownType\n        as={ButtonGroup}\n        key={idx}\n        id={`dropdown-button-drop-${idx}`}\n        size=\"lg\"\n        title=\"Drop large\"\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </DropdownType>\n    ))}\n  </div>\n  <div>\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\n      <DropdownType\n        as={ButtonGroup}\n        key={idx}\n        id={`dropdown-button-drop-${idx}`}\n        size=\"sm\"\n        variant=\"secondary\"\n        title=\"Drop small\"\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </DropdownType>\n    ))}\n  </div>\n</>\n```\n\n## Drop directions\n\nTrigger dropdown menus above, below, left, or to the right of their toggle elements, with the `drop` prop.\n\n``` jsx\n<>\n  <div className=\"mb-2\">\n    {['up', 'down', 'left', 'right'].map((direction) => (\n      <DropdownButton\n        as={ButtonGroup}\n        key={direction}\n        id={`dropdown-button-drop-${direction}`}\n        drop={direction}\n        variant=\"secondary\"\n        title={` Drop ${direction} `}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </DropdownButton>\n    ))}\n  </div>\n\n  <div>\n    {['up', 'down', 'left', 'right'].map((direction) => (\n      <SplitButton\n        key={direction}\n        id={`dropdown-button-drop-${direction}`}\n        drop={direction}\n        variant=\"secondary\"\n        title={`Drop ${direction}`}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </SplitButton>\n    ))}\n  </div>\n</>\n```\n\n## Dropdown items\n\nHistorically dropdown menu contents had to be links, but that’s no longer the case with v4. Now you can optionally use `<button>` elements in your dropdowns instead of just `<a>`s.\n\nYou can also create non-interactive dropdown items with `<Dropdown.ItemText>`. Feel free to style further with custom CSS or text utilities.\n\n``` jsx\n<DropdownButton id=\"dropdown-item-button\" title=\"Dropdown button\">\n  <Dropdown.ItemText>Dropdown item text</Dropdown.ItemText>\n  <Dropdown.Item as=\"button\">Action</Dropdown.Item>\n  <Dropdown.Item as=\"button\">Another action</Dropdown.Item>\n  <Dropdown.Item as=\"button\">Something else</Dropdown.Item>\n</DropdownButton>\n```\n\n## Menu alignment\n\nBy default, a dropdown menu is aligned to the left, but you can switch it by passing `right` to the `align` prop on a `<DropdownMenu>` or passing `right` to the `menuAlign` prop on the `<DropdownButton>` or `<SplitButton>` as seen below.\n\n``` jsx\n<DropdownButton\n  menuAlign=\"right\"\n  title=\"Dropdown right\"\n  id=\"dropdown-menu-align-right\"\n>\n  <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n  <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n  <Dropdown.Divider />\n  <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n</DropdownButton>\n```\n\n### Responsive alignment\n\nIf you want to use responsive menu alignment, pass an object to the `align` prop on the `<DropdownMenu>` or the `menuAlign` prop on the `<DropdownButton>` and `<SplitButton>`. You can specify the directions `left` or `right` for the various breakpoints.\n\nUsing responsive alignment will disable Popper usage so any dynamic positioning features such as `flip` will not work.\n\n``` jsx\n<>\n  <div>\n    <DropdownButton\n      as={ButtonGroup}\n      menuAlign={{ lg: 'right' }}\n      title=\"Left-aligned but right aligned when large screen\"\n      id=\"dropdown-menu-align-responsive-1\"\n    >\n      <Dropdown.Item eventKey=\"1\">Action 1</Dropdown.Item>\n      <Dropdown.Item eventKey=\"2\">Action 2</Dropdown.Item>\n    </DropdownButton>\n  </div>\n  <div className=\"mt-2\">\n    <SplitButton\n      menuAlign={{ lg: 'left' }}\n      title=\"Right-aligned but left aligned when large screen\"\n      id=\"dropdown-menu-align-responsive-2\"\n    >\n      <Dropdown.Item eventKey=\"1\">Action 1</Dropdown.Item>\n      <Dropdown.Item eventKey=\"2\">Action 2</Dropdown.Item>\n    </SplitButton>\n  </div>\n</>\n```\n\n## Menu headers\n\nAdd a header to label sections of actions.\n\n``` jsx\n<Dropdown.Menu show>\n  <Dropdown.Header>Dropdown header</Dropdown.Header>\n  <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n</Dropdown.Menu>\n```\n\n## Menu dividers\n\nSeparate groups of related menu items with a divider.\n\n``` jsx\n<Dropdown.Menu show>\n  <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n  <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n  <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n  <Dropdown.Divider />\n  <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n</Dropdown.Menu>\n```\n\n## Customization\n\nIf the default handling of the dropdown menu and toggle components aren't to your liking, you can customize them, by using the more basic `<Dropdown>` Component to explicitly specify the Toggle and Menu components\n\n``` jsx\n<>\n  <Dropdown as={ButtonGroup}>\n    <Dropdown.Toggle id=\"dropdown-custom-1\">Pow! Zoom!</Dropdown.Toggle>\n    <Dropdown.Menu className=\"super-colors\">\n      <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n      <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n      <Dropdown.Item eventKey=\"3\" active>\n        Active Item\n      </Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>{' '}\n  <Dropdown as={ButtonGroup}>\n    <Button variant=\"info\">mix it up style-wise</Button>\n    <Dropdown.Toggle split variant=\"success\" id=\"dropdown-custom-2\" />\n    <Dropdown.Menu className=\"super-colors\">\n      <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n      <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n      <Dropdown.Item eventKey=\"3\" active>\n        Active Item\n      </Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n</>\n```\n\n### Custom Dropdown Components\n\nFor those that want to customize everything, you can forgo the included Toggle and Menu components, and create your own. By providing custom components to the `as` prop, you can control how each component behaves. Custom toggle and menu components **must** be able to accept refs.\n\n``` jsx\n// The forwardRef is important!!\n// Dropdown needs access to the DOM node in order to position the Menu\nconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n    &#x25bc;\n  </a>\n));\n\n// forwardRef again here!\n// Dropdown needs access to the DOM of the Menu to measure it\nconst CustomMenu = React.forwardRef(\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div\n        ref={ref}\n        style={style}\n        className={className}\n        aria-labelledby={labeledBy}\n      >\n        <FormControl\n          autoFocus\n          className=\"mx-3 my-2 w-auto\"\n          placeholder=\"Type to filter...\"\n          onChange={(e) => setValue(e.target.value)}\n          value={value}\n        />\n        <ul className=\"list-unstyled\">\n          {React.Children.toArray(children).filter(\n            (child) =>\n              !value || child.props.children.toLowerCase().startsWith(value),\n          )}\n        </ul>\n      </div>\n    );\n  },\n);\n\nrender(\n  <Dropdown>\n    <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\n      Custom toggle\n    </Dropdown.Toggle>\n\n    <Dropdown.Menu as={CustomMenu}>\n      <Dropdown.Item eventKey=\"1\">Red</Dropdown.Item>\n      <Dropdown.Item eventKey=\"2\">Blue</Dropdown.Item>\n      <Dropdown.Item eventKey=\"3\" active>\n        Orange\n      </Dropdown.Item>\n      <Dropdown.Item eventKey=\"1\">Red-Orange</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>,\n);\n```\n\n## API\n\n### DropdownButton\n\n`import`` DropdownButton ``from`` 'react-bootstrap/DropdownButton'`Copy import code for the DropdownButton component\n\nA convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children` are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s props](#dropdown-props).\n\n*All unknown props are passed through to the `Dropdown` component.* Only the Button `variant`, `size` and `bsPrefix` props are passed to the toggle, along with menu-related props are passed to the `Dropdown.Menu`\n\n[TABLE]\n\n### SplitButton\n\n`import`` SplitButton ``from`` 'react-bootstrap/SplitButton'`Copy import code for the SplitButton component\n\nA convenience component for simple or general use split button dropdowns. Renders a `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children` are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s props](#dropdown-props).\n\n*All unknown props are passed through to the `Dropdown` component.* The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle, and menu-related props are passed to the `Dropdown.Menu`\n\n[TABLE]\n\n### Dropdown\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n### Dropdown.Toggle\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n### Dropdown.Menu\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n### Dropdown.Item\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n### Dropdown.Header\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n### Dropdown.Divider\n\n`import`` Dropdown ``from`` 'react-bootstrap/Dropdown'`Copy import code for the Dropdown component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/dropdowns/](https://react-bootstrap.github.io/components/dropdowns/)"
- name: Figures
  id: components/figures/index
  summary: Anytime you need to display a piece of content, like an image with an optional caption, consider using a Figure
  description: "# Figures\n\nAnytime you need to display a piece of content, like an image with an optional caption, consider using a `Figure`.\n\n## Figure\n\nDisplaying related images and text with the Figure component.\n\n``` jsx\n<Figure>\n  <Figure.Image\n    width={171}\n    height={180}\n    alt=\"171x180\"\n    src=\"holder.js/171x180\"\n  />\n  <Figure.Caption>\n    Nulla vitae elit libero, a pharetra augue mollis interdum.\n  </Figure.Caption>\n</Figure>\n```\n\n## API\n\n### Figure\n\n`import`` Figure ``from`` 'react-bootstrap/Figure'`Copy import code for the Figure component\n\n[TABLE]\n\n### FigureImage\n\n`import`` FigureImage ``from`` 'react-bootstrap/FigureImage'`Copy import code for the FigureImage component\n\n| Name | Type | Default | Description |\n|------|------|---------|-------------|\n\n### FigureCaption\n\n`import`` FigureCaption ``from`` 'react-bootstrap/FigureCaption'`Copy import code for the FigureCaption component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/figures/](https://react-bootstrap.github.io/components/figures/)"
- name: Forms
  id: components/forms/index
  summary: The <FormControl> component renders a form control with Bootstrap styling
  description: "# Forms\n\nThe `<FormControl>` component renders a form control with Bootstrap styling. The `<FormGroup>` component wraps a form control with proper spacing, along with support for a label, help text, and validation state. To ensure accessibility, set `controlId` on `<FormGroup>`, and use `<FormLabel>` for the label.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"formBasicEmail\">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\" />\n    <Form.Text className=\"text-muted\">\n      We'll never share your email with anyone else.\n    </Form.Text>\n  </Form.Group>\n\n  <Form.Group controlId=\"formBasicPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\" />\n  </Form.Group>\n  <Form.Group controlId=\"formBasicCheckbox\">\n    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n  </Form.Group>\n  <Button variant=\"primary\" type=\"submit\">\n    Submit\n  </Button>\n</Form>\n```\n\nThe `<FormControl>` component directly renders the `<input>` or other specified component. If you need to access the value of an uncontrolled `<FormControl>`, attach a `ref` to it as you would with an uncontrolled input, then call `ReactDOM.findDOMNode(ref)` to get the DOM node. You can then interact with that node as you would with any other uncontrolled input.\n\nIf your application contains a large number of form groups, we recommend building a higher-level component encapsulating a complete field group that renders the label, the control, and any other necessary components. We don't provide this out-of-the-box, because the composition of those field groups is too specific to an individual application to admit a good one-size-fits-all solution.\n\n## Form controls\n\nFor textual form controls—like `input`s, `select`s, and `textarea`s—use the `FormControl` component. FormControl adds some additional styles for general appearance, focus state, sizing, and more.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"exampleForm.ControlInput1\">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n  </Form.Group>\n  <Form.Group controlId=\"exampleForm.ControlSelect1\">\n    <Form.Label>Example select</Form.Label>\n    <Form.Control as=\"select\">\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId=\"exampleForm.ControlSelect2\">\n    <Form.Label>Example multiple select</Form.Label>\n    <Form.Control as=\"select\" multiple>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n    <Form.Label>Example textarea</Form.Label>\n    <Form.Control as=\"textarea\" rows={3} />\n  </Form.Group>\n</Form>\n```\n\nFor file inputs, use `Form.File`.\n\n``` jsx\n<Form>\n  <Form.Group>\n    <Form.File id=\"exampleFormControlFile1\" label=\"Example file input\" />\n  </Form.Group>\n</Form>\n```\n\n### Sizing\n\nUse `size` on `<FormControl>` and `<FormLabel>` to change the size of inputs and labels respectively.\n\n``` jsx\n<Form.Group>\n  <Form.Control size=\"lg\" type=\"text\" placeholder=\"Large text\" />\n  <br />\n  <Form.Control type=\"text\" placeholder=\"Normal text\" />\n  <br />\n  <Form.Control size=\"sm\" type=\"text\" placeholder=\"Small text\" />\n</Form.Group>\n```\n\n``` jsx\n<Form.Group>\n  <Form.Control as=\"select\" size=\"lg\">\n    <option>Large select</option>\n  </Form.Control>\n  <br />\n  <Form.Control as=\"select\">\n    <option>Default select</option>\n  </Form.Control>\n  <br />\n  <Form.Control size=\"sm\" as=\"select\">\n    <option>Small select</option>\n  </Form.Control>\n</Form.Group>\n```\n\n### Readonly\n\nAdd the `readOnly` prop on an input to prevent modification of the input's value. Read-only inputs appear lighter (just like disabled inputs), but retain the standard cursor.\n\n``` jsx\n<Form.Control type=\"text\" placeholder=\"Readonly input here...\" readOnly />\n```\n\n### Readonly plain text\n\nIf you want to have readonly elements in your form styled as plain text, use the `plaintext` prop on FormControls to remove the default form field styling and preserve the correct margin and padding.\n\n``` jsx\n<Form>\n  <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n    <Form.Label column sm=\"2\">\n      Email\n    </Form.Label>\n    <Col sm=\"10\">\n      <Form.Control plaintext readOnly defaultValue=\"email@example.com\" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n    <Form.Label column sm=\"2\">\n      Password\n    </Form.Label>\n    <Col sm=\"10\">\n      <Form.Control type=\"password\" placeholder=\"Password\" />\n    </Col>\n  </Form.Group>\n</Form>\n```\n\n## Range Inputs\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"formBasicRange\">\n    <Form.Label>Range</Form.Label>\n    <Form.Control type=\"range\" />\n  </Form.Group>\n</Form>\n```\n\n## Checkboxes and Radios\n\nFor the non-textual checkbox and radio controls, `FormCheck` provides a single component for both types that adds some additional styling and improved layout.\n\n### Default (stacked)\n\nBy default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with FormCheck.\n\n``` jsx\n<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`default-${type}`} className=\"mb-3\">\n      <Form.Check \n        type={type}\n        id={`default-${type}`}\n        label={`default ${type}`}\n      />\n\n      <Form.Check\n        disabled\n        type={type}\n        label={`disabled ${type}`}\n        id={`disabled-default-${type}`}\n      />\n    </div>\n  ))}\n</Form>\n```\n\n### Inline\n\nGroup checkboxes or radios on the same horizontal row by adding the `inline` prop.\n\n``` jsx\n<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`inline-${type}`} className=\"mb-3\">\n      <Form.Check inline label=\"1\" type={type} id={`inline-${type}-1`} />\n      <Form.Check inline label=\"2\" type={type} id={`inline-${type}-2`} />\n      <Form.Check\n        inline\n        disabled\n        label=\"3 (disabled)\"\n        type={type}\n        id={`inline-${type}-3`}\n      />\n    </div>\n  ))}\n</Form>\n```\n\n### Without labels\n\nWhen you render a FormCheck without a label (no `children`) some additional styling is applied to keep the inputs from collapsing. **Remember to add an `aria-label` when omitting labels!**\n\n``` jsx\n<>\n  <Form.Check aria-label=\"option 1\" />\n  <Form.Check type=\"radio\" aria-label=\"radio 1\" />\n</>\n```\n\n### Customizing FormCheck rendering\n\nWhen you need tighter control, or want to customize how the `FormCheck` component renders, it may better to use it's constituent parts directly.\n\nBy provided `children` to the `FormCheck` you can forgo the default rendering and handle it yourself. (You can still provide an `id` to the `FormCheck` or `FormGroup` and have it propagate to the label and input).\n\n``` jsx\n<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={type} className=\"mb-3\">\n      <Form.Check type={type} id={`check-api-${type}`}>\n        <Form.Check.Input type={type} isValid />\n        <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\n        <Form.Control.Feedback type=\"valid\">You did it!</Form.Control.Feedback>\n      </Form.Check>\n    </div>\n  ))}\n</Form>\n```\n\n## Layout\n\nFormControl and FormCheck both apply `display: block` with `width: 100%` to controls, which means they stack vertically by default. Additional components and props can be used to vary this layout on a per-form basis.\n\n### Form groups\n\nThe `FormGroup` component is the easiest way to add some structure to forms. It provides a flexible container for grouping of labels, controls, optional help text, and form validation messaging. By default it only applies margin-bottom, but it picks up additional styles in `<Form inline >` as needed. Use it with `fieldset`s, `div`s, or nearly any other element.\n\nYou also add the `controlId` prop to accessibly wire the nested label and input together via the `id`.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"formGroupEmail\">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\" />\n  </Form.Group>\n  <Form.Group controlId=\"formGroupPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\" />\n  </Form.Group>\n</Form>\n```\n\n### Form grid\n\nMore complex forms can be built using the grid components. Use these for form layouts that require multiple columns, varied widths, and additional alignment options.\n\n``` jsx\n<Form>\n  <Row>\n    <Col>\n      <Form.Control placeholder=\"First name\" />\n    </Col>\n    <Col>\n      <Form.Control placeholder=\"Last name\" />\n    </Col>\n  </Row>\n</Form>\n```\n\n#### Form row\n\nYou may also swap `<Row>` for `<Form.Row>`, a variation of the standard grid row that overrides the default column gutters for tighter and more compact layouts.\n\n``` jsx\n<Form>\n  <Form.Row>\n    <Col>\n      <Form.Control placeholder=\"First name\" />\n    </Col>\n    <Col>\n      <Form.Control placeholder=\"Last name\" />\n    </Col>\n  </Form.Row>\n</Form>\n```\n\nMore complex layouts can also be created with the grid system.\n\n``` jsx\n<Form>\n  <Form.Row>\n    <Form.Group as={Col} controlId=\"formGridEmail\">\n      <Form.Label>Email</Form.Label>\n      <Form.Control type=\"email\" placeholder=\"Enter email\" />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridPassword\">\n      <Form.Label>Password</Form.Label>\n      <Form.Control type=\"password\" placeholder=\"Password\" />\n    </Form.Group>\n  </Form.Row>\n\n  <Form.Group controlId=\"formGridAddress1\">\n    <Form.Label>Address</Form.Label>\n    <Form.Control placeholder=\"1234 Main St\" />\n  </Form.Group>\n\n  <Form.Group controlId=\"formGridAddress2\">\n    <Form.Label>Address 2</Form.Label>\n    <Form.Control placeholder=\"Apartment, studio, or floor\" />\n  </Form.Group>\n\n  <Form.Row>\n    <Form.Group as={Col} controlId=\"formGridCity\">\n      <Form.Label>City</Form.Label>\n      <Form.Control />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridState\">\n      <Form.Label>State</Form.Label>\n      <Form.Control as=\"select\" defaultValue=\"Choose...\">\n        <option>Choose...</option>\n        <option>...</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridZip\">\n      <Form.Label>Zip</Form.Label>\n      <Form.Control />\n    </Form.Group>\n  </Form.Row>\n\n  <Form.Group id=\"formGridCheckbox\">\n    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n  </Form.Group>\n\n  <Button variant=\"primary\" type=\"submit\">\n    Submit\n  </Button>\n</Form>\n```\n\n#### Horizontal form\n\nYou may also swap `<Row>` for `<Form.Row>`, a variation of the standard grid row that overrides the default column gutters for tighter and more compact layouts.\n\n``` jsx\n<Form>\n  <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n    <Form.Label column sm={2}>\n      Email\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type=\"email\" placeholder=\"Email\" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n    <Form.Label column sm={2}>\n      Password\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type=\"password\" placeholder=\"Password\" />\n    </Col>\n  </Form.Group>\n  <fieldset>\n    <Form.Group as={Row}>\n      <Form.Label as=\"legend\" column sm={2}>\n        Radios\n      </Form.Label>\n      <Col sm={10}>\n        <Form.Check\n          type=\"radio\"\n          label=\"first radio\"\n          name=\"formHorizontalRadios\"\n          id=\"formHorizontalRadios1\"\n        />\n        <Form.Check\n          type=\"radio\"\n          label=\"second radio\"\n          name=\"formHorizontalRadios\"\n          id=\"formHorizontalRadios2\"\n        />\n        <Form.Check\n          type=\"radio\"\n          label=\"third radio\"\n          name=\"formHorizontalRadios\"\n          id=\"formHorizontalRadios3\"\n        />\n      </Col>\n    </Form.Group>\n  </fieldset>\n  <Form.Group as={Row} controlId=\"formHorizontalCheck\">\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Form.Check label=\"Remember me\" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row}>\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Button type=\"submit\">Sign in</Button>\n    </Col>\n  </Form.Group>\n</Form>\n```\n\n#### Horizontal form label sizing\n\nYou can size the `<FormLabel>` using the column prop as shown.\n\n``` jsx\n<Form.Group>\n  <Form.Row>\n    <Form.Label column=\"lg\" lg={2}>\n      Large Text\n    </Form.Label>\n    <Col>\n      <Form.Control size=\"lg\" type=\"text\" placeholder=\"Large text\" />\n    </Col>\n  </Form.Row>\n  <br />\n  <Form.Row>\n    <Form.Label column lg={2}>\n      Normal Text\n    </Form.Label>\n    <Col>\n      <Form.Control type=\"text\" placeholder=\"Normal text\" />\n    </Col>\n  </Form.Row>\n  <br />\n  <Form.Row>\n    <Form.Label column=\"sm\" lg={2}>\n      Small Text\n    </Form.Label>\n    <Col>\n      <Form.Control size=\"sm\" type=\"text\" placeholder=\"Small text\" />\n    </Col>\n  </Form.Row>\n</Form.Group>\n```\n\n#### Column sizing\n\nAs shown in the previous examples, our grid system allows you to place any number of `<Col>`s within a `<Row>` or `<Form.Row>`. They'll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining `<Col>`s equally split the rest, with specific column classes like `<Col xs={7}>`.\n\n``` jsx\n<Form>\n  <Form.Row>\n    <Col xs={7}>\n      <Form.Control placeholder=\"City\" />\n    </Col>\n    <Col>\n      <Form.Control placeholder=\"State\" />\n    </Col>\n    <Col>\n      <Form.Control placeholder=\"Zip\" />\n    </Col>\n  </Form.Row>\n</Form>\n```\n\n#### Auto-sizing\n\nThe example below uses a flexbox utility to vertically center the contents and changes `<Col>` to `<Col xs=\"auto\">` so that your columns only take up as much space as needed. Put another way, the column sizes itself based on on the contents.\n\n``` jsx\n<Form>\n  <Form.Row className=\"align-items-center\">\n    <Col xs=\"auto\">\n      <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n        Name\n      </Form.Label>\n      <Form.Control\n        className=\"mb-2\"\n        id=\"inlineFormInput\"\n        placeholder=\"Jane Doe\"\n      />\n    </Col>\n    <Col xs=\"auto\">\n      <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n        Username\n      </Form.Label>\n      <InputGroup className=\"mb-2\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>@</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n      </InputGroup>\n    </Col>\n    <Col xs=\"auto\">\n      <Form.Check\n        type=\"checkbox\"\n        id=\"autoSizingCheck\"\n        className=\"mb-2\"\n        label=\"Remember me\"\n      />\n    </Col>\n    <Col xs=\"auto\">\n      <Button type=\"submit\" className=\"mb-2\">\n        Submit\n      </Button>\n    </Col>\n  </Form.Row>\n</Form>\n```\n\nYou can then remix that once again with size-specific column classes.\n\n``` jsx\n<Form>\n  <Form.Row className=\"align-items-center\">\n    <Col sm={3} className=\"my-1\">\n      <Form.Label htmlFor=\"inlineFormInputName\" srOnly>\n        Name\n      </Form.Label>\n      <Form.Control id=\"inlineFormInputName\" placeholder=\"Jane Doe\" />\n    </Col>\n    <Col sm={3} className=\"my-1\">\n      <Form.Label htmlFor=\"inlineFormInputGroupUsername\" srOnly>\n        Username\n      </Form.Label>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>@</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl id=\"inlineFormInputGroupUsername\" placeholder=\"Username\" />\n      </InputGroup>\n    </Col>\n    <Col xs=\"auto\" className=\"my-1\">\n      <Form.Check type=\"checkbox\" id=\"autoSizingCheck2\" label=\"Remember me\" />\n    </Col>\n    <Col xs=\"auto\" className=\"my-1\">\n      <Button type=\"submit\">Submit</Button>\n    </Col>\n  </Form.Row>\n</Form>\n```\n\nAnd of course [custom form controls](#forms-custom) are supported.\n\n``` jsx\n<Form>\n  <Form.Row className=\"align-items-center\">\n    <Col xs=\"auto\" className=\"my-1\">\n      <Form.Label className=\"mr-sm-2\" htmlFor=\"inlineFormCustomSelect\" srOnly>\n        Preference\n      </Form.Label>\n      <Form.Control\n        as=\"select\"\n        className=\"mr-sm-2\"\n        id=\"inlineFormCustomSelect\"\n        custom\n      >\n        <option value=\"0\">Choose...</option>\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </Form.Control>\n    </Col>\n    <Col xs=\"auto\" className=\"my-1\">\n      <Form.Check\n        type=\"checkbox\"\n        id=\"customControlAutosizing\"\n        label=\"Remember my preference\"\n        custom\n      />\n    </Col>\n    <Col xs=\"auto\" className=\"my-1\">\n      <Button type=\"submit\">Submit</Button>\n    </Col>\n  </Form.Row>\n</Form>\n```\n\n### Inline forms\n\nUse the `inline` prop to display a series of labels, form controls, and buttons on a single horizontal row. Form controls within forms vary slightly from their default states.\n\n- Controls are `display: flex`, collapsing any HTML white space and allowing you to provide alignment control with spacing and utilities.\n- Controls and input groups receive `width: auto` to override the Bootstrap default `width: 100%`.\n- Controls **only appear inline in viewports that are at least 576px wide** to account for narrow viewports on mobile devices.\n\nYou may need to manually address the width and alignment of individual form controls with spacing utilities (as shown below). Lastly, be sure to always include a `<Form.Label>` with each form control, even if you need to hide it from non-screenreader visitors with the `srOnly` prop.\n\n``` jsx\n<Form inline>\n  <Form.Label htmlFor=\"inlineFormInputName2\" srOnly>\n    Name\n  </Form.Label>\n  <Form.Control\n    className=\"mb-2 mr-sm-2\"\n    id=\"inlineFormInputName2\"\n    placeholder=\"Jane Doe\"\n  />\n  <Form.Label htmlFor=\"inlineFormInputGroupUsername2\" srOnly>\n    Username\n  </Form.Label>\n  <InputGroup className=\"mb-2 mr-sm-2\">\n    <InputGroup.Prepend>\n      <InputGroup.Text>@</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl id=\"inlineFormInputGroupUsername2\" placeholder=\"Username\" />\n  </InputGroup>\n  <Form.Check\n    type=\"checkbox\"\n    className=\"mb-2 mr-sm-2\"\n    id=\"inlineFormCheck\"\n    label=\"Remember me\"\n  />\n  <Button type=\"submit\" className=\"mb-2\">\n    Submit\n  </Button>\n</Form>\n```\n\nCustom form controls and selects are also supported.\n\n``` jsx\n<Form inline>\n  <Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\n    Preference\n  </Form.Label>\n  <Form.Control\n    as=\"select\"\n    className=\"my-1 mr-sm-2\"\n    id=\"inlineFormCustomSelectPref\"\n    custom\n  >\n    <option value=\"0\">Choose...</option>\n    <option value=\"1\">One</option>\n    <option value=\"2\">Two</option>\n    <option value=\"3\">Three</option>\n  </Form.Control>\n  <Form.Check\n    type=\"checkbox\"\n    className=\"my-1 mr-sm-2\"\n    id=\"customControlInline\"\n    label=\"Remember my preference\"\n    custom\n  />\n  <Button type=\"submit\" className=\"my-1\">\n    Submit\n  </Button>\n</Form>\n```\n\n##### Alternatives to hidden labels\n\nAssistive technologies such as screen readers will have trouble with your forms if you don’t include a label for every input. For these inline forms, you can hide the labels using the `srOnly` prop. There are further alternative methods of providing a label for assistive technologies, such as the `aria-label`, `aria-labelledby` or `title` attribute. If none of these are present, assistive technologies may resort to using the `placeholder` attribute, if present, but note that use of `placeholder` as a replacement for other labelling methods is not advised.\n\n## Help text\n\nBlock-level help text in forms can be created using `<Form.Text>`. Inline help text can be flexibly implemented using any inline HTML element and utility classes like`.text-muted`.\n\n##### Associating help text with form controls\n\nHelp text should be explicitly associated with the form control it relates to using the `aria-describedby` attribute. This will ensure that assistive technologies—such as screen readers—will announce this help text when the user focuses or enters the control.\n\nHelp text below inputs can be styled with `<Form.Text>`. This component includes `display: block` and adds some top margin for easy spacing from the inputs above.\n\n``` jsx\n<>\n  <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n  <Form.Control\n    type=\"password\"\n    id=\"inputPassword5\"\n    aria-describedby=\"passwordHelpBlock\"\n  />\n  <Form.Text id=\"passwordHelpBlock\" muted>\n    Your password must be 8-20 characters long, contain letters and numbers, and\n    must not contain spaces, special characters, or emoji.\n  </Form.Text>\n</>\n```\n\nInline text can use any typical inline HTML element (be it a `<small>`, `<span>`, or something else) with nothing more than a utility class.\n\n``` jsx\n<Form inline>\n  <Form.Group>\n    <Form.Label htmlFor=\"inputPassword6\">Password</Form.Label>\n    <Form.Control\n      type=\"password\"\n      className=\"mx-sm-3\"\n      id=\"inputPassword6\"\n      aria-describedby=\"passwordHelpInline\"\n    />\n    <Form.Text id=\"passwordHelpInline\" muted>\n      Must be 8-20 characters long.\n    </Form.Text>\n  </Form.Group>\n</Form>\n```\n\n## Disabled forms\n\nAdd the `disabled` boolean attribute on an input to prevent user interactions and make it appear lighter.\n\n``` jsx\n<>\n  <Form.Group>\n    <Form.Label>Disabled input</Form.Label>\n    <Form.Control placeholder=\"Disabled input\" disabled />\n  </Form.Group>\n  <Form.Group>\n    <Form.Label>Disabled select menu</Form.Label>\n    <Form.Control as=\"select\" disabled>\n      <option>Disabled select</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group>\n    <Form.Check type=\"checkbox\" label=\"Can't check this\" disabled />\n  </Form.Group>\n</>\n```\n\nAdd the `disabled` attribute to a `<fieldset>` to disable all the controls within.\n\n``` jsx\n<Form>\n  <fieldset disabled>\n    <Form.Group>\n      <Form.Label htmlFor=\"disabledTextInput\">Disabled input</Form.Label>\n      <Form.Control id=\"disabledTextInput\" placeholder=\"Disabled input\" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Label htmlFor=\"disabledSelect\">Disabled select menu</Form.Label>\n      <Form.Control as=\"select\" id=\"disabledSelect\">\n        <option>Disabled select</option>\n      </Form.Control>\n    </Form.Group>\n    <Form.Group>\n      <Form.Check\n        type=\"checkbox\"\n        id=\"disabledFieldsetCheck\"\n        label=\"Can't check this\"\n      />\n    </Form.Group>\n    <Button type=\"submit\">Submit</Button>\n  </fieldset>\n</Form>\n```\n\n##### Caveat with anchors\n\nBy default, browsers will treat all native form controls (`<input>`, `<select>` and `<button>` elements) inside a `<fieldset disabled>` as disabled, preventing both keyboard and mouse interactions on them. However, if your form also includes `<a ... class=\"btn btn-*\">` elements, these will only be given a style of `pointer-events: none`. As noted in the section about [disabled state for buttons](../buttons/index#disabled-state) (and specifically in the sub-section for anchor elements), this CSS property is not yet standardized and isn’t fully supported in Internet Explorer 10, and won’t prevent keyboard users from being able to focus or activate these links. So to be safe, use custom JavaScript to disable such links.\n\n#### Cross-browser compatibility\n\nWhile Bootstrap will apply these styles in all browsers, Internet Explorer 11 and below don’t fully support the `disabled` attribute on a `<fieldset>`. Use custom JavaScript to disable the fieldset in these browsers.\n\n## Validation\n\nProvide valuable, actionable feedback to your users with form validation feedback.\n\n### Native HTML5 form validation\n\nFor native HTML form validation–[available in all our supported browsers](https://caniuse.com/#feat=form-validation), the `:valid` and `:invalid` pseudo selectors are used to apply validation styles as well as display feedback messages.\n\nBootstrap scopes the `:valid` and `:invalid` styles to parent `.was-validated` class, usually applied to the `<Form>` (you can use the `validated` prop as a shortcut). Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).\n\nWatch out! Browsers provide their own validation UI by default on `form`s. You can disable the default UI by adding the HTML `noValidate` attribute to your `<Form>` or `<form>` element.\n\n``` jsx\nfunction FormExample() {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n          <Form.Label>First name</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"First name\"\n            defaultValue=\"Mark\"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n          <Form.Label>Last name</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Last name\"\n            defaultValue=\"Otto\"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md=\"4\" controlId=\"validationCustomUsername\">\n          <Form.Label>Username</Form.Label>\n          <InputGroup hasValidation>\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Username\"\n              aria-describedby=\"inputGroupPrepend\"\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please choose a username.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Form.Group>\n      </Form.Row>\n      <Form.Row>\n        <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\n          <Form.Label>City</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"City\" required />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide a valid city.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n          <Form.Label>State</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"State\" required />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide a valid state.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md=\"3\" controlId=\"validationCustom05\">\n          <Form.Label>Zip</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Zip\" required />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide a valid zip.\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Form.Row>\n      <Form.Group>\n        <Form.Check\n          required\n          label=\"Agree to terms and conditions\"\n          feedback=\"You must agree before submitting.\"\n        />\n      </Form.Group>\n      <Button type=\"submit\">Submit form</Button>\n    </Form>\n  );\n}\n\nrender(<FormExample />);\n```\n\n### Form libraries and server-rendered styles\n\nIt's often beneficial (especially in React) to handle form validation via a library like Formik, or react-formal. In those cases, `isValid` and `isInvalid` props can be added to form controls to manually apply validation styles. Below is a quick example integrating with [Formik](https://github.com/jaredpalmer/formik).\n\n``` jsx\nconst { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required().oneOf([true], 'Terms must be accepted'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: 'Mark',\n        lastName: 'Otto',\n        username: '',\n        city: '',\n        state: '',\n        zip: '',\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormik01\">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"firstName\"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormik02\">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"lastName\"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername\">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"username\"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationFormik04\">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"State\"\n                name=\"state\"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationFormik05\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Zip\"\n                name=\"zip\"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n          <Form.Group>\n            <Form.Check\n              required\n              name=\"terms\"\n              label=\"Agree to terms and conditions\"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id=\"validationFormik0\"\n            />\n          </Form.Group>\n          <Button type=\"submit\">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n```\n\n### Tooltips\n\nIf your form layout allows it, you can use the `tooltip` prop to display validation feedback in a styled tooltip. Be sure to have a parent with `position: relative` on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\n\n``` jsx\nconst { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  file: yup.mixed().required(),\n  terms: yup.bool().required().oneOf([true], 'terms must be accepted'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: 'Mark',\n        lastName: 'Otto',\n        username: '',\n        city: '',\n        state: '',\n        zip: '',\n        file: null,\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormik101\">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"firstName\"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormik102\">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"lastName\"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername2\">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"username\"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type=\"invalid\" tooltip>\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik103\">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationFormik104\">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"State\"\n                name=\"state\"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationFormik105\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Zip\"\n                name=\"zip\"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n          <Form.Group>\n            <Form.File\n              className=\"position-relative\"\n              required\n              name=\"file\"\n              label=\"File\"\n              onChange={handleChange}\n              isInvalid={!!errors.file}\n              feedback={errors.file}\n              id=\"validationFormik107\"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              required\n              name=\"terms\"\n              label=\"Agree to terms and conditions\"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id=\"validationFormik106\"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Button type=\"submit\">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n```\n\n### Input group validation\n\nTo properly show rounded corners in an `<InputGroup>` with validation, the `<InputGroup>` requires the `hasValidation` prop.\n\n``` jsx\n<InputGroup hasValidation>\n  <InputGroup.Prepend>\n    <InputGroup.Text>@</InputGroup.Text>\n  </InputGroup.Prepend>\n  <Form.Control type=\"text\" required isInvalid />\n  <Form.Control.Feedback type=\"invalid\">\n    Please choose a username.\n  </Form.Control.Feedback>\n</InputGroup>\n```\n\n### Examples\n\n## Custom forms\n\nFor even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They’re built on top of semantic and accessible markup, so they’re solid replacements for any default form control.\n\n### Checkboxes and radios\n\nCustom checkbox and radio styles are achieved with a resourceful use of the `:checked` selector and `:after` pseudo elements, but are Structurally similar to the default `FormCheck`. By default the checked and indeterminate icons use embedded svg icons from [Open Iconic](https://useiconic.com/open).\n\nApply Bootstrap's custom elements by adding the `custom` prop.\n\n``` jsx\n<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`custom-${type}`} className=\"mb-3\">\n      <Form.Check \n        custom\n        type={type}\n        id={`custom-${type}`}\n        label={`Check this custom ${type}`}\n      />\n\n      <Form.Check\n        custom\n        disabled\n        type={type}\n        label={`disabled ${type}`}\n        id={`disabled-custom-${type}`}\n      />\n    </div>\n  ))}\n</Form>\n```\n\n### Switches\n\nA switch has the markup of a custom checkbox but uses `type=\"switch\"` to render a toggle switch. Switches also support the same customizable children as `<FormCheck>`.\n\n``` jsx\n<Form>\n  <Form.Check \n    type=\"switch\"\n    id=\"custom-switch\"\n    label=\"Check this switch\"\n  />\n  <Form.Check \n    disabled\n    type=\"switch\"\n    label=\"disabled switch\"\n    id=\"disabled-custom-switch\"\n  />\n</Form>\n```\n\nYou can also use the `<Form.Switch>` alias which encapsulates the above, in a very small component wrapper.\n\n##### Watch out!\n\nYou must specify an `id` when using custom check controls or switches. Event handlers are triggered by linking the label with the input via `id`.\n\n### Inline\n\n``` jsx\n<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`custom-inline-${type}`} className=\"mb-3\">\n      <Form.Check\n        custom\n        inline\n        label=\"1\"\n        type={type}\n        id={`custom-inline-${type}-1`}\n      />\n      <Form.Check\n        custom\n        inline\n        label=\"2\"\n        type={type}\n        id={`custom-inline-${type}-2`}\n      />\n      <Form.Check\n        custom\n        inline\n        disabled\n        label=\"3 (disabled)\"\n        type={type}\n        id={`custom-inline-${type}-3`}\n      />\n    </div>\n  ))}\n</Form>\n```\n\n### Select\n\nFor the `select` form control you can pass the `custom` prop to get custom styling of the select element. Custom styles are limited to the `select` initial appearance and cannot modify the `option` styling due to browser limitations.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"exampleForm.SelectCustom\">\n    <Form.Label>Custom select</Form.Label>\n    <Form.Control as=\"select\" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>\n```\n\n#### Sizing\n\nThe custom `select` element supports sizing.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\n    <Form.Label>Custom select Small</Form.Label>\n    <Form.Control as=\"select\" size=\"sm\" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId=\"exampleForm.SelectCustomSizeLg\">\n    <Form.Label>Custom select Large</Form.Label>\n    <Form.Control as=\"select\" size=\"lg\" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>\n```\n\n#### HTML size\n\nYou can also specify the visible options of your `select` element.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"exampleForm.SelectCustomHtmlSize\">\n    <Form.Label>Select with three visible options</Form.Label>\n    <Form.Control as=\"select\" htmlSize={3} custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>\n```\n\n### Range\n\nFor the `range` form control you can pass the `custom` prop to get custom styling of the select element. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only IE and Firefox support “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.\n\n``` jsx\n<Form>\n  <Form.Group controlId=\"formBasicRangeCustom\">\n    <Form.Label>Range</Form.Label>\n    <Form.Control type=\"range\" custom />\n  </Form.Group>\n</Form>\n```\n\n### File\n\nA custom styled File uploader.\n\nThe custom `FormFile` will by default not visibly display your selected file. This requires additional JS. The recommended plugin to animate custom file input is [bs-custom-file-input](https://www.npmjs.com/package/bs-custom-file-input).\n\n``` jsx\n<Form>\n  <Form.File \n    id=\"custom-file\"\n    label=\"Custom file input\"\n    custom\n  />\n</Form>\n```\n\n#### Translating or customizing the strings with HTML\n\nBootstrap also provides a way to translate the “Browse” text in HTML with the `data-browse` attribute which can be added to the custom input label (example in Dutch):\n\nNote that the `data-browse` attribute does not to anything unless the `custom` prop is set.\n\n``` jsx\n<Form>\n  <Form.File \n    id=\"custom-file-translate-html\"\n    label=\"Voeg je document toe\"\n    data-browse=\"Bestand kiezen\"\n    custom\n  />\n</Form>\n```\n\n#### Translating or customizing the strings with SCSS\n\nPlease refer to the official [Bootstrap documentation for translating via SCSS](https://getbootstrap.com/docs/4.4/components/forms/#translating-or-customizing-the-strings-with-scss). The `lang` prop can be used to pass the language.\n\n``` jsx\n<Form>\n  <Form.File \n    id=\"custom-file-translate-scss\"\n    label=\"Custom file input\"\n    lang=\"en\"\n    custom\n  />\n</Form>\n```\n\n#### Customizing FormFile rendering\n\nWhen you need tighter control, or want to customize how the `FormFile` component renders, it may be better to use it's constituent parts directly.\n\nBy providing `children` to the `FormFile` you can forgo the default rendering and handle it yourself. (You can still provide an `id` to the `FormFile` and have it propagate to the label and input).\n\nWhen customizing the `FormFile` rendering it is important to note the order of the `label` and `input` elements.\n\n- If you are not setting the `custom` prop the`label` should be before the `input`.\n- If you are setting the custom prop the `input` element has to be placed before the `label` or the `buttonText` prop will not work.\n\n``` jsx\n<Form>\n  <div className=\"mb-3\">\n    <Form.File id=\"formcheck-api-custom\" custom>\n      <Form.File.Input isValid />\n      <Form.File.Label data-browse=\"Button text\">\n        Custom file input\n      </Form.File.Label>\n      <Form.Control.Feedback type=\"valid\">You did it!</Form.Control.Feedback>\n    </Form.File>\n  </div>\n  <div className=\"mb-3\">\n    <Form.File id=\"formcheck-api-regular\">\n      <Form.File.Label>Regular file input</Form.File.Label>\n      <Form.File.Input />\n    </Form.File>\n  </div>\n</Form>\n```\n\n## API\n\n### Form\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### Form.Row\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### Form.Group\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### Form.Label\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### Form.Text\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### Form.Control\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### FormControl.Feedback\n\n`import`` FormControl ``from`` 'react-bootstrap/FormControl'`Copy import code for the FormControl component\n\n[TABLE]\n\n### Form.Check\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### FormCheck.Input\n\n`import`` FormCheck ``from`` 'react-bootstrap/FormCheck'`Copy import code for the FormCheck component\n\n[TABLE]\n\n### FormCheck.Label\n\n`import`` FormCheck ``from`` 'react-bootstrap/FormCheck'`Copy import code for the FormCheck component\n\n[TABLE]\n\n### Form.File\n\n`import`` Form ``from`` 'react-bootstrap/Form'`Copy import code for the Form component\n\n[TABLE]\n\n### FormFile.Input\n\n`import`` FormFile ``from`` 'react-bootstrap/FormFile'`Copy import code for the FormFile component\n\n[TABLE]\n\n### FormFile.Label\n\n`import`` FormFile ``from`` 'react-bootstrap/FormFile'`Copy import code for the FormFile component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/forms/](https://react-bootstrap.github.io/components/forms/)"
- name: Getting help
  id: getting-started/support/index
  summary: Stay up to date on the development of React-Bootstrap and reach out to the community with these helpful resources
  description: "# Getting help\n\nStay up to date on the development of React-Bootstrap and reach out to the community with these helpful resources.\n\n## Stack Overflow\n\n[Ask questions](http://stackoverflow.com/questions/ask) about specific problems you have faced, including details about what exactly you are trying to do. Make sure you tag your question with `react-bootstrap`. You can also read through [existing React-Bootstrap questions](http://stackoverflow.com/questions/tagged/react-bootstrap).\n\n## Chat rooms\n\nDiscuss questions in the `#react-bootstrap` channel on the [Reactiflux Discord](https://discord.gg/AKfs9vpvRW).\n\n## GitHub issues\n\nThe issue tracker is the preferred channel for bug reports, features requests and submitting pull requests. See more about how we use issues in the [contribution guidelines](https://github.com/react-bootstrap/react-bootstrap/blob/master/CONTRIBUTING.md#issues).\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/getting-started/support/](https://react-bootstrap.github.io/getting-started/support/)"
- name: Grid system
  id: layout/grid/index
  summary: Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content
  description: "# Grid system\n\nBootstrap’s grid system uses a series of containers, rows, and columns to layout and align content. It’s built with [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) and is fully responsive. Below is an example and an in-depth look at how the grid comes together.\n\n**New to or unfamiliar with flexbox?** [Read this CSS Tricks flexbox guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background) for background, terminology, guidelines, and code snippets.\n\n## Container\n\nContainers provide a means to center and horizontally pad your site’s contents. Use `Container` for a responsive pixel width.\n\n``` jsx\n<Container>\n  <Row>\n    <Col>1 of 1</Col>\n  </Row>\n</Container>\n```\n\n### Fluid Container\n\nYou can use `<Container fluid />` for width: 100% across all viewport and device sizes.\n\n``` jsx\n<Container fluid>\n  <Row>\n    <Col>1 of 1</Col>\n  </Row>\n</Container>\n```\n\nYou can set breakpoints for the `fluid` prop. Setting it to a breakpoint (`sm, md, lg, xl`) will set the `Container` as fluid until the specified breakpoint.\n\n``` jsx\n<Container fluid=\"md\">\n  <Row>\n    <Col>1 of 1</Col>\n  </Row>\n</Container>\n```\n\n## Auto-layout columns\n\nWhen no column widths are specified the `Col` component will render equal width columns\n\n``` jsx\n<Container>\n  <Row>\n    <Col>1 of 2</Col>\n    <Col>2 of 2</Col>\n  </Row>\n  <Row>\n    <Col>1 of 3</Col>\n    <Col>2 of 3</Col>\n    <Col>3 of 3</Col>\n  </Row>\n</Container>\n```\n\n### Setting one column width\n\nAuto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.\n\n``` jsx\n<Container>\n  <Row>\n    <Col>1 of 3</Col>\n    <Col xs={6}>2 of 3 (wider)</Col>\n    <Col>3 of 3</Col>\n  </Row>\n  <Row>\n    <Col>1 of 3</Col>\n    <Col xs={5}>2 of 3 (wider)</Col>\n    <Col>3 of 3</Col>\n  </Row>\n</Container>\n```\n\n### Variable width content\n\nSet the column value (for any breakpoint size) to `\"auto\"` to size columns based on the natural width of their content.\n\n``` jsx\n<Container>\n  <Row className=\"justify-content-md-center\">\n    <Col xs lg=\"2\">\n      1 of 3\n    </Col>\n    <Col md=\"auto\">Variable width content</Col>\n    <Col xs lg=\"2\">\n      3 of 3\n    </Col>\n  </Row>\n  <Row>\n    <Col>1 of 3</Col>\n    <Col md=\"auto\">Variable width content</Col>\n    <Col xs lg=\"2\">\n      3 of 3\n    </Col>\n  </Row>\n</Container>\n```\n\n## Responsive grids\n\nThe `Col` lets you specify column widths across 5 breakpoint sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify the amount of columns to span, or set the prop to `<Col lg={true} />` for auto layout widths.\n\n``` jsx\n<Container>\n  <Row>\n    <Col sm={8}>sm=8</Col>\n    <Col sm={4}>sm=4</Col>\n  </Row>\n  <Row>\n    <Col sm>sm=true</Col>\n    <Col sm>sm=true</Col>\n    <Col sm>sm=true</Col>\n  </Row>\n</Container>\n```\n\nYou can also mix and match breakpoints to create different grids depending on the screen size.\n\n``` jsx\n<Container>\n  {/* Stack the columns on mobile by making one full-width and the other half-width */}\n  <Row>\n    <Col xs={12} md={8}>\n      xs=12 md=8\n    </Col>\n    <Col xs={6} md={4}>\n      xs=6 md=4\n    </Col>\n  </Row>\n\n  {/* Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop */}\n  <Row>\n    <Col xs={6} md={4}>\n      xs=6 md=4\n    </Col>\n    <Col xs={6} md={4}>\n      xs=6 md=4\n    </Col>\n    <Col xs={6} md={4}>\n      xs=6 md=4\n    </Col>\n  </Row>\n\n  {/* Columns are always 50% wide, on mobile and desktop */}\n  <Row>\n    <Col xs={6}>xs=6</Col>\n    <Col xs={6}>xs=6</Col>\n  </Row>\n</Container>\n```\n\nThe `Col` breakpoint props also have a more complicated `object` prop form: `{span: number, order: number, offset: number}` for specifying offsets and ordering effects.\n\nYou can use the `order` property to control the **visual order** of your content.\n\n``` jsx\n<Container>\n  <Row>\n    <Col xs>First, but unordered</Col>\n    <Col xs={{ order: 12 }}>Second, but last</Col>\n    <Col xs={{ order: 1 }}>Third, but second</Col>\n  </Row>\n</Container>\n```\n\nThe `order` property also supports `first` (`order: -1`) and `last` (`order: $columns+1`).\n\n``` jsx\n<Container>\n  <Row>\n    <Col xs={{ order: 'last' }}>First, but last</Col>\n    <Col xs>Second, but unordered</Col>\n    <Col xs={{ order: 'first' }}>Third, but first</Col>\n  </Row>\n</Container>\n```\n\nFor offsetting grid columns you can set an `offset` value or for a more general layout, use the margin class utilities.\n\n``` jsx\n<Container>\n  <Row>\n    <Col md={4}>md=4</Col>\n    <Col md={{ span: 4, offset: 4 }}>{`md={{ span: 4, offset: 4 }}`}</Col>\n  </Row>\n  <Row>\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\n  </Row>\n  <Row>\n    <Col md={{ span: 6, offset: 3 }}>{`md={{ span: 6, offset: 3 }}`}</Col>\n  </Row>\n</Container>\n```\n\n### Setting column widths in Row\n\nThe `Row` lets you specify column widths across 5 breakpoint sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify the amount of columns that will fit next to each other.\n\n``` jsx\n<Container>\n  <Row xs={2} md={4} lg={6}>\n    <Col>1 of 2</Col>\n    <Col>2 of 2</Col>\n  </Row>\n  <Row xs={1} md={2}>\n    <Col>1 of 3</Col>\n    <Col>2 of 3</Col>\n    <Col>3 of 3</Col>\n  </Row>\n</Container>\n```\n\nNote that `Row` column widths will override `Col` widths set on lower breakpoints when viewed on larger screens. The `<Col xs={6} />` size will be overriden by `<Row md={4} />` on medium and larger screens.\n\n``` jsx\n<Container>\n  <Row md={4}>\n    <Col>1 of 3</Col>\n    <Col xs={6}>2 of 3</Col>\n    <Col>3 of 3</Col>\n  </Row>\n</Container>\n```\n\n## API\n\n### Container\n\n`import`` Container ``from`` 'react-bootstrap/Container'`Copy import code for the Container component\n\n[TABLE]\n\n### Row\n\n`import`` Row ``from`` 'react-bootstrap/Row'`Copy import code for the Row component\n\n[TABLE]\n\n### Col\n\n`import`` Col ``from`` 'react-bootstrap/Col'`Copy import code for the Col component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/layout/grid/](https://react-bootstrap.github.io/layout/grid/)"
- name: Images
  id: components/images/index
  summary: Use the rounded, roundedCircle and thumbnail props to customise the image
  description: "# Images\n\n## Shape\n\nUse the `rounded`, `roundedCircle` and `thumbnail` props to customise the image.\n\n``` jsx\n<Container>\n  <Row>\n    <Col xs={6} md={4}>\n      <Image src=\"holder.js/171x180\" rounded />\n    </Col>\n    <Col xs={6} md={4}>\n      <Image src=\"holder.js/171x180\" roundedCircle />\n    </Col>\n    <Col xs={6} md={4}>\n      <Image src=\"holder.js/171x180\" thumbnail />\n    </Col>\n  </Row>\n</Container>\n```\n\n## Fluid\n\nUse the `fluid` to scale image nicely to the parent element.\n\n``` jsx\n<Image src=\"holder.js/100px250\" fluid />\n```\n\n## API\n\n### Image\n\n`import`` Image ``from`` 'react-bootstrap/Image'`Copy import code for the Image component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/images/](https://react-bootstrap.github.io/components/images/)"
- name: InputGroup
  id: components/input-group/index
  summary: Place one add-on or button on either side of an input
  description: "# InputGroup\n\nPlace one add-on or button on either side of an input. You may also place one on both sides of an input. Remember to place `<label>`s outside the input group.\n\n``` jsx\n<div>\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl\n      placeholder=\"Username\"\n      aria-label=\"Username\"\n      aria-describedby=\"basic-addon1\"\n    />\n  </InputGroup>\n\n  <InputGroup className=\"mb-3\">\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n    />\n    <InputGroup.Append>\n      <InputGroup.Text id=\"basic-addon2\">@example.com</InputGroup.Text>\n    </InputGroup.Append>\n  </InputGroup>\n\n  <label htmlFor=\"basic-url\">Your vanity URL</label>\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"basic-addon3\">\n        https://example.com/users/\n      </InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl id=\"basic-url\" aria-describedby=\"basic-addon3\" />\n  </InputGroup>\n\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text>$</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"Amount (to the nearest dollar)\" />\n    <InputGroup.Append>\n      <InputGroup.Text>.00</InputGroup.Text>\n    </InputGroup.Append>\n  </InputGroup>\n\n  <InputGroup>\n    <InputGroup.Prepend>\n      <InputGroup.Text>With textarea</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl as=\"textarea\" aria-label=\"With textarea\" />\n  </InputGroup>\n</div>\n```\n\n## Sizing\n\nAdd the relative form sizing classes to the `InputGroup` and contents within will automatically resize—no need for repeating the form control size classes on each element.\n\n``` jsx\n<div>\n  <InputGroup size=\"sm\" className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"inputGroup-sizing-sm\">Small</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n  </InputGroup>\n  <br />\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"inputGroup-sizing-default\">Default</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl\n      aria-label=\"Default\"\n      aria-describedby=\"inputGroup-sizing-default\"\n    />\n  </InputGroup>\n  <br />\n  <InputGroup size=\"lg\">\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"inputGroup-sizing-lg\">Large</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" />\n  </InputGroup>\n</div>\n```\n\n## Checkboxes and radios\n\nUse the `InputGroup.Radio` or `InputGroup.Checkbox` to add options to an input group.\n\n``` jsx\n<div>\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"Text input with checkbox\" />\n  </InputGroup>\n  <InputGroup>\n    <InputGroup.Prepend>\n      <InputGroup.Radio aria-label=\"Radio button for following text input\" />\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"Text input with radio button\" />\n  </InputGroup>\n</div>\n```\n\n## Multiple inputs\n\nWhile multiple inputs are supported visually, validation styles are only available for input groups with a single input.\n\n``` jsx\n<InputGroup className=\"mb-3\">\n  <InputGroup.Prepend>\n    <InputGroup.Text>First and last name</InputGroup.Text>\n  </InputGroup.Prepend>\n  <FormControl />\n  <FormControl />\n</InputGroup>\n```\n\n## Multiple addons\n\nMultiple add-ons are supported and can be mixed\n\n``` jsx\n<div>\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text>$</InputGroup.Text>\n      <InputGroup.Text>0.00</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Amount (to the nearest dollar)\"\n    />\n  </InputGroup>\n  <InputGroup className=\"mb-3\">\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Amount (to the nearest dollar)\"\n    />\n    <InputGroup.Append>\n      <InputGroup.Text>$</InputGroup.Text>\n      <InputGroup.Text>0.00</InputGroup.Text>\n    </InputGroup.Append>\n  </InputGroup>\n</div>\n```\n\n## Button addons\n\n``` jsx\n<div>\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <Button variant=\"outline-secondary\">Button</Button>\n    </InputGroup.Prepend>\n    <FormControl aria-describedby=\"basic-addon1\" />\n  </InputGroup>\n\n  <InputGroup className=\"mb-3\">\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n    />\n    <InputGroup.Append>\n      <Button variant=\"outline-secondary\">Button</Button>\n    </InputGroup.Append>\n  </InputGroup>\n\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <Button variant=\"outline-secondary\">Button</Button>\n      <Button variant=\"outline-secondary\">Button</Button>\n    </InputGroup.Prepend>\n    <FormControl aria-describedby=\"basic-addon1\" />\n  </InputGroup>\n\n  <InputGroup>\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n    />\n    <InputGroup.Append>\n      <Button variant=\"outline-secondary\">Button</Button>\n      <Button variant=\"outline-secondary\">Button</Button>\n    </InputGroup.Append>\n  </InputGroup>\n</div>\n```\n\n## Buttons with Dropdowns\n\n``` jsx\n<>\n  <InputGroup className=\"mb-3\">\n    <DropdownButton\n      as={InputGroup.Prepend}\n      variant=\"outline-secondary\"\n      title=\"Dropdown\"\n      id=\"input-group-dropdown-1\"\n    >\n      <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n      <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n      <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n    </DropdownButton>\n    <FormControl aria-describedby=\"basic-addon1\" />\n  </InputGroup>\n\n  <InputGroup>\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n    />\n\n    <DropdownButton\n      as={InputGroup.Append}\n      variant=\"outline-secondary\"\n      title=\"Dropdown\"\n      id=\"input-group-dropdown-2\"\n    >\n      <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n      <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n      <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n    </DropdownButton>\n  </InputGroup>\n</>\n```\n\n## API\n\n### InputGroup\n\n`import`` InputGroup ``from`` 'react-bootstrap/InputGroup'`Copy import code for the InputGroup component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/input-group/](https://react-bootstrap.github.io/components/input-group/)"
- name: Introduction
  id: getting-started/introduction/index
  summary: The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer)
  description: "# Introduction\n\nLearn how to include React Bootstrap in your project\n\n## Installation\n\nThe best way to consume React-Bootstrap is via the npm package which you can install with `npm` (or `yarn` if you prefer).\n\nIf you plan on customizing the Bootstrap Sass files, or don't want to use a CDN for the stylesheet, it may be helpful to install [vanilla Bootstrap](https://getbootstrap.com/docs/4.6/getting-started/download/#npm) as well.\n\n    npm install react-bootstrap bootstrap\n\n## Importing Components\n\nYou should import individual components like: `react-bootstrap/Button` rather than the entire library. Doing so pulls in only the specific components that you use, which can significantly reduce the amount of code you end up sending to the client.\n\n    import Button from 'react-bootstrap/Button';\n\n    // or less ideally\n    import { Button } from 'react-bootstrap';\n\n### Browser globals\n\nWe provide `react-bootstrap.js` and `react-bootstrap.min.js` bundles with all components exported on the `window.ReactBootstrap` object. These bundles are available on [unpkg](https://unpkg.com/react-bootstrap/), as well as in the npm package.\n\n    <script src=\"https://unpkg.com/react/umd/react.production.min.js\" crossorigin></script>\n\n    <script\n      src=\"https://unpkg.com/react-dom/umd/react-dom.production.min.js\"\n      crossorigin></script>\n\n    <script\n      src=\"https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js\"\n      crossorigin></script>\n\n    <script>var Alert = ReactBootstrap.Alert;</script>\n\n## Examples\n\nReact-Bootstrap has started a repo with a few basic CodeSandbox examples. [Click here](https://github.com/react-bootstrap/code-sandbox-examples/blob/master/README.md) to check them out.\n\n## Stylesheets\n\nBecause React-Bootstrap doesn't depend on a very precise version of Bootstrap, we don't ship with any included CSS. However, some stylesheet **is required** to use these components.\n\n### CSS\n\n    {/* The following line can be included in your src/index.js or App.js file*/}\n\n    import 'bootstrap/dist/css/bootstrap.min.css';\n\nHow and which Bootstrap styles you include is up to you, but the simplest way is to include the latest styles from the CDN. A little more information about the benefits of using a CDN can be found [here](https://www.w3schools.com/bootstrap/bootstrap_get_started.asp).\n\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/css/bootstrap.min.css\"\n      integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\n      crossorigin=\"anonymous\"\n    />\n\n### Sass\n\nIn case you are using **Sass** the simplest way is to include the Bootstrap’s source Sass files in your main Sass file and then require it on your `src/index.js` or `App.js` file. This applies to a typical `create-react-app` application in other use cases you might have to setup the bundler of your choice to compile Sass/SCSS stylesheets to CSS.\n\n    /* The following line can be included in a src/App.scss */\n\n    @import \"~bootstrap/scss/bootstrap\";\n\n    /* The following line can be included in your src/index.js or App.js file */\n\n    import './App.scss';\n\n#### Customize Bootstrap\n\nIf you wish to customize the Bootstrap theme or any Bootstrap variables you can create a custom Sass file:\n\n    /* The following block can be included in a custom.scss */\n\n    /* make the customizations */\n    $theme-colors: (\n        \"info\": tomato,\n        \"danger\": teal\n    );\n\n    /* import bootstrap to set changes */\n    @import \"~bootstrap/scss/bootstrap\";\n\n... And import it on the main Sass file.\n\n    /* The following line can be included in a src/App.scss */\n\n    @import \"custom\";\n\n### Advanced usage\n\nSee [the Bootstrap docs](https://getbootstrap.com/docs/4.4/getting-started/theming/) for more advanced use cases and details about customizing stylesheets.\n\n## Themes\n\nReact-Bootstrap is compatible with existing Bootstrap themes. Just follow the installation instructions for your theme of choice.\n\nBecause React-Bootstrap completely reimplements Bootstrap's JavaScript, it's not automatically compatible with themes that extend the default JavaScript behaviors.\n\nIf you would like to add a custom theme on your app using Create React App, they have additional documentation for Create React App and Bootstrap [here](https://facebook.github.io/create-react-app/docs/adding-bootstrap#using-a-custom-theme)\n\n## Browser support\n\nWe aim to support all browsers supported by both [React](http://facebook.github.io/react/docs/working-with-the-browser.html#browser-support-and-polyfills) and [Bootstrap](https://getbootstrap.com/docs/4.6/getting-started/browsers-devices/#supported-browsers).\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/getting-started/introduction/](https://react-bootstrap.github.io/getting-started/introduction/)"
- name: Jumbotron
  id: components/jumbotron/index
  summary: A lightweight, flexible component that can optionally extend the entire viewport to showcase key content on your site
  description: "# Jumbotron\n\nA lightweight, flexible component that can optionally extend the entire viewport to showcase key content on your site.\n\n``` jsx\n<Jumbotron>\n  <h1>Hello, world!</h1>\n  <p>\n    This is a simple hero unit, a simple jumbotron-style component for calling\n    extra attention to featured content or information.\n  </p>\n  <p>\n    <Button variant=\"primary\">Learn more</Button>\n  </p>\n</Jumbotron>\n```\n\n``` jsx\n<Jumbotron fluid>\n  <Container>\n    <h1>Fluid jumbotron</h1>\n    <p>\n      This is a modified jumbotron that occupies the entire horizontal space of\n      its parent.\n    </p>\n  </Container>\n</Jumbotron>\n```\n\n## API\n\n### Jumbotron\n\n`import`` Jumbotron ``from`` 'react-bootstrap/Jumbotron'`Copy import code for the Jumbotron component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/jumbotron/](https://react-bootstrap.github.io/components/jumbotron/)"
- name: List groups
  id: components/list-group/index
  summary: List groups are a flexible and powerful component for displaying a series of content
  description: "# List groups\n\nList groups are a flexible and powerful component for displaying a series of content. Modify and extend them to support just about any content within.\n\n## Basic Example\n\n``` jsx\n<ListGroup>\n  <ListGroup.Item>Cras justo odio</ListGroup.Item>\n  <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n  <ListGroup.Item>Morbi leo risus</ListGroup.Item>\n  <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\n  <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n</ListGroup>\n```\n\n### Active items\n\nSet the `active` prop to indicate the list groups current active selection.\n\n``` jsx\n<ListGroup as=\"ul\">\n  <ListGroup.Item as=\"li\" active>\n    Cras justo odio\n  </ListGroup.Item>\n  <ListGroup.Item as=\"li\">Dapibus ac facilisis in</ListGroup.Item>\n  <ListGroup.Item as=\"li\" disabled>\n    Morbi leo risus\n  </ListGroup.Item>\n  <ListGroup.Item as=\"li\">Porta ac consectetur ac</ListGroup.Item>\n</ListGroup>\n```\n\n### Disabled items\n\nSet the `disabled` prop to prevent actions on a `<ListGroup.Item>`. For elements that aren't naturally disable-able (like anchors) `onClick` handlers are added that call `preventDefault` to mimick disabled behavior.\n\n``` jsx\n<ListGroup>\n  <ListGroup.Item disabled>Cras justo odio</ListGroup.Item>\n  <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n  <ListGroup.Item>Morbi leo risus</ListGroup.Item>\n  <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\n</ListGroup>\n```\n\n### Actionable items\n\nToggle the `action` prop to create *actionable* list group items, with disabled, hover and active styles. List item actions will render a `<button>` or `<a>` (depending on the presence of an `href`) by default but can be overridden by setting the `as` prop as usual.\n\nList items `actions` are distinct from plain items to ensure that click or tap affordances aren't applied to non-interactive items.\n\n``` jsx\nfunction alertClicked() {\n  alert('You clicked the third ListGroupItem');\n}\n\nrender(\n  <ListGroup defaultActiveKey=\"#link1\">\n    <ListGroup.Item action href=\"#link1\">\n      Link 1\n    </ListGroup.Item>\n    <ListGroup.Item action href=\"#link2\" disabled>\n      Link 2\n    </ListGroup.Item>\n    <ListGroup.Item action onClick={alertClicked}>\n      This one is a button\n    </ListGroup.Item>\n  </ListGroup>,\n);\n```\n\n### Flush\n\nAdd the `flush` variant to remove outer borders and rounded corners to render list group items edge-to-edge in a parent container [such as a `Card`](../cards/index#list-groups).\n\n``` jsx\n<ListGroup variant=\"flush\">\n  <ListGroup.Item>Cras justo odio</ListGroup.Item>\n  <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n  <ListGroup.Item>Morbi leo risus</ListGroup.Item>\n  <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\n</ListGroup>\n```\n\n### Horizontal\n\nUse the `horizontal` prop to make the ListGroup render horizontally. Currently **horizontal list groups cannot be combined with flush list groups.**\n\n``` jsx\n<ListGroup horizontal>\n  <ListGroup.Item>This</ListGroup.Item>\n  <ListGroup.Item>ListGroup</ListGroup.Item>\n  <ListGroup.Item>renders</ListGroup.Item>\n  <ListGroup.Item>horizontally!</ListGroup.Item>\n</ListGroup>\n```\n\nThere are responsive variants to `horizontal`: setting it to `{sm|md|lg|xl}` makes the list group horizontal starting at that breakpoint’s `min-width`.\n\n``` jsx\n['sm', 'md', 'lg', 'xl'].map((breakpoint, idx) => (\n  <ListGroup horizontal={breakpoint} className=\"my-2\" key={idx}>\n    <ListGroup.Item>This ListGroup</ListGroup.Item>\n    <ListGroup.Item>renders horizontally</ListGroup.Item>\n    <ListGroup.Item>on {breakpoint}</ListGroup.Item>\n    <ListGroup.Item>and above!</ListGroup.Item>\n  </ListGroup>\n));\n```\n\n### Contextual classes\n\nUse contextual variants on `<ListGroup.Item>`s to style them with a stateful background and color.\n\n``` jsx\n<ListGroup>\n  <ListGroup.Item>No style</ListGroup.Item>\n  <ListGroup.Item variant=\"primary\">Primary</ListGroup.Item>\n  <ListGroup.Item variant=\"secondary\">Secondary</ListGroup.Item>\n  <ListGroup.Item variant=\"success\">Success</ListGroup.Item>\n  <ListGroup.Item variant=\"danger\">Danger</ListGroup.Item>\n  <ListGroup.Item variant=\"warning\">Warning</ListGroup.Item>\n  <ListGroup.Item variant=\"info\">Info</ListGroup.Item>\n  <ListGroup.Item variant=\"light\">Light</ListGroup.Item>\n  <ListGroup.Item variant=\"dark\">Dark</ListGroup.Item>\n</ListGroup>\n```\n\nWhen paired with `action`s, additional hover and active styles apply.\n\n``` jsx\n<ListGroup>\n  <ListGroup.Item>No style</ListGroup.Item>\n  <ListGroup.Item variant=\"primary\">Primary</ListGroup.Item>\n  <ListGroup.Item action variant=\"secondary\">\n    Secondary\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"success\">\n    Success\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"danger\">\n    Danger\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"warning\">\n    Warning\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"info\">\n    Info\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"light\">\n    Light\n  </ListGroup.Item>\n  <ListGroup.Item action variant=\"dark\">\n    Dark\n  </ListGroup.Item>\n</ListGroup>\n```\n\nUsing color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies – such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the `.sr-only` class.\n\n## Tabbed Interfaces\n\nYou can also use the [Tab](../tabs/index) components to create ARIA compliant tabbable interfaces with the `<ListGroup>` component. Swap out the `<Nav>` component for the list group and you are good to go.\n\n``` jsx\n<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\n  <Row>\n    <Col sm={4}>\n      <ListGroup>\n        <ListGroup.Item action href=\"#link1\">\n          Link 1\n        </ListGroup.Item>\n        <ListGroup.Item action href=\"#link2\">\n          Link 2\n        </ListGroup.Item>\n      </ListGroup>\n    </Col>\n    <Col sm={8}>\n      <Tab.Content>\n        <Tab.Pane eventKey=\"#link1\">\n          <Sonnet />\n        </Tab.Pane>\n        <Tab.Pane eventKey=\"#link2\">\n          <Sonnet />\n        </Tab.Pane>\n      </Tab.Content>\n    </Col>\n  </Row>\n</Tab.Container>\n```\n\n## API\n\n### ListGroup\n\n`import`` ListGroup ``from`` 'react-bootstrap/ListGroup'`Copy import code for the ListGroup component\n\n[TABLE]\n\n### ListGroup.Item\n\n`import`` ListGroup ``from`` 'react-bootstrap/ListGroup'`Copy import code for the ListGroup component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/list-group/](https://react-bootstrap.github.io/components/list-group/)"
- name: Media objects
  id: layout/media/index
  summary: The media object helps build complex and repetitive components (e.g
  description: "# Media objects\n\nThe media object helps build complex and repetitive components (e.g. blog comments, tweets, the like and more) where some media is positioned alongside content that doesn’t wrap around said media. Plus, it does this with only two required classes thanks to flexbox. Below is an example of a single media object. Only two classes are required—the wrapping `Media` and the `Media.Body` around your content. Optional padding and margin can be controlled through spacing utilities.\n\n``` jsx\n<Media>\n  <img\n    width={64}\n    height={64}\n    className=\"mr-3\"\n    src=\"holder.js/64x64\"\n    alt=\"Generic placeholder\"\n  />\n  <Media.Body>\n    <h5>Media Heading</h5>\n    <p>\n      Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n      ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n      tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla.\n      Donec lacinia congue felis in faucibus.\n    </p>\n  </Media.Body>\n</Media>\n```\n\n## Media Nesting\n\nMedia objects can be infinitely nested, though we suggest you stop at some point. Place nested `Media` within the `Media.Body` of a parent media object.\n\n``` jsx\n<Media>\n  <img\n    width={64}\n    height={64}\n    className=\"mr-3\"\n    src=\"holder.js/64x64\"\n    alt=\"Generic placeholder\"\n  />\n  <Media.Body>\n    <h5>Media Heading</h5>\n    <p>\n      Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n      ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n      tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla.\n      Donec lacinia congue felis in faucibus.\n    </p>\n\n    <Media>\n      <img\n        width={64}\n        height={64}\n        className=\"mr-3\"\n        src=\"holder.js/64x64\"\n        alt=\"Generic placeholder\"\n      />\n      <Media.Body>\n        <h5>Media Heading</h5>\n        <p>\n          Cras sit amet nibh libero, in gravida nulla. Nulla vel metus\n          scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in\n          vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi\n          vulputate fringilla. Donec lacinia congue felis in faucibus.\n        </p>\n      </Media.Body>\n    </Media>\n  </Media.Body>\n</Media>\n```\n\n## Media Alignment\n\nMedia in a media object can be aligned with flexbox utilities to the top (default), middle, or end of your `Media.Body` content.\n\n``` jsx\n<>\n  <Media>\n    <img\n      width={64}\n      height={64}\n      className=\"align-self-start mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>Media Heading</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n\n      <p>\n        Donec sed odio dui. Nullam quis risus eget urna mollis ornare vel eu\n        leo. Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus.\n      </p>\n    </Media.Body>\n  </Media>\n\n  <Media>\n    <img\n      width={64}\n      height={64}\n      className=\"align-self-center mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>Media Heading</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n\n      <p>\n        Donec sed odio dui. Nullam quis risus eget urna mollis ornare vel eu\n        leo. Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus.\n      </p>\n    </Media.Body>\n  </Media>\n\n  <Media>\n    <img\n      width={64}\n      height={64}\n      className=\"align-self-end mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>Media Heading</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n\n      <p className=\"mb-0\">\n        Donec sed odio dui. Nullam quis risus eget urna mollis ornare vel eu\n        leo. Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus.\n      </p>\n    </Media.Body>\n  </Media>\n</>\n```\n\n## Media Order\n\nChange the order of content in media objects by modifying the HTML itself, or by adding some custom flexbox CSS to set the `order` property (to an integer of your choosing).\n\n``` jsx\n<Media>\n  <Media.Body>\n    <h5>Media Heading</h5>\n    <p>\n      Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n      ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n      tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla.\n      Donec lacinia congue felis in faucibus.\n    </p>\n  </Media.Body>\n  <img\n    width={64}\n    height={64}\n    className=\"ml-3\"\n    src=\"holder.js/64x64\"\n    alt=\"Generic placeholder\"\n  />\n</Media>\n```\n\n## Media list\n\nBecause the media object has so few structural requirements, you can also use these classes on list HTML elements. On your `ul` or `ol` , add the .list-unstyled to remove any browser default list styles, use `<Media as=\"li\">` to render as a list item. As always, use spacing utilities wherever needed to fine tune.\n\n``` jsx\n<ul className=\"list-unstyled\">\n  <Media as=\"li\">\n    <img\n      width={64}\n      height={64}\n      className=\"mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>List-based media object</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n    </Media.Body>\n  </Media>\n\n  <Media as=\"li\">\n    <img\n      width={64}\n      height={64}\n      className=\"mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>List-based media object</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n    </Media.Body>\n  </Media>\n\n  <Media as=\"li\">\n    <img\n      width={64}\n      height={64}\n      className=\"mr-3\"\n      src=\"holder.js/64x64\"\n      alt=\"Generic placeholder\"\n    />\n    <Media.Body>\n      <h5>List-based media object</h5>\n      <p>\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque\n        ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at,\n        tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate\n        fringilla. Donec lacinia congue felis in faucibus.\n      </p>\n    </Media.Body>\n  </Media>\n</ul>\n```\n\n## Props\n\n### Media\n\n`import`` Media ``from`` 'react-bootstrap/Media'`Copy import code for the Media component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/layout/media/](https://react-bootstrap.github.io/layout/media/)"
- name: Migrating to v1
  id: migrating/index
  summary: React Bootstrap v1 adds full compatibility with Bootstrap 4
  description: "# Migrating to v1\n\nReact Bootstrap v1 adds full compatibility with Bootstrap 4. Because bootstrap 4 is a major rewrite of the project there are significant breaking changes from the pre `v1` react-bootstrap.\n\n**PLEASE FIRST READ THE UPSTREAM BOOSTRAP MIGRATION GUIDE**\n\n> <https://getbootstrap.com/docs/4.3/migration/>\n\nReact-Bootstrap *only* contains components that are present in vanilla Bootstrap. If functionality was removed from Bootstrap, then it was also removed from React-Bootstrap. This guide does not repeat information found in the upstream migration guide. Its goal is to document React-Bootstrap-specific API changes and additions.\n\n## Versioning\n\nWe will continue to provide general maintenance for Bootstrap 3 components, because there are many projects that continue to depend on Bootstrap 3 support in `react-bootstrap`. `react-bootstrap` package versions will be as follows:\n\n- Bootstrap 3 support will continue in react-bootstrap versions \\< `v1.0.0`\n- Bootstrap 4 support will be in react-bootstrap versions \\>= `v1.0.0`\n\nWe are **not** committing to keeping breaking changes in lockstep with bootstraps major releases, there may be a react-bootstrap v2 targeting Bootstrap v4 depending on what's best for the project.\n\n## Summary of breaking changes from v0.32.0\n\nBelow is a *rough* account of the breaking API changes as well as the minimal change to migrate\n\n- `bsStyle` -\\> `variant`\n- `bsClass` -\\> `bsPrefix`\n- `bsRole` has been removed from all components. Components now communicate via context to allow intermediate nesting of child components\n- `componentClass` -\\> `as`\n- All utils have been removed from main exports, most were internal already and the rest have been moved to external libraries\n\n### Grid\n\n- renamed to Container\n- removed Clearfix\n\n#### Col\n\n- removed visibility props\n- consolidated col `span`, `offset`, and `order` into an object value prop per breakpoint.\n\n### Navbar\n\n- removed `Navbar.Header`\n- removed `Navbar.Form`\n- removed `fluid`, use your own `Container` component in.\n- `inverse` removed and replaced with `variant=\"dark\"`\n- positioning props have been consolidated into `fixed={top|bottom}` and `sticky={top|bottom}`, staticTop has been removed\n\n#### NavbarHeader\n\n- removed, not present in v4\n\n#### NavbarToggle\n\n- name changed to `Navbar.Toggle`\n\n#### NavbarBrand\n\n- Renders a `<a>` when an `href` is provided\n- The presence of `children` does not skip the wrapping `span`, use `as` along with `children` for custom rendering\n\n### Nav\n\n- `activeHref` is removed (only activeKey now)\n- `bsStyle` renamed to `variant`\n- NavLink hrefs will be used as `eventKey`s when `eventKey` is absent\n- Local `onSelect` handlers are ignored when in the context of a TabContainer or Navbar (MAYBE ADD BACK?)\n\n#### Nav.Item\n\n- Renders *only* the outer \"item\" element, use inconjunction with the new `NavLink` component\n- default element changed to `<div>` from a `<li>`\n- `active` prop removed and moved to `NavLink`\n\n### InputGroup\n\n- removed InputGroup.Button, and InputGroup.Addon\n- added InputGroup.Prepend, InputGroup.Append, InputGroup.Text, InputGroup.Checkbox, InputGroup.Radio\n\n### Badge & Label\n\n- removed `Label`, the `Badge` component covers both\n- `bsStyle` renamed to `variant`\n\n### Panel\n\n- removed, replaced with Card components\n\n### Dropdown\n\n- Removed the `disabled` prop on Dropdown, pass it directly to Dropdown.Toggle\n- Removed bsRole, use function children to render custom Toggles or Menus\n- Removed SplitButton.toggle (replaced with a `split` prop on the basic Toggle)\n- `noCaret` is removed because it's not optional with the styles anymore\n- bsPrefixes are not passed from the parent Dropdown anymore\n- onSelect behavior is now passed to Menu and Toggle via the Context api\n- DropdownMenu is not rendered until opened\n- `divider` has been split out into `Dropdown.Divider`\n- `header` has been split out into `Dropdown.Header`\n\n#### DropdownButton\n\n- Extra props are passed to the underlying Dropdown component, not the Toggle.\n\n#### SplitButton\n\n- Extra props are passed to the underlying Dropdown component, not the Toggle.\n\n### NavButton\n\n- Extra props are passed to the underlying Dropdown component, not the Toggle.\n\n#### MenuItem\n\n- renamed to `DropdownItem` (also exported on `Dropdown` as `Dropdown.Item`)\n\n### Alert\n\n- `onDismiss` renamed to `onClose`\n\n### Well\n\n- removed.\n\n### Pager\n\n- removed.\n\n### ControlLabel\n\n- renamed to `FormLabel` (also exported on `Form` as `Form.Label`)\n\n### Checkbox and Radio\n\n- Consolidated into a single component. Component's name is `FormCheck` (also exported on `Form` as `Form.Check`)\n\n### Glyphicon\n\n- Removed -- icons are not included in Bootstrap 4. Icon support can be provided via react-icons, fontawesome, or a similar external library.\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/migrating/](https://react-bootstrap.github.io/migrating/)"
- name: Modals
  id: components/modal/index
  summary: Add dialogs to your site for lightboxes, user notifications, or completely custom content
  description: "# Modals\n\nAdd dialogs to your site for lightboxes, user notifications, or completely custom content.\n\n## Overview\n\n- Modals are positioned over everything else in the document and remove scroll from the `<body>` so that modal content scrolls instead.\n- Modals are *unmounted* when closed.\n- Bootstrap only supports **one** modal window at a time. Nested modals aren’t supported, but if you really need them the underlying `react-overlays` can support them if you're willing.\n- Modal's \"trap\" focus in them, ensuring the keyboard navigation cycles through the modal, and not the rest of the page.\n- Unlike vanilla Bootstrap, `autoFocus` works in Modals because React handles the implementation.\n\n## Examples\n\n### Static Markup\n\nBelow is a *static* modal dialog (without the positioning) to demonstrate the look and feel of the Modal.\n\n``` jsx\n<Modal.Dialog>\n  <Modal.Header closeButton>\n    <Modal.Title>Modal title</Modal.Title>\n  </Modal.Header>\n\n  <Modal.Body>\n    <p>Modal body text goes here.</p>\n  </Modal.Body>\n\n  <Modal.Footer>\n    <Button variant=\"secondary\">Close</Button>\n    <Button variant=\"primary\">Save changes</Button>\n  </Modal.Footer>\n</Modal.Dialog>\n```\n\n### Live demo\n\nA modal with header, body, and set of actions in the footer. Use `<Modal/>` in combination with other components to show or hide your Modal. The `<Modal/>` Component comes with a few convenient \"sub components\": `<Modal.Header/>`, `<Modal.Title/>`, `<Modal.Body/>`, and `<Modal.Footer/>`, which you can use to build the Modal content.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Launch demo modal\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n### Static backdrop\n\nWhen backdrop is set to static, the modal will not close when clicking outside it. Click the button below to try it.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Launch static backdrop modal\n      </Button>\n\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Modal title</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          I will not close if you click outside me. Don't even try to press\n          escape key.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\">Understood</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n### Without Animation\n\nA Modal can also be without an animation. For that set the \"animation\" prop to `false`.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Launch demo modal\n      </Button>\n\n      <Modal show={show} onHide={handleClose} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\nAdditional Import Options\n\nThe Modal Header, Title, Body, and Footer components are available as static properties the `<Modal/>` component, but you can also, import them directly like: `require(\"react-bootstrap/ModalHeader\")`.\n\n### Vertically centered\n\nYou can vertically center a modal by passing the \"centered\" prop.\n\n``` jsx\nfunction MyVerticallyCenteredModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Modal heading\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4>Centered Modal</h4>\n        <p>\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n          dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\n          consectetur ac, vestibulum at eros.\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={() => setModalShow(true)}>\n        Launch vertically centered modal\n      </Button>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n\nrender(<App />);\n```\n\n### Using the grid\n\nYou can use grid layouts within a model using regular grid components inside the modal content.\n\n``` jsx\nfunction MydModalWithGrid(props) {\n  return (\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\">\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Using Grid in Modal\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"show-grid\">\n        <Container>\n          <Row>\n            <Col xs={12} md={8}>\n              .col-xs-12 .col-md-8\n            </Col>\n            <Col xs={6} md={4}>\n              .col-xs-6 .col-md-4\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={6} md={4}>\n              .col-xs-6 .col-md-4\n            </Col>\n            <Col xs={6} md={4}>\n              .col-xs-6 .col-md-4\n            </Col>\n            <Col xs={6} md={4}>\n              .col-xs-6 .col-md-4\n            </Col>\n          </Row>\n        </Container>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction App() {\n  const [modalShow, setModalShow] = useState(false);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={() => setModalShow(true)}>\n        Launch modal with grid\n      </Button>\n\n      <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\n    </>\n  );\n}\n\nrender(<App />);\n```\n\n## Optional Sizes\n\nYou can specify a bootstrap large or small modal by using the \"size\" prop.\n\n``` jsx\nfunction Example() {\n  const [smShow, setSmShow] = useState(false);\n  const [lgShow, setLgShow] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setSmShow(true)}>Small modal</Button>{' '}\n      <Button onClick={() => setLgShow(true)}>Large modal</Button>\n      <Modal\n        size=\"sm\"\n        show={smShow}\n        onHide={() => setSmShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-sm\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-sm\">\n            Small Modal\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>...</Modal.Body>\n      </Modal>\n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            Large Modal\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>...</Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n### Sizing modals using custom CSS\n\nYou can apply custom css to the modal dialog div using the \"dialogClassName\" prop. Example is using a custom css class with width set to 90%.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={() => setShow(true)}>\n        Custom Width Modal\n      </Button>\n\n      <Modal\n        show={show}\n        onHide={() => setShow(false)}\n        dialogClassName=\"modal-90w\"\n        aria-labelledby=\"example-custom-modal-styling-title\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-custom-modal-styling-title\">\n            Custom Modal Styling\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            Ipsum molestiae natus adipisci modi eligendi? Debitis amet quae unde\n            commodi aspernatur enim, consectetur. Cumque deleniti temporibus\n            ipsam atque a dolores quisquam quisquam adipisci possimus\n            laboriosam. Quibusdam facilis doloribus debitis! Sit quasi quod\n            accusamus eos quod. Ab quos consequuntur eaque quo rem! Mollitia\n            reiciendis porro quo magni incidunt dolore amet atque facilis ipsum\n            deleniti rem!\n          </p>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n## API\n\n### Modal\n\n`import`` Modal ``from`` 'react-bootstrap/Modal'`Copy import code for the Modal component\n\n[TABLE]\n\n### ModalDialog\n\n`import`` ModalDialog ``from`` 'react-bootstrap/ModalDialog'`Copy import code for the ModalDialog component\n\n[TABLE]\n\n### ModalHeader\n\n`import`` ModalHeader ``from`` 'react-bootstrap/ModalHeader'`Copy import code for the ModalHeader component\n\n[TABLE]\n\n### ModalTitle\n\n`import`` ModalTitle ``from`` 'react-bootstrap/ModalTitle'`Copy import code for the ModalTitle component\n\n[TABLE]\n\n### ModalBody\n\n`import`` ModalBody ``from`` 'react-bootstrap/ModalBody'`Copy import code for the ModalBody component\n\n[TABLE]\n\n### ModalFooter\n\n`import`` ModalFooter ``from`` 'react-bootstrap/ModalFooter'`Copy import code for the ModalFooter component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/modal/](https://react-bootstrap.github.io/components/modal/)"
- name: Navbars
  id: components/navbar/index
  summary: A powerful, responsive navigation header, the navbar
  description: "# Navbars\n\nA powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more\n\n## Overview\n\nHere’s what you need to know before getting started with the Navbar:\n\n- Use the `expand` prop to allow for collapsing the Navbar at lower breakpoints.\n- Navbars and their contents are fluid by default. Use optional [containers](#navbars-containers) to limit their horizontal width.\n- Use spacing and flex utilities to size and position content\n\nA responsive navigation header, including support for branding, navigation, and more. Here’s an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the lg (large) breakpoint.\n\n``` jsx\n<Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#link\">Link</Nav.Link>\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\">Search</Button>\n    </Form>\n  </Navbar.Collapse>\n</Navbar>\n```\n\n## Brand\n\nA simple flexible branding component. Images are supported but will likely require custom styling to work well.\n\n``` jsx\n<>\n  <Navbar bg=\"light\">\n    <Navbar.Brand href=\"#home\">Brand link</Navbar.Brand>\n  </Navbar>\n  <br />\n  <Navbar bg=\"light\">\n    <Navbar.Brand>Brand text</Navbar.Brand>\n  </Navbar>\n  <br />\n  <Navbar bg=\"dark\">\n    <Navbar.Brand href=\"#home\">\n      <img\n        src=\"/logo.svg\"\n        width=\"30\"\n        height=\"30\"\n        className=\"d-inline-block align-top\"\n        alt=\"React Bootstrap logo\"\n      />\n    </Navbar.Brand>\n  </Navbar>\n  <br />\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">\n      <img\n        alt=\"\"\n        src=\"/logo.svg\"\n        width=\"30\"\n        height=\"30\"\n        className=\"d-inline-block align-top\"\n      />{' '}\n      React Bootstrap\n    </Navbar.Brand>\n  </Navbar>\n</>\n```\n\n## Forms\n\nUse `<Form inline>` and your various form controls within the Navbar. Align the contents as needed with utility classes.\n\n``` jsx\n<Navbar className=\"bg-light justify-content-between\">\n  <Form inline>\n    <InputGroup>\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        placeholder=\"Username\"\n        aria-label=\"Username\"\n        aria-describedby=\"basic-addon1\"\n      />\n    </InputGroup>\n  </Form>\n  <Form inline>\n    <FormControl type=\"text\" placeholder=\"Search\" className=\" mr-sm-2\" />\n    <Button type=\"submit\">Submit</Button>\n  </Form>\n</Navbar>\n```\n\n## Text and Non-nav links\n\nLoose text and links can be wrapped `Navbar.Text` in order to correctly align it vertically.\n\n``` jsx\n<Navbar>\n  <Navbar.Brand href=\"#home\">Navbar with text</Navbar.Brand>\n  <Navbar.Toggle />\n  <Navbar.Collapse className=\"justify-content-end\">\n    <Navbar.Text>\n      Signed in as: <a href=\"#login\">Mark Otto</a>\n    </Navbar.Text>\n  </Navbar.Collapse>\n</Navbar>\n```\n\n## Color schemes\n\nTheming the navbar has never been easier thanks to the combination of theming classes and background-color utilities. Choose from `variant=\"light\"` for use with light background colors, or `variant=\"dark\"` for dark background colors. Then, customize with the `bg` prop or any custom css!\n\n``` jsx\n<>\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#features\">Features</Nav.Link>\n      <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-info\">Search</Button>\n    </Form>\n  </Navbar>\n  <br />\n  <Navbar bg=\"primary\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#features\">Features</Nav.Link>\n      <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-light\">Search</Button>\n    </Form>\n  </Navbar>\n\n  <br />\n  <Navbar bg=\"light\" variant=\"light\">\n    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#features\">Features</Nav.Link>\n      <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-primary\">Search</Button>\n    </Form>\n  </Navbar>\n</>\n```\n\n## Containers\n\nWhile not required, you can wrap the Navbar in a `<Container>` component to center it on a page, or add one within to only center the contents of a [fixed or static top navbar](#navbars-placement).\n\n``` jsx\n<Container>\n  <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n    <Navbar.Brand href=\"#\">Navbar</Navbar.Brand>\n  </Navbar>\n</Container>\n```\n\nWhen the container is within your navbar, its horizontal padding is removed at breakpoints lower than your specified `expand={'sm' | 'md' | 'lg' | 'xl'}` prop. This ensures we’re not doubling up on padding unnecessarily on lower viewports when your navbar is collapsed.\n\n``` jsx\n<Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n  <Container>\n    <Navbar.Brand href=\"#\">Navbar</Navbar.Brand>\n  </Container>\n</Navbar>\n```\n\n## Placement\n\nYou can use Bootstrap's [position utilities](https://getbootstrap.com/docs/4.6/utilities/position/) to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use `position: fixed`, meaning they’re pulled from the normal flow of the DOM and may require custom CSS (e.g., padding-top on the `<body>`) to prevent overlap with other elements. Also note that **`.sticky-top` uses `position: sticky`, which [isn’t fully supported in every browser](https://caniuse.com/#feat=css-sticky)**.\n\nSince these positioning needs are so common for Navbars, we've added convenience props for them\n\n### Fixed top\n\n    <Navbar fixed=\"top\" />\n\n### Fixed bottom\n\n    <Navbar fixed=\"bottom\" />\n\n### Sticky top\n\n    <Navbar sticky=\"top\" />\n\n## Responsive behaviors\n\nUse the `expand` prop as well as the `Navbar.Toggle` and `Navbar.Collapse` components to control when content collapses behind a button.\n\nSet the `defaultExpanded` prop to make the Navbar start expanded. Set `collapseOnSelect` to make the Navbar collapse automatically when the user selects an item. You can also finely control the collapsing behavior by using the `expanded` and `onToggle` props.\n\nWatch out! You **need** to provide a breakpoint value to `expand` in order for the Navbar to collapse at all.\n\n``` jsx\n<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#features\">Features</Nav.Link>\n      <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n      <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Nav>\n      <Nav.Link href=\"#deets\">More deets</Nav.Link>\n      <Nav.Link eventKey={2} href=\"#memes\">\n        Dank memes\n      </Nav.Link>\n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n```\n\n## API\n\n### Navbar\n\n`import`` Navbar ``from`` 'react-bootstrap/Navbar'`Copy import code for the Navbar component\n\n[TABLE]\n\n### Navbar.Brand\n\n`import`` Navbar ``from`` 'react-bootstrap/Navbar'`Copy import code for the Navbar component\n\n[TABLE]\n\n### Navbar.Toggle\n\n`import`` Navbar ``from`` 'react-bootstrap/Navbar'`Copy import code for the Navbar component\n\n[TABLE]\n\n### Navbar.Collapse\n\n`import`` Navbar ``from`` 'react-bootstrap/Navbar'`Copy import code for the Navbar component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/navbar/](https://react-bootstrap.github.io/components/navbar/)"
- name: Overlays
  id: components/overlays/index
  summary: A set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need
  description: "# Overlays\n\nA set of components for positioning beautiful overlays, tooltips, popovers, and anything else you need.\n\n## Overview\n\nThings to know about the React-Boostrap Overlay components.\n\n- Overlays rely on the third-party library [Popper.js](https://popper.js.org/). It's included automatically with React-Bootstrap, but you should reference the API for more advanced use cases.\n- The `<Tooltip>` and `<Popover>` components do not position themselves. Instead the `<Overlay>` (or `<OverlayTrigger>`) components, inject `ref` and `style` props.\n- Tooltip expects specific props injected by the `<Overlay>` component\n- Tooltips for `disabled` elements must be triggered on a wrapper element.\n\n## Overlay\n\n`Overlay` is the fundamental component for positioning and controlling tooltip visibility. It's a wrapper around Popper.js, that adds support for transitions, and visibility toggling.\n\n### Creating an Overlay\n\nOverlays consist of at least two elements, the \"overlay\", the element to be positioned, as well as a \"target\", the element the overlay is positioned in relation to. You can also also have an \"arrow\" element, like the tooltips and popovers, but that is optional. Be sure to **check out the [Popper](https://popper.js.org/docs/v2/) documentation for more details about the injected props.**\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n  const target = useRef(null);\n\n  return (\n    <>\n      <Button variant=\"danger\" ref={target} onClick={() => setShow(!show)}>\n        Click me to see\n      </Button>\n      <Overlay target={target.current} show={show} placement=\"right\">\n        {({ placement, arrowProps, show: _show, popper, ...props }) => (\n          <div\n            {...props}\n            style={{\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\n              padding: '2px 10px',\n              color: 'white',\n              borderRadius: 3,\n              ...props.style,\n            }}\n          >\n            Simple tooltip\n          </div>\n        )}\n      </Overlay>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n## OverlayTrigger\n\nSince the above pattern is pretty common, but verbose, we've included `<OverlayTrigger>` component to help with common use-cases. It even has functionality to delayed show or hides, and a few different \"trigger\" events you can mix and match.\n\nNote that triggering components **must be able to accept [a ref](https://reactjs.org/docs/refs-and-the-dom.html)** since `<OverlayTrigger>` will attempt to add one. You can use [forwardRef()](https://reactjs.org/docs/react-api.html#reactforwardref) for function components.\n\n``` jsx\nconst renderTooltip = (props) => (\n  <Tooltip id=\"button-tooltip\" {...props}>\n    Simple tooltip\n  </Tooltip>\n);\n\nrender(\n  <OverlayTrigger\n    placement=\"right\"\n    delay={{ show: 250, hide: 400 }}\n    overlay={renderTooltip}\n  >\n    <Button variant=\"success\">Hover me to see</Button>\n  </OverlayTrigger>,\n);\n```\n\n### Customizing trigger behavior\n\nFor more advanced behaviors `<OverlayTrigger>` accepts a function child that passes in the injected `ref` and event handlers that correspond to the configured `trigger` prop.\n\nYou can manually apply the props to any element you want or split them up. The example below shows how to position the overlay to a different element than the one that triggers its visibility.\n\n**Pro Tip:** Using the function form of OverlayTrigger avoids a `React.findDOMNode` call, for those trying to be strict mode compliant.\n\n``` jsx\nrender(\n  <OverlayTrigger\n    placement=\"bottom\"\n    overlay={<Tooltip id=\"button-tooltip-2\">Check out this avatar</Tooltip>}\n  >\n    {({ ref, ...triggerHandler }) => (\n      <Button\n        variant=\"light\"\n        {...triggerHandler}\n        className=\"d-inline-flex align-items-center\"\n      >\n        <Image\n          ref={ref}\n          roundedCircle\n          src=\"holder.js/20x20?text=J&bg=28a745&fg=FFF\"\n        />\n        <span className=\"ml-1\">Hover to see</span>\n      </Button>\n    )}\n  </OverlayTrigger>,\n);\n```\n\n## Tooltips\n\nA tooltip component for a more stylish alternative to that anchor tag `title` attribute.\n\n### Examples\n\nHover over the links below to see tooltips.\n\nYou can pass the `Overlay` injected props directly to the Tooltip component.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n  const target = useRef(null);\n\n  return (\n    <>\n      <Button ref={target} onClick={() => setShow(!show)}>\n        Click me!\n      </Button>\n      <Overlay target={target.current} show={show} placement=\"right\">\n        {(props) => (\n          <Tooltip id=\"overlay-example\" {...props}>\n            My Tooltip\n          </Tooltip>\n        )}\n      </Overlay>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\nOr pass a Tooltip element to `OverlayTrigger` instead.\n\n``` jsx\n<>\n  {['top', 'right', 'bottom', 'left'].map((placement) => (\n    <OverlayTrigger\n      key={placement}\n      placement={placement}\n      overlay={\n        <Tooltip id={`tooltip-${placement}`}>\n          Tooltip on <strong>{placement}</strong>.\n        </Tooltip>\n      }\n    >\n      <Button variant=\"secondary\">Tooltip on {placement}</Button>\n    </OverlayTrigger>\n  ))}\n</>\n```\n\n## Popovers\n\nA popover component, like those found in iOS.\n\n### Examples\n\n``` jsx\nconst popover = (\n  <Popover id=\"popover-basic\">\n    <Popover.Title as=\"h3\">Popover right</Popover.Title>\n    <Popover.Content>\n      And here's some <strong>amazing</strong> content. It's very engaging.\n      right?\n    </Popover.Content>\n  </Popover>\n);\n\nconst Example = () => (\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n    <Button variant=\"success\">Click me to see</Button>\n  </OverlayTrigger>\n);\n\nrender(<Example />);\n```\n\nAs with `<Tooltip>`s, you can control the placement of the Popover.\n\n``` jsx\n<>\n  {['top', 'right', 'bottom', 'left'].map((placement) => (\n    <OverlayTrigger\n      trigger=\"click\"\n      key={placement}\n      placement={placement}\n      overlay={\n        <Popover id={`popover-positioned-${placement}`}>\n          <Popover.Title as=\"h3\">{`Popover ${placement}`}</Popover.Title>\n          <Popover.Content>\n            <strong>Holy guacamole!</strong> Check this info.\n          </Popover.Content>\n        </Popover>\n      }\n    >\n      <Button variant=\"secondary\">Popover on {placement}</Button>\n    </OverlayTrigger>\n  ))}\n</>\n```\n\n## Disabled elements\n\nElements with the `disabled` attribute aren’t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the overlay from a wrapper `<div>` or `<span>` and override the `pointer-events` on the disabled element.\n\n``` jsx\n<OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>\n  <span className=\"d-inline-block\">\n    <Button disabled style={{ pointerEvents: 'none' }}>\n      Disabled button\n    </Button>\n  </span>\n</OverlayTrigger>\n```\n\n## Changing containers\n\nYou can specify a `container` to control the DOM element the overlay is appended to. This is especially useful when styles conflict with your Overlay's.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = (event) => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  return (\n    <div ref={ref}>\n      <Button onClick={handleClick}>Holy guacamole!</Button>\n\n      <Overlay\n        show={show}\n        target={target}\n        placement=\"bottom\"\n        container={ref.current}\n        containerPadding={20}\n      >\n        <Popover id=\"popover-contained\">\n          <Popover.Title as=\"h3\">Popover bottom</Popover.Title>\n          <Popover.Content>\n            <strong>Holy guacamole!</strong> Check this info.\n          </Popover.Content>\n        </Popover>\n      </Overlay>\n    </div>\n  );\n}\n\nrender(<Example />);\n```\n\n## Updating position dynamically\n\nSince we can't know every time your overlay changes size, to reposition it, you need to take manual action if you want to update the position of an Overlay in response to a change.\n\nFor this, the Overlay component also injects a a `popper` prop with a `scheduleUpdate()` method that an overlay component can use to reposition itself.\n\n``` jsx\nconst UpdatingPopover = React.forwardRef(\n  ({ popper, children, show: _, ...props }, ref) => {\n    useEffect(() => {\n      console.log('updating!');\n      popper.scheduleUpdate();\n    }, [children, popper]);\n\n    return (\n      <Popover ref={ref} content {...props}>\n        {children}\n      </Popover>\n    );\n  },\n);\n\nconst longContent = `\n  Very long\n  Multiline content\n  that is engaging and what-not\n`;\nconst shortContent = 'Short and sweet!';\n\nfunction Example() {\n  const [content, setContent] = useState(shortContent);\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setContent(content === shortContent ? longContent : shortContent);\n    }, 3000);\n\n    return () => clearInterval(timerId);\n  });\n\n  return (\n    <OverlayTrigger\n      trigger=\"click\"\n      overlay={\n        <UpdatingPopover id=\"popover-contained\">{content}</UpdatingPopover>\n      }\n    >\n      <Button>Holy guacamole!</Button>\n    </OverlayTrigger>\n  );\n}\n\nrender(<Example />);\n```\n\n## API\n\n### Overlay\n\n`import`` Overlay ``from`` 'react-bootstrap/Overlay'`Copy import code for the Overlay component\n\n[TABLE]\n\n### OverlayTrigger\n\n`import`` OverlayTrigger ``from`` 'react-bootstrap/OverlayTrigger'`Copy import code for the OverlayTrigger component\n\n[TABLE]\n\n### Tooltip\n\n`import`` Tooltip ``from`` 'react-bootstrap/Tooltip'`Copy import code for the Tooltip component\n\n[TABLE]\n\n### Popover\n\n`import`` Popover ``from`` 'react-bootstrap/Popover'`Copy import code for the Popover component\n\n[TABLE]\n\n### PopoverContent\n\n`import`` PopoverContent ``from`` 'react-bootstrap/PopoverContent'`Copy import code for the PopoverContent component\n\n[TABLE]\n\n### PopoverTitle\n\n`import`` PopoverTitle ``from`` 'react-bootstrap/PopoverTitle'`Copy import code for the PopoverTitle component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/overlays/](https://react-bootstrap.github.io/components/overlays/)"
- name: Pagination
  id: components/pagination/index
  summary: A set of presentational components for building pagination UI
  description: "# Pagination\n\nA set of *presentational* components for building pagination UI.\n\n``` jsx\nlet active = 2;\nlet items = [];\nfor (let number = 1; number <= 5; number++) {\n  items.push(\n    <Pagination.Item key={number} active={number === active}>\n      {number}\n    </Pagination.Item>,\n  );\n}\n\nconst paginationBasic = (\n  <div>\n    <Pagination>{items}</Pagination>\n    <br />\n\n    <Pagination size=\"lg\">{items}</Pagination>\n    <br />\n\n    <Pagination size=\"sm\">{items}</Pagination>\n  </div>\n);\n\nrender(paginationBasic);\n```\n\n## More options\n\nFor building more complex pagination UI, there are few convenient sub-components for adding \"First\", \"Previous\", \"Next\", and \"Last\" buttons, as well as an `Ellipsis` item for indicating previous or continuing results.\n\n``` jsx\n<Pagination>\n  <Pagination.First />\n  <Pagination.Prev />\n  <Pagination.Item>{1}</Pagination.Item>\n  <Pagination.Ellipsis />\n\n  <Pagination.Item>{10}</Pagination.Item>\n  <Pagination.Item>{11}</Pagination.Item>\n  <Pagination.Item active>{12}</Pagination.Item>\n  <Pagination.Item>{13}</Pagination.Item>\n  <Pagination.Item disabled>{14}</Pagination.Item>\n\n  <Pagination.Ellipsis />\n  <Pagination.Item>{20}</Pagination.Item>\n  <Pagination.Next />\n  <Pagination.Last />\n</Pagination>\n```\n\n## API\n\n### Pagination\n\n`import`` Pagination ``from`` 'react-bootstrap/Pagination'`Copy import code for the Pagination component\n\n[TABLE]\n\n### PageItem\n\n`import`` PageItem ``from`` 'react-bootstrap/PageItem'`Copy import code for the PageItem component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/pagination/](https://react-bootstrap.github.io/components/pagination/)"
- name: Progress bars
  id: components/progress/index
  summary: Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars
  description: "# Progress bars\n\nProvide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.\n\n## Example\n\nDefault progress bar.\n\n``` jsx\n<ProgressBar now={60} />\n```\n\n## With label\n\nAdd a `label` prop to show a visible percentage. For low percentages, consider adding a min-width to ensure the label's text is fully visible.\n\n``` jsx\nconst now = 60;\n\nconst progressInstance = <ProgressBar now={now} label={`${now}%`} />;\n\nrender(progressInstance);\n```\n\n## Screenreader only label\n\nAdd a `srOnly` prop to hide the label visually.\n\n``` jsx\nconst now = 60;\n\nconst progressInstance = <ProgressBar now={now} label={`${now}%`} srOnly />;\n\nrender(progressInstance);\n```\n\n## Contextual alternatives\n\nProgress bars use some of the same button and alert classes for consistent styles.\n\n``` jsx\n<div>\n  <ProgressBar variant=\"success\" now={40} />\n  <ProgressBar variant=\"info\" now={20} />\n  <ProgressBar variant=\"warning\" now={60} />\n  <ProgressBar variant=\"danger\" now={80} />\n</div>\n```\n\n## Striped\n\nUses a gradient to create a striped effect. Not available in IE8.\n\n``` jsx\n<div>\n  <ProgressBar striped variant=\"success\" now={40} />\n  <ProgressBar striped variant=\"info\" now={20} />\n  <ProgressBar striped variant=\"warning\" now={60} />\n  <ProgressBar striped variant=\"danger\" now={80} />\n</div>\n```\n\n## Animated\n\nAdd `animated` prop to animate the stripes right to left. Not available in IE9 and below.\n\n``` jsx\n<ProgressBar animated now={45} />\n```\n\n## Stacked\n\nNest `<ProgressBar />`s to stack them.\n\n``` jsx\n<ProgressBar>\n  <ProgressBar striped variant=\"success\" now={35} key={1} />\n  <ProgressBar variant=\"warning\" now={20} key={2} />\n  <ProgressBar striped variant=\"danger\" now={10} key={3} />\n</ProgressBar>\n```\n\n## API\n\n### ProgressBar\n\n`import`` ProgressBar ``from`` 'react-bootstrap/ProgressBar'`Copy import code for the ProgressBar component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/progress/](https://react-bootstrap.github.io/components/progress/)"
- name: React Overlays
  id: utilities/react-overlays/index
  summary: Often times you may need a more generic or low-level version of a Bootstrap component
  description: "# React Overlays\n\nLow-level components and utilities for building beautiful accessible overlay components\n\nOften times you may need a more generic or low-level version of a Bootstrap component. Many of the `react-bootstrap` components are built on top of components from [react-overlays](https://react-bootstrap.github.io/react-overlays/), if you find yourself at the limit of a Bootstrap component, consider using the `react-overlays` base component directly.\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/utilities/react-overlays/](https://react-bootstrap.github.io/utilities/react-overlays/)"
- name: Responsive embed
  id: utilities/responsive-embed/index
  summary: Allow browsers to determine video or slideshow dimensions based on the width of their containing block by creating an intrinsic ratio that will properly scale on any device
  description: "# Responsive embed\n\nAllow browsers to determine video or slideshow dimensions based on the width of their containing block by creating an intrinsic ratio that will properly scale on any device.\n\nYou don't need to include `frameborder=\"0\"` in your `iframe`s.\n\nThe aspect ratio is controlled via the `aspectRatio` prop.\n\n``` jsx\n<div style={{ width: 660, height: 'auto' }}>\n  <ResponsiveEmbed aspectRatio=\"16by9\">\n    <embed type=\"image/svg+xml\" src=\"/TheresaKnott_castle.svg\" />\n  </ResponsiveEmbed>\n</div>\n```\n\n### API\n\n### ResponsiveEmbed\n\n`import`` ResponsiveEmbed ``from`` 'react-bootstrap/ResponsiveEmbed'`Copy import code for the ResponsiveEmbed component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/utilities/responsive-embed/](https://react-bootstrap.github.io/utilities/responsive-embed/)"
- name: Spinners
  id: components/spinners/index
  summary: Spinners can be used to show the loading state in your projects
  description: "# Spinners\n\nSpinners can be used to show the loading state in your projects.\n\n``` jsx\n<Spinner animation=\"border\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</Spinner>\n```\n\n## Animations\n\nBootstrap offers two animation styles for spinners. The animation style can be configured with the `animation` property. An animation style must always be provided when creating a spinner.\n\n**Border Spinner - `border`**\n\n``` jsx\n<Spinner animation=\"border\" />\n```\n\n**Grow Spinner - `grow`**\n\n``` jsx\n<Spinner animation=\"grow\" />\n```\n\n## Variants\n\nAll standard visual variants are available for both animation styles by setting the `variant` property. Alternatively spinners can be custom sized with the `style` property, or custom CSS classes.\n\n``` jsx\n<>\n  <Spinner animation=\"border\" variant=\"primary\" />\n  <Spinner animation=\"border\" variant=\"secondary\" />\n  <Spinner animation=\"border\" variant=\"success\" />\n  <Spinner animation=\"border\" variant=\"danger\" />\n  <Spinner animation=\"border\" variant=\"warning\" />\n  <Spinner animation=\"border\" variant=\"info\" />\n  <Spinner animation=\"border\" variant=\"light\" />\n  <Spinner animation=\"border\" variant=\"dark\" />\n  <Spinner animation=\"grow\" variant=\"primary\" />\n  <Spinner animation=\"grow\" variant=\"secondary\" />\n  <Spinner animation=\"grow\" variant=\"success\" />\n  <Spinner animation=\"grow\" variant=\"danger\" />\n  <Spinner animation=\"grow\" variant=\"warning\" />\n  <Spinner animation=\"grow\" variant=\"info\" />\n  <Spinner animation=\"grow\" variant=\"light\" />\n  <Spinner animation=\"grow\" variant=\"dark\" />\n</>\n```\n\n## Sizing\n\nIn addition to the standard size, a smaller additional preconfigured size is available by configuring the `size` property to `sm`.\n\n``` jsx\n<>\n  <Spinner animation=\"border\" size=\"sm\" />\n  <Spinner animation=\"border\" />\n  <Spinner animation=\"grow\" size=\"sm\" />\n  <Spinner animation=\"grow\" />\n</>\n```\n\n## Buttons\n\nLike the original Bootstrap spinners, these can also be used with buttons. To use this component out-of-the-box it is recommended you change the element type to `span` by configuring the `as` property when using spinners inside buttons.\n\n``` jsx\n<>\n  <Button variant=\"primary\" disabled>\n    <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    <span className=\"sr-only\">Loading...</span>\n  </Button>{' '}\n  <Button variant=\"primary\" disabled>\n    <Spinner\n      as=\"span\"\n      animation=\"grow\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading...\n  </Button>\n</>\n```\n\n## Accessibility\n\nTo ensure the maximum accessibility for spinner components it is recommended you provide a relevant ARIA `role` property, and include screenreader-only readable text representation of the spinner's meaning inside the component using Bootstrap's `sr-only` class.\n\nThe example below provides an example of accessible usage of this component.\n\n``` jsx\n<Spinner animation=\"border\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</Spinner>\n```\n\n## API\n\n### Spinner\n\n`import`` Spinner ``from`` 'react-bootstrap/Spinner'`Copy import code for the Spinner component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/spinners/](https://react-bootstrap.github.io/components/spinners/)"
- name: Tabbed components
  id: components/tabs/index
  summary: Create dynamic tabbed interfaces, as described in the WAI ARIA Authoring Practices
  description: "## Tabbed components\n\nDynamic tabbed interfaces\n\n## Examples\n\nCreate dynamic tabbed interfaces, as described in the [WAI ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices/#tabpanel). `Tabs` is a higher-level component for quickly creating a `Nav` matched with a set of `TabPane`s.\n\n``` jsx\n<Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n  <Tab eventKey=\"home\" title=\"Home\">\n    <Sonnet />\n  </Tab>\n  <Tab eventKey=\"profile\" title=\"Profile\">\n    <Sonnet />\n  </Tab>\n  <Tab eventKey=\"contact\" title=\"Contact\" disabled>\n    <Sonnet />\n  </Tab>\n</Tabs>\n```\n\n## Controlled\n\n`Tabs` can be controlled directly when you want to handle the selection logic personally.\n\n``` jsx\nfunction ControlledTabs() {\n  const [key, setKey] = useState('home');\n\n  return (\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n    >\n      <Tab eventKey=\"home\" title=\"Home\">\n        <Sonnet />\n      </Tab>\n      <Tab eventKey=\"profile\" title=\"Profile\">\n        <Sonnet />\n      </Tab>\n      <Tab eventKey=\"contact\" title=\"Contact\" disabled>\n        <Sonnet />\n      </Tab>\n    </Tabs>\n  );\n}\n\nrender(<ControlledTabs />);\n```\n\n## No animation\n\nSet the `transition` prop to `false`\n\n``` jsx\n<Tabs defaultActiveKey=\"home\" transition={false} id=\"noanim-tab-example\">\n  <Tab eventKey=\"home\" title=\"Home\">\n    <Sonnet />\n  </Tab>\n  <Tab eventKey=\"profile\" title=\"Profile\">\n    <Sonnet />\n  </Tab>\n  <Tab eventKey=\"contact\" title=\"Contact\" disabled>\n    <Sonnet />\n  </Tab>\n</Tabs>\n```\n\n## Dropdowns?\n\nDynamic tabbed interfaces should not contain dropdown menus, as this causes both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab’s trigger element is not immediately visible (as it’s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.\n\nThat said, it Dropdowns do work technically (sans focus management), but we don't make any claims about support.\n\n## Custom Tab Layout\n\nFor more complex layouts the flexible `TabContainer`, `TabContent`, and `TabPane` components along with any style of `Nav` allow you to quickly piece together your own Tabs component with additional markup needed.\n\nCreate a set of NavItems each with an `eventKey` corresponding to the eventKey of a `TabPane`. Wrap the whole thing in a `TabContainer` and you have fully functioning custom tabs component. Check out the below example making use of the grid system and pills.\n\n``` jsx\n<Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n  <Row>\n    <Col sm={3}>\n      <Nav variant=\"pills\" className=\"flex-column\">\n        <Nav.Item>\n          <Nav.Link eventKey=\"first\">Tab 1</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"second\">Tab 2</Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </Col>\n    <Col sm={9}>\n      <Tab.Content>\n        <Tab.Pane eventKey=\"first\">\n          <Sonnet />\n        </Tab.Pane>\n        <Tab.Pane eventKey=\"second\">\n          <Sonnet />\n        </Tab.Pane>\n      </Tab.Content>\n    </Col>\n  </Row>\n</Tab.Container>\n```\n\n## API\n\n### Tabs\n\n`import`` Tabs ``from`` 'react-bootstrap/Tabs'`Copy import code for the Tabs component\n\n[TABLE]\n\n### Tab\n\n`import`` Tab ``from`` 'react-bootstrap/Tab'`Copy import code for the Tab component\n\n[TABLE]\n\n### TabContainer\n\n`import`` TabContainer ``from`` 'react-bootstrap/TabContainer'`Copy import code for the TabContainer component\n\n[TABLE]\n\n### TabContent\n\n`import`` TabContent ``from`` 'react-bootstrap/TabContent'`Copy import code for the TabContent component\n\n[TABLE]\n\n### TabPane\n\n`import`` TabPane ``from`` 'react-bootstrap/TabPane'`Copy import code for the TabPane component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/tabs/](https://react-bootstrap.github.io/components/tabs/)"
- name: Tables
  id: components/table/index
  summary: Use the striped, bordered and hover props to customise the table
  description: "# Tables\n\nUse the `striped`, `bordered` and `hover` props to customise the table.\n\n``` jsx\n<Table striped bordered hover>\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td colSpan=\"2\">Larry the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</Table>\n```\n\n## Small Table\n\nUse `size=\"sm\"` to make tables compact by cutting cell padding in half.\n\n``` jsx\n<Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td colSpan=\"2\">Larry the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</Table>\n```\n\n## Dark Table\n\nUse `variant=\"dark\"` to invert the colors of the table and get light text on a dark background.\n\n``` jsx\n<Table striped bordered hover variant=\"dark\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td colSpan=\"2\">Larry the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</Table>\n```\n\n## Responsive\n\nResponsive tables allow tables to be scrolled horizontally with ease.\n\n### Always Responsive\n\nAcross every breakpoint, use `responsive` for horizontally scrolling tables. Responsive tables are wrapped automatically in a `div`. The following example has 12 columns that are scrollable horizontally.\n\n``` jsx\n<Table responsive>\n  <thead>\n    <tr>\n      <th>#</th>\n      {Array.from({ length: 12 }).map((_, index) => (\n        <th key={index}>Table heading</th>\n      ))}\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      {Array.from({ length: 12 }).map((_, index) => (\n        <td key={index}>Table cell {index}</td>\n      ))}\n    </tr>\n    <tr>\n      <td>2</td>\n      {Array.from({ length: 12 }).map((_, index) => (\n        <td key={index}>Table cell {index}</td>\n      ))}\n    </tr>\n    <tr>\n      <td>3</td>\n      {Array.from({ length: 12 }).map((_, index) => (\n        <td key={index}>Table cell {index}</td>\n      ))}\n    </tr>\n  </tbody>\n</Table>\n```\n\n### Breakpoint specific\n\nUse `responsive=\"sm\"`, `responsive=\"md\"`, `responsive=\"lg\"`, or `responsive=\"xl\"` as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.\n\n``` jsx\n<div>\n  <Table responsive=\"sm\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>1</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n    </tbody>\n  </Table>\n  <Table responsive=\"md\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>1</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n    </tbody>\n  </Table>\n  <Table responsive=\"lg\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>1</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n    </tbody>\n  </Table>\n  <Table responsive=\"xl\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n        <th>Table heading</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>1</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n        <td>Table cell</td>\n      </tr>\n    </tbody>\n  </Table>\n</div>\n```\n\n## API\n\n### Table\n\n`import`` Table ``from`` 'react-bootstrap/Table'`Copy import code for the Table component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/table/](https://react-bootstrap.github.io/components/table/)"
- name: Theming and customizing styles
  id: getting-started/theming/index
  summary: Generally, if you stick to the Bootstrap defined classes and variants, there isn't anything you need to do to use a custom theme with React-Bootstrap
  description: "# Theming and customizing styles\n\nGenerally, if you stick to the Bootstrap defined classes and variants, there isn't anything you need to do to use a custom theme with React-Bootstrap. It just works. But we also make coloring outside the lines easy to do.\n\n## New variants and sizes\n\nCustom variants and sizes should follow the pattern of the default bootstrap variants, and define css classes matching: `component-*`. React bootstrap builds the component `classNames` in a consistent way that you can rely on. For instance this custom Button.\n\n``` jsx\n<>\n  <style type=\"text/css\">\n    {`\n    .btn-flat {\n      background-color: purple;\n      color: white;\n    }\n\n    .btn-xxl {\n      padding: 1rem 1.5rem;\n      font-size: 1.5rem;\n    }\n    `}\n  </style>\n\n  <Button variant=\"flat\" size=\"xxl\">\n    flat button\n  </Button>\n</>\n```\n\n## Prefixing components\n\nIn some cases you may need to change the base class \"prefix\" of one or more Components. You can control how a Component prefixes its classes locally by changing the `bsPrefix` prop. Or globally via the `ThemeProvider` Component.\n\nChanging prefixes is an escape hatch and generally shouldn't be used.\n\n``` jsx\n<>\n  {/* Hint: inspect the markup to see how the classes differ */}\n  <ThemeProvider prefixes={{ btn: 'my-btn' }}>\n    <Button variant=\"primary\">My Button</Button>\n  </ThemeProvider>{' '}\n  <Button bsPrefix=\"super-btn\" variant=\"primary\">\n    Super button\n  </Button>\n</>\n```\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/getting-started/theming/](https://react-bootstrap.github.io/getting-started/theming/)"
- name: Toasts
  id: components/toasts/index
  summary: Push notifications to your visitors with a toast, a lightweight and easily customizable alert message
  description: "# Toasts\n\nPush notifications to your visitors with a toast, a lightweight and easily customizable alert message.\n\nToasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.\n\n## Examples\n\n### Basic\n\nTo encourage extensible and predictable toasts, we recommend a header and body. Toast headers use display: flex, allowing easy alignment of content thanks to our margin and flexbox utilities.\n\nToasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button.\n\n``` jsx\n<Toast>\n  <Toast.Header>\n    <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n    <strong className=\"mr-auto\">Bootstrap</strong>\n    <small>11 mins ago</small>\n  </Toast.Header>\n  <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n</Toast>\n```\n\n### Dismissible\n\n``` jsx\nfunction Example() {\n  const [showA, setShowA] = useState(true);\n  const [showB, setShowB] = useState(true);\n\n  const toggleShowA = () => setShowA(!showA);\n  const toggleShowB = () => setShowB(!showB);\n\n  return (\n    <Row>\n      <Col xs={6}>\n        <Toast show={showA} onClose={toggleShowA}>\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n      <Col xs={6}>\n        <Button onClick={toggleShowA}>\n          Toggle Toast <strong>with</strong> Animation\n        </Button>\n      </Col>\n      <Col xs={6} className=\"my-1\">\n        <Toast onClose={toggleShowB} show={showB} animation={false}>\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n      <Col xs={6}>\n        <Button onClick={toggleShowB}>\n          Toggle Toast <strong>without</strong> Animation\n        </Button>\n      </Col>\n    </Row>\n  );\n}\n\nrender(<Example />);\n```\n\n### Stacking\n\nWhen you have multiple toasts, we default to vertically stacking them in a readable manner.\n\n``` jsx\n<>\n  <Toast>\n    <Toast.Header>\n      <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n      <strong className=\"mr-auto\">Bootstrap</strong>\n      <small>just now</small>\n    </Toast.Header>\n    <Toast.Body>See? Just like this.</Toast.Body>\n  </Toast>\n  <Toast>\n    <Toast.Header>\n      <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n      <strong className=\"mr-auto\">Bootstrap</strong>\n      <small>2 seconds ago</small>\n    </Toast.Header>\n    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n  </Toast>\n</>\n```\n\n### Placement\n\nPlace toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle.\n\n``` jsx\n<div\n  aria-live=\"polite\"\n  aria-atomic=\"true\"\n  style={{\n    position: 'relative',\n    minHeight: '100px',\n  }}\n>\n  <Toast\n    style={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n    }}\n  >\n    <Toast.Header>\n      <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n      <strong className=\"mr-auto\">Bootstrap</strong>\n      <small>just now</small>\n    </Toast.Header>\n    <Toast.Body>See? Just like this.</Toast.Body>\n  </Toast>\n</div>\n```\n\nFor systems that generate more notifications, consider using a wrapping element so they can easily stack.\n\n``` jsx\n<div\n  aria-live=\"polite\"\n  aria-atomic=\"true\"\n  style={{\n    position: 'relative',\n    minHeight: '200px',\n  }}\n>\n  <div\n    style={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n    }}\n  >\n    <Toast>\n      <Toast.Header>\n        <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n        <strong className=\"mr-auto\">Bootstrap</strong>\n        <small>just now</small>\n      </Toast.Header>\n      <Toast.Body>See? Just like this.</Toast.Body>\n    </Toast>\n    <Toast>\n      <Toast.Header>\n        <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n        <strong className=\"mr-auto\">Bootstrap</strong>\n        <small>2 seconds ago</small>\n      </Toast.Header>\n      <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n    </Toast>\n  </div>\n</div>\n```\n\n### Autohide\n\nA Toast can also automatically hide after X milliseconds. For that, use the `autohide` prop in combination with `delay` the prop to sepecify the delay. But be aware, that it will only trigger the `onClose` function, you have to set manually the show property.\n\n``` jsx\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <Row>\n      <Col xs={6}>\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n      <Col xs={6}>\n        <Button onClick={() => setShow(true)}>Show Toast</Button>\n      </Col>\n    </Row>\n  );\n}\n\nrender(<Example />);\n```\n\n## API\n\n### Toast\n\n`import`` Toast ``from`` 'react-bootstrap/Toast'`Copy import code for the Toast component\n\n[TABLE]\n\n### ToastHeader\n\n`import`` ToastHeader ``from`` 'react-bootstrap/ToastHeader'`Copy import code for the ToastHeader component\n\n[TABLE]\n\n### ToastBody\n\n`import`` ToastBody ``from`` 'react-bootstrap/ToastBody'`Copy import code for the ToastBody component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/components/toasts/](https://react-bootstrap.github.io/components/toasts/)"
- name: Transitions
  id: utilities/transitions/index
  summary: Bootstrap includes a few general use CSS transitions that can be applied to a number of components
  description: "# Transitions\n\nBootstrap includes a few general use CSS transitions that can be applied to a number of components. React Bootstrap, bundles them up into a few composable `<Transition>` components from [react-transition-group](https://github.com/reactjs/react-transition-group), a commonly used animation wrapper for React.\n\nEncapsulating animations into components has the added benefit of making them more broadly useful, as well as portable for using in other libraries. All React-bootstrap components that can be animated, support pluggable `<Transition>` components.\n\n## Collapse\n\nAdd a collapse toggle animation to an element or component.\n\nIf you're noticing choppy animations, and the component that's being collapsed has non-zero margin or padding, try wrapping the contents of your `<Collapse>` inside a node with no margin or padding, like the `<div>` in the example below. This will allow the height to be computed properly, so the animation can proceed smoothly.\n\n``` jsx\nfunction Example() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        onClick={() => setOpen(!open)}\n        aria-controls=\"example-collapse-text\"\n        aria-expanded={open}\n      >\n        click\n      </Button>\n      <Collapse in={open}>\n        <div id=\"example-collapse-text\">\n          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n          terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n          labore wes anderson cred nesciunt sapiente ea proident.\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n## Fade\n\nAdd a fade animation to a child element or component.\n\n``` jsx\nfunction Example() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        onClick={() => setOpen(!open)}\n        aria-controls=\"example-fade-text\"\n        aria-expanded={open}\n      >\n        Toggle text\n      </Button>\n      <Fade in={open}>\n        <div id=\"example-fade-text\">\n          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n          terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n          labore wes anderson cred nesciunt sapiente ea proident.\n        </div>\n      </Fade>\n    </>\n  );\n}\n\nrender(<Example />);\n```\n\n## API\n\n### Collapse\n\n`import`` Collapse ``from`` 'react-bootstrap/Collapse'`Copy import code for the Collapse component\n\n[TABLE]\n\n### Fade\n\n`import`` Fade ``from`` 'react-bootstrap/Fade'`Copy import code for the Fade component\n\n[TABLE]\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/utilities/transitions/](https://react-bootstrap.github.io/utilities/transitions/)"
- name: Why React-Bootstrap?
  id: getting-started/why-react-bootstrap/index
  summary: React-Bootstrap is a complete re-implementation of the Bootstrap components using React
  description: "# Why React-Bootstrap?\n\nReact-Bootstrap is a complete re-implementation of the Bootstrap components using React. It has **no dependency on either `bootstrap.js` or jQuery.** If you have React setup and React-Bootstrap installed, you have everything you need.\n\nMethods and events using jQuery is done imperatively by directly manipulating the DOM. In contrast, React uses updates to the state to update the virtual DOM. In this way, React-Bootstrap provides a more reliable solution by incorporating Bootstrap functionality into React's virtual DOM. Below are a few examples of how React-Bootstrap components differ from Bootstrap.\n\n## A Simple React Component\n\nThe CSS and details of Bootstrap components are rather opinionated and lengthy. React-Bootstrap simplifies this by condensing the original Bootstrap into React-styled components.\n\n### Bootstrap\n\n    import React from 'react';\n\n    function Example()  {\n      return (\n        <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n          <strong>Oh snap! You got an error!</strong> \n          <p> \n            Change this and that and try again.\n          </p>\n          <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      )\n    }\n\n### React-Bootstrap\n\n    import React, { Component } from 'react';\n    import Alert from 'react-bootstrap/Alert';\n\n    function Example() {\n      return (\n        <Alert dismissible variant=\"danger\">\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Change this and that and try again.\n          </p>\n        </Alert>\n      )\n    }\n\n## Bootstrap with state\n\nSince React-Bootstrap is built with React Javascript, state can be passed within React-Bootstrap components as a prop. It also makes it easier to manage the state as updates are made using React’s state instead of directly manipulating the state of the DOM. This also gives a lot of flexibility when creating more complex components.\n\n### React-bootstrap\n\n``` jsx\nfunction AlertDismissible() {\n  const [show, setShow] = useState(true);\n\n  return (\n    <>\n      <Alert show={show} variant=\"success\">\n        <Alert.Heading>How's it going?!</Alert.Heading>\n        <p>\n          Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget\n          lacinia odio sem nec elit. Cras mattis consectetur purus sit amet\n          fermentum.\n        </p>\n        <hr />\n        <div className=\"d-flex justify-content-end\">\n          <Button onClick={() => setShow(false)} variant=\"outline-success\">\n            Close me y'all!\n          </Button>\n        </div>\n      </Alert>\n\n      {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\n    </>\n  );\n}\n\nrender(<AlertDismissible />);\n```\n\n### Bootstrap\n\n    // HTML\n    <div class=\"alert alert-success alert-dismissible fade show firstCollapsible\" role=\"alert\">\n      <strong>How's it going?!</strong> \n      <p> \n        Duis mollis, est non commodo luctus, nisi erat porttitor ligula,\n        eget lacinia odio sem nec elit. Cras mattis consectetur purus sit\n        amet fermentum.\n      </p>\n      <hr/>\n      <div class=\"d-flex justify-content-end\">\n        <button type=\"button\" class=\"btn btn-outline-success\">Close me ya'll!</button>\n      </div>\n    </div>\n    <div class=\"d-flex justify-content-start alert fade show\">\n        <button type=\"button\" class=\"btn btn-primary d-none secondCollapsible\">Show Alert</button>\n    </div>\n\n    // Javascript\n    $('.btn-outline-success').on('click', function(e) {\n        $('.firstCollapsible').addClass('d-none');\n        $('.secondCollapsible').removeClass('d-none');\n    })\n\n    $('.btn-primary').on('click', function(e) {\n        $('.firstCollapsible').removeClass('d-none');\n        $('.secondCollapsible').addClass('d-none');\n    })\n\n© 2014–present Stephen J. Collings, Matthew Honnibal, Pieter Vanderwerff  \nLicensed under the MIT License (MIT).  \n[https://react-bootstrap.github.io/getting-started/why-react-bootstrap/](https://react-bootstrap.github.io/getting-started/why-react-bootstrap/)"
