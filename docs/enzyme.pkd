---
name: Enzyme
slug: enzyme
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2015 Airbnb, Inc.
  Licensed under the MIT License.
  https://enzymejs.github.io/enzyme/index.html
homepage: null

---
- name: .at()
  id: docs/api/shallowwrapper/at
  summary: Returns a wrapper around the node at a given index of the current wrapper
  description: "# .at(index) =\\> ShallowWrapper\n\nReturns a wrapper around the node at a given index of the current wrapper.\n\n## Arguments\n\n1.  `index` (`Number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the retrieved node.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo).at(0).props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.get(index) => ReactElement`](get) - same, but returns the React node itself, with no wrapper.\n- [`.first() => ShallowWrapper`](first) - same as at(0)\n- [`.last() => ShallowWrapper`](last)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/at.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/at.html)"
- name: .at()
  id: docs/api/reactwrapper/at
  summary: Returns a wrapper around the node at a given index of the current wrapper
  description: "# .at(index) =\\> ReactWrapper\n\nReturns a wrapper around the node at a given index of the current wrapper.\n\n## Arguments\n\n1.  `index` (`Number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the retrieved node.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo).at(0).props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.get(index) => ReactElement`](get) - same, but returns the React node itself, with no wrapper.\n- [`.first() => ReactWrapper`](first) - same as at(0)\n- [`.last() => ReactWrapper`](last)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/at.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/at.html)"
- name: .childAt()
  id: docs/api/shallowwrapper/childat
  summary: Returns a new wrapper with child at the specified index
  description: "# .childAt(index) =\\> ShallowWrapper\n\nReturns a new wrapper with child at the specified index.\n\n## Arguments\n\n1.  `index` (`number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the resulting node.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<ToDoList items={items} />);\nexpect(wrapper.find('ul').childAt(0).type()).to.equal('li');\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ShallowWrapper`](parents)\n- [`.parent() => ShallowWrapper`](parent)\n- [`.closest(selector) => ShallowWrapper`](closest)\n- [`.children([selector]) => ShallowWrapper`](children)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/childAt.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/childAt.html)"
- name: .childAt()
  id: docs/api/reactwrapper/childat
  summary: Returns a new wrapper with child at the specified index
  description: "# .childAt(index) =\\> ReactWrapper\n\nReturns a new wrapper with child at the specified index.\n\n## Arguments\n\n1.  `index` (`number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the resulting node.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<ToDoList items={items} />);\nexpect(wrapper.find('ul').childAt(0).type()).to.equal('li');\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ReactWrapper`](parents)\n- [`.parent() => ReactWrapper`](parent)\n- [`.closest(selector) => ReactWrapper`](closest)\n- [`.children([selector]) => ReactWrapper`](children)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/childAt.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/childAt.html)"
- name: .children()
  id: docs/api/shallowwrapper/children
  summary: Returns a new wrapper with all of the children of the node(s) in the current wrapper
  description: "# .children(\\[selector\\]) =\\> ShallowWrapper\n\nReturns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector can be provided and it will filter the children by this selector\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): A selector to filter the children by.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<ToDoList items={items} />);\nexpect(wrapper.find('ul').children()).to.have.lengthOf(items.length);\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ShallowWrapper`](parents)\n- [`.parent() => ShallowWrapper`](parent)\n- [`.closest(selector) => ShallowWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/children.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/children.html)"
- name: .children()
  id: docs/api/reactwrapper/children
  summary: Returns a new wrapper with all of the children of the node(s) in the current wrapper
  description: "# .children(\\[selector\\]) =\\> ReactWrapper\n\nReturns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector can be provided and it will filter the children by this selector\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): A selector to filter the children by.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<ToDoList items={items} />);\nexpect(wrapper.find('ul').children()).to.have.lengthOf(items.length);\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ReactWrapper`](parents)\n- [`.parent() => ReactWrapper`](parent)\n- [`.closest(selector) => ReactWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/children.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/children.html)"
- name: .closest()
  id: docs/api/shallowwrapper/closest
  summary: Returns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself
  description: "# .closest(selector) =\\> ShallowWrapper\n\nReturns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the resulting node.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo).closest('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.children([selector]) => ShallowWrapper`](children)\n- [`.parent() => ShallowWrapper`](parent)\n- [`.parents([selector]) => ShallowWrapper`](parents)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/closest.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/closest.html)"
- name: .closest()
  id: docs/api/reactwrapper/closest
  summary: Returns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself
  description: "# .closest(selector) =\\> ReactWrapper\n\nReturns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the resulting node.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo).closest('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.children([selector]) => ReactWrapper`](children)\n- [`.parent() => ReactWrapper`](parent)\n- [`.parents([selector]) => ReactWrapper`](parents)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/closest.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/closest.html)"
- name: .contains()
  id: docs/api/shallowwrapper/contains
  summary: Returns whether or not all given react elements match elements in the render tree
  description: "# .contains(nodeOrNodes) =\\> Boolean\n\nReturns whether or not all given react elements match elements in the render tree. It will determine if an element in the wrapper matches the expected element by checking if the expected element has the same props as the wrapper's element and share the same values.\n\n## Arguments\n\n1.  `nodeOrNodes` (`ReactElement|Array<ReactElement>`): The node or array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has nodes anywhere in its render tree that match the ones passed in.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div data-foo=\"foo\" data-bar=\"bar\">Hello</div>\n  </div>\n));\n\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\">Hello</div>)).to.equal(true);\n\nexpect(wrapper.contains(<div data-foo=\"foo\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"Hello\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\" />)).to.equal(false);\n```\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <span>Hello</span>\n    <div>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.contains([\n  <span>Hello</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n\nexpect(wrapper.contains([\n  <span>Hello</span>,\n  <div>World</div>,\n])).to.equal(false);\n```\n\n``` jsx\nconst calculatedValue = 2 + 2;\n\nconst wrapper = shallow((\n  <div>\n    <div data-foo=\"foo\" data-bar=\"bar\">{calculatedValue}</div>\n  </div>\n));\n\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\">{4}</div>)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.contains()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/contains.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/contains.html)"
- name: .contains()
  id: docs/api/reactwrapper/contains
  summary: Returns whether or not all given react elements match elements in the render tree
  description: "# .contains(nodeOrNodes) =\\> Boolean\n\nReturns whether or not all given react elements match elements in the render tree. It will determine if an element in the wrapper matches the expected element by checking if the expected element has the same props as the wrapper's element and share the same values.\n\n## Arguments\n\n1.  `nodeOrNodes` (`ReactElement|Array<ReactElement>`): The node or array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has nodes anywhere in its render tree that match the ones passed in.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div data-foo=\"foo\" data-bar=\"bar\">Hello</div>\n  </div>\n));\n\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\">Hello</div>)).to.equal(true);\n\nexpect(wrapper.contains(<div data-foo=\"foo\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"Hello\">Hello</div>)).to.equal(false);\nexpect(wrapper.contains(<div data-foo=\"foo\" data-bar=\"bar\" />)).to.equal(false);\n```\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <span>Hello</span>\n    <div>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.contains([\n  <span>Hello</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n\nexpect(wrapper.contains([\n  <span>Hello</span>,\n  <div>World</div>,\n])).to.equal(false);\n```\n\n## Common Gotchas\n\n- `.contains()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n- Every attribute of the wrapped element must be matched by the element you're checking. To permit (and ignore) additional attributes on the wrapped element, use containsMatchingElement() instead.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/contains.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/contains.html)"
- name: .containsAllMatchingElements()
  id: docs/api/shallowwrapper/containsallmatchingelements
  summary: Returns whether or not all of the given react elements in patternNodes match an element in the wrapper's render tree
  description: "# .containsAllMatchingElements(patternNodes) =\\> Boolean\n\nReturns whether or not all of the given react elements in `patternNodes` match an element in the wrapper's render tree. Every single element of `patternNodes` must be matched one or more times. Matching follows the rules for `containsMatchingElement`.\n\n## Arguments\n\n1.  `patternNodes` (`Array<ReactElement>`): The array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has nodes anywhere in its render tree that looks like the nodes passed in.\n\n## Example\n\n``` jsx\nconst style = { fontSize: 13 };\nconst wrapper = shallow((\n  <div>\n    <span className=\"foo\">Hello</span>\n    <div style={style}>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.containsAllMatchingElements([\n  <span>Hello</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.containsAllMatchingElements()` expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array of ReactElement or a JSX expression.\n- Keep in mind that this method determines matching based on the matching of the node's children as well.\n\n## Related Methods\n\n- [`.matchesElement() => ShallowWrapper`](matcheselement) - rules for matching each node\n- [`.containsMatchingElement() => ShallowWrapper`](containsmatchingelement) - rules for matching whole wrapper\n- [`.containsAnyMatchingElements() => ShallowWrapper`](containsanymatchingelements) - must match at least one in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsAllMatchingElements.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsAllMatchingElements.html)"
- name: .containsAllMatchingElements()
  id: docs/api/reactwrapper/containsallmatchingelements
  summary: Returns whether or not all of the given react elements in patternNodes match an element in the wrapper's render tree
  description: "# .containsAllMatchingElements(patternNodes) =\\> Boolean\n\nReturns whether or not all of the given react elements in `patternNodes` match an element in the wrapper's render tree. Every single element of `patternNodes` must be matched one or more times. Matching follows the rules for `containsMatchingElement`.\n\n## Arguments\n\n1.  `patternNodes` (`Array<ReactElement>`): The array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has nodes anywhere in its render tree that looks like the nodes passed in.\n\n## Example\n\n``` jsx\nconst style = { fontSize: 13 };\nconst wrapper = mount((\n  <div>\n    <span className=\"foo\">Hello</span>\n    <div style={style}>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.containsAllMatchingElements([\n  <span>Hello</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.containsAllMatchingElements()` expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array of ReactElement or a JSX expression.\n- Keep in mind that this method determines matching based on the matching of the node's children as well.\n\n## Related Methods\n\n- [`.matchesElement() => ReactWrapper`](matcheselement) - rules for matching each node\n- [`.containsMatchingElement() => ReactWrapper`](containsmatchingelement) - rules for matching whole wrapper\n- [`.containsAnyMatchingElements() => ReactWrapper`](containsanymatchingelements) - must match at least one in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsAllMatchingElements.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsAllMatchingElements.html)"
- name: .containsAnyMatchingElements()
  id: docs/api/shallowwrapper/containsanymatchingelements
  summary: Returns whether or not at least one of the given react elements in patternNodes matches an element in the wrapper's render tree
  description: "# .containsAnyMatchingElements(patternNodes) =\\> Boolean\n\nReturns whether or not at least one of the given react elements in `patternNodes` matches an element in the wrapper's render tree. One or more elements of `patternNodes` must be matched one or more times. Matching follows the rules for `containsMatchingElement`.\n\n## Arguments\n\n1.  `patternNodes` (`Array<ReactElement>`): The array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in its render tree that looks like one of the array passed in.\n\n## Example\n\n``` jsx\nconst style = { fontSize: 13 };\nconst wrapper = shallow((\n  <div>\n    <span className=\"foo\">Hello</span>\n    <div style={style}>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.containsAnyMatchingElements([\n  <span>Bonjour</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.containsAnyMatchingElements()` expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n\n## Related Methods\n\n- [`.matchesElement() => ShallowWrapper`](matcheselement) - rules for matching each node\n- [`.containsMatchingElement() => ShallowWrapper`](containsmatchingelement) - rules for matching whole wrapper\n- [`.containsAllMatchingElements() => ShallowWrapper`](containsallmatchingelements) - must match all nodes in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsAnyMatchingElements.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsAnyMatchingElements.html)"
- name: .containsAnyMatchingElements()
  id: docs/api/reactwrapper/containsanymatchingelements
  summary: Returns whether or not at least one of the given react elements in patternNodes matches an element in the wrapper's render tree
  description: "# .containsAnyMatchingElements(patternNodes) =\\> Boolean\n\nReturns whether or not at least one of the given react elements in `patternNodes` matches an element in the wrapper's render tree. One or more elements of `patternNodes` must be matched one or more times. Matching follows the rules for `containsMatchingElement`.\n\n## Arguments\n\n1.  `patternNodes` (`Array<ReactElement>`): The array of nodes whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in its render tree that looks like one of the array passed in.\n\n## Example\n\n``` jsx\nconst style = { fontSize: 13 };\nconst wrapper = mount((\n  <div>\n    <span className=\"foo\">Hello</span>\n    <div style={style}>Goodbye</div>\n    <span>Again</span>\n  </div>\n));\n\nexpect(wrapper.containsAnyMatchingElements([\n  <span>Bonjour</span>,\n  <div>Goodbye</div>,\n])).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.containsAnyMatchingElements()` expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n\n## Related Methods\n\n- [`.matchesElement() => ReactWrapper`](matcheselement) - rules for matching each node\n- [`.containsMatchingElement() => ReactWrapper`](containsmatchingelement) - rules for matching whole wrapper\n- [`.containsAllMatchingElements() => ReactWrapper`](containsallmatchingelements) - must match all nodes in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsAnyMatchingElements.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsAnyMatchingElements.html)"
- name: .containsMatchingElement()
  id: docs/api/shallowwrapper/containsmatchingelement
  summary: Returns whether or not a patternNode react element matches any element in the render tree
  description: "# .containsMatchingElement(patternNode) =\\> Boolean\n\nReturns whether or not a `patternNode` react element matches any element in the render tree.\n\n- the matches can happen anywhere in the wrapper's contents\n- the wrapper can contain more than one node; all are searched\n\nOtherwise, the match follows the same rules as `matchesElement`.\n\n## Arguments\n\n1.  `patternNode` (`ReactElement`): The node whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in its render tree that matches the one passed in.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div data-foo=\"foo\" data-bar=\"bar\">Hello</div>\n  </div>\n));\n\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\">Hello</div>)).to.equal(true);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\">Hello</div>)).to.equal(true);\n\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">Hello</div>)).to.equal(false);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"Hello\">Hello</div>)).to.equal(false);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" />)).to.equal(false);\n```\n\n## Common Gotchas\n\n- `.containsMatchingElement()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n\n## Related Methods\n\n- [`.containsAllMatchingElements() => ShallowWrapper`](containsallmatchingelements) - must match all nodes in patternNodes\n- [`.containsAnyMatchingElements() => ShallowWrapper`](containsanymatchingelements) - must match at least one in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsMatchingElement.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/containsMatchingElement.html)"
- name: .containsMatchingElement()
  id: docs/api/reactwrapper/containsmatchingelement
  summary: Returns whether or not a patternNode react element matches any element in the render tree
  description: "# .containsMatchingElement(patternNode) =\\> Boolean\n\nReturns whether or not a `patternNode` react element matches any element in the render tree.\n\n- the matches can happen anywhere in the wrapper's contents\n- the wrapper can contain more than one node; all are searched\n\nOtherwise, the match follows the same rules as `matchesElement`.\n\n## Arguments\n\n1.  `patternNode` (`ReactElement`): The node whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in its render tree that matches the one passed in.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div data-foo=\"foo\" data-bar=\"bar\">Hello</div>\n  </div>\n));\n\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\">Hello</div>)).to.equal(true);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\">Hello</div>)).to.equal(true);\n\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" data-baz=\"baz\">Hello</div>)).to.equal(false);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"Hello\">Hello</div>)).to.equal(false);\nexpect(wrapper.containsMatchingElement(<div data-foo=\"foo\" data-bar=\"bar\" />)).to.equal(false);\n```\n\n## Common Gotchas\n\n- `.containsMatchingElement()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n\n## Related Methods\n\n- [`.containsAllMatchingElements() => ReactWrapper`](containsallmatchingelements) - must match all nodes in patternNodes\n- [`.containsAnyMatchingElements() => ReactWrapper`](containsanymatchingelements) - must match at least one in patternNodes\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsMatchingElement.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/containsMatchingElement.html)"
- name: .context()
  id: docs/api/shallowwrapper/context
  summary: Returns the context hash for the root node of the wrapper
  description: "# .context(\\[key\\]) =\\> Any\n\nReturns the context hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n\n## Arguments\n\n1.  `key` (`String` \\[optional\\]): If provided, the return value will be the `this.context[key]` of the root component instance.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(\n  <MyComponent />,\n  { context: { foo: 10 } },\n);\nexpect(wrapper.context().foo).to.equal(10);\nexpect(wrapper.context('foo')).to.equal(10);\n```\n\n## Related Methods\n\n- [`.props() => Object`](props)\n- [`.prop(key) => Any`](prop)\n- [`.state([key]) => Any`](state)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/context.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/context.html)"
- name: .context()
  id: docs/api/reactwrapper/context
  summary: Returns the context hash for the root node of the wrapper
  description: "# .context(\\[key\\]) =\\> Any\n\nReturns the context hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n\n## Arguments\n\n1.  `key` (`String` \\[optional\\]): If provided, the return value will be the `this.context[key]` of the root component instance.\n\n## Example\n\n``` jsx\nconst wrapper = mount(\n  <MyComponent />,\n  { context: { foo: 10 } },\n);\n\nexpect(wrapper.context().foo).to.equal(10);\nexpect(wrapper.context('foo')).to.equal(10);\n```\n\n## Related Methods\n\n- [`.state([key]) => Any`](state)\n- [`.props() => Object`](props)\n- [`.prop(key) => Any`](prop)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/context.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/context.html)"
- name: .debug()
  id: docs/api/shallowwrapper/debug
  summary: Returns an HTML-like string of the wrapper for debugging purposes
  description: "# .debug(\\[options\\]) =\\> String\n\nReturns an HTML-like string of the wrapper for debugging purposes. Useful to print out to the console when tests are not passing when you expect them to.\n\n## Arguments\n\n`options` (`Object` \\[optional\\]):\n\n- `options.ignoreProps`: (`Boolean` \\[optional\\]): Whether props should be omitted in the resulting string. Props are included by default.\n- `options.verbose`: (`Boolean` \\[optional\\]): Whether arrays and objects passed as props should be verbosely printed.\n\n## Returns\n\n`String`: The resulting string.\n\n## Examples\n\n``` jsx\nfunction Book({ title, pages }) {\n  return (\n    <div>\n      <h1 className=\"title\">{title}</h1>\n      {pages && (\n        <NumberOfPages\n          pages={pages}\n          object={{ a: 1, b: 2 }}\n        />\n      )}\n    </div>\n  );\n}\nBook.propTypes = {\n  title: PropTypes.string.isRequired,\n  pages: PropTypes.number,\n};\nBook.defaultProps = {\n  pages: null,\n};\n```\n\n``` jsx\nconst wrapper = shallow(<Book title=\"Huckleberry Finn\" />);\nconsole.log(wrapper.debug());\n```\n\nOutputs to console:\n\n``` text\n<div>\n <h1 className=\"title\">Huckleberry Finn</h1>\n</div>\n```\n\n``` jsx\nconst wrapper = shallow((\n  <Book\n    title=\"Huckleberry Finn\"\n    pages=\"633 pages\"\n  />\n));\nconsole.log(wrapper.debug());\n```\n\nOutputs to console:\n\n``` text\n<div>\n  <h1 className=\"title\">Huckleberry Finn</h1>\n  <NumberOfPages pages=\"633 pages\" object={{...}}/>\n</div>\n```\n\n``` jsx\nconst wrapper = shallow((\n  <Book\n    title=\"Huckleberry Finn\"\n    pages=\"633 pages\"\n  />\n));\nconsole.log(wrapper.debug({ ignoreProps: true }));\n```\n\nOutputs to console:\n\n``` text\n<div>\n  <h1>Huckleberry Finn</h1>\n  <NumberOfPages />\n</div>\n```\n\n``` jsx\nconst wrapper = shallow((\n  <Book\n    title=\"Huckleberry Finn\"\n    pages=\"633 pages\"\n  />\n));\nconsole.log(wrapper.debug({ verbose: true }));\n```\n\nOutputs to console:\n\n``` text\n<div>\n  <h1 className=\"title\">Huckleberry Finn</h1>\n  <NumberOfPages pages=\"633 pages\" object={{ a: 1, b: 2 }}/>\n</div>\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/debug.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/debug.html)"
- name: .debug()
  id: docs/api/reactwrapper/debug
  summary: Returns an HTML-like string of the wrapper for debugging purposes
  description: "# .debug(\\[options\\]) =\\> String\n\nReturns an HTML-like string of the wrapper for debugging purposes. Useful to print out to the console when tests are not passing when you expect them to.\n\n## Arguments\n\n`options` (`Object` \\[optional\\]):\n\n- `options.ignoreProps`: (`Boolean` \\[optional\\]): Whether props should be omitted in the resulting string. Props are included by default.\n- `options.verbose`: (`Boolean` \\[optional\\]): Whether arrays and objects passed as props should be verbosely printed.\n\n## Returns\n\n`String`: The resulting string.\n\n## Examples\n\nSay we have the following components:\n\n``` jsx\nfunction Foo() {\n  return (\n    <div className=\"foo\">\n      <span>Foo</span>\n    </div>\n  );\n}\n\nfunction Bar() {\n  return (\n    <div className=\"bar\">\n      <span>Non-Foo</span>\n      <Foo baz=\"bax\" object={{ a: 1, b: 2 }} />\n    </div>\n  );\n}\n```\n\nIn this case, running:\n\n``` jsx\nconsole.log(mount(<Bar id=\"2\" />).debug());\n```\n\nWould output the following to the console:\n\n``` text\n<Bar id=\"2\">\n  <div className=\"bar\">\n    <span>\n      Non-Foo\n    </span>\n    <Foo baz=\"bax\" object={{...}}>\n      <div className=\"foo\">\n        <span>\n          Foo\n        </span>\n      </div>\n    </Foo>\n  </div>\n</Bar>\n```\n\nLikewise, running:\n\n``` jsx\nconsole.log(mount(<Bar id=\"2\" />).find(Foo).debug());\n```\n\nWould output the following to the console:\n\n``` text\n<Foo baz=\"bax\">\n  <div className=\"foo\">\n    <span>\n      Foo\n    </span>\n  </div>\n</Foo>\n```\n\nand:\n\n``` jsx\nconsole.log(mount(<Bar id=\"2\" />).find(Foo).debug({ ignoreProps: true }));\n```\n\nWould output the following to the console:\n\n``` text\n<Foo>\n  <div>\n    <span>\n      Foo\n    </span>\n  </div>\n</Foo>\n```\n\nand:\n\n``` jsx\nconsole.log(mount(<Bar id=\"2\" />).find(Foo).debug({ verbose: true }));\n```\n\nWould output the following to the console:\n\n``` text\n<Foo baz=\"bax\" object={{ a: 1, b: 2 }}>\n  <div className=\"foo\">\n    <span>\n      Foo\n    </span>\n  </div>\n</Foo>\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/debug.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/debug.html)"
- name: .detach()
  id: docs/api/reactwrapper/detach
  summary: Detaches the react tree from the DOM
  description: "# .detach() =\\> void\n\nDetaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n\nThis method will most commonly be used as a \"cleanup\" method if you decide to use the `attachTo` or `hydrateIn` option in `mount(node, options)`.\n\nThe method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should not be doing anything with this wrapper after this method is called.\n\nUsing `attachTo`/`hydrateIn` is not generally recommended unless it is absolutely necessary to test something. It is your responsibility to clean up after yourself at the end of the test if you do decide to use it, though.\n\n## Examples\n\nWith the `attachTo` option, you can mount components to attached DOM elements:\n\n``` jsx\n// render a component directly into document.body\nconst wrapper = mount(<Bar />, { attachTo: document.body });\n\n// Or, with the `hydrateIn` option, you can mount components on top of existing DOM elements:\n// hydrate a component directly onto document.body\nconst hydratedWrapper = mount(<Bar />, { hydrateIn: document.body });\n\n// we can see that the component is rendered into the document\nexpect(wrapper.find('.in-bar')).to.have.lengthOf(1);\nexpect(document.body.childNodes).to.have.lengthOf(1);\n\n// detach it to clean up after yourself\nwrapper.detach();\n\n// now we can see that\nexpect(document.body.childNodes).to.have.lengthOf(0);\n```\n\nSimilarly, if you want to create some one-off elements for your test to mount into:\n\n``` jsx\n// create a div in the document to mount into\nconst div = global.document.createElement('div');\nglobal.document.body.appendChild(div);\n\n// div is empty. body has the div attached.\nexpect(document.body.childNodes).to.have.lengthOf(1);\nexpect(div.childNodes).to.have.lengthOf(0);\n\n// mount a component passing div into the `attachTo` option\nconst wrapper = mount(<Foo />, { attachTo: div });\n// or, mount a component passing div into the `hydrateIn` option\nconst hydratedWrapper = mount(<Foo />, { hydrateIn: div });\n\n// we can see now the component is rendered into the document\nexpect(wrapper.find('.in-foo')).to.have.lengthOf(1);\nexpect(document.body.childNodes).to.have.lengthOf(1);\nexpect(div.childNodes).to.have.lengthOf(1);\n\n// call detach to clean up\nwrapper.detach();\n\n// div is now empty, but still attached to the document\nexpect(document.body.childNodes).to.have.lengthOf(1);\nexpect(div.childNodes).to.have.lengthOf(0);\n\n// remove div if you want\nglobal.document.body.removeChild(div);\n\nexpect(document.body.childNodes).to.have.lengthOf(0);\nexpect(div.childNodes).to.have.lengthOf(0);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/detach.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/detach.html)"
- name: .dive()
  id: docs/api/shallowwrapper/dive
  summary: Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result
  description: "# .dive(\\[options\\]) =\\> ShallowWrapper\n\nShallow render the one non-DOM child of the current wrapper, and return a wrapper around the result. It must be a single-node wrapper, and the node must be a React component.\n\nThere is no corresponding `dive` method for ReactWrappers.\n\nNOTE: can only be called on a wrapper of a single non-DOM component element node, otherwise it will throw an error. If you have to shallow-wrap a wrapper with multiple child nodes, use [`.shallow()`](shallow).\n\n## Arguments\n\n1.  `options` (`Object` \\[optional\\]):\n2.  `options.context`: (`Object` \\[optional\\]): Context to be passed into the component\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the current node after it's been shallow rendered.\n\n## Examples\n\n``` jsx\nfunction Bar() {\n  return (\n    <div>\n      <div className=\"in-bar\" />\n    </div>\n  );\n}\n```\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.find('.in-bar')).to.have.lengthOf(0);\nexpect(wrapper.find(Bar)).to.have.lengthOf(1);\nexpect(wrapper.find(Bar).dive().find('.in-bar')).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/dive.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/dive.html)"
- name: .equals()
  id: docs/api/shallowwrapper/equals
  summary: Returns whether or not the current wrapper root node render tree looks like the one passed in
  description: "# .equals(node) =\\> Boolean\n\nReturns whether or not the current wrapper root node render tree looks like the one passed in.\n\n## Arguments\n\n1.  `node` (`ReactElement`): The node whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in it's render tree that looks like the one passed in.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.equals(<div className=\"foo bar\" />)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.equals()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n- Following React's behavior, `.equals()` ignores properties whose values are `undefined`.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/equals.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/equals.html)"
- name: .equals()
  id: docs/api/reactwrapper/equals
  summary: Returns whether or not the current wrapper root node render tree looks like the one passed in
  description: "# .equals(node) =\\> Boolean\n\nReturns whether or not the current wrapper root node render tree looks like the one passed in.\n\n## Arguments\n\n1.  `node` (`ReactElement`): The node whose presence you are detecting in the current instance's render tree.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper has a node anywhere in it's render tree that looks like the one passed in.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.equals(<div className=\"foo bar\" />)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.equals()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines equality based on the equality of the node's children as well.\n- Following React's behavior, `.equals()` ignores properties whose values are `undefined`.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/equals.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/equals.html)"
- name: .every()
  id: docs/api/shallowwrapper/every
  summary: Returns whether or not all of the nodes in the wrapper match the provided selector
  description: "# .every(selector) =\\> Boolean\n\nReturns whether or not all of the nodes in the wrapper match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: True if every node in the current wrapper matched the provided selector.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').every('.foo')).to.equal(true);\nexpect(wrapper.find('.foo').every('.qoo')).to.equal(false);\nexpect(wrapper.find('.foo').every('.bar')).to.equal(false);\n```\n\n## Related Methods\n\n- [`.someWhere(predicate) => Boolean`](somewhere)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/every.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/every.html)"
- name: .every()
  id: docs/api/reactwrapper/every
  summary: Returns whether or not all of the nodes in the wrapper match the provided selector
  description: "# .every(selector) =\\> Boolean\n\nReturns whether or not all of the nodes in the wrapper match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: True if every node in the current wrapper matched the provided selector.\n\n## Examples\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').every('.foo')).to.equal(true);\nexpect(wrapper.find('.foo').every('.qoo')).to.equal(false);\nexpect(wrapper.find('.foo').every('.bar')).to.equal(false);\n```\n\n## Related Methods\n\n- [`.someWhere(predicate) => Boolean`](somewhere)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/every.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/every.html)"
- name: .everyWhere()
  id: docs/api/shallowwrapper/everywhere
  summary: Returns whether or not all of the nodes in the wrapper pass the provided predicate function
  description: "# .everyWhere(fn) =\\> Boolean\n\nReturns whether or not all of the nodes in the wrapper pass the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ShallowWrapper => Boolean`): A predicate function to match the nodes.\n\n## Returns\n\n`Boolean`: True if every node in the current wrapper passed the predicate function.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('foo'))).to.equal(true);\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('qoo'))).to.equal(false);\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('bar'))).to.equal(false);\n```\n\n## Related Methods\n\n- [`.some(selector) => Boolean`](some)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/everyWhere.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/everyWhere.html)"
- name: .everyWhere()
  id: docs/api/reactwrapper/everywhere
  summary: Returns whether or not all of the nodes in the wrapper pass the provided predicate function
  description: "# .everyWhere(fn) =\\> Boolean\n\nReturns whether or not all of the nodes in the wrapper pass the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ReactWrapper => Boolean`): A predicate function to match the nodes.\n\n## Returns\n\n`Boolean`: True if every node in the current wrapper passed the predicate function.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('foo'))).to.equal(true);\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('qoo'))).to.equal(false);\nexpect(wrapper.find('.foo').everyWhere((n) => n.hasClass('bar'))).to.equal(false);\n```\n\n## Related Methods\n\n- [`.some(selector) => Boolean`](some)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/everyWhere.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/everyWhere.html)"
- name: .exists()
  id: docs/api/shallowwrapper/exists
  summary: Returns whether or not any nodes exist in the wrapper
  description: "# .exists(\\[selector\\]) =\\> Boolean\n\nReturns whether or not any nodes exist in the wrapper. Or, if a selector is passed in, whether that selector has any matches in the wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): The selector to check existence for.\n\n## Returns\n\n`Boolean`: whether or not any nodes are on the list, or the selector had any matches.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<div className=\"some-class\" />);\nexpect(wrapper.exists('.some-class')).to.equal(true);\nexpect(wrapper.find('.other-class').exists()).to.equal(false);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/exists.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/exists.html)"
- name: .exists()
  id: docs/api/reactwrapper/exists
  summary: Returns whether or not any nodes exist in the wrapper
  description: "# .exists(\\[selector\\]) =\\> Boolean\n\nReturns whether or not any nodes exist in the wrapper. Or, if a selector is passed in, whether that selector has any matches in the wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): The selector to check existence for.\n\n## Returns\n\n`Boolean`: whether or not any nodes are on the list, or the selector had any matches.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<div className=\"some-class\" />);\nexpect(wrapper.exists('.some-class')).to.equal(true);\nexpect(wrapper.find('.other-class').exists()).to.equal(false);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/exists.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/exists.html)"
- name: .filter()
  id: docs/api/shallowwrapper/filter
  summary: Returns a new wrapper with only the nodes of the current wrapper that match the provided selector
  description: "# .filter(selector) =\\> ShallowWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.foo').filter('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.filterWhere(predicate) => ShallowWrapper`](filterwhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/filter.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/filter.html)"
- name: .filter()
  id: docs/api/reactwrapper/filter
  summary: Returns a new wrapper with only the nodes of the current wrapper that match the provided selector
  description: "# .filter(selector) =\\> ReactWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('.foo').filter('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.filterWhere(predicate) => ReactWrapper`](filterwhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/filter.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/filter.html)"
- name: .filterWhere()
  id: docs/api/shallowwrapper/filterwhere
  summary: Returns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true
  description: "# .filterWhere(fn) =\\> ShallowWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true.\n\n## Arguments\n\n1.  `predicate` (`ShallowWrapper => Boolean`): A predicate function that is passed a wrapped node.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nconst complexFoo = wrapper.find('.foo').filterWhere((n) => typeof n.type() !== 'string');\nexpect(complexFoo).to.have.lengthOf(4);\n```\n\n## Related Methods\n\n- [`.filter(selector) => ShallowWrapper`](filter)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/filterWhere.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/filterWhere.html)"
- name: .filterWhere()
  id: docs/api/reactwrapper/filterwhere
  summary: Returns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true
  description: "# .filterWhere(fn) =\\> ReactWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true.\n\n## Arguments\n\n1.  `predicate` (`ReactWrapper => Boolean`): A predicate function that is passed a wrapped node.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nconst complexComponents = wrapper.find('.foo').filterWhere((n) => typeof n.type() !== 'string');\nexpect(complexComponents).to.have.lengthOf(4);\n```\n\n## Related Methods\n\n- [`.filter(selector) => ReactWrapper`](filter)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/filterWhere.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/filterWhere.html)"
- name: .find()
  id: docs/api/shallowwrapper/find
  summary: Finds every node in the render tree of the current wrapper that matches the provided selector
  description: "# .find(selector) =\\> ShallowWrapper\n\nFinds every node in the render tree of the current wrapper that matches the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the found nodes.\n\n## Examples\n\nCSS Selectors:\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(3);\n\n// compound selector\nexpect(wrapper.find('div.some-class')).to.have.lengthOf(3);\n\n// CSS id selector\nexpect(wrapper.find('#foo')).to.have.lengthOf(1);\n```\n\nComponent Constructors:\n\n``` jsx\nimport Foo from '../components/Foo';\n\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo)).to.have.lengthOf(1);\n```\n\nComponent Display Name:\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('Foo')).to.have.lengthOf(1);\n```\n\nObject Property Selector:\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find({ prop: 'value' })).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.findWhere(predicate) => ShallowWrapper`](findwhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/find.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/find.html)"
- name: .find()
  id: docs/api/reactwrapper/find
  summary: Finds every node in the render tree of the current wrapper that matches the provided selector
  description: "# .find(selector) =\\> ReactWrapper\n\nFinds every node in the render tree of the current wrapper that matches the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the found nodes.\n\n## Examples\n\nCSS Selectors:\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(3);\n\n// compound selector\nexpect(wrapper.find('div.some-class')).to.have.lengthOf(3);\n\n// CSS id selector\nexpect(wrapper.find('#foo')).to.have.lengthOf(1);\n\n// property selector\nexpect(wrapper.find('[htmlFor=\"checkbox\"]')).to.have.lengthOf(1);\n```\n\nComponent Constructors:\n\n``` jsx\nimport Foo from '../components/Foo';\n\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo)).to.have.lengthOf(1);\n```\n\nComponent Display Name:\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('Foo')).to.have.lengthOf(1);\n```\n\nObject Property Selector:\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find({ prop: 'value' })).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.findWhere(predicate) => ReactWrapper`](findwhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/find.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/find.html)"
- name: .findWhere()
  id: docs/api/shallowwrapper/findwhere
  summary: Finds every node in the render tree that returns true for the provided predicate function
  description: "# .findWhere(fn) =\\> ShallowWrapper\n\nFinds every node in the render tree that returns true for the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ShallowWrapper => Boolean`): A predicate function called with the passed in wrapped nodes.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the found nodes.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nconst complexComponents = wrapper.findWhere((n) => n.type() !== 'string');\nexpect(complexComponents).to.have.lengthOf(8);\n```\n\n## Related Methods\n\n- [`.find(selector) => ShallowWrapper`](find)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/findWhere.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/findWhere.html)"
- name: .findWhere()
  id: docs/api/reactwrapper/findwhere
  summary: Finds every node in the render tree that returns true for the provided predicate function
  description: "# .findWhere(fn) =\\> ReactWrapper\n\nFinds every node in the render tree that returns true for the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ReactWrapper => Boolean`): A predicate function called with the passed in wrapped nodes.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the found nodes.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nconst complexComponents = wrapper.findWhere((n) => typeof n.type() !== 'string');\nexpect(complexComponents).to.have.lengthOf(8);\n```\n\n## Related Methods\n\n- [`.find(selector) => ReactWrapper`](find)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/findWhere.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/findWhere.html)"
- name: .first()
  id: docs/api/shallowwrapper/first
  summary: Reduce the set of matched nodes to the first in the set, just like .at(0)
  description: "# .first() =\\> ShallowWrapper\n\nReduce the set of matched nodes to the first in the set, just like `.at(0)`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the first node in the set.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo).first().props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ShallowWrapper`](at) - retrieve any wrapper node\n- [`.last() => ShallowWrapper`](last)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/first.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/first.html)"
- name: .first()
  id: docs/api/reactwrapper/first
  summary: Reduce the set of matched nodes to the first in the set, just like .at(0)
  description: "# .first() =\\> ReactWrapper\n\nReduce the set of matched nodes to the first in the set, just like `.at(0)`.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the first node in the set.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo).first().props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ReactWrapper`](at) - retrieve any wrapper node\n- [`.last() => ReactWrapper`](last)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/first.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/first.html)"
- name: .forEach()
  id: docs/api/shallowwrapper/foreach
  summary: Iterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument
  description: "# .forEach(fn) =\\> Self\n\nIterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument.\n\n## Arguments\n\n1.  `fn` (`Function ( ShallowWrapper node, Number index )`): A callback to be run for every node in the collection. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\n\nwrapper.find('.foo').forEach((node) => {\n  expect(node.hasClass('foo')).to.equal(true);\n});\n```\n\n## Related Methods\n\n- [`.map(fn) => ShallowWrapper`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/forEach.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/forEach.html)"
- name: .forEach()
  id: docs/api/reactwrapper/foreach
  summary: Iterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument
  description: "# .forEach(fn) =\\> Self\n\nIterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument.\n\n## Arguments\n\n1.  `fn` (`Function ( ReactWrapper node, Number index )`): A callback to be run for every node in the collection. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\n\nwrapper.find('.foo').forEach((node) => {\n  expect(node.hasClass('foo')).to.equal(true);\n});\n```\n\n## Related Methods\n\n- [`.map(fn) => ReactWrapper`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/forEach.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/forEach.html)"
- name: .get()
  id: docs/api/shallowwrapper/get
  summary: Returns the node at a given index of the current wrapper
  description: "# .get(index) =\\> ReactElement\n\nReturns the node at a given index of the current wrapper.\n\n## Arguments\n\n1.  `index` (`Number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ReactElement`: The retrieved node.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo).get(0).props.foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ShallowWrapper`](at) - same, but returns the React node in a single-node wrapper.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/get.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/get.html)"
- name: .get()
  id: docs/api/reactwrapper/get
  summary: Returns the node at a given index of the current wrapper
  description: "# .get(index) =\\> ReactElement\n\nReturns the node at a given index of the current wrapper.\n\n## Arguments\n\n1.  `index` (`Number`): A zero-based integer indicating which node to retrieve.\n\n## Returns\n\n`ReactElement`: The retrieved node.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo).get(0).props.foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ReactWrapper`](at) - same, but returns the React node in a single-node wrapper.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/get.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/get.html)"
- name: .getDOMNode()
  id: docs/api/reactwrapper/getdomnode
  summary: Returns the outer most DOMComponent of the current wrapper
  description: "# .getDOMNode() =\\> DOMComponent\n\nReturns the outer most DOMComponent of the current wrapper.\n\nNotes:\n\n- can only be called on a wrapper of a single node.\n- will raise if called on a wrapper of a stateless functional component.\n\n## Returns\n\n`DOMComponent`: The retrieved DOM component.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.getDOMNode()).to.have.property('className');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/getDOMNode.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/getDOMNode.html)"
- name: .getElement()
  id: docs/api/shallowwrapper/getelement
  summary: Returns the wrapped ReactElement
  description: "# .getElement() =\\> ReactElement\n\nReturns the wrapped ReactElement.\n\nIf the current wrapper is wrapping the root component, returns the root component's latest render output.\n\n## Returns\n\n`ReactElement`: The retrieved ReactElement.\n\n## Examples\n\n``` jsx\nconst element = (\n  <div>\n    <span />\n    <span />\n  </div>\n);\n\nfunction MyComponent() {\n  return element;\n}\n\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.getElement()).to.equal(element);\n```\n\n## Related Methods\n\n- [`.getElements() => Array<ReactElement>`](getelements)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getElement.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getElement.html)"
- name: .getElements()
  id: docs/api/shallowwrapper/getelements
  summary: If the current wrapper is wrapping the root component, returns the root component's latest render output wrapped in an array
  description: "# .getElements() =\\> Array\\<ReactElement\\>\n\nReturns the wrapped ReactElements\n\nIf the current wrapper is wrapping the root component, returns the root component's latest render output wrapped in an array.\n\n## Returns\n\n`Array<ReactElement>`: The retrieved ReactElements.\n\n## Examples\n\n``` jsx\nconst one = <span />;\nconst two = <span />;\n\nfunction Test() {\n  return (\n    <div>\n      {one}\n      {two}\n    </div>\n  );\n}\n\nconst wrapper = shallow(<Test />);\nexpect(wrapper.find('span').getElements()).to.deep.equal([one, two]);\n```\n\n## Related Methods\n\n- [`.getElement() => ReactElement`](getelement)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getElements.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getElements.html)"
- name: .getWrappingComponent()
  id: docs/api/shallowwrapper/getwrappingcomponent
  summary: If a wrappingComponent was passed in options, this methods returns a ShallowWrapper around the rendered wrappingComponent
  description: "# .getWrappingComponent() =\\> ShallowWrapper\n\nIf a `wrappingComponent` was passed in `options`, this methods returns a `ShallowWrapper` around the rendered `wrappingComponent`. This `ShallowWrapper` can be used to update the `wrappingComponent`'s props, state, etc.\n\n## Returns\n\n`ShallowWrapper`: A `ShallowWrapper` around the rendered `wrappingComponent`\n\n## Examples\n\n``` jsx\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport store from './my/app/store';\nimport mockStore from './my/app/mockStore';\n\nfunction MyProvider(props) {\n  const { children, customStore } = props;\n\n  return (\n    <Provider store={customStore || store}>\n      <Router>\n        {children}\n      </Router>\n    </Provider>\n  );\n}\nMyProvider.propTypes = {\n  children: PropTypes.node,\n  customStore: PropTypes.shape({}),\n};\nMyProvider.defaultProps = {\n  children: null,\n  customStore: null,\n};\n\nconst wrapper = shallow(<MyComponent />, {\n  wrappingComponent: MyProvider,\n});\nconst provider = wrapper.getWrappingComponent();\nprovider.setProps({ customStore: mockStore });\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getWrappingComponent.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/getWrappingComponent.html)"
- name: .getWrappingComponent()
  id: docs/api/reactwrapper/getwrappingcomponent
  summary: If a wrappingComponent was passed in options, this methods returns a ReactWrapper around the rendered wrappingComponent
  description: "# .getWrappingComponent() =\\> ReactWrapper\n\nIf a `wrappingComponent` was passed in `options`, this methods returns a `ReactWrapper` around the rendered `wrappingComponent`. This `ReactWrapper` can be used to update the `wrappingComponent`'s props, state, etc.\n\n## Returns\n\n`ReactWrapper`: A `ReactWrapper` around the rendered `wrappingComponent`\n\n## Examples\n\n``` jsx\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport store from './my/app/store';\nimport mockStore from './my/app/mockStore';\n\nfunction MyProvider(props) {\n  const { children, customStore } = props;\n\n  return (\n    <Provider store={customStore || store}>\n      <Router>\n        {children}\n      </Router>\n    </Provider>\n  );\n}\nMyProvider.propTypes = {\n  children: PropTypes.node,\n  customStore: PropTypes.shape({}),\n};\nMyProvider.defaultProps = {\n  children: null,\n  customStore: null,\n};\n\nconst wrapper = mount(<MyComponent />, {\n  wrappingComponent: MyProvider,\n});\nconst provider = wrapper.getWrappingComponent();\nprovider.setProps({ customStore: mockStore });\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/getWrappingComponent.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/getWrappingComponent.html)"
- name: .hasClass()
  id: docs/api/shallowwrapper/hasclass
  summary: Returns whether or not the wrapped node has a className prop including the passed in class name
  description: "# .hasClass(className) =\\> Boolean\n\nReturns whether or not the wrapped node has a `className` prop including the passed in class name. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `className` (`String` \\| `RegExp`): A single class name or a regex expression.\n\n## Returns\n\n`Boolean`: whether or not the wrapped node has the class.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.my-button').hasClass('disabled')).to.equal(true);\n```\n\n``` jsx\n// Searching using RegExp works fine when classes were injected by a jss decorator\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.my-button').hasClass(/(ComponentName)-(other)-(\\d+)/)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.hasClass()` expects a class name, NOT a CSS selector. `.hasClass('.foo')` should be `.hasClass('foo')`\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/hasClass.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/hasClass.html)"
- name: .hasClass()
  id: docs/api/reactwrapper/hasclass
  summary: Returns whether or not the wrapped node has a className prop including the passed in class name
  description: "# .hasClass(className) =\\> Boolean\n\nReturns whether or not the wrapped node has a `className` prop including the passed in class name. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `className` (`String` \\| `RegExp`): A single class name or a regex expression.\n\n## Returns\n\n`Boolean`: whether or not the wrapped node has found the class name.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('.my-button').hasClass('disabled')).to.equal(true);\n```\n\n``` jsx\n// Searching using RegExp works fine when classes were injected by a jss decorator\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('.my-button').hasClass(/(ComponentName)-(other)-(\\d+)/)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.hasClass()` expects a class name, NOT a CSS selector. `.hasClass('.foo')` should be `.hasClass('foo')`\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/hasClass.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/hasClass.html)"
- name: .hostNodes()
  id: docs/api/shallowwrapper/hostnodes
  summary: Returns a new wrapper with only host nodes
  description: "# .hostNodes() =\\> ShallowWrapper\n\nReturns a new wrapper with only host nodes. When using `react-dom`, host nodes are HTML elements rather than custom React components, e.g. `<div>` versus `<MyComponent>`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\nThe following code takes a wrapper with two nodes, one a `<MyComponent>` React component, and the other a `<span>`, and filters out the React component.\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <MyComponent className=\"foo\" />\n    <span className=\"foo\" />\n  </div>\n));\nconst twoNodes = wrapper.find('.foo');\nexpect(twoNodes.hostNodes()).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/hostNodes.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/hostNodes.html)"
- name: .hostNodes()
  id: docs/api/reactwrapper/hostnodes
  summary: Returns a new wrapper with only host nodes
  description: "# .hostNodes() =\\> ReactWrapper\n\nReturns a new wrapper with only host nodes. When using `react-dom`, host nodes are HTML elements rather than custom React components, e.g. `<div>` versus `<MyComponent>`.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\nThe following code takes a wrapper with two nodes, one a `<MyComponent>` React component, and the other a `<span>`, and filters out the React component.\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <MyComponent className=\"foo\" />\n    <span className=\"foo\" />\n  </div>\n));\nconst twoNodes = wrapper.find('.foo');\nexpect(twoNodes.hostNodes()).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/hostNodes.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/hostNodes.html)"
- name: .html()
  id: docs/api/shallowwrapper/html
  summary: Returns a string of the rendered HTML markup of the entire current render tree (not just the shallow-rendered part)
  description: "# .html() =\\> String\n\nReturns a string of the rendered HTML markup of the entire current render tree (not just the shallow-rendered part). It uses [static rendering](../render) internally. To see only the shallow-rendered part use [`.debug()`](debug).\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String`: The resulting HTML string\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return (<div className=\"in-foo\" />);\n}\n```\n\n``` jsx\nfunction Bar() {\n  return (\n    <div className=\"in-bar\">\n      <Foo />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Bar />);\nexpect(wrapper.html()).to.equal('<div class=\"in-bar\"><div class=\"in-foo\"></div></div>');\nexpect(wrapper.find(Foo).html()).to.equal('<div class=\"in-foo\"></div>');\n```\n\n``` jsx\nconst wrapper = shallow(<div><b>important</b></div>);\nexpect(wrapper.html()).to.equal('<div><b>important</b></div>');\n```\n\n## Related Methods\n\n- [`.text() => String`](text)\n- [`.debug() => String`](debug)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/html.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/html.html)"
- name: .html()
  id: docs/api/reactwrapper/html
  summary: Returns a string of the rendered HTML markup of the current render tree
  description: "# .html() =\\> String\n\nReturns a string of the rendered HTML markup of the current render tree. See also [`.debug()`](debug)\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String`: The resulting HTML string\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return (<div className=\"in-foo\" />);\n}\n```\n\n``` jsx\nfunction Bar() {\n  return (\n    <div className=\"in-bar\">\n      <Foo />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = mount(<Bar />);\nexpect(wrapper.html()).to.equal('<div class=\"in-bar\"><div class=\"in-foo\"></div></div>');\nexpect(wrapper.find(Foo).html()).to.equal('<div class=\"in-foo\"></div>');\n```\n\n``` jsx\nconst wrapper = mount(<div><b>important</b></div>);\nexpect(wrapper.html()).to.equal('<div><b>important</b></div>');\n```\n\n## Related Methods\n\n[`.text() => String`](text)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/html.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/html.html)"
- name: .instance()
  id: docs/api/shallowwrapper/instance
  summary: Returns the single-node wrapper's node's underlying class instance; this in its methods
  description: "# .instance() =\\> ReactComponent\n\nReturns the single-node wrapper's node's underlying class instance; `this` in its methods.\n\nNOTE: can only be called on a wrapper instance that is also the root instance. With React `16` and above, `instance()` returns `null` for stateless functional components.\n\n## Returns\n\n`ReactComponent|DOMComponent`: The retrieved instance.\n\n## Example\n\n``` jsx\nfunction Stateless() {\n  return <div>Stateless</div>;\n}\n\nclass Stateful extends React.Component {\n  render() {\n    return <div>Stateful</div>;\n  }\n}\n```\n\n## React 16.x\n\n``` jsx\ntest('shallow wrapper instance should be null', () => {\n  const wrapper = shallow(<Stateless />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.equal(null);\n});\n\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = shallow(<Stateful />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateful);\n});\n```\n\n## React 15.x\n\n``` jsx\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = shallow(<Stateless />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateless);\n});\n\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = shallow(<Stateful />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateful);\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/instance.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/instance.html)"
- name: .instance()
  id: docs/api/reactwrapper/instance
  summary: Returns the single-node wrapper's node's underlying class instance; this in its methods
  description: "# .instance() =\\> ReactComponent\n\nReturns the single-node wrapper's node's underlying class instance; `this` in its methods. It must be a single-node wrapper.\n\nNOTE: With React `16` and above, `instance()` returns `null` for stateless functional components.\n\n## Returns\n\n`ReactComponent|DOMComponent`: The retrieved instance.\n\n## Example\n\n``` jsx\nfunction Stateless() {\n  return <div>Stateless</div>;\n}\n\nclass Stateful extends React.Component {\n  render() {\n    return <div>Stateful</div>;\n  }\n}\n```\n\n## React 16.x\n\n``` jsx\ntest('shallow wrapper instance should be null', () => {\n  const wrapper = mount(<Stateless />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.equal(null);\n});\n\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = mount(<Stateful />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateful);\n});\n```\n\n## React 15.x\n\n``` jsx\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = mount(<Stateless />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateless);\n});\n\ntest('shallow wrapper instance should not be null', () => {\n  const wrapper = mount(<Stateful />);\n  const instance = wrapper.instance();\n\n  expect(instance).to.be.instanceOf(Stateful);\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/instance.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/instance.html)"
- name: .invoke()
  id: docs/api/shallowwrapper/invoke
  summary: Invokes a function prop
  description: "# .invoke(invokePropName)(...args) =\\> Any\n\nInvokes a function prop.\n\n## Arguments\n\n1.  `propName` (`String`): The function prop that is invoked\n2.  `...args` (`Any` \\[optional\\]): Arguments that is passed to the prop function\n\nThis essentially calls wrapper.prop(propName)(...args).\n\n## Returns\n\n`Any`: Returns the value from the prop function\n\n## Example\n\n``` jsx\nclass Foo extends React.Component {\n  loadData() {\n    return fetch();\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={() => this.loadData()}\n        >\n          Load more\n        </button>\n      </div>\n    );\n  }\n}\nconst wrapper = shallow(<Foo />);\nwrapper.find('button').invoke('onClick')().then(() => {\n  // expect()\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/invoke.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/invoke.html)"
- name: .invoke()
  id: docs/api/reactwrapper/invoke
  summary: Invokes a function prop
  description: "# .invoke(propName)(...args) =\\> Any\n\nInvokes a function prop. Note that in React 16.8+, `.invoke` will wrap your handler with [`ReactTestUtils.act`](https://reactjs.org/docs/test-utils.html#act) and call `.update()` automatically.\n\n## Arguments\n\n1.  `propName` (`String`): The function prop that is invoked\n2.  `...args` (`Any` \\[optional\\]): Arguments that is passed to the prop function\n\n## Returns\n\n`Any`: Returns the value from the prop function\n\n## Example\n\n``` jsx\nclass Foo extends React.Component {\n  loadData() {\n    return fetch();\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={() => this.loadData()}\n        >\n          Load more\n        </button>\n      </div>\n    );\n  }\n}\nconst wrapper = mount(<Foo />);\nwrapper.find('button').invoke('onClick')().then(() => {\n  // expect()\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/invoke.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/invoke.html)"
- name: .is()
  id: docs/api/shallowwrapper/is
  summary: Returns whether or not the single wrapped node matches the provided selector
  description: "# .is(selector) =\\> Boolean\n\nReturns whether or not the single wrapped node matches the provided selector. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: whether or not the wrapped node matches the provided selector.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<div className=\"some-class other-class\" />);\nexpect(wrapper.is('.some-class')).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/is.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/is.html)"
- name: .is()
  id: docs/api/reactwrapper/is
  summary: Returns whether or not the single wrapped node matches the provided selector
  description: "# .is(selector) =\\> Boolean\n\nReturns whether or not the single wrapped node matches the provided selector. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: whether or not the wrapped node matches the provided selector.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<div className=\"some-class other-class\" />);\nexpect(wrapper.is('.some-class')).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/is.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/is.html)"
- name: .isEmpty()
  id: docs/api/shallowwrapper/isempty
  summary: 'Deprecated: Use .exists() instead'
  description: "# .isEmpty() =\\> Boolean\n\n**Deprecated**: Use [`.exists()`](exists) instead.\n\nReturns whether or not the wrapper is empty.\n\n## Returns\n\n`Boolean`: whether or not the wrapper is empty.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<div className=\"some-class\" />);\nexpect(wrapper.find('.other-class').isEmpty()).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/isEmpty.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/isEmpty.html)"
- name: .isEmpty()
  id: docs/api/reactwrapper/isempty
  summary: 'Deprecated: Use .exists() instead'
  description: "# .isEmpty() =\\> Boolean\n\n**Deprecated**: Use [`.exists()`](exists) instead.\n\nReturns whether or not the wrapper is empty.\n\n## Returns\n\n`Boolean`: whether or not the wrapper is empty.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<div className=\"some-class\" />);\nexpect(wrapper.find('.other-class').isEmpty()).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/isEmpty.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/isEmpty.html)"
- name: .isEmptyRender()
  id: docs/api/shallowwrapper/isemptyrender
  summary: 'Returns whether or not the wrapper would ultimately render only the allowed falsy values: false or null'
  description: "# .isEmptyRender() =\\> Boolean\n\nReturns whether or not the wrapper would ultimately render only the allowed falsy values: `false` or `null`.\n\n## Returns\n\n`Boolean`: whether the return is falsy\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return null;\n}\n\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.isEmptyRender()).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/isEmptyRender.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/isEmptyRender.html)"
- name: .isEmptyRender()
  id: docs/api/reactwrapper/isemptyrender
  summary: 'Returns whether or not the wrapper would ultimately render only the allowed falsy values: false or null'
  description: "# .isEmptyRender() =\\> Boolean\n\nReturns whether or not the wrapper would ultimately render only the allowed falsy values: `false` or `null`.\n\n## Returns\n\n`Boolean`: whether the return is falsy\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return null;\n}\n\nconst wrapper = mount(<Foo />);\nexpect(wrapper.isEmptyRender()).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/isEmptyRender.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/isEmptyRender.html)"
- name: .key()
  id: docs/api/shallowwrapper/key
  summary: Returns the key value for the node of the current wrapper
  description: "# .key() =\\> String\n\nReturns the key value for the node of the current wrapper. It must be a single-node wrapper.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <ul>\n    {['foo', 'bar'].map((s) => <li key={s}>{s}</li>)}\n  </ul>\n)).find('li');\nexpect(wrapper.at(0).key()).to.equal('foo');\nexpect(wrapper.at(1).key()).to.equal('bar');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/key.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/key.html)"
- name: .key()
  id: docs/api/reactwrapper/key
  summary: Returns the key value for the node of the current wrapper
  description: "# .key() =\\> String\n\nReturns the key value for the node of the current wrapper. It must be a single-node wrapper.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <ul>\n    {['foo', 'bar'].map((s) => <li key={s}>{s}</li>)}\n  </ul>\n)).find('li');\nexpect(wrapper.at(0).key()).to.equal('foo');\nexpect(wrapper.at(1).key()).to.equal('bar');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/key.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/key.html)"
- name: .last()
  id: docs/api/shallowwrapper/last
  summary: Reduce the set of matched nodes to the last in the set, just like .at(length - 1)
  description: "# .last() =\\> ShallowWrapper\n\nReduce the set of matched nodes to the last in the set, just like `.at(length - 1)`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the last node in the set.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo).last().props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ShallowWrapper`](at) - retrieve a wrapper node by index\n- [`.first() => ShallowWrapper`](first)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/last.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/last.html)"
- name: .last()
  id: docs/api/reactwrapper/last
  summary: Reduce the set of matched nodes to the last in the set, just like .at(length - 1)
  description: "# .last() =\\> ReactWrapper\n\nReduce the set of matched nodes to the last in the set, just like `.at(length - 1)`.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the last node in the set.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find(Foo).last().props().foo).to.equal('bar');\n```\n\n## Related Methods\n\n- [`.at(index) => ReactWrapper`](at) - retrieve a wrapper node by index\n- [`.first() => ReactWrapper`](first)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/last.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/last.html)"
- name: .map()
  id: docs/api/shallowwrapper/map
  summary: Maps the current array of nodes to another array
  description: "# .map(fn) =\\> Array\\<Any\\>\n\nMaps the current array of nodes to another array. Each node is passed in as a `ShallowWrapper` to the map function.\n\n## Arguments\n\n1.  `fn` (`Function ( ShallowWrapper node, Number index ) => Any`): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.\n\n## Returns\n\n`Array<Any>`: Returns an array of the returned values from the mapping function..\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo\">bax</div>\n    <div className=\"foo\">bar</div>\n    <div className=\"foo\">baz</div>\n  </div>\n));\n\nconst texts = wrapper.find('.foo').map((node) => node.text());\nexpect(texts).to.eql(['bax', 'bar', 'baz']);\n```\n\n## Related Methods\n\n- [`.forEach(fn) => ShallowWrapper`](foreach)\n- [`.reduce(fn[, initialValue]) => Any`](reduce)\n- [`.reduceRight(fn[, initialValue]) => Any`](reduceright)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/map.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/map.html)"
- name: .map()
  id: docs/api/reactwrapper/map
  summary: Maps the current array of nodes to another array
  description: "# .map(fn) =\\> Array\\<Any\\>\n\nMaps the current array of nodes to another array. Each node is passed in as a `ReactWrapper` to the map function.\n\n## Arguments\n\n1.  `fn` (`Function ( ReactWrapper node, Number index ) => Any`): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.\n\n## Returns\n\n`Array<Any>`: Returns an array of the returned values from the mapping function..\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo\">bax</div>\n    <div className=\"foo\">bar</div>\n    <div className=\"foo\">baz</div>\n  </div>\n));\n\nconst texts = wrapper.find('.foo').map((node) => node.text());\nexpect(texts).to.eql(['bax', 'bar', 'baz']);\n```\n\n## Related Methods\n\n- [`.forEach(fn) => ReactWrapper`](foreach)\n- [`.reduce(fn[, initialValue]) => Any`](reduce)\n- [`.reduceRight(fn[, initialValue]) => Any`](reduceright)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/map.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/map.html)"
- name: .matchesElement()
  id: docs/api/shallowwrapper/matcheselement
  summary: Returns whether or not a given react element patternNode matches the wrapper's render tree
  description: "# .matchesElement(patternNode) =\\> Boolean\n\nReturns whether or not a given react element `patternNode` matches the wrapper's render tree. It must be a single-node wrapper, and only the root node is checked.\n\nThe `patternNode` acts like a wildcard. For it to match a node in the wrapper:\n\n- tag names must match\n- contents must match: In text nodes, leading and trailing spaces are ignored, but not space in the middle. Child elements must match according to these rules, recursively.\n- `patternNode` props (attributes) must appear in the wrapper's nodes, but not the other way around. Their values must match if they do appear.\n- `patternNode` style CSS properties must appear in the wrapper's node's style, but not the other way around. Their values must match if they do appear.\n\n## Arguments\n\n1.  `patternNode` (`ReactElement`): The node whose presence you are detecting in the wrapper's single node.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper match the one passed in.\n\n## Example\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // ...\n  }\n\n  render() {\n    return (\n      <button type=\"button\" onClick={this.handleClick} className=\"foo bar\">Hello</button>\n    );\n  }\n}\n\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.matchesElement(<button>Hello</button>)).to.equal(true);\nexpect(wrapper.matchesElement(<button className=\"foo bar\">Hello</button>)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.matchesElement()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines matching based on the matching of the node's children as well.\n\n## Related Methods\n\n- [`.containsMatchingElement() => ShallowWrapper`](containsmatchingelement) - searches all nodes in the wrapper, and searches their entire depth\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/matchesElement.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/matchesElement.html)"
- name: .matchesElement()
  id: docs/api/reactwrapper/matcheselement
  summary: Returns whether or not a given react element patternNode matches the wrapper's render tree
  description: "# .matchesElement(patternNode) =\\> Boolean\n\nReturns whether or not a given react element `patternNode` matches the wrapper's render tree. It must be a single-node wrapper, and only the root node is checked.\n\nThe `patternNode` acts like a wildcard. For it to match a node in the wrapper:\n\n- tag names must match\n- contents must match: In text nodes, leading and trailing spaces are ignored, but not space in the middle. Child elements must match according to these rules, recursively.\n- `patternNode` props (attributes) must appear in the wrapper's nodes, but not the other way around. Their values must match if they do appear.\n- `patternNode` style CSS properties must appear in the wrapper's node's style, but not the other way around. Their values must match if they do appear.\n\n## Arguments\n\n1.  `patternNode` (`ReactElement`): The node whose presence you are detecting in the wrapper's single node.\n\n## Returns\n\n`Boolean`: whether or not the current wrapper match the one passed in.\n\n## Example\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // ...\n  }\n\n  render() {\n    return (\n      <button type=\"button\" onClick={this.handleClick} className=\"foo bar\">Hello</button>\n    );\n  }\n}\n\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.matchesElement(<button>Hello</button>)).to.equal(true);\nexpect(wrapper.matchesElement(<button className=\"foo bar\">Hello</button>)).to.equal(true);\n```\n\n## Common Gotchas\n\n- `.matchesElement()` expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.\n- Keep in mind that this method determines matching based on the matching of the node's children as well.\n\n## Related Methods\n\n- [`.containsMatchingElement() => ReactWrapper`](containsmatchingelement) - searches all nodes in the wrapper, and searches their entire depth\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/matchesElement.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/matchesElement.html)"
- name: .mount()
  id: docs/api/reactwrapper/mount
  summary: A method that re-mounts the component, if it is not currently mounted
  description: "# .mount() =\\> Self\n\nA method that re-mounts the component, if it is not currently mounted. This can be used to simulate a component going through an unmount/mount lifecycle.\n\nNo equivalent for ShallowWrappers.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\nimport sinon from 'sinon';\n\nconst willMount = sinon.spy();\nconst didMount = sinon.spy();\nconst willUnmount = sinon.spy();\n\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentWillUnmount = willUnmount;\n    this.componentWillMount = willMount;\n    this.componentDidMount = didMount;\n  }\n\n  render() {\n    const { id } = this.props;\n    return (\n      <div className={id}>\n        {id}\n      </div>\n    );\n  }\n}\nFoo.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nconst wrapper = mount(<Foo id=\"foo\" />);\nexpect(willMount).to.have.property('callCount', 1);\nexpect(didMount).to.have.property('callCount', 1);\nexpect(willUnmount).to.have.property('callCount', 0);\nwrapper.unmount();\nexpect(willMount).to.have.property('callCount', 1);\nexpect(didMount).to.have.property('callCount', 1);\nexpect(willUnmount).to.have.property('callCount', 1);\nwrapper.mount();\nexpect(willMount).to.have.property('callCount', 2);\nexpect(didMount).to.have.property('callCount', 2);\nexpect(willUnmount).to.have.property('callCount', 1);\n```\n\n## Related Methods\n\n- [`.unmount() => Self`](unmount)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/mount.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/mount.html)"
- name: .name()
  id: docs/api/shallowwrapper/name
  summary: Returns the name of the current node of this wrapper
  description: "# .name() =\\> String\\|null\n\nReturns the name of the current node of this wrapper. If it's a composite component, this will be the name of the top-most rendered component. If it's a native DOM node, it will be a string of the tag name. If it's `null`, it will be `null`.\n\nThe order of precedence on returning the name is: `type.displayName` -\\> `type.name` -\\> `type`.\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String|null`: The name of the current node\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<div />);\nexpect(wrapper.name()).to.equal('div');\n```\n\n``` jsx\nfunction SomeWrappingComponent() {\n  return <Foo />;\n}\nconst wrapper = shallow(<SomeWrappingComponent />);\nexpect(wrapper.name()).to.equal('Foo');\n```\n\n``` jsx\nFoo.displayName = 'A cool custom name';\nfunction SomeWrappingComponent() {\n  return <Foo />;\n}\nconst wrapper = shallow(<SomeWrappingComponent />);\nexpect(wrapper.name()).to.equal('A cool custom name');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/name.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/name.html)"
- name: .name()
  id: docs/api/reactwrapper/name
  summary: Returns the name of the current node of this wrapper
  description: "# .name() =\\> String\\|null\n\nReturns the name of the current node of this wrapper. If it's a composite component, this will be the name of the component. If it's a native DOM node, it will be a string of the tag name. If it's `null`, it will be `null`.\n\nThe order of precedence on returning the name is: `type.displayName` -\\> `type.name` -\\> `type`.\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String|null`: The name of the current node\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<div />);\nexpect(wrapper.name()).to.equal('div');\n```\n\n``` jsx\nconst wrapper = mount(<Foo />);\nexpect(wrapper.name()).to.equal('Foo');\n```\n\n``` jsx\nFoo.displayName = 'A cool custom name';\nconst wrapper = mount(<Foo />);\nexpect(wrapper.name()).to.equal('A cool custom name');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/name.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/name.html)"
- name: .not()
  id: docs/api/shallowwrapper/not
  summary: Returns a new wrapper with only the nodes of the current wrapper that don't match the provided selector
  description: "# .not(selector) =\\> ShallowWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that don't match the provided selector.\n\nThis method is effectively the negation or inverse of [`filter`](filter).\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find('.foo').not('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.filterWhere(predicate) => ShallowWrapper`](filterwhere)\n- [`.filter(selector) => ShallowWrapper`](filter)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/not.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/not.html)"
- name: .not()
  id: docs/api/reactwrapper/not
  summary: Returns a new wrapper with only the nodes of the current wrapper that don't match the provided selector
  description: "# .not(selector) =\\> ReactWrapper\n\nReturns a new wrapper with only the nodes of the current wrapper that don't match the provided selector.\n\nThis method is effectively the negation or inverse of [`filter`](filter).\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the filtered nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.find('.foo').not('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.filterWhere(predicate) => ReactWrapper`](filterwhere)\n- [`.filter(selector) => ReactWrapper`](filter)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/not.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/not.html)"
- name: .parent()
  id: docs/api/shallowwrapper/parent
  summary: Returns a wrapper with the direct parent of the node in the current wrapper
  description: "# .parent() =\\> ShallowWrapper\n\nReturns a wrapper with the direct parent of the node in the current wrapper.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<ToDoList />);\nexpect(wrapper.find('ul').parent().is('div')).to.equal(true);\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ShallowWrapper`](parents)\n- [`.children([selector]) => ShallowWrapper`](children)\n- [`.closest(selector) => ShallowWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/parent.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/parent.html)"
- name: .parent()
  id: docs/api/reactwrapper/parent
  summary: Returns a wrapper with the direct parent of the node in the current wrapper
  description: "# .parent() =\\> ReactWrapper\n\nReturns a wrapper with the direct parent of the node in the current wrapper.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<ToDoList />);\nexpect(wrapper.find('ul').parent().is('div')).to.equal(true);\n```\n\n## Related Methods\n\n- [`.parents([selector]) => ReactWrapper`](parents)\n- [`.children([selector]) => ReactWrapper`](children)\n- [`.closest(selector) => ReactWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parent.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parent.html)"
- name: .parents()
  id: docs/api/shallowwrapper/parents
  summary: Returns a wrapper around all of the parents/ancestors of the single node in the wrapper
  description: "# .parents(\\[selector\\]) =\\> ShallowWrapper\n\nReturns a wrapper around all of the parents/ancestors of the single node in the wrapper. Does not include the node itself. Optionally, a selector can be provided and it will filter the parents by this selector. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): The selector to filter the parents by.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<ToDoList />);\nexpect(wrapper.find('ul').parents()).to.have.lengthOf(2);\n```\n\n## Related Methods\n\n- [`.children([selector]) => ShallowWrapper`](children)\n- [`.parent() => ShallowWrapper`](parent)\n- [`.closest(selector) => ShallowWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/parents.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/parents.html)"
- name: .parents()
  id: docs/api/reactwrapper/parents
  summary: Returns a wrapper around all of the parents/ancestors of the single node in the wrapper
  description: "# .parents(\\[selector\\]) =\\> ReactWrapper\n\nReturns a wrapper around all of the parents/ancestors of the single node in the wrapper. Does not include the node itself. Optionally, a selector can be provided and it will filter the parents by this selector. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector) \\[optional\\]): The selector to filter the parents by.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the resulting nodes.\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<ToDoList />);\nexpect(wrapper.find('ul').parents()).to.have.lengthOf(2);\n```\n\n## Related Methods\n\n- [`.children([selector]) => ReactWrapper`](children)\n- [`.parent() => ReactWrapper`](parent)\n- [`.closest(selector) => ReactWrapper`](closest)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parents.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/parents.html)"
- name: .prop()
  id: docs/api/shallowwrapper/prop
  summary: Returns the prop value for the root node of the wrapper with the provided key
  description: "# .prop(key) =\\> Any\n\nReturns the prop value for the root node of the wrapper with the provided key. It must be a single-node wrapper.\n\nNOTE: When called on a shallow wrapper, `.prop(key)` will return values for props on the root node that the component *renders*, not the component itself. To return the props for the entire React component, use `wrapper.instance().props`. See [`.instance() => ReactComponent`](instance)\n\n## Arguments\n\n1.  `key` (`String`): The prop name, that is, `this.props[key]` or `props[key]` for the root node of the wrapper.\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\nimport ValidateNumberInputComponent from './ValidateNumberInputComponent';\n\nclass MyComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      number: 0,\n    };\n    this.onValidNumberInput = this.onValidNumberInput.bind(this);\n  }\n\n  onValidNumberInput(e) {\n    const number = e.target.value;\n    if (!number || typeof number === 'number') {\n      this.setState({ number });\n    }\n  }\n\n  render() {\n    const { includedProp } = this.props;\n    const { number } = this.state;\n    return (\n      <div className=\"foo bar\" includedProp={includedProp}>\n        <ValidateNumberInputComponent onChangeHandler={onValidNumberInput} number={number} />\n      </div>\n    );\n  }\n}\nMyComponent.propTypes = {\n  includedProp: PropTypes.string.isRequired,\n};\n\nconst wrapper = shallow(<MyComponent includedProp=\"Success!\" excludedProp=\"I'm not included\" />);\nexpect(wrapper.prop('includedProp')).to.equal('Success!');\n\nconst validInput = 1;\nwrapper.find('ValidateNumberInputComponent').prop('onChangeHandler')(validInput);\nexpect(wrapper.state('number')).to.equal(number);\n\nconst invalidInput = 'invalid input';\nwrapper.find('ValidateNumberInputComponent').prop('onChangeHandler')(invalidInput);\nexpect(wrapper.state('number')).to.equal(0);\n\n// Warning: .prop(key) only returns values for props that exist in the root node.\n// See the note above about wrapper.instance().props to return all props in the React component.\n\nconsole.log(wrapper.prop('includedProp'));\n// \"Success!\"\n\nconsole.log(wrapper.prop('excludedProp'));\n// undefined\n\nconsole.log(wrapper.instance().props.excludedProp);\n// \"I'm not included\"\n```\n\n## Related Methods\n\n- [`.props() => Object`](props)\n- [`.state([key]) => Any`](state)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/prop.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/prop.html)"
- name: .prop()
  id: docs/api/reactwrapper/prop
  summary: Returns the prop value for the root node of the wrapper with the provided key
  description: "# .prop(key) =\\> Any\n\nReturns the prop value for the root node of the wrapper with the provided key. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `key` (`String`): The prop name, that is, `this.props[key]` or `props[key]` for the root node of the wrapper.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<MyComponent foo={10} />);\nexpect(wrapper.prop('foo')).to.equal(10);\n```\n\n## Related Methods\n\n- [`.props() => Object`](props)\n- [`.state([key]) => Any`](state)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/prop.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/prop.html)"
- name: .props()
  id: docs/api/shallowwrapper/props
  summary: Returns the props object for the root node of the wrapper
  description: "# .props() =\\> Object\n\nReturns the props object for the root node of the wrapper. It must be a single-node wrapper.\n\nNOTE: When called on a shallow wrapper, `.props()` will return values for props on the root node that the component *renders*, not the component itself.\n\nThis method is a reliable way of accessing the props of a node; `wrapper.instance().props` will work as well, but in React 16+, stateless functional components do not have an instance. See [`.instance() => ReactComponent`](instance)\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nfunction MyComponent(props) {\n  const { includedProp } = props;\n  return (\n    <div className=\"foo bar\" includedProp={includedProp}>Hello</div>\n  );\n}\nMyComponent.propTypes = {\n  includedProp: PropTypes.string.isRequired,\n};\n\nconst wrapper = shallow(<MyComponent includedProp=\"Success!\" excludedProp=\"I'm not included\" />);\nexpect(wrapper.props().includedProp).to.equal('Success!');\n\n// Warning: .props() only returns props that are passed to the root node,\n// which does not include excludedProp in this example.\n// See the note above about wrapper.instance().props.\n\nconsole.log(wrapper.props());\n// {children: \"Hello\", className: \"foo bar\", includedProp=\"Success!\"}\n\nconsole.log(wrapper.instance().props); // React 15.x - working as expected\n// {children: \"Hello\", className: \"foo bar\", includedProp:\"Success!\", excludedProp: \"I'm not included\"}\n\nconsole.log(wrapper.instance().props);\n// React 16.* - Uncaught TypeError: Cannot read property 'props' of null\n```\n\n## Related Methods\n\n- [`.prop(key) => Any`](prop)\n- [`.state([key]) => Any`](state)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/props.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/props.html)"
- name: .props()
  id: docs/api/reactwrapper/props
  summary: Returns the props object for the root node of the wrapper
  description: "# .props() =\\> Object\n\nReturns the props object for the root node of the wrapper. It must be a single-node wrapper.\n\nThis method is a reliable way of accessing the props of a node; `wrapper.instance().props` will work as well, but in React 16+, stateless functional components do not have an instance. See [`.instance() => ReactComponent`](instance)\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nfunction MyComponent(props) {\n  const { includedProp } = props;\n  return (\n    <div className=\"foo bar\" includedProp={includedProp}>Hello</div>\n  );\n}\nMyComponent.propTypes = {\n  includedProp: PropTypes.string.isRequired,\n};\n\nconst wrapper = mount(<MyComponent includedProp=\"Success!\" excludedProp=\"I'm not included\" />);\nexpect(wrapper.props().includedProp).to.equal('Success!');\n\n// Warning: .props() only returns props that are passed to the root node,\n// which does not include excludedProp in this example.\n// See the note above about wrapper.instance().props.\n\nconsole.log(wrapper.props());\n// {children: \"Hello\", className: \"foo bar\", includedProp=\"Success!\"}\n\nconsole.log(wrapper.instance().props); // React 15.x - working as expected\n// {children: \"Hello\", className: \"foo bar\", includedProp:\"Success!\", excludedProp: \"I'm not included\"}\n\nconsole.log(wrapper.instance().props);\n// React 16.* - Uncaught TypeError: Cannot read property 'props' of null\n```\n\n## Related Methods\n\n- [`.prop(key) => Any`](prop)\n- [`.state([key]) => Any`](state)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/props.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/props.html)"
- name: .reduce()
  id: docs/api/shallowwrapper/reduce
  summary: Applies the provided reducing function to every node in the wrapper to reduce to a single value
  description: "# .reduce(fn\\[, initialValue\\]) =\\> Any\n\nApplies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a `ShallowWrapper`, and is processed from left to right.\n\n## Arguments\n\n1.  `fn` (`Function`): A reducing function to be run for every node in the collection, with the following arguments:\n\n    - `value` (`T`): The value returned by the previous invocation of this function\n    - `node` (`ShallowWrapper`): A wrapper around the node being processed\n    - `index` (`Number`): The index of the node being processed\n\n2.  `initialValue` (`T` \\[optional\\]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first `node` will be provided and the iteration will begin on the second node in the collection.\n\n## Returns\n\n`T`: Returns an array of the returned values from the mapping function...\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar amount={2} />\n      <Bar amount={4} />\n      <Bar amount={8} />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Foo />);\nconst total = wrapper.find(Bar).reduce((amount, n) => amount + n.prop('amount'), 0);\nexpect(total).to.equal(14);\n```\n\n## Related Methods\n\n- [`.reduceRight(fn[, initialValue]) => Any`](reduceright)\n- [`.forEach(fn) => ShallowWrapper`](foreach)\n- [`.map(fn) => Array<Any>`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/reduce.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/reduce.html)"
- name: .reduce()
  id: docs/api/reactwrapper/reduce
  summary: Applies the provided reducing function to every node in the wrapper to reduce to a single value
  description: "# .reduce(fn\\[, initialValue\\]) =\\> Any\n\nApplies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a `ReactWrapper`, and is processed from left to right.\n\n## Arguments\n\n1.  `fn` (`Function`): A reducing function to be run for every node in the collection, with the following arguments:\n\n    - `value` (`T`): The value returned by the previous invocation of this function\n    - `node` (`ReactWrapper`): A wrapper around the node being processed\n    - `index` (`Number`): The index of the node being processed\n\n2.  `initialValue` (`T` \\[optional\\]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first `node` will be provided and the iteration will begin on the second node in the collection.\n\n## Returns\n\n`T`: Returns an array of the returned values from the mapping function...\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar amount={2} />\n      <Bar amount={4} />\n      <Bar amount={8} />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = mount(<Foo />);\nconst total = wrapper.find(Bar).reduce((amount, n) => amount + n.prop('amount'), 0);\nexpect(total).to.equal(14);\n```\n\n## Related Methods\n\n- [`.reduceRight(fn[, initialValue]) => Any`](reduceright)\n- [`.forEach(fn) => ReactWrapper`](foreach)\n- [`.map(fn) => Array<Any>`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/reduce.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/reduce.html)"
- name: .reduceRight()
  id: docs/api/shallowwrapper/reduceright
  summary: Applies the provided reducing function to every node in the wrapper to reduce to a single value
  description: "# .reduceRight(fn\\[, initialValue\\]) =\\> Any\n\nApplies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a `ShallowWrapper`, and is processed from right to left.\n\n## Arguments\n\n1.  `fn` (`Function`): A reducing function to be run for every node in the collection, with the following arguments:\n\n    - `value` (`T`): The value returned by the previous invocation of this function\n    - `node` (`ShallowWrapper`): A single-node wrapper around the node being processed\n    - `index` (`Number`): The index of the node being processed\n\n2.  `initialValue` (`T` \\[optional\\]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first `node` will be provided and the iteration will begin on the second node in the collection.\n\n## Returns\n\n`T`: Returns an array of the returned values from the mapping function...\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar amount={2} />\n      <Bar amount={4} />\n      <Bar amount={8} />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Foo />);\nconst total = wrapper.find(Bar).reduceRight((amount, n) => amount + n.prop('amount'), 0);\nexpect(total).to.equal(14);\n```\n\n## Related Methods\n\n- [`.reduce(fn[, initialValue]) => Any`](reduce)\n- [`.forEach(fn) => ShallowWrapper`](foreach)\n- [`.map(fn) => Array<Any>`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/reduceRight.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/reduceRight.html)"
- name: .reduceRight()
  id: docs/api/reactwrapper/reduceright
  summary: Applies the provided reducing function to every node in the wrapper to reduce to a single value
  description: "# .reduceRight(fn\\[, initialValue\\]) =\\> Any\n\nApplies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a `ReactWrapper`, and is processed from right to left.\n\n## Arguments\n\n1.  `fn` (`Function`): A reducing function to be run for every node in the collection, with the following arguments:\n\n    - `value` (`T`): The value returned by the previous invocation of this function\n    - `node` (`ReactWrapper`): A single-node wrapper around the node being processed\n    - `index` (`Number`): The index of the node being processed\n\n2.  `initialValue` (`T` \\[optional\\]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first `node` will be provided and the iteration will begin on the second node in the collection.\n\n## Returns\n\n`T`: Returns an array of the returned values from the mapping function...\n\n## Example\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar amount={2} />\n      <Bar amount={4} />\n      <Bar amount={8} />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = mount(<Foo />);\nconst total = wrapper.find(Bar).reduceRight((amount, n) => amount + n.prop('amount'), 0);\nexpect(total).to.equal(14);\n```\n\n## Related Methods\n\n- [`.reduce(fn[, initialValue]) => Any`](reduce)\n- [`.forEach(fn) => ReactWrapper`](foreach)\n- [`.map(fn) => Array<Any>`](map)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/reduceRight.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/reduceRight.html)"
- name: .ref()
  id: docs/api/reactwrapper/ref
  summary: Returns the node that matches the provided reference name
  description: "# .ref(refName) =\\> ReactComponent \\| HTMLElement\n\nReturns the node that matches the provided reference name.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `refName` (`String`): The ref attribute of the node\n\n## Returns\n\n`ReactComponent | HTMLElement`: The node that matches the provided reference name. This can be a react component instance, or an HTML element instance.\n\n## Examples\n\n``` jsx\nclass Foo extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"firstRef\" amount={2}>First</span>\n        <span ref=\"secondRef\" amount={4}>Second</span>\n        <span ref=\"thirdRef\" amount={8}>Third</span>\n      </div>\n    );\n  }\n}\n```\n\n``` jsx\nconst wrapper = mount(<Foo />);\nexpect(wrapper.ref('secondRef').innerText).to.equal('Second');\n```\n\n## Related Methods\n\n- [`.find(selector) => ReactWrapper`](find)\n- [`.findWhere(predicate) => ReactWrapper`](findwhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/ref.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/ref.html)"
- name: .render()
  id: docs/api/shallowwrapper/render
  summary: Returns a CheerioWrapper around the rendered HTML of the single node's subtree
  description: "# .render() =\\> CheerioWrapper\n\nReturns a CheerioWrapper around the rendered HTML of the single node's subtree. It must be a single-node wrapper.\n\n## Returns\n\n`CheerioWrapper`: The resulting Cheerio object\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return (<div className=\"in-foo\" />);\n}\n```\n\n``` jsx\nfunction Bar() {\n  return (\n    <div className=\"in-bar\">\n      <Foo />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Bar />);\nexpect(wrapper.find('.in-foo')).to.have.lengthOf(0);\nexpect(wrapper.find(Foo).render().find('.in-foo')).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/render.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/render.html)"
- name: .render()
  id: docs/api/reactwrapper/render
  summary: Returns a CheerioWrapper around the rendered HTML of the single node's subtree
  description: "# .render() =\\> CheerioWrapper\n\nReturns a CheerioWrapper around the rendered HTML of the single node's subtree. It must be a single-node wrapper.\n\n## Returns\n\n`CheerioWrapper`: The resulting Cheerio object\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return (<div className=\"in-foo\" />);\n}\n```\n\n``` jsx\nfunction Bar() {\n  return (\n    <div className=\"in-bar\">\n      <Foo />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = mount(<Bar />);\nexpect(wrapper.find(Foo).render().find('.in-foo')).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/render.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/render.html)"
- name: .renderProp()
  id: docs/api/shallowwrapper/renderprop
  summary: Returns a function that, when called with arguments args, will return a new wrapper based on the render prop in the original wrapper's prop propName
  description: "# .renderProp(propName)(...args) =\\> ShallowWrapper\n\nReturns a function that, when called with arguments `args`, will return a new wrapper based on the render prop in the original wrapper's prop `propName`.\n\nNOTE: can only be called on wrapper of a single non-DOM component element node.\n\n## Arguments\n\n1.  `propName` (`String`):\n2.  `...args` (`Array<Any>`):\n\nThis essentially calls `wrapper.prop(propName)(...args)`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the node returned from the render prop.\n\n## Examples\n\n##### Test Setup\n\n``` jsx\nclass Mouse extends React.Component {\n  constructor() {\n    super();\n    this.state = { x: 0, y: 0 };\n  }\n\n  render() {\n    const { render } = this.props;\n    return (\n      <div\n        style={{ height: '100%' }}\n        onMouseMove={(event) => {\n          this.setState({\n            x: event.clientX,\n            y: event.clientY,\n          });\n        }}\n      >\n        {render(this.state)}\n      </div>\n    );\n  }\n}\n\nMouse.propTypes = {\n  render: PropTypes.func.isRequired,\n};\n```\n\n``` jsx\nconst App = () => (\n  <div style={{ height: '100%' }}>\n    <Mouse\n      render={(x = 0, y = 0) => (\n        <h1>\n          The mouse position is ({x}, {y})\n        </h1>\n      )}\n    />\n  </div>\n);\n```\n\n##### Testing with no arguments\n\n``` jsx\nconst wrapper = shallow(<App />)\n  .find(Mouse)\n  .renderProp('render')();\n\nexpect(wrapper.equals(<h1>The mouse position is 0, 0</h1>)).to.equal(true);\n```\n\n##### Testing with multiple arguments\n\n``` jsx\nconst wrapper = shallow(<App />)\n  .find(Mouse)\n  .renderProp('render')(10, 20);\n\nexpect(wrapper.equals(<h1>The mouse position is 10, 20</h1>)).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/renderProp.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/renderProp.html)"
- name: .renderProp()
  id: docs/api/reactwrapper/renderprop
  summary: Returns a function that, when called with arguments args, will return a new wrapper based on the render prop in the original wrapper's prop propName
  description: "# .renderProp(propName)(...args) =\\> ReactWrapper\n\nReturns a function that, when called with arguments `args`, will return a new wrapper based on the render prop in the original wrapper's prop `propName`.\n\nNOTE: can only be called on wrapper of a single non-DOM component element node.\n\n## Arguments\n\n1.  `propName` (`String`):\n2.  `...args` (`Array<Any>`):\n\nThis essentially calls `wrapper.prop(propName)(...args)`.\n\n## Returns\n\n`ReactWrapper`: A new wrapper that wraps the node returned from the render prop.\n\n## Examples\n\n##### Test Setup\n\n``` jsx\nclass Mouse extends React.Component {\n  constructor() {\n    super();\n    this.state = { x: 0, y: 0 };\n  }\n\n  render() {\n    const { render } = this.props;\n    return (\n      <div\n        style={{ height: '100%' }}\n        onMouseMove={(event) => {\n          this.setState({\n            x: event.clientX,\n            y: event.clientY,\n          });\n        }}\n      >\n        {render(this.state)}\n      </div>\n    );\n  }\n}\n\nMouse.propTypes = {\n  render: PropTypes.func.isRequired,\n};\n```\n\n``` jsx\nconst App = () => (\n  <div style={{ height: '100%' }}>\n    <Mouse\n      render={(x = 0, y = 0) => (\n        <h1>\n          The mouse position is ({x}, {y})\n        </h1>\n      )}\n    />\n  </div>\n);\n```\n\n##### Testing with no arguments\n\n``` jsx\nconst wrapper = mount(<App />)\n  .find(Mouse)\n  .renderProp('render')();\n\nexpect(wrapper.equals(<h1>The mouse position is 0, 0</h1>)).to.equal(true);\n```\n\n##### Testing with multiple arguments\n\n``` jsx\nconst wrapper = mount(<App />)\n  .find(Mouse)\n  .renderProp('render')(10, 20);\n\nexpect(wrapper.equals(<h1>The mouse position is 10, 20</h1>)).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/renderProp.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/renderProp.html)"
- name: .setContext()
  id: docs/api/shallowwrapper/setcontext
  summary: A method that sets the context of the root component, and re-renders
  description: "# .setContext(context) =\\> Self\n\nA method that sets the context of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing contexts.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `context` (`Object`): An object containing new props to merge in with the current state\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SimpleComponent(props, context) {\n  const { name } = context;\n  return <div>{name}</div>;\n}\nSimpleComponent.contextTypes = {\n  name: PropTypes.string,\n};\n```\n\n``` jsx\nconst context = { name: 'foo' };\nconst wrapper = shallow(<SimpleComponent />, { context });\nexpect(wrapper.text()).to.equal('foo');\nwrapper.setContext({ name: 'bar' });\nexpect(wrapper.text()).to.equal('bar');\nwrapper.setContext({ name: 'baz' });\nexpect(wrapper.text()).to.equal('baz');\n```\n\n## Common Gotchas\n\n- `.setContext()` can only be used on a wrapper that was initially created with a call to `shallow()` that includes a `context` specified in the options argument.\n- The root component you are rendering must have a `contextTypes` static property.\n\n## Related Methods\n\n- [`.setState(state[, callback]) => Self`](setstate)\n- [`.setProps(props[, callback]) => Self`](setprops)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setContext.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setContext.html)"
- name: .setContext()
  id: docs/api/reactwrapper/setcontext
  summary: A method that sets the context of the root component, and re-renders
  description: "# .setContext(context) =\\> Self\n\nA method that sets the context of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing contexts.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `context` (`Object`): An object containing new props to merge in with the current state\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SimpleComponent(props, context) {\n  const { name } = context;\n  return <div>{name}</div>;\n}\nSimpleComponent.contextTypes = {\n  name: PropTypes.string,\n};\n```\n\n``` jsx\nconst context = { name: 'foo' };\nconst wrapper = mount(<SimpleComponent />, { context });\nexpect(wrapper.text()).to.equal('foo');\nwrapper.setContext({ name: 'bar' });\nexpect(wrapper.text()).to.equal('bar');\nwrapper.setContext({ name: 'baz' });\nexpect(wrapper.text()).to.equal('baz');\n```\n\n## Common Gotchas\n\n- `.setContext()` can only be used on a wrapper that was initially created with a call to `mount()` that includes a `context` specified in the options argument.\n- The root component you are rendering must have a `contextTypes` static property.\n\n## Related Methods\n\n- [`.setState(state[, callback]) => Self`](setstate)\n- [`.setProps(props[, callback]) => Self`](setprops)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setContext.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setContext.html)"
- name: .setProps()
  id: docs/api/shallowwrapper/setprops
  summary: A method that sets the props of the root component, and re-renders
  description: "# .setProps(nextProps\\[, callback\\]) =\\> Self\n\nA method that sets the props of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing props. Calling this, for instance, will call the `componentWillReceiveProps` lifecycle method.\n\nSimilar to `setState`, this method accepts a props object and will merge it in with the already existing props.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `nextProps` (`Object`): An object containing new props to merge in with the current props\n2.  `callback` (`Function` \\[optional\\]): If provided, the callback function will be executed once setProps has completed\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Foo({ name }) {\n  return (\n    <div className={name} />\n  );\n}\nFoo.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n```\n\n``` jsx\nconst wrapper = shallow(<Foo name=\"foo\" />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(0);\nwrapper.setProps({ name: 'bar' });\nexpect(wrapper.find('.foo')).to.have.lengthOf(0);\nexpect(wrapper.find('.bar')).to.have.lengthOf(1);\n```\n\n``` jsx\nimport sinon from 'sinon';\n\nconst spy = sinon.spy(MyComponent.prototype, 'componentWillReceiveProps');\n\nconst wrapper = shallow(<MyComponent foo=\"bar\" />);\nexpect(spy).to.have.property('callCount', 0);\nwrapper.setProps({ foo: 'foo' });\nexpect(spy).to.have.property('callCount', 1);\n```\n\n## Related Methods\n\n- [`.setState(state) => Self`](setstate)\n- [`.setContext(context) => Self`](setcontext)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setProps.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setProps.html)"
- name: .setProps()
  id: docs/api/reactwrapper/setprops
  summary: A method that sets the props of the root component, and re-renders
  description: "# .setProps(nextProps\\[, callback\\]) =\\> Self\n\nA method that sets the props of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing props. Calling this, for instance, will call the `componentWillReceiveProps` lifecycle method.\n\nSimilar to `setState`, this method accepts a props object and will merge it in with the already existing props.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `nextProps` (`Object`): An object containing new props to merge in with the current props\n2.  `callback` (`Function` \\[optional\\]): If provided, the callback function will be executed once setProps has completed\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Foo({ name }) {\n  return (\n    <div className={name} />\n  );\n}\nFoo.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n```\n\n``` jsx\nconst wrapper = mount(<Foo name=\"foo\" />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(0);\nwrapper.setProps({ name: 'bar' });\nexpect(wrapper.find('.foo')).to.have.lengthOf(0);\nexpect(wrapper.find('.bar')).to.have.lengthOf(1);\n```\n\n``` jsx\nimport sinon from 'sinon';\n\nconst spy = sinon.spy(MyComponent.prototype, 'componentWillReceiveProps');\n\nconst wrapper = mount(<MyComponent foo=\"bar\" />);\nexpect(spy).to.have.property('callCount', 0);\nwrapper.setProps({ foo: 'foo' });\nexpect(spy).to.have.property('callCount', 1);\n```\n\n## Related Methods\n\n- [`.setState(state) => Self`](setstate)\n- [`.setContext(context) => Self`](setcontext)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setProps.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setProps.html)"
- name: .setState()
  id: docs/api/shallowwrapper/setstate
  summary: A method to invoke setState() on the root component instance, similar to how you might in the methods of the component, and re-renders
  description: "# .setState(nextState\\[, callback\\]) =\\> Self\n\nA method to invoke `setState()` on the root component instance, similar to how you might in the methods of the component, and re-renders. This method is useful for testing your component in hard-to-achieve states, however should be used sparingly. If possible, you should utilize your component's external API (which is often accessible via [`.instance()`](instance)) in order to get it into whatever state you want to test, in order to be as accurate of a test as possible. This is not always practical, however.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `nextState` (`Object`): An object containing new state to merge in with the current state\n2.  `callback` (`Function` \\[optional\\]): If provided, the callback function will be executed once setState has completed\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: 'foo' };\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div className={name} />\n    );\n  }\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(0);\nwrapper.setState({ name: 'bar' });\nexpect(wrapper.find('.foo')).to.have.lengthOf(0);\nexpect(wrapper.find('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.setProps(props[, callback]) => Self`](setprops)\n- [`.setContext(context) => Self`](setcontext)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setState.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/setState.html)"
- name: .setState()
  id: docs/api/reactwrapper/setstate
  summary: A method to invoke setState() on the root component instance, similar to how you might in the methods of the component, and re-renders
  description: "# .setState(nextState\\[, callback\\]) =\\> Self\n\nA method to invoke `setState()` on the root component instance, similar to how you might in the methods of the component, and re-renders. This method is useful for testing your component in hard-to-achieve states, however should be used sparingly. If possible, you should utilize your component's external API (which is often accessible via [`.instance()`](instance)) in order to get it into whatever state you want to test, in order to be as accurate of a test as possible. This is not always practical, however.\n\nNOTE: Prior to v3.8.0 of enzyme, can only be called on a wrapper instance that is also the root instance.\n\n## Arguments\n\n1.  `nextState` (`Object`): An object containing new state to merge in with the current state\n2.  `callback` (`Function` \\[optional\\]): If provided, the callback function will be executed once setState has completed\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: 'foo' };\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div className={name} />\n    );\n  }\n}\n```\n\n``` jsx\nconst wrapper = mount(<Foo />);\nexpect(wrapper.find('.foo')).to.have.lengthOf(1);\nexpect(wrapper.find('.bar')).to.have.lengthOf(0);\nwrapper.setState({ name: 'bar' });\nexpect(wrapper.find('.foo')).to.have.lengthOf(0);\nexpect(wrapper.find('.bar')).to.have.lengthOf(1);\n```\n\n## Related Methods\n\n- [`.setProps(props[, callback]) => Self`](setprops)\n- [`.setContext(context) => Self`](setcontext)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setState.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/setState.html)"
- name: .shallow()
  id: docs/api/shallowwrapper/shallow
  summary: Shallow renders the root node and returns a shallow wrapper around it
  description: "# .shallow(\\[options\\]) =\\> ShallowWrapper\n\nShallow renders the root node and returns a shallow wrapper around it. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `options` (`Object` \\[optional\\]):\n    - `options.context`: (`Object` \\[optional\\]): Context to be passed into the component\n    - `options.disableLifecycleMethods`: (`Boolean` \\[optional\\]): If set to true, `componentDidMount` is not called on the component, and `componentDidUpdate` is not called after [`setProps`](shallowwrapper/setprops.md) and [`setContext`](shallowwrapper/setcontext.md). Default to `false`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper that wraps the node after it's been shallow rendered.\n\n## Examples\n\n``` jsx\nfunction Bar() {\n  return (\n    <div>\n      <div className=\"in-bar\" />\n    </div>\n  );\n}\n```\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <Bar />\n    </div>\n  );\n}\n```\n\n``` jsx\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.find('.in-bar')).to.have.lengthOf(0);\nexpect(wrapper.find(Bar)).to.have.lengthOf(1);\nexpect(wrapper.find(Bar).shallow().find('.in-bar')).to.have.lengthOf(1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/shallow.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/shallow.html)"
- name: .simulate()
  id: docs/api/shallowwrapper/simulate
  summary: Simulate events on the root node in the wrapper
  description: "# .simulate(event\\[, ...args\\]) =\\> Self\n\nSimulate events on the root node in the wrapper. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `event` (`String`): The event name to be simulated\n2.  `...args` (`Any` \\[optional\\]): A mock event object that will get passed through to the event handlers.\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example `class component`\n\n``` jsx\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div>\n        <div className={`clicks-${count}`}>\n          {count} clicks\n        </div>\n        <a href=\"url\" onClick={() => { this.setState({ count: count + 1 }); }}>\n          Increment\n        </a>\n      </div>\n    );\n  }\n}\n\nconst wrapper = shallow(<Foo />);\n\nexpect(wrapper.find('.clicks-0').length).to.equal(1);\nwrapper.find('a').simulate('click');\nexpect(wrapper.find('.clicks-1').length).to.equal(1);\n```\n\n## Example `functional component`\n\n``` jsx\nconst Foo = ({ width, height, onChange }) => (\n  <div>\n    <input name=\"width\" value={width} onChange={onChange} />\n    <input name=\"height\" value={height} onChange={onChange} />\n  </div>\n);\nFoo.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst testState = { width: 10, height: 20 };\nconst wrapper = shallow((\n  <Foo\n    width={testState.width}\n    height={testState.height}\n    onChange={(e) => {\n      testState[e.target.name] = e.target.value;\n    }}\n  />\n));\n\nexpect(wrapper.find('input').at(0).prop('value')).toEqual(10);\nexpect(wrapper.find('input').at(1).prop('value')).toEqual(20);\nwrapper.find('input').at(0).simulate('change', { target: { name: 'width', value: 50 } });\nwrapper.find('input').at(1).simulate('change', { target: { name: 'height', value: 70 } });\nexpect(testState.width).toEqual(50);\nexpect(testState.height).toEqual(70);\n```\n\n## Common Gotchas\n\n- Currently, event simulation for the shallow renderer does not propagate as one would normally expect in a real environment. As a result, one must call `.simulate()` on the actual node that has the event handler set.\n- Even though the name would imply this simulates an actual event, `.simulate()` will in fact target the component's prop based on the event you give it. For example, `.simulate('click')` will actually get the `onClick` prop and call it.\n- As noted in the function signature above passing a mock event is optional. Keep in mind that if the code you are testing uses the event for something like, calling `event.preventDefault()` or accessing any of its properties you must provide a mock event object with the properties your code requires.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/simulate.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/simulate.html)"
- name: .simulate()
  id: docs/api/reactwrapper/simulate
  summary: Simulate events on the root node in the wrapper
  description: "# .simulate(event\\[, mock\\]) =\\> Self\n\nSimulate events on the root node in the wrapper. It must be a single-node wrapper.\n\n## Arguments\n\n1.  `event` (`String`): The event name to be simulated\n2.  `mock` (`Object` \\[optional\\]): A mock event object that will be merged with the event object passed to the handlers.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example `class component`\n\n``` jsx\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div>\n        <div className={`clicks-${count}`}>\n          {count} clicks\n        </div>\n        <a href=\"url\" onClick={() => { this.setState({ count: count + 1 }); }}>\n          Increment\n        </a>\n      </div>\n    );\n  }\n}\n\nconst wrapper = mount(<Foo />);\n\nexpect(wrapper.find('.clicks-0').length).to.equal(1);\nwrapper.find('a').simulate('click');\nexpect(wrapper.find('.clicks-1').length).to.equal(1);\n```\n\n## Example `functional component`\n\n``` jsx\nconst Foo = ({ width, height, onChange }) => (\n  <div>\n    <input name=\"width\" value={width} onChange={onChange} />\n    <input name=\"height\" value={height} onChange={onChange} />\n  </div>\n);\nFoo.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst testState = { width: 10, height: 20 };\nconst wrapper = mount((\n  <Foo\n    width={testState.width}\n    height={testState.height}\n    onChange={(e) => {\n      testState[e.target.name] = e.target.value;\n    }}\n  />\n));\n\nexpect(wrapper.find('input').at(0).prop('value')).toEqual(10);\nexpect(wrapper.find('input').at(1).prop('value')).toEqual(20);\nwrapper.find('input').at(0).simulate('change', { target: { name: 'width', value: 50 } });\nwrapper.find('input').at(1).simulate('change', { target: { name: 'height', value: 70 } });\nexpect(testState.width).toEqual(50);\nexpect(testState.height).toEqual(70);\n```\n\n## Common Gotchas\n\n- As noted in the function signature above passing a mock event is optional. It is worth noting that `ReactWrapper` will pass a `SyntheticEvent` object to the event handler in your code. Keep in mind that if the code you are testing uses properties that are not included in the `SyntheticEvent`, for instance `event.target.value`, you will need to provide a mock event like so `.simulate(\"change\", { target: { value: \"foo\" }})` for it to work.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulate.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulate.html)"
- name: .simulateError()
  id: docs/api/shallowwrapper/simulateerror
  summary: Simulate a component throwing an error as part of its rendering lifecycle
  description: "# .simulateError(error) =\\> Self\n\nSimulate a component throwing an error as part of its rendering lifecycle.\n\nThis is particularly useful in combination with React 16 error boundaries (ie, the `componentDidCatch` and `static getDerivedStateFromError` lifecycle methods).\n\n## Arguments\n\n1.  `error` (`Any`): The error to throw.\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nfunction Something() {\n  // this is just a placeholder\n  return null;\n}\n\nclass ErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    const { spy } = this.props;\n    spy(error, info);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { hasError } = this.state;\n    return (\n      <React.Fragment>\n        {hasError ? 'Error' : children}\n      </React.Fragment>\n    );\n  }\n}\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n  spy: PropTypes.func.isRequired,\n};\n\nconst spy = sinon.spy();\nconst wrapper = shallow(<ErrorBoundary spy={spy}><Something /></ErrorBoundary>);\nconst error = new Error('hi!');\nwrapper.find(Something).simulateError(error);\n\nexpect(wrapper.state()).to.have.property('hasError', true);\nexpect(spy).to.have.property('callCount', 1);\nexpect(spy.args).to.deep.equal([\n  error,\n  {\n    componentStack: `\n    in Something (created by ErrorBoundary)\n    in ErrorBoundary (created by WrapperComponent)\n    in WrapperComponent`,\n  },\n]);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/simulateError.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/simulateError.html)"
- name: .simulateError()
  id: docs/api/reactwrapper/simulateerror
  summary: Simulate a component throwing an error as part of its rendering lifecycle
  description: "# .simulateError(error) =\\> Self\n\nSimulate a component throwing an error as part of its rendering lifecycle.\n\nThis is particularly useful in combination with React 16 error boundaries (ie, the `componentDidCatch` and `static getDerivedStateFromError` lifecycle methods).\n\n## Arguments\n\n1.  `error` (`Any`): The error to throw.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nfunction Something() {\n  // this is just a placeholder\n  return null;\n}\n\nclass ErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    const { spy } = this.props;\n    spy(error, info);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { hasError } = this.state;\n    return (\n      <React.Fragment>\n        {hasError ? 'Error' : children}\n      </React.Fragment>\n    );\n  }\n}\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n  spy: PropTypes.func.isRequired,\n};\n\nconst spy = sinon.spy();\nconst wrapper = mount(<ErrorBoundary spy={spy}><Something /></ErrorBoundary>);\nconst error = new Error('hi!');\nwrapper.find(Something).simulateError(error);\n\nexpect(wrapper.state()).to.have.property('hasError', true);\nexpect(spy).to.have.property('callCount', 1);\nexpect(spy.args).to.deep.equal([\n  error,\n  {\n    componentStack: `\n    in Something (created by ErrorBoundary)\n    in ErrorBoundary (created by WrapperComponent)\n    in WrapperComponent`,\n  },\n]);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulateError.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/simulateError.html)"
- name: .slice()
  id: docs/api/shallowwrapper/slice
  summary: Returns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of Array#slice
  description: "# .slice(\\[begin\\[, end\\]\\]) =\\> ShallowWrapper\n\nReturns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of `Array#slice`.\n\n## Arguments\n\n1.  `begin` (`Number` \\[optional\\]): Index from which to slice (defaults to `0`). If negative, this is treated as `length+begin`.\n2.  `end` (`Number` \\[optional\\]): Index at which to end slicing (defaults to `length`). If negative, this is treated as `length+end`.\n\n## Returns\n\n`ShallowWrapper`: A new wrapper with the subset of nodes specified.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\nexpect(wrapper.find('.foo').slice(1)).to.have.lengthOf(2);\nexpect(wrapper.find('.foo').slice(1).at(0).hasClass('bar')).to.equal(true);\nexpect(wrapper.find('.foo').slice(1).at(1).hasClass('baz')).to.equal(true);\n```\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\nexpect(wrapper.find('.foo').slice(1, 2)).to.have.lengthOf(1);\nexpect(wrapper.find('.foo').slice(1, 2).at(0).hasClass('bar')).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/slice.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/slice.html)"
- name: .slice()
  id: docs/api/reactwrapper/slice
  summary: Returns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of Array#slice
  description: "# .slice(\\[begin\\[, end\\]\\]) =\\> ReactWrapper\n\nReturns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of `Array#slice`.\n\n## Arguments\n\n1.  `begin` (`Number` \\[optional\\]): Index from which to slice (defaults to `0`). If negative, this is treated as `length+begin`.\n2.  `end` (`Number` \\[optional\\]): Index at which to end slicing (defaults to `length`). If negative, this is treated as `length+end`.\n\n## Returns\n\n`ReactWrapper`: A new wrapper with the subset of nodes specified.\n\n## Examples\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\nexpect(wrapper.find('.foo').slice(1)).to.have.lengthOf(2);\nexpect(wrapper.find('.foo').slice(1).at(0).hasClass('bar')).to.equal(true);\nexpect(wrapper.find('.foo').slice(1).at(1).hasClass('baz')).to.equal(true);\n```\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo bax\" />\n    <div className=\"foo bar\" />\n    <div className=\"foo baz\" />\n  </div>\n));\nexpect(wrapper.find('.foo').slice(1, 2)).to.have.lengthOf(1);\nexpect(wrapper.find('.foo').slice(1, 2).at(0).hasClass('bar')).to.equal(true);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/slice.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/slice.html)"
- name: .some()
  id: docs/api/shallowwrapper/some
  summary: Returns whether or not any of the nodes in the wrapper match the provided selector
  description: "# .some(selector) =\\> Boolean\n\nReturns whether or not any of the nodes in the wrapper match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: True if at least one of the nodes in the current wrapper matched the provided selector.\n\n## Examples\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').some('.qoo')).to.equal(true);\nexpect(wrapper.find('.foo').some('.foo')).to.equal(true);\nexpect(wrapper.find('.foo').some('.bar')).to.equal(false);\n```\n\n## Related Methods\n\n- [`.someWhere(predicate) => Boolean`](somewhere)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/some.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/some.html)"
- name: .some()
  id: docs/api/reactwrapper/some
  summary: Returns whether or not any of the nodes in the wrapper match the provided selector
  description: "# .some(selector) =\\> Boolean\n\nReturns whether or not any of the nodes in the wrapper match the provided selector.\n\n## Arguments\n\n1.  `selector` ([`EnzymeSelector`](../selector)): The selector to match.\n\n## Returns\n\n`Boolean`: True if at least one of the nodes in the current wrapper matched the provided selector.\n\n## Examples\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').some('.qoo')).to.equal(true);\nexpect(wrapper.find('.foo').some('.foo')).to.equal(true);\nexpect(wrapper.find('.foo').some('.bar')).to.equal(false);\n```\n\n## Related Methods\n\n- [`.someWhere(predicate) => Boolean`](somewhere)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/some.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/some.html)"
- name: .someWhere()
  id: docs/api/shallowwrapper/somewhere
  summary: Returns whether or not any of the nodes in the wrapper pass the provided predicate function
  description: "# .someWhere(fn) =\\> Boolean\n\nReturns whether or not any of the nodes in the wrapper pass the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ShallowWrapper => Boolean`): A predicate function to match the nodes.\n\n## Returns\n\n`Boolean`: True if at least one of the nodes in the current wrapper passed the predicate function.\n\n## Example\n\n``` jsx\nconst wrapper = shallow((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('qoo'))).to.equal(true);\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('foo'))).to.equal(true);\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('bar'))).to.equal(false);\n```\n\n## Related Methods\n\n- [`.some(selector) => Boolean`](some)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/someWhere.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/someWhere.html)"
- name: .someWhere()
  id: docs/api/reactwrapper/somewhere
  summary: Returns whether or not any of the nodes in the wrapper pass the provided predicate function
  description: "# .someWhere(fn) =\\> Boolean\n\nReturns whether or not any of the nodes in the wrapper pass the provided predicate function.\n\n## Arguments\n\n1.  `predicate` (`ReactWrapper => Boolean`): A predicate function to match the nodes.\n\n## Returns\n\n`Boolean`: True if at least one of the nodes in the current wrapper passed the predicate function.\n\n## Example\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <div className=\"foo qoo\" />\n    <div className=\"foo boo\" />\n    <div className=\"foo hoo\" />\n  </div>\n));\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('qoo'))).to.equal(true);\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('foo'))).to.equal(true);\nexpect(wrapper.find('.foo').someWhere((n) => n.hasClass('bar'))).to.equal(false);\n```\n\n## Related Methods\n\n- [`.some(selector) => Boolean`](some)\n- [`.every(selector) => Boolean`](every)\n- [`.everyWhere(predicate) => Boolean`](everywhere)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/someWhere.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/someWhere.html)"
- name: .state()
  id: docs/api/shallowwrapper/state
  summary: Returns the state hash for the root node of the wrapper
  description: "# .state(\\[key\\]) =\\> Any\n\nReturns the state hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n\n## Arguments\n\n1.  `key` (`String` \\[optional\\]): If provided, the return value will be the `this.state[key]` of the root component instance.\n\n## Example\n\n``` jsx\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.state().foo).to.equal(10);\nexpect(wrapper.state('foo')).to.equal(10);\n```\n\n## Related Methods\n\n- [`.props() => Object`](props)\n- [`.prop(key) => Any`](prop)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/state.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/state.html)"
- name: .state()
  id: docs/api/reactwrapper/state
  summary: Returns the state hash for the root node of the wrapper
  description: "# .state(\\[key\\]) =\\> Any\n\nReturns the state hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n\n## Arguments\n\n1.  `key` (`String` \\[optional\\]): If provided, the return value will be the `this.state[key]` of the root component instance.\n\n## Example\n\n``` jsx\nconst wrapper = mount(<MyComponent />);\nexpect(wrapper.state().foo).to.equal(10);\nexpect(wrapper.state('foo')).to.equal(10);\n```\n\n## Related Methods\n\n- [`.props() => Object`](props)\n- [`.prop(key) => Any`](prop)\n- [`.context([key]) => Any`](context)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/state.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/state.html)"
- name: .tap()
  id: docs/api/shallowwrapper/tap
  summary: Invokes intercepter and returns itself
  description: "# .tap(intercepter) =\\> Self\n\nInvokes intercepter and returns itself. intercepter is called with itself. This is helpful when debugging nodes in method chains.\n\n## Arguments\n\n1.  `intercepter` (`Self`): the current ShallowWrapper instance.\n\n## Returns\n\n`Self`: the current ShallowWrapper instance.\n\n## Example\n\n``` jsx\nconst result = shallow((\n  <ul>\n    <li>xxx</li>\n    <li>yyy</li>\n    <li>zzz</li>\n  </ul>\n)).find('li')\n  .tap((n) => console.log(n.debug()))\n  .map((n) => n.text());\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/tap.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/tap.html)"
- name: .tap()
  id: docs/api/reactwrapper/tap
  summary: Invokes intercepter and returns itself
  description: "# .tap(intercepter) =\\> Self\n\nInvokes intercepter and returns itself. intercepter is called with itself. This is helpful when debugging nodes in method chains.\n\n## Arguments\n\n1.  `intercepter` (`Self`): the current ReactWrapper instance.\n\n## Returns\n\n`Self`: the current ReactWrapper instance.\n\n## Example\n\n``` jsx\nconst result = mount((\n  <ul>\n    <li>xxx</li>\n    <li>yyy</li>\n    <li>zzz</li>\n  </ul>\n)).find('li')\n  .tap((n) => console.log(n.debug()))\n  .map((n) => n.text());\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/tap.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/tap.html)"
- name: .text()
  id: docs/api/shallowwrapper/text
  summary: Returns a string of the rendered text of the current render tree
  description: "# .text() =\\> String\n\nReturns a string of the rendered text of the current render tree. This function should be looked at with skepticism if being used to test what the actual HTML output of the component will be. If that is what you would like to test, use enzyme's `render` function instead.\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String`: The resulting string\n\n## Examples\n\n``` jsx\nconst wrapper = shallow(<div><b>important</b></div>);\nexpect(wrapper.text()).to.equal('important');\n```\n\n``` jsx\nconst wrapper = shallow(<div><Foo /><b>important</b></div>);\nexpect(wrapper.text()).to.equal('<Foo />important');\n```\n\n## Related Methods\n\n[`.html() => String`](html)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/text.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/text.html)"
- name: .text()
  id: docs/api/reactwrapper/text
  summary: Returns a string of the rendered text of the current render tree
  description: "# .text() =\\> String\n\nReturns a string of the rendered text of the current render tree. This function should be looked at with skepticism if being used to test what the actual HTML output of the component will be. If that is what you would like to test, use enzyme's `render` function instead.\n\nNote: can only be called on a wrapper of a single node.\n\n## Returns\n\n`String`: The resulting string\n\n## Examples\n\n``` jsx\nconst wrapper = mount(<div><b>important</b></div>);\nexpect(wrapper.text()).to.equal('important');\n```\n\n``` jsx\nfunction Foo() {\n  return <div>This is</div>;\n}\n\nconst wrapper = mount(<div><Foo /> <b>really</b> important</div>);\nexpect(wrapper.text()).to.equal('This is really important');\n```\n\n## Related Methods\n\n[`.html() => String`](html)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/text.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/text.html)"
- name: .type()
  id: docs/api/shallowwrapper/type
  summary: Returns the type of the only node of this wrapper
  description: "# .type() =\\> String \\| Function \\| null\n\nReturns the type of the only node of this wrapper. If it's a React component, this will be the component constructor. If it's a native DOM node, it will be a string with the tag name. If it's `null`, it will be `null`. It must be a single-node wrapper.\n\n## Returns\n\n`String | Function | null`: The type of the node\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return <div />;\n}\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.type()).to.equal('div');\n```\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <button type=\"button\" className=\"btn\">Button</button>\n    </div>\n  );\n}\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.find('.btn').type()).to.equal('button');\n```\n\n``` jsx\nfunction Foo() {\n  return <Bar />;\n}\nconst wrapper = shallow(<Foo />);\nexpect(wrapper.type()).to.equal(Bar);\n```\n\n``` jsx\nfunction Null() {\n  return null;\n}\nconst wrapper = shallow(<Null />);\nexpect(wrapper.type()).to.equal(null);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/type.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/type.html)"
- name: .type()
  id: docs/api/reactwrapper/type
  summary: Returns the type of the only node of this wrapper
  description: "# .type() =\\> String \\| Function \\| null\n\nReturns the type of the only node of this wrapper. If it's a React component, this will be the component constructor. If it's a native DOM node, it will be a string with the tag name. If it's `null`, it will be `null`. It must be a single-node wrapper.\n\n## Returns\n\n`String | Function | null`: The type of the node\n\n## Examples\n\n``` jsx\nfunction Foo() {\n  return <div />;\n}\nconst wrapper = mount(<Foo />);\nexpect(wrapper.type()).to.equal('div');\n```\n\n``` jsx\nfunction Foo() {\n  return (\n    <div>\n      <button type=\"button\" className=\"btn\">Button</button>\n    </div>\n  );\n}\nconst wrapper = mount(<Foo />);\nexpect(wrapper.find('.btn').type()).to.equal('button');\n```\n\n``` jsx\nfunction Foo() {\n  return <Bar />;\n}\nconst wrapper = mount(<Foo />);\nexpect(wrapper.type()).to.equal(Bar);\n```\n\n``` jsx\nfunction Null() {\n  return null;\n}\nconst wrapper = mount(<Null />);\nexpect(wrapper.type()).to.equal(null);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/type.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/type.html)"
- name: .unmount()
  id: docs/api/shallowwrapper/unmount
  summary: A method that unmounts the component
  description: "# .unmount() =\\> Self\n\nA method that unmounts the component. This can be used to simulate a component going through an unmount/mount lifecycle.\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\nimport sinon from 'sinon';\n\nconst spy = sinon.spy();\n\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentWillUnmount = spy;\n  }\n\n  render() {\n    const { id } = this.props;\n    return (\n      <div className={id}>\n        {id}\n      </div>\n    );\n  }\n}\nFoo.propTypes = {\n  id: PropTypes.string.isRequired,\n};\nconst wrapper = shallow(<Foo id=\"foo\" />);\nexpect(spy).to.have.property('callCount', 0);\nwrapper.unmount();\nexpect(spy).to.have.property('callCount', 1);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/unmount.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/unmount.html)"
- name: .unmount()
  id: docs/api/reactwrapper/unmount
  summary: A method that unmounts the component
  description: "# .unmount() =\\> Self\n\nA method that unmounts the component. This can be used to simulate a component going through an unmount/mount lifecycle.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nimport PropTypes from 'prop-types';\nimport sinon from 'sinon';\n\nconst willMount = sinon.spy();\nconst didMount = sinon.spy();\nconst willUnmount = sinon.spy();\n\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentWillUnmount = willUnmount;\n    this.componentWillMount = willMount;\n    this.componentDidMount = didMount;\n  }\n\n  render() {\n    const { id } = this.props;\n    return (\n      <div className={id}>\n        {id}\n      </div>\n    );\n  }\n}\nFoo.propTypes = {\n  id: PropTypes.string.isRequired,\n};\nconst wrapper = mount(<Foo id=\"foo\" />);\nexpect(willMount).to.have.property('callCount', 1);\nexpect(didMount).to.have.property('callCount', 1);\nexpect(willUnmount).to.have.property('callCount', 0);\nwrapper.unmount();\nexpect(willMount).to.have.property('callCount', 1);\nexpect(didMount).to.have.property('callCount', 1);\nexpect(willUnmount).to.have.property('callCount', 1);\n```\n\n## Related Methods\n\n- [`.mount() => Self`](mount)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/unmount.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/unmount.html)"
- name: .update()
  id: docs/api/shallowwrapper/update
  summary: Syncs the enzyme component tree snapshot with the react component tree
  description: "# .update() =\\> Self\n\nSyncs the enzyme component tree snapshot with the react component tree. Useful to run before checking the render output if something external may be updating the state of the component somewhere.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\nNOTE: this does not force a re-render. Use `wrapper.setProps({})` to force a re-render.\n\n## Returns\n\n`ShallowWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nclass ImpureRender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.count = 0;\n  }\n\n  render() {\n    this.count += 1;\n    return <div>{this.count}</div>;\n  }\n}\n```\n\n``` jsx\nconst wrapper = shallow(<ImpureRender />);\nexpect(wrapper.text()).to.equal('0');\nwrapper.update();\nexpect(wrapper.text()).to.equal('1');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/update.html](https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/update.html)"
- name: .update()
  id: docs/api/reactwrapper/update
  summary: Syncs the enzyme component tree snapshot with the react component tree
  description: "# .update() =\\> Self\n\nSyncs the enzyme component tree snapshot with the react component tree. Useful to run before checking the render output if something external may be updating the state of the component somewhere.\n\nNOTE: can only be called on a wrapper instance that is also the root instance.\n\nNOTE: this does not force a re-render. Use `wrapper.setProps({})` to force a re-render.\n\n## Returns\n\n`ReactWrapper`: Returns itself.\n\n## Example\n\n``` jsx\nclass ImpureRender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.count = 0;\n  }\n\n  render() {\n    this.count += 1;\n    return <div>{this.count}</div>;\n  }\n}\n```\n\n``` jsx\nconst wrapper = mount(<ImpureRender />);\nexpect(wrapper.text()).to.equal('0');\nwrapper.update();\nexpect(wrapper.text()).to.equal('1');\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/update.html](https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/update.html)"
- name: enzyme Selectors
  id: docs/api/selector
  summary: Many methods in enzyme’s API accept a selector as an argument
  description: "# enzyme Selectors\n\nMany methods in enzyme’s API accept a *selector* as an argument. You can select several different ways:\n\n## 1. A Valid CSS Selector\n\nenzyme supports a subset of valid CSS selectors to find nodes inside a render tree. Support is as follows:\n\n- class syntax (`.foo`, `.foo-bar`, etc.)\n- element tag name syntax (`input`, `div`, `span`, etc.)\n- id syntax (`#foo`, `#foo-bar`, etc.)\n- attribute syntax (`[href=\"foo\"]`, `[type=\"text\"]`, and the other attribute selectors listed [here](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Attribute_selectors).)\n- universal syntax (`*`)\n- React component name and props (`Button`, `Button[type=\"submit\"]`, etc) - however, please note that it is strongly encouraged to find by component constructor/function and not by display name.\n\nThe attribute syntax also works by value, rather than by string. Strings, numbers, and boolean property values are supported. Example:\n\n``` js\nconst wrapper = mount((\n  <div>\n    <span anum={3} abool={false} />\n    <span anum=\"3\" abool=\"false\" />\n  </div>\n));\n```\n\nThe selector `[anum=3]` will select the first but not the second, because there's no quotes surrounding the 3. The selector `[anum=\"3\"]` will select the second, because it's explicitly looking for a string because of the quotes surrounding 3. The same goes for the boolean; \\[abool=false\\] will select the first but not the second, etc.\n\nFurther, enzyme supports combining any of those supported syntaxes together, as with CSS:\n\n``` css\ndiv.foo.bar\ninput#input-name\na[href=\"foo\"]\n.foo .bar\n.foo > .bar\n.foo + .bar\n.foo ~ .bar\n.foo input\n```\n\n**React Key and Ref Props**\n\nWhile in most cases, any React prop can be used, there are exceptions. The `key` and `ref` props will never work; React uses these props internally.\n\n**Want more CSS support?**\n\nPRs implementing more support for CSS selectors will be accepted and is an area of development for enzyme that will likely be focused on in the future.\n\n## 2. A React Component Constructor\n\nenzyme allows you to find React components based on their constructor. You can pass in the reference to the component’s constructor. Of course, this kind of selector only checks the component type; it ignores props and children.\n\n``` jsx\nfunction MyComponent() {\n  return <div />;\n}\n\n// find instances of MyComponent\nconst myComponents = wrapper.find(MyComponent);\n```\n\n## 3. A React Component’s displayName\n\nenzyme allows you to find components based on a component’s `displayName`. If a component exists in a render tree where its `displayName` is set and has its first character as a capital letter, you can use a string to find it:\n\n``` jsx\nfunction MyComponent() {\n  return <div />;\n}\nMyComponent.displayName = 'My Component';\n\n// find instances of MyComponent\nconst myComponents = wrapper.find('My Component');\n```\n\nNOTE: This will *only* work if the selector (and thus the component’s `displayName`) is a string starting with a capital letter. Strings starting with lower case letters will be assumed to be a CSS selector (therefore a tag name).\n\nSelecting a HOC-wrapped component, or a component with a custom `displayName`, even with lowercase letters (for example, `withHOC(MyComponent)`) will work as well.\n\n## 4. Object Property Selector\n\nenzyme allows you to find components and nodes based on a subset of their properties:\n\n``` jsx\nconst wrapper = mount((\n  <div>\n    <span foo={3} bar={false} title=\"baz\" />\n  </div>\n));\n\nwrapper.find({ foo: 3 });\nwrapper.find({ bar: false });\nwrapper.find({ title: 'baz' });\n```\n\n**Undefined Properties**\n\nUndefined properties are not allowed in the object property selector and will cause an error:\n\n``` jsx\nwrapper.find({ foo: 3, bar: undefined });\n// => TypeError: Enzyme::Props can't have 'undefined' values. Try using 'findWhere()' instead.\n```\n\nIf you have to search by `undefined` property value, use [`.findWhere()`](shallowwrapper/findwhere).\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/selector.html](https://enzymejs.github.io/enzyme/docs/api/selector.html)"
- name: Full Rendering API
  id: docs/api/mount
  summary: Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or need to test components that are wrapped in higher order components
  description: "# Full Rendering API (mount(...))\n\nFull DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or need to test components that are wrapped in higher order components.\n\nFull DOM rendering requires that a full DOM API be available at the global scope. This means that it must be run in an environment that at least “looks like” a browser environment. If you do not want to run your tests inside of a browser, the recommended approach to using `mount` is to depend on a library called [jsdom](https://github.com/tmpvar/jsdom) which is essentially a headless browser implemented completely in JS.\n\n**Note**: unlike shallow or static rendering, full rendering actually mounts the component in the DOM, which means that tests can affect each other if they are all using the same DOM. Keep that in mind while writing your tests and, if necessary, use [`.unmount()`](reactwrapper/unmount) or something similar as cleanup.\n\n``` jsx\nimport { mount } from 'enzyme';\nimport sinon from 'sinon';\nimport Foo from './Foo';\n\ndescribe('<Foo />', () => {\n  it('calls componentDidMount', () => {\n    sinon.spy(Foo.prototype, 'componentDidMount');\n    const wrapper = mount(<Foo />);\n    expect(Foo.prototype.componentDidMount).to.have.property('callCount', 1);\n  });\n\n  it('allows us to set props', () => {\n    const wrapper = mount(<Foo bar=\"baz\" />);\n    expect(wrapper.props().bar).to.equal('baz');\n    wrapper.setProps({ bar: 'foo' });\n    expect(wrapper.props().bar).to.equal('foo');\n  });\n\n  it('simulates click events', () => {\n    const onButtonClick = sinon.spy();\n    const wrapper = mount((\n      <Foo onButtonClick={onButtonClick} />\n    ));\n    wrapper.find('button').simulate('click');\n    expect(onButtonClick).to.have.property('callCount', 1);\n  });\n});\n```\n\n## `mount(node[, options]) => ReactWrapper`\n\n## Arguments\n\n1.  `node` (`ReactElement`): The node to render\n2.  `options` (`Object` \\[optional\\]):\n3.  `options.context`: (`Object` \\[optional\\]): Context to be passed into the component\n4.  `options.attachTo`: (`DOMElement` \\[optional\\]): DOM Element to attach the component to.\n5.  `options.childContextTypes`: (`Object` \\[optional\\]): Merged contextTypes for all children of the wrapper.\n6.  `options.wrappingComponent`: (`ComponentType` \\[optional\\]): A component that will render as a parent of the `node`. It can be used to provide context to the `node`, among other things. See the [`getWrappingComponent()` docs](reactwrapper/getwrappingcomponent) for an example. **Note**: `wrappingComponent` *must* render its children.\n7.  `options.wrappingComponentProps`: (`Object` \\[optional\\]): Initial props to pass to the `wrappingComponent` if it is specified.\n\n## Returns\n\n`ReactWrapper`: The wrapper instance around the rendered output.\n\n## ReactWrapper API\n\n## [`.find(selector) => ReactWrapper`](reactwrapper/find)\n\nFind every node in the render tree that matches the provided selector.\n\n## [`.findWhere(predicate) => ReactWrapper`](reactwrapper/findwhere)\n\nFind every node in the render tree that returns true for the provided predicate function.\n\n## [`.filter(selector) => ReactWrapper`](reactwrapper/filter)\n\nRemove nodes in the current wrapper that do not match the provided selector.\n\n## [`.filterWhere(predicate) => ReactWrapper`](reactwrapper/filterwhere)\n\nRemove nodes in the current wrapper that do not return true for the provided predicate function.\n\n## [`.hostNodes() => ReactWrapper`](reactwrapper/hostnodes)\n\nRemoves nodes that are not host nodes; e.g., this will only return HTML nodes.\n\n## [`.contains(nodeOrNodes) => Boolean`](reactwrapper/contains)\n\nReturns whether or not a given node or array of nodes exists in the render tree.\n\n## [`.containsMatchingElement(node) => Boolean`](reactwrapper/containsmatchingelement)\n\nReturns whether or not a given react element exists in the render tree.\n\n## [`.containsAllMatchingElements(nodes) => Boolean`](reactwrapper/containsallmatchingelements)\n\nReturns whether or not all the given react elements exist in the render tree.\n\n## [`.containsAnyMatchingElements(nodes) => Boolean`](reactwrapper/containsanymatchingelements)\n\nReturns whether or not one of the given react elements exist in the render tree.\n\n## [`.equals(node) => Boolean`](reactwrapper/equals)\n\nReturns whether or not the current wrapper root node render tree looks like the one passed in.\n\n## [`.hasClass(className) => Boolean`](reactwrapper/hasclass)\n\nReturns whether or not the current root node has the given class name or not.\n\n## [`.is(selector) => Boolean`](reactwrapper/is)\n\nReturns whether or not the current node matches a provided selector.\n\n## [`.exists([selector]) => Boolean`](reactwrapper/exists)\n\nReturns whether or not the current node exists, or, if given a selector, whether that selector has any matching results.\n\n## [`.isEmpty() => Boolean`](reactwrapper/isempty)\n\n*Deprecated*: Use [`.exists()`](reactwrapper/exists) instead.\n\n## [`.isEmptyRender() => Boolean`](reactwrapper/isemptyrender)\n\nReturns whether or not the current component returns a falsy value.\n\n## [`.not(selector) => ReactWrapper`](reactwrapper/not)\n\nRemove nodes in the current wrapper that match the provided selector. (inverse of `.filter()`)\n\n## [`.children([selector]) => ReactWrapper`](reactwrapper/children)\n\nGet a wrapper with all of the children nodes of the current wrapper.\n\n## [`.childAt(index) => ReactWrapper`](reactwrapper/childat)\n\nReturns a new wrapper with child at the specified index.\n\n## [`.parents([selector]) => ReactWrapper`](reactwrapper/parents)\n\nGet a wrapper with all of the parents (ancestors) of the current node.\n\n## [`.parent() => ReactWrapper`](reactwrapper/parent)\n\nGet a wrapper with the direct parent of the current node.\n\n## [`.closest(selector) => ReactWrapper`](reactwrapper/closest)\n\nGet a wrapper with the first ancestor of the current node to match the provided selector.\n\n## [`.render() => CheerioWrapper`](reactwrapper/render)\n\nReturns a CheerioWrapper of the current node's subtree.\n\n## [`.renderProp(key)() => ReactWrapper`](reactwrapper/renderprop)\n\nReturns a wrapper of the node rendered by the provided render prop.\n\n## [`.text() => String`](reactwrapper/text)\n\nReturns a string representation of the text nodes in the current render tree.\n\n## [`.html() => String`](reactwrapper/html)\n\nReturns a static HTML rendering of the current node.\n\n## [`.get(index) => ReactElement`](reactwrapper/get)\n\nReturns the node at the provided index of the current wrapper.\n\n## [`.getDOMNode() => DOMComponent`](reactwrapper/getdomnode)\n\nReturns the outer most DOMComponent of the current wrapper.\n\n## [`.at(index) => ReactWrapper`](reactwrapper/at)\n\nReturns a wrapper of the node at the provided index of the current wrapper.\n\n## [`.first() => ReactWrapper`](reactwrapper/first)\n\nReturns a wrapper of the first node of the current wrapper.\n\n## [`.last() => ReactWrapper`](reactwrapper/last)\n\nReturns a wrapper of the last node of the current wrapper.\n\n## [`.state([key]) => Any`](reactwrapper/state)\n\nReturns the state of the root component.\n\n## [`.context([key]) => Any`](reactwrapper/context)\n\nReturns the context of the root component.\n\n## [`.props() => Object`](reactwrapper/props)\n\nReturns the props of the root component.\n\n## [`.prop(key) => Any`](reactwrapper/prop)\n\nReturns the named prop of the root component.\n\n## [`.invoke(propName)(...args) => Any`](reactwrapper/invoke)\n\nInvokes a prop function on the current node and returns the function's return value.\n\n## [`.key() => String`](reactwrapper/key)\n\nReturns the key of the root component.\n\n## [`.simulate(event[, mock]) => ReactWrapper`](reactwrapper/simulate)\n\nSimulates an event on the current node.\n\n## [`.setState(nextState) => ReactWrapper`](reactwrapper/setstate)\n\nManually sets state of the root component.\n\n## [`.setProps(nextProps[, callback]) => ReactWrapper`](reactwrapper/setprops)\n\nManually sets props of the root component.\n\n## [`.setContext(context) => ReactWrapper`](reactwrapper/setcontext)\n\nManually sets context of the root component.\n\n## [`.instance() => ReactComponent|DOMComponent`](reactwrapper/instance)\n\nReturns the wrapper's underlying instance.\n\n## [`.getWrappingComponent() => ReactWrapper`](reactwrapper/getwrappingcomponent)\n\nReturns a wrapper representing the `wrappingComponent`, if one was passed.\n\n## [`.unmount() => ReactWrapper`](reactwrapper/unmount)\n\nA method that un-mounts the component.\n\n## [`.mount() => ReactWrapper`](reactwrapper/mount)\n\nA method that re-mounts the component.\n\n## [`.update() => ReactWrapper`](reactwrapper/update)\n\nSyncs the enzyme component tree snapshot with the react component tree.\n\n## [`.debug() => String`](reactwrapper/debug)\n\nReturns a string representation of the current render tree for debugging purposes.\n\n## [`.type() => String|Function`](reactwrapper/type)\n\nReturns the type of the current node of the wrapper.\n\n## [`.name() => String`](reactwrapper/name)\n\nReturns the name of the current node of the wrapper.\n\n## [`.forEach(fn) => ReactWrapper`](reactwrapper/foreach)\n\nIterates through each node of the current wrapper and executes the provided function\n\n## [`.map(fn) => Array`](reactwrapper/map)\n\nMaps the current array of nodes to another array.\n\n## [`.matchesElement(node) => Boolean`](reactwrapper/matcheselement)\n\nReturns whether or not a given react element matches the current render tree.\n\n## [`.reduce(fn[, initialValue]) => Any`](reactwrapper/reduce)\n\nReduces the current array of nodes to a value\n\n## [`.reduceRight(fn[, initialValue]) => Any`](reactwrapper/reduceright)\n\nReduces the current array of nodes to a value, from right to left.\n\n## [`.slice([begin[, end]]) => ReactWrapper`](reactwrapper/slice)\n\nReturns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of `Array#slice`.\n\n## [`.tap(intercepter) => Self`](reactwrapper/tap)\n\nTaps into the wrapper method chain. Helpful for debugging.\n\n## [`.some(selector) => Boolean`](reactwrapper/some)\n\nReturns whether or not any of the nodes in the wrapper match the provided selector.\n\n## [`.someWhere(predicate) => Boolean`](reactwrapper/somewhere)\n\nReturns whether or not any of the nodes in the wrapper pass the provided predicate function.\n\n## [`.every(selector) => Boolean`](reactwrapper/every)\n\nReturns whether or not all of the nodes in the wrapper match the provided selector.\n\n## [`.everyWhere(predicate) => Boolean`](reactwrapper/everywhere)\n\nReturns whether or not all of the nodes in the wrapper pass the provided predicate function.\n\n## [`.ref(refName) => ReactComponent | HTMLElement`](reactwrapper/ref)\n\nReturns the node that matches the provided reference name.\n\n## [`.detach() => void`](reactwrapper/detach)\n\nUnmount the component from the DOM node it's attached to.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/mount.html](https://enzymejs.github.io/enzyme/docs/api/mount.html)"
- name: Installation
  id: docs/installation/index
  summary: enzyme can be used with your test runner of choice
  description: "# Installation\n\nenzyme should be installed using npm:\n\n``` bash\nnpm i --save-dev enzyme\n```\n\nenzyme can be used with your test runner of choice. All examples in the documentation will be provided using [mocha](https://mochajs.org/) and [BDD style chai](http://chaijs.com/api/bdd/), although neither library is a dependency of enzyme.\n\n# Working with React 16\n\nIf you are wanting to use enzyme with React 16, but don't already have React 16 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@16 react-dom@16\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-16\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-16');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n# Working with React 15\n\nIf you are wanting to use Enzyme with React 15, but don't already have React 15 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@15 react-dom@15\n```\n\nFurther, enzyme requires the test utilities addon be installed:\n\n``` bash\nnpm i --save-dev react-test-renderer@15\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-15\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-15';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-15');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n# Working with React 0.14\n\nIf you are wanting to use Enzyme with React 0.14, but don't already have React 0.14 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@0.14 react-dom@0.14\n```\n\nFurther, enzyme with React 0.14 requires the test utilities addon be installed:\n\n``` bash\nnpm i --save-dev react-addons-test-utils@0.14\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-14\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-14';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-14');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n# Working with React 0.13\n\nIf you are wanting to use enzyme with React 0.13, but don't already have React 0.13 installed, you should do so:\n\n``` bash\nnpm i react@0.13 --save\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-13\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-13';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-13');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/installation/](https://enzymejs.github.io/enzyme/docs/installation/)"
- name: Migration Guide for enzyme v2.x to v3.x
  id: docs/guides/migration-from-2-to-3
  summary: The change from enzyme v2.x to v3.x is a more significant change than in previous major releases, due to the fact that the internal implementation of enzyme has been almost completely rewritten
  description: "# Migration Guide for enzyme v2.x to v3.x\n\nThe change from enzyme v2.x to v3.x is a more significant change than in previous major releases, due to the fact that the internal implementation of enzyme has been almost completely rewritten.\n\nThe goal of this rewrite was to address a lot of the major issues that have plagued enzyme since its initial release. It was also to simultaneously remove a lot of the dependencies that enzyme has on React internals, and to make enzyme more \"pluggable\", paving the way for enzyme to be used with \"React-like\" libraries such as Preact and Inferno.\n\nWe have done our best to make enzyme v3 as API compatible with v2.x as possible, however there are a handful of breaking changes that we decided we needed to make, intentionally, in order to support this new architecture and also improve the usability of the library long-term.\n\nAirbnb has one of the largest enzyme test suites, coming in at around 30,000 enzyme unit tests. After upgrading enzyme to v3.x in Airbnb's code base, 99.6% of these tests succeeded with no modifications at all. Most of the tests that broke we found to be easy to fix, and some we found to actually depend on what could arguably be considered a bug in v2.x, and the breakage was actually desired.\n\nIn this guide, we will go over a couple of the most common breakages that we ran into, and how to fix them. Hopefully this will make your upgrade path that much easier. If during your upgrade you find a breakage that doesn't seem to make sense to you, feel free to file an issue.\n\n## Configuring your Adapter\n\nenzyme now has an \"Adapter\" system. This means that you now need to install enzyme along with another module that provides the Adapter that tells enzyme how to work with your version of React (or whatever other React-like library you are using).\n\nAt the time of writing this, enzyme publishes \"officially supported\" adapters for React 0.13.x, 0.14.x, 15.x, and 16.x. These adapters are npm packages of the form `enzyme-adapter-react-{{version}}`.\n\nYou will want to configure enzyme with the adapter you'd like to use before using enzyme in your tests. The way to do this is with `enzyme.configure(...)`. For example, if your project depends on React 16, you would want to configure enzyme this way:\n\n``` js\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nEnzyme.configure({ adapter: new Adapter() });\n```\n\nThe list of adapter npm packages for React semver ranges are as follows:\n\n| enzyme Adapter Package      | React semver compatibility |     |         |\n|-----------------------------|----------------------------|-----|---------|\n| `enzyme-adapter-react-16`   | `^16.4.0-0`                |     |         |\n| `enzyme-adapter-react-16.3` | `~16.3.0-0`                |     |         |\n| `enzyme-adapter-react-16.2` | `~16.2`                    |     |         |\n| `enzyme-adapter-react-16.1` | \\`~16.0.0-0 \\\\             | \\\\  | ~16.1\\` |\n| `enzyme-adapter-react-15`   | `^15.5.0`                  |     |         |\n| `enzyme-adapter-react-15.4` | `15.0.0-0 - 15.4.x`        |     |         |\n| `enzyme-adapter-react-14`   | `^0.14.0`                  |     |         |\n| `enzyme-adapter-react-13`   | `^0.13.0`                  |     |         |\n\n## Element referential identity is no longer preserved\n\nenzyme's new architecture means that the react \"render tree\" is transformed into an intermediate representation that is common across all react versions so that enzyme can properly traverse it independent of React's internal representations. A side effect of this is that enzyme no longer has access to the actual object references that were returned from `render` in your React components. This normally isn't much of a problem, but can manifest as a test failure in some cases.\n\nFor example, consider the following example:\n\n``` js\nimport React from 'react';\nimport Icon from './path/to/Icon';\n\nconst ICONS = {\n  success: <Icon name=\"check-mark\" />,\n  failure: <Icon name=\"exclamation-mark\" />,\n};\n\nconst StatusLabel = ({ id, label }) => <div>{ICONS[id]}{label}{ICONS[id]}</div>;\n```\n\n``` js\nimport { shallow } from 'enzyme';\nimport StatusLabel from './path/to/StatusLabel';\nimport Icon from './path/to/Icon';\n\nconst wrapper = shallow(<StatusLabel id=\"success\" label=\"Success\" />);\n\nconst iconCount = wrapper.find(Icon).length;\n```\n\nIn v2.x, `iconCount` would be 1. In v3.x, it will be 2. This is because in v2.x it would find all of the elements matching the selector, and then remove any duplicates. Since `ICONS.success` is included twice in the render tree, but it's a constant that's reused, it would show up as a duplicate in the eyes of enzyme v2.x. In enzyme v3, the elements that are traversed are transformations of the underlying react elements, and are thus different references, resulting in two elements being found.\n\nAlthough this is a breaking change, I believe the new behavior is closer to what people would actually expect and want. Having enzyme wrappers be immutable results in more deterministic tests that are less prone to flakiness from external factors.\n\n### Calling `props()` after a state change\n\nIn `enzyme` v2, executing an event that would change a component state (and in turn update props) would return those updated props via the `.props` method.\n\nNow, in `enzyme` v3, you are required to re-find the component; for example:\n\n``` jsx\nclass Toggler extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { on: false };\n  }\n\n  toggle() {\n    this.setState(({ on }) => ({ on: !on }));\n  }\n\n  render() {\n    const { on } = this.state;\n    return (<div id=\"root\">{on ? 'on' : 'off'}</div>);\n  }\n}\n\nit('passes in enzyme v2, fails in v3', () => {\n  const wrapper = mount(<Toggler />);\n  const root = wrapper.find('#root');\n  expect(root.text()).to.equal('off');\n\n  wrapper.instance().toggle();\n\n  expect(root.text()).to.equal('on');\n});\n\nit('passes in v2 and v3', () => {\n  const wrapper = mount(<Toggler />);\n  expect(wrapper.find('#root').text()).to.equal('off');\n\n  wrapper.instance().toggle();\n\n  expect(wrapper.find('#root').text()).to.equal('on');\n});\n```\n\n## `children()` now has slightly different meaning\n\nenzyme has a `.children()` method which is intended to return the rendered children of a wrapper.\n\nWhen using `mount(...)`, it can sometimes be unclear exactly what this would mean. Consider for example the following react components:\n\n``` js\nclass Box extends React.Component {\n  render() {\n    const { children } = this.props;\n    return <div className=\"box\">{children}</div>;\n  }\n}\n\nclass Foo extends React.Component {\n  render() {\n    return (\n      <Box bam>\n        <div className=\"div\" />\n      </Box>\n    );\n  }\n}\n```\n\nNow lets say we have a test which does something like:\n\n``` js\nconst wrapper = mount(<Foo />);\n```\n\nAt this point, there is an ambiguity about what `wrapper.find(Box).children()` should return. Although the `<Box ... />` element has a `children` prop of `<div className=\"div\" />`, the actual rendered children of the element that the box component renders is a `<div className=\"box\">...</div>` element.\n\nPrior enzyme v3, we would observe the following behavior:\n\n``` js\nwrapper.find(Box).children().debug();\n// => <div className=\"div\" />\n```\n\nIn enzyme v3, we now have `.children()` return the *rendered* children. In other words, it returns the element that is returned from that component's `render` function.\n\n``` js\nwrapper.find(Box).children().debug();\n// =>\n// <div className=\"box\">\n//   <div className=\"div\" />\n// </div>\n```\n\nThis may seem like a subtle difference, but making this change will be important for future APIs we would like to introduce.\n\n## `find()` now returns host nodes and DOM nodes\n\nIn some cases find will return a host node and DOM node. Take the following for example:\n\n    const Foo = () => <div/>;\n    const wrapper = mount(\n      <div>\n        <Foo className=\"bar\" />\n        <div className=\"bar\"/>\n       </div>\n    );\n    console.log(wrapper.find('.bar').length); // 2\n\nSince `<Foo/>` has the className `bar` it is returned as the *hostNode*. As expected the `<div>` with the className `bar` is also returned\n\nTo avoid this you can explicity query for the DOM node: `wrapper.find('div.bar')`. Alternatively if you would like to only find host nodes use [hostNodes()](https://airbnb.io/enzyme/docs/api/ShallowWrapper/hostNodes.html)\n\n## For `mount`, updates are sometimes required when they weren't before\n\nReact applications are dynamic. When testing your react components, you often want to test them before *and after* certain state changes take place. When using `mount`, any react component instance in the entire render tree could register code to initiate a state change at any time.\n\nFor instance, consider the following contrived example:\n\n``` js\nimport React from 'react';\n\nclass CurrentTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      now: Date.now(),\n    };\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  tick() {\n    this.setState({ now: Date.now() });\n    this.timer = setTimeout(tick, 0);\n  }\n\n  render() {\n    const { now } = this.state;\n    return <span>{now}</span>;\n  }\n}\n```\n\nIn this code, there is a timer that continuously changes the rendered output of this component. This might be a reasonable thing to do in your application. The thing is, enzyme has no way of knowing that these changes are taking place, and no way to automatically update the render tree. In enzyme v2, enzyme operated *directly* on the in-memory representation of the render tree that React itself had. This means that even though enzyme couldn't know when the render tree was updated, updates would be reflected anyway, since React *does* know.\n\nenzyme v3 architecturally created a layer where React would create an intermediate representation of the render tree at an instance in time and pass that to enzyme to traverse and inspect. This has many advantages, but one of the side effects is that now the intermediate representation does not receive automatic updates.\n\nenzyme does attempt to automatically \"update\" the root wrapper in most common scenarios, but these are only the state changes that it knows about. For all other state changes, you may need to call `wrapper.update()` yourself.\n\nThe most common manifestation of this problem can be shown with the following example:\n\n``` js\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  increment() {\n    this.setState(({ count }) => ({ count: count + 1 }));\n  }\n\n  decrement() {\n    this.setState(({ count }) => ({ count: count - 1 }));\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div>\n        <div className=\"count\">Count: {count}</div>\n        <button type=\"button\" className=\"inc\" onClick={this.increment}>Increment</button>\n        <button type=\"button\" className=\"dec\" onClick={this.decrement}>Decrement</button>\n      </div>\n    );\n  }\n}\n```\n\nThis is a basic \"counter\" component in React. Here our resulting markup is a function of `this.state.count`, which can get updated by the `increment` and `decrement` functions. Let's take a look at what some enzyme tests with this component might look like, and when we do or don't have to call `update()`.\n\n``` js\nconst wrapper = shallow(<Counter />);\nwrapper.find('.count').text(); // => \"Count: 0\"\n```\n\nAs we can see, we can easily assert on the text and the count of this component. But we haven't caused any state changes yet. Let's see what it looks like when we simulate a `click` event on the increment and decrement buttons:\n\n``` js\nconst wrapper = shallow(<Counter />);\nwrapper.find('.count').text(); // => \"Count: 0\"\nwrapper.find('.inc').simulate('click');\nwrapper.find('.count').text(); // => \"Count: 1\"\nwrapper.find('.inc').simulate('click');\nwrapper.find('.count').text(); // => \"Count: 2\"\nwrapper.find('.dec').simulate('click');\nwrapper.find('.count').text(); // => \"Count: 1\"\n```\n\nIn this case enzyme will automatically check for updates after an event simulation takes place, as it knows that this is a very common place for state changes to occur. In this case there is no difference between v2 and v3.\n\nLet's consider a different way this test could have been written.\n\n``` js\nconst wrapper = shallow(<Counter />);\nwrapper.find('.count').text(); // => \"Count: 0\"\nwrapper.instance().increment();\nwrapper.find('.count').text(); // => \"Count: 0\" (would have been \"Count: 1\" in v2)\nwrapper.instance().increment();\nwrapper.find('.count').text(); // => \"Count: 0\" (would have been \"Count: 2\" in v2)\nwrapper.instance().decrement();\nwrapper.find('.count').text(); // => \"Count: 0\" (would have been \"Count: 1\" in v2)\n```\n\nThe problem here is that once we grab the instance using `wrapper.instance()`, enzyme has no way of knowing if you are going to execute something that will cause a state transition, and thus does not know when to ask for an updated render tree from React. As a result, `.text()` never changes value.\n\nThe fix here is to use enzyme's `wrapper.update()` method after a state change has occurred:\n\n``` js\nconst wrapper = shallow(<Counter />);\nwrapper.find('.count').text(); // => \"Count: 0\"\nwrapper.instance().increment();\nwrapper.update();\nwrapper.find('.count').text(); // => \"Count: 1\"\nwrapper.instance().increment();\nwrapper.update();\nwrapper.find('.count').text(); // => \"Count: 2\"\nwrapper.instance().decrement();\nwrapper.update();\nwrapper.find('.count').text(); // => \"Count: 1\"\n```\n\nIn practice we have found that this isn't actually needed that often, and when it is it is not difficult to add. Additionally, having the enzyme wrapper automatically update alongside the real render tree can result in flaky tests when writing asynchronous tests. This breaking change was worth the architectural benefits of the new adapter system in v3, and we believe is a better choice for an assertion library to take.\n\n## `ref(refName)` now returns the actual ref instead of a wrapper\n\nIn enzyme v2, the wrapper returned from `mount(...)` had a prototype method on it `ref(refName)` that returned a wrapper around the actual element of that ref. This has now been changed to return the actual ref, which we believe is a more intuitive API.\n\nConsider the following simple react component:\n\n``` js\nclass Box extends React.Component {\n  render() {\n    return <div ref=\"abc\" className=\"box\">Hello</div>;\n  }\n}\n```\n\nIn this case we can call `.ref('abc')` on a wrapper of `Box`. In this case it will return a wrapper around the rendered div. To demonstrate, we can see that both `wrapper` and the result of `ref(...)` share the same constructor:\n\n``` js\nconst wrapper = mount(<Box />);\n// this is what would happen with enzyme v2\nexpect(wrapper.ref('abc')).toBeInstanceOf(wrapper.constructor);\n```\n\nIn v3, the contract is slightly changed. The ref is exactly what React would assign as the ref. In this case, it would be a DOM Element:\n\n``` js\nconst wrapper = mount(<Box />);\n// this is what happens with enzyme v3\nexpect(wrapper.ref('abc')).toBeInstanceOf(Element);\n```\n\nSimilarly, if you have a ref on a composite component, the `ref(...)` method will return an instance of that element:\n\n``` js\nclass Bar extends React.Component {\n  render() {\n    return <Box ref=\"abc\" />;\n  }\n}\n```\n\n``` js\nconst wrapper = mount(<Bar />);\nexpect(wrapper.ref('abc')).toBeInstanceOf(Box);\n```\n\nIn our experience, this is most often what people would actually want and expect out of the `.ref(...)` method.\n\nTo get the wrapper that was returned by enzyme 2:\n\n``` js\nconst wrapper = mount(<Bar />);\nconst refWrapper = wrapper.findWhere((n) => n.instance() === wrapper.ref('abc'));\n```\n\n## With `mount`, `.instance()` can be called at any level of the tree\n\nenzyme now allows for you to grab the `instance()` of a wrapper at any level of the render tree, not just at the root. This means that you can `.find(...)` a specific component, then grab its instance and call `.setState(...)` or any other methods on the instance that you'd like.\n\n## With `mount`, `.getNode()` should not be used. `.instance()` does what it used to.\n\nFor `mount` wrappers, the `.getNode()` method used to return the actual component instance. This method no longer exists, but `.instance()` is functionally equivalent to what `.getNode()` used to be.\n\n## With `shallow`, `.getNode()` should be replaced with `getElement()`\n\nFor shallow wrappers, if you were previously using `.getNode()`, you will want to replace those calls with `.getElement()`, which is now functionally equivalent to what `.getNode()` used to do. One caveat is that previously `.getNode()` would return the actual element instance that was created in the `render` function of the component you were testing, but now it will be a structurally equal react element, but not referentially equal. Your tests will need to be updated to account for this.\n\n## Private properties and methods have been removed\n\nThere are several properties that are on an enzyme \"wrapper\" that were considered to be private and were undocumented as a result. Despite being undocumented, people may have been relying on them. In an effort to make making changes less likely to be accidentally breaking in the future, we have decided to make these properties properly \"private\". The following properties will no longer be accessible on enzyme `shallow` or `mount` instances:\n\n- `.node`\n- `.nodes`\n- `.renderer`\n- `.unrendered`\n- `.root`\n- `.options`\n\n## Cheerio has been updated, thus `render(...)` has been updated as well\n\nenzyme's top level `render` API returns a [Cheerio](https://github.com/cheeriojs/cheerio) object. The version of Cheerio that we use has been upgraded to 1.0.0. For debugging issues across enzyme v2.x and v3.x with the `render` API, we recommend checking out [Cheerio's Changelog](https://github.com/cheeriojs/cheerio/blob/48eae25c93702a29b8cd0d09c4a2dce2f912d1f4/History.md) and posting an issue on that repo instead of enzyme's unless you believe it is a bug in enzyme's use of the library.\n\n## CSS Selector\n\nenzyme v3 now uses a real CSS selector parser rather than its own incomplete parser implementation. This is done with [rst-selector-parser](https://github.com/aweary/rst-selector-parser) a fork of [scalpel](https://github.com/gajus/scalpel/) which is a CSS parser implemented with [nearley](https://nearley.js.org/). We don't think this should cause any breakages across enzyme v2.x to v3.x, but if you believe you have found something that did indeed break, please file an issue with us. Thank you to [Brandon Dail](https://github.com/aweary) for making this happen!\n\n## CSS Selector results and `hostNodes()`\n\nenzyme v3 now returns **all** nodes in the result set and not just html nodes. Consider this example:\n\n``` js\nconst HelpLink = ({ text, ...rest }) => <a {...rest}>{text}</a>;\n\nconst HelpLinkContainer = ({ text, ...rest }) => (\n  <HelpLink text={text} {...rest} />\n);\n\nconst wrapper = mount(<HelpLinkContainer aria-expanded=\"true\" text=\"foo\" />);\n```\n\nIn enzyme v3, the expression `wrapper.find(\"[aria-expanded=true]\").length)` will return 3 and not 1 as in previous versions. A closer look using [`debug`](../api/reactwrapper/debug) reveals:\n\n``` jsx\n// console.log(wrapper.find('[aria-expanded=\"true\"]').debug());\n\n<HelpLinkContainer aria-expanded={true} text=\"foo\">\n  <HelpLink text=\"foo\" aria-expanded=\"true\">\n    <a aria-expanded=\"true\">\n      foo\n    </a>\n  </HelpLink>\n</HelpLinkContainer>\n\n<HelpLink text=\"foo\" aria-expanded=\"true\">\n  <a aria-expanded=\"true\">\n    foo\n  </a>\n</HelpLink>\n\n<a aria-expanded=\"true\">\n  foo\n</a>\n```\n\nTo return only the html nodes use the [`hostNodes()`](../api/reactwrapper/hostnodes) function.\n\n`wrapper.find(\"[aria-expanded=true]\").hostNodes().debug()` will now return:\n\n``` jsx\n<a aria-expanded=\"true\">foo</a>;\n```\n\n## Node Equality now ignores `undefined` values\n\nWe have updated enzyme to consider node \"equality\" in a semantically identical way to how react treats nodes. More specifically, we've updated enzyme's algorithms to treat `undefined` props as equivalent to the absence of a prop. Consider the following example:\n\n``` js\nclass Foo extends React.Component {\n  render() {\n    const { foo, bar } = this.props;\n    return <div className={foo} id={bar} />;\n  }\n}\n```\n\nWith this component, the behavior in enzyme v2.x the behavior would have been like:\n\n``` js\nconst wrapper = shallow(<Foo />);\nwrapper.equals(<div />); // => false\nwrapper.equals(<div className={undefined} id={undefined} />); // => true\n```\n\nWith enzyme v3, the behavior is now as follows:\n\n``` js\nconst wrapper = shallow(<Foo />);\nwrapper.equals(<div />); // => true\nwrapper.equals(<div className={undefined} id={undefined} />); // => true\n```\n\n## Lifecycle methods\n\nenzyme v2.x had an optional flag that could be passed in to all `shallow` calls which would make it so that more of the component's lifecycle methods were called (such as `componentDidMount` and `componentDidUpdate`).\n\nWith enzyme v3, we have now turned on this mode by default, instead of making it opt-in. It is now possible to *opt-out* instead. Additionally, you can now opt-out at a global level.\n\nIf you'd like to opt out globally, you can run the following:\n\n``` js\nimport Enzyme from 'enzyme';\n\nEnzyme.configure({ disableLifecycleMethods: true });\n```\n\nThis will default enzyme back to the previous behavior globally. If instead you'd only like to opt enzyme to the previous behavior for a specific test, you can do the following:\n\n``` js\nimport { shallow } from 'enzyme';\n\n// ...\n\nconst wrapper = shallow(<Component />, { disableLifecycleMethods: true });\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/migration-from-2-to-3.html](https://enzymejs.github.io/enzyme/docs/guides/migration-from-2-to-3.html)"
- name: Shallow Rendering API
  id: docs/api/shallow
  summary: Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components
  description: "# Shallow Rendering API\n\nShallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.\n\nAs of Enzyme v3, the `shallow` API does call React lifecycle methods such as `componentDidMount` and `componentDidUpdate`. You can read more about this in the [version 3 migration guide](../guides/migration-from-2-to-3#lifecycle-methods).\n\n``` jsx\nimport { shallow } from 'enzyme';\nimport sinon from 'sinon';\nimport Foo from './Foo';\n\ndescribe('<MyComponent />', () => {\n  it('renders three <Foo /> components', () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(Foo)).to.have.lengthOf(3);\n  });\n\n  it('renders an `.icon-star`', () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find('.icon-star')).to.have.lengthOf(1);\n  });\n\n  it('renders children when passed in', () => {\n    const wrapper = shallow((\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    ));\n    expect(wrapper.contains(<div className=\"unique\" />)).to.equal(true);\n  });\n\n  it('simulates click events', () => {\n    const onButtonClick = sinon.spy();\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find('button').simulate('click');\n    expect(onButtonClick).to.have.property('callCount', 1);\n  });\n});\n```\n\n## `shallow(node[, options]) => ShallowWrapper`\n\n## Arguments\n\n1.  `node` (`ReactElement`): The node to render\n2.  `options` (`Object` \\[optional\\]):\n    - `options.context`: (`Object` \\[optional\\]): Context to be passed into the component\n    - `options.disableLifecycleMethods`: (`Boolean` \\[optional\\]): If set to true, `componentDidMount` is not called on the component, and `componentDidUpdate` is not called after [`setProps`](shallowwrapper/setprops) and [`setContext`](shallowwrapper/setcontext). Default to `false`.\n    - `options.wrappingComponent`: (`ComponentType` \\[optional\\]): A component that will render as a parent of the `node`. It can be used to provide context to the `node`, among other things. See the [`getWrappingComponent()` docs](shallowwrapper/getwrappingcomponent) for an example. **Note**: `wrappingComponent` *must* render its children.\n    - `options.wrappingComponentProps`: (`Object` \\[optional\\]): Initial props to pass to the `wrappingComponent` if it is specified.\n    - `options.suspenseFallback`: (`Boolean` \\[optional\\]): If set to true, when rendering `Suspense` enzyme will replace all the lazy components in children with `fallback` element prop. Otherwise it won't handle fallback of lazy component. Default to `true`. Note: not supported in React \\< 16.6.\n\n## Returns\n\n`ShallowWrapper`: The wrapper instance around the rendered output.\n\n## ShallowWrapper API\n\n## [`.find(selector) => ShallowWrapper`](shallowwrapper/find)\n\nFind every node in the render tree that matches the provided selector.\n\n## [`.findWhere(predicate) => ShallowWrapper`](shallowwrapper/findwhere)\n\nFind every node in the render tree that returns true for the provided predicate function.\n\n## [`.filter(selector) => ShallowWrapper`](shallowwrapper/filter)\n\nRemove nodes in the current wrapper that do not match the provided selector.\n\n## [`.filterWhere(predicate) => ShallowWrapper`](shallowwrapper/filterwhere)\n\nRemove nodes in the current wrapper that do not return true for the provided predicate function.\n\n## [`.hostNodes() => ShallowWrapper`](shallowwrapper/hostnodes)\n\nRemoves nodes that are not host nodes; e.g., this will only return HTML nodes.\n\n## [`.contains(nodeOrNodes) => Boolean`](shallowwrapper/contains)\n\nReturns whether or not a given node or array of nodes is somewhere in the render tree.\n\n## [`.containsMatchingElement(node) => Boolean`](shallowwrapper/containsmatchingelement)\n\nReturns whether or not a given react element exists in the shallow render tree.\n\n## [`.containsAllMatchingElements(nodes) => Boolean`](shallowwrapper/containsallmatchingelements)\n\nReturns whether or not all the given react elements exist in the shallow render tree.\n\n## [`.containsAnyMatchingElements(nodes) => Boolean`](shallowwrapper/containsanymatchingelements)\n\nReturns whether or not one of the given react elements exists in the shallow render tree.\n\n## [`.equals(node) => Boolean`](shallowwrapper/equals)\n\nReturns whether or not the current render tree is equal to the given node, based on the expected value.\n\n## [`.matchesElement(node) => Boolean`](shallowwrapper/matcheselement)\n\nReturns whether or not a given react element matches the shallow render tree.\n\n## [`.hasClass(className) => Boolean`](shallowwrapper/hasclass)\n\nReturns whether or not the current node has the given class name or not.\n\n## [`.is(selector) => Boolean`](shallowwrapper/is)\n\nReturns whether or not the current node matches a provided selector.\n\n## [`.exists([selector]) => Boolean`](shallowwrapper/exists)\n\nReturns whether or not the current node exists, or, if given a selector, whether that selector has any matching results.\n\n## [`.isEmpty() => Boolean`](shallowwrapper/isempty)\n\n*Deprecated*: Use [`.exists()`](shallowwrapper/exists) instead.\n\n## [`.isEmptyRender() => Boolean`](shallowwrapper/isemptyrender)\n\nReturns whether or not the current component returns a falsy value.\n\n## [`.not(selector) => ShallowWrapper`](shallowwrapper/not)\n\nRemove nodes in the current wrapper that match the provided selector. (inverse of `.filter()`)\n\n## [`.children([selector]) => ShallowWrapper`](shallowwrapper/children)\n\nGet a wrapper with all of the children nodes of the current wrapper.\n\n## [`.childAt(index) => ShallowWrapper`](shallowwrapper/childat)\n\nReturns a new wrapper with child at the specified index.\n\n## [`.parents([selector]) => ShallowWrapper`](shallowwrapper/parents)\n\nGet a wrapper with all of the parents (ancestors) of the current node.\n\n## [`.parent() => ShallowWrapper`](shallowwrapper/parent)\n\nGet a wrapper with the direct parent of the current node.\n\n## [`.closest(selector) => ShallowWrapper`](shallowwrapper/closest)\n\nGet a wrapper with the first ancestor of the current node to match the provided selector.\n\n## [`.shallow([options]) => ShallowWrapper`](shallowwrapper/shallow)\n\nShallow renders the current node and returns a shallow wrapper around it.\n\n## [`.render() => CheerioWrapper`](shallowwrapper/render)\n\nReturns a CheerioWrapper of the current node's subtree.\n\n## [`.renderProp(key)() => ShallowWrapper`](shallowwrapper/renderprop)\n\nReturns a wrapper of the node rendered by the provided render prop.\n\n## [`.unmount() => ShallowWrapper`](shallowwrapper/unmount)\n\nA method that un-mounts the component.\n\n## [`.text() => String`](shallowwrapper/text)\n\nReturns a string representation of the text nodes in the current render tree.\n\n## [`.html() => String`](shallowwrapper/html)\n\nReturns a static HTML rendering of the current node.\n\n## [`.get(index) => ReactElement`](shallowwrapper/get)\n\nReturns the node at the provided index of the current wrapper.\n\n## [`.getElement() => ReactElement`](shallowwrapper/getelement)\n\nReturns the wrapped ReactElement.\n\n## [`.getElements() => Array<ReactElement>`](shallowwrapper/getelements)\n\nReturns the wrapped ReactElements.\n\n## [`.at(index) => ShallowWrapper`](shallowwrapper/at)\n\nReturns a wrapper of the node at the provided index of the current wrapper.\n\n## [`.first() => ShallowWrapper`](shallowwrapper/first)\n\nReturns a wrapper of the first node of the current wrapper.\n\n## [`.last() => ShallowWrapper`](shallowwrapper/last)\n\nReturns a wrapper of the last node of the current wrapper.\n\n## [`.state([key]) => Any`](shallowwrapper/state)\n\nReturns the state of the root component.\n\n## [`.context([key]) => Any`](shallowwrapper/context)\n\nReturns the context of the root component.\n\n## [`.props() => Object`](shallowwrapper/props)\n\nReturns the props of the current node.\n\n## [`.prop(key) => Any`](shallowwrapper/prop)\n\nReturns the named prop of the current node.\n\n## [`.key() => String`](shallowwrapper/key)\n\nReturns the key of the current node.\n\n## [`.invoke(propName)(...args) => Any`](shallowwrapper/invoke)\n\nInvokes a prop function on the current node and returns the function's return value.\n\n## [`.simulate(event[, data]) => ShallowWrapper`](shallowwrapper/simulate)\n\nSimulates an event on the current node.\n\n## [`.setState(nextState) => ShallowWrapper`](shallowwrapper/setstate)\n\nManually sets state of the root component.\n\n## [`.setProps(nextProps[, callback]) => ShallowWrapper`](shallowwrapper/setprops)\n\nManually sets props of the root component.\n\n## [`.setContext(context) => ShallowWrapper`](shallowwrapper/setcontext)\n\nManually sets context of the root component.\n\n## [`.getWrappingComponent() => ShallowWrapper`](shallowwrapper/getwrappingcomponent)\n\nReturns a wrapper representing the `wrappingComponent`, if one was passed.\n\n## [`.instance() => ReactComponent`](shallowwrapper/instance)\n\nReturns the instance of the root component.\n\n## [`.update() => ShallowWrapper`](shallowwrapper/update)\n\nSyncs the enzyme component tree snapshot with the react component tree.\n\n## [`.debug() => String`](shallowwrapper/debug)\n\nReturns a string representation of the current shallow render tree for debugging purposes.\n\n## [`.type() => String|Function|null`](shallowwrapper/type)\n\nReturns the type of the current node of the wrapper.\n\n## [`.name() => String`](shallowwrapper/name)\n\nReturns the name of the current node of the wrapper.\n\n## [`.forEach(fn) => ShallowWrapper`](shallowwrapper/foreach)\n\nIterates through each node of the current wrapper and executes the provided function\n\n## [`.map(fn) => Array`](shallowwrapper/map)\n\nMaps the current array of nodes to another array.\n\n## [`.reduce(fn[, initialValue]) => Any`](shallowwrapper/reduce)\n\nReduces the current array of nodes to a value\n\n## [`.reduceRight(fn[, initialValue]) => Any`](shallowwrapper/reduceright)\n\nReduces the current array of nodes to a value, from right to left.\n\n## [`.slice([begin[, end]]) => ShallowWrapper`](shallowwrapper/slice)\n\nReturns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of `Array#slice`.\n\n## [`.tap(intercepter) => Self`](shallowwrapper/tap)\n\nTaps into the wrapper method chain. Helpful for debugging.\n\n## [`.some(selector) => Boolean`](shallowwrapper/some)\n\nReturns whether or not any of the nodes in the wrapper match the provided selector.\n\n## [`.someWhere(predicate) => Boolean`](shallowwrapper/somewhere)\n\nReturns whether or not any of the nodes in the wrapper pass the provided predicate function.\n\n## [`.every(selector) => Boolean`](shallowwrapper/every)\n\nReturns whether or not all of the nodes in the wrapper match the provided selector.\n\n## [`.everyWhere(predicate) => Boolean`](shallowwrapper/everywhere)\n\nReturns whether or not all of the nodes in the wrapper pass the provided predicate function.\n\n## [`.dive([options]) => ShallowWrapper`](shallowwrapper/dive)\n\nShallow render the one non-DOM child of the current wrapper, and return a wrapper around the result.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/shallow.html](https://enzymejs.github.io/enzyme/docs/api/shallow.html)"
- name: Static Rendering API
  id: docs/api/render
  summary: Use enzyme's render function to generate HTML from your React tree, and analyze the resulting HTML structure
  description: "# Static Rendering API\n\nUse enzyme's `render` function to generate HTML from your React tree, and analyze the resulting HTML structure.\n\n`render` returns a wrapper very similar to the other renderers in enzyme, [`mount`](mount) and [`shallow`](shallow); however, `render` uses a third party HTML parsing and traversal library [Cheerio](http://cheeriojs.github.io/cheerio/). We believe that Cheerio handles parsing and traversing HTML extremely well, and duplicating this functionality ourselves would be a disservice.\n\nFor the purposes of this documentation, we will refer to Cheerio's constructor as `CheerioWrapper`, which is to say that it is analogous to our `ReactWrapper` and `ShallowWrapper` constructors. You can reference the [Cheerio API docs](https://github.com/cheeriojs/cheerio#api) for methods available on a `CheerioWrapper` instance.\n\n## Example Usage\n\n``` jsx\nimport React from 'react';\nimport { render } from 'enzyme';\nimport PropTypes from 'prop-types';\n\ndescribe('<Foo />', () => {\n  it('renders three `.foo-bar`s', () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.find('.foo-bar')).to.have.lengthOf(3);\n  });\n\n  it('rendered the title', () => {\n    const wrapper = render(<Foo title=\"unique\" />);\n    expect(wrapper.text()).to.contain('unique');\n  });\n\n  it('renders a div', () => {\n    const wrapper = render(<div className=\"myClass\" />);\n    expect(wrapper.html()).to.contain('div');\n  });\n\n  it('can pass in context', () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string,\n    };\n\n    const context = { name: 'foo' };\n    const wrapper = render(<SimpleComponent />, { context });\n    expect(wrapper.text()).to.equal('foo');\n  });\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/api/render.html](https://enzymejs.github.io/enzyme/docs/api/render.html)"
- name: Using enzyme to Test Components in React Native
  id: docs/guides/react-native
  summary: As of v0.18, React Native uses React as a dependency rather than a forked version of the library, which means it is now possible to use enzyme's shallow with React Native components
  description: "# Using enzyme to Test Components in React Native\n\nAs of v0.18, React Native uses React as a dependency rather than a forked version of the library, which means it is now possible to use enzyme's `shallow` with React Native components.\n\nUnfortunately, React Native has many environmental dependencies that can be hard to simulate without a host device.\n\nThis can be difficult when you want your test suite to run with typical Continuous Integration servers such as Travis.\n\nTo use enzyme to test React Native, you currently need to configure an adapter, and load an emulated DOM.\n\n## Configuring an Adapter\n\nWhile a React Native adapter is [in discussion](https://github.com/enzymejs/enzyme/issues/1436), a standard adapter may be used, such as 'enzyme-adapter-react-16':\n\n``` jsx\nimport Adapter from 'enzyme-adapter-react-16';\n\nEnzyme.configure({ adapter: new Adapter() });\n```\n\n## Loading an emulated DOM with JSDOM\n\nTo use enzyme's `mount` until a React Native adapter exists, an emulated DOM must be loaded.\n\nWhile some have had success with [react-native-mock-renderer](https://github.com/Root-App/react-native-mock-render), the recommended approach is to use [https://github.com/tmpvar/jsdom](jsdom), as documented for enzyme at the [JSDOM](https://airbnb.io/enzyme/docs/guides/jsdom.html) documentation page.\n\nJSDOM will allow all of the `enzyme` behavior you would expect. While Jest snapshot testing can be used with this approach as well, it isn't encouraged and is only supported through `wrapper.debug()`.\n\n## Using enzyme's find when lacking className props\n\nIt is worth noting that React Native allows for a [testID](https://facebook.github.io/react-native/docs/view#testid) prop, that can be used a selector similar to `className` in standard React:\n\n``` jsx\n    <View key={key} style={styles.todo} testID=\"todo-item\">\n      <Text testID=\"todo-title\" style={styles.title}>{todo.title}</Text>\n    </View>\n```\n\n``` jsx\nexpect(wrapper.findWhere((node) => node.prop('testID') === 'todo-item')).toExist();\n```\n\n## Default example configuration for Jest and JSDOM replacement\n\nTo perform the necessary configuration in your testing framework, it is recommended to use a setup script, such as with Jest's `setupFilesAfterEnv` setting.\n\nCreate or update a `jest.config.js` file at the root of your project to include the `setupFilesAfterEnv` setting:\n\n``` jsx\n// jest.config.js\n\nmodule.exports = {\n  // Load setup-tests.js before test execution\n  setupFilesAfterEnv: '<rootDir>setup-tests.js',\n\n  // ...\n};\n```\n\nThen create or update the file specified in `setupFilesAfterEnv`, in this case `setup-tests.js` in the project root:\n\n``` jsx\n// setup-tests.js\n\nimport 'react-native';\nimport 'jest-enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport Enzyme from 'enzyme';\n\n/**\n * Set up DOM in node.js environment for Enzyme to mount to\n */\nconst { JSDOM } = require('jsdom');\n\nconst jsdom = new JSDOM('<!doctype html><html><body></body></html>');\nconst { window } = jsdom;\n\nfunction copyProps(src, target) {\n  Object.defineProperties(target, {\n    ...Object.getOwnPropertyDescriptors(src),\n    ...Object.getOwnPropertyDescriptors(target),\n  });\n}\n\nglobal.window = window;\nglobal.document = window.document;\nglobal.navigator = {\n  userAgent: 'node.js',\n};\ncopyProps(window, global);\n\n/**\n * Set up Enzyme to mount to DOM, simulate events,\n * and inspect the DOM in tests.\n */\nEnzyme.configure({ adapter: new Adapter() });\n```\n\n## Configure enzyme with other test libraries and include JSDOM on the fly\n\nUpdate the file specified in `setupFilesAfterEnv`, in this case `setup-tests.js` in the project root:\n\n``` jsx\nimport 'react-native';\nimport 'jest-enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport Enzyme from 'enzyme';\n\n/**\n * Set up Enzyme to mount to DOM, simulate events,\n * and inspect the DOM in tests.\n */\nEnzyme.configure({ adapter: new Adapter() });\n```\n\n### Create a separate test file\n\nCreate a file prefixed with enzyme.test.ts for example `component.enzyme.test.js`:\n\n``` jsx\n/**\n * @jest-environment jsdom\n */\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { Text } from '../../../component/text';\n\ndescribe('Component tested with airbnb enzyme', () => {\n  test('App mount with enzyme', () => {\n    const wrapper = mount(<Text />);\n    // other tests operations\n  });\n});\n```\n\n**The most important part is to ensure that the test runs with the `jestEnvironment` set to `jsdom`** - one way is to include a `/* @jest-environment jsdom */` comment at the top of the file.\n\nThen you should then be able to start writing tests!\n\nNote that you may want to perform some additional mocking around native components, or if you want to perform snapshot testing against React Native components. Notice how you may need to mock React Navigation's `KeyGenerator` in this case, to avoid random React keys that will cause snapshots to always fail.\n\n``` jsx\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport { mount, ReactWrapper } from 'enzyme';\nimport { Provider } from 'mobx-react';\nimport { Text } from 'native-base';\n\nimport { TodoItem } from './todo-item';\nimport { TodoList } from './todo-list';\nimport { todoStore } from '../../stores/todo-store';\n\n// https://github.com/react-navigation/react-navigation/issues/2269\n// React Navigation generates random React keys, which makes\n// snapshot testing fail. Mock the randomness to keep from failing.\njest.mock('react-navigation/src/routers/KeyGenerator', () => ({\n  generateKey: jest.fn(() => 123),\n}));\n\ndescribe('todo-list', () => {\n  describe('enzyme tests', () => {\n    it('can add a Todo with Enzyme', () => {\n      const wrapper = mount(\n        <Provider keyLength={0} todoStore={todoStore}>\n          <TodoList />\n        </Provider>,\n      );\n\n      const newTodoText = 'I need to do something...';\n      const newTodoTextInput = wrapper.find('Input').first();\n      const addTodoButton = wrapper\n        .find('Button')\n        .findWhere((w) => w.text() === 'Add Todo')\n        .first();\n\n      newTodoTextInput.props().onChangeText(newTodoText);\n\n      // Enzyme usually allows wrapper.simulate() alternatively, but this doesn't support 'press' events.\n      addTodoButton.props().onPress();\n\n      // Make sure to call update if external events (e.g. Mobx state changes)\n      // result in updating the component props.\n      wrapper.update();\n\n      // You can either check for a testID prop, similar to className in React:\n      expect(\n        wrapper.findWhere((node) => node.prop('testID') === 'todo-item'),\n      ).toExist();\n\n      // Or even just find a component itself, if you broke the JSX out into its own component:\n      expect(wrapper.find(TodoItem)).toExist();\n\n      // You can even do snapshot testing,\n      // if you pull in enzyme-to-json and configure\n      // it in snapshotSerializers in package.json\n      expect(wrapper.find(TodoList)).toMatchSnapshot();\n    });\n  });\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/react-native.html](https://enzymejs.github.io/enzyme/docs/guides/react-native.html)"
- name: Using enzyme with Browserify
  id: docs/guides/browserify
  summary: If you are using a test runner that runs code in a browser-based environment, you may be using browserify in order to bundle your React code
  description: "# Using enzyme with Browserify\n\nIf you are using a test runner that runs code in a browser-based environment, you may be using [browserify](http://browserify.org/) in order to bundle your React code.\n\nPrior to enzyme 3.0 there were some issues with conditional requires that were used to maintain backwards compatibility with React versions. With enzyme 3.0+, this should no longer be an issue. If it is, please file a GitHub issue or make a PR to this documentation with instructions on how to set it up.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/browserify.html](https://enzymejs.github.io/enzyme/docs/guides/browserify.html)"
- name: Using enzyme with Jest
  id: docs/guides/jest
  summary: To run the setup file to configure Enzyme and the Adapter (as shown in the Installation docs) with Jest, set setupFilesAfterEnv (previously setupTestFrameworkScriptFile) in your config file (check Jest's documentation for the possible locations of that config file) to literally the string <rootDir> and the path to your setup file
  description: "# Using enzyme with Jest\n\n## Configure with Jest\n\nTo run the setup file to configure Enzyme and the Adapter (as shown in the [Installation docs](https://airbnb.io/enzyme/docs/installation/)) with Jest, set `setupFilesAfterEnv` (previously `setupTestFrameworkScriptFile`) in your config file (check [Jest's documentation](http://jestjs.io/docs/en/configuration) for the possible locations of that config file) to literally the string `<rootDir>` and the path to your setup file.\n\n``` json\n{\n  \"jest\": {\n    \"setupFilesAfterEnv\": [\"<rootDir>src/setupTests.js\"]\n  }\n}\n```\n\n## Jest version 15 and up\n\nStarting with version 15, Jest [no longer mocks modules by default](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html). Because of this, you no longer have to add *any* special configuration for Jest to use it with enzyme.\n\nInstall Jest, and its Babel integrations, as recommended in the [Jest docs](https://facebook.github.io/jest/docs/en/getting-started.html). Install enzyme. Then, simply require/import React, enzyme functions, and your module at the top of a test file.\n\n``` js\nimport React from 'react';\nimport { shallow, mount, render } from 'enzyme';\n\nimport Foo from '../Foo';\n```\n\nYou do **not** need to include Jest's own renderer, unless you want to use it *only* for Jest snapshot testing.\n\n## Example Project for Jest version 15+\n\n- [Example test for Jest 15+](https://github.com/vjwilson/enzyme-example-jest)\n\n## Jest prior to version 15\n\nIf you are using Jest 0.9 – 14.0 with enzyme and using Jest's automocking feature, you will need to mark react and enzyme to be unmocked in your `package.json`:\n\n`package.json`:\n\n``` json\n{\n  \"jest\": {\n    \"unmockedModulePathPatterns\": [\n      \"node_modules/react/\",\n      \"node_modules/enzyme/\"\n    ]\n  }\n}\n```\n\nIf you are using a previous version of Jest together with npm3, you may need to unmock [more modules](https://github.com/enzymejs/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md).\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/jest.html](https://enzymejs.github.io/enzyme/docs/guides/jest.html)"
- name: Using enzyme with JSDOM
  id: docs/guides/jsdom
  summary: JSDOM is a JavaScript based headless browser that can be used to create a realistic testing environment
  description: "# Using enzyme with JSDOM\n\n[JSDOM](https://github.com/tmpvar/jsdom) is a JavaScript based headless browser that can be used to create a realistic testing environment.\n\nSince enzyme's [`mount`](../api/mount) API requires a DOM, JSDOM is required in order to use `mount` if you are not already in a browser environment (ie, a Node environment).\n\nFor the best experience with enzyme, it is recommended that you load a document into the global scope *before* requiring React for the first time. It is very important that the below script gets run *before* React's code is run.\n\nAs a result, a standalone script like the one below is generally a good approach:\n\n`jsdom v10~`:\n\n``` js\n/* setup.js */\n\nconst { JSDOM } = require('jsdom');\n\nconst jsdom = new JSDOM('<!doctype html><html><body></body></html>');\nconst { window } = jsdom;\n\nfunction copyProps(src, target) {\n  Object.defineProperties(target, {\n    ...Object.getOwnPropertyDescriptors(src),\n    ...Object.getOwnPropertyDescriptors(target),\n  });\n}\n\nglobal.window = window;\nglobal.document = window.document;\nglobal.navigator = {\n  userAgent: 'node.js',\n};\nglobal.requestAnimationFrame = function (callback) {\n  return setTimeout(callback, 0);\n};\nglobal.cancelAnimationFrame = function (id) {\n  clearTimeout(id);\n};\ncopyProps(window, global);\n```\n\nHere is the sample of [jsdom old API](https://github.com/tmpvar/jsdom/blob/master/lib/old-api.md) as well.\n\n`jsdom ~<v10`:\n\n``` js\n/* setup.js */\n\nconst { jsdom } = require('jsdom');\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nglobal.navigator = {\n  userAgent: 'node.js',\n};\n\nfunction copyProps(src, target) {\n  const props = Object.getOwnPropertyNames(src)\n    .filter((prop) => typeof target[prop] === 'undefined')\n    .reduce((result, prop) => ({\n      ...result,\n      [prop]: Object.getOwnPropertyDescriptor(src, prop),\n    }), {});\n  Object.defineProperties(target, props);\n}\ncopyProps(document.defaultView, global);\n```\n\n## `describeWithDOM` API and clearing the document after every test\n\nIn previous versions of enzyme, there was a public `describeWithDOM` API which loaded in a new JSDOM document into the global namespace before every test, ensuring that tests were deterministic and did not have side-effects.\n\nThis approach is no longer recommended. React's source code makes several assumptions about the environment it is running in, and one of them is that the `global.document` that is found at \"require time\" is going to be the one and only document it ever needs to worry about. As a result, this type of \"reloading\" ends up causing more pain than it prevents.\n\nIt is important, however, to make sure that your tests using the global DOM APIs do not have leaky side-effects which could change the results of other tests. Until there is a better option, this is left to you to ensure.\n\n## JSDOM + Mocha\n\nWhen testing with JSDOM, the `setup.js` file above needs to be run before the test suite runs. If you are using mocha, this can be done from the command line using the `--require` option:\n\n``` bash\nmocha --require setup.js --recursive path/to/test/dir\n```\n\n## Node.js Compatibility\n\nJsdom requires node 4 or above. As a result, if you want to use it with `mount`, you will need to make sure node 4 or iojs is on your machine. If you are stuck using an older version of Node, you may want to try using a browser-based test runner such as [Karma](karma).\n\n### Switching between node versions\n\nSome times you may need to switch between different versions of node, you can use a CLI tool called `nvm` to quickly switch between node versions.\n\nTo install `nvm`, use the curl script from [http://nvm.sh](http://nvm.sh), and then:\n\n``` bash\nnvm install 4\n```\n\nNow your machine will be running Node 4. You can use the `nvm use` command to switch between the two environments:\n\n``` bash\nnvm use 0.12\n```\n\n``` bash\nnvm use 4\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/jsdom.html](https://enzymejs.github.io/enzyme/docs/guides/jsdom.html)"
- name: Using enzyme with Karma
  id: docs/guides/karma
  summary: Karma is a popular test runner that can run tests in multiple browser environments
  description: "# Using enzyme with Karma\n\nKarma is a popular test runner that can run tests in multiple browser environments. Depending on your Karma setup, you may have a number of options for configuring Enzyme.\n\n## Basic Enzyme setup with Karma\n\n### Configure Enzyme\n\nCreate an Enzyme setup file. This file will configure Enzyme with the appropriate React adapter. It can also be used to initialize any that you'd like available for all tests. To avoid having to import this file and Enzyme, you can re-export all Enzyme exports from this file and just import it.\n\n``` js\n/* test/enzyme.js */\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport jasmineEnzyme from 'jasmine-enzyme';\n\n// Configure Enzyme for the appropriate React adapter\nEnzyme.configure({ adapter: new Adapter() });\n\n// Initialize global helpers\nbeforeEach(() => {\n  jasmineEnzyme();\n});\n\n// Re-export all enzyme exports\nexport * from 'enzyme';\n```\n\n### Import Enzyme from the Enzyme setup file\n\nAnywhere you want to use Enzyme, import the Enzyme setup file just as you would Enzyme itself.\n\n``` js\n/* some_test.js */\n// Import anything you would normally import `from 'enzyme'` from the Enzyme setup file\nimport { shallow } from './test/enzyme';\n\n// ...\n```\n\n## Alternative karma-webpack setup\n\nIf you're using Karma and Webpack using [karma-webpack's alternative setup](https://github.com/webpack-contrib/karma-webpack#alternative-usage), you can configure enzyme in your test entry file and import Enzyme directly in individual tests.\n\n``` js\n/* test/index_test.js */\nimport './enzyme';\n\nconst testsContext = require.context('.', true, /_test$/);\n\ntestsContext.keys().forEach(testsContext);\n```\n\n``` js\n/* some_test.js */\n// If Enzyme is configured in the test entry file, Enzyme can be imported directly\nimport { shallow } from 'enzyme';\n\n// ...\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/karma.html](https://enzymejs.github.io/enzyme/docs/guides/karma.html)"
- name: Using enzyme with Lab and Code
  id: docs/guides/lab
  summary: Lab is a simple test utility for node & part of the Hapi.js framework universe
  description: "# Using enzyme with Lab and Code\n\n[Lab](https://github.com/hapijs/lab) is a simple test utility for node & part of the [Hapi.js](https://github.com/hapijs/hapi) framework universe. Lab's initial code borrowed heavily from [Mocha](https://github.com/mochajs/mocha). [Code](https://github.com/hapijs/code) is Lab's standard assertion library and was created as a direct rewrite of [Chai](https://github.com/chaijs).\n\n# Example Test: enzyme + Lab + Code\n\n``` jsx\nimport { shallow, mount, render } from 'enzyme';\nimport React from 'react';\n\nconst Code = require('code');\nconst Lab = require('lab');\n\nconst lab = Lab.script();\nexports.lab = lab;\n\nlab.suite('A suite', () => {\n  lab.test('calls componentDidMount', (done) => {\n    const wrapper = mount(<Foo />);\n    Code.expect(Foo.prototype.componentDidMount.callCount).to.equal(1);\n    done();\n  });\n});\n```\n\n## Example Projects\n\n- [enzyme-example-lab](https://github.com/gattermeier/enzyme-example-lab)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/lab.html](https://enzymejs.github.io/enzyme/docs/guides/lab.html)"
- name: Using enzyme with Mocha
  id: docs/guides/mocha
  summary: enzyme was originally designed to work with Mocha, so getting it up and running with Mocha should be no problem at all
  description: "# Using enzyme with Mocha\n\nenzyme was originally designed to work with Mocha, so getting it up and running with Mocha should be no problem at all. Simply install it and start using it:\n\n``` bash\nnpm i --save-dev enzyme\n```\n\n``` jsx\nimport React from 'react';\nimport { expect } from 'chai';\nimport { mount } from 'enzyme';\nimport { spy } from 'sinon';\nimport Foo from './src/Foo';\n\nspy(Foo.prototype, 'componentDidMount');\n\ndescribe('<Foo />', () => {\n  it('calls componentDidMount', () => {\n    const wrapper = mount(<Foo />);\n    expect(Foo.prototype.componentDidMount).to.have.property('callCount', 1);\n  });\n});\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/mocha.html](https://enzymejs.github.io/enzyme/docs/guides/mocha.html)"
- name: Using enzyme with SystemJS
  id: docs/guides/systemjs
  summary: If you are using a test runner that runs code in a browser-based environment, you may be using SystemJS in order to bundle your React code
  description: "# Using enzyme with SystemJS\n\nIf you are using a test runner that runs code in a browser-based environment, you may be using [SystemJS](systemjs) in order to bundle your React code.\n\nPrior to enzyme 3.0 there were some issues with conditional requires that were used to maintain backwards compatibility with React versions. With enzyme 3.0+, this should no longer be an issue. If it is, please file a GitHub issue or make a PR to this documentation with instructions on how to set it up.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/systemjs.html](https://enzymejs.github.io/enzyme/docs/guides/systemjs.html)"
- name: Using enzyme with Tape and AVA
  id: docs/guides/tape-ava
  summary: enzyme works well with Tape and AVA
  description: "# Using enzyme with Tape and AVA\n\nenzyme works well with [Tape](https://github.com/substack/tape) and [AVA](https://github.com/avajs/ava). Simply install it and start using it:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-16\n```\n\n## Tape\n\n``` jsx\nimport test from 'tape';\nimport React from 'react';\nimport { shallow, mount, configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nimport Foo from '../path/to/foo';\n\nconfigure({ adapter: new Adapter() });\n\ntest('shallow', (t) => {\n  const wrapper = shallow(<Foo />);\n  t.equal(wrapper.contains(<span>Foo</span>), true);\n});\n\ntest('mount', (t) => {\n  const wrapper = mount(<Foo />);\n  const fooInner = wrapper.find('.foo-inner');\n  t.equal(fooInner.is('.foo-inner'), true);\n});\n```\n\n## AVA\n\n``` jsx\nimport test from 'ava';\nimport React from 'react';\nimport { shallow, mount, configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nimport Foo from '../path/to/foo';\n\nconfigure({ adapter: new Adapter() });\n\ntest('shallow', (t) => {\n  const wrapper = shallow(<Foo />);\n  t.is(wrapper.contains(<span>Foo</span>), true);\n});\n\ntest('mount', (t) => {\n  const wrapper = mount(<Foo />);\n  const fooInner = wrapper.find('.foo-inner');\n  t.is(fooInner.is('.foo-inner'), true);\n});\n```\n\n## Example Projects\n\n- [enzyme-example-tape](https://github.com/TaeKimJR/enzyme-example-tape)\n- [enzyme-example-ava](https://github.com/mikenikles/enzyme-example-ava)\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/tape-ava.html](https://enzymejs.github.io/enzyme/docs/guides/tape-ava.html)"
- name: Using enzyme with Webpack
  id: docs/guides/webpack
  summary: If you are using a test runner that runs code in a browser-based environment, you may be using webpack in order to bundle your React code
  description: "# Using enzyme with Webpack\n\nIf you are using a test runner that runs code in a browser-based environment, you may be using [webpack](https://webpack.js.org/) in order to bundle your React code.\n\nPrior to enzyme 3.0 there were some issues with conditional requires that were used to maintain backwards compatibility with React versions. With enzyme 3.0+, this should no longer be an issue. If it is, please file a GitHub issue or make a PR to this documentation with instructions on how to set it up.\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/guides/webpack.html](https://enzymejs.github.io/enzyme/docs/guides/webpack.html)"
- name: Working with React 0.13
  id: docs/installation/react-013
  summary: © 2015 Airbnb, Inc
  description: "# Working with React 0.13\n\nIf you are wanting to use enzyme with React 0.13, but don't already have React 0.13 installed, you should do so:\n\n``` bash\nnpm i react@0.13 --save\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-13\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-13';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-13');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/installation/react-013.html](https://enzymejs.github.io/enzyme/docs/installation/react-013.html)"
- name: Working with React 0.14
  id: docs/installation/react-014
  summary: © 2015 Airbnb, Inc
  description: "# Working with React 0.14\n\nIf you are wanting to use Enzyme with React 0.14, but don't already have React 0.14 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@0.14 react-dom@0.14\n```\n\nFurther, enzyme with React 0.14 requires the test utilities addon be installed:\n\n``` bash\nnpm i --save-dev react-addons-test-utils@0.14\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-14\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-14';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-14');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/installation/react-014.html](https://enzymejs.github.io/enzyme/docs/installation/react-014.html)"
- name: Working with React 15
  id: docs/installation/react-15
  summary: © 2015 Airbnb, Inc
  description: "# Working with React 15\n\nIf you are wanting to use Enzyme with React 15, but don't already have React 15 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@15 react-dom@15\n```\n\nFurther, enzyme requires the test utilities addon be installed:\n\n``` bash\nnpm i --save-dev react-test-renderer@15\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-15\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-15';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-15');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/installation/react-15.html](https://enzymejs.github.io/enzyme/docs/installation/react-15.html)"
- name: Working with React 16
  id: docs/installation/react-16
  summary: © 2015 Airbnb, Inc
  description: "# Working with React 16\n\nIf you are wanting to use enzyme with React 16, but don't already have React 16 and react-dom installed, you should do so:\n\n``` bash\nnpm i --save react@16 react-dom@16\n```\n\nNext, to get started with enzyme, you can simply install it with npm:\n\n``` bash\nnpm i --save-dev enzyme enzyme-adapter-react-16\n```\n\nAnd then you're ready to go! In your test files you can simply `require` or `import` enzyme:\n\nES6:\n\n``` js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nimport { shallow, mount, render } from 'enzyme';\n\nconst wrapper = shallow(<Foo />);\n```\n\nES5:\n\n``` js\n// setup file\nvar enzyme = require('enzyme');\nvar Adapter = require('enzyme-adapter-react-16');\n\nenzyme.configure({ adapter: new Adapter() });\n```\n\n``` js\n// test file\nvar enzyme = require('enzyme');\n\nvar wrapper = enzyme.shallow(<Foo />);\n```\n\n© 2015 Airbnb, Inc.  \nLicensed under the MIT License.  \n[https://enzymejs.github.io/enzyme/docs/installation/react-16.html](https://enzymejs.github.io/enzyme/docs/installation/react-16.html)"
