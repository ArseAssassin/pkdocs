---
name: QUnit
slug: qunit
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © OpenJS Foundation and contributors.
  Licensed under the MIT license.
  https://qunitjs.com/api/
homepage: https://qunitjs.com/

---
- name: assert.async()
  id: assert/async
  summary: 'Categories: Assertions, Async control'
  description: "# assert.async()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/), [Async control](https://qunitjs.com/api/async/).\n\nversion added: [1.16.0](https://github.com/qunitjs/qunit/releases/tag/1.16.0).\n\n## Description\n\n`async( count = 1 )`\n\nInstruct QUnit to wait for an asynchronous operation.\n\n| name             | description                                |\n|------------------|--------------------------------------------|\n| `count` (number) | Number of expected calls. Defaults to `1`. |\n\n`assert.async()` returns a callback function and pauses test processing until the callback function is called. The callback will throw an `Error` if it is invoked more often than the required call count.\n\n## See also\n\n- [Migration guide](https://qunitjs.com/upgrade-guide-2.x/#introducing-assertasync) from QUnit 1.x `stop()` and `start()`.\n\n## Examples\n\n### Wait for callback\n\nTell QUnit to wait for the `done()` call from a callback.\n\n``` javascript\nfunction fetchDouble (num, callback) {\n  const double = num * 2;\n  callback(double);\n}\n\nQUnit.test('async example', assert => {\n  const done = assert.async();\n\n  fetchDouble(21, res => {\n    assert.strictEqual(res, 42, 'Result');\n    done();\n  });\n});\n```\n\n### Wait for multiple callbacks\n\nCall `assert.async()` multiple times to wait for multiple async operations. Each `done` callback must be called exactly once for the test to pass.\n\n``` javascript\nQUnit.test('two async calls', assert => {\n  const done1 = assert.async();\n  const done2 = assert.async();\n\n  fetchDouble(3, res => {\n    assert.strictEqual(res, 6, 'double of 3');\n    done1();\n  });\n  fetchDouble(9, res => {\n    assert.strictEqual(res, 18, 'double of 9');\n    done2();\n  });\n});\n```\n\n### Require multiple calls\n\nThe `count` parameter can be used to require multiple calls to the same callback. In the below example, the test passes after exactly three calls.\n\n``` javascript\nfunction uploadBatch (batch, notify, complete) {\n  batch.forEach((item) => {\n    // Do something with item\n    notify();\n  });\n  complete(null);\n}\n\nQUnit.test('multiple calls example', assert => {\n  assert.timeout(1000);\n\n  const notify = assert.async(3);\n  const done = assert.async();\n\n  uploadBatch(\n    ['a', 'b', 'c'],\n    notify,\n    (err) => {\n      assert.strictEqual(err, null, 'complete error parameter');\n\n      done();\n    }\n  );\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/async](https://qunitjs.com/api/assert/async)"
- name: assert.closeTo()
  id: assert/closeto
  summary: 'Categories: Assertions'
  description: "# assert.closeTo()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.21.0](https://github.com/qunitjs/qunit/releases/tag/2.21.0).\n\n## Description\n\n`closeTo( actual, expected, delta, message = \"\" )`\n\nCompare that a number is equal to a known target number within a given tolerance.\n\n| name                | description                                                   |\n|---------------------|---------------------------------------------------------------|\n| `actual` (number)   | Expression being tested                                       |\n| `expected` (number) | Known target number                                           |\n| `delta` (number)    | The maximum difference between the expected and actual number |\n| `message` (string)  | Optional description of the actual expression                 |\n\nThe `assert.closeTo()` assertion checks that the actual expression approximates the expected number, allowing it to be off by at most the specified amount (“delta”). This can be used to assert that two numbers are roughly or almost equal to each other.\n\nThe actual number may be either above or below the expected number, as long as it is within the `delta` difference (inclusive).\n\nWhile non-strict assertions like this are [often discouraged](https://timotijhof.net/posts/2015/qunit-anti-patterns/), it may be necessary to account for limitations in how fractional numbers are represented in JavaScript. For example, `0.1 + 0.2` is actually `0.30000000000000004`. This because math operations in JavaScript adhere to the “IEEE floating-point” standard.\n\nTo learn how floating-point numbers work internally, refer to [Double-precision floating-point format](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) on Wikipedia. To learn when and why floating-point numbers experience these side effects, refer to “[What Every Computer Scientist Should Know About Floating-Point Arithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)” by David Goldberg.\n\n## Examples\n\n``` javascript\nQUnit.test('good example', assert => {\n  const x = 0.1 + 0.2; // 0.30000000000000004\n\n  // passing: must be between 0.299 and 0.301\n  assert.closeTo(x, 0.3, 0.001);\n\n  const y = 20.13;\n  // passing: must be between 20.05 and 20.15 inclusive\n  assert.closeTo(y, 20.10, 0.05);\n});\n\nQUnit.test('bad example', assert => {\n  const x = 20.7;\n  // failing: must be between 20.0 and 20.2 inclusive\n  assert.closeTo(x, 20.1, 0.1);\n  // message: value should be within 0.1 inclusive\n  // actual  : 20.7\n  // expected: 20.1\n\n  const y = 2018;\n  // failing: must be between 2010 and 2014 inclusive\n  assert.closeTo(y, 2012, 2);\n  // message: value should be within 2 inclusive\n  // actual  : 2018\n  // expected: 2012\n});\n```\n\n## See also\n\n- Use [`assert.propContains()`](propcontains) to partially compare an object.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/closeTo](https://qunitjs.com/api/assert/closeTo)"
- name: assert.deepEqual()
  id: assert/deepequal
  summary: 'Categories: Assertions'
  description: "# assert.deepEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`deepEqual( actual, expected, message = \"\" )`\n\nA recursive and strict comparison, considering all own and inherited properties.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `expected`         | Known comparison value                     |\n| `message` (string) | Short description of the actual expression |\n\nThis assertion compares the full objects as passed. For primitive values, a strict comparison is performed. For objects, the object identity is disregarded and instead a recursive comparison of all own and inherited properties is used. This means arrays, plain objects, and arbitrary class instance objects can all be compared in this way.\n\nThe deep comparison includes built-in support for Date objects, regular expressions (RegExp), NaN, as well as ES6 features such as Symbol, Set, and Map objects.\n\nTo assert strict equality on own properties only, refer to [`assert.propEqual()`](propequal) instead.\n\n[`assert.notDeepEqual()`](notdeepequal) can be used to check for inequality instead.\n\n## Examples\n\nValidate the properties and values of a given object.\n\n``` javascript\nQUnit.test('passing example', assert => {\n  const result = { foo: 'bar' };\n\n  assert.deepEqual(result, { foo: 'bar' });\n});\n```\n\n``` javascript\nQUnit.test('failing example', assert => {\n  const result = {\n    a: 'Albert',\n    b: 'Berta',\n    num: 123\n  };\n\n  // fails because the number 123 is not strictly equal to the string \"123\".\n  assert.deepEqual(result, {\n    a: 'Albert',\n    b: 'Berta',\n    num: '123'\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/deepEqual](https://qunitjs.com/api/assert/deepEqual)"
- name: assert.equal()
  id: assert/equal
  summary: 'Categories: Assertions'
  description: "# assert.equal()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`equal( actual, expected, message = \"\" )`\n\nA non-strict comparison of two values.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `expected`         | Known comparison value                     |\n| `message` (string) | Short description of the actual expression |\n\nThe `equal` assertion uses the simple comparison operator (`==`) to compare the actual and expected arguments. When they are equal, the assertion passes; otherwise, it fails. When it fails, both actual and expected values are displayed in the test result, in addition to a given message.\n\nThis method is similar to the `assertEquals()` method found in xUnit-style frameworks.\n\nTo explicitly test inequality, use [`assert.notEqual()`](notequal).\n\nTo test for strict equality, use [`assert.strictEqual()`](strictequal).\n\n## Changelog\n\n- Prior to QUnit 1.1, this method was known as `assert.equals`.  \n  The alias was removed in QUnit 1.3.\n\n## Examples\n\nThe simplest assertion example:\n\n``` javascript\nQUnit.test('a test', function (assert) {\n  assert.equal(1, '1', \"String '1' and number 1 have the same value\");\n});\n```\n\nA slightly more thorough set of assertions:\n\n``` javascript\nQUnit.test('equal test', function (assert) {\n  assert.equal(0, 0, 'Zero, Zero; equal succeeds');\n  assert.equal('', 0, 'Empty, Zero; equal succeeds');\n  assert.equal('', '', 'Empty, Empty; equal succeeds');\n\n  assert.equal('three', 3, 'Three, 3; equal fails');\n  assert.equal(null, false, 'null, false; equal fails');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/equal](https://qunitjs.com/api/assert/equal)"
- name: assert.expect()
  id: assert/expect
  summary: 'Categories: Assertions'
  description: "# assert.expect()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`expect( amount )`\n\nSpecify how many assertions are expected in a test.\n\n| name     | description                                |\n|----------|--------------------------------------------|\n| `amount` | Number of expected assertions in this test |\n\nThis is most commonly used as `assert.expect(0)`, which indicates that a test may pass without making any assertions. This means the test is only used to verify that the code runs to completion, without any uncaught errors. This is is essentially the inverse of [`assert.throws()`](throws).\n\nThis can also be used to explicitly require a certain number of assertions to be recorded in a given test. If afterwards the number of assertions does not match the expected count, the test will fail.\n\nIt is recommended to test asynchronous code with the [`assert.verifySteps()`](verifysteps) or [`assert.async()`](async) methods instead. If you’re using these stricter methods already, consider removing the `assert.expect()` call. See also the [require-expect “never-except-zero”](https://github.com/platinumazure/eslint-plugin-qunit/blob/main/docs/rules/require-expect.md) rule of the [eslint-plugin-qunit](https://www.npmjs.com/package/eslint-plugin-qunit) package.\n\n## Changelog\n\n|            |                                                                                                                        |\n|------------|------------------------------------------------------------------------------------------------------------------------|\n| UNRELEASED | `assert.expect()` now counts [`assert.verifySteps()`](verifysteps) as one assertion. Steps no longer count separately. |\n\n## Examples\n\n### Example: No assertions\n\nA test without any assertions:\n\n``` javascript\nQUnit.test('example', function (assert) {\n  assert.expect(0);\n\n  var android = new Robot();\n  android.up(2);\n  android.down(2);\n  android.left();\n  android.right();\n  android.left();\n  android.right();\n  android.attack();\n  android.jump();\n});\n```\n\n### Example: Custom assert\n\nIf you use a generic assertion library that throws when an expectation is not met, you can use `assert.expect(0)` if there are no other assertions needed in the test.\n\n``` javascript\nQUnit.test('example', function (assert) {\n  assert.expect(0);\n\n  var android = new Robot(database);\n  android.run();\n\n  database.assertNoOpenConnections();\n});\n```\n\n### Example: Explicit count\n\nFail the test if the test did not complete an exact assertion count.\n\nIt is recommended to test callback code with [`assert.verifySteps()`](verifysteps) instead, as replacement for relying on `assert.expect()`. See also the [require-expect “never-except-zero”](https://github.com/platinumazure/eslint-plugin-qunit/blob/main/docs/rules/require-expect.md) rule of the [eslint-plugin-qunit](https://www.npmjs.com/package/eslint-plugin-qunit) package.\n\n``` javascript\nQUnit.test('example', function (assert) {\n  assert.expect(2);\n\n  function calc (x, operation) {\n    return operation(x);\n  }\n\n  let result = calc(2, function (x) {\n    assert.true(true, 'calc() calls operation function');\n    return x * x;\n  });\n\n  assert.strictEqual(result, 4, '2 squared equals 4');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/expect](https://qunitjs.com/api/assert/expect)"
- name: assert.false()
  id: assert/false
  summary: 'Categories: Assertions'
  description: "# assert.false()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.11.0](https://github.com/qunitjs/qunit/releases/tag/2.11.0).\n\n## Description\n\n`false( actual, message = \"\" )`\n\nA strict comparison that passes if the first argument is boolean `false`.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `message` (string) | Short description       |\n\n`false` requires just one argument. If the argument evaluates to false, the assertion passes; otherwise, it fails.\n\nThis method is similar to the `assertFalse()` method found in xUnit-style frameworks.\n\n[`assert.true()`](true) can be used to explicitly test for a true value.\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  // success\n  assert.false(false, 'boolean false');\n\n  // failure\n  assert.false('foo', 'non-empty string');\n  assert.false('', 'empty string');\n  assert.false(0, 'number zero');\n  assert.false(true, 'boolean true');\n  assert.false(NaN, 'NaN value');\n  assert.false(null, 'null value');\n  assert.false(undefined, 'undefined value');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/false](https://qunitjs.com/api/assert/false)"
- name: assert.notDeepEqual()
  id: assert/notdeepequal
  summary: 'Categories: Assertions'
  description: "# assert.notDeepEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`notDeepEqual( actual, expected, message = \"\" )`\n\nAn inverted deep equal comparison.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `expected`         | Known comparison value  |\n| `message` (string) | Short description       |\n\nThis assertion fails if the actual and expected values are recursively equal by strict comparison, considering both own and inherited properties.\n\nThe assertion passes if there are structural differences, type differences, or even a subtle difference in a particular property value.\n\nThis is the inverse of [`assert.deepEqual()`](deepequal).\n\n## Examples\n\nCompare the value of two objects.\n\n``` javascript\nQUnit.test('example', assert => {\n  const result = { foo: 'yep' };\n\n  // succeeds, objects are similar but have a different foo value.\n  assert.notDeepEqual(result, { foo: 'nope' });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notDeepEqual](https://qunitjs.com/api/assert/notDeepEqual)"
- name: assert.notEqual()
  id: assert/notequal
  summary: 'Categories: Assertions'
  description: "# assert.notEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`notEqual( actual, expected, message = \"\" )`\n\nA loose inequality comparison, checking for non-strict differences between two values.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `expected`         | Known comparison value  |\n| `message` (string) | Short description       |\n\nThe `notEqual` assertion uses the simple inverted comparison operator (`!=`) to compare the actual and expected values. When they aren’t equal, the assertion passes; otherwise, it fails. When it fails, both actual and expected values are displayed in the test result, in addition to a given message.\n\n[`assert.equal()`](equal) can be used to test equality.\n\n[`assert.notStrictEqual()`](notstrictequal) can be used to test strict inequality.\n\n## Examples\n\nThe simplest assertion example:\n\n``` javascript\nQUnit.test('passing example', assert => {\n  const result = '2';\n\n  // succeeds, 1 and 2 are different.\n  assert.notEqual(result, 1);\n});\n\nQUnit.test('failing example', assert => {\n  const result = '2';\n\n  // fails, the number 2 and the string \"2\" are considered equal when\n  // compared loosely. Use `assert.notStrictEqual` to consider them different.\n  assert.notEqual(result, 2);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notEqual](https://qunitjs.com/api/assert/notEqual)"
- name: assert.notOk()
  id: assert/notok
  summary: 'Categories: Assertions'
  description: "# assert.notOk()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.18.0](https://github.com/qunitjs/qunit/releases/tag/1.18.0).\n\n## Description\n\n`notOk( state, message = \"\" )`\n\nA boolean check that passes when the first argument is falsy.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `state`            | Expression being tested |\n| `message` (string) | Short description       |\n\nThis assertion requires only one argument. If the argument evaluates to false, the assertion passes; otherwise, it fails.\n\nTo strictly compare against boolean false, use [`assert.false()`](false).\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  // success\n  assert.notOk(false, 'boolean false');\n  assert.notOk('', 'empty string');\n  assert.notOk(0, 'number zero');\n  assert.notOk(NaN, 'NaN value');\n  assert.notOk(null, 'null value');\n  assert.notOk(undefined, 'undefined value');\n\n  // failure\n  assert.notOk('foo', 'non-empty string');\n  assert.notOk(true, 'boolean true');\n  assert.notOk(1, 'number one');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notOk](https://qunitjs.com/api/assert/notOk)"
- name: assert.notPropContains()
  id: assert/notpropcontains
  summary: 'Categories: Assertions'
  description: "# assert.notPropContains()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.18.0](https://github.com/qunitjs/qunit/releases/tag/2.18.0).\n\n## Description\n\n`notPropContains( actual, expected, message = \"\" )`\n\nCheck that an object does not contain certain properties.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `expected`         | Known comparison value  |\n| `message` (string) | Short description       |\n\nThe `notPropContains` assertion compares the subset of properties in the expected object, and tests that these keys are either absent or hold a value that is different according to a strict equality comparison.\n\nThis method is recursive and allows partial comparison of nested objects as well.\n\n## See also\n\n- Use [`assert.propContains()`](propcontains) to test for the presence and equality of properties instead.\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  const result = {\n    foo: 0,\n    vehicle: {\n      timeCircuits: 'on',\n      fluxCapacitor: 'fluxing',\n      engine: 'running'\n    },\n    quux: 1\n  };\n\n  // succeeds, property \"timeCircuits\" is actually \"on\"\n  assert.notPropContains(result, {\n    vehicle: {\n      timeCircuits: 'off'\n    }\n  });\n\n  // succeeds, property \"wings\" is not in the object\n  assert.notPropContains(result, {\n    vehicle: {\n      wings: 'flapping'\n    }\n  });\n\n  function Point (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  assert.notPropContains(\n    new Point(10, 20),\n    { z: 30 }\n  );\n\n  const nested = {\n    north: [ /* ... */ ],\n    east: new Point(10, 20),\n    south: [ /* ... */ ],\n    west: [ /* ... */ ]\n  };\n\n  assert.notPropContains(nested, { east: new Point(88, 42) });\n  assert.notPropContains(nested, { east: { x: 88 } });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notPropContains](https://qunitjs.com/api/assert/notPropContains)"
- name: assert.notPropEqual()
  id: assert/notpropequal
  summary: 'Categories: Assertions'
  description: "# assert.notPropEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.11.0](https://github.com/qunitjs/qunit/releases/tag/v1.11.0).\n\n## Description\n\n`notPropEqual( actual, expected, message = \"\" )`\n\nCompare an object’s own properties using a strict inequality comparison.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `expected`         | Known comparison value  |\n| `message` (string) | Short description       |\n\nThe `notPropEqual` assertion compares only an object’s own properties, using the strict inequality operator (`!==`).\n\nThe test passes if there are properties with different values, or extra properties, or missing properties.\n\n## See also\n\n- Use [`assert.notPropContains()`](notpropcontains) to only check for the absence or inequality of some properties.\n- Use [`assert.propEqual()`](propequal) to test for equality of properties instead.\n\n## Examples\n\nCompare the values of two objects properties.\n\n``` javascript\nQUnit.test('example', assert => {\n  class Foo {\n    constructor () {\n      this.x = '1';\n      this.y = 2;\n    }\n\n    walk () {}\n    run () {}\n  }\n\n  const foo = new Foo();\n\n  // succeeds, only own property values are compared (using strict equality),\n  // and property \"x\" is indeed not equal (string instead of number).\n  assert.notPropEqual(foo, {\n    x: 1,\n    y: 2\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notPropEqual](https://qunitjs.com/api/assert/notPropEqual)"
- name: assert.notStrictEqual()
  id: assert/notstrictequal
  summary: 'Categories: Assertions'
  description: "# assert.notStrictEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`notStrictEqual( actual, expected, message = \"\" )`\n\nA strict comparison, checking for inequality.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `actual`           | Expression being tested |\n| `expected`         | Known comparison value  |\n| `message` (string) | Short description       |\n\nThe `notStrictEqual` assertion uses the strict inverted comparison operator (`!==`) to compare the actual and expected arguments. When they aren’t equal, the assertion passes; otherwise, it fails. When it fails, both actual and expected values are displayed in the test result, in addition to a given message.\n\n[`assert.equal()`](equal) can be used to test equality.\n\n[`assert.strictEqual()`](strictequal) can be used to test strict equality.\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  const result = '2';\n\n  // succeeds, while the number 2 and string 2 are similar, they are strictly different.\n  assert.notStrictEqual(result, 2);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/notStrictEqual](https://qunitjs.com/api/assert/notStrictEqual)"
- name: assert.ok()
  id: assert/ok
  summary: 'Categories: Assertions'
  description: "# assert.ok()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`ok( state, message = \"\" )`\n\nA boolean check that passes when the first argument is truthy.\n\n| name               | description             |\n|--------------------|-------------------------|\n| `state`            | Expression being tested |\n| `message` (string) | Short description       |\n\nThis assertion requires only one argument. If the argument evaluates to true, the assertion passes; otherwise, it fails.\n\nTo strictly compare against boolean true, use [`assert.true()`](true).\n\nFor the inverse of `ok()`, refer to [`assert.notOk()`](notok)\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  // success\n  assert.ok(true, 'boolean true');\n  assert.ok('foo', 'non-empty string');\n  assert.ok(1, 'number one');\n\n  // failure\n  assert.ok(false, 'boolean false');\n  assert.ok('', 'empty string');\n  assert.ok(0, 'number zero');\n  assert.ok(NaN, 'NaN value');\n  assert.ok(null, 'null value');\n  assert.ok(undefined, 'undefined value');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/ok](https://qunitjs.com/api/assert/ok)"
- name: assert.propContains()
  id: assert/propcontains
  summary: 'Categories: Assertions'
  description: "# assert.propContains()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.18.0](https://github.com/qunitjs/qunit/releases/tag/2.18.0).\n\n## Description\n\n`propContains( actual, expected, message = \"\" )`\n\nCheck that an object contains certain properties.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `expected`         | Known comparison value                     |\n| `message` (string) | Short description of the actual expression |\n\nThe `propContains` assertion compares only the **subset** of properties in the expected object, and tests that these keys exist as own properties with strictly equal values.\n\nThis method is recursive and allows partial comparison of nested objects as well.\n\n## See also\n\n- Use [`assert.propEqual()`](propequal) to compare all properties, considering extra properties as unexpected.\n- Use [`assert.notPropContains()`](notpropcontains) to test for the absence or inequality of properties.\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  const result = {\n    foo: 0,\n    vehicle: {\n      timeCircuits: 'on',\n      fluxCapacitor: 'fluxing',\n      engine: 'running'\n    },\n    quux: 1\n  };\n\n  assert.propContains(result, {\n    foo: 0,\n    vehicle: { fluxCapacitor: 'fluxing' }\n  });\n\n  function Point (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  assert.propContains(\n    new Point(10, 20),\n    { y: 20 }\n  );\n\n  assert.propContains(\n    [ 'a', 'b' ],\n    { 1: 'b' }\n  );\n\n  const nested = {\n    north: [ /* ... */ ],\n    east: new Point(10, 20),\n    south: [ /* ... */ ],\n    west: [ /* ... */ ]\n  };\n\n  assert.propContains(nested, { east: new Point(10, 20) });\n  assert.propContains(nested, { east: { x: 10, y: 20 } });\n  assert.propContains(nested, { east: { x: 10 } });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/propContains](https://qunitjs.com/api/assert/propContains)"
- name: assert.propEqual()
  id: assert/propequal
  summary: 'Categories: Assertions'
  description: "# assert.propEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.11.0](https://github.com/qunitjs/qunit/releases/tag/v1.11.0).\n\n## Description\n\n`propEqual( actual, expected, message = \"\" )`\n\nCompare an object’s own properties using a strict comparison.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `expected`         | Known comparison value                     |\n| `message` (string) | Short description of the actual expression |\n\nThe `propEqual` assertion only compares an object’s own properties. This means the expected value does not need to be an instance of the same class or otherwise inherit the same prototype. This is in contrast with [`assert.deepEqual()`](deepequal).\n\nThis assertion fails if the values differ, or if there are extra properties, or if some properties are missing.\n\nThis method is recursive and can compare any nested or complex object via a plain object.\n\n## See also\n\n- Use [`assert.propContains()`](propcontains) to only check a subset of properties.\n- Use [`assert.notPropEqual()`](notpropequal) to test for the inequality of object properties instead.\n\n## Examples\n\nCompare the property values of two objects.\n\n``` javascript\nQUnit.test('example', assert => {\n  class Foo {\n    constructor () {\n      this.x = 1;\n      this.y = 2;\n    }\n\n    walk () {}\n    run () {}\n  }\n\n  const foo = new Foo();\n\n  // succeeds, own properties are strictly equal,\n  // and inherited properties (such as which constructor) are ignored.\n  assert.propEqual(foo, {\n    x: 1,\n    y: 2\n  });\n});\n```\n\nUsing classic ES5 syntax:\n\n``` javascript\nQUnit.test('example', function (assert) {\n  function Foo () {\n    this.x = 1;\n    this.y = 2;\n  }\n  Foo.prototype.walk = function () {};\n  Foo.prototype.run = function () {};\n\n  var foo = new Foo();\n\n  // succeeds, own properties are strictly equal.\n  var expected = {\n    x: 1,\n    y: 2\n  };\n  assert.propEqual(foo, expected);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/propEqual](https://qunitjs.com/api/assert/propEqual)"
- name: assert.pushResult()
  id: assert/pushresult
  summary: 'Categories: Assertions, Extension interface'
  description: "# assert.pushResult()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.22.0](https://github.com/qunitjs/qunit/releases/tag/1.22.0).\n\n## Description\n\n`pushResult( data )`\n\nReport the result of a custom assertion.\n\n| name                                 | description                        |\n|--------------------------------------|------------------------------------|\n| `data.result` (boolean)              | Result of the assertion            |\n| `data.actual`                        | Expression being tested            |\n| `data.expected`                      | Known comparison value             |\n| `data.message` (string or undefined) | Short description of the assertion |\n\n## Examples\n\n### Create a QUnit assert plugin\n\nWith a custom assertion method, you can control how an assertion should be evaluated, separately from how its actual and expected values are described in case of a failure.\n\nThis provides more helpful and transparent diagnostic information when test failures are presented. It also lets you avoid duplication and separate concerns between your test requirements and the way specific a generic and re-usable check is implemented.\n\nFor example:\n\n``` javascript\nQUnit.assert.between = function (actual, from, to, message) {\n  const isBetween = (actual >= from && actual <= to);\n\n  this.pushResult({\n    result: isBetween,\n    actual: actual,\n    expected: `between ${from} and ${to} inclusive`,\n    message: message\n  });\n};\n\nQUnit.test('example', assert => {\n  const result = 42;\n  assert.between(result, 1, 10, 'result');\n  // Example test failure\n  // > actual: 42\n  // > expected: between 1 and 10\n});\n```\n\n### When to create an assertion\n\nIf there isn’t a built-in QUnit assertion for something that you need to check, you can always freely express it using inline JavaScript within your test. It is recommended to, whenever possible, end your ad-hoc logic with two values that you can pass to [`assert.strictEqual()`](strictequal), or pass a boolean result to [`assert.true()`](true).\n\n``` javascript\nQUnit.test('remainder example [bad]', assert => {\n  const actual = 4;\n\n  const result = (actual % 3) === 2;\n  assert.true(result);\n\n  // Example failure:\n  // > Actual: false\n  // > Expected: true\n});\n\nQUnit.test('remainder example [good]', assert => {\n  const actual = 4;\n\n  const result = (actual % 3);\n  assert.strictEqual(result, 2, 'remainder of mod 3');\n\n  // Example failure:\n  // > Message: remainder of mod 3\n  // > Actual: 1\n  // > Expected: 2\n});\n\nQUnit.test('between example', assert => {\n  const actual = 42;\n\n  const isBetween = actual >= 1 && actual <= 10;\n  assert.true(isBetween);\n\n  // Example failure:\n  // > Actual: false\n  // > Expected: true\n});\n```\n\nWriting a custom expression like this is perfectly fine occasionally. But, if you need to do this a lot, you do take on additional risks and costs over time:\n\n- Risk of subtle bugs or false positives due to logic duplication. With a plugin, you can write/document/test it once, and then re-use.\n- No mention of the actual number.\n- No mention of the expected value(s).\n- No description of the problem.\n- No (useful) diff.\n\nThis is likely to increase the cost of debugging, requiring an issue to first be reproduced and stepped-through locally before the failure is understood. You can compensate for this by maintaining a copy of the most important information in the “message” field of your assertions.\n\nWhen you create an assertion plugin instead, this is automated as part of the “actual” and “expected” values, which you can control separately from the boolean result.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/pushResult](https://qunitjs.com/api/assert/pushResult)"
- name: assert.rejects()
  id: assert/rejects
  summary: 'Categories: Assertions, Async control'
  description: "# assert.rejects()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/), [Async control](https://qunitjs.com/api/async/).\n\nversion added: [2.5.0](https://github.com/qunitjs/qunit/releases/tag/2.5.0).\n\n## Description\n\n`rejects( promise, message = \"\" )`  \n`rejects( promise, expectedMatcher, message = \"\" )`\n\nTest if the provided promise rejects, and optionally compare the rejection value.\n\n| name                 | description                        |\n|----------------------|------------------------------------|\n| `promise` (thenable) | Promise to test for rejection      |\n| `expectedMatcher`    | Rejection value matcher            |\n| `message` (string)   | Short description of the assertion |\n\nWhen testing code that is expected to return a rejected promise based on a specific set of circumstances, use `assert.rejects()` for testing and comparison.\n\nThe `expectedMatcher` argument can be:\n\n- A function that returns `true` when the assertion should be considered passing.\n- An Error object.\n- A base constructor, evaluated as `rejectionValue instanceof expectedMatcher`.\n- A RegExp that matches (or partially matches) `rejectionValue.toString()`.\n\nNote: in order to avoid confusion between the `message` and the `expectedMatcher`, the `expectedMatcher` **can not** be a string.\n\n## Examples\n\n``` javascript\nQUnit.test('rejects example', assert => {\n  // simple check\n  assert.rejects(Promise.reject('some error'));\n\n  // simple check\n  assert.rejects(\n    Promise.reject('some error'),\n    'optional description here'\n  );\n\n  // match pattern on actual error\n  assert.rejects(\n    Promise.reject(new Error('some error')),\n    /some error/,\n    'optional description here'\n  );\n\n  // Using a custom error constructor\n  function CustomError (message) {\n    this.message = message;\n  }\n  CustomError.prototype.toString = function () {\n    return this.message;\n  };\n\n  // actual error is an instance of the expected constructor\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    CustomError\n  );\n\n  // actual error has strictly equal `constructor`, `name` and `message` properties\n  // of the expected error object\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    new CustomError('some error')\n  );\n\n  // custom validation arrow function\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    (err) => err.toString() === 'some error'\n  );\n\n  // custom validation function\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    function (err) {\n      return err.toString() === 'some error';\n    }\n  );\n});\n```\n\nThe `assert.rejects()` method returns a `Promise` which handles the (often asynchronous) resolution and rejection logic for test successes and failures. It is not required to `await` the returned value, since QUnit internally handles the async control for you and waits for a settled state. However, if your test code requires a consistent and more isolated state between `rejects` calls, then this should be explicitly awaited to hold back the next statements.\n\n``` javascript\nQUnit.test('stateful rejects example', async assert => {\n  let value;\n\n  // asynchronously resolve if value < 5, and reject otherwise\n  function asyncChecker () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (value < 5) {\n          resolve();\n        } else {\n          reject('bad value: ' + value);\n        }\n      }, 10);\n    });\n  }\n\n  value = 8;\n  await assert.rejects(asyncChecker(), /bad value: 8/);\n\n  // if the above was not awaited, then the next line would change the value\n  // before the previous assertion could occur, and would cause a test failure\n  value = Infinity;\n  await assert.rejects(asyncChecker(), /bad value: Infinity/);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/rejects](https://qunitjs.com/api/assert/rejects)"
- name: assert.step()
  id: assert/step
  summary: 'Categories: Assertions'
  description: "# assert.step()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.2.0](https://github.com/qunitjs/qunit/releases/tag/2.2.0).\n\n## Description\n\n`step( value )`\n\nRecord a step for later verification.\n\n| name             | description                                                     |\n|------------------|-----------------------------------------------------------------|\n| `value` (string) | Relevant string value, or short description, to mark this step. |\n\nThis and any later steps must be verified before the end of the test via [`assert.verifySteps()`](verifysteps).\n\nThe Step API provides an easy way to verify execution logic to a high degree of accuracy and precision, whether for asynchronous code, event-driven code, or callback-driven code.\n\n## Changelog\n\n|            |                                                                                                                              |\n|------------|------------------------------------------------------------------------------------------------------------------------------|\n| UNRELEASED | [assert.expect()](expect) now counts [assert.verifySteps()](verifysteps) as one assertion. Steps no longer count separately. |\n\n## Examples\n\n``` javascript\nQUnit.test('example', function (assert) {\n  var maker = new WordMaker();\n  maker.on('start', () => {\n    assert.step('start');\n  });\n  maker.on('data', (word) => {\n    assert.step(word);\n  });\n  maker.on('end', () => {\n    assert.step('end');\n  });\n\n  maker.process('3.1');\n\n  assert.verifySteps([ 'start', '3', 'point', '1', 'end' ]);\n});\n```\n\n*Note: See [`assert.verifySteps()`](verifysteps) for more detailed examples.*\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/step](https://qunitjs.com/api/assert/step)"
- name: assert.strictEqual()
  id: assert/strictequal
  summary: 'Categories: Assertions'
  description: "# assert.strictEqual()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`strictEqual( actual, expected, message = \"\" )`\n\nA strict type and value comparison.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `expected`         | Known comparison value                     |\n| `message` (string) | Short description of the actual expression |\n\nThe `strictEqual()` assertion provides the most rigid comparison of type and value with the strict equality operator (`===`).\n\n[`assert.equal()`](equal) can be used to test non-strict equality.\n\n[`assert.notStrictEqual()`](notstrictequal) can be used to explicitly test strict inequality.\n\n## Changelog\n\n- Prior to QUnit 1.1, this method was known as `assert.same()`.  \n  The alias was removed in QUnit 1.3.\n\n## Examples\n\nCompare the value of two primitives, having the same value and type.\n\n``` javascript\nQUnit.test('strictEqual example', assert => {\n  const result = 2;\n\n  assert.strictEqual(result, 2);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/strictEqual](https://qunitjs.com/api/assert/strictEqual)"
- name: assert.throws()
  id: assert/throws
  summary: 'Categories: Assertions'
  description: "# assert.throws()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`throws( blockFn, message = \"\" )`  \n`throws( blockFn, expectedMatcher, message = \"\" )`\n\nTest if a callback throws an exception, and optionally compare the thrown error.\n\n| name                 | description                        |\n|----------------------|------------------------------------|\n| `blockFn` (function) | Function to execute                |\n| `expectedMatcher`    | Expected error matcher             |\n| `message` (string)   | Short description of the assertion |\n\nWhen testing code that is expected to throw an exception based on a specific set of circumstances, use `assert.throws()` to catch the error object for testing and comparison.\n\nThe `expectedMatcher` argument can be:\n\n- An Error object.\n- An Error constructor, evaluated as `errorValue instanceof expectedMatcher`.\n- A RegExp that matches (or partially matches) the string representation.\n- A callback Function that must return `true` to pass the assertion check.\n\nIn very few environments, like Closure Compiler, `throws` may cause an error. There you can use `assert.raises()`. It has the same signature and behaviour, just a different name.\n\n## Changelog\n\n|                                                                    |                                                                                                                 |\n|--------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| [QUnit 2.12](https://github.com/qunitjs/qunit/releases/tag/2.12.0) | Added support for arrow functions as `expectedMatcher` callback function.                                       |\n| [QUnit 1.9](https://github.com/qunitjs/qunit/releases/tag/v1.9.0)  | `assert.raises()` was renamed to `assert.throws()`. The `assert.raises()` method remains supported as an alias. |\n\n## Examples\n\n``` javascript\nQUnit.test('throws example', assert => {\n  // simple check\n  assert.throws(function () {\n    throw new Error('boo');\n  });\n\n  // simple check\n  assert.throws(\n    function () {\n      throw new Error('boo');\n    },\n    'optional description here'\n  );\n\n  // match pattern on actual error\n  assert.throws(\n    function () {\n      throw new Error('some error');\n    },\n    /some error/,\n    'optional description here'\n  );\n\n  // using a custom error constructor\n  function CustomError (message) {\n    this.message = message;\n  }\n  CustomError.prototype.toString = function () {\n    return this.message;\n  };\n\n  // actual error is an instance of the expected constructor\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    CustomError\n  );\n\n  // actual error has strictly equal `constructor`, `name` and `message` properties\n  // of the expected error object\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    new CustomError('some error')\n  );\n\n  // custom validation arrow function\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    (err) => err.toString() === 'some error'\n  );\n\n  // custom validation function\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    function (err) {\n      return err.toString() === 'some error';\n    }\n  );\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/throws](https://qunitjs.com/api/assert/throws)"
- name: assert.timeout()
  id: assert/timeout
  summary: 'Categories: Assertions, Async control'
  description: "# assert.timeout()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/), [Async control](https://qunitjs.com/api/async/).\n\nversion added: [2.4.0](https://github.com/qunitjs/qunit/releases/tag/2.4.0).\n\n## Description\n\n`timeout( duration )`\n\nSet how long to wait for async operations to finish.\n\n| name                | description                                  |\n|---------------------|----------------------------------------------|\n| `duration` (number) | The length of time to wait, in milliseconds. |\n\nThis assertion defines how long to wait (at most) in the current test. It overrides [`QUnit.config.testTimeout`](../config/testtimeout) on a per-test basis.\n\nThe timeout length only applies when a test actually involves asynchronous functions or promises. If `0` is passed, then awaiting or returning any Promise may fail the test.\n\nIf `assert.timeout()` is called after a different timeout is already set, the old timeout will be cleared and the new duration will be used to start a new timer.\n\n## Examples\n\n``` javascript\nQUnit.test('wait for an event', assert => {\n  assert.timeout(1000); // Timeout after 1 second\n  const done = assert.async();\n\n  const adder = new NumberAdder();\n  adder.on('ready', res => {\n    assert.strictEqual(res, 12);\n    done();\n  });\n  adder.run([ 1, 1, 2, 3, 5 ]);\n});\n```\n\n``` javascript\nQUnit.test('wait for an async function', async assert => {\n  assert.timeout(500); // Timeout after 0.5 seconds\n\n  const result = await asyncAdder(5, 7);\n  assert.strictEqual(result, 12);\n});\n```\n\nUsing classic ES5 syntax:\n\n``` javascript\nQUnit.test('wait for a returned promise', function (assert) {\n  assert.timeout(500); // Timeout after 0.5 seconds\n\n  var promise = asyncAdder(5, 7);\n\n  return promise.then(function (result) {\n    assert.strictEqual(result, 12);\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/timeout](https://qunitjs.com/api/assert/timeout)"
- name: assert.true()
  id: assert/true
  summary: 'Categories: Assertions'
  description: "# assert.true()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.11.0](https://github.com/qunitjs/qunit/releases/tag/2.11.0).\n\n## Description\n\n`true( actual, message = \"\" )`\n\nA strict comparison that passes if the first argument is boolean `true`.\n\n| name               | description                                |\n|--------------------|--------------------------------------------|\n| `actual`           | Expression being tested                    |\n| `message` (string) | Short description of the actual expression |\n\n`true()` requires just one argument. If the argument evaluates to true, the assertion passes; otherwise, it fails.\n\nThis method is similar to the `assertTrue()` method found in xUnit-style frameworks.\n\n[`assert.false()`](false) can be used to explicitly test for a false value.\n\n## Examples\n\n``` javascript\nQUnit.test('example', assert => {\n  // success\n  assert.true(true, 'boolean true');\n\n  // failure\n  assert.true('foo', 'non-empty string');\n  assert.true('', 'empty string');\n  assert.true(0, 'number zero');\n  assert.true(false, 'boolean false');\n  assert.true(NaN, 'NaN value');\n  assert.true(null, 'null value');\n  assert.true(undefined, 'undefined value');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/true](https://qunitjs.com/api/assert/true)"
- name: assert.verifySteps()
  id: assert/verifysteps
  summary: 'Categories: Assertions'
  description: "# assert.verifySteps()\n\nCategories: [Assertions](https://qunitjs.com/api/assert/).\n\nversion added: [2.2.0](https://github.com/qunitjs/qunit/releases/tag/2.2.0).\n\n## Description\n\n`verifySteps( steps, message = \"\" )`\n\nVerify the presence and exact order of previously marked steps in a test.\n\n| name               | description       |\n|--------------------|-------------------|\n| `steps` (array)    | List of strings   |\n| `message` (string) | Short description |\n\nThe Step API provides an easy way to verify execution logic to a high degree of accuracy and precision, whether for asynchronous code, event-driven code, or callback-driven code.\n\nFor example, you can mark steps to observe and validate whether parts of your code are reached correctly, or to check the frequency (how often) an asynchronous code path is executed. You can also capture any unexpected steps, which are automatically detected and shown as part of the test failure.\n\nThis assertion compares a given array of string values to a list of previously recorded steps, as marked via previous calls to [`assert.step()`](step).\n\nCalling `verifySteps()` will clear and reset the internal list of steps. This allows multiple independent sequences of `assert.step()` to exist within the same test.\n\nRefer to the below examples and learn how to use the Step API in your test suite.\n\n## Changelog\n\n|            |                                                                                                                 |\n|------------|-----------------------------------------------------------------------------------------------------------------|\n| UNRELEASED | [assert.expect()](expect) now counts `assert.verifySteps()` as one assertion. Steps no longer count separately. |\n\n## Examples\n\n### Test event-based interface\n\nThis example uses a class based on an [`EventEmitter`](https://nodejs.org/api/events.html), such as the one provided by Node.js and other environments:\n\n``` javascript\nQUnit.test('good example', async assert => {\n  const maker = new WordMaker();\n  maker.on('start', () => {\n    assert.step('start');\n  });\n  maker.on('data', (word) => {\n    assert.step(word);\n  });\n  maker.on('end', () => {\n    assert.step('end');\n  });\n  maker.on('error', message => {\n    assert.step('error: ' + message);\n  });\n\n  await maker.process('3.1');\n\n  assert.verifySteps(['start', '3', 'point', '1', 'end']);\n});\n```\n\nWhen approaching this scenario **without the Step API** one might be tempted to place comparison checks directly inside event callbacks. It is considered an anti-pattern to make dummy assertions in callbacks that the test does not have control over. This creates loose assurances, and can easily cause false positives (a callback might not run, run out of order, or run multiple times). It also offers rather limited debugging information.\n\n``` javascript\n// WARNING: This is a BAD example\nQUnit.test('bad example 1', async assert => {\n  const maker = new WordMaker();\n  maker.on('start', () => {\n    assert.true(true, 'start');\n  });\n  maker.on('middle', () => {\n    assert.true(true, 'middle');\n  });\n  maker.on('end', () => {\n    assert.true(true, 'end');\n  });\n  maker.on('error', () => {\n    assert.true(false, 'error');\n  });\n\n  await maker.process();\n});\n```\n\nA less fragile approach could involve a local array that we check afterwards with [`deepEqual`](deepequal). This catches out-of-order issues, unexpected values, and duplicate values. It also provides detailed debugging information in case of problems. The below is in essence how the Step API works:\n\n``` javascript\nQUnit.test('manual example without Step API', async assert => {\n  const values = [];\n\n  const maker = new WordMaker();\n  maker.on('start', () => {\n    values.push('start');\n  });\n  maker.on('middle', () => {\n    values.push('middle');\n  });\n  maker.on('end', () => {\n    values.push('end');\n  });\n  maker.on('error', () => {\n    values.push('error');\n  });\n\n  await maker.process();\n\n  assert.deepEqual(values, ['start', 'middle', 'end']);\n});\n```\n\n### Test publish/subscribe system\n\nUse the **Step API** to verify messages received in a Pub-Sub channel or topic.\n\n``` javascript\nQUnit.test('good example', assert => {\n  const publisher = new Publisher();\n\n  const subscriber1 = (message) => assert.step(`Sub 1: ${message}`);\n  const subscriber2 = (message) => assert.step(`Sub 2: ${message}`);\n\n  publisher.subscribe(subscriber1);\n  publisher.subscribe(subscriber2);\n  publisher.publish('Hello!');\n\n  publisher.unsubscribe(subscriber1);\n  publisher.publish('World!');\n\n  assert.verifySteps([\n    'Sub 1: Hello!',\n    'Sub 2: Hello!',\n    'Sub 2: World!'\n  ]);\n});\n```\n\n### Multiple step verifications in one test\n\nThe internal buffer of observed steps is automatically reset when calling `verifySteps()`.\n\n``` javascript\nQUnit.test('multiple verifications example', assert => {\n  assert.step('one');\n  assert.step('two');\n  assert.verifySteps(['one', 'two']);\n\n  assert.step('three');\n  assert.step('four');\n  assert.verifySteps(['three', 'four']);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/assert/verifySteps](https://qunitjs.com/api/assert/verifySteps)"
- name: QUnit.assert
  id: extension/qunit.assert
  summary: 'Categories: Extension interface'
  description: "# QUnit.assert\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.7.0](https://github.com/qunitjs/qunit/releases/tag/1.7.0).\n\n## Description\n\nNamespace for QUnit assertion methods. This object is the prototype for the internal Assert class of which instances are passed as the argument to [`QUnit.test()`](../qunit/test) callbacks.\n\nThis object contains QUnit’s [built-in assertion methods](https://qunitjs.com/api/assert/), and may be extended by plugins to register additional assertion methods.\n\nSee [`assert.pushResult()`](../assert/pushresult) for how to create a custom assertion.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.assert](https://qunitjs.com/api/extension/QUnit.assert)"
- name: QUnit.begin()
  id: callbacks/qunit.begin
  summary: 'Categories: Callback events'
  description: "# QUnit.begin()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.begin( callback )`\n\nRegister a callback to fire when the test run begins. The callback may be an async function, or a function that returns a Promise, which will be waited for before the next callback is handled.\n\nThe callback will be called once, before QUnit runs any tests.\n\n| parameter             | description                                          |\n|-----------------------|------------------------------------------------------|\n| `callback` (function) | Callback to execute, called with a `details` object. |\n\n### Details object\n\n| property              | description                                                                  |\n|-----------------------|------------------------------------------------------------------------------|\n| `totalTests` (number) | Number of registered tests                                                   |\n| `modules` (array)     | List of registered modules, as `{ name: string, moduleId: string }` objects. |\n\n## Changelog\n\n|                                                                      |                                                                          |\n|----------------------------------------------------------------------|--------------------------------------------------------------------------|\n| [QUnit 2.19.0](https://github.com/qunitjs/qunit/releases/tag/2.19.0) | Added `moduleId` to the `details.modules` objects.                       |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0)   | Added `details.modules` property, containing `{ name: string }` objects. |\n| [QUnit 1.15](https://github.com/qunitjs/qunit/releases/tag/1.15.0)   | Added `details.totalTests` property.                                     |\n\n## Examples\n\nGet total number of tests known at the start.\n\n``` javascript\nQUnit.begin(details => {\n  console.log(`Test amount: ${details.totalTests}`);\n});\n```\n\nUse async-await to wait for some asynchronous work:\n\n``` javascript\nQUnit.begin(async details => {\n  await someAsyncWork();\n\n  console.log(`Test amount: ${details.totalTests}`);\n});\n```\n\nUsing classic ES5 syntax:\n\n``` javascript\nQUnit.begin(function (details) {\n  console.log('Test amount:' + details.totalTests);\n});\n```\n\n``` javascript\nfunction someAsyncWork () {\n  return new Promise(function (resolve, reject) {\n    // do some async work\n    resolve();\n  });\n}\n\nQUnit.begin(function (details) {\n  return someAsyncWork().then(function () {\n    console.log('Test amount:' + details.totalTests);\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.begin](https://qunitjs.com/api/callbacks/QUnit.begin)"
- name: QUnit.config.altertitle
  id: config/altertitle
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.altertitle\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nIn browser environments, whether to insert a success or failure symbol in the document title.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nBy default, QUnit updates `document.title` to insert a checkmark or cross symbol to indicate whether the test run passed or failed. This helps quickly spot from the tab bar whether a run passed, without opening it.\n\nIf you’re integration-testing code that makes changes to `document.title`, or otherwise conflicts with this feature, you can disable it.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/altertitle](https://qunitjs.com/api/config/altertitle)"
- name: QUnit.config.autostart
  id: config/autostart
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.autostart\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nControl when the test run may start, e.g. after asynchronously loading test files with RequireJS, AMD, ES6 dynamic imports, or other means.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nIn the browser, QUnit by default waits for all `<script>` elements to finish loading (by means of the window `load` event). When using the QUnit CLI, it waits until the specified files are imported.\n\nSet this property to `false` to instruct QUnit to wait longer, allowing you to load test files asynchronously. Remember to call [`QUnit.start()`](../qunit/start) once you’re ready for tests to begin running.\n\n## Examples\n\n### Error: Unexpected test after runEnd\n\nIf tests are new tests defined after QUnit has finished its run, you may encounter this error:\n\n``` javascript\nError: Unexpected test after runEnd.\n```\n\nIf you load test files asynchronously, make sure to disable autostart and call [`QUnit.start()`](../qunit/start) accordingly.\n\nIf you encounter this error unrelated to autostart, it might be that you’re dynamically registering a new [QUnit.test](../qunit/test) from inside a hook or event callback towards the end of the test run, such as `hooks.after()` or `QUnit.done()`. It is recommended to define dynamic tests via [`QUnit.begin()`](../callbacks/qunit.begin) instead. ([\\#1663](https://github.com/qunitjs/qunit/issues/1663))\n\nTo report global errors from a plugin or other integration layer, consider calling [QUnit.onUncaughtException()](../extension/qunit.onuncaughtexception) instead.\n\n### ESM Dynamic imports\n\nThis example uses the [import()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) operator to dynamically load ECMAScript module (ESM) files.\n\n``` javascript\n<script src=\"../lib/qunit.js\"></script>\n<script type=\"module\" src=\"tests.js\"></script>\n```\n\n``` javascript\n// tests.js\nQUnit.config.autostart = false;\n\nPromise.all([\n  import('./foo.js'),\n  import('./bar.js')\n]).then(function () {\n  QUnit.start();\n});\n```\n\n### Loading with RequireJS\n\nThis example uses [RequireJS](https://requirejs.org/) to load your test files through the `require()` function (as defined in the [AMD specification](https://github.com/amdjs/amdjs-api/blob/master/require.md)).\n\nIt is recommended to load QUnit itself before RequireJS. See also [RequireJS wiki](https://github.com/requirejs/requirejs/wiki/Test-frameworks).\n\n``` javascript\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>QUnit</title>\n<link rel=\"stylesheet\" href=\"./lib/qunit.css\">\n<body>\n  <div id=\"qunit\"></div>\n  <script src=\"../lib/qunit.js\"></script>\n  <script src=\"../lib/requirejs/require.js\"></script>\n  <script src=\"tests.js\"></script>\n</body>\n```\n\n``` javascript\n// tests.js\nQUnit.config.autostart = false;\n\nrequire(\n  [\n    'tests/testModule1',\n    'tests/testModule2'\n  ],\n  function () {\n    QUnit.start();\n  }\n);\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/autostart](https://qunitjs.com/api/config/autostart)"
- name: QUnit.config.collapse
  id: config/collapse
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.collapse\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nIn the HTML Reporter, collapse the details of failing tests after the first one.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nBy default, the [HTML Reporter](https://qunitjs.com/browser/) collapses consecutive failing tests showing only the details for the first failed test. The other tests can be expanded manually with a single click on the test title.\n\nSet this option to `false` to expand the details for all failing tests.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/collapse](https://qunitjs.com/api/config/collapse)"
- name: QUnit.config.current
  id: config/current
  summary: 'Categories: QUnit.config, Extension interface'
  description: "# QUnit.config.current\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nInternal object representing the currently running test.\n\n|      |                                     |\n|------|-------------------------------------|\n| type | `undefined` or `object` (read-only) |\n\nThis object is not a configuration option, but is exposed under `QUnit.config` for use by plugins and other integrations. This offers access to QUnit’s internal `Test` object at runtime.\n\n## Properties\n\n| name                | description                                                                                                                                                    |\n|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `testName` (string) | Name of the currently-running test, as passed to [QUnit.test](../qunit/test).                                                                                  |\n| `testId` (string)   | Internal ID, used by [QUnit.config.testId](testid) to power “Rerun” links and the HTML API in the [HTML Reporter](https://qunitjs.com/browser/#html-reporter). |\n\nOther properties may change without notice. When possible, use [QUnit.on](../callbacks/qunit.on) or [event callbacks](https://qunitjs.com/api/callbacks/) instead.\n\n## Changelog\n\n|                                                                    |                          |\n|--------------------------------------------------------------------|--------------------------|\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Added `testId` property. |\n\n## Example\n\nAccess `QUnit.config.current.testName` to observe the currently running test’s name.\n\n``` javascript\nfunction whatsUp () {\n  console.log(QUnit.config.current.testName); // \"example\"\n}\n\nQUnit.test('example', function (assert) {\n  whatsUp();\n\n  assert.true(true);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/current](https://qunitjs.com/api/config/current)"
- name: QUnit.config.failOnZeroTests
  id: config/failonzerotests
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.failOnZeroTests\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [2.16.0](https://github.com/qunitjs/qunit/releases/tag/2.16.0).\n\n## Description\n\nWhether to fail the test run if no tests were run.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nBy default, it is considered an error if no tests were loaded, or if no tests matched the current filter.\n\nSet this option to `false` to let an empty test run result in a success instead.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/failOnZeroTests](https://qunitjs.com/api/config/failOnZeroTests)"
- name: QUnit.config.filter
  id: config/filter
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.filter\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nSelect tests to run based on a substring or pattern match.\n\n|         |          |\n|---------|----------|\n| type    | `string` |\n| default | `\"\"`     |\n\nThis option is available as [CLI option](https://qunitjs.com/cli/), as control in the [HTML Reporter](https://qunitjs.com/browser/), and supported as URL query parameter.\n\nQUnit only runs tests of which the module name or test name are a case-insensitive substring match for the filter string. You can invert the filter by prefixing an exclamation mark (`!`) to the string, in which case we skip the matched tests, and run the tests that don’t match the filter.\n\nYou can also match via a regular expression by setting the filter to a regular expression literal, enclosed by slashes, such as `/(this|that)/`.\n\nWhile substring filters are always **case-insensitive**, a regular expression is case-sensitive by default.\n\nSee also:\n\n- [QUnit.config.module](module)\n\n## Examples\n\n### Substring filter\n\nThe below matches `FooBar` and `foo > bar`, because string matching is case-insensitive.\n\n``` javascript\nQUnit.config.filter = 'foo';\n```\n\nAs inverted filter, the below skips `FooBar` and `foo > bar`, but runs `Bar` and `bar > sub`.\n\n``` javascript\nQUnit.config.filter = '!foo';\n```\n\n### Regular expression filter\n\nThe below matches `foo` but not `Foo`, because regexes are case-sensitive by default.\n\n``` javascript\nQUnit.config.filter = '/foo/';\n```\n\nThe below matches both `foo` and `Foo`.\n\n``` javascript\nQUnit.config.filter = '/foo/i';\n```\n\nThe below skips both `foo` and `Foo`.\n\n``` javascript\nQUnit.config.filter = '!/foo/i';\n```\n\nThe below matches `foo`, `foo > sub`, and `foo.sub`, but skips `bar`, `bar.foo`, and `FooBar`.\n\n``` javascript\nQUnit.config.filter = '/^foo/';\n```\n\n### URL parameter\n\n``` javascript\n?filter=foo\n?filter=!foo\n?filter=/foo/\n?filter=!/foo/\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/filter](https://qunitjs.com/api/config/filter)"
- name: QUnit.config.fixture
  id: config/fixture
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.fixture\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nIn browser environments, QUnit can create a safe playground for HTML and DOM manipulation, that is automatically cleaned and restored to the default HTML before each test.\n\n|         |                                   |\n|---------|-----------------------------------|\n| type    | `string` or `null` or `undefined` |\n| default | `undefined`                       |\n\nQUnit automatically resets the contents of `<div id=\"qunit-fixture\">`. This gives every test a fresh start, and automatically cleans up any additions or other changes from your tests. As long as you append or insert your elements inside the fixture, you will never have to manually clean up after your tests to keep them atomic.\n\nBy starting with an empty fixture in your test HTML file, you effectively give each test a clean start, as QUnit will automatically remove anything that was added or staged there before the next test begins.\n\nIf many of your tests require the same markup, you can also set it inside the fixture ahead of time. This reduces duplication between tests. QUnit guruantees that each test will start with a fresh copy of the original fixture, undoing any changes that happened during any previous tests.\n\nYou can define a custom fixture in one of two ways:\n\n- In HTML: By writing it as HTML inside the `<div id=\"qunit-fixture\">` element.\n- In JavaScript: Set `QUnit.config.fixture` to a string from an [inline or bootstrap script](https://qunitjs.com/api/config/).\n\nBy default, if `QUnit.config.fixture` is not set, QUnit will look for the `#qunit-fixture` element when the test run begins, and assign its contents to `QUnit.config.fixture`. The initially observed content is then restored before each test.\n\nTo disable QUnit’s fixture resetting behaviour, set the option to `null`.\n\n## Example\n\n### Automatic teardown\n\nStarting with an empty fixture. Any additions are automatically removed.\n\n``` javascript\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n\n  <script src=\"test/example.js\"></script>\n</body>\n```\n\n``` javascript\n// test/example.js\n\nQUnit.test('example [first]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  const resultA = fixture.querySelectorAll('.first');\n  assert.strictEqual(resultA.length, 0, 'initial');\n\n  const div = document.createElement('div');\n  div.className = 'first';\n  fixture.append(div);\n\n  const resultB = fixture.querySelectorAll('.first');\n  assert.strictEqual(resultB.length, 1, 'after append');\n});\n\nQUnit.test('example [second]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  // The previous elements were automatically detached.\n  const result = fixture.querySelectorAll('.first');\n  assert.strictEqual(result.length, 0, 'initial is back to zero');\n});\n```\n\n### default in HTML\n\n``` javascript\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\">\n    <p>\n      <span class=\"marty\"><strong>Marty McFly</strong>: Listen, you got a back door to this place?</span><br>\n      <span class=\"bar\"><strong>Bartender</strong>: Yeah, it's in the <em>back</em>.</span>\n    </p>\n  </div>\n</body>\n```\n\n``` javascript\nfunction findText (element, tagName) {\n  let ret = '';\n  for (const emNode of element.querySelectorAll(tagName)) {\n    ret += emNode.textContent + ' ';\n  }\n  return ret.trim() || null;\n}\n\nQUnit.test('findText [strong]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    'Marty McFly Bartender',\n    'initial'\n  );\n\n  fixture.querySelector('.bar').remove();\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    'Marty McFly',\n    'removed bar'\n  );\n});\n\nQUnit.test('findText [code]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n  fixture.innerHTML = '<p>You can <code>add</code> two <em>numbers</em>.</p>';\n\n  assert.strictEqual(\n    findText(fixture, 'code'),\n    'add'\n  );\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    null\n  );\n});\n\n// The first test removed <span class=bar> and its <em> child.\n// The second test replaced the fixture entirely.\n// The fixture is clean and restored before each test starts.\nQUnit.test('findText [em]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(\n    findText(fixture, 'em'),\n    'back',\n    'initial content was restored'\n  );\n});\n```\n\n### default in JavaScript\n\n``` javascript\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n\n  <script src=\"test/bootstrap.js\"></script>\n  <script src=\"test/example.js\"></script>\n</body>\n```\n\n``` javascript\n// test/bootstrap.js\n\nQUnit.config.fixture = '<p>Hi <strong>there</strong>, stranger!</p>';\n\n// test/example.js\n\nQUnit.test('example [first]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(fixture.textContent, 'Hi there, stranger!');\n\n  fixture.querySelector('strong').remove();\n\n  assert.strictEqual(fixture.textContent, 'Hi , stranger!');\n});\n\nQUnit.test('example [second]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  // The fixture starts fresh on each test!\n  assert.strictEqual(fixture.textContent, 'Hi there, stranger!');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/fixture](https://qunitjs.com/api/config/fixture)"
- name: QUnit.config.hidepassed
  id: config/hidepassed
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.hidepassed\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nIn the HTML Reporter, hide results of passed tests.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `false`   |\n\nThis option can also be controlled via the [HTML Reporter](https://qunitjs.com/browser/).\n\nBy default, the HTML Reporter will list both passing and failing tests. Passing tests are by default collapsed to display only their name. Enable `hidepassed` to hide passing tests completely, and show only failing tests in the list.\n\n## See also\n\n- [QUnit.config.collapse](collapse)\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/hidepassed](https://qunitjs.com/api/config/hidepassed)"
- name: QUnit.config.maxDepth
  id: config/maxdepth
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.maxDepth\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.16.0](https://github.com/qunitjs/qunit/releases/tag/1.16.0).\n\n## Description\n\nIn the HTML Reporter, the depth up-to which an object will be serialized during the diff of an assertion failure.\n\n|         |          |\n|---------|----------|\n| type    | `number` |\n| default | `5`      |\n\nTo disable the depth limit and allow infinite depth, use a value of `0`.\n\nThis is used by [`QUnit.dump.parse()`](../extension/qunit.dump.parse).\n\n## Changelog\n\n|                                                                    |                                                                                                                                                                               |\n|--------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| UNRELEASED                                                         | Make `QUnit.dump.maxDepth` an alias for `QUnit.config.maxDepth`, allowing both to be read and changed at runtime.                                                             |\n| [QUnit 1.18](https://github.com/qunitjs/qunit/releases/tag/1.18.0) | Introduce `QUnit.config.maxDepth` to enable setting via [preconfig](https://qunitjs.com/api/config/). Temporary changes at runtime must change `QUnit.dump.maxDepth` instead. |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Introduce `QUnit.dump.maxDepth`.                                                                                                                                              |\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/maxDepth](https://qunitjs.com/api/config/maxDepth)"
- name: QUnit.config.module
  id: config/module
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.module\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.8.0](https://github.com/qunitjs/qunit/releases/tag/1.8.0).\n\n## Description\n\nSelect a single test module to run by name. The module name must be a complete but case-insensitive match.\n\n|         |                         |\n|---------|-------------------------|\n| type    | `string` or `undefined` |\n| default | `undefined`             |\n\nThis option can also be set by URL query parameter.\n\nWhen specified, only the tests (and nested modules) under the selected module will run. If no module name matches, then no tests will be run.\n\nThis option is undefined by default, which means all loaded test modules will be run.\n\nSee also:\n\n- [QUnit.config.filter](filter)\n- [QUnit.config.moduleId](moduleid)\n\n## Changelog\n\n|                                                                    |                                                                                  |\n|--------------------------------------------------------------------|----------------------------------------------------------------------------------|\n| [QUnit 1.23](https://github.com/qunitjs/qunit/releases/tag/1.23.0) | The public config property was restored.                                         |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | The public config property was removed (the URL query parameter was unaffected). |\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/module](https://qunitjs.com/api/config/module)"
- name: QUnit.config.moduleId
  id: config/moduleid
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.moduleId\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.23.0](https://github.com/qunitjs/qunit/releases/tag/1.23.0).\n\n## Description\n\nUsed by the HTML Reporter, this selects one or more modules by their internal ID to run exclusively.\n\n|         |                        |\n|---------|------------------------|\n| type    | `array` or `undefined` |\n| default | `undefined`            |\n\nThis option can be controlled via the [HTML Reporter](https://qunitjs.com/browser/) interface.\n\nSpecify modules by their internally hashed identifier for a given module. You can specify one or multiple modules to run. This option powers the multi-select dropdown menu in the HTML Reporter.\n\nSee also:\n\n- [QUnit.config.module](module)\n- [QUnit.config.testId](testid)\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/moduleId](https://qunitjs.com/api/config/moduleId)"
- name: QUnit.config.modules
  id: config/modules
  summary: 'Categories: QUnit.config, Extension interface'
  description: "# QUnit.config.modules\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.16.0](https://github.com/qunitjs/qunit/releases/tag/1.16.0).\n\n## Description\n\nList of defined test modules.\n\n|      |                             |\n|------|-----------------------------|\n| type | `Array<Module>` (read-only) |\n\nThe `QUnit.config.modules` property is exposed for use by plugins and other integrations. It returns an array of internal `Module` objects, one for each call to [`QUnit.module()`](../qunit/module).\n\nBefore accessing this property, wait for the [`QUnit.on('runStart')`](../callbacks/qunit.on#the-runstart-event) event, or use a [`QUnit.begin()`](../callbacks/qunit.begin) callback.\n\n### Module object\n\nThe following properties are considered stable and public:\n\n| property            | description                                                          |\n|---------------------|----------------------------------------------------------------------|\n| `name` (string)     | Module name, as passed to [`QUnit.module()`](../qunit/module).       |\n| `moduleId` (string) | Hashed identifier, for the [QUnit.config.moduleId](moduleid) filter. |\n\nOther properties may change without notice. When possible, use [QUnit.on](../callbacks/qunit.on) or [event callbacks](https://qunitjs.com/api/callbacks/) instead.\n\n## Example\n\n``` javascript\nQUnit.on('runStart', () => {\n  console.log(QUnit.config.modules.map(mod => mod.name));\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/modules](https://qunitjs.com/api/config/modules)"
- name: QUnit.config.noglobals
  id: config/noglobals
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.noglobals\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nCheck the global object after each test and report new properties as failures.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `false`   |\n\nEnable this option to let QUnit keep track of which global variables and properties exist on the global object (e.g. `window` in browsers). When new global properties are found, they will result in test failures to you make sure your application and your tests are not leaking any state.\n\nThis helps you make sure the code under test doesn’t accidentally leak or declare any global variables.\n\nThis option can also be controlled via the [HTML Reporter](https://qunitjs.com/browser/).\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/noglobals](https://qunitjs.com/api/config/noglobals)"
- name: QUnit.config.notrycatch
  id: config/notrycatch
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.notrycatch\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nDisable handling of uncaught exceptions during tests.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `false`   |\n\nThis option can also be controlled via the [HTML Reporter](https://qunitjs.com/browser/) interface, and is supported as URL query parameter.\n\nBy default, QUnit handles uncaught errors during test execution and reports them as test failures. This allows reporters to reliably summarise results.\n\nEnabling this flag will disable this error handling, allowing your error to become a “native” uncaught exception and thus interrupt QUnit. This can sometimes ease debugging through a browser’s developer tools, such as when dealing with breakpoints, or source maps.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/notrycatch](https://qunitjs.com/api/config/notrycatch)"
- name: QUnit.config.reorder
  id: config/reorder
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.reorder\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nAllow re-running of previously failed tests out of order, before all other tests.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nBy default, QUnit will prioritize re-running tests that failed on a previous run. For large test suites, this can speed up your feedback cycle by a lot.\n\nNote that this feature may lead to unexpected failures if you have non-atomic tests that rely on a very specific execution order. You should consider improving such tests, but this option allows you to disable the reordering behaviour.\n\nThis feature is limited to [browser environments](https://qunitjs.com/browser/) by default, as it utilizes the `sessionStorage` API. Set [QUnit.config.storage](storage) to enable this feature in Node.js or in other environments.\n\nThe QUnit reorder feature was inspired by Kent Beck, who designed a similar mechanism in JUnit Max for Eclipse. ^([\\[1\\]](https://topenddevs.com/podcasts/javascript-jabber/episodes/050-jsj-qunit-with-jorn-zaefferer) [\\[2\\]](https://www.youtube.com/watch?v=g9ykvSI0gjg) [\\[3\\]](https://web.archive.org/web/20141018095913/http://junitmax.com/))\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/reorder](https://qunitjs.com/api/config/reorder)"
- name: QUnit.config.requireExpects
  id: config/requireexpects
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.requireExpects\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.7.0](https://github.com/qunitjs/qunit/releases/tag/1.7.0).\n\n## Description\n\nFail tests that don’t specify how many assertions they expect.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `false`   |\n\nEnabling this option will cause tests to fail if they don’t call [`assert.expect()`](../assert/expect).\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/requireExpects](https://qunitjs.com/api/config/requireExpects)"
- name: QUnit.config.scrolltop
  id: config/scrolltop
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.scrolltop\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.14.0](https://github.com/qunitjs/qunit/releases/tag/1.14.0).\n\n## Description\n\nIn browser environments, scroll to the top of the page after the tests are done.\n\n|         |           |\n|---------|-----------|\n| type    | `boolean` |\n| default | `true`    |\n\nBy default, QUnit scrolls the browser to the top of the page when tests are done. This reverses any programmatic scrolling performed by the application or its tests.\n\nSet this option to `false` to disable this behaviour, and thus leave the page in its final scroll position.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/scrolltop](https://qunitjs.com/api/config/scrolltop)"
- name: QUnit.config.seed
  id: config/seed
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.seed\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.23.0](https://github.com/qunitjs/qunit/releases/tag/1.23.0).\n\n## Description\n\nEnable randomized ordering of tests.\n\n|         |                                      |\n|---------|--------------------------------------|\n| type    | `string` or `boolean` or `undefined` |\n| default | `undefined`                          |\n\nThis option is also available as [CLI option](https://qunitjs.com/cli/), and as URL query parameter in the [browser](https://qunitjs.com/browser/).\n\nWhen set to boolean true, or a string, QUnit will run tests in a [seeded-random order](https://en.wikipedia.org/wiki/Random_seed).\n\nThe provided string will be used as the seed in a pseudo-random number generator to ensure that results are reproducible. The randomization will also respect the [reorder](reorder) option if enabled and re-run failed tests first without randomizing them.\n\nRandomly ordering your tests can help identify non-atomic tests which either depend on a previous test or are leaking state to subsequent tests.\n\nIf `seed` is boolean true (or set as URL query parameter without a value), then QUnit will generate on-demand a new random value to use as seed. You can then read the seed at runtime from the configuration value, and use it to reproduce the same test sequence later.\n\n## See also\n\n- [QUnit.config.reorder](reorder)\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/seed](https://qunitjs.com/api/config/seed)"
- name: QUnit.config.storage
  id: config/storage
  summary: 'Categories: QUnit.config, Extension interface'
  description: "# QUnit.config.storage\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [2.1.0](https://github.com/qunitjs/qunit/releases/tag/2.1.0).\n\n## Description\n\nThe Storage object to use for remembering failed tests between runs.\n\n|         |                                            |\n|---------|--------------------------------------------|\n| type    | `object` or `undefined`                    |\n| default | `globalThis.sessionStorage` or `undefined` |\n\nThis is used to power the [reorder feature](reorder). In [browser environments](https://qunitjs.com/browser/) this will use `sessionStorage` if supported by the browser.\n\nIn Node.js and other non-browser environments, there is no storage object available for this purpose by default. You can attach your own preferred form of persistence between test runs, by assigning an object to `QUnit.config.storage` that implements `getItem`, `setItem` and `removeItem` methods, similar to the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API).\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/storage](https://qunitjs.com/api/config/storage)"
- name: QUnit.config.testId
  id: config/testid
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.testId\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.16.0](https://github.com/qunitjs/qunit/releases/tag/1.16.0).\n\n## Description\n\nUsed by the HTML Reporter, select one or more tests to run by their internal ID.\n\n|         |                        |\n|---------|------------------------|\n| type    | `array` or `undefined` |\n| default | `undefined`            |\n\nThis option can be controlled via the [HTML Reporter](https://qunitjs.com/browser/) interface.\n\nThis property allows QUnit to run specific tests by their internally hashed identifier. You can specify one or multiple tests to run. This option powers the “Rerun” button in the HTML Reporter.\n\nSee also:\n\n- [QUnit.config.filter](filter)\n- [QUnit.config.moduleId](moduleid)\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/testId](https://qunitjs.com/api/config/testId)"
- name: QUnit.config.testTimeout
  id: config/testtimeout
  summary: 'Categories: QUnit.config'
  description: "# QUnit.config.testTimeout\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nDefault timeout in milliseconds after which an async test will fail. This helps to detect async tests that are broken, and prevents a test run from hanging indefinitely.\n\n|         |          |\n|---------|----------|\n| type    | `number` |\n| default | `3000`   |\n\nOnly async tests can timeout. An async test is any [QUnit.test](../qunit/test) with an async function as callback, or that returns a Promise, or that calls [assert.async()](../assert/async).\n\nIndividual tests can override the default `testTimeout` config via [assert.timeout()](../assert/timeout) to any lower or higher amount.\n\nIt is recommended to set the default at `3000` or higher (3 seconds). A lower timeout may cause intermittent failures due to unrelated infrastructure delays that are known to sometimes occur inside CI services and other virtual servers.\n\n## Introducing a default timeout\n\nPrior to QUnit 3, there has not been a default timeout. This meant that a test hang silently for many seconds or minutes before diagnostic details are presented (e.g. after a CI job reaches the maximum run time).\n\nQUnit 3.0 will change the default timeout from undefined (Infinity) to 3 seconds.\n\n### Deprecated: No timeout set\n\nStarting in QUnit 2.21, a deprecation warning will be logged if a test takes longer than 3 seconds, when there is no timeout set.\n\n``` javascript\nTest {name} took longer than 3000ms, but no timeout was set.\n```\n\nYou can address this warning before upgrading to QUnit 3 as follows:\n\n- **(Recommended)** Call [assert.timeout()](../assert/timeout) inside the slow test.\n\n  ``` javascript\n  QUnit.test('example', function (assert) {\n    assert.timeout(5000);\n    // …\n  });\n  ```\n\n- Or, set `QUnit.config.testTimeout` once from an [HTML or bootstrap script](https://qunitjs.com/api/config/).\n\n  ``` javascript\n  QUnit.config.testTimeout = 60000; // 1 minute\n  ```\n\n- Or, set `qunit_config_testtimeout` via [preconfig](https://qunitjs.com/api/config/) as environment variables (for Node.js), or as global variables for HTML/browser environments (before QUnit is loaded).\n\n- Or, your test runner of choice may offer other ways to set configuration.\n\n  For example, to set `testTimeout` via [karma-qunit](https://github.com/karma-runner/karma-qunit/#readme):\n\n  ``` javascript\n  config.set({\n    frameworks: ['qunit'],\n    plugins: ['karma-qunit'],\n    client: {\n      qunit: {\n        testTimeout: 5000\n      }\n    }\n  });\n  ```\n\n## Changelog\n\n|                                                                      |                                                                                  |\n|----------------------------------------------------------------------|----------------------------------------------------------------------------------|\n| [QUnit 2.21.0](https://github.com/qunitjs/qunit/releases/tag/2.21.0) | Announce change of default from undefined to `3000`, with a deprecation warning. |\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/testTimeout](https://qunitjs.com/api/config/testTimeout)"
- name: QUnit.config.urlConfig
  id: config/urlconfig
  summary: 'Categories: QUnit.config, Extension interface'
  description: "# QUnit.config.urlConfig\n\nCategories: [QUnit.config](https://qunitjs.com/api/config/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\nIn the HTML Reporter, this array is used to create additional input fields in the toolbar.\n\n|         |         |\n|---------|---------|\n| type    | `array` |\n| default | `[]`    |\n\nThis property controls which form controls display in the QUnit toolbar. By default, the `noglobals` and `notrycatch` checkboxes are registered. By adding to this array, the HTML Reporter will add extra checkboxes and select dropdowns for your custom configuration.\n\nEach array item should be an object shaped as follows:\n\n``` javascript\nQUnit.config.urlConfig.push({\n  id: string,\n  label: string,\n  tooltip: string, // optional\n  value: undefined | string | array | object // optional\n});\n```\n\n- The `id` property is used as URL query parameter name, and corresponding key under [`QUnit.urlParams`](../extension/qunit.urlparams).\n- The `label` property is used as text for the HTML label element in the user interface.\n- The optional `tooltip` property is used as the `title` attribute and should explain what you code will do with this option.\n\nEach item may also have a `value` property:\n\nIf `value` is undefined, the item will render as a checkbox. The corresponding URL parameter will be set to “true” when the checkbox is checked, and otherwise will be absent.\n\nIf `value` is a string, the item will render as a checkbox. The corresponding URL parameter will be set to the value when the checkbox is checked, and otherwise will be absent.\n\nIf `value` is an array, the item will render as a “select one” dropdown menu with an empty value as first default option, followed by one option for each item in the array. The corresponding URL parameter will be absent when the empty option is selected, and otherwise will be set to the value of the selected array item.\n\nIf `value` is an object, the item will render as a dropdown menu. The URL parameter will be set to the key of the selected property, and this will also be available via [`QUnit.urlParams[id]`](../extension/qunit.urlparams). The object values will be used as display label for each option in the dropdown menu. The corresponding URL parameter will be absent when the empty option is selected.\n\n## Examples\n\n### Add toolbar checkbox\n\nAdd a new checkbox to the toolbar. You can then use the `QUnit.urlParams.min` property in your code to implement a behaviour based on it.\n\n``` javascript\nQUnit.config.urlConfig.push({\n  id: 'min',\n  label: 'Minified source',\n  tooltip: 'Load minified source files instead of the regular unminified ones.'\n});\n```\n\n### Add dropdown menu\n\nAdd a dropdown to the toolbar.\n\n``` javascript\nQUnit.config.urlConfig.push({\n  id: 'jquery',\n  label: 'jQuery',\n  value: [ '1.7.2', '1.8.3', '1.9.1' ],\n  tooltip: 'Which version of jQuery to test against.'\n});\n```\n\n``` javascript\nQUnit.config.urlConfig.push({\n  id: 'jquery',\n  label: 'jQuery',\n  value: { '1.7.2': 'v1.7.2 (LTS)', '1.8.3': 'v1.8.3 (Current)' },\n  tooltip: 'Which version of jQuery to test against.'\n});\n\nif (QUnit.urlConfig.jquery) {\n  // Load jQuery\n}\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/config/urlConfig](https://qunitjs.com/api/config/urlConfig)"
- name: QUnit.done()
  id: callbacks/qunit.done
  summary: 'Categories: Callback events'
  description: "# QUnit.done()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.done( callback )`\n\nRegister a callback to fire when the test run has ended. The callback may be an async function, or a function that return a Promise which will be waited for before the next callback is handled.\n\n| parameter             | description                                          |\n|-----------------------|------------------------------------------------------|\n| `callback` (function) | Callback to execute, called with a `details` object: |\n\n### Details object\n\n| property           | description                              |\n|--------------------|------------------------------------------|\n| `failed` (number)  | Number of failed assertions              |\n| `passed` (number)  | Number of passed assertions              |\n| `total` (number)   | Total number of assertions               |\n| `runtime` (number) | Duration of the test run in milliseconds |\n\nUse of `details` is **discouraged** and it’s recommended to use [`QUnit.on('runEnd')`](qunit.on#the-runend-event) instead.\n\nCaveats:\n\n- This callback reports the **internal assertion count**.\n\n- The default browser and CLI interfaces for QUnit and other popular test frameworks, and most CI integrations, report the number of tests. Reporting the number *assertions* may be confusing to developers.\n\n- Failed assertions of a [`test.todo()`](../qunit/test.todo) test are reported exactly as such. While rare, this means that a test run and all tests within it may be reported as passing, while internally there were some failed assertions. Unfortunately, this internal detail is exposed for compatibility reasons.\n\n## Changelog\n\n|                                                                  |                                                                   |\n|------------------------------------------------------------------|-------------------------------------------------------------------|\n| [QUnit 2.2](https://github.com/qunitjs/qunit/releases/tag/2.2.0) | Discourage `details` parameter in favour of `QUnit.on('runEnd')`. |\n\n## Examples\n\nRegister a callback that logs internal assertion counts.\n\n``` javascript\nQUnit.done(function (details) {\n  console.log('Runtime: ' + details.runtime);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.done](https://qunitjs.com/api/callbacks/QUnit.done)"
- name: QUnit.dump.parse()
  id: extension/qunit.dump.parse
  summary: 'Categories: Extension interface'
  description: "# QUnit.dump.parse()\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.dump.parse( data )`\n\nExtensible data dumping and string serialization.\n\n| name   | description                        |\n|--------|------------------------------------|\n| `data` | Data structure or object to parse. |\n\nThis method does string serialization by parsing data structures and objects. It parses DOM elements to a string representation of their outer HTML. By default, nested structures will be displayed up to five levels deep. Anything beyond that is replaced by `[object Object]` and `[object Array]` placeholders.\n\nIf you need more or less output, change the value of [`QUnit.config.maxDepth`](../config/maxdepth), representing how deep the elements should be parsed.\n\n## Changelog\n\n|                                                                    |                                                                                                   |\n|--------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|\n| [QUnit 2.1](https://github.com/qunitjs/qunit/releases/tag/2.1.0)   | The `QUnit.jsDump` alias was removed.                                                             |\n| [QUnit 1.15](https://github.com/qunitjs/qunit/releases/tag/1.15.0) | The `QUnit.jsDump` interface was renamed to `QUnit.dump`. The `QUnit.jsDump` alias is deprecated. |\n\n## Examples\n\nThe following is an example from [grunt-contrib-qunit](https://github.com/gruntjs/grunt-contrib-qunit/blob/v10.0.0/chrome/bridge.js#L111-L124), which sends results from QUnit (running in Headless Chrome) to a CLI tool.\n\n``` javascript\nQUnit.log(function (obj) {\n  var actual;\n  var expected;\n\n  if (!obj.result) {\n    // Format before sending\n    actual = QUnit.dump.parse(obj.actual);\n    expected = QUnit.dump.parse(obj.expected);\n  }\n\n  // ...\n});\n```\n\n------------------------------------------------------------------------\n\nThis example shows the formatted representation of a DOM element.\n\n``` javascript\nvar qHeader = document.getElementById('qunit-header');\nvar parsed = QUnit.dump.parse(qHeader);\n\nconsole.log(parsed);\n\n// Logs: '<h1 id=\"qunit-header\"></h1>'\n```\n\n------------------------------------------------------------------------\n\nLimit output to one or two levels\n\n``` javascript\nvar input = {\n  parts: {\n    front: [],\n    back: []\n  }\n};\nQUnit.config.maxDepth = 1;\nconsole.log(QUnit.dump.parse(input));\n// Logs: { \"parts\": [object Object] }\n\nQUnit.config.maxDepth = 2;\nconsole.log(QUnit.dump.parse(input));\n// Logs: { \"parts\": { \"back\": [object Array], \"front\": [object Array] } }\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.dump.parse](https://qunitjs.com/api/extension/QUnit.dump.parse)"
- name: QUnit.dump.setParser()
  id: extension/qunit.dump.setparser
  summary: 'Categories: Extension interface'
  description: "# QUnit.dump.setParser()\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.dump.setParser( name, parser )`\n\nOverride string serialization in [`QUnit.dump.parse()`](qunit.dump.parse) for a given data type.\n\n| name                | description              |\n|---------------------|--------------------------|\n| `name` (string)     | Value type               |\n| `parser` (function) | Value formatter callback |\n\nValue type is one of the following:\n\n- `array`\n- `bigint` (ES2020, determined by native `typeof`)\n- `boolean`\n- `date`\n- `document`\n- `error`\n- `function`\n- `node`\n- `null`\n- `number`\n- `object`\n- `regexp`\n- `string`\n- `symbol` (ES2019, determined by native `typeof`)\n- `undefined`\n- `window`\n\nIf your callback allows recursion into arbitrary child value structures, you may call [`QUnit.dump.parse()`](qunit.dump.parse) recursively. Recursive callers must pass on the stack, and call `QUnit.dump.up()` to increase depth tracking beforehand, and `QUnit.dump.down()` to decrease it afterward.\n\nIf your value type may contain any number of children (such as an object or array, something not limited to being formatted on a short single line), check the depth against [`QUnit.config.maxDepth`](../config/maxdepth), and return a type-specific placeholder value if the depth limit was exceeded.\n\nYou may use `QUnit.dump.join()` to aid in automatic formatting of indentation based on the current depth. Refer to examples below.\n\n## Changelog\n\n|                                                                    |                                                                                                   |\n|--------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|\n| [QUnit 2.1](https://github.com/qunitjs/qunit/releases/tag/2.1.0)   | The `QUnit.jsDump` alias was removed.                                                             |\n| [QUnit 1.15](https://github.com/qunitjs/qunit/releases/tag/1.15.0) | The `QUnit.jsDump` interface was renamed to `QUnit.dump`. The `QUnit.jsDump` alias is deprecated. |\n\n## Examples\n\n### Value formatter\n\n``` javascript\nQUnit.dump.setParser('document', function (doc) {\n  return '[Document ' + doc.location.href + ']';\n});\n```\n\n``` javascript\nvar example = { foo: document.createElement('div') };\n\nvar dumped1 = QUnit.dump.parse(example);\nconsole.log(dumped1);\n// # Default\n// {\n//   \"foo\": <div></div>\n// }\n\nQUnit.dump.setParser('node', function (obj) {\n  return '[Node ' + obj.nodeName.toLowerCase() + ']';\n});\n\nvar dumped2 = QUnit.dump.parse(example);\nconsole.log(dumped2);\n// # Custom\n// {\n//   \"foo\": [Node div]\n// }\n```\n\n### Deep formatter\n\n``` javascript\nQUnit.dump.setParser('array', function (arr, stack) {\n  if (QUnit.config.maxDepth && QUnit.dump.depth > QUnit.config.maxDepth) {\n    return '[object Array]';\n  }\n\n  QUnit.dump.up();\n\n  let i = arr.length;\n  const ret = new Array(i);\n  while (i--) {\n    ret[i] = QUnit.dump.parse(arr[i], undefined, stack);\n  }\n\n  QUnit.dump.down();\n\n  return QUnit.dump.join('[', ret, ']');\n  // Output:\n  // 1. 'pre' text.\n  // 2. for each value:\n  //    - line break and inner indentation\n  //    - value as-is\n  //    - comma (if not last)\n  // 3. line break and outer indentation (if any)\n  // 4. 'post' text\n  //\n  // [\n  //   \"foo\",\n  //   \"bar\"\n  // ]\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.dump.setParser](https://qunitjs.com/api/extension/QUnit.dump.setParser)"
- name: QUnit.extend()
  id: extension/qunit.extend
  summary: 'Categories: Extension interface, Deprecated methods, Removed methods'
  description: "# QUnit.extend()\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/), [Deprecated methods](https://qunitjs.com/api/deprecated/), [Removed methods](https://qunitjs.com/api/removed/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0). deprecated: [2.12.0](https://github.com/qunitjs/qunit/releases/tag/2.12.0). removed: unreleased.\n\n## Description\n\n`QUnit.extend( target, mixin )`\n\nCopy the properties defined by a mixin object into a target object.\n\nThis method is **deprecated** and it’s recommended to use [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) instead.\n\n| name     | description                                              |\n|----------|----------------------------------------------------------|\n| `target` | An object whose properties are to be modified            |\n| `mixin`  | An object describing which properties should be modified |\n\nThis method will modify the `target` object to contain the “own” properties defined by the `mixin`. If the `mixin` object specifies the value of any attribute as `undefined`, this property will instead be removed from the `target` object.\n\n## Changelog\n\n|                                                                      |                                            |\n|----------------------------------------------------------------------|--------------------------------------------|\n| UNRELEASED                                                           | Removed.                                   |\n| [QUnit 2.12.0](https://github.com/qunitjs/qunit/releases/tag/2.12.0) | Deprecated. Use `Object.assign()` instead. |\n\n## Examples\n\nUse `QUnit.extend` to merge two objects.\n\n``` javascript\nQUnit.test('QUnit.extend', assert => {\n  const base = {\n    a: 1,\n    b: 2,\n    z: 3\n  };\n  QUnit.extend(base, {\n    b: 2.5,\n    c: 3,\n    z: undefined\n  });\n\n  assert.strictEqual(base.a, 1, 'Unspecified values are not modified');\n  assert.strictEqual(base.b, 2.5, 'Existing values are updated');\n  assert.strictEqual(base.c, 3, 'New values are defined');\n  assert.false('z' in base, 'Values specified as `undefined` are removed');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.extend](https://qunitjs.com/api/extension/QUnit.extend)"
- name: QUnit.hooks
  id: qunit/hooks
  summary: 'Categories: Extension interface'
  description: "# QUnit.hooks\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [2.18.0](https://github.com/qunitjs/qunit/releases/tag/2.18.0).\n\n## Description\n\n`QUnit.hooks.beforeEach( callback )`  \n`QUnit.hooks.afterEach( callback )`\n\nRegister a global callback to run before or after each test.\n\n| parameter           | description                                                                             |\n|---------------------|-----------------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Called with an [assert](https://qunitjs.com/api/assert/) argument. |\n\nThis is the equivalent of applying a `QUnit.module()` hook to all modules and all tests, including global tests that are not associated with any module.\n\nSimilar to module hooks, global hooks support async functions or returning a Promise, which will be waited for before QUnit continues executing tests. Each global hook also has access to the same `assert` object and test context as the [QUnit.test](test) that the hook is running for.\n\nFor more details about hooks, refer to [QUnit.module § Hooks](module#hooks).\n\n## Examples\n\n``` javascript\nQUnit.hooks.beforeEach(function () {\n  this.app = new MyApp();\n});\n\nQUnit.hooks.afterEach(async function (assert) {\n  assert.deepEqual([], await this.app.getErrors(), 'MyApp errors');\n\n  MyApp.reset();\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/hooks](https://qunitjs.com/api/QUnit/hooks)"
- name: QUnit.load()
  id: qunit/load
  summary: 'Categories: Deprecated methods, Removed methods'
  description: "# QUnit.load()\n\nCategories: [Deprecated methods](https://qunitjs.com/api/deprecated/), [Removed methods](https://qunitjs.com/api/removed/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0). deprecated: [2.21.0](https://github.com/qunitjs/qunit/releases/tag/2.21.0). removed: unreleased.\n\n## Description\n\n`QUnit.load()`\n\nInform the test runner that your source code and tests have finished loading.\n\nThis method was used in conjunction with the [`QUnit.config.autostart`](../config/autostart) option in a web browser, to indicate when your custom way of loading scripts is complete.\n\nAs of [QUnit 2.1.1](https://github.com/qunitjs/qunit/releases/tag/2.1.1), calls to `QUnit.load()` are no longer needed. Existing calls are usually ignored and safe to remove.\n\nThis method is **deprecated**. Remove call, or replace by a single call to [`QUnit.start()`](start).\n\n## Changelog\n\n|                                                                      |                                                                  |\n|----------------------------------------------------------------------|------------------------------------------------------------------|\n| UNRELEASED                                                           | Removed.                                                         |\n| [QUnit 2.21.0](https://github.com/qunitjs/qunit/releases/tag/2.21.0) | Deprecated. Use [`QUnit.start()`](start) instead.                |\n| [QUnit 2.1.1](https://github.com/qunitjs/qunit/releases/tag/2.1.1)   | `QUnit.start()` no longer requires calling `QUnit.load()` first. |\n\n## Migration guide\n\nIf you still call `QUnit.load()` with QUnit 2.2 or later, the call is usually redundant and safe to remove.\n\n### If you call both `QUnit.load()` and `QUnit.start()`\n\nIf your project started with QUnit 1.x, and you use `QUnit.config.autostart = false`, then you might be calling both of these methods. In the QUnit 1.x era, [`QUnit.start()`](start) required that you also call `QUnit.load()` first.\n\nThis is no longer needed since [QUnit 2.1.1](https://github.com/qunitjs/qunit/releases/tag/2.1.1), and the call to `QUnit.load()` is safe to remove.\n\n### If you call `QUnit.load()`\n\nPrior to QUnit 2.21, the built-in HTML Reporter called `QUnit.load()` from the window.onload event, which in turn gracefully calls `QUnit.start()` if it has not been called already.\n\nIf your test runner works in a similar way, call [`QUnit.start()`](start) instead of `QUnit.load()`. This will solve the deprecation warning and prepares you for QUnit 3.\n\n### Karma runner\n\n``` javascript\nQUnit.load is deprecated and will be removed in QUnit 3.0.\n```\n\nIf you encounter this warning in Karma output, upgrade to [karma-qunit](https://github.com/karma-runner/karma-qunit) 4.2.0 or later, which [fixes](https://github.com/karma-runner/karma-qunit/pull/184) this warning.\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/load](https://qunitjs.com/api/QUnit/load)"
- name: QUnit.log()
  id: callbacks/qunit.log
  summary: 'Categories: Callback events'
  description: "# QUnit.log()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.log( callback )`\n\nRegister a callback to fire whenever an assertion completes.\n\n**NOTE: The QUnit.log() callback does not handle promises and MUST be synchronous.**\n\n| parameter           | description                                                                      |\n|---------------------|----------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Provides a single argument with the callback Details object |\n\n### Details object\n\nPassed to the callback:\n\n| property           | description                                                                                                                                                                |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `result` (boolean) | The boolean result of an assertion, `true` means passed, `false` means failed.                                                                                             |\n| `actual`           | One side of a comparison assertion. Can be *undefined* when `ok()` is used.                                                                                                |\n| `expected`         | One side of a comparison assertion. Can be *undefined* when `ok()` is used.                                                                                                |\n| `message` (string) | A string description provided by the assertion.                                                                                                                            |\n| `source` (string)  | The associated stacktrace, either from an exception or pointing to the source of the assertion. Depends on browser support for providing stacktraces, so can be undefined. |\n| `module` (string)  | The test module name of the assertion. If the assertion is not connected to any module, the property’s value will be *undefined*.                                          |\n| `name` (string)    | The test block name of the assertion.                                                                                                                                      |\n| `runtime` (number) | The time elapsed in milliseconds since the start of the containing [`QUnit.test()`](../qunit/test), including setup.                                                       |\n| `todo` (boolean)   | Indicates whether or not this assertion was part of a todo test.                                                                                                           |\n\n## Examples\n\nRegister a callback that logs the assertion result and its message:\n\n``` javascript\nQUnit.log(details => {\n  console.log(`Log: ${details.result}, ${details.message}`);\n});\n```\n\n------------------------------------------------------------------------\n\nLog the module name and test result whenever an assertion fails:\n\n``` javascript\nQUnit.log(details => {\n  if (details.result) {\n    return;\n  }\n\n  let output = `[FAILED] ${details.module} > ${details.name}`;\n\n  if (details.message) {\n    output += `: ${details.message}`;\n  }\n  if (details.actual) {\n    output += `\\nexpected: ${details.expected}\\nactual: ${details.actual}`;\n  }\n  if (details.source) {\n    output += `\\n${details.source}`;\n  }\n\n  console.log(output);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.log](https://qunitjs.com/api/callbacks/QUnit.log)"
- name: QUnit.module()
  id: qunit/module
  summary: 'Categories: Main methods'
  description: "# QUnit.module()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.module( name )`  \n`QUnit.module( name, scope )`  \n`QUnit.module( name, options )`  \n`QUnit.module( name, options, scope )`\n\nGroup related tests under a common label.\n\n| parameter                             | description                                      |\n|---------------------------------------|--------------------------------------------------|\n| `name` (string)                       | Label for this group of tests.                   |\n| [`options`](#options-object) (object) | Set hook callbacks.                              |\n| [`scope`](#module-scope) (function)   | A scope for tests, nested modules, and/or hooks. |\n\nAll tests inside a module will be grouped under that module. Tests can be added to a module using the [QUnit.test](test) method. Modules help organize, select, and filter tests to run.\n\nModules can be nested inside other modules via a [module scope](#module-scope). In the output, tests are generally prefixed by the names of all parent modules. E.g. “Grandparent \\> Parent \\> Child \\> my test”.\n\n`QUnit.module.only( name, … )`  \n`QUnit.module.todo( name, … )`  \n`QUnit.module.skip( name, … )`  \n`QUnit.module.if( name, condition, … )`\n\nThese methods are aliases for `QUnit.module()` that apply the behaviour of [`QUnit.test.only()`](test.only), [`QUnit.test.todo()`](test.todo), [`QUnit.test.skip()`](test.skip) or [`QUnit.test.if()`](test.if) to all a module’s tests at once.\n\n### Organizing your tests\n\nBy default, if `QUnit.module` is called without a `scope` callback, all subsequently defined tests are automatically grouped into that module, until the next module is defined.\n\n``` javascript\nQUnit.module('Group A');\n\nQUnit.test('foo', function (assert) {\n  assert.true(true);\n});\nQUnit.test('bar', function (assert) {\n  assert.true(true);\n});\n\nQUnit.module('Group B');\n\nQUnit.test('baz', function (assert) {\n  assert.true(true);\n});\nQUnit.test('quux', function (assert) {\n  assert.true(true);\n});\n```\n\n### Module scope\n\nThe module scope can be used to group tests under a common label. These can be nested to create child modules under a common parent module.\n\nThe module scope is given a `hooks` object which can be used to add [hooks](#hooks).\n\n| parameter        | description                 |\n|------------------|-----------------------------|\n| `hooks` (object) | An object for adding hooks. |\n\nExample:\n\n``` javascript\nQUnit.module('Fruit', function (hooks) {\n  QUnit.module('Berries', function (hooks) {\n    QUnit.test('cranberry', function (assert) {\n      assert.true(true);\n    });\n\n    // ...\n  });\n\n  QUnit.module('Melons', function (hooks) {\n    QUnit.test('galia', function (assert) {\n      assert.true(true);\n    });\n\n    // ...\n  });\n});\n\nQUnit.module('Bread', function (hooks) {\n  QUnit.test('bake', function (assert) {\n    assert.true(true);\n  });\n\n  QUnit.test('toast', function (assert) {\n    assert.true(true);\n  });\n});\n```\n\n### Hooks\n\nYou can use hooks to prepare fixtures, or run other setup and teardown logic. Hooks can run around individual tests, or around a whole module.\n\n- `before`: Run a callback before the first test.\n- `beforeEach`: Run a callback before each test.\n- `afterEach`: Run a callback after each test.\n- `after`: Run a callback after the last test.\n\nYou can add hooks via the `hooks` parameter to any [module scope](#module-scope) callback, or by setting a key in the [module `options`](#options-object). You can also create global hooks across all tests, via [QUnit.hooks](hooks).\n\nHooks that are added to a module, will also apply to tests in any nested modules.\n\n#### Hook order\n\n*See also [§ Example: Hooks on nested modules](#hooks-on-nested-modules).*\n\nHooks that run *before* a test, are ordered from outer-most to inner-most, in the order that they are added. This means that a test will first run any global beforeEach hooks, then the hooks of parent modules, and finally the hooks added to the current module that the test is part of.\n\nHooks that run *after* a test, are ordered from inner-most to outer-most, in the reverse order. In other words, `before` and `beforeEach` callbacks are processed in a [queue](https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29), while `afterEach` and `after` form a [stack](https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29).\n\n#### Hook callback\n\nA hook callback may be an async function, and may return a Promise or any other then-able. QUnit will automatically wait for your hook’s asynchronous work to finish before continuing to execute the tests. [§ Example: Async hook callback](#async-hook-callback).\n\nEach hook has access to the same `assert` object, and test context via `this`, as the [QUnit.test](test) that the hook is running for. [§ Example: Using the test context](#using-the-test-context).\n\n| parameter         | description                                          |\n|-------------------|------------------------------------------------------|\n| `assert` (object) | An [Assert](https://qunitjs.com/api/assert/) object. |\n\nIt is discouraged to dynamically create a [QUnit.test](test) from inside a hook. In order to satisfy the requirement for the `after` hook to only run once and to be the last hook in a module, QUnit may associate dynamically defined tests with the parent module instead, or as global test. It is recommended to define any dynamic tests via [`QUnit.begin()`](../callbacks/qunit.begin) instead.\n\n### Options object\n\nYou can use the options object to add [hooks](#hooks).\n\n| name                    | description                 |\n|-------------------------|-----------------------------|\n| `before` (function)     | Runs before the first test. |\n| `beforeEach` (function) | Runs before each test.      |\n| `afterEach` (function)  | Runs after each test.       |\n| `after` (function)      | Runs after the last test.   |\n\nProperties on the module options object are copied over to the test context object at the start of each test. Such properties can also be changed from the hook callbacks. See [§ Using the test context](#using-the-test-context).\n\nExample: [§ Hooks via module options](#hooks-via-module-options).\n\n## Changelog\n\n|                                                                    |                                                                                                                                        |\n|--------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|\n| UNRELEASED                                                         | Added `QUnit.module.if()` alias.                                                                                                       |\n| [QUnit 2.4](https://github.com/qunitjs/qunit/releases/tag/2.4.0)   | Added `QUnit.module.only()`, `QUnit.module.skip()`, and `QUnit.module.todo()` aliases.                                                 |\n| [QUnit 2.0](https://github.com/qunitjs/qunit/releases/tag/2.0.0)   | Added `before` and `after` options.                                                                                                    |\n| [QUnit 1.20](https://github.com/qunitjs/qunit/releases/tag/1.20.0) | Introduce `scope` feature.                                                                                                             |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Added `beforeEach` and `afterEach` options. The `setup` and `teardown` options were deprecated in QUnit 1.16 and removed in QUnit 2.0. |\n\n## Examples\n\n### Async hook callback\n\n``` javascript\nQUnit.module('Database connection', function (hooks) {\n  hooks.before(async function () {\n    await MyDb.connect();\n  });\n\n  hooks.after(async function () {\n    await MyDb.disconnect();\n  });\n});\n```\n\nModule hook with Promise:\n\nAn example of handling an asynchronous `then`able Promise result in hooks. This example uses an [ES6 Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) interface that is fulfilled after connecting to or disconnecting from database.\n\n``` javascript\nQUnit.module('Database connection', {\n  before: function () {\n    return new Promise(function (resolve, reject) {\n      MyDb.connect(function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n  after: function () {\n    return new Promise(function (resolve, reject) {\n      MyDb.disconnect(function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n});\n```\n\n### Hooks on nested modules\n\n*Back to [§ Hook order](#hook-order).*\n\n``` javascript\nQUnit.module('My Group', hooks => {\n  // You may call hooks.beforeEach() multiple times to create multiple hooks.\n  hooks.beforeEach(assert => {\n    assert.ok(true, 'beforeEach called');\n  });\n\n  hooks.afterEach(assert => {\n    assert.ok(true, 'afterEach called');\n  });\n\n  QUnit.test('with hooks', assert => {\n    // 1 x beforeEach\n    // 1 x afterEach\n    assert.expect(2);\n  });\n\n  QUnit.module('Nested Child', hooks => {\n    // This will run after the parent module's beforeEach hook\n    hooks.beforeEach(assert => {\n      assert.ok(true, 'nested beforeEach called');\n    });\n\n    // This will run before the parent module's afterEach hook\n    hooks.afterEach(assert => {\n      assert.ok(true, 'nested afterEach called');\n    });\n\n    QUnit.test('with nested hooks', assert => {\n      // 2 x beforeEach (parent, child)\n      // 2 x afterEach (child, parent)\n      assert.expect(4);\n    });\n  });\n});\n```\n\n### Hooks via module options\n\n``` javascript\nQUnit.module('module A', {\n  before: function () {\n    // prepare something once for all tests\n  },\n  beforeEach: function () {\n    // prepare something before each test\n  },\n  afterEach: function () {\n    // clean up after each test\n  },\n  after: function () {\n    // clean up once after all tests are done\n  }\n});\n```\n\n### Using the test context\n\nThe test context object is also exposed to hook callbacks. Each test starts with a copy of the context object at the module level.\n\n``` javascript\nQUnit.module('Maker', function (hooks) {\n  hooks.beforeEach(function () {\n    this.parts = ['A', 'B'];\n  });\n\n  QUnit.test('make alphabet', function (assert) {\n    this.parts.push('C');\n    assert.equal(this.parts.join(''), 'ABC');\n  });\n\n  QUnit.test('make music', function (assert) {\n    this.parts.push('B', 'A');\n    assert.equal(this.parts.join(''), 'ABBA');\n  });\n});\n```\n\nBeware that use of the `this` binding is not available in arrow functions. It might be more convenient to use JavaScript’s own lexical scope instead:\n\n``` javascript\nQUnit.module('Machine Maker', hooks => {\n  let maker;\n  let parts;\n  hooks.beforeEach(() => {\n    maker = new Maker();\n    parts = ['wheels', 'motor', 'chassis'];\n  });\n\n  QUnit.test('makes a robot', assert => {\n    parts.push('arduino');\n    assert.equal(maker.build(parts), 'robot');\n    assert.deepEqual(maker.log, ['robot']);\n  });\n\n  QUnit.test('makes a car', assert => {\n    assert.equal(maker.build(parts), 'car');\n    maker.duplicate();\n    assert.deepEqual(maker.log, ['car', 'car']);\n  });\n});\n```\n\n### Only run a subset of tests\n\nUse `QUnit.module.only()` to treat an entire module’s tests as if they used [`QUnit.test.only`](test.only) instead of [`QUnit.test`](test).\n\n``` javascript\nQUnit.module('Robot', hooks => {\n  // ...\n});\n\n// When developing the feature, only run these tests,\n// and skip tests from other modules.\nQUnit.module.only('Android', hooks => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Android();\n  });\n\n  QUnit.test('hello', assert => {\n    assert.strictEqual(android.hello(), 'Hello, my name is AN-2178!');\n  });\n});\n```\n\nUse `QUnit.module.skip()` to treat an entire module’s tests as if they used [`QUnit.test.skip`](test.skip) instead of [`QUnit.test`](test).\n\n``` javascript\nQUnit.module('Robot', hooks => {\n  // ...\n});\n\n// Skip this module's tests.\n// For example if the android tests are failing due to unsolved problems.\nQUnit.module.skip('Android', hooks => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Android();\n  });\n\n  QUnit.test('hello', assert => {\n    assert.strictEqual(android.hello(), 'Hello, my name is AN-2178!');\n  });\n});\n```\n\nUse `QUnit.module.todo()` to denote a feature that is still under development, and is known to not yet be passing all its tests. This treats an entire module’s tests as if they used [`QUnit.test.todo`](test.todo) instead of [`QUnit.test`](test).\n\n``` javascript\nQUnit.module.todo('Android', hooks => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Android();\n  });\n\n  QUnit.test('hello', assert => {\n    assert.strictEqual(android.hello(), 'Hello');\n    // TODO: hello\n    // Actual: Goodbye\n    // Expected: Hello\n  });\n});\n```\n\n### Error: Cannot add hook outside the containing module\n\nIf you encounter this error, it means you have called `hooks.beforeEach()` or `hooks.afterEach()` on the “hooks” parameter of a module outside the current module scope. Detection of this issue was [introduced](https://github.com/qunitjs/qunit/issues/1576) in QUnit 3.0.\n\n``` javascript\nError: Cannot add beforeEach hook outside the containing module.\n```\n\n``` javascript\nError: Cannot add afterEach hook outside the containing module.\nCalled on \"X\", instead of expected \"Y\".\n```\n\nThis can happen if you use a module scope and forget to specify the `hooks` parameter on the inner scope:\n\n``` javascript\nQUnit.module('MyGroup', (hooks) => {\n  QUnit.module('Child', () => {\n    //                  ^ Oops, forgot \"hooks\" here!\n\n    hooks.beforeEach(() => {\n      // ...\n    });\n\n    QUnit.test('example');\n  });\n});\n```\n\nAnother way that this might happen is if you have named them differently, or perhaps mispelled one, and are referring to the outer parameter from the inner module. Is is recommended to name hooks parameters the same, as this will naturally refer to the correct and closest one always, thus avoiding any mistake.\n\n``` javascript\nQUnit.module('MyGroup', (hooksOuter) => {\n  QUnit.module('Child', (hooksInner) => {\n    hooksOuter.beforeEach(() => {\n      // ^ Oops, used \"hooksOuter\" instead of \"hooksInner\"!\n    });\n\n    QUnit.test('example');\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/module](https://qunitjs.com/api/QUnit/module)"
- name: QUnit.moduleDone()
  id: callbacks/qunit.moduledone
  summary: 'Categories: Callback events'
  description: "# QUnit.moduleDone()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.moduleDone( callback )`\n\nRegister a callback to fire whenever a module ends. The callback may be an async function, or a function that return a promise which will be waited for before the next callback is handled.\n\n| parameter           | description                                                                      |\n|---------------------|----------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Provides a single argument with the callback Details object |\n\n### Details object\n\nPassed to the callback:\n\n| property           | description                                       |\n|--------------------|---------------------------------------------------|\n| `name` (string)    | Name of this module                               |\n| `failed` (number)  | The number of failed assertions                   |\n| `passed` (number)  | The number of passed assertions                   |\n| `total` (number)   | The total number of assertions                    |\n| `runtime` (number) | The execution time in milliseconds of this module |\n\n## Examples\n\nRegister a callback that logs the module results\n\n``` javascript\nQUnit.moduleDone(details => {\n  console.log(`Finished running: ${details.name} Failed/total: ${details.failed}/${details.total}`);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.moduleDone](https://qunitjs.com/api/callbacks/QUnit.moduleDone)"
- name: QUnit.moduleStart()
  id: callbacks/qunit.modulestart
  summary: 'Categories: Callback events'
  description: "# QUnit.moduleStart()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.moduleStart( callback )`\n\nRegister a callback to fire whenever a module begins. The callback can return a promise that will be waited for before the next callback is handled.\n\n| parameter           | description                                                                      |\n|---------------------|----------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Provides a single argument with the callback Details object |\n\n### Details object\n\nPassed to the callback:\n\n| property        | description                    |\n|-----------------|--------------------------------|\n| `name` (string) | Name of the next module to run |\n\n## Examples\n\nRegister a callback that logs the module name\n\n``` javascript\nQUnit.moduleStart(details => {\n  console.log(`Now running: ${details.name}`);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.moduleStart](https://qunitjs.com/api/callbacks/QUnit.moduleStart)"
- name: QUnit.on()
  id: callbacks/qunit.on
  summary: 'Categories: Callback events, Extension interface'
  description: "# QUnit.on()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/), [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [2.2.0](https://github.com/qunitjs/qunit/releases/tag/2.2.0).\n\n## Description\n\n`QUnit.on( eventName, callback )`\n\nRegister a callback that will be invoked after the specified event is emitted.\n\nThis API is the primary interface for QUnit plugins, continuous integration support, and other reporters. It is based on the [js-reporters CRI standard](https://github.com/js-reporters/js-reporters/blob/v2.1.0/spec/cri-draft.adoc).\n\n| type       | parameter   | description          |\n|------------|-------------|----------------------|\n| `string`   | `eventName` | Name of an event.    |\n| `Function` | `callback`  | A callback function. |\n\n## The `runStart` event\n\nThe `runStart` event indicates the beginning of a test run. It is emitted exactly once, and before any other events.\n\n|          |                    |                                   |\n|----------|--------------------|-----------------------------------|\n| `Object` | `testCounts`       | Aggregate counts about tests.     |\n| `number` | `testCounts.total` | Total number of registered tests. |\n\n``` javascript\nQUnit.on('runStart', runStart => {\n  console.log(`Test plan: ${runStart.testCounts.total}`);\n});\n```\n\n## The `suiteStart` event\n\nThe `suiteStart` event indicates the beginning of a module. It is eventually be followed by a corresponding `suiteEnd` event.\n\n|                 |            |                                                                                                                          |\n|-----------------|------------|--------------------------------------------------------------------------------------------------------------------------|\n| `string`        | `name`     | Name of the module.                                                                                                      |\n| `Array<string>` | `fullName` | List of one or more strings, containing (in order) the names of any ancestor modules and the name of the current module. |\n\n``` javascript\nQUnit.on('suiteStart', suiteStart => {\n  console.log('suiteStart', suiteStart);\n  // name: 'my module'\n  // fullName: ['grandparent', 'parent', 'my module']\n});\n```\n\n## The `suiteEnd` event\n\nThe `suiteEnd` event indicates the end of a module. It is emitted after its corresponding `suiteStart` event.\n\n|                 |            |                                                                                                                                                                                                            |\n|-----------------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `string`        | `name`     | Name of the module.                                                                                                                                                                                        |\n| `Array<string>` | `fullName` | List of one or more strings, containing (in order) the names of any ancestor modules and the name of the current module.                                                                                   |\n| `string`        | `status`   | Aggregate result of tests in this module, one of: `failed`: at least one test has failed; `passed`: there were no failing tests, which means there were only tests with a passed, skipped, or todo status. |\n| `number`        | `runtime`  | Duration of the module in milliseconds.                                                                                                                                                                    |\n\n``` javascript\nQUnit.on('suiteEnd', suiteEnd => {\n  console.log(suiteEnd);\n  // …\n});\n```\n\n## The `testStart` event\n\nThe `testStart` event indicates the beginning of a test. It is eventually followed by a corresponding `testEnd` event.\n\n|                 |              |                                                                                       |\n|-----------------|--------------|---------------------------------------------------------------------------------------|\n| `string`        | `name`       | Name of the test.                                                                     |\n| `string|null`   | `moduleName` | The module the test belongs to, or null for a global test.                            |\n| `Array<string>` | `fullName`   | List (in order) of the names of any ancestor modules and the name of the test itself. |\n\n``` javascript\nQUnit.on('testStart', testStart => {\n  console.log(testStart);\n  // name: 'my test'\n  // moduleName: 'my module'\n  // fullName: ['parent', 'my module', 'my test']\n\n  // name: 'global test'\n  // moduleName: null\n  // fullName: ['global test']\n});\n```\n\n## The `testEnd` event\n\nThe `testEnd` event indicates the end of a test. It is emitted after its corresponding `testStart` event.\n\nProperties of a testEnd object:\n\n|                          |              |                                                                                                                                                                                                                                                                                                                                                                                                         |\n|--------------------------|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `string`                 | `name`       | Name of the test.                                                                                                                                                                                                                                                                                                                                                                                       |\n| `string|null`            | `moduleName` | The module the test belongs to, or null for a global test.                                                                                                                                                                                                                                                                                                                                              |\n| `Array<string>`          | `fullName`   | List (in order) of the names of any ancestor modules and the name of the test itself.                                                                                                                                                                                                                                                                                                                   |\n| `string`                 | `status`     | Result of the test, one of: `passed`: all assertions passed or no assertions found; `failed`: at least one assertion failed or it is a [todo test](../qunit/test.todo) that no longer has any failing assertions; `skipped`: the test was intentionally not run; or `todo`: the test is “todo” and still has a failing assertion.                                                                       |\n| `number`                 | `runtime`    | Duration of the test in milliseconds.                                                                                                                                                                                                                                                                                                                                                                   |\n| `Array<FailedAssertion>` | `errors`     | For tests with status `failed` or `todo`, there will be at least one failed assertion. However, the list may be empty if the status is `failed` due to a “todo” test having no failed assertions. Note that all negative test outcome communicate their details in this manner. For example, timeouts, uncaught errors, and [global pollution](../config/noglobals) also synthesize a failed assertion. |\n\nProperties of a FailedAssertion object:\n\n|                    |            |                                                                            |\n|--------------------|------------|----------------------------------------------------------------------------|\n| `boolean`          | `passed`   | False for a failed assertion.                                              |\n| `string|undefined` | `message`  | Description of what the assertion checked.                                 |\n| `any`              | `actual`   | The actual value passed to the assertion.                                  |\n| `any`              | `expected` | The expected value passed to the assertion.                                |\n| `string|undefined` | `stack`    | Stack trace, may be undefined if the result came from an old web browsers. |\n\n``` javascript\nQUnit.on('testEnd', testEnd => {\n  if (testEnd.status === 'failed') {\n    console.error('Failed! ' + testEnd.fullName.join(' > '));\n    testEnd.errors.forEach(assertion => {\n      console.error(assertion);\n      // message: speedometer\n      // actual: 75\n      // expected: 88\n      // stack: at dmc.test.js:12\n    });\n  }\n});\n```\n\n## The `runEnd` event\n\nThe `runEnd` event indicates the end of a test run. It is emitted exactly once.\n\nUnlike other events, the `runEnd` event has **memory** (since QUnit 3.0). This means listening for the event is possible, even if the event already fired. For example, if you build an integration system that automates running tests in a browser, and are unable to reliably inject a listener before tests have finished executing. You can attach a late event listeners for the `runEnd` event. These will be invoked immediately in that case. This removes the need for HTML scraping.\n\n|          |                      |                                                                                                                                                                                                                                                                                                                                                      |\n|----------|----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `string` | `status`             | Aggregate result of all tests, one of: `failed`: at least one test failed or a global error occurred; `passed`: there were no failed tests, which means there were only tests with a passed, skipped, or todo status. If [`QUnit.config.failOnZeroTests`](../config/failonzerotests) is disabled, then the run may also pass if there were no tests. |\n| `Object` | `testCounts`         | Aggregate counts about tests:                                                                                                                                                                                                                                                                                                                        |\n| `number` | `testCounts.passed`  | Number of passed tests.                                                                                                                                                                                                                                                                                                                              |\n| `number` | `testCounts.failed`  | Number of failed tests.                                                                                                                                                                                                                                                                                                                              |\n| `number` | `testCounts.skipped` | Number of skipped tests.                                                                                                                                                                                                                                                                                                                             |\n| `number` | `testCounts.todo`    | Number of todo tests.                                                                                                                                                                                                                                                                                                                                |\n| `number` | `testCounts.total`   | Total number of tests, equal to the sum of the above properties.                                                                                                                                                                                                                                                                                     |\n| `number` | `runtime`            | Total duration of the run in milliseconds.                                                                                                                                                                                                                                                                                                           |\n\n``` javascript\nQUnit.on('runEnd', runEnd => {\n  console.log(`Passed: ${runEnd.passed}`);\n  console.log(`Failed: ${runEnd.failed}`);\n  console.log(`Skipped: ${runEnd.skipped}`);\n  console.log(`Todo: ${runEnd.todo}`);\n  console.log(`Total: ${runEnd.total}`);\n});\n```\n\n## The `error` event\n\n*Version added: [QUnit 2.17.0](https://github.com/qunitjs/qunit/releases/tag/2.17.0)*.\n\nThe `error` event notifies plugins of uncaught global errors during a test run.\n\nSee also [QUnit.onUncaughtException()](../extension/qunit.onuncaughtexception) which is where you can report your own uncaught errors.\n\n|             |         |\n|-------------|---------|\n| `Error|any` | `error` |\n\n``` javascript\nQUnit.on('error', error => {\n  console.error(error);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.on](https://qunitjs.com/api/callbacks/QUnit.on)"
- name: QUnit.onUncaughtException()
  id: extension/qunit.onuncaughtexception
  summary: 'Categories: Extension interface'
  description: "# QUnit.onUncaughtException()\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [2.17.0](https://github.com/qunitjs/qunit/releases/tag/2.17.0).\n\n## Description\n\n`QUnit.onUncaughtException( error )`\n\nReport a global error that should result in a failed test run.\n\n| name          | description                                                                             |\n|---------------|-----------------------------------------------------------------------------------------|\n| `error` (any) | Usually an `Error` object, but any other thrown or rejected value may be given as well. |\n\nThis method can be safely called at any time, including between or outside tests. It is designed for use by plugins and integration layers.\n\nIn general, you should not use this method and instead throw an error. QUnit automatically finds and reports uncaught errors. The following are handled by default and should not be connected to `QUnit.onUncaughtException()` a second time:\n\n- HTML Runner: `window.onerror`\n- HTML Runner: `window.addEventListener('unhandledrejection', …)`\n- QUnit CLI: `process.on('unhandledRejection', …)`\n- QUnit CLI: `process.on('uncaughtException', …)`\n\nWhen QUnit receives report of a global error strictly inside a test (or one of its module hooks), the exception is reported to the currently running test as extra failed assertion, and thus the test will be marked as failed. This means that uncaught exceptions (such as calling an undefined function) during [QUnit.test.todo](../qunit/test.todo) callback count as expected failure and **not** fail the test run.\n\nErrors received before tests (e.g. early event callbacks), internally between tests, or around the [runEnd event](../callbacks/qunit.on#the-runend-event) (if the process is still alive for some reason), are emitted as an [“error” event](../callbacks/qunit.on#the-error-event) to reporters.\n\n## Examples\n\n``` javascript\nconst error = new Error('Failed to reverse the polarity of the neutron flow');\nQUnit.onUncaughtException(error);\n```\n\n``` javascript\nprocess.on('unhandledExample', QUnit.onUncaughtException);\n```\n\n``` javascript\nwindow.addEventListener('unhandledexample', function (event) {\n  QUnit.onUncaughtException(event.reason);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.onUncaughtException](https://qunitjs.com/api/extension/QUnit.onUncaughtException)"
- name: QUnit.stack()
  id: extension/qunit.stack
  summary: 'Categories: Extension interface'
  description: "# QUnit.stack()\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.19.0](https://github.com/qunitjs/qunit/releases/tag/1.19.0).\n\n## Description\n\n`QUnit.stack( offset = 0 )`\n\nGenerate a stacktrace or (call stack) from the current line.\n\n| name              | description                                           |\n|-------------------|-------------------------------------------------------|\n| `offset` (number) | How many function calls to skip over. Defaults to `0` |\n\nQUnit automatically hides its own internal stack from the end of the stacktrace, so the bottom of the stack starts at the user’s [`QUnit.test()`](../qunit/test) function.\n\nWhen called directly in a test function, `QUnit.stack()` neatly returns a single line only, representing the location of the currently executing line of code in the test function.\n\nIf called indirectly by your own helper functions, it is recommended to use the `offset` argument to also exclude most (or all) of your own source code from the top of the stack. That way, it points developers directly at where we are in the test function.\n\nIn environments where [support for Error.stack](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack#browser_compatibility) is lacking, `QUnit.stack()` will return `undefined`.\n\n## Example\n\nThe stacktrace line can be used on custom assertions and reporters.\n\n``` javascript\nfunction addHelper (a, b) {\n  console.log(QUnit.stack());\n  // fooHelper@\n  // foo@\n  // @example.test.js:18 (example A)\n\n  console.log(QUnit.stack(2));\n  // @example.test.js:18 (example A)\n\n  return a + b;\n}\n\nfunction add (a, b) {\n  return addHelper(a, b);\n}\n\nQUnit.test('example A', assert => {\n  assert.equal(add(2, 3), 5);\n});\n\nQUnit.test('example B', assert => {\n  assert.true(true);\n\n  console.log(QUnit.stack());\n  // @example.test.js:24 (example B)\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.stack](https://qunitjs.com/api/extension/QUnit.stack)"
- name: QUnit.start()
  id: qunit/start
  summary: 'Categories: Main methods, Async control'
  description: "# QUnit.start()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/), [Async control](https://qunitjs.com/api/async/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.start()`\n\nCall this method to start the test runner. This indicates that all relevant source code has been loaded and all tests have been defined.\n\nIn most environments this is **automatically called** and you do not need to call it. This includes testing via the HTML Runner and the QUnit CLI.\n\nIf you build a custom test runner (such in SpiderMonkey or Node.js), or if you disable `QUnit.config.autostart` and load test files asynchronously (with AMD, RequireJS, or ESM dynamic imports), then you need to call this once after your test files have been loaded.\n\nSee [`QUnit.config.autostart`](../config/autostart) for detailed examples of how to use `QUnit.start()`.\n\nPrior to QUnit 1.16, this method was used for resuming an async `QUnit.test()` function, as complement to `QUnit.stop()`. To resume asynchronous tests, use [`assert.async()`](../assert/async) instead.\n\n## Changelog\n\n|                                                                    |                                                                                                                                                        |\n|--------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [QUnit 2.1.1](https://github.com/qunitjs/qunit/releases/tag/2.1.1) | `QUnit.start()` no longer requires calling [`QUnit.load()`](load) first.                                                                               |\n| [QUnit 2.0](https://github.com/qunitjs/qunit/releases/tag/2.0.0)   | Support for calling `start()` to resume an async test was removed. ([Migration guide](https://qunitjs.com/upgrade-guide-2.x/#introducing-assertasync)) |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Use of `start()` to resume an async test was deprecated in favour of [`assert.async()`](../assert/async).                                              |\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/start](https://qunitjs.com/api/QUnit/start)"
- name: QUnit.test()
  id: qunit/test
  summary: 'Categories: Main methods, Async control'
  description: "# QUnit.test()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/), [Async control](https://qunitjs.com/api/async/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.test( name, callback )`\n\nDefine a test using `QUnit.test()`.\n\n| parameter             | description                     |\n|-----------------------|---------------------------------|\n| `name` (string)       | Title of unit being tested      |\n| `callback` (function) | Function that performs the test |\n\n### Callback parameters\n\n| parameter         | description                                         |\n|-------------------|-----------------------------------------------------|\n| `assert` (object) | An [Assert](https://qunitjs.com/api/assert/) object |\n\nThe `assert` argument to the callback contains all of QUnit’s [assertion methods](https://qunitjs.com/api/assert/). Use this to make your test assertions.\n\n`QUnit.test()` can automatically handle the asynchronous resolution of a Promise on your behalf if you return a “then-able” Promise as the result of your callback function.\n\nSee also:\n\n- [`QUnit.test.only()`](test.only)\n- [`QUnit.test.skip()`](test.skip)\n- [`QUnit.test.todo()`](test.todo)\n\n## Changelog\n\n|                                                                    |                                                                |\n|--------------------------------------------------------------------|----------------------------------------------------------------|\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Added support for async functions, and returning of a Promise. |\n\n## Examples\n\n### Example: Standard test\n\nA practical example, using the assert argument.\n\n``` javascript\nfunction square (x) {\n  return x * x;\n}\n\nQUnit.test('square()', assert => {\n  assert.equal(square(2), 4);\n  assert.equal(square(3), 9);\n});\n```\n\n### Example: Async test\n\nFollowing the example above, `QUnit.test` also supports JS [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) syntax out of the box.\n\n``` javascript\nQUnit.test('Test with async-await', async assert => {\n  const a = await fetchSquare(2);\n  const b = await fetchSquare(3);\n\n  assert.equal(a, 4);\n  assert.equal(b, 9);\n  assert.equal(await fetchSquare(5), 25);\n});\n```\n\nCheck out the [Step API](../assert/verifysteps) as well. If your async test involves capturing values from an event or async callback, then adopting the `assert.step()` allows for clean test code, that is robust and strict against false positives.\n\n### Example: Test with Promise\n\nIn ES5 and older environments, you can also return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) from your standard test function. This also supports other then-able, values such as `jQuery.Deferred`, and Bluebird Promise.\n\nThis example returns a Promise that is resolved after waiting for 1 second.\n\n``` javascript\nfunction fetchSquare (x) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(x * x);\n    }, 1000);\n  });\n}\n\nQUnit.test('Test with Promise', function (assert) {\n  return fetchSquare(3).then(function (result) {\n    assert.equal(result, 9);\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test](https://qunitjs.com/api/QUnit/test)"
- name: QUnit.test.each()
  id: qunit/test.each
  summary: 'Categories: Main methods'
  description: "# QUnit.test.each()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nversion added: [2.16.0](https://github.com/qunitjs/qunit/releases/tag/2.16.0).\n\n## Description\n\n`QUnit.test.each( name, dataset, callback )`  \n`QUnit.test.only.each( name, dataset, callback )`  \n`QUnit.test.todo.each( name, dataset, callback )`  \n`QUnit.test.skip.each( name, dataset, callback )`  \n`QUnit.test.if.each( name, condition, dataset, callback )`\n\nAdd tests using a data provider.\n\n| parameter                   | description                                             |\n|-----------------------------|---------------------------------------------------------|\n| `name` (string)             | Title of unit being tested                              |\n| `dataset` (array or object) | Array or object of data values passed to each test case |\n| `callback` (function)       | Function that performs the test                         |\n\n### Callback parameters\n\n| parameter         | description                                                                         |\n|-------------------|-------------------------------------------------------------------------------------|\n| `assert` (object) | A new instance object with the [assertion methods](https://qunitjs.com/api/assert/) |\n| `data` (any)      | Data value                                                                          |\n\nUse this method to add multiple tests that are similar, but with different data passed in.\n\n`QUnit.test.each()` generates multiple calls to [`QUnit.test()`](test) internally, and has all the same capabilities such support for async functions, returning a Promise, and the `assert` argument.\n\nEach test case is passed one value of your dataset.\n\nThe [`only`](test.only), [`todo`](test.todo), [`skip`](test.skip), and [`if`](test.if) variants are also available, as `QUnit.test.only.each`, `QUnit.test.todo.each`, `QUnit.test.skip.each`, and `QUnit.test.if.each` respectively.\n\n## Examples\n\n### Basic data provider\n\n``` javascript\nfunction isEven (x) {\n  return x % 2 === 0;\n}\n\nQUnit.test.each('isEven()', [2, 4, 6], (assert, data) => {\n  assert.true(isEven(data), `${data} is even`);\n});\n```\n\n### Array data provider\n\nThe original array is passed to your callback. [Array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) can be used to unpack the data array, directly from the callback signature.\n\n``` javascript\nfunction square (x) {\n  return x * x;\n}\n\nQUnit.test.each('square()', [\n  [2, 4],\n  [3, 9]\n], (assert, [value, expected]) => {\n  assert.equal(square(value), expected, `${value} squared`);\n});\n```\n\n### Object data provider\n\n``` javascript\nQUnit.test.each('isEven()', {\n  caseEven: [2, true],\n  caseNotEven: [3, false]\n}, (assert, [value, expected]) => {\n  assert.strictEqual(isEven(value), expected);\n});\n```\n\n### Async functions with `each()`\n\n``` javascript\nfunction isEven (x) {\n  return x % 2 === 0;\n}\n\nasync function isAsyncEven (x) {\n  return isEven(x);\n}\n\nQUnit.test.each('isAsyncEven()', [2, 4], async (assert, data) => {\n  assert.true(await isAsyncEven(data), `${data} is even`);\n});\n```\n\nOr in classic ES5 syntax, by returning a Promise from each callback:\n\n``` javascript\nfunction isEven (x) {\n  return x % 2 === 0;\n}\n\nfunction isAsyncEven (x) {\n  return Promise.resolve(isEven(x));\n}\n\nQUnit.test.each('isAsyncEven()', [2, 4], function (assert, data) {\n  return isAsyncEven(data).then(function (result) {\n    assert.true(result, data + ' is even');\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test.each](https://qunitjs.com/api/QUnit/test.each)"
- name: QUnit.test.if()
  id: qunit/test.if
  summary: 'Categories: Main methods'
  description: "# QUnit.test.if()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nnot yet released.\n\n## Description\n\n`QUnit.test.if( name, condition, callback )`\n\nAdd a test that only runs if a condition is true.\n\n| parameter             | description                                 |\n|-----------------------|---------------------------------------------|\n| `name` (string)       | Title of unit being tested                  |\n| `condition` (string)  | Expression to decide if the test should run |\n| `callback` (function) | Function that performs the test             |\n\nIf the condition is true, this is equivalent to calling [`QUnit.test()`](test).\n\nIf the conditional is false, this is equivalent to calling [`QUnit.test.skip()`](test.skip), and test will not run. Instead, it will be listed in the results as a “skipped” test.\n\nAs a codebase becomes bigger, you may need to conditionally skip an entire group of tests. You can use [`QUnit.module.if()`](module) to recursively skip all tests in a module based on a given requirement.\n\n## Examples\n\n### Skip a test\n\n``` javascript\nQUnit.module('MyApp');\n\n// Skip if executed without a DOM\nQUnit.test.if('render', typeof document !== 'undefined', function (assert) {\n  assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n});\n```\n\nThis is equivalent to:\n\n``` javascript\nif (typeof document !== 'undefined') {\n  QUnit.test('render', function (assert) {\n    assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n  });\n} else {\n  QUnit.test.skip('render');\n}\n```\n\n### Conditional module\n\n``` javascript\nQUnit.module.if('MyApp', typeof document !== 'undefined');\n\nQUnit.test('render', function (assert) {\n  assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n});\n```\n\n### Legacy idom\n\nPrior to QUnit 3.0, the following shortcuts were sometimes used. This may be replaced by `QUnit.test.if()`.\n\n``` javascript\n(typeof document !== 'undefined' ? QUnit.test : QUnit.skip)('example', function (assert) {\n  assert.true(true);\n});\n\nQUnit[typeof document !== 'undefined' ? 'test' : 'skip']('example', function (assert) {\n  assert.strue(true);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test.if](https://qunitjs.com/api/QUnit/test.if)"
- name: QUnit.test.only()
  id: qunit/test.only
  summary: 'Categories: Main methods'
  description: "# QUnit.test.only()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nversion added: [1.20.0](https://github.com/qunitjs/qunit/releases/tag/1.20.0).\n\n## Description\n\n`QUnit.test.only( name, callback )`  \n`QUnit.only( name, callback )`\n\nAdd a test that is exclusively run, preventing other tests from running unless they are also defined in this way.\n\n| parameter             | description                     |\n|-----------------------|---------------------------------|\n| `name` (string)       | Title of unit being tested      |\n| `callback` (function) | Function that performs the test |\n\n### Callback parameters\n\n| parameter         | description                                                                         |\n|-------------------|-------------------------------------------------------------------------------------|\n| `assert` (object) | A new instance object with the [assertion methods](https://qunitjs.com/api/assert/) |\n\nUse this method to focus your test suite on specific tests. `QUnit.test.only` will cause any other tests in your suite to be ignored.\n\nThis method is an alternative to re-running individual tests from the HTML reporter interface, and can be especially useful to set your filter upfront without first running the test suite in a browser, e.g. in a codebase with many long-running tests.\n\nIt can also be used as alternative to the `--filter` CLI option. If you have a specific test in front of you in your text editor, you set the “only” flag on this test directly by using `QUnit.test.only`, without needing to copy or otherwise match the test name via the `--filter` option. Setting the “only” flag in this way, is similar to how you might use the `debugger` keyword to interact with browser devtools.\n\nWhen debugging a larger area of code, you may want to expand your filter to run all tests under a given module. You can use[`QUnit.module.only()`](module) to automatically mark all tests inside that module as “only” tests.\n\n## Changelog\n\n|                                                                    |                                                                                                                    |\n|--------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| [QUnit 2.12](https://github.com/qunitjs/qunit/releases/tag/2.12.0) | The `QUnit.only()` method was renamed to `QUnit.test.only()`. Use of `QUnit.only()` remains supported as an alias. |\n| [QUnit 1.20](https://github.com/qunitjs/qunit/releases/tag/1.20.0) | The `QUnit.only()` method was introduced.                                                                          |\n\n## Examples\n\nHow to use `QUnit.test.only` to filter which tests are run.\n\n``` javascript\nQUnit.module('robot', hooks => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  QUnit.test('say()', assert => {\n    assert.true(robot.say('Hello'));\n  });\n\n  // Run only this test\n  // For example, you are working on changing this method.\n  QUnit.test.only('laser()', assert => {\n    assert.true(robot.laser());\n  });\n\n  QUnit.test('take()', assert => {\n    assert.true(robot.take(5));\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test.only](https://qunitjs.com/api/QUnit/test.only)"
- name: QUnit.test.skip()
  id: qunit/test.skip
  summary: 'Categories: Main methods'
  description: "# QUnit.test.skip()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nversion added: [1.16.0](https://github.com/qunitjs/qunit/releases/tag/1.16.0).\n\n## Description\n\n`QUnit.test.skip( name )`  \n`QUnit.test.skip( name, callback )`  \n`QUnit.skip( name )`  \n`QUnit.skip( name, callback )`\n\nAdd a test that will be skipped during the run.\n\n| parameter             | description                                    |\n|-----------------------|------------------------------------------------|\n| `name` (string)       | Title of unit                                  |\n| `callback` (function) | Optional, function that would perform the test |\n\nUse this method to disable a [`QUnit.test()`](test), as alternative to commenting out the test.\n\nThis test will be listed in the results as a “skipped” test. The callback and the respective module’s hooks will not run.\n\nAs a codebase becomes bigger, you may sometimes want to temporarily disable an entire group of tests at once. You can use [`QUnit.module.skip()`](module) to recursively skip all tests in the same module.\n\n## See also\n\n- [`QUnit.test.if( name, condition, callback )`](test.if)\n\n## Changelog\n\n|                                                                    |                                                                                                                    |\n|--------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| [QUnit 2.12](https://github.com/qunitjs/qunit/releases/tag/2.12.0) | The `QUnit.skip()` method was renamed to `QUnit.test.skip()`. Use of `QUnit.skip()` remains supported as an alias. |\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | The `QUnit.skip()` method was introduced.                                                                          |\n\n## Examples\n\nHow to use `skip` as a placeholder for future tests, or to temporarily skip a broken test.\n\n``` javascript\nQUnit.module('robot', hooks => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  QUnit.test('say', assert => {\n    assert.strictEqual(robot.say(), 'Exterminate!');\n  });\n\n  // Robot does not yet have a laser() method yet, skip this test for now\n  QUnit.test.skip('laser', assert => {\n    assert.true(robot.laser());\n  });\n\n  // TODO: Implement this later!\n  QUnit.test.skip('jump');\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test.skip](https://qunitjs.com/api/QUnit/test.skip)"
- name: QUnit.test.todo()
  id: qunit/test.todo
  summary: 'Categories: Main methods'
  description: "# QUnit.test.todo()\n\nCategories: [Main methods](https://qunitjs.com/api/QUnit/).\n\nversion added: [2.2.0](https://github.com/qunitjs/qunit/releases/tag/2.2.0).\n\n## Description\n\n`QUnit.test.todo( name, callback )`  \n`QUnit.todo( name, callback )`\n\nAdd a test which expects at least one failing assertion or exception during its run.\n\n| parameter             | description                     |\n|-----------------------|---------------------------------|\n| `name` (string)       | Title of unit being tested      |\n| `callback` (function) | Function that performs the test |\n\n### Callback parameters\n\n| parameter         | description                                                                         |\n|-------------------|-------------------------------------------------------------------------------------|\n| `assert` (object) | A new instance object with the [assertion methods](https://qunitjs.com/api/assert/) |\n\nUse this method to test a unit of code that is still under development (in a “todo” state). The “todo” test will pass as long as there is at least one assertion still failing, or if an exception is thrown.\n\nWhen all assertions are passing, the “todo” test will fail, thus signaling that `QUnit.test.todo()` should be changed to [`QUnit.test()`](test).\n\nYou can also use [`QUnit.module.todo()`](module) to manage the “todo” state for all tests within a module at once.\n\n## Changelog\n\n|                                                                    |                                                                                                                    |\n|--------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| [QUnit 2.12](https://github.com/qunitjs/qunit/releases/tag/2.12.0) | The `QUnit.todo()` method was renamed to `QUnit.test.todo()`. Use of `QUnit.todo()` remains supported as an alias. |\n| [QUnit 2.2](https://github.com/qunitjs/qunit/releases/tag/2.2.0)   | The `QUnit.todo()` method was introduced.                                                                          |\n\n## Examples\n\nHow to use `QUnit.test.todo` to denote code that is still under development.\n\n``` javascript\nQUnit.module('Robot', hooks => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  // Robot is not yet finished\n  QUnit.test.todo('fireLazer', assert => {\n    const result = robot.fireLazer();\n    assert.equal(result, \"I'm firing my lazer!\");\n  });\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/QUnit/test.todo](https://qunitjs.com/api/QUnit/test.todo)"
- name: QUnit.testDone()
  id: callbacks/qunit.testdone
  summary: 'Categories: Callback events'
  description: "# QUnit.testDone()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.testDone( callback )`\n\nRegister a callback to fire whenever a test ends. The callback may be an async function, or a function that return a promise which will be waited for before the next callback is handled.\n\n| parameter           | description                                                                      |\n|---------------------|----------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Provides a single argument with the callback Details object |\n\n### Details object\n\nPassed to the callback:\n\n| property            | description                                                                              |\n|---------------------|------------------------------------------------------------------------------------------|\n| `name` (string)     | Name of the current test                                                                 |\n| `module` (string)   | Name of the current module                                                               |\n| `failed` (number)   | The number of failed assertions                                                          |\n| `passed` (number)   | The number of passed assertions                                                          |\n| `total` (number)    | The total number of assertions                                                           |\n| `runtime` (number)  | The execution time in milliseconds of the test, including beforeEach and afterEach calls |\n| `skipped` (boolean) | Indicates whether or not the current test was skipped                                    |\n| `todo` (boolean)    | Indicates whether or not the current test was a todo                                     |\n| `testId` (string)   | Internal ID of the current test                                                          |\n\n## Changelog\n\n|                                                                    |                                  |\n|--------------------------------------------------------------------|----------------------------------|\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Added `details.testId` property. |\n\n## Examples\n\nRegister a callback that logs results of a single test:\n\n``` javascript\nQUnit.testDone(details => {\n  const result = {\n    'Module name': details.module,\n    'Test name': details.name,\n    Assertions: {\n      Total: details.total,\n      Passed: details.passed,\n      Failed: details.failed\n    },\n    Skipped: details.skipped,\n    Todo: details.todo,\n    Runtime: details.runtime\n  };\n\n  console.log(JSON.stringify(result, null, 2));\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.testDone](https://qunitjs.com/api/callbacks/QUnit.testDone)"
- name: QUnit.testStart()
  id: callbacks/qunit.teststart
  summary: 'Categories: Callback events'
  description: "# QUnit.testStart()\n\nCategories: [Callback events](https://qunitjs.com/api/callbacks/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.testStart( callback )`\n\nRegister a callback to fire whenever a test begins. The callback may be an async function, or a function that return a promise which will be waited for before the next callback is handled.\n\n| parameter           | description                                                                      |\n|---------------------|----------------------------------------------------------------------------------|\n| callback (function) | Callback to execute. Provides a single argument with the callback Details object |\n\n### Details object\n\nPassed to the callback:\n\n| property                    | description                                    |\n|-----------------------------|------------------------------------------------|\n| `name` (string)             | Name of the next test to run                   |\n| `module` (string)           | Name of the current module                     |\n| `testId` (string)           | Internal ID of the next test                   |\n| `previousFailure` (boolean) | Whether the next test failed on a previous run |\n\n## Changelog\n\n|                                                                    |                                  |\n|--------------------------------------------------------------------|----------------------------------|\n| [QUnit 1.16](https://github.com/qunitjs/qunit/releases/tag/1.16.0) | Added `details.testId` property. |\n\n## Examples\n\nRegister a callback that logs the module and test name:\n\n``` javascript\nQUnit.testStart(details => {\n  console.log(`Now running: ${details.module} ${details.name}`);\n});\n```\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/callbacks/QUnit.testStart](https://qunitjs.com/api/callbacks/QUnit.testStart)"
- name: QUnit.urlParams
  id: extension/qunit.urlparams
  summary: 'Categories: Extension interface'
  description: "# QUnit.urlParams\n\nCategories: [Extension interface](https://qunitjs.com/api/extension/).\n\nversion added: [1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0).\n\n## Description\n\n`QUnit.urlParams[key]`  \n`QUnit.urlParams.key`\n\nIn browser environments, this object is populated with the URL parameters in the current query string. If the [`location` global](https://developer.mozilla.org/en-US/docs/Web/API/Location) is not available, the object remains empty.\n\nThis is designed for use with [QUnit.config.urlConfig](../config/urlconfig), to access the value of your toolbar control.\n\nValues are parsed as follows:\n\n- `true`, boolean true if the key is set without a value.\n- `string`, if the key is set once with a value.\n- `string[]`, array of strings if the key is set more than once.\n\n``` javascript\n// test/index.html?foo&bar=1&thing=xx&thing=yyy\n\nQUnit.urlParams.foo; // true\nQUnit.urlParams.bar; // \"1\"\nQUnit.urlParams.thing; // [ \"xx\", \"yyy\" ]\n```\n\n## Changelog\n\n|                                                                      |                                            |\n|----------------------------------------------------------------------|--------------------------------------------|\n| UNRELEASED                                                           | Available unconditionally.                 |\n| [QUnit 1.23.0](https://github.com/qunitjs/qunit/releases/tag/1.23.0) | Now undefined in non-browser environments. |\n| [QUnit 1.0.0](https://github.com/qunitjs/qunit/releases/tag/1.0.0)   | Introduced.                                |\n\n## See also\n\n- [QUnit.config.urlConfig](../config/urlconfig)\n- [Browser Runner § Toolbar](https://qunitjs.com/browser/)\n\n© OpenJS Foundation and contributors.  \nLicensed under the MIT license.  \n[https://qunitjs.com/api/extension/QUnit.urlParams](https://qunitjs.com/api/extension/QUnit.urlParams)"
