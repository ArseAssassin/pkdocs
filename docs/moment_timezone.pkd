---
name: Moment.js Timezone
slug: moment_timezone
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Â© JS Foundation and other contributors
  Licensed under the MIT License.
  https://momentjs.com/timezone/docs/
homepage: https://momentjs.com/timezone/

---
- name: Abbreviation
  id: index#/zone-object/abbr/
  summary: Get the abbreviation for a given timestamp from a Zone
  description: |-
    ### Abbreviation

    ``` javascript
    zone.abbr(timestamp); // PST
    ```

    Get the abbreviation for a given timestamp from a `Zone`.

    ``` javascript
    moment.tz.zone('America/Los_Angeles').abbr(1403465838805); // PDT
    moment.tz.zone('America/Los_Angeles').abbr(1388563200000); // PST
    ```
- name: Adding a Link
  id: index#/data-loading/adding-a-link/
  summary: To link two zone names to the same data, use moment.tz.link
  description: |-
    ### Adding a Link

    ``` javascript
    moment.tz.link(PackedLinkString)
    moment.tz.link(PackedLinkString[])
    ```

    To link two zone names to the same data, use `moment.tz.link`.

    The strings passed in should be in the [link format](#/data-formats/link-format/): the two zone names separated by a pipe.

    ``` javascript
    moment.tz.link('America/Los_Angeles|US/Pacific');
    ```

    To add more than one link at a time, pass an array of link strings.

    ``` javascript
    moment.tz.link([
        'America/Los_Angeles|US/Pacific',
        'America/New_York|US/Eastern'
    ]);
    ```
- name: Adding a Zone
  id: index#/data-loading/adding-a-zone/
  summary: To add zone data to Moment Timezone, use moment.tz.add
  description: |-
    ### Adding a Zone

    ``` javascript
    moment.tz.add(PackedZoneString)
    moment.tz.add(PackedZoneString[])
    ```

    To add zone data to Moment Timezone, use `moment.tz.add`.

    ``` javascript
    moment.tz.add('America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0');
    ```

    To add more than one zone, pass an array of packed data.

    ``` javascript
    moment.tz.add([
        'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',
        'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'
    ]);
    ```

    **Note: The above zone data is sample data and is not up to date. Reference the [moment-timezone source](https://github.com/moment/moment-timezone/blob/develop/data/packed/latest.json) for up to date data.**
- name: Browser
  id: index#/use-it/browser/
  summary: When using Moment Timezone in the browser, you will need to load the data as well as the library
  description: |-
    ### Browser

    ``` html
    <script src="moment.js"></script>
    <script src="moment-timezone-with-data.js"></script>
    ```

    When using Moment Timezone in the browser, you will need to load the data as well as the library.

    You can either use the prebuilt library and data files linked on [the homepage](https://momentjs.com/timezone/) or build a subset of the data yourself and [load it](#/data-loading/).

    ``` javascript
    moment().tz("America/Los_Angeles").format();
    ```
- name: Checking Zone Existence
  id: index#/data-loading/checking-if-a-zone-exists/
  summary: To check if a zone exists, use moment.tz.zone
  description: |-
    ### Checking Zone Existence

    ``` javascript
    moment.tz.zone(name); // Zone or null
    ```

    To check if a zone exists, use `moment.tz.zone`. It will return the Zone if it was loaded and `null` if it was not loaded.

    ``` javascript
    moment.tz.zone("UnloadedZone"); // null
    moment.tz.add("UnloadedZone|UZ|0|0|");
    moment.tz.zone("UnloadedZone"); // Zone { name : "UnloadedZone", ...}
    ```
- name: Converting to Zone
  id: index#/using-timezones/converting-to-zone/
  summary: The moment#tz mutator will change the time zone and update the offset
  description: |-
    ### Converting to Zone

    ``` javascript
    moment().tz(String);
    moment().tz(String, Boolean);
    ```

    The `moment#tz` mutator will change the time zone and update the offset.

    ``` javascript
    moment("2013-11-18").tz("America/Toronto").format('Z'); // -05:00
    moment("2013-11-18").tz("Europe/Berlin").format('Z');   // +01:00
    ```

    This information is used consistently in other operations, like calculating the start of the day.

    ``` javascript
    var m = moment.tz("2013-11-18 11:55", "America/Toronto");
    m.format();                     // 2013-11-18T11:55:00-05:00
    m.startOf("day").format();      // 2013-11-18T00:00:00-05:00
    m.tz("Europe/Berlin").format(); // 2013-11-18T06:00:00+01:00
    m.startOf("day").format();      // 2013-11-18T00:00:00+01:00
    ```

    Without any argument, `moment#tz` returns:

    - the time zone name assigned to the moment instance or
    - `undefined` if a time zone has not been set.

    ``` javascript
    var m = moment.tz("2013-11-18 11:55", "America/Toronto");
    m.tz();  // America/Toronto
    var m = moment.tz("2013-11-18 11:55");
    m.tz() === undefined;  // true
    ```

    On passing a second parameter as `true`, only the timezone (and offset) is updated, keeping the local time same. Consequently, it will now point to a different point in time if the offset has changed.

    ``` javascript
    var m = moment.tz("2013-11-18 11:55", "America/Toronto");
    m.format();                           // 2013-11-18T11:55:00-05:00
    m.tz('Europe/Berlin', true).format()  // 2013-11-18T11:55:00+01:00
    ```
- name: Create Links
  id: index#/data-utilities/create-links/
  summary: In order to reduce duplication, we can create links out of two zones that share data
  description: |-
    ### Create Links

    ``` javascript
    moment.tz.createLinks(UnpackedBundle); // UnpackedBundle
    ```

    In order to reduce duplication, we can create links out of two zones that share data.

    ``` javascript
    var unlinked = {
        zones : [
            {name:"Zone/One",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]},
            {name:"Zone/Two",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]}
        ],
        links : [],
        version : "2014x-doc-example"
    };

    moment.tz.createLinks(unlinked);

    {
        zones : [
            {name:"Zone/One",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]}
        ],
        links : ["Zone/One|Zone/Two"],
        version : "2014x-doc-example"
    }
    ```

    This is especially useful when combined with `moment.tz.filterYears`, as older rules that would have differentiated two Zones may not be in the filtered year range, allowing them to be linked to save space.
- name: Data Formats
  id: index#/data-formats/
  summary: Moment Timezone uses two data formats
  description: |-
    ## Data Formats

    Moment Timezone uses two data formats. An unpacked version for calculations and a packed version for minified transport.
- name: Data Loading
  id: index#/data-loading/
  summary: Once the data has been packed and transported to the client, it must be added to Moment Timezone
  description: |-
    ## Data Loading

    Once the data has been packed and transported to the client, it must be added to Moment Timezone.
- name: Data Utilities
  id: index#/data-utilities/
  summary: Because of the complexity of the packed and unpacked data formats, Moment Timezone has some heavily tested utility functions for working with the data
  description: |-
    ## Data Utilities

    Because of the complexity of the packed and unpacked data formats, Moment Timezone has some heavily tested utility functions for working with the data.

    Methods for unpacking data are included with the core library, as they are needed in order to use the library.

    Methods for packing and subsetting the data are included in an additional `moment-timezone-utils.js` file. This file adds some more methods to the `moment.tz` namespace.

    ``` javascript
    // in moment-timezone.js
    moment.tz.unpack
    moment.tz.unpackBase60
    // in moment-timezone-utils.js
    moment.tz.pack
    moment.tz.packBase60
    moment.tz.createLinks
    moment.tz.filterYears
    moment.tz.filterLinkPack
    ```
- name: Default time zone
  id: index#/using-timezones/default-timezone/
  summary: By default, moment objects are created in the local time zone
  description: "### Default time zone\n\n``` javascript\nmoment.tz.setDefault(String);\n```\n\nBy default, `moment` objects are created in the local time zone.  \nLocal time zone - it's a time zone which is set in a browser or on your `node.js` server.\n\nTo change the default time zone, use `moment.tz.setDefault` with a valid time zone.\n\n``` javascript\nmoment.tz.setDefault(\"America/New_York\");\n```\n\nTo reset the default time zone to local, use `moment.tz.setDefault` with no arguments.\n\n``` javascript\nmoment.tz.setDefault();\n```\n\nThis is a global setting (shared by all modules).\n\nSubsequent calls to `moment.tz.setDefault` will not affect existing `moment` objects or their clones."
- name: Filter Years
  id: index#/data-utilities/filter-years/
  summary: By default, Moment Timezone includes all the data from the IANA Time Zone Database
  description: |-
    ### Filter Years

    ``` javascript
    moment.tz.filterYears(UnpackedZone, Number, Number); // UnpackedZone
    ```

    By default, Moment Timezone includes all the data from [the IANA Time Zone Database](https://www.iana.org/time-zones). This includes data from 1900 to 2038. The data for all these years may not be necessary for your use case.

    `moment.tz.filterYears` can be used to filter out data for years outside a certain range.

    ``` javascript
    var all    = { name : "America/Los_Angeles", abbrs : [...], offsets : [...] untils : [...]};
    var subset = moment.tz.filterYears(all, 2012, 2016);
    all.untils.length;    // 186
    subset.untils.length; // 11
    ```

    If only one year is passed, it will be used for the start and end year.

    ``` javascript
    var all    = { name : "America/Los_Angeles", abbrs : [...], offsets : [...] untils : [...]};
    var subset = moment.tz.filterYears(all, 2012);
    all.untils.length;    // 186
    subset.untils.length; // 3
    ```
- name: Filter Years, Create Links, and Pack
  id: index#/data-utilities/filter-link-pack/
  summary: The packing, link creation, and subsetting of years are all tools for compressing data to be transported to the client
  description: "### Filter Years, Create Links, and Pack\n\n``` javascript\nmoment.tz.filterLinkPack(UnpackedBundle, Number, Number); // PackedBundle\n```\n\nThe packing, link creation, and subsetting of years are all tools for compressing data to be transported to the client.\n\nThe `moment.tz.filterLinkPack` method combines all these into one simple interface. Pass in an unpacked bundle, start year, and end year and get a filtered, linked, packed bundle back.\n\nThis is what is being used to compress the output for the [bundled data + library files on the homepage](https://momentjs.com/timezone/).\n\nÂ© JS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://momentjs.com/timezone/docs/](https://momentjs.com/timezone/docs/)"
- name: Formatting Additions
  id: index#/using-timezones/formatting/
  summary: In addition to including the +00:00 formatting information, Moment Timezone also includes information for the abbreviated time zone name
  description: |-
    ### Formatting Additions

    ``` javascript
    moment.tz(String).format("Z z"); // -08:00 PST
    moment.tz(String).zoneAbbr();    // PST
    moment.tz(String).zoneName();    // PST
    ```

    In addition to including the `+00:00` formatting information, Moment Timezone also includes information for the abbreviated time zone name.

    ``` javascript
    moment.tz([2012, 0], 'America/New_York').format('z');    // EST
    moment.tz([2012, 5], 'America/New_York').format('z');    // EDT
    moment.tz([2012, 0], 'America/Los_Angeles').format('z'); // PST
    moment.tz([2012, 5], 'America/Los_Angeles').format('z'); // PDT
    ```

    Note that these abbreviations may change depending on the time zone offset. This helps to distinguish offsets between places that may or may not use DST.

    ``` javascript
    // Denver observes DST
    moment.tz([2012, 0], 'America/Denver').format('Z z');  // -07:00 MST
    moment.tz([2012, 5], 'America/Denver').format('Z z');  // -06:00 MDT
    // Phoenix does not observe DST
    moment.tz([2012, 0], 'America/Phoenix').format('Z z'); // -07:00 MST
    moment.tz([2012, 5], 'America/Phoenix').format('Z z'); // -07:00 MST
    ```

    Note also that these abbreviations are not globally unique. Below, you can see that both United States Central Standard Time and China Standard Time have the same abbreviation.

    ``` javascript
    moment.tz('2016-01-01', 'America/Chicago').format('z');    // CST
    moment.tz('2016-01-01', 'Asia/Shanghai').format('z');      // CST
    ```

    You can also use `moment#zoneAbbr` to get the zone abbreviation. This is what moment.js uses when formatting the `z` token.

    ``` javascript
    moment.tz([2012, 0], 'America/New_York').zoneAbbr(); // EST
    moment.tz([2012, 5], 'America/New_York').zoneAbbr(); // EDT
    ```

    Moment.js also provides a hook for the long form time zone name. Because these strings are generally localized, Moment Timezone does not provide any long names for zones.

    To provide long form names, you can override `moment.fn.zoneName` and use the `zz` token.

    ``` javascript
    var abbrs = {
        EST : 'Eastern Standard Time',
        EDT : 'Eastern Daylight Time',
        CST : 'Central Standard Time',
        CDT : 'Central Daylight Time',
        MST : 'Mountain Standard Time',
        MDT : 'Mountain Daylight Time',
        PST : 'Pacific Standard Time',
        PDT : 'Pacific Daylight Time',
    };

    moment.fn.zoneName = function () {
        var abbr = this.zoneAbbr();
        return abbrs[abbr] || abbr;
    };

    moment.tz([2012, 0], 'America/New_York').format('zz');    // Eastern Standard Time
    moment.tz([2012, 5], 'America/New_York').format('zz');    // Eastern Daylight Time
    moment.tz([2012, 0], 'America/Los_Angeles').format('zz'); // Pacific Standard Time
    moment.tz([2012, 5], 'America/Los_Angeles').format('zz'); // Pacific Daylight Time
    ```

    Please note that the `z` formatting token will not always show the abbreviated time zone name, instead, will show the time offsets for each region.

    ``` javascript
    moment.tz('America/Los_Angeles').format('z')  // "PDT"     (abbreviation)
    moment.tz('Asia/Magadan').format('z')         // "+11"     (3-char offset)
    moment.tz('Asia/Colombo').format('z')         // "+0530"   (5-char offset)
    ```
- name: Getting all Zones
  id: index#/using-timezones/getting-zone-names/
  summary: To get a list of all available time zone names, use moment.tz.names
  description: |-
    ### Getting all Zones

    ``` javascript
    moment.tz.names(); // String[]
    ```

    To get a list of all available time zone names, use `moment.tz.names`.

    ``` javascript
    moment.tz.names(); // ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", ...]
    ```
- name: Getting Zone Names
  id: index#/data-loading/getting-zone-names/
  summary: To get a list of all available time zone names, use moment.tz.names
  description: |-
    ### Getting Zone Names

    ``` javascript
    moment.tz.names(); // String[]
    ```

    To get a list of all available time zone names, use `moment.tz.names`.

    ``` javascript
    moment.tz.names(); // ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", ...]
    ```
- name: Getting Zones for country
  id: index#/using-timezones/getting-country-zones/
  summary: To get a list of time zones for some country, use moment.tz.zonesForCountry()
  description: |-
    ### Getting Zones for country

    ``` javascript
    moment.tz.zonesForCountry(String); // String[]
    moment.tz.zonesForCountry(String, Boolean);
    ```

    To get a list of time zones for some country, use `moment.tz.zonesForCountry()`.

    ``` javascript
    moment.tz.zonesForCountry('US');
    ```

    By default this method returns zone names sorted alphabetically:

    ``` javascript
    ["America/Adak", "America/Anchorage", ... "Pacific/Honolulu"]
    ```

    To get also offsets, pass `true` as 2nd parameter:

    ``` javascript
    moment.tz.zonesForCountry('CN', true);
    ```

    it returns array of objects with name and offset:

    ``` javascript
    [
       { name: "Asia/Shanghai", offset: -480 },
       { name: "Asia/Urumqi", offset: -360 }
    ]
    ```

    It's useful if you need to sort time zones by offset.

    All country codes can be retrieved using method `moment.tz.countries()`
- name: Guessing user zone
  id: index#/using-timezones/guessing-user-timezone/
  summary: Moment Timezone uses the Internationalization API (Intl.DateTimeFormat().resolvedOptions().timeZone) in supported browsers to determine the user's time zone
  description: |-
    ### Guessing user zone

    ``` javascript
    moment.tz.guess();
    moment.tz.guess(Boolean);
    ```

    Moment Timezone uses the Internationalization API (`Intl.DateTimeFormat().resolvedOptions().timeZone`) in [supported browsers](http://caniuse.com/#feat=internationalization) to determine the user's time zone.

    On other browsers, time zone detection is rather tricky to get right, as there is little information provided by those browsers. For those, it will use `Date#getTimezoneOffset` and `Date#toString` on a handful of moments around the current year to gather as much information about the browser environment as possible. It then compares that information with all the time zone data loaded and returns the closest match. In case of ties, the time zone with the city with largest population is returned.

    By default Moment Timezone caches the detected timezone. This means that subsequent calls to `moment.tz.guess()` will always return the same value.

    You can call `moment.tz.guess()` with an optional boolean argument "ignoreCache". If set to true, the cache will be ignored and overwritten with the new value.

    ``` javascript
    moment.tz.guess(); // America/Chicago
    // suppose the client's timezone changes to Europe/Berlin
    moment.tz.guess(); // America/Chicago
    moment.tz.guess(true); // Europe/Berlin
    moment.tz.guess(); // Europe/Berlin
    ```
- name: Link Format
  id: index#/data-formats/link-format/
  summary: In order to reduce duplication, the Moment Timezone data packer will create links out of two zones that share data that is exactly the same
  description: |-
    ### Link Format

    In order to reduce duplication, the Moment Timezone data packer will create links out of two zones that share data that is exactly the same.

    This data is the two zone names separated by a pipe.

    ``` javascript
    moment.tz.add('America/Los_Angeles|PST PDT|80 70|01010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0');
    moment.tz.link('America/Los_Angeles|US/Pacific');
    moment.tz("2013-12-01", "America/Los_Angeles").format(); // 2013-12-01T00:00:00-08:00
    moment.tz("2013-12-01", "US/Pacific").format();          // 2013-12-01T00:00:00-08:00
    ```
- name: Loading a Data Bundle
  id: index#/data-loading/loading-a-data-bundle/
  summary: The data for Moment Timezone comes from the IANA Time Zone Database
  description: |-
    ### Loading a Data Bundle

    ``` javascript
    moment.tz.load({
        zones : [],
        links : [],
        version : '2014e'
    });
    ```

    The data for Moment Timezone comes from [the IANA Time Zone Database](https://www.iana.org/time-zones). New versions are released periodically as time zone laws change in various countries.

    The versions are named after the year and an incrementing letter. `2014a 2014b 2014c...`

    In order to keep versions together, Moment Timezone has a bundled object format as well.

    ``` javascript
    {
        version : '2014e',
        zones : [
            'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',
            'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'
        ],
        links : [
            'America/Los_Angeles|US/Pacific',
            'America/New_York|US/Eastern'
        ]
    }
    ```

    To load a bundle into Moment Timezone, use `moment.tz.load`.

    ``` javascript
    moment.tz.load({
        version : '2014e',
        zones : [...],
        links : [...]
    })
    ```
- name: Name
  id: index#/zone-object/name/
  summary: The uniquely identifying name of the time zone
  description: |-
    ### Name

    ``` javascript
    zone.name; // America/Los_Angeles
    ```

    The uniquely identifying name of the time zone.
- name: Node.js
  id: index#/use-it/node-js/
  summary: In Node.js, all the data is preloaded
  description: |-
    ### Node.js

    ``` javascript
    npm install moment-timezone
    ```

    In Node.js, all the data is preloaded. No additional code is needed for loading data.

    ``` javascript
    var moment = require('moment-timezone');
    moment().tz("America/Los_Angeles").format();
    ```
- name: Offset
  id: index#/zone-object/offset/
  summary: Get the offset for a given timestamp (in ms) from a Zone
  description: |-
    ### Offset

    ``` javascript
    zone.utcOffset(timestamp); // 480
    ```

    Get the offset for a given timestamp (in ms) from a `Zone`.

    ``` javascript
    moment.tz.zone('America/Los_Angeles').utcOffset(1403465838805); // 420
    moment.tz.zone('America/Los_Angeles').utcOffset(1388563200000); // 480
    ```

    POSIX compatibility requires that the offsets are inverted. Therefore, Etc/GMT-X will have an offset of `+X` and Etc/GMT+X will have an offset of `-X`. This is a result of IANA's [Time Zone Database](https://github.com/eggert/tz/blob/2017b/etcetera#L36-L42) and not an arbitrary choice by Moment.js. Thus, using locality based identifiers is preferred over fixed-offset identifiers.

    For example, `moment().tz('Etc/GMT+1').format('YYYY-MM-DD HH:mm ZZ')` will return `2014-12-18 11:22 -0100` while `moment().tz('Europe/Madrid').format('YYYY-MM-DD HH:mm ZZ')` will return `2014-12-18 13:22 +0100`. The `Europe/Madrid` indentifer should be used instead of the `Etc/GMT+1` identifier.
- name: Pack
  id: index#/data-utilities/pack/
  summary: This converts data in the unpacked format to the packed format
  description: |-
    ### Pack

    ``` javascript
    moment.tz.pack(UnpackedObject); // PackedString
    ```

    This converts data in the [unpacked format](#/data-formats/unpacked-format/) to the [packed format](#/data-formats/packed-format/).

    ``` javascript
    var unpacked = {
        name    : 'Indian/Mauritius',
        abbrs   : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],
        offsets : [-230, -240, -300, -240, -300, -240],
        untils  : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null]
    };
    moment.tz.pack(unpacked); // "Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0"
    ```
- name: Pack Base 60
  id: index#/data-utilities/pack-base-60/
  summary: Convert a base 10 number to a base 60 string
  description: |-
    ### Pack Base 60

    ``` javascript
    moment.tz.packBase60(Number); // Base60String
    ```

    Convert a base 10 number to a base 60 string.

    ``` javascript
    moment.tz.packBase60(9);    // 9
    moment.tz.packBase60(10);   // a
    moment.tz.packBase60(59);   // X
    moment.tz.packBase60(1337); // mh
    ```

    Much like `Number.prototype.toFixed`, `moment.tz.packBase60` accepts a second argument for the number of digits of precision.

    ``` javascript
    moment.tz.packBase60(1.1667,   1); // 1.a
    moment.tz.packBase60(20.12345, 3); // k.7op
    moment.tz.packBase60(59,       1); // X
    ```

    A solitary `0` before the decimal point is dropped.

    ``` javascript
    moment.tz.packBase60(1.1667, 1); // 1.a
    moment.tz.packBase60(0.1667, 1); // .a
    ```

    Trailing zeroes after the decimal point are dropped.

    ``` javascript
    moment.tz.packBase60(1/6, 1); // .a
    moment.tz.packBase60(1/6, 5); // .a
    moment.tz.packBase60(59, 5);  // X
    ```
- name: Packed Format
  id: index#/data-formats/packed-format/
  summary: The packed format represents an unpacked zone in a single string
  description: |-
    ### Packed Format

    The packed format represents an unpacked zone in a single string.

    The data below is for Los Angeles between 2014 and 2018. More time zones can be seen [here](https://github.com/moment/moment-timezone/blob/develop/data/packed/latest.json)

    ``` javascript
    'America/Los_Angeles|PST PDT|80 70|01010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0'
    ```

    In order to save as many bytes as possible, we used a very compact format to store the data.

    The data is split into 5 sections separated by pipes.

    | \#  | Type              | Example                                          |
    |-----|-------------------|--------------------------------------------------|
    | 0   | Name              | `America/Los_Angeles`                            |
    | 1   | Abbr Map          | `PST PDT`                                        |
    | 2   | Offset Map        | `80 70`                                          |
    | 3   | Abbr/Offset Index | `01010101010`                                    |
    | 4   | Timestamp Diff    | `1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0` |

    **Name:** The canonical name of the time zone.

    **Abbr Map:** A space separated list of all the abbreviations ever used in this time zone.

    **Offset Map:** A space separated list of all the offsets ever used in this time zone in minutes in base 60.

    **Abbr/Offset Index:** A tightly packed array of indices into the offset and abbr maps. These are also in base 60.

    **Timestamp Diffs:** This is where the timestamps are stored.

    Because we are dealing with a sorted list of timestamps, we just store the diff from the last timestamps rather than storing the full timestamps.

    The first item in the array is a unix timestamp in minutes. All items after the first item are numbers of minutes to be added to the previous value during unpacking. All items are stored in base 60.

    As you may have seen from the example above, the timestamp diffs tend to duplicate the same values from year to year. These duplications allow gzip to compress the data even further than if we used full timestamps.

    ### Base 60?

    You may be wondering why base 60 is used. Base 62 is a fairly common tool for ascii data compression, using `a-z` to represent `10-35` and `A-Z` to represent `36-61`.

    While it may have saved a few bytes to use base 62, much of the data in Moment Timezone maps nicely to multiples of 60.

    There are 60 minutes in an hour and 60 seconds in a minute. 3 hours is `30` minutes in base 60 and `300` seconds in base 60 instead of `180` and `10800` in base 10 or `2U` and `2Oc` in base 62.
- name: Parse Offset
  id: index#/zone-object/parse/
  summary: Parse an offset for a timestamp constructed from Date.UTC in that zone
  description: |-
    ### Parse Offset

    ``` javascript
    zone.parse(timestamp); // 480
    ```

    Parse an offset for a timestamp constructed from `Date.UTC` in that zone.

    This is what Moment Timezone uses to parse input into a time zone. The process is conceptually similar to the following.

    Assume we want to find the exact moment of `March 19 2014 8:30 am` in New York. Because the offset varies between `-04:00` and `-05:00` in New York, we don't know what the offset was on March 19th.

    Instead, we create a timestamp in UTC and pass that to `zone.parse`, which will return the offset at that time.

    ``` javascript
    var zone = moment.tz.zone('America/New_York');
    zone.parse(Date.UTC(2012, 2, 19, 8, 30)); // 240
    ```

    This is the code that handles the cases referenced in the [Parsing Ambiguities](#/using-timezones/parsing-ambiguous-inputs/) section above.

    ``` javascript
    var zone = moment.tz.zone('America/New_York');
    zone.parse(Date.UTC(2012, 2, 11, 1, 59)); // 300
    zone.parse(Date.UTC(2012, 2, 11, 2, 0)); // 240
    ```
- name: Parsing Ambiguities
  id: index#/using-timezones/parsing-ambiguous-inputs/
  summary: Due to daylight saving time, there is a possibility that a time either does not exist, or has existed twice
  description: |-
    ### Parsing Ambiguities

    Due to daylight saving time, there is a possibility that a time either does not exist, or has existed twice.

    ### Spring Forward

    In the spring, at the start of DST, clocks move forward an hour. In reality though, it is not time that is moving, it is the offset moving.

    Moving the offset forward gives the illusion that an hour has disappeared. As the clock ticks, you can see it move from `1:58` to `1:59` to `3:00`. It is easier to see what is actually happening when you include the offset.

        1:58 -5
        1:59 -5
        3:00 -4
        3:01 -4

    The result is that any time between `1:59:59` and `3:00:00` never actually happened. Moment Timezone accounts for this. If you try to parse a time that never existed, it will skip forward by the amount of the DST gap (usually 1 hour).

    ``` javascript
    moment.tz("2012-03-11 01:59:59", "America/New_York").format() // 2012-03-11T01:59:59-05:00
    moment.tz("2012-03-11 02:00:00", "America/New_York").format() // 2012-03-11T03:00:00-04:00
    moment.tz("2012-03-11 02:59:59", "America/New_York").format() // 2012-03-11T03:59:59-04:00
    moment.tz("2012-03-11 03:00:00", "America/New_York").format() // 2012-03-11T03:00:00-04:00
    ```

    In this example, the two o'clock hour doesn't exist, so it is treated as equivalent to the three o'clock hour.

    ### Fall Back

    In the fall, at the end of DST, clocks move backward an hour. Again, time is not moving backwards, only the offset is. In this case, the illusion is that an hour repeats itself.

    Again, it is easier to see what is actually happening when you include the offset.

        1:58 -4
        1:59 -4
        1:00 -5
        1:01 -5

    Moment Timezone handles this by always using the earlier instance of a duplicated hour.

    ``` javascript
    moment.tz("2012-11-04 00:59:59", "America/New_York"); // 2012-11-04T00:59:59-04:00
    moment.tz("2012-11-04 01:00:00", "America/New_York"); // 2012-11-04T01:00:00-04:00
    moment.tz("2012-11-04 01:59:59", "America/New_York"); // 2012-11-04T01:59:59-04:00
    moment.tz("2012-11-04 02:00:00", "America/New_York"); // 2012-11-04T02:00:00-05:00
    ```

    You won't be able to create a moment with the later instance of the duplicated hour unless you include the offset when parsing.

    ``` javascript
    moment.tz("2012-11-04 01:00:00-04:00", "America/New_York"); // 2012-11-04T01:00:00-04:00
    moment.tz("2012-11-04 01:00:00-05:00", "America/New_York"); // 2012-11-04T01:00:00-05:00
    ```
- name: Parsing in Zone
  id: index#/using-timezones/parsing-in-zone/
  summary: The moment.tz constructor takes all the same arguments as the moment constructor, but uses the last argument as a time zone identifier
  description: "### Parsing in Zone\n\n``` javascript\nmoment.tz(..., String);\n```\n\nThe `moment.tz` constructor takes all the same arguments as the `moment` constructor, but uses the last argument as a [time zone identifier](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n\n``` javascript\nvar a = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nvar b = moment.tz(\"May 12th 2014 8PM\", \"MMM Do YYYY hA\", \"America/Toronto\");\nvar c = moment.tz(1403454068850, \"America/Toronto\");\na.format(); // 2013-11-18T11:55:00-05:00\nb.format(); // 2014-05-12T20:00:00-04:00\nc.format(); // 2014-06-22T12:21:08-04:00\n```\n\nThis constructor is DST aware, and will use the correct offset when parsing.\n\n``` javascript\nmoment.tz(\"2013-12-01\", \"America/Los_Angeles\").format(); // 2013-12-01T00:00:00-08:00\nmoment.tz(\"2013-06-01\", \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\n```\n\nThe offset is only taken into consideration when constructing with an array, string without offset, or object.\n\n``` javascript\nvar arr = [2013, 5, 1],\n    str = \"2013-12-01\",\n    obj = { year : 2013, month : 5, day : 1 };\n\nmoment.tz(arr, \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\nmoment.tz(str, \"America/Los_Angeles\").format(); // 2013-12-01T00:00:00-08:00\nmoment.tz(obj, \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\n\nmoment.tz(arr, \"America/New_York\").format();    // 2013-06-01T00:00:00-04:00\nmoment.tz(str, \"America/New_York\").format();    // 2013-12-01T00:00:00-05:00\nmoment.tz(obj, \"America/New_York\").format();    // 2013-06-01T00:00:00-04:00\n```\n\nIf the input string contains an offset, it is used instead for parsing. The parsed moment is then converted to the target zone.\n\n``` javascript\nvar zone = \"America/Los_Angeles\";\nmoment.tz('2013-06-01T00:00:00',       zone).format(); // 2013-06-01T00:00:00-07:00\nmoment.tz('2013-06-01T00:00:00-04:00', zone).format(); // 2013-05-31T21:00:00-07:00\nmoment.tz('2013-06-01T00:00:00+00:00', zone).format(); // 2013-05-31T17:00:00-07:00\n```\n\nUnix timestamps and `Date` objects refer to specific points in time, thus it doesn't make sense to use the time zone offset when constructing. Using `moment.tz(Number|Date, zone)` is functionally equivalent to `moment(Number|Date).tz(zone)`.\n\n``` javascript\nvar timestamp = 1403454068850,\n    date = new Date(timestamp);\n\nmoment.tz(timestamp, \"America/Los_Angeles\").format(); // 2014-06-22T09:21:08-07:00\nmoment(timestamp).tz(\"America/Los_Angeles\").format(); // 2014-06-22T09:21:08-07:00\n\nmoment.tz(date, \"America/Los_Angeles\").format();      // 2014-06-22T09:21:08-07:00\nmoment(date).tz(\"America/Los_Angeles\").format();      // 2014-06-22T09:21:08-07:00\n```\n\nÐ£ou may specify a boolean right after format argument to use strict parsing. Strict parsing requires that the format and input match exactly, *including delimeters*.\n\n``` javascript\nmoment.tz('It is 2012-05-25', 'YYYY-MM-DD', \"America/Toronto\").isValid();       // true \nmoment.tz('It is 2012-05-25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid(); // false\nmoment.tz('2012-05-25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid();       // true\nmoment.tz('2012-05.25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid();       // false\n```"
- name: Require.js
  id: index#/use-it/require-js/
  summary: null
  description: |-
    ### Require.js

    ``` javascript
    require.config({
        paths: {
            "moment": "path/to/moment"
        }
    });
    define(["path/to/moment-timezone-with-data"], function (moment) {
        moment().tz("America/Los_Angeles").format();
    });
    ```
- name: Unpack
  id: index#/data-utilities/unpack/
  summary: This converts data in the packed format to the unpacked format
  description: |-
    ### Unpack

    ``` javascript
    moment.tz.unpack(PackedString); // UnpackedObject
    ```

    This converts data in the [packed format](#/data-formats/packed-format/) to the [unpacked format](#/data-formats/unpacked-format/).

    ``` javascript
    var packed = "Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0";

    moment.tz.unpack(packed);
    // {
    //     name    : 'Indian/Mauritius',
    //     abbrs   : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],
    //     offsets : [-230, -240, -300, -240, -300, -240],
    //     untils  : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null]
    // };
    ```
- name: Unpack Base 60
  id: index#/data-utilities/unpack-base-60/
  summary: Convert a base 60 string to a base 10 number
  description: |-
    ### Unpack Base 60

    ``` javascript
    moment.tz.unpackBase60(Base60String); // Number
    ```

    Convert a base 60 string to a base 10 number.

    ``` javascript
    moment.tz.unpackBase60('9');     // 9
    moment.tz.unpackBase60('a');     // 10
    moment.tz.unpackBase60('X');     // 59
    moment.tz.unpackBase60('mh');    // 1337
    moment.tz.unpackBase60('1.9');   // 1.15
    moment.tz.unpackBase60('k.7op'); // 20.123449074074074
    ```
- name: Unpacked Format
  id: index#/data-formats/unpacked-format/
  summary: The unpacked format looks exactly like the zone object
  description: |-
    ### Unpacked Format

    The unpacked format looks exactly like the [zone object](#/zone-object/).

    The data below is for Los Angeles between 2014 and 2018.

    ``` javascript
    {
        name    : 'America/Los_Angeles',
        abbrs   : ['PST', 'PDT','PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST'],
        untils  : [1394359200000, 1414918800000, 1425808800000, 1446368400000, 1457863200000, 1478422800000, 1489312800000, 1509872400000, 1520762400000, 1541322000000, null],
        offsets : [480, 420, 480, 420, 480, 420, 480, 420, 480, 420, 480]
    }
    ```

    The lengths of `abbrs, untils, offsets` are all the same. The `offset` and `abbr` at any index are only active while the timestamp is less than the `until` at that index.

    An easy way to read this aloud is *"between `untils[n-1]` and `untils[n]`, the abbr should be `abbrs[n]` and the offset should be `offsets[n]`"*.

    Note that `untils` are measured in milliseconds and `offsets` are measured in minutes.
- name: Using Time zones
  id: index#/using-timezones/
  summary: There are two interfaces for using time zones with Moment.js
  description: |-
    ## Using Time zones

    There are two interfaces for using time zones with Moment.js.

    `moment.tz(..., String)` does *parsing in given time zone*

    It takes all the same arguments as the `moment` constructor, but uses the last argument as a time zone identifier:

    ``` javascript
    var a = moment.tz("2013-11-18 11:55", "Asia/Taipei");
    var b = moment.tz("2013-11-18 11:55", "America/Toronto");

    a.format(); // 2013-11-18T11:55:00+08:00
    b.format(); // 2013-11-18T11:55:00-05:00

    a.utc().format(); // 2013-11-18T03:55Z
    b.utc().format(); // 2013-11-18T16:55Z
    ```

    Note that created moments have different UTC time because these moments were created in different time zones.

    `moment().tz(String)` does *converting to provided time zone*

    ``` javascript
    var a = moment.utc("2013-11-18 11:55").tz("Asia/Taipei");
    var b = moment.utc("2013-11-18 11:55").tz("America/Toronto");

    a.format(); // 2013-11-18T19:55:00+08:00
    b.format(); // 2013-11-18T06:55:00-05:00

    a.utc().format(); // 2013-11-18T11:55Z
    b.utc().format(); // 2013-11-18T11:55Z
    ```

    In this example, you first create `moment.utc("2013-11-18 11:55")` object in UTC, and then change its timezone to specified. This also works if you create the object in your default timezone: `moment("2013-11-18 11:55")`.

    Note that created moments have equal UTC time because these moments were created in a [default timezone](#/using-timezones/default-timezone/).
- name: Webpack
  id: index#/use-it/webpack/
  summary: 'Note: By default, webpack bundles all moment-timezone data (in moment-timezone 0.5.25, thatâs over 900 KBs minified)'
  description: |-
    ### Webpack

    ``` javascript
    npm install moment-timezone
    ```

    ``` javascript
    var moment = require('moment-timezone');
    moment().tz("America/Los_Angeles").format();
    ```

    **Note:** By default, webpack bundles *all* moment-timezone data (in moment-timezone 0.5.25, thatâs over 900 KBs minified). To strip out unwanted data and bundle only the zone and date range data you need, add the [`moment-timezone-data-webpack-plugin`](https://www.npmjs.com/package/moment-timezone-data-webpack-plugin) package:

    ``` javascript
    // webpack.config.js
    const MomentTimezoneDataPlugin = require('moment-timezone-data-webpack-plugin');
    const currentYear = new Date().getFullYear();

    module.exports = {
        plugins: [
            // To include only specific zones, use the matchZones option
            new MomentTimezoneDataPlugin({
                matchZones: /^America/
            }),

            // To keep all zones but limit data to specific years, use the year range options
            new MomentTimezoneDataPlugin({
                startYear: currentYear - 5,
                endYear: currentYear + 5,
            }),
        ],
    };
    ```

    Also see the primary [Moment.js Webpack documentation](https://momentjs.com/docs/#/use-it/webpack/) for an example of how to reduce Momentâs bundled locale data. Together these techniques can significantly reduce the final bundle size (by over 1 MB minified, or 85 KB minified + gzipped).
- name: Where to use it
  id: index#/use-it/
  summary: To use moment-timezone, you will need moment@2.9.0+, moment-timezone.js, and the moment-timezone data
  description: |-
    ## Where to use it

    To use moment-timezone, you will need `moment@2.9.0+`, `moment-timezone.js`, and the `moment-timezone` data.

    For convenience, there are builds available on [momentjs.com/timezone/](https://momentjs.com/timezone/) with all the zone data or a subset of the data.

    - `moment-timezone-with-data.js` is recommended for server environments (Node.js) and covers all years available.
    - `moment-timezone-with-data-10-year-range.js` is recommend for most browser environments, covering +/- 5 years from the year published.
    - `moment-timezone-with-data-1970-2030.js` covers a 60 year range, for those that need more data but not the larger file size of the full data file.

    If you use one of the above files, you still need `moment.js`, but you do not need `moment-timezone.js` because it is included.
- name: Zone Object
  id: index#/zone-object/
  summary: In order to match a timestamp to an offset, Moment Timezone uses a Zone object
  description: |-
    ## Zone Object

    In order to match a timestamp to an offset, Moment Timezone uses a `Zone` object.

    Though you shouldn't even need to use it, this object's constructor is available on the `moment.tz.Zone` namespace.

    This object has 4 properties.

    ``` javascript
    {
        name    : 'America/Los_Angeles',          // the unique identifier
        abbrs   : ['PDT', 'PST'],                 // the abbreviations
        untils  : [1414918800000, 1425808800000], // the timestamps in milliseconds
        offsets : [420, 480]                      // the offsets in minutes
    }
    ```
