---
name: Babel
slug: babel~7
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '7'
copyright: |-
  © 2014-present Sebastian McKenzie
  Licensed under the MIT License.
  https://babeljs.io/docs//
homepage: https://babeljs.io/

---
- name: '@babel/cli'
  id: babel-cli/index
  summary: Babel comes with a built-in CLI which can be used to compile files from the command line
  description: "# @babel/cli\n\nBabel comes with a built-in CLI which can be used to compile files from the command line.\n\nIn addition, various entry point scripts live in the top-level package at `@babel/cli/bin`. There is a shell-executable utility script, `babel-external-helpers.js`, and the main Babel cli script, `babel.js`.\n\n## Install[​](#install \"Direct link to Install\")\n\nWhile you *can* install Babel CLI globally on your machine, it's much better to install it **locally** project by project.\n\nThere are two primary reasons for this.\n\n1.  Different projects on the same machine can depend on different versions of Babel allowing you to update them individually.\n2.  Not having an implicit dependency on the environment you are working in makes your project far more portable and easier to setup.\n\nWe can install Babel CLI locally by running:\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/core @babel/cli\n```\n\n``` shell\nyarn add --dev @babel/core @babel/cli\n```\n\n``` shell\npnpm add --save-dev @babel/core @babel/cli\n```\n\n> **Note:** If you do not have a `package.json`, create one before installing. This will ensure proper interaction with the `npx` command.\n\nAfter that finishes installing, your `package.json` file should include:\n\n``` diff\n{\n  \"devDependencies\": {\n+   \"@babel/cli\": \"^7.0.0\",\n+   \"@babel/core\": \"^7.0.0\"\n  }\n}\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n> **Note:** Please install `@babel/cli` and `@babel/core` first before `npx babel`, otherwise `npx` will install out-of-dated `babel` 6.x. Other than [npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b), you can also drop it inside of an [npm run script](https://docs.npmjs.com/cli/run-script) or you may instead execute with the relative path instead. `./node_modules/.bin/babel`\n\n``` sh\nnpx babel script.js\n```\n\n### Print Usage[​](#print-usage \"Direct link to Print Usage\")\n\n``` sh\nnpx babel --help\n```\n\n### Compile Files[​](#compile-files \"Direct link to Compile Files\")\n\nCompile the file `script.js` and **output to stdout**.\n\n``` sh\nnpx babel script.js\n# output...\n```\n\nIf you would like to **output to a file** you may use `--out-file` or `-o`.\n\n``` sh\nnpx babel script.js --out-file script-compiled.js\n```\n\nTo compile a file **every time that you change it**, use the `--watch` or `-w` option:\n\n``` sh\nnpx babel script.js --watch --out-file script-compiled.js\n```\n\n### Compile with Source Maps[​](#compile-with-source-maps \"Direct link to Compile with Source Maps\")\n\n> **Note:** Since v7.19.3, if this parameter is not specified, `@babel/cli` will follow the [configuration files](https://babeljs.io/docs/en/config-files).\n\nIf you would then like to add a **source map file** you can use `--source-maps` or `-s`.\n\n``` sh\nnpx babel script.js --out-file script-compiled.js --source-maps\n```\n\nOr, if you'd rather have **inline source maps**, use `--source-maps inline` instead.\n\n``` sh\nnpx babel script.js --out-file script-compiled.js --source-maps inline\n```\n\n### Compile Directories[​](#compile-directories \"Direct link to Compile Directories\")\n\nCompile the entire `src` directory and output it to the `lib` directory by using either `--out-dir` or `-d`. This doesn't overwrite any other files or directories in `lib`.\n\n``` sh\nnpx babel src --out-dir lib\n```\n\nCompile the entire `src` directory and output it as a single concatenated file.\n\n``` sh\nnpx babel src --out-file script-compiled.js\n```\n\n#### Directories with TypeScript Files[​](#directories-with-typescript-files \"Direct link to Directories with TypeScript Files\")\n\nUse the `--extensions` option to specify what file extensions Babel should handle when compiling the entire `src` directory. The default `--extensions` can be accessed from [`Babel.DEFAULT_EXTENSIONS`](../babel-core/index#default_extensions).\n\n``` sh\nnpx babel src --out-dir lib \\\n  --extensions .ts,.js,.tsx,.jsx,.cjs,.mjs \\\n  --presets=@babel/preset-typescript,@babel/preset-env,@babel/preset-react\n```\n\n### Ignore files[​](#ignore-files \"Direct link to Ignore files\")\n\nIgnore spec and test files\n\n``` sh\nnpx babel src --out-dir lib --ignore \"src/**/*.spec.js\",\"src/**/*.test.js\"\n```\n\n### Copy files[​](#copy-files \"Direct link to Copy files\")\n\nCopy files that will not be compiled\n\n``` sh\nnpx babel src --out-dir lib --copy-files\n```\n\nIf you don't want to copy ignored JavaScript files:\n\nHistory\n\n| Version | Changes                                                                                   |\n|---------|-------------------------------------------------------------------------------------------|\n| v7.8.0  | Added `--copy-ignored`                                                                    |\n| v7.8.4  | Change `copyeIgnored` option default to `true`, it can be disabled by `--no-copy-ignored` |\n\n``` sh\nnpx babel src --out-dir lib --copy-files --no-copy-ignored\n```\n\n### Piping Files[​](#piping-files \"Direct link to Piping Files\")\n\nPipe a file in via stdin and output it to `script-compiled.js`\n\n``` sh\nnpx babel --out-file script-compiled.js < script.js\n```\n\n### Using Plugins[​](#using-plugins \"Direct link to Using Plugins\")\n\nUse the `--plugins` option to specify plugins to use in compilation\n\n``` sh\nnpx babel script.js --out-file script-compiled.js --plugins=@babel/proposal-class-properties,@babel/transform-modules-amd\n```\n\n### Using Presets[​](#using-presets \"Direct link to Using Presets\")\n\nUse the `--presets` option to specify presets to use in compilation\n\n``` sh\nnpx babel script.js --out-file script-compiled.js --presets=@babel/preset-env,@babel/flow\n```\n\n### Using Config Files[​](#using-config-files \"Direct link to Using Config Files\")\n\n#### Ignoring .babelrc.json or .babelrc[​](#ignoring-babelrcjson-or-babelrc \"Direct link to Ignoring .babelrc.json or .babelrc\")\n\nIgnore the configuration from the project's `.babelrc` or `.babelrc.json` file and use the cli options e.g. for a custom build\n\n``` sh\nnpx babel --no-babelrc script.js --out-file script-compiled.js --presets=@babel/preset-env,@babel/preset-react\n```\n\n#### Custom config path[​](#custom-config-path \"Direct link to Custom config path\")\n\n``` sh\nnpx babel --config-file /path/to/my/babel.config.json --out-dir dist ./src\n```\n\nSee [here](../config-files/index) for more information about config files.\n\n### Set File Extensions[​](#set-file-extensions \"Direct link to Set File Extensions\")\n\nAdded in: `v7.8.0`\n\nBy default, the transpiled file will use the `.js` extension.\n\nYou can control the output file extension with `--out-file-extension`\n\n``` sh\nbabel src --out-dir lib --out-file-extension .mjs\n```\n\nYou can also preserve the input file extension with `--keep-file-extension`\n\n``` sh\nnpx babel src-with-mjs-and-cjs --out-dir lib --keep-file-extension\n```\n\nNote that `--keep-file-extension` and `--out-file-extension` cannot be used together.\n\n### Advanced Usage[​](#advanced-usage \"Direct link to Advanced Usage\")\n\nThere are many more options available, see [options](../options/index), `babel --help` and other sections for more information.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-cli/](https://babeljs.io/docs/babel-cli/)"
- name: '@babel/code-frame'
  id: babel-code-frame/index
  summary: If the column number is not known, you may omit it
  description: "# @babel/code-frame\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/code-frame\n```\n\n``` shell\nyarn add --dev @babel/code-frame\n```\n\n``` shell\npnpm add --save-dev @babel/code-frame\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n``` js\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\n  constructor()\n}`;\nconst location = { start: { line: 2, column: 16 } };\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n``` text\n  1 | class Foo {\n> 2 |   constructor()\n    |                ^\n  3 | }\n```\n\nIf the column number is not known, you may omit it.\n\nYou can also pass an `end` hash in `location`.\n\n``` js\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\n  constructor() {\n    console.log(\"hello\");\n  }\n}`;\nconst location = {\n  start: { line: 2, column: 17 },\n  end: { line: 4, column: 3 },\n};\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n``` text\n  1 | class Foo {\n> 2 |   constructor() {\n    |                 ^\n> 3 |     console.log(\"hello\");\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n> 4 |   }\n    | ^^^\n  5 | };\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `highlightCode`[​](#highlightcode \"Direct link to highlightcode\")\n\n`boolean`, defaults to `false`.\n\nToggles syntax highlighting the code as JavaScript for terminals.\n\n### `linesAbove`[​](#linesabove \"Direct link to linesabove\")\n\n`number`, defaults to `2`.\n\nAdjust the number of lines to show above the error.\n\n### `linesBelow`[​](#linesbelow \"Direct link to linesbelow\")\n\n`number`, defaults to `3`.\n\nAdjust the number of lines to show below the error.\n\n### `forceColor`[​](#forcecolor \"Direct link to forcecolor\")\n\n`boolean`, defaults to `false`.\n\nEnable this to forcibly syntax highlight the code as JavaScript (for non-terminals); overrides `highlightCode`.\n\n### `message`[​](#message \"Direct link to message\")\n\n`string`, otherwise nothing\n\nPass in a string to be displayed inline (if possible) next to the highlighted location in the code. If it can't be positioned inline, it will be placed above the code frame.\n\n``` text\n1 | class Foo {\n> 2 |   constructor()\n  |                ^ Missing {\n3 | };\n```\n\n## Upgrading from prior versions[​](#upgrading-from-prior-versions \"Direct link to Upgrading from prior versions\")\n\nPrior to version 7, the only API exposed by this module was for a single line and optional column pointer. The old API will now log a deprecation warning.\n\nThe new API takes a `location` object, similar to what is available in an AST.\n\nThis is an example of the deprecated (but still available) API:\n\n``` js\nimport codeFrame from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\n  constructor()\n}`;\nconst lineNumber = 2;\nconst colNumber = 16;\n\nconst result = codeFrame(rawLines, lineNumber, colNumber, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\nTo get the same highlighting using the new API:\n\n``` js\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\n  constructor() {\n    console.log(\"hello\");\n  }\n}`;\nconst location = { start: { line: 2, column: 16 } };\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-code-frame/](https://babeljs.io/docs/babel-code-frame/)"
- name: '@babel/core'
  id: babel-core/index
  summary: All transformations will use your local configuration files
  description: "# @babel/core\n\n``` js\nvar babel = require(\"@babel/core\");\nimport { transform } from \"@babel/core\";\nimport * as babel from \"@babel/core\";\n```\n\nAll transformations will use your local [configuration files](../config-files/index).\n\n## transform[​](#transform \"Direct link to transform\")\n\n> babel.transform(code: string, [options?](#options): Object, callback: Function)\n\nTransforms the passed in `code`. Calling a callback with an object with the generated code, source map, and AST.\n\n``` js\nbabel.transform(code, options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n**Example**\n\n``` js\nbabel.transform(\"code();\", options, function(err, result) {\n  result.code;\n  result.map;\n  result.ast;\n});\n```\n\n> Compat Note:\n>\n> In Babel 6, this method was synchronous and `transformSync` did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use `transformSync` since this backward-compatibility will be dropped in Babel 8.\n\n## transformSync[​](#transformsync \"Direct link to transformSync\")\n\n> babel.transformSync(code: string, [options?](#options): Object)\n\nTransforms the passed in `code`. Returning an object with the generated code, source map, and AST.\n\n``` js\nbabel.transformSync(code, options); // => { code, map, ast }\n```\n\n**Example**\n\n``` js\nvar result = babel.transformSync(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n```\n\n## transformAsync[​](#transformasync \"Direct link to transformAsync\")\n\n> babel.transformAsync(code: string, [options?](#options): Object)\n\nTransforms the passed in `code`. Returning an promise for an object with the generated code, source map, and AST.\n\n``` js\nbabel.transformAsync(code, options); // => Promise<{ code, map, ast }>\n```\n\n**Example**\n\n``` js\nbabel.transformAsync(\"code();\", options).then(result => {\n  result.code;\n  result.map;\n  result.ast;\n});\n```\n\n## transformFile[​](#transformfile \"Direct link to transformFile\")\n\n> babel.transformFile(filename: string, [options?](#options): Object, callback: Function)\n\nAsynchronously transforms the entire contents of a file.\n\n``` js\nbabel.transformFile(filename, options, callback);\n```\n\n**Example**\n\n``` js\nbabel.transformFile(\"filename.js\", options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n## transformFileSync[​](#transformfilesync \"Direct link to transformFileSync\")\n\n> babel.transformFileSync(filename: string, [options?](#options): Object)\n\nSynchronous version of `babel.transformFile`. Returns the transformed contents of the `filename`.\n\n``` js\nbabel.transformFileSync(filename, options); // => { code, map, ast }\n```\n\n**Example**\n\n``` js\nbabel.transformFileSync(\"filename.js\", options).code;\n```\n\n## transformFileAsync[​](#transformfileasync \"Direct link to transformFileAsync\")\n\n> babel.transformFileAsync(filename: string, [options?](#options): Object)\n\nPromise version of `babel.transformFile`. Returns a promise for the transformed contents of the `filename`.\n\n``` js\nbabel.transformFileAsync(filename, options); // => Promise<{ code, map, ast }>\n```\n\n**Example**\n\n``` js\nbabel.transformFileAsync(\"filename.js\", options).then(result => {\n  result.code;\n});\n```\n\n## transformFromAst[​](#transformfromast \"Direct link to transformFromAst\")\n\n> babel.transformFromAst(ast: Object, code?: string, [options?](#options): Object, callback: Function): FileNode \\| null\n\nGiven an [AST](https://astexplorer.net/), transform it.\n\n``` js\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nbabel.transformFromAst(parsedAst, sourceCode, options, function(err, result) {\n  const { code, map, ast } = result;\n});\n```\n\n> Compat Note:\n>\n> In Babel 6, this method was synchronous and `transformFromAstSync` did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use `transformFromAstSync` since this backward-compatibility will be dropped in Babel 8.\n\n## transformFromAstSync[​](#transformfromastsync \"Direct link to transformFromAstSync\")\n\n> babel.transformFromAstSync(ast: Object, code?: string, [options?](#options): Object)\n\nGiven an [AST](https://astexplorer.net/), transform it.\n\n``` js\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nconst { code, map, ast } = babel.transformFromAstSync(\n  parsedAst,\n  sourceCode,\n  options\n);\n```\n\n## transformFromAstAsync[​](#transformfromastasync \"Direct link to transformFromAstAsync\")\n\n> babel.transformFromAstAsync(ast: Object, code?: string, [options?](#options): Object)\n\nGiven an [AST](https://astexplorer.net/), transform it.\n\n``` js\nconst sourceCode = \"if (true) return;\";\nbabel\n  .parseAsync(sourceCode, { parserOpts: { allowReturnOutsideFunction: true } })\n  .then(parsedAst => {\n    return babel.transformFromAstAsync(parsedAst, sourceCode, options);\n  })\n  .then(({ code, map, ast }) => {\n    // ...\n  });\n```\n\n## parse[​](#parse \"Direct link to parse\")\n\n> babel.parse(code: string, [options?](#options): Object, callback: Function)\n\nGiven some code, parse it using Babel's standard behavior. Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.\n\n> Compat Note:\n>\n> In Babel 7's early betas, this method was synchronous and `parseSync` did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 stable and need synchronous behavior, please use `parseSync` since this backward-compatibility will be dropped in Babel 8.\n\n## parseSync[​](#parsesync \"Direct link to parseSync\")\n\n> babel.parseSync(code: string, [options?](#options): Object)\n\nReturns an AST.\n\nGiven some code, parse it using Babel's standard behavior. Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.\n\n## parseAsync[​](#parseasync \"Direct link to parseAsync\")\n\n> babel.parseAsync(code: string, [options?](#options): Object)\n\nReturns a promise for an AST.\n\nGiven some code, parse it using Babel's standard behavior. Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.\n\n## Advanced APIs[​](#advanced-apis \"Direct link to Advanced APIs\")\n\nMany systems that wrap Babel like to automatically inject plugins and presets, or override options. To accomplish this goal, Babel exposes several functions that aid in loading the configuration part-way without transforming.\n\n### loadOptions[​](#loadoptions \"Direct link to loadOptions\")\n\n> babel.loadOptions([options?](#options): Object)\n\nResolve Babel's options fully, resulting in an options object where:\n\n- `opts.plugins` is a full list of `Plugin` instances.\n- `opts.presets` is empty and all presets are flattened into `opts`.\n- It can be safely passed back to Babel. Fields like [`\"babelrc\"`](../options/index#babelrc) have been set to `false` so that later calls to Babel will not make a second attempt to load config files.\n\n`Plugin` instances aren't meant to be manipulated directly, but often callers will serialize this `opts` to JSON to use it as a cache key representing the options Babel has received. Caching on this isn't 100% guaranteed to invalidate properly, but it is the best we have at the moment.\n\n### loadPartialConfig[​](#loadpartialconfig \"Direct link to loadPartialConfig\")\n\n> babel.loadPartialConfig([options?](#options): Object): PartialConfig\n\nTo allow systems to easily manipulate and validate a user's config, this function resolves the plugins and presets and proceeds no further. The expectation is that callers will take the config's `.options`, manipulate it as they see fit and pass it back to Babel again.\n\nThis function accepts one additional option as part of the options object in addition to the standard [options](#options): `showIgnoredFiles`. When set to true, `loadPartialConfig` always returns a result when a file is ignored, rather than `null`. This is useful in order to allow the caller to access the list of files that influenced this outcome, e.g. for watch mode. The caller can determine whether a file was ignored based on the returned `fileHandling` property.\n\n- `babelrc: string | void` - The path of the [file-relative configuration](../config-files/index#file-relative-configuration) file, if there was one.\n- `babelignore: string | void` - The path of the `.babelignore` file, if there was one.\n- `config: string | void` - The path of the [project-wide config file](../config-files/index#project-wide-configuration) file, if there was one.\n- `options: ValidatedOptions` - The partially resolved options, which can be manipulated and passed back to Babel again.\n  - `plugins: Array<ConfigItem>` - See below.\n  - `presets: Array<ConfigItem>` - See below.\n  - It can be safely passed back to Babel. Options like [`\"babelrc\"`](../options/index#babelrc) have been set to false so that later calls to Babel will not make a second attempt to load config files.\n- `hasFilesystemConfig(): boolean` - Check if the resolved config loaded any settings from the filesystem.\n- `fileHandling` - This is set to `\"transpile\"`, `\"ignored\"`, or `\"unsupported\"` to indicate to the caller what to do with this file.\n- `files` - A `Set` of file paths that were read to build the resulting config, including project wide config files, local config files, extended config files, ignore files, etc. Useful for implementing watch mode or cache invalidation.\n\n[`ConfigItem`](#configitem-type) instances expose properties to introspect the values, but each item should be treated as immutable. If changes are desired, the item should be removed from the list and replaced with either a normal Babel config value, or with a replacement item created by `babel.createConfigItem`. See that function for information about `ConfigItem` fields.\n\n### createConfigItem[​](#createconfigitem \"Direct link to createConfigItem\")\n\n> babel.createConfigItem(value: string \\| {} \\| Function \\| \\[string \\| {} \\| Function, {} \\| void\\], { dirname?: string, type?: \"preset\" \\| \"plugin\" }): ConfigItem\n\nAllows build tooling to create and cache config items up front. If this function is called multiple times for a given plugin, Babel will call the plugin's function itself multiple times. If you have a clear set of expected plugins and presets to inject, pre-constructing the config items would be recommended.\n\n### `ConfigItem` type[​](#configitem-type \"Direct link to configitem-type\")\n\nEach `ConfigItem` exposes all of the information Babel knows. The fields are:\n\n- `value: {} | Function` - The resolved value of the plugin.\n- `options: {} | void` - The options object passed to the plugin.\n- `dirname: string` - The path that the options are relative to.\n- `name: string | void` - The name that the user gave the plugin instance, e.g. `plugins: [ ['env', {}, 'my-env'] ]`\n- `file: Object | void` - Information about the plugin's file, if Babel knows it.\n  - `request: string` - The file that the user requested, e.g. `\"@babel/env\"`\n  - `resolved: string` - The full path of the resolved file, e.g. `\"/tmp/node_modules/@babel/preset-env/lib/index.js\"`\n\n## DEFAULT_EXTENSIONS[​](#default_extensions \"Direct link to DEFAULT_EXTENSIONS\")\n\n> babel.DEFAULT_EXTENSIONS: readonly string\\[\\];\n\nA list of default extensions supported by babel (\".js\", \".jsx\", \".es6\", \".es\", \".mjs\", \"cjs\"). This list is used by @babel/register and @babel/cli to determine which files need transpiling. Extending this list isn't possible, however @babel/cli does provide ways to support other extensions with `--extensions`.\n\n## Options[​](#options \"Direct link to Options\")\n\nSee [the full option list here](../options/index).\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-core/](https://babeljs.io/docs/babel-core/)"
- name: '@babel/generator'
  id: babel-generator/index
  summary: Turns an AST into code
  description: "# @babel/generator\n\n> Turns an AST into code.\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/generator\n```\n\n``` shell\nyarn add --dev @babel/generator\n```\n\n``` shell\npnpm add --save-dev @babel/generator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n``` js\nimport { parse } from \"@babel/parser\";\nimport generate from \"@babel/generator\";\n\nconst code = \"class Example {}\";\nconst ast = parse(code);\n\nconst output = generate(\n  ast,\n  {\n    /* options */\n  },\n  code\n);\n```\n\n> **Note:** The symbols like white spaces or new line characters are not preserved in the AST. When Babel generator prints code from the AST, the output format is not guaranteed.\n\n## Options[​](#options \"Direct link to Options\")\n\nHistory\n\n| Version | Changes                |\n|---------|------------------------|\n| v7.21.0 | Added `inputSourceMap` |\n\nOptions for formatting output:\n\n| name                   | type                | default         | description                                                                                                                                                                                                                                                        |\n|------------------------|---------------------|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| auxiliaryCommentAfter  | string              |                 | Optional string to add as a block comment at the end of the output file                                                                                                                                                                                            |\n| auxiliaryCommentBefore | string              |                 | Optional string to add as a block comment at the start of the output file                                                                                                                                                                                          |\n| comments               | boolean             | `true`          | Should comments be included in output                                                                                                                                                                                                                              |\n| compact                | boolean or `'auto'` | `opts.minified` | Set to `true` to avoid adding whitespace for formatting                                                                                                                                                                                                            |\n| concise                | boolean             | `false`         | Set to `true` to reduce whitespace (but not as much as `opts.compact`)                                                                                                                                                                                             |\n| decoratorsBeforeExport | boolean             |                 | Set to `true` to print decorators before `export` in output.                                                                                                                                                                                                       |\n| filename               | string              |                 | Used in warning messages                                                                                                                                                                                                                                           |\n| jsescOption            | object              |                 | Use `jsesc` to process literals. `jsesc` is applied to numbers only if `jsescOption.numbers` (added in `v7.9.0`) is present. You can customize `jsesc` by [passing options](https://github.com/mathiasbynens/jsesc#api) to it.                                     |\n| jsonCompatibleStrings  | boolean             | `false`         | Set to true to run `jsesc` with \"json\": true to print \"\\u00A9\" vs. \"©\";                                                                                                                                                                                            |\n| minified               | boolean             | `false`         | Should the output be minified                                                                                                                                                                                                                                      |\n| retainFunctionParens   | boolean             | `false`         | Retain parens around function expressions (could be used to change engine parsing behavior)                                                                                                                                                                        |\n| retainLines            | boolean             | `false`         | Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces)                                                                                                                                                        |\n| shouldPrintComment     | function            | `opts.comments` | Function that takes a comment (as a string) and returns `true` if the comment should be included in the output. By default, comments are included if `opts.comments` is `true` or if `opts.minified` is `false` and the comment contains `@preserve` or `@license` |\n| topicToken             | `'%'` or `'#'`      |                 | The token to use with [Hack-pipe topic references](../babel-plugin-proposal-pipeline-operator/index). This is required when there are any `TopicReference` nodes.                                                                                                  |\n\nOptions for source maps:\n\n| name           | type             | default | description                                                                                                            |\n|----------------|------------------|---------|------------------------------------------------------------------------------------------------------------------------|\n| sourceMaps     | boolean          | `false` | Enable generating source maps                                                                                          |\n| inputSourceMap | string or object |         | The input source map                                                                                                   |\n| sourceRoot     | string           |         | A root for all relative URLs in the source map                                                                         |\n| sourceFileName | string           |         | The filename for the source code (i.e. the code in the `code` argument). This will only be used if `code` is a string. |\n\n## AST from Multiple Sources[​](#ast-from-multiple-sources \"Direct link to AST from Multiple Sources\")\n\nIn most cases, Babel does a 1:1 transformation of input-file to output-file. However, you may be dealing with AST constructed from multiple sources - JS files, templates, etc. If this is the case, and you want the sourcemaps to reflect the correct sources, you'll need to pass an object to `generate` as the `code` parameter. Keys should be the source filenames, and values should be the source content.\n\nHere's an example of what that might look like:\n\n``` js\nimport { parse } from \"@babel/parser\";\nimport generate from \"@babel/generator\";\n\nconst a = \"var a = 1;\";\nconst b = \"var b = 2;\";\nconst astA = parse(a, { sourceFilename: \"a.js\" });\nconst astB = parse(b, { sourceFilename: \"b.js\" });\nconst ast = {\n  type: \"Program\",\n  body: [].concat(astA.program.body, astB.program.body),\n};\n\nconst { code, map } = generate(\n  ast,\n  { sourceMaps: true },\n  {\n    \"a.js\": a,\n    \"b.js\": b,\n  }\n);\n\n// Sourcemap will point to both a.js and b.js where appropriate.\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-generator/](https://babeljs.io/docs/babel-generator/)"
- name: '@babel/helper-compilation-targets'
  id: babel-helper-compilation-targets/index
  summary: '@babel/helper-compilation-targets is a helper package that works with compilation targets (browsers or other environments like node) and compat tables (knowing what version supports a specific syntax)'
  description: "# @babel/helper-compilation-targets\n\n`@babel/helper-compilation-targets` is a helper package that works with compilation targets (browsers or other environments like node) and compat tables (knowing what version supports a specific syntax). It is used by `@babel/preset-env` to determine which plugin should be enabled based on the [`targets`](../options/index#targets) option.\n\n``` js\nimport {\n  filterItems,\n  default as getTargets,\n  isRequired,\n} from \"@babel/helper-compilation-targets\";\n```\n\n## filterItems[​](#filteritems \"Direct link to filterItems\")\n\n``` typescript\nfunction filterItems(\n  list: { [feature: string]: Targets },\n\n  // A set of plugins that should always be included\n  includes: Set<string>,\n\n  // A set of plugins that should always be excluded\n  excludes: Set<string>,\n  targets: Targets,\n\n  // A set of plugins that should always be included if `includes` is empty\n  defaultIncludes: Array<string> | null,\n\n  // A set of plugins that should always be excluded if `excludes` is empty\n  defaultExcludes?: Array<string> | null,\n\n  // A map from transform plugin to syntax plugin for backward compatibility with older `@babel/parser` versions\n  pluginSyntaxMap?: Map<string, string | null>\n): Set<string>; // A set of enabled plugins\n```\n\nGiven a compat data table `list` (i.e. `@babel/compat-data`) and [browser targets](../babel-preset-env/index#targets) `targets`, return a set of required plugins.\n\n**Example**\n\n``` js\nconst compatData = {\n  \"transform-feature-1\": {\n    chrome: \"1\",\n    firefox: \"1\",\n  },\n  \"transform-feature-2\": {\n    chrome: \"2\",\n    firefox: \"2\",\n  },\n  \"transform-feature-3\": {\n    chrome: \"3\",\n    firefox: \"3\",\n  },\n  \"transform-feature-4\": {\n    chrome: \"4\",\n    firefox: \"4\",\n  },\n};\n\n// filter a set of plugins required when compiled to chrome 2\n// returns new Set([\"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n});\n\n// filter a set of plugins required when compiled to chrome 2 and firefox 1\n// returns new Set([\"transform-feature-2\", \"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n  firefox: 1,\n});\n\n// always include \"transform-feature-2\" and exclude \"transform-feature-4\"\n// returns new Set([\"transform-feature-2\", \"transform-feature-3\"])\nfilterItems(\n  compatData,\n  new Set([\"transform-feature-2\"]),\n  new Set([\"transform-feature-4\"]),\n  {\n    chrome: 2,\n  }\n);\n\n// syntax-feature-2 is required to allow older @babel/parser to parse\n// the feature-2 syntax supported in chrome 2\n\n// returns new Set([\"syntax-feature-2\", \"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(\n  compatData,\n  new Set(),\n  new Set(),\n  {\n    chrome: 2,\n  },\n  null,\n  null,\n  new Map([[\"transform-feature-2\", \"syntax-feature-2\"]])\n);\n```\n\n> When a new ES feature reaches stage-4, it will be matured in `@babel/parser`, which means it will always be parsed regardless of the plugin. However we need the syntax plugin for older `@babel/parser`.\n\n## getTargets[​](#gettargets \"Direct link to getTargets\")\n\n``` typescript\ntype GetTargetsOption = {\n  // This is not the path of the config file, but the path where start searching it from\n  configPath?: string;\n\n  // The path of the config file\n  configFile?: string;\n\n  // The env to pass to browserslist\n  browserslistEnv?: string;\n\n  // true to disable config loading\n  ignoreBrowserslistConfig?: boolean;\n};\n\ntype InputTargets = {\n  ...Targets,\n\n  browsers?: Browsers,\n\n  // When `true`, this completely replaces the `browsers` option.\n  // When `intersect`, this is intersected with the `browsers`\n  // option (giving the higher browsers as the result).\n  esmodules?: boolean | \"intersect\",\n};\n\nfunction getTargets(\n  inputTargets: InputTargets = {},\n  options: GetTargetsOption = {}\n): Targets;\n```\n\nNormalize user specified `targets` to a list of supported targets. See also (`@babel/preset-env`)\\[preset-env.md#options\\] for `GetTargetsOption`\n\n**Example**\n\n``` js\n// Return the default compilation targets\n// returns {}\ngetTargets();\n```\n\nAn empty compilation target is equivalent to [force all transforms](../babel-preset-env/index#forceAllTransforms). The default compilation targets will be changed to browserlists query [`defaults, not IE 11`](https://runkit.com/jlhwung/605cd58b2c44c6001a463717) in Babel 8.\n\nOne can also query the compilation targets with ES Module support, like [`@vue/babel-preset-app`](https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app) did in order to provide a set of modern targets.\n\n``` js\n/* returns {\n  \"android\": \"61.0.0\",\n  \"chrome\": \"61.0.0\",\n  \"edge\": \"16.0.0\",\n  \"firefox\": \"60.0.0\",\n  \"ios\": \"10.3.0\",\n  \"node\": \"13.2.0\",\n  \"opera\": \"48.0.0\",\n  \"safari\": \"10.1.0\",\n  \"samsung\": \"8.2.0\",\n} */\ngetTargets({\n  esmodules: true,\n});\n```\n\nNote: The ES Module compat data is generated from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#browser_compatibility).\n\n## isRequired[​](#isrequired \"Direct link to isRequired\")\n\n``` typescript\nfunction isRequired(\n  name: string,\n  targets: Targets,\n  {\n    compatData = pluginsCompatData,\n    includes,\n    excludes,\n  }: {\n    compatData?: { [feature: string]: Targets };\n    includes?: Set<string>;\n    excludes?: Set<string>;\n  } = {}\n): boolean;\n```\n\nGiven browser targets `targets`, query the `compatData` whether plugin `name` is required for compilation. When `compatData` is not specified, the default data source is `@babel/compat-data`\n\n**Example**\n\n``` javascript\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `proposal-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    \"proposal-optional-chaining\",\n    targets\n  );\n};\n```\n\nPlugin authors can use `isRequired` to optimize plugin output given different `targets`:\n\n``` javascript\n// a naive plugin replace `a.b` to `a != null && a.b`\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `proposal-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    \"proposal-optional-chaining\",\n    targets\n  );\n  const visited = new WeakSet();\n  return {\n    visitor: {\n      MemberExpression(path) {\n        if (path.matchesPattern(\"a.b\")) {\n          if (visited.has(path.node)) return;\n          visited.add(path.node);\n          if (optionalChainingSupported) {\n            // When optional chaining is supported,\n            // output `a?.b` instead of `a != null && a.b`\n            path.replaceWith(api.templates`a?.b`);\n          } else {\n            path.replaceWith(api.templates`a != null && ${path.node}`);\n          }\n        }\n      },\n    },\n  };\n};\n```\n\n[`@babel/plugin-proposal-object-rest-spread`](https://github.com/babel/babel/blob/962d81483ef6a57a4a3eca8230ae40795b695147/packages/babel-plugin-proposal-object-rest-spread/src/index.js#L23) uses `isRequired` to determine whether targets already have native `Object.assign` support.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-helper-compilation-targets/](https://babeljs.io/docs/babel-helper-compilation-targets/)"
- name: '@babel/helper-module-imports'
  id: babel-helper-module-imports/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/helper-module-imports\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/helper-module-imports --save\n```\n\n``` shell\nyarn add @babel/helper-module-imports\n```\n\n``` shell\npnpm add @babel/helper-module-imports\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### `import \"source\"`[​](#import-source \"Direct link to import-source\")\n\n``` js\nimport { addSideEffect } from \"@babel/helper-module-imports\";\naddSideEffect(path, 'source');\n```\n\n### `import { named as _named } from \"source\"`[​](#import--named-as-_named--from-source \"Direct link to import--named-as-_named--from-source\")\n\n``` js\nimport { addNamed } from \"@babel/helper-module-imports\";\n// if the hintedName isn't set, the function will gennerate a uuid as hintedName itself such as '_named'\naddNamed(path, 'named', 'source');\n```\n\n### `import { named as _hintedName } from \"source\"`[​](#import--named-as-_hintedname--from-source \"Direct link to import--named-as-_hintedname--from-source\")\n\n``` js\nimport { addNamed } from \"@babel/helper-module-imports\";\naddNamed(path, 'named', 'source', { nameHint: \"hintedName\" });\n```\n\n### `import _default from \"source\"`[​](#import-_default-from-source \"Direct link to import-_default-from-source\")\n\n``` js\nimport { addDefault } from \"@babel/helper-module-imports\";\naddDefault(path, 'source');\n```\n\n### `import _hintedName from \"source\"`[​](#import-_hintedname-from-source \"Direct link to import-_hintedname-from-source\")\n\n``` js\nimport { addDefault } from \"@babel/helper-module-imports\";\n// If 'hintedName' exists in scope, the name will be '_hintedName2', '_hintedName3', ...\naddDefault(path, 'source', { nameHint: \"hintedName\" })\n```\n\n### `import * as _namespace from \"source\"`[​](#import--as-_namespace-from-source \"Direct link to import--as-_namespace-from-source\")\n\n``` js\nimport { addNamespace } from \"@babel/helper-module-imports\";\naddNamespace(path, 'source');\n```\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n### Adding a named import[​](#adding-a-named-import \"Direct link to Adding a named import\")\n\n``` js\nimport { addNamed } from \"@babel/helper-module-imports\";\n\nexport default function({ types: t }) {\n  return {\n    visitor: {\n      ReferencedIdentifier(path) {\n        let importName = this.importName;\n        if (importName) {\n          importName = t.cloneDeep(importName);\n        } else {\n          // require('bluebird').coroutine\n          importName = this.importName = addNamed(path, 'coroutine', 'bluebird');\n        }\n\n        path.replaceWith(importName);\n      }\n    },\n  };\n}\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-helper-module-imports/](https://babeljs.io/docs/babel-helper-module-imports/)"
- name: '@babel/helper-validator-identifier'
  id: babel-helper-validator-identifier/index
  summary: '@babel/helper-validator-identifier is a utility package for parsing JavaScript keywords and identifiers'
  description: "# @babel/helper-validator-identifier\n\n`@babel/helper-validator-identifier` is a utility package for parsing JavaScript keywords and identifiers. It provides several helper functions for identifying valid identifier names and detecting reserved words and keywords.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/helper-validator-identifier\n```\n\n``` shell\nyarn add @babel/helper-validator-identifier\n```\n\n``` shell\npnpm add @babel/helper-validator-identifier\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nTo use the package in your code, import the required functions from `@babel/helper-validator-identifier`:\n\n``` js\nimport {\n  isIdentifierName,\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n```\n\n### `isIdentifierName`[​](#isidentifiername \"Direct link to isidentifiername\")\n\n``` typescript\nfunction isIdentifierName(name: string): boolean\n```\n\nThe `isIdentifierName` function checks whether a given string can be a valid [identifier name](https://tc39.es/ecma262/#prod-IdentifierName). Note that it doesn't handle unicode escape sequences. For example, `isIdentifierName(\"\\\\u0061\")` returns `false` while `\\u0061` could be an JavaScript identifier name (`a`).\n\n### `isIdentifierStart`[​](#isidentifierstart \"Direct link to isidentifierstart\")\n\n``` typescript\nfunction isIdentifierStart(codepoint: number): boolean\n```\n\nThe `isIdentifierStart` function checks whether a given Unicode code point can start an identifier, as defined by the [IdentifierStartChar](https://tc39.es/ecma262/#prod-IdentifierStartChar).\n\n### `isIdentifierChar`[​](#isidentifierchar \"Direct link to isidentifierchar\")\n\n``` typescript\nfunction isIdentifierChar(codepoint: number): boolean\n```\n\nThe `isIdentifierChar` function checks whether a given Unicode code point can be part of an identifier, as defined by the [IdentifierPartChar](https://tc39.es/ecma262/#prod-IdentifierPartChar).\n\n### Keywords and Reserved words helpers[​](#keywords-and-reserved-words-helpers \"Direct link to Keywords and Reserved words helpers\")\n\nThese helpers detect [keyword and reserved words](https://tc39.es/ecma262/#sec-keywords-and-reserved-words). For more information, see the [implementation](https://github.com/babel/babel/blob/main/packages/babel-helper-validator-identifier/src/keyword.ts).\n\n``` typescript\nfunction isReservedWord(word: string, inModule: boolean): boolean\nfunction isStrictReservedWord(word: string, inModule: boolean): boolean\nfunction isStrictBindOnlyReservedWord(word: string): boolean\nfunction isStrictBindReservedWord(word: string, inModule: boolean): boolean\nfunction isKeyword(word: string): boolean\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-helper-validator-identifier/](https://babeljs.io/docs/babel-helper-validator-identifier/)"
- name: '@babel/parser'
  id: babel-parser/index
  summary: The Babel parser (previously Babylon) is a JavaScript parser used in Babel
  description: "# @babel/parser\n\nThe Babel parser (previously Babylon) is a JavaScript parser used in [Babel](https://github.com/babel/babel).\n\n- The latest ECMAScript version enabled by default (ES2020).\n- Comment attachment.\n- Support for JSX, Flow, Typescript.\n- Support for experimental language proposals (accepting PRs for anything at least [stage-0](https://github.com/tc39/proposals/blob/master/stage-0-proposals.md)).\n\n## Credits[​](#credits \"Direct link to Credits\")\n\nHeavily based on [acorn](https://github.com/marijnh/acorn) and [acorn-jsx](https://github.com/RReverser/acorn-jsx), thanks to the awesome work of [@RReverser](https://github.com/RReverser) and [@marijnh](https://github.com/marijnh).\n\n## API[​](#api \"Direct link to API\")\n\n### `babelParser.parse(code, [options])`[​](#babelparserparsecode-options \"Direct link to babelparserparsecode-options\")\n\n### `babelParser.parseExpression(code, [options])`[​](#babelparserparseexpressioncode-options \"Direct link to babelparserparseexpressioncode-options\")\n\n`parse()` parses the provided `code` as an entire ECMAScript program, while `parseExpression()` tries to parse a single Expression with performance in mind. When in doubt, use `.parse()`.\n\n### Options[​](#options \"Direct link to Options\")\n\nHistory\n\n| Version   | Changes                                            |\n|-----------|----------------------------------------------------|\n| `v7.21.0` | Added `allowNewTargetOutsideFunction` and `annexb` |\n| `v7.16.0` | Added `startColumn`                                |\n| `v7.15.0` | Added `attachComment`                              |\n| `v7.7.0`  | Added `errorRecovery`                              |\n| `v7.5.0`  | Added `allowUndeclaredExports`                     |\n| `v7.2.0`  | Added `createParenthesizedExpressions`             |\n\n- **allowImportExportEverywhere**: By default, `import` and `export` declarations can only appear at a program's top level. Setting this option to `true` allows them anywhere where a statement is allowed.\n\n- **allowAwaitOutsideFunction**: By default, `await` use is only allowed inside of an async function or, when the `topLevelAwait` plugin is enabled, in the top-level scope of modules. Set this to `true` to also accept it in the top-level scope of scripts. This option is discouraged in favor of `topLevelAwait` plugin.\n\n- **allowNewTargetOutsideFunction**: By default, `new.target` use is not allowed outside of a function or class. Set this to `true` to accept such code.\n\n- **allowReturnOutsideFunction**: By default, a return statement at the top level raises an error. Set this to `true` to accept such code.\n\n- **allowSuperOutsideMethod**: By default, `super` use is not allowed outside of class and object methods. Set this to `true` to accept such code.\n\n- **allowUndeclaredExports**: By default, exporting an identifier that was not declared in the current module scope will raise an error. While this behavior is required by the ECMAScript modules specification, Babel's parser cannot anticipate transforms later in the plugin pipeline that might insert the appropriate declarations, so it is sometimes important to set this option to `true` to prevent the parser from prematurely complaining about undeclared exports that will be added later.\n\n- **attachComment**: By default, Babel attaches comments to adjacent AST nodes. When this option is set to `false`, comments are not attached. It can provide up to 30% performance improvement when the input code has *many* comments. `@babel/eslint-parser` will set it for you. It is not recommended to use `attachComment: false` with Babel transform, as doing so removes all the comments in output code, and renders annotations such as `/* istanbul ignore next */` nonfunctional.\n\n- **annexb**: By default, Babel parses JavaScript according to [ECMAScript's Annex B \"*Additional ECMAScript Features for Web Browsers*\"](https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers) syntax. When this option is set to `false`, Babel will parse syntax without the extensions specific to Annex B.\n\n- **createParenthesizedExpressions**: By default, the parser sets `extra.parenthesized` on the expression nodes. When this option is set to `true`, `ParenthesizedExpression` AST nodes are created instead.\n\n- **errorRecovery**: By default, Babel always throws an error when it finds some invalid code. When this option is set to `true`, it will store the parsing error and try to continue parsing the invalid input file. The resulting AST will have an `errors` property representing an array of all the parsing errors. Note that even when this option is enabled, `@babel/parser` could throw for unrecoverable errors.\n\n- **plugins**: Array containing the plugins that you want to enable.\n\n- **sourceType**: Indicate the mode the code should be parsed in. Can be one of `\"script\"`, `\"module\"`, or `\"unambiguous\"`. Defaults to `\"script\"`. `\"unambiguous\"` will make @babel/parser attempt to *guess*, based on the presence of ES6 `import` or `export` statements. Files with ES6 `import`s and `export`s are considered `\"module\"` and are otherwise `\"script\"`.\n\n- **sourceFilename**: Correlate output AST nodes with their source filename. Useful when generating code and source maps from the ASTs of multiple input files.\n\n- **startColumn**: By default, the parsed code is treated as if it starts from line 1, column 0. You can provide a column number to alternatively start with. Useful for integration with other source tools.\n\n- **startLine**: By default, the parsed code is treated as if it starts from line 1, column 0. You can provide a line number to alternatively start with. Useful for integration with other source tools.\n\n- **strictMode**: By default, ECMAScript code is parsed as strict only if a `\"use strict\";` directive is present or if the parsed file is an ECMAScript module. Set this option to `true` to always parse files in strict mode.\n\n- **ranges**: Adds a `range` property to each node: `[node.start, node.end]`\n\n- **tokens**: Adds all parsed tokens to a `tokens` property on the `File` node\n\n### Output[​](#output \"Direct link to Output\")\n\nThe Babel parser generates AST according to [Babel AST format](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md). It is based on [ESTree spec](https://github.com/estree/estree) with the following deviations:\n\n- [Literal](https://github.com/estree/estree/blob/master/es5.md#literal) token is replaced with [StringLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#stringliteral), [NumericLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#numericliteral), [BigIntLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#bigintliteral), [BooleanLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#booleanliteral), [NullLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#nullliteral), [RegExpLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#regexpliteral)\n- [Property](https://github.com/estree/estree/blob/master/es5.md#property) token is replaced with [ObjectProperty](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectproperty) and [ObjectMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectmethod)\n- [MethodDefinition](https://github.com/estree/estree/blob/master/es2015.md#methoddefinition) is replaced with [ClassMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classmethod) and [ClassPrivateMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classprivatemethod)\n- [PropertyDefinition](https://github.com/estree/estree/blob/master/es2022.md#propertydefinition) is replaced with [ClassProperty](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classproperty) and [ClassPrivateProperty](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classprivateproperty)\n- [PrivateIdentifier](https://github.com/estree/estree/blob/master/es2022.md#privateidentifier) is replaced with [PrivateName](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#privatename)\n- [Program](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#programs) and [BlockStatement](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#blockstatement) contain additional `directives` field with [Directive](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#directive) and [DirectiveLiteral](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#directiveliteral)\n- [ClassMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classmethod), [ClassPrivateMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#classprivatemethod), [ObjectProperty](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectproperty), and [ObjectMethod](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#objectmethod) value property's properties in [FunctionExpression](https://github.com/babel/babel/tree/main/packages/babel-parser/ast/spec.md#functionexpression) is coerced/brought into the main method node.\n- [ChainExpression](https://github.com/estree/estree/blob/master/es2020.md#chainexpression) is replaced with [OptionalMemberExpression](https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#optionalmemberexpression) and [OptionalCallExpression](https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#optionalcallexpression)\n- [ImportExpression](https://github.com/estree/estree/blob/master/es2020.md#importexpression) is replaced with a [CallExpression](https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#callexpression) whose `callee` is an [Import](https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#import) node.\n\n> There is now an `estree` plugin which reverts these deviations\n\nAST for JSX code is based on [Facebook JSX AST](https://github.com/facebook/jsx/blob/master/AST.md).\n\n### Semver[​](#semver \"Direct link to Semver\")\n\nThe Babel Parser follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions.\n\nFor example: We push a fix to early error on something like [\\#107](https://github.com/babel/babylon/pull/107) - multiple default exports per file. That would be considered a bug fix even though it would cause a build to fail.\n\n### Example[​](#example \"Direct link to Example\")\n\n``` js\nrequire(\"@babel/parser\").parse(\"code\", {\n  // parse in strict mode and allow module declarations\n  sourceType: \"module\",\n\n  plugins: [\n    // enable jsx and flow syntax\n    \"jsx\",\n    \"flow\",\n  ],\n});\n```\n\n### Plugins[​](#plugins \"Direct link to Plugins\")\n\n#### Miscellaneous[​](#miscellaneous \"Direct link to Miscellaneous\")\n\n| Name                                                | Code Example |\n|-----------------------------------------------------|--------------|\n| `estree` ([repo](https://github.com/estree/estree)) | n/a          |\n\n#### Language extensions[​](#language-extensions \"Direct link to Language extensions\")\n\nHistory\n\n| Version  | Changes             |\n|----------|---------------------|\n| `v7.6.0` | Added `v8intrinsic` |\n\n| Name                                                              | Code Example                |\n|-------------------------------------------------------------------|-----------------------------|\n| `flow` ([repo](https://github.com/facebook/flow))                 | `var a: string = \"\";`       |\n| `flowComments` ([docs](https://flow.org/en/docs/types/comments/)) | `/*:: type Foo = {...}; */` |\n| `jsx` ([repo](https://facebook.github.io/jsx/))                   | `<a attr=\"b\">{s}</a>`       |\n| `typescript` ([repo](https://github.com/Microsoft/TypeScript))    | `var a: string = \"\";`       |\n| `v8intrinsic`                                                     | `%DebugPrint(foo);`         |\n\n#### ECMAScript [proposals](https://github.com/babel/proposals)[​](#ecmascript-proposals \"Direct link to ecmascript-proposals\")\n\nHistory\n\n| Version   | Changes                                                                                                                                                 |\n|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `v7.20.0` | Added `explicitResourceManagement`, `importReflection`                                                                                                  |\n| `v7.17.0` | Added `regexpUnicodeSets`, `destructuringPrivate`, `decoratorAutoAccessors`                                                                             |\n| `v7.15.0` | Added `hack` to the `proposal` option of `pipelineOperator`. Moved `topLevelAwait`, `privateIn` to Latest ECMAScript features                           |\n| `v7.14.0` | Added `asyncDoExpressions`. Moved `classProperties`, `classPrivateProperties`, `classPrivateMethods`, `moduleStringNames` to Latest ECMAScript features |\n| `v7.13.0` | Added `moduleBlocks`                                                                                                                                    |\n| `v7.12.0` | Added `classStaticBlock`, `moduleStringNames`                                                                                                           |\n| `v7.11.0` | Added `decimal`                                                                                                                                         |\n| `v7.10.0` | Added `privateIn`                                                                                                                                       |\n| `v7.9.0`  | Added `recordAndTuple`                                                                                                                                  |\n| `v7.7.0`  | Added `topLevelAwait`                                                                                                                                   |\n| `v7.4.0`  | Added `partialApplication`                                                                                                                              |\n| `v7.2.0`  | Added `classPrivateMethods`                                                                                                                             |\n\n| Name                                                                                                     | Code Example                                                     |\n|----------------------------------------------------------------------------------------------------------|------------------------------------------------------------------|\n| `asyncDoExpressions` ([proposal](https://github.com/tc39/proposal-async-do-expressions))                 | `async do { await requestAPI().json() }`                         |\n| `decimal` ([proposal](https://github.com/tc39/proposal-decimal))                                         | `0.3m`                                                           |\n| `decorators` ([proposal](https://github.com/tc39/proposal-decorators)) `decorators-legacy`               | `@a class A {}`                                                  |\n| `decoratorAutoAccessors` ([proposal](https://github.com/tc39/proposal-decorators))                       | `class Example { @reactive accessor myBool = false; }`           |\n| `destructuringPrivate` ([proposal](https://github.com/tc39/proposal-destructuring-private))              | `class Example { #x = 1; method() { const { #x: x } = this; } }` |\n| `doExpressions` ([proposal](https://github.com/tc39/proposal-do-expressions))                            | `var a = do { if (true) { 'hi'; } };`                            |\n| `explicitResourceManagement` ([proposal](https://github.com/tc39/proposal-explicit-resource-management)) | `using reader = getReader()`                                     |\n| `exportDefaultFrom` ([proposal](https://github.com/tc39/ecmascript-export-default-from))                 | `export v from \"mod\"`                                            |\n| `functionBind` ([proposal](https://github.com/zenparsing/es-function-bind))                              | `a::b`, `::console.log`                                          |\n| `functionSent` ([proposal](https://github.com/tc39/proposal-function.sent))                              | `function.sent`                                                  |\n| `importAssertions` ([proposal](https://github.com/tc39/proposal-import-assertions))                      | `import json from \"./foo.json\" assert { type: \"json\" };`         |\n| `importReflection` ([proposal](https://github.com/tc39/proposal-import-reflection))                      | `import module foo from \"./foo.wasm\";`                           |\n| `moduleBlocks` ([proposal](https://github.com/tc39/proposal-js-module-blocks))                           | `let m = module { export let y = 1; };`                          |\n| `partialApplication` ([proposal](https://github.com/babel/proposals/issues/32))                          | `f(?, a)`                                                        |\n| `pipelineOperator` ([proposal](https://github.com/babel/proposals/issues/29))                            | `a |> b`                                                         |\n| `recordAndTuple` ([proposal](https://github.com/tc39/proposal-record-tuple))                             | `#{x: 1}`, `#[1, 2]`                                             |\n| `regexpUnicodeSets` ([proposal](https://github.com/tc39/proposal-regexp-set-notation))                   | `/[\\p{Decimal_Number}--[0-9]]/v;`                                |\n| `throwExpressions` ([proposal](https://github.com/babel/proposals/issues/23))                            | `() => throw new Error(\"\")`                                      |\n\n#### Latest ECMAScript features[​](#latest-ecmascript-features \"Direct link to Latest ECMAScript features\")\n\nThe following features are already enabled on the latest version of `@babel/parser`, and cannot be disabled because they are part of the language. You should enable these features only if you are using an older version.\n\n| Name                                                                                      | Code Example                                        |\n|-------------------------------------------------------------------------------------------|-----------------------------------------------------|\n| `asyncGenerators` ([proposal](https://github.com/tc39/proposal-async-iteration))          | `async function*() {}`, `for await (let a of b) {}` |\n| `bigInt` ([proposal](https://github.com/tc39/proposal-bigint))                            | `100n`                                              |\n| `classProperties` ([proposal](https://github.com/tc39/proposal-class-public-fields))      | `class A { b = 1; }`                                |\n| `classPrivateProperties` ([proposal](https://github.com/tc39/proposal-private-fields))    | `class A { #b = 1; }`                               |\n| `classPrivateMethods` ([proposal](https://github.com/tc39/proposal-private-methods))      | `class A { #c() {} }`                               |\n| `classStaticBlock` ([proposal](https://github.com/tc39/proposal-class-static-block))      | `class A { static {} }`                             |\n| `dynamicImport` ([proposal](https://github.com/tc39/proposal-dynamic-import))             | `import('./guy').then(a)`                           |\n| `exportNamespaceFrom` ([proposal](https://github.com/leebyron/ecmascript-export-ns-from)) | `export * as ns from \"mod\"`                         |\n| `logicalAssignment` ([proposal](https://github.com/tc39/proposal-logical-assignment))     | `a &&= b`                                           |\n| `moduleStringNames` ([proposal](https://github.com/tc39/ecma262/pull/2154))               | `import { \"😄\" as smile } from \"emoji\";`            |\n| `nullishCoalescingOperator` ([proposal](https://github.com/babel/proposals/issues/14))    | `a ?? b`                                            |\n| `numericSeparator` ([proposal](https://github.com/samuelgoto/proposal-numeric-separator)) | `1_000_000`                                         |\n| `objectRestSpread` ([proposal](https://github.com/tc39/proposal-object-rest-spread))      | `var a = { b, ...c };`                              |\n| `optionalCatchBinding` ([proposal](https://github.com/babel/proposals/issues/7))          | `try {throw 0;} catch{do();}`                       |\n| `optionalChaining` ([proposal](https://github.com/tc39/proposal-optional-chaining))       | `a?.b`                                              |\n| `privateIn` ([proposal](https://github.com/tc39/proposal-private-fields-in-in))           | `#p in obj`                                         |\n| `topLevelAwait` ([proposal](https://github.com/tc39/proposal-top-level-await/))           | `await promise` in modules                          |\n\n#### Plugins options[​](#plugins-options \"Direct link to Plugins options\")\n\nHistory\n\n| Version  | Changes                                                                                                                                       |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| `7.21.0` | The default behavior of the `decorators`' `decoratorsBeforeExport` option is to allow decorators either before or after the `export` keyword. |\n| `7.19.0` | The `syntaxType` option of the `recordAndTuple` plugin defaults to `hash`; added `allowCallParenthesized` option for the `decorators` plugin. |\n| `7.17.0` | Added `@@` and `^^` to the `topicToken` option of the `hack` pipeline operator                                                                |\n| `7.16.0` | Added `disallowAmbiguousJSXLike` for `typescript` plugin. Added `^` to the `topicToken` option of the `hack` pipeline operators               |\n| `7.14.0` | Added `dts` for `typescript` plugin                                                                                                           |\n\n> NOTE: When a plugin is specified multiple times, only the first options are considered.\n\n- `decorators`:\n\n  - `allowCallParenthesized` (`boolean`, defaults to `true`)\n\n    When `false`, disallow decorators in the `@(...)()` form in favor of `@(...())`. The stage 3 decorators proposal uses `allowCallParenthesized: false`.\n\n  - `decoratorsBeforeExport` (`boolean`)\n\n    By default decorators on exported classes can be placed either before or after the `export` keyword. When this option is set, decorators will only be allowed in the specified position.\n\n    ``` js\n    // decoratorsBeforeExport: true\n    @dec\n    export class C {}\n\n    // decoratorsBeforeExport: false\n    export @dec class C {}\n    ```\n\n    > ⚠️ This option is deprecated and will be removed in a future version. Code that is valid when this option is explicitly set to `true` or `false` is also valid when this option is not set.\n\n- `pipelineOperator`:\n\n  - `proposal` (required, accepted values: `minimal`, `fsharp`, `hack`, ~~`smart`~~ (deprecated)) There are several different proposals for the pipeline operator. This option chooses which proposal to use. See [plugin-proposal-pipeline-operator](../babel-plugin-proposal-pipeline-operator/index) for more information, including a table comparing their behavior.\n\n  - `topicToken` (required when `proposal` is `hack`, accepted values: `%`, `#`, `^`, `@@`, `^^`) The `hack` proposal uses a “topic” placeholder in its pipe. There are two different choices for this topic placeholder. This option chooses what token to use to refer to the topic. `topicToken: \"#\"` is incompatible with `recordAndTuple` with `syntaxType: \"hash\"`. See [plugin-proposal-pipeline-operator](../babel-plugin-proposal-pipeline-operator/index) for more information.\n\n- `recordAndtuple`:\n\n  - `syntaxType` (`hash` or `bar`, defaults to `hash`) There are two syntax variants for `recordAndTuple`. They share exactly same runtime semantics. \\| SyntaxType \\| Record Example \\| Tuple Example \\| \\| --- \\| --- \\| --- \\| \\| `\"hash\"` \\| `#{ a: 1 }` \\| `#[1, 2]` \\| \\| `\"bar\"` \\| `{| a: 1 |}` \\| `[|1, 2|]` \\| See [Ergonomics of `#{}`/`#[]`](https://github.com/tc39/proposal-record-tuple/issues/10) for more information.\n\n- `flow`:\n\n  - `all` (`boolean`, default: `false`) Some code has different meaning in Flow and in vanilla JavaScript. For example, `foo<T>(x)` is parsed as a call expression with a type argument in Flow, but as a comparison (`foo < T > x`) accordingly to the ECMAScript specification. By default, `babel-parser` parses those ambiguous constructs as Flow types only if the file starts with a `// @flow` pragma. Set this option to `true` to always parse files as if `// @flow` was specified.\n\n- `typescript`\n\n  - `dts` (`boolean`, default `false`) This option will enable parsing within a TypeScript ambient context, where certain syntax have different rules (like `.d.ts` files and inside `declare module` blocks). Please see [https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html) and [https://basarat.gitbook.io/typescript/type-system/intro](https://basarat.gitbook.io/typescript/type-system/intro) for more information about ambient contexts.\n  - `disallowAmbiguousJSXLike` (`boolean`, default `false`) Even when the `jsx` plugin is not enabled, this option disallows using syntax that would be ambiguous with JSX (`<X> y` type assertions and `<X>() => {}` type arguments). It matches the `tsc` behavior when parsing `.mts` and `.mjs` files.\n\n### Error codes[​](#error-codes \"Direct link to Error codes\")\n\nHistory\n\n| Version   | Changes           |\n|-----------|-------------------|\n| `v7.14.0` | Added error codes |\n\nError codes are useful for handling the errors thrown by `@babel/parser`.\n\nThere are two error codes, `code` and `reasonCode`.\n\n- `code`\n  - Rough classification of errors (e.g. `BABEL_PARSER_SYNTAX_ERROR`, `BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED`).\n- `reasonCode`\n  - Detailed classification of errors (e.g. `MissingSemicolon`, `VarRedeclaration`).\n\nExample of using error codes with `errorRecovery`:\n\n``` js\nconst { parse } = require(\"@babel/parser\");\n\nconst ast = parse(`a b`, { errorRecovery: true });\n\nconsole.log(ast.errors[0].code); // BABEL_PARSER_SYNTAX_ERROR\nconsole.log(ast.errors[0].reasonCode); // MissingSemicolon\n```\n\n### FAQ[​](#faq \"Direct link to FAQ\")\n\n#### Will the Babel parser support a plugin system?[​](#will-the-babel-parser-support-a-plugin-system \"Direct link to Will the Babel parser support a plugin system?\")\n\nPrevious issues: [\\#1351](https://github.com/babel/babel/issues/1351), [\\#6694](https://github.com/babel/babel/issues/6694).\n\nWe currently aren't willing to commit to supporting the API for plugins or the resulting ecosystem (there is already enough work maintaining Babel's own plugin system). It's not clear how to make that API effective, and it would limit our ability to refactor and optimize the codebase.\n\nOur current recommendation for those that want to create their own custom syntax is for users to fork the parser.\n\nTo consume your custom parser, you can add a plugin to your [options](../options/index#plugins) to call the parser via its npm package name or require it if using JavaScript,\n\n``` js\nconst parse = require(\"custom-fork-of-babel-parser-on-npm-here\");\n\nmodule.exports = {\n  plugins: [\n    {\n      parserOverride(code, opts) {\n        return parse(code, opts);\n      },\n    },\n  ],\n};\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-parser/](https://babeljs.io/docs/babel-parser/)"
- name: '@babel/plugin-external-helpers'
  id: babel-plugin-external-helpers/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-external-helpers\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-external-helpers\n```\n\n``` shell\nyarn add --dev @babel/plugin-external-helpers\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-external-helpers\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-external-helpers\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-external-helpers script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-external-helpers\"]\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-external-helpers/](https://babeljs.io/docs/babel-plugin-external-helpers/)"
- name: '@babel/plugin-proposal-async-do-expressions'
  id: babel-plugin-proposal-async-do-expressions/index
  summary: The async do { .. } expression executes a block (with one or many statements in it) in an asynchronous context, and the final statement completion value inside the block becomes the completion value of the asynchronous code
  description: "# @babel/plugin-proposal-async-do-expressions\n\n> The `async do { .. }` expression executes a block (with one or many statements in it) in an *asynchronous* context, and the final statement completion value inside the block becomes the completion value of the *asynchronous* code.\n\n## Example[​](#example \"Direct link to Example\")\n\nIssuing HTTP request in parallel\n\n``` js\nPromise.all([\n  async do {\n    const result = await fetch('https://example.com/A');\n    await result.json()\n  },\n  async do {\n    const result = await fetch('https://example.org/B');\n    await result.json()\n  },\n]).then(([a, b]) => {\n  console.log(\"example.com/A\", a);\n  console.log(\"example.org/B\", b);\n})\n```\n\nwill be transformed to\n\n``` js\nPromise.all([\n  (async () {\n    const result = await fetch('https://example.com/A');\n    return await result.json()\n  })(),\n  (async () {\n    const result = await fetch('https://example.org/B');\n    return await result.json()\n  })(),\n]).then(([a, b]) => {\n  console.log(\"example.com/A\", a);\n  console.log(\"example.org/B\", b);\n})\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-async-do-expressions\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-async-do-expressions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-async-do-expressions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-async-do-expressions\"]\n}\n```\n\nNote: This plugin transpiles `async do {}` to ES2017 Async arrow function `async () => {}`. If you target to an older engine, i.e. Node.js 6 or IE 11, please also add [`@babel/plugin-transform-async-to-generator`](../babel-plugin-transform-async-to-generator/index):\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-async-do-expressions\",\n    \"@babel/plugin-transform-async-to-generator\"\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-async-do-expressions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-async-do-expressions\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: `async do` expressions](https://github.com/tc39/proposal-async-do-expressions)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-async-do-expressions/](https://babeljs.io/docs/babel-plugin-proposal-async-do-expressions/)"
- name: '@babel/plugin-proposal-async-generator-functions'
  id: babel-plugin-proposal-async-generator-functions/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-async-generator-functions\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2018](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nasync function* agf() {\n  await 1;\n  yield 2;\n}\n```\n\n**Out**\n\n``` js\nvar _asyncGenerator = ...\n\nlet agf = (() => {\n  var _ref = _asyncGenerator.wrap(function* () {\n    yield _asyncGenerator.await(1);\n    yield 2;\n  });\n\n  return function agf() {\n    return _ref.apply(this, arguments);\n  };\n})();\n```\n\nFor await example\n\n``` js\nasync function f() {\n  for await (let x of y) {\n    g(x);\n  }\n}\n```\n\n**Example Usage**\n\n``` js\nasync function* genAnswers() {\n  var stream = [Promise.resolve(4), Promise.resolve(9), Promise.resolve(12)];\n  var total = 0;\n  for await (let val of stream) {\n    total += await val;\n    yield total;\n  }\n}\n\nfunction forEach(ai, fn) {\n  return ai.next().then(function(r) {\n    if (!r.done) {\n      fn(r);\n      return forEach(ai, fn);\n    }\n  });\n}\n\nvar output = 0;\nforEach(genAnswers(), function(val) {\n  output += val.value;\n}).then(function() {\n  console.log(output); // 42\n});\n```\n\n[Try it Out in the REPL](https://babel.dev/repl#?browsers=ie%2011&build=&builtIns=usage&spec=false&loose=false&code_lz=IYZwngdgxgBAZgV2gFwJYHsICoYHMCmEAghCAO74BOIAFAJQwDeAUDDAG7CUwjKX7AAtjAC8MANowACpXSDUIfADp-IdABt2-GgBY6AGmmz5ilfjWbtATgNG5C5ao1aaARgBMDALoBuVhy4YZHRkYHVRGAAGPzY4dG5gMmBUZBgadXxUznD0OB4-AUEGFjY2YNDwgGoxROSssJjSsFR8dQATIJCG_wBfZj7mRBQMCHh4gFFgKAALGmTDOAhi_35kBEpR5KUIfAAPZHolZGnCGiGoNEw0ymXSmFQ8mgBCSiU2zHxbu_gIGhvGu6rdajOKUSYzOaoBZLAEwPpsHp0PwDTjcdAIZAABwxEWigwmU1mBGIpAo1HoCyQFxGNGyxRg6KxOOqAXUSmyCHwcLozCOJ1-50uo3oTH8UEwFmU6nQuBojOxyCRMAA9MqYDp3P0kUA&debug=false&forceAllTransforms=false&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.13.15)\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-async-generator-functions\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-async-generator-functions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-async-generator-functions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-async-generator-functions\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-async-generator-functions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-async-generator-functions\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Asynchronous iteration for ECMAScript](https://github.com/tc39/proposal-async-iteration)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-async-generator-functions/](https://babeljs.io/docs/babel-plugin-proposal-async-generator-functions/)"
- name: '@babel/plugin-proposal-class-properties'
  id: babel-plugin-proposal-class-properties/index
  summary: Below is a class with four class properties which will be transformed
  description: "# @babel/plugin-proposal-class-properties\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2022](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\nBelow is a class with four class properties which will be transformed.\n\n``` js\nclass Bork {\n  //Property initializer syntax\n  instanceProperty = \"bork\";\n  boundFunction = () => {\n    return this.instanceProperty;\n  };\n\n  //Static class properties\n  static staticProperty = \"babelIsCool\";\n  static staticFunction = function() {\n    return Bork.staticProperty;\n  };\n}\n\nlet myBork = new Bork();\n\n//Property initializers are not on the prototype.\nconsole.log(myBork.__proto__.boundFunction); // > undefined\n\n//Bound functions are bound to the class instance.\nconsole.log(myBork.boundFunction.call(undefined)); // > \"bork\"\n\n//Static function exists on the class.\nconsole.log(Bork.staticFunction()); // > \"babelIsCool\"\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-class-properties\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-class-properties\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-class-properties\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-class-properties\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [[\"@babel/plugin-proposal-class-properties\", { \"loose\": true }]]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-class-properties script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-class-properties\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nWhen `true`, class properties are compiled to use an assignment expression instead of `Object.defineProperty`.\n\n> ⚠️ Consider migrating to the top level [`setPublicClassFields`](../assumptions/index#setpublicclassfields) assumption\n\n``` json\n{\n  \"assumptions\": {\n    \"setPublicClassFields\": true\n  }\n}\n```\n\nFor an explanation of the consequences of using either, see [Definition vs. Assignment](http://2ality.com/2012/08/property-definition-assignment.html) (TL;DR in Part 5)\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\n``` js\nclass Bork {\n  static a = \"foo\";\n  static b;\n\n  x = \"bar\";\n  y;\n}\n```\n\nWhen `setPublicClassFields` is `false`, the above code will compile to the following, using `Object.defineProperty`:\n\n``` js\nvar Bork = function Bork() {\n  babelHelpers.classCallCheck(this, Bork);\n  Object.defineProperty(this, \"x\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: \"bar\",\n  });\n  Object.defineProperty(this, \"y\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: void 0,\n  });\n};\n\nObject.defineProperty(Bork, \"a\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"foo\",\n});\nObject.defineProperty(Bork, \"b\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: void 0,\n});\n```\n\nWhen `setPublicClassFields` is set to `true`, it will compile using assignment expressions:\n\n``` js\nvar Bork = function Bork() {\n  babelHelpers.classCallCheck(this, Bork);\n  this.x = \"bar\";\n  this.y = void 0;\n};\n\nBork.a = \"foo\";\nBork.b = void 0;\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Public and private instance fields](https://github.com/tc39/proposal-class-fields)\n- [Proposal: Static class features](https://github.com/tc39/proposal-static-class-features)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-class-properties/](https://babeljs.io/docs/babel-plugin-proposal-class-properties/)"
- name: '@babel/plugin-proposal-class-static-block'
  id: babel-plugin-proposal-class-static-block/index
  summary: A class with a static block will be transformed into a static private property, whose initializer is the static block wrapped in an IIAFE (immediate invoked arrow function expression)
  description: "# @babel/plugin-proposal-class-static-block\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2022](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\nA class with a static block will be transformed into a static private property, whose initializer is the static block wrapped in an IIAFE (immediate invoked arrow function expression).\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nclass C {\n  static #x = 42;\n  static y;\n  static {\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  }\n}\n```\n\nwill be transformed to\n\n``` js\nclass C {\n  static #x = 42;\n  static y;\n  static #_ = (() => {\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  })();\n}\n```\n\nBecause the output code includes private class properties, if you are already using other class feature plugins (e.g. [\\`@babel/plugin-proposal-class-properties](../babel-plugin-proposal-class-properties/index)), be sure to place it *before* the others.\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-static-block\",\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-class-static-block\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-class-static-block\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-class-static-block\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-class-static-block\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-class-static-block script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-class-static-block\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Class Static Block](https://github.com/tc39/proposal-class-static-block)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-class-static-block/](https://babeljs.io/docs/babel-plugin-proposal-class-static-block/)"
- name: '@babel/plugin-proposal-decorators'
  id: babel-plugin-proposal-decorators/index
  summary: This option was originally added to help tc39 collect feedback from the community by allowing experimentation with the proposed syntaxes
  description: "# @babel/plugin-proposal-decorators\n\n## Example[​](#example \"Direct link to Example\")\n\n(examples are from proposal)\n\n### Simple class decorator[​](#simple-class-decorator \"Direct link to Simple class decorator\")\n\n``` js\n@annotation\nclass MyClass {}\n\nfunction annotation(target) {\n  target.annotated = true;\n}\n```\n\n### Class decorator[​](#class-decorator \"Direct link to Class decorator\")\n\n``` js\n@isTestable(true)\nclass MyClass {}\n\nfunction isTestable(value) {\n  return function decorator(target) {\n    target.isTestable = value;\n  };\n}\n```\n\n### Class function decorator[​](#class-function-decorator \"Direct link to Class function decorator\")\n\n``` js\nclass C {\n  @enumerable(false)\n  method() {}\n}\n\nfunction enumerable(value) {\n  return function(target, key, descriptor) {\n    descriptor.enumerable = value;\n    return descriptor;\n  };\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-decorators\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-decorators\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-decorators\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-decorators script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-decorators\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nHistory\n\n| Version   | Changes                                                                             |\n|-----------|-------------------------------------------------------------------------------------|\n| `v7.21.0` | Added support for `version: \"2023-01\"`                                              |\n| `v7.19.0` | Added support for `version: \"2022-03\"`                                              |\n| `v7.17.0` | Added the `version` option with support for `\"2021-12\"`, `\"2018-09\"` and `\"legacy\"` |\n\n### `version`[​](#version \"Direct link to version\")\n\n`\"2023-01\"`, `\"2022-03\"`, `\"2021-12\"`, `\"2018-09\"` or `\"legacy\"`.\n\nSelects the decorators proposal to use:\n\n- `\"2023-01\"` is the proposal version after the updates that reached consensus in the January 2023 TC39 meeting, integrating [`pzuraq/ecma262#4`](https://github.com/pzuraq/ecma262/pull/4).\n- `\"2022-03\"` is the proposal version that reached consensus for Stage 3 in the March 2022 TC39 meeting. You can read more about it at [`tc39/proposal-decorators@8ca65c046d`](https://github.com/tc39/proposal-decorators/tree/8ca65c046dd5e9aa3846a1fe5df343a6f7efd9f8).\n- `\"2021-12\"` is the proposal version as it was presented to TC39 in Dec 2021. You can read more about it at [`tc39/proposal-decorators@d6c056fa06`](https://github.com/tc39/proposal-decorators/tree/d6c056fa061646178c34f361bad33d583316dc85).\n- `\"2018-09\"` is the proposal version that was initially promoted to Stage 2 presented to TC39 in Sept 2018. You can read more about it at [`tc39/proposal-decorators@7fa580b40f`](https://github.com/tc39/proposal-decorators/tree/7fa580b40f2c19c561511ea2c978e307ae689a1b).\n- `legacy` is the original Stage 1 proposal, defined at [`wycats/javascript-decorators@e1bf8d41bf`](https://github.com/wycats/javascript-decorators/blob/e1bf8d41bfa2591d949dd3bbf013514c8904b913/README.md).\n\n> ⚠️ If you specify the `decoratorsBeforeExport` option, `version` defaults to `\"2018-09\"`.\n\n### `decoratorsBeforeExport`[​](#decoratorsbeforeexport \"Direct link to decoratorsbeforeexport\")\n\nThis option:\n\n- is disallowed when using `version: \"legacy\"`, `version: \"2022-03\"`, or `version: \"2023-01\"`;\n- is required when using `version: \"2018-09\"`;\n- is optional and defaults to `false` when using `version: \"2021-12\"`.\n\n`boolean`\n\n``` js\n// decoratorsBeforeExport: false\nexport @decorator class Bar {}\n\n// decoratorsBeforeExport: true\n@decorator\nexport class Foo {}\n```\n\nThis option was originally added to help tc39 collect feedback from the community by allowing experimentation with the proposed syntaxes. The proposal has now settled on allowing decorators either before or after `export`.\n\n### `legacy`[​](#legacy \"Direct link to legacy\")\n\n> **⚠️ DEPRECATED**: Use `version: \"legacy\"` instead. This option is a legacy alias.\n\n`boolean`, defaults to `false`.\n\nUse the legacy (stage 1) decorators syntax and behavior.\n\n#### NOTE: Compatibility with `@babel/plugin-proposal-class-properties`[​](#note-compatibility-with-babelplugin-proposal-class-properties \"Direct link to note-compatibility-with-babelplugin-proposal-class-properties\")\n\nIf you are including your plugins manually and using `@babel/plugin-proposal-class-properties` and legacy decorators, make sure that `@babel/plugin-proposal-decorators` comes *before* `@babel/plugin-proposal-class-properties`.\n\nWrong:\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }]\n  ]\n}\n```\n\nRight:\n\n``` json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }],\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: JavaScript Decorators](https://github.com/wycats/javascript-decorators/blob/master/README.md)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-decorators/](https://babeljs.io/docs/babel-plugin-proposal-decorators/)"
- name: '@babel/plugin-proposal-destructuring-private'
  id: babel-plugin-proposal-destructuring-private/index
  summary: 'Transforms private destructuring var { #y: y } = this to var y = this.#y'
  description: "# @babel/plugin-proposal-destructuring-private\n\nTransforms private destructuring `var { #y: y } = this` to `var y = this.#y`.\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nclass Foo {\n  x;\n  #y;\n  equalsTo({ x, #y: y }) {\n    return this.x === x && this.#y === y;\n  }\n}\n```\n\nwill be transformed to\n\n``` js\nclass Foo {\n  x;\n  #y;\n  equalsTo(_p) {\n    var { x } = _p, y = _p.#y;\n    return this.x === x && this.#y === y;\n  }\n}\n```\n\nThe plugin respects these compiler assumptions:\n\n- [`ignoreFunctionLength`](../assumptions/index#ignorefunctionlength)\n- [`objectRestNoSymbols`](../assumptions/index#objectrestnosymbols)\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-destructuring-private\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-destructuring-private\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-destructuring-private\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-destructuring-private\"]\n}\n```\n\nBecause the output code includes private fields, if you are already using other class feature plugins (e.g. [\\`@babel/plugin-proposal-class-properties](../babel-plugin-proposal-class-properties/index)), be sure to place it *before* the others.\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-destructuring-private\",\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-destructuring-private script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-destructuring-private\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Destructuring Private](https://github.com/tc39/proposal-destructuring-private)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-destructuring-private/](https://babeljs.io/docs/babel-plugin-proposal-destructuring-private/)"
- name: '@babel/plugin-proposal-do-expressions'
  id: babel-plugin-proposal-do-expressions/index
  summary: The do { .. } expression executes a block (with one or many statements in it), and the final statement completion value inside the block becomes the completion value of the do expression
  description: "# @babel/plugin-proposal-do-expressions\n\n## Detail[​](#detail \"Direct link to Detail\")\n\n> The `do { .. }` expression executes a block (with one or many statements in it), and the final statement completion value inside the block becomes the completion value of the do expression.\n\nfrom [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch5.md#statement-completion-values), Types & Grammar -\\> Chapter 5 -\\> Section Statement Completion Values\n\nIt can be seen as a complex version of the [ternary operator](http://mdn.io/ternary):\n\n``` js\nlet a = do {\n  if (x > 10) {\n    (\"big\");\n  } else {\n    (\"small\");\n  }\n};\n// is equivalent to:\nlet a = x > 10 ? \"big\" : \"small\";\n```\n\nThis example is not the best usage because it is too simple and using a ternary operator is a better option but you can have a much more complex condition in the `do { ... }` expression with several `if ... else` chains:\n\n``` js\nlet x = 100;\nlet y = 20;\n\nlet a = do {\n  if (x > 10) {\n    if (y > 20) {\n      (\"big x, big y\");\n    } else {\n      (\"big x, small y\");\n    }\n  } else {\n    if (y > 10) {\n      (\"small x, big y\");\n    } else {\n      (\"small x, small y\");\n    }\n  }\n};\n```\n\n## Example[​](#example \"Direct link to Example\")\n\n### In JSX[​](#in-jsx \"Direct link to In JSX\")\n\nOne of the most useful usage of the `do` expression is inside JSX. If we want to conditionally display a component we usually have to call another function which would implement the condition and return the correct value, for example:\n\n``` js\nconst getColoredComponent = color => {\n  if (color === \"blue\") {\n    return <BlueComponent />;\n  }\n  if (color === \"red\") {\n    return <RedComponent />;\n  }\n  if (color === \"green\") {\n    return <GreenComponent />;\n  }\n};\n\nconst Component = props => (\n  <div className=\"myComponent\">{getColoredComponent()}</div>\n);\n```\n\nUsing a do expression you can add logic inside JSX:\n\n``` js\nconst Component = props => (\n  <div className=\"myComponent\">\n    {do {\n      if (color === \"blue\") {\n        <BlueComponent />;\n      } else if (color === \"red\") {\n        <RedComponent />;\n      } else if (color === \"green\") {\n        <GreenComponent />;\n      }\n    }}\n  </div>\n);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-do-expressions\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-do-expressions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-do-expressions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-do-expressions\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-do-expressions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-do-expressions\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: `do` expressions](https://github.com/tc39/proposal-do-expressions)\n- [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch5.md#statement-completion-values)\n- Very handy for conditions inside JSX: [reactjs/react-future#35](https://github.com/reactjs/react-future/issues/35#issuecomment-120009203)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-do-expressions/](https://babeljs.io/docs/babel-plugin-proposal-do-expressions/)"
- name: '@babel/plugin-proposal-duplicate-named-capturing-groups-regex'
  id: babel-plugin-proposal-duplicate-named-capturing-groups-regex/index
  summary: When this option is disabled, Babel doesn't wrap RegExps with the _wrapRegExp helper
  description: "# @babel/plugin-proposal-duplicate-named-capturing-groups-regex\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nvar re = /(?<year>\\d{4})-(?<month>\\d{2})|(?<month>\\d{2})-(?<year>\\d{4})/;\n\nconsole.log(re.exec(\"02-1999\").groups.year);\n```\n\n**Out**\n\n``` js\nvar re = _wrapRegExp(/(\\d{4})-(\\d{2})|(\\d{2})-(\\d{4})/, {\n  year: [1, 4],\n  month: [2, 3],\n});\n\nconsole.log(re.exec(\"02-1999\").groups.year);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-duplicate-named-capturing-groups-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-duplicate-named-capturing-groups-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-duplicate-named-capturing-groups-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-duplicate-named-capturing-groups-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-duplicate-named-capturing-groups-regex script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-duplicate-named-capturing-groups-regex\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `runtime`[​](#runtime \"Direct link to runtime\")\n\n`boolean`, defaults to `true`\n\nWhen this option is disabled, Babel doesn't wrap RegExps with the `_wrapRegExp` helper. The output only supports internal group references, and not runtime properties:\n\n``` js\nvar stringRe = /(?:(?<quote>\")|(?<quote>')).*?\\k<quote>/;\n\nstringRe.test(\"'foo'\"); // \"true\", works\nstringRe.exec(\"'foo'\").groups.quote; // undefined\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Duplicate named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-duplicate-named-capturing-groups-regex/](https://babeljs.io/docs/babel-plugin-proposal-duplicate-named-capturing-groups-regex/)"
- name: '@babel/plugin-proposal-dynamic-import'
  id: babel-plugin-proposal-dynamic-import/index
  summary: 'NOTE: This plugin is included in @babel/preset-env, in ES2020'
  description: "# @babel/plugin-proposal-dynamic-import\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md).\n\nTransforms `import()` expressions to non-ESM module formats.\n\n## When (not) to use this plugin[​](#when-not-to-use-this-plugin \"Direct link to When (not) to use this plugin\")\n\nIf you are using a bundler, such as Webpack, Rollup or Parcel, you should **not** use this plugin and let your bundler handle `import()` expressions.\n\nYou should use this plugin if:\n\n- You are authoring a Node.js library in ESM but want to distribute it in CommonJS(CJS): Install this plugin and [`@babel/plugin-transform-modules-commonjs`](../babel-plugin-transform-modules-commonjs/index)\n- You use [RequireJS](https://requirejs.org) to load modules in the browser: Install this plugin and [`@babel/plugin-transform-modules-amd`](../babel-plugin-transform-modules-amd/index)\n- You use [SystemJS](https://github.com/systemjs/systemjs) to load modules in the browser: Install this plugin and [`@babel/plugin-transform-modules-systemjs`](../babel-plugin-transform-modules-systemjs/index)\n\nThis plugin must be used with one of the module transform plugins mentioned above.\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nimport(\"jquery\").then($ => {});\n```\n\nwill be transformed to\n\n- CommonJS\n- AMD\n- SystemJS\n\n``` js\nPromise.resolve()\n  .then(() => _interopRequireWildcard(require(\"jquery\")))\n  .then(($) => {});\n```\n\n``` js\ndefine([\"require\"], function (_require) {\n  new Promise((_resolve, _reject) =>\n    _require(\n      [\"jquery\"],\n      (imported) => _resolve(_interopRequireWildcard(imported)),\n      _reject\n    )\n  ).then(($) => {});\n});\n```\n\n``` js\nSystem.register([], function (_export, _context) {\n  \"use strict\";\n\n  return {\n    setters: [],\n    execute: function () {\n      _context.import(\"jquery\").then(($) => {});\n    }\n  };\n});\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-dynamic-import\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-dynamic-import\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-dynamic-import\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-dynamic-import\",\n    \"@babel/plugin-transform-modules-commonjs\"\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins=@babel/plugin-proposal-dynamic-import,@babel/plugin-transform-modules-amd script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    \"@babel/plugin-proposal-dynamic-import\",\n    \"@babel/plugin-transform-modules-systemjs\"\n  ],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: import()](https://github.com/tc39/proposal-dynamic-import)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-dynamic-import/](https://babeljs.io/docs/babel-plugin-proposal-dynamic-import/)"
- name: '@babel/plugin-proposal-export-default-from'
  id: babel-plugin-proposal-export-default-from/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-export-default-from\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nexport v from \"mod\";\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-export-default-from\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-export-default-from\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-export-default-from\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-export-default-from\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-export-default-from script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-export-default-from\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- ~~[Proposal: Additional export-from statements in ES7](https://github.com/leebyron/ecmascript-more-export-from)~~ (Withdrawn)\n- [ECMAScript Proposal: export default from](https://github.com/leebyron/ecmascript-export-default-from)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-export-default-from/](https://babeljs.io/docs/babel-plugin-proposal-export-default-from/)"
- name: '@babel/plugin-proposal-export-namespace-from'
  id: babel-plugin-proposal-export-namespace-from/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-export-namespace-from\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nexport * as ns from \"mod\";\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-export-namespace-from\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-export-namespace-from\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-export-namespace-from\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-export-namespace-from\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-export-namespace-from script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-export-namespace-from\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- ~~[Proposal: Additional export-from statements in ES7](https://github.com/leebyron/ecmascript-more-export-from)~~ (Withdrawn)\n- [ECMAScript Proposal: export ns from](https://github.com/leebyron/ecmascript-export-ns-from)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-export-namespace-from/](https://babeljs.io/docs/babel-plugin-proposal-export-namespace-from/)"
- name: '@babel/plugin-proposal-function-bind'
  id: babel-plugin-proposal-function-bind/index
  summary: 'document.querySelectorAll returns a NodeList element which is not a plain array, so you normally can''t use the map function on it, and have to use it this way: Array.prototype.map.call(document.querySelectorAll(...), node => { ... })'
  description: "# @babel/plugin-proposal-function-bind\n\n## Detail[​](#detail \"Direct link to Detail\")\n\n``` js\nobj::func;\n// is equivalent to:\nfunc.bind(obj)\n\n::obj.func;\n// is equivalent to:\nobj.func.bind(obj);\n\nobj::func(val);\n// is equivalent to:\nfunc\n  .call(obj, val)\n\n::obj.func(val);\n// is equivalent to:\nobj.func.call(obj, val);\n```\n\n## Example[​](#example \"Direct link to Example\")\n\n### Basic[​](#basic \"Direct link to Basic\")\n\n``` js\nconst box = {\n  weight: 2,\n  getWeight() {\n    return this.weight;\n  },\n};\n\nconst { getWeight } = box;\n\nconsole.log(box.getWeight()); // prints '2'\n\nconst bigBox = { weight: 10 };\nconsole.log(bigBox::getWeight()); // prints '10'\n\n// Can be chained:\nfunction add(val) {\n  return this + val;\n}\n\nconsole.log(bigBox::getWeight()::add(5)); // prints '15'\n```\n\n### Using with `document.querySelectorAll`[​](#using-with-documentqueryselectorall \"Direct link to using-with-documentqueryselectorall\")\n\nIt can be very handy when used with `document.querySelectorAll`:\n\n``` js\nconst { map, filter } = Array.prototype;\n\nlet sslUrls = document\n  .querySelectorAll(\"a\")\n  ::map(node => node.href)\n  ::filter(href => href.substring(0, 5) === \"https\");\n\nconsole.log(sslUrls);\n```\n\n`document.querySelectorAll` returns a `NodeList` element which is not a plain array, so you normally can't use the `map` function on it, and have to use it this way: `Array.prototype.map.call(document.querySelectorAll(...), node => { ... })`. The above code using the `::` will work because it is equivalent to:\n\n``` js\nconst { map, filter } = Array.prototype;\n\nlet sslUrls = document.querySelectorAll(\"a\");\nsslUrls = map.call(sslUrls, node => node.href);\nsslUrls = filter.call(sslUrls, href => href.substring(0, 5) === \"https\");\n\nconsole.log(sslUrls);\n```\n\n### Auto self binding[​](#auto-self-binding \"Direct link to Auto self binding\")\n\nWhen nothing is specified before the `::` operator, the function is bound to its object:\n\n``` js\n$(\".some-link\").on(\"click\", ::view.reset);\n// is equivalent to:\n$(\".some-link\").on(\"click\", view.reset.bind(view));\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-function-bind\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-function-bind\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-function-bind\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-function-bind\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-function-bind script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-function-bind\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal](https://github.com/zenparsing/es-function-bind)\n- [Babel Blog: Function Bind Syntax](https://babeljs.io/blog/2015/05/14/function-bind)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-function-bind/](https://babeljs.io/docs/babel-plugin-proposal-function-bind/)"
- name: '@babel/plugin-proposal-function-sent'
  id: babel-plugin-proposal-function-sent/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-function-sent\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nfunction* generator() {\n  console.log(\"Sent\", function.sent);\n  console.log(\"Yield\", yield);\n}\n\nconst iterator = generator();\niterator.next(1); // Logs \"Sent 1\"\niterator.next(2); // Logs \"Yield 2\"\n```\n\nIs compiled roughly to\n\n``` js\nlet generator = _skipFirstGeneratorNext(function*() {\n  const _functionSent = yield;\n  console.log(\"Sent\", _functionSent);\n  console.log(\"Yield\", yield);\n});\n\nconst iterator = generator();\niterator.next(1); // Logs \"Sent 1\"\niterator.next(2); // Logs \"Yield 2\"\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-function-sent\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-function-sent\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-function-sent\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-function-sent\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-function-sent script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-function-sent\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Generator function.sent Meta Property](https://github.com/tc39/proposal-function.sent)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-function-sent/](https://babeljs.io/docs/babel-plugin-proposal-function-sent/)"
- name: '@babel/plugin-proposal-json-strings'
  id: babel-plugin-proposal-json-strings/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-json-strings\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2019](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nconst ex = \"before\Lafter\";\n//                ^ There's a U+2028 char between 'before' and 'after'\n```\n\n**Out**\n\n``` js\nconst ex = \"before\\u2028after\";\n//                ^ There's a U+2028 char between 'before' and 'after'\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-json-strings\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-json-strings\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-json-strings\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-json-strings\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-json-strings script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-json-strings\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Subsume JSON strings](https://github.com/babel/proposals/issues/43)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-json-strings/](https://babeljs.io/docs/babel-plugin-proposal-json-strings/)"
- name: '@babel/plugin-proposal-logical-assignment-operators'
  id: babel-plugin-proposal-logical-assignment-operators/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-logical-assignment-operators\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2021](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\na ||= b;\nobj.a.b ||= c;\n\na &&= b;\nobj.a.b &&= c;\n```\n\n**Out**\n\n``` js\nvar _obj$a, _obj$a2;\n\na || (a = b);\n(_obj$a = obj.a).b || (_obj$a.b = c);\n\na && (a = b);\n(_obj$a2 = obj.a).b && (_obj$a2.b = c);\n```\n\n### With Nullish Coalescing[​](#with-nullish-coalescing \"Direct link to With Nullish Coalescing\")\n\n> While using the `@babel/plugin-proposal-nullish-coalescing-operator` plugin (included in `@babel/preset-env`)\n\n``` js\na ??= b;\nobj.a.b ??= c;\n```\n\n``` js\nvar _a, _obj$a, _obj$a$b;\n\n(_a = a) !== null && _a !== void 0 ? _a : (a = b);\n(_obj$a$b = (_obj$a = obj.a).b) !== null && _obj$a$b !== void 0\n  ? _obj$a$b\n  : (_obj$a.b = c);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-logical-assignment-operators\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-logical-assignment-operators\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-logical-assignment-operators\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-logical-assignment-operators\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-logical-assignment-operators script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-logical-assignment-operators\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Logical Assignment Operators](https://github.com/tc39/proposal-logical-assignment)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-logical-assignment-operators/](https://babeljs.io/docs/babel-plugin-proposal-logical-assignment-operators/)"
- name: '@babel/plugin-proposal-nullish-coalescing-operator'
  id: babel-plugin-proposal-nullish-coalescing-operator/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-proposal-nullish-coalescing-operator\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = object.foo ?? \"default\";\n```\n\n**Out**\n\n``` js\nvar _object$foo;\n\nvar foo =\n  (_object$foo = object.foo) !== null && _object$foo !== void 0\n    ? _object$foo\n    : \"default\";\n```\n\n> **NOTE:** We cannot use `!= null` here because `document.all == null` and `document.all` has been deemed not \"nullish\".\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-nullish-coalescing-operator\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-nullish-coalescing-operator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-nullish-coalescing-operator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-nullish-coalescing-operator\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-nullish-coalescing-operator script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-nullish-coalescing-operator\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nWhen `true`, this transform will pretend `document.all` does not exist, and perform loose equality checks with `null` instead of strict equality checks against both `null` and `undefined`.\n\n> ⚠️ Consider migrating to the top level [`noDocumentAll`](../assumptions/index#nodocumentall) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"noDocumentAll\": true\n  }\n}\n```\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = object.foo ?? \"default\";\n```\n\n**Out**\n\n``` js\nvar _object$foo;\n\nvar foo = (_object$foo = object.foo) != null ? _object$foo : \"default\";\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Nullish Coalescing](https://github.com/tc39-transfer/proposal-nullish-coalescing)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-nullish-coalescing-operator/](https://babeljs.io/docs/babel-plugin-proposal-nullish-coalescing-operator/)"
- name: '@babel/plugin-proposal-numeric-separator'
  id: babel-plugin-proposal-numeric-separator/index
  summary: Octals are great for permissions, but also look better when represented in 0o0000 form
  description: "# @babel/plugin-proposal-numeric-separator\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2021](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n### Decimal Literals[​](#decimal-literals \"Direct link to Decimal Literals\")\n\n``` js\nlet budget = 1_000_000_000_000;\n\n// What is the value of `budget`? It's 1 trillion!\n//\n// Let's confirm:\nconsole.log(budget === 10 ** 12); // true\n```\n\n### Binary Literals[​](#binary-literals \"Direct link to Binary Literals\")\n\n``` js\nlet nibbles = 0b1010_0001_1000_0101;\n\n// Is bit 7 on? It sure is!\n// 0b1010_0001_1000_0101\n//             ^\n//\n// We can double check:\nconsole.log(!!(nibbles & (1 << 7))); // true\n```\n\n### Hex Literal[​](#hex-literal \"Direct link to Hex Literal\")\n\n``` js\n// Messages are sent as 24 bit values, but should be\n// treated as 3 distinct bytes:\nlet message = 0xa0_b0_c0;\n\n// What's the value of the upper most byte? It's A0, or 160.\n// We can confirm that:\nlet a = (message >> 16) & 0xff;\nconsole.log(a.toString(16), a); // a0, 160\n\n// What's the value of the middle byte? It's B0, or 176.\n// Let's just make sure...\nlet b = (message >> 8) & 0xff;\nconsole.log(b.toString(16), b); // b0, 176\n\n// What's the value of the lower most byte? It's C0, or 192.\n// Again, let's prove that:\nlet c = message & 0xff;\nconsole.log(c.toString(16), b); // c0, 192\n```\n\n### Octal Literal[​](#octal-literal \"Direct link to Octal Literal\")\n\n*hand wave emoji*\n\nOctals are great for permissions, but also look better when represented in `0o0000` form. No real benefit with separators here.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-numeric-separator\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-numeric-separator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-numeric-separator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-numeric-separator\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-numeric-separator script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-numeric-separator\"],\n});\n```\n\n## Additional Information[​](#additional-information \"Direct link to Additional Information\")\n\nIf you need to further compile ES2015 Decimal, Binary, Hex and Octal number representations to their pre-ES2015 numeric literal form, add the [`\"@babel/plugin-transform-literals\"`](../babel-plugin-transform-literals/index) plugin:\n\n> `@babel/plugin-transform-literals` is already included in [@babel/preset-env](../babel-preset-env/index) and @babel/preset-es2015.\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended-1 \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\"@babel/plugin-proposal-numeric-separator\"]\n}\n{\n  \"plugins\": [\"@babel/plugin-proposal-numeric-separator\", \"@babel/plugin-transform-literals\"]\n}\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Numeric Separators](https://github.com/samuelgoto/proposal-numeric-separator)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-numeric-separator/](https://babeljs.io/docs/babel-plugin-proposal-numeric-separator/)"
- name: '@babel/plugin-proposal-object-rest-spread'
  id: babel-plugin-proposal-object-rest-spread/index
  summary: By default, this plugin will produce spec compliant code by using Babel's objectSpread helper
  description: "# @babel/plugin-proposal-object-rest-spread\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2018](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n### Rest Properties[​](#rest-properties \"Direct link to Rest Properties\")\n\n``` js\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\n```\n\n### Spread Properties[​](#spread-properties \"Direct link to Spread Properties\")\n\n``` js\nlet n = { x, y, ...z };\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-object-rest-spread\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-object-rest-spread\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-object-rest-spread\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-object-rest-spread\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-object-rest-spread script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-object-rest-spread\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nBy default, this plugin will produce spec compliant code by using Babel's `objectSpread` helper.\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nEnabling this option will use Babel's `extends` helper, which is basically the same as `Object.assign` (see `useBuiltIns` below to use it directly).\n\n> ⚠️ Consider migrating to the top level [`setSpreadProperties`](../assumptions/index#setspreadproperties) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"setSpreadProperties\": true\n  }\n}\n```\n\nPlease keep in mind that even if they're almost equivalent, there's an important difference between spread and `Object.assign`: **spread *defines* new properties, while `Object.assign()` *sets* them**, so using this mode might produce unexpected results in some cases.\n\nFor detailed information please check out [Spread VS. Object.assign](http://2ality.com/2016/10/rest-spread-properties.html#spreading-objects-versus-objectassign) and [Assigning VS. defining properties](http://exploringjs.com/es6/ch_oop-besides-classes.html#sec_assigning-vs-defining-properties).\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`boolean`, defaults to `false`.\n\nEnabling this option will use `Object.assign` directly instead of the Babel's `extends` helper.\n\n##### Example[​](#example-1 \"Direct link to Example\")\n\n**.babelrc**\n\n``` json\n{\n  \"assumptions\": {\n    \"setSpreadProperties\": true\n  },\n  \"plugins\": [\n    [\"@babel/plugin-proposal-object-rest-spread\", { \"useBuiltIns\": true }]\n  ]\n}\n```\n\n**In**\n\n``` js\nz = { x, ...y };\n```\n\n**Out**\n\n``` js\nz = Object.assign({ x }, y);\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Object Rest/Spread Properties for ECMAScript](https://github.com/tc39/proposal-object-rest-spread)\n- [Spec](https://tc39.github.io/proposal-object-rest-spread/)\n- [Spread VS. Object.assign](http://2ality.com/2016/10/rest-spread-properties.html#spreading-objects-versus-objectassign)\n- [Assigning VS. defining properties](http://exploringjs.com/es6/ch_oop-besides-classes.html#sec_assigning-vs-defining-properties)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-object-rest-spread/](https://babeljs.io/docs/babel-plugin-proposal-object-rest-spread/)"
- name: '@babel/plugin-proposal-optional-catch-binding'
  id: babel-plugin-proposal-optional-catch-binding/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-optional-catch-binding\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2019](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n``` js\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n}\n```\n\n``` js\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n} finally {\n  doSomeCleanup();\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-optional-catch-binding\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-optional-catch-binding\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-optional-catch-binding\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-optional-catch-binding\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-optional-catch-binding script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-optional-catch-binding\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Optional Catch Binding for ECMAScript](https://github.com/babel/proposals/issues/7)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-optional-catch-binding/](https://babeljs.io/docs/babel-plugin-proposal-optional-catch-binding/)"
- name: '@babel/plugin-proposal-optional-chaining'
  id: babel-plugin-proposal-optional-chaining/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-proposal-optional-chaining\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n### Accessing deeply nested properties[​](#accessing-deeply-nested-properties \"Direct link to Accessing deeply nested properties\")\n\n``` js\nconst obj = {\n  foo: {\n    bar: {\n      baz: 42,\n    },\n  },\n};\n\nconst baz = obj?.foo?.bar?.baz; // 42\n\nconst safe = obj?.qux?.baz; // undefined\n\n// Optional chaining and normal chaining can be intermixed\nobj?.foo.bar?.baz; // Only access `foo` if `obj` exists, and `baz` if\n// `bar` exists\n\n// Example usage with bracket notation:\nobj?.[\"foo\"]?.bar?.baz; // 42\n```\n\n### Calling deeply nested functions[​](#calling-deeply-nested-functions \"Direct link to Calling deeply nested functions\")\n\n``` js\nconst obj = {\n  foo: {\n    bar: {\n      baz() {\n        return 42;\n      },\n    },\n  },\n};\n\nconst baz = obj?.foo?.bar?.baz(); // 42\n\nconst safe = obj?.qux?.baz(); // undefined\nconst safe2 = obj?.foo.bar.qux?.(); // undefined\n\nconst willThrow = obj?.foo.bar.qux(); // Error: not a function\n\n// Top function can be called directly, too.\nfunction test() {\n  return 42;\n}\ntest?.(); // 42\n\nexists?.(); // undefined\n```\n\n### Constructing deeply nested classes[​](#constructing-deeply-nested-classes \"Direct link to Constructing deeply nested classes\")\n\n``` js\nconst obj = {\n  foo: {\n    bar: {\n      baz: class {\n      },\n    },\n  },\n};\n\nconst baz = new obj?.foo?.bar?.baz(); // baz instance\n\nconst safe = new obj?.qux?.baz(); // undefined\nconst safe2 = new obj?.foo.bar.qux?.(); // undefined\n\nconst willThrow = new obj?.foo.bar.qux(); // Error: not a constructor\n\n// Top classes can be called directly, too.\nclass Test {\n}\nnew Test?.(); // test instance\n\nnew exists?.(); // undefined\n```\n\n### Deleting deeply nested properties[​](#deleting-deeply-nested-properties \"Direct link to Deleting deeply nested properties\")\n\nAdded in: `v7.8.0`\n\n``` js\nconst obj = {\n  foo: {\n    bar: {},\n  },\n};\n\nconst ret = delete obj?.foo?.bar?.baz; // true\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-optional-chaining\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-optional-chaining\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-optional-chaining\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-optional-chaining\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-optional-chaining script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-optional-chaining\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nWhen `true`, this transform will pretend `document.all` does not exist, and perform loose equality checks with `null` instead of strict equality checks against both `null` and `undefined`.\n\n> ⚠️ Consider migrating to the top level [`noDocumentAll`](../assumptions/index#nodocumentall) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"noDocumentAll\": true\n  }\n}\n```\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\nIn\n\n``` js\nfoo?.bar;\n```\n\nOut (`noDocumentAll === true`)\n\n``` js\nfoo == null ? void 0 : foo.bar;\n```\n\nOut (`noDocumentAll === false`)\n\n``` js\nfoo === null || foo === void 0 ? void 0 : foo.bar;\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Optional Chaining](https://github.com/tc39/proposal-optional-chaining)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-optional-chaining/](https://babeljs.io/docs/babel-plugin-proposal-optional-chaining/)"
- name: '@babel/plugin-proposal-partial-application'
  id: babel-plugin-proposal-partial-application/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-partial-application\n\n## Example[​](#example \"Direct link to Example\")\n\n(examples are from proposal)\n\n``` js\nfunction add(x, y) { return x + y; }\n\nconst addOne = add(1, ?); // apply from the left\naddOne(2); // 3\n\nconst addTen = add(?, 10); // apply from the right\naddTen(2); // 12\n\nlet newScore = player.score\n  |> add(7, ?)\n  |> clamp(0, 100, ?); // shallow stack, the pipe to `clamp` is the same frame as the pipe to `add`.\n```\n\n### Valid Usage[​](#valid-usage \"Direct link to Valid Usage\")\n\n``` js\nf(x, ?)           // partial application from left\nf(?, x)           // partial application from right\nf(?, x, ?)        // partial application for any arg\no.f(x, ?)         // partial application from left\no.f(?, x)         // partial application from right\no.f(?, x, ?)      // partial application for any arg\nsuper.f(?)        // partial application allowed for call on |SuperProperty|\n```\n\n### Invalid Usage[​](#invalid-usage \"Direct link to Invalid Usage\")\n\n``` js\nf(x + ?)          // `?` not in top-level Arguments of call\nx + ?             // `?` not in top-level Arguments of call\n?.f()             // `?` not in top-level Arguments of call\nnew f(?)          // `?` not supported in `new`\nsuper(?)          // `?` not supported in |SuperCall|\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-partial-application\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-partial-application\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-partial-application\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-partial-application\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-partial-application script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-partial-application\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Partial Application](https://github.com/tc39/proposal-partial-application)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-partial-application/](https://babeljs.io/docs/babel-plugin-proposal-partial-application/)"
- name: '@babel/plugin-proposal-pipeline-operator'
  id: babel-plugin-proposal-pipeline-operator/index
  summary: The pipeline operator has several competing proposals
  description: "# @babel/plugin-proposal-pipeline-operator\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-pipeline-operator\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-pipeline-operator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-pipeline-operator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nThe pipeline operator has several competing proposals. Configure which proposal to use with the required `\"proposal\"` option. Its value is `\"hack\"` by default.\n\n| Value           | Proposal                                                                                                                   | Version added |\n|-----------------|----------------------------------------------------------------------------------------------------------------------------|---------------|\n| `\"hack\"`        | [Hack-style pipes](https://github.com/tc39/proposal-pipeline-operator)                                                     | `v7.15.0`     |\n| ~~`\"fsharp\"`~~  | [F#-style pipes with `await`](https://github.com/valtech-nyc/proposal-fsharp-pipelines)                                    | `v7.5.0`      |\n| ~~`\"minimal\"`~~ | [Minimal F#-style pipes](https://github.com/tc39/proposal-pipeline-operator/tree/abb51b3aef5c17d5971808aee49ebe6b75d7280f) | `v7.0.0`      |\n| ~~`\"smart\"`~~   | [Smart-mix pipes](https://github.com/js-choi/proposal-smart-pipelines) (deprecated)                                        | `v7.3.0`      |\n\nIf `\"proposal\"` is omitted, or if `\"proposal\": \"hack\"` is used, then a `\"topicToken\"` option must be included. The `topicToken` must be one of `\"%\"`, `\"^^\"`, `\"@@\"`, `\"^\"`, or `\"#\"`.\n\nThe `\"proposal\": \"minimal\"`, `\"fsharp\"`, and `\"smart\"` options are **deprecated** and subject to removal in a future major version.\n\n### Examples[​](#examples \"Direct link to Examples\")\n\nThe following examples use `topicToken: \"^^\"`.\n\nFrom [react/scripts/jest/jest-cli.js](https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/scripts/jest/jest-cli.js#L295-L303).\n\n``` js\n// Status quo\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar => `${envar}=${envars[envar]}`)\n      .join(' ')}`,\n    'node',\n    args.join(' ')\n  )\n);\n\n// With pipes\nObject.keys(envars)\n  .map(envar => `${envar}=${envars[envar]}`)\n  .join(' ')\n  |> `$ ${^^}`\n  |> chalk.dim(^^, 'node', args.join(' '))\n  |> console.log(^^);\n```\n\nFrom [jquery/src/core/init.js](https://github.com/jquery/jquery/blob/acb7c49c8d42f601fa347661b1118959079f6b52/src/core/init.js#L51-L55).\n\n``` js\n// Status quo\njQuery.merge( this, jQuery.parseHTML(\n  match[ 1 ],\n  context && context.nodeType ? context.ownerDocument || context : document,\n  true\n) );\n\n// With pipes\ncontext\n  |> (^^ && ^^.nodeType ? ^^.ownerDocument || ^^ : document)\n  |> jQuery.parseHTML(match[1], ^^, true)\n  |> jQuery.merge(^^);\n```\n\n(For a summary of deprecated proposal modes’ behavior, see the [pipe wiki’s table of previous proposals](https://github.com/tc39/proposal-pipeline-operator/wiki#overview-of-previous-proposals).)\n\n### With a configuration file (recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (recommended)\")\n\nWith `^^` topic token:\n\n``` json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", { \"topicToken\": \"^^\" }]\n  ]\n}\n```\n\nWith `@@` topic token:\n\n``` json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", { \"topicToken\": \"@@\" }]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\nBecause this plugin requires a configuration option, it [cannot be directly configured from the CLI](https://github.com/babel/babel/issues/4161). Use a [config file](../config-files/index) instead with the CLI, to add and configure this plugin.\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\nWith `^^` topic token:\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-proposal-pipeline-operator\", { topicToken: \"^^\" } ],\n  ],\n});\n```\n\nWith `@@` topic token:\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-proposal-pipeline-operator\", { topicToken: \"@@\" } ],\n  ],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-pipeline-operator/](https://babeljs.io/docs/babel-plugin-proposal-pipeline-operator/)"
- name: '@babel/plugin-proposal-private-methods'
  id: babel-plugin-proposal-private-methods/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-proposal-private-methods\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2022](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\nHistory\n\n| Version  | Changes                                         |\n|----------|-------------------------------------------------|\n| `v7.3.0` | Support private accessors (getters and setters) |\n| `v7.2.0` | Initial Release                                 |\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nclass Counter extends HTMLElement {\n  #xValue = 0;\n\n  get #x() {\n    return this.#xValue;\n  }\n  set #x(value) {\n    this.#xValue = value;\n    window.requestAnimationFrame(this.#render.bind(this));\n  }\n\n  #clicked() {\n    this.#x++;\n  }\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/plugin-proposal-private-methods --save-dev\n```\n\n``` shell\nyarn add @babel/plugin-proposal-private-methods --dev\n```\n\n``` shell\npnpm add @babel/plugin-proposal-private-methods --save-dev\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-private-methods\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [[\"@babel/plugin-proposal-private-methods\", { \"loose\": true }]]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\n$ babel --plugins @babel/plugin-proposal-private-methods script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-private-methods\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\n> Note: The `loose` mode configuration setting *must* be the same as [`@babel/plugin-proposal-class-properties`](../babel-plugin-proposal-class-properties/index).\n\nWhen true, private methods will be assigned directly on its parent via `Object.defineProperty` rather than a `WeakSet`. This results in improved performance and debugging (normal property access vs `.get()`) at the expense of potentially leaking \"privates\" via things like `Object.getOwnPropertyNames`.\n\n> ⚠️ Consider migrating to the top level [`privateFieldsAsProperties`](../assumptions/index#privatefieldsasproperties) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"privateFieldsAsProperties\": true,\n    \"setPublicClassFields\": true\n  }\n}\n```\n\nNote that both `privateFieldsAsProperties` and `setPublicClassFields` must be set to `true`.\n\nLet's use the following as an example:\n\n``` js\nclass Foo {\n  constructor() {\n    this.publicField = this.#privateMethod();\n  }\n\n  #privateMethod() {\n    return 42;\n  }\n}\n```\n\nBy default, this becomes:\n\n``` js\nvar Foo = function Foo() {\n  \"use strict\";\n\n  babelHelpers.classCallCheck(this, Foo);\n\n  _privateMethod.add(this);\n\n  this.publicField = babelHelpers\n    .classPrivateMethodGet(this, _privateMethod, _privateMethod2)\n    .call(this);\n};\n\nvar _privateMethod = new WeakSet();\n\nvar _privateMethod2 = function _privateMethod2() {\n  return 42;\n};\n```\n\nWith `{ privateFieldsAsProperties: true }`, it becomes:\n\n``` js\nvar Foo = function Foo() {\n  \"use strict\";\n\n  babelHelpers.classCallCheck(this, Foo);\n  Object.defineProperty(this, _privateMethod, {\n    value: _privateMethod2,\n  });\n  this.publicField = babelHelpers\n    .classPrivateFieldLooseBase(this, _privateMethod)\n    [_privateMethod]();\n};\n\nvar _privateMethod = babelHelpers.classPrivateFieldLooseKey(\"privateMethod\");\n\nvar _privateMethod2 = function _privateMethod2() {\n  return 42;\n};\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Private methods and getter/setters for JavaScript classes](https://github.com/tc39/proposal-private-methods)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-private-methods/](https://babeljs.io/docs/babel-plugin-proposal-private-methods/)"
- name: '@babel/plugin-proposal-private-property-in-object'
  id: babel-plugin-proposal-private-property-in-object/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-proposal-private-property-in-object\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2022](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nclass Foo {\n  #bar = \"bar\";\n\n  test(obj) {\n    return #bar in obj;\n  }\n}\n```\n\n**Out**\n\n``` js\nclass Foo {\n  constructor() {\n    _bar.set(this, {\n      writable: true,\n      value: \"bar\",\n    });\n  }\n\n  test() {\n    return _bar.has(this);\n  }\n}\n\nvar _bar = new WeakMap();\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-private-property-in-object\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-private-property-in-object\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-private-property-in-object\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-private-property-in-object\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-private-property-in-object\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-private-property-in-object\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\n> Note: The `loose` mode configuration setting *must* be the same as [`@babel/proposal-class-properties`](../babel-plugin-proposal-class-properties/index).\n\nWhen true, private property `in` expressions will check own properties (as opposed to inherited ones) on the object, instead of checking for presence inside a `WeakSet`. This results in improved performance and debugging (normal property access vs `.get()`) at the expense of potentially leaking \"privates\" via things like `Object.getOwnPropertyNames`.\n\n> ⚠️ Consider migrating to the top level [`privateFieldsAsProperties`](../assumptions/index#privatefieldsasproperties) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"privateFieldsAsProperties\": true,\n    \"setPublicClassFields\": true\n  }\n}\n```\n\nNote that both `privateFieldsAsProperties` and `setPublicClassFields` must be set to `true`.\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\n**In**\n\n``` js\nclass Foo {\n  #bar = \"bar\";\n\n  test(obj) {\n    return #bar in obj;\n  }\n}\n```\n\n**Out**\n\n``` js\nclass Foo {\n  constructor() {\n    Object.defineProperty(this, _bar, {\n      writable: true,\n      value: \"bar\",\n    });\n  }\n\n  test() {\n    return Object.prototype.hasOwnProperty.call(this, _bar);\n  }\n}\n\nvar _bar = babelHelpers.classPrivateFieldLooseKey(\"bar\");\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Ergonomic brand checks for Private Fields](https://github.com/tc39/proposal-private-fields-in-in)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-private-property-in-object/](https://babeljs.io/docs/babel-plugin-proposal-private-property-in-object/)"
- name: '@babel/plugin-proposal-record-and-tuple'
  id: babel-plugin-proposal-record-and-tuple/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-proposal-record-and-tuple\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-record-and-tuple\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-record-and-tuple\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-record-and-tuple\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-record-and-tuple\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\n$ babel --plugins @babel/plugin-proposal-record-and-tuple script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [[\"@babel/plugin-proposal-record-and-tuple\"]],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `importPolyfill`[​](#importpolyfill \"Direct link to importpolyfill\")\n\n`boolean`, defaults to `false`.\n\nBy default this plugin only transforms the proposal syntax, using the `Record` and `Tuple` globals:\n\n``` js\nlet a = #[1, 2, 3];\n\n// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇\n\nlet a = Tuple(1, 2, 3);\n```\n\nYou either need to load a polyfill, or you can pass the `\"importPolyfill\": true` option to inject imports to `@bloomberg/record-tuple-polyfill`, maintained by the proposal authors:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-proposal-record-and-tuple\",\n      {\n        \"importPolyfill\": true\n      }\n    ]\n  ]\n}\n```\n\n``` js\nlet a = #[1, 2, 3];\n\n// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇\n\nimport { Tuple as _Tuple } from \"@bloomberg/record-tuple-polyfill\";\n\nlet a = _Tuple(1, 2, 3);\n```\n\nDon't forget to add `@bloomberg/record-tuple-polyfill` to your dependencies!\n\n### `polyfillModuleName`[​](#polyfillmodulename \"Direct link to polyfillmodulename\")\n\n`string`, defaults to `\"@bloomberg/record-tuple-polyfill\"`.\n\nIf you wish to inject imports to a polyfill different from `@bloomberg/record-tuple-polyfill`, you can use this option to specify its name.\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: JavaScript Records & Tuples](https://github.com/tc39/proposal-record-tuple)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-record-and-tuple/](https://babeljs.io/docs/babel-plugin-proposal-record-and-tuple/)"
- name: '@babel/plugin-proposal-regexp-modifiers'
  id: babel-plugin-proposal-regexp-modifiers/index
  summary: This proposal only supports i, m and s as inline modifiers
  description: "# @babel/plugin-proposal-regexp-modifiers\n\n## Example[​](#example \"Direct link to Example\")\n\n### `i` modifier[​](#i-modifier \"Direct link to i-modifier\")\n\n``` js\n// matches Aa and aa\nconst regex = /(?i:a)a/\n```\n\nwill be transformed to\n\n``` js\nconst regex = /(?:[Aa])a/\n```\n\n### `m` modifier[​](#m-modifier \"Direct link to m-modifier\")\n\n``` js\n// matches aa, a\\naa, etc. but not a\\na\nconst regex = /(?m:^a)a/\n```\n\nwill be transformed to\n\n``` js\nconst regex = /(?:(?:^|(?<=[\\n\\r\\u2028\\u2029]))a)a/\n```\n\n### `s` modifier[​](#s-modifier \"Direct link to s-modifier\")\n\n``` js\n// matches \\na and aa, but not \\n\\n\nconst regex = /(?s:.)./\n```\n\nwill be transformed to\n\n``` js\nconst regex = /(?:[\\s\\S])./;\n```\n\n### Multiple modifiers[​](#multiple-modifiers \"Direct link to Multiple modifiers\")\n\nYou can also apply multiple modifiers:\n\n``` js\n// matches Aa, aa, A\\naa, etc. but not A\\na\nconst regex = /(?im:^a)a/\n```\n\nThis proposal only supports `i`, `m` and `s` as inline modifiers.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-regexp-modifiers\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-regexp-modifiers\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-regexp-modifiers\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-regexp-modifiers\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/@babel/plugin-proposal-regexp-modifiers script.js\n```\n\n### Via Node.js API[​](#via-nodejs-api \"Direct link to Via Node.js API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-proposal-regexp-modifiers\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Regular Expression Pattern Modifiers for ECMAScript](https://github.com/tc39/proposal-regexp-modifiers)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-regexp-modifiers/](https://babeljs.io/docs/babel-plugin-proposal-regexp-modifiers/)"
- name: '@babel/plugin-proposal-throw-expressions'
  id: babel-plugin-proposal-throw-expressions/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-proposal-throw-expressions\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nfunction test(param = throw new Error(\"required!\")) {\n  const test = param === true || throw new Error(\"Falsy!\");\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-throw-expressions\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-throw-expressions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-throw-expressions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-throw-expressions\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-throw-expressions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-throw-expressions\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: ECMAScript throw expressions](https://github.com/tc39/proposal-throw-expressions)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-throw-expressions/](https://babeljs.io/docs/babel-plugin-proposal-throw-expressions/)"
- name: '@babel/plugin-proposal-unicode-property-regex'
  id: babel-plugin-proposal-unicode-property-regex/index
  summary: Here’s an online demo
  description: "# @babel/plugin-proposal-unicode-property-regex\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2018](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n[Here’s an online demo.](https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BScript_Extensions%3DGreek%7D/u%3B&unicodePropertyEscape=1)\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-unicode-property-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-unicode-property-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-unicode-property-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-unicode-property-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/@babel/plugin-proposal-unicode-property-regex script.js\n```\n\n### Via Node.js API[​](#via-nodejs-api \"Direct link to Via Node.js API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-proposal-unicode-property-regex\"],\n});\n```\n\nTo transpile to ES6/ES2015:\n\n``` js\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\n    [\n      \"@babel/plugin-proposal-unicode-property-regex\",\n      { useUnicodeFlag: false },\n    ],\n  ],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n- `useUnicodeFlag` (defaults to `true`)\n\nWhen disabled with `false`, the transform converts Unicode regexes to non-Unicode regexes for wider support, removing the `u` flag. See [https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false](https://github.com/mathiasbynens/regexpu-core#useunicodeflag-default-false) for more information.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n## Author[​](#author \"Direct link to Author\")\n\n| [](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|--------------------------------------------------------------|\n| [Mathias Bynens](https://mathiasbynens.be/)                  |\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-unicode-property-regex/](https://babeljs.io/docs/babel-plugin-proposal-unicode-property-regex/)"
- name: '@babel/plugin-proposal-unicode-sets-regex'
  id: babel-plugin-proposal-unicode-sets-regex/index
  summary: This plugin transforms regular expressions using the v flag, introduced by the RegExp set notation + properties of strings proposal, to regular expressions that use the u flag
  description: "# @babel/plugin-proposal-unicode-sets-regex\n\nThis plugin transforms regular expressions using the `v` flag, introduced by the [RegExp set notation + properties of strings](https://github.com/tc39/proposal-regexp-set-notation) proposal, to regular expressions that use the `u` flag.\n\n## Example[​](#example \"Direct link to Example\")\n\n### Intersection[​](#intersection \"Direct link to Intersection\")\n\n``` js\n/[\\p{ASCII}&&\\p{Decimal_Number}]/v\n```\n\nwill be transformed to\n\n``` js\n/[0-9]/u\n```\n\n### Difference[​](#difference \"Direct link to Difference\")\n\n``` js\n// Non-ASCII white spaces\n/[\\p{White_Space}--\\p{ASCII}]/v\n```\n\nwill be transformed to\n\n``` js\n/[\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/u;\n```\n\n### Property of Strings[​](#property-of-strings \"Direct link to Property of Strings\")\n\n``` js\n/^\\p{Emoji_Keycap_Sequence}$/v.test(\"*\\uFE0F\\u20E3\");\n// true\n```\n\nwill be transformed to\n\n``` js\n/^(?:\\*️⃣|#️⃣|0️⃣|1️⃣|2️⃣|3️⃣|4️⃣|5️⃣|6️⃣|7️⃣|8️⃣|9️⃣)$/u.test(\"*\\uFE0F\\u20E3\");\n// true\n```\n\nHere is [a list of supported properties](https://github.com/tc39/proposal-regexp-unicode-sequence-properties#proposed-solution). Note that using property of strings with `u`-flag will error.\n\n``` js\n/\\p{Emoji_Keycap_Sequence}/u\n// Error: Properties of strings are only supported when using the unicodeSets (v) flag.\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-proposal-unicode-sets-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-proposal-unicode-sets-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-proposal-unicode-sets-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-proposal-unicode-sets-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-proposal-unicode-sets-regex script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-unicode-sets-regex\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-proposal-unicode-sets-regex/](https://babeljs.io/docs/babel-plugin-proposal-unicode-sets-regex/)"
- name: '@babel/plugin-syntax-bigint'
  id: babel-plugin-syntax-bigint/index
  summary: This plugin only enables parsing of this feature
  description: "# @babel/plugin-syntax-bigint\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n>\n> #### Syntax only[​](#syntax-only \"Direct link to Syntax only\")\n>\n> This plugin only enables parsing of this feature. Babel doesn't support transforming BigInts. One recommendation is to use the JSBI library and eventually run `babel-plugin-transform-jsbi-to-bigint` to codemod it to BigInt in the future.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-syntax-bigint\n```\n\n``` shell\nyarn add --dev @babel/plugin-syntax-bigint\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-syntax-bigint\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-syntax-bigint\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-syntax-bigint script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-bigint\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [proposal-bigint](https://github.com/tc39/proposal-bigint)\n- [BigInt from v8.dev](https://v8.dev/features/bigint#polyfilling-transpiling)\n- [babel-plugin-transform-jsbi-to-bigint](https://github.com/GoogleChromeLabs/babel-plugin-transform-jsbi-to-bigint)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-syntax-bigint/](https://babeljs.io/docs/babel-plugin-syntax-bigint/)"
- name: '@babel/plugin-syntax-dynamic-import'
  id: babel-plugin-syntax-dynamic-import/index
  summary: 'NOTE: This plugin is included in @babel/preset-env, in ES2020'
  description: "# @babel/plugin-syntax-dynamic-import\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md).\n\ntip\n\nYou can safely remove this plugin from your Babel config if using `@babel/core` 7.8.0 or above.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-syntax-dynamic-import\n```\n\n``` shell\nyarn add --dev @babel/plugin-syntax-dynamic-import\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-syntax-dynamic-import\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-syntax-dynamic-import script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-dynamic-import\"],\n});\n```\n\n## Working with Webpack and @babel/preset-env[​](#working-with-webpack-and-babelpreset-env \"Direct link to Working with Webpack and @babel/preset-env\")\n\nCurrently, `@babel/preset-env` is unaware that using `import()` with [Webpack relies on `Promise` internally](https://webpack.js.org/guides/code-splitting/#dynamic-imports). Environments which do not have builtin support for `Promise`, like Internet Explorer, will require both the `promise` and `iterator` polyfills be added manually.\n\nFor example, with `core-js@3`:\n\n``` js\nconst config = {\n  entry: [\n    \"core-js/modules/es.promise\",\n    \"core-js/modules/es.array.iterator\",\n    path.resolve(__dirname, \"src/main.js\"),\n  ],\n  // ...\n};\n```\n\nor\n\n``` js\nimport \"core-js/modules/es.promise\";\nimport \"core-js/modules/es.array.iterator\";\n\n// ...\n```\n\nThis is the same for `core-js@2`, except the imports paths are slightly different:\n\n``` js\nconst config = {\n  entry: [\n    \"core-js/modules/es6.promise\",\n    \"core-js/modules/es6.array.iterator\",\n    path.resolve(__dirname, \"src/main.js\"),\n  ],\n  // ...\n};\n```\n\nor\n\n``` js\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.array.iterator\";\n\n// ...\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-syntax-dynamic-import/](https://babeljs.io/docs/babel-plugin-syntax-dynamic-import/)"
- name: '@babel/plugin-syntax-import-meta'
  id: babel-plugin-syntax-import-meta/index
  summary: 'NOTE: This plugin is included in @babel/preset-env, in ES2020'
  description: "# @babel/plugin-syntax-import-meta\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2020](https://github.com/tc39/proposals/blob/master/finished-proposals.md).\n\ntip\n\nYou can safely remove this plugin from your Babel config if using `@babel/core` 7.10.0 or above.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-syntax-import-meta\n```\n\n``` shell\nyarn add --dev @babel/plugin-syntax-import-meta\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-syntax-import-meta\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-meta\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-syntax-import-meta script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-meta\"]\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-syntax-import-meta/](https://babeljs.io/docs/babel-plugin-syntax-import-meta/)"
- name: '@babel/plugin-syntax-jsx'
  id: babel-plugin-syntax-jsx/index
  summary: Using this plugin directly only enables Babel to parse this syntax
  description: "# @babel/plugin-syntax-jsx\n\n> #### Syntax only[​](#syntax-only \"Direct link to Syntax only\")\n>\n> Using this plugin directly only enables Babel to parse this syntax. If you want to transform JSX syntax then use the [transform-react-jsx](../babel-plugin-transform-react-jsx/index) plugin or [react](../babel-preset-react/index) preset to *both* parse and transform this syntax.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-syntax-jsx\n```\n\n``` shell\nyarn add --dev @babel/plugin-syntax-jsx\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-syntax-jsx\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-syntax-jsx\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-syntax-jsx script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-jsx\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-syntax-jsx/](https://babeljs.io/docs/babel-plugin-syntax-jsx/)"
- name: '@babel/plugin-syntax-top-level-await'
  id: babel-plugin-syntax-top-level-await/index
  summary: 'NOTE: This plugin is included in @babel/preset-env, in ES2022'
  description: "# @babel/plugin-syntax-top-level-await\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2022](https://github.com/tc39/proposals/blob/master/finished-proposals.md).\n>\n> #### Syntax only[​](#syntax-only \"Direct link to Syntax only\")\n>\n> This plugin only enables parsing of this feature. Babel doesn't support transforming top-level await, but you can use Rollup's `experimentalTopLevelAwait` or webpack@5's `experiments.topLevelAwait` options.\n\ntip\n\nYou can safely remove this plugin from your Babel config if using `@babel/core` 7.15.0 or above.\n\n``` js\nconst val = await promise;\n\nexport { val };\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-syntax-top-level-await\n```\n\n``` shell\nyarn add --dev @babel/plugin-syntax-top-level-await\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-syntax-top-level-await\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-syntax-top-level-await\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-syntax-top-level-await script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-syntax-top-level-await\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-syntax-top-level-await/](https://babeljs.io/docs/babel-plugin-syntax-top-level-await/)"
- name: '@babel/plugin-transform-arrow-functions'
  id: babel-plugin-transform-arrow-functions/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-transform-arrow-functions\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar a = () => {};\nvar a = b => b;\n\nconst double = [1, 2, 3].map(num => num * 2);\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    this._friends.forEach(f => console.log(this._name + \" knows \" + f));\n  },\n};\nconsole.log(bob.printFriends());\n```\n\n**Out**\n\n``` js\nvar a = function() {};\nvar a = function(b) {\n  return b;\n};\n\nconst double = [1, 2, 3].map(function(num) {\n  return num * 2;\n});\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    var _this = this;\n\n    this._friends.forEach(function(f) {\n      return console.log(_this._name + \" knows \" + f);\n    });\n  },\n};\nconsole.log(bob.printFriends());\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-arrow-functions\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-arrow-functions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-arrow-functions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-arrow-functions\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [[\"@babel/plugin-transform-arrow-functions\", { \"spec\": true }]]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-arrow-functions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-arrow-functions\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `spec`[​](#spec \"Direct link to spec\")\n\n`boolean`, defaults to `false`.\n\n**Example**\n\nUsing spec mode with the above example produces:\n\n``` js\nvar _this = this;\n\nvar a = function a() {\n  babelHelpers.newArrowCheck(this, _this);\n}.bind(this);\nvar a = function a(b) {\n  babelHelpers.newArrowCheck(this, _this);\n  return b;\n}.bind(this);\n\nconst double = [1, 2, 3].map(\n  function(num) {\n    babelHelpers.newArrowCheck(this, _this);\n    return num * 2;\n  }.bind(this)\n);\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    var _this2 = this;\n\n    this._friends.forEach(\n      function(f) {\n        babelHelpers.newArrowCheck(this, _this2);\n        return console.log(this._name + \" knows \" + f);\n      }.bind(this)\n    );\n  },\n};\nconsole.log(bob.printFriends());\n```\n\nThis option enables the following:\n\n- Wrap the generated function in `.bind(this)` and keeps uses of `this` inside the function as-is, instead of using a renamed `this`.\n\n- Add a runtime check to ensure the functions are not instantiated.\n\n- Add names to arrow functions.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-arrow-functions/](https://babeljs.io/docs/babel-plugin-transform-arrow-functions/)"
- name: '@babel/plugin-transform-async-to-generator'
  id: babel-plugin-transform-async-to-generator/index
  summary: 'When using await with non-promise values, Bluebird will throw "Error: A value was yielded that could not be treated as a promise". Since Babel cannot automatically handle this runtime error, you should manually transform it to a promise'
  description: "# @babel/plugin-transform-async-to-generator\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2017](https://github.com/tc39/proposals/blob/master/finished-proposals.md) In Babel 7, `transform-async-to-module-method` was merged into this plugin\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nasync function foo() {\n  await bar();\n}\n```\n\n**Out**\n\n``` js\nvar _asyncToGenerator = function (fn) {\n  ...\n};\nvar foo = _asyncToGenerator(function* () {\n  yield bar();\n});\n```\n\n**Out with options**\n\n> Turn async functions into a Bluebird coroutine ([caveats](#bluebird-non-promise-runtime-error))\n\n``` js\nvar Bluebird = require(\"bluebird\");\n\nvar foo = Bluebird.coroutine(function*() {\n  yield bar();\n});\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-async-to-generator\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-async-to-generator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-async-to-generator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-async-to-generator\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-async-to-generator\",\n      {\n        \"module\": \"bluebird\",\n        \"method\": \"coroutine\"\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-async-to-generator script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-async-to-generator\"],\n});\n```\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\n### Bluebird non-promise runtime error[​](#bluebird-non-promise-runtime-error \"Direct link to Bluebird non-promise runtime error\")\n\nWhen using `await` with non-promise values, Bluebird will throw \"Error: A value was yielded that could not be treated as a promise\". Since Babel cannot automatically handle this runtime error, you should manually transform it to a promise.\n\n``` diff\nasync function foo() {\n-  await 42;\n+  await Promise.resolve(42);\n}\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Proposal: Async Functions for ECMAScript](https://github.com/tc39/ecmascript-asyncawait)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-async-to-generator/](https://babeljs.io/docs/babel-plugin-transform-async-to-generator/)"
- name: '@babel/plugin-transform-block-scoped-functions'
  id: babel-plugin-transform-block-scoped-functions/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-block-scoped-functions\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\n{\n  function name(n) {\n    return n;\n  }\n}\n\nname(\"Steve\");\n```\n\n**Out**\n\n``` js\n{\n  let name = function(n) {\n    return n;\n  };\n}\nname(\"Steve\");\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-block-scoped-functions\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-block-scoped-functions\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-block-scoped-functions\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-block-scoped-functions\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-block-scoped-functions script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-block-scoped-functions\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-block-scoped-functions/](https://babeljs.io/docs/babel-plugin-transform-block-scoped-functions/)"
- name: '@babel/plugin-transform-block-scoping'
  id: babel-plugin-transform-block-scoping/index
  summary: This plugin also validates all const variables
  description: "# @babel/plugin-transform-block-scoping\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\n{\n  let a = 3;\n}\n\nlet a = 3;\n```\n\n**Out**\n\n``` js\n{\n  var _a = 3;\n}\n\nvar a = 3;\n```\n\n## Constant checks[​](#constant-checks \"Direct link to Constant checks\")\n\nThis plugin also validates all `const` variables. Reassignment of constants is a runtime error and it will insert the necessary error code for those.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-block-scoping\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-block-scoping\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-block-scoping\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-block-scoping\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-block-scoping\",\n      {\n        \"throwIfClosureRequired\": true\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-block-scoping script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-block-scoping\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `throwIfClosureRequired`[​](#throwifclosurerequired \"Direct link to throwifclosurerequired\")\n\n`boolean`, defaults to `false`.\n\nIn cases such as the following it's impossible to rewrite let/const without adding an additional function and closure while transforming:\n\n``` js\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n```\n\nIn extremely performance-sensitive code, this can be undesirable. If `\"throwIfClosureRequired\": true` is set, Babel throws when transforming these patterns instead of automatically adding an additional function.\n\n### `tdz`[​](#tdz \"Direct link to tdz\")\n\n`boolean`, defaults to `false`.\n\nBy default this plugin will ignore the *temporal dead zone (TDZ)* for block-scoped variables. The following code will **not throw an error when transpiled with Babel, which is not spec compliant**:\n\n``` js\ni;\nlet i;\n```\n\nIf you need these errors you can tell Babel to try and find them by setting `\"tdz\": true` for this plugin. However, the current implementation might not get all edge cases right and its best to just avoid code like this in the first place.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-block-scoping/](https://babeljs.io/docs/babel-plugin-transform-block-scoping/)"
- name: '@babel/plugin-transform-classes'
  id: babel-plugin-transform-classes/index
  summary: When extending a native class (e.g., class extends Array {}), the super class needs to be wrapped
  description: "# @babel/plugin-transform-classes\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\nWhen extending a native class (e.g., `class extends Array {}`), the super class needs to be wrapped. This is needed to workaround two problems:\n\n- Babel transpiles classes using `SuperClass.apply(/* ... */)`, but native classes aren't callable and thus throw in this case.\n- Some built-in functions (like `Array`) always return a new object. Instead of returning it, Babel should treat it as the new `this`.\n\nThe wrapper works on IE11 and every other browser with `Object.setPrototypeOf` or `__proto__` as fallback. There is **NO IE \\<= 10 support**. If you need IE \\<= 10 it's recommended that you don't extend natives.\n\nBabel needs to statically know if you are extending a built-in class. For this reason, the \"mixin pattern\" doesn't work:\n\n``` js\nclass Foo extends mixin(Array) {}\n\nfunction mixin(Super) {\n  return class extends Super {\n    mix() {}\n  };\n}\n```\n\nTo workaround this limitation, you can add another class in the inheritance chain so that Babel can wrap the native class:\n\n``` js\nconst ExtensibleArray = class extends Array {};\n\nclass Foo extends mixin(ExtensibleArray) {}\n```\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nclass Test {\n  constructor(name) {\n    this.name = name;\n  }\n\n  logger() {\n    console.log(\"Hello\", this.name);\n  }\n}\n```\n\n**Out**\n\n``` js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Test = (function() {\n  function Test(name) {\n    _classCallCheck(this, Test);\n\n    this.name = name;\n  }\n\n  Test.prototype.logger = function logger() {\n    console.log(\"Hello\", this.name);\n  };\n\n  return Test;\n})();\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-classes\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-classes\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-classes\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` js\n// without options\n{\n  \"plugins\": [\"@babel/plugin-transform-classes\"]\n}\n\n// with options\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-classes\", {\n      \"loose\": true\n    }]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-classes script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-classes\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\n> ⚠️ Consider migrating to the top level [`assumptions`](../assumptions/index) which offers granular control over various `loose` mode deductions Babel has applied.\n\n``` json\n{\n  \"assumptions\": {\n    \"constantSuper\": true,\n    \"noClassCalls\": true,\n    \"setClassMethods\": true,\n    \"superIsCallableConstructor\": true\n  }\n}\n```\n\n#### Method enumerability[​](#method-enumerability \"Direct link to Method enumerability\")\n\nPlease note that in loose mode class methods **are** enumerable. This is not in line with the spec and you may run into issues.\n\n#### Method assignment[​](#method-assignment \"Direct link to Method assignment\")\n\nUnder loose mode, methods are defined on the class prototype with simple assignments instead of being defined. This can result in the following not working:\n\n``` js\nclass Foo {\n  set bar() {\n    throw new Error(\"foo!\");\n  }\n}\n\nclass Bar extends Foo {\n  bar() {\n    // will throw an error when this method is defined\n  }\n}\n```\n\nWhen `Bar.prototype.foo` is defined it triggers the setter on `Foo`. This is a case that is very unlikely to appear in production code however it's something to keep in mind.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-classes/](https://babeljs.io/docs/babel-plugin-transform-classes/)"
- name: '@babel/plugin-transform-computed-properties'
  id: babel-plugin-transform-computed-properties/index
  summary: Just like method assignment in classes, in loose mode, computed property names use simple assignments instead of being defined
  description: "# @babel/plugin-transform-computed-properties\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar obj = {\n  [\"x\" + foo]: \"heh\",\n  [\"y\" + bar]: \"noo\",\n  foo: \"foo\",\n  bar: \"bar\",\n};\n```\n\n**Out**\n\n``` js\nvar _obj;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar obj = ((_obj = {}),\n_defineProperty(_obj, \"x\" + foo, \"heh\"),\n_defineProperty(_obj, \"y\" + bar, \"noo\"),\n_defineProperty(_obj, \"foo\", \"foo\"),\n_defineProperty(_obj, \"bar\", \"bar\"),\n_obj);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-computed-properties\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-computed-properties\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-computed-properties\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-computed-properties\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-computed-properties\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-computed-properties script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-computed-properties\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`\n\nJust like method assignment in classes, in loose mode, computed property names use simple assignments instead of being defined. This is unlikely to be an issue in production code.\n\n> ⚠️ Consider migrating to the top level [`setComputedProperties`](../assumptions/index#setcomputedproperties) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"setComputedProperties\": true\n  }\n}\n```\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\n***In***\n\n``` js\nvar obj = {\n  [\"x\" + foo]: \"heh\",\n  [\"y\" + bar]: \"noo\",\n  foo: \"foo\",\n  bar: \"bar\",\n};\n```\n\n***Out***\n\nWhen `setComputedProperties` is `true`.\n\n``` js\nvar _obj;\n\nvar obj = ((_obj = {}),\n(_obj[\"x\" + foo] = \"heh\"),\n(_obj[\"y\" + bar] = \"noo\"),\n(_obj.foo = \"foo\"),\n(_obj.bar = \"bar\"),\n_obj);\n```\n\nWhen `setComputedProperties` is `false`.\n\n``` js\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _obj;\n\nvar obj = ((_obj = {}),\n_defineProperty(_obj, \"x\" + foo, \"heh\"),\n_defineProperty(_obj, \"y\" + bar, \"noo\"),\n_defineProperty(_obj, \"foo\", \"foo\"),\n_defineProperty(_obj, \"bar\", \"bar\"),\n_obj);\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-computed-properties/](https://babeljs.io/docs/babel-plugin-transform-computed-properties/)"
- name: '@babel/plugin-transform-destructuring'
  id: babel-plugin-transform-destructuring/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-transform-destructuring\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nlet { x, y } = obj;\n\nlet [a, b, ...rest] = arr;\n```\n\n**Out**\n\n``` js\nfunction _toArray(arr) { ... }\n\nlet _obj = obj,\n    x = _obj.x,\n    y = _obj.y;\n\nlet _arr = arr,\n    _arr2 = _toArray(_arr),\n    a = _arr2[0],\n    b = _arr2[1],\n    rest = _arr2.slice(2);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-destructuring\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-destructuring\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-destructuring\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-destructuring\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-destructuring script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-destructuring\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nEnabling this option will assume that what you want to destructure is an array and won't use `Array.from` on other iterables.\n\n> ⚠️ Consider migrating to the top level [`iterableIsArray`](../assumptions/index#iterableisarray) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  }\n}\n```\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`boolean`, defaults to `false`.\n\nEnabling this option will use `Object.assign` directly instead of the Babel's `extends` helper.\n\n##### Example[​](#example \"Direct link to Example\")\n\n**.babelrc**\n\n``` json\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-destructuring\", { \"useBuiltIns\": true }]\n  ]\n}\n```\n\n**In**\n\n``` js\nvar { ...x } = z;\n```\n\n**Out**\n\n``` js\nvar _z = z,\n  x = Object.assign({}, _z);\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n### `allowArrayLike`[​](#allowarraylike \"Direct link to allowarraylike\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.10.0`\n\nThis option allows destructuring array-like objects using the array destructuring syntax.\n\nAn array-like object is an object with a `length` property: for example, `{ 0: \"a\", 1: \"b\", length: 2 }`. Note that, like real arrays, array-like objects can have \"holes\": `{ 1: \"a\", length: 3 }` is equivalent to `[ (hole), \"a\", (hole) ]`.\n\nWhile it is *not* spec-compliant to destructure array-like objects as if they were arrays, there are many objects that would be *iterables* in modern browsers with `Symbol.iterator` support. Some notable examples are the DOM collections, like `document.querySelectorAll(\"img.big\")`, which are the main use case for this option.\n\nPlease note that Babel allows destructuring `arguments` in old engines even if this option is disabled, because it's defined as *iterable* in the ECMAScript specification.\n\n> ⚠️ Consider migrating to the top level [`arrayLikeIsIterable`](../assumptions/index#arraylikeisiterable) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"arrayLikeIsIterable\": true\n  }\n}\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [MDN: Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-destructuring/](https://babeljs.io/docs/babel-plugin-transform-destructuring/)"
- name: '@babel/plugin-transform-dotall-regex'
  id: babel-plugin-transform-dotall-regex/index
  summary: Here’s an online demo
  description: "# @babel/plugin-transform-dotall-regex\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2018](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\n/./s;\n```\n\n**Out**\n\n``` js\n/[\\0-\\uFFFF]/;\n```\n\n**In**\n\n``` js\n/./su;\n```\n\n**Out**\n\n``` js\n/[\\0-\\u{10FFFF}]/u;\n```\n\n[Here’s an online demo.](https://mothereff.in/regexpu#input=const+regex+%3D+/foo.bar/s%3B%0Aconsole.log%28%0A++regex.test%28%27foo%5Cnbar%27%29%0A%29%3B%0A//+%E2%86%92+true&dotAllFlag=1)\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-dotall-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-dotall-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-dotall-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n`.babelrc`\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-dotall-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\n$ babel --plugins @babel/plugin-transform-dotall-regex script.js\n```\n\n### Via Node.js API[​](#via-nodejs-api \"Direct link to Via Node.js API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-transform-dotall-regex\"],\n});\n```\n\n## Author[​](#author \"Direct link to Author\")\n\n| [](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|--------------------------------------------------------------|\n| [Mathias Bynens](https://mathiasbynens.be/)                  |\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-dotall-regex/](https://babeljs.io/docs/babel-plugin-transform-dotall-regex/)"
- name: '@babel/plugin-transform-duplicate-keys'
  id: babel-plugin-transform-duplicate-keys/index
  summary: This plugin actually converts duplicate keys in objects to be computed properties, which then must be handled by the @babel/plugin-transform-computed-properties plugin
  description: "# @babel/plugin-transform-duplicate-keys\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\nThis plugin actually converts duplicate keys in objects to be computed properties, which then must be handled by the [@babel/plugin-transform-computed-properties](../babel-plugin-transform-computed-properties/index) plugin. The final result won't contain any object literals with duplicate keys.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar x = { a: 5, a: 6 };\nvar y = {\n  get a() {},\n  set a(x) {},\n  a: 3,\n};\n```\n\n**Out**\n\n``` js\nvar x = { a: 5, [\"a\"]: 6 };\nvar y = {\n  get a() {},\n  set a(x) {},\n  [\"a\"]: 3,\n};\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-duplicate-keys\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-duplicate-keys\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-duplicate-keys\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-duplicate-keys\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-duplicate-keys script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-duplicate-keys\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-duplicate-keys/](https://babeljs.io/docs/babel-plugin-transform-duplicate-keys/)"
- name: '@babel/plugin-transform-exponentiation-operator'
  id: babel-plugin-transform-exponentiation-operator/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-exponentiation-operator\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2016](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nlet x = 10 ** 2;\n\nx **= 3;\n```\n\n**Out**\n\n``` js\nlet x = Math.pow(10, 2);\n\nx = Math.pow(x, 3);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-exponentiation-operator\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-exponentiation-operator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-exponentiation-operator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-exponentiation-operator\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-exponentiation-operator script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-exponentiation-operator\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [Spec: Exponentiation Operator](https://tc39.github.io/ecma262/#sec-exp-operator)\n- [Proposal: Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-exponentiation-operator/](https://babeljs.io/docs/babel-plugin-transform-exponentiation-operator/)"
- name: '@babel/plugin-transform-flow-strip-types'
  id: babel-plugin-transform-flow-strip-types/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-transform-flow-strip-types\n\n> **NOTE**: This plugin is included in `@babel/preset-flow`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfunction foo(one: any, two: number, three?): string {}\n```\n\n**Out**\n\n``` js\nfunction foo(one, two, three) {}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-flow-strip-types\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-flow-strip-types\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-flow-strip-types\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-flow-strip-types\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-flow-strip-types script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-flow-strip-types\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `all`[​](#all \"Direct link to all\")\n\n`boolean`, defaults to `false`.\n\nFlow will only parse Flow-specific features if a `@flow` pragma is present atop the file, or the [`all` option](https://flow.org/en/docs/config/options/#toc-all-boolean) is set inside the `.flowconfig`.\n\nIf you are using the `all` option in your Flow config, be sure to set this option to `true` to get matching behavior.\n\nFor example, without either of the above, the following call expression with a type argument:\n\n``` text\nf<T>(e)\n```\n\nWould get parsed as a nested binary expression:\n\n``` js\nf < T > e;\n```\n\n### `requireDirective`[​](#requiredirective \"Direct link to requiredirective\")\n\n`boolean`, defaults to `false`.\n\nSetting this to true will only strip annotations and declarations from files that contain the `// @flow` directive. It will also throw errors for any Flow annotations found in files without the directive.\n\n### `allowDeclareFields`[​](#allowdeclarefields \"Direct link to allowdeclarefields\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.9.0`\n\n> NOTE: This will be enabled by default in Babel 8\n\nWhen enabled, type-only class fields are only removed if they are prefixed with the `declare` modifier:\n\n``` js\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-flow-strip-types/](https://babeljs.io/docs/babel-plugin-transform-flow-strip-types/)"
- name: '@babel/plugin-transform-for-of'
  id: babel-plugin-transform-for-of/index
  summary: In loose mode, arrays are put in a fast path, thus heavily increasing performance
  description: "# @babel/plugin-transform-for-of\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfor (var i of foo) {\n}\n```\n\n**Out**\n\n``` js\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (\n    var _iterator = foo[Symbol.iterator](), _step;\n    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n    _iteratorNormalCompletion = true\n  ) {\n    var i = _step.value;\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-for-of\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-for-of\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-for-of\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` js\n{\n  \"plugins\": [\"@babel/plugin-transform-for-of\"]\n}\n```\n\nWith options:\n\n``` js\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-for-of\", {\n      \"loose\": true, // defaults to false\n      \"assumeArray\": true // defaults to false\n    }]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-for-of script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-for-of\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`\n\nIn loose mode, arrays are put in a fast path, thus heavily increasing performance.\n\n> ⚠️ Consider migrating to the top level [`skipForOfIteratorClosing`](../assumptions/index#skipforofiteratorclosing) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"skipForOfIteratorClosing\": true\n  }\n}\n```\n\nAll other iterables will continue to work fine.\n\n#### Example[​](#example-1 \"Direct link to Example\")\n\n**In**\n\n``` js\nfor (var i of foo) {\n}\n```\n\n**Out**\n\n``` js\nfor (\n  var _iterator = foo,\n    _isArray = Array.isArray(_iterator),\n    _i = 0,\n    _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();\n  ;\n\n) {\n  var _ref;\n\n  if (_isArray) {\n    if (_i >= _iterator.length) break;\n    _ref = _iterator[_i++];\n  } else {\n    _i = _iterator.next();\n    if (_i.done) break;\n    _ref = _i.value;\n  }\n\n  var i = _ref;\n}\n```\n\n#### Abrupt completions[​](#abrupt-completions \"Direct link to Abrupt completions\")\n\nUnder the `skipForOfIteratorClosing` assumption, an iterator's `return` method will not be called on abrupt completions caused by thrown errors.\n\nPlease see [google/traceur-compiler#1773](https://github.com/google/traceur-compiler/issues/1773) and [babel/babel#838](https://github.com/babel/babel/issues/838) for more information.\n\n### `allowArrayLike`[​](#allowarraylike \"Direct link to allowarraylike\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.10.0`\n\nThis option allows for-of to be used with array-like objects.\n\nAn array-like object is an object with a `length` property: for example, `{ 0: \"a\", 1: \"b\", length: 2 }`. Note that, like real arrays, array-like objects can have \"holes\": `{ 1: \"a\", length: 3 }` is equivalent to `[ (hole), \"a\", (hole) ]`.\n\nWhile it is *not* spec-compliant to iterate array-like objects as if they were arrays, there are many objects that would be *iterables* in modern browsers with `Symbol.iterator` support. Some notable examples are the DOM collections, like `document.querySelectorAll(\"img.big\")`, which are the main use case for this option.\n\nPlease note that Babel allows iterating `arguments` in old engines even if this option is disabled, because it's defined as *iterable* in the ECMAScript specification.\n\n### `assumeArray`[​](#assumearray \"Direct link to assumearray\")\n\n`boolean`, defaults to `false`\n\nThis will apply the optimization shown below to all for-of loops by assuming that *all* loops are arrays.\n\nCan be useful when you just want a for-of loop to represent a basic for loop over an array.\n\n### Optimization[​](#optimization \"Direct link to Optimization\")\n\nIf a basic array is used, Babel will compile the for-of loop down to a regular for loop.\n\n**In**\n\n``` js\nfor (let a of [1, 2, 3]) {\n}\n```\n\n**Out**\n\n``` js\nvar _arr = [1, 2, 3];\nfor (var _i = 0; _i < _arr.length; _i++) {\n  var a = _arr[_i];\n}\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-for-of/](https://babeljs.io/docs/babel-plugin-transform-for-of/)"
- name: '@babel/plugin-transform-function-name'
  id: babel-plugin-transform-function-name/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-function-name\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nlet number = x => x;\n```\n\n**Out**\n\n``` js\nvar number = function number(x) {\n  return x;\n};\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-function-name\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-function-name\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-function-name\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-function-name\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-function-name script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-function-name\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-function-name/](https://babeljs.io/docs/babel-plugin-transform-function-name/)"
- name: '@babel/plugin-transform-instanceof'
  id: babel-plugin-transform-instanceof/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-instanceof\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfoo instanceof Bar;\n```\n\n**Out**\n\n``` js\nfunction _instanceof(left, right) {\n  if (\n    right != null &&\n    typeof Symbol !== \"undefined\" &&\n    right[Symbol.hasInstance]\n  ) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\n_instanceof(foo, Bar);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-instanceof\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-instanceof\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-instanceof\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-instanceof\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-instanceof script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-instanceof\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [ES6 Spec: InstanceOf Operator Semantics](https://www.ecma-international.org/ecma-262/6.0/#sec-instanceofoperator)\n- [MDN: Symbol.hasInstance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-instanceof/](https://babeljs.io/docs/babel-plugin-transform-instanceof/)"
- name: '@babel/plugin-transform-jscript'
  id: babel-plugin-transform-jscript/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-jscript\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = function bar() {};\n```\n\n**Out**\n\n``` js\n\"use strict\";\n\nvar foo = (function() {\n  function bar() {}\n\n  return bar;\n})();\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-jscript\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-jscript\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-jscript\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-jscript\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-jscript script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-jscript\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-jscript/](https://babeljs.io/docs/babel-plugin-transform-jscript/)"
- name: '@babel/plugin-transform-literals'
  id: babel-plugin-transform-literals/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-literals\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar b = 0b11; // binary integer literal\nvar o = 0o7; // octal integer literal\nconst u = \"Hello\\u{000A}\\u{0009}!\"; // unicode string literals, newline and tab\n```\n\n**Out**\n\n``` js\nvar b = 3; // binary integer literal\nvar o = 7; // octal integer literal\nconst u = \"Hello\\n\\t!\"; // unicode string literals, newline and tab\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-literals\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-literals\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-literals\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-literals\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-literals script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-literals\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-literals/](https://babeljs.io/docs/babel-plugin-transform-literals/)"
- name: '@babel/plugin-transform-member-expression-literals'
  id: babel-plugin-transform-member-expression-literals/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-member-expression-literals\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nobj.foo = \"isValid\";\n\nobj.const = \"isKeyword\";\nobj[\"var\"] = \"isKeyword\";\n```\n\n**Out**\n\n``` js\nobj.foo = \"isValid\";\n\nobj[\"const\"] = \"isKeyword\";\nobj[\"var\"] = \"isKeyword\";\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/plugin-transform-member-expression-literals --save-dev\n```\n\n``` shell\nyarn add @babel/plugin-transform-member-expression-literals --dev\n```\n\n``` shell\npnpm add @babel/plugin-transform-member-expression-literals --save-dev\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-member-expression-literals\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-member-expression-literals script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-member-expression-literals\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-member-expression-literals/](https://babeljs.io/docs/babel-plugin-transform-member-expression-literals/)"
- name: '@babel/plugin-transform-modules-amd'
  id: babel-plugin-transform-modules-amd/index
  summary: This plugin transforms ECMAScript modules to AMD
  description: "# @babel/plugin-transform-modules-amd\n\nHistory\n\n| Version   | Changes                                |\n|-----------|----------------------------------------|\n| `v7.14.0` | Implemented the `importInterop` option |\n\n> **NOTE**: This plugin is included in `@babel/preset-env` under the `modules` option\n\nThis plugin transforms ECMAScript modules to [AMD](https://github.com/amdjs/amdjs-api/blob/master/AMD.md). Note that only the *syntax* of import/export statements (`import \"./mod.js\"`) and import expressions (`import('./mod.js')`) is transformed, as Babel is unaware of the different resolution algorithms between implementations of ECMAScript modules and AMD.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nexport default 42;\n```\n\n**Out**\n\n``` js\ndefine([\"exports\"], function(exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true,\n  });\n\n  exports.default = 42;\n});\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-modules-amd\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-modules-amd\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-modules-amd\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-amd\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-modules-amd script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-amd\"],\n});\n```\n\n### Options[​](#options \"Direct link to Options\")\n\nSee options for [`@babel/plugin-transform-modules-commonjs`](https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs#options).\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-modules-amd/](https://babeljs.io/docs/babel-plugin-transform-modules-amd/)"
- name: '@babel/plugin-transform-modules-commonjs'
  id: babel-plugin-transform-modules-commonjs/index
  summary: This plugin transforms ECMAScript modules to CommonJS
  description: "# @babel/plugin-transform-modules-commonjs\n\nHistory\n\n| Version   | Changes                                |\n|-----------|----------------------------------------|\n| `v7.14.0` | Implemented the `importInterop` option |\n\n> **NOTE**: This plugin is included in `@babel/preset-env` under the `modules` option\n\nThis plugin transforms ECMAScript modules to [CommonJS](http://wiki.commonjs.org/wiki/Modules/1.1). Note that only the *syntax* of import/export statements (`import \"./mod.js\"`) and import expressions (`import('./mod.js')`) is transformed, as Babel is unaware of different resolution algorithms between implementations of ECMAScript modules and CommonJS.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nexport default 42;\n```\n\n**Out**\n\n``` js\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n\nexports.default = 42;\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-modules-commonjs\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-modules-commonjs\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-modules-commonjs\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` js\n// without options\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n}\n\n// with options\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-modules-commonjs\", {\n      \"allowTopLevelThis\": true\n    }]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-modules-commonjs script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-commonjs\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `importInterop`[​](#importinterop \"Direct link to importinterop\")\n\n`\"babel\" | \"node\" | \"none\"`, or `(specifier: string, requestingFilename: string | undefined) => \"babel\" | \"node\" | \"none\"`. Defaults to `\"babel\"`.\n\nCommonJS modules and ECMAScript modules are not fully compatible. However, compilers, bundlers and JavaScript runtimes developed different strategies to make them work together as well as possible.\n\nThis option specify which interop strategy Babel should use. When it's a function, Babel calls it passing the import specifier and the importer path. For example, when compiling a `/full/path/to/foo.js` file containing `import { a } from 'b'`, Babel will call it with parameters `('b', '/full/path/to/foo.js')`.\n\n#### `\"babel\"`[​](#babel \"Direct link to babel\")\n\nWhen using exports with babel a non-enumerable `__esModule` property is exported. This property is then used to determine if the import *is* the default export or if it *contains* the default export.\n\n``` js\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar _foo = _interopRequireDefault(require(\"foo\"));\nvar _bar = require(\"bar\");\n\n_foo.default;\n_bar.bar;\n```\n\nWhen this import interop is used, if both the imported and the importer module are compiled with Babel they behave as if none of them was compiled.\n\nThis is the default behavior.\n\n#### `\"node\"`[​](#node \"Direct link to node\")\n\nWhen importing CommonJS files (either directly written in CommonJS, or generated with a compiler) Node.js always binds the `default` export to the value of `module.exports`.\n\n``` js\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nvar _foo = require(\"foo\");\nvar _bar = require(\"bar\");\n\n_foo;\n_bar.bar;\n```\n\nThis is not exactly the same as what Node.js does since Babel allows accessing any property of `module.exports` as a named export, while Node.js only allows importing *statically analyzable* properties of `module.exports`. However, any import working in Node.js will also work when compiled with Babel using `importInterop: \"node\"`.\n\n#### `\"none\"`[​](#none \"Direct link to none\")\n\nIf you know that the imported file has been transformed with a compiler that stores the `default` export on `exports.default` (such as Babel), you can safely omit the `_interopRequireDefault` helper.\n\n``` js\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nvar _foo = require(\"foo\");\nvar _bar = require(\"bar\");\n\n_foo.default;\n_bar.bar;\n```\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nBy default, when using exports with babel a non-enumerable `__esModule` property is exported.\n\n``` js\nvar foo = (exports.foo = 5);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n```\n\n> ⚠️ Consider migrating to the top level [`enumerableModuleMeta`](../assumptions/index#enumerablemodulemeta) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"enumerableModuleMeta\": true\n  }\n}\n```\n\nIn environments that don't support this you can enable the `enumerableModuleMeta` assumption, instead of using `Object.defineProperty` an assignment will be used instead.\n\n``` js\nvar foo = (exports.foo = 5);\nexports.__esModule = true;\n```\n\n### `strict`[​](#strict \"Direct link to strict\")\n\n`boolean`, defaults to `false`\n\nBy default, when using exports with babel a non-enumerable `__esModule` property is exported. In some cases this property is used to determine if the import *is* the default export or if it *contains* the default export.\n\n``` js\nvar foo = (exports.foo = 5);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n```\n\nIn order to prevent the `__esModule` property from being exported, you can set the `strict` option to `true`.\n\n### `lazy`[​](#lazy \"Direct link to lazy\")\n\n`boolean`, `Array<string>`, or `(string) => boolean`, defaults to `false`\n\nChanges Babel's compiled `import` statements to be lazily evaluated when their imported bindings are used for the first time.\n\nThis can improve initial load time of your module because evaluating dependencies up front is sometimes entirely un-necessary. This is especially the case when implementing a library module.\n\nThe value of `lazy` has a few possible effects:\n\n- `false` - No lazy initialization of any imported module.\n\n- `true` - Do not lazy-initialize local `./foo` imports, but lazy-init `foo` dependencies.\n\n  Local paths are much more likely to have circular dependencies, which may break if loaded lazily, so they are not lazy by default, whereas dependencies between independent modules are rarely cyclical.\n\n- `Array<string>` - Lazy-initialize all imports with source matching one of the given strings.\n\n- `(string) => boolean` - Pass a callback that will be called to decide if a given source string should be lazy-loaded.\n\nThe two cases where imports can never be lazy are:\n\n- `import \"foo\";`\n\n  Side-effect imports are automatically non-lazy since their very existence means that there is no binding to later kick off initialization.\n\n- `export * from \"foo\"`\n\n  Re-exporting all names requires up-front execution because otherwise there is no way to know what names need to be exported.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n### `noInterop`[​](#nointerop \"Direct link to nointerop\")\n\n`boolean`, defaults to `false`\n\n> ⚠️ **Deprecated**: Use the `importInterop` option instead.\n\nWhen set to `true`, this option has the same behavior as setting `importInterop: \"none\"`.\n\n## Relevant [`assumptions`](https://babeljs.io/docs/en/assumptions)[​](#relevant-assumptions \"Direct link to relevant-assumptions\")\n\n- [`enumerableModuleMeta`](https://babeljs.io/docs/en/assumptions#enumerablemodulemeta)\n- [`noIncompleteNsImportDetection`](https://babeljs.io/docs/en/assumptions#noincompletensimportdetection)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-modules-commonjs/](https://babeljs.io/docs/babel-plugin-transform-modules-commonjs/)"
- name: '@babel/plugin-transform-modules-systemjs'
  id: babel-plugin-transform-modules-systemjs/index
  summary: This plugin transforms ECMAScript modules to SystemJS
  description: "# @babel/plugin-transform-modules-systemjs\n\n> **NOTE**: This plugin is included in `@babel/preset-env` under the `modules` option\n\nThis plugin transforms ECMAScript modules to [SystemJS](https://github.com/systemjs/systemjs/blob/master/docs/system-register.md). Note that only the *syntax* of import/export statements (`import \"./mod.js\"`) and import expressions (`import('./mod.js')`) is transformed, as Babel is unaware of different resolution algorithms between implementations of ECMAScript modules and SystemJS.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nexport default 42;\n```\n\n**Out**\n\n``` js\nSystem.register([], function(_export, _context) {\n  return {\n    setters: [],\n    execute: function() {\n      _export(\"default\", 42);\n    },\n  };\n});\n```\n\nFor dynamic import support (`import('./lazy.js').then(m => ...)`), enable the [@babel/plugin-syntax-dynamic-import](../babel-plugin-syntax-dynamic-import/index) plugin before this one.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-modules-systemjs\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-modules-systemjs\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-modules-systemjs\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-systemjs\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-modules-systemjs\",\n      {\n        // outputs SystemJS.register(...)\n        \"systemGlobal\": \"SystemJS\"\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-modules-systemjs script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-systemjs\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-modules-systemjs/](https://babeljs.io/docs/babel-plugin-transform-modules-systemjs/)"
- name: '@babel/plugin-transform-modules-umd'
  id: babel-plugin-transform-modules-umd/index
  summary: This plugin transforms ES2015 modules to UMD
  description: "# @babel/plugin-transform-modules-umd\n\nHistory\n\n| Version   | Changes                                |\n|-----------|----------------------------------------|\n| `v7.14.0` | Implemented the `importInterop` option |\n\n> **NOTE**: This plugin is included in `@babel/preset-env` under the `modules` option\n\nThis plugin transforms ES2015 modules to [UMD](https://github.com/umdjs/umd). Note that only the *syntax* of import/export statements (`import \"./mod.js\"`) is transformed, as Babel is unaware of different resolution algorithms between implementations of ES2015 modules and UMD.\n\n⚠️ This plugin does not support dynamic import (`import('./lazy.js')`).\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nexport default 42;\n```\n\n**Out**\n\n``` js\n(function(global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {},\n    };\n    factory(mod.exports);\n    global.actual = mod.exports;\n  }\n})(this, function(exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true,\n  });\n\n  exports.default = 42;\n});\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-modules-umd\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-modules-umd\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-modules-umd\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-umd\"]\n}\n```\n\nYou can also override the names of particular libraries when this module is running in the browser. For example the `es6-promise` library exposes itself as `global.Promise` rather than `global.es6Promise`. This can be accommodated by:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-modules-umd\",\n      {\n        \"globals\": {\n          \"es6-promise\": \"Promise\"\n        }\n      }\n    ]\n  ]\n}\n```\n\n#### Default semantics[​](#default-semantics \"Direct link to Default semantics\")\n\nThere are a few things to note about the default semantics.\n\n*First*, this transform uses the [basename](https://en.wikipedia.org/wiki/Basename) of each import to generate the global names in the UMD output. This means that if you're importing multiple modules with the same basename, like:\n\n``` js\nimport fooBar1 from \"foo-bar\";\nimport fooBar2 from \"./mylib/foo-bar\";\n```\n\nit will transpile into two references to the same browser global:\n\n``` js\nfactory(global.fooBar, global.fooBar);\n```\n\nIf you set the plugin options to:\n\n``` json\n{\n  \"globals\": {\n    \"foo-bar\": \"fooBAR\",\n    \"./mylib/foo-bar\": \"mylib.fooBar\"\n  }\n}\n```\n\nit will still transpile both to one browser global:\n\n``` js\nfactory(global.fooBAR, global.fooBAR);\n```\n\nbecause again the transform is only using the basename of the import.\n\n*Second*, the specified override will still be passed to the `toIdentifier` function in [babel-types/src/converters](https://github.com/babel/babel/blob/main/packages/babel-types/src/converters). This means that if you specify an override as a member expression like:\n\n``` json\n{\n  \"globals\": {\n    \"fizzbuzz\": \"fizz.buzz\"\n  }\n}\n```\n\nthis will *not* transpile to `factory(global.fizz.buzz)`. Instead, it will transpile to `factory(global.fizzBuzz)` based on the logic in `toIdentifier`.\n\n*Third*, you cannot override the exported global name.\n\n#### More flexible semantics with `exactGlobals: true`[​](#more-flexible-semantics-with-exactglobals-true \"Direct link to more-flexible-semantics-with-exactglobals-true\")\n\nAll of these behaviors can limit the flexibility of the `globals` map. To remove these limitations, you can set the `exactGlobals` option to `true`. Doing this instructs the plugin to:\n\n1.  always use the full import string instead of the basename when generating the global names\n2.  skip passing `globals` overrides to the `toIdentifier` function. Instead, they are used exactly as written, so you will get errors if you do not use valid identifiers or valid uncomputed (dot) member expressions.\n3.  allow the exported global name to be overridden via the `globals` map. Any override must again be a valid identifier or valid member expression.\n\nThus, if you set `exactGlobals` to `true` and do not pass any overrides, the first example of:\n\n``` js\nimport fooBar1 from \"foo-bar\";\nimport fooBar2 from \"./mylib/foo-bar\";\n```\n\nwill transpile to:\n\n``` js\nfactory(global.fooBar, global.mylibFooBar);\n```\n\nAnd if you set the plugin options to:\n\n``` json\n{\n  \"globals\": {\n    \"foo-bar\": \"fooBAR\",\n    \"./mylib/foo-bar\": \"mylib.fooBar\"\n  },\n  \"exactGlobals\": true\n}\n```\n\nthen it'll transpile to:\n\n``` js\nfactory(global.fooBAR, global.mylib.fooBar);\n```\n\nFinally, with the plugin options set to:\n\n``` json\n{\n  \"plugins\": [\n    \"@babel/plugin-external-helpers\",\n    [\n      \"@babel/plugin-transform-modules-umd\",\n      {\n        \"globals\": {\n          \"my/custom/module/name\": \"My.Custom.Module.Name\"\n        },\n        \"exactGlobals\": true\n      }\n    ]\n  ],\n  \"moduleId\": \"my/custom/module/name\"\n}\n```\n\nit will transpile to:\n\n``` js\nfactory(mod.exports);\nglobal.My = global.My || {};\nglobal.My.Custom = global.My.Custom || {};\nglobal.My.Custom.Module = global.My.Custom.Module || {};\nglobal.My.Custom.Module.Name = mod.exports;\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-modules-umd script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-umd\"],\n});\n```\n\n### Options[​](#options \"Direct link to Options\")\n\nSee options for [`@babel/plugin-transform-modules-commonjs`](https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs#options).\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-modules-umd/](https://babeljs.io/docs/babel-plugin-transform-modules-umd/)"
- name: '@babel/plugin-transform-named-capturing-groups-regex'
  id: babel-plugin-transform-named-capturing-groups-regex/index
  summary: 'NOTE: This plugin is included in @babel/preset-env, in ES2018 NOTE: This plugin generates code that needs ES6 regular expressions functionalities'
  description: "# @babel/plugin-transform-named-capturing-groups-regex\n\n> **NOTE**: This plugin is included in `@babel/preset-env`, in [ES2018](https://github.com/tc39/proposals/blob/master/finished-proposals.md) NOTE: This plugin generates code that needs ES6 regular expressions functionalities. If you need to support older browsers, use either the `runtime: false` option or import a proper polyfill (e.g. `core-js`).\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nvar re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconsole.log(re.exec(\"1999-02-29\").groups.year);\n```\n\n**Out**\n\n``` js\nvar re = _wrapRegExp(/(\\d{4})-(\\d{2})-(\\d{2})/, { year: 1, month: 2, day: 3 });\n\nconsole.log(re.exec(\"1999-02-29\").groups.year);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-named-capturing-groups-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-named-capturing-groups-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-named-capturing-groups-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-named-capturing-groups-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-named-capturing-groups-regex script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-named-capturing-groups-regex\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `runtime`[​](#runtime \"Direct link to runtime\")\n\n`boolean`, defaults to `true`\n\nWhen this option is disabled, Babel doesn't wrap RegExps with the `_wrapRegExp` helper. The output only supports internal group references, and not runtime properties:\n\n``` js\nvar stringRe = /(?<quote>\"|').*?\\k<quote>/;\n\nstringRe.test(\"'foo'\"); // \"true\", works\nstringRe.exec(\"'foo'\").groups.quote; // Error\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-named-capturing-groups-regex/](https://babeljs.io/docs/babel-plugin-transform-named-capturing-groups-regex/)"
- name: '@babel/plugin-transform-new-target'
  id: babel-plugin-transform-new-target/index
  summary: This plugin relies on this.constructor, which means super must already have been called when using untransformed classes
  description: "# @babel/plugin-transform-new-target\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n``` js\nfunction Foo() {\n  console.log(new.target);\n}\n\nFoo(); // => undefined\nnew Foo(); // => Foo\n```\n\n``` js\nclass Foo {\n  constructor() {\n    console.log(new.target);\n  }\n}\n\nclass Bar extends Foo {}\n\nnew Foo(); // => Foo\nnew Bar(); // => Bar\n```\n\n### Caveats[​](#caveats \"Direct link to Caveats\")\n\nThis plugin relies on `this.constructor`, which means `super` must already have been called when using untransformed classes.\n\n``` js\nclass Foo {}\n\nclass Bar extends Foo {\n  constructor() {\n    // This will be a problem if classes aren't transformed to ES5\n    new.target;\n    super();\n  }\n}\n```\n\nAdditionally, this plugin cannot transform all `Reflect.construct` cases when using `newTarget` with ES5 function classes (transformed ES6 classes).\n\n``` js\nfunction Foo() {\n  console.log(new.target);\n}\n\n// Bar extends Foo in ES5\nfunction Bar() {\n  Foo.call(this);\n}\nBar.prototype = Object.create(Foo.prototype);\nBar.prototype.constructor = Bar;\n\n// Baz does not extend Foo\nfunction Baz() {}\n\nReflect.construct(Foo, []); // => Foo (correct)\nReflect.construct(Foo, [], Bar); // => Bar (correct)\n\nReflect.construct(Bar, []); // => Bar (incorrect, though this is how ES5\n// inheritance is commonly implemented.)\nReflect.construct(Foo, [], Baz); // => undefined (incorrect)\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-new-target\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-new-target\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-new-target\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-new-target\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-new-target script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-new-target\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-new-target/](https://babeljs.io/docs/babel-plugin-transform-new-target/)"
- name: '@babel/plugin-transform-object-assign'
  id: babel-plugin-transform-object-assign/index
  summary: Will only work with code of the form Object.assign or Object['assign']
  description: "# @babel/plugin-transform-object-assign\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nObject.assign(a, b);\n```\n\n**Out**\n\n``` js\nvar _extends = ...;\n\n_extends(a, b);\n```\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\n- Will only work with code of the form `Object.assign` or `Object['assign']`. The following patterns are not supported:\n\n  ``` js\n  var { assign } = Object;\n  var assign = Object.assign;\n  ```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-object-assign\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-object-assign\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-object-assign\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-object-assign\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-object-assign script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-assign\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-object-assign/](https://babeljs.io/docs/babel-plugin-transform-object-assign/)"
- name: '@babel/plugin-transform-object-set-prototype-of-to-assign'
  id: babel-plugin-transform-object-set-prototype-of-to-assign/index
  summary: 'NOTE: There are some caveats when using this plugin, see the @babel/plugin-transform-proto-to-assign docs for more information'
  description: "# @babel/plugin-transform-object-set-prototype-of-to-assign\n\n**NOTE:** There are some caveats when using this plugin, see the [`@babel/plugin-transform-proto-to-assign`](../babel-plugin-transform-proto-to-assign/index) docs for more information.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nObject.setPrototypeOf(bar, foo);\n```\n\n**Out**\n\n``` js\nvar _defaults = ...;\n\n_defaults(bar, foo);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-object-set-prototype-of-to-assign\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-object-set-prototype-of-to-assign\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-object-set-prototype-of-to-assign\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-object-set-prototype-of-to-assign\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-object-set-prototype-of-to-assign script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-set-prototype-of-to-assign\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-object-set-prototype-of-to-assign/](https://babeljs.io/docs/babel-plugin-transform-object-set-prototype-of-to-assign/)"
- name: '@babel/plugin-transform-object-super'
  id: babel-plugin-transform-object-super/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-object-super\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nlet obj = {\n  say() {\n    return \"Hello\";\n  },\n};\n\nlet obj2 = {\n  say() {\n    return super.say() + \"World!\";\n  },\n};\n```\n\n**Out**\n\n``` js\nvar _obj;\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\n\nvar obj = {\n  say: function say() {\n    return \"Hello\";\n  },\n};\n\nvar obj2 = (_obj = {\n  say: function say() {\n    return (\n      _get(_obj.__proto__ || Object.getPrototypeOf(_obj), \"say\", this).call(\n        this\n      ) + \"World!\"\n    );\n  },\n});\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-object-super\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-object-super\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-object-super\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-object-super\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-object-super script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-super\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-object-super/](https://babeljs.io/docs/babel-plugin-transform-object-super/)"
- name: '@babel/plugin-transform-parameters'
  id: babel-plugin-transform-parameters/index
  summary: Default parameters desugar into let declarations to retain proper semantics
  description: "# @babel/plugin-transform-parameters\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\nThis plugin transforms ES2015 parameters to ES5, this includes:\n\n- Destructuring parameters\n- Default parameters\n- Rest parameters\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nfunction test(x = \"hello\", { a, b }, ...args) {\n  console.log(x, a, b, args);\n}\n```\n\n**Out**\n\n``` js\nfunction test() {\n  var x =\n    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"hello\";\n  var _ref = arguments[1];\n  var a = _ref.a,\n    b = _ref.b;\n\n  for (\n    var _len = arguments.length,\n      args = Array(_len > 2 ? _len - 2 : 0),\n      _key = 2;\n    _key < _len;\n    _key++\n  ) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  console.log(x, a, b, args);\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-parameters\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-parameters\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-parameters\n```\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\nDefault parameters desugar into `let` declarations to retain proper semantics. If this is not supported in your environment then you'll need the [@babel/plugin-transform-block-scoping](../babel-plugin-transform-block-scoping/index) plugin.\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-parameters\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-parameters script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-parameters\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nIn loose mode, parameters with default values will be counted into the arity of the function. This is not spec behavior where these parameters do not add to function arity.\n\n> ⚠️ Consider migrating to the top level [`ignoreFunctionLength`](../assumptions/index#ignorefunctionlength) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"ignoreFunctionLength\": true\n  }\n}\n```\n\nUnder the `ignoreFunctionLength` assumption, Babel will generate a more performant solution as JavaScript engines will fully optimize a function that doesn't reference `arguments`. Please do your own benchmarking and determine if this option is the right fit for your application.\n\n``` js\n// Spec behavior\nfunction bar1(arg1 = 1) {}\nbar1.length; // 0\n\n// ignoreFunctionLength: true\nfunction bar1(arg1 = 1) {}\nbar1.length; // 1\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-parameters/](https://babeljs.io/docs/babel-plugin-transform-parameters/)"
- name: '@babel/plugin-transform-property-literals'
  id: babel-plugin-transform-property-literals/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-property-literals\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = {\n  // changed\n  const: function() {},\n  var: function() {},\n\n  // not changed\n  \"default\": 1,\n  [a]: 2,\n  foo: 1,\n};\n```\n\n**Out**\n\n``` js\nvar foo = {\n  \"const\": function() {},\n  \"var\": function() {},\n\n  \"default\": 1,\n  [a]: 2,\n  foo: 1,\n};\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/plugin-transform-property-literals --save-dev\n```\n\n``` shell\nyarn add @babel/plugin-transform-property-literals --dev\n```\n\n``` shell\npnpm add @babel/plugin-transform-property-literals --save-dev\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-property-literals\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-property-literals script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-property-literals\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-property-literals/](https://babeljs.io/docs/babel-plugin-transform-property-literals/)"
- name: '@babel/plugin-transform-property-mutators'
  id: babel-plugin-transform-property-mutators/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-property-mutators\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = {\n  get bar() {\n    return this._bar;\n  },\n  set bar(value) {\n    this._bar = value;\n  },\n};\n```\n\n**Out**\n\n``` js\nvar foo = Object.defineProperties(\n  {},\n  {\n    bar: {\n      get: function() {\n        return this._bar;\n      },\n      set: function(value) {\n        this._bar = value;\n      },\n      configurable: true,\n      enumerable: true,\n    },\n  }\n);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-property-mutators\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-property-mutators\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-property-mutators\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-property-mutators\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-property-mutators script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-property-mutators\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-property-mutators/](https://babeljs.io/docs/babel-plugin-transform-property-mutators/)"
- name: '@babel/plugin-transform-proto-to-assign'
  id: babel-plugin-transform-proto-to-assign/index
  summary: This is a case that you have to be aware of if you intend to use this plugin
  description: "# @babel/plugin-transform-proto-to-assign\n\n## Detail[​](#detail \"Direct link to Detail\")\n\nThis means that the following **will** work:\n\n``` js\nvar foo = { a: 1 };\nvar bar = { b: 2 };\nbar.__proto__ = foo;\nbar.a; // 1\nbar.b; // 2\n```\n\nhowever the following **will not**:\n\n``` js\nvar foo = { a: 1 };\nvar bar = { b: 2 };\nbar.__proto__ = foo;\nbar.a; // 1\nfoo.a = 2;\nbar.a; // 1 - should be 2 but remember that nothing is bound and it's a straight copy\n```\n\nThis is a case that you have to be aware of if you intend to use this plugin.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nbar.__proto__ = foo;\n```\n\n**Out**\n\n``` js\nfunction _defaults(obj, defaults) { ... }\n\n_defaults(bar, foo);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-proto-to-assign\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-proto-to-assign\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-proto-to-assign\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-proto-to-assign\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-proto-to-assign script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-proto-to-assign\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [MDN: Object.prototype.\\_\\_proto\\_\\_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-proto-to-assign/](https://babeljs.io/docs/babel-plugin-transform-proto-to-assign/)"
- name: '@babel/plugin-transform-react-constant-elements'
  id: babel-plugin-transform-react-constant-elements/index
  summary: This plugin can speed up reconciliation and reduce garbage collection pressure by hoisting React elements to the highest possible scope, preventing multiple unnecessary reinstantiations
  description: "# @babel/plugin-transform-react-constant-elements\n\nThis plugin can speed up reconciliation and reduce garbage collection pressure by hoisting React elements to the highest possible scope, preventing multiple unnecessary reinstantiations.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` jsx\nconst Hr = () => {\n  return <hr className=\"hr\" />;\n};\n```\n\n**Out**\n\n``` jsx\nconst _ref = <hr className=\"hr\" />;\n\nconst Hr = () => {\n  return _ref;\n};\n```\n\n**Deopts**\n\n- **Spread Operator**\n\n  ``` jsx\n  <div {...foobar} />\n  ```\n\n- **Refs**\n\n  ``` jsx\n  <div ref=\"foobar\" />\n  <div ref={node => this.node = node} />\n  ```\n\n- **Mutable Properties**\n\n> See [https://github.com/facebook/react/issues/3226](https://github.com/facebook/react/issues/3226) for more on this\n\n``` js\n<div style={{ width: 100 }} />\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-constant-elements\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-constant-elements\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-constant-elements\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-constant-elements\"]\n}\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `allowMutablePropsOnTags`[​](#allowmutablepropsontags \"Direct link to allowmutablepropsontags\")\n\n`Array<string>`, defaults to `[]`\n\nIf you are using a particular library (like react-intl) that uses object properties, and you are sure that the element won't modify its own props, you can permit objects to be allowed for specific elements.\n\nThis will skip the `Mutable Properties` deopt.\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-constant-elements\",\n      { \"allowMutablePropsOnTags\": [\"FormattedMessage\"] }\n    ]\n  ]\n}\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-constant-elements script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-constant-elements\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [\\[facebook/react#3226\\] Optimizing Compiler: Reuse Constant Value Types like ReactElement](https://github.com/facebook/react/issues/3226)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-constant-elements/](https://babeljs.io/docs/babel-plugin-transform-react-constant-elements/)"
- name: '@babel/plugin-transform-react-display-name'
  id: babel-plugin-transform-react-display-name/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-react-display-name\n\n> **NOTE**: This plugin is included in `@babel/preset-react`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar foo = React.createClass({}); // React <= 15\nvar bar = createReactClass({}); // React 16+\n```\n\n**Out**\n\n``` js\nvar foo = React.createClass({\n  displayName: \"foo\",\n}); // React <= 15\nvar bar = createReactClass({\n  displayName: \"bar\",\n}); // React 16+\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-display-name\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-display-name\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-display-name\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-display-name\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-display-name script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-display-name\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-display-name/](https://babeljs.io/docs/babel-plugin-transform-react-display-name/)"
- name: '@babel/plugin-transform-react-inline-elements'
  id: babel-plugin-transform-react-inline-elements/index
  summary: When used alongside @babel/plugin-transform-runtime, polyfills (by default including Symbol) are specifically scoped to not pollute the global scope
  description: "# @babel/plugin-transform-react-inline-elements\n\n## Note[​](#note \"Direct link to Note\")\n\nWhen used alongside `@babel/plugin-transform-runtime`, polyfills (by default including `Symbol`) are specifically scoped to not pollute the global scope. This breaks usage with React, as it won't have access to that polyfill and will cause your application to fail in legacy browsers.\n\nEven if `['@babel/plugin-transform-runtime', { helpers: true, polyfill: false }]` is specified, it might still break, since `helpers` come precompiled.\n\nIn this case, we recommend importing/requiring `@babel/polyfill` in the entry point of your application and using `@babel/preset-env` with the `useBuiltIns` option to only include the polyfills your targets need. Alternatively, you can also import/require `core-js/modules/es6.symbol` by itself.\n\nThis transform **should be enabled only in production** (e.g., just before minifying your code) because, although it improves runtime performance, it makes warning messages more cryptic and skips important checks that happen in development mode, including propTypes.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\n<Baz foo=\"bar\" key=\"1\" />\n```\n\n**Out**\n\n``` js\nbabelHelpers.jsx(\n  Baz,\n  {\n    foo: \"bar\",\n  },\n  \"1\"\n);\n\n/**\n * Instead of\n *\n * React.createElement(Baz, {\n *   foo: \"bar\",\n *   key: \"1\",\n * });\n */\n```\n\n**Deopt**\n\n``` js\n// The plugin will still use React.createElement when `ref` or `object rest spread` is used\n<Foo ref=\"bar\" />\n<Foo {...bar} />\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-inline-elements\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-inline-elements\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-inline-elements\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-inline-elements\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-inline-elements script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-inline-elements\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [\\[facebook/react#3228\\] Optimizing Compiler: Inline React Elements](https://github.com/facebook/react/issues/3228)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-inline-elements/](https://babeljs.io/docs/babel-plugin-transform-react-inline-elements/)"
- name: '@babel/plugin-transform-react-jsx'
  id: babel-plugin-transform-react-jsx/index
  summary: Automatic runtime is a feature added in v7.9.0
  description: "# @babel/plugin-transform-react-jsx\n\n> **NOTE**: This plugin is included in `@babel/preset-react`\n\n## Example[​](#example \"Direct link to Example\")\n\n### React Automatic Runtime[​](#react-automatic-runtime \"Direct link to React Automatic Runtime\")\n\nAutomatic runtime is a feature added in `v7.9.0`. With this runtime enabled, the functions that JSX compiles to will be imported automatically.\n\n**In**\n\n``` js\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst profile = _jsxs(\"div\", {\n  children: [\n    _jsx(\"img\", {\n      src: \"avatar.png\",\n      className: \"profile\",\n    }),\n    _jsx(\"h3\", {\n      children: [user.firstName, user.lastName].join(\" \"),\n    }),\n  ],\n});\n```\n\n#### Customizing the Automatic Runtime Import[​](#customizing-the-automatic-runtime-import \"Direct link to Customizing the Automatic Runtime Import\")\n\n**In**\n\n``` js\n/** @jsxImportSource custom-jsx-library */\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\nimport { jsx as _jsx } from \"custom-jsx-library/jsx-runtime\";\nimport { jsxs as _jsxs } from \"custom-jsx-library/jsx-runtime\";\n\nconst profile = _jsxs(\"div\", {\n  children: [\n    _jsx(\"img\", {\n      src: \"avatar.png\",\n      className: \"profile\",\n    }),\n    _jsx(\"h3\", {\n      children: [user.firstName, user.lastName].join(\" \"),\n    }),\n  ],\n});\n```\n\n**In**\n\n``` js\n/** @jsxRuntime classic */\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\nconst profile = React.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n### React Classic Runtime[​](#react-classic-runtime \"Direct link to React Classic Runtime\")\n\nIf you do not want (or cannot use) auto importing, you can use the classic runtime, which is the default behavior for v7 and prior.\n\n**In**\n\n``` js\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\nconst profile = React.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n#### Customizing the Classic Runtime Import[​](#customizing-the-classic-runtime-import \"Direct link to Customizing the Classic Runtime Import\")\n\n**In**\n\n``` js\n/** @jsx Preact.h */\n\nimport Preact from \"preact\";\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\n/** @jsx Preact.h */\n\nimport Preact from \"preact\";\n\nconst profile = Preact.h(\n  \"div\",\n  null,\n  Preact.h(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  Preact.h(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n### Fragments[​](#fragments \"Direct link to Fragments\")\n\n[Fragments](https://reactjs.org/docs/fragments.html) are a feature available in React 16.2.0+.\n\n#### React Automatic Runtime[​](#react-automatic-runtime-1 \"Direct link to React Automatic Runtime\")\n\n**In**\n\n``` javascript\nconst descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\n**Out**\n\n``` js\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst descriptions = items.map((item) =>\n  _jsxs(_Fragment, {\n    children: [\n      _jsx(\"dt\", {\n        children: item.name,\n      }),\n      _jsx(\"dd\", {\n        children: item.value,\n      }),\n    ],\n  })\n);\n```\n\n#### React Classic Runtime[​](#react-classic-runtime-1 \"Direct link to React Classic Runtime\")\n\n**In**\n\n``` javascript\nconst descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\n**Out**\n\n``` javascript\nconst descriptions = items.map((item) =>\n  React.createElement(\n    React.Fragment,\n    null,\n    React.createElement(\"dt\", null, item.name),\n    React.createElement(\"dd\", null, item.value)\n  )\n);\n```\n\n#### Customizing with the Classic Runtime[​](#customizing-with-the-classic-runtime \"Direct link to Customizing with the Classic Runtime\")\n\n**In**\n\n``` js\n/** @jsx Preact.h */\n/** @jsxFrag Preact.Fragment */\n\nimport Preact from \"preact\";\n\nvar descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\n**Out**\n\n``` js\n/** @jsx Preact.h */\n/** @jsxFrag Preact.Fragment */\n\nimport Preact from \"preact\";\n\nvar descriptions = items.map((item) =>\n  Preact.h(\n    Preact.Fragment,\n    null,\n    Preact.h(\"dt\", null, item.name),\n    Preact.h(\"dd\", null, item.value)\n  )\n);\n```\n\nNote that if a custom pragma is specified, then a custom fragment pragma must also be specified if the fragment sytnax `<></>` is used. Otherwise, an error will be thrown.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-jsx\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-jsx\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-jsx\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx\",\n      {\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"automatic\", // defaults to classic\n        \"importSource\": \"custom-jsx-library\" // defaults to react\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-jsx script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### Both Runtimes[​](#both-runtimes \"Direct link to Both Runtimes\")\n\n#### `throwIfNamespace`[​](#throwifnamespace \"Direct link to throwifnamespace\")\n\n`boolean`, defaults to `true`.\n\nToggles whether or not to throw an error if an XML namespaced tag name is used. For example:\n\n``` text\n<f:image />\n```\n\nThough the JSX spec allows this, it is disabled by default since React's JSX does not currently have support for it.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n#### `runtime`[​](#runtime \"Direct link to runtime\")\n\n`classic | automatic`, defaults to `classic`\n\nAdded in: `v7.9.0`\n\nDecides which runtime to use.\n\n`automatic` auto imports the functions that JSX transpiles to. `classic` does not automatically import anything.\n\n### React Automatic Runtime[​](#react-automatic-runtime-2 \"Direct link to React Automatic Runtime\")\n\n#### importSource[​](#importsource \"Direct link to importSource\")\n\n`string`, defaults to `react`.\n\nAdded in: `v7.9.0`\n\nReplaces the import source when importing functions.\n\n### React Classic Runtime[​](#react-classic-runtime-2 \"Direct link to React Classic Runtime\")\n\n#### `pragma`[​](#pragma \"Direct link to pragma\")\n\n`string`, defaults to `React.createElement`.\n\nReplace the function used when compiling JSX expressions. It should be a qualified name (e.g. `React.createElement`) or an identifier (e.g. `createElement`).\n\nNote that the `@jsx React.DOM` pragma has been deprecated as of React v0.12\n\n#### `pragmaFrag`[​](#pragmafrag \"Direct link to pragmafrag\")\n\n`string`, defaults to `React.Fragment`.\n\nReplace the component used when compiling JSX fragments. It should be a valid JSX tag name.\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`boolean`, defaults to `false`.\n\nWhen spreading props, use `Object.assign` directly instead of Babel's extend helper.\n\n### `useSpread`[​](#usespread \"Direct link to usespread\")\n\n`boolean`, defaults to `false`.\n\nWhen spreading props, use inline object with spread elements directly instead of Babel's extend helper or `Object.assign`.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-jsx/](https://babeljs.io/docs/babel-plugin-transform-react-jsx/)"
- name: '@babel/plugin-transform-react-jsx-compat'
  id: babel-plugin-transform-react-jsx-compat/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-react-jsx-compat\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar profile = (\n  <div>\n    <img src=\"avatar.png\" class=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n**Out**\n\n``` js\nvar profile = React.DOM.div(\n  null,\n  React.DOM.img({ src: \"avatar.png\", class: \"profile\" }),\n  React.DOM.h3(null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-jsx-compat\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-jsx-compat\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-jsx-compat\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-compat\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-jsx-compat script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-compat\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-jsx-compat/](https://babeljs.io/docs/babel-plugin-transform-react-jsx-compat/)"
- name: '@babel/plugin-transform-react-jsx-self'
  id: babel-plugin-transform-react-jsx-self/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-react-jsx-self\n\n> **NOTE**: This plugin is included in `@babel/preset-react`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` text\n<sometag />\n```\n\n**Out**\n\n``` text\n<sometag __self={this} />\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-jsx-self\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-jsx-self\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-jsx-self\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-self\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-jsx-self script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-self\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-jsx-self/](https://babeljs.io/docs/babel-plugin-transform-react-jsx-self/)"
- name: '@babel/plugin-transform-react-jsx-source'
  id: babel-plugin-transform-react-jsx-source/index
  summary: The columnNumber is emitted since v7.9.0
  description: "# @babel/plugin-transform-react-jsx-source\n\n> **NOTE**: This plugin is included in `@babel/preset-react`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` text\n<sometag />\n```\n\n**Out**\n\n``` text\n<sometag __source={ { fileName: 'this/file.js', lineNumber: 10, columnNumber: 1 } } />\n```\n\nThe `columnNumber` is emitted since `v7.9.0`.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-react-jsx-source\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-react-jsx-source\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-react-jsx-source\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-source\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-react-jsx-source script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-source\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-react-jsx-source/](https://babeljs.io/docs/babel-plugin-transform-react-jsx-source/)"
- name: '@babel/plugin-transform-regenerator'
  id: babel-plugin-transform-regenerator/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-regenerator\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfunction* a() {\n  yield 1;\n}\n```\n\n**Out**\n\n``` js\nvar _marked = [a].map(regeneratorRuntime.mark);\n\nfunction a() {\n  return regeneratorRuntime.wrap(\n    function a$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n            _context.next = 2;\n            return 1;\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-regenerator\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-regenerator\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-regenerator\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-regenerator\"]\n}\n```\n\nWith options:\n\n| name            | default value |\n|-----------------|---------------|\n| asyncGenerators | true          |\n| generators      | true          |\n| async           | true          |\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-regenerator\",\n      {\n        \"asyncGenerators\": false,\n        \"generators\": false,\n        \"async\": false\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-regenerator script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-regenerator\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-regenerator/](https://babeljs.io/docs/babel-plugin-transform-regenerator/)"
- name: '@babel/plugin-transform-reserved-words'
  id: babel-plugin-transform-reserved-words/index
  summary: Some words were reserved in ES3 as potential future keywords but were not reserved in ES5 and later
  description: "# @babel/plugin-transform-reserved-words\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\nSome words were reserved in ES3 as potential future keywords but were not reserved in ES5 and later. This plugin, to be used when targeting ES3 environments, renames variables from that set of words.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar abstract = 1;\nvar x = abstract + 1;\n```\n\n**Out**\n\n``` js\nvar _abstract = 1;\nvar x = _abstract + 1;\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-reserved-words\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-reserved-words\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-reserved-words\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-reserved-words\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-reserved-words script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-reserved-words\"],\n});\n```\n\n## References[​](#references \"Direct link to References\")\n\n- [ES3 Spec: Future Reserved Words](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf#page=26)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-reserved-words/](https://babeljs.io/docs/babel-plugin-transform-reserved-words/)"
- name: '@babel/plugin-transform-runtime'
  id: babel-plugin-transform-runtime/index
  summary: A plugin that enables the re-use of Babel's injected helper code to save on codesize
  description: "# @babel/plugin-transform-runtime\n\nA plugin that enables the re-use of Babel's injected helper code to save on codesize.\n\n> NOTE: Instance methods such as `\"foobar\".includes(\"foo\")` will only work with `core-js@3`. If you need to polyfill them, you can directly import `\"core-js\"` or use `@babel/preset-env`'s `useBuiltIns` option.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nInstall it as development dependency.\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-runtime\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-runtime\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-runtime\n```\n\nand [`@babel/runtime`](../babel-runtime/index) as a production dependency (since it's for the \"runtime\").\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save @babel/runtime\n```\n\n``` shell\nyarn add @babel/runtime\n```\n\n``` shell\npnpm add @babel/runtime\n```\n\nThe transformation plugin is typically used only in development, but the runtime itself will be depended on by your deployed code. See the examples below for more details.\n\n> When this plugin is enabled, the `useBuiltIns` option in `@babel/preset-env` must not be set. Otherwise, this plugin may not able to completely sandbox the environment.\n\n## Why?[​](#why \"Direct link to Why?\")\n\nBabel uses very small helpers for common functions such as `_extend`. By default this will be added to every file that requires it. This duplication is sometimes unnecessary, especially when your application is spread out over multiple files.\n\nThis is where the `@babel/plugin-transform-runtime` plugin comes in: all of the helpers will reference the module `@babel/runtime` to avoid duplication across your compiled output. The runtime will be compiled into your build.\n\nAnother purpose of this transformer is to create a sandboxed environment for your code. If you directly import [core-js](https://github.com/zloirock/core-js) or [@babel/polyfill](../babel-polyfill/index) and the built-ins it provides such as `Promise`, `Set` and `Map`, those will pollute the global scope. While this might be ok for an app or a command line tool, it becomes a problem if your code is a library which you intend to publish for others to use or if you can't exactly control the environment in which your code will run.\n\nThe transformer will alias these built-ins to `core-js` so you can use them seamlessly without having to require the polyfill.\n\nSee the [technical details](#technical-details) section for more information on how this works and the types of transformations that occur.\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\nWith options (and their defaults):\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"absoluteRuntime\": false,\n        \"corejs\": false,\n        \"helpers\": true,\n        \"regenerator\": true,\n        \"version\": \"7.0.0-beta.0\"\n      }\n    ]\n  ]\n}\n```\n\nThe plugin defaults to assuming that all polyfillable APIs will be provided by the user. Otherwise the [`corejs`](#corejs) option needs to be specified.\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-runtime script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-runtime\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `corejs`[​](#corejs \"Direct link to corejs\")\n\n`false`, `2`, `3` or `{ version: 2 | 3, proposals: boolean }`, defaults to `false`.\n\ne.g. `['@babel/plugin-transform-runtime', { corejs: 3 }],`\n\nHistory\n\n| Version  | Changes                           |\n|----------|-----------------------------------|\n| `v7.4.0` | Supports `{ proposals: boolean }` |\n\nSpecifying a number will rewrite the helpers that need polyfillable APIs to reference helpers from that (major) version of `core-js` instead Please note that `corejs: 2` only supports global variables (e.g. `Promise`) and static properties (e.g. `Array.from`), while `corejs: 3` also supports instance properties (e.g. `[].includes`).\n\nBy default, `@babel/plugin-transform-runtime` doesn't polyfill proposals. If you are using `corejs: 3`, you can opt into this by enabling using the `proposals: true` option.\n\nThis option requires changing the dependency used to provide the necessary runtime helpers:\n\n| `corejs` option | Install command                             |\n|-----------------|---------------------------------------------|\n| `false`         | `npm install --save @babel/runtime`         |\n| `2`             | `npm install --save @babel/runtime-corejs2` |\n| `3`             | `npm install --save @babel/runtime-corejs3` |\n\n### `helpers`[​](#helpers \"Direct link to helpers\")\n\n`boolean`, defaults to `true`.\n\nToggles whether or not inlined Babel helpers (`classCallCheck`, `extends`, etc.) are replaced with calls to `moduleName`.\n\nFor more information, see [Helper aliasing](#helper-aliasing).\n\n### `polyfill`[​](#polyfill \"Direct link to polyfill\")\n\n> This option was removed in v7.\n\n### `regenerator`[​](#regenerator \"Direct link to regenerator\")\n\n`boolean`, defaults to `true`.\n\nToggles whether or not generator functions are transformed to use a regenerator runtime that does not pollute the global scope.\n\nFor more information, see [Regenerator aliasing](#regenerator-aliasing).\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n> This option was removed in v7.\n\n### `useESModules`[​](#useesmodules \"Direct link to useesmodules\")\n\n> ⚠️ This option has been deprecated: starting from version `7.13.0`, `@babel/runtime`'s `package.json` uses `\"exports\"` option to automatically choose between CJS and ESM helpers.\n\n`boolean`, defaults to `false`.\n\nHistory\n\n| Version   | Changes                         |\n|-----------|---------------------------------|\n| `v7.13.0` | This option has been deprecated |\n\nWhen enabled, the transform will use helpers that do not get run through `@babel/plugin-transform-modules-commonjs`. This allows for smaller builds in module systems like webpack, since it doesn't need to preserve commonjs semantics.\n\nFor example, here is the `classCallCheck` helper with `useESModules` disabled:\n\n``` js\nexports.__esModule = true;\n\nexports.default = function(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n```\n\nAnd, with it enabled:\n\n``` js\nexport default function(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n```\n\n### `absoluteRuntime`[​](#absoluteruntime \"Direct link to absoluteruntime\")\n\n`boolean` or `string`, defaults to `false`.\n\nThis allows users to run `transform-runtime` broadly across a whole project. By default, `transform-runtime` imports from `@babel/runtime/foo` directly, but that only works if `@babel/runtime` is in the `node_modules` of the file that is being compiled. This can be problematic for nested `node_modules`, npm-linked modules, or CLIs that reside outside the user's project, among other cases. To avoid worrying about how the runtime module's location is resolved, this allows users to resolve the runtime once up front, and then insert absolute paths to the runtime into the output code.\n\nUsing absolute paths is not desirable if files are compiled for use at a later time, but in contexts where a file is compiled and then immediately consumed, they can be quite helpful.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n### `version`[​](#version \"Direct link to version\")\n\nBy default transform-runtime assumes that `@babel/runtime@7.0.0` is installed. If you have later versions of `@babel/runtime` (or their corejs counterparts e.g. `@babel/runtime-corejs3`) installed or listed as a dependency, transform-runtime can use more advanced features.\n\nFor example if you depend on `@babel/runtime-corejs2@7.7.4` you can transpile your code with\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"absoluteRuntime\": false,\n        \"corejs\": 2,\n        \"version\": \"^7.7.4\"\n      }\n    ]\n  ]\n}\n```\n\nwhich results in a smaller bundle size.\n\n## Technical details[​](#technical-details \"Direct link to Technical details\")\n\nThe `transform-runtime` transformer plugin does three things:\n\n- Automatically requires `@babel/runtime/regenerator` when you use generators/async functions (toggleable with the `regenerator` option).\n- Can use `core-js` for helpers if necessary instead of assuming it will be polyfilled by the user (toggleable with the `corejs` option)\n- Automatically removes the inline Babel helpers and uses the module `@babel/runtime/helpers` instead (toggleable with the `helpers` option).\n\nWhat does this actually mean though? Basically, you can use built-ins such as `Promise`, `Set`, `Symbol`, etc., as well use all the Babel features that require a polyfill seamlessly, without global pollution, making it extremely suitable for libraries.\n\nMake sure you include `@babel/runtime` as a dependency.\n\n### Regenerator aliasing[​](#regenerator-aliasing \"Direct link to Regenerator aliasing\")\n\nWhenever you use a generator function or async function:\n\n``` js\nfunction* foo() {}\n```\n\nthe following is generated:\n\n``` js\n\"use strict\";\n\nvar _marked = [foo].map(regeneratorRuntime.mark);\n\nfunction foo() {\n  return regeneratorRuntime.wrap(\n    function foo$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\nThis isn't ideal since it relies on the regenerator runtime being included, which pollutes the global scope.\n\nWith the `runtime` transformer, however, it is compiled to:\n\n``` js\n\"use strict\";\n\nvar _regenerator = require(\"@babel/runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar _marked = [foo].map(_regenerator2.default.mark);\n\nfunction foo() {\n  return _regenerator2.default.wrap(\n    function foo$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\nThis means that you can use the regenerator runtime without polluting your current environment.\n\n### `core-js` aliasing[​](#core-js-aliasing \"Direct link to core-js-aliasing\")\n\nSometimes you may want to use new built-ins such as `Map`, `Set`, `Promise` etc. Your only way to use these is usually to include a globally polluting polyfill.\n\nThis is with the `corejs` option.\n\nThe plugin transforms the following:\n\n``` js\nvar sym = Symbol();\n\nvar promise = Promise.resolve();\n\nvar check = arr.includes(\"yeah!\");\n\nconsole.log(arr[Symbol.iterator]());\n```\n\ninto the following:\n\n``` js\nimport _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\";\nimport _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\nimport _Symbol from \"@babel/runtime-corejs3/core-js-stable/symbol\";\n\nvar sym = _Symbol();\n\nvar promise = _Promise.resolve();\n\nvar check = _includesInstanceProperty(arr).call(arr, \"yeah!\");\n\nconsole.log(_getIterator(arr));\n```\n\nThis means is that you can seamlessly use these native built-ins and methods without worrying about where they come from.\n\n**NOTE:** Instance methods such as `\"foobar\".includes(\"foo\")` will only work when using `corejs: 3`.\n\n### Helper aliasing[​](#helper-aliasing \"Direct link to Helper aliasing\")\n\nUsually Babel will place helpers at the top of your file to do common tasks to avoid duplicating the code around in the current file. Sometimes these helpers can get a little bulky and add unnecessary duplication across files. The `runtime` transformer replaces all the helper calls to a module.\n\nThat means that the following code:\n\n``` js\nclass Person {}\n```\n\nusually turns into:\n\n``` js\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Person = function Person() {\n  _classCallCheck(this, Person);\n};\n```\n\nthe `runtime` transformer however turns this into:\n\n``` js\n\"use strict\";\n\nvar _classCallCheck2 = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar Person = function Person() {\n  (0, _classCallCheck3.default)(this, Person);\n};\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-runtime/](https://babeljs.io/docs/babel-plugin-transform-runtime/)"
- name: '@babel/plugin-transform-shorthand-properties'
  id: babel-plugin-transform-shorthand-properties/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-shorthand-properties\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar o = { a, b, c };\n```\n\n**Out**\n\n``` js\nvar o = { a: a, b: b, c: c };\n```\n\n**In**\n\n``` js\nvar cat = {\n  getName() {\n    return name;\n  },\n};\n```\n\n**Out**\n\n``` js\nvar cat = {\n  getName: function() {\n    return name;\n  },\n};\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-shorthand-properties\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-shorthand-properties\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-shorthand-properties\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-shorthand-properties\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-shorthand-properties script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-shorthand-properties\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-shorthand-properties/](https://babeljs.io/docs/babel-plugin-transform-shorthand-properties/)"
- name: '@babel/plugin-transform-spread'
  id: babel-plugin-transform-spread/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-transform-spread\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar a = [\"a\", \"b\", \"c\"];\n\nvar b = [...a, \"foo\"];\n\nvar c = foo(...a);\n```\n\n**Out**\n\n``` js\nvar a = [\"a\", \"b\", \"c\"];\n\nvar b = a.concat([\"foo\"]);\n\nvar c = foo.apply(void 0, a);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-spread\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-spread\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-spread\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-spread\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-spread\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-spread script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-spread\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nIn loose mode, **all** iterables are assumed to be arrays.\n\n> ⚠️ Consider migrating to the top level [`iterableIsArray`](../assumptions/index#iterableisarray) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  }\n}\n```\n\nUnder the `iterableIsArray` assumption, Babel preserves \"holes\" when spreading an array (for example, `[ ...Array(2) ]` produces `[ (hole), (hole) ]`). Set `iterableIsArray` to `false` to avoid this behaviour.\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n### `allowArrayLike`[​](#allowarraylike \"Direct link to allowarraylike\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.10.0`\n\nThis option allows spreading array-like objects as if they were arrays.\n\n> ⚠️ Consider migrating to the top level [`arrayLikeIsIterable`](../assumptions/index#arraylikeisiterable) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"arrayLikeIsIterable\": true\n  }\n}\n```\n\nAn array-like object is an object with a `length` property: for example, `{ 0: \"a\", 1: \"b\", length: 2 }`. Note that, like real arrays, array-like objects can have \"holes\": `{ 1: \"a\", length: 3 }` is equivalent to `[ (hole), \"a\", (hole) ]`.\n\nWhile it is *not* spec-compliant to spread array-like objects as if they were arrays, there are many objects that would be *iterables* in modern browsers with `Symbol.iterator` support. Some notable examples are the DOM collections, like `document.querySelectorAll(\"img.big\")`, which are the main use case for this option.\n\nPlease note that Babel allows spreading `arguments` in old engines even if this option is disabled, because it's defined as *iterable* in the ECMAScript specification.\n\n## References[​](#references \"Direct link to References\")\n\n- [MDN: Spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-spread/](https://babeljs.io/docs/babel-plugin-transform-spread/)"
- name: '@babel/plugin-transform-sticky-regex'
  id: babel-plugin-transform-sticky-regex/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-sticky-regex\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n**In**\n\n``` js\nconst a = /o+/y;\n```\n\n**Out**\n\n``` js\nvar a = new RegExp(\"o+\", \"y\");\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-sticky-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-sticky-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-sticky-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-sticky-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-sticky-regex script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-sticky-regex\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-sticky-regex/](https://babeljs.io/docs/babel-plugin-transform-sticky-regex/)"
- name: '@babel/plugin-transform-strict-mode'
  id: babel-plugin-transform-strict-mode/index
  summary: This plugin may be enabled via @babel/plugin-transform-modules-commonjs
  description: "# @babel/plugin-transform-strict-mode\n\nThis plugin may be enabled via `@babel/plugin-transform-modules-commonjs`. If you wish to disable it you can either turn `strict` off or pass `strictMode: false` as an option to the commonjs transform.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfoo();\n```\n\n**Out**\n\n``` js\n\"use strict\";\n\nfoo();\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-strict-mode\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-strict-mode\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-strict-mode\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-strict-mode\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-strict-mode script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-strict-mode\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-strict-mode/](https://babeljs.io/docs/babel-plugin-transform-strict-mode/)"
- name: '@babel/plugin-transform-template-literals'
  id: babel-plugin-transform-template-literals/index
  summary: boolean, defaults to false
  description: "# @babel/plugin-transform-template-literals\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\n`foo${bar}`;\n```\n\n**Out**\n\n``` js\n\"foo\".concat(bar);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-template-literals\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-template-literals\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-template-literals\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-template-literals\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-template-literals\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-template-literals script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-template-literals\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\n> ⚠️ Consider migrating to the top level [`mutableTemplateObject`](../assumptions/index#mutabletemplateobject) assumption.\n\n``` json\n{\n  \"assumptions\": {\n    \"mutableTemplateObject\": true\n  }\n}\n```\n\nWhen `mutableTemplateObject` is `true`, tagged template literal objects aren't frozen. All template literal expressions and quasis are combined with the `+` operator instead of with `String.prototype.concat`.\n\nWhen `false` or not set, all template literal expressions and quasis are combined with `String.prototype.concat`. It will handle cases with `Symbol.toPrimitive` correctly and throw correctly if template literal expression is a `Symbol()`. See [babel/babel#5791](https://github.com/babel/babel/pull/5791).\n\n**In**\n\n``` js\n`foo${bar}`;\n```\n\n**Out**\n\n``` js\n\"foo\" + bar;\n```\n\n> You can read more about configuring plugin options [here](https://babeljs.io/docs/en/plugins#plugin-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-template-literals/](https://babeljs.io/docs/babel-plugin-transform-template-literals/)"
- name: '@babel/plugin-transform-typeof-symbol'
  id: babel-plugin-transform-typeof-symbol/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-typeof-symbol\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\ntypeof Symbol() === \"symbol\";\n```\n\n**Out**\n\n``` js\nvar _typeof = function(obj) {\n  return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\n_typeof(Symbol()) === \"symbol\";\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-typeof-symbol\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-typeof-symbol\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-typeof-symbol\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-typeof-symbol\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-typeof-symbol script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-typeof-symbol\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-typeof-symbol/](https://babeljs.io/docs/babel-plugin-transform-typeof-symbol/)"
- name: '@babel/plugin-transform-typescript'
  id: babel-plugin-transform-typescript/index
  summary: This plugin adds support for the types syntax used by the TypeScript programming language
  description: "# @babel/plugin-transform-typescript\n\n> **NOTE**: This plugin is included in `@babel/preset-typescript`\n\nThis plugin adds support for the types syntax used by the [TypeScript programming language](https://www.typescriptlang.org). However, this plugin does not add the ability to type-check the JavaScript passed to it. For that, you will need to install and set up TypeScript.\n\nNote that although the TypeScript compiler `tsc` actively supports certain JavaScript proposals such as optional chaining (`?.`), nullish coalescing (`??`) and class properties (`this.#x`), this preset does not include these features because they are not the types syntax available in TypeScript only. We recommend using `preset-env` with `preset-typescript` if you want to transpile these features.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` typescript\nconst x: number = 0;\n```\n\n**Out**\n\n``` typescript\nconst x = 0;\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-typescript\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-typescript\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-typescript\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-typescript\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-typescript script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-typescript\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `allowDeclareFields`[​](#allowdeclarefields \"Direct link to allowdeclarefields\")\n\n`boolean`, defaults to `false`\n\nAdded in `v7.7.0`\n\n> NOTE: This will be enabled by default in Babel 8\n\nWhen enabled, type-only class fields are only removed if they are prefixed with the `declare` modifier:\n\n``` js\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n### `allowNamespaces`[​](#allownamespaces \"Direct link to allownamespaces\")\n\n`boolean`, defaults to `true`.\n\nHistory\n\n| Version   | Changes                                      |\n|-----------|----------------------------------------------|\n| `v7.5.0`  | Added `allowNamespaces`, defaults to `false` |\n| `v7.13.0` | defaults to `true`                           |\n\nEnables compilation of TypeScript namespaces.\n\n### `disallowAmbiguousJSXLike`[​](#disallowambiguousjsxlike \"Direct link to disallowambiguousjsxlike\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.16.0`\n\nEven when JSX parsing is not enabled, this option disallows using syntax that would be ambiguous with JSX (`<X> y` type assertions and `<X>() => {}` type arguments). It matches the `tsc` behavior when parsing `.mts` and `.mjs` files.\n\n### `dts`[​](#dts \"Direct link to dts\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.20.0`\n\nThis option will enable parsing within a TypeScript ambient context, where certain syntax have different rules (like `.d.ts` files and inside `declare module` blocks). Please see [Official Handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html) and [TypeScript Deep Dive](https://basarat.gitbook.io/typescript/type-system/intro) for more information about ambient contexts.\n\n### `isTSX`[​](#istsx \"Direct link to istsx\")\n\n`boolean`, defaults to `false`\n\nForcibly enables `jsx` parsing. Otherwise angle brackets will be treated as TypeScript's legacy type assertion `var foo = <string>bar;`. Also, `isTSX: true` requires `allExtensions: true`.\n\n### `jsxPragma`[​](#jsxpragma \"Direct link to jsxpragma\")\n\n`string`, defaults to `React`\n\nReplace the function used when compiling JSX expressions. This is so that we know that the import is not a type import, and should not be removed.\n\n### `jsxPragmaFrag`[​](#jsxpragmafrag \"Direct link to jsxpragmafrag\")\n\n`string`, defaults to `React.Fragment`\n\nReplace the function used when compiling JSX fragment expressions. This is so that we know that the import is not a type import, and should not be removed.\n\n### `onlyRemoveTypeImports`[​](#onlyremovetypeimports \"Direct link to onlyremovetypeimports\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.9.0`\n\nWhen set to `true`, the transform will only remove [type-only imports](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-exports) (introduced in TypeScript 3.8). This should only be used if you are using TypeScript \\>= 3.8.\n\n``` js\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n  prop?: string; // Initialized to undefined\n  prop1!: string // Initialized to undefined\n}\n```\n\n### `optimizeConstEnums`[​](#optimizeconstenums \"Direct link to optimizeconstenums\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.15.0`\n\nWhen set to `true`, Babel will inline enum values rather than using the usual `enum` output:\n\n``` typescript\n// Input\nconst enum Animals {\n  Fish,\n}\nconsole.log(Animals.Fish);\n\n// Default output\nvar Animals;\n\n(function(Animals) {\n  Animals[(Animals[\"Fish\"] = 0)] = \"Fish\";\n})(Animals || (Animals = {}));\n\nconsole.log(Animals.Fish);\n\n// `optimizeConstEnums` output\nconsole.log(0);\n```\n\nThis option differs from TypeScript's `--isolatedModules` behavior, which ignores the `const` modifier and compiles them as normal enums, and aligns Babel's behavior with TypeScript's default behavior.\n\nHowever, when *exporting* a `const enum` Babel will compile it to a plain object literal so that it doesn't need to rely on cross-file analysis when compiling it:\n\n``` typescript\n// Input\nexport const enum Animals {\n  Fish,\n}\n\n// `optimizeConstEnums` output\nexport var Animals = {\n  Fish: 0,\n};\n```\n\n## TypeScript Compiler Options[​](#typescript-compiler-options \"Direct link to TypeScript Compiler Options\")\n\nThe official TypeScript compiler has many [options](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for configuring how it compiles and type checks. While many don't apply, some behaviors might be useful and their equivalents in Babel can be enabled by some configuration options or plugins.\n\n- `--alwaysStrict` You can use the `strictMode` [parser option](https://babeljs.io/docs/en/babel-parser#options):\n\n  ``` js\n  module.exports = {\n    parserOpts: { strictMode: true },\n  };\n  ```\n\n- `--downlevelIteration` You can use the `@babel/plugin-transform-for-of` plugin. If you are using `@babel/preset-env`, `for...of` is already transpiled using iterators when it isn't supported by your compilation target(s).\n\n- `--emitDecoratorMetadata` This option isn't supported by an official Babel package since it is a TypeScript-specific addition and not part of the decorators proposal. If you rely on this feature, you can use the community plugin [babel-plugin-transform-typescript-metadata](https://github.com/leonardfactory/babel-plugin-transform-typescript-metadata#readme).\n\n- `--esModuleInterop` This is the default behavior of Babel when transpiling ECMAScript modules.\n\n- `--experimentalDecorators` This option enables support for the \"legacy\" decorator proposal. You can enable it in Babel using the `@babel/plugin-proposal-decorators` plugin, but please be aware, there are some minor differences.\n\n  ``` js\n  module.exports = {\n    plugins: [[\"@babel/plugin-proposal-decorators\", { legacy: true }]],\n  };\n  ```\n\n- `--importHelpers` This is the equivalent of the `@babel/plugin-transform-runtime` package.\n\n- `---importsNotUsedAsValues` You can use the `onlyRemoveTypeImports` option to replicate this behavior. `onlyRemoveTypeImports: true` is equivalent to `importsNotUsedAsValues: preserve`, while `onlyRemoveTypeImports: false` is equivalent to `importsNotUsedAsValues: remove`. There is no equivalent for `importsNotUsedAsValues: error`.\n\n- `--inlineSourceMap` You can set the [`sourceMaps: \"inline\"`](https://babeljs.io/docs/en/options#sourcemaps) option in your `babel.config.json` file.\n\n- `--isolatedModules` This is the default Babel behavior, and it can't be turned off because Babel doesn't support cross-file analysis.\n\n- `--jsx` JSX support is provided using another plugin. If you want your output to contains JSX code (i.e. `--jsx preserve`), you need the `@babel/plugin-syntax-jsx` plugin; if you want to transpile it to standard JavaScript (i.e. `--jsx react` or `--jsx react-native`), you should use the `@babel/plugin-transform-react-jsx` plugin.\n\n- `--jsxFactory` It can be customized using the [`pragma` option](https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma) of the `@babel/plugin-transform-react-jsx` package. You also need to set the `jsxPragma` option of this plugin.\n\n- `--module`, `-m` If you are using a bundler (Webpack or Rollup), this option is set automatically. If you are using `@babel/preset-env`, you can use the [`modules` option](https://babeljs.io/docs/en/babel-preset-env#modules); otherwise you can load the specific plugin.\n\n  | **`--module` value** | **`@babel/preset-env`'s `modules`** |             **Single plugin**              |\n  |:--------------------:|:-----------------------------------:|:------------------------------------------:|\n  |        `None`        |               `false`               |                     /                      |\n  |      `CommonJS`      |       `\"commonjs\"` or `\"cjs\"`       | `@babel/plugin-transform-modules-commonjs` |\n  |        `AMD`         |               `\"amd\"`               |   `@babel/plugin-transform-modules-amd`    |\n  |       `System`       |            `\"systemjs\"`             | `@babel/plugin-transform-modules-systemjs` |\n  |        `UMD`         |               `\"umd\"`               |   `@babel/plugin-transform-modules-umd`    |\n  |  `ES6` or `ES2015`   |               `false`               |                     /                      |\n\n- `--outDir` When using `@babel/cli`, you can set the [`--out-dir` option](https://babeljs.io/docs/en/babel-cli#compile-directories).\n\n- `--outFile` Babel doesn't support concatenating output files: you should use a bundler (like Webpack, Rollup or Parcel) for that. When using `@babel/cli`, you can compile a single file using the [`--out-file` option](https://babeljs.io/docs/en/babel-cli#compile-files).\n\n- `--sourceMap` You can use the top-level [`sourceMaps: true` option](https://babeljs.io/docs/en/options#sourcemaps).\n\n- `--target` Babel doesn't support targeting a specific version of the language, but you can choose which engines you want to target using [`@babel/preset-env`](https://babeljs.io/docs/en/babel-preset-env). If you prefer, you can enable [individual plugins](https://babeljs.io/docs/en/plugins) for every ECMAScript feature.\n\n- `--useDefineForClassFields` You can use the `onlyRemoveTypeImports` option to replicate this behavior.\n\n- `--watch`, `-w` When using `@babel/cli`, you can specify the [`--watch` option](https://babeljs.io/docs/en/babel-cli#compile-files).\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\nBecause there are features of the TypeScript language which rely on the full type-system to be available to make changes at runtime. This section of caveats is quite long, however, it's worth noting that a few of these features are only found in older TypeScript codebases and have modern JavaScript equivalents which you are probably already using.\n\n1.  Since Babel does not type-check, code which is syntactically correct, but would fail the TypeScript type-checking may successfully get transformed, and often in unexpected or invalid ways.\n\n2.  This plugin does not support [`export =`](https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require) and [`import =`](https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require), because those cannot be compiled to ES.next. These are a TypeScript only form of `import`/`export`.\n\n    **Workarounds**:\n\n    - Use the plugin [babel-plugin-replace-ts-export-assignment](https://www.npmjs.com/package/babel-plugin-replace-ts-export-assignment) to transform `export =`.\n    - Convert to using `export default` and `export const`, and `import x, {y} from \"z\"`.\n\n3.  Changes to your `tsconfig.json` are not reflected in babel. The build process will always behave as though [`isolatedModules`](https://www.typescriptlang.org/docs/handbook/compiler-options.html) is turned on, there are Babel-native alternative ways to set a lot of the [`tsconfig.json` options](#typescript-compiler-options) however.\n\n4.  **Q**: Why doesn't Babel allow export of a `var` or `let`?\n\n    **A**: The TypeScript compiler dynamically changes how these variables are used depending on whether or not the value is mutated. Ultimately, this depends on a type-model and is outside the scope of Babel. A best-effort implementation would transform context-dependent usages of the variable to always use the `Namespace.Value` version instead of `Value`, in case it was mutated outside of the current file. Allowing `var` or `let` from Babel (as the transform is not-yet-written) is therefore is more likely than not to present itself as a bug when used as-if it was not `const`.\n\n### Impartial Namespace Support[​](#impartial-namespace-support \"Direct link to Impartial Namespace Support\")\n\nIf you have existing code which uses the TypeScript-only [namespace](https://www.typescriptlang.org/docs/handbook/namespaces.html) features. Babel supports a subset of TypeScript's namespace features. If you are considering writing new code which uses namespace, using the ES2015 `import`/`export` is recommended instead. It's [not going away](https://github.com/microsoft/TypeScript/issues/30994#issuecomment-484150549), but there are modern alternatives.\n\n- Type-only `namespace`s should be marked with `declare` and will subsequently be safely removed.\n\n- `export`ing a variable using `var` or `let` in a `namespace` will result in an error: *\"Namespaces exporting non-const are not supported by Babel. Change to const or ...\"*\n\n  **Workaround**: Use `const`. If some form of mutation is required, explicitly use an object with internal mutability.\n\n- `namespace`s will not share their scope. In TypeScript, it is valid to refer to contextual items that a `namespace` extends without qualifying them, and the compiler will add the qualifier. In Babel, there is no type-model, and it is impossible to dynamically change references to match the established type of the parent object.\n\n  Consider this code:\n\n  ``` typescript\n  namespace N {\n    export const V = 1;\n  }\n  namespace N {\n    export const W = V;\n  }\n  ```\n\n  The TypeScript compiler compiles it to something like this:\n\n  ``` js\n  var N = {};\n  (function(N) {\n    N.V = 1;\n  })(N);\n  (function(N) {\n    N.W = N.V;\n  })(N);\n  ```\n\n  While Babel will transform it to something like this:\n\n  ``` js\n  var N;\n  (function(_N) {\n    const V = (_N = 1);\n  })(N || (N = {}));\n  (function(_N) {\n    const W = V;\n  })(N || (N = {}));\n  ```\n\n  As Babel doesn't understand the type of `N`, the reference to `V` will be `undefined` resulting in an error.\n\n  **Workaround**: Explicitly refer to values not in the same namespace definition, even if they would be in the scope according to TypeScript. Examples:\n\n  ``` typescript\n  namespace N {\n    export const V = 1;\n  }\n  namespace N {\n    export const W = N.V;\n  }\n  ```\n\n  Or:\n\n  ``` typescript\n  namespace N {\n    export const V = 1;\n    export const W = V;\n  }\n  ```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-typescript/](https://babeljs.io/docs/babel-plugin-transform-typescript/)"
- name: '@babel/plugin-transform-unicode-escapes'
  id: babel-plugin-transform-unicode-escapes/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-unicode-escapes\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\nCompile ES2015 Unicode escapes to ES5\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar \\u{1d49c} = \"\\u{Babe1}\";\n\nconsole.log(\\u{1d49c});\n```\n\n**Out**\n\n``` js\nvar _ud835_udc9c = \"\\uDAAA\\uDFE1\";\n\nconsole.log(_ud835_udc9c);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-unicode-escapes\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-unicode-escapes\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-unicode-escapes\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-escapes\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-unicode-escapes\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-unicode-escapes\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-unicode-escapes/](https://babeljs.io/docs/babel-plugin-transform-unicode-escapes/)"
- name: '@babel/plugin-transform-unicode-regex'
  id: babel-plugin-transform-unicode-regex/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/plugin-transform-unicode-regex\n\n> **NOTE**: This plugin is included in `@babel/preset-env`\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nvar string = \"foo💩bar\";\nvar match = string.match(/foo(.)bar/u);\n```\n\n**Out**\n\n``` js\nvar string = \"foo💩bar\";\nvar match = string.match(\n  /foo((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))bar/\n);\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/plugin-transform-unicode-regex\n```\n\n``` shell\nyarn add --dev @babel/plugin-transform-unicode-regex\n```\n\n``` shell\npnpm add --save-dev @babel/plugin-transform-unicode-regex\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-regex\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --plugins @babel/plugin-transform-unicode-regex script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-unicode-regex\"],\n});\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-plugin-transform-unicode-regex/](https://babeljs.io/docs/babel-plugin-transform-unicode-regex/)"
- name: '@babel/polyfill'
  id: babel-polyfill/index
  summary: If you are compiling generators or async function to ES5, and you are using a version of @babel/core or @babel/plugin-transform-regenerator older than 7.18.0, you must also load the regenerator runtime package
  description: "# @babel/polyfill\n\n> 🚨 As of Babel 7.4.0, this package has been deprecated in favor of directly including `core-js/stable` (to polyfill ECMAScript features):\n>\n> ``` js\n> import \"core-js/stable\";\n> ```\n>\n> If you are compiling generators or async function to ES5, and you are using a version of `@babel/core` or `@babel/plugin-transform-regenerator` older than `7.18.0`, you must also load the [`regenerator runtime`](https://github.com/facebook/regenerator/tree/main/packages/runtime) package. It is automatically loaded when using `@babel/preset-env`'s `useBuiltIns: \"usage\"` option or `@babel/plugin-transform-runtime`.\n\nBabel includes a [polyfill](https://en.wikipedia.org/wiki/Polyfill_(programming)) that includes a custom [regenerator runtime](https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js) and [core-js](https://github.com/zloirock/core-js).\n\nThis will emulate a full ES2015+ environment (no \\< Stage 4 proposals) and is intended to be used in an application rather than a library/tool. (this polyfill is automatically loaded when using `babel-node`).\n\nThis means you can use new built-ins like `Promise` or `WeakMap`, static methods like `Array.from` or `Object.assign`, instance methods like `Array.prototype.includes`, and generator functions (provided you use the [regenerator](../babel-plugin-transform-regenerator/index) plugin). The polyfill adds to the global scope as well as native prototypes like `String` in order to do this.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save @babel/polyfill\n```\n\n``` shell\nyarn add @babel/polyfill\n```\n\n``` shell\npnpm add @babel/polyfill\n```\n\n> Because this is a polyfill (which will run before your source code), we need it to be a `dependency`, not a `devDependency`\n\n## Size[​](#size \"Direct link to Size\")\n\nThe polyfill is provided as a convenience but you should use it with [`@babel/preset-env`](../babel-preset-env/index) and the [`useBuiltIns` option](../babel-preset-env/index#usebuiltins) so that it doesn't include the whole polyfill which isn't always needed. Otherwise, we would recommend you import the individual polyfills manually.\n\n## TC39 Proposals[​](#tc39-proposals \"Direct link to TC39 Proposals\")\n\nIf you need to use a proposal that is not Stage 4, `@babel/polyfill` will not automatically import those for you. You will have to import those from another polyfill like [`core-js`](https://github.com/zloirock/core-js) individually. We may work towards including this as separate files in `@babel/polyfill` soon.\n\n## Usage in Node / Browserify / Webpack[​](#usage-in-node--browserify--webpack \"Direct link to Usage in Node / Browserify / Webpack\")\n\nTo include the polyfill you need to require it at the top of the **entry point** to your application.\n\n> Make sure it is called before all other code/require statements!\n\n``` js\nrequire(\"@babel/polyfill\");\n```\n\nIf you are using ES6's `import` syntax in your application's **entry point**, you should instead import the polyfill at the top of the **entry point** to ensure the polyfills are loaded first:\n\n``` js\nimport \"@babel/polyfill\";\n```\n\nWith webpack, there are multiple ways to include the polyfills:\n\n- When used alongside [`@babel/preset-env`](../babel-preset-env/index),\n\n  - If `useBuiltIns: 'usage'` is specified in `.babelrc` then do not include `@babel/polyfill` in either `webpack.config.js` entry array nor source. Note, `@babel/polyfill` still needs to be installed.\n\n  - If `useBuiltIns: 'entry'` is specified in `.babelrc` then include `@babel/polyfill` at the top of the entry point to your application via `require` or `import` as discussed above.\n\n  - If `useBuiltIns` key is not specified or it is explicitly set with `useBuiltIns: false` in your .babelrc, add `@babel/polyfill` directly to the entry array in your `webpack.config.js`.\n\n``` js\nmodule.exports = {\n  entry: [\"@babel/polyfill\", \"./app/js\"],\n};\n```\n\n- If [`@babel/preset-env`](../babel-preset-env/index) is not used then add `@babel/polyfill` to webpack entry array as discussed above. It can still be added at the top of the entry point to application via `import` or `require`, but this is not recommended.\n\n> We do not recommend that you import the whole polyfill directly: either try the `useBuiltIns` options or import only the polyfills you need manually (either from this package or somewhere else).\n\n## Usage in Browser[​](#usage-in-browser \"Direct link to Usage in Browser\")\n\nAvailable from the `dist/polyfill.js` file within a `@babel/polyfill` npm release. This needs to be included **before** all your compiled Babel code. You can either prepend it to your compiled code or include it in a `<script>` before it.\n\n**NOTE:** Do not `require` this via browserify etc, use `@babel/polyfill`.\n\n## Details[​](#details \"Direct link to Details\")\n\n> ##### If you are looking for something that won't modify globals to be used in a tool/library, checkout the [`transform-runtime`](../babel-plugin-transform-runtime/index) plugin. This means you won't be able to use the instance methods mentioned above like `Array.prototype.includes`.[​](#if-you-are-looking-for-something-that-wont-modify-globals-to-be-used-in-a-toollibrary-checkout-the-transform-runtime-plugin-this-means-you-wont-be-able-to-use-the-instance-methods-mentioned-above-like-arrayprototypeincludes \"Direct link to if-you-are-looking-for-something-that-wont-modify-globals-to-be-used-in-a-toollibrary-checkout-the-transform-runtime-plugin-this-means-you-wont-be-able-to-use-the-instance-methods-mentioned-above-like-arrayprototypeincludes\")\n\nNote: Depending on what ES2015 methods you actually use, you may not need to use `@babel/polyfill` or the runtime plugin. You may want to only [load the specific polyfills you are using](https://github.com/zloirock/core-js#commonjs-api) (like `Object.assign`) or just document that the environment the library is being loaded in should include certain polyfills.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-polyfill/](https://babeljs.io/docs/babel-polyfill/)"
- name: '@babel/preset-env'
  id: babel-preset-env/index
  summary: '@babel/preset-env is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s)'
  description: "# @babel/preset-env\n\n`@babel/preset-env` is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s). This both makes your life easier and JavaScript bundles smaller!\n\n- [Install](#install)\n- [How Does it Work?](#how-does-it-work)\n- [Browserslist Integration](#browserslist-integration)\n- [Options](#options)\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/preset-env\n```\n\n``` shell\nyarn add --dev @babel/preset-env\n```\n\n``` shell\npnpm add --save-dev @babel/preset-env\n```\n\n## How Does it Work?[​](#how-does-it-work \"Direct link to How Does it Work?\")\n\n`@babel/preset-env` would not be possible if not for a number of awesome open-source projects, like [`browserslist`](https://github.com/browserslist/browserslist), [`compat-table`](https://github.com/kangax/compat-table), and [`electron-to-chromium`](https://github.com/Kilian/electron-to-chromium).\n\nWe leverage these data sources to maintain [mappings of which version](https://github.com/babel/babel/blob/main/packages/babel-compat-data/data/plugins.json) of our supported target environments gained support of a JavaScript syntax or browser feature, as well as a mapping of those syntaxes and features to Babel transform plugins and core-js polyfills.\n\n> Note: `@babel/preset-env` won't include any JavaScript syntax proposals less than Stage 3 because at that stage in the TC39 process, it wouldn't be implemented by any browsers anyway. Those would need to be included manually. The `shippedProposals` option will include Stage 3 proposals that some browsers have already implemented.\n\n`@babel/preset-env` takes any [target environments you've specified](#targets) and checks them against its mappings to compile a list of plugins and passes it to Babel.\n\n## Browserslist Integration[​](#browserslist-integration \"Direct link to Browserslist Integration\")\n\nFor browser- or Electron-based projects, we recommend using a [`.browserslistrc`](https://github.com/browserslist/browserslist) file to specify targets. You may already have this configuration file as it is used by many tools in the ecosystem, like [autoprefixer](https://github.com/postcss/autoprefixer), [stylelint](https://stylelint.io/), [eslint-plugin-compat](https://github.com/amilajack/eslint-plugin-compat) and many others.\n\nBy default `@babel/preset-env` will use [browserslist config sources](https://github.com/ai/browserslist#queries) *unless* either the [targets](#targets) or [ignoreBrowserslistConfig](#ignorebrowserslistconfig) options are set.\n\n> Please note that if you are relying on browserslist's defaults query (either explicitly or by having no browserslist config), you will want to check out the [No targets](../options/index#no-targets) section for information on preset-env's behavior.\n\nFor example, to only include polyfills and code transforms needed for users whose browsers have \\>0.25% market share (ignoring browsers without security updates like IE 10 and BlackBerry):\n\n``` json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"useBuiltIns\": \"entry\",\n        \"corejs\": \"3.22\"\n      }\n    ]\n  ]\n}\n```\n\n``` text\n> 0.25%\nnot dead\n```\n\nor\n\n``` json\n{ \"browserslist\": \"> 0.25%, not dead\" }\n```\n\n> Please note that since `v7.4.5` the browserslist query is resolved with [`mobileToDesktop: true`](https://github.com/browserslist/browserslist#js-api). For example, if you want to create a snapshot of a query run `npx browserslist --mobile-to-desktop \">0.25%, not dead\"`.\n\n## Options[​](#options \"Direct link to Options\")\n\nFor more information on setting options for a preset, refer to the [preset options](https://babeljs.io/docs/presets#preset-options) documentation.\n\n### `targets`[​](#targets \"Direct link to targets\")\n\n`string | Array<string> | { [string]: string }`, defaults to the top-level `targets` option if no browserslist-related option is specified in `@babel/preset-env`'s docs, otherwise to `{}`.\n\nFor usage, refer to the [`targets` option](../options/index#targets) documentation.\n\n### `bugfixes`[​](#bugfixes \"Direct link to bugfixes\")\n\n`boolean`, defaults to `false`.\n\nAdded in: `v7.9.0`\n\n> Note: These optimizations will be enabled by default in Babel 8\n\nBy default, `@babel/preset-env` (and Babel plugins in general) grouped ECMAScript syntax features into collections of closely related smaller features. These groups can be large and include a lot of edge cases, for example \"function arguments\" includes destructured, default and rest parameters. From this grouping information, Babel enables or disables each group based on the browser support target you specify to `@babel/preset-env`’s `targets` option.\n\nWhen this option is enabled, `@babel/preset-env` tries to compile the broken syntax to the closest *non-broken modern syntax* supported by your target browsers. Depending on your `targets` and on how many modern syntax you are using, this can lead to a significant size reduction in the compiled app. This option merges the features of [`@babel/preset-modules`](https://github.com/babel/preset-modules) without having to use another preset.\n\n### `spec`[​](#spec \"Direct link to spec\")\n\n`boolean`, defaults to `false`.\n\nEnable more spec compliant, but potentially slower, transformations for any plugins in this preset that support them.\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nEnable [\"loose\" transformations](http://2ality.com/2015/12/babel6-loose-mode.html) for any plugins in this preset that allow them.\n\n> ⚠️ Consider migrating to the top level [`assumptions`](../assumptions/index) available since Babel 7.13.\n\n### `modules`[​](#modules \"Direct link to modules\")\n\n`\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | \"cjs\" | \"auto\" | false`, defaults to `\"auto\"`.\n\nEnable transformation of ES module syntax to another module type. Note that `cjs` is just an alias for `commonjs`.\n\nSetting this to `false` will preserve ES modules. Use this only if you intend to ship native ES Modules to browsers. If you are using a bundler with Babel, the default `modules: \"auto\"` is always preferred.\n\n#### `modules: \"auto\"`[​](#modules-auto \"Direct link to modules-auto\")\n\nBy default `@babel/preset-env` uses [`caller`](../options/index#caller) data to determine whether ES modules and module features (e.g. `import()`) should be transformed. Generally `caller` data will be specified in the bundler plugins (e.g. `babel-loader`, `@rollup/plugin-babel`) and thus it is not recommended to pass `caller` data yourself -- The passed `caller` may overwrite the one from bundler plugins and in the future you may get suboptimal results if bundlers supports new module features.\n\n### `debug`[​](#debug \"Direct link to debug\")\n\n`boolean`, defaults to `false`.\n\nOutputs to `console.log` the polyfills and transform plugins enabled by `preset-env` and, if applicable, which one of your targets that needed it.\n\n### `include`[​](#include \"Direct link to include\")\n\n`Array<string|RegExp>`, defaults to `[]`.\n\nHistory\n\n| Version  | Changes                                 |\n|----------|-----------------------------------------|\n| `v7.4.0` | Support injecting `core-js@3` polyfills |\n\nAn array of plugins to always include.\n\nValid options include any:\n\n- [Babel plugins](https://github.com/babel/babel/blob/main/packages/babel-compat-data/scripts/data/plugin-features.js) - both full and shorthand names are supported, for example the following are functionally equivalent:\n\n  - `@babel/plugin-transform-spread`\n  - `@babel/transform-spread`\n  - `babel-transform-spread`\n  - `transform-spread`\n\n- Built-ins (both for [core-js@2](https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs2/built-in-definitions.js) and [core-js@3](https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs3/built-in-definitions.js), such as `es.map`, `es.set`, or `es.object.assign`.\n\nPlugin names can be fully or partially specified (or using `RegExp`).\n\nAcceptable inputs:\n\n- Full name (`string`): `\"es.math.sign\"`\n- Partial name (`string`): `\"es.math.*\"` (resolves to all plugins with `es.math` prefix)\n- `RegExp` Object: `/^transform-.*$/` or `new RegExp(\"^transform-modules-.*\")`\n\nNote that the above `.` is the `RegExp` equivalent to match any character, and not the actual `'.'` character. Also note that to match any character `.*` is used in `RegExp` as opposed to `*` in `glob` format.\n\nThis option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn't work.\n\nFor example, Node 4 supports native classes but not spread. If `super` is used with a spread argument, then the `@babel/plugin-transform-classes` transform needs to be `include`d, as it is not possible to transpile a spread with `super` otherwise.\n\n> NOTE: The `include` and `exclude` options *only* work with the [plugins included with this preset](https://github.com/babel/babel/blob/main/packages/babel-compat-data/scripts/data/plugin-features.js); so, for example, including `@babel/plugin-proposal-do-expressions` or excluding `@babel/plugin-proposal-function-bind` will throw errors. To use a plugin *not* included with this preset, add them to your [\"plugins\"](../options/index#plugins) directly.\n\n### `exclude`[​](#exclude \"Direct link to exclude\")\n\n`Array<string|RegExp>`, defaults to `[]`.\n\nAn array of plugins to always exclude/remove.\n\nThe possible options are the same as the `include` option.\n\nThis option is useful for excluding a transform like `@babel/plugin-transform-regenerator` if you don't use generators and don't want to include `regeneratorRuntime` (when using `useBuiltIns`) or for using another plugin like [fast-async](https://github.com/MatAtBread/fast-async) instead of [Babel's async-to-gen](../babel-plugin-proposal-async-generator-functions/index).\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`\"usage\"` \\| `\"entry\"` \\| `false`, defaults to `false`.\n\nThis option configures how `@babel/preset-env` handles polyfills.\n\nWhen either the `usage` or `entry` options are used, `@babel/preset-env` will add direct references to `core-js` modules as bare imports (or requires). This means `core-js` will be resolved relative to the file itself and needs to be accessible.\n\nSince `@babel/polyfill` was deprecated in 7.4.0, we recommend directly adding `core-js` and setting the version via the [`corejs`](#corejs) option.\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install core-js@3 --save\n\n# or\n\nnpm install core-js@2 --save\n```\n\n``` shell\nyarn add core-js@3\n\n# or\n\nyarn add core-js@2\n```\n\n``` shell\npnpm add core-js@3\n\n# or\n\npnpm add core-js@2\n```\n\n#### `useBuiltIns: 'entry'`[​](#usebuiltins-entry \"Direct link to usebuiltins-entry\")\n\nHistory\n\n| Version  | Changes                                                                          |\n|----------|----------------------------------------------------------------------------------|\n| `v7.4.0` | It replaces `\"core-js/stable\"` and `\"regenerator-runtime/runtime\"` entry imports |\n| `v7.0.0` | It replaces `\"@babel/polyfill\"` entry imports                                    |\n\n> NOTE: Only use `import \"core-js\";` once in your whole app. If you are using `@babel/polyfill`, it already includes `core-js`: importing it twice will throw an error. Multiple imports or requires of those packages might cause global collisions and other issues that are hard to trace. We recommend creating a single entry file that only contains the `import` statements.\n\nThis option enables a new plugin that replaces the `import \"core-js/stable\";` and `require(\"core-js\");` statements with individual imports to different `core-js` entry points based on environment.\n\n**In**\n\n``` js\nimport \"core-js\";\n```\n\n**Out (different based on environment)**\n\n``` js\nimport \"core-js/modules/es.string.pad-start\";\nimport \"core-js/modules/es.string.pad-end\";\n```\n\nImporting `\"core-js\"` loads polyfills for every possible ECMAScript feature: what if you know that you only need some of them? When using `core-js@3`, `@babel/preset-env` is able to optimize every single `core-js` entrypoint and their combinations. For example, you might want to only polyfill array methods and new `Math` proposals:\n\n**In**\n\n``` js\nimport \"core-js/es/array\";\nimport \"core-js/proposals/math-extensions\";\n```\n\n**Out (different based on environment)**\n\n``` js\nimport \"core-js/modules/es.array.unscopables.flat\";\nimport \"core-js/modules/es.array.unscopables.flat-map\";\nimport \"core-js/modules/esnext.math.clamp\";\nimport \"core-js/modules/esnext.math.deg-per-rad\";\nimport \"core-js/modules/esnext.math.degrees\";\nimport \"core-js/modules/esnext.math.fscale\";\nimport \"core-js/modules/esnext.math.rad-per-deg\";\nimport \"core-js/modules/esnext.math.radians\";\nimport \"core-js/modules/esnext.math.scale\";\n```\n\nYou can read [core-js](https://github.com/zloirock/core-js)'s documentation for more information about the different entry points.\n\n> NOTE: When using `core-js@2` (either explicitly using the [`corejs: \"2\"`](#corejs) option or implicitly), `@babel/preset-env` will also transform imports and requires of `@babel/polyfill`. This behavior is deprecated because it isn't possible to use `@babel/polyfill` with different `core-js` versions.\n\n#### `useBuiltIns: 'usage'`[​](#usebuiltins-usage \"Direct link to usebuiltins-usage\")\n\nAdds specific imports for polyfills when they are used in each file. We take advantage of the fact that a bundler will load the same polyfill only once.\n\n**In**\n\n``` js\nvar a = new Promise();\n```\n\n``` js\nvar b = new Map();\n```\n\n**Out (if environment doesn't support it)**\n\n``` js\nimport \"core-js/modules/es.promise\";\nvar a = new Promise();\n```\n\n``` js\nimport \"core-js/modules/es.map\";\nvar b = new Map();\n```\n\n**Out (if environment supports it)**\n\n``` js\nvar a = new Promise();\n```\n\n``` js\nvar b = new Map();\n```\n\n#### `useBuiltIns: false`[​](#usebuiltins-false \"Direct link to usebuiltins-false\")\n\nDon't add polyfills automatically per file, and don't transform `import \"core-js\"` or `import \"@babel/polyfill\"` to individual polyfills.\n\n### `corejs`[​](#corejs \"Direct link to corejs\")\n\nAdded in: `v7.4.0`\n\n`string` or `{ version: string, proposals: boolean }`, defaults to `\"2.0\"`. The `version` string can be any supported `core-js` versions. For example, `\"3.8\"` or `\"2.0\"`.\n\nThis option only has an effect when used alongside `useBuiltIns: usage` or `useBuiltIns: entry`, and ensures `@babel/preset-env` injects the polyfills supported by your `core-js` version. It is recommended to specify the minor version otherwise `\"3\"` will be interpreted as `\"3.0\"` which may not include polyfills for the latest features.\n\nBy default, only polyfills for stable ECMAScript features are injected: if you want to polyfill proposals, you have three different options:\n\n- when using `useBuiltIns: \"entry\"`, you can directly import a [proposal polyfill](https://github.com/zloirock/core-js/tree/master/packages/core-js/proposals): `import \"core-js/proposals/string-replace-all\"`.\n- when using `useBuiltIns: \"usage\"` you have two different alternatives:\n  - set the [`shippedProposals`](#shippedproposals) option to `true`. This will enable polyfills and transforms for proposal which have already been shipped in browsers for a while.\n  - use `corejs: { version: \"3.8\", proposals: true }`. This will enable polyfilling of every proposal supported by `core-js@3.8`.\n\n### `forceAllTransforms`[​](#forcealltransforms \"Direct link to forcealltransforms\")\n\n`boolean`, defaults to `false`.\n\n**Example**\n\nWith Babel 7's [JavaScript config file](../config-files/index#javascript) support, you can force all transforms to be run if env is set to `production`.\n\n``` js\nmodule.exports = function(api) {\n  return {\n    presets: [\n      [\n        \"@babel/preset-env\",\n        {\n          targets: {\n            chrome: 59,\n            edge: 13,\n            firefox: 50,\n          },\n          // for uglifyjs...\n          forceAllTransforms: api.env(\"production\"),\n        },\n      ],\n    ],\n  };\n};\n```\n\n> NOTE: `targets.uglify` is deprecated and will be removed in the next major in favor of this.\n\nBy default, this preset will run all the transforms needed for the targeted environment(s). Enable this option if you want to force running *all* transforms, which is useful if the output will be run through UglifyJS or an environment that only supports ES5.\n\n> NOTE: If you require an alternative minifier which *does* support ES6 syntax, we recommend [Terser](https://www.npmjs.com/package/terser).\n\n### `configPath`[​](#configpath \"Direct link to configpath\")\n\n`string`, defaults to `process.cwd()`\n\nThe starting point where the config search for browserslist will start, and ascend to the system root until found.\n\n### `ignoreBrowserslistConfig`[​](#ignorebrowserslistconfig \"Direct link to ignorebrowserslistconfig\")\n\n`boolean`, defaults to `false`\n\nToggles whether or not [browserslist config sources](https://github.com/ai/browserslist#queries) are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json. This is useful for projects that use a browserslist config for files that won't be compiled with Babel.\n\n### `browserslistEnv`[​](#browserslistenv \"Direct link to browserslistenv\")\n\nAdded in: `v7.10.0` `string`, defaults to `undefined`\n\nThe [Browserslist environment](https://github.com/browserslist/browserslist#configuring-for-different-environments) to use.\n\n### `shippedProposals`[​](#shippedproposals \"Direct link to shippedproposals\")\n\n`boolean`, defaults to `false`\n\nHistory\n\n| Version   | Changes                                          |\n|-----------|--------------------------------------------------|\n| `v7.14.0` | Include private field brand checks               |\n| `v7.12.0` | Include class static block and import assertions |\n| `v7.10.0` | Include class properties and private methods     |\n| `v7.9.0`  | Include numeric separator                        |\n\nToggles enabling support for builtin/feature proposals that have shipped in browsers. If your target environments have native support for a feature proposal, its matching parser syntax plugin is enabled instead of performing any transform. Note that this *does not* enable the same transformations as [`@babel/preset-stage-3`](../babel-preset-stage-3/index), since proposals can continue to change before landing in browsers.\n\nThe following are currently supported:\n\n**Builtins** injected when using `useBuiltIns: \"usage\"`\n\n- [esnext.global-this](https://github.com/tc39/proposal-global) (only supported by `core-js@3`)\n- [esnext.string.match-all](https://github.com/tc39/proposal-string-matchall) (only supported by `core-js@3`)\n\n**Features**\n\n- [Class static block](https://github.com/tc39/proposal-class-static-block)\n- [Import assertions](https://github.com/tc39/proposal-import-assertions) (parsing only)\n- [Private field brand checks](https://github.com/tc39/proposal-private-fields-in-in)\n\n**Materialized Features** These features were behind `shippedProposals` flag in older Babel versions. They are now generally available.\n\n- [class properties](https://github.com/tc39/proposal-class-fields)\n- [numeric separator](https://github.com/tc39/proposal-numeric-separator)\n- [private methods](https://github.com/tc39/proposal-private-methods)\n\n> You can read more about configuring preset options [here](https://babeljs.io/docs/en/presets#preset-options)\n\n## Caveats[​](#caveats \"Direct link to Caveats\")\n\n### Ineffective browserslist queries[​](#ineffective-browserslist-queries \"Direct link to Ineffective browserslist queries\")\n\nWhile `op_mini all` is a valid browserslist query, preset-env currently ignores it due to [lack of support data](https://github.com/kangax/compat-table/issues/1057) for Opera Mini.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-preset-env/](https://babeljs.io/docs/babel-preset-env/)"
- name: '@babel/preset-flow'
  id: babel-preset-flow/index
  summary: This preset is recommended if you use Flow, a static type checker for JavaScript code
  description: "# @babel/preset-flow\n\nThis preset is recommended if you use [Flow](https://flow.org/en/docs/getting-started/), a static type checker for JavaScript code. It includes the following plugins:\n\n- [@babel/plugin-transform-flow-strip-types](../babel-plugin-transform-flow-strip-types/index)\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` js\nfunction foo(one: any, two: number, three?): string {}\n```\n\n**Out**\n\n``` js\nfunction foo(one, two, three) {}\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/preset-flow\n```\n\n``` shell\nyarn add --dev @babel/preset-flow\n```\n\n``` shell\npnpm add --save-dev @babel/preset-flow\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"presets\": [\"@babel/preset-flow\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --presets @babel/preset-flow script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-flow\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `all`[​](#all \"Direct link to all\")\n\n`boolean`, defaults to `false`.\n\nFlow will only parse Flow-specific features if a `@flow` pragma is present atop the file, or the [`all` option](https://flow.org/en/docs/config/options/#toc-all-boolean) is set inside the `.flowconfig`.\n\nIf you are using the `all` option in your Flow config, be sure to set this option to `true` to get matching behavior.\n\nFor example, without either of the above set, the following call expression with a type argument:\n\n``` text\nf<T>(e)\n```\n\nWould get parsed as a nested binary expression:\n\n``` js\nf < T > e;\n```\n\n### `allowDeclareFields`[​](#allowdeclarefields \"Direct link to allowdeclarefields\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.9.0`\n\n> NOTE: This will be enabled by default in Babel 8\n\nWhen enabled, type-only class fields are only removed if they are prefixed with the `declare` modifier:\n\n``` js\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n> You can read more about configuring preset options [here](https://babeljs.io/docs/en/presets#preset-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-preset-flow/](https://babeljs.io/docs/babel-preset-flow/)"
- name: '@babel/preset-react'
  id: babel-preset-react/index
  summary: Automatic runtime (since v7.9.0) adds the functionality for these plugins automatically when the development option is enabled
  description: "# @babel/preset-react\n\nThis preset always includes the following plugins:\n\n- [@babel/plugin-syntax-jsx](../babel-plugin-syntax-jsx/index)\n- [@babel/plugin-transform-react-jsx](../babel-plugin-transform-react-jsx/index)\n- [@babel/plugin-transform-react-display-name](../babel-plugin-transform-react-display-name/index)\n\nAnd with the `development` option:\n\nClassic runtime adds:\n\n- [@babel/plugin-transform-react-jsx-self](../babel-plugin-transform-react-jsx-self/index)\n- [@babel/plugin-transform-react-jsx-source](../babel-plugin-transform-react-jsx-source/index)\n\nAutomatic runtime (since `v7.9.0`) adds the functionality for these plugins automatically when the `development` option is enabled. If you have automatic runtime enabled, adding [@babel/plugin-transform-react-jsx-self](../babel-plugin-transform-react-jsx-self/index) or [@babel/plugin-transform-react-jsx-source](../babel-plugin-transform-react-jsx-source/index) will error.\n\n> Note: Flow syntax support is no longer enabled in v7. For that, you will need to add the [Flow preset](../babel-preset-flow/index).\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n> You can also check out the React [Getting Started page](https://facebook.github.io/react/docs/hello-world.html)\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/preset-react\n```\n\n``` shell\nyarn add --dev @babel/preset-react\n```\n\n``` shell\npnpm add --save-dev @babel/preset-react\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\nWithout options:\n\n``` json\n{\n  \"presets\": [\"@babel/preset-react\"]\n}\n```\n\nWith options:\n\n``` json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-react\",\n      {\n        \"pragma\": \"dom\", // default pragma is React.createElement (only in classic runtime)\n        \"pragmaFrag\": \"DomFrag\", // default is React.Fragment (only in classic runtime)\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"classic\" // defaults to classic\n        // \"importSource\": \"custom-jsx-library\" // defaults to react (only in automatic runtime)\n      }\n    ]\n  ]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --presets @babel/preset-react script.js\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-react\"],\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### Both Runtimes[​](#both-runtimes \"Direct link to Both Runtimes\")\n\n#### `runtime`[​](#runtime \"Direct link to runtime\")\n\n`classic | automatic`, defaults to `classic`\n\nAdded in: `v7.9.0`\n\nDecides which runtime to use.\n\n`automatic` auto imports the functions that JSX transpiles to. `classic` does not automatic import anything.\n\n#### `development`[​](#development \"Direct link to development\")\n\n`boolean`, defaults to `false`.\n\nThis toggles behavior specific to development, such as adding `__source` and `__self`.\n\nThis is useful when combined with the [env option](../options/index#env) configuration or [js config files](../config-files/index#javascript).\n\n#### `throwIfNamespace`[​](#throwifnamespace \"Direct link to throwifnamespace\")\n\n`boolean`, defaults to `true`.\n\nToggles whether or not to throw an error if a XML namespaced tag name is used. For example:\n\n``` text\n<f:image />\n```\n\nThough the JSX spec allows this, it is disabled by default since React's JSX does not currently have support for it.\n\n#### `pure`[​](#pure \"Direct link to pure\")\n\n`boolean`, defaults to `true`.\n\nEnables `@babel/plugin-transform-react-pure-annotations`. It will mark top-level React method calls as pure for tree shaking.\n\n### React Automatic Runtime[​](#react-automatic-runtime \"Direct link to React Automatic Runtime\")\n\n#### importSource[​](#importsource \"Direct link to importSource\")\n\n`string`, defaults to `react`.\n\nAdded in: `v7.9.0`\n\nReplaces the import source when importing functions.\n\n### React Classic Runtime[​](#react-classic-runtime \"Direct link to React Classic Runtime\")\n\n#### `pragma`[​](#pragma \"Direct link to pragma\")\n\n`string`, defaults to `React.createElement`.\n\nReplace the function used when compiling JSX expressions. It should be a qualified name (e.g. `React.createElement`) or an identifier (e.g. `createElement`).\n\n#### `pragmaFrag`[​](#pragmafrag \"Direct link to pragmafrag\")\n\n`string`, defaults to `React.Fragment`.\n\nReplace the component used when compiling JSX fragments. It should be a valid JSX tag name.\n\n#### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`boolean`, defaults to `false`.\n\nWill use the native built-in instead of trying to polyfill behavior for any plugins that require one.\n\n#### `useSpread`[​](#usespread \"Direct link to usespread\")\n\n`boolean`, defaults to `false`.\n\nAdded in: `v7.7.0`\n\nWhen spreading props, use inline object with spread elements directly instead of Babel's extend helper or `Object.assign`.\n\n### babel.config.js[​](#babelconfigjs \"Direct link to babel.config.js\")\n\n``` js\nmodule.exports = {\n  presets: [\n    [\n      \"@babel/preset-react\",\n      {\n        development: process.env.BABEL_ENV === \"development\",\n      },\n    ],\n  ],\n};\n```\n\n### babel.config.json[​](#babelconfigjson \"Direct link to babel.config.json\")\n\n> Note: the `env` option will likely get deprecated soon\n\n``` json\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"env\": {\n    \"development\": {\n      \"presets\": [[\"@babel/preset-react\", { \"development\": true }]]\n    }\n  }\n}\n```\n\n> You can read more about configuring preset options [here](https://babeljs.io/docs/en/presets#preset-options)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-preset-react/](https://babeljs.io/docs/babel-preset-react/)"
- name: '@babel/preset-stage-3'
  id: babel-preset-stage-3/index
  summary: As of Babel v7, all the stage presets have been deprecated
  description: "# @babel/preset-stage-3\n\n> As of Babel v7, all the stage presets have been deprecated. Check [the blog post](https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets) for more information.\n>\n> For upgrade instructions, see [the README](https://github.com/babel/babel/blob/master/packages/babel-preset-stage-3/README.md).\n\nThe gist of Stage 3 is:\n\n> **Stage 3**: candidate\n>\n> **What is it?** The proposal is mostly finished and now needs feedback from implementations and users to progress further.\n\n> **What’s required?** The spec text must be complete. Designated reviewers (appointed by TC39, not by the champion) and the ECMAScript spec editor must sign off on the spec text. There must be at least two spec-compliant implementations (which don’t have to be enabled by default).\n>\n> **What’s next?** Henceforth, changes should only be made in response to critical issues raised by the implementations and their use.\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/preset-stage-3\n```\n\n``` shell\nyarn add --dev @babel/preset-stage-3\n```\n\n``` shell\npnpm add --save-dev @babel/preset-stage-3\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"presets\": [\"@babel/preset-stage-3\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel script.js --presets @babel/preset-stage-3\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-stage-3\"]\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `loose`[​](#loose \"Direct link to loose\")\n\n`boolean`, defaults to `false`.\n\nEnable \"loose\" transformations for any plugins in this preset that allow them.\n\n### `useBuiltIns`[​](#usebuiltins \"Direct link to usebuiltins\")\n\n`boolean`, defaults to `false`.\n\nWill use the native built-in instead of trying to polyfill behavior for any plugins that require one.\n\n> You can read more about configuring preset options [here](https://babeljs.io/docs/en/presets#preset-options)\n\n## References[​](#references \"Direct link to References\")\n\n- Chapter \"[The TC39 process for ECMAScript features](http://exploringjs.com/es2016-es2017/ch_tc39-process.html)\" in \"Exploring ES2016 and ES2017\" by Axel Rauschmayer\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-preset-stage-3/](https://babeljs.io/docs/babel-preset-stage-3/)"
- name: '@babel/preset-typescript'
  id: babel-preset-typescript/index
  summary: This preset is recommended if you use TypeScript, a typed superset of JavaScript
  description: "# @babel/preset-typescript\n\nThis preset is recommended if you use [TypeScript](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html), a typed superset of JavaScript. It includes the following plugins:\n\n- [@babel/plugin-transform-typescript](../babel-plugin-transform-typescript/index)\n\n> You will need to specify `--extensions \".ts\"` for `@babel/cli` & `@babel/node` cli's to handle `.ts` files.\n\n## Example[​](#example \"Direct link to Example\")\n\n**In**\n\n``` typescript\nconst x: number = 0;\n```\n\n**Out**\n\n``` js\nconst x = 0;\n```\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/preset-typescript\n```\n\n``` shell\nyarn add --dev @babel/preset-typescript\n```\n\n``` shell\npnpm add --save-dev @babel/preset-typescript\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n### With a configuration file (Recommended)[​](#with-a-configuration-file-recommended \"Direct link to With a configuration file (Recommended)\")\n\n``` json\n{\n  \"presets\": [\"@babel/preset-typescript\"]\n}\n```\n\n### Via CLI[​](#via-cli \"Direct link to Via CLI\")\n\n``` sh\nbabel --presets @babel/preset-typescript script.ts\n```\n\n### Via Node API[​](#via-node-api \"Direct link to Via Node API\")\n\n``` js\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-typescript\"],\n  filename: 'script.ts',\n});\n```\n\n## Options[​](#options \"Direct link to Options\")\n\n### `isTSX`[​](#istsx \"Direct link to istsx\")\n\n`boolean`, defaults to `false`\n\nForcibly enables `jsx` parsing. Otherwise angle brackets will be treated as typescript's legacy type assertion `var foo = <string>bar;`. Also, `isTSX: true` requires `allExtensions: true`.\n\n### `jsxPragma`[​](#jsxpragma \"Direct link to jsxpragma\")\n\n`string`, defaults to `React`\n\nReplace the function used when compiling JSX expressions. This is so that we know that the import is not a type import, and should not be removed.\n\n### `jsxPragmaFrag`[​](#jsxpragmafrag \"Direct link to jsxpragmafrag\")\n\n`string`, defaults to `React.Fragment`\n\nReplace the function used when compiling JSX fragment expressions. This is so that we know that the import is not a type import, and should not be removed.\n\n### `allExtensions`[​](#allextensions \"Direct link to allextensions\")\n\n`boolean`, defaults to `false`\n\nIndicates that every file should be parsed as TS, TSX, or as TS without JSX ambiguities (depending on the `isTSX` and `disallowAmbiguousJSXLike` options).\n\n### `allowNamespaces`[​](#allownamespaces \"Direct link to allownamespaces\")\n\n`boolean`, uses the default set by [`@babel/plugin-transform-typescript`](https://babeljs.io/docs/en/babel-plugin-transform-typescript#allownamespaces).\n\nAdded in: `v7.6.0`\n\nEnables compilation of TypeScript namespaces.\n\n### `allowDeclareFields`[​](#allowdeclarefields \"Direct link to allowdeclarefields\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.7.0`\n\n> NOTE: This will be enabled by default in Babel 8\n\nWhen enabled, type-only class fields are only removed if they are prefixed with the `declare` modifier:\n\n``` typescript\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n  prop?: string; // Initialized to undefined\n  prop1!: string // Initialized to undefined\n}\n```\n\n### `disallowAmbiguousJSXLike`[​](#disallowambiguousjsxlike \"Direct link to disallowambiguousjsxlike\")\n\n`boolean`, defaults to `true` for `.mts` and `.cts` files and to `false` otherwise.\n\nAdded in: `v7.16.0`\n\nEven when JSX parsing is not enabled, this option disallows using syntax that would be ambiguous with JSX (`<X> y` type assertions and `<X>() => {}` type arguments). It matches the `tsc` behavior when parsing `.mts` and `.mjs` files.\n\n### `onlyRemoveTypeImports`[​](#onlyremovetypeimports \"Direct link to onlyremovetypeimports\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.9.0`\n\nWhen set to `true`, the transform will only remove [type-only imports](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-exports) (introduced in TypeScript 3.8). This should only be used if you are using TypeScript \\>= 3.8.\n\n### `optimizeConstEnums`[​](#optimizeconstenums \"Direct link to optimizeconstenums\")\n\n`boolean`, defaults to `false`\n\nAdded in: `v7.15.0`\n\nWhen set to `true`, Babel will inline enum values rather than using the usual `enum` output:\n\n``` typescript\n// Input\nconst enum Animals {\n  Fish\n}\nconsole.log(Animals.Fish);\n\n// Default output\nvar Animals;\n\n(function (Animals) {\n  Animals[Animals[\"Fish\"] = 0] = \"Fish\";\n})(Animals || (Animals = {}));\n\nconsole.log(Animals.Fish);\n\n// `optimizeConstEnums` output\nconsole.log(0);\n```\n\nThis option differs from TypeScript's `--isolatedModules` behavior, which ignores the `const` modifier and compiles them as normal enums, and aligns Babel's behavior with TypeScript's default behavior.\n\nHowever, when *exporting* a `const enum` Babel will compile it to a plain object literal so that it doesn't need to rely on cross-file analysis when compiling it:\n\n``` typescript\n// Input\nexport const enum Animals {\n  Fish,\n}\n\n// `optimizeConstEnums` output\nexport var Animals = {\n  Fish: 0,\n};\n```\n\n> You can read more about configuring preset options [here](https://babeljs.io/docs/en/presets#preset-options).\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-preset-typescript/](https://babeljs.io/docs/babel-preset-typescript/)"
- name: '@babel/register'
  id: babel-register/index
  summary: One of the ways you can use Babel is through the require hook
  description: "# @babel/register\n\nOne of the ways you can use Babel is through the require hook. The require hook will bind itself to node's `require` and automatically compile files on the fly. This is equivalent to CoffeeScript's [coffee-script/register](http://coffeescript.org/v2/annotated-source/register.html).\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install @babel/core @babel/register --save-dev\n```\n\n``` shell\nyarn add @babel/core @babel/register --dev\n```\n\n``` shell\npnpm add @babel/core @babel/register --save-dev\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\n``` js\nrequire(\"@babel/register\");\n```\n\nAll subsequent files required by node with the extensions `.es6`, `.es`, `.jsx`, `.mjs`, and `.js` will be transformed by Babel.\n\nPolyfill not included\n\nYou must include the [polyfill](../babel-polyfill/index) separately when using features that require it, like generators.\n\n### Ignores `node_modules` by default[​](#ignores-node_modules-by-default \"Direct link to ignores-node_modules-by-default\")\n\n**NOTE:** By default all requires to `node_modules` will be ignored. You can override this by passing an ignore regex via:\n\n``` js\nrequire(\"@babel/register\")({\n  // This will override `node_modules` ignoring - you can alternatively pass\n  // an array of strings to be explicitly matched or a regex / glob\n  ignore: [],\n});\n```\n\n## Specifying options[​](#specifying-options \"Direct link to Specifying options\")\n\n``` js\nrequire(\"@babel/register\")({\n  // Array of ignore conditions, either a regex or a function. (Optional)\n  // File paths that match any condition are not compiled.\n  ignore: [\n    // When a file path matches this regex then it is **not** compiled\n    /regex/,\n\n    // The file's path is also passed to any ignore functions. It will\n    // **not** be compiled if `true` is returned.\n    function(filepath) {\n      return filepath !== \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Array of accept conditions, either a regex or a function. (Optional)\n  // File paths that match all conditions are compiled.\n  only: [\n    // File paths that **don't** match this regex are not compiled\n    /my_es6_folder/,\n\n    // File paths that **do not** return true are not compiled\n    function(filepath) {\n      return filepath === \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Setting this will remove the currently hooked extensions of `.es6`, `.es`, `.jsx`, `.mjs`\n  // and .js so you'll have to add them back if you want them to be used again.\n  extensions: [\".es6\", \".es\", \".jsx\", \".js\", \".mjs\"],\n\n  // Setting this to false will disable the cache.\n  cache: true,\n});\n```\n\nYou can pass in all other [options](../options/index) as well, including `plugins` and `presets`. Note that [config files](../config-files/index) will also be loaded and the programmatic config will be merged over top of the file config options. `@babel/register` does not support `ignore` and `only` in config files.\n\n## Environment variables[​](#environment-variables \"Direct link to Environment variables\")\n\nBy default `@babel/node` cli and `@babel/register` will save to a json cache in your temporary directory.\n\nThis will heavily improve with the startup and compilation of your files. There are however scenarios where you want to change this behaviour and there are environment variables exposed to allow you to do this.\n\n### BABEL_CACHE_PATH[​](#babel_cache_path \"Direct link to BABEL_CACHE_PATH\")\n\nSpecify a different cache location.\n\n``` sh\nBABEL_CACHE_PATH=/foo/my-cache.json babel-node script.js\n```\n\n### BABEL_DISABLE_CACHE[​](#babel_disable_cache \"Direct link to BABEL_DISABLE_CACHE\")\n\nDisable the cache.\n\n``` sh\nBABEL_DISABLE_CACHE=1 babel-node script.js\n```\n\n## Compiling plugins and presets on the fly[​](#compiling-plugins-and-presets-on-the-fly \"Direct link to Compiling plugins and presets on the fly\")\n\n`@babel/register` uses Node's `require()` hook system to compile files on the fly when they are loaded. While this is quite helpful overall, it means that there can be confusing cases where code within a `require()` hook causes *more* calls to `require`, causing a dependency cycle. In Babel's case for instance, this could mean that in the process of Babel trying to compile a user's file, Babel could end up trying to compile itself *as it is loading*.\n\nTo avoid this problem, this module explicitly disallows re-entrant compilation, e.g. Babel's own compilation logic explicitly cannot trigger further compilation of any other files on the fly. The downside of this is that if you want to define a plugin or preset that is itself live-compiled, the process is complicated.\n\nThe crux of it is that your own code needs to load the plugin/preset first. Assuming the plugin/preset loads all of its dependencies up front, what you'll want to do is:\n\n``` text\nrequire(\"@babel/register\")({\n  // ...\n});\n\nrequire(\"./my-plugin\");\n```\n\nBecause it is your own code that triggered the load, and not the logic within `@babel/register` itself, this should successfully compile any plugin/preset that loads synchronously.\n\n## Experimental Babel 8 implementation[​](#experimental-babel-8-implementation \"Direct link to Experimental Babel 8 implementation\")\n\nYou can also test the new experimental implementation that will be enabled by default in Babel 8, using\n\n``` js\nrequire(\"@babel/register/experimental-worker\");\n```\n\nIt internally runs Babel asynchronously, so it's compatible with [`.mjs` configuration files](../config-files/index#configuration-file-types). You can already use it as a replacement of `@babel/register` with a few caveats:\n\n- If you programmatically specify `@babel/register` options (using `require(\"@babel/register\")({ /* ... options */ })`), you must make sure that they are serializable. This means that you cannot pass plugin functions defined inline, but you must move them to a separate `./my-plugin.js` file or to a `babel.config.js` file.\n- The new implementation is still experimental: it *should* have the same features as the existing one, but there may be some new bugs and regressions.\n\n**Note:** `@babel/register` does *not* support compiling native Node.js ES modules on the fly, since currently there is no stable API for intercepting ES modules loading.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-register/](https://babeljs.io/docs/babel-register/)"
- name: '@babel/runtime'
  id: babel-runtime/index
  summary: '@babel/runtime is a library that contains Babel modular runtime helpers'
  description: "# @babel/runtime\n\n`@babel/runtime` is a library that contains Babel modular runtime helpers.\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save @babel/runtime\n```\n\n``` shell\nyarn add @babel/runtime\n```\n\n``` shell\npnpm add @babel/runtime\n```\n\n> See also: [`@babel/runtime-corejs2`](../babel-runtime-corejs2/index).\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nThis is meant to be used as a runtime `dependency` along with the Babel plugin [`@babel/plugin-transform-runtime`](../babel-plugin-transform-runtime/index). Please check out the documentation in that package for usage.\n\n## Why[​](#why \"Direct link to Why\")\n\nSometimes Babel may inject some code in the output that is the same across files, and thus can be potentially re-used.\n\nFor example, with the class transform (without loose mode):\n\n``` js\nclass Circle {}\n```\n\nturns into:\n\n``` js\nfunction _classCallCheck(instance, Constructor) {\n  //...\n}\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\nthis means every file that contains a class would have the `_classCallCheck` function repeated each time.\n\nWith `@babel/plugin-transform-runtime`, it would replace the reference to the function to the `@babel/runtime` version.\n\n``` js\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n`@babel/runtime` is just the package that contains the implementations of the functions in a modular way.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-runtime/](https://babeljs.io/docs/babel-runtime/)"
- name: '@babel/runtime-corejs2'
  id: babel-runtime-corejs2/index
  summary: '@babel/runtime-corejs2 is a library that contain''s Babel modular runtime helpers as well as version 2 of core-js'
  description: "# @babel/runtime-corejs2\n\n`@babel/runtime-corejs2` is a library that contain's Babel modular runtime helpers as well as version 2 of [`core-js`](https://github.com/zloirock/core-js).\n\n## Installation[​](#installation \"Direct link to Installation\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save @babel/runtime-corejs2\n```\n\n``` shell\nyarn add @babel/runtime-corejs2\n```\n\n``` shell\npnpm add @babel/runtime-corejs2\n```\n\n> See also: [`@babel/runtime`](../babel-runtime/index).\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nThis is meant to be used as a runtime `dependency` along with the Babel plugin [`@babel/plugin-transform-runtime`](../babel-plugin-transform-runtime/index). Please check out the documentation in that package for usage.\n\n## Why[​](#why \"Direct link to Why\")\n\nSometimes Babel may inject some code in the output that is the same and thus can be potentially re-used.\n\nFor example, with the class transform (without loose mode):\n\n``` js\nclass A {}\n```\n\nturns into:\n\n``` js\nfunction _classCallCheck(instance, Constructor) {\n  //...\n}\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\nthis means every file that contains a class would have the `_classCallCheck` function repeated each time.\n\nWith `@babel/plugin-transform-runtime`, it would replace the reference to the function to the `@babel/runtime-corejs2` version.\n\n``` js\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n`@babel/runtime-corejs2` is just the package that contains the implementations of the functions in a modular way.\n\n## Difference from `@babel/runtime`[​](#difference-from-babelruntime \"Direct link to difference-from-babelruntime\")\n\nThis can be used instead of a polyfill for any non-instance methods. It will replace things like `Promise` or `Symbol` with the library functions in `core-js`.\n\n``` js\nPromise;\n```\n\nturns into:\n\n``` js\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise.js\");\n```\n\nThis transformation is also applied for Babel's helpers.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-runtime-corejs2/](https://babeljs.io/docs/babel-runtime-corejs2/)"
- name: '@babel/standalone'
  id: babel-standalone/index
  summary: '@babel/standalone provides a standalone build of Babel for use in browsers and other non-Node.js environments'
  description: "# @babel/standalone\n\n`@babel/standalone` provides a standalone build of Babel for use in browsers and other non-Node.js environments.\n\n## When (not) to use @babel/standalone[​](#when-not-to-use-babelstandalone \"Direct link to When (not) to use @babel/standalone\")\n\nIf you're using Babel in production, you should normally not use `@babel/standalone`. Instead, you should use a build system running on Node.js, such as Webpack, Rollup, or Parcel, to transpile your JS ahead of time.\n\nHowever, there are some valid use cases for @babel/standalone:\n\n- It provides an easy, convenient way to prototype with Babel. Using `@babel/standalone`, you can get started using Babel with just a simple script tag in your HTML.\n- Sites that compile user-provided JavaScript in real-time, like [JSFiddle](https://jsfiddle.net/), [JS Bin](https://jsbin.com/), the [REPL on the Babel site](http://babeljs.io/repl/), [JSitor](https://jsitor.com), etc.\n- Apps that embed a JavaScript engine such as V8 directly, and want to use Babel for compilation\n- Apps that want to use JavaScript as a scripting language for extending the app itself, including all the goodies that modern ES provides.\n- Other non-Node.js environments ([ReactJS.NET](http://reactjs.net/), [ruby-babel-transpiler](https://github.com/babel/ruby-babel-transpiler), [php-babel-transpiler](https://github.com/talyssonoc/php-babel-transpiler), etc).\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nThere are several ways to get a copy of `@babel/standalone`. Pick whichever one you like:\n\n- Use it via [UNPKG](https://unpkg.com/@babel/standalone/babel.min.js). This is a simple way to embed it on a webpage without having to do any other setup.\n  ``` html\n  <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n  ```\n- Install it manually:\n  - npm\n  - Yarn\n  - pnpm\n\n  ``` shell\n  npm install --save @babel/standalone\n  ```\n\n  ``` shell\n  yarn add @babel/standalone\n  ```\n\n  ``` shell\n  pnpm add @babel/standalone\n  ```\n\n## Script Tags[​](#script-tags \"Direct link to Script Tags\")\n\nWhen loaded in a browser, `@babel/standalone` will automatically compile and execute all script tags with type `text/babel` or `text/jsx`:\n\n``` html\n<div id=\"output\"></div>\n<!-- Load Babel -->\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n<!-- Your custom script here -->\n<script type=\"text/babel\">\n  const getMessage = () => \"Hello World\";\n  document.getElementById(\"output\").innerHTML = getMessage();\n</script>\n```\n\n### Attributes[​](#attributes \"Direct link to Attributes\")\n\n#### `data-type`[​](#data-type \"Direct link to data-type\")\n\nAdded in: `v7.10.0`\n\nIf you want to use your browser's native support for ES Modules, you'd normally need to set a `type=\"module\"` attribute on your script tag.\n\nWith `@babel/standalone`, set a `data-type=\"module\"` attribute instead, like this:\n\n``` html\n<script type=\"text/babel\" data-type=\"module\">\n```\n\n#### `data-presets`[​](#data-presets \"Direct link to data-presets\")\n\nUse the `data-presets` attributes to enable builtin Babel presets. Multiple values are comma separated:\n\n``` html\n<script type=\"text/babel\" data-presets=\"env,react\">\n```\n\nMost popular presets are: [`env`](../babel-preset-env/index), [`react`](../babel-preset-react/index), [`typescript`](../babel-preset-typescript/index), [`flow`](../babel-preset-flow/index). You can also use `Babel.availablePresets` to query available presets.\n\nIf you want to pass additional options, refer to the [custom presets](#custom-presets-passing-options-to-built-in-presetsplugins) section.\n\n#### `data-plugins`[​](#data-plugins \"Direct link to data-plugins\")\n\nUse the `data-plugins` attribute to enable builtin Babel plugins. Multiple values are comma separated.\n\n``` html\n<script type=\"text/babel\" data-plugins=\"proposal-class-properties\">\n```\n\nSee [here](https://github.com/babel/babel/blob/main/packages/babel-standalone/src/generated/plugins.ts) for a list of builtin plugins in `@babel/standalone`. You can also access the list from `Babel.availablePlugins`.\n\nIf you want to add custom plugins, refer to the [custom plugins](#custom-plugins) section.\n\n#### `src`[​](#src \"Direct link to src\")\n\nLoading external scripts via `src` attribute is supported too:\n\n``` html\n<script type=\"text/babel\" src=\"foo.js\"></script>\n```\n\n#### `async`[​](#async \"Direct link to async\")\n\nYou can also set the `async` attribute for external scripts.\n\n``` html\n<script type=\"text/babel\" src=\"foo.js\" async></script>\n```\n\n## API[​](#api \"Direct link to API\")\n\nLoad `babel.js` or `babel.min.js` in your environment. This will expose [Babel's API](http://babeljs.io/docs/usage/api/) in a `Babel` object:\n\n``` js\nvar input = 'const getMessage = () => \"Hello World\";';\nvar output = Babel.transform(input, { presets: [\"env\"] }).code;\n```\n\nNote that [config files](../config-files/index) don't work in `@babel/standalone`, as no file system access is available. The presets and/or plugins to use **must** be specified in the options passed to `Babel.transform`.\n\n## Customization[​](#customization \"Direct link to Customization\")\n\n### custom plugins[​](#custom-plugins \"Direct link to custom plugins\")\n\nCustom plugins and presets can be added using the `registerPlugin` and `registerPreset` methods respectively:\n\n``` js\n// Simple plugin that converts every identifier to \"LOL\"\nfunction lolizer() {\n  return {\n    visitor: {\n      Identifier(path) {\n        path.node.name = \"LOL\";\n      },\n    },\n  };\n}\nBabel.registerPlugin(\"lolizer\", lolizer);\n```\n\nOnce registered, you can either use the custom plugin in an inline script:\n\n``` html\n<script type=\"text/babel\" data-plugins=\"lolizer\">\n```\n\nOr you can use the plugin with `Babel.transform`:\n\n``` js\nvar output = Babel.transform(\"function helloWorld() { alert(hello); }\", {\n  plugins: [\"lolizer\"],\n});\n// Returns \"function LOL() { LOL(LOL); }\"\n```\n\n### custom presets: passing options to built-in presets/plugins[​](#custom-presets-passing-options-to-built-in-presetsplugins \"Direct link to custom presets: passing options to built-in presets/plugins\")\n\nIf you want to pass options to builtin plugins and presets, you can create a new preset and pass these options inside the preset.\n\n``` js\n// Define a preset\nBabel.registerPreset(\"env-plus\", {\n  presets: [[Babel.availablePresets[\"env\"], { loose: true }]],\n  plugins: [\n    [\n      Babel.availablePlugins[\"proposal-decorators\"],\n      { version: \"2023-01\" },\n    ],\n  ],\n});\n```\n\nOnce registered, you can use this preset in an inline script:\n\n``` html\n<script type=\"text/babel\" data-presets=\"env-plus\">\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-standalone/](https://babeljs.io/docs/babel-standalone/)"
- name: '@babel/template'
  id: babel-template/index
  summary: In computer science, this is known as an implementation of quasiquotes
  description: "# @babel/template\n\nIn computer science, this is known as an implementation of quasiquotes.\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/template\n```\n\n``` shell\nyarn add --dev @babel/template\n```\n\n``` shell\npnpm add --save-dev @babel/template\n```\n\n## String Usage[​](#string-usage \"Direct link to String Usage\")\n\nWhen calling `template` as a function with a string argument, you can provide *placeholders* which will get substituted when the template is used.\n\nYou can use two different kinds of placeholders: syntactic placeholders (e.g. `%%name%%`) or identifier placeholders (e.g. `NAME`). `@babel/template` supports both those approaches by default, but they can't be mixed. If you need to be explicit about what syntax you are using, you can use the [`syntacticPlaceholders`](#syntacticplaceholders) option.\n\nPlease note that syntactic placeholders were introduced in Babel 7.4.0. If you don't control the `@babel/template` version (for example, when importing it from a `@babel/core@^7.0.0` peer dependency), you must use identifier placeholders. On the other hand, syntactic placeholders have some advantages: they can be used where identifiers would be a syntax error (e.g. in place of function bodies, or in export declarations), and they don't conflict with uppercase variables (e.g., `new URL()`).\n\nInput (syntactic placeholders):\n\n``` js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst buildRequire = template(`\n  var %%importName%% = require(%%source%%);\n`);\n\nconst ast = buildRequire({\n  importName: t.identifier(\"myModule\"),\n  source: t.stringLiteral(\"my-module\"),\n});\n\nconsole.log(generate(ast).code);\n```\n\nInput (identifier placeholders):\n\n``` js\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\"),\n});\n```\n\nOutput:\n\n``` js\nconst myModule = require(\"my-module\");\n```\n\n### `.ast`[​](#ast \"Direct link to ast\")\n\nIf no placeholders are in use and you just want a simple way to parse a string into an AST, you can use the `.ast` version of the template.\n\n``` js\nconst ast = template.ast(`\n  var myModule = require(\"my-module\");\n`);\n```\n\nwhich will parse and return the AST directly.\n\n## Template Literal Usage[​](#template-literal-usage \"Direct link to Template Literal Usage\")\n\n``` js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst source = \"my-module\";\n\nconst fn = template`\n  var IMPORT_NAME = require('${source}');\n`;\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n});\n\nconsole.log(generate(ast).code);\n```\n\nNote that placeholders can be passed directly as part of the template literal in order to make things as readable as possible, or they can be passed into the template function.\n\n### `.ast`[​](#ast-1 \"Direct link to ast-1\")\n\nIf no placeholders are in use and you just want a simple way to parse a string into an AST, you can use the `.ast` version of the template.\n\n``` js\nconst name = \"my-module\";\nconst mod = \"myModule\";\n\nconst ast = template.ast`\n  var ${mod} = require(\"${name}\");\n`;\n```\n\nwhich will parse and return the AST directly. Note that unlike the string-based version mentioned earlier, since this is a template literal, it is still valid to perform replacements using template literal replacements.\n\n## AST results[​](#ast-results \"Direct link to AST results\")\n\nThe `@babel/template` API exposes a few flexible APIs to make it as easy as possible to create ASTs with an expected structure. Each of these also has the `.ast` property mentioned above.\n\n### `template`[​](#template \"Direct link to template\")\n\n`template` returns either a single statement, or an array of statements, depending on the parsed result.\n\n### `template.smart`[​](#templatesmart \"Direct link to templatesmart\")\n\nThis is the same as the default `template` API, returning either a single node, or an array of nodes, depending on the parsed result.\n\n### `template.statement`[​](#templatestatement \"Direct link to templatestatement\")\n\n`template.statement(\"foo;\")()` returns a single statement node, and throw an exception if the result is anything but a single statement.\n\n### `template.statements`[​](#templatestatements \"Direct link to templatestatements\")\n\n`template.statements(\"foo;foo;\")()` returns an array of statement nodes.\n\n### `template.expression`[​](#templateexpression \"Direct link to templateexpression\")\n\n`template.expression(\"foo\")()` returns the expression node.\n\n### `template.program`[​](#templateprogram \"Direct link to templateprogram\")\n\n`template.program(\"foo;\")()` returns the `Program` node for the template.\n\n## API[​](#api \"Direct link to API\")\n\n### `template(code, [opts])`[​](#templatecode-opts \"Direct link to templatecode-opts\")\n\n#### code[​](#code \"Direct link to code\")\n\nType: `string`\n\n#### options[​](#options \"Direct link to options\")\n\n`@babel/template` accepts all of the options from [Babel Parser](../babel-parser/index#options), and specifies some defaults of its own:\n\n- `allowReturnOutsideFunction` is set to `true` by default.\n- `allowSuperOutsideMethod` is set to `true` by default.\n- `sourceType` is set to `module` by default.\n\n#### syntacticPlaceholders[​](#syntacticplaceholders \"Direct link to syntacticPlaceholders\")\n\nType: `boolean` Default: `true` if `%%foo%%`-style placeholders are used; `false` otherwise. Added in: `v7.4.0`\n\nWhen this option is `true`, you can use `%%foo%%` to mark placeholders in your templates. When it is `false`, placeholders are identifiers determined by the `placeholderWhitelist` and `placeholderPattern` options.\n\n##### placeholderWhitelist[​](#placeholderwhitelist \"Direct link to placeholderWhitelist\")\n\nType: `Set<string>` Default: `undefined`\n\n> This option is not compatible with `syntacticPlaceholders: true`\n\nA set of placeholder names to automatically accept. Items in this list do not need to match the given placeholder pattern.\n\n##### placeholderPattern[​](#placeholderpattern \"Direct link to placeholderPattern\")\n\nType: `RegExp | false` Default: `/^[_$A-Z0-9]+$/`\n\n> This option is not compatible with `syntacticPlaceholders: true`\n\nA pattern to search for when looking for Identifier and StringLiteral nodes that should be considered placeholders. 'false' will disable placeholder searching entirely, leaving only the 'placeholderWhitelist' value to find placeholders.\n\n##### preserveComments[​](#preservecomments \"Direct link to preserveComments\")\n\nType: `boolean` Default: `false`\n\nSet this to `true` to preserve any comments from the `code` parameter.\n\n#### Return value[​](#return-value \"Direct link to Return value\")\n\nBy default `@babel/template` returns a `function` which is invoked with an optional object of replacements. See the usage section for an example.\n\nWhen using `.ast`, the AST will be returned directly.\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-template/](https://babeljs.io/docs/babel-template/)"
- name: '@babel/traverse'
  id: babel-traverse/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# @babel/traverse\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save @babel/traverse\n```\n\n``` shell\nyarn add @babel/traverse\n```\n\n``` shell\npnpm add @babel/traverse\n```\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nWe can use it alongside the babel parser to traverse and update nodes:\n\n``` js\nimport * as parser from \"@babel/parser\";\nimport traverse from \"@babel/traverse\";\n\nconst code = `function square(n) {\n  return n * n;\n}`;\n\nconst ast = parser.parse(code);\n\ntraverse(ast, {\n  enter(path) {\n    if (path.isIdentifier({ name: \"n\" })) {\n      path.node.name = \"x\";\n    }\n  },\n});\n```\n\nAlso, we can target particular [**node types**](https://babeljs.io/docs/en/babel-types#api) in the Syntax Tree\n\n``` js\ntraverse(ast, {\n  FunctionDeclaration: function(path) {\n    path.node.id.name = \"x\";\n  },\n});\n```\n\n[📖 **Read the full docs here**](https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-traverse/](https://babeljs.io/docs/babel-traverse/)"
- name: '@babel/types'
  id: babel-types/index
  summary: This module contains methods for building ASTs manually and for checking the types of AST nodes
  description: "# @babel/types\n\n> This module contains methods for building ASTs manually and for checking the types of AST nodes.\n\n## Install[​](#install \"Direct link to Install\")\n\n- npm\n- Yarn\n- pnpm\n\n``` shell\nnpm install --save-dev @babel/types\n```\n\n``` shell\nyarn add --dev @babel/types\n```\n\n``` shell\npnpm add --save-dev @babel/types\n```\n\n## API[​](#api \"Direct link to API\")\n\n### Node Builders[​](#node-builders \"Direct link to Node Builders\")\n\n#### anyTypeAnnotation[​](#anytypeannotation \"Direct link to anyTypeAnnotation\")\n\n``` js\nt.anyTypeAnnotation();\n```\n\nSee also `t.isAnyTypeAnnotation(node, opts)` and `t.assertAnyTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### argumentPlaceholder[​](#argumentplaceholder \"Direct link to argumentPlaceholder\")\n\n``` js\nt.argumentPlaceholder();\n```\n\nSee also `t.isArgumentPlaceholder(node, opts)` and `t.assertArgumentPlaceholder(node, opts)`.\n\n------------------------------------------------------------------------\n\n#### arrayExpression[​](#arrayexpression \"Direct link to arrayExpression\")\n\n``` js\nt.arrayExpression(elements);\n```\n\nSee also `t.isArrayExpression(node, opts)` and `t.assertArrayExpression(node, opts)`.\n\nAST Node `ArrayExpression` shape:\n\n- `elements`: `Array<null | Expression | SpreadElement>` (default: `[]`)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### arrayPattern[​](#arraypattern \"Direct link to arrayPattern\")\n\n``` js\nt.arrayPattern(elements);\n```\n\nSee also `t.isArrayPattern(node, opts)` and `t.assertArrayPattern(node, opts)`.\n\nAST Node `ArrayPattern` shape:\n\n- `elements`: `Array<null | PatternLike | LVal>` (required)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Pattern`](#pattern), [`PatternLike`](#patternlike), [`LVal`](#lval)\n\n------------------------------------------------------------------------\n\n#### arrayTypeAnnotation[​](#arraytypeannotation \"Direct link to arrayTypeAnnotation\")\n\n``` js\nt.arrayTypeAnnotation(elementType);\n```\n\nSee also `t.isArrayTypeAnnotation(node, opts)` and `t.assertArrayTypeAnnotation(node, opts)`.\n\nAST Node `ArrayTypeAnnotation` shape:\n\n- `elementType`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### arrowFunctionExpression[​](#arrowfunctionexpression \"Direct link to arrowFunctionExpression\")\n\n``` js\nt.arrowFunctionExpression(params, body, async);\n```\n\nSee also `t.isArrowFunctionExpression(node, opts)` and `t.assertArrowFunctionExpression(node, opts)`.\n\nAST Node `ArrowFunctionExpression` shape:\n\n- `params`: `Array<Identifier | Pattern | RestElement>` (required)\n- `body`: `BlockStatement | Expression` (required)\n- `async`: `boolean` (default: `false`)\n- `expression`: `boolean` (required)\n- `generator`: `boolean` (default: `false`, excluded from builder function)\n- `predicate`: `DeclaredPredicate | InferredPredicate` (default: `null`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Function`](#function), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Expression`](#expression), [`Pureish`](#pureish)\n\n------------------------------------------------------------------------\n\n#### assignmentExpression[​](#assignmentexpression \"Direct link to assignmentExpression\")\n\n``` js\nt.assignmentExpression(operator, left, right);\n```\n\nSee also `t.isAssignmentExpression(node, opts)` and `t.assertAssignmentExpression(node, opts)`.\n\nAST Node `AssignmentExpression` shape:\n\n- `operator`: `string` (required)\n- `left`: `LVal` (required)\n- `right`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### assignmentPattern[​](#assignmentpattern \"Direct link to assignmentPattern\")\n\n``` js\nt.assignmentPattern(left, right);\n```\n\nSee also `t.isAssignmentPattern(node, opts)` and `t.assertAssignmentPattern(node, opts)`.\n\nAST Node `AssignmentPattern` shape:\n\n- `left`: `Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression` (required)\n- `right`: `Expression` (required)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Pattern`](#pattern), [`PatternLike`](#patternlike), [`LVal`](#lval)\n\n------------------------------------------------------------------------\n\n#### awaitExpression[​](#awaitexpression \"Direct link to awaitExpression\")\n\n``` js\nt.awaitExpression(argument);\n```\n\nSee also `t.isAwaitExpression(node, opts)` and `t.assertAwaitExpression(node, opts)`.\n\nAST Node `AwaitExpression` shape:\n\n- `argument`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Terminatorless`](#terminatorless)\n\n------------------------------------------------------------------------\n\n#### bigIntLiteral[​](#bigintliteral \"Direct link to bigIntLiteral\")\n\n``` js\nt.bigIntLiteral(value);\n```\n\nSee also `t.isBigIntLiteral(node, opts)` and `t.assertBigIntLiteral(node, opts)`.\n\nAST Node `BigIntLiteral` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### binaryExpression[​](#binaryexpression \"Direct link to binaryExpression\")\n\n``` js\nt.binaryExpression(operator, left, right);\n```\n\nSee also `t.isBinaryExpression(node, opts)` and `t.assertBinaryExpression(node, opts)`.\n\nAST Node `BinaryExpression` shape:\n\n- `operator`: `\"+\" | \"-\" | \"/\" | \"%\" | \"*\" | \"**\" | \"&\" | \"|\" | \">>\" | \">>>\" | \"<<\" | \"^\" | \"==\" | \"===\" | \"!=\" | \"!==\" | \"in\" | \"instanceof\" | \">\" | \"<\" | \">=\" | \"<=\" | \"|>\"` (required)\n- `left`: `Expression | PrivateName` (required)\n- `right`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Binary`](#binary), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### bindExpression[​](#bindexpression \"Direct link to bindExpression\")\n\n``` js\nt.bindExpression(object, callee);\n```\n\nSee also `t.isBindExpression(node, opts)` and `t.assertBindExpression(node, opts)`.\n\nAST Node `BindExpression` shape:\n\n- `object`: `Expression` (required)\n- `callee`: `Expression` (required)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### blockStatement[​](#blockstatement \"Direct link to blockStatement\")\n\n``` js\nt.blockStatement(body, directives);\n```\n\nSee also `t.isBlockStatement(node, opts)` and `t.assertBlockStatement(node, opts)`.\n\nAST Node `BlockStatement` shape:\n\n- `body`: `Array<Statement>` (required)\n- `directives`: `Array<Directive>` (default: `[]`)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`Block`](#block), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### booleanLiteral[​](#booleanliteral \"Direct link to booleanLiteral\")\n\n``` js\nt.booleanLiteral(value);\n```\n\nSee also `t.isBooleanLiteral(node, opts)` and `t.assertBooleanLiteral(node, opts)`.\n\nAST Node `BooleanLiteral` shape:\n\n- `value`: `boolean` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### booleanLiteralTypeAnnotation[​](#booleanliteraltypeannotation \"Direct link to booleanLiteralTypeAnnotation\")\n\n``` js\nt.booleanLiteralTypeAnnotation(value);\n```\n\nSee also `t.isBooleanLiteralTypeAnnotation(node, opts)` and `t.assertBooleanLiteralTypeAnnotation(node, opts)`.\n\nAST Node `BooleanLiteralTypeAnnotation` shape:\n\n- `value`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### booleanTypeAnnotation[​](#booleantypeannotation \"Direct link to booleanTypeAnnotation\")\n\n``` js\nt.booleanTypeAnnotation();\n```\n\nSee also `t.isBooleanTypeAnnotation(node, opts)` and `t.assertBooleanTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### breakStatement[​](#breakstatement \"Direct link to breakStatement\")\n\n``` js\nt.breakStatement(label);\n```\n\nSee also `t.isBreakStatement(node, opts)` and `t.assertBreakStatement(node, opts)`.\n\nAST Node `BreakStatement` shape:\n\n- `label`: `Identifier` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Terminatorless`](#terminatorless), [`CompletionStatement`](#completionstatement)\n\n------------------------------------------------------------------------\n\n#### callExpression[​](#callexpression \"Direct link to callExpression\")\n\n``` js\nt.callExpression(callee, arguments);\n```\n\nSee also `t.isCallExpression(node, opts)` and `t.assertCallExpression(node, opts)`.\n\nAST Node `CallExpression` shape:\n\n- `callee`: `Expression | Super | V8IntrinsicIdentifier` (required)\n- `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName | ArgumentPlaceholder>` (required)\n- `optional`: `true | false` (default: `null`, excluded from builder function)\n- `typeArguments`: `TypeParameterInstantiation` (default: `null`, excluded from builder function)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### catchClause[​](#catchclause \"Direct link to catchClause\")\n\n``` js\nt.catchClause(param, body);\n```\n\nSee also `t.isCatchClause(node, opts)` and `t.assertCatchClause(node, opts)`.\n\nAST Node `CatchClause` shape:\n\n- `param`: `Identifier | ArrayPattern | ObjectPattern` (default: `null`)\n- `body`: `BlockStatement` (required)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`BlockParent`](#blockparent)\n\n------------------------------------------------------------------------\n\n#### classAccessorProperty[​](#classaccessorproperty \"Direct link to classAccessorProperty\")\n\n``` js\nt.classAccessorProperty(key, value, typeAnnotation, decorators, computed, static);\n```\n\nSee also `t.isClassAccessorProperty(node, opts)` and `t.assertClassAccessorProperty(node, opts)`.\n\nAST Node `ClassAccessorProperty` shape:\n\n- `key`: `Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression | PrivateName` (required)\n- `value`: `Expression` (default: `null`)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `computed`: `boolean` (default: `false`)\n- `static`: `boolean` (default: `false`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `definite`: `boolean` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `false`, excluded from builder function)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n- `variance`: `Variance` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Property`](#property), [`Accessor`](#accessor)\n\n------------------------------------------------------------------------\n\n#### classBody[​](#classbody \"Direct link to classBody\")\n\n``` js\nt.classBody(body);\n```\n\nSee also `t.isClassBody(node, opts)` and `t.assertClassBody(node, opts)`.\n\nAST Node `ClassBody` shape:\n\n- `body`: `Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSIndexSignature | StaticBlock>` (required)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### classDeclaration[​](#classdeclaration \"Direct link to classDeclaration\")\n\n``` js\nt.classDeclaration(id, superClass, body, decorators);\n```\n\nSee also `t.isClassDeclaration(node, opts)` and `t.assertClassDeclaration(node, opts)`.\n\nAST Node `ClassDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `superClass`: `Expression` (default: `null`)\n- `body`: `ClassBody` (required)\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `implements`: `Array<TSExpressionWithTypeArguments | ClassImplements>` (default: `null`, excluded from builder function)\n- `mixins`: `InterfaceExtends` (default: `null`, excluded from builder function)\n- `superTypeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Class`](#class), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### classExpression[​](#classexpression \"Direct link to classExpression\")\n\n``` js\nt.classExpression(id, superClass, body, decorators);\n```\n\nSee also `t.isClassExpression(node, opts)` and `t.assertClassExpression(node, opts)`.\n\nAST Node `ClassExpression` shape:\n\n- `id`: `Identifier` (default: `null`)\n- `superClass`: `Expression` (default: `null`)\n- `body`: `ClassBody` (required)\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `implements`: `Array<TSExpressionWithTypeArguments | ClassImplements>` (default: `null`, excluded from builder function)\n- `mixins`: `InterfaceExtends` (default: `null`, excluded from builder function)\n- `superTypeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Class`](#class), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### classImplements[​](#classimplements \"Direct link to classImplements\")\n\n``` js\nt.classImplements(id, typeParameters);\n```\n\nSee also `t.isClassImplements(node, opts)` and `t.assertClassImplements(node, opts)`.\n\nAST Node `ClassImplements` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### classMethod[​](#classmethod \"Direct link to classMethod\")\n\n``` js\nt.classMethod(kind, key, params, body, computed, static, generator, async);\n```\n\nSee also `t.isClassMethod(node, opts)` and `t.assertClassMethod(node, opts)`.\n\nAST Node `ClassMethod` shape:\n\n- `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`)\n- `key`: if computed then `Expression` else `Identifier | Literal` (required)\n- `params`: `Array<Identifier | Pattern | RestElement | TSParameterProperty>` (required)\n- `body`: `BlockStatement` (required)\n- `computed`: `boolean` (default: `false`)\n- `static`: `boolean` (default: `false`)\n- `generator`: `boolean` (default: `false`)\n- `async`: `boolean` (default: `false`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `false`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Function`](#function), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Method`](#method)\n\n------------------------------------------------------------------------\n\n#### classPrivateMethod[​](#classprivatemethod \"Direct link to classPrivateMethod\")\n\n``` js\nt.classPrivateMethod(kind, key, params, body, static);\n```\n\nSee also `t.isClassPrivateMethod(node, opts)` and `t.assertClassPrivateMethod(node, opts)`.\n\nAST Node `ClassPrivateMethod` shape:\n\n- `kind`: `\"get\" | \"set\" | \"method\"` (default: `'method'`)\n- `key`: `PrivateName` (required)\n- `params`: `Array<Identifier | Pattern | RestElement | TSParameterProperty>` (required)\n- `body`: `BlockStatement` (required)\n- `static`: `boolean` (default: `false`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `async`: `boolean` (default: `false`, excluded from builder function)\n- `computed`: 'false' (default: `false`, excluded from builder function)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `generator`: `boolean` (default: `false`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `false`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Function`](#function), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Method`](#method), [`Private`](#private)\n\n------------------------------------------------------------------------\n\n#### classPrivateProperty[​](#classprivateproperty \"Direct link to classPrivateProperty\")\n\n``` js\nt.classPrivateProperty(key, value, decorators, static);\n```\n\nSee also `t.isClassPrivateProperty(node, opts)` and `t.assertClassPrivateProperty(node, opts)`.\n\nAST Node `ClassPrivateProperty` shape:\n\n- `key`: `PrivateName` (required)\n- `value`: `Expression` (default: `null`)\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `static`: `boolean` (default: `false`)\n- `definite`: `boolean` (default: `null`, excluded from builder function)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `variance`: `Variance` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Property`](#property), [`Private`](#private)\n\n------------------------------------------------------------------------\n\n#### classProperty[​](#classproperty \"Direct link to classProperty\")\n\n``` js\nt.classProperty(key, value, typeAnnotation, decorators, computed, static);\n```\n\nHistory\n\n| Version  | Changes           |\n|----------|-------------------|\n| `v7.6.0` | Supports `static` |\n\nSee also `t.isClassProperty(node, opts)` and `t.assertClassProperty(node, opts)`.\n\nAST Node `ClassProperty` shape:\n\n- `key`: `Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression` (required)\n- `value`: `Expression` (default: `null`)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `computed`: `boolean` (default: `false`)\n- `static`: `boolean` (default: `false`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `definite`: `boolean` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `false`, excluded from builder function)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n- `variance`: `Variance` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Property`](#property)\n\n------------------------------------------------------------------------\n\n#### conditionalExpression[​](#conditionalexpression \"Direct link to conditionalExpression\")\n\n``` js\nt.conditionalExpression(test, consequent, alternate);\n```\n\nSee also `t.isConditionalExpression(node, opts)` and `t.assertConditionalExpression(node, opts)`.\n\nAST Node `ConditionalExpression` shape:\n\n- `test`: `Expression` (required)\n- `consequent`: `Expression` (required)\n- `alternate`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Conditional`](#conditional)\n\n------------------------------------------------------------------------\n\n#### continueStatement[​](#continuestatement \"Direct link to continueStatement\")\n\n``` js\nt.continueStatement(label);\n```\n\nSee also `t.isContinueStatement(node, opts)` and `t.assertContinueStatement(node, opts)`.\n\nAST Node `ContinueStatement` shape:\n\n- `label`: `Identifier` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Terminatorless`](#terminatorless), [`CompletionStatement`](#completionstatement)\n\n------------------------------------------------------------------------\n\n#### debuggerStatement[​](#debuggerstatement \"Direct link to debuggerStatement\")\n\n``` js\nt.debuggerStatement();\n```\n\nSee also `t.isDebuggerStatement(node, opts)` and `t.assertDebuggerStatement(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### decimalLiteral[​](#decimalliteral \"Direct link to decimalLiteral\")\n\n``` js\nt.decimalLiteral(value);\n```\n\nSee also `t.isDecimalLiteral(node, opts)` and `t.assertDecimalLiteral(node, opts)`.\n\nAST Node `DecimalLiteral` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### declareClass[​](#declareclass \"Direct link to declareClass\")\n\n``` js\nt.declareClass(id, typeParameters, extends, body);\n```\n\nSee also `t.isDeclareClass(node, opts)` and `t.assertDeclareClass(node, opts)`.\n\nAST Node `DeclareClass` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `extends`: `Array<InterfaceExtends>` (default: `null`)\n- `body`: `ObjectTypeAnnotation` (required)\n- `implements`: `Array<ClassImplements>` (default: `null`, excluded from builder function)\n- `mixins`: `Array<InterfaceExtends>` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareExportAllDeclaration[​](#declareexportalldeclaration \"Direct link to declareExportAllDeclaration\")\n\n``` js\nt.declareExportAllDeclaration(source);\n```\n\nSee also `t.isDeclareExportAllDeclaration(node, opts)` and `t.assertDeclareExportAllDeclaration(node, opts)`.\n\nAST Node `DeclareExportAllDeclaration` shape:\n\n- `source`: `StringLiteral` (required)\n- `exportKind`: `\"type\" | \"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareExportDeclaration[​](#declareexportdeclaration \"Direct link to declareExportDeclaration\")\n\n``` js\nt.declareExportDeclaration(declaration, specifiers, source);\n```\n\nSee also `t.isDeclareExportDeclaration(node, opts)` and `t.assertDeclareExportDeclaration(node, opts)`.\n\nAST Node `DeclareExportDeclaration` shape:\n\n- `declaration`: `Flow` (default: `null`)\n- `specifiers`: `Array<ExportSpecifier | ExportNamespaceSpecifier>` (default: `null`)\n- `source`: `StringLiteral` (default: `null`)\n- `default`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareFunction[​](#declarefunction \"Direct link to declareFunction\")\n\n``` js\nt.declareFunction(id);\n```\n\nSee also `t.isDeclareFunction(node, opts)` and `t.assertDeclareFunction(node, opts)`.\n\nAST Node `DeclareFunction` shape:\n\n- `id`: `Identifier` (required)\n- `predicate`: `DeclaredPredicate` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareInterface[​](#declareinterface \"Direct link to declareInterface\")\n\n``` js\nt.declareInterface(id, typeParameters, extends, body);\n```\n\nSee also `t.isDeclareInterface(node, opts)` and `t.assertDeclareInterface(node, opts)`.\n\nAST Node `DeclareInterface` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `extends`: `Array<InterfaceExtends>` (default: `null`)\n- `body`: `ObjectTypeAnnotation` (required)\n- `implements`: `Array<ClassImplements>` (default: `null`, excluded from builder function)\n- `mixins`: `Array<InterfaceExtends>` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareModule[​](#declaremodule \"Direct link to declareModule\")\n\n``` js\nt.declareModule(id, body, kind);\n```\n\nSee also `t.isDeclareModule(node, opts)` and `t.assertDeclareModule(node, opts)`.\n\nAST Node `DeclareModule` shape:\n\n- `id`: `Identifier | StringLiteral` (required)\n- `body`: `BlockStatement` (required)\n- `kind`: `\"CommonJS\" | \"ES\"` (default: `null`)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareModuleExports[​](#declaremoduleexports \"Direct link to declareModuleExports\")\n\n``` js\nt.declareModuleExports(typeAnnotation);\n```\n\nSee also `t.isDeclareModuleExports(node, opts)` and `t.assertDeclareModuleExports(node, opts)`.\n\nAST Node `DeclareModuleExports` shape:\n\n- `typeAnnotation`: `TypeAnnotation` (required)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareOpaqueType[​](#declareopaquetype \"Direct link to declareOpaqueType\")\n\n``` js\nt.declareOpaqueType(id, typeParameters, supertype);\n```\n\nSee also `t.isDeclareOpaqueType(node, opts)` and `t.assertDeclareOpaqueType(node, opts)`.\n\nAST Node `DeclareOpaqueType` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `supertype`: `FlowType` (default: `null`)\n- `impltype`: `FlowType` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareTypeAlias[​](#declaretypealias \"Direct link to declareTypeAlias\")\n\n``` js\nt.declareTypeAlias(id, typeParameters, right);\n```\n\nSee also `t.isDeclareTypeAlias(node, opts)` and `t.assertDeclareTypeAlias(node, opts)`.\n\nAST Node `DeclareTypeAlias` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `right`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declareVariable[​](#declarevariable \"Direct link to declareVariable\")\n\n``` js\nt.declareVariable(id);\n```\n\nSee also `t.isDeclareVariable(node, opts)` and `t.assertDeclareVariable(node, opts)`.\n\nAST Node `DeclareVariable` shape:\n\n- `id`: `Identifier` (required)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### declaredPredicate[​](#declaredpredicate \"Direct link to declaredPredicate\")\n\n``` js\nt.declaredPredicate(value);\n```\n\nSee also `t.isDeclaredPredicate(node, opts)` and `t.assertDeclaredPredicate(node, opts)`.\n\nAST Node `DeclaredPredicate` shape:\n\n- `value`: `Flow` (required)\n\nAliases: [`Flow`](#flow), [`FlowPredicate`](#flowpredicate)\n\n------------------------------------------------------------------------\n\n#### decorator[​](#decorator \"Direct link to decorator\")\n\n``` js\nt.decorator(expression);\n```\n\nSee also `t.isDecorator(node, opts)` and `t.assertDecorator(node, opts)`.\n\nAST Node `Decorator` shape:\n\n- `expression`: `Expression` (required)\n\n------------------------------------------------------------------------\n\n#### directive[​](#directive \"Direct link to directive\")\n\n``` js\nt.directive(value);\n```\n\nSee also `t.isDirective(node, opts)` and `t.assertDirective(node, opts)`.\n\nAST Node `Directive` shape:\n\n- `value`: `DirectiveLiteral` (required)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### directiveLiteral[​](#directiveliteral \"Direct link to directiveLiteral\")\n\n``` js\nt.directiveLiteral(value);\n```\n\nSee also `t.isDirectiveLiteral(node, opts)` and `t.assertDirectiveLiteral(node, opts)`.\n\nAST Node `DirectiveLiteral` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### doExpression[​](#doexpression \"Direct link to doExpression\")\n\n``` js\nt.doExpression(body, async);\n```\n\nSee also `t.isDoExpression(node, opts)` and `t.assertDoExpression(node, opts)`.\n\nAST Node `DoExpression` shape:\n\n- `body`: `BlockStatement` (required)\n- `async`: `boolean` (default: `false`)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### doWhileStatement[​](#dowhilestatement \"Direct link to doWhileStatement\")\n\n``` js\nt.doWhileStatement(test, body);\n```\n\nSee also `t.isDoWhileStatement(node, opts)` and `t.assertDoWhileStatement(node, opts)`.\n\nAST Node `DoWhileStatement` shape:\n\n- `test`: `Expression` (required)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`BlockParent`](#blockparent), [`Loop`](#loop), [`While`](#while), [`Scopable`](#scopable)\n\n------------------------------------------------------------------------\n\n#### emptyStatement[​](#emptystatement \"Direct link to emptyStatement\")\n\n``` js\nt.emptyStatement();\n```\n\nSee also `t.isEmptyStatement(node, opts)` and `t.assertEmptyStatement(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### emptyTypeAnnotation[​](#emptytypeannotation \"Direct link to emptyTypeAnnotation\")\n\n``` js\nt.emptyTypeAnnotation();\n```\n\nSee also `t.isEmptyTypeAnnotation(node, opts)` and `t.assertEmptyTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### enumBooleanBody[​](#enumbooleanbody \"Direct link to enumBooleanBody\")\n\n``` js\nt.enumBooleanBody(members);\n```\n\nSee also `t.isEnumBooleanBody(node, opts)` and `t.assertEnumBooleanBody(node, opts)`.\n\nAST Node `EnumBooleanBody` shape:\n\n- `members`: `Array<EnumBooleanMember>` (required)\n- `explicitType`: `boolean` (required)\n- `hasUnknownMembers`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`EnumBody`](#enumbody)\n\n------------------------------------------------------------------------\n\n#### enumBooleanMember[​](#enumbooleanmember \"Direct link to enumBooleanMember\")\n\n``` js\nt.enumBooleanMember(id);\n```\n\nSee also `t.isEnumBooleanMember(node, opts)` and `t.assertEnumBooleanMember(node, opts)`.\n\nAST Node `EnumBooleanMember` shape:\n\n- `id`: `Identifier` (required)\n- `init`: `BooleanLiteral` (required)\n\nAliases: [`Flow`](#flow), [`EnumMember`](#enummember)\n\n------------------------------------------------------------------------\n\n#### enumDeclaration[​](#enumdeclaration \"Direct link to enumDeclaration\")\n\n``` js\nt.enumDeclaration(id, body);\n```\n\nSee also `t.isEnumDeclaration(node, opts)` and `t.assertEnumDeclaration(node, opts)`.\n\nAST Node `EnumDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `body`: `EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody` (required)\n\nAliases: [`Flow`](#flow), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### enumDefaultedMember[​](#enumdefaultedmember \"Direct link to enumDefaultedMember\")\n\n``` js\nt.enumDefaultedMember(id);\n```\n\nSee also `t.isEnumDefaultedMember(node, opts)` and `t.assertEnumDefaultedMember(node, opts)`.\n\nAST Node `EnumDefaultedMember` shape:\n\n- `id`: `Identifier` (required)\n\nAliases: [`Flow`](#flow), [`EnumMember`](#enummember)\n\n------------------------------------------------------------------------\n\n#### enumNumberBody[​](#enumnumberbody \"Direct link to enumNumberBody\")\n\n``` js\nt.enumNumberBody(members);\n```\n\nSee also `t.isEnumNumberBody(node, opts)` and `t.assertEnumNumberBody(node, opts)`.\n\nAST Node `EnumNumberBody` shape:\n\n- `members`: `Array<EnumNumberMember>` (required)\n- `explicitType`: `boolean` (required)\n- `hasUnknownMembers`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`EnumBody`](#enumbody)\n\n------------------------------------------------------------------------\n\n#### enumNumberMember[​](#enumnumbermember \"Direct link to enumNumberMember\")\n\n``` js\nt.enumNumberMember(id, init);\n```\n\nSee also `t.isEnumNumberMember(node, opts)` and `t.assertEnumNumberMember(node, opts)`.\n\nAST Node `EnumNumberMember` shape:\n\n- `id`: `Identifier` (required)\n- `init`: `NumericLiteral` (required)\n\nAliases: [`Flow`](#flow), [`EnumMember`](#enummember)\n\n------------------------------------------------------------------------\n\n#### enumStringBody[​](#enumstringbody \"Direct link to enumStringBody\")\n\n``` js\nt.enumStringBody(members);\n```\n\nSee also `t.isEnumStringBody(node, opts)` and `t.assertEnumStringBody(node, opts)`.\n\nAST Node `EnumStringBody` shape:\n\n- `members`: `Array<EnumStringMember | EnumDefaultedMember>` (required)\n- `explicitType`: `boolean` (required)\n- `hasUnknownMembers`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`EnumBody`](#enumbody)\n\n------------------------------------------------------------------------\n\n#### enumStringMember[​](#enumstringmember \"Direct link to enumStringMember\")\n\n``` js\nt.enumStringMember(id, init);\n```\n\nSee also `t.isEnumStringMember(node, opts)` and `t.assertEnumStringMember(node, opts)`.\n\nAST Node `EnumStringMember` shape:\n\n- `id`: `Identifier` (required)\n- `init`: `StringLiteral` (required)\n\nAliases: [`Flow`](#flow), [`EnumMember`](#enummember)\n\n------------------------------------------------------------------------\n\n#### enumSymbolBody[​](#enumsymbolbody \"Direct link to enumSymbolBody\")\n\n``` js\nt.enumSymbolBody(members);\n```\n\nSee also `t.isEnumSymbolBody(node, opts)` and `t.assertEnumSymbolBody(node, opts)`.\n\nAST Node `EnumSymbolBody` shape:\n\n- `members`: `Array<EnumDefaultedMember>` (required)\n- `hasUnknownMembers`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`EnumBody`](#enumbody)\n\n------------------------------------------------------------------------\n\n#### existsTypeAnnotation[​](#existstypeannotation \"Direct link to existsTypeAnnotation\")\n\n``` js\nt.existsTypeAnnotation();\n```\n\nSee also `t.isExistsTypeAnnotation(node, opts)` and `t.assertExistsTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### exportAllDeclaration[​](#exportalldeclaration \"Direct link to exportAllDeclaration\")\n\n``` js\nt.exportAllDeclaration(source);\n```\n\nSee also `t.isExportAllDeclaration(node, opts)` and `t.assertExportAllDeclaration(node, opts)`.\n\nAST Node `ExportAllDeclaration` shape:\n\n- `source`: `StringLiteral` (required)\n- `assertions`: `Array<ImportAttribute>` (default: `null`, excluded from builder function)\n- `exportKind`: `\"type\" | \"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Declaration`](#declaration), [`ImportOrExportDeclaration`](#importorexportdeclaration), [`ExportDeclaration`](#exportdeclaration)\n\n------------------------------------------------------------------------\n\n#### exportDefaultDeclaration[​](#exportdefaultdeclaration \"Direct link to exportDefaultDeclaration\")\n\n``` js\nt.exportDefaultDeclaration(declaration);\n```\n\nSee also `t.isExportDefaultDeclaration(node, opts)` and `t.assertExportDefaultDeclaration(node, opts)`.\n\nAST Node `ExportDefaultDeclaration` shape:\n\n- `declaration`: `TSDeclareFunction | FunctionDeclaration | ClassDeclaration | Expression` (required)\n- `exportKind`: `\"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Declaration`](#declaration), [`ImportOrExportDeclaration`](#importorexportdeclaration), [`ExportDeclaration`](#exportdeclaration)\n\n------------------------------------------------------------------------\n\n#### exportDefaultSpecifier[​](#exportdefaultspecifier \"Direct link to exportDefaultSpecifier\")\n\n``` js\nt.exportDefaultSpecifier(exported);\n```\n\nSee also `t.isExportDefaultSpecifier(node, opts)` and `t.assertExportDefaultSpecifier(node, opts)`.\n\nAST Node `ExportDefaultSpecifier` shape:\n\n- `exported`: `Identifier` (required)\n\nAliases: [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### exportNamedDeclaration[​](#exportnameddeclaration \"Direct link to exportNamedDeclaration\")\n\n``` js\nt.exportNamedDeclaration(declaration, specifiers, source);\n```\n\nSee also `t.isExportNamedDeclaration(node, opts)` and `t.assertExportNamedDeclaration(node, opts)`.\n\nAST Node `ExportNamedDeclaration` shape:\n\n- `declaration`: `Declaration` (default: `null`)\n- `specifiers`: `Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>` (default: `[]`)\n- `source`: `StringLiteral` (default: `null`)\n- `assertions`: `Array<ImportAttribute>` (default: `null`, excluded from builder function)\n- `exportKind`: `\"type\" | \"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Declaration`](#declaration), [`ImportOrExportDeclaration`](#importorexportdeclaration), [`ExportDeclaration`](#exportdeclaration)\n\n------------------------------------------------------------------------\n\n#### exportNamespaceSpecifier[​](#exportnamespacespecifier \"Direct link to exportNamespaceSpecifier\")\n\n``` js\nt.exportNamespaceSpecifier(exported);\n```\n\nSee also `t.isExportNamespaceSpecifier(node, opts)` and `t.assertExportNamespaceSpecifier(node, opts)`.\n\nAST Node `ExportNamespaceSpecifier` shape:\n\n- `exported`: `Identifier` (required)\n\nAliases: [`Standardized`](#standardized), [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### exportSpecifier[​](#exportspecifier \"Direct link to exportSpecifier\")\n\n``` js\nt.exportSpecifier(local, exported);\n```\n\nSee also `t.isExportSpecifier(node, opts)` and `t.assertExportSpecifier(node, opts)`.\n\nAST Node `ExportSpecifier` shape:\n\n- `local`: `Identifier` (required)\n- `exported`: `Identifier | StringLiteral` (required)\n- `exportKind`: `\"type\" | \"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### expressionStatement[​](#expressionstatement \"Direct link to expressionStatement\")\n\n``` js\nt.expressionStatement(expression);\n```\n\nSee also `t.isExpressionStatement(node, opts)` and `t.assertExpressionStatement(node, opts)`.\n\nAST Node `ExpressionStatement` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`ExpressionWrapper`](#expressionwrapper)\n\n------------------------------------------------------------------------\n\n#### file[​](#file \"Direct link to file\")\n\n``` js\nt.file(program, comments, tokens);\n```\n\nSee also `t.isFile(node, opts)` and `t.assertFile(node, opts)`.\n\nAST Node `File` shape:\n\n- `program`: `Program` (required)\n- `comments`: `Array<CommentBlock | CommentLine>` (default: `null`)\n- `tokens`: `Array<any>` (default: `null`)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### forInStatement[​](#forinstatement \"Direct link to forInStatement\")\n\n``` js\nt.forInStatement(left, right, body);\n```\n\nSee also `t.isForInStatement(node, opts)` and `t.assertForInStatement(node, opts)`.\n\nAST Node `ForInStatement` shape:\n\n- `left`: `VariableDeclaration | LVal` (required)\n- `right`: `Expression` (required)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Statement`](#statement), [`For`](#for), [`BlockParent`](#blockparent), [`Loop`](#loop), [`ForXStatement`](#forxstatement)\n\n------------------------------------------------------------------------\n\n#### forOfStatement[​](#forofstatement \"Direct link to forOfStatement\")\n\n``` js\nt.forOfStatement(left, right, body, await);\n```\n\nSee also `t.isForOfStatement(node, opts)` and `t.assertForOfStatement(node, opts)`.\n\nAST Node `ForOfStatement` shape:\n\n- `left`: `VariableDeclaration | LVal` (required)\n- `right`: `Expression` (required)\n- `body`: `Statement` (required)\n- `await`: `boolean` (default: `false`)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Statement`](#statement), [`For`](#for), [`BlockParent`](#blockparent), [`Loop`](#loop), [`ForXStatement`](#forxstatement)\n\n------------------------------------------------------------------------\n\n#### forStatement[​](#forstatement \"Direct link to forStatement\")\n\n``` js\nt.forStatement(init, test, update, body);\n```\n\nSee also `t.isForStatement(node, opts)` and `t.assertForStatement(node, opts)`.\n\nAST Node `ForStatement` shape:\n\n- `init`: `VariableDeclaration | Expression` (default: `null`)\n- `test`: `Expression` (default: `null`)\n- `update`: `Expression` (default: `null`)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Statement`](#statement), [`For`](#for), [`BlockParent`](#blockparent), [`Loop`](#loop)\n\n------------------------------------------------------------------------\n\n#### functionDeclaration[​](#functiondeclaration \"Direct link to functionDeclaration\")\n\n``` js\nt.functionDeclaration(id, params, body, generator, async);\n```\n\nSee also `t.isFunctionDeclaration(node, opts)` and `t.assertFunctionDeclaration(node, opts)`.\n\nAST Node `FunctionDeclaration` shape:\n\n- `id`: `Identifier` (default: `null`)\n- `params`: `Array<Identifier | Pattern | RestElement>` (required)\n- `body`: `BlockStatement` (required)\n- `generator`: `boolean` (default: `false`)\n- `async`: `boolean` (default: `false`)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `predicate`: `DeclaredPredicate | InferredPredicate` (default: `null`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Function`](#function), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Statement`](#statement), [`Pureish`](#pureish), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### functionExpression[​](#functionexpression \"Direct link to functionExpression\")\n\n``` js\nt.functionExpression(id, params, body, generator, async);\n```\n\nSee also `t.isFunctionExpression(node, opts)` and `t.assertFunctionExpression(node, opts)`.\n\nAST Node `FunctionExpression` shape:\n\n- `id`: `Identifier` (default: `null`)\n- `params`: `Array<Identifier | Pattern | RestElement>` (required)\n- `body`: `BlockStatement` (required)\n- `generator`: `boolean` (default: `false`)\n- `async`: `boolean` (default: `false`)\n- `predicate`: `DeclaredPredicate | InferredPredicate` (default: `null`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`Function`](#function), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Expression`](#expression), [`Pureish`](#pureish)\n\n------------------------------------------------------------------------\n\n#### functionTypeAnnotation[​](#functiontypeannotation \"Direct link to functionTypeAnnotation\")\n\n``` js\nt.functionTypeAnnotation(typeParameters, params, rest, returnType);\n```\n\nSee also `t.isFunctionTypeAnnotation(node, opts)` and `t.assertFunctionTypeAnnotation(node, opts)`.\n\nAST Node `FunctionTypeAnnotation` shape:\n\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `params`: `Array<FunctionTypeParam>` (required)\n- `rest`: `FunctionTypeParam` (default: `null`)\n- `returnType`: `FlowType` (required)\n- `this`: `FunctionTypeParam` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### functionTypeParam[​](#functiontypeparam \"Direct link to functionTypeParam\")\n\n``` js\nt.functionTypeParam(name, typeAnnotation);\n```\n\nSee also `t.isFunctionTypeParam(node, opts)` and `t.assertFunctionTypeParam(node, opts)`.\n\nAST Node `FunctionTypeParam` shape:\n\n- `name`: `Identifier` (default: `null`)\n- `typeAnnotation`: `FlowType` (required)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### genericTypeAnnotation[​](#generictypeannotation \"Direct link to genericTypeAnnotation\")\n\n``` js\nt.genericTypeAnnotation(id, typeParameters);\n```\n\nSee also `t.isGenericTypeAnnotation(node, opts)` and `t.assertGenericTypeAnnotation(node, opts)`.\n\nAST Node `GenericTypeAnnotation` shape:\n\n- `id`: `Identifier | QualifiedTypeIdentifier` (required)\n- `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### identifier[​](#identifier \"Direct link to identifier\")\n\n``` js\nt.identifier(name);\n```\n\nSee also `t.isIdentifier(node, opts)` and `t.assertIdentifier(node, opts)`.\n\nAST Node `Identifier` shape:\n\n- `name`: `string` (required)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`PatternLike`](#patternlike), [`LVal`](#lval), [`TSEntityName`](#tsentityname)\n\n------------------------------------------------------------------------\n\n#### ifStatement[​](#ifstatement \"Direct link to ifStatement\")\n\n``` js\nt.ifStatement(test, consequent, alternate);\n```\n\nSee also `t.isIfStatement(node, opts)` and `t.assertIfStatement(node, opts)`.\n\nAST Node `IfStatement` shape:\n\n- `test`: `Expression` (required)\n- `consequent`: `Statement` (required)\n- `alternate`: `Statement` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Conditional`](#conditional)\n\n------------------------------------------------------------------------\n\n#### import[​](#import \"Direct link to import\")\n\n``` js\nt.import();\n```\n\nSee also `t.isImport(node, opts)` and `t.assertImport(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### importAttribute[​](#importattribute \"Direct link to importAttribute\")\n\n``` js\nt.importAttribute(key, value);\n```\n\nSee also `t.isImportAttribute(node, opts)` and `t.assertImportAttribute(node, opts)`.\n\nAST Node `ImportAttribute` shape:\n\n- `key`: `Identifier | StringLiteral` (required)\n- `value`: `StringLiteral` (required)\n\n------------------------------------------------------------------------\n\n#### importDeclaration[​](#importdeclaration \"Direct link to importDeclaration\")\n\n``` js\nt.importDeclaration(specifiers, source);\n```\n\nHistory\n\n| Version   | Changes           |\n|-----------|-------------------|\n| `v7.20.0` | Supports `module` |\n\nSee also `t.isImportDeclaration(node, opts)` and `t.assertImportDeclaration(node, opts)`.\n\nAST Node `ImportDeclaration` shape:\n\n- `specifiers`: `Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>` (required)\n- `source`: `StringLiteral` (required)\n- `assertions`: `Array<ImportAttribute>` (default: `null`, excluded from builder function)\n- `importKind`: `\"type\" | \"typeof\" | \"value\"` (default: `null`, excluded from builder function)\n- `module`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Declaration`](#declaration), [`ImportOrExportDeclaration`](#importorexportdeclaration)\n\n------------------------------------------------------------------------\n\n#### importDefaultSpecifier[​](#importdefaultspecifier \"Direct link to importDefaultSpecifier\")\n\n``` js\nt.importDefaultSpecifier(local);\n```\n\nSee also `t.isImportDefaultSpecifier(node, opts)` and `t.assertImportDefaultSpecifier(node, opts)`.\n\nAST Node `ImportDefaultSpecifier` shape:\n\n- `local`: `Identifier` (required)\n\nAliases: [`Standardized`](#standardized), [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### importNamespaceSpecifier[​](#importnamespacespecifier \"Direct link to importNamespaceSpecifier\")\n\n``` js\nt.importNamespaceSpecifier(local);\n```\n\nSee also `t.isImportNamespaceSpecifier(node, opts)` and `t.assertImportNamespaceSpecifier(node, opts)`.\n\nAST Node `ImportNamespaceSpecifier` shape:\n\n- `local`: `Identifier` (required)\n\nAliases: [`Standardized`](#standardized), [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### importSpecifier[​](#importspecifier \"Direct link to importSpecifier\")\n\n``` js\nt.importSpecifier(local, imported);\n```\n\nSee also `t.isImportSpecifier(node, opts)` and `t.assertImportSpecifier(node, opts)`.\n\nAST Node `ImportSpecifier` shape:\n\n- `local`: `Identifier` (required)\n- `imported`: `Identifier | StringLiteral` (required)\n- `importKind`: `\"type\" | \"typeof\" | \"value\"` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`ModuleSpecifier`](#modulespecifier)\n\n------------------------------------------------------------------------\n\n#### indexedAccessType[​](#indexedaccesstype \"Direct link to indexedAccessType\")\n\n``` js\nt.indexedAccessType(objectType, indexType);\n```\n\nSee also `t.isIndexedAccessType(node, opts)` and `t.assertIndexedAccessType(node, opts)`.\n\nAST Node `IndexedAccessType` shape:\n\n- `objectType`: `FlowType` (required)\n- `indexType`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### inferredPredicate[​](#inferredpredicate \"Direct link to inferredPredicate\")\n\n``` js\nt.inferredPredicate();\n```\n\nSee also `t.isInferredPredicate(node, opts)` and `t.assertInferredPredicate(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowPredicate`](#flowpredicate)\n\n------------------------------------------------------------------------\n\n#### interfaceDeclaration[​](#interfacedeclaration \"Direct link to interfaceDeclaration\")\n\n``` js\nt.interfaceDeclaration(id, typeParameters, extends, body);\n```\n\nSee also `t.isInterfaceDeclaration(node, opts)` and `t.assertInterfaceDeclaration(node, opts)`.\n\nAST Node `InterfaceDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `extends`: `Array<InterfaceExtends>` (default: `null`)\n- `body`: `ObjectTypeAnnotation` (required)\n- `implements`: `Array<ClassImplements>` (default: `null`, excluded from builder function)\n- `mixins`: `Array<InterfaceExtends>` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### interfaceExtends[​](#interfaceextends \"Direct link to interfaceExtends\")\n\n``` js\nt.interfaceExtends(id, typeParameters);\n```\n\nSee also `t.isInterfaceExtends(node, opts)` and `t.assertInterfaceExtends(node, opts)`.\n\nAST Node `InterfaceExtends` shape:\n\n- `id`: `Identifier | QualifiedTypeIdentifier` (required)\n- `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### interfaceTypeAnnotation[​](#interfacetypeannotation \"Direct link to interfaceTypeAnnotation\")\n\n``` js\nt.interfaceTypeAnnotation(extends, body);\n```\n\nSee also `t.isInterfaceTypeAnnotation(node, opts)` and `t.assertInterfaceTypeAnnotation(node, opts)`.\n\nAST Node `InterfaceTypeAnnotation` shape:\n\n- `extends`: `Array<InterfaceExtends>` (default: `null`)\n- `body`: `ObjectTypeAnnotation` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### interpreterDirective[​](#interpreterdirective \"Direct link to interpreterDirective\")\n\n``` js\nt.interpreterDirective(value);\n```\n\nSee also `t.isInterpreterDirective(node, opts)` and `t.assertInterpreterDirective(node, opts)`.\n\nAST Node `InterpreterDirective` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### intersectionTypeAnnotation[​](#intersectiontypeannotation \"Direct link to intersectionTypeAnnotation\")\n\n``` js\nt.intersectionTypeAnnotation(types);\n```\n\nSee also `t.isIntersectionTypeAnnotation(node, opts)` and `t.assertIntersectionTypeAnnotation(node, opts)`.\n\nAST Node `IntersectionTypeAnnotation` shape:\n\n- `types`: `Array<FlowType>` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### jsxAttribute[​](#jsxattribute \"Direct link to jsxAttribute\")\n\n``` js\nt.jsxAttribute(name, value);\n```\n\nSee also `t.isJSXAttribute(node, opts)` and `t.assertJSXAttribute(node, opts)`.\n\nAST Node `JSXAttribute` shape:\n\n- `name`: `JSXIdentifier | JSXNamespacedName` (required)\n- `value`: `JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer` (default: `null`)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxClosingElement[​](#jsxclosingelement \"Direct link to jsxClosingElement\")\n\n``` js\nt.jsxClosingElement(name);\n```\n\nSee also `t.isJSXClosingElement(node, opts)` and `t.assertJSXClosingElement(node, opts)`.\n\nAST Node `JSXClosingElement` shape:\n\n- `name`: `JSXIdentifier | JSXMemberExpression | JSXNamespacedName` (required)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxClosingFragment[​](#jsxclosingfragment \"Direct link to jsxClosingFragment\")\n\n``` js\nt.jsxClosingFragment();\n```\n\nSee also `t.isJSXClosingFragment(node, opts)` and `t.assertJSXClosingFragment(node, opts)`.\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxElement[​](#jsxelement \"Direct link to jsxElement\")\n\n``` js\nt.jsxElement(openingElement, closingElement, children, selfClosing);\n```\n\nSee also `t.isJSXElement(node, opts)` and `t.assertJSXElement(node, opts)`.\n\nAST Node `JSXElement` shape:\n\n- `openingElement`: `JSXOpeningElement` (required)\n- `closingElement`: `JSXClosingElement` (default: `null`)\n- `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n- `selfClosing`: `boolean` (default: `null`)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### jsxEmptyExpression[​](#jsxemptyexpression \"Direct link to jsxEmptyExpression\")\n\n``` js\nt.jsxEmptyExpression();\n```\n\nSee also `t.isJSXEmptyExpression(node, opts)` and `t.assertJSXEmptyExpression(node, opts)`.\n\nAliases: [`JSX`](#jsx)\n\n------------------------------------------------------------------------\n\n#### jsxExpressionContainer[​](#jsxexpressioncontainer \"Direct link to jsxExpressionContainer\")\n\n``` js\nt.jsxExpressionContainer(expression);\n```\n\nSee also `t.isJSXExpressionContainer(node, opts)` and `t.assertJSXExpressionContainer(node, opts)`.\n\nAST Node `JSXExpressionContainer` shape:\n\n- `expression`: `Expression | JSXEmptyExpression` (required)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxFragment[​](#jsxfragment \"Direct link to jsxFragment\")\n\n``` js\nt.jsxFragment(openingFragment, closingFragment, children);\n```\n\nSee also `t.isJSXFragment(node, opts)` and `t.assertJSXFragment(node, opts)`.\n\nAST Node `JSXFragment` shape:\n\n- `openingFragment`: `JSXOpeningFragment` (required)\n- `closingFragment`: `JSXClosingFragment` (required)\n- `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### jsxIdentifier[​](#jsxidentifier \"Direct link to jsxIdentifier\")\n\n``` js\nt.jsxIdentifier(name);\n```\n\nSee also `t.isJSXIdentifier(node, opts)` and `t.assertJSXIdentifier(node, opts)`.\n\nAST Node `JSXIdentifier` shape:\n\n- `name`: `string` (required)\n\nAliases: [`JSX`](#jsx)\n\n------------------------------------------------------------------------\n\n#### jsxMemberExpression[​](#jsxmemberexpression \"Direct link to jsxMemberExpression\")\n\n``` js\nt.jsxMemberExpression(object, property);\n```\n\nSee also `t.isJSXMemberExpression(node, opts)` and `t.assertJSXMemberExpression(node, opts)`.\n\nAST Node `JSXMemberExpression` shape:\n\n- `object`: `JSXMemberExpression | JSXIdentifier` (required)\n- `property`: `JSXIdentifier` (required)\n\nAliases: [`JSX`](#jsx)\n\n------------------------------------------------------------------------\n\n#### jsxNamespacedName[​](#jsxnamespacedname \"Direct link to jsxNamespacedName\")\n\n``` js\nt.jsxNamespacedName(namespace, name);\n```\n\nSee also `t.isJSXNamespacedName(node, opts)` and `t.assertJSXNamespacedName(node, opts)`.\n\nAST Node `JSXNamespacedName` shape:\n\n- `namespace`: `JSXIdentifier` (required)\n- `name`: `JSXIdentifier` (required)\n\nAliases: [`JSX`](#jsx)\n\n------------------------------------------------------------------------\n\n#### jsxOpeningElement[​](#jsxopeningelement \"Direct link to jsxOpeningElement\")\n\n``` js\nt.jsxOpeningElement(name, attributes, selfClosing);\n```\n\nSee also `t.isJSXOpeningElement(node, opts)` and `t.assertJSXOpeningElement(node, opts)`.\n\nAST Node `JSXOpeningElement` shape:\n\n- `name`: `JSXIdentifier | JSXMemberExpression | JSXNamespacedName` (required)\n- `attributes`: `Array<JSXAttribute | JSXSpreadAttribute>` (required)\n- `selfClosing`: `boolean` (default: `false`)\n- `typeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxOpeningFragment[​](#jsxopeningfragment \"Direct link to jsxOpeningFragment\")\n\n``` js\nt.jsxOpeningFragment();\n```\n\nSee also `t.isJSXOpeningFragment(node, opts)` and `t.assertJSXOpeningFragment(node, opts)`.\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxSpreadAttribute[​](#jsxspreadattribute \"Direct link to jsxSpreadAttribute\")\n\n``` js\nt.jsxSpreadAttribute(argument);\n```\n\nSee also `t.isJSXSpreadAttribute(node, opts)` and `t.assertJSXSpreadAttribute(node, opts)`.\n\nAST Node `JSXSpreadAttribute` shape:\n\n- `argument`: `Expression` (required)\n\nAliases: [`JSX`](#jsx)\n\n------------------------------------------------------------------------\n\n#### jsxSpreadChild[​](#jsxspreadchild \"Direct link to jsxSpreadChild\")\n\n``` js\nt.jsxSpreadChild(expression);\n```\n\nSee also `t.isJSXSpreadChild(node, opts)` and `t.assertJSXSpreadChild(node, opts)`.\n\nAST Node `JSXSpreadChild` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### jsxText[​](#jsxtext \"Direct link to jsxText\")\n\n``` js\nt.jsxText(value);\n```\n\nSee also `t.isJSXText(node, opts)` and `t.assertJSXText(node, opts)`.\n\nAST Node `JSXText` shape:\n\n- `value`: `string` (required)\n\nAliases: [`JSX`](#jsx), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### labeledStatement[​](#labeledstatement \"Direct link to labeledStatement\")\n\n``` js\nt.labeledStatement(label, body);\n```\n\nSee also `t.isLabeledStatement(node, opts)` and `t.assertLabeledStatement(node, opts)`.\n\nAST Node `LabeledStatement` shape:\n\n- `label`: `Identifier` (required)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### logicalExpression[​](#logicalexpression \"Direct link to logicalExpression\")\n\n``` js\nt.logicalExpression(operator, left, right);\n```\n\nSee also `t.isLogicalExpression(node, opts)` and `t.assertLogicalExpression(node, opts)`.\n\nAST Node `LogicalExpression` shape:\n\n- `operator`: `\"||\" | \"&&\" | \"??\"` (required)\n- `left`: `Expression` (required)\n- `right`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Binary`](#binary), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### memberExpression[​](#memberexpression \"Direct link to memberExpression\")\n\n``` js\nt.memberExpression(object, property, computed, optional);\n```\n\nSee also `t.isMemberExpression(node, opts)` and `t.assertMemberExpression(node, opts)`.\n\nAST Node `MemberExpression` shape:\n\n- `object`: `Expression | Super` (required)\n- `property`: if computed then `Expression` else `Identifier` (required)\n- `computed`: `boolean` (default: `false`)\n- `optional`: `true | false` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`LVal`](#lval)\n\n------------------------------------------------------------------------\n\n#### metaProperty[​](#metaproperty \"Direct link to metaProperty\")\n\n``` js\nt.metaProperty(meta, property);\n```\n\nSee also `t.isMetaProperty(node, opts)` and `t.assertMetaProperty(node, opts)`.\n\nAST Node `MetaProperty` shape:\n\n- `meta`: `Identifier` (required)\n- `property`: `Identifier` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### mixedTypeAnnotation[​](#mixedtypeannotation \"Direct link to mixedTypeAnnotation\")\n\n``` js\nt.mixedTypeAnnotation();\n```\n\nSee also `t.isMixedTypeAnnotation(node, opts)` and `t.assertMixedTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### moduleExpression[​](#moduleexpression \"Direct link to moduleExpression\")\n\n``` js\nt.moduleExpression(body);\n```\n\nSee also `t.isModuleExpression(node, opts)` and `t.assertModuleExpression(node, opts)`.\n\nAST Node `ModuleExpression` shape:\n\n- `body`: `Program` (required)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### newExpression[​](#newexpression \"Direct link to newExpression\")\n\n``` js\nt.newExpression(callee, arguments);\n```\n\nSee also `t.isNewExpression(node, opts)` and `t.assertNewExpression(node, opts)`.\n\nAST Node `NewExpression` shape:\n\n- `callee`: `Expression | Super | V8IntrinsicIdentifier` (required)\n- `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName | ArgumentPlaceholder>` (required)\n- `optional`: `true | false` (default: `null`, excluded from builder function)\n- `typeArguments`: `TypeParameterInstantiation` (default: `null`, excluded from builder function)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### noop[​](#noop \"Direct link to noop\")\n\n``` js\nt.noop();\n```\n\nSee also `t.isNoop(node, opts)` and `t.assertNoop(node, opts)`.\n\nAliases: [`Miscellaneous`](#miscellaneous)\n\n------------------------------------------------------------------------\n\n#### nullLiteral[​](#nullliteral \"Direct link to nullLiteral\")\n\n``` js\nt.nullLiteral();\n```\n\nSee also `t.isNullLiteral(node, opts)` and `t.assertNullLiteral(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### nullLiteralTypeAnnotation[​](#nullliteraltypeannotation \"Direct link to nullLiteralTypeAnnotation\")\n\n``` js\nt.nullLiteralTypeAnnotation();\n```\n\nSee also `t.isNullLiteralTypeAnnotation(node, opts)` and `t.assertNullLiteralTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### nullableTypeAnnotation[​](#nullabletypeannotation \"Direct link to nullableTypeAnnotation\")\n\n``` js\nt.nullableTypeAnnotation(typeAnnotation);\n```\n\nSee also `t.isNullableTypeAnnotation(node, opts)` and `t.assertNullableTypeAnnotation(node, opts)`.\n\nAST Node `NullableTypeAnnotation` shape:\n\n- `typeAnnotation`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### numberLiteralTypeAnnotation[​](#numberliteraltypeannotation \"Direct link to numberLiteralTypeAnnotation\")\n\n``` js\nt.numberLiteralTypeAnnotation(value);\n```\n\nSee also `t.isNumberLiteralTypeAnnotation(node, opts)` and `t.assertNumberLiteralTypeAnnotation(node, opts)`.\n\nAST Node `NumberLiteralTypeAnnotation` shape:\n\n- `value`: `number` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### numberTypeAnnotation[​](#numbertypeannotation \"Direct link to numberTypeAnnotation\")\n\n``` js\nt.numberTypeAnnotation();\n```\n\nSee also `t.isNumberTypeAnnotation(node, opts)` and `t.assertNumberTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### numericLiteral[​](#numericliteral \"Direct link to numericLiteral\")\n\n``` js\nt.numericLiteral(value);\n```\n\nSee also `t.isNumericLiteral(node, opts)` and `t.assertNumericLiteral(node, opts)`.\n\nAST Node `NumericLiteral` shape:\n\n- `value`: `number` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### objectExpression[​](#objectexpression \"Direct link to objectExpression\")\n\n``` js\nt.objectExpression(properties);\n```\n\nSee also `t.isObjectExpression(node, opts)` and `t.assertObjectExpression(node, opts)`.\n\nAST Node `ObjectExpression` shape:\n\n- `properties`: `Array<ObjectMethod | ObjectProperty | SpreadElement>` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### objectMethod[​](#objectmethod \"Direct link to objectMethod\")\n\n``` js\nt.objectMethod(kind, key, params, body, computed, generator, async);\n```\n\nSee also `t.isObjectMethod(node, opts)` and `t.assertObjectMethod(node, opts)`.\n\nAST Node `ObjectMethod` shape:\n\n- `kind`: `\"method\" | \"get\" | \"set\"` (default: `'method'`)\n- `key`: if computed then `Expression` else `Identifier | Literal` (required)\n- `params`: `Array<Identifier | Pattern | RestElement>` (required)\n- `body`: `BlockStatement` (required)\n- `computed`: `boolean` (default: `false`)\n- `generator`: `boolean` (default: `false`)\n- `async`: `boolean` (default: `false`)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n- `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`UserWhitespacable`](#userwhitespacable), [`Function`](#function), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent), [`Method`](#method), [`ObjectMember`](#objectmember)\n\n------------------------------------------------------------------------\n\n#### objectPattern[​](#objectpattern \"Direct link to objectPattern\")\n\n``` js\nt.objectPattern(properties);\n```\n\nSee also `t.isObjectPattern(node, opts)` and `t.assertObjectPattern(node, opts)`.\n\nAST Node `ObjectPattern` shape:\n\n- `properties`: `Array<RestElement | ObjectProperty>` (required)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Pattern`](#pattern), [`PatternLike`](#patternlike), [`LVal`](#lval)\n\n------------------------------------------------------------------------\n\n#### objectProperty[​](#objectproperty \"Direct link to objectProperty\")\n\n``` js\nt.objectProperty(key, value, computed, shorthand, decorators);\n```\n\nSee also `t.isObjectProperty(node, opts)` and `t.assertObjectProperty(node, opts)`.\n\nAST Node `ObjectProperty` shape:\n\n- `key`: if computed then `Expression` else `Identifier | Literal` (required)\n- `value`: `Expression | PatternLike` (required)\n- `computed`: `boolean` (default: `false`)\n- `shorthand`: `boolean` (default: `false`)\n- `decorators`: `Array<Decorator>` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`UserWhitespacable`](#userwhitespacable), [`Property`](#property), [`ObjectMember`](#objectmember)\n\n------------------------------------------------------------------------\n\n#### objectTypeAnnotation[​](#objecttypeannotation \"Direct link to objectTypeAnnotation\")\n\n``` js\nt.objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact);\n```\n\nSee also `t.isObjectTypeAnnotation(node, opts)` and `t.assertObjectTypeAnnotation(node, opts)`.\n\nAST Node `ObjectTypeAnnotation` shape:\n\n- `properties`: `Array<ObjectTypeProperty | ObjectTypeSpreadProperty>` (required)\n- `indexers`: `Array<ObjectTypeIndexer>` (default: `[]`)\n- `callProperties`: `Array<ObjectTypeCallProperty>` (default: `[]`)\n- `internalSlots`: `Array<ObjectTypeInternalSlot>` (default: `[]`)\n- `exact`: `boolean` (default: `false`)\n- `inexact`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### objectTypeCallProperty[​](#objecttypecallproperty \"Direct link to objectTypeCallProperty\")\n\n``` js\nt.objectTypeCallProperty(value);\n```\n\nSee also `t.isObjectTypeCallProperty(node, opts)` and `t.assertObjectTypeCallProperty(node, opts)`.\n\nAST Node `ObjectTypeCallProperty` shape:\n\n- `value`: `FlowType` (required)\n- `static`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`UserWhitespacable`](#userwhitespacable)\n\n------------------------------------------------------------------------\n\n#### objectTypeIndexer[​](#objecttypeindexer \"Direct link to objectTypeIndexer\")\n\n``` js\nt.objectTypeIndexer(id, key, value, variance);\n```\n\nSee also `t.isObjectTypeIndexer(node, opts)` and `t.assertObjectTypeIndexer(node, opts)`.\n\nAST Node `ObjectTypeIndexer` shape:\n\n- `id`: `Identifier` (default: `null`)\n- `key`: `FlowType` (required)\n- `value`: `FlowType` (required)\n- `variance`: `Variance` (default: `null`)\n- `static`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`UserWhitespacable`](#userwhitespacable)\n\n------------------------------------------------------------------------\n\n#### objectTypeInternalSlot[​](#objecttypeinternalslot \"Direct link to objectTypeInternalSlot\")\n\n``` js\nt.objectTypeInternalSlot(id, value, optional, static, method);\n```\n\nSee also `t.isObjectTypeInternalSlot(node, opts)` and `t.assertObjectTypeInternalSlot(node, opts)`.\n\nAST Node `ObjectTypeInternalSlot` shape:\n\n- `id`: `Identifier` (required)\n- `value`: `FlowType` (required)\n- `optional`: `boolean` (required)\n- `static`: `boolean` (required)\n- `method`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`UserWhitespacable`](#userwhitespacable)\n\n------------------------------------------------------------------------\n\n#### objectTypeProperty[​](#objecttypeproperty \"Direct link to objectTypeProperty\")\n\n``` js\nt.objectTypeProperty(key, value, variance);\n```\n\nSee also `t.isObjectTypeProperty(node, opts)` and `t.assertObjectTypeProperty(node, opts)`.\n\nAST Node `ObjectTypeProperty` shape:\n\n- `key`: `Identifier | StringLiteral` (required)\n- `value`: `FlowType` (required)\n- `variance`: `Variance` (default: `null`)\n- `kind`: `\"init\" | \"get\" | \"set\"` (required)\n- `method`: `boolean` (required)\n- `optional`: `boolean` (required)\n- `proto`: `boolean` (required)\n- `static`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`UserWhitespacable`](#userwhitespacable)\n\n------------------------------------------------------------------------\n\n#### objectTypeSpreadProperty[​](#objecttypespreadproperty \"Direct link to objectTypeSpreadProperty\")\n\n``` js\nt.objectTypeSpreadProperty(argument);\n```\n\nSee also `t.isObjectTypeSpreadProperty(node, opts)` and `t.assertObjectTypeSpreadProperty(node, opts)`.\n\nAST Node `ObjectTypeSpreadProperty` shape:\n\n- `argument`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`UserWhitespacable`](#userwhitespacable)\n\n------------------------------------------------------------------------\n\n#### opaqueType[​](#opaquetype \"Direct link to opaqueType\")\n\n``` js\nt.opaqueType(id, typeParameters, supertype, impltype);\n```\n\nSee also `t.isOpaqueType(node, opts)` and `t.assertOpaqueType(node, opts)`.\n\nAST Node `OpaqueType` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `supertype`: `FlowType` (default: `null`)\n- `impltype`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### optionalCallExpression[​](#optionalcallexpression \"Direct link to optionalCallExpression\")\n\n``` js\nt.optionalCallExpression(callee, arguments, optional);\n```\n\nSee also `t.isOptionalCallExpression(node, opts)` and `t.assertOptionalCallExpression(node, opts)`.\n\nAST Node `OptionalCallExpression` shape:\n\n- `callee`: `Expression` (required)\n- `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName | ArgumentPlaceholder>` (required)\n- `optional`: `boolean` (required)\n- `typeArguments`: `TypeParameterInstantiation` (default: `null`, excluded from builder function)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### optionalIndexedAccessType[​](#optionalindexedaccesstype \"Direct link to optionalIndexedAccessType\")\n\n``` js\nt.optionalIndexedAccessType(objectType, indexType);\n```\n\nSee also `t.isOptionalIndexedAccessType(node, opts)` and `t.assertOptionalIndexedAccessType(node, opts)`.\n\nAST Node `OptionalIndexedAccessType` shape:\n\n- `objectType`: `FlowType` (required)\n- `indexType`: `FlowType` (required)\n- `optional`: `boolean` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### optionalMemberExpression[​](#optionalmemberexpression \"Direct link to optionalMemberExpression\")\n\n``` js\nt.optionalMemberExpression(object, property, computed, optional);\n```\n\nSee also `t.isOptionalMemberExpression(node, opts)` and `t.assertOptionalMemberExpression(node, opts)`.\n\nAST Node `OptionalMemberExpression` shape:\n\n- `object`: `Expression` (required)\n- `property`: `Expression | Identifier` (required)\n- `computed`: `boolean` (default: `false`)\n- `optional`: `boolean` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### parenthesizedExpression[​](#parenthesizedexpression \"Direct link to parenthesizedExpression\")\n\n``` js\nt.parenthesizedExpression(expression);\n```\n\nSee also `t.isParenthesizedExpression(node, opts)` and `t.assertParenthesizedExpression(node, opts)`.\n\nAST Node `ParenthesizedExpression` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`ExpressionWrapper`](#expressionwrapper)\n\n------------------------------------------------------------------------\n\n#### pipelineBareFunction[​](#pipelinebarefunction \"Direct link to pipelineBareFunction\")\n\n``` js\nt.pipelineBareFunction(callee);\n```\n\nSee also `t.isPipelineBareFunction(node, opts)` and `t.assertPipelineBareFunction(node, opts)`.\n\nAST Node `PipelineBareFunction` shape:\n\n- `callee`: `Expression` (required)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### pipelinePrimaryTopicReference[​](#pipelineprimarytopicreference \"Direct link to pipelinePrimaryTopicReference\")\n\n``` js\nt.pipelinePrimaryTopicReference();\n```\n\nSee also `t.isPipelinePrimaryTopicReference(node, opts)` and `t.assertPipelinePrimaryTopicReference(node, opts)`.\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### pipelineTopicExpression[​](#pipelinetopicexpression \"Direct link to pipelineTopicExpression\")\n\n``` js\nt.pipelineTopicExpression(expression);\n```\n\nSee also `t.isPipelineTopicExpression(node, opts)` and `t.assertPipelineTopicExpression(node, opts)`.\n\nAST Node `PipelineTopicExpression` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### placeholder[​](#placeholder \"Direct link to placeholder\")\n\n``` js\nt.placeholder(expectedNode, name);\n```\n\nSee also `t.isPlaceholder(node, opts)` and `t.assertPlaceholder(node, opts)`.\n\nAST Node `Placeholder` shape:\n\n- `expectedNode`: `\"Identifier\" | \"StringLiteral\" | \"Expression\" | \"Statement\" | \"Declaration\" | \"BlockStatement\" | \"ClassBody\" | \"Pattern\"` (required)\n- `name`: `Identifier` (required)\n\nAliases: [`Miscellaneous`](#miscellaneous)\n\n------------------------------------------------------------------------\n\n#### privateName[​](#privatename \"Direct link to privateName\")\n\n``` js\nt.privateName(id);\n```\n\nSee also `t.isPrivateName(node, opts)` and `t.assertPrivateName(node, opts)`.\n\nAST Node `PrivateName` shape:\n\n- `id`: `Identifier` (required)\n\nAliases: [`Standardized`](#standardized), [`Private`](#private)\n\n------------------------------------------------------------------------\n\n#### program[​](#program \"Direct link to program\")\n\n``` js\nt.program(body, directives, sourceType, interpreter);\n```\n\nSee also `t.isProgram(node, opts)` and `t.assertProgram(node, opts)`.\n\nAST Node `Program` shape:\n\n- `body`: `Array<Statement>` (required)\n- `directives`: `Array<Directive>` (default: `[]`)\n- `sourceType`: `\"script\" | \"module\"` (default: `'script'`)\n- `interpreter`: `InterpreterDirective` (default: `null`)\n- `sourceFile`: `string` (required)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`Block`](#block)\n\n------------------------------------------------------------------------\n\n#### qualifiedTypeIdentifier[​](#qualifiedtypeidentifier \"Direct link to qualifiedTypeIdentifier\")\n\n``` js\nt.qualifiedTypeIdentifier(id, qualification);\n```\n\nSee also `t.isQualifiedTypeIdentifier(node, opts)` and `t.assertQualifiedTypeIdentifier(node, opts)`.\n\nAST Node `QualifiedTypeIdentifier` shape:\n\n- `id`: `Identifier` (required)\n- `qualification`: `Identifier | QualifiedTypeIdentifier` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### recordExpression[​](#recordexpression \"Direct link to recordExpression\")\n\n``` js\nt.recordExpression(properties);\n```\n\nSee also `t.isRecordExpression(node, opts)` and `t.assertRecordExpression(node, opts)`.\n\nAST Node `RecordExpression` shape:\n\n- `properties`: `Array<ObjectProperty | SpreadElement>` (required)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### regExpLiteral[​](#regexpliteral \"Direct link to regExpLiteral\")\n\n``` js\nt.regExpLiteral(pattern, flags);\n```\n\nSee also `t.isRegExpLiteral(node, opts)` and `t.assertRegExpLiteral(node, opts)`.\n\nAST Node `RegExpLiteral` shape:\n\n- `pattern`: `string` (required)\n- `flags`: `string` (default: `''`)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal)\n\n------------------------------------------------------------------------\n\n#### restElement[​](#restelement \"Direct link to restElement\")\n\n``` js\nt.restElement(argument);\n```\n\nSee also `t.isRestElement(node, opts)` and `t.assertRestElement(node, opts)`.\n\nAST Node `RestElement` shape:\n\n- `argument`: `LVal` (required)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`LVal`](#lval), [`PatternLike`](#patternlike)\n\n------------------------------------------------------------------------\n\n#### returnStatement[​](#returnstatement \"Direct link to returnStatement\")\n\n``` js\nt.returnStatement(argument);\n```\n\nSee also `t.isReturnStatement(node, opts)` and `t.assertReturnStatement(node, opts)`.\n\nAST Node `ReturnStatement` shape:\n\n- `argument`: `Expression` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Terminatorless`](#terminatorless), [`CompletionStatement`](#completionstatement)\n\n------------------------------------------------------------------------\n\n#### sequenceExpression[​](#sequenceexpression \"Direct link to sequenceExpression\")\n\n``` js\nt.sequenceExpression(expressions);\n```\n\nSee also `t.isSequenceExpression(node, opts)` and `t.assertSequenceExpression(node, opts)`.\n\nAST Node `SequenceExpression` shape:\n\n- `expressions`: `Array<Expression>` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### spreadElement[​](#spreadelement \"Direct link to spreadElement\")\n\n``` js\nt.spreadElement(argument);\n```\n\nSee also `t.isSpreadElement(node, opts)` and `t.assertSpreadElement(node, opts)`.\n\nAST Node `SpreadElement` shape:\n\n- `argument`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`UnaryLike`](#unarylike)\n\n------------------------------------------------------------------------\n\n#### staticBlock[​](#staticblock \"Direct link to staticBlock\")\n\n``` js\nt.staticBlock(body);\n```\n\nSee also `t.isStaticBlock(node, opts)` and `t.assertStaticBlock(node, opts)`.\n\nAST Node `StaticBlock` shape:\n\n- `body`: `Array<Statement>` (required)\n\nAliases: [`Standardized`](#standardized), [`Scopable`](#scopable), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent)\n\n------------------------------------------------------------------------\n\n#### stringLiteral[​](#stringliteral \"Direct link to stringLiteral\")\n\n``` js\nt.stringLiteral(value);\n```\n\nSee also `t.isStringLiteral(node, opts)` and `t.assertStringLiteral(node, opts)`.\n\nAST Node `StringLiteral` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Pureish`](#pureish), [`Literal`](#literal), [`Immutable`](#immutable)\n\n------------------------------------------------------------------------\n\n#### stringLiteralTypeAnnotation[​](#stringliteraltypeannotation \"Direct link to stringLiteralTypeAnnotation\")\n\n``` js\nt.stringLiteralTypeAnnotation(value);\n```\n\nSee also `t.isStringLiteralTypeAnnotation(node, opts)` and `t.assertStringLiteralTypeAnnotation(node, opts)`.\n\nAST Node `StringLiteralTypeAnnotation` shape:\n\n- `value`: `string` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### stringTypeAnnotation[​](#stringtypeannotation \"Direct link to stringTypeAnnotation\")\n\n``` js\nt.stringTypeAnnotation();\n```\n\nSee also `t.isStringTypeAnnotation(node, opts)` and `t.assertStringTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### super[​](#super \"Direct link to super\")\n\n``` js\nt.super();\n```\n\nSee also `t.isSuper(node, opts)` and `t.assertSuper(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### switchCase[​](#switchcase \"Direct link to switchCase\")\n\n``` js\nt.switchCase(test, consequent);\n```\n\nSee also `t.isSwitchCase(node, opts)` and `t.assertSwitchCase(node, opts)`.\n\nAST Node `SwitchCase` shape:\n\n- `test`: `Expression` (default: `null`)\n- `consequent`: `Array<Statement>` (required)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### switchStatement[​](#switchstatement \"Direct link to switchStatement\")\n\n``` js\nt.switchStatement(discriminant, cases);\n```\n\nSee also `t.isSwitchStatement(node, opts)` and `t.assertSwitchStatement(node, opts)`.\n\nAST Node `SwitchStatement` shape:\n\n- `discriminant`: `Expression` (required)\n- `cases`: `Array<SwitchCase>` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`BlockParent`](#blockparent), [`Scopable`](#scopable)\n\n------------------------------------------------------------------------\n\n#### symbolTypeAnnotation[​](#symboltypeannotation \"Direct link to symbolTypeAnnotation\")\n\n``` js\nt.symbolTypeAnnotation();\n```\n\nSee also `t.isSymbolTypeAnnotation(node, opts)` and `t.assertSymbolTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### tsAnyKeyword[​](#tsanykeyword \"Direct link to tsAnyKeyword\")\n\n``` js\nt.tsAnyKeyword();\n```\n\nSee also `t.isTSAnyKeyword(node, opts)` and `t.assertTSAnyKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsArrayType[​](#tsarraytype \"Direct link to tsArrayType\")\n\n``` js\nt.tsArrayType(elementType);\n```\n\nSee also `t.isTSArrayType(node, opts)` and `t.assertTSArrayType(node, opts)`.\n\nAST Node `TSArrayType` shape:\n\n- `elementType`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsAsExpression[​](#tsasexpression \"Direct link to tsAsExpression\")\n\n``` js\nt.tsAsExpression(expression, typeAnnotation);\n```\n\nSee also `t.isTSAsExpression(node, opts)` and `t.assertTSAsExpression(node, opts)`.\n\nAST Node `TSAsExpression` shape:\n\n- `expression`: `Expression` (required)\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`Expression`](#expression), [`LVal`](#lval), [`PatternLike`](#patternlike)\n\n------------------------------------------------------------------------\n\n#### tsBigIntKeyword[​](#tsbigintkeyword \"Direct link to tsBigIntKeyword\")\n\n``` js\nt.tsBigIntKeyword();\n```\n\nSee also `t.isTSBigIntKeyword(node, opts)` and `t.assertTSBigIntKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsBooleanKeyword[​](#tsbooleankeyword \"Direct link to tsBooleanKeyword\")\n\n``` js\nt.tsBooleanKeyword();\n```\n\nSee also `t.isTSBooleanKeyword(node, opts)` and `t.assertTSBooleanKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsCallSignatureDeclaration[​](#tscallsignaturedeclaration \"Direct link to tsCallSignatureDeclaration\")\n\n``` js\nt.tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation);\n```\n\nSee also `t.isTSCallSignatureDeclaration(node, opts)` and `t.assertTSCallSignatureDeclaration(node, opts)`.\n\nAST Node `TSCallSignatureDeclaration` shape:\n\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `parameters`: `Array<Identifier | RestElement>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSTypeElement`](#tstypeelement)\n\n------------------------------------------------------------------------\n\n#### tsConditionalType[​](#tsconditionaltype \"Direct link to tsConditionalType\")\n\n``` js\nt.tsConditionalType(checkType, extendsType, trueType, falseType);\n```\n\nSee also `t.isTSConditionalType(node, opts)` and `t.assertTSConditionalType(node, opts)`.\n\nAST Node `TSConditionalType` shape:\n\n- `checkType`: `TSType` (required)\n- `extendsType`: `TSType` (required)\n- `trueType`: `TSType` (required)\n- `falseType`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsConstructSignatureDeclaration[​](#tsconstructsignaturedeclaration \"Direct link to tsConstructSignatureDeclaration\")\n\n``` js\nt.tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation);\n```\n\nSee also `t.isTSConstructSignatureDeclaration(node, opts)` and `t.assertTSConstructSignatureDeclaration(node, opts)`.\n\nAST Node `TSConstructSignatureDeclaration` shape:\n\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `parameters`: `Array<Identifier | RestElement>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSTypeElement`](#tstypeelement)\n\n------------------------------------------------------------------------\n\n#### tsConstructorType[​](#tsconstructortype \"Direct link to tsConstructorType\")\n\n``` js\nt.tsConstructorType(typeParameters, parameters, typeAnnotation);\n```\n\nSee also `t.isTSConstructorType(node, opts)` and `t.assertTSConstructorType(node, opts)`.\n\nAST Node `TSConstructorType` shape:\n\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `parameters`: `Array<Identifier | RestElement>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsDeclareFunction[​](#tsdeclarefunction \"Direct link to tsDeclareFunction\")\n\n``` js\nt.tsDeclareFunction(id, typeParameters, params, returnType);\n```\n\nSee also `t.isTSDeclareFunction(node, opts)` and `t.assertTSDeclareFunction(node, opts)`.\n\nAST Node `TSDeclareFunction` shape:\n\n- `id`: `Identifier` (default: `null`)\n- `typeParameters`: `TSTypeParameterDeclaration | Noop` (default: `null`)\n- `params`: `Array<Identifier | Pattern | RestElement>` (required)\n- `returnType`: `TSTypeAnnotation | Noop` (default: `null`)\n- `async`: `boolean` (default: `false`, excluded from builder function)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `generator`: `boolean` (default: `false`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### tsDeclareMethod[​](#tsdeclaremethod \"Direct link to tsDeclareMethod\")\n\n``` js\nt.tsDeclareMethod(decorators, key, typeParameters, params, returnType);\n```\n\nSee also `t.isTSDeclareMethod(node, opts)` and `t.assertTSDeclareMethod(node, opts)`.\n\nAST Node `TSDeclareMethod` shape:\n\n- `decorators`: `Array<Decorator>` (default: `null`)\n- `key`: `Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression` (required)\n- `typeParameters`: `TSTypeParameterDeclaration | Noop` (default: `null`)\n- `params`: `Array<Identifier | Pattern | RestElement | TSParameterProperty>` (required)\n- `returnType`: `TSTypeAnnotation | Noop` (default: `null`)\n- `abstract`: `boolean` (default: `null`, excluded from builder function)\n- `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `async`: `boolean` (default: `false`, excluded from builder function)\n- `computed`: `boolean` (default: `false`, excluded from builder function)\n- `generator`: `boolean` (default: `false`, excluded from builder function)\n- `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`, excluded from builder function)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `false`, excluded from builder function)\n- `static`: `boolean` (default: `false`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsEnumDeclaration[​](#tsenumdeclaration \"Direct link to tsEnumDeclaration\")\n\n``` js\nt.tsEnumDeclaration(id, members);\n```\n\nSee also `t.isTSEnumDeclaration(node, opts)` and `t.assertTSEnumDeclaration(node, opts)`.\n\nAST Node `TSEnumDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `members`: `Array<TSEnumMember>` (required)\n- `const`: `boolean` (default: `null`, excluded from builder function)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `initializer`: `Expression` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### tsEnumMember[​](#tsenummember \"Direct link to tsEnumMember\")\n\n``` js\nt.tsEnumMember(id, initializer);\n```\n\nSee also `t.isTSEnumMember(node, opts)` and `t.assertTSEnumMember(node, opts)`.\n\nAST Node `TSEnumMember` shape:\n\n- `id`: `Identifier | StringLiteral` (required)\n- `initializer`: `Expression` (default: `null`)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsExportAssignment[​](#tsexportassignment \"Direct link to tsExportAssignment\")\n\n``` js\nt.tsExportAssignment(expression);\n```\n\nSee also `t.isTSExportAssignment(node, opts)` and `t.assertTSExportAssignment(node, opts)`.\n\nAST Node `TSExportAssignment` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### tsExpressionWithTypeArguments[​](#tsexpressionwithtypearguments \"Direct link to tsExpressionWithTypeArguments\")\n\n``` js\nt.tsExpressionWithTypeArguments(expression, typeParameters);\n```\n\nSee also `t.isTSExpressionWithTypeArguments(node, opts)` and `t.assertTSExpressionWithTypeArguments(node, opts)`.\n\nAST Node `TSExpressionWithTypeArguments` shape:\n\n- `expression`: `TSEntityName` (required)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsExternalModuleReference[​](#tsexternalmodulereference \"Direct link to tsExternalModuleReference\")\n\n``` js\nt.tsExternalModuleReference(expression);\n```\n\nSee also `t.isTSExternalModuleReference(node, opts)` and `t.assertTSExternalModuleReference(node, opts)`.\n\nAST Node `TSExternalModuleReference` shape:\n\n- `expression`: `StringLiteral` (required)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsFunctionType[​](#tsfunctiontype \"Direct link to tsFunctionType\")\n\n``` js\nt.tsFunctionType(typeParameters, parameters, typeAnnotation);\n```\n\nSee also `t.isTSFunctionType(node, opts)` and `t.assertTSFunctionType(node, opts)`.\n\nAST Node `TSFunctionType` shape:\n\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `parameters`: `Array<Identifier | RestElement>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsImportEqualsDeclaration[​](#tsimportequalsdeclaration \"Direct link to tsImportEqualsDeclaration\")\n\n``` js\nt.tsImportEqualsDeclaration(id, moduleReference);\n```\n\nSee also `t.isTSImportEqualsDeclaration(node, opts)` and `t.assertTSImportEqualsDeclaration(node, opts)`.\n\nAST Node `TSImportEqualsDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `moduleReference`: `TSEntityName | TSExternalModuleReference` (required)\n- `importKind`: `\"type\" | \"value\"` (default: `null`, excluded from builder function)\n- `isExport`: `boolean` (required)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### tsImportType[​](#tsimporttype \"Direct link to tsImportType\")\n\n``` js\nt.tsImportType(argument, qualifier, typeParameters);\n```\n\nSee also `t.isTSImportType(node, opts)` and `t.assertTSImportType(node, opts)`.\n\nAST Node `TSImportType` shape:\n\n- `argument`: `StringLiteral` (required)\n- `qualifier`: `TSEntityName` (default: `null`)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsIndexSignature[​](#tsindexsignature \"Direct link to tsIndexSignature\")\n\n``` js\nt.tsIndexSignature(parameters, typeAnnotation);\n```\n\nSee also `t.isTSIndexSignature(node, opts)` and `t.assertTSIndexSignature(node, opts)`.\n\nAST Node `TSIndexSignature` shape:\n\n- `parameters`: `Array<Identifier>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n- `static`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`TSTypeElement`](#tstypeelement)\n\n------------------------------------------------------------------------\n\n#### tsIndexedAccessType[​](#tsindexedaccesstype \"Direct link to tsIndexedAccessType\")\n\n``` js\nt.tsIndexedAccessType(objectType, indexType);\n```\n\nSee also `t.isTSIndexedAccessType(node, opts)` and `t.assertTSIndexedAccessType(node, opts)`.\n\nAST Node `TSIndexedAccessType` shape:\n\n- `objectType`: `TSType` (required)\n- `indexType`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsInferType[​](#tsinfertype \"Direct link to tsInferType\")\n\n``` js\nt.tsInferType(typeParameter);\n```\n\nSee also `t.isTSInferType(node, opts)` and `t.assertTSInferType(node, opts)`.\n\nAST Node `TSInferType` shape:\n\n- `typeParameter`: `TSTypeParameter` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsInstantiationExpression[​](#tsinstantiationexpression \"Direct link to tsInstantiationExpression\")\n\n``` js\nt.tsInstantiationExpression(expression, typeParameters);\n```\n\nSee also `t.isTSInstantiationExpression(node, opts)` and `t.assertTSInstantiationExpression(node, opts)`.\n\nAST Node `TSInstantiationExpression` shape:\n\n- `expression`: `Expression` (required)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### tsInterfaceBody[​](#tsinterfacebody \"Direct link to tsInterfaceBody\")\n\n``` js\nt.tsInterfaceBody(body);\n```\n\nSee also `t.isTSInterfaceBody(node, opts)` and `t.assertTSInterfaceBody(node, opts)`.\n\nAST Node `TSInterfaceBody` shape:\n\n- `body`: `Array<TSTypeElement>` (required)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsInterfaceDeclaration[​](#tsinterfacedeclaration \"Direct link to tsInterfaceDeclaration\")\n\n``` js\nt.tsInterfaceDeclaration(id, typeParameters, extends, body);\n```\n\nSee also `t.isTSInterfaceDeclaration(node, opts)` and `t.assertTSInterfaceDeclaration(node, opts)`.\n\nAST Node `TSInterfaceDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `extends`: `Array<TSExpressionWithTypeArguments>` (default: `null`)\n- `body`: `TSInterfaceBody` (required)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### tsIntersectionType[​](#tsintersectiontype \"Direct link to tsIntersectionType\")\n\n``` js\nt.tsIntersectionType(types);\n```\n\nSee also `t.isTSIntersectionType(node, opts)` and `t.assertTSIntersectionType(node, opts)`.\n\nAST Node `TSIntersectionType` shape:\n\n- `types`: `Array<TSType>` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsIntrinsicKeyword[​](#tsintrinsickeyword \"Direct link to tsIntrinsicKeyword\")\n\n``` js\nt.tsIntrinsicKeyword();\n```\n\nSee also `t.isTSIntrinsicKeyword(node, opts)` and `t.assertTSIntrinsicKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsLiteralType[​](#tsliteraltype \"Direct link to tsLiteralType\")\n\n``` js\nt.tsLiteralType(literal);\n```\n\nSee also `t.isTSLiteralType(node, opts)` and `t.assertTSLiteralType(node, opts)`.\n\nAST Node `TSLiteralType` shape:\n\n- `literal`: `NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryExpression` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsMappedType[​](#tsmappedtype \"Direct link to tsMappedType\")\n\n``` js\nt.tsMappedType(typeParameter, typeAnnotation, nameType);\n```\n\nSee also `t.isTSMappedType(node, opts)` and `t.assertTSMappedType(node, opts)`.\n\nAST Node `TSMappedType` shape:\n\n- `typeParameter`: `TSTypeParameter` (required)\n- `typeAnnotation`: `TSType` (default: `null`)\n- `nameType`: `TSType` (default: `null`)\n- `optional`: `true | false | \"+\" | \"-\"` (default: `null`, excluded from builder function)\n- `readonly`: `true | false | \"+\" | \"-\"` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsMethodSignature[​](#tsmethodsignature \"Direct link to tsMethodSignature\")\n\n``` js\nt.tsMethodSignature(key, typeParameters, parameters, typeAnnotation);\n```\n\nSee also `t.isTSMethodSignature(node, opts)` and `t.assertTSMethodSignature(node, opts)`.\n\nAST Node `TSMethodSignature` shape:\n\n- `key`: `Expression` (required)\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `parameters`: `Array<Identifier | RestElement>` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n- `computed`: `boolean` (default: `false`, excluded from builder function)\n- `kind`: `\"method\" | \"get\" | \"set\"` (required)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`TSTypeElement`](#tstypeelement)\n\n------------------------------------------------------------------------\n\n#### tsModuleBlock[​](#tsmoduleblock \"Direct link to tsModuleBlock\")\n\n``` js\nt.tsModuleBlock(body);\n```\n\nSee also `t.isTSModuleBlock(node, opts)` and `t.assertTSModuleBlock(node, opts)`.\n\nAST Node `TSModuleBlock` shape:\n\n- `body`: `Array<Statement>` (required)\n\nAliases: [`TypeScript`](#typescript), [`Scopable`](#scopable), [`Block`](#block), [`BlockParent`](#blockparent), [`FunctionParent`](#functionparent)\n\n------------------------------------------------------------------------\n\n#### tsModuleDeclaration[​](#tsmoduledeclaration \"Direct link to tsModuleDeclaration\")\n\n``` js\nt.tsModuleDeclaration(id, body);\n```\n\nSee also `t.isTSModuleDeclaration(node, opts)` and `t.assertTSModuleDeclaration(node, opts)`.\n\nAST Node `TSModuleDeclaration` shape:\n\n- `id`: `Identifier | StringLiteral` (required)\n- `body`: `TSModuleBlock | TSModuleDeclaration` (required)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n- `global`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### tsNamedTupleMember[​](#tsnamedtuplemember \"Direct link to tsNamedTupleMember\")\n\n``` js\nt.tsNamedTupleMember(label, elementType, optional);\n```\n\nSee also `t.isTSNamedTupleMember(node, opts)` and `t.assertTSNamedTupleMember(node, opts)`.\n\nAST Node `TSNamedTupleMember` shape:\n\n- `label`: `Identifier` (required)\n- `elementType`: `TSType` (required)\n- `optional`: `boolean` (default: `false`)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsNamespaceExportDeclaration[​](#tsnamespaceexportdeclaration \"Direct link to tsNamespaceExportDeclaration\")\n\n``` js\nt.tsNamespaceExportDeclaration(id);\n```\n\nSee also `t.isTSNamespaceExportDeclaration(node, opts)` and `t.assertTSNamespaceExportDeclaration(node, opts)`.\n\nAST Node `TSNamespaceExportDeclaration` shape:\n\n- `id`: `Identifier` (required)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### tsNeverKeyword[​](#tsneverkeyword \"Direct link to tsNeverKeyword\")\n\n``` js\nt.tsNeverKeyword();\n```\n\nSee also `t.isTSNeverKeyword(node, opts)` and `t.assertTSNeverKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsNonNullExpression[​](#tsnonnullexpression \"Direct link to tsNonNullExpression\")\n\n``` js\nt.tsNonNullExpression(expression);\n```\n\nSee also `t.isTSNonNullExpression(node, opts)` and `t.assertTSNonNullExpression(node, opts)`.\n\nAST Node `TSNonNullExpression` shape:\n\n- `expression`: `Expression` (required)\n\nAliases: [`TypeScript`](#typescript), [`Expression`](#expression), [`LVal`](#lval), [`PatternLike`](#patternlike)\n\n------------------------------------------------------------------------\n\n#### tsNullKeyword[​](#tsnullkeyword \"Direct link to tsNullKeyword\")\n\n``` js\nt.tsNullKeyword();\n```\n\nSee also `t.isTSNullKeyword(node, opts)` and `t.assertTSNullKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsNumberKeyword[​](#tsnumberkeyword \"Direct link to tsNumberKeyword\")\n\n``` js\nt.tsNumberKeyword();\n```\n\nSee also `t.isTSNumberKeyword(node, opts)` and `t.assertTSNumberKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsObjectKeyword[​](#tsobjectkeyword \"Direct link to tsObjectKeyword\")\n\n``` js\nt.tsObjectKeyword();\n```\n\nSee also `t.isTSObjectKeyword(node, opts)` and `t.assertTSObjectKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsOptionalType[​](#tsoptionaltype \"Direct link to tsOptionalType\")\n\n``` js\nt.tsOptionalType(typeAnnotation);\n```\n\nSee also `t.isTSOptionalType(node, opts)` and `t.assertTSOptionalType(node, opts)`.\n\nAST Node `TSOptionalType` shape:\n\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsParameterProperty[​](#tsparameterproperty \"Direct link to tsParameterProperty\")\n\n``` js\nt.tsParameterProperty(parameter);\n```\n\nSee also `t.isTSParameterProperty(node, opts)` and `t.assertTSParameterProperty(node, opts)`.\n\nAST Node `TSParameterProperty` shape:\n\n- `parameter`: `Identifier | AssignmentPattern` (required)\n- `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`, excluded from builder function)\n- `decorators`: `Array<Decorator>` (default: `null`, excluded from builder function)\n- `override`: `boolean` (default: `null`, excluded from builder function)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`LVal`](#lval)\n\n------------------------------------------------------------------------\n\n#### tsParenthesizedType[​](#tsparenthesizedtype \"Direct link to tsParenthesizedType\")\n\n``` js\nt.tsParenthesizedType(typeAnnotation);\n```\n\nSee also `t.isTSParenthesizedType(node, opts)` and `t.assertTSParenthesizedType(node, opts)`.\n\nAST Node `TSParenthesizedType` shape:\n\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsPropertySignature[​](#tspropertysignature \"Direct link to tsPropertySignature\")\n\n``` js\nt.tsPropertySignature(key, typeAnnotation, initializer);\n```\n\nSee also `t.isTSPropertySignature(node, opts)` and `t.assertTSPropertySignature(node, opts)`.\n\nAST Node `TSPropertySignature` shape:\n\n- `key`: `Expression` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n- `initializer`: `Expression` (default: `null`)\n- `computed`: `boolean` (default: `false`, excluded from builder function)\n- `kind`: `\"get\" | \"set\"` (required)\n- `optional`: `boolean` (default: `null`, excluded from builder function)\n- `readonly`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`TSTypeElement`](#tstypeelement)\n\n------------------------------------------------------------------------\n\n#### tsQualifiedName[​](#tsqualifiedname \"Direct link to tsQualifiedName\")\n\n``` js\nt.tsQualifiedName(left, right);\n```\n\nSee also `t.isTSQualifiedName(node, opts)` and `t.assertTSQualifiedName(node, opts)`.\n\nAST Node `TSQualifiedName` shape:\n\n- `left`: `TSEntityName` (required)\n- `right`: `Identifier` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSEntityName`](#tsentityname)\n\n------------------------------------------------------------------------\n\n#### tsRestType[​](#tsresttype \"Direct link to tsRestType\")\n\n``` js\nt.tsRestType(typeAnnotation);\n```\n\nSee also `t.isTSRestType(node, opts)` and `t.assertTSRestType(node, opts)`.\n\nAST Node `TSRestType` shape:\n\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsSatisfiesExpression[​](#tssatisfiesexpression \"Direct link to tsSatisfiesExpression\")\n\n``` js\nt.tsSatisfiesExpression(expression, typeAnnotation);\n```\n\nHistory\n\n| Version   | Changes    |\n|-----------|------------|\n| `v7.20.0` | Introduced |\n\nSee also `t.isTSSatisfiesExpression(node, opts)` and `t.assertTSSatisfiesExpression(node, opts)`.\n\nAST Node `TSSatisfiesExpression` shape:\n\n- `expression`: `Expression` (required)\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript), [`Expression`](#expression), [`LVal`](#lval), [`PatternLike`](#patternlike)\n\n------------------------------------------------------------------------\n\n#### tsStringKeyword[​](#tsstringkeyword \"Direct link to tsStringKeyword\")\n\n``` js\nt.tsStringKeyword();\n```\n\nSee also `t.isTSStringKeyword(node, opts)` and `t.assertTSStringKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsSymbolKeyword[​](#tssymbolkeyword \"Direct link to tsSymbolKeyword\")\n\n``` js\nt.tsSymbolKeyword();\n```\n\nSee also `t.isTSSymbolKeyword(node, opts)` and `t.assertTSSymbolKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsThisType[​](#tsthistype \"Direct link to tsThisType\")\n\n``` js\nt.tsThisType();\n```\n\nSee also `t.isTSThisType(node, opts)` and `t.assertTSThisType(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsTupleType[​](#tstupletype \"Direct link to tsTupleType\")\n\n``` js\nt.tsTupleType(elementTypes);\n```\n\nSee also `t.isTSTupleType(node, opts)` and `t.assertTSTupleType(node, opts)`.\n\nAST Node `TSTupleType` shape:\n\n- `elementTypes`: `Array<TSType | TSNamedTupleMember>` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsTypeAliasDeclaration[​](#tstypealiasdeclaration \"Direct link to tsTypeAliasDeclaration\")\n\n``` js\nt.tsTypeAliasDeclaration(id, typeParameters, typeAnnotation);\n```\n\nSee also `t.isTSTypeAliasDeclaration(node, opts)` and `t.assertTSTypeAliasDeclaration(node, opts)`.\n\nAST Node `TSTypeAliasDeclaration` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n- `typeAnnotation`: `TSType` (required)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### tsTypeAnnotation[​](#tstypeannotation \"Direct link to tsTypeAnnotation\")\n\n``` js\nt.tsTypeAnnotation(typeAnnotation);\n```\n\nSee also `t.isTSTypeAnnotation(node, opts)` and `t.assertTSTypeAnnotation(node, opts)`.\n\nAST Node `TSTypeAnnotation` shape:\n\n- `typeAnnotation`: `TSType` (required)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsTypeAssertion[​](#tstypeassertion \"Direct link to tsTypeAssertion\")\n\n``` js\nt.tsTypeAssertion(typeAnnotation, expression);\n```\n\nSee also `t.isTSTypeAssertion(node, opts)` and `t.assertTSTypeAssertion(node, opts)`.\n\nAST Node `TSTypeAssertion` shape:\n\n- `typeAnnotation`: `TSType` (required)\n- `expression`: `Expression` (required)\n\nAliases: [`TypeScript`](#typescript), [`Expression`](#expression), [`LVal`](#lval), [`PatternLike`](#patternlike)\n\n------------------------------------------------------------------------\n\n#### tsTypeLiteral[​](#tstypeliteral \"Direct link to tsTypeLiteral\")\n\n``` js\nt.tsTypeLiteral(members);\n```\n\nSee also `t.isTSTypeLiteral(node, opts)` and `t.assertTSTypeLiteral(node, opts)`.\n\nAST Node `TSTypeLiteral` shape:\n\n- `members`: `Array<TSTypeElement>` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsTypeOperator[​](#tstypeoperator \"Direct link to tsTypeOperator\")\n\n``` js\nt.tsTypeOperator(typeAnnotation);\n```\n\nSee also `t.isTSTypeOperator(node, opts)` and `t.assertTSTypeOperator(node, opts)`.\n\nAST Node `TSTypeOperator` shape:\n\n- `typeAnnotation`: `TSType` (required)\n- `operator`: `string` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsTypeParameter[​](#tstypeparameter \"Direct link to tsTypeParameter\")\n\n``` js\nt.tsTypeParameter(constraint, default, name);\n```\n\nHistory\n\n| Version   | Changes          |\n|-----------|------------------|\n| `v7.21.0` | Supports `const` |\n\nSee also `t.isTSTypeParameter(node, opts)` and `t.assertTSTypeParameter(node, opts)`.\n\nAST Node `TSTypeParameter` shape:\n\n- `constraint`: `TSType` (default: `null`)\n- `default`: `TSType` (default: `null`)\n- `name`: `string` (required)\n- `const`: `boolean` (default: `null`, excluded from builder function)\n- `in`: `boolean` (default: `null`, excluded from builder function)\n- `out`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsTypeParameterDeclaration[​](#tstypeparameterdeclaration \"Direct link to tsTypeParameterDeclaration\")\n\n``` js\nt.tsTypeParameterDeclaration(params);\n```\n\nSee also `t.isTSTypeParameterDeclaration(node, opts)` and `t.assertTSTypeParameterDeclaration(node, opts)`.\n\nAST Node `TSTypeParameterDeclaration` shape:\n\n- `params`: `Array<TSTypeParameter>` (required)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsTypeParameterInstantiation[​](#tstypeparameterinstantiation \"Direct link to tsTypeParameterInstantiation\")\n\n``` js\nt.tsTypeParameterInstantiation(params);\n```\n\nSee also `t.isTSTypeParameterInstantiation(node, opts)` and `t.assertTSTypeParameterInstantiation(node, opts)`.\n\nAST Node `TSTypeParameterInstantiation` shape:\n\n- `params`: `Array<TSType>` (required)\n\nAliases: [`TypeScript`](#typescript)\n\n------------------------------------------------------------------------\n\n#### tsTypePredicate[​](#tstypepredicate \"Direct link to tsTypePredicate\")\n\n``` js\nt.tsTypePredicate(parameterName, typeAnnotation, asserts);\n```\n\nSee also `t.isTSTypePredicate(node, opts)` and `t.assertTSTypePredicate(node, opts)`.\n\nAST Node `TSTypePredicate` shape:\n\n- `parameterName`: `Identifier | TSThisType` (required)\n- `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n- `asserts`: `boolean` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsTypeQuery[​](#tstypequery \"Direct link to tsTypeQuery\")\n\n``` js\nt.tsTypeQuery(exprName, typeParameters);\n```\n\nSee also `t.isTSTypeQuery(node, opts)` and `t.assertTSTypeQuery(node, opts)`.\n\nAST Node `TSTypeQuery` shape:\n\n- `exprName`: `TSEntityName | TSImportType` (required)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsTypeReference[​](#tstypereference \"Direct link to tsTypeReference\")\n\n``` js\nt.tsTypeReference(typeName, typeParameters);\n```\n\nSee also `t.isTSTypeReference(node, opts)` and `t.assertTSTypeReference(node, opts)`.\n\nAST Node `TSTypeReference` shape:\n\n- `typeName`: `TSEntityName` (required)\n- `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsUndefinedKeyword[​](#tsundefinedkeyword \"Direct link to tsUndefinedKeyword\")\n\n``` js\nt.tsUndefinedKeyword();\n```\n\nSee also `t.isTSUndefinedKeyword(node, opts)` and `t.assertTSUndefinedKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsUnionType[​](#tsuniontype \"Direct link to tsUnionType\")\n\n``` js\nt.tsUnionType(types);\n```\n\nSee also `t.isTSUnionType(node, opts)` and `t.assertTSUnionType(node, opts)`.\n\nAST Node `TSUnionType` shape:\n\n- `types`: `Array<TSType>` (required)\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype)\n\n------------------------------------------------------------------------\n\n#### tsUnknownKeyword[​](#tsunknownkeyword \"Direct link to tsUnknownKeyword\")\n\n``` js\nt.tsUnknownKeyword();\n```\n\nSee also `t.isTSUnknownKeyword(node, opts)` and `t.assertTSUnknownKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### tsVoidKeyword[​](#tsvoidkeyword \"Direct link to tsVoidKeyword\")\n\n``` js\nt.tsVoidKeyword();\n```\n\nSee also `t.isTSVoidKeyword(node, opts)` and `t.assertTSVoidKeyword(node, opts)`.\n\nAliases: [`TypeScript`](#typescript), [`TSType`](#tstype), [`TSBaseType`](#tsbasetype)\n\n------------------------------------------------------------------------\n\n#### taggedTemplateExpression[​](#taggedtemplateexpression \"Direct link to taggedTemplateExpression\")\n\n``` js\nt.taggedTemplateExpression(tag, quasi);\n```\n\nSee also `t.isTaggedTemplateExpression(node, opts)` and `t.assertTaggedTemplateExpression(node, opts)`.\n\nAST Node `TaggedTemplateExpression` shape:\n\n- `tag`: `Expression` (required)\n- `quasi`: `TemplateLiteral` (required)\n- `typeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### templateElement[​](#templateelement \"Direct link to templateElement\")\n\n``` js\nt.templateElement(value, tail);\n```\n\nSee also `t.isTemplateElement(node, opts)` and `t.assertTemplateElement(node, opts)`.\n\nAST Node `TemplateElement` shape:\n\n- `value`: `{ raw: string, cooked?: string }` (required)\n- `tail`: `boolean` (default: `false`)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### templateLiteral[​](#templateliteral \"Direct link to templateLiteral\")\n\n``` js\nt.templateLiteral(quasis, expressions);\n```\n\nSee also `t.isTemplateLiteral(node, opts)` and `t.assertTemplateLiteral(node, opts)`.\n\nAST Node `TemplateLiteral` shape:\n\n- `quasis`: `Array<TemplateElement>` (required)\n- `expressions`: `Array<Expression | TSType>` (required)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Literal`](#literal)\n\n------------------------------------------------------------------------\n\n#### thisExpression[​](#thisexpression \"Direct link to thisExpression\")\n\n``` js\nt.thisExpression();\n```\n\nSee also `t.isThisExpression(node, opts)` and `t.assertThisExpression(node, opts)`.\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### thisTypeAnnotation[​](#thistypeannotation \"Direct link to thisTypeAnnotation\")\n\n``` js\nt.thisTypeAnnotation();\n```\n\nSee also `t.isThisTypeAnnotation(node, opts)` and `t.assertThisTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### throwStatement[​](#throwstatement \"Direct link to throwStatement\")\n\n``` js\nt.throwStatement(argument);\n```\n\nSee also `t.isThrowStatement(node, opts)` and `t.assertThrowStatement(node, opts)`.\n\nAST Node `ThrowStatement` shape:\n\n- `argument`: `Expression` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Terminatorless`](#terminatorless), [`CompletionStatement`](#completionstatement)\n\n------------------------------------------------------------------------\n\n#### topicReference[​](#topicreference \"Direct link to topicReference\")\n\n``` js\nt.topicReference();\n```\n\nSee also `t.isTopicReference(node, opts)` and `t.assertTopicReference(node, opts)`.\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### tryStatement[​](#trystatement \"Direct link to tryStatement\")\n\n``` js\nt.tryStatement(block, handler, finalizer);\n```\n\nSee also `t.isTryStatement(node, opts)` and `t.assertTryStatement(node, opts)`.\n\nAST Node `TryStatement` shape:\n\n- `block`: `BlockStatement` (required)\n- `handler`: `CatchClause` (default: `null`)\n- `finalizer`: `BlockStatement` (default: `null`)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### tupleExpression[​](#tupleexpression \"Direct link to tupleExpression\")\n\n``` js\nt.tupleExpression(elements);\n```\n\nSee also `t.isTupleExpression(node, opts)` and `t.assertTupleExpression(node, opts)`.\n\nAST Node `TupleExpression` shape:\n\n- `elements`: `Array<Expression | SpreadElement>` (default: `[]`)\n\nAliases: [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### tupleTypeAnnotation[​](#tupletypeannotation \"Direct link to tupleTypeAnnotation\")\n\n``` js\nt.tupleTypeAnnotation(types);\n```\n\nSee also `t.isTupleTypeAnnotation(node, opts)` and `t.assertTupleTypeAnnotation(node, opts)`.\n\nAST Node `TupleTypeAnnotation` shape:\n\n- `types`: `Array<FlowType>` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### typeAlias[​](#typealias \"Direct link to typeAlias\")\n\n``` js\nt.typeAlias(id, typeParameters, right);\n```\n\nSee also `t.isTypeAlias(node, opts)` and `t.assertTypeAlias(node, opts)`.\n\nAST Node `TypeAlias` shape:\n\n- `id`: `Identifier` (required)\n- `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n- `right`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowDeclaration`](#flowdeclaration), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### typeAnnotation[​](#typeannotation \"Direct link to typeAnnotation\")\n\n``` js\nt.typeAnnotation(typeAnnotation);\n```\n\nSee also `t.isTypeAnnotation(node, opts)` and `t.assertTypeAnnotation(node, opts)`.\n\nAST Node `TypeAnnotation` shape:\n\n- `typeAnnotation`: `FlowType` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### typeCastExpression[​](#typecastexpression \"Direct link to typeCastExpression\")\n\n``` js\nt.typeCastExpression(expression, typeAnnotation);\n```\n\nSee also `t.isTypeCastExpression(node, opts)` and `t.assertTypeCastExpression(node, opts)`.\n\nAST Node `TypeCastExpression` shape:\n\n- `expression`: `Expression` (required)\n- `typeAnnotation`: `TypeAnnotation` (required)\n\nAliases: [`Flow`](#flow), [`ExpressionWrapper`](#expressionwrapper), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### typeParameter[​](#typeparameter \"Direct link to typeParameter\")\n\n``` js\nt.typeParameter(bound, default, variance);\n```\n\nSee also `t.isTypeParameter(node, opts)` and `t.assertTypeParameter(node, opts)`.\n\nAST Node `TypeParameter` shape:\n\n- `bound`: `TypeAnnotation` (default: `null`)\n- `default`: `FlowType` (default: `null`)\n- `variance`: `Variance` (default: `null`)\n- `name`: `string` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### typeParameterDeclaration[​](#typeparameterdeclaration \"Direct link to typeParameterDeclaration\")\n\n``` js\nt.typeParameterDeclaration(params);\n```\n\nSee also `t.isTypeParameterDeclaration(node, opts)` and `t.assertTypeParameterDeclaration(node, opts)`.\n\nAST Node `TypeParameterDeclaration` shape:\n\n- `params`: `Array<TypeParameter>` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### typeParameterInstantiation[​](#typeparameterinstantiation \"Direct link to typeParameterInstantiation\")\n\n``` js\nt.typeParameterInstantiation(params);\n```\n\nSee also `t.isTypeParameterInstantiation(node, opts)` and `t.assertTypeParameterInstantiation(node, opts)`.\n\nAST Node `TypeParameterInstantiation` shape:\n\n- `params`: `Array<FlowType>` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### typeofTypeAnnotation[​](#typeoftypeannotation \"Direct link to typeofTypeAnnotation\")\n\n``` js\nt.typeofTypeAnnotation(argument);\n```\n\nSee also `t.isTypeofTypeAnnotation(node, opts)` and `t.assertTypeofTypeAnnotation(node, opts)`.\n\nAST Node `TypeofTypeAnnotation` shape:\n\n- `argument`: `FlowType` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### unaryExpression[​](#unaryexpression \"Direct link to unaryExpression\")\n\n``` js\nt.unaryExpression(operator, argument, prefix);\n```\n\nSee also `t.isUnaryExpression(node, opts)` and `t.assertUnaryExpression(node, opts)`.\n\nAST Node `UnaryExpression` shape:\n\n- `operator`: `\"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\"` (required)\n- `argument`: `Expression` (required)\n- `prefix`: `boolean` (default: `true`)\n\nAliases: [`Standardized`](#standardized), [`UnaryLike`](#unarylike), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### unionTypeAnnotation[​](#uniontypeannotation \"Direct link to unionTypeAnnotation\")\n\n``` js\nt.unionTypeAnnotation(types);\n```\n\nSee also `t.isUnionTypeAnnotation(node, opts)` and `t.assertUnionTypeAnnotation(node, opts)`.\n\nAST Node `UnionTypeAnnotation` shape:\n\n- `types`: `Array<FlowType>` (required)\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype)\n\n------------------------------------------------------------------------\n\n#### updateExpression[​](#updateexpression \"Direct link to updateExpression\")\n\n``` js\nt.updateExpression(operator, argument, prefix);\n```\n\nSee also `t.isUpdateExpression(node, opts)` and `t.assertUpdateExpression(node, opts)`.\n\nAST Node `UpdateExpression` shape:\n\n- `operator`: `\"++\" | \"--\"` (required)\n- `argument`: `Expression` (required)\n- `prefix`: `boolean` (default: `false`)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression)\n\n------------------------------------------------------------------------\n\n#### v8IntrinsicIdentifier[​](#v8intrinsicidentifier \"Direct link to v8IntrinsicIdentifier\")\n\n``` js\nt.v8IntrinsicIdentifier(name);\n```\n\nSee also `t.isV8IntrinsicIdentifier(node, opts)` and `t.assertV8IntrinsicIdentifier(node, opts)`.\n\nAST Node `V8IntrinsicIdentifier` shape:\n\n- `name`: `string` (required)\n\nAliases: [`Miscellaneous`](#miscellaneous)\n\n------------------------------------------------------------------------\n\n#### variableDeclaration[​](#variabledeclaration \"Direct link to variableDeclaration\")\n\n``` js\nt.variableDeclaration(kind, declarations);\n```\n\nHistory\n\n| Version   | Changes                |\n|-----------|------------------------|\n| `v7.20.0` | `kind` can be \"using\". |\n\nSee also `t.isVariableDeclaration(node, opts)` and `t.assertVariableDeclaration(node, opts)`.\n\nAST Node `VariableDeclaration` shape:\n\n- `kind`: `\"var\" | \"let\" | \"const\" | \"using\"` (required)\n- `declarations`: `Array<VariableDeclarator>` (required)\n- `declare`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`Declaration`](#declaration)\n\n------------------------------------------------------------------------\n\n#### variableDeclarator[​](#variabledeclarator \"Direct link to variableDeclarator\")\n\n``` js\nt.variableDeclarator(id, init);\n```\n\nSee also `t.isVariableDeclarator(node, opts)` and `t.assertVariableDeclarator(node, opts)`.\n\nAST Node `VariableDeclarator` shape:\n\n- `id`: `LVal` (required)\n- `init`: `Expression` (default: `null`)\n- `definite`: `boolean` (default: `null`, excluded from builder function)\n\nAliases: [`Standardized`](#standardized)\n\n------------------------------------------------------------------------\n\n#### variance[​](#variance \"Direct link to variance\")\n\n``` js\nt.variance(kind);\n```\n\nSee also `t.isVariance(node, opts)` and `t.assertVariance(node, opts)`.\n\nAST Node `Variance` shape:\n\n- `kind`: `\"minus\" | \"plus\"` (required)\n\nAliases: [`Flow`](#flow)\n\n------------------------------------------------------------------------\n\n#### voidTypeAnnotation[​](#voidtypeannotation \"Direct link to voidTypeAnnotation\")\n\n``` js\nt.voidTypeAnnotation();\n```\n\nSee also `t.isVoidTypeAnnotation(node, opts)` and `t.assertVoidTypeAnnotation(node, opts)`.\n\nAliases: [`Flow`](#flow), [`FlowType`](#flowtype), [`FlowBaseAnnotation`](#flowbaseannotation)\n\n------------------------------------------------------------------------\n\n#### whileStatement[​](#whilestatement \"Direct link to whileStatement\")\n\n``` js\nt.whileStatement(test, body);\n```\n\nSee also `t.isWhileStatement(node, opts)` and `t.assertWhileStatement(node, opts)`.\n\nAST Node `WhileStatement` shape:\n\n- `test`: `Expression` (required)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement), [`BlockParent`](#blockparent), [`Loop`](#loop), [`While`](#while), [`Scopable`](#scopable)\n\n------------------------------------------------------------------------\n\n#### withStatement[​](#withstatement \"Direct link to withStatement\")\n\n``` js\nt.withStatement(object, body);\n```\n\nSee also `t.isWithStatement(node, opts)` and `t.assertWithStatement(node, opts)`.\n\nAST Node `WithStatement` shape:\n\n- `object`: `Expression` (required)\n- `body`: `Statement` (required)\n\nAliases: [`Standardized`](#standardized), [`Statement`](#statement)\n\n------------------------------------------------------------------------\n\n#### yieldExpression[​](#yieldexpression \"Direct link to yieldExpression\")\n\n``` js\nt.yieldExpression(argument, delegate);\n```\n\nSee also `t.isYieldExpression(node, opts)` and `t.assertYieldExpression(node, opts)`.\n\nAST Node `YieldExpression` shape:\n\n- `argument`: `Expression` (default: `null`)\n- `delegate`: `boolean` (default: `false`)\n\nAliases: [`Standardized`](#standardized), [`Expression`](#expression), [`Terminatorless`](#terminatorless)\n\n------------------------------------------------------------------------\n\n### Aliases[​](#aliases \"Direct link to Aliases\")\n\n#### Accessor[​](#accessor \"Direct link to Accessor\")\n\nDeprecated. Will be removed in Babel 8.\n\n``` js\nt.isAccessor(node);\n```\n\nCovered nodes:\n\n- [`ClassAccessorProperty`](#classaccessorproperty)\n\n#### Binary[​](#binary \"Direct link to Binary\")\n\nA cover of BinaryExpression and LogicalExpression, which share the same AST shape.\n\n``` js\nt.isBinary(node);\n```\n\nCovered nodes:\n\n- [`BinaryExpression`](#binaryexpression)\n- [`LogicalExpression`](#logicalexpression)\n\n#### Block[​](#block \"Direct link to Block\")\n\nDeprecated. Will be removed in Babel 8.\n\n``` js\nt.isBlock(node);\n```\n\nCovered nodes:\n\n- [`BlockStatement`](#blockstatement)\n- [`Program`](#program)\n- [`TSModuleBlock`](#tsmoduleblock)\n\n#### BlockParent[​](#blockparent \"Direct link to BlockParent\")\n\nA cover of AST nodes that start an execution context with new [LexicalEnvironment](https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts). In other words, they define the scope of `let` and `const` declarations.\n\n``` js\nt.isBlockParent(node);\n```\n\nCovered nodes:\n\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`BlockStatement`](#blockstatement)\n- [`CatchClause`](#catchclause)\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`DoWhileStatement`](#dowhilestatement)\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`ObjectMethod`](#objectmethod)\n- [`Program`](#program)\n- [`StaticBlock`](#staticblock)\n- [`SwitchStatement`](#switchstatement)\n- [`TSModuleBlock`](#tsmoduleblock)\n- [`WhileStatement`](#whilestatement)\n\n#### Class[​](#class \"Direct link to Class\")\n\nA cover of ClassExpression and ClassDeclaration, which share the same AST shape.\n\n``` js\nt.isClass(node);\n```\n\nCovered nodes:\n\n- [`ClassDeclaration`](#classdeclaration)\n- [`ClassExpression`](#classexpression)\n\n#### CompletionStatement[​](#completionstatement \"Direct link to CompletionStatement\")\n\nA statement that indicates the [completion records](https://tc39.es/ecma262/#sec-completion-record-specification-type). In other words, they define the control flow of the program, such as when should a loop break or an action throws critical errors.\n\n``` js\nt.isCompletionStatement(node);\n```\n\nCovered nodes:\n\n- [`BreakStatement`](#breakstatement)\n- [`ContinueStatement`](#continuestatement)\n- [`ReturnStatement`](#returnstatement)\n- [`ThrowStatement`](#throwstatement)\n\n#### Conditional[​](#conditional \"Direct link to Conditional\")\n\nA cover of ConditionalExpression and IfStatement, which share the same AST shape.\n\n``` js\nt.isConditional(node);\n```\n\nCovered nodes:\n\n- [`ConditionalExpression`](#conditionalexpression)\n- [`IfStatement`](#ifstatement)\n\n#### Declaration[​](#declaration \"Direct link to Declaration\")\n\nA cover of any [Declaration](https://tc39.es/ecma262/#prod-Declaration)s.\n\n``` js\nt.isDeclaration(node);\n```\n\nCovered nodes:\n\n- [`ClassDeclaration`](#classdeclaration)\n- [`DeclareClass`](#declareclass)\n- [`DeclareExportAllDeclaration`](#declareexportalldeclaration)\n- [`DeclareExportDeclaration`](#declareexportdeclaration)\n- [`DeclareFunction`](#declarefunction)\n- [`DeclareInterface`](#declareinterface)\n- [`DeclareModule`](#declaremodule)\n- [`DeclareModuleExports`](#declaremoduleexports)\n- [`DeclareOpaqueType`](#declareopaquetype)\n- [`DeclareTypeAlias`](#declaretypealias)\n- [`DeclareVariable`](#declarevariable)\n- [`EnumDeclaration`](#enumdeclaration)\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`ImportDeclaration`](#importdeclaration)\n- [`InterfaceDeclaration`](#interfacedeclaration)\n- [`OpaqueType`](#opaquetype)\n- [`TSDeclareFunction`](#tsdeclarefunction)\n- [`TSEnumDeclaration`](#tsenumdeclaration)\n- [`TSInterfaceDeclaration`](#tsinterfacedeclaration)\n- [`TSModuleDeclaration`](#tsmoduledeclaration)\n- [`TSTypeAliasDeclaration`](#tstypealiasdeclaration)\n- [`TypeAlias`](#typealias)\n- [`VariableDeclaration`](#variabledeclaration)\n\n#### EnumBody[​](#enumbody \"Direct link to EnumBody\")\n\nA cover of Flow enum bodies.\n\n``` js\nt.isEnumBody(node);\n```\n\nCovered nodes:\n\n- [`EnumBooleanBody`](#enumbooleanbody)\n- [`EnumNumberBody`](#enumnumberbody)\n- [`EnumStringBody`](#enumstringbody)\n- [`EnumSymbolBody`](#enumsymbolbody)\n\n#### EnumMember[​](#enummember \"Direct link to EnumMember\")\n\nA cover of Flow enum members.\n\n``` js\nt.isEnumMember(node);\n```\n\nCovered nodes:\n\n- [`EnumBooleanMember`](#enumbooleanmember)\n- [`EnumDefaultedMember`](#enumdefaultedmember)\n- [`EnumNumberMember`](#enumnumbermember)\n- [`EnumStringMember`](#enumstringmember)\n\n#### ExportDeclaration[​](#exportdeclaration \"Direct link to ExportDeclaration\")\n\nA cover of any [ExportDeclaration](https://tc39.es/ecma262/#prod-ExportDeclaration)s.\n\n``` js\nt.isExportDeclaration(node);\n```\n\nCovered nodes:\n\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n\n#### Expression[​](#expression \"Direct link to Expression\")\n\nA cover of any [Expression](https://tc39.es/ecma262/#sec-ecmascript-language-expressions)s.\n\n``` js\nt.isExpression(node);\n```\n\nCovered nodes:\n\n- [`ArrayExpression`](#arrayexpression)\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`AssignmentExpression`](#assignmentexpression)\n- [`AwaitExpression`](#awaitexpression)\n- [`BigIntLiteral`](#bigintliteral)\n- [`BinaryExpression`](#binaryexpression)\n- [`BindExpression`](#bindexpression)\n- [`BooleanLiteral`](#booleanliteral)\n- [`CallExpression`](#callexpression)\n- [`ClassExpression`](#classexpression)\n- [`ConditionalExpression`](#conditionalexpression)\n- [`DecimalLiteral`](#decimalliteral)\n- [`DoExpression`](#doexpression)\n- [`FunctionExpression`](#functionexpression)\n- [`Identifier`](#identifier)\n- [`Import`](#import)\n- [`JSXElement`](#jsxelement)\n- [`JSXFragment`](#jsxfragment)\n- [`LogicalExpression`](#logicalexpression)\n- [`MemberExpression`](#memberexpression)\n- [`MetaProperty`](#metaproperty)\n- [`ModuleExpression`](#moduleexpression)\n- [`NewExpression`](#newexpression)\n- [`NullLiteral`](#nullliteral)\n- [`NumericLiteral`](#numericliteral)\n- [`ObjectExpression`](#objectexpression)\n- [`OptionalCallExpression`](#optionalcallexpression)\n- [`OptionalMemberExpression`](#optionalmemberexpression)\n- [`ParenthesizedExpression`](#parenthesizedexpression)\n- [`PipelineBareFunction`](#pipelinebarefunction)\n- [`PipelinePrimaryTopicReference`](#pipelineprimarytopicreference)\n- [`PipelineTopicExpression`](#pipelinetopicexpression)\n- [`RecordExpression`](#recordexpression)\n- [`RegExpLiteral`](#regexpliteral)\n- [`SequenceExpression`](#sequenceexpression)\n- [`StringLiteral`](#stringliteral)\n- [`Super`](#super)\n- [`TSAsExpression`](#tsasexpression)\n- [`TSInstantiationExpression`](#tsinstantiationexpression)\n- [`TSNonNullExpression`](#tsnonnullexpression)\n- [`TSSatisfiesExpression`](#tssatisfiesexpression)\n- [`TSTypeAssertion`](#tstypeassertion)\n- [`TaggedTemplateExpression`](#taggedtemplateexpression)\n- [`TemplateLiteral`](#templateliteral)\n- [`ThisExpression`](#thisexpression)\n- [`TopicReference`](#topicreference)\n- [`TupleExpression`](#tupleexpression)\n- [`TypeCastExpression`](#typecastexpression)\n- [`UnaryExpression`](#unaryexpression)\n- [`UpdateExpression`](#updateexpression)\n- [`YieldExpression`](#yieldexpression)\n\n#### ExpressionWrapper[​](#expressionwrapper \"Direct link to ExpressionWrapper\")\n\nA wrapper of expression that does not have runtime semantics.\n\n``` js\nt.isExpressionWrapper(node);\n```\n\nCovered nodes:\n\n- [`ExpressionStatement`](#expressionstatement)\n- [`ParenthesizedExpression`](#parenthesizedexpression)\n- [`TypeCastExpression`](#typecastexpression)\n\n#### Flow[​](#flow \"Direct link to Flow\")\n\nA cover of AST nodes defined for Flow.\n\n``` js\nt.isFlow(node);\n```\n\nCovered nodes:\n\n- [`AnyTypeAnnotation`](#anytypeannotation)\n- [`ArrayTypeAnnotation`](#arraytypeannotation)\n- [`BooleanLiteralTypeAnnotation`](#booleanliteraltypeannotation)\n- [`BooleanTypeAnnotation`](#booleantypeannotation)\n- [`ClassImplements`](#classimplements)\n- [`DeclareClass`](#declareclass)\n- [`DeclareExportAllDeclaration`](#declareexportalldeclaration)\n- [`DeclareExportDeclaration`](#declareexportdeclaration)\n- [`DeclareFunction`](#declarefunction)\n- [`DeclareInterface`](#declareinterface)\n- [`DeclareModule`](#declaremodule)\n- [`DeclareModuleExports`](#declaremoduleexports)\n- [`DeclareOpaqueType`](#declareopaquetype)\n- [`DeclareTypeAlias`](#declaretypealias)\n- [`DeclareVariable`](#declarevariable)\n- [`DeclaredPredicate`](#declaredpredicate)\n- [`EmptyTypeAnnotation`](#emptytypeannotation)\n- [`EnumBooleanBody`](#enumbooleanbody)\n- [`EnumBooleanMember`](#enumbooleanmember)\n- [`EnumDeclaration`](#enumdeclaration)\n- [`EnumDefaultedMember`](#enumdefaultedmember)\n- [`EnumNumberBody`](#enumnumberbody)\n- [`EnumNumberMember`](#enumnumbermember)\n- [`EnumStringBody`](#enumstringbody)\n- [`EnumStringMember`](#enumstringmember)\n- [`EnumSymbolBody`](#enumsymbolbody)\n- [`ExistsTypeAnnotation`](#existstypeannotation)\n- [`FunctionTypeAnnotation`](#functiontypeannotation)\n- [`FunctionTypeParam`](#functiontypeparam)\n- [`GenericTypeAnnotation`](#generictypeannotation)\n- [`IndexedAccessType`](#indexedaccesstype)\n- [`InferredPredicate`](#inferredpredicate)\n- [`InterfaceDeclaration`](#interfacedeclaration)\n- [`InterfaceExtends`](#interfaceextends)\n- [`InterfaceTypeAnnotation`](#interfacetypeannotation)\n- [`IntersectionTypeAnnotation`](#intersectiontypeannotation)\n- [`MixedTypeAnnotation`](#mixedtypeannotation)\n- [`NullLiteralTypeAnnotation`](#nullliteraltypeannotation)\n- [`NullableTypeAnnotation`](#nullabletypeannotation)\n- [`NumberLiteralTypeAnnotation`](#numberliteraltypeannotation)\n- [`NumberTypeAnnotation`](#numbertypeannotation)\n- [`ObjectTypeAnnotation`](#objecttypeannotation)\n- [`ObjectTypeCallProperty`](#objecttypecallproperty)\n- [`ObjectTypeIndexer`](#objecttypeindexer)\n- [`ObjectTypeInternalSlot`](#objecttypeinternalslot)\n- [`ObjectTypeProperty`](#objecttypeproperty)\n- [`ObjectTypeSpreadProperty`](#objecttypespreadproperty)\n- [`OpaqueType`](#opaquetype)\n- [`OptionalIndexedAccessType`](#optionalindexedaccesstype)\n- [`QualifiedTypeIdentifier`](#qualifiedtypeidentifier)\n- [`StringLiteralTypeAnnotation`](#stringliteraltypeannotation)\n- [`StringTypeAnnotation`](#stringtypeannotation)\n- [`SymbolTypeAnnotation`](#symboltypeannotation)\n- [`ThisTypeAnnotation`](#thistypeannotation)\n- [`TupleTypeAnnotation`](#tupletypeannotation)\n- [`TypeAlias`](#typealias)\n- [`TypeAnnotation`](#typeannotation)\n- [`TypeCastExpression`](#typecastexpression)\n- [`TypeParameter`](#typeparameter)\n- [`TypeParameterDeclaration`](#typeparameterdeclaration)\n- [`TypeParameterInstantiation`](#typeparameterinstantiation)\n- [`TypeofTypeAnnotation`](#typeoftypeannotation)\n- [`UnionTypeAnnotation`](#uniontypeannotation)\n- [`Variance`](#variance)\n- [`VoidTypeAnnotation`](#voidtypeannotation)\n\n#### FlowBaseAnnotation[​](#flowbaseannotation \"Direct link to FlowBaseAnnotation\")\n\nA cover of primary Flow type annotations.\n\n``` js\nt.isFlowBaseAnnotation(node);\n```\n\nCovered nodes:\n\n- [`AnyTypeAnnotation`](#anytypeannotation)\n- [`BooleanTypeAnnotation`](#booleantypeannotation)\n- [`EmptyTypeAnnotation`](#emptytypeannotation)\n- [`MixedTypeAnnotation`](#mixedtypeannotation)\n- [`NullLiteralTypeAnnotation`](#nullliteraltypeannotation)\n- [`NumberTypeAnnotation`](#numbertypeannotation)\n- [`StringTypeAnnotation`](#stringtypeannotation)\n- [`SymbolTypeAnnotation`](#symboltypeannotation)\n- [`ThisTypeAnnotation`](#thistypeannotation)\n- [`VoidTypeAnnotation`](#voidtypeannotation)\n\n#### FlowDeclaration[​](#flowdeclaration \"Direct link to FlowDeclaration\")\n\nA cover of Flow declarations.\n\n``` js\nt.isFlowDeclaration(node);\n```\n\nCovered nodes:\n\n- [`DeclareClass`](#declareclass)\n- [`DeclareExportAllDeclaration`](#declareexportalldeclaration)\n- [`DeclareExportDeclaration`](#declareexportdeclaration)\n- [`DeclareFunction`](#declarefunction)\n- [`DeclareInterface`](#declareinterface)\n- [`DeclareModule`](#declaremodule)\n- [`DeclareModuleExports`](#declaremoduleexports)\n- [`DeclareOpaqueType`](#declareopaquetype)\n- [`DeclareTypeAlias`](#declaretypealias)\n- [`DeclareVariable`](#declarevariable)\n- [`InterfaceDeclaration`](#interfacedeclaration)\n- [`OpaqueType`](#opaquetype)\n- [`TypeAlias`](#typealias)\n\n#### FlowPredicate[​](#flowpredicate \"Direct link to FlowPredicate\")\n\nA cover of Flow predicates.\n\n``` js\nt.isFlowPredicate(node);\n```\n\nCovered nodes:\n\n- [`DeclaredPredicate`](#declaredpredicate)\n- [`InferredPredicate`](#inferredpredicate)\n\n#### FlowType[​](#flowtype \"Direct link to FlowType\")\n\nA cover of Flow type annotations.\n\n``` js\nt.isFlowType(node);\n```\n\nCovered nodes:\n\n- [`AnyTypeAnnotation`](#anytypeannotation)\n- [`ArrayTypeAnnotation`](#arraytypeannotation)\n- [`BooleanLiteralTypeAnnotation`](#booleanliteraltypeannotation)\n- [`BooleanTypeAnnotation`](#booleantypeannotation)\n- [`EmptyTypeAnnotation`](#emptytypeannotation)\n- [`ExistsTypeAnnotation`](#existstypeannotation)\n- [`FunctionTypeAnnotation`](#functiontypeannotation)\n- [`GenericTypeAnnotation`](#generictypeannotation)\n- [`IndexedAccessType`](#indexedaccesstype)\n- [`InterfaceTypeAnnotation`](#interfacetypeannotation)\n- [`IntersectionTypeAnnotation`](#intersectiontypeannotation)\n- [`MixedTypeAnnotation`](#mixedtypeannotation)\n- [`NullLiteralTypeAnnotation`](#nullliteraltypeannotation)\n- [`NullableTypeAnnotation`](#nullabletypeannotation)\n- [`NumberLiteralTypeAnnotation`](#numberliteraltypeannotation)\n- [`NumberTypeAnnotation`](#numbertypeannotation)\n- [`ObjectTypeAnnotation`](#objecttypeannotation)\n- [`OptionalIndexedAccessType`](#optionalindexedaccesstype)\n- [`StringLiteralTypeAnnotation`](#stringliteraltypeannotation)\n- [`StringTypeAnnotation`](#stringtypeannotation)\n- [`SymbolTypeAnnotation`](#symboltypeannotation)\n- [`ThisTypeAnnotation`](#thistypeannotation)\n- [`TupleTypeAnnotation`](#tupletypeannotation)\n- [`TypeofTypeAnnotation`](#typeoftypeannotation)\n- [`UnionTypeAnnotation`](#uniontypeannotation)\n- [`VoidTypeAnnotation`](#voidtypeannotation)\n\n#### For[​](#for \"Direct link to For\")\n\nA cover of [ForStatement](https://tc39.es/ecma262/#sec-for-statement)s and [ForXStatement](#forxstatement)s.\n\n``` js\nt.isFor(node);\n```\n\nCovered nodes:\n\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n\n#### ForXStatement[​](#forxstatement \"Direct link to ForXStatement\")\n\nA cover of [ForInStatements and ForOfStatements](https://tc39.es/ecma262/#sec-for-in-and-for-of-statements).\n\n``` js\nt.isForXStatement(node);\n```\n\nCovered nodes:\n\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n\n#### Function[​](#function \"Direct link to Function\")\n\nA cover of functions and [method](#method)s, the must have `body` and `params`. Note: `Function` is different to `FunctionParent`. For example, a `StaticBlock` is a `FunctionParent` but not `Function`.\n\n``` js\nt.isFunction(node);\n```\n\nCovered nodes:\n\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`ObjectMethod`](#objectmethod)\n\n#### FunctionParent[​](#functionparent \"Direct link to FunctionParent\")\n\nA cover of AST nodes that start an execution context with new [VariableEnvironment](https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts). In other words, they define the scope of `var` declarations. FunctionParent did not include `Program` since Babel 7.\n\n``` js\nt.isFunctionParent(node);\n```\n\nCovered nodes:\n\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`ObjectMethod`](#objectmethod)\n- [`StaticBlock`](#staticblock)\n- [`TSModuleBlock`](#tsmoduleblock)\n\n#### Immutable[​](#immutable \"Direct link to Immutable\")\n\nA cover of immutable objects and JSX elements. An object is [immutable](https://tc39.es/ecma262/#immutable-prototype-exotic-object) if no other properties can be defined once created.\n\n``` js\nt.isImmutable(node);\n```\n\nCovered nodes:\n\n- [`BigIntLiteral`](#bigintliteral)\n- [`BooleanLiteral`](#booleanliteral)\n- [`DecimalLiteral`](#decimalliteral)\n- [`JSXAttribute`](#jsxattribute)\n- [`JSXClosingElement`](#jsxclosingelement)\n- [`JSXClosingFragment`](#jsxclosingfragment)\n- [`JSXElement`](#jsxelement)\n- [`JSXExpressionContainer`](#jsxexpressioncontainer)\n- [`JSXFragment`](#jsxfragment)\n- [`JSXOpeningElement`](#jsxopeningelement)\n- [`JSXOpeningFragment`](#jsxopeningfragment)\n- [`JSXSpreadChild`](#jsxspreadchild)\n- [`JSXText`](#jsxtext)\n- [`NullLiteral`](#nullliteral)\n- [`NumericLiteral`](#numericliteral)\n- [`StringLiteral`](#stringliteral)\n\n#### ImportOrExportDeclaration[​](#importorexportdeclaration \"Direct link to ImportOrExportDeclaration\")\n\nA cover of ImportDeclaration and [ExportDeclaration](#exportdeclaration)\n\n``` js\nt.isImportOrExportDeclaration(node);\n```\n\nCovered nodes:\n\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n- [`ImportDeclaration`](#importdeclaration)\n\n#### JSX[​](#jsx \"Direct link to JSX\")\n\nA cover of AST nodes defined for [JSX](https://facebook.github.io/jsx/).\n\n``` js\nt.isJSX(node);\n```\n\nCovered nodes:\n\n- [`JSXAttribute`](#jsxattribute)\n- [`JSXClosingElement`](#jsxclosingelement)\n- [`JSXClosingFragment`](#jsxclosingfragment)\n- [`JSXElement`](#jsxelement)\n- [`JSXEmptyExpression`](#jsxemptyexpression)\n- [`JSXExpressionContainer`](#jsxexpressioncontainer)\n- [`JSXFragment`](#jsxfragment)\n- [`JSXIdentifier`](#jsxidentifier)\n- [`JSXMemberExpression`](#jsxmemberexpression)\n- [`JSXNamespacedName`](#jsxnamespacedname)\n- [`JSXOpeningElement`](#jsxopeningelement)\n- [`JSXOpeningFragment`](#jsxopeningfragment)\n- [`JSXSpreadAttribute`](#jsxspreadattribute)\n- [`JSXSpreadChild`](#jsxspreadchild)\n- [`JSXText`](#jsxtext)\n\n#### LVal[​](#lval \"Direct link to LVal\")\n\nA cover of left hand side expressions used in the `left` of assignment expressions and [ForXStatement](#forxstatement)s.\n\n``` js\nt.isLVal(node);\n```\n\nCovered nodes:\n\n- [`ArrayPattern`](#arraypattern)\n- [`AssignmentPattern`](#assignmentpattern)\n- [`Identifier`](#identifier)\n- [`MemberExpression`](#memberexpression)\n- [`ObjectPattern`](#objectpattern)\n- [`RestElement`](#restelement)\n- [`TSAsExpression`](#tsasexpression)\n- [`TSNonNullExpression`](#tsnonnullexpression)\n- [`TSParameterProperty`](#tsparameterproperty)\n- [`TSSatisfiesExpression`](#tssatisfiesexpression)\n- [`TSTypeAssertion`](#tstypeassertion)\n\n#### Literal[​](#literal \"Direct link to Literal\")\n\nA cover of [Literal](https://tc39.es/ecma262/#sec-primary-expression-literals)s, [Regular Expression Literal](https://tc39.es/ecma262/#sec-primary-expression-regular-expression-literals)s and [Template Literal](https://tc39.es/ecma262/#sec-template-literals)s.\n\n``` js\nt.isLiteral(node);\n```\n\nCovered nodes:\n\n- [`BigIntLiteral`](#bigintliteral)\n- [`BooleanLiteral`](#booleanliteral)\n- [`DecimalLiteral`](#decimalliteral)\n- [`NullLiteral`](#nullliteral)\n- [`NumericLiteral`](#numericliteral)\n- [`RegExpLiteral`](#regexpliteral)\n- [`StringLiteral`](#stringliteral)\n- [`TemplateLiteral`](#templateliteral)\n\n#### Loop[​](#loop \"Direct link to Loop\")\n\nA cover of loop statements.\n\n``` js\nt.isLoop(node);\n```\n\nCovered nodes:\n\n- [`DoWhileStatement`](#dowhilestatement)\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n- [`WhileStatement`](#whilestatement)\n\n#### Method[​](#method \"Direct link to Method\")\n\nA cover of object methods and class methods.\n\n``` js\nt.isMethod(node);\n```\n\nCovered nodes:\n\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`ObjectMethod`](#objectmethod)\n\n#### Miscellaneous[​](#miscellaneous \"Direct link to Miscellaneous\")\n\nA cover of non-standard AST types that are sometimes useful for development.\n\n``` js\nt.isMiscellaneous(node);\n```\n\nCovered nodes:\n\n- [`Noop`](#noop)\n- [`Placeholder`](#placeholder)\n- [`V8IntrinsicIdentifier`](#v8intrinsicidentifier)\n\n#### ModuleDeclaration[​](#moduledeclaration \"Direct link to ModuleDeclaration\")\n\nHistory\n\n| Version   | Changes    |\n|-----------|------------|\n| `v7.21.0` | Deprecated |\n\ncaution\n\nDeprecated, use [`ImportOrExportDeclaration`](#importorexportdeclaration) instead. Check out [PR \\#15266](https://github.com/babel/babel/pull/15266#issue-1492649843) for migration notes.\n\n``` js\nt.isModuleDeclaration(node);\n```\n\nCovered nodes:\n\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n- [`ImportDeclaration`](#importdeclaration)\n\n#### ModuleSpecifier[​](#modulespecifier \"Direct link to ModuleSpecifier\")\n\nA cover of import and export specifiers. Note: It is *not* the [ModuleSpecifier](https://tc39.es/ecma262/#prod-ModuleSpecifier) defined in the spec.\n\n``` js\nt.isModuleSpecifier(node);\n```\n\nCovered nodes:\n\n- [`ExportDefaultSpecifier`](#exportdefaultspecifier)\n- [`ExportNamespaceSpecifier`](#exportnamespacespecifier)\n- [`ExportSpecifier`](#exportspecifier)\n- [`ImportDefaultSpecifier`](#importdefaultspecifier)\n- [`ImportNamespaceSpecifier`](#importnamespacespecifier)\n- [`ImportSpecifier`](#importspecifier)\n\n#### ObjectMember[​](#objectmember \"Direct link to ObjectMember\")\n\nA cover of [members](https://tc39.es/ecma262/#prod-PropertyDefinitionList) in an object literal.\n\n``` js\nt.isObjectMember(node);\n```\n\nCovered nodes:\n\n- [`ObjectMethod`](#objectmethod)\n- [`ObjectProperty`](#objectproperty)\n\n#### Pattern[​](#pattern \"Direct link to Pattern\")\n\nA cover of [BindingPattern](https://tc39.es/ecma262/#prod-BindingPattern) except Identifiers.\n\n``` js\nt.isPattern(node);\n```\n\nCovered nodes:\n\n- [`ArrayPattern`](#arraypattern)\n- [`AssignmentPattern`](#assignmentpattern)\n- [`ObjectPattern`](#objectpattern)\n\n#### PatternLike[​](#patternlike \"Direct link to PatternLike\")\n\nA cover of [BindingPattern](https://tc39.es/ecma262/#prod-BindingPattern)s.\n\n``` js\nt.isPatternLike(node);\n```\n\nCovered nodes:\n\n- [`ArrayPattern`](#arraypattern)\n- [`AssignmentPattern`](#assignmentpattern)\n- [`Identifier`](#identifier)\n- [`ObjectPattern`](#objectpattern)\n- [`RestElement`](#restelement)\n- [`TSAsExpression`](#tsasexpression)\n- [`TSNonNullExpression`](#tsnonnullexpression)\n- [`TSSatisfiesExpression`](#tssatisfiesexpression)\n- [`TSTypeAssertion`](#tstypeassertion)\n\n#### Private[​](#private \"Direct link to Private\")\n\nA cover of private class elements and private identifiers.\n\n``` js\nt.isPrivate(node);\n```\n\nCovered nodes:\n\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`ClassPrivateProperty`](#classprivateproperty)\n- [`PrivateName`](#privatename)\n\n#### Property[​](#property \"Direct link to Property\")\n\nA cover of object properties and class properties.\n\n``` js\nt.isProperty(node);\n```\n\nCovered nodes:\n\n- [`ClassAccessorProperty`](#classaccessorproperty)\n- [`ClassPrivateProperty`](#classprivateproperty)\n- [`ClassProperty`](#classproperty)\n- [`ObjectProperty`](#objectproperty)\n\n#### Pureish[​](#pureish \"Direct link to Pureish\")\n\nA cover of AST nodes which do not have side-effects. In other words, there is no observable behaviour changes if they are evaluated more than once.\n\n``` js\nt.isPureish(node);\n```\n\nCovered nodes:\n\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`BigIntLiteral`](#bigintliteral)\n- [`BooleanLiteral`](#booleanliteral)\n- [`DecimalLiteral`](#decimalliteral)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`NullLiteral`](#nullliteral)\n- [`NumericLiteral`](#numericliteral)\n- [`RegExpLiteral`](#regexpliteral)\n- [`StringLiteral`](#stringliteral)\n\n#### Scopable[​](#scopable \"Direct link to Scopable\")\n\nA cover of [FunctionParent](#functionparent) and [BlockParent](#blockparent).\n\n``` js\nt.isScopable(node);\n```\n\nCovered nodes:\n\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`BlockStatement`](#blockstatement)\n- [`CatchClause`](#catchclause)\n- [`ClassDeclaration`](#classdeclaration)\n- [`ClassExpression`](#classexpression)\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`DoWhileStatement`](#dowhilestatement)\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`ObjectMethod`](#objectmethod)\n- [`Program`](#program)\n- [`StaticBlock`](#staticblock)\n- [`SwitchStatement`](#switchstatement)\n- [`TSModuleBlock`](#tsmoduleblock)\n- [`WhileStatement`](#whilestatement)\n\n#### Standardized[​](#standardized \"Direct link to Standardized\")\n\nA cover of AST nodes which are part of an official ECMAScript specification.\n\n``` js\nt.isStandardized(node);\n```\n\nCovered nodes:\n\n- [`ArrayExpression`](#arrayexpression)\n- [`ArrayPattern`](#arraypattern)\n- [`ArrowFunctionExpression`](#arrowfunctionexpression)\n- [`AssignmentExpression`](#assignmentexpression)\n- [`AssignmentPattern`](#assignmentpattern)\n- [`AwaitExpression`](#awaitexpression)\n- [`BigIntLiteral`](#bigintliteral)\n- [`BinaryExpression`](#binaryexpression)\n- [`BlockStatement`](#blockstatement)\n- [`BooleanLiteral`](#booleanliteral)\n- [`BreakStatement`](#breakstatement)\n- [`CallExpression`](#callexpression)\n- [`CatchClause`](#catchclause)\n- [`ClassAccessorProperty`](#classaccessorproperty)\n- [`ClassBody`](#classbody)\n- [`ClassDeclaration`](#classdeclaration)\n- [`ClassExpression`](#classexpression)\n- [`ClassMethod`](#classmethod)\n- [`ClassPrivateMethod`](#classprivatemethod)\n- [`ClassPrivateProperty`](#classprivateproperty)\n- [`ClassProperty`](#classproperty)\n- [`ConditionalExpression`](#conditionalexpression)\n- [`ContinueStatement`](#continuestatement)\n- [`DebuggerStatement`](#debuggerstatement)\n- [`Directive`](#directive)\n- [`DirectiveLiteral`](#directiveliteral)\n- [`DoWhileStatement`](#dowhilestatement)\n- [`EmptyStatement`](#emptystatement)\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n- [`ExportNamespaceSpecifier`](#exportnamespacespecifier)\n- [`ExportSpecifier`](#exportspecifier)\n- [`ExpressionStatement`](#expressionstatement)\n- [`File`](#file)\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`FunctionExpression`](#functionexpression)\n- [`Identifier`](#identifier)\n- [`IfStatement`](#ifstatement)\n- [`Import`](#import)\n- [`ImportDeclaration`](#importdeclaration)\n- [`ImportDefaultSpecifier`](#importdefaultspecifier)\n- [`ImportNamespaceSpecifier`](#importnamespacespecifier)\n- [`ImportSpecifier`](#importspecifier)\n- [`InterpreterDirective`](#interpreterdirective)\n- [`LabeledStatement`](#labeledstatement)\n- [`LogicalExpression`](#logicalexpression)\n- [`MemberExpression`](#memberexpression)\n- [`MetaProperty`](#metaproperty)\n- [`NewExpression`](#newexpression)\n- [`NullLiteral`](#nullliteral)\n- [`NumericLiteral`](#numericliteral)\n- [`ObjectExpression`](#objectexpression)\n- [`ObjectMethod`](#objectmethod)\n- [`ObjectPattern`](#objectpattern)\n- [`ObjectProperty`](#objectproperty)\n- [`OptionalCallExpression`](#optionalcallexpression)\n- [`OptionalMemberExpression`](#optionalmemberexpression)\n- [`ParenthesizedExpression`](#parenthesizedexpression)\n- [`PrivateName`](#privatename)\n- [`Program`](#program)\n- [`RegExpLiteral`](#regexpliteral)\n- [`RestElement`](#restelement)\n- [`ReturnStatement`](#returnstatement)\n- [`SequenceExpression`](#sequenceexpression)\n- [`SpreadElement`](#spreadelement)\n- [`StaticBlock`](#staticblock)\n- [`StringLiteral`](#stringliteral)\n- [`Super`](#super)\n- [`SwitchCase`](#switchcase)\n- [`SwitchStatement`](#switchstatement)\n- [`TaggedTemplateExpression`](#taggedtemplateexpression)\n- [`TemplateElement`](#templateelement)\n- [`TemplateLiteral`](#templateliteral)\n- [`ThisExpression`](#thisexpression)\n- [`ThrowStatement`](#throwstatement)\n- [`TryStatement`](#trystatement)\n- [`UnaryExpression`](#unaryexpression)\n- [`UpdateExpression`](#updateexpression)\n- [`VariableDeclaration`](#variabledeclaration)\n- [`VariableDeclarator`](#variabledeclarator)\n- [`WhileStatement`](#whilestatement)\n- [`WithStatement`](#withstatement)\n- [`YieldExpression`](#yieldexpression)\n\n#### Statement[​](#statement \"Direct link to Statement\")\n\nA cover of any [Statement](https://tc39.es/ecma262/#prod-Statement)s.\n\n``` js\nt.isStatement(node);\n```\n\nCovered nodes:\n\n- [`BlockStatement`](#blockstatement)\n- [`BreakStatement`](#breakstatement)\n- [`ClassDeclaration`](#classdeclaration)\n- [`ContinueStatement`](#continuestatement)\n- [`DebuggerStatement`](#debuggerstatement)\n- [`DeclareClass`](#declareclass)\n- [`DeclareExportAllDeclaration`](#declareexportalldeclaration)\n- [`DeclareExportDeclaration`](#declareexportdeclaration)\n- [`DeclareFunction`](#declarefunction)\n- [`DeclareInterface`](#declareinterface)\n- [`DeclareModule`](#declaremodule)\n- [`DeclareModuleExports`](#declaremoduleexports)\n- [`DeclareOpaqueType`](#declareopaquetype)\n- [`DeclareTypeAlias`](#declaretypealias)\n- [`DeclareVariable`](#declarevariable)\n- [`DoWhileStatement`](#dowhilestatement)\n- [`EmptyStatement`](#emptystatement)\n- [`EnumDeclaration`](#enumdeclaration)\n- [`ExportAllDeclaration`](#exportalldeclaration)\n- [`ExportDefaultDeclaration`](#exportdefaultdeclaration)\n- [`ExportNamedDeclaration`](#exportnameddeclaration)\n- [`ExpressionStatement`](#expressionstatement)\n- [`ForInStatement`](#forinstatement)\n- [`ForOfStatement`](#forofstatement)\n- [`ForStatement`](#forstatement)\n- [`FunctionDeclaration`](#functiondeclaration)\n- [`IfStatement`](#ifstatement)\n- [`ImportDeclaration`](#importdeclaration)\n- [`InterfaceDeclaration`](#interfacedeclaration)\n- [`LabeledStatement`](#labeledstatement)\n- [`OpaqueType`](#opaquetype)\n- [`ReturnStatement`](#returnstatement)\n- [`SwitchStatement`](#switchstatement)\n- [`TSDeclareFunction`](#tsdeclarefunction)\n- [`TSEnumDeclaration`](#tsenumdeclaration)\n- [`TSExportAssignment`](#tsexportassignment)\n- [`TSImportEqualsDeclaration`](#tsimportequalsdeclaration)\n- [`TSInterfaceDeclaration`](#tsinterfacedeclaration)\n- [`TSModuleDeclaration`](#tsmoduledeclaration)\n- [`TSNamespaceExportDeclaration`](#tsnamespaceexportdeclaration)\n- [`TSTypeAliasDeclaration`](#tstypealiasdeclaration)\n- [`ThrowStatement`](#throwstatement)\n- [`TryStatement`](#trystatement)\n- [`TypeAlias`](#typealias)\n- [`VariableDeclaration`](#variabledeclaration)\n- [`WhileStatement`](#whilestatement)\n- [`WithStatement`](#withstatement)\n\n#### TSBaseType[​](#tsbasetype \"Direct link to TSBaseType\")\n\nA cover of primary TypeScript type annotations.\n\n``` js\nt.isTSBaseType(node);\n```\n\nCovered nodes:\n\n- [`TSAnyKeyword`](#tsanykeyword)\n- [`TSBigIntKeyword`](#tsbigintkeyword)\n- [`TSBooleanKeyword`](#tsbooleankeyword)\n- [`TSIntrinsicKeyword`](#tsintrinsickeyword)\n- [`TSLiteralType`](#tsliteraltype)\n- [`TSNeverKeyword`](#tsneverkeyword)\n- [`TSNullKeyword`](#tsnullkeyword)\n- [`TSNumberKeyword`](#tsnumberkeyword)\n- [`TSObjectKeyword`](#tsobjectkeyword)\n- [`TSStringKeyword`](#tsstringkeyword)\n- [`TSSymbolKeyword`](#tssymbolkeyword)\n- [`TSThisType`](#tsthistype)\n- [`TSUndefinedKeyword`](#tsundefinedkeyword)\n- [`TSUnknownKeyword`](#tsunknownkeyword)\n- [`TSVoidKeyword`](#tsvoidkeyword)\n\n#### TSEntityName[​](#tsentityname \"Direct link to TSEntityName\")\n\nA cover of ts entities.\n\n``` js\nt.isTSEntityName(node);\n```\n\nCovered nodes:\n\n- [`Identifier`](#identifier)\n- [`TSQualifiedName`](#tsqualifiedname)\n\n#### TSType[​](#tstype \"Direct link to TSType\")\n\nA cover of TypeScript type annotations.\n\n``` js\nt.isTSType(node);\n```\n\nCovered nodes:\n\n- [`TSAnyKeyword`](#tsanykeyword)\n- [`TSArrayType`](#tsarraytype)\n- [`TSBigIntKeyword`](#tsbigintkeyword)\n- [`TSBooleanKeyword`](#tsbooleankeyword)\n- [`TSConditionalType`](#tsconditionaltype)\n- [`TSConstructorType`](#tsconstructortype)\n- [`TSExpressionWithTypeArguments`](#tsexpressionwithtypearguments)\n- [`TSFunctionType`](#tsfunctiontype)\n- [`TSImportType`](#tsimporttype)\n- [`TSIndexedAccessType`](#tsindexedaccesstype)\n- [`TSInferType`](#tsinfertype)\n- [`TSIntersectionType`](#tsintersectiontype)\n- [`TSIntrinsicKeyword`](#tsintrinsickeyword)\n- [`TSLiteralType`](#tsliteraltype)\n- [`TSMappedType`](#tsmappedtype)\n- [`TSNeverKeyword`](#tsneverkeyword)\n- [`TSNullKeyword`](#tsnullkeyword)\n- [`TSNumberKeyword`](#tsnumberkeyword)\n- [`TSObjectKeyword`](#tsobjectkeyword)\n- [`TSOptionalType`](#tsoptionaltype)\n- [`TSParenthesizedType`](#tsparenthesizedtype)\n- [`TSRestType`](#tsresttype)\n- [`TSStringKeyword`](#tsstringkeyword)\n- [`TSSymbolKeyword`](#tssymbolkeyword)\n- [`TSThisType`](#tsthistype)\n- [`TSTupleType`](#tstupletype)\n- [`TSTypeLiteral`](#tstypeliteral)\n- [`TSTypeOperator`](#tstypeoperator)\n- [`TSTypePredicate`](#tstypepredicate)\n- [`TSTypeQuery`](#tstypequery)\n- [`TSTypeReference`](#tstypereference)\n- [`TSUndefinedKeyword`](#tsundefinedkeyword)\n- [`TSUnionType`](#tsuniontype)\n- [`TSUnknownKeyword`](#tsunknownkeyword)\n- [`TSVoidKeyword`](#tsvoidkeyword)\n\n#### TSTypeElement[​](#tstypeelement \"Direct link to TSTypeElement\")\n\nA cover of TypeScript type declarations.\n\n``` js\nt.isTSTypeElement(node);\n```\n\nCovered nodes:\n\n- [`TSCallSignatureDeclaration`](#tscallsignaturedeclaration)\n- [`TSConstructSignatureDeclaration`](#tsconstructsignaturedeclaration)\n- [`TSIndexSignature`](#tsindexsignature)\n- [`TSMethodSignature`](#tsmethodsignature)\n- [`TSPropertySignature`](#tspropertysignature)\n\n#### Terminatorless[​](#terminatorless \"Direct link to Terminatorless\")\n\nA cover of AST nodes whose semantic will change when a line terminator is inserted between the operator and the operand.\n\n``` js\nt.isTerminatorless(node);\n```\n\nCovered nodes:\n\n- [`AwaitExpression`](#awaitexpression)\n- [`BreakStatement`](#breakstatement)\n- [`ContinueStatement`](#continuestatement)\n- [`ReturnStatement`](#returnstatement)\n- [`ThrowStatement`](#throwstatement)\n- [`YieldExpression`](#yieldexpression)\n\n#### TypeScript[​](#typescript \"Direct link to TypeScript\")\n\nA cover of AST nodes defined for TypeScript.\n\n``` js\nt.isTypeScript(node);\n```\n\nCovered nodes:\n\n- [`TSAnyKeyword`](#tsanykeyword)\n- [`TSArrayType`](#tsarraytype)\n- [`TSAsExpression`](#tsasexpression)\n- [`TSBigIntKeyword`](#tsbigintkeyword)\n- [`TSBooleanKeyword`](#tsbooleankeyword)\n- [`TSCallSignatureDeclaration`](#tscallsignaturedeclaration)\n- [`TSConditionalType`](#tsconditionaltype)\n- [`TSConstructSignatureDeclaration`](#tsconstructsignaturedeclaration)\n- [`TSConstructorType`](#tsconstructortype)\n- [`TSDeclareFunction`](#tsdeclarefunction)\n- [`TSDeclareMethod`](#tsdeclaremethod)\n- [`TSEnumDeclaration`](#tsenumdeclaration)\n- [`TSEnumMember`](#tsenummember)\n- [`TSExportAssignment`](#tsexportassignment)\n- [`TSExpressionWithTypeArguments`](#tsexpressionwithtypearguments)\n- [`TSExternalModuleReference`](#tsexternalmodulereference)\n- [`TSFunctionType`](#tsfunctiontype)\n- [`TSImportEqualsDeclaration`](#tsimportequalsdeclaration)\n- [`TSImportType`](#tsimporttype)\n- [`TSIndexSignature`](#tsindexsignature)\n- [`TSIndexedAccessType`](#tsindexedaccesstype)\n- [`TSInferType`](#tsinfertype)\n- [`TSInstantiationExpression`](#tsinstantiationexpression)\n- [`TSInterfaceBody`](#tsinterfacebody)\n- [`TSInterfaceDeclaration`](#tsinterfacedeclaration)\n- [`TSIntersectionType`](#tsintersectiontype)\n- [`TSIntrinsicKeyword`](#tsintrinsickeyword)\n- [`TSLiteralType`](#tsliteraltype)\n- [`TSMappedType`](#tsmappedtype)\n- [`TSMethodSignature`](#tsmethodsignature)\n- [`TSModuleBlock`](#tsmoduleblock)\n- [`TSModuleDeclaration`](#tsmoduledeclaration)\n- [`TSNamedTupleMember`](#tsnamedtuplemember)\n- [`TSNamespaceExportDeclaration`](#tsnamespaceexportdeclaration)\n- [`TSNeverKeyword`](#tsneverkeyword)\n- [`TSNonNullExpression`](#tsnonnullexpression)\n- [`TSNullKeyword`](#tsnullkeyword)\n- [`TSNumberKeyword`](#tsnumberkeyword)\n- [`TSObjectKeyword`](#tsobjectkeyword)\n- [`TSOptionalType`](#tsoptionaltype)\n- [`TSParameterProperty`](#tsparameterproperty)\n- [`TSParenthesizedType`](#tsparenthesizedtype)\n- [`TSPropertySignature`](#tspropertysignature)\n- [`TSQualifiedName`](#tsqualifiedname)\n- [`TSRestType`](#tsresttype)\n- [`TSSatisfiesExpression`](#tssatisfiesexpression)\n- [`TSStringKeyword`](#tsstringkeyword)\n- [`TSSymbolKeyword`](#tssymbolkeyword)\n- [`TSThisType`](#tsthistype)\n- [`TSTupleType`](#tstupletype)\n- [`TSTypeAliasDeclaration`](#tstypealiasdeclaration)\n- [`TSTypeAnnotation`](#tstypeannotation)\n- [`TSTypeAssertion`](#tstypeassertion)\n- [`TSTypeLiteral`](#tstypeliteral)\n- [`TSTypeOperator`](#tstypeoperator)\n- [`TSTypeParameter`](#tstypeparameter)\n- [`TSTypeParameterDeclaration`](#tstypeparameterdeclaration)\n- [`TSTypeParameterInstantiation`](#tstypeparameterinstantiation)\n- [`TSTypePredicate`](#tstypepredicate)\n- [`TSTypeQuery`](#tstypequery)\n- [`TSTypeReference`](#tstypereference)\n- [`TSUndefinedKeyword`](#tsundefinedkeyword)\n- [`TSUnionType`](#tsuniontype)\n- [`TSUnknownKeyword`](#tsunknownkeyword)\n- [`TSVoidKeyword`](#tsvoidkeyword)\n\n#### UnaryLike[​](#unarylike \"Direct link to UnaryLike\")\n\nA cover of UnaryExpression and SpreadElement.\n\n``` js\nt.isUnaryLike(node);\n```\n\nCovered nodes:\n\n- [`SpreadElement`](#spreadelement)\n- [`UnaryExpression`](#unaryexpression)\n\n#### UserWhitespacable[​](#userwhitespacable \"Direct link to UserWhitespacable\")\n\nDeprecated. Will be removed in Babel 8.\n\n``` js\nt.isUserWhitespacable(node);\n```\n\nCovered nodes:\n\n- [`ObjectMethod`](#objectmethod)\n- [`ObjectProperty`](#objectproperty)\n- [`ObjectTypeCallProperty`](#objecttypecallproperty)\n- [`ObjectTypeIndexer`](#objecttypeindexer)\n- [`ObjectTypeInternalSlot`](#objecttypeinternalslot)\n- [`ObjectTypeProperty`](#objecttypeproperty)\n- [`ObjectTypeSpreadProperty`](#objecttypespreadproperty)\n\n#### While[​](#while \"Direct link to While\")\n\nA cover of DoWhileStatement and WhileStatement, which share the same AST shape.\n\n``` js\nt.isWhile(node);\n```\n\nCovered nodes:\n\n- [`DoWhileStatement`](#dowhilestatement)\n- [`WhileStatement`](#whilestatement)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/babel-types/](https://babeljs.io/docs/babel-types/)"
- name: Compiler assumptions
  id: assumptions/index
  summary: By default Babel tries to compile your code so that it matches the native behavior as closely as possible
  description: "# Compiler assumptions\n\nBy default Babel tries to compile your code so that it matches the native behavior as closely as possible. However, this sometimes means generating more output code, or slower output code, just to support some edge cases you don't care about.\n\nSince Babel 7.13.0, you can specify an `assumptions` option in your configuration to tell Babel which assumptions it can make about your code, to better optimize the compilation result. *Note*: this replaces the various `loose` options in plugins in favor of top-level options that can apply to multiple plugins ([RFC link](https://github.com/babel/rfcs/blob/master/rfcs/0003-top-level-assumptions.md)).\n\nFor example:\n\n``` json\n{\n  \"targets\": \">0.5%\",\n  \"assumptions\": {\n    \"noDocumentAll\": true,\n    \"noClassCalls\": true\n  },\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n> ⚠ This is advanced functionality. Please be careful when enabling assumptions, because they are not spec-compliant and may break your code in unexpected ways.\n\n## `arrayLikeIsIterable`[​](#arraylikeisiterable \"Direct link to arraylikeisiterable\")\n\nWhen spreading or iterating an array-like object, assume that it implements a `[Symbol.iterator]` method with the same behavior of the native `Array.prototype[Symbol.iterator]`, and thus directly iterate over its element by index.\n\nThis can be useful, for example, to iterate DOM collections in older browsers.\n\n``` js\nlet images = $(\"img\");\n\nfor (const img of images) {\n  console.log(img);\n}\n\nconst copy = [...images];\n```\n\n## `constantReexports`[​](#constantreexports \"Direct link to constantreexports\")\n\nWhen re-exporting a binding from a module, assume that it doesn't change and thus it's safe to directly export it, as if you were doing\n\n``` js\nimport { value as val } from \"dep\";\n\nexport const value = val;\n```\n\n*NOTE:* This also affects the `transform-modules-umd` and `transform-modules-amd` plugins.\n\n``` js\nexport { value } from \"dependency\";\n```\n\n## `constantSuper`[​](#constantsuper \"Direct link to constantsuper\")\n\nThe super class of a class can be changed at any time by using `Object.setPrototypeOf`, making it impossible for Babel to statically know it. When this option is enabled, Babel assumes that it's never changed and thus it is always the value that was placed in the `extends` clause in the class declaration.\n\n``` js\nclass Child extends Base {\n  method() {\n    super.method(2);\n  }\n}\n```\n\n## `enumerableModuleMeta`[​](#enumerablemodulemeta \"Direct link to enumerablemodulemeta\")\n\nWhen compiling ESM to CJS, Babel defines a `__esModule` property on the `module.exports` object. Assume that you never iterate over the keys of `module.exports` or of `require(\"your-module\")` using `for..in` or `Object.keys`, and thus it's safe to define `__esModule` as enumerable.\n\n``` js\nexport const number = 2;\n```\n\n## `ignoreFunctionLength`[​](#ignorefunctionlength \"Direct link to ignorefunctionlength\")\n\nFunctions have a `.length` property that reflect the number of parameters up to the last non-default parameter. When this option is enabled, assume that the compiled code does not rely on this `.length` property.\n\n``` js\nfunction fn(a, b = 2, c, d = 3) {\n  return a + b + c + d;\n}\n```\n\n## `ignoreToPrimitiveHint`[​](#ignoretoprimitivehint \"Direct link to ignoretoprimitivehint\")\n\nWhen using language features that might call the [`[Symbol.toPrimitive]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method of objects, assume that they don't change their behavior based on the `hint` parameter.\n\n``` js\nlet str = `a${foo}b`;\n```\n\n## `iterableIsArray`[​](#iterableisarray \"Direct link to iterableisarray\")\n\nWhen using an iterable object (in array destructuring, for-of or spreads), assume that it is an array.\n\n``` js\nconst [first, ...rest] = obj;\n\ncall(first, ...obj);\nlet arr = [first, ...obj];\n\nfor (const el of obj) {\n  console.log(el);\n}\n```\n\n## `mutableTemplateObject`[​](#mutabletemplateobject \"Direct link to mutabletemplateobject\")\n\nDon't use `Object.freeze` for the template object created for tagged template literals. This effectively means using the `taggedTemplateLiteralLoose` helper instead of `taggedTemplateLiteral`.\n\n``` js\nlet str = tag`a`;\n```\n\n## `noClassCalls`[​](#noclasscalls \"Direct link to noclasscalls\")\n\nWhen transforming classes, assume that they are always instantiate with `new` and they are never called as functions.\n\n``` js\nclass Test {\n  constructor() {\n    this.x = 2;\n  }\n}\n```\n\n## `noDocumentAll`[​](#nodocumentall \"Direct link to nodocumentall\")\n\nWhen using operators that check for `null` or `undefined`, assume that they are never used with the special value `document.all`.\n\n``` js\nlet score = points ?? 0;\nlet name = user?.name;\n```\n\n## `noIncompleteNsImportDetection`[​](#noincompletensimportdetection \"Direct link to noincompletensimportdetection\")\n\nAssume that no own property of a module export object is observed before initialization. For example, when trying to access `ns.foo`, it will return `undefined` both with this assumption turned on or off. The difference is that `Object.prototype.hasOwnProperty.call(ns, \"foo\")` would return `false` when `noIncompleteNsImportDetection: true`.\n\n``` js\nexport var foo;\n```\n\n## `noNewArrows`[​](#nonewarrows \"Direct link to nonewarrows\")\n\nAssume that the code never tries to instantiate arrow functions using `new`, which is disallowed according to the specification.\n\n*NOTE:* This assumption defaults to `true`. It will default to `false` starting from Babel 8.\n\n``` js\nlet getSum = (a, b) => {\n  return { sum: a + b }\n};\n```\n\n## `objectRestNoSymbols`[​](#objectrestnosymbols \"Direct link to objectrestnosymbols\")\n\nWhen using rest patterns in object destructuring, assume that destructured objects don't have symbol keys or that it's not a problem if they are not copied.\n\n``` js\nlet { name, ...attrs } = obj;\n```\n\n## `privateFieldsAsProperties`[​](#privatefieldsasproperties \"Direct link to privatefieldsasproperties\")\n\nAssume that \"soft privacy\" is enough for private fields, and thus they can be stored as public non-enumerable properties with an unique name (rather than using an external `WeakMap`). This makes debugging compiled private fields easier.\n\n``` js\nclass Foo {\n  #method() {}\n\n  #field = 2;\n\n  run() {\n    this.#method();\n    this.#field++;\n  }\n}\n```\n\n> ⚠️ When using inline Babel helpers, generated string keys are unique per-file and not globally. This could cause conflicts when extending classes from a different fields with private fields with the same name.\n\n## `privateFieldsAsSymbols`[​](#privatefieldsassymbols \"Direct link to privatefieldsassymbols\")\n\nHistory\n\n| Version | Changes                                   |\n|---------|-------------------------------------------|\n| v7.21.0 | Added `privateFieldsAsSymbols` assumption |\n\nAssume that \"soft privacy\" is enough for private fields, and thus they can be stored as public properties with a symbol key (rather than using an external `WeakMap`). This makes debugging compiled private fields easier.\n\n``` text\nclass Foo {\n  #method() {}\n\n  #field = 2;\n\n  run() {\n    this.#method();\n    this.#field++;\n  }\n}\n```\n\n## `pureGetters`[​](#puregetters \"Direct link to puregetters\")\n\nAssume that getters, if present, don't have side-effects and can be accessed multiple times.\n\n``` js\nlet a = obj;\n\na.b?.();\n```\n\n## `setClassMethods`[​](#setclassmethods \"Direct link to setclassmethods\")\n\nWhen declaring classes, assume that methods don't shadow getters on the superclass and that the program doesn't depend on methods being non-enumerable. Thus, it's safe to assign methods rather than using `Object.defineProperty`.\n\n``` js\nclass Foo extends Bar {\n  method() {}\n\n  static check() {}\n}\n```\n\n## `setComputedProperties`[​](#setcomputedproperties \"Direct link to setcomputedproperties\")\n\nWhen using computed object properties, assume that the object doesn't contain properties that overwrite setter defined in the same object, and thus it's safe to assign them rather than defining them using `Object.defineProperty`.\n\n``` js\nlet obj = {\n  set name(value) {},\n  [key]: val\n}\n```\n\n## `setPublicClassFields`[​](#setpublicclassfields \"Direct link to setpublicclassfields\")\n\nWhen using public class fields, assume that they don't shadow any getter in the current class, in its subclasses or in its superclass. Thus, it's safe to assign them rather than using `Object.defineProperty`.\n\n``` js\nclass Test {\n  field = 2;\n\n  static staticField = 3;\n}\n```\n\n## `setSpreadProperties`[​](#setspreadproperties \"Direct link to setspreadproperties\")\n\nWhen using object spread, assume that spreaded properties don't trigger getters on the target object and thus it's safe to assign them rather than defining them using `Object.defineProperty`.\n\n``` js\nconst result = {\n  set name(value) {},\n  ...obj,\n};\n```\n\n## `skipForOfIteratorClosing`[​](#skipforofiteratorclosing \"Direct link to skipforofiteratorclosing\")\n\nWhen using `for-of` with an iterator, it should always be closed with `.return()` and with `.throw()` in case of an error. When this option is called Babel assumes that those methods are not defined or empty, and it avoids calling them.\n\n``` js\nfor (const val of iterable) {\n  console.log(val);\n}\n```\n\n## `superIsCallableConstructor`[​](#superiscallableconstructor \"Direct link to superiscallableconstructor\")\n\nWhen extending classes, assume that the super class is callable. This means that it won't be possible to extend native classes or built-ins, but only compiled classes or ES5 `function` constructors.\n\n``` js\nclass Child extends Parent {\n  constructor() {\n    super(42);\n  }\n}\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/assumptions/](https://babeljs.io/docs/assumptions/)"
- name: Config Files
  id: config-files/index
  summary: Babel has two parallel config file formats, which can be used together, or independently
  description: "# Config Files\n\n## Configuration File Types[​](#configuration-file-types \"Direct link to Configuration File Types\")\n\nBabel has two parallel config file formats, which can be used together, or independently.\n\nHistory\n\n| Version   | Changes                                                                          |\n|-----------|----------------------------------------------------------------------------------|\n| `v7.21.0` | Support `.babelrc.cts` and `babel.config.cts` (Experimental)                     |\n| `v7.8.0`  | Support `.babelrc.mjs` and `babel.config.mjs`                                    |\n| `v7.7.0`  | Support `.babelrc.json`, `.babelrc.cjs`, `babel.config.json`, `babel.config.cjs` |\n\n- Project-wide configuration\n  - `babel.config.*` files, with the following extensions: `.json`, `.js`, `.cjs`, `.mjs`, `.cts`.\n- File-relative configuration\n  - `.babelrc.*` files, with the following extensions: `.json`, `.js`, `.cjs`, `.mjs`, `.cts`.\n  - `.babelrc` file, with no extension.\n  - `package.json` files, with a `\"babel\"` key.\n\n## Project-wide configuration[​](#project-wide-configuration \"Direct link to Project-wide configuration\")\n\nNew in Babel 7.x, Babel has a concept of a [\"root\"](../options/index#root) directory, which defaults to the current working directory. For project-wide configuration, Babel will automatically search for a `babel.config.json` file, or an equivalent one using the [supported extensions](#supported-file-extensions), in this root directory. Alternatively, users can use an explicit [\"configFile\"](../options/index#configfile) value to override the default config file search behavior.\n\nBecause project-wide config files are separated from the physical location of the config file, they can be ideal for configuration that must apply broadly, even allowing plugins and presets to easily apply to files in `node_modules` or in symlinked packages, which were traditionally quite painful to configure in Babel 6.x.\n\nThe primary downside of this project-wide config is that, because it relies on the working directory, it can be more painful to use in monorepos if the working directory is not the monorepo root. See the [monorepo](#monorepos) documentation for examples of how to use config files in that context.\n\nProject-wide configs can also be disabled by setting [\"configFile\"](../options/index#configfile) to `false`.\n\n## File-relative configuration[​](#file-relative-configuration \"Direct link to File-relative configuration\")\n\nBabel loads `.babelrc.json` files, or an equivalent one using the [supported extensions](#supported-file-extensions), by searching up the directory structure starting from the [\"filename\"](../options/index#filename) being compiled (limited by the caveats below). This can be powerful because it allows you to create independent configurations for subsections of a package. File-relative configurations are also [merged](../options/index#merging) over top of project-wide config values, making them potentially useful for specific overrides, though that can also be accomplished through [\"overrides\"](../options/index#overrides).\n\nThere are a few edge cases to consider when using a file-relative config:\n\n- Searching will stop once a directory containing a `package.json` is found, so a relative config only applies within a single package.\n- The [\"filename\"](../options/index#filename) being compiled must be inside of [\"babelrcRoots\"](../options/index#babelrcroots) packages, or else searching will be skipped entirely.\n\nThese caveats mean that:\n\n- `.babelrc.json` files *only* apply to files within their own package\n- `.babelrc.json` files in packages that aren't Babel's 'root' are ignored unless you opt in with [\"babelrcRoots\"](../options/index#babelrcroots).\n\nSee the [monorepo](#monorepos) documentation for more discussion on how to configure monorepos that have many packages. File-relative configs can also be disabled by setting [\"babelrc\"](../options/index#babelrc) to `false`.\n\n### 6.x vs 7.x `.babelrc` loading[​](#6x-vs-7x-babelrc-loading \"Direct link to 6x-vs-7x-babelrc-loading\")\n\nUsers coming from Babel 6.x will likely trip up on these two edge cases, which are new in Babel 7.x. These two restrictions were added to address common footguns in Babel 6.x:\n\n- `.babelrc` files applied to `node_modules` dependencies, often unexpectedly.\n- `.babelrc` files *failed* to apply to symlinked `node_modules` when people expected them to behave like normal dependencies.\n- `.babelrc` files *in* `node_modules` dependencies would be detected, even though the plugins and presets inside they were generally not installed, and may not even be valid in the version of Babel compiling the file.\n\nThese cases will *primarily* cause issues for users with a monorepo structure, because if you have\n\n``` text\n.babelrc\npackages/\n  mod1/\n    package.json\n    src/index.js\n  mod2/\n    package.json\n    src/index.js\n```\n\nthe config will now be entirely ignored, because it is across a package boundary.\n\nOne alternative would be to create a `.babelrc` in each sub-package that uses [\"extends\"](../options/index#extends) as\n\n``` json\n{ \"extends\": \"../../.babelrc\" }\n```\n\nUnfortunately, this approach can be a bit repetitive, and depending on how Babel is being used, could require setting [\"babelrcRoots\"](../options/index#babelrcroots).\n\nGiven that, it may be more desirable to rename the `.babelrc` to be a [project-wide \"babel.config.json\"](#project-wide-configuration). As mentioned in the project-wide section above, this may then require explicitly setting [\"configFile\"](../options/index#configfile) since Babel will not find the config file if the working directory isn't correct.\n\n## Supported file extensions[​](#supported-file-extensions \"Direct link to Supported file extensions\")\n\nBabel can be configured using any file extension natively supported by Node.js, as mentioned in [Configuration File Types](#configuration-file-types) section:\n\n- `babel.config.json` and `.babelrc.json` are parsed as JSON5 and should contain an object matching the [options](../options/index) format that Babel accepts. They have been supported since `v7.7.0`.\n\n  We recommend using this file type wherever possible: JS config files are handy if you have complex configuration that is conditional or otherwise computed at build time. However, the downside is that JS configs are less statically analyzable, and therefore have negative effects on cacheability, linting, IDE autocomplete, etc. Since `babel.config.json` and `.babelrc.json` are static JSON files, it allows other tools that use Babel such as bundlers to cache the results of Babel safely, which can be a huge build performance win.\n\n- `babel.config.cjs` and `.babelrc.cjs` allow you to define your configuration as CommonJS, using `module.exports`. They have been supported since `v7.7.0`.\n\n- `babel.config.mjs` and `.babelrc.mjs` use native ECMAScript modules. They are supported by Node.js 13.2+ (or older versions via the `--experimental-modules` flag). Please remember that native ECMAScript modules are asynchronous (that's why `import()` always returns a promise!): for this reason, `.mjs` config files will throw when calling Babel synchronously. They have been supported since `v7.8.0`.\n\n- `babel.config.js` and `.babelrc.js` behave like the `.mjs` equivalents when your `package.json` file contains the [`\"type\": \"module\"`](https://nodejs.org/api/esm.html#esm_code_package_json_code_code_type_code_field) option, otherwise they are exactly the same as the `.cjs` files.\n\n- `babel.config.cts` and `.babelrc.cts` allow you to define your configuration as Typescript + CommonJS. You must either install `@babel/preset-typescript`, or run Babel using `ts-node`.\n\n  > 🚧 This functionality is experimental. It's not possible yet to use `babel.config.ts` and `babel.config.mts` files, pending stabilization of the Node.js ESM loader API.\n\nJavaScript configuration files can either export an object, or a function that when called will return the generated configuration. Function-returning configs are given a few special powers because they can access an API exposed by Babel itself. See [Config Function API](#config-function-api) for more information.\n\n> For compatibility reasons, `.babelrc` is an alias for `.babelrc.json`.\n\n## Monorepos[​](#monorepos \"Direct link to Monorepos\")\n\nMonorepo-structured repositories usually contain many packages, which means that they frequently run into the caveats mentioned in [file-relative configuration](#file-relative-configuration) and config file loading in general. This section is aimed at helping users understand how to approach monorepo configuration.\n\nWith monorepo setups, the core thing to understand is that Babel treats your working directory as its logical [\"root\"](../options/index#root), which causes problems if you want to run Babel tools within a specific sub-package without having Babel apply to the repo as a whole.\n\nSeparately, it is also important to decide if you want to use [`.babelrc.json`](#file-relative-configuration) files or just a central [`babel.config.json`](#project-wide-configuration). [`.babelrc.json`](#file-relative-configuration) files are not required for subfolder-specific configuration like they were in Babel 6, so often they are not needed in Babel 7, in favor of [`babel.config.json`](#project-wide-configuration).\n\n### Root `babel.config.json` file[​](#root-babelconfigjson-file \"Direct link to root-babelconfigjson-file\")\n\nThe first step in any monorepo structure should be to create a [`babel.config.json`](#project-wide-configuration) file in repository root. This establishes Babel's core concept of the base directory of your repository. Even if you want to use [`.babelrc.json`](#file-relative-configuration) files to configure each separate package, it is important to have as a place for repo-level options.\n\nYou can often place all of your repo configuration in the root [`babel.config.json`](#project-wide-configuration). With [\"overrides\"](../options/index#overrides), you can easily specify configuration that only applies to certain subfolders of your repository, which can often be easier to follow than creating many `.babelrc.json` files across the repo.\n\nThe first issue you'll likely run into is that by default, Babel expects to load [`babel.config.json`](#project-wide-configuration) files from the directory set as its [\"root\"](../options/index#root), which means that if you create a [`babel.config.json`](#project-wide-configuration), but run Babel inside an individual package, e.g.\n\n``` shell\ncd packages/some-package;\nbabel src -d dist\n```\n\nthe [\"root\"](../options/index#root) Babel is using in that context is *not* your monorepo root, and it won't be able to find the [`babel.config.json`](#project-wide-configuration) file.\n\nIf all of your build scripts run relative to your repository root, things should already work, but if you are running your Babel compilation process from within a subpackage, you need to tell Babel where to look for the config. There are a few ways to do that, but the recommended way is the [\"rootMode\"](../options/index#rootmode) option with `\"upward\"`, which will make Babel search from the working directory upward looking for your [`babel.config.json`](#project-wide-configuration) file, and will use its location as the [\"root\"](../options/index#root) value.\n\nOne helpful way to test if your config is being detected is to place a `console.log()` call inside of it if it is a [`babel.config.json`](#project-wide-configuration) JavaScript file: the log will execute the first time Babel loads it.\n\nHow you set this value varies by project, but here are a few examples:\n\n#### CLI[​](#cli \"Direct link to CLI\")\n\n``` shell\nbabel --root-mode upward src -d lib\n```\n\n#### @babel/register[​](#babelregister \"Direct link to @babel/register\")\n\n``` js\nrequire(\"@babel/register\")({\n  rootMode: \"upward\",\n});\n```\n\n#### Webpack[​](#webpack \"Direct link to Webpack\")\n\n``` js\nmodule: {\n  rules: [\n    {\n      loader: \"babel-loader\",\n      options: {\n        rootMode: \"upward\",\n      },\n    },\n  ];\n}\n```\n\n#### Jest[​](#jest \"Direct link to Jest\")\n\nJest is often installed at the root of the monorepo and may not require configuration, but if it is installed per-package it can unfortunately be more complex to configure.\n\nThe main part is creating a custom jest transformer file that wraps `babel-jest`'s default behavior in order to set the option, e.g.\n\n``` js\nmodule.exports = require(\"babel-jest\").default.createTransformer({\n  rootMode: \"upward\",\n});\n```\n\nand with that saved somewhere, you'd then use that file in the place of `babel-jest` in your Jest options via the [transform option](https://jestjs.io/docs/en/configuration#transform-object-string-string):\n\n``` json\n\"transform\": {\n  \"^.+\\\\.jsx?$\": \"./path/to/wrapper.js\"\n},\n```\n\nso all JS files will be processed with your version of `babel-jest` with the option enabled.\n\n> NOTE: When using `babel-jest` \\< 27, you must omit the `.default` part: `require(\"babel-jest\").createTransformer({ ...`.\n\n#### Others[​](#others \"Direct link to Others\")\n\nThere are tons of tools, but at the core of it is that they need the `rootMode` option enabled if the working directory is not already the monorepo root.\n\n### Subpackage `.babelrc.json` files[​](#subpackage-babelrcjson-files \"Direct link to subpackage-babelrcjson-files\")\n\nSimilar to the way [`babel.config.json`](#project-wide-configuration) files are required to be in the [\"root\"](../options/index#root), [`.babelrc.json`](#file-relative-configuration) files must be in the root *package*, by default. This means that, the same way the working directory affects [`babel.config.json`](#project-wide-configuration) loading, it also affects [`.babelrc.json`](#file-relative-configuration) loading.\n\nAssuming you've already gotten your [`babel.config.json`](#project-wide-configuration) file loaded properly as discussed above, Babel will only process [`.babelrc.json`](#file-relative-configuration) files inside that root package (and not subpackages), so given for instance\n\n``` text\npackage.json\nbabel.config.js\npackages/\n  mod/\n    package.json\n    .babelrc.json\n    index.js\n```\n\ncompiling the `packages/mod/index.js` file will not load `packages/mod/.babelrc.json` because this [`.babelrc.json`](#file-relative-configuration) is within a sub-package, not the root package.\n\nTo enable processing of that [`.babelrc.json`](#file-relative-configuration), you will want to use the [\"babelrcRoots\"](../options/index#babelrcroots) option from inside your [`babel.config.json`](#project-wide-configuration) file to do\n\n``` js\nbabelrcRoots: [\n  \".\",\n  \"packages/*\",\n],\n```\n\nso that Babel will consider all `packages/*` packages as allowed to load [`.babelrc.json`](#file-relative-configuration) files, along with the original repo root.\n\n## Config Function API[​](#config-function-api \"Direct link to Config Function API\")\n\nJS config files may export a function that will be passed config function API:\n\n``` js\nmodule.exports = function(api) {\n  return {};\n};\n```\n\nThe `api` object exposes everything Babel itself exposes from its index module, along with config-file specific APIs:\n\n### `api.version`[​](#apiversion \"Direct link to apiversion\")\n\nType: `string`  \n\nThe version string for the Babel version that is loading the config file.\n\n### `api.cache`[​](#apicache \"Direct link to apicache\")\n\nJS configs are great because they can compute a config on the fly, but the downside there is that it makes caching harder. Babel wants to avoid re-executing the config function every time a file is compiled, because then it would also need to re-execute any plugin and preset functions referenced in that config.\n\nTo avoid this, Babel expects users of config functions to tell it how to manage caching within a config file.\n\n- `api.cache.forever()` - Permacache the computed config and never call the function again.\n- `api.cache.never()` - Do not cache this config, and re-execute the function every time.\n- `api.cache.using(() => process.env.NODE_ENV)` - Cache based on the value of `NODE_ENV`. Any time the `using` callback returns a value other than the one that was expected, the overall config function will be called again and a new entry will be added to the cache.\n- `api.cache.invalidate(() => process.env.NODE_ENV)` - Cache based on the value of `NODE_ENV`. Any time the `using` callback returns a value other than the one that was expected, the overall config function will be called again and all entries in the cache will be replaced with the result.\n- `api.cache(true)` - Same as `api.cache.forever()`\n- `api.cache(false)` - Same as `api.cache.never()`\n\nSince the actual callback result is used to check if the cache entry is valid, it is recommended that:\n\n- Callbacks should be small and side-effect free.\n- Callbacks should return values with the smallest range possible. For example, the `.using(() => process.env.NODE_ENV)` usage above is not ideal because it would create an unknown number of cache entries depending on how many values of `NODE_ENV` are detected. It would be safer to do `.using(() => process.env.NODE_ENV === \"development\")` because then the cache entry can only ever be `true` or `false`.\n\n### `api.env(...)`[​](#apienv \"Direct link to apienv\")\n\nSince `NODE_ENV` is a fairly common way to toggle behavior, Babel also includes an API function meant specifically for that. This API is used as a quick way to check the [\"envName\"](../options/index#envname) that Babel was loaded with, which takes `NODE_ENV` into account if no other overriding environment is set.\n\nIt has a few different forms:\n\n- `api.env(\"production\")` returns `true` if `envName === \"production\"`.\n- `api.env([\"development\", \"test\"])` returns `true` if `[\"development\", \"test\"].includes(envName)`.\n- `api.env()` returns the current `envName` string.\n- `api.env(envName => envName.startsWith(\"test-\"))` returns `true` if the env starts with \"test-\".\n\n> **Note:** This function internally makes use of [`api.cache`](#apicache) mentioned above to ensure that Babel is aware that this build depends on a specific `envName`. You should not use it alongside with `api.cache.forever()` or `api.cache.never()`.\n\n### `api.caller(cb)`[​](#apicallercb \"Direct link to apicallercb\")\n\nThis API is used as a way to access the `caller` data that has been passed to Babel. Since many instances of Babel may be running in the same process with different `caller` values, this API is designed to automatically configure `api.cache`, the same way `api.env()` does.\n\nThe `caller` value is available as the first parameter of the callback function. It is best used with something like\n\n``` js\nfunction isBabelRegister(caller) {\n  return !!(caller && caller.name === \"@babel/register\");\n}\n\nmodule.exports = function(api) {\n  const isRegister = api.caller(isBabelRegister);\n\n  return {\n    // ...\n  };\n};\n```\n\nto toggle configuration behavior based on a specific environment.\n\n### `api.assertVersion(range)`[​](#apiassertversionrange \"Direct link to apiassertversionrange\")\n\nWhile `api.version` can be useful in general, it's sometimes nice to just declare your version. This API exposes a simple way to do that with:\n\n``` js\nmodule.exports = function(api) {\n  api.assertVersion(\"^7.2\");\n\n  return {\n    // ...\n  };\n};\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/config-files/](https://babeljs.io/docs/config-files/)"
- name: Options
  id: options/index
  summary: Options can be passed to Babel in a variety of ways
  description: "# Options\n\n- [Primary options](#primary-options)\n- [Config Loading options](#config-loading-options)\n- [Plugin and Preset configuration](#plugin-and-preset-options)\n- [Config Merging options](#config-merging-options)\n- [Source Map options](#source-map-options)\n- [Misc options](#misc-options)\n- [Code Generator options](#code-generator-options)\n- [AMD / UMD / SystemJS options](#amd--umd--systemjs-module-options)\n- [Option concepts](#options-concepts)\n\nOptions can be passed to Babel in a variety of ways. When passed directly to Babel, you can just pass the options object. When Babel is used via a wrapper, it may also be necessary, or at least more useful, to pass the options via [configuration files](../config-files/index).\n\nIf passing options via `@babel/cli` you'll need to `kebab-case` the names. i.e.\n\n``` text\nnpx babel --root-mode upward file.js # equivalent of passing the rootMode config option\n```\n\n## Primary options[​](#primary-options \"Direct link to Primary options\")\n\nThese options are only allowed as part of Babel's programmatic options, so they are primarily for use by tools that wrap around Babel, or people calling `babel.transform` directly. Users of Babel's integrations, like `babel-loader` or [`@babel/register`](../babel-core/index#options) are unlikely to use these.\n\n### `cwd`[​](#cwd \"Direct link to cwd\")\n\nType: `string`  \nDefault: `process.cwd()`  \n\nThe working directory that all paths in the programmatic options will be resolved relative to.\n\n### `caller`[​](#caller \"Direct link to caller\")\n\nType: An object with the shape of\n\n``` flow\ninterface CallerData {\n  name: string;\n  supportsStaticESM?: boolean;\n  supportsDynamicImport?: boolean;\n  supportsTopLevelAwait?: boolean;\n  supportsExportNamespaceFrom?: boolean;\n}\n```\n\nHistory\n\n| Version | Changes                           |\n|---------|-----------------------------------|\n| v7.11.0 | Add `supportsExportNamespaceFrom` |\n| v7.7.0  | Add `supportsTopLevelAwait`       |\n| v7.5.0  | Add `supportsDynamicImport`       |\n\nUtilities may pass a `caller` object to identify themselves to Babel and pass capability-related flags for use by configs, presets and plugins. For example\n\n``` js\nbabel.transformFileSync(\"example.js\", {\n  caller: {\n    name: \"my-custom-tool\",\n    supportsStaticESM: true,\n  },\n});\n```\n\nwould allow plugins and presets to decide that, since ES modules are supported, they will skip compilation of ES modules into CommonJS modules.\n\n### `filename`[​](#filename \"Direct link to filename\")\n\nType: `string`  \n\nThe filename associated with the code currently being compiled, if there is one. The filename is optional, but not all of Babel's functionality is available when the filename is unknown, because a subset of options rely on the filename for their functionality.\n\nThe three primary cases users could run into are:\n\n- The filename is exposed to plugins. Some plugins may require the presence of the filename.\n- Options like [`\"test\"`](#test), [`\"exclude\"`](#exclude), and [`\"ignore\"`](#ignore) require the filename for string/RegExp matching.\n- `.babelrc.json` or `.babelrc` files are loaded relative to the file being compiled. If this option is omitted, Babel will behave as if `babelrc: false` has been set.\n\n### `filenameRelative`[​](#filenamerelative \"Direct link to filenamerelative\")\n\nType: `string`  \nDefault: `path.relative(opts.cwd, opts.filename)` (if [`\"filename\"`](#filename) was passed)  \n\nUsed as the default value for Babel's `sourceFileName` option, and used as part of generation of filenames for the AMD / UMD / SystemJS module transforms.\n\n### `code`[​](#code \"Direct link to code\")\n\nType: `boolean`  \nDefault: `true`  \n\nBabel's default return value includes `code` and `map` properties with the resulting generated code. In some contexts where multiple calls to Babel are being made, it can be helpful to disable code generation and instead use `ast: true` to get the AST directly in order to avoid doing unnecessary work.\n\n### `ast`[​](#ast \"Direct link to ast\")\n\nType: `boolean`  \nDefault: `false`  \n\nBabel's default is to generate a string and a sourcemap, but in some contexts it can be useful to get the AST itself. The primary use case for this would be a chain of multiple transform passes, along the lines of\n\n``` js\nconst filename = \"example.js\";\nconst source = fs.readFileSync(filename, \"utf8\");\n\n// Load and compile file normally, but skip code generation.\nconst { ast } = babel.transformSync(source, {\n  filename,\n  ast: true,\n  code: false,\n});\n\n// Minify the file in a second pass and generate the output code here.\nconst { code, map } = babel.transformFromAstSync(ast, source, {\n  filename,\n  presets: [\"minify\"],\n  babelrc: false,\n  configFile: false,\n});\n```\n\nNote: This option is not on by default because the majority of users won't need it and because we'd like to eventually add a caching layer to Babel. Having to cache the AST structure will take significantly more space.\n\n### `cloneInputAst`[​](#cloneinputast \"Direct link to cloneinputast\")\n\nType: `boolean`  \nDefault: `true`  \nAdded in `v7.11.0`\n\nBy default `babel.transformFromAst` will clone the input AST to avoid mutations. Specifying `cloneInputAst: false` can improve parsing performance if the input AST is not used elsewhere.\n\n## Config Loading options[​](#config-loading-options \"Direct link to Config Loading options\")\n\nLoading configuration can get a little complex as environments can have several types of configuration files, and those configuration files can have various nested configuration objects that apply depending on the configuration.\n\n### `root`[​](#root \"Direct link to root\")\n\nType: `string`  \nDefault: `opts.cwd`  \nPlacement: Only allowed in Babel's programmatic options  \n\nThe initial path that will be processed based on the [`\"rootMode\"`](#rootmode) to determine the conceptual root folder for the current Babel project. This is used in two primary cases:\n\n- The base directory when checking for the default [`\"configFile\"`](#configfile) value\n- The default value for [`\"babelrcRoots\"`](#babelrcroots).\n\n### `rootMode`[​](#rootmode \"Direct link to rootmode\")\n\nType: `\"root\" | \"upward\" | \"upward-optional\"`  \nDefault: `\"root\"`  \nPlacement: Only allowed in Babel's programmatic options  \nAdded in: `v7.1.0`\n\nThis option, combined with the [`\"root\"`](#root) value, defines how Babel chooses its project root. The different modes define different ways that Babel can process the [`\"root\"`](#root) value to get the final project root.\n\nNote: `babel.config.json` is supported from Babel 7.8.0. In older Babel 7 versions, only `babel.config.js` is supported.\n\n- `\"root\"` - Passes the [`\"root\"`](#root) value through as unchanged.\n- `\"upward\"` - Walks upward from the [`\"root\"`](#root) directory, looking for a directory containing a [`babel.config.json`](../config-files/index#project-wide-configuration) file, and throws an error if a [`babel.config.json`](../config-files/index#project-wide-configuration) is not found.\n- `\"upward-optional\"` - Walk upward from the [`\"root\"`](#root) directory, looking for a directory containing a [`babel.config.json`](../config-files/index#project-wide-configuration) file, and falls back to [`\"root\"`](#root) if a [`babel.config.json`](../config-files/index#project-wide-configuration) is not found.\n\n`\"root\"` is the default mode because it avoids the risk that Babel will accidentally load a `babel.config.json` that is entirely outside of the current project folder. If you use `\"upward-optional\"`, be aware that it will walk up the directory structure all the way to the filesystem root, and it is always possible that someone will have a forgotten `babel.config.json` in their home directory, which could cause unexpected errors in your builds.\n\nUsers with monorepo project structures that run builds/tests on a per-package basis may well want to use `\"upward\"` since monorepos often have a [`babel.config.json`](../config-files/index#project-wide-configuration) in the project root. Running Babel in a monorepo subdirectory without `\"upward\"`, will cause Babel to skip loading any [`babel.config.json`](../config-files/index#project-wide-configuration) files in the project root, which can lead to unexpected errors and compilation failure.\n\n### `envName`[​](#envname \"Direct link to envname\")\n\nType: `string`  \nDefault: `process.env.BABEL_ENV || process.env.NODE_ENV || \"development\"`  \nPlacement: Only allowed in Babel's programmatic options  \n\nThe current active environment used during configuration loading. This value is used as the key when resolving [`\"env\"`](#env) configs, and is also available inside configuration functions, plugins, and presets, via the [`api.env()`](../config-files/index#apienv) function.\n\n### `configFile`[​](#configfile \"Direct link to configfile\")\n\nType: `string | boolean`  \nDefault: `path.resolve(opts.root, \"babel.config.json\")`, if it exists, `false` otherwise  \nPlacement: Only allowed in Babel's programmatic options  \n\nDefaults to searching for a default `babel.config.json` file, but can be passed the path of any JS or JSON5 config file.\n\nNOTE: This option does *not* affect loading of [`.babelrc.json`](../config-files/index#file-relative-configuration) files, so while it may be tempting to do `configFile: \"./foo/.babelrc.json\"`, it is not recommended. If the given [`.babelrc.json`](../config-files/index#file-relative-configuration) is loaded via the standard file-relative logic, you'll end up loading the same config file twice, merging it with itself. If you are linking a specific config file, it is recommended to stick with a naming scheme that is independent of the \"babelrc\" name.\n\n### `babelrc`[​](#babelrc \"Direct link to babelrc\")\n\nType: `boolean`  \nDefault: `true` as long as the `filename` option has been specified  \nPlacement: Allowed in Babel's programmatic options, or inside of the loaded [`\"configFile\"`](#configfile). A programmatic option will override a config file one.  \n\n`true` will enable searching for [configuration files](../config-files/index#file-relative-configuration) relative to the [`\"filename\"`](#filename) provided to Babel.\n\nA `babelrc` value passed in the programmatic options will override one set within a configuration file.\n\nNote: `.babelrc.json` files are only loaded if the current [`\"filename\"`](#filename) is inside of a package that matches one of the [`\"babelrcRoots\"`](#babelrcroots) packages.\n\n### `babelrcRoots`[​](#babelrcroots \"Direct link to babelrcroots\")\n\nType: `boolean | MatchPattern | Array<MatchPattern>`  \nDefault: `opts.root`  \nPlacement: Allowed in Babel's programmatic options, or inside of the loaded `configFile`. A programmatic option will override a config file one.  \n\nBy default, Babel will only search for `.babelrc.json` files within the [`\"root\"`](#root) package because otherwise Babel cannot know if a given `.babelrc.json` is meant to be loaded, or if it's [`\"plugins\"`](#plugins) and [`\"presets\"`](#presets) have even been installed, since the file being compiled could be inside `node_modules`, or have been symlinked into the project.\n\nThis option allows users to provide a list of other packages that should be considered \"root\" packages when considering whether to load `.babelrc.json` files.\n\nFor example, a monorepo setup that wishes to allow individual packages to have their own configs might want to do\n\n``` js\nbabelrcRoots: [\n  // Keep the root as a root\n  \".\",\n\n  // Also consider monorepo packages \"root\" and load their .babelrc.json files.\n  \"./packages/*\",\n];\n```\n\n## Plugin and Preset options[​](#plugin-and-preset-options \"Direct link to Plugin and Preset options\")\n\n### `plugins`[​](#plugins \"Direct link to plugins\")\n\nType: `Array<PluginEntry | Plugin>` ([`PluginEntry`](#plugin-preset-entries))  \nDefault: `[]`  \n\nAn array of plugins to activate when processing this file. For more information on how individual entries interact, especially when used across multiple nested [`\"env\"`](#env) and [`\"overrides\"`](#overrides) configs, see [merging](#merging).\n\nNote: The option also allows `Plugin` instances from Babel itself, but using these directly is not recommended. If you need to create a persistent representation of a plugin or preset, you should use [`babel.createConfigItem()`](../babel-core/index#createconfigitem).\n\n### `presets`[​](#presets \"Direct link to presets\")\n\nType: `Array<PresetEntry>` ([`PresetEntry`](#plugin-preset-entries))  \nDefault: `[]`  \n\nAn array of presets to activate when processing this file. For more information on how individual entries interact, especially when used across multiple nested [`\"env\"`](#env) and [`\"overrides\"`](#overrides) configs, see [merging](#merging).\n\nNote: The format of presets is identical to plugins, except for the fact that name normalization expects \"preset-\" instead of \"plugin-\", and presets cannot be instances of `Plugin`.\n\n### `passPerPreset`[​](#passperpreset \"Direct link to passperpreset\")\n\nType: `boolean`  \nDefault: `false`  \nStatus: *Deprecated*  \n\nInstructs Babel to run each of the presets in the `presets` array as an independent pass. This option tends to introduce a lot of confusion around the exact ordering of plugins, but can be useful if you absolutely need to run a set of operations as independent compilation passes.\n\nNote: This option may be removed in future Babel versions as we add better support for defining ordering between plugins.\n\n## Output targets[​](#output-targets \"Direct link to Output targets\")\n\n### `targets`[​](#targets \"Direct link to targets\")\n\nType: `string | Array<string> | { [string]: string }`  \nDefault: `{}`  \nPlacement: Allowed in Babel's programmatic options, or in config files  \nAdded in: `v7.13.0`  \n\nHistory\n\n| Version   | Changes                |\n|-----------|------------------------|\n| `v7.20.0` | Support `deno` target  |\n| `v7.15.0` | Support `rhino` target |\n\nDescribes the environments you support/target for your project.\n\nThis can either be a [browserslist-compatible](https://github.com/ai/browserslist) query (with [caveats](../babel-preset-env/index#ineffective-browserslist-queries)):\n\n``` json\n{\n  \"targets\": \"> 0.25%, not dead\"\n}\n```\n\nOr an object of minimum environment versions to support:\n\n``` json\n{\n  \"targets\": {\n    \"chrome\": \"58\",\n    \"ie\": \"11\"\n  }\n}\n```\n\nSupported environments: `android`, `chrome`, `deno`, `edge`, `electron`, `firefox`, `ie`, `ios`, `node`, `opera`, `rhino`, `safari`, `samsung`.\n\nIf a minor version is not specified, Babel will interpret it as `MAJOR.0`. For example, `\"node\": 12` will be considered as Node.js 12.0.\n\n#### No targets[​](#no-targets \"Direct link to No targets\")\n\nWhen no targets are specified: Babel will assume you are targeting the oldest browsers possible. For example, `@babel/preset-env` will transform all ES2015-ES2020 code to be ES5 compatible.\n\n> We recommend setting `targets` to reduce the output code size.\n\n``` json\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\nBecause of this, Babel's behavior is different than [browserslist](https://github.com/browserslist/browserslist#queries): it does *not* use the `defaults` query when there are no targets are found in your Babel *or* browserslist config(s). If you want to use the `defaults` query, you will need to explicitly pass it as a target:\n\n``` json\n{\n  \"targets\": \"defaults\"\n}\n```\n\nWe recognize this isn’t ideal and will be revisiting this in Babel v8.\n\n#### `targets.esmodules`[​](#targetsesmodules \"Direct link to targetsesmodules\")\n\nType: `boolean`\n\nYou may also target browsers supporting ES Modules ([https://www.ecma-international.org/ecma-262/6.0/#sec-modules](https://www.ecma-international.org/ecma-262/6.0/#sec-modules)). When the `esmodules` target is specified, it will intersect with the `browsers` target and `browserslist`'s targets. You can use this approach in combination with `<script type=\"module\"></script>` to conditionally serve smaller scripts to users ([https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility](https://jakearchibald.com/2017/es-modules-in-browsers/#nomodule-for-backwards-compatibility)).\n\n> *Please note*: when specifying both `browsers` and the esmodules target, they will be intersected.\n\n``` json\n{\n  \"targets\": {\n    \"esmodules\": true\n  }\n}\n```\n\n#### `targets.node`[​](#targetsnode \"Direct link to targetsnode\")\n\nType: `string | \"current\" | true`.\n\nIf you want to compile against the current node version, you can specify `\"node\": true` or `\"node\": \"current\"`, which would be the same as `\"node\": process.versions.node`.\n\nAlternatively, you can specify the node version in a browserslist query:\n\n``` json\n{\n  \"targets\": \"node 12\" // not recommended\n}\n```\n\nIn this case, browserslist will resolve it to the *latest* version available in the `node-releases` library. Because Node.js may support new language features in minor releases, a program generated for Node.js 12.22 may throw a syntax error on Node.js 12.0. We recommend that you always specify a minor version when using node queries with browserslist:\n\n``` json\n{\n  \"targets\": \"node 12.0\"\n}\n```\n\n#### `targets.safari`[​](#targetssafari \"Direct link to targetssafari\")\n\nType: `string | \"tp\"`.\n\nIf you want to compile against the [technology preview](https://developer.apple.com/safari/technology-preview/) version of Safari, you can specify `\"safari\": \"tp\"`.\n\n#### `targets.browsers`[​](#targetsbrowsers \"Direct link to targetsbrowsers\")\n\nType: `string | Array<string>`.\n\nA query to select browsers (ex: last 2 versions, \\> 5%, safari tp) using [browserslist](https://github.com/ai/browserslist).\n\nNote, browsers' results are overridden by explicit items from `targets`.\n\n#### `targets.deno`[​](#targetsdeno \"Direct link to targetsdeno\")\n\nType: `string`.\n\nThe minimum supported version is 1.0.\n\n``` json\n{\n  \"targets\": {\n    \"deno\": \"1.9\"\n  }\n}\n```\n\n### `browserslistConfigFile`[​](#browserslistconfigfile \"Direct link to browserslistconfigfile\")\n\nType: `boolean`  \nDefault: `true`  \nPlacement: Allowed in Babel's programmatic options, or in config files  \nAdded in: `v7.13.0`  \n\nToggles whether or not [browserslist config sources](https://github.com/ai/browserslist#queries) are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json. This is useful for projects that use a browserslist config for files that won't be compiled with Babel.\n\nIf a string is specified, it must represent the path of a browserslist configuration file. Relative paths are resolved relative to the configuration file which specifies this option, or to `cwd` when it's passed as part of the programmatic options.\n\n### `browserslistEnv`[​](#browserslistenv \"Direct link to browserslistenv\")\n\nType: `string`  \nDefault: `undefined`  \nPlacement: Allowed in Babel's programmatic options, or in config files  \nAdded in: `v7.13.0`  \n\nThe [Browserslist environment](https://github.com/browserslist/browserslist#configuring-for-different-environments) to use.\n\n## Config Merging options[​](#config-merging-options \"Direct link to Config Merging options\")\n\n### `extends`[​](#extends \"Direct link to extends\")\n\nType: `string`  \nPlacement: Not allowed inside of presets  \n\nConfigs may \"extend\" other configuration files. Config fields in the current config will be [merged](#merging) on top of the extended file's configuration.\n\n### `env`[​](#env \"Direct link to env\")\n\nType: `{ [envKey: string]: Options }`  \nPlacement: May not be nested inside of another `env` block.  \n\nAllows for entire nested configuration options that will only be enabled if the `envKey` matches the `envName` option.\n\nNote: `env[envKey]` options will be [merged](#merging) on top of the options specified in the root object.\n\n### `overrides`[​](#overrides \"Direct link to overrides\")\n\nType: `Array<Options>`  \nPlacement: May not be nested inside of another `overrides` object, or within an `env` block.  \n\nAllows users to provide an array of options that will be [merged](#merging) into the current configuration one at a time. This feature is best used alongside the [`\"test\"`](#test)/[`\"include\"`](#include)/[`\"exclude\"`](#exclude) options to provide conditions for which an override should apply. For example:\n\n``` js\noverrides: [{\n  test: \"./vendor/large.min.js\",\n  compact: true,\n}],\n```\n\ncould be used to enable the `compact` option for one specific file that is known to be large and minified, and tell Babel not to bother trying to print the file nicely.\n\n### `test`[​](#test \"Direct link to test\")\n\nType: `MatchPattern | Array<MatchPattern>` ([`MatchPattern`](#matchpattern))  \n\nIf all patterns fail to match, the current configuration object is considered inactive and is ignored during config processing. This option is most useful when used within an `overrides` option object, but it's allowed anywhere.\n\nNote: These toggles do not affect the programmatic and config-loading options in earlier sections, since they are taken into account long before the configuration that is prepared for merging.\n\n### `include`[​](#include \"Direct link to include\")\n\nType: `MatchPattern | Array<MatchPattern>` ([`MatchPattern`](#matchpattern))  \n\nThis option is a synonym for [`\"test\"`](#test).\n\n### `exclude`[​](#exclude \"Direct link to exclude\")\n\nType: `MatchPattern | Array<MatchPattern>` ([`MatchPattern`](#matchpattern))  \n\nIf any of patterns match, the current configuration object is considered inactive and is ignored during config processing. This option is most useful when used within an `overrides` option object, but it's allowed anywhere.\n\nNote: These toggles do not affect the programmatic and config-loading options in earlier sections, since they are taken into account long before the configuration that is prepared for merging.\n\n### `ignore`[​](#ignore \"Direct link to ignore\")\n\nType: `Array<MatchPattern>` ([`MatchPattern`](#matchpattern))  \nPlacement: Not allowed inside of presets  \n\nIf any of the patterns match, Babel will immediately stop all processing of the current build. For example, a user may want to do something like\n\n``` js\nignore: [\"./lib\"];\n```\n\nto explicitly disable Babel compilation of files inside the `lib` directory.\n\nNote: This option disables *all* Babel processing of a file. While that has its uses, it is also worth considering the [`\"exclude\"`](#exclude) option as a less aggressive alternative.\n\n### `only`[​](#only \"Direct link to only\")\n\nType: `Array<MatchPattern>` ([`MatchPattern`](#matchpattern))  \nPlacement: Not allowed inside of presets  \n\nIf all of the patterns fail to match, Babel will immediately stop all processing of the current build. For example, a user may want to do something like\n\n``` js\nonly: [\"./src\"];\n```\n\nto explicitly enable Babel compilation of files inside the `src` directory while disabling everything else.\n\nNote: This option disables *all* Babel processing of a file. While that has its uses, it is also worth considering the [`\"test\"`](#test)/[`\"include\"`](#include) options as a less aggressive alternative.\n\n## Source Map options[​](#source-map-options \"Direct link to Source Map options\")\n\n### `inputSourceMap`[​](#inputsourcemap \"Direct link to inputsourcemap\")\n\nType: `boolean | SourceMap`  \nDefault: `true`  \n\n`true` will attempt to load an input sourcemap from the file itself, if it contains a `//# sourceMappingURL=...` comment. If no map is found, or the map fails to load and parse, it will be silently discarded.\n\nIf an object is provided, it will be treated as the source map object itself.\n\n### `sourceMaps`[​](#sourcemaps \"Direct link to sourcemaps\")\n\nType: `boolean | \"inline\" | \"both\"`  \nDefault: `false`  \n\n- `true` to generate a sourcemap for the code and include it in the result object.\n- `\"inline\"` to generate a sourcemap and append it as a data URL to the end of the code, but not include it in the result object.\n- `\"both\"` is the same as inline, but will include the map in the result object.\n\n`@babel/cli` overloads some of these to also affect how maps are written to disk:\n\n- `true` will write the map to a `.map` file on disk\n- `\"inline\"` will write the file directly, so it will have a `data:` containing the map\n- `\"both\"` will write the file with a `data:` URL and *also* a `.map`.\n\nNote: These options are bit weird, so it may make the most sense to just use `true` and handle the rest in your own code, depending on your use case.\n\n### `sourceMap`[​](#sourcemap \"Direct link to sourcemap\")\n\nThis is an synonym for `sourceMaps`. Using `sourceMaps` is recommended.\n\n### `sourceFileName`[​](#sourcefilename \"Direct link to sourcefilename\")\n\nType: `string`  \nDefault: `path.basename(opts.filenameRelative)` when available, or `\"unknown\"`  \n\nThe name to use for the file inside the source map object.\n\n### `sourceRoot`[​](#sourceroot \"Direct link to sourceroot\")\n\nType: `string`  \n\nThe `sourceRoot` fields to set in the generated source map, if one is desired.\n\n## Misc options[​](#misc-options \"Direct link to Misc options\")\n\n### `sourceType`[​](#sourcetype \"Direct link to sourcetype\")\n\nType: `\"script\" | \"module\" | \"unambiguous\"`  \nDefault: \"module\"  \n\n- `\"script\"` - Parse the file using the ECMAScript Script grammar. No `import`/`export` statements allowed, and files are not in strict mode.\n- `\"module\"` - Parse the file using the ECMAScript Module grammar. Files are automatically strict, and `import`/`export` statements are allowed.\n- `\"unambiguous\"` - Consider the file a \"module\" if `import`/`export` statements are present, or else consider it a \"script\".\n\n`unambiguous` can be quite useful in contexts where the type is unknown, but it can lead to false matches because it's perfectly valid to have a module file that does not use `import`/`export` statements.\n\nThis option is important because the type of the current file affects both parsing of input files, and certain transforms that may wish to add `import`/`require` usage to the current file.\n\nFor instance, [`@babel/plugin-transform-runtime`](../babel-plugin-transform-runtime/index) relies on the type of the current document to decide whether to insert an `import` declaration, or a `require()` call. [`@babel/preset-env`](../babel-preset-env/index) also does the same for its [`\"useBuiltIns\"`](../babel-preset-env/index#usebuiltins) option. Since Babel defaults to treating files are ES modules, generally these plugins/presets will insert `import` statements. Setting the correct `sourceType` can be important because having the wrong type can lead to cases where Babel would insert `import` statements into files that are meant to be CommonJS files. This can be particularly important in projects where compilation of `node_modules` dependencies is being performed, because inserting an `import` statements can cause Webpack and other tooling to see a file as an ES module, breaking what would otherwise be a functional CommonJS file.\n\nNote: This option will not affect parsing of `.mjs` files, as they are currently hard-coded to always parse as `\"module\"` files.\n\n### `assumptions`[​](#assumptions \"Direct link to assumptions\")\n\nType: `{ [assumption: string]: boolean }`  \nDefault: `{}`  \nAdded in: `v7.13.0`  \nPlacement: Allowed in programmatic options, config files and presets.  \n\nSet assumptions that Babel can make in order to produce smaller output:\n\n``` json\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  },\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\nFor more informations, check the [assumptions](../assumptions/index) documentation page.\n\n### `highlightCode`[​](#highlightcode \"Direct link to highlightcode\")\n\nType: `boolean`  \nDefault: `true`  \n\nHighlight tokens in code snippets in Babel's error messages to make them easier to read.\n\n### `wrapPluginVisitorMethod`[​](#wrappluginvisitormethod \"Direct link to wrappluginvisitormethod\")\n\nType: `(key: string, nodeType: string, fn: Function) => Function`  \n\nAllows users to add a wrapper on each visitor in order to inspect the visitor process as Babel executes the plugins.\n\n- `key` is a simple opaque string that represents the plugin being executed.\n- `nodeType` is the type of AST node currently being visited.\n- `fn` is the visitor function itself.\n\nUsers can return a replacement function that should call the original function after performing whatever logging and analysis they wish to do.\n\n### `parserOpts`[​](#parseropts \"Direct link to parseropts\")\n\nType: `{}`  \n\nAn opaque object containing options to pass through to the parser being used.\n\nFor available parser options, see [Parser Options](../babel-parser/index#options).\n\n### `generatorOpts`[​](#generatoropts \"Direct link to generatoropts\")\n\nType: `{}`  \n\nAn opaque object containing options to pass through to the code generator being used. See [Code Generator Options](#code-generator-options) for most used options.\n\n## Code Generator options[​](#code-generator-options \"Direct link to Code Generator options\")\n\n### `retainLines`[​](#retainlines \"Direct link to retainlines\")\n\nType: `boolean`  \nDefault: `false`  \n\nBabel will make an effort to generate code such that items are printed on the same line that they were on in the original file. This option exists so that users who cannot use source maps can get vaguely useful error line numbers, but it is only a best-effort, and is not guaranteed in all cases with all plugins.\n\n### `compact`[​](#compact \"Direct link to compact\")\n\nType: `boolean | \"auto\"`  \nDefault: `\"auto\"`  \n\n\"auto\" will set the value by evaluating `code.length > 500_000`\n\nAll optional newlines and whitespace will be omitted when generating code in compact mode.\n\n### `minified`[​](#minified \"Direct link to minified\")\n\nType: `boolean`  \nDefault: `false`  \n\nIncludes `compact: true`, omits block-end semicolons, omits `()` from `new Foo()` when possible, and may output shorter versions of literals.\n\n### `auxiliaryCommentBefore`[​](#auxiliarycommentbefore \"Direct link to auxiliarycommentbefore\")\n\nType: `string`  \n\nAllows specifying a prefix comment to insert before pieces of code that were not present in the original file.\n\nNote: The definition of what is and isn't present in the original file can get a little ugly, so usage of this option is *not recommended*. If you need to annotate code somehow, it is better to do so using a Babel plugin.\n\n### `auxiliaryCommentAfter`[​](#auxiliarycommentafter \"Direct link to auxiliarycommentafter\")\n\nType: `string`  \n\nAllows specifying a prefix comment to insert after pieces of code that were not present in the original file.\n\nNote: The definition of what is and isn't present in the original file can get a little ugly, so usage of this option is *not recommended*. If you need to annotate code somehow, it is better to do so using a Babel plugin.\n\n### `comments`[​](#comments \"Direct link to comments\")\n\nType: `boolean`  \nDefault: `true`  \n\nProvides a default comment state for `shouldPrintComment` if no function is given. See the default value of that option for more info.\n\n### `shouldPrintComment`[​](#shouldprintcomment \"Direct link to shouldprintcomment\")\n\nType: `(value: string) => boolean`  \nDefault without `minified`: `(val) => opts.comments || /@license|@preserve/.test(val)`  \nDefault with `minified`: `() => opts.comments`  \n\nA function that can decide whether a given comment should be included in the output code from Babel.\n\n### Advanced Usage[​](#advanced-usage \"Direct link to Advanced Usage\")\n\nFor more code generator options, see [Generator Options](../babel-generator/index#options).\n\n## AMD / UMD / SystemJS module options[​](#amd--umd--systemjs-module-options \"Direct link to AMD / UMD / SystemJS module options\")\n\n### `moduleIds`[​](#moduleids \"Direct link to moduleids\")\n\nType: `boolean`  \nDefault: `!!opts.moduleId`  \n\nEnables module ID generation.\n\n### `moduleId`[​](#moduleid \"Direct link to moduleid\")\n\nType: `string`  \n\nA hard-coded ID to use for the module. Cannot be used alongside `getModuleId`.\n\n### `getModuleId`[​](#getmoduleid \"Direct link to getmoduleid\")\n\nType: `(name: string) => string`  \n\nGiven the babel-generated module name, return the name to use. Returning a falsy value will use the original `name`.\n\n### `moduleRoot`[​](#moduleroot \"Direct link to moduleroot\")\n\nType: `string`  \n\nA root path to include on generated module names.\n\n## Options Concepts[​](#options-concepts \"Direct link to Options Concepts\")\n\n### `MatchPattern`[​](#matchpattern \"Direct link to matchpattern\")\n\nType: `string | RegExp | (filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string ) => boolean`\n\nSeveral Babel options perform tests against file paths. In general, these options support a common pattern approach where each pattern can be\n\n- `string` - A file path with simple support for `*` and `**` as full slug matches. Any file or parent folder matching the pattern counts as a match. The path follow's Node's normal path logic, so on POSIX is must be `/`-separated, but on Windows both `/` and `\\` are supported.\n- `RegExp` - A regular expression to match against the normalized filename. On POSIX the path RegExp will run against a `/`-separated path, and on Windows it will be on a `\\`-separated path.\n\nImportantly, if either of these are used, Babel requires that the `filename` option be present, and will consider it an error otherwise.\n\n- `(filename: string | void, context: { caller: { name: string } | void, envName: string, dirname: string }) => boolean` is a general callback that should return a boolean to indicate whether it is a match or not. The function is passed the filename or `undefined` if one was not given to Babel. It is also passed the current `envName` and `caller` options that were specified by the top-level call to Babel and `dirname` that is either a directory of the configuration file or the current working directory (if the transformation was called programmatically).\n\n### Merging[​](#merging \"Direct link to Merging\")\n\nPlease refer to [How Babel merges config items](https://babeljs.io/docs/configuration#how-babel-merges-config-items).\n\n### Plugin/Preset entries[​](#pluginpreset-entries \"Direct link to Plugin/Preset entries\")\n\n#### `PluginEntry` / `PresetEntry`[​](#pluginentry--presetentry \"Direct link to pluginentry--presetentry\")\n\nIndividual plugin/preset items can have several different structures:\n\n- `EntryTarget` - Individual plugin\n- `[EntryTarget, EntryOptions]` - Individual plugin w/ options\n- `[EntryTarget, EntryOptions, string]` - Individual plugin with options and name (see [merging](#merging) for more info on names)\n- `ConfigItem` - A plugin configuration item created by `babel.createConfigItem()`.\n\nThe same `EntryTarget` may be used multiple times unless each one is given a different name, and doing so will result in a duplicate-plugin/preset error.\n\nThat can be a little hard to read, so as an example:\n\n``` js\nplugins: [\n  // EntryTarget\n  '@babel/plugin-transform-classes',\n\n  // [EntryTarget, EntryOptions]\n  ['@babel/plugin-transform-arrow-functions', { spec: true }],\n\n  // [EntryTarget, EntryOptions, string]\n  ['@babel/plugin-transform-for-of', { loose: true }, \"some-name\"],\n\n  // ConfigItem\n  babel.createConfigItem(require(\"@babel/plugin-transform-spread\")),\n],\n```\n\n#### `EntryTarget`[​](#entrytarget \"Direct link to entrytarget\")\n\nType: `string | {} | Function`  \n\nA plugin/preset target can come from a few different sources:\n\n- `string` - A `require`-style path or plugin/preset identifier. Identifiers will be passed through [name normalization](#name-normalization).\n- `{} | Function` - An actual plugin/preset object or function after it has been `require()`ed.\n\n#### `EntryOptions`[​](#entryoptions \"Direct link to entryoptions\")\n\nType: `undefined | {} | false`\n\nOptions are passed through to each plugin/preset when they are executed. `undefined` will be normalized to an empty object.\n\n`false` indicates that an entry is entirely disabled. This can be useful in contexts where ordering is important, but a separate condition is needed to decide if something is enabled. For instance:\n\n``` js\nplugins: [\n  'one',\n  ['two', false],\n  'three',\n],\noverrides: [{\n  test: \"./src\",\n  plugins: [\n    'two',\n  ]\n}]\n```\n\nwould enable the `two` plugin for files in `src`, but `two` would still execute between `one` and `three`.\n\n### Name Normalization[​](#name-normalization \"Direct link to Name Normalization\")\n\nBy default, Babel expects plugins to have a `babel-plugin-` or `babel-preset-` prefix in their name. To avoid repetition, Babel has a name normalization phase will automatically add these prefixes when loading items. This boils down to a few primary rules:\n\n- Absolute paths pass through untouched.\n- Relative paths starting with `./` pass through untouched.\n- References to files *within* a package are untouched.\n- Any identifier prefixed with `module:` will have the prefix removed but otherwise be untouched.\n- `plugin-`/`preset-` will be injected at the start of any `@babel`-scoped package that doesn't have it as a prefix.\n- `babel-plugin-`/`babel-preset-` will be injected as a prefix any unscoped package that doesn't have it as a prefix.\n- `babel-plugin-`/`babel-preset-` will be injected as a prefix any `@`-scoped package that doesn't have it *anywhere* in their name.\n- `babel-plugin`/`babel-preset` will be injected as the package name if only the `@`-scope name is given.\n\nHere are some examples, when applied in a plugin context:\n\n| Input                              | Normalized                         |\n|------------------------------------|------------------------------------|\n| `\"/dir/plugin.js\"`                 | `\"/dir/plugin.js\"`                 |\n| `\"./dir/plugin.js\"`                | `\"./dir/plugin.js\"`                |\n| `\"mod\"`                            | `\"babel-plugin-mod\"`               |\n| `\"mod/plugin\"`                     | `\"mod/plugin\"`                     |\n| `\"babel-plugin-mod\"`               | `\"babel-plugin-mod\"`               |\n| `\"@babel/mod\"`                     | `\"@babel/plugin-mod\"`              |\n| `\"@babel/plugin-mod\"`              | `\"@babel/plugin-mod\"`              |\n| `\"@babel/mod/plugin\"`              | `\"@babel/mod/plugin\"`              |\n| `\"@scope\"`                         | `\"@scope/babel-plugin\"`            |\n| `\"@scope/babel-plugin\"`            | `\"@scope/babel-plugin\"`            |\n| `\"@scope/mod\"`                     | `\"@scope/babel-plugin-mod\"`        |\n| `\"@scope/babel-plugin-mod\"`        | `\"@scope/babel-plugin-mod\"`        |\n| `\"@scope/prefix-babel-plugin-mod\"` | `\"@scope/prefix-babel-plugin-mod\"` |\n| `\"@scope/mod/plugin\"`              | `\"@scope/mod/plugin\"`              |\n| `\"module:foo\"`                     | `\"foo\"`                            |\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/options/](https://babeljs.io/docs/options/)"
- name: Plugins
  id: plugins/index
  summary: Babel's code transformations are enabled by applying plugins (or presets) to your configuration file
  description: "# Plugins\n\nBabel's code transformations are enabled by applying plugins (or [presets](https://babeljs.io/docs/presets)) to your [configuration file](../config-files/index).\n\n## Using a Plugin[​](#using-a-plugin \"Direct link to Using a Plugin\")\n\nIf the plugin is on [npm](https://www.npmjs.com/search?q=babel-plugin), you can pass in the name of the plugin and Babel will check that it's installed in `node_modules`. This is added to the [plugins](../options/index#presets) config option, which takes an array.\n\n``` json\n{\n  \"plugins\": [\"babel-plugin-myPlugin\", \"@babel/plugin-transform-runtime\"]\n}\n```\n\nYou can also specify an relative/absolute path to your plugin.\n\n``` json\n{\n  \"plugins\": [\"./node_modules/asdf/plugin\"]\n}\n```\n\nSee [name normalization](../options/index#name-normalization) for more specifics on configuring the path of a plugin or preset.\n\n## Transform Plugins[​](#transform-plugins \"Direct link to Transform Plugins\")\n\nThese plugins apply transformations to your code.\n\ninfo\n\nTransform plugins will enable the corresponding syntax plugin so you don't have to specify both.\n\n## Syntax Plugins[​](#syntax-plugins \"Direct link to Syntax Plugins\")\n\nMost syntax is transformable by Babel. In rarer cases (if the transform isn't implemented yet, or there isn't a default way to do so), you can use plugins such as `@babel/plugin-syntax-bigint` to only allow Babel to **parse** specific types of syntax. Or you want to preserve the source code because you only want Babel to do code analysis or codemods.\n\n> NOTE: You don't need to specify the syntax plugin if the corresponding transform plugin is used already, since it enables it automatically.\n\nAlternatively, you can also provide any [`plugins` option](../babel-parser/index#plugins) from the Babel parser:\n\nYour `.babelrc`:\n\n``` json\n{\n  \"parserOpts\": {\n    \"plugins\": [\"jsx\", \"flow\"]\n  }\n}\n```\n\n## Plugin Ordering[​](#plugin-ordering \"Direct link to Plugin Ordering\")\n\n> Ordering matters for each visitor in the plugin.\n\nThis means if two transforms both visit the \"Program\" node, the transforms will run in either plugin or preset order.\n\n- Plugins run before Presets.\n- Plugin ordering is first to last.\n- Preset ordering is reversed (last to first).\n\nFor example:\n\n``` json\n{\n  \"plugins\": [\"transform-decorators-legacy\", \"transform-class-properties\"]\n}\n```\n\nWill run `transform-decorators-legacy` then `transform-class-properties`.\n\nIt is important to remember that with presets, the order is *reversed*. The following:\n\n``` json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\nWill run in the following order: `@babel/preset-react` then `@babel/preset-env`.\n\n## Plugin Options[​](#plugin-options \"Direct link to Plugin Options\")\n\nBoth plugins and presets can have options specified by wrapping the name and an options object in an array inside your config.\n\nFor specifying no options, these are all equivalent:\n\n``` json\n{\n  \"plugins\": [\"pluginA\", [\"pluginA\"], [\"pluginA\", {}]]\n}\n```\n\nTo specify an option, pass an object with the keys as the option names.\n\n``` json\n{\n  \"plugins\": [\n    [\n      \"transform-async-to-module-method\",\n      {\n        \"module\": \"bluebird\",\n        \"method\": \"coroutine\"\n      }\n    ]\n  ]\n}\n```\n\nSettings options for presets works exactly the same:\n\n``` json\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"loose\": true,\n        \"modules\": false\n      }\n    ]\n  ]\n}\n```\n\n## Plugin Development[​](#plugin-development \"Direct link to Plugin Development\")\n\nPlease refer to the excellent [babel-handbook](https://github.com/thejameskyle/babel-handbook) to learn how to create your own plugins.\n\nThe simple plugin that reverses names (from the homepage):\n\n``` js\nexport default function() {\n  return {\n    visitor: {\n      Identifier(path) {\n        const name = path.node.name;\n        // reverse the name: JavaScript -> tpircSavaJ\n        path.node.name = name\n          .split(\"\")\n          .reverse()\n          .join(\"\");\n      },\n    },\n  };\n}\n```\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/plugins/](https://babeljs.io/docs/plugins/)"
- name: Plugins List
  id: plugins-list/index
  summary: © 2014-present Sebastian McKenzie Licensed under the MIT License
  description: "# Plugins List\n\n## JavaScript[​](#javascript \"Direct link to JavaScript\")\n\n### TC39 Proposals[​](#tc39-proposals \"Direct link to TC39 Proposals\")\n\n- [decorators](../babel-plugin-proposal-decorators/index)\n- [do-expressions](../babel-plugin-proposal-do-expressions/index)\n- [duplicate-named-capturing-groups-regex](../babel-plugin-proposal-duplicate-named-capturing-groups-regex/index)\n- [export-default-from](../babel-plugin-proposal-export-default-from/index)\n- [export-namespace-from](../babel-plugin-proposal-export-namespace-from/index)\n- [function-bind](../babel-plugin-proposal-function-bind/index)\n- [function-sent](../babel-plugin-proposal-function-sent/index)\n- [partial-application](../babel-plugin-proposal-partial-application/index)\n- [pipeline-operator](../babel-plugin-proposal-pipeline-operator/index)\n- [private-methods](../babel-plugin-proposal-private-methods/index)\n- [throw-expressions](../babel-plugin-proposal-throw-expressions/index)\n- [record-and-tuple](../babel-plugin-proposal-record-and-tuple/index)\n\n### ES2022[​](#es2022 \"Direct link to ES2022\")\n\n- [class-properties](../babel-plugin-proposal-class-properties/index)\n- [class-static-block](../babel-plugin-proposal-class-static-block/index)\n- [private-property-in-object](../babel-plugin-proposal-private-property-in-object/index)\n- [syntax-top-level-await](../babel-plugin-syntax-top-level-await/index)\n\n### ES2021[​](#es2021 \"Direct link to ES2021\")\n\n- [logical-assignment-operators](../babel-plugin-proposal-logical-assignment-operators/index)\n- [numeric-separator](../babel-plugin-proposal-numeric-separator/index)\n\n### ES2020[​](#es2020 \"Direct link to ES2020\")\n\n- [export-namespace-from](../babel-plugin-proposal-export-namespace-from/index)\n- [nullish-coalescing-operator](../babel-plugin-proposal-nullish-coalescing-operator/index)\n- [optional-chaining](../babel-plugin-proposal-optional-chaining/index)\n- [syntax-dynamic-import](../babel-plugin-syntax-dynamic-import/index)\n- [syntax-import-meta](../babel-plugin-syntax-import-meta/index)\n- [syntax-bigint](../babel-plugin-syntax-bigint/index)\n\n### ES2019[​](#es2019 \"Direct link to ES2019\")\n\n- [optional-catch-binding](../babel-plugin-proposal-optional-catch-binding/index)\n- [json-strings](../babel-plugin-proposal-json-strings/index)\n\n### ES2018[​](#es2018 \"Direct link to ES2018\")\n\n- [async-generator-functions](../babel-plugin-proposal-async-generator-functions/index)\n- [dotall-regex](../babel-plugin-transform-dotall-regex/index)\n- [named-capturing-groups-regex](../babel-plugin-transform-named-capturing-groups-regex/index)\n- [object-rest-spread](../babel-plugin-proposal-object-rest-spread/index)\n- [unicode-property-regex](../babel-plugin-proposal-unicode-property-regex/index)\n\n### ES2017[​](#es2017 \"Direct link to ES2017\")\n\n- [async-to-generator](../babel-plugin-transform-async-to-generator/index)\n\n### ES2016[​](#es2016 \"Direct link to ES2016\")\n\n- [exponentiation-operator](../babel-plugin-transform-exponentiation-operator/index)\n\n### ES2015[​](#es2015 \"Direct link to ES2015\")\n\n- [arrow-functions](../babel-plugin-transform-arrow-functions/index)\n- [block-scoped-functions](../babel-plugin-transform-block-scoped-functions/index)\n- [block-scoping](../babel-plugin-transform-block-scoping/index)\n- [classes](../babel-plugin-transform-classes/index)\n- [computed-properties](../babel-plugin-transform-computed-properties/index)\n- [destructuring](../babel-plugin-transform-destructuring/index)\n- [duplicate-keys](../babel-plugin-transform-duplicate-keys/index)\n- [for-of](../babel-plugin-transform-for-of/index)\n- [function-name](../babel-plugin-transform-function-name/index)\n- [instanceof](../babel-plugin-transform-instanceof/index)\n- [literals](../babel-plugin-transform-literals/index)\n- [new-target](../babel-plugin-transform-new-target/index)\n- [object-super](../babel-plugin-transform-object-super/index)\n- [parameters](../babel-plugin-transform-parameters/index)\n- [shorthand-properties](../babel-plugin-transform-shorthand-properties/index)\n- [spread](../babel-plugin-transform-spread/index)\n- [sticky-regex](../babel-plugin-transform-sticky-regex/index)\n- [template-literals](../babel-plugin-transform-template-literals/index)\n- [typeof-symbol](../babel-plugin-transform-typeof-symbol/index)\n- [unicode-escapes](../babel-plugin-transform-unicode-escapes/index)\n- [unicode-regex](../babel-plugin-transform-unicode-regex/index)\n\n### ES5[​](#es5 \"Direct link to ES5\")\n\n- [property-mutators](../babel-plugin-transform-property-mutators/index)\n\n### ES3[​](#es3 \"Direct link to ES3\")\n\n- [member-expression-literals](../babel-plugin-transform-member-expression-literals/index)\n- [property-literals](../babel-plugin-transform-property-literals/index)\n- [reserved-words](../babel-plugin-transform-reserved-words/index)\n\n### Module Formats[​](#module-formats \"Direct link to Module Formats\")\n\n- [modules-amd](../babel-plugin-transform-modules-amd/index)\n- [modules-commonjs](../babel-plugin-transform-modules-commonjs/index)\n- [modules-systemjs](../babel-plugin-transform-modules-systemjs/index)\n- [modules-umd](../babel-plugin-transform-modules-umd/index)\n\n### React[​](#react \"Direct link to React\")\n\n- [react-constant-elements](../babel-plugin-transform-react-constant-elements/index)\n- [react-inline-elements](../babel-plugin-transform-react-inline-elements/index)\n\n#### React Preset[​](#react-preset \"Direct link to React Preset\")\n\n- [react-display-name](../babel-plugin-transform-react-display-name/index)\n- [react-jsx](../babel-plugin-transform-react-jsx/index)\n- [react-jsx-compat](../babel-plugin-transform-react-jsx-compat/index)\n- [react-jsx-self](../babel-plugin-transform-react-jsx-self/index)\n- [react-jsx-source](../babel-plugin-transform-react-jsx-source/index)\n\n### Flow[​](#flow \"Direct link to Flow\")\n\n- [flow-strip-types](../babel-plugin-transform-flow-strip-types/index)\n\n### TypeScript[​](#typescript \"Direct link to TypeScript\")\n\n- [typescript](../babel-plugin-transform-typescript/index)\n\n### Misc[​](#misc \"Direct link to Misc\")\n\n- [external-helpers](../babel-plugin-external-helpers/index)\n- [jscript](../babel-plugin-transform-jscript/index)\n- [object-assign](../babel-plugin-transform-object-assign/index)\n- [object-set-prototype-of-to-assign](../babel-plugin-transform-object-set-prototype-of-to-assign/index)\n- [proto-to-assign](../babel-plugin-transform-proto-to-assign/index)\n- [regenerator](../babel-plugin-transform-regenerator/index)\n- [runtime](../babel-plugin-transform-runtime/index)\n- [strict-mode](../babel-plugin-transform-strict-mode/index)\n\n#### Syntax Only[​](#syntax-only \"Direct link to Syntax Only\")\n\n- [syntax-bigint](../babel-plugin-syntax-bigint/index) (ES2020)\n- [syntax-dynamic-import](../babel-plugin-syntax-dynamic-import/index) (ES2020)\n- [syntax-import-meta](../babel-plugin-syntax-import-meta/index) (ES2020)\n- [syntax-top-level-await](../babel-plugin-syntax-top-level-await/index) (ES2022)\n\n© 2014-present Sebastian McKenzie  \nLicensed under the MIT License.  \n[https://babeljs.io/docs/plugins-list/](https://babeljs.io/docs/plugins-list/)"
